"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[3329],{68990:function(t,i,n){n.d(i,{Z:function(){return C}});var e=n(82482),o=n(14034),s=n(53630);const r=()=>{},a={BREAK:1,SNAP_TO_END:2,IGNORE:3},h=t=>t,p=a.BREAK;class g{constructor(t){(0,e.Z)(this,"getControllerState",void 0),(0,e.Z)(this,"props",void 0),(0,e.Z)(this,"propsInTransition",void 0),(0,e.Z)(this,"transition",void 0),(0,e.Z)(this,"onViewStateChange",void 0),(0,e.Z)(this,"onStateChange",void 0),(0,e.Z)(this,"_onTransitionUpdate",(t=>{const{time:i,settings:{interpolator:n,startProps:e,endProps:o,duration:s,easing:r}}=t,a=r(i/s),h=n.interpolateProps(e,o,a);this.propsInTransition=this.getControllerState({...this.props,...h}).getViewportProps(),this.onViewStateChange({viewState:this.propsInTransition,oldViewState:this.props})})),this.getControllerState=t.getControllerState,this.propsInTransition=null,this.transition=new s.Z(t.timeline),this.onViewStateChange=t.onViewStateChange||r,this.onStateChange=t.onStateChange||r}finalize(){this.transition.cancel()}getViewportInTransition(){return this.propsInTransition}processViewStateChange(t){let i=!1;const n=this.props;if(this.props=t,!n||this._shouldIgnoreViewportChange(n,t))return!1;if(this._isTransitionEnabled(t)){let e=n;if(this.transition.inProgress){const{interruption:t,endProps:i}=this.transition.settings;e={...n,...t===a.SNAP_TO_END?i:this.propsInTransition||n}}this._triggerTransition(e,t),i=!0}else this.transition.cancel();return i}updateTransition(){this.transition.update()}_isTransitionEnabled(t){const{transitionDuration:i,transitionInterpolator:n}=t;return(i>0||"auto"===i)&&Boolean(n)}_isUpdateDueToCurrentTransition(t){return!(!this.transition.inProgress||!this.propsInTransition)&&this.transition.settings.interpolator.arePropsEqual(t,this.propsInTransition)}_shouldIgnoreViewportChange(t,i){return this.transition.inProgress?this.transition.settings.interruption===a.IGNORE||this._isUpdateDueToCurrentTransition(i):!this._isTransitionEnabled(i)||i.transitionInterpolator.arePropsEqual(t,i)}_triggerTransition(t,i){const n=this.getControllerState(t),e=this.getControllerState(i).shortestPathFrom(n),o=i.transitionInterpolator,s=o.getDuration?o.getDuration(t,i):i.transitionDuration;if(0===s)return;const r=o.initializeProps(t,e);this.propsInTransition={};const a={duration:s,easing:i.transitionEasing||h,interpolator:o,interruption:i.transitionInterruption||p,startProps:r.start,endProps:r.end,onStart:i.onTransitionStart,onUpdate:this._onTransitionUpdate,onInterrupt:this._onTransitionEnd(i.onTransitionInterrupt),onEnd:this._onTransitionEnd(i.onTransitionEnd)};this.transition.start(a),this.onStateChange({inTransition:!0}),this.updateTransition()}_onTransitionEnd(t){return i=>{this.propsInTransition=null,this.onStateChange({inTransition:!1,isZooming:!1,isPanning:!1,isRotating:!1}),null===t||void 0===t||t(i)}}}var l=n(71958);const c={transitionDuration:0},u=300,d=t=>1-(1-t)*(1-t),P={WHEEL:["wheel"],PAN:["panstart","panmove","panend"],PINCH:["pinchstart","pinchmove","pinchend"],TRIPLE_PAN:["tripanstart","tripanmove","tripanend"],DOUBLE_TAP:["doubletap"],KEYBOARD:["keydown"]},m={};class _{constructor(t){(0,e.Z)(this,"props",void 0),(0,e.Z)(this,"state",{}),(0,e.Z)(this,"transitionManager",void 0),(0,e.Z)(this,"eventManager",void 0),(0,e.Z)(this,"onViewStateChange",void 0),(0,e.Z)(this,"onStateChange",void 0),(0,e.Z)(this,"makeViewport",void 0),(0,e.Z)(this,"_controllerState",void 0),(0,e.Z)(this,"_events",{}),(0,e.Z)(this,"_interactionState",{isDragging:!1}),(0,e.Z)(this,"_customEvents",[]),(0,e.Z)(this,"_eventStartBlocked",null),(0,e.Z)(this,"_panMove",!1),(0,e.Z)(this,"invertPan",!1),(0,e.Z)(this,"dragMode","rotate"),(0,e.Z)(this,"inertia",0),(0,e.Z)(this,"scrollZoom",!0),(0,e.Z)(this,"dragPan",!0),(0,e.Z)(this,"dragRotate",!0),(0,e.Z)(this,"doubleClickZoom",!0),(0,e.Z)(this,"touchZoom",!0),(0,e.Z)(this,"touchRotate",!1),(0,e.Z)(this,"keyboard",!0),this.transitionManager=new g({...t,getControllerState:t=>new this.ControllerState(t),onViewStateChange:this._onTransition.bind(this),onStateChange:this._setInteractionState.bind(this)}),this.handleEvent=this.handleEvent.bind(this),this.eventManager=t.eventManager,this.onViewStateChange=t.onViewStateChange||(()=>{}),this.onStateChange=t.onStateChange||(()=>{}),this.makeViewport=t.makeViewport}set events(t){this.toggleEvents(this._customEvents,!1),this.toggleEvents(t,!0),this._customEvents=t,this.props&&this.setProps(this.props)}finalize(){for(const i in this._events){var t;if(this._events[i])null===(t=this.eventManager)||void 0===t||t.off(i,this.handleEvent)}this.transitionManager.finalize()}handleEvent(t){this._controllerState=void 0;const i=this._eventStartBlocked;switch(t.type){case"panstart":return!i&&this._onPanStart(t);case"panmove":return this._onPan(t);case"panend":return this._onPanEnd(t);case"pinchstart":return!i&&this._onPinchStart(t);case"pinchmove":return this._onPinch(t);case"pinchend":return this._onPinchEnd(t);case"tripanstart":return!i&&this._onTriplePanStart(t);case"tripanmove":return this._onTriplePan(t);case"tripanend":return this._onTriplePanEnd(t);case"doubletap":return this._onDoubleTap(t);case"wheel":return this._onWheel(t);case"keydown":return this._onKeyDown(t);default:return!1}}get controllerState(){return this._controllerState=this._controllerState||new this.ControllerState({makeViewport:this.makeViewport,...this.props,...this.state}),this._controllerState}getCenter(t){const{x:i,y:n}=this.props,{offsetCenter:e}=t;return[e.x-i,e.y-n]}isPointInBounds(t,i){const{width:n,height:e}=this.props;if(i&&i.handled)return!1;const o=t[0]>=0&&t[0]<=n&&t[1]>=0&&t[1]<=e;return o&&i&&i.stopPropagation(),o}isFunctionKeyPressed(t){const{srcEvent:i}=t;return Boolean(i.metaKey||i.altKey||i.ctrlKey||i.shiftKey)}isDragging(){return this._interactionState.isDragging||!1}blockEvents(t){const i=setTimeout((()=>{this._eventStartBlocked===i&&(this._eventStartBlocked=null)}),t);this._eventStartBlocked=i}setProps(t){t.dragMode&&(this.dragMode=t.dragMode),this.props=t,"transitionInterpolator"in t||(t.transitionInterpolator=this._getTransitionProps().transitionInterpolator),this.transitionManager.processViewStateChange(t);const{inertia:i}=t;this.inertia=Number.isFinite(i)?i:!0===i?u:0;const{scrollZoom:n=!0,dragPan:e=!0,dragRotate:o=!0,doubleClickZoom:s=!0,touchZoom:r=!0,touchRotate:a=!1,keyboard:h=!0}=t,p=Boolean(this.onViewStateChange);this.toggleEvents(P.WHEEL,p&&n),this.toggleEvents(P.PAN,p&&(e||o)),this.toggleEvents(P.PINCH,p&&(r||a)),this.toggleEvents(P.TRIPLE_PAN,p&&a),this.toggleEvents(P.DOUBLE_TAP,p&&s),this.toggleEvents(P.KEYBOARD,p&&h),this.scrollZoom=n,this.dragPan=e,this.dragRotate=o,this.doubleClickZoom=s,this.touchZoom=r,this.touchRotate=a,this.keyboard=h}updateTransition(){this.transitionManager.updateTransition()}toggleEvents(t,i){this.eventManager&&t.forEach((t=>{this._events[t]!==i&&(this._events[t]=i,i?this.eventManager.on(t,this.handleEvent):this.eventManager.off(t,this.handleEvent))}))}updateViewport(t,i=null,n={}){const e={...t.getViewportProps(),...i},o=this.controllerState!==t;if(this.state=t.getState(),this._setInteractionState(n),o){const t=this.controllerState&&this.controllerState.getViewportProps();this.onViewStateChange&&this.onViewStateChange({viewState:e,interactionState:this._interactionState,oldViewState:t})}}_onTransition(t){this.onViewStateChange({...t,interactionState:this._interactionState})}_setInteractionState(t){Object.assign(this._interactionState,t),this.onStateChange(this._interactionState)}_onPanStart(t){const i=this.getCenter(t);if(!this.isPointInBounds(i,t))return!1;let n=this.isFunctionKeyPressed(t)||t.rightButton||!1;(this.invertPan||"pan"===this.dragMode)&&(n=!n);const e=this.controllerState[n?"panStart":"rotateStart"]({pos:i});return this._panMove=n,this.updateViewport(e,c,{isDragging:!0}),!0}_onPan(t){return!!this.isDragging()&&(this._panMove?this._onPanMove(t):this._onPanRotate(t))}_onPanEnd(t){return!!this.isDragging()&&(this._panMove?this._onPanMoveEnd(t):this._onPanRotateEnd(t))}_onPanMove(t){if(!this.dragPan)return!1;const i=this.getCenter(t),n=this.controllerState.pan({pos:i});return this.updateViewport(n,c,{isDragging:!0,isPanning:!0}),!0}_onPanMoveEnd(t){const{inertia:i}=this;if(this.dragPan&&i&&t.velocity){const n=this.getCenter(t),e=[n[0]+t.velocityX*i/2,n[1]+t.velocityY*i/2],o=this.controllerState.pan({pos:e}).panEnd();this.updateViewport(o,{...this._getTransitionProps(),transitionDuration:i,transitionEasing:d},{isDragging:!1,isPanning:!0})}else{const t=this.controllerState.panEnd();this.updateViewport(t,null,{isDragging:!1,isPanning:!1})}return!0}_onPanRotate(t){if(!this.dragRotate)return!1;const i=this.getCenter(t),n=this.controllerState.rotate({pos:i});return this.updateViewport(n,c,{isDragging:!0,isRotating:!0}),!0}_onPanRotateEnd(t){const{inertia:i}=this;if(this.dragRotate&&i&&t.velocity){const n=this.getCenter(t),e=[n[0]+t.velocityX*i/2,n[1]+t.velocityY*i/2],o=this.controllerState.rotate({pos:e}).rotateEnd();this.updateViewport(o,{...this._getTransitionProps(),transitionDuration:i,transitionEasing:d},{isDragging:!1,isRotating:!0})}else{const t=this.controllerState.rotateEnd();this.updateViewport(t,null,{isDragging:!1,isRotating:!1})}return!0}_onWheel(t){if(!this.scrollZoom)return!1;t.srcEvent.preventDefault();const i=this.getCenter(t);if(!this.isPointInBounds(i,t))return!1;const{speed:n=.01,smooth:e=!1}=!0===this.scrollZoom?{}:this.scrollZoom,{delta:o}=t;let s=2/(1+Math.exp(-Math.abs(o*n)));o<0&&0!==s&&(s=1/s);const r=this.controllerState.zoom({pos:i,scale:s});return this.updateViewport(r,{...this._getTransitionProps({around:i}),transitionDuration:e?250:1},{isZooming:!0,isPanning:!0}),!0}_onTriplePanStart(t){const i=this.getCenter(t);if(!this.isPointInBounds(i,t))return!1;const n=this.controllerState.rotateStart({pos:i});return this.updateViewport(n,c,{isDragging:!0}),!0}_onTriplePan(t){if(!this.touchRotate)return!1;if(!this.isDragging())return!1;const i=this.getCenter(t);i[0]-=t.deltaX;const n=this.controllerState.rotate({pos:i});return this.updateViewport(n,c,{isDragging:!0,isRotating:!0}),!0}_onTriplePanEnd(t){if(!this.isDragging())return!1;const{inertia:i}=this;if(this.touchRotate&&i&&t.velocityY){const n=this.getCenter(t),e=[n[0],n[1]+=t.velocityY*i/2],o=this.controllerState.rotate({pos:e});this.updateViewport(o,{...this._getTransitionProps(),transitionDuration:i,transitionEasing:d},{isDragging:!1,isRotating:!0}),this.blockEvents(i)}else{const t=this.controllerState.rotateEnd();this.updateViewport(t,null,{isDragging:!1,isRotating:!1})}return!0}_onPinchStart(t){const i=this.getCenter(t);if(!this.isPointInBounds(i,t))return!1;const n=this.controllerState.zoomStart({pos:i}).rotateStart({pos:i});return m._startPinchRotation=t.rotation,m._lastPinchEvent=t,this.updateViewport(n,c,{isDragging:!0}),!0}_onPinch(t){if(!this.touchZoom&&!this.touchRotate)return!1;if(!this.isDragging())return!1;let i=this.controllerState;if(this.touchZoom){const{scale:n}=t,e=this.getCenter(t);i=i.zoom({pos:e,scale:n})}if(this.touchRotate){const{rotation:n}=t;i=i.rotate({deltaAngleX:m._startPinchRotation-n})}return this.updateViewport(i,c,{isDragging:!0,isPanning:this.touchZoom,isZooming:this.touchZoom,isRotating:this.touchRotate}),m._lastPinchEvent=t,!0}_onPinchEnd(t){if(!this.isDragging())return!1;const{inertia:i}=this,{_lastPinchEvent:n}=m;if(this.touchZoom&&i&&n&&t.scale!==n.scale){const e=this.getCenter(t);let o=this.controllerState.rotateEnd();const s=Math.log2(t.scale),r=(s-Math.log2(n.scale))/(t.deltaTime-n.deltaTime),a=Math.pow(2,s+r*i/2);o=o.zoom({pos:e,scale:a}).zoomEnd(),this.updateViewport(o,{...this._getTransitionProps({around:e}),transitionDuration:i,transitionEasing:d},{isDragging:!1,isPanning:this.touchZoom,isZooming:this.touchZoom,isRotating:!1}),this.blockEvents(i)}else{const t=this.controllerState.zoomEnd().rotateEnd();this.updateViewport(t,null,{isDragging:!1,isPanning:!1,isZooming:!1,isRotating:!1})}return m._startPinchRotation=null,m._lastPinchEvent=null,!0}_onDoubleTap(t){if(!this.doubleClickZoom)return!1;const i=this.getCenter(t);if(!this.isPointInBounds(i,t))return!1;const n=this.isFunctionKeyPressed(t),e=this.controllerState.zoom({pos:i,scale:n?.5:2});return this.updateViewport(e,this._getTransitionProps({around:i}),{isZooming:!0,isPanning:!0}),this.blockEvents(100),!0}_onKeyDown(t){if(!this.keyboard)return!1;const i=this.isFunctionKeyPressed(t),{zoomSpeed:n,moveSpeed:e,rotateSpeedX:o,rotateSpeedY:s}=!0===this.keyboard?{}:this.keyboard,{controllerState:r}=this;let a;const h={};switch(t.srcEvent.code){case"Minus":a=i?r.zoomOut(n).zoomOut(n):r.zoomOut(n),h.isZooming=!0;break;case"Equal":a=i?r.zoomIn(n).zoomIn(n):r.zoomIn(n),h.isZooming=!0;break;case"ArrowLeft":i?(a=r.rotateLeft(o),h.isRotating=!0):(a=r.moveLeft(e),h.isPanning=!0);break;case"ArrowRight":i?(a=r.rotateRight(o),h.isRotating=!0):(a=r.moveRight(e),h.isPanning=!0);break;case"ArrowUp":i?(a=r.rotateUp(s),h.isRotating=!0):(a=r.moveUp(e),h.isPanning=!0);break;case"ArrowDown":i?(a=r.rotateDown(s),h.isRotating=!0):(a=r.moveDown(e),h.isPanning=!0);break;default:return!1}return this.updateViewport(a,this._getTransitionProps(),h),!0}_getTransitionProps(t){const{transition:i}=this;return i&&i.transitionInterpolator?t?{...i,transitionInterpolator:new l.Z({...t,...i.transitionInterpolator.opts,makeViewport:this.controllerState.makeViewport})}:i:c}}class S{constructor(t,i){(0,e.Z)(this,"_viewportProps",void 0),(0,e.Z)(this,"_state",void 0),this._viewportProps=this.applyConstraints(t),this._state=i}getViewportProps(){return this._viewportProps}getState(){return this._state}}var w=n(78866),v=n(75304);const Z=5,E=1.2;class V extends S{constructor(t){const{width:i,height:n,latitude:o,longitude:s,zoom:r,bearing:a=0,pitch:h=0,altitude:p=1.5,position:g=[0,0,0],maxZoom:l=20,minZoom:c=0,maxPitch:u=60,minPitch:d=0,startPanLngLat:P,startZoomLngLat:m,startRotatePos:_,startBearing:S,startPitch:w,startZoom:Z,normalize:E=!0}=t;(0,v.Z)(Number.isFinite(s)),(0,v.Z)(Number.isFinite(o)),(0,v.Z)(Number.isFinite(r)),super({width:i,height:n,latitude:o,longitude:s,zoom:r,bearing:a,pitch:h,altitude:p,maxZoom:l,minZoom:c,maxPitch:u,minPitch:d,normalize:E,position:g},{startPanLngLat:P,startZoomLngLat:m,startRotatePos:_,startBearing:S,startPitch:w,startZoom:Z}),(0,e.Z)(this,"makeViewport",void 0),this.makeViewport=t.makeViewport}panStart({pos:t}){return this._getUpdatedState({startPanLngLat:this._unproject(t)})}pan({pos:t,startPos:i}){const n=this.getState().startPanLngLat||this._unproject(i);if(!n)return this;const e=this.makeViewport(this.getViewportProps()),o=e.panByPosition(n,t);return this._getUpdatedState(o)}panEnd(){return this._getUpdatedState({startPanLngLat:null})}rotateStart({pos:t}){return this._getUpdatedState({startRotatePos:t,startBearing:this.getViewportProps().bearing,startPitch:this.getViewportProps().pitch})}rotate({pos:t,deltaAngleX:i=0,deltaAngleY:n=0}){const{startRotatePos:e,startBearing:o,startPitch:s}=this.getState();if(!e||void 0===o||void 0===s)return this;let r;return r=t?this._getNewRotation(t,e,s,o):{bearing:o+i,pitch:s+n},this._getUpdatedState(r)}rotateEnd(){return this._getUpdatedState({startBearing:null,startPitch:null})}zoomStart({pos:t}){return this._getUpdatedState({startZoomLngLat:this._unproject(t),startZoom:this.getViewportProps().zoom})}zoom({pos:t,startPos:i,scale:n}){let{startZoom:e,startZoomLngLat:s}=this.getState();if(s||(e=this.getViewportProps().zoom,s=this._unproject(i)||this._unproject(t)),!s)return this;const{maxZoom:r,minZoom:a}=this.getViewportProps();let h=e+Math.log2(n);h=(0,o.uZ)(h,a,r);const p=this.makeViewport({...this.getViewportProps(),zoom:h});return this._getUpdatedState({zoom:h,...p.panByPosition(s,t)})}zoomEnd(){return this._getUpdatedState({startZoomLngLat:null,startZoom:null})}zoomIn(t=2){return this._zoomFromCenter(t)}zoomOut(t=2){return this._zoomFromCenter(1/t)}moveLeft(t=100){return this._panFromCenter([t,0])}moveRight(t=100){return this._panFromCenter([-t,0])}moveUp(t=100){return this._panFromCenter([0,t])}moveDown(t=100){return this._panFromCenter([0,-t])}rotateLeft(t=15){return this._getUpdatedState({bearing:this.getViewportProps().bearing-t})}rotateRight(t=15){return this._getUpdatedState({bearing:this.getViewportProps().bearing+t})}rotateUp(t=10){return this._getUpdatedState({pitch:this.getViewportProps().pitch+t})}rotateDown(t=10){return this._getUpdatedState({pitch:this.getViewportProps().pitch-t})}shortestPathFrom(t){const i=t.getViewportProps(),n={...this.getViewportProps()},{bearing:e,longitude:o}=n;return Math.abs(e-i.bearing)>180&&(n.bearing=e<0?e+360:e-360),Math.abs(o-i.longitude)>180&&(n.longitude=o<0?o+360:o-360),n}applyConstraints(t){const{maxZoom:i,minZoom:n,zoom:e}=t;t.zoom=(0,o.uZ)(e,n,i);const{maxPitch:s,minPitch:r,pitch:a}=t;t.pitch=(0,o.uZ)(a,r,s);const{normalize:h=!0}=t;return h&&Object.assign(t,(0,w.QA)(t)),t}_zoomFromCenter(t){const{width:i,height:n}=this.getViewportProps();return this.zoom({pos:[i/2,n/2],scale:t})}_panFromCenter(t){const{width:i,height:n}=this.getViewportProps();return this.pan({startPos:[i/2,n/2],pos:[i/2+t[0],n/2+t[1]]})}_getUpdatedState(t){return new this.constructor({makeViewport:this.makeViewport,...this.getViewportProps(),...this.getState(),...t})}_unproject(t){const i=this.makeViewport(this.getViewportProps());return t&&i.unproject(t)}_getNewRotation(t,i,n,e){const s=t[0]-i[0],r=t[1]-i[1],a=t[1],h=i[1],{width:p,height:g}=this.getViewportProps(),l=s/p;let c=0;r>0?Math.abs(g-h)>Z&&(c=r/(h-g)*E):r<0&&h>Z&&(c=1-a/h),c=(0,o.uZ)(c,-1,1);const{minPitch:u,maxPitch:d}=this.getViewportProps(),P=e+180*l;let m=n;return c>0?m=n+c*(d-n):c<0&&(m=n-c*(u-n)),{pitch:m,bearing:P}}}class C extends _{constructor(...t){super(...t),(0,e.Z)(this,"ControllerState",V),(0,e.Z)(this,"transition",{transitionDuration:300,transitionInterpolator:new l.Z({transitionProps:{compare:["longitude","latitude","zoom","bearing","pitch","position"],required:["longitude","latitude","zoom"]}})}),(0,e.Z)(this,"dragMode","pan")}setProps(t){t.position=t.position||[0,0,0];const i=this.props;super.setProps(t);const n=!i||i.height!==t.height;n&&this.updateViewport(new this.ControllerState({makeViewport:this.makeViewport,...t,...this.state}))}}}}]);
//# sourceMappingURL=chunk-vendors-8c90940f-legacy.6539de24.js.map