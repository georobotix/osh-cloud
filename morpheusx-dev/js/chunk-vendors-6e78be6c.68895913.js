"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[9989],{81326:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ hasExtension; }\n/* harmony export */ });\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82982);\n\n\n/**\n * Check if a specific extension is present on a JSON object. This can be used\n * for either 3D Tiles extensions or glTF extensions\n * @param {Object} json The JSON object\n * @param {String} extensionName The name of the extension, e.g. \'3DTILES_implicit_tiling\'\n * @returns {Boolean} True if the extension is present\n * @private\n */\nfunction hasExtension(json, extensionName) {\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(json) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(json.extensions) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(json.extensions[extensionName])\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEzMjYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNlO0FBQ2Y7QUFDQSxJQUFJLHFFQUFPO0FBQ1gsSUFBSSxxRUFBTztBQUNYLElBQUkscUVBQU87QUFDWDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL2hhc0V4dGVuc2lvbi5qcz8yZjY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHNwZWNpZmljIGV4dGVuc2lvbiBpcyBwcmVzZW50IG9uIGEgSlNPTiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWRcbiAqIGZvciBlaXRoZXIgM0QgVGlsZXMgZXh0ZW5zaW9ucyBvciBnbFRGIGV4dGVuc2lvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIFRoZSBKU09OIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IGV4dGVuc2lvbk5hbWUgVGhlIG5hbWUgb2YgdGhlIGV4dGVuc2lvbiwgZS5nLiAnM0RUSUxFU19pbXBsaWNpdF90aWxpbmcnXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXh0ZW5zaW9uIGlzIHByZXNlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhc0V4dGVuc2lvbihqc29uLCBleHRlbnNpb25OYW1lKSB7XG4gIHJldHVybiAoXG4gICAgZGVmaW5lZChqc29uKSAmJlxuICAgIGRlZmluZWQoanNvbi5leHRlbnNpb25zKSAmJlxuICAgIGRlZmluZWQoanNvbi5leHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdKVxuICApO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81326\n')},47548:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* unused harmony export default */\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(82982);\n/* harmony import */ var _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11954);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9407);\n/* harmony import */ var _BatchTableHierarchy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40384);\n/* harmony import */ var _FeatureMetadata_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50851);\n/* harmony import */ var _FeatureTable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59875);\n/* harmony import */ var _getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(17041);\n/* harmony import */ var _JsonMetadataTable_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(88893);\n/* harmony import */ var _MetadataSchema_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(40914);\n/* harmony import */ var _MetadataTable_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14358);\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An object that parses the the 3D Tiles 1.0 batch table and transcodes it to\n * be compatible with feature metadata from the `EXT_feature_metadata` glTF extension\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.\n * </p>\n *\n * @param {Object} options Object with the following properties:\n * @param {Number} options.count The number of features in the batch table.\n * @param {Object} options.batchTable The batch table JSON\n * @param {Uint8Array} [options.binaryBody] The batch table binary body\n * @return {FeatureMetadata} A transcoded feature metadata object\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction parseBatchTable(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.count", options.count);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.batchTable", options.batchTable);\n  //>>includeEnd(\'debug\');\n\n  var featureCount = options.count;\n  var batchTable = options.batchTable;\n  var binaryBody = options.binaryBody;\n\n  // divide properties into binary, json and hierarchy\n  var partitionResults = partitionProperties(batchTable);\n\n  var jsonMetadataTable = new _JsonMetadataTable_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n    count: featureCount,\n    properties: partitionResults.jsonProperties,\n  });\n\n  var hierarchy = initializeHierarchy(partitionResults.hierarchy, binaryBody);\n\n  var binaryResults = transcodeBinaryProperties(\n    featureCount,\n    partitionResults.binaryProperties,\n    binaryBody\n  );\n\n  var featureTableJson = binaryResults.featureTableJson;\n\n  var metadataTable = new _MetadataTable_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n    count: featureTableJson.count,\n    properties: featureTableJson.properties,\n    class: binaryResults.transcodedClass,\n    bufferViews: binaryResults.bufferViewsU8,\n  });\n\n  var featureTables = {\n    _batchTable: new _FeatureTable_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n      count: featureTableJson.count,\n      metadataTable: metadataTable,\n      jsonMetadataTable: jsonMetadataTable,\n      batchTableHierarchy: hierarchy,\n    }),\n  };\n\n  return new _FeatureMetadata_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    schema: binaryResults.transcodedSchema,\n    featureTables: featureTables,\n    extensions: partitionResults.extensions,\n    extras: partitionResults.extras,\n  });\n}\n\n/**\n * Divide the batch table\'s properties into binary, JSON and hierarchy\n * extension as each is handled separately\n *\n * @param {Object} batchTable The batch table JSON\n * @returns {Object} The batch table divided into binary, JSON and hierarchy portions. Extras and extensions are also divided out for ease of processing.\n *\n * @private\n */\nfunction partitionProperties(batchTable) {\n  var legacyHierarchy = batchTable.HIERARCHY;\n  var extras = batchTable.extras;\n  var extensions = batchTable.extensions;\n\n  var hierarchyExtension;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(legacyHierarchy)) {\n    parseBatchTable._deprecationWarning(\n      "batchTableHierarchyExtension",\n      "The batch table HIERARCHY property has been moved to an extension. Use extensions.3DTILES_batch_table_hierarchy instead."\n    );\n    hierarchyExtension = legacyHierarchy;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(extensions)) {\n    hierarchyExtension = extensions["3DTILES_batch_table_hierarchy"];\n  }\n\n  var jsonProperties = {};\n  var binaryProperties = {};\n  for (var propertyId in batchTable) {\n    if (\n      !batchTable.hasOwnProperty(propertyId) ||\n      // these cases were handled above;\n      propertyId === "HIERARCHY" ||\n      propertyId === "extensions" ||\n      propertyId === "extras"\n    ) {\n      continue;\n    }\n\n    var property = batchTable[propertyId];\n    if (Array.isArray(property)) {\n      jsonProperties[propertyId] = property;\n    } else {\n      binaryProperties[propertyId] = property;\n    }\n  }\n\n  return {\n    binaryProperties: binaryProperties,\n    jsonProperties: jsonProperties,\n    hierarchy: hierarchyExtension,\n    extras: extras,\n    extensions: extensions,\n  };\n}\n\n/**\n * Transcode the binary properties of the batch table to be compatible with\n * <code>EXT_feature_metadata</code>\n *\n * @param {Number} featureCount The number of features in the batch table\n * @param {Object.<String, Object>} binaryProperties A dictionary of property ID to property definition\n * @param {Uint8Array} [binaryBody] The binary body of the batch table\n * @return {Object} Transcoded data needed for constructing a {@link FeatureMetadata} object.\n *\n * @private\n */\nfunction transcodeBinaryProperties(featureCount, binaryProperties, binaryBody) {\n  var classProperties = {};\n  var featureTableProperties = {};\n  var bufferViewsU8 = {};\n  var bufferViewCount = 0;\n  for (var propertyId in binaryProperties) {\n    if (!binaryProperties.hasOwnProperty(propertyId)) {\n      continue;\n    }\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(binaryBody)) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n        "Property " + propertyId + " requires a batch table binary."\n      );\n    }\n\n    var property = binaryProperties[propertyId];\n    var binaryAccessor = (0,_getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(property);\n\n    featureTableProperties[propertyId] = {\n      bufferView: bufferViewCount,\n    };\n\n    classProperties[propertyId] = transcodePropertyType(property);\n\n    bufferViewsU8[bufferViewCount] = binaryAccessor.createArrayBufferView(\n      binaryBody.buffer,\n      binaryBody.byteOffset + property.byteOffset,\n      featureCount\n    );\n\n    bufferViewCount++;\n  }\n\n  var schemaJson = {\n    classes: {\n      _batchTable: {\n        properties: classProperties,\n      },\n    },\n  };\n  var transcodedSchema = new _MetadataSchema_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(schemaJson);\n\n  var featureTableJson = {\n    class: "_batchTable",\n    count: featureCount,\n    properties: featureTableProperties,\n  };\n\n  return {\n    featureTableJson: featureTableJson,\n    bufferViewsU8: bufferViewsU8,\n    transcodedSchema: transcodedSchema,\n    transcodedClass: transcodedSchema.classes._batchTable,\n  };\n}\n\n/**\n * Given a property definition from the batch table, compute the equivalent\n * <code>EXT_feature_metadata</code> type definition\n *\n * @param {Object} property The batch table property definition\n * @return {Object} The corresponding feature metadata property definition\n * @private\n */\nfunction transcodePropertyType(property) {\n  var componentType = transcodeComponentType(property.componentType);\n\n  var propertyType = property.type;\n  if (propertyType === "SCALAR") {\n    return {\n      type: componentType,\n    };\n  }\n\n  // propertyType is one of VEC2, VEC3, or VEC4\n  var componentCount = parseInt(propertyType.charAt(3));\n\n  return {\n    type: "ARRAY",\n    componentType: componentType,\n    componentCount: componentCount,\n  };\n}\n\n/**\n * Convert the component type of a batch table property to the corresponding\n * type used with feature metadata\n *\n * @property {String} componentType the batch table\'s component type\n * @return {String} The corresponding feature metadata data type\n *\n * @private\n */\nfunction transcodeComponentType(componentType) {\n  switch (componentType) {\n    case "BYTE":\n      return "INT8";\n    case "UNSIGNED_BYTE":\n      return "UINT8";\n    case "SHORT":\n      return "INT16";\n    case "UNSIGNED_SHORT":\n      return "UINT16";\n    case "INT":\n      return "INT32";\n    case "UNSIGNED_INT":\n      return "UINT32";\n    case "FLOAT":\n      return "FLOAT32";\n    case "DOUBLE":\n      return "FLOAT64";\n  }\n}\n\n/**\n * Construct a batch table hierarchy object if the <code>3DTILES_batch_table_hierarchy</code> extension is present\n *\n * @param {Object} [hierarchyExtension] The <code>3DTILES_batch_table_hierarchy</code> extension object.\n * @param {Uint8Array} binaryBody The binary body of the batch table\n * @return {BatchTableHierarchy} A batch table hierarchy, or <code>undefined</code> if the extension is not present.\n *\n * @private\n */\nfunction initializeHierarchy(hierarchyExtension, binaryBody) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(hierarchyExtension)) {\n    return new _BatchTableHierarchy_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n      extension: hierarchyExtension,\n      binaryBody: binaryBody,\n    });\n  }\n\n  return undefined;\n}\n\n// exposed for testing\nparseBatchTable._deprecationWarning = _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47548\n')},19661:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ parseBoundingVolumeSemantics; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n\n\n\n/**\n * Parse the bounding volume-related semantics such as\n * <code>TILE_BOUNDING_BOX</code> and <code>CONTENT_BOUNDING_REGION</code> from\n * implicit tile metadata. Results are returned as a JSON object for use when\n * transcoding tiles (see {@link Implicit3DTileContent}).\n * <p>\n * Bounding volumes are checked in the order box, region, then sphere. Only\n * the first valid bounding volume is returned.\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/specification/Metadata/Semantics|Semantics Specification} for the various bounding volumes and minimum/maximum heights.\n *\n * @param {TileMetadata} tileMetadata The metadata object for looking up values by semantic. In practice, this will typically be a {@link ImplicitTileMetadata}\n * @return {Object} An object containing a <code>tile</code> property and a <code>content</code> property. These contain the bounding volume, and any minimum or maximum height.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction parseBoundingVolumeSemantics(tileMetadata) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("tileMetadata", tileMetadata);\n  //>>includeEnd(\'debug\');\n\n  return {\n    tile: {\n      boundingVolume: parseBoundingVolume("TILE", tileMetadata),\n      minimumHeight: parseMinimumHeight("TILE", tileMetadata),\n      maximumHeight: parseMaximumHeight("TILE", tileMetadata),\n    },\n    content: {\n      boundingVolume: parseBoundingVolume("CONTENT", tileMetadata),\n      minimumHeight: parseMinimumHeight("CONTENT", tileMetadata),\n      maximumHeight: parseMaximumHeight("CONTENT", tileMetadata),\n    },\n  };\n}\n\n/**\n * Parse the bounding volume from a tile metadata. If the metadata specify\n * multiple bounding volumes, only the first one is returned. Bounding volumes\n * are checked in the order box, region, then sphere.\n *\n * This handles both tile and content bounding volumes, as the only difference\n * is the prefix. e.g. <code>TILE_BOUNDING_BOX</code> and\n * <code>CONTENT_BOUNDING_BOX</code> have the same memory layout.\n *\n * @param {String} prefix Either "TILE" or "CONTENT"\n * @param {TileMetadata} tileMetadata The tileMetadata for looking up values\n * @return {Object} An object representing the JSON description of the tile metadata\n * @private\n */\nfunction parseBoundingVolume(prefix, tileMetadata) {\n  var boundingBoxSemantic = prefix + "_BOUNDING_BOX";\n  var boundingBox = tileMetadata.getPropertyBySemantic(boundingBoxSemantic);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(boundingBox)) {\n    return {\n      box: boundingBox,\n    };\n  }\n\n  var boundingRegionSemantic = prefix + "_BOUNDING_REGION";\n  var boundingRegion = tileMetadata.getPropertyBySemantic(\n    boundingRegionSemantic\n  );\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(boundingRegion)) {\n    return {\n      region: boundingRegion,\n    };\n  }\n\n  var boundingSphereSemantic = prefix + "_BOUNDING_SPHERE";\n  var boundingSphere = tileMetadata.getPropertyBySemantic(\n    boundingSphereSemantic\n  );\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(boundingSphere)) {\n    // ARRAY with 4 elements is automatically converted to a Cartesian4\n    return {\n      sphere: [\n        boundingSphere.x,\n        boundingSphere.y,\n        boundingSphere.z,\n        boundingSphere.w,\n      ],\n    };\n  }\n\n  return undefined;\n}\n\n/**\n * Parse the minimum height from tile metadata. This is used for making tighter\n * quadtree bounds for implicit tiling. This works for both\n * <code>TILE_MINIMUM_HEIGHT</code> and <code>CONTENT_MINIMUM_HEIGHT</code>\n *\n * @param {String} prefix Either "TILE" or "CONTENT"\n * @param {TileMetadata} tileMetadata The tileMetadata for looking up values\n * @return {Number} The minimum height\n * @private\n */\nfunction parseMinimumHeight(prefix, tileMetadata) {\n  var minimumHeightSemantic = prefix + "_MINIMUM_HEIGHT";\n  return tileMetadata.getPropertyBySemantic(minimumHeightSemantic);\n}\n\n/**\n * Parse the maximum height from tile metadata. This is used for making tighter\n * quadtree bounds for implicit tiling. This works for both\n * <code>TILE_MAXIMUM_HEIGHT</code> and <code>CONTENT_MAXIMUM_HEIGHT</code>\n *\n * @param {String} prefix Either "TILE" or "CONTENT"\n * @param {TileMetadata} tileMetadata The tileMetadata for looking up values\n * @return {Number} The maximum height\n * @private\n */\nfunction parseMaximumHeight(prefix, tileMetadata) {\n  var maximumHeightSemantic = prefix + "_MAXIMUM_HEIGHT";\n  return tileMetadata.getPropertyBySemantic(maximumHeightSemantic);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk2NjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFDSTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNEJBQTRCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdIQUF3SDtBQUNqSTtBQUNBLFdBQVcsY0FBYywyR0FBMkc7QUFDcEksWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBLEVBQUUsMkZBQW1CO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxjQUFjO0FBQ3pCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxxRUFBTztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGNBQWM7QUFDekIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsY0FBYztBQUN6QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL3BhcnNlQm91bmRpbmdWb2x1bWVTZW1hbnRpY3MuanM/MjA5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcblxuLyoqXG4gKiBQYXJzZSB0aGUgYm91bmRpbmcgdm9sdW1lLXJlbGF0ZWQgc2VtYW50aWNzIHN1Y2ggYXNcbiAqIDxjb2RlPlRJTEVfQk9VTkRJTkdfQk9YPC9jb2RlPiBhbmQgPGNvZGU+Q09OVEVOVF9CT1VORElOR19SRUdJT048L2NvZGU+IGZyb21cbiAqIGltcGxpY2l0IHRpbGUgbWV0YWRhdGEuIFJlc3VsdHMgYXJlIHJldHVybmVkIGFzIGEgSlNPTiBvYmplY3QgZm9yIHVzZSB3aGVuXG4gKiB0cmFuc2NvZGluZyB0aWxlcyAoc2VlIHtAbGluayBJbXBsaWNpdDNEVGlsZUNvbnRlbnR9KS5cbiAqIDxwPlxuICogQm91bmRpbmcgdm9sdW1lcyBhcmUgY2hlY2tlZCBpbiB0aGUgb3JkZXIgYm94LCByZWdpb24sIHRoZW4gc3BoZXJlLiBPbmx5XG4gKiB0aGUgZmlyc3QgdmFsaWQgYm91bmRpbmcgdm9sdW1lIGlzIHJldHVybmVkLlxuICogPC9wPlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9DZXNpdW1HUy8zZC10aWxlcy90cmVlLzNkLXRpbGVzLW5leHQvc3BlY2lmaWNhdGlvbi9NZXRhZGF0YS9TZW1hbnRpY3N8U2VtYW50aWNzIFNwZWNpZmljYXRpb259IGZvciB0aGUgdmFyaW91cyBib3VuZGluZyB2b2x1bWVzIGFuZCBtaW5pbXVtL21heGltdW0gaGVpZ2h0cy5cbiAqXG4gKiBAcGFyYW0ge1RpbGVNZXRhZGF0YX0gdGlsZU1ldGFkYXRhIFRoZSBtZXRhZGF0YSBvYmplY3QgZm9yIGxvb2tpbmcgdXAgdmFsdWVzIGJ5IHNlbWFudGljLiBJbiBwcmFjdGljZSwgdGhpcyB3aWxsIHR5cGljYWxseSBiZSBhIHtAbGluayBJbXBsaWNpdFRpbGVNZXRhZGF0YX1cbiAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgYSA8Y29kZT50aWxlPC9jb2RlPiBwcm9wZXJ0eSBhbmQgYSA8Y29kZT5jb250ZW50PC9jb2RlPiBwcm9wZXJ0eS4gVGhlc2UgY29udGFpbiB0aGUgYm91bmRpbmcgdm9sdW1lLCBhbmQgYW55IG1pbmltdW0gb3IgbWF4aW11bSBoZWlnaHQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBleHBlcmltZW50YWwgVGhpcyBmZWF0dXJlIGlzIHVzaW5nIHBhcnQgb2YgdGhlIDNEIFRpbGVzIHNwZWMgdGhhdCBpcyBub3QgZmluYWwgYW5kIGlzIHN1YmplY3QgdG8gY2hhbmdlIHdpdGhvdXQgQ2VzaXVtJ3Mgc3RhbmRhcmQgZGVwcmVjYXRpb24gcG9saWN5LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUJvdW5kaW5nVm9sdW1lU2VtYW50aWNzKHRpbGVNZXRhZGF0YSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2Yub2JqZWN0KFwidGlsZU1ldGFkYXRhXCIsIHRpbGVNZXRhZGF0YSk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHJldHVybiB7XG4gICAgdGlsZToge1xuICAgICAgYm91bmRpbmdWb2x1bWU6IHBhcnNlQm91bmRpbmdWb2x1bWUoXCJUSUxFXCIsIHRpbGVNZXRhZGF0YSksXG4gICAgICBtaW5pbXVtSGVpZ2h0OiBwYXJzZU1pbmltdW1IZWlnaHQoXCJUSUxFXCIsIHRpbGVNZXRhZGF0YSksXG4gICAgICBtYXhpbXVtSGVpZ2h0OiBwYXJzZU1heGltdW1IZWlnaHQoXCJUSUxFXCIsIHRpbGVNZXRhZGF0YSksXG4gICAgfSxcbiAgICBjb250ZW50OiB7XG4gICAgICBib3VuZGluZ1ZvbHVtZTogcGFyc2VCb3VuZGluZ1ZvbHVtZShcIkNPTlRFTlRcIiwgdGlsZU1ldGFkYXRhKSxcbiAgICAgIG1pbmltdW1IZWlnaHQ6IHBhcnNlTWluaW11bUhlaWdodChcIkNPTlRFTlRcIiwgdGlsZU1ldGFkYXRhKSxcbiAgICAgIG1heGltdW1IZWlnaHQ6IHBhcnNlTWF4aW11bUhlaWdodChcIkNPTlRFTlRcIiwgdGlsZU1ldGFkYXRhKSxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBib3VuZGluZyB2b2x1bWUgZnJvbSBhIHRpbGUgbWV0YWRhdGEuIElmIHRoZSBtZXRhZGF0YSBzcGVjaWZ5XG4gKiBtdWx0aXBsZSBib3VuZGluZyB2b2x1bWVzLCBvbmx5IHRoZSBmaXJzdCBvbmUgaXMgcmV0dXJuZWQuIEJvdW5kaW5nIHZvbHVtZXNcbiAqIGFyZSBjaGVja2VkIGluIHRoZSBvcmRlciBib3gsIHJlZ2lvbiwgdGhlbiBzcGhlcmUuXG4gKlxuICogVGhpcyBoYW5kbGVzIGJvdGggdGlsZSBhbmQgY29udGVudCBib3VuZGluZyB2b2x1bWVzLCBhcyB0aGUgb25seSBkaWZmZXJlbmNlXG4gKiBpcyB0aGUgcHJlZml4LiBlLmcuIDxjb2RlPlRJTEVfQk9VTkRJTkdfQk9YPC9jb2RlPiBhbmRcbiAqIDxjb2RlPkNPTlRFTlRfQk9VTkRJTkdfQk9YPC9jb2RlPiBoYXZlIHRoZSBzYW1lIG1lbW9yeSBsYXlvdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBFaXRoZXIgXCJUSUxFXCIgb3IgXCJDT05URU5UXCJcbiAqIEBwYXJhbSB7VGlsZU1ldGFkYXRhfSB0aWxlTWV0YWRhdGEgVGhlIHRpbGVNZXRhZGF0YSBmb3IgbG9va2luZyB1cCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgSlNPTiBkZXNjcmlwdGlvbiBvZiB0aGUgdGlsZSBtZXRhZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VCb3VuZGluZ1ZvbHVtZShwcmVmaXgsIHRpbGVNZXRhZGF0YSkge1xuICB2YXIgYm91bmRpbmdCb3hTZW1hbnRpYyA9IHByZWZpeCArIFwiX0JPVU5ESU5HX0JPWFwiO1xuICB2YXIgYm91bmRpbmdCb3ggPSB0aWxlTWV0YWRhdGEuZ2V0UHJvcGVydHlCeVNlbWFudGljKGJvdW5kaW5nQm94U2VtYW50aWMpO1xuXG4gIGlmIChkZWZpbmVkKGJvdW5kaW5nQm94KSkge1xuICAgIHJldHVybiB7XG4gICAgICBib3g6IGJvdW5kaW5nQm94LFxuICAgIH07XG4gIH1cblxuICB2YXIgYm91bmRpbmdSZWdpb25TZW1hbnRpYyA9IHByZWZpeCArIFwiX0JPVU5ESU5HX1JFR0lPTlwiO1xuICB2YXIgYm91bmRpbmdSZWdpb24gPSB0aWxlTWV0YWRhdGEuZ2V0UHJvcGVydHlCeVNlbWFudGljKFxuICAgIGJvdW5kaW5nUmVnaW9uU2VtYW50aWNcbiAgKTtcblxuICBpZiAoZGVmaW5lZChib3VuZGluZ1JlZ2lvbikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnaW9uOiBib3VuZGluZ1JlZ2lvbixcbiAgICB9O1xuICB9XG5cbiAgdmFyIGJvdW5kaW5nU3BoZXJlU2VtYW50aWMgPSBwcmVmaXggKyBcIl9CT1VORElOR19TUEhFUkVcIjtcbiAgdmFyIGJvdW5kaW5nU3BoZXJlID0gdGlsZU1ldGFkYXRhLmdldFByb3BlcnR5QnlTZW1hbnRpYyhcbiAgICBib3VuZGluZ1NwaGVyZVNlbWFudGljXG4gICk7XG5cbiAgaWYgKGRlZmluZWQoYm91bmRpbmdTcGhlcmUpKSB7XG4gICAgLy8gQVJSQVkgd2l0aCA0IGVsZW1lbnRzIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGEgQ2FydGVzaWFuNFxuICAgIHJldHVybiB7XG4gICAgICBzcGhlcmU6IFtcbiAgICAgICAgYm91bmRpbmdTcGhlcmUueCxcbiAgICAgICAgYm91bmRpbmdTcGhlcmUueSxcbiAgICAgICAgYm91bmRpbmdTcGhlcmUueixcbiAgICAgICAgYm91bmRpbmdTcGhlcmUudyxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIG1pbmltdW0gaGVpZ2h0IGZyb20gdGlsZSBtZXRhZGF0YS4gVGhpcyBpcyB1c2VkIGZvciBtYWtpbmcgdGlnaHRlclxuICogcXVhZHRyZWUgYm91bmRzIGZvciBpbXBsaWNpdCB0aWxpbmcuIFRoaXMgd29ya3MgZm9yIGJvdGhcbiAqIDxjb2RlPlRJTEVfTUlOSU1VTV9IRUlHSFQ8L2NvZGU+IGFuZCA8Y29kZT5DT05URU5UX01JTklNVU1fSEVJR0hUPC9jb2RlPlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggRWl0aGVyIFwiVElMRVwiIG9yIFwiQ09OVEVOVFwiXG4gKiBAcGFyYW0ge1RpbGVNZXRhZGF0YX0gdGlsZU1ldGFkYXRhIFRoZSB0aWxlTWV0YWRhdGEgZm9yIGxvb2tpbmcgdXAgdmFsdWVzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBtaW5pbXVtIGhlaWdodFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VNaW5pbXVtSGVpZ2h0KHByZWZpeCwgdGlsZU1ldGFkYXRhKSB7XG4gIHZhciBtaW5pbXVtSGVpZ2h0U2VtYW50aWMgPSBwcmVmaXggKyBcIl9NSU5JTVVNX0hFSUdIVFwiO1xuICByZXR1cm4gdGlsZU1ldGFkYXRhLmdldFByb3BlcnR5QnlTZW1hbnRpYyhtaW5pbXVtSGVpZ2h0U2VtYW50aWMpO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXhpbXVtIGhlaWdodCBmcm9tIHRpbGUgbWV0YWRhdGEuIFRoaXMgaXMgdXNlZCBmb3IgbWFraW5nIHRpZ2h0ZXJcbiAqIHF1YWR0cmVlIGJvdW5kcyBmb3IgaW1wbGljaXQgdGlsaW5nLiBUaGlzIHdvcmtzIGZvciBib3RoXG4gKiA8Y29kZT5USUxFX01BWElNVU1fSEVJR0hUPC9jb2RlPiBhbmQgPGNvZGU+Q09OVEVOVF9NQVhJTVVNX0hFSUdIVDwvY29kZT5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IEVpdGhlciBcIlRJTEVcIiBvciBcIkNPTlRFTlRcIlxuICogQHBhcmFtIHtUaWxlTWV0YWRhdGF9IHRpbGVNZXRhZGF0YSBUaGUgdGlsZU1ldGFkYXRhIGZvciBsb29raW5nIHVwIHZhbHVlc1xuICogQHJldHVybiB7TnVtYmVyfSBUaGUgbWF4aW11bSBoZWlnaHRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlTWF4aW11bUhlaWdodChwcmVmaXgsIHRpbGVNZXRhZGF0YSkge1xuICB2YXIgbWF4aW11bUhlaWdodFNlbWFudGljID0gcHJlZml4ICsgXCJfTUFYSU1VTV9IRUlHSFRcIjtcbiAgcmV0dXJuIHRpbGVNZXRhZGF0YS5nZXRQcm9wZXJ0eUJ5U2VtYW50aWMobWF4aW11bUhlaWdodFNlbWFudGljKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19661\n')},25821:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ parseFeatureMetadata; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _FeatureTable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59875);\n/* harmony import */ var _FeatureTexture_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(67266);\n/* harmony import */ var _FeatureMetadata_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50851);\n/* harmony import */ var _MetadataTable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14358);\n\n\n\n\n\n\n\n\n/**\n * Parse the <code>EXT_feature_metadata</code> glTF extension to create a\n * feature metadata object.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.extension The extension JSON object.\n * @param {MetadataSchema} options.schema The parsed schema.\n * @param {Object.<String, Uint8Array>} [options.bufferViews] An object mapping bufferView IDs to Uint8Array objects.\n * @param {Object.<String, Texture>} [options.textures] An object mapping texture IDs to {@link Texture} objects.\n * @return {FeatureMetadata} A feature metadata object\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction parseFeatureMetadata(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var extension = options.extension;\n\n  // The calling code is responsible for loading the schema.\n  // This keeps metadata parsing synchronous.\n  var schema = options.schema;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.extension", extension);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.schema", schema);\n  //>>includeEnd(\'debug\');\n\n  var featureTables = {};\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(extension.featureTables)) {\n    for (var featureTableId in extension.featureTables) {\n      if (extension.featureTables.hasOwnProperty(featureTableId)) {\n        var featureTable = extension.featureTables[featureTableId];\n        var classDefinition = schema.classes[featureTable.class];\n\n        var metadataTable = new _MetadataTable_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n          count: featureTable.count,\n          properties: featureTable.properties,\n          class: classDefinition,\n          bufferViews: options.bufferViews,\n        });\n\n        featureTables[featureTableId] = new _FeatureTable_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z({\n          count: featureTable.count,\n          metadataTable: metadataTable,\n          extras: featureTable.extras,\n          extensions: featureTable.extensions,\n        });\n      }\n    }\n  }\n\n  var featureTextures = {};\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(extension.featureTextures)) {\n    for (var featureTextureId in extension.featureTextures) {\n      if (extension.featureTextures.hasOwnProperty(featureTextureId)) {\n        var featureTexture = extension.featureTextures[featureTextureId];\n        featureTextures[featureTextureId] = new _FeatureTexture_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n          featureTexture: featureTexture,\n          class: schema.classes[featureTexture.class],\n          textures: options.textures,\n        });\n      }\n    }\n  }\n\n  return new _FeatureMetadata_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    schema: schema,\n    featureTables: featureTables,\n    featureTextures: featureTextures,\n    statistics: extension.statistics,\n    extras: extension.extras,\n    extensions: extension.extensions,\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU4MjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFxQztBQUNjO0FBQ1Y7QUFDSTtBQUNJO0FBQ0U7QUFDSjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsNkJBQTZCO0FBQ3hDLFdBQVcsMEJBQTBCLHFEQUFxRCxlQUFlO0FBQ3pHLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNlO0FBQ2YsWUFBWSwwRUFBWSxVQUFVLGdHQUF5QjtBQUMzRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFLDJGQUFtQjtBQUNyQixFQUFFLDJGQUFtQjtBQUNyQjs7QUFFQTtBQUNBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0Msa0VBQWE7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVULDRDQUE0QyxpRUFBWTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELG1FQUFjO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxvRUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvcGFyc2VGZWF0dXJlTWV0YWRhdGEuanM/ZGE4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL0NvcmUvZGVmYXVsdFZhbHVlLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRmVhdHVyZVRhYmxlIGZyb20gXCIuL0ZlYXR1cmVUYWJsZS5qc1wiO1xuaW1wb3J0IEZlYXR1cmVUZXh0dXJlIGZyb20gXCIuL0ZlYXR1cmVUZXh0dXJlLmpzXCI7XG5pbXBvcnQgRmVhdHVyZU1ldGFkYXRhIGZyb20gXCIuL0ZlYXR1cmVNZXRhZGF0YS5qc1wiO1xuaW1wb3J0IE1ldGFkYXRhVGFibGUgZnJvbSBcIi4vTWV0YWRhdGFUYWJsZS5qc1wiO1xuXG4vKipcbiAqIFBhcnNlIHRoZSA8Y29kZT5FWFRfZmVhdHVyZV9tZXRhZGF0YTwvY29kZT4gZ2xURiBleHRlbnNpb24gdG8gY3JlYXRlIGFcbiAqIGZlYXR1cmUgbWV0YWRhdGEgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmV4dGVuc2lvbiBUaGUgZXh0ZW5zaW9uIEpTT04gb2JqZWN0LlxuICogQHBhcmFtIHtNZXRhZGF0YVNjaGVtYX0gb3B0aW9ucy5zY2hlbWEgVGhlIHBhcnNlZCBzY2hlbWEuXG4gKiBAcGFyYW0ge09iamVjdC48U3RyaW5nLCBVaW50OEFycmF5Pn0gW29wdGlvbnMuYnVmZmVyVmlld3NdIEFuIG9iamVjdCBtYXBwaW5nIGJ1ZmZlclZpZXcgSURzIHRvIFVpbnQ4QXJyYXkgb2JqZWN0cy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxTdHJpbmcsIFRleHR1cmU+fSBbb3B0aW9ucy50ZXh0dXJlc10gQW4gb2JqZWN0IG1hcHBpbmcgdGV4dHVyZSBJRHMgdG8ge0BsaW5rIFRleHR1cmV9IG9iamVjdHMuXG4gKiBAcmV0dXJuIHtGZWF0dXJlTWV0YWRhdGF9IEEgZmVhdHVyZSBtZXRhZGF0YSBvYmplY3RcbiAqIEBwcml2YXRlXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VGZWF0dXJlTWV0YWRhdGEob3B0aW9ucykge1xuICBvcHRpb25zID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMsIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QpO1xuICB2YXIgZXh0ZW5zaW9uID0gb3B0aW9ucy5leHRlbnNpb247XG5cbiAgLy8gVGhlIGNhbGxpbmcgY29kZSBpcyByZXNwb25zaWJsZSBmb3IgbG9hZGluZyB0aGUgc2NoZW1hLlxuICAvLyBUaGlzIGtlZXBzIG1ldGFkYXRhIHBhcnNpbmcgc3luY2hyb25vdXMuXG4gIHZhciBzY2hlbWEgPSBvcHRpb25zLnNjaGVtYTtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2Yub2JqZWN0KFwib3B0aW9ucy5leHRlbnNpb25cIiwgZXh0ZW5zaW9uKTtcbiAgQ2hlY2sudHlwZU9mLm9iamVjdChcIm9wdGlvbnMuc2NoZW1hXCIsIHNjaGVtYSk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBmZWF0dXJlVGFibGVzID0ge307XG4gIGlmIChkZWZpbmVkKGV4dGVuc2lvbi5mZWF0dXJlVGFibGVzKSkge1xuICAgIGZvciAodmFyIGZlYXR1cmVUYWJsZUlkIGluIGV4dGVuc2lvbi5mZWF0dXJlVGFibGVzKSB7XG4gICAgICBpZiAoZXh0ZW5zaW9uLmZlYXR1cmVUYWJsZXMuaGFzT3duUHJvcGVydHkoZmVhdHVyZVRhYmxlSWQpKSB7XG4gICAgICAgIHZhciBmZWF0dXJlVGFibGUgPSBleHRlbnNpb24uZmVhdHVyZVRhYmxlc1tmZWF0dXJlVGFibGVJZF07XG4gICAgICAgIHZhciBjbGFzc0RlZmluaXRpb24gPSBzY2hlbWEuY2xhc3Nlc1tmZWF0dXJlVGFibGUuY2xhc3NdO1xuXG4gICAgICAgIHZhciBtZXRhZGF0YVRhYmxlID0gbmV3IE1ldGFkYXRhVGFibGUoe1xuICAgICAgICAgIGNvdW50OiBmZWF0dXJlVGFibGUuY291bnQsXG4gICAgICAgICAgcHJvcGVydGllczogZmVhdHVyZVRhYmxlLnByb3BlcnRpZXMsXG4gICAgICAgICAgY2xhc3M6IGNsYXNzRGVmaW5pdGlvbixcbiAgICAgICAgICBidWZmZXJWaWV3czogb3B0aW9ucy5idWZmZXJWaWV3cyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZmVhdHVyZVRhYmxlc1tmZWF0dXJlVGFibGVJZF0gPSBuZXcgRmVhdHVyZVRhYmxlKHtcbiAgICAgICAgICBjb3VudDogZmVhdHVyZVRhYmxlLmNvdW50LFxuICAgICAgICAgIG1ldGFkYXRhVGFibGU6IG1ldGFkYXRhVGFibGUsXG4gICAgICAgICAgZXh0cmFzOiBmZWF0dXJlVGFibGUuZXh0cmFzLFxuICAgICAgICAgIGV4dGVuc2lvbnM6IGZlYXR1cmVUYWJsZS5leHRlbnNpb25zLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZmVhdHVyZVRleHR1cmVzID0ge307XG4gIGlmIChkZWZpbmVkKGV4dGVuc2lvbi5mZWF0dXJlVGV4dHVyZXMpKSB7XG4gICAgZm9yICh2YXIgZmVhdHVyZVRleHR1cmVJZCBpbiBleHRlbnNpb24uZmVhdHVyZVRleHR1cmVzKSB7XG4gICAgICBpZiAoZXh0ZW5zaW9uLmZlYXR1cmVUZXh0dXJlcy5oYXNPd25Qcm9wZXJ0eShmZWF0dXJlVGV4dHVyZUlkKSkge1xuICAgICAgICB2YXIgZmVhdHVyZVRleHR1cmUgPSBleHRlbnNpb24uZmVhdHVyZVRleHR1cmVzW2ZlYXR1cmVUZXh0dXJlSWRdO1xuICAgICAgICBmZWF0dXJlVGV4dHVyZXNbZmVhdHVyZVRleHR1cmVJZF0gPSBuZXcgRmVhdHVyZVRleHR1cmUoe1xuICAgICAgICAgIGZlYXR1cmVUZXh0dXJlOiBmZWF0dXJlVGV4dHVyZSxcbiAgICAgICAgICBjbGFzczogc2NoZW1hLmNsYXNzZXNbZmVhdHVyZVRleHR1cmUuY2xhc3NdLFxuICAgICAgICAgIHRleHR1cmVzOiBvcHRpb25zLnRleHR1cmVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEZlYXR1cmVNZXRhZGF0YSh7XG4gICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgZmVhdHVyZVRhYmxlczogZmVhdHVyZVRhYmxlcyxcbiAgICBmZWF0dXJlVGV4dHVyZXM6IGZlYXR1cmVUZXh0dXJlcyxcbiAgICBzdGF0aXN0aWNzOiBleHRlbnNpb24uc3RhdGlzdGljcyxcbiAgICBleHRyYXM6IGV4dGVuc2lvbi5leHRyYXMsXG4gICAgZXh0ZW5zaW9uczogZXh0ZW5zaW9uLmV4dGVuc2lvbnMsXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25821\n')},16240:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ preprocess3DTileContent; }\n/* harmony export */ });\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12540);\n/* harmony import */ var _Core_getMagic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3020);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9407);\n/* harmony import */ var _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(41059);\n\n\n\n\n\n\n/**\n * Results of the preprocess3DTileContent() function. This includes the\n * {@link Cesium3DTileContentType} and the payload. The payload is either\n * binary or JSON depending on the content type.\n *\n * @typedef {Object} PreprocessedContent\n * @property {Cesium3DTileContentType} contentType The type of the content\n * @property {Uint8Array} [binaryPayload] For binary files, the payload is returned as a typed array with byteOffset of 0\n * @property {Object} [jsonPayload] For JSON files, the results are returned as a JSON object.\n * @private\n */\n\n/**\n * Preprocess a {@link Cesium3DTileContent}, to determine the type of content\n * and to parse JSON files into objects.\n *\n * @param {ArrayBuffer} arrayBuffer The raw binary payload\n * @return {PreprocessedContent}\n * @private\n */\nfunction preprocess3DTileContent(arrayBuffer) {\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var contentType = (0,_Core_getMagic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(uint8Array);\n\n  // We use glTF for JSON glTF files. For binary glTF, we rename this\n  // to glb to disambiguate\n  if (contentType === "glTF") {\n    contentType = "glb";\n  }\n\n  if (_Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].isBinaryFormat */ .Z.isBinaryFormat(contentType)) {\n    return {\n      // For binary files, the enum value is the magic number\n      contentType: contentType,\n      binaryPayload: uint8Array,\n    };\n  }\n\n  var json = getJsonContent(uint8Array);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(json.root)) {\n    // Most likely a tileset JSON\n    return {\n      contentType: _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].EXTERNAL_TILESET */ .Z.EXTERNAL_TILESET,\n      jsonPayload: json,\n    };\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(json.asset)) {\n    // Most likely a glTF. Tileset JSON also has an "asset" property\n    // so this check needs to happen second\n    return {\n      contentType: _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].GLTF */ .Z.GLTF,\n      jsonPayload: json,\n    };\n  }\n\n  throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("Invalid tile content.");\n}\n\nfunction getJsonContent(uint8Array) {\n  var json;\n\n  try {\n    json = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(uint8Array);\n  } catch (error) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("Invalid tile content.");\n  }\n\n  return json;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyNDAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBeUM7QUFDNEI7QUFDMUI7QUFDUTtBQUNnQjs7QUFFbkU7QUFDQTtBQUNBLElBQUksK0JBQStCO0FBQ25DO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyx5QkFBeUI7QUFDdkMsY0FBYyxZQUFZO0FBQzFCLGNBQWMsUUFBUTtBQUN0QjtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLDBCQUEwQjtBQUMzQztBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFlBQVk7QUFDWjtBQUNBO0FBQ2U7QUFDZjtBQUNBLG9CQUFvQixzRUFBUTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLDBHQUFzQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTtBQUNBLG1CQUFtQiw4R0FBd0M7QUFDM0Q7QUFDQTtBQUNBOztBQUVBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0ZBQTRCO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLHNFQUFZO0FBQ3hCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLG1GQUFxQjtBQUNoQyxJQUFJO0FBQ0osY0FBYyxzRUFBWTtBQUMxQjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL3ByZXByb2Nlc3MzRFRpbGVDb250ZW50LmpzP2FiMWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IGdldEpzb25Gcm9tVHlwZWRBcnJheSBmcm9tIFwiLi4vQ29yZS9nZXRKc29uRnJvbVR5cGVkQXJyYXkuanNcIjtcbmltcG9ydCBnZXRNYWdpYyBmcm9tIFwiLi4vQ29yZS9nZXRNYWdpYy5qc1wiO1xuaW1wb3J0IFJ1bnRpbWVFcnJvciBmcm9tIFwiLi4vQ29yZS9SdW50aW1lRXJyb3IuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVDb250ZW50VHlwZSBmcm9tIFwiLi9DZXNpdW0zRFRpbGVDb250ZW50VHlwZS5qc1wiO1xuXG4vKipcbiAqIFJlc3VsdHMgb2YgdGhlIHByZXByb2Nlc3MzRFRpbGVDb250ZW50KCkgZnVuY3Rpb24uIFRoaXMgaW5jbHVkZXMgdGhlXG4gKiB7QGxpbmsgQ2VzaXVtM0RUaWxlQ29udGVudFR5cGV9IGFuZCB0aGUgcGF5bG9hZC4gVGhlIHBheWxvYWQgaXMgZWl0aGVyXG4gKiBiaW5hcnkgb3IgSlNPTiBkZXBlbmRpbmcgb24gdGhlIGNvbnRlbnQgdHlwZS5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQcmVwcm9jZXNzZWRDb250ZW50XG4gKiBAcHJvcGVydHkge0Nlc2l1bTNEVGlsZUNvbnRlbnRUeXBlfSBjb250ZW50VHlwZSBUaGUgdHlwZSBvZiB0aGUgY29udGVudFxuICogQHByb3BlcnR5IHtVaW50OEFycmF5fSBbYmluYXJ5UGF5bG9hZF0gRm9yIGJpbmFyeSBmaWxlcywgdGhlIHBheWxvYWQgaXMgcmV0dXJuZWQgYXMgYSB0eXBlZCBhcnJheSB3aXRoIGJ5dGVPZmZzZXQgb2YgMFxuICogQHByb3BlcnR5IHtPYmplY3R9IFtqc29uUGF5bG9hZF0gRm9yIEpTT04gZmlsZXMsIHRoZSByZXN1bHRzIGFyZSByZXR1cm5lZCBhcyBhIEpTT04gb2JqZWN0LlxuICogQHByaXZhdGVcbiAqL1xuXG4vKipcbiAqIFByZXByb2Nlc3MgYSB7QGxpbmsgQ2VzaXVtM0RUaWxlQ29udGVudH0sIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBjb250ZW50XG4gKiBhbmQgdG8gcGFyc2UgSlNPTiBmaWxlcyBpbnRvIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIHJhdyBiaW5hcnkgcGF5bG9hZFxuICogQHJldHVybiB7UHJlcHJvY2Vzc2VkQ29udGVudH1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXByb2Nlc3MzRFRpbGVDb250ZW50KGFycmF5QnVmZmVyKSB7XG4gIHZhciB1aW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuICB2YXIgY29udGVudFR5cGUgPSBnZXRNYWdpYyh1aW50OEFycmF5KTtcblxuICAvLyBXZSB1c2UgZ2xURiBmb3IgSlNPTiBnbFRGIGZpbGVzLiBGb3IgYmluYXJ5IGdsVEYsIHdlIHJlbmFtZSB0aGlzXG4gIC8vIHRvIGdsYiB0byBkaXNhbWJpZ3VhdGVcbiAgaWYgKGNvbnRlbnRUeXBlID09PSBcImdsVEZcIikge1xuICAgIGNvbnRlbnRUeXBlID0gXCJnbGJcIjtcbiAgfVxuXG4gIGlmIChDZXNpdW0zRFRpbGVDb250ZW50VHlwZS5pc0JpbmFyeUZvcm1hdChjb250ZW50VHlwZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gRm9yIGJpbmFyeSBmaWxlcywgdGhlIGVudW0gdmFsdWUgaXMgdGhlIG1hZ2ljIG51bWJlclxuICAgICAgY29udGVudFR5cGU6IGNvbnRlbnRUeXBlLFxuICAgICAgYmluYXJ5UGF5bG9hZDogdWludDhBcnJheSxcbiAgICB9O1xuICB9XG5cbiAgdmFyIGpzb24gPSBnZXRKc29uQ29udGVudCh1aW50OEFycmF5KTtcbiAgaWYgKGRlZmluZWQoanNvbi5yb290KSkge1xuICAgIC8vIE1vc3QgbGlrZWx5IGEgdGlsZXNldCBKU09OXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBDZXNpdW0zRFRpbGVDb250ZW50VHlwZS5FWFRFUk5BTF9USUxFU0VULFxuICAgICAganNvblBheWxvYWQ6IGpzb24sXG4gICAgfTtcbiAgfVxuXG4gIGlmIChkZWZpbmVkKGpzb24uYXNzZXQpKSB7XG4gICAgLy8gTW9zdCBsaWtlbHkgYSBnbFRGLiBUaWxlc2V0IEpTT04gYWxzbyBoYXMgYW4gXCJhc3NldFwiIHByb3BlcnR5XG4gICAgLy8gc28gdGhpcyBjaGVjayBuZWVkcyB0byBoYXBwZW4gc2Vjb25kXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBDZXNpdW0zRFRpbGVDb250ZW50VHlwZS5HTFRGLFxuICAgICAganNvblBheWxvYWQ6IGpzb24sXG4gICAgfTtcbiAgfVxuXG4gIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXCJJbnZhbGlkIHRpbGUgY29udGVudC5cIik7XG59XG5cbmZ1bmN0aW9uIGdldEpzb25Db250ZW50KHVpbnQ4QXJyYXkpIHtcbiAgdmFyIGpzb247XG5cbiAgdHJ5IHtcbiAgICBqc29uID0gZ2V0SnNvbkZyb21UeXBlZEFycmF5KHVpbnQ4QXJyYXkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXCJJbnZhbGlkIHRpbGUgY29udGVudC5cIik7XG4gIH1cblxuICByZXR1cm4ganNvbjtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16240\n')},51240:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52200);\n/* harmony import */ var _Core_webGLConstantToGlslType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37231);\n/* harmony import */ var _GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9919);\n/* harmony import */ var _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56629);\n/* harmony import */ var _GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29745);\n/* harmony import */ var _ModelUtility_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15322);\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction processModelMaterialsCommon(gltf, options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf)) {\n    return;\n  }\n\n  if (!(0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf, "KHR_materials_common")) {\n    return;\n  }\n\n  if (!(0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf, "KHR_techniques_webgl")) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf.extensions)) {\n      gltf.extensions = {};\n    }\n\n    gltf.extensions.KHR_techniques_webgl = {\n      programs: [],\n      shaders: [],\n      techniques: [],\n    };\n    gltf.extensionsUsed.push("KHR_techniques_webgl");\n    gltf.extensionsRequired.push("KHR_techniques_webgl");\n  }\n\n  var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n\n  lightDefaults(gltf);\n\n  var lightParameters = generateLightParameters(gltf);\n\n  var primitiveByMaterial = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].splitIncompatibleMaterials */ .Z.splitIncompatibleMaterials(gltf);\n\n  var techniques = {};\n  var generatedTechniques = false;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].material */ .Z.material(gltf, function (material, materialIndex) {\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(material.extensions) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(material.extensions.KHR_materials_common)\n    ) {\n      var khrMaterialsCommon = material.extensions.KHR_materials_common;\n      var primitiveInfo = primitiveByMaterial[materialIndex];\n\n      var techniqueKey = getTechniqueKey(khrMaterialsCommon, primitiveInfo);\n      var technique = techniques[techniqueKey];\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(technique)) {\n        technique = generateTechnique(\n          gltf,\n          techniquesWebgl,\n          primitiveInfo,\n          khrMaterialsCommon,\n          lightParameters,\n          options.addBatchIdToGeneratedShaders\n        );\n        techniques[techniqueKey] = technique;\n        generatedTechniques = true;\n      }\n\n      var materialValues = {};\n      var values = khrMaterialsCommon.values;\n      var uniformName;\n      for (var valueName in values) {\n        if (\n          values.hasOwnProperty(valueName) &&\n          valueName !== "transparent" &&\n          valueName !== "doubleSided"\n        ) {\n          uniformName = "u_" + valueName.toLowerCase();\n          materialValues[uniformName] = values[valueName];\n        }\n      }\n\n      material.extensions.KHR_techniques_webgl = {\n        technique: technique,\n        values: materialValues,\n      };\n\n      material.alphaMode = "OPAQUE";\n      if (khrMaterialsCommon.transparent) {\n        material.alphaMode = "BLEND";\n      }\n\n      if (khrMaterialsCommon.doubleSided) {\n        material.doubleSided = true;\n      }\n    }\n  });\n\n  if (!generatedTechniques) {\n    return gltf;\n  }\n\n  // If any primitives have semantics that aren\'t declared in the generated\n  // shaders, we want to preserve them.\n  _ModelUtility_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ensureSemanticExistence */ .Z.ensureSemanticExistence(gltf);\n\n  return gltf;\n}\n\nfunction generateLightParameters(gltf) {\n  var result = {};\n\n  var lights;\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf.extensions) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf.extensions.KHR_materials_common)\n  ) {\n    lights = gltf.extensions.KHR_materials_common.lights;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(lights)) {\n    // Figure out which node references the light\n    var nodes = gltf.nodes;\n    for (var nodeName in nodes) {\n      if (nodes.hasOwnProperty(nodeName)) {\n        var node = nodes[nodeName];\n        if (\n          (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(node.extensions) &&\n          (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(node.extensions.KHR_materials_common)\n        ) {\n          var nodeLightId = node.extensions.KHR_materials_common.light;\n          if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(nodeLightId) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(lights[nodeLightId])) {\n            lights[nodeLightId].node = nodeName;\n          }\n          delete node.extensions.KHR_materials_common;\n        }\n      }\n    }\n\n    // Add light parameters to result\n    var lightCount = 0;\n    for (var lightName in lights) {\n      if (lights.hasOwnProperty(lightName)) {\n        var light = lights[lightName];\n        var lightType = light.type;\n        if (lightType !== "ambient" && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.node)) {\n          delete lights[lightName];\n          continue;\n        }\n        var lightBaseName = "light" + lightCount.toString();\n        light.baseName = lightBaseName;\n        switch (lightType) {\n          case "ambient":\n            var ambient = light.ambient;\n            result[lightBaseName + "Color"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n              value: ambient.color,\n            };\n            break;\n          case "directional":\n            var directional = light.directional;\n            result[lightBaseName + "Color"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n              value: directional.color,\n            };\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.node)) {\n              result[lightBaseName + "Transform"] = {\n                node: light.node,\n                semantic: "MODELVIEW",\n                type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n              };\n            }\n            break;\n          case "point":\n            var point = light.point;\n            result[lightBaseName + "Color"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n              value: point.color,\n            };\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.node)) {\n              result[lightBaseName + "Transform"] = {\n                node: light.node,\n                semantic: "MODELVIEW",\n                type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n              };\n            }\n            result[lightBaseName + "Attenuation"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n              value: [\n                point.constantAttenuation,\n                point.linearAttenuation,\n                point.quadraticAttenuation,\n              ],\n            };\n            break;\n          case "spot":\n            var spot = light.spot;\n            result[lightBaseName + "Color"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n              value: spot.color,\n            };\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.node)) {\n              result[lightBaseName + "Transform"] = {\n                node: light.node,\n                semantic: "MODELVIEW",\n                type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n              };\n              result[lightBaseName + "InverseTransform"] = {\n                node: light.node,\n                semantic: "MODELVIEWINVERSE",\n                type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n                useInFragment: true,\n              };\n            }\n            result[lightBaseName + "Attenuation"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n              value: [\n                spot.constantAttenuation,\n                spot.linearAttenuation,\n                spot.quadraticAttenuation,\n              ],\n            };\n\n            result[lightBaseName + "FallOff"] = {\n              type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2,\n              value: [spot.fallOffAngle, spot.fallOffExponent],\n            };\n            break;\n        }\n        ++lightCount;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction generateTechnique(\n  gltf,\n  techniquesWebgl,\n  primitiveInfo,\n  khrMaterialsCommon,\n  lightParameters,\n  addBatchIdToGeneratedShaders\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(khrMaterialsCommon)) {\n    khrMaterialsCommon = {};\n  }\n\n  addBatchIdToGeneratedShaders = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    addBatchIdToGeneratedShaders,\n    false\n  );\n\n  var techniques = techniquesWebgl.techniques;\n  var shaders = techniquesWebgl.shaders;\n  var programs = techniquesWebgl.programs;\n  var lightingModel = khrMaterialsCommon.technique.toUpperCase();\n  var lights;\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf.extensions) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf.extensions.KHR_materials_common)\n  ) {\n    lights = gltf.extensions.KHR_materials_common.lights;\n  }\n\n  var parameterValues = khrMaterialsCommon.values;\n  var jointCount = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(khrMaterialsCommon.jointCount, 0);\n\n  var skinningInfo;\n  var hasSkinning = false;\n  var hasVertexColors = false;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(primitiveInfo)) {\n    skinningInfo = primitiveInfo.skinning;\n    hasSkinning = skinningInfo.skinned;\n    hasVertexColors = primitiveInfo.hasVertexColors;\n  }\n\n  var vertexShader = "precision highp float;\\n";\n  var fragmentShader = "precision highp float;\\n";\n\n  var hasNormals = lightingModel !== "CONSTANT";\n\n  // Add techniques\n  var techniqueUniforms = {\n    u_modelViewMatrix: {\n      semantic: (0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf, "CESIUM_RTC")\n        ? "CESIUM_RTC_MODELVIEW"\n        : "MODELVIEW",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    },\n    u_projectionMatrix: {\n      semantic: "PROJECTION",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    },\n  };\n\n  if (hasNormals) {\n    techniqueUniforms.u_normalMatrix = {\n      semantic: "MODELVIEWINVERSETRANSPOSE",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    };\n  }\n\n  if (hasSkinning) {\n    techniqueUniforms.u_jointMatrix = {\n      count: jointCount,\n      semantic: "JOINTMATRIX",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    };\n  }\n\n  // Add material values\n  var uniformName;\n  var hasTexCoords = false;\n  for (var name in parameterValues) {\n    //generate shader parameters for KHR_materials_common attributes\n    //(including a check, because some boolean flags should not be used as shader parameters)\n    if (\n      parameterValues.hasOwnProperty(name) &&\n      name !== "transparent" &&\n      name !== "doubleSided"\n    ) {\n      var uniformType = getKHRMaterialsCommonValueType(\n        name,\n        parameterValues[name]\n      );\n      uniformName = "u_" + name.toLowerCase();\n      if (!hasTexCoords && uniformType === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D) {\n        hasTexCoords = true;\n      }\n\n      techniqueUniforms[uniformName] = {\n        type: uniformType,\n      };\n    }\n  }\n\n  // Give the diffuse uniform a semantic to support color replacement in 3D Tiles\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_diffuse)) {\n    techniqueUniforms.u_diffuse.semantic = "_3DTILESDIFFUSE";\n  }\n\n  // Copy light parameters into technique parameters\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(lightParameters)) {\n    for (var lightParamName in lightParameters) {\n      if (lightParameters.hasOwnProperty(lightParamName)) {\n        uniformName = "u_" + lightParamName;\n        techniqueUniforms[uniformName] = lightParameters[lightParamName];\n      }\n    }\n  }\n\n  // Add uniforms to shaders\n  for (uniformName in techniqueUniforms) {\n    if (techniqueUniforms.hasOwnProperty(uniformName)) {\n      var uniform = techniqueUniforms[uniformName];\n      var arraySize = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(uniform.count) ? "[" + uniform.count + "]" : "";\n      if (\n        (uniform.type !== _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3 &&\n          uniform.type !== _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4) ||\n        uniform.useInFragment\n      ) {\n        fragmentShader +=\n          "uniform " +\n          (0,_Core_webGLConstantToGlslType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(uniform.type) +\n          " " +\n          uniformName +\n          arraySize +\n          ";\\n";\n        delete uniform.useInFragment;\n      } else {\n        vertexShader +=\n          "uniform " +\n          (0,_Core_webGLConstantToGlslType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(uniform.type) +\n          " " +\n          uniformName +\n          arraySize +\n          ";\\n";\n      }\n    }\n  }\n\n  // Add attributes with semantics\n  var vertexShaderMain = "";\n  if (hasSkinning) {\n    vertexShaderMain +=\n      "    mat4 skinMatrix =\\n" +\n      "        a_weight.x * u_jointMatrix[int(a_joint.x)] +\\n" +\n      "        a_weight.y * u_jointMatrix[int(a_joint.y)] +\\n" +\n      "        a_weight.z * u_jointMatrix[int(a_joint.z)] +\\n" +\n      "        a_weight.w * u_jointMatrix[int(a_joint.w)];\\n";\n  }\n\n  // Add position always\n  var techniqueAttributes = {\n    a_position: {\n      semantic: "POSITION",\n    },\n  };\n  vertexShader += "attribute vec3 a_position;\\n";\n  vertexShader += "varying vec3 v_positionEC;\\n";\n  if (hasSkinning) {\n    vertexShaderMain +=\n      "  vec4 pos = u_modelViewMatrix * skinMatrix * vec4(a_position,1.0);\\n";\n  } else {\n    vertexShaderMain +=\n      "  vec4 pos = u_modelViewMatrix * vec4(a_position,1.0);\\n";\n  }\n  vertexShaderMain += "  v_positionEC = pos.xyz;\\n";\n  vertexShaderMain += "  gl_Position = u_projectionMatrix * pos;\\n";\n  fragmentShader += "varying vec3 v_positionEC;\\n";\n\n  // Add normal if we don\'t have constant lighting\n  if (hasNormals) {\n    techniqueAttributes.a_normal = {\n      semantic: "NORMAL",\n    };\n    vertexShader += "attribute vec3 a_normal;\\n";\n    vertexShader += "varying vec3 v_normal;\\n";\n    if (hasSkinning) {\n      vertexShaderMain +=\n        "  v_normal = u_normalMatrix * mat3(skinMatrix) * a_normal;\\n";\n    } else {\n      vertexShaderMain += "  v_normal = u_normalMatrix * a_normal;\\n";\n    }\n\n    fragmentShader += "varying vec3 v_normal;\\n";\n  }\n\n  // Add texture coordinates if the material uses them\n  var v_texcoord;\n  if (hasTexCoords) {\n    techniqueAttributes.a_texcoord_0 = {\n      semantic: "TEXCOORD_0",\n    };\n\n    v_texcoord = "v_texcoord_0";\n    vertexShader += "attribute vec2 a_texcoord_0;\\n";\n    vertexShader += "varying vec2 " + v_texcoord + ";\\n";\n    vertexShaderMain += "  " + v_texcoord + " = a_texcoord_0;\\n";\n\n    fragmentShader += "varying vec2 " + v_texcoord + ";\\n";\n  }\n\n  if (hasSkinning) {\n    techniqueAttributes.a_joint = {\n      semantic: "JOINTS_0",\n    };\n    techniqueAttributes.a_weight = {\n      semantic: "WEIGHTS_0",\n    };\n\n    vertexShader += "attribute vec4 a_joint;\\n";\n    vertexShader += "attribute vec4 a_weight;\\n";\n  }\n\n  if (hasVertexColors) {\n    techniqueAttributes.a_vertexColor = {\n      semantic: "COLOR_0",\n    };\n    vertexShader += "attribute vec4 a_vertexColor;\\n";\n    vertexShader += "varying vec4 v_vertexColor;\\n";\n    vertexShaderMain += "  v_vertexColor = a_vertexColor;\\n";\n    fragmentShader += "varying vec4 v_vertexColor;\\n";\n  }\n\n  if (addBatchIdToGeneratedShaders) {\n    techniqueAttributes.a_batchId = {\n      semantic: "_BATCHID",\n    };\n    vertexShader += "attribute float a_batchId;\\n";\n  }\n\n  var hasSpecular =\n    hasNormals &&\n    (lightingModel === "BLINN" || lightingModel === "PHONG") &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_specular) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_shininess) &&\n    techniqueUniforms.u_shininess > 0.0;\n\n  // Generate lighting code blocks\n  var hasNonAmbientLights = false;\n  var hasAmbientLights = false;\n  var fragmentLightingBlock = "";\n  for (var lightName in lights) {\n    if (lights.hasOwnProperty(lightName)) {\n      var light = lights[lightName];\n      var lightType = light.type.toLowerCase();\n      var lightBaseName = light.baseName;\n      fragmentLightingBlock += "  {\\n";\n      var lightColorName = "u_" + lightBaseName + "Color";\n      var varyingDirectionName;\n      var varyingPositionName;\n      if (lightType === "ambient") {\n        hasAmbientLights = true;\n        fragmentLightingBlock +=\n          "    ambientLight += " + lightColorName + ";\\n";\n      } else if (hasNormals) {\n        hasNonAmbientLights = true;\n        varyingDirectionName = "v_" + lightBaseName + "Direction";\n        varyingPositionName = "v_" + lightBaseName + "Position";\n\n        if (lightType !== "point") {\n          vertexShader += "varying vec3 " + varyingDirectionName + ";\\n";\n          fragmentShader += "varying vec3 " + varyingDirectionName + ";\\n";\n\n          vertexShaderMain +=\n            "  " +\n            varyingDirectionName +\n            " = mat3(u_" +\n            lightBaseName +\n            "Transform) * vec3(0.,0.,1.);\\n";\n          if (lightType === "directional") {\n            fragmentLightingBlock +=\n              "    vec3 l = normalize(" + varyingDirectionName + ");\\n";\n          }\n        }\n\n        if (lightType !== "directional") {\n          vertexShader += "varying vec3 " + varyingPositionName + ";\\n";\n          fragmentShader += "varying vec3 " + varyingPositionName + ";\\n";\n\n          vertexShaderMain +=\n            "  " +\n            varyingPositionName +\n            " = u_" +\n            lightBaseName +\n            "Transform[3].xyz;\\n";\n          fragmentLightingBlock +=\n            "    vec3 VP = " + varyingPositionName + " - v_positionEC;\\n";\n          fragmentLightingBlock += "    vec3 l = normalize(VP);\\n";\n          fragmentLightingBlock += "    float range = length(VP);\\n";\n          fragmentLightingBlock +=\n            "    float attenuation = 1.0 / (u_" +\n            lightBaseName +\n            "Attenuation.x + ";\n          fragmentLightingBlock +=\n            "(u_" + lightBaseName + "Attenuation.y * range) + ";\n          fragmentLightingBlock +=\n            "(u_" + lightBaseName + "Attenuation.z * range * range));\\n";\n        } else {\n          fragmentLightingBlock += "    float attenuation = 1.0;\\n";\n        }\n\n        if (lightType === "spot") {\n          fragmentLightingBlock +=\n            "    float spotDot = dot(l, normalize(" +\n            varyingDirectionName +\n            "));\\n";\n          fragmentLightingBlock +=\n            "    if (spotDot < cos(u_" + lightBaseName + "FallOff.x * 0.5))\\n";\n          fragmentLightingBlock += "    {\\n";\n          fragmentLightingBlock += "      attenuation = 0.0;\\n";\n          fragmentLightingBlock += "    }\\n";\n          fragmentLightingBlock += "    else\\n";\n          fragmentLightingBlock += "    {\\n";\n          fragmentLightingBlock +=\n            "        attenuation *= max(0.0, pow(spotDot, u_" +\n            lightBaseName +\n            "FallOff.y));\\n";\n          fragmentLightingBlock += "    }\\n";\n        }\n\n        fragmentLightingBlock +=\n          "    diffuseLight += " +\n          lightColorName +\n          "* max(dot(normal,l), 0.) * attenuation;\\n";\n\n        if (hasSpecular) {\n          if (lightingModel === "BLINN") {\n            fragmentLightingBlock += "    vec3 h = normalize(l + viewDir);\\n";\n            fragmentLightingBlock +=\n              "    float specularIntensity = max(0., pow(max(dot(normal, h), 0.), u_shininess)) * attenuation;\\n";\n          } else {\n            // PHONG\n            fragmentLightingBlock +=\n              "    vec3 reflectDir = reflect(-l, normal);\\n";\n            fragmentLightingBlock +=\n              "    float specularIntensity = max(0., pow(max(dot(reflectDir, viewDir), 0.), u_shininess)) * attenuation;\\n";\n          }\n          fragmentLightingBlock +=\n            "    specularLight += " +\n            lightColorName +\n            " * specularIntensity;\\n";\n        }\n      }\n      fragmentLightingBlock += "  }\\n";\n    }\n  }\n\n  if (!hasAmbientLights) {\n    // Add an ambient light if we don\'t have one\n    fragmentLightingBlock += "  ambientLight += vec3(0.2, 0.2, 0.2);\\n";\n  }\n\n  if (!hasNonAmbientLights && lightingModel !== "CONSTANT") {\n    fragmentShader += "#ifdef USE_CUSTOM_LIGHT_COLOR \\n";\n    fragmentShader += "uniform vec3 gltf_lightColor; \\n";\n    fragmentShader += "#endif \\n";\n\n    fragmentLightingBlock += "#ifndef USE_CUSTOM_LIGHT_COLOR \\n";\n    fragmentLightingBlock += "    vec3 lightColor = czm_lightColor;\\n";\n    fragmentLightingBlock += "#else \\n";\n    fragmentLightingBlock += "    vec3 lightColor = gltf_lightColor;\\n";\n    fragmentLightingBlock += "#endif \\n";\n\n    fragmentLightingBlock += "  vec3 l = normalize(czm_lightDirectionEC);\\n";\n    var minimumLighting = "0.2"; // Use strings instead of values as 0.0 -> 0 when stringified\n    fragmentLightingBlock +=\n      "  diffuseLight += lightColor * max(dot(normal,l), " +\n      minimumLighting +\n      ");\\n";\n\n    if (hasSpecular) {\n      if (lightingModel === "BLINN") {\n        fragmentLightingBlock += "  vec3 h = normalize(l + viewDir);\\n";\n        fragmentLightingBlock +=\n          "  float specularIntensity = max(0., pow(max(dot(normal, h), 0.), u_shininess));\\n";\n      } else {\n        // PHONG\n        fragmentLightingBlock += "  vec3 reflectDir = reflect(-l, normal);\\n";\n        fragmentLightingBlock +=\n          "  float specularIntensity = max(0., pow(max(dot(reflectDir, viewDir), 0.), u_shininess));\\n";\n      }\n\n      fragmentLightingBlock +=\n        "  specularLight += lightColor * specularIntensity;\\n";\n    }\n  }\n\n  vertexShader += "void main(void) {\\n";\n  vertexShader += vertexShaderMain;\n  vertexShader += "}\\n";\n\n  fragmentShader += "void main(void) {\\n";\n  var colorCreationBlock = "  vec3 color = vec3(0.0, 0.0, 0.0);\\n";\n  if (hasNormals) {\n    fragmentShader += "  vec3 normal = normalize(v_normal);\\n";\n    if (khrMaterialsCommon.doubleSided) {\n      fragmentShader += "  if (czm_backFacing())\\n";\n      fragmentShader += "  {\\n";\n      fragmentShader += "    normal = -normal;\\n";\n      fragmentShader += "  }\\n";\n    }\n  }\n\n  var finalColorComputation;\n  if (lightingModel !== "CONSTANT") {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_diffuse)) {\n      if (techniqueUniforms.u_diffuse.type === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D) {\n        fragmentShader +=\n          "  vec4 diffuse = texture2D(u_diffuse, " + v_texcoord + ");\\n";\n      } else {\n        fragmentShader += "  vec4 diffuse = u_diffuse;\\n";\n      }\n      fragmentShader += "  vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\\n";\n      colorCreationBlock += "  color += diffuse.rgb * diffuseLight;\\n";\n    }\n\n    if (hasSpecular) {\n      if (techniqueUniforms.u_specular.type === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D) {\n        fragmentShader +=\n          "  vec3 specular = texture2D(u_specular, " + v_texcoord + ").rgb;\\n";\n      } else {\n        fragmentShader += "  vec3 specular = u_specular.rgb;\\n";\n      }\n      fragmentShader += "  vec3 specularLight = vec3(0.0, 0.0, 0.0);\\n";\n      colorCreationBlock += "  color += specular * specularLight;\\n";\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_transparency)) {\n      finalColorComputation =\n        "  gl_FragColor = vec4(color * diffuse.a * u_transparency, diffuse.a * u_transparency);\\n";\n    } else {\n      finalColorComputation =\n        "  gl_FragColor = vec4(color * diffuse.a, diffuse.a);\\n";\n    }\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_transparency)) {\n    finalColorComputation =\n      "  gl_FragColor = vec4(color * u_transparency, u_transparency);\\n";\n  } else {\n    finalColorComputation = "  gl_FragColor = vec4(color, 1.0);\\n";\n  }\n\n  if (hasVertexColors) {\n    colorCreationBlock += "  color *= v_vertexColor.rgb;\\n";\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_emission)) {\n    if (techniqueUniforms.u_emission.type === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D) {\n      fragmentShader +=\n        "  vec3 emission = texture2D(u_emission, " + v_texcoord + ").rgb;\\n";\n    } else {\n      fragmentShader += "  vec3 emission = u_emission.rgb;\\n";\n    }\n    colorCreationBlock += "  color += emission;\\n";\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_ambient) || lightingModel !== "CONSTANT") {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(techniqueUniforms.u_ambient)) {\n      if (techniqueUniforms.u_ambient.type === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D) {\n        fragmentShader +=\n          "  vec3 ambient = texture2D(u_ambient, " + v_texcoord + ").rgb;\\n";\n      } else {\n        fragmentShader += "  vec3 ambient = u_ambient.rgb;\\n";\n      }\n    } else {\n      fragmentShader += "  vec3 ambient = diffuse.rgb;\\n";\n    }\n    colorCreationBlock += "  color += ambient * ambientLight;\\n";\n  }\n  fragmentShader += "  vec3 viewDir = -normalize(v_positionEC);\\n";\n  fragmentShader += "  vec3 ambientLight = vec3(0.0, 0.0, 0.0);\\n";\n\n  // Add in light computations\n  fragmentShader += fragmentLightingBlock;\n\n  fragmentShader += colorCreationBlock;\n  fragmentShader += finalColorComputation;\n  fragmentShader += "}\\n";\n\n  // Add shaders\n  var vertexShaderId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(shaders, {\n    type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].VERTEX_SHADER */ .Z.VERTEX_SHADER,\n    extras: {\n      _pipeline: {\n        source: vertexShader,\n        extension: ".glsl",\n      },\n    },\n  });\n\n  var fragmentShaderId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(shaders, {\n    type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FRAGMENT_SHADER */ .Z.FRAGMENT_SHADER,\n    extras: {\n      _pipeline: {\n        source: fragmentShader,\n        extension: ".glsl",\n      },\n    },\n  });\n\n  // Add program\n  var programId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(programs, {\n    fragmentShader: fragmentShaderId,\n    vertexShader: vertexShaderId,\n  });\n\n  var techniqueId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(techniques, {\n    attributes: techniqueAttributes,\n    program: programId,\n    uniforms: techniqueUniforms,\n  });\n\n  return techniqueId;\n}\n\nfunction getKHRMaterialsCommonValueType(paramName, paramValue) {\n  var value;\n\n  // Backwards compatibility for COLLADA2GLTF v1.0-draft when it encoding\n  // materials using KHR_materials_common with explicit type/value members\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(paramValue.value)) {\n    value = paramValue.value;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(paramValue.index)) {\n    value = [paramValue.index];\n  } else {\n    value = paramValue;\n  }\n\n  switch (paramName) {\n    case "ambient":\n      return value.length === 1\n        ? _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D\n        : _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4;\n    case "diffuse":\n      return value.length === 1\n        ? _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D\n        : _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4;\n    case "emission":\n      return value.length === 1\n        ? _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D\n        : _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4;\n    case "specular":\n      return value.length === 1\n        ? _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D\n        : _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4;\n    case "shininess":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT;\n    case "transparency":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT;\n\n    // these two are usually not used directly within shaders,\n    // they are just added here for completeness\n    case "transparent":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].BOOL */ .Z.BOOL;\n    case "doubleSided":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].BOOL */ .Z.BOOL;\n  }\n}\n\nfunction getTechniqueKey(khrMaterialsCommon, primitiveInfo) {\n  var techniqueKey = "";\n  techniqueKey += "technique:" + khrMaterialsCommon.technique + ";";\n\n  var values = khrMaterialsCommon.values;\n  var keys = Object.keys(values).sort();\n  var keysCount = keys.length;\n  for (var i = 0; i < keysCount; ++i) {\n    var name = keys[i];\n    if (values.hasOwnProperty(name)) {\n      techniqueKey +=\n        name + ":" + getKHRMaterialsCommonValueType(name, values[name]);\n      techniqueKey += ";";\n    }\n  }\n\n  var jointCount = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(khrMaterialsCommon.jointCount, 0);\n  techniqueKey += jointCount.toString() + ";";\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(primitiveInfo)) {\n    var skinningInfo = primitiveInfo.skinning;\n    if (jointCount > 0) {\n      techniqueKey += skinningInfo.type + ";";\n    }\n    techniqueKey += primitiveInfo.hasVertexColors;\n  }\n\n  return techniqueKey;\n}\n\nfunction lightDefaults(gltf) {\n  var khrMaterialsCommon = gltf.extensions.KHR_materials_common;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(khrMaterialsCommon) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(khrMaterialsCommon.lights)) {\n    return;\n  }\n\n  var lights = khrMaterialsCommon.lights;\n\n  var lightsLength = lights.length;\n  for (var lightId = 0; lightId < lightsLength; lightId++) {\n    var light = lights[lightId];\n    if (light.type === "ambient") {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.ambient)) {\n        light.ambient = {};\n      }\n      var ambientLight = light.ambient;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(ambientLight.color)) {\n        ambientLight.color = [1.0, 1.0, 1.0];\n      }\n    } else if (light.type === "directional") {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.directional)) {\n        light.directional = {};\n      }\n      var directionalLight = light.directional;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(directionalLight.color)) {\n        directionalLight.color = [1.0, 1.0, 1.0];\n      }\n    } else if (light.type === "point") {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.point)) {\n        light.point = {};\n      }\n      var pointLight = light.point;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(pointLight.color)) {\n        pointLight.color = [1.0, 1.0, 1.0];\n      }\n\n      pointLight.constantAttenuation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n        pointLight.constantAttenuation,\n        1.0\n      );\n      pointLight.linearAttenuation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n        pointLight.linearAttenuation,\n        0.0\n      );\n      pointLight.quadraticAttenuation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n        pointLight.quadraticAttenuation,\n        0.0\n      );\n    } else if (light.type === "spot") {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(light.spot)) {\n        light.spot = {};\n      }\n      var spotLight = light.spot;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(spotLight.color)) {\n        spotLight.color = [1.0, 1.0, 1.0];\n      }\n\n      spotLight.constantAttenuation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n        spotLight.constantAttenuation,\n        1.0\n      );\n      spotLight.fallOffAngle = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(spotLight.fallOffAngle, 3.14159265);\n      spotLight.fallOffExponent = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(spotLight.fallOffExponent, 0.0);\n      spotLight.linearAttenuation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n        spotLight.linearAttenuation,\n        0.0\n      );\n      spotLight.quadraticAttenuation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n        spotLight.quadraticAttenuation,\n        0.0\n      );\n    }\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (processModelMaterialsCommon);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51240\n')},14503:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52200);\n/* harmony import */ var _Core_webGLConstantToGlslType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37231);\n/* harmony import */ var _GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9919);\n/* harmony import */ var _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56629);\n/* harmony import */ var _GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29745);\n/* harmony import */ var _ModelUtility_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15322);\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction processPbrMaterials(gltf, options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  // No need to create new techniques if they already exist,\n  // the shader should handle these values\n  if ((0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf, "KHR_techniques_webgl")) {\n    return gltf;\n  }\n\n  // All materials in glTF are PBR by default,\n  // so we should apply PBR unless no materials are found.\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf.materials) || gltf.materials.length === 0) {\n    return gltf;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf.extensions)) {\n    gltf.extensions = {};\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf.extensionsUsed)) {\n    gltf.extensionsUsed = [];\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf.extensionsRequired)) {\n    gltf.extensionsRequired = [];\n  }\n\n  gltf.extensions.KHR_techniques_webgl = {\n    programs: [],\n    shaders: [],\n    techniques: [],\n  };\n\n  gltf.extensionsUsed.push("KHR_techniques_webgl");\n  gltf.extensionsRequired.push("KHR_techniques_webgl");\n\n  var primitiveByMaterial = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].splitIncompatibleMaterials */ .Z.splitIncompatibleMaterials(gltf);\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].material */ .Z.material(gltf, function (material, materialIndex) {\n    var generatedMaterialValues = {};\n    var technique = generateTechnique(\n      gltf,\n      material,\n      materialIndex,\n      generatedMaterialValues,\n      primitiveByMaterial,\n      options\n    );\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(material.extensions)) {\n      material.extensions = {};\n    }\n\n    material.extensions.KHR_techniques_webgl = {\n      values: generatedMaterialValues,\n      technique: technique,\n    };\n  });\n\n  // If any primitives have semantics that aren\'t declared in the generated\n  // shaders, we want to preserve them.\n  _ModelUtility_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ensureSemanticExistence */ .Z.ensureSemanticExistence(gltf);\n\n  return gltf;\n}\n\nfunction isSpecularGlossinessMaterial(material) {\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(material.extensions) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(material.extensions.KHR_materials_pbrSpecularGlossiness)\n  );\n}\n\nfunction addTextureCoordinates(\n  gltf,\n  textureName,\n  generatedMaterialValues,\n  defaultTexCoord,\n  result\n) {\n  var texCoord;\n  var texInfo = generatedMaterialValues[textureName];\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(texInfo) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(texInfo.texCoord) && texInfo.texCoord === 1) {\n    defaultTexCoord = defaultTexCoord.replace("0", "1");\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues[textureName + "Offset"])) {\n    texCoord = textureName + "Coord";\n    result.fragmentShaderMain +=\n      "    vec2 " +\n      texCoord +\n      " = computeTexCoord(" +\n      defaultTexCoord +\n      ", " +\n      textureName +\n      "Offset, " +\n      textureName +\n      "Rotation, " +\n      textureName +\n      "Scale);\\n";\n  } else {\n    texCoord = defaultTexCoord;\n  }\n  return texCoord;\n}\n\nvar DEFAULT_TEXTURE_OFFSET = [0.0, 0.0];\nvar DEFAULT_TEXTURE_ROTATION = [0.0];\nvar DEFAULT_TEXTURE_SCALE = [1.0, 1.0];\n\nfunction handleKHRTextureTransform(\n  parameterName,\n  value,\n  generatedMaterialValues\n) {\n  if (\n    parameterName.indexOf("Texture") === -1 ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(value.extensions) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(value.extensions.KHR_texture_transform)\n  ) {\n    return;\n  }\n\n  var uniformName = "u_" + parameterName;\n  var extension = value.extensions.KHR_texture_transform;\n  generatedMaterialValues[uniformName + "Offset"] = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    extension.offset,\n    DEFAULT_TEXTURE_OFFSET\n  );\n  generatedMaterialValues[uniformName + "Rotation"] = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    extension.rotation,\n    DEFAULT_TEXTURE_ROTATION\n  );\n  generatedMaterialValues[uniformName + "Scale"] = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    extension.scale,\n    DEFAULT_TEXTURE_SCALE\n  );\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(value.texCoord) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(extension.texCoord)) {\n    generatedMaterialValues[uniformName].texCoord = extension.texCoord;\n  }\n}\n\nfunction generateTechnique(\n  gltf,\n  material,\n  materialIndex,\n  generatedMaterialValues,\n  primitiveByMaterial,\n  options\n) {\n  var addBatchIdToGeneratedShaders = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.addBatchIdToGeneratedShaders,\n    false\n  );\n\n  var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n  var techniques = techniquesWebgl.techniques;\n  var shaders = techniquesWebgl.shaders;\n  var programs = techniquesWebgl.programs;\n\n  var useSpecGloss = isSpecularGlossinessMaterial(material);\n\n  var uniformName;\n  var parameterName;\n  var value;\n  var pbrMetallicRoughness = material.pbrMetallicRoughness;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(pbrMetallicRoughness) && !useSpecGloss) {\n    for (parameterName in pbrMetallicRoughness) {\n      if (pbrMetallicRoughness.hasOwnProperty(parameterName)) {\n        value = pbrMetallicRoughness[parameterName];\n        uniformName = "u_" + parameterName;\n        generatedMaterialValues[uniformName] = value;\n        handleKHRTextureTransform(\n          parameterName,\n          value,\n          generatedMaterialValues\n        );\n      }\n    }\n  }\n\n  if (useSpecGloss) {\n    var pbrSpecularGlossiness =\n      material.extensions.KHR_materials_pbrSpecularGlossiness;\n    for (parameterName in pbrSpecularGlossiness) {\n      if (pbrSpecularGlossiness.hasOwnProperty(parameterName)) {\n        value = pbrSpecularGlossiness[parameterName];\n        uniformName = "u_" + parameterName;\n        generatedMaterialValues[uniformName] = value;\n        handleKHRTextureTransform(\n          parameterName,\n          value,\n          generatedMaterialValues\n        );\n      }\n    }\n  }\n\n  for (var additional in material) {\n    if (\n      material.hasOwnProperty(additional) &&\n      (additional.indexOf("Texture") >= 0 || additional.indexOf("Factor") >= 0)\n    ) {\n      value = material[additional];\n      uniformName = "u_" + additional;\n      generatedMaterialValues[uniformName] = value;\n      handleKHRTextureTransform(additional, value, generatedMaterialValues);\n    }\n  }\n\n  var vertexShader = "precision highp float;\\n";\n  var fragmentShader = "precision highp float;\\n";\n\n  var skin;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(gltf.skins)) {\n    skin = gltf.skins[0];\n  }\n  var joints = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(skin) ? skin.joints : [];\n  var jointCount = joints.length;\n\n  var primitiveInfo = primitiveByMaterial[materialIndex];\n\n  var skinningInfo;\n  var hasSkinning = false;\n  var hasVertexColors = false;\n  var hasMorphTargets = false;\n  var hasNormals = false;\n  var hasTangents = false;\n  var hasTexCoords = false;\n  var hasTexCoord1 = false;\n  var hasOutline = false;\n  var isUnlit = false;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(primitiveInfo)) {\n    skinningInfo = primitiveInfo.skinning;\n    hasSkinning = skinningInfo.skinned && joints.length > 0;\n    hasVertexColors = primitiveInfo.hasVertexColors;\n    hasMorphTargets = primitiveInfo.hasMorphTargets;\n    hasNormals = primitiveInfo.hasNormals;\n    hasTangents = primitiveInfo.hasTangents;\n    hasTexCoords = primitiveInfo.hasTexCoords;\n    hasTexCoord1 = primitiveInfo.hasTexCoord1;\n    hasOutline = primitiveInfo.hasOutline;\n  }\n\n  var morphTargets;\n  if (hasMorphTargets) {\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].mesh */ .Z.mesh(gltf, function (mesh) {\n      _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].meshPrimitive */ .Z.meshPrimitive(mesh, function (primitive) {\n        if (primitive.material === materialIndex) {\n          var targets = primitive.targets;\n          if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(targets)) {\n            morphTargets = targets;\n          }\n        }\n      });\n    });\n  }\n\n  // Add techniques\n  var techniqueUniforms = {\n    // Add matrices\n    u_modelViewMatrix: {\n      semantic: (0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltf, "CESIUM_RTC")\n        ? "CESIUM_RTC_MODELVIEW"\n        : "MODELVIEW",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    },\n    u_projectionMatrix: {\n      semantic: "PROJECTION",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    },\n  };\n\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(material.extensions) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(material.extensions.KHR_materials_unlit)\n  ) {\n    isUnlit = true;\n  }\n\n  if (hasNormals) {\n    techniqueUniforms.u_normalMatrix = {\n      semantic: "MODELVIEWINVERSETRANSPOSE",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    };\n  }\n\n  if (hasSkinning) {\n    techniqueUniforms.u_jointMatrix = {\n      count: jointCount,\n      semantic: "JOINTMATRIX",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    };\n  }\n\n  if (hasMorphTargets) {\n    techniqueUniforms.u_morphWeights = {\n      count: morphTargets.length,\n      semantic: "MORPHWEIGHTS",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT,\n    };\n  }\n\n  var alphaMode = material.alphaMode;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(alphaMode) && alphaMode === "MASK") {\n    techniqueUniforms.u_alphaCutoff = {\n      semantic: "ALPHACUTOFF",\n      type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT,\n    };\n  }\n\n  // Add material values\n  for (uniformName in generatedMaterialValues) {\n    if (generatedMaterialValues.hasOwnProperty(uniformName)) {\n      techniqueUniforms[uniformName] = {\n        type: getPBRValueType(uniformName),\n      };\n    }\n  }\n\n  var baseColorUniform = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    techniqueUniforms.u_baseColorTexture,\n    techniqueUniforms.u_baseColorFactor\n  );\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(baseColorUniform)) {\n    baseColorUniform.semantic = "_3DTILESDIFFUSE";\n  }\n\n  // Add uniforms to shaders\n  for (uniformName in techniqueUniforms) {\n    if (techniqueUniforms.hasOwnProperty(uniformName)) {\n      var uniform = techniqueUniforms[uniformName];\n      var arraySize = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(uniform.count) ? "[" + uniform.count + "]" : "";\n      if (\n        (uniform.type !== _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3 &&\n          uniform.type !== _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4 &&\n          uniformName !== "u_morphWeights") ||\n        uniform.useInFragment\n      ) {\n        fragmentShader +=\n          "uniform " +\n          (0,_Core_webGLConstantToGlslType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(uniform.type) +\n          " " +\n          uniformName +\n          arraySize +\n          ";\\n";\n        delete uniform.useInFragment;\n      } else {\n        vertexShader +=\n          "uniform " +\n          (0,_Core_webGLConstantToGlslType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(uniform.type) +\n          " " +\n          uniformName +\n          arraySize +\n          ";\\n";\n      }\n    }\n  }\n\n  if (hasOutline) {\n    fragmentShader += "uniform sampler2D u_outlineTexture;\\n";\n  }\n\n  // Add attributes with semantics\n  var vertexShaderMain = "";\n  if (hasSkinning) {\n    vertexShaderMain +=\n      "    mat4 skinMatrix =\\n" +\n      "        a_weight.x * u_jointMatrix[int(a_joint.x)] +\\n" +\n      "        a_weight.y * u_jointMatrix[int(a_joint.y)] +\\n" +\n      "        a_weight.z * u_jointMatrix[int(a_joint.z)] +\\n" +\n      "        a_weight.w * u_jointMatrix[int(a_joint.w)];\\n";\n  }\n\n  // Add position always\n  var techniqueAttributes = {\n    a_position: {\n      semantic: "POSITION",\n    },\n  };\n\n  if (hasOutline) {\n    techniqueAttributes.a_outlineCoordinates = {\n      semantic: "_OUTLINE_COORDINATES",\n    };\n  }\n\n  vertexShader += "attribute vec3 a_position;\\n";\n  if (hasNormals) {\n    vertexShader += "varying vec3 v_positionEC;\\n";\n  }\n  if (hasOutline) {\n    vertexShader += "attribute vec3 a_outlineCoordinates;\\n";\n    vertexShader += "varying vec3 v_outlineCoordinates;\\n";\n  }\n\n  // Morph Target Weighting\n  vertexShaderMain += "    vec3 weightedPosition = a_position;\\n";\n  if (hasNormals) {\n    vertexShaderMain += "    vec3 weightedNormal = a_normal;\\n";\n  }\n  if (hasTangents) {\n    vertexShaderMain += "    vec4 weightedTangent = a_tangent;\\n";\n  }\n  if (hasMorphTargets) {\n    for (var k = 0; k < morphTargets.length; k++) {\n      var targetAttributes = morphTargets[k];\n      for (var targetAttribute in targetAttributes) {\n        if (\n          targetAttributes.hasOwnProperty(targetAttribute) &&\n          targetAttribute !== "extras"\n        ) {\n          var attributeName = "a_" + targetAttribute + "_" + k;\n          techniqueAttributes[attributeName] = {\n            semantic: targetAttribute + "_" + k,\n          };\n          vertexShader += "attribute vec3 " + attributeName + ";\\n";\n          if (targetAttribute === "POSITION") {\n            vertexShaderMain +=\n              "    weightedPosition += u_morphWeights[" +\n              k +\n              "] * " +\n              attributeName +\n              ";\\n";\n          } else if (targetAttribute === "NORMAL") {\n            vertexShaderMain +=\n              "    weightedNormal += u_morphWeights[" +\n              k +\n              "] * " +\n              attributeName +\n              ";\\n";\n          } else if (hasTangents && targetAttribute === "TANGENT") {\n            vertexShaderMain +=\n              "    weightedTangent.xyz += u_morphWeights[" +\n              k +\n              "] * " +\n              attributeName +\n              ";\\n";\n          }\n        }\n      }\n    }\n  }\n\n  // Final position computation\n  if (hasSkinning) {\n    vertexShaderMain +=\n      "    vec4 position = skinMatrix * vec4(weightedPosition, 1.0);\\n";\n  } else {\n    vertexShaderMain += "    vec4 position = vec4(weightedPosition, 1.0);\\n";\n  }\n  vertexShaderMain += "    position = u_modelViewMatrix * position;\\n";\n  if (hasNormals) {\n    vertexShaderMain += "    v_positionEC = position.xyz;\\n";\n  }\n  vertexShaderMain += "    gl_Position = u_projectionMatrix * position;\\n";\n\n  if (hasOutline) {\n    vertexShaderMain += "    v_outlineCoordinates = a_outlineCoordinates;\\n";\n  }\n\n  // Final normal computation\n  if (hasNormals) {\n    techniqueAttributes.a_normal = {\n      semantic: "NORMAL",\n    };\n    vertexShader += "attribute vec3 a_normal;\\n";\n    if (!isUnlit) {\n      vertexShader += "varying vec3 v_normal;\\n";\n      if (hasSkinning) {\n        vertexShaderMain +=\n          "    v_normal = u_normalMatrix * mat3(skinMatrix) * weightedNormal;\\n";\n      } else {\n        vertexShaderMain += "    v_normal = u_normalMatrix * weightedNormal;\\n";\n      }\n      fragmentShader += "varying vec3 v_normal;\\n";\n    }\n    fragmentShader += "varying vec3 v_positionEC;\\n";\n  }\n\n  // Read tangents if available\n  if (hasTangents) {\n    techniqueAttributes.a_tangent = {\n      semantic: "TANGENT",\n    };\n    vertexShader += "attribute vec4 a_tangent;\\n";\n    vertexShader += "varying vec4 v_tangent;\\n";\n    vertexShaderMain +=\n      "    v_tangent.xyz = u_normalMatrix * weightedTangent.xyz;\\n";\n    vertexShaderMain += "    v_tangent.w = weightedTangent.w;\\n";\n\n    fragmentShader += "varying vec4 v_tangent;\\n";\n  }\n\n  if (hasOutline) {\n    fragmentShader += "varying vec3 v_outlineCoordinates;\\n";\n  }\n\n  var fragmentShaderMain = "";\n\n  // Add texture coordinates if the material uses them\n  var v_texCoord;\n  var normalTexCoord;\n  var baseColorTexCoord;\n  var specularGlossinessTexCoord;\n  var diffuseTexCoord;\n  var metallicRoughnessTexCoord;\n  var occlusionTexCoord;\n  var emissiveTexCoord;\n\n  if (hasTexCoords) {\n    techniqueAttributes.a_texcoord_0 = {\n      semantic: "TEXCOORD_0",\n    };\n\n    v_texCoord = "v_texcoord_0";\n    vertexShader += "attribute vec2 a_texcoord_0;\\n";\n    vertexShader += "varying vec2 " + v_texCoord + ";\\n";\n    vertexShaderMain += "    " + v_texCoord + " = a_texcoord_0;\\n";\n\n    fragmentShader += "varying vec2 " + v_texCoord + ";\\n";\n\n    if (hasTexCoord1) {\n      techniqueAttributes.a_texcoord_1 = {\n        semantic: "TEXCOORD_1",\n      };\n\n      var v_texCoord1 = v_texCoord.replace("0", "1");\n      vertexShader += "attribute vec2 a_texcoord_1;\\n";\n      vertexShader += "varying vec2 " + v_texCoord1 + ";\\n";\n      vertexShaderMain += "    " + v_texCoord1 + " = a_texcoord_1;\\n";\n\n      fragmentShader += "varying vec2 " + v_texCoord1 + ";\\n";\n    }\n\n    var result = {\n      fragmentShaderMain: fragmentShaderMain,\n    };\n    normalTexCoord = addTextureCoordinates(\n      gltf,\n      "u_normalTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    baseColorTexCoord = addTextureCoordinates(\n      gltf,\n      "u_baseColorTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    specularGlossinessTexCoord = addTextureCoordinates(\n      gltf,\n      "u_specularGlossinessTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    diffuseTexCoord = addTextureCoordinates(\n      gltf,\n      "u_diffuseTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    metallicRoughnessTexCoord = addTextureCoordinates(\n      gltf,\n      "u_metallicRoughnessTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    occlusionTexCoord = addTextureCoordinates(\n      gltf,\n      "u_occlusionTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    emissiveTexCoord = addTextureCoordinates(\n      gltf,\n      "u_emissiveTexture",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n\n    fragmentShaderMain = result.fragmentShaderMain;\n  }\n\n  // Add skinning information if available\n  if (hasSkinning) {\n    techniqueAttributes.a_joint = {\n      semantic: "JOINTS_0",\n    };\n    techniqueAttributes.a_weight = {\n      semantic: "WEIGHTS_0",\n    };\n\n    vertexShader += "attribute vec4 a_joint;\\n";\n    vertexShader += "attribute vec4 a_weight;\\n";\n  }\n\n  if (hasVertexColors) {\n    techniqueAttributes.a_vertexColor = {\n      semantic: "COLOR_0",\n    };\n    vertexShader += "attribute vec4 a_vertexColor;\\n";\n    vertexShader += "varying vec4 v_vertexColor;\\n";\n    vertexShaderMain += "  v_vertexColor = a_vertexColor;\\n";\n    fragmentShader += "varying vec4 v_vertexColor;\\n";\n  }\n\n  if (addBatchIdToGeneratedShaders) {\n    techniqueAttributes.a_batchId = {\n      semantic: "_BATCHID",\n    };\n    vertexShader += "attribute float a_batchId;\\n";\n  }\n\n  vertexShader += "void main(void) \\n{\\n";\n  vertexShader += vertexShaderMain;\n  vertexShader += "}\\n";\n\n  // Fragment shader lighting\n  if (hasNormals && !isUnlit) {\n    fragmentShader += "const float M_PI = 3.141592653589793;\\n";\n\n    fragmentShader +=\n      "vec3 lambertianDiffuse(vec3 diffuseColor) \\n" +\n      "{\\n" +\n      "    return diffuseColor / M_PI;\\n" +\n      "}\\n\\n";\n\n    fragmentShader +=\n      "vec3 fresnelSchlick2(vec3 f0, vec3 f90, float VdotH) \\n" +\n      "{\\n" +\n      "    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\\n" +\n      "}\\n\\n";\n\n    fragmentShader +=\n      "vec3 fresnelSchlick(float metalness, float VdotH) \\n" +\n      "{\\n" +\n      "    return metalness + (vec3(1.0) - metalness) * pow(1.0 - VdotH, 5.0);\\n" +\n      "}\\n\\n";\n\n    fragmentShader +=\n      "float smithVisibilityG1(float NdotV, float roughness) \\n" +\n      "{\\n" +\n      "    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\\n" +\n      "    return NdotV / (NdotV * (1.0 - k) + k);\\n" +\n      "}\\n\\n";\n\n    fragmentShader +=\n      "float smithVisibilityGGX(float roughness, float NdotL, float NdotV) \\n" +\n      "{\\n" +\n      "    return smithVisibilityG1(NdotL, roughness) * smithVisibilityG1(NdotV, roughness);\\n" +\n      "}\\n\\n";\n\n    fragmentShader +=\n      "float GGX(float roughness, float NdotH) \\n" +\n      "{\\n" +\n      "    float roughnessSquared = roughness * roughness;\\n" +\n      "    float f = (NdotH * roughnessSquared - NdotH) * NdotH + 1.0;\\n" +\n      "    return roughnessSquared / (M_PI * f * f);\\n" +\n      "}\\n\\n";\n  }\n\n  fragmentShader +=\n    "vec3 SRGBtoLINEAR3(vec3 srgbIn) \\n" +\n    "{\\n" +\n    "    return pow(srgbIn, vec3(2.2));\\n" +\n    "}\\n\\n";\n\n  fragmentShader +=\n    "vec4 SRGBtoLINEAR4(vec4 srgbIn) \\n" +\n    "{\\n" +\n    "    vec3 linearOut = pow(srgbIn.rgb, vec3(2.2));\\n" +\n    "    return vec4(linearOut, srgbIn.a);\\n" +\n    "}\\n\\n";\n\n  fragmentShader +=\n    "vec3 applyTonemapping(vec3 linearIn) \\n" +\n    "{\\n" +\n    "#ifndef HDR \\n" +\n    "    return czm_acesTonemapping(linearIn);\\n" +\n    "#else \\n" +\n    "    return linearIn;\\n" +\n    "#endif \\n" +\n    "}\\n\\n";\n\n  fragmentShader +=\n    "vec3 LINEARtoSRGB(vec3 linearIn) \\n" +\n    "{\\n" +\n    "#ifndef HDR \\n" +\n    "    return pow(linearIn, vec3(1.0/2.2));\\n" +\n    "#else \\n" +\n    "    return linearIn;\\n" +\n    "#endif \\n" +\n    "}\\n\\n";\n\n  fragmentShader +=\n    "vec2 computeTexCoord(vec2 texCoords, vec2 offset, float rotation, vec2 scale) \\n" +\n    "{\\n" +\n    "    rotation = -rotation; \\n" +\n    "    mat3 transform = mat3(\\n" +\n    "        cos(rotation) * scale.x, sin(rotation) * scale.x, 0.0, \\n" +\n    "       -sin(rotation) * scale.y, cos(rotation) * scale.y, 0.0, \\n" +\n    "        offset.x, offset.y, 1.0); \\n" +\n    "    vec2 transformedTexCoords = (transform * vec3(fract(texCoords), 1.0)).xy; \\n" +\n    "    return transformedTexCoords; \\n" +\n    "}\\n\\n";\n\n  fragmentShader += "#ifdef USE_IBL_LIGHTING \\n";\n  fragmentShader += "uniform vec2 gltf_iblFactor; \\n";\n  fragmentShader += "#endif \\n";\n  fragmentShader += "#ifdef USE_CUSTOM_LIGHT_COLOR \\n";\n  fragmentShader += "uniform vec3 gltf_lightColor; \\n";\n  fragmentShader += "#endif \\n";\n\n  fragmentShader += "void main(void) \\n{\\n";\n  fragmentShader += fragmentShaderMain;\n\n  // Add normal mapping to fragment shader\n  if (hasNormals && !isUnlit) {\n    fragmentShader += "    vec3 ng = normalize(v_normal);\\n";\n    fragmentShader +=\n      "    vec3 positionWC = vec3(czm_inverseView * vec4(v_positionEC, 1.0));\\n";\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_normalTexture)) {\n      if (hasTangents) {\n        // Read tangents from varying\n        fragmentShader += "    vec3 t = normalize(v_tangent.xyz);\\n";\n        fragmentShader +=\n          "    vec3 b = normalize(cross(ng, t) * v_tangent.w);\\n";\n        fragmentShader += "    mat3 tbn = mat3(t, b, ng);\\n";\n        fragmentShader +=\n          "    vec3 n = texture2D(u_normalTexture, " +\n          normalTexCoord +\n          ").rgb;\\n";\n        fragmentShader += "    n = normalize(tbn * (2.0 * n - 1.0));\\n";\n      } else {\n        // Add standard derivatives extension\n        fragmentShader =\n          "#ifdef GL_OES_standard_derivatives\\n" +\n          "#extension GL_OES_standard_derivatives : enable\\n" +\n          "#endif\\n" +\n          fragmentShader;\n        // Compute tangents\n        fragmentShader += "#ifdef GL_OES_standard_derivatives\\n";\n        fragmentShader += "    vec3 pos_dx = dFdx(v_positionEC);\\n";\n        fragmentShader += "    vec3 pos_dy = dFdy(v_positionEC);\\n";\n        fragmentShader +=\n          "    vec3 tex_dx = dFdx(vec3(" + normalTexCoord + ",0.0));\\n";\n        fragmentShader +=\n          "    vec3 tex_dy = dFdy(vec3(" + normalTexCoord + ",0.0));\\n";\n        fragmentShader +=\n          "    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n";\n        fragmentShader += "    t = normalize(t - ng * dot(ng, t));\\n";\n        fragmentShader += "    vec3 b = normalize(cross(ng, t));\\n";\n        fragmentShader += "    mat3 tbn = mat3(t, b, ng);\\n";\n        fragmentShader +=\n          "    vec3 n = texture2D(u_normalTexture, " +\n          normalTexCoord +\n          ").rgb;\\n";\n        fragmentShader += "    n = normalize(tbn * (2.0 * n - 1.0));\\n";\n        fragmentShader += "#else\\n";\n        fragmentShader += "    vec3 n = ng;\\n";\n        fragmentShader += "#endif\\n";\n      }\n    } else {\n      fragmentShader += "    vec3 n = ng;\\n";\n    }\n    if (material.doubleSided) {\n      fragmentShader += "    if (czm_backFacing())\\n";\n      fragmentShader += "    {\\n";\n      fragmentShader += "        n = -n;\\n";\n      fragmentShader += "    }\\n";\n    }\n  }\n\n  // Add base color to fragment shader\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_baseColorTexture)) {\n    fragmentShader +=\n      "    vec4 baseColorWithAlpha = SRGBtoLINEAR4(texture2D(u_baseColorTexture, " +\n      baseColorTexCoord +\n      "));\\n";\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_baseColorFactor)) {\n      fragmentShader += "    baseColorWithAlpha *= u_baseColorFactor;\\n";\n    }\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_baseColorFactor)) {\n    fragmentShader += "    vec4 baseColorWithAlpha = u_baseColorFactor;\\n";\n  } else {\n    fragmentShader += "    vec4 baseColorWithAlpha = vec4(1.0);\\n";\n  }\n\n  if (hasVertexColors) {\n    fragmentShader += "    baseColorWithAlpha *= v_vertexColor;\\n";\n  }\n\n  fragmentShader += "    vec3 baseColor = baseColorWithAlpha.rgb;\\n";\n\n  if (hasNormals && !isUnlit) {\n    if (useSpecGloss) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_specularGlossinessTexture)) {\n        fragmentShader +=\n          "    vec4 specularGlossiness = SRGBtoLINEAR4(texture2D(u_specularGlossinessTexture, " +\n          specularGlossinessTexCoord +\n          "));\\n";\n        fragmentShader += "    vec3 specular = specularGlossiness.rgb;\\n";\n        fragmentShader += "    float glossiness = specularGlossiness.a;\\n";\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_specularFactor)) {\n          fragmentShader += "    specular *= u_specularFactor;\\n";\n        }\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_glossinessFactor)) {\n          fragmentShader += "    glossiness *= u_glossinessFactor;\\n";\n        }\n      } else {\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_specularFactor)) {\n          fragmentShader +=\n            "    vec3 specular = clamp(u_specularFactor, vec3(0.0), vec3(1.0));\\n";\n        } else {\n          fragmentShader += "    vec3 specular = vec3(1.0);\\n";\n        }\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_glossinessFactor)) {\n          fragmentShader +=\n            "    float glossiness = clamp(u_glossinessFactor, 0.0, 1.0);\\n";\n        } else {\n          fragmentShader += "    float glossiness = 1.0;\\n";\n        }\n      }\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_diffuseTexture)) {\n        fragmentShader +=\n          "    vec4 diffuse = SRGBtoLINEAR4(texture2D(u_diffuseTexture, " +\n          diffuseTexCoord +\n          "));\\n";\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_diffuseFactor)) {\n          fragmentShader += "    diffuse *= u_diffuseFactor;\\n";\n        }\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_diffuseFactor)) {\n        fragmentShader +=\n          "    vec4 diffuse = clamp(u_diffuseFactor, vec4(0.0), vec4(1.0));\\n";\n      } else {\n        fragmentShader += "    vec4 diffuse = vec4(1.0);\\n";\n      }\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_metallicRoughnessTexture)) {\n      fragmentShader +=\n        "    vec3 metallicRoughness = texture2D(u_metallicRoughnessTexture, " +\n        metallicRoughnessTexCoord +\n        ").rgb;\\n";\n      fragmentShader +=\n        "    float metalness = clamp(metallicRoughness.b, 0.0, 1.0);\\n";\n      fragmentShader +=\n        "    float roughness = clamp(metallicRoughness.g, 0.04, 1.0);\\n";\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_metallicFactor)) {\n        fragmentShader += "    metalness *= u_metallicFactor;\\n";\n      }\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_roughnessFactor)) {\n        fragmentShader += "    roughness *= u_roughnessFactor;\\n";\n      }\n    } else {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_metallicFactor)) {\n        fragmentShader +=\n          "    float metalness = clamp(u_metallicFactor, 0.0, 1.0);\\n";\n      } else {\n        fragmentShader += "    float metalness = 1.0;\\n";\n      }\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_roughnessFactor)) {\n        fragmentShader +=\n          "    float roughness = clamp(u_roughnessFactor, 0.04, 1.0);\\n";\n      } else {\n        fragmentShader += "    float roughness = 1.0;\\n";\n      }\n    }\n\n    fragmentShader += "    vec3 v = -normalize(v_positionEC);\\n";\n\n    // Generate fragment shader\'s lighting block\n    fragmentShader += "#ifndef USE_CUSTOM_LIGHT_COLOR \\n";\n    fragmentShader += "    vec3 lightColorHdr = czm_lightColorHdr;\\n";\n    fragmentShader += "#else \\n";\n    fragmentShader += "    vec3 lightColorHdr = gltf_lightColor;\\n";\n    fragmentShader += "#endif \\n";\n    fragmentShader += "    vec3 l = normalize(czm_lightDirectionEC);\\n";\n    fragmentShader += "    vec3 h = normalize(v + l);\\n";\n    fragmentShader += "    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n";\n    fragmentShader += "    float NdotV = abs(dot(n, v)) + 0.001;\\n";\n    fragmentShader += "    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n";\n    fragmentShader += "    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n";\n    fragmentShader += "    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n";\n    fragmentShader += "    vec3 f0 = vec3(0.04);\\n";\n    // Whether the material uses metallic-roughness or specular-glossiness changes how the BRDF inputs are computed.\n    // It does not change the implementation of the BRDF itself.\n    if (useSpecGloss) {\n      fragmentShader += "    float roughness = 1.0 - glossiness;\\n";\n      fragmentShader +=\n        "    vec3 diffuseColor = diffuse.rgb * (1.0 - max(max(specular.r, specular.g), specular.b));\\n";\n      fragmentShader += "    vec3 specularColor = specular;\\n";\n    } else {\n      fragmentShader +=\n        "    vec3 diffuseColor = baseColor * (1.0 - metalness) * (1.0 - f0);\\n";\n      fragmentShader +=\n        "    vec3 specularColor = mix(f0, baseColor, metalness);\\n";\n    }\n\n    fragmentShader += "    float alpha = roughness * roughness;\\n";\n    fragmentShader +=\n      "    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n";\n    fragmentShader +=\n      "    vec3 r90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\\n";\n    fragmentShader += "    vec3 r0 = specularColor.rgb;\\n";\n\n    fragmentShader += "    vec3 F = fresnelSchlick2(r0, r90, VdotH);\\n";\n    fragmentShader +=\n      "    float G = smithVisibilityGGX(alpha, NdotL, NdotV);\\n";\n    fragmentShader += "    float D = GGX(alpha, NdotH);\\n";\n\n    fragmentShader +=\n      "    vec3 diffuseContribution = (1.0 - F) * lambertianDiffuse(diffuseColor);\\n";\n    fragmentShader +=\n      "    vec3 specularContribution = F * G * D / (4.0 * NdotL * NdotV);\\n";\n    fragmentShader +=\n      "    vec3 color = NdotL * lightColorHdr * (diffuseContribution + specularContribution);\\n";\n\n    // Use the procedural IBL if there are no environment maps\n    fragmentShader +=\n      "#if defined(USE_IBL_LIGHTING) && !defined(DIFFUSE_IBL) && !defined(SPECULAR_IBL) \\n";\n\n    fragmentShader +=\n      "    vec3 r = normalize(czm_inverseViewRotation * normalize(reflect(v, n)));\\n";\n    // Figure out if the reflection vector hits the ellipsoid\n    fragmentShader += "    float vertexRadius = length(positionWC);\\n";\n    fragmentShader +=\n      "    float horizonDotNadir = 1.0 - min(1.0, czm_ellipsoidRadii.x / vertexRadius);\\n";\n    fragmentShader +=\n      "    float reflectionDotNadir = dot(r, normalize(positionWC));\\n";\n    // Flipping the X vector is a cheap way to get the inverse of czm_temeToPseudoFixed, since that\'s a rotation about Z.\n    fragmentShader += "    r.x = -r.x;\\n";\n    fragmentShader += "    r = -normalize(czm_temeToPseudoFixed * r);\\n";\n    fragmentShader += "    r.x = -r.x;\\n";\n\n    fragmentShader += "    float inverseRoughness = 1.04 - roughness;\\n";\n    fragmentShader += "    inverseRoughness *= inverseRoughness;\\n";\n    fragmentShader +=\n      "    vec3 sceneSkyBox = textureCube(czm_environmentMap, r).rgb * inverseRoughness;\\n";\n\n    fragmentShader += "    float atmosphereHeight = 0.05;\\n";\n    fragmentShader +=\n      "    float blendRegionSize = 0.1 * ((1.0 - inverseRoughness) * 8.0 + 1.1 - horizonDotNadir);\\n";\n    fragmentShader += "    float blendRegionOffset = roughness * -1.0;\\n";\n    fragmentShader +=\n      "    float farAboveHorizon = clamp(horizonDotNadir - blendRegionSize * 0.5 + blendRegionOffset, 1.0e-10 - blendRegionSize, 0.99999);\\n";\n    fragmentShader +=\n      "    float aroundHorizon = clamp(horizonDotNadir + blendRegionSize * 0.5, 1.0e-10 - blendRegionSize, 0.99999);\\n";\n    fragmentShader +=\n      "    float farBelowHorizon = clamp(horizonDotNadir + blendRegionSize * 1.5, 1.0e-10 - blendRegionSize, 0.99999);\\n";\n    fragmentShader +=\n      "    float smoothstepHeight = smoothstep(0.0, atmosphereHeight, horizonDotNadir);\\n";\n\n    fragmentShader +=\n      "    vec3 belowHorizonColor = mix(vec3(0.1, 0.15, 0.25), vec3(0.4, 0.7, 0.9), smoothstepHeight);\\n";\n    fragmentShader += "    vec3 nadirColor = belowHorizonColor * 0.5;\\n";\n    fragmentShader +=\n      "    vec3 aboveHorizonColor = mix(vec3(0.9, 1.0, 1.2), belowHorizonColor, roughness * 0.5);\\n";\n    fragmentShader +=\n      "    vec3 blueSkyColor = mix(vec3(0.18, 0.26, 0.48), aboveHorizonColor, reflectionDotNadir * inverseRoughness * 0.5 + 0.75);\\n";\n    fragmentShader +=\n      "    vec3 zenithColor = mix(blueSkyColor, sceneSkyBox, smoothstepHeight);\\n";\n\n    fragmentShader += "    vec3 blueSkyDiffuseColor = vec3(0.7, 0.85, 0.9);\\n";\n    fragmentShader +=\n      "    float diffuseIrradianceFromEarth = (1.0 - horizonDotNadir) * (reflectionDotNadir * 0.25 + 0.75) * smoothstepHeight;\\n";\n    fragmentShader +=\n      "    float diffuseIrradianceFromSky = (1.0 - smoothstepHeight) * (1.0 - (reflectionDotNadir * 0.25 + 0.25));\\n";\n    fragmentShader +=\n      "    vec3 diffuseIrradiance = blueSkyDiffuseColor * clamp(diffuseIrradianceFromEarth + diffuseIrradianceFromSky, 0.0, 1.0);\\n";\n\n    fragmentShader +=\n      "    float notDistantRough = (1.0 - horizonDotNadir * roughness * 0.8);\\n";\n    fragmentShader +=\n      "    vec3 specularIrradiance = mix(zenithColor, aboveHorizonColor, smoothstep(farAboveHorizon, aroundHorizon, reflectionDotNadir) * notDistantRough);\\n";\n    fragmentShader +=\n      "    specularIrradiance = mix(specularIrradiance, belowHorizonColor, smoothstep(aroundHorizon, farBelowHorizon, reflectionDotNadir) * inverseRoughness);\\n";\n    fragmentShader +=\n      "    specularIrradiance = mix(specularIrradiance, nadirColor, smoothstep(farBelowHorizon, 1.0, reflectionDotNadir) * inverseRoughness);\\n";\n\n    // Luminance model from page 40 of http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n    fragmentShader += "#ifdef USE_SUN_LUMINANCE \\n";\n    // Angle between sun and zenith\n    fragmentShader +=\n      "    float LdotZenith = clamp(dot(normalize(czm_inverseViewRotation * l), normalize(positionWC * -1.0)), 0.001, 1.0);\\n";\n    fragmentShader += "    float S = acos(LdotZenith);\\n";\n    // Angle between zenith and current pixel\n    fragmentShader +=\n      "    float NdotZenith = clamp(dot(normalize(czm_inverseViewRotation * n), normalize(positionWC * -1.0)), 0.001, 1.0);\\n";\n    // Angle between sun and current pixel\n    fragmentShader += "    float gamma = acos(NdotL);\\n";\n    fragmentShader +=\n      "    float numerator = ((0.91 + 10.0 * exp(-3.0 * gamma) + 0.45 * pow(NdotL, 2.0)) * (1.0 - exp(-0.32 / NdotZenith)));\\n";\n    fragmentShader +=\n      "    float denominator = (0.91 + 10.0 * exp(-3.0 * S) + 0.45 * pow(LdotZenith,2.0)) * (1.0 - exp(-0.32));\\n";\n    fragmentShader +=\n      "    float luminance = gltf_luminanceAtZenith * (numerator / denominator);\\n";\n    fragmentShader += "#endif \\n";\n\n    fragmentShader +=\n      "    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n";\n    fragmentShader +=\n      "    vec3 IBLColor = (diffuseIrradiance * diffuseColor * gltf_iblFactor.x) + (specularIrradiance * SRGBtoLINEAR3(specularColor * brdfLut.x + brdfLut.y) * gltf_iblFactor.y);\\n";\n\n    fragmentShader +=\n      "    float maximumComponent = max(max(lightColorHdr.x, lightColorHdr.y), lightColorHdr.z);\\n";\n    fragmentShader +=\n      "    vec3 lightColor = lightColorHdr / max(maximumComponent, 1.0);\\n";\n    fragmentShader += "    IBLColor *= lightColor;\\n";\n\n    fragmentShader += "#ifdef USE_SUN_LUMINANCE \\n";\n    fragmentShader += "    color += IBLColor * luminance;\\n";\n    fragmentShader += "#else \\n";\n    fragmentShader += "    color += IBLColor; \\n";\n    fragmentShader += "#endif \\n";\n\n    // Environment maps were provided, use them for IBL\n    fragmentShader += "#elif defined(DIFFUSE_IBL) || defined(SPECULAR_IBL) \\n";\n    fragmentShader +=\n      "    const mat3 yUpToZUp = mat3(-1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0); \\n";\n    fragmentShader +=\n      "    vec3 cubeDir = normalize(yUpToZUp * gltf_iblReferenceFrameMatrix * normalize(reflect(-v, n))); \\n";\n\n    fragmentShader += "#ifdef DIFFUSE_IBL \\n";\n    fragmentShader += "#ifdef CUSTOM_SPHERICAL_HARMONICS \\n";\n    fragmentShader +=\n      "    vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, gltf_sphericalHarmonicCoefficients); \\n";\n    fragmentShader += "#else \\n";\n    fragmentShader +=\n      "    vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, czm_sphericalHarmonicCoefficients); \\n";\n    fragmentShader += "#endif \\n";\n    fragmentShader += "#else \\n";\n    fragmentShader += "    vec3 diffuseIrradiance = vec3(0.0); \\n";\n    fragmentShader += "#endif \\n";\n\n    fragmentShader += "#ifdef SPECULAR_IBL \\n";\n    fragmentShader +=\n      "    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n";\n    fragmentShader += "#ifdef CUSTOM_SPECULAR_IBL \\n";\n    fragmentShader +=\n      "    vec3 specularIBL = czm_sampleOctahedralProjection(gltf_specularMap, gltf_specularMapSize, cubeDir,  roughness * gltf_maxSpecularLOD, gltf_maxSpecularLOD);\\n";\n    fragmentShader += "#else \\n";\n    fragmentShader +=\n      "    vec3 specularIBL = czm_sampleOctahedralProjection(czm_specularEnvironmentMaps, czm_specularEnvironmentMapSize, cubeDir,  roughness * czm_specularEnvironmentMapsMaximumLOD, czm_specularEnvironmentMapsMaximumLOD);\\n";\n    fragmentShader += "#endif \\n";\n    fragmentShader += "    specularIBL *= F * brdfLut.x + brdfLut.y;\\n";\n    fragmentShader += "#else \\n";\n    fragmentShader += "    vec3 specularIBL = vec3(0.0); \\n";\n    fragmentShader += "#endif \\n";\n\n    fragmentShader +=\n      "    color += diffuseIrradiance * diffuseColor + specularColor * specularIBL;\\n";\n\n    fragmentShader += "#endif \\n";\n  } else {\n    fragmentShader += "    vec3 color = baseColor;\\n";\n  }\n\n  // Ignore occlusion and emissive when unlit\n  if (!isUnlit) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_occlusionTexture)) {\n      fragmentShader +=\n        "    color *= texture2D(u_occlusionTexture, " +\n        occlusionTexCoord +\n        ").r;\\n";\n    }\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_emissiveTexture)) {\n      fragmentShader +=\n        "    vec3 emissive = SRGBtoLINEAR3(texture2D(u_emissiveTexture, " +\n        emissiveTexCoord +\n        ").rgb);\\n";\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_emissiveFactor)) {\n        fragmentShader += "    emissive *= u_emissiveFactor;\\n";\n      }\n      fragmentShader += "    color += emissive;\\n";\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(generatedMaterialValues.u_emissiveFactor)) {\n      fragmentShader += "    color += u_emissiveFactor;\\n";\n    }\n  }\n\n  if (!isUnlit) {\n    fragmentShader += "    color = applyTonemapping(color);\\n";\n  }\n\n  fragmentShader += "    color = LINEARtoSRGB(color);\\n";\n\n  if (hasOutline) {\n    fragmentShader += "    float outlineness = max(\\n";\n    fragmentShader +=\n      "        texture2D(u_outlineTexture, vec2(v_outlineCoordinates.x, 0.5)).r,\\n";\n    fragmentShader += "        max(\\n";\n    fragmentShader +=\n      "          texture2D(u_outlineTexture, vec2(v_outlineCoordinates.y, 0.5)).r,\\n";\n    fragmentShader +=\n      "          texture2D(u_outlineTexture, vec2(v_outlineCoordinates.z, 0.5)).r));\\n";\n    fragmentShader +=\n      "    color = mix(color, vec3(0.0, 0.0, 0.0), outlineness);\\n";\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(alphaMode)) {\n    if (alphaMode === "MASK") {\n      fragmentShader += "    if (baseColorWithAlpha.a < u_alphaCutoff) {\\n";\n      fragmentShader += "        discard;\\n";\n      fragmentShader += "    }\\n";\n      fragmentShader += "    gl_FragColor = vec4(color, 1.0);\\n";\n    } else if (alphaMode === "BLEND") {\n      fragmentShader +=\n        "    gl_FragColor = vec4(color, baseColorWithAlpha.a);\\n";\n    } else {\n      fragmentShader += "    gl_FragColor = vec4(color, 1.0);\\n";\n    }\n  } else {\n    fragmentShader += "    gl_FragColor = vec4(color, 1.0);\\n";\n  }\n\n  fragmentShader += "}\\n";\n\n  // Add shaders\n  var vertexShaderId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(shaders, {\n    type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].VERTEX_SHADER */ .Z.VERTEX_SHADER,\n    extras: {\n      _pipeline: {\n        source: vertexShader,\n        extension: ".glsl",\n      },\n    },\n  });\n\n  var fragmentShaderId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(shaders, {\n    type: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FRAGMENT_SHADER */ .Z.FRAGMENT_SHADER,\n    extras: {\n      _pipeline: {\n        source: fragmentShader,\n        extension: ".glsl",\n      },\n    },\n  });\n\n  // Add program\n  var programId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(programs, {\n    fragmentShader: fragmentShaderId,\n    vertexShader: vertexShaderId,\n  });\n\n  var techniqueId = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(techniques, {\n    attributes: techniqueAttributes,\n    program: programId,\n    uniforms: techniqueUniforms,\n  });\n\n  return techniqueId;\n}\n\nfunction getPBRValueType(paramName) {\n  if (paramName.indexOf("Offset") !== -1) {\n    return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2;\n  } else if (paramName.indexOf("Rotation") !== -1) {\n    return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT;\n  } else if (paramName.indexOf("Scale") !== -1) {\n    return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2;\n  } else if (paramName.indexOf("Texture") !== -1) {\n    return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D;\n  }\n\n  switch (paramName) {\n    case "u_baseColorFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4;\n    case "u_metallicFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT;\n    case "u_roughnessFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT;\n    case "u_emissiveFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3;\n    // Specular Glossiness Types\n    case "u_diffuseFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4;\n    case "u_specularFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3;\n    case "u_glossinessFactor":\n      return _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].FLOAT */ .Z.FLOAT;\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (processPbrMaterials);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14503\n')},81154:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("#ifdef MRT\\n\\\n#extension GL_EXT_draw_buffers : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 u_bgColor;\\n\\\nuniform sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    if (texture2D(u_depthTexture, v_textureCoordinates).r < 1.0)\\n\\\n    {\\n\\\n#ifdef MRT\\n\\\n        gl_FragData[0] = u_bgColor;\\n\\\n        gl_FragData[1] = vec4(u_bgColor.a);\\n\\\n#else\\n\\\n        gl_FragColor = u_bgColor;\\n\\\n#endif\\n\\\n        return;\\n\\\n    }\\n\\\n    \\n\\\n    discard;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExNTQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QixpQ0FBaUM7QUFDakM7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLEtBQUs7QUFDTDtBQUNBLG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0M7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSxlQUFlO0FBQ2YsS0FBSztBQUNMO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9BZGp1c3RUcmFuc2x1Y2VudEZTLmpzPzc5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwiI2lmZGVmIE1SVFxcblxcXG4jZXh0ZW5zaW9uIEdMX0VYVF9kcmF3X2J1ZmZlcnMgOiBlbmFibGVcXG5cXFxuI2VuZGlmXFxuXFxcblxcblxcXG51bmlmb3JtIHZlYzQgdV9iZ0NvbG9yO1xcblxcXG51bmlmb3JtIHNhbXBsZXIyRCB1X2RlcHRoVGV4dHVyZTtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMiB2X3RleHR1cmVDb29yZGluYXRlcztcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIGlmICh0ZXh0dXJlMkQodV9kZXB0aFRleHR1cmUsIHZfdGV4dHVyZUNvb3JkaW5hdGVzKS5yIDwgMS4wKVxcblxcXG4gICAge1xcblxcXG4jaWZkZWYgTVJUXFxuXFxcbiAgICAgICAgZ2xfRnJhZ0RhdGFbMF0gPSB1X2JnQ29sb3I7XFxuXFxcbiAgICAgICAgZ2xfRnJhZ0RhdGFbMV0gPSB2ZWM0KHVfYmdDb2xvci5hKTtcXG5cXFxuI2Vsc2VcXG5cXFxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB1X2JnQ29sb3I7XFxuXFxcbiNlbmRpZlxcblxcXG4gICAgICAgIHJldHVybjtcXG5cXFxuICAgIH1cXG5cXFxuICAgIFxcblxcXG4gICAgZGlzY2FyZDtcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81154\n')}}]);