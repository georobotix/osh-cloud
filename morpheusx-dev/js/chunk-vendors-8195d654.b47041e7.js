"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[7218],{63803:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ debug; },\n/* harmony export */   "z": function() { return /* binding */ register; }\n/* harmony export */ });\n/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80744);\n\n\nlet loggers = {};\n\nif (false) {}\n\nfunction register(handlers) {\n  loggers = handlers;\n}\nfunction debug(eventType, arg1, arg2, arg3) {\n  if (_utils_log__WEBPACK_IMPORTED_MODULE_0__/* ["default"].level */ .Z.level > 0 && loggers[eventType]) {\n    loggers[eventType].call(null, arg1, arg2, arg3);\n  }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM4MDMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUM7QUFDSTtBQUN2Qzs7QUFFQSxJQUFJLEtBQXFDLEVBQUUsRUFFMUM7O0FBRU07QUFDUDtBQUNBO0FBQ2U7QUFDZixNQUFNLHVFQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AZGVjay5nbC9jb3JlL2Rpc3QvZXNtL2RlYnVnL2luZGV4LmpzP2NkYjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlY2tMb2cgZnJvbSAnLi4vdXRpbHMvbG9nJztcbmltcG9ydCB7IGdldExvZ2dlcnMgfSBmcm9tICcuL2xvZ2dlcnMnO1xubGV0IGxvZ2dlcnMgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgbG9nZ2VycyA9IGdldExvZ2dlcnMoZGVja0xvZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihoYW5kbGVycykge1xuICBsb2dnZXJzID0gaGFuZGxlcnM7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJ1ZyhldmVudFR5cGUsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKGRlY2tMb2cubGV2ZWwgPiAwICYmIGxvZ2dlcnNbZXZlbnRUeXBlXSkge1xuICAgIGxvZ2dlcnNbZXZlbnRUeXBlXS5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///63803\n')},91619:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "AQ": function() { return /* binding */ getSourceBufferAttribute; },\n/* harmony export */   "DY": function() { return /* binding */ cycleBuffers; },\n/* harmony export */   "IV": function() { return /* binding */ padBuffer; },\n/* harmony export */   "M0": function() { return /* binding */ normalizeTransitionSettings; },\n/* harmony export */   "pi": function() { return /* binding */ getAttributeBufferLength; },\n/* harmony export */   "w": function() { return /* binding */ getAttributeTypeFromSize; }\n/* harmony export */ });\n/* harmony import */ var _utils_array_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49440);\n\nconst DEFAULT_TRANSITION_SETTINGS = {\n  interpolation: {\n    duration: 0,\n    easing: t => t\n  },\n  spring: {\n    stiffness: 0.05,\n    damping: 0.5\n  }\n};\nfunction normalizeTransitionSettings(userSettings, layerSettings) {\n  if (!userSettings) {\n    return null;\n  }\n\n  if (Number.isFinite(userSettings)) {\n    userSettings = {\n      type: \'interpolation\',\n      duration: userSettings\n    };\n  }\n\n  const type = userSettings.type || \'interpolation\';\n  return { ...DEFAULT_TRANSITION_SETTINGS[type],\n    ...layerSettings,\n    ...userSettings,\n    type\n  };\n}\nfunction getSourceBufferAttribute(gl, attribute) {\n  const buffer = attribute.getBuffer();\n\n  if (buffer) {\n    return [buffer, {\n      divisor: 0,\n      size: attribute.size,\n      normalized: attribute.settings.normalized\n    }];\n  }\n\n  return attribute.value;\n}\nfunction getAttributeTypeFromSize(size) {\n  switch (size) {\n    case 1:\n      return \'float\';\n\n    case 2:\n      return \'vec2\';\n\n    case 3:\n      return \'vec3\';\n\n    case 4:\n      return \'vec4\';\n\n    default:\n      throw new Error("No defined attribute type for size \\"".concat(size, "\\""));\n  }\n}\nfunction cycleBuffers(buffers) {\n  buffers.push(buffers.shift());\n}\nfunction getAttributeBufferLength(attribute, numInstances) {\n  const {\n    doublePrecision,\n    settings,\n    value,\n    size\n  } = attribute;\n  const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;\n  return (settings.noAlloc ? value.length : numInstances * size) * multiplier;\n}\nfunction padBuffer({\n  buffer,\n  numInstances,\n  attribute,\n  fromLength,\n  fromStartIndices,\n  getData = x => x\n}) {\n  const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;\n  const size = attribute.size * precisionMultiplier;\n  const byteOffset = attribute.byteOffset;\n  const toStartIndices = attribute.startIndices;\n  const hasStartIndices = fromStartIndices && toStartIndices;\n  const toLength = getAttributeBufferLength(attribute, numInstances);\n  const isConstant = attribute.isConstant;\n\n  if (!hasStartIndices && fromLength >= toLength) {\n    return;\n  }\n\n  const toData = isConstant ? attribute.value : attribute.getBuffer().getData({\n    srcByteOffset: byteOffset\n  });\n\n  if (attribute.settings.normalized && !isConstant) {\n    const getter = getData;\n\n    getData = (value, chunk) => attribute.normalizeConstant(getter(value, chunk));\n  }\n\n  const getMissingData = isConstant ? (i, chunk) => getData(toData, chunk) : (i, chunk) => getData(toData.subarray(i, i + size), chunk);\n  const source = buffer.getData({\n    length: fromLength\n  });\n  const data = new Float32Array(toLength);\n  (0,_utils_array_utils__WEBPACK_IMPORTED_MODULE_0__/* .padArray */ .T)({\n    source,\n    target: data,\n    sourceStartIndices: fromStartIndices,\n    targetStartIndices: toStartIndices,\n    size,\n    getData: getMissingData\n  });\n\n  if (buffer.byteLength < data.byteLength + byteOffset) {\n    buffer.reallocate(data.byteLength + byteOffset);\n  }\n\n  buffer.subData({\n    data,\n    offset: byteOffset\n  });\n}\n//# sourceMappingURL=attribute-transition-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE2MTkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxFQUFFLHFFQUFRO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BkZWNrLmdsL2NvcmUvZGlzdC9lc20vbGliL2F0dHJpYnV0ZS9hdHRyaWJ1dGUtdHJhbnNpdGlvbi11dGlscy5qcz83NGZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhZEFycmF5IH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJyYXktdXRpbHMnO1xuY29uc3QgREVGQVVMVF9UUkFOU0lUSU9OX1NFVFRJTkdTID0ge1xuICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgZHVyYXRpb246IDAsXG4gICAgZWFzaW5nOiB0ID0+IHRcbiAgfSxcbiAgc3ByaW5nOiB7XG4gICAgc3RpZmZuZXNzOiAwLjA1LFxuICAgIGRhbXBpbmc6IDAuNVxuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVRyYW5zaXRpb25TZXR0aW5ncyh1c2VyU2V0dGluZ3MsIGxheWVyU2V0dGluZ3MpIHtcbiAgaWYgKCF1c2VyU2V0dGluZ3MpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChOdW1iZXIuaXNGaW5pdGUodXNlclNldHRpbmdzKSkge1xuICAgIHVzZXJTZXR0aW5ncyA9IHtcbiAgICAgIHR5cGU6ICdpbnRlcnBvbGF0aW9uJyxcbiAgICAgIGR1cmF0aW9uOiB1c2VyU2V0dGluZ3NcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgdHlwZSA9IHVzZXJTZXR0aW5ncy50eXBlIHx8ICdpbnRlcnBvbGF0aW9uJztcbiAgcmV0dXJuIHsgLi4uREVGQVVMVF9UUkFOU0lUSU9OX1NFVFRJTkdTW3R5cGVdLFxuICAgIC4uLmxheWVyU2V0dGluZ3MsXG4gICAgLi4udXNlclNldHRpbmdzLFxuICAgIHR5cGVcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTb3VyY2VCdWZmZXJBdHRyaWJ1dGUoZ2wsIGF0dHJpYnV0ZSkge1xuICBjb25zdCBidWZmZXIgPSBhdHRyaWJ1dGUuZ2V0QnVmZmVyKCk7XG5cbiAgaWYgKGJ1ZmZlcikge1xuICAgIHJldHVybiBbYnVmZmVyLCB7XG4gICAgICBkaXZpc29yOiAwLFxuICAgICAgc2l6ZTogYXR0cmlidXRlLnNpemUsXG4gICAgICBub3JtYWxpemVkOiBhdHRyaWJ1dGUuc2V0dGluZ3Mubm9ybWFsaXplZFxuICAgIH1dO1xuICB9XG5cbiAgcmV0dXJuIGF0dHJpYnV0ZS52YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVUeXBlRnJvbVNpemUoc2l6ZSkge1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gJ2Zsb2F0JztcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiAndmVjMic7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gJ3ZlYzMnO1xuXG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuICd2ZWM0JztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBkZWZpbmVkIGF0dHJpYnV0ZSB0eXBlIGZvciBzaXplIFxcXCJcIi5jb25jYXQoc2l6ZSwgXCJcXFwiXCIpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGN5Y2xlQnVmZmVycyhidWZmZXJzKSB7XG4gIGJ1ZmZlcnMucHVzaChidWZmZXJzLnNoaWZ0KCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZUJ1ZmZlckxlbmd0aChhdHRyaWJ1dGUsIG51bUluc3RhbmNlcykge1xuICBjb25zdCB7XG4gICAgZG91YmxlUHJlY2lzaW9uLFxuICAgIHNldHRpbmdzLFxuICAgIHZhbHVlLFxuICAgIHNpemVcbiAgfSA9IGF0dHJpYnV0ZTtcbiAgY29uc3QgbXVsdGlwbGllciA9IGRvdWJsZVByZWNpc2lvbiAmJiB2YWx1ZSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSA/IDIgOiAxO1xuICByZXR1cm4gKHNldHRpbmdzLm5vQWxsb2MgPyB2YWx1ZS5sZW5ndGggOiBudW1JbnN0YW5jZXMgKiBzaXplKSAqIG11bHRpcGxpZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFkQnVmZmVyKHtcbiAgYnVmZmVyLFxuICBudW1JbnN0YW5jZXMsXG4gIGF0dHJpYnV0ZSxcbiAgZnJvbUxlbmd0aCxcbiAgZnJvbVN0YXJ0SW5kaWNlcyxcbiAgZ2V0RGF0YSA9IHggPT4geFxufSkge1xuICBjb25zdCBwcmVjaXNpb25NdWx0aXBsaWVyID0gYXR0cmlidXRlLmRvdWJsZVByZWNpc2lvbiAmJiBhdHRyaWJ1dGUudmFsdWUgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkgPyAyIDogMTtcbiAgY29uc3Qgc2l6ZSA9IGF0dHJpYnV0ZS5zaXplICogcHJlY2lzaW9uTXVsdGlwbGllcjtcbiAgY29uc3QgYnl0ZU9mZnNldCA9IGF0dHJpYnV0ZS5ieXRlT2Zmc2V0O1xuICBjb25zdCB0b1N0YXJ0SW5kaWNlcyA9IGF0dHJpYnV0ZS5zdGFydEluZGljZXM7XG4gIGNvbnN0IGhhc1N0YXJ0SW5kaWNlcyA9IGZyb21TdGFydEluZGljZXMgJiYgdG9TdGFydEluZGljZXM7XG4gIGNvbnN0IHRvTGVuZ3RoID0gZ2V0QXR0cmlidXRlQnVmZmVyTGVuZ3RoKGF0dHJpYnV0ZSwgbnVtSW5zdGFuY2VzKTtcbiAgY29uc3QgaXNDb25zdGFudCA9IGF0dHJpYnV0ZS5pc0NvbnN0YW50O1xuXG4gIGlmICghaGFzU3RhcnRJbmRpY2VzICYmIGZyb21MZW5ndGggPj0gdG9MZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0b0RhdGEgPSBpc0NvbnN0YW50ID8gYXR0cmlidXRlLnZhbHVlIDogYXR0cmlidXRlLmdldEJ1ZmZlcigpLmdldERhdGEoe1xuICAgIHNyY0J5dGVPZmZzZXQ6IGJ5dGVPZmZzZXRcbiAgfSk7XG5cbiAgaWYgKGF0dHJpYnV0ZS5zZXR0aW5ncy5ub3JtYWxpemVkICYmICFpc0NvbnN0YW50KSB7XG4gICAgY29uc3QgZ2V0dGVyID0gZ2V0RGF0YTtcblxuICAgIGdldERhdGEgPSAodmFsdWUsIGNodW5rKSA9PiBhdHRyaWJ1dGUubm9ybWFsaXplQ29uc3RhbnQoZ2V0dGVyKHZhbHVlLCBjaHVuaykpO1xuICB9XG5cbiAgY29uc3QgZ2V0TWlzc2luZ0RhdGEgPSBpc0NvbnN0YW50ID8gKGksIGNodW5rKSA9PiBnZXREYXRhKHRvRGF0YSwgY2h1bmspIDogKGksIGNodW5rKSA9PiBnZXREYXRhKHRvRGF0YS5zdWJhcnJheShpLCBpICsgc2l6ZSksIGNodW5rKTtcbiAgY29uc3Qgc291cmNlID0gYnVmZmVyLmdldERhdGEoe1xuICAgIGxlbmd0aDogZnJvbUxlbmd0aFxuICB9KTtcbiAgY29uc3QgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkodG9MZW5ndGgpO1xuICBwYWRBcnJheSh7XG4gICAgc291cmNlLFxuICAgIHRhcmdldDogZGF0YSxcbiAgICBzb3VyY2VTdGFydEluZGljZXM6IGZyb21TdGFydEluZGljZXMsXG4gICAgdGFyZ2V0U3RhcnRJbmRpY2VzOiB0b1N0YXJ0SW5kaWNlcyxcbiAgICBzaXplLFxuICAgIGdldERhdGE6IGdldE1pc3NpbmdEYXRhXG4gIH0pO1xuXG4gIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA8IGRhdGEuYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQpIHtcbiAgICBidWZmZXIucmVhbGxvY2F0ZShkYXRhLmJ5dGVMZW5ndGggKyBieXRlT2Zmc2V0KTtcbiAgfVxuXG4gIGJ1ZmZlci5zdWJEYXRhKHtcbiAgICBkYXRhLFxuICAgIG9mZnNldDogYnl0ZU9mZnNldFxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF0dHJpYnV0ZS10cmFuc2l0aW9uLXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///91619\n')},13906:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ Attribute; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/features/features.js\nvar features = __webpack_require__(44211);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/features/webgl-features-table.js\nvar webgl_features_table = __webpack_require__(6948);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/buffer.js\nvar buffer = __webpack_require__(53478);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/shader-attribute.js\n\nclass ShaderAttribute {\n  constructor(dataColumn, opts) {\n    (0,defineProperty/* default */.Z)(this, "opts", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "source", void 0);\n\n    this.opts = opts;\n    this.source = dataColumn;\n  }\n\n  get value() {\n    return this.source.value;\n  }\n\n  getValue() {\n    const buffer = this.source.getBuffer();\n    const accessor = this.getAccessor();\n\n    if (buffer) {\n      return [buffer, accessor];\n    }\n\n    const {\n      value\n    } = this.source;\n    const {\n      size\n    } = accessor;\n    let constantValue = value;\n\n    if (value && value.length !== size) {\n      constantValue = new Float32Array(size);\n      const index = accessor.elementOffset || 0;\n\n      for (let i = 0; i < size; ++i) {\n        constantValue[i] = value[index + i];\n      }\n    }\n\n    return constantValue;\n  }\n\n  getAccessor() {\n    return { ...this.source.getAccessor(),\n      ...this.opts\n    };\n  }\n\n}\n//# sourceMappingURL=shader-attribute.js.map\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/gl-utils.js\nfunction glArrayFromType(glType) {\n  switch (glType) {\n    case 5126:\n      return Float32Array;\n\n    case 5130:\n      return Float64Array;\n\n    case 5123:\n    case 33635:\n    case 32819:\n    case 32820:\n      return Uint16Array;\n\n    case 5125:\n      return Uint32Array;\n\n    case 5121:\n      return Uint8ClampedArray;\n\n    case 5120:\n      return Int8Array;\n\n    case 5122:\n      return Int16Array;\n\n    case 5124:\n      return Int32Array;\n\n    default:\n      throw new Error(\'Unknown GL type\');\n  }\n}\n//# sourceMappingURL=gl-utils.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/typed-array-manager.js\nvar typed_array_manager = __webpack_require__(36610);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/math-utils.js\nvar math_utils = __webpack_require__(75126);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/log.js\nvar log = __webpack_require__(80744);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/data-column.js\n\n\n\n\n\n\n\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log/* default.removed */.Z.removed(\'shaderAttribute.offset\', \'vertexOffset, elementOffset\')();\n  }\n\n  const stride = getStride(baseAccessor);\n  const vertexOffset = shaderAttributeOptions.vertexOffset !== undefined ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset = vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + (baseAccessor.offset || 0);\n  return { ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n  return {\n    high: resolvedOptions,\n    low: { ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nclass DataColumn {\n  constructor(gl, opts, state) {\n    (0,defineProperty/* default */.Z)(this, "gl", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "id", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "size", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "settings", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "value", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "doublePrecision", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_buffer", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "state", void 0);\n\n    this.gl = gl;\n    this.id = opts.id || \'\';\n    this.size = opts.size || 1;\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === 5130;\n    let {\n      defaultValue\n    } = opts;\n    defaultValue = Number.isFinite(defaultValue) ? [defaultValue] : defaultValue || new Array(this.size).fill(0);\n    let bufferType;\n\n    if (doublePrecision) {\n      bufferType = 5126;\n    } else if (!logicalType && opts.isIndexed) {\n      bufferType = gl && (0,features/* hasFeature */.U6)(gl, webgl_features_table/* FEATURES.ELEMENT_INDEX_UINT32 */.h.ELEMENT_INDEX_UINT32) ? 5125 : 5123;\n    } else {\n      bufferType = logicalType || 5126;\n    }\n\n    let defaultType = glArrayFromType(logicalType || bufferType || 5126);\n    this.doublePrecision = doublePrecision;\n\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n\n    this.value = null;\n    this.settings = { ...opts,\n      defaultType,\n      defaultValue: defaultValue,\n      logicalType,\n      type: bufferType,\n      size: this.size,\n      bytesPerElement: defaultType.BYTES_PER_ELEMENT\n    };\n    this.state = { ...state,\n      externalBuffer: null,\n      bufferAccessor: this.settings,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n  }\n\n  get isConstant() {\n    return this.state.constant;\n  }\n\n  get buffer() {\n    if (!this._buffer) {\n      const {\n        isIndexed,\n        type\n      } = this.settings;\n      this._buffer = new buffer/* default */.Z(this.gl, {\n        id: this.id,\n        target: isIndexed ? 34963 : 34962,\n        accessor: {\n          type\n        }\n      });\n    }\n\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n\n    return 0;\n  }\n\n  get numInstances() {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n) {\n    this.state.numInstances = n;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n\n      this._buffer = null;\n    }\n\n    typed_array_manager/* default.release */.Z.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(this.getAccessor(), options || {});\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes["".concat(id, "64Low")] = isBuffer64Bit ? new ShaderAttribute(this, doubleShaderAttributeDefs.low) : new Float32Array(this.size);\n      return shaderAttributes;\n    }\n\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {\n        [id]: new ShaderAttribute(this, shaderAttributeDef)\n      };\n    }\n\n    return {\n      [id]: this\n    };\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  getBounds() {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n\n    let result = null;\n\n    if (this.state.constant && this.value) {\n      const min = Array.from(this.value);\n      result = [min, min];\n    } else {\n      const {\n        value,\n        numInstances,\n        size\n      } = this;\n      const len = numInstances * size;\n\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n\n        for (let i = 0; i < len;) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n\n        result = [min, max];\n      }\n    }\n\n    this.state.bounds = result;\n    return result;\n  }\n\n  setData(data) {\n    const {\n      state\n    } = this;\n    let opts;\n\n    if (ArrayBuffer.isView(data)) {\n      opts = {\n        value: data\n      };\n    } else if (data instanceof buffer/* default */.Z) {\n      opts = {\n        buffer: data\n      };\n    } else {\n      opts = data;\n    }\n\n    const accessor = { ...this.settings,\n      ...opts\n    };\n    state.bufferAccessor = accessor;\n    state.bounds = null;\n\n    if (opts.constant) {\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n\n      if (this.settings.normalized) {\n        value = this.normalizeConstant(value);\n      }\n\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value || null;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n      const {\n        buffer,\n        byteOffset\n      } = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = (0,math_utils/* toDoublePrecisionArray */.TK)(value, accessor);\n      }\n\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n\n      buffer.setAccessor(null);\n      buffer.subData({\n        data: value,\n        offset: byteOffset\n      });\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(opts = {}) {\n    this.state.bounds = null;\n    const value = this.value;\n    const {\n      startOffset = 0,\n      endOffset\n    } = opts;\n    this.buffer.subData({\n      data: this.doublePrecision && value instanceof Float64Array ? (0,math_utils/* toDoublePrecisionArray */.TK)(value, {\n        size: this.size,\n        startIndex: startOffset,\n        endIndex: endOffset\n      }) : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate(numInstances, copy = false) {\n    const {\n      state\n    } = this;\n    const oldValue = state.allocatedValue;\n    const value = typed_array_manager/* default.allocate */.Z.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.settings.defaultType,\n      copy\n    });\n    this.value = value;\n    const {\n      buffer,\n      byteOffset\n    } = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        buffer.subData({\n          data: oldValue instanceof Float64Array ? (0,math_utils/* toDoublePrecisionArray */.TK)(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  _checkExternalBuffer(opts) {\n    const {\n      value\n    } = opts;\n\n    if (!ArrayBuffer.isView(value)) {\n      throw new Error("Attribute ".concat(this.id, " value is not TypedArray"));\n    }\n\n    const ArrayType = this.settings.defaultType;\n    let illegalArrayType = false;\n\n    if (this.doublePrecision) {\n      illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n    }\n\n    if (illegalArrayType) {\n      throw new Error("Attribute ".concat(this.id, " does not support ").concat(value.constructor.name));\n    }\n\n    if (!(value instanceof ArrayType) && this.settings.normalized && !(\'normalized\' in opts)) {\n      log/* default.warn */.Z.warn("Attribute ".concat(this.id, " is normalized"))();\n    }\n  }\n\n  normalizeConstant(value) {\n    switch (this.settings.type) {\n      case 5120:\n        return new Float32Array(value).map(x => (x + 128) / 255 * 2 - 1);\n\n      case 5122:\n        return new Float32Array(value).map(x => (x + 32768) / 65535 * 2 - 1);\n\n      case 5121:\n        return new Float32Array(value).map(x => x / 255);\n\n      case 5123:\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        return value;\n    }\n  }\n\n  _normalizeValue(value, out, start) {\n    const {\n      defaultValue,\n      size\n    } = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n\n    if (!value) {\n      let i = size;\n\n      while (--i >= 0) {\n        out[start + i] = defaultValue[i];\n      }\n\n      return out;\n    }\n\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        let i = size;\n\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    const {\n      size\n    } = this;\n\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n//# sourceMappingURL=data-column.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/assert.js\nvar assert = __webpack_require__(75304);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/iterable-utils.js\nvar iterable_utils = __webpack_require__(38550);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/flatten.js\nvar flatten = __webpack_require__(61855);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/range.js\nvar range = __webpack_require__(47586);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/attribute-transition-utils.js\nvar attribute_transition_utils = __webpack_require__(91619);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/attribute.js\n\n\n\n\n\n\n\nclass Attribute extends DataColumn {\n  constructor(gl, opts) {\n    super(gl, opts, {\n      startIndices: null,\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range/* FULL */.KO\n    });\n\n    (0,defineProperty/* default */.Z)(this, "constant", false);\n\n    this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({\n    clearChangedFlags = false\n  } = {}) {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {\n      accessor\n    } = this.settings;\n    return [this.id].concat(typeof accessor !== \'function\' && accessor || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  getTransitionSetting(opts) {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n\n    const {\n      accessor\n    } = this.settings;\n    const layerSettings = this.settings.transition;\n    const userSettings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n    return (0,attribute_transition_utils/* normalizeTransitionSettings */.M0)(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n\n    if (dataRange) {\n      const {\n        startRow = 0,\n        endRow = Infinity\n      } = dataRange;\n      this.state.updateRanges = range/* add */.IH(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range/* FULL */.KO;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range/* EMPTY */.E_;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const {\n      state,\n      settings\n    } = this;\n\n    if (settings.noAlloc) {\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate(numInstances, state.updateRanges !== range/* FULL */.KO);\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({\n    numInstances,\n    data,\n    props,\n    context\n  }) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {\n        updateRanges\n      },\n      settings: {\n        update,\n        noAlloc\n      }\n    } = this;\n    let updated = true;\n\n    if (update) {\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {\n          data,\n          startRow,\n          endRow,\n          props,\n          numInstances\n        });\n      }\n\n      if (!this.value) {} else if (this.constant || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;\n          super.updateSubBuffer({\n            startOffset,\n            endOffset\n          });\n        }\n      }\n\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n    return updated;\n  }\n\n  setConstantValue(value) {\n    if (value === undefined || typeof value === \'function\') {\n      return false;\n    }\n\n    const hasChanged = this.setData({\n      constant: true,\n      value\n    });\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  setExternalBuffer(buffer) {\n    const {\n      state\n    } = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  setBinaryValue(buffer, startIndices = null) {\n    const {\n      state,\n      settings\n    } = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      if (ArrayBuffer.isView(buffer)) {\n        buffer = {\n          value: buffer\n        };\n      }\n\n      const binaryValue = buffer;\n      (0,assert/* default */.Z)(ArrayBuffer.isView(binaryValue.value), "invalid ".concat(settings.accessor));\n      const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;\n      state.binaryAccessor = (0,iterable_utils/* getAccessorFromBuffer */.jr)(binaryValue.value, {\n        size: binaryValue.size || this.size,\n        stride: binaryValue.stride,\n        offset: binaryValue.offset,\n        startIndices: startIndices,\n        nested: needsNormalize\n      });\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {\n      startIndices\n    } = this;\n    const vertexIndex = startIndices ? row < startIndices.length ? startIndices[row] : this.numInstances : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {\n      [this.id]: null\n    };\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(shaderAttributes, super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));\n    }\n\n    return shaderAttributes;\n  }\n\n  _autoUpdater(attribute, {\n    data,\n    startRow,\n    endRow,\n    props,\n    numInstances\n  }) {\n    if (attribute.constant) {\n      return;\n    }\n\n    const {\n      settings,\n      state,\n      value,\n      size,\n      startIndices\n    } = attribute;\n    const {\n      accessor,\n      transform\n    } = settings;\n    const accessorFunc = state.binaryAccessor || (typeof accessor === \'function\' ? accessor : props[accessor]);\n    (0,assert/* default */.Z)(typeof accessorFunc === \'function\', "accessor \\"".concat(accessor, "\\" is not a function"));\n    let i = attribute.getVertexOffset(startRow);\n    const {\n      iterable,\n      objectInfo\n    } = (0,iterable_utils/* createIterable */.jB)(data, startRow, endRow);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      let objectValue = accessorFunc(object, objectInfo);\n\n      if (transform) {\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];\n\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n\n          (0,flatten/* fillArray */.k)({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n\n        i += size;\n      }\n    }\n  }\n\n  _validateAttributeUpdaters() {\n    const {\n      settings\n    } = this;\n    const hasUpdater = settings.noAlloc || typeof settings.update === \'function\';\n\n    if (!hasUpdater) {\n      throw new Error("Attribute ".concat(this.id, " missing update or accessor"));\n    }\n  }\n\n  _checkAttributeArray() {\n    const {\n      value\n    } = this;\n    const limit = Math.min(4, this.size);\n\n    if (value && value.length >= limit) {\n      let valid = true;\n\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error("Illegal attribute generated for ".concat(this.id));\n      }\n    }\n  }\n\n}\n//# sourceMappingURL=attribute.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13906\n')},78918:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ CompositeLayer; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82482);\n/* harmony import */ var _layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52447);\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63803);\n/* harmony import */ var _utils_flatten__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61855);\n/* harmony import */ var _lifecycle_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85409);\n\n\n\n\n\nconst TRACE_RENDER_LAYERS = \'compositeLayer.renderLayers\';\nclass CompositeLayer extends _layer__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return this.internalState && this.internalState.subLayers || [];\n  }\n\n  initializeState(context) {}\n\n  setState(updateObject) {\n    super.setState(updateObject);\n    this.setNeedsUpdate();\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    const {\n      object\n    } = info;\n    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n    return info;\n  }\n\n  filterSubLayer(context) {\n    return true;\n  }\n\n  shouldRenderSubLayer(subLayerId, data) {\n    return data && data.length;\n  }\n\n  getSubLayerClass(subLayerId, DefaultLayerClass) {\n    const {\n      _subLayerProps: overridingProps\n    } = this.props;\n    return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;\n  }\n\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === \'function\') {\n      const objectInfo = {\n        index: -1,\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n\n        return accessor(x, i);\n      };\n    }\n\n    return accessor;\n  }\n\n  getSubLayerProps(sublayerProps = {}) {\n    var _this$props$updateTri;\n\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: \'\',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n    const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || \'sublayer\';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.props[_lifecycle_constants__WEBPACK_IMPORTED_MODULE_1__/* .PROP_TYPES_SYMBOL */ .Wb];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n\n        if (propType && propType.type === \'accessor\') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(newProps, sublayerProps, overridingSublayerProps);\n    newProps.id = "".concat(this.props.id, "-").concat(sublayerId);\n    newProps.updateTriggers = {\n      all: (_this$props$updateTri = this.props.updateTriggers) === null || _this$props$updateTri === void 0 ? void 0 : _this$props$updateTri.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  _postUpdate(updateParams, forceUpdate) {\n    let subLayers = this.internalState.subLayers;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      subLayers = (0,_utils_flatten__WEBPACK_IMPORTED_MODULE_2__/* .flatten */ .x)(subLayersList, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n\n    (0,_debug__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n\n}\n\n(0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(CompositeLayer, "layerName", \'CompositeLayer\');\n//# sourceMappingURL=composite-layer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78918\n')},24088:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Df\": function() { return /* binding */ COORDINATE_SYSTEM; },\n/* harmony export */   \"FP\": function() { return /* binding */ EVENTS; },\n/* harmony export */   \"iI\": function() { return /* binding */ UNIT; },\n/* harmony export */   \"zG\": function() { return /* binding */ PROJECTION_MODE; }\n/* harmony export */ });\n/* unused harmony export OPERATION */\n/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80744);\n\nconst COORDINATE_SYSTEM = {\n  DEFAULT: -1,\n  LNGLAT: 1,\n  METER_OFFSETS: 2,\n  LNGLAT_OFFSETS: 3,\n  CARTESIAN: 0\n};\nObject.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {\n  get: () => {\n    _utils_log__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].deprecated */ .Z.deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();\n    return 0;\n  }\n});\nconst PROJECTION_MODE = {\n  WEB_MERCATOR: 1,\n  GLOBE: 2,\n  WEB_MERCATOR_AUTO_OFFSET: 4,\n  IDENTITY: 0\n};\nconst UNIT = {\n  common: 0,\n  meters: 1,\n  pixels: 2\n};\nconst EVENTS = {\n  click: {\n    handler: 'onClick'\n  },\n  panstart: {\n    handler: 'onDragStart'\n  },\n  panmove: {\n    handler: 'onDrag'\n  },\n  panend: {\n    handler: 'onDragEnd'\n  }\n};\nconst OPERATION = {\n  DRAW: 'draw',\n  MASK: 'mask',\n  TERRAIN: 'terrain'\n};\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQwODguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0I7QUFDeEI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxpRkFBYztBQUNsQjtBQUNBO0FBQ0EsQ0FBQztBQUNNO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AZGVjay5nbC9jb3JlL2Rpc3QvZXNtL2xpYi9jb25zdGFudHMuanM/MmM1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL3V0aWxzL2xvZyc7XG5leHBvcnQgY29uc3QgQ09PUkRJTkFURV9TWVNURU0gPSB7XG4gIERFRkFVTFQ6IC0xLFxuICBMTkdMQVQ6IDEsXG4gIE1FVEVSX09GRlNFVFM6IDIsXG4gIExOR0xBVF9PRkZTRVRTOiAzLFxuICBDQVJURVNJQU46IDBcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQ09PUkRJTkFURV9TWVNURU0sICdJREVOVElUWScsIHtcbiAgZ2V0OiAoKSA9PiB7XG4gICAgbG9nLmRlcHJlY2F0ZWQoJ0NPT1JESU5BVEVfU1lTVEVNLklERU5USVRZJywgJ0NPT1JESU5BVEVfU1lTVEVNLkNBUlRFU0lBTicpKCk7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IFBST0pFQ1RJT05fTU9ERSA9IHtcbiAgV0VCX01FUkNBVE9SOiAxLFxuICBHTE9CRTogMixcbiAgV0VCX01FUkNBVE9SX0FVVE9fT0ZGU0VUOiA0LFxuICBJREVOVElUWTogMFxufTtcbmV4cG9ydCBjb25zdCBVTklUID0ge1xuICBjb21tb246IDAsXG4gIG1ldGVyczogMSxcbiAgcGl4ZWxzOiAyXG59O1xuZXhwb3J0IGNvbnN0IEVWRU5UUyA9IHtcbiAgY2xpY2s6IHtcbiAgICBoYW5kbGVyOiAnb25DbGljaydcbiAgfSxcbiAgcGFuc3RhcnQ6IHtcbiAgICBoYW5kbGVyOiAnb25EcmFnU3RhcnQnXG4gIH0sXG4gIHBhbm1vdmU6IHtcbiAgICBoYW5kbGVyOiAnb25EcmFnJ1xuICB9LFxuICBwYW5lbmQ6IHtcbiAgICBoYW5kbGVyOiAnb25EcmFnRW5kJ1xuICB9XG59O1xuZXhwb3J0IGNvbnN0IE9QRVJBVElPTiA9IHtcbiAgRFJBVzogJ2RyYXcnLFxuICBNQVNLOiAnbWFzaycsXG4gIFRFUlJBSU46ICd0ZXJyYWluJ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24088\n")},68315:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ Deck; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/animation/timeline.js\nvar animation_timeline = __webpack_require__(48055);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lifecycle/constants.js\nvar constants = __webpack_require__(85409);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/log.js\nvar log = __webpack_require__(80744);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/debug/index.js\nvar debug = __webpack_require__(63803);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/flatten.js\nvar flatten = __webpack_require__(61855);\n// EXTERNAL MODULE: ./node_modules/@probe.gl/stats/dist/esm/lib/stats.js + 2 modules\nvar lib_stats = __webpack_require__(23881);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/resource/resource-manager.js + 1 modules\nvar resource_manager = __webpack_require__(50007);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/viewports/viewport.js\nvar viewport = __webpack_require__(7013);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/shaderlib/index.js\nvar shaderlib = __webpack_require__(15621);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/layer-manager.js\n\n\n\n\n\n\n\n\n\n\nconst TRACE_SET_LAYERS = \'layerManager.setLayers\';\nconst TRACE_ACTIVATE_VIEWPORT = \'layerManager.activateViewport\';\nclass LayerManager {\n  constructor(gl, {\n    deck,\n    stats,\n    viewport: _viewport,\n    timeline\n  } = {}) {\n    (0,defineProperty/* default */.Z)(this, "layers", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "context", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "resourceManager", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_lastRenderedLayers", []);\n\n    (0,defineProperty/* default */.Z)(this, "_needsRedraw", false);\n\n    (0,defineProperty/* default */.Z)(this, "_needsUpdate", false);\n\n    (0,defineProperty/* default */.Z)(this, "_nextLayers", null);\n\n    (0,defineProperty/* default */.Z)(this, "_debug", false);\n\n    (0,defineProperty/* default */.Z)(this, "activateViewport", viewport => {\n      (0,debug/* default */.Z)(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n\n      if (viewport) {\n        this.context.viewport = viewport;\n      }\n    });\n\n    this.layers = [];\n    this.resourceManager = new resource_manager/* default */.Z({\n      gl,\n      protocol: \'deck://\'\n    });\n    this.context = {\n      mousePosition: null,\n      userData: {},\n      layerManager: this,\n      gl,\n      deck,\n      programManager: gl && (0,shaderlib/* createProgramManager */.bs)(gl),\n      stats: stats || new lib_stats/* default */.Z({\n        id: \'deck.gl\'\n      }),\n      viewport: _viewport || new viewport/* default */.Z({\n        id: \'DEFAULT-INITIAL-VIEWPORT\'\n      }),\n      timeline: timeline || new animation_timeline/* Timeline */.T(),\n      resourceManager: this.resourceManager,\n      onError: undefined\n    };\n    Object.seal(this);\n  }\n\n  finalize() {\n    this.resourceManager.finalize();\n\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    for (const layer of this.layers) {\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  needsUpdate() {\n    if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {\n      return \'layers changed\';\n    }\n\n    return this._needsUpdate;\n  }\n\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  getLayers({\n    layerIds\n  } = {}) {\n    return layerIds ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0)) : this.layers;\n  }\n\n  setProps(props) {\n    if (\'debug\' in props) {\n      this._debug = props.debug;\n    }\n\n    if (\'userData\' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if (\'layers\' in props) {\n      this._nextLayers = props.layers;\n    }\n\n    if (\'onError\' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n\n  setLayers(newLayers, reason) {\n    (0,debug/* default */.Z)(TRACE_SET_LAYERS, this, reason, newLayers);\n    this._lastRenderedLayers = newLayers;\n    const flatLayers = (0,flatten/* flatten */.x)(newLayers, Boolean);\n\n    for (const layer of flatLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, flatLayers);\n  }\n\n  updateLayers() {\n    const reason = this.needsUpdate();\n\n    if (reason) {\n      this.setNeedsRedraw("updating layers: ".concat(reason));\n      this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);\n    }\n\n    this._nextLayers = null;\n  }\n\n  _handleError(stage, error, layer) {\n    layer.raiseError(error, "".concat(stage, " of ").concat(layer));\n  }\n\n  _updateLayers(oldLayers, newLayers) {\n    const oldLayerMap = {};\n\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log/* default.warn */.Z.warn("Multiple old layers with same id ".concat(oldLayer.id))();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    const generatedLayers = [];\n\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = "Uniform transition in ".concat(layer);\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n      const oldLayer = oldLayerMap[newLayer.id];\n\n      if (oldLayer === null) {\n        log/* default.warn */.Z.warn("Multiple new layers with same id ".concat(newLayer.id))();\n      }\n\n      oldLayerMap[newLayer.id] = null;\n      let sublayers = null;\n\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n\n          this._updateLayer(newLayer);\n        }\n\n        generatedLayers.push(newLayer);\n        sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;\n      } catch (err) {\n        this._handleError(\'matching\', err, newLayer);\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n\n      layer.lifecycle = constants/* LIFECYCLE.INITIALIZED */.dt.INITIALIZED;\n    } catch (err) {\n      this._handleError(\'initialization\', err, layer);\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n\n    newLayer.lifecycle = constants/* LIFECYCLE.MATCHED */.dt.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = constants/* LIFECYCLE.AWAITING_GC */.dt.AWAITING_GC;\n    }\n  }\n\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError(\'update\', err, layer);\n    }\n  }\n\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || "finalized ".concat(layer);\n    layer.lifecycle = constants/* LIFECYCLE.AWAITING_FINALIZATION */.dt.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n\n      layer.lifecycle = constants/* LIFECYCLE.FINALIZED */.dt.FINALIZED;\n    } catch (err) {\n      this._handleError(\'finalization\', err, layer);\n    }\n  }\n\n}\n//# sourceMappingURL=layer-manager.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/view-manager.js\nvar view_manager = __webpack_require__(34779);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/views/map-view.js + 2 modules\nvar map_view = __webpack_require__(56602);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/deep-equal.js\nvar deep_equal = __webpack_require__(46871);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/program-manager.js + 8 modules\nvar program_manager = __webpack_require__(43426);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-2d.js + 1 modules\nvar texture_2d = __webpack_require__(51621);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/effects/lighting/ambient-light.js\n\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nlet idCount = 0;\nclass AmbientLight {\n  constructor(props = {}) {\n    (0,defineProperty/* default */.Z)(this, "id", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "color", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "intensity", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "type", \'ambient\');\n\n    const {\n      color = DEFAULT_LIGHT_COLOR\n    } = props;\n    const {\n      intensity = DEFAULT_LIGHT_INTENSITY\n    } = props;\n    this.id = props.id || "ambient-".concat(idCount++);\n    this.color = color;\n    this.intensity = intensity;\n  }\n\n}\n//# sourceMappingURL=ambient-light.js.map\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/vector3.js\nvar vector3 = __webpack_require__(43855);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/effects/lighting/directional-light.js\n\n\nconst directional_light_DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst directional_light_DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_LIGHT_DIRECTION = [0.0, 0.0, -1.0];\nlet directional_light_idCount = 0;\nclass DirectionalLight {\n  constructor(props = {}) {\n    (0,defineProperty/* default */.Z)(this, "id", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "color", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "intensity", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "type", \'directional\');\n\n    (0,defineProperty/* default */.Z)(this, "direction", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "shadow", void 0);\n\n    const {\n      color = directional_light_DEFAULT_LIGHT_COLOR\n    } = props;\n    const {\n      intensity = directional_light_DEFAULT_LIGHT_INTENSITY\n    } = props;\n    const {\n      direction = DEFAULT_LIGHT_DIRECTION\n    } = props;\n    const {\n      _shadow = false\n    } = props;\n    this.id = props.id || "directional-".concat(directional_light_idCount++);\n    this.color = color;\n    this.intensity = intensity;\n    this.type = \'directional\';\n    this.direction = new vector3/* default */.Z(direction).normalize().toArray();\n    this.shadow = _shadow;\n  }\n\n  getProjectedLight(opts) {\n    return this;\n  }\n\n}\n//# sourceMappingURL=directional-light.js.map\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/matrix4.js\nvar matrix4 = __webpack_require__(85451);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/passes/shadow-pass.js\nvar shadow_pass = __webpack_require__(22944);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/shaderlib/shadow/shadow.js\nvar shadow = __webpack_require__(33115);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/effects/lighting/lighting-effect.js\n\n\n\n\n\n\n\nconst DEFAULT_AMBIENT_LIGHT_PROPS = {\n  color: [255, 255, 255],\n  intensity: 1.0\n};\nconst DEFAULT_DIRECTIONAL_LIGHT_PROPS = [{\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-1, 3, -1]\n}, {\n  color: [255, 255, 255],\n  intensity: 0.9,\n  direction: [1, -8, -2.5]\n}];\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\nclass LightingEffect {\n  constructor(props = {}) {\n    (0,defineProperty/* default */.Z)(this, "id", \'lighting-effect\');\n\n    (0,defineProperty/* default */.Z)(this, "props", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "shadowColor", DEFAULT_SHADOW_COLOR);\n\n    (0,defineProperty/* default */.Z)(this, "shadow", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "ambientLight", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "directionalLights", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "pointLights", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "shadowPasses", []);\n\n    (0,defineProperty/* default */.Z)(this, "shadowMaps", []);\n\n    (0,defineProperty/* default */.Z)(this, "dummyShadowMap", null);\n\n    (0,defineProperty/* default */.Z)(this, "programManager", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "shadowMatrices", void 0);\n\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    this.ambientLight = null;\n    this.directionalLights = [];\n    this.pointLights = [];\n\n    for (const key in props) {\n      const lightSource = props[key];\n\n      switch (lightSource.type) {\n        case \'ambient\':\n          this.ambientLight = lightSource;\n          break;\n\n        case \'directional\':\n          this.directionalLights.push(lightSource);\n          break;\n\n        case \'point\':\n          this.pointLights.push(lightSource);\n          break;\n\n        default:\n      }\n    }\n\n    this._applyDefaultLights();\n\n    this.shadow = this.directionalLights.some(light => light.shadow);\n    this.props = props;\n  }\n\n  preRender(gl, {\n    layers,\n    layerFilter,\n    viewports,\n    onViewportActive,\n    views\n  }) {\n    if (!this.shadow) return;\n    this.shadowMatrices = this._calculateMatrices();\n\n    if (this.shadowPasses.length === 0) {\n      this._createShadowPasses(gl);\n    }\n\n    if (!this.programManager) {\n      this.programManager = program_manager/* default.getDefaultProgramManager */.Z.getDefaultProgramManager(gl);\n\n      if (shadow/* default */.Z) {\n        this.programManager.addDefaultModule(shadow/* default */.Z);\n      }\n    }\n\n    if (!this.dummyShadowMap) {\n      this.dummyShadowMap = new texture_2d/* default */.Z(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    for (let i = 0; i < this.shadowPasses.length; i++) {\n      const shadowPass = this.shadowPasses[i];\n      shadowPass.render({\n        layers,\n        layerFilter,\n        viewports,\n        onViewportActive,\n        views,\n        moduleParameters: {\n          shadowLightId: i,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowMatrices: this.shadowMatrices\n        }\n      });\n    }\n  }\n\n  getModuleParameters(layer) {\n    const parameters = this.shadow ? {\n      shadowMaps: this.shadowMaps,\n      dummyShadowMap: this.dummyShadowMap,\n      shadowColor: this.shadowColor,\n      shadowMatrices: this.shadowMatrices\n    } : {};\n    parameters.lightSources = {\n      ambientLight: this.ambientLight,\n      directionalLights: this.directionalLights.map(directionalLight => directionalLight.getProjectedLight({\n        layer\n      })),\n      pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({\n        layer\n      }))\n    };\n    return parameters;\n  }\n\n  cleanup() {\n    for (const shadowPass of this.shadowPasses) {\n      shadowPass.delete();\n    }\n\n    this.shadowPasses.length = 0;\n    this.shadowMaps.length = 0;\n\n    if (this.dummyShadowMap) {\n      this.dummyShadowMap.delete();\n      this.dummyShadowMap = null;\n    }\n\n    if (this.shadow && this.programManager) {\n      this.programManager.removeDefaultModule(shadow/* default */.Z);\n      this.programManager = null;\n    }\n  }\n\n  _calculateMatrices() {\n    const lightMatrices = [];\n\n    for (const light of this.directionalLights) {\n      const viewMatrix = new matrix4/* default */.Z().lookAt({\n        eye: new vector3/* default */.Z(light.direction).negate()\n      });\n      lightMatrices.push(viewMatrix);\n    }\n\n    return lightMatrices;\n  }\n\n  _createShadowPasses(gl) {\n    for (let i = 0; i < this.directionalLights.length; i++) {\n      const shadowPass = new shadow_pass/* default */.Z(gl);\n      this.shadowPasses[i] = shadowPass;\n      this.shadowMaps[i] = shadowPass.shadowMap;\n    }\n  }\n\n  _applyDefaultLights() {\n    const {\n      ambientLight,\n      pointLights,\n      directionalLights\n    } = this;\n\n    if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n      this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n      this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));\n    }\n  }\n\n}\n//# sourceMappingURL=lighting-effect.js.map\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/effect-manager.js\n\n\n\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\nfunction compareEffects(e1, e2) {\n  var _e1$order, _e2$order;\n\n  const o1 = (_e1$order = e1.order) !== null && _e1$order !== void 0 ? _e1$order : Infinity;\n  const o2 = (_e2$order = e2.order) !== null && _e2$order !== void 0 ? _e2$order : Infinity;\n  return o1 - o2;\n}\n\nclass EffectManager {\n  constructor() {\n    (0,defineProperty/* default */.Z)(this, "effects", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_resolvedEffects", []);\n\n    (0,defineProperty/* default */.Z)(this, "_defaultEffects", []);\n\n    (0,defineProperty/* default */.Z)(this, "_needsRedraw", void 0);\n\n    this.effects = [];\n    this._needsRedraw = \'Initial render\';\n\n    this._setEffects([]);\n  }\n\n  addDefaultEffect(effect) {\n    const defaultEffects = this._defaultEffects;\n\n    if (!defaultEffects.find(e => e.id === effect.id)) {\n      const index = defaultEffects.findIndex(e => compareEffects(e, effect) > 0);\n\n      if (index < 0) {\n        defaultEffects.push(effect);\n      } else {\n        defaultEffects.splice(index, 0, effect);\n      }\n\n      this._setEffects(this.effects);\n    }\n  }\n\n  setProps(props) {\n    if (\'effects\' in props) {\n      if (!(0,deep_equal/* deepEqual */.v)(props.effects, this.effects, 1)) {\n        this._setEffects(props.effects);\n      }\n    }\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  getEffects() {\n    return this._resolvedEffects;\n  }\n\n  _setEffects(effects) {\n    const oldEffectsMap = {};\n\n    for (const effect of this.effects) {\n      oldEffectsMap[effect.id] = effect;\n    }\n\n    const nextEffects = [];\n\n    for (const effect of effects) {\n      const oldEffect = oldEffectsMap[effect.id];\n\n      if (oldEffect && oldEffect !== effect) {\n        if (oldEffect.setProps) {\n          oldEffect.setProps(effect.props);\n          nextEffects.push(oldEffect);\n        } else {\n          oldEffect.cleanup();\n          nextEffects.push(effect);\n        }\n      } else {\n        nextEffects.push(effect);\n      }\n\n      delete oldEffectsMap[effect.id];\n    }\n\n    for (const removedEffectId in oldEffectsMap) {\n      oldEffectsMap[removedEffectId].cleanup();\n    }\n\n    this.effects = nextEffects;\n    this._resolvedEffects = nextEffects.concat(this._defaultEffects);\n\n    if (!effects.some(effect => effect instanceof LightingEffect)) {\n      this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n\n    this._needsRedraw = \'effects changed\';\n  }\n\n  finalize() {\n    for (const effect of this._resolvedEffects) {\n      effect.cleanup();\n    }\n\n    this.effects.length = 0;\n    this._resolvedEffects.length = 0;\n    this._defaultEffects.length = 0;\n  }\n\n}\n//# sourceMappingURL=effect-manager.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/passes/draw-layers-pass.js\nvar draw_layers_pass = __webpack_require__(13169);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/passes/pick-layers-pass.js\nvar pick_layers_pass = __webpack_require__(70930);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/framebuffer.js\nvar framebuffer = __webpack_require__(53849);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/deck-renderer.js\n\n\n\n\n\nconst TRACE_RENDER_LAYERS = \'deckRenderer.renderLayers\';\nclass DeckRenderer {\n  constructor(gl) {\n    (0,defineProperty/* default */.Z)(this, "gl", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "layerFilter", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "drawPickingColors", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "drawLayersPass", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "pickLayersPass", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "renderCount", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_needsRedraw", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "renderBuffers", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "lastPostProcessEffect", void 0);\n\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new draw_layers_pass/* default */.Z(gl);\n    this.pickLayersPass = new pick_layers_pass/* default */.Z(gl);\n    this.renderCount = 0;\n    this._needsRedraw = \'Initial render\';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if (this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = \'layerFilter changed\';\n    }\n\n    if (this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = \'drawPickingColors changed\';\n    }\n  }\n\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const renderOpts = {\n      layerFilter: this.layerFilter,\n      isPicking: this.drawPickingColors,\n      ...opts,\n      target: opts.target || framebuffer/* default.getDefaultFramebuffer */.Z.getDefaultFramebuffer(this.gl)\n    };\n\n    if (renderOpts.effects) {\n      this._preRender(renderOpts.effects, renderOpts);\n    }\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n    const renderStats = layerPass.render({ ...renderOpts,\n      target: outputBuffer\n    });\n\n    if (renderOpts.effects) {\n      this._postRender(renderOpts.effects, renderOpts);\n    }\n\n    this.renderCount++;\n    (0,debug/* default */.Z)(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  finalize() {\n    const {\n      renderBuffers\n    } = this;\n\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n\n    renderBuffers.length = 0;\n  }\n\n  _preRender(effects, opts) {\n    this.lastPostProcessEffect = null;\n    opts.preRenderStats = opts.preRenderStats || {};\n\n    for (const effect of effects) {\n      opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n\n      if (effect.postRender) {\n        this.lastPostProcessEffect = effect.id;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n  }\n\n  _resizeRenderBuffers() {\n    const {\n      renderBuffers\n    } = this;\n\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new framebuffer/* default */.Z(this.gl), new framebuffer/* default */.Z(this.gl));\n    }\n\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {\n      renderBuffers\n    } = this;\n    const params = { ...opts,\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect.id === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n\n}\n//# sourceMappingURL=deck-renderer.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/copy-and-blit.js + 1 modules\nvar copy_and_blit = __webpack_require__(81913);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/picking/query-object.js\nvar query_object = __webpack_require__(96941);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/picking/pick-info.js\nvar pick_info = __webpack_require__(87838);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/deck-picker.js\n\n\n\n\n\nclass DeckPicker {\n  constructor(gl) {\n    (0,defineProperty/* default */.Z)(this, "gl", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "pickingFBO", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "depthFBO", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "pickLayersPass", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "layerFilter", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "lastPickedInfo", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_pickable", true);\n\n    this.gl = gl;\n    this.pickLayersPass = new pick_layers_pass/* default */.Z(gl);\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if (\'layerFilter\' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if (\'_pickable\' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  getLastPickedObject({\n    x,\n    y,\n    layers,\n    viewports\n  }, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport = lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n    return { ...lastPickedInfo,\n      ...info\n    };\n  }\n\n  _resizeBuffer() {\n    var _this$pickingFBO, _this$depthFBO;\n\n    const {\n      gl\n    } = this;\n\n    if (!this.pickingFBO) {\n      this.pickingFBO = new framebuffer/* default */.Z(gl);\n\n      if (framebuffer/* default.isSupported */.Z.isSupported(gl, {\n        colorBufferFloat: true\n      })) {\n        const depthFBO = new framebuffer/* default */.Z(gl);\n        depthFBO.attach({\n          [36064]: new texture_2d/* default */.Z(gl, {\n            format: (0,esm/* isWebGL2 */.D0)(gl) ? 34836 : 6408,\n            type: 5126\n          })\n        });\n        this.depthFBO = depthFBO;\n      }\n    }\n\n    (_this$pickingFBO = this.pickingFBO) === null || _this$pickingFBO === void 0 ? void 0 : _this$pickingFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n    (_this$depthFBO = this.depthFBO) === null || _this$depthFBO === void 0 ? void 0 : _this$depthFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n  }\n\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n\n    const pickableLayers = layers.filter(layer => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = \'query\',\n    unproject3D,\n    onViewportActive,\n    effects\n  }) {\n    const pickableLayers = this._getPickable(layers);\n\n    const pixelRatio = (0,esm/* cssToDeviceRatio */.w)(this.gl);\n\n    if (!pickableLayers) {\n      return {\n        result: [],\n        emptyInfo: (0,pick_info/* getEmptyPickingInfo */.wy)({\n          viewports,\n          x,\n          y,\n          pixelRatio\n        })\n      };\n    }\n\n    this._resizeBuffer();\n\n    const devicePixelRange = (0,esm/* cssToDevicePixels */.JY)(this.gl, [x, y], true);\n    const devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {\n      width,\n      height\n    } = this.pickingFBO;\n\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    const cullRect = {\n      x: x - radius,\n      y: y - radius,\n      width: radius * 2 + 1,\n      height: radius * 2 + 1\n    };\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      let pickInfo;\n\n      if (deviceRect) {\n        const pickedResult = this._drawAndSample({\n          layers: pickableLayers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          cullRect,\n          effects,\n          pass: "picking:".concat(mode)\n        });\n\n        pickInfo = (0,query_object/* getClosestObject */.T)({ ...pickedResult,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius,\n          deviceRect\n        });\n      } else {\n        pickInfo = {\n          pickedColor: null,\n          pickedObjectIndex: -1\n        };\n      }\n\n      let z;\n\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const {\n          pickedColors: pickedColors2\n        } = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {\n            x: pickInfo.pickedX,\n            y: pickInfo.pickedY,\n            width: 1,\n            height: 1\n          },\n          cullRect,\n          effects,\n          pass: "picking:".concat(mode, ":z")\n        }, true);\n\n        if (pickedColors2[3]) {\n          z = pickedColors2[0];\n        }\n      }\n\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      infos = (0,pick_info/* processPickInfo */.I5)({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers: pickableLayers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {\n      result,\n      emptyInfo: infos.get(null)\n    };\n  }\n\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = \'query\',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }) {\n    const pickableLayers = this._getPickable(layers);\n\n    if (!pickableLayers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = (0,esm/* cssToDeviceRatio */.w)(this.gl);\n    const leftTop = (0,esm/* cssToDevicePixels */.JY)(this.gl, [x, y], true);\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n    const rightBottom = (0,esm/* cssToDevicePixels */.JY)(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers: pickableLayers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect: {\n        x,\n        y,\n        width,\n        height\n      },\n      effects,\n      pass: "picking:".concat(mode)\n    });\n\n    const pickInfos = (0,query_object/* getUniqueObjects */.K)(pickedResult);\n    const uniqueInfos = new Map();\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        pixelRatio\n      };\n      info = (0,pick_info/* getLayerPickingInfo */.iD)({\n        layer: pickInfo.pickedLayer,\n        info,\n        mode\n      });\n\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    cullRect,\n    effects,\n    pass\n  }, pickZ = false) {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n    const opts = {\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      cullRect,\n      effects,\n      pass,\n      pickZ,\n      preRenderStats: {}\n    };\n\n    for (const effect of effects) {\n      if (effect.useInPicking) {\n        opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n      }\n    }\n\n    const {\n      decodePickingColor\n    } = this.pickLayersPass.render(opts);\n    const {\n      x,\n      y,\n      width,\n      height\n    } = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    (0,copy_and_blit/* readPixelsToArray */.z6)(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return {\n      pickedColors,\n      decodePickingColor\n    };\n  }\n\n  _getPickingRect({\n    deviceX,\n    deviceY,\n    deviceRadius,\n    deviceWidth,\n    deviceHeight\n  }) {\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n\n}\n//# sourceMappingURL=deck-picker.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/tooltip.js\nvar tooltip = __webpack_require__(81862);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/typed-array-manager.js\nvar typed_array_manager = __webpack_require__(36610);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/api/register-loaders.js\nvar register_loaders = __webpack_require__(6228);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/images/dist/esm/image-loader.js + 8 modules\nvar image_loader = __webpack_require__(54022);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/json-loader.js\nvar json_loader = __webpack_require__(6610);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/init.js\n\n\n\n\n\n\nfunction checkVersion() {\n  const version =  true ? "8.9.4" : 0;\n  const existingVersion = globalThis.deck && globalThis.deck.VERSION;\n\n  if (existingVersion && existingVersion !== version) {\n    throw new Error("deck.gl - multiple versions detected: ".concat(existingVersion, " vs ").concat(version));\n  }\n\n  if (!existingVersion) {\n    log/* default.log */.Z.log(1, "deck.gl ".concat(version))();\n    globalThis.deck = { ...globalThis.deck,\n      VERSION: version,\n      version,\n      log: log/* default */.Z,\n      _registerLoggers: debug/* register */.z\n    };\n    (0,register_loaders/* registerLoaders */.fh)([json_loader/* default */.Z, [image_loader/* ImageLoader */.S, {\n      imagebitmap: {\n        premultiplyAlpha: \'none\'\n      }\n    }]]);\n  }\n\n  return version;\n}\n\nconst VERSION = checkVersion();\n//# sourceMappingURL=init.js.map\n// EXTERNAL MODULE: ./node_modules/@probe.gl/env/dist/esm/lib/get-browser.js\nvar get_browser = __webpack_require__(3485);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/animation-loop.js\nvar animation_loop = __webpack_require__(16816);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/init.js\nvar init = __webpack_require__(49835);\n// EXTERNAL MODULE: ./node_modules/mjolnir.js/dist/esm/index.js + 12 modules\nvar dist_esm = __webpack_require__(12798);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/assert.js\nvar assert = __webpack_require__(75304);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/constants.js\nvar lib_constants = __webpack_require__(24088);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/deck.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction noop() {}\n\nconst getCursor = ({\n  isDragging\n}) => isDragging ? \'grabbing\' : \'grab\';\n\nconst defaultProps = {\n  id: \'\',\n  width: \'100%\',\n  height: \'100%\',\n  style: null,\n  viewState: null,\n  initialViewState: null,\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  parameters: {},\n  parent: null,\n  gl: null,\n  canvas: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  touchAction: \'none\',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  _customRender: null,\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: error => log/* default.error */.Z.error(error.message)(),\n  onHover: null,\n  onClick: null,\n  onDragStart: null,\n  onDrag: null,\n  onDragEnd: null,\n  _onMetrics: null,\n  getCursor,\n  getTooltip: null,\n  debug: false,\n  drawPickingColors: false\n};\nclass Deck {\n  constructor(props) {\n    (0,defineProperty/* default */.Z)(this, "props", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "width", 0);\n\n    (0,defineProperty/* default */.Z)(this, "height", 0);\n\n    (0,defineProperty/* default */.Z)(this, "userData", {});\n\n    (0,defineProperty/* default */.Z)(this, "canvas", null);\n\n    (0,defineProperty/* default */.Z)(this, "viewManager", null);\n\n    (0,defineProperty/* default */.Z)(this, "layerManager", null);\n\n    (0,defineProperty/* default */.Z)(this, "effectManager", null);\n\n    (0,defineProperty/* default */.Z)(this, "deckRenderer", null);\n\n    (0,defineProperty/* default */.Z)(this, "deckPicker", null);\n\n    (0,defineProperty/* default */.Z)(this, "eventManager", null);\n\n    (0,defineProperty/* default */.Z)(this, "tooltip", null);\n\n    (0,defineProperty/* default */.Z)(this, "metrics", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "animationLoop", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "stats", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "viewState", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "cursorState", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_needsRedraw", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_pickRequest", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_lastPointerDownInfo", null);\n\n    (0,defineProperty/* default */.Z)(this, "_metricsCounter", void 0);\n\n    (0,defineProperty/* default */.Z)(this, "_onPointerMove", event => {\n      const {\n        _pickRequest\n      } = this;\n\n      if (event.type === \'pointerleave\') {\n        _pickRequest.x = -1;\n        _pickRequest.y = -1;\n        _pickRequest.radius = 0;\n      } else if (event.leftButton || event.rightButton) {\n        return;\n      } else {\n        const pos = event.offsetCenter;\n\n        if (!pos) {\n          return;\n        }\n\n        _pickRequest.x = pos.x;\n        _pickRequest.y = pos.y;\n        _pickRequest.radius = this.props.pickingRadius;\n      }\n\n      if (this.layerManager) {\n        this.layerManager.context.mousePosition = {\n          x: _pickRequest.x,\n          y: _pickRequest.y\n        };\n      }\n\n      _pickRequest.event = event;\n    });\n\n    (0,defineProperty/* default */.Z)(this, "_onEvent", event => {\n      const eventOptions = lib_constants/* EVENTS */.FP[event.type];\n      const pos = event.offsetCenter;\n\n      if (!eventOptions || !pos || !this.layerManager) {\n        return;\n      }\n\n      const layers = this.layerManager.getLayers();\n      const info = this.deckPicker.getLastPickedObject({\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      }, this._lastPointerDownInfo);\n      const {\n        layer\n      } = info;\n      const layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n      const rootHandler = this.props[eventOptions.handler];\n      let handled = false;\n\n      if (layerHandler) {\n        handled = layerHandler.call(layer, info, event);\n      }\n\n      if (!handled && rootHandler) {\n        rootHandler(info, event);\n      }\n    });\n\n    (0,defineProperty/* default */.Z)(this, "_onPointerDown", event => {\n      const pos = event.offsetCenter;\n\n      const pickedInfo = this._pick(\'pickObject\', \'pickObject Time\', {\n        x: pos.x,\n        y: pos.y,\n        radius: this.props.pickingRadius\n      });\n\n      this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n    });\n\n    this.props = { ...defaultProps,\n      ...props\n    };\n    props = this.props;\n    this._needsRedraw = \'Initial render\';\n    this._pickRequest = {\n      mode: \'hover\',\n      x: -1,\n      y: -1,\n      radius: 0,\n      event: null\n    };\n    this.cursorState = {\n      isHovering: false,\n      isDragging: false\n    };\n\n    if (props.viewState && props.initialViewState) {\n      log/* default.warn */.Z.warn(\'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.\')();\n    }\n\n    if ((0,get_browser/* default */.Z)() === \'IE\') {\n      log/* default.warn */.Z.warn(\'IE 11 is not supported\')();\n    }\n\n    this.viewState = props.initialViewState;\n\n    if (!props.gl) {\n      if (typeof document !== \'undefined\') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new lib_stats/* default */.Z({\n      id: \'deck.gl\'\n    });\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n    this.setProps(props);\n\n    if (props._typedArrayManagerProps) {\n      typed_array_manager/* default.setOptions */.Z.setOptions(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  finalize() {\n    var _this$layerManager, _this$viewManager, _this$effectManager, _this$deckRenderer, _this$deckPicker, _this$eventManager, _this$tooltip;\n\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n    (_this$layerManager = this.layerManager) === null || _this$layerManager === void 0 ? void 0 : _this$layerManager.finalize();\n    this.layerManager = null;\n    (_this$viewManager = this.viewManager) === null || _this$viewManager === void 0 ? void 0 : _this$viewManager.finalize();\n    this.viewManager = null;\n    (_this$effectManager = this.effectManager) === null || _this$effectManager === void 0 ? void 0 : _this$effectManager.finalize();\n    this.effectManager = null;\n    (_this$deckRenderer = this.deckRenderer) === null || _this$deckRenderer === void 0 ? void 0 : _this$deckRenderer.finalize();\n    this.deckRenderer = null;\n    (_this$deckPicker = this.deckPicker) === null || _this$deckPicker === void 0 ? void 0 : _this$deckPicker.finalize();\n    this.deckPicker = null;\n    (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 ? void 0 : _this$eventManager.destroy();\n    this.eventManager = null;\n    (_this$tooltip = this.tooltip) === null || _this$tooltip === void 0 ? void 0 : _this$tooltip.remove();\n    this.tooltip = null;\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      var _this$canvas$parentEl;\n\n      (_this$canvas$parentEl = this.canvas.parentElement) === null || _this$canvas$parentEl === void 0 ? void 0 : _this$canvas$parentEl.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  setProps(props) {\n    this.stats.get(\'setProps Time\').timeStart();\n\n    if (\'onLayerHover\' in props) {\n      log/* default.removed */.Z.removed(\'onLayerHover\', \'onHover\')();\n    }\n\n    if (\'onLayerClick\' in props) {\n      log/* default.removed */.Z.removed(\'onLayerClick\', \'onClick\')();\n    }\n\n    if (props.initialViewState && !(0,deep_equal/* deepEqual */.v)(this.props.initialViewState, props.initialViewState, 3)) {\n      this.viewState = props.initialViewState;\n    }\n\n    Object.assign(this.props, props);\n\n    this._setCanvasSize(this.props);\n\n    const resolvedProps = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n    this.animationLoop.setProps(resolvedProps);\n\n    if (this.layerManager) {\n      this.viewManager.setProps(resolvedProps);\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager.setProps(resolvedProps);\n      this.deckRenderer.setProps(resolvedProps);\n      this.deckPicker.setProps(resolvedProps);\n    }\n\n    this.stats.get(\'setProps Time\').timeEnd();\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    if (!this.layerManager) {\n      return false;\n    }\n\n    if (this.props._animate) {\n      return \'Deck._animate\';\n    }\n\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n    redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  redraw(reason) {\n    if (!this.layerManager) {\n      return;\n    }\n\n    let redrawReason = this.needsRedraw({\n      clearRedrawFlags: true\n    });\n    redrawReason = reason || redrawReason;\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get(\'Redraw Count\').incrementCount();\n\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  get isInitialized() {\n    return this.viewManager !== null;\n  }\n\n  getViews() {\n    (0,assert/* default */.Z)(this.viewManager);\n    return this.viewManager.views;\n  }\n\n  getViewports(rect) {\n    (0,assert/* default */.Z)(this.viewManager);\n    return this.viewManager.getViewports(rect);\n  }\n\n  pickObject(opts) {\n    const infos = this._pick(\'pickObject\', \'pickObject Time\', opts).result;\n\n    return infos.length ? infos[0] : null;\n  }\n\n  pickMultipleObjects(opts) {\n    opts.depth = opts.depth || 10;\n    return this._pick(\'pickObject\', \'pickMultipleObjects Time\', opts).result;\n  }\n\n  pickObjects(opts) {\n    return this._pick(\'pickObjects\', \'pickObjects Time\', opts);\n  }\n\n  _addResources(resources, forceUpdate = false) {\n    for (const id in resources) {\n      this.layerManager.resourceManager.add({\n        resourceId: id,\n        data: resources[id],\n        forceUpdate\n      });\n    }\n  }\n\n  _removeResources(resourceIds) {\n    for (const id of resourceIds) {\n      this.layerManager.resourceManager.remove(id);\n    }\n  }\n\n  _addDefaultEffect(effect) {\n    this.effectManager.addDefaultEffect(effect);\n  }\n\n  _pick(method, statKey, opts) {\n    (0,assert/* default */.Z)(this.deckPicker);\n    const {\n      stats\n    } = this;\n    stats.get(\'Pick Count\').incrementCount();\n    stats.get(statKey).timeStart();\n    const infos = this.deckPicker[method]({\n      layers: this.layerManager.getLayers(opts),\n      views: this.viewManager.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager.activateViewport,\n      effects: this.effectManager.getEffects(),\n      ...opts\n    });\n    stats.get(statKey).timeEnd();\n    return infos;\n  }\n\n  _createCanvas(props) {\n    let canvas = props.canvas;\n\n    if (typeof canvas === \'string\') {\n      canvas = document.getElementById(canvas);\n      (0,assert/* default */.Z)(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement(\'canvas\');\n      canvas.id = props.id || \'deckgl-overlay\';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n    return canvas;\n  }\n\n  _setCanvasSize(props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    const {\n      width,\n      height\n    } = props;\n\n    if (width || width === 0) {\n      const cssWidth = Number.isFinite(width) ? "".concat(width, "px") : width;\n      this.canvas.style.width = cssWidth;\n    }\n\n    if (height || height === 0) {\n      var _props$style;\n\n      const cssHeight = Number.isFinite(height) ? "".concat(height, "px") : height;\n      this.canvas.style.position = ((_props$style = props.style) === null || _props$style === void 0 ? void 0 : _props$style.position) || \'absolute\';\n      this.canvas.style.height = cssHeight;\n    }\n  }\n\n  _updateCanvasSize() {\n    const {\n      canvas\n    } = this;\n\n    if (!canvas) {\n      return;\n    }\n\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n\n    if (newWidth !== this.width || newHeight !== this.height) {\n      var _this$viewManager2;\n\n      this.width = newWidth;\n      this.height = newHeight;\n      (_this$viewManager2 = this.viewManager) === null || _this$viewManager2 === void 0 ? void 0 : _this$viewManager2.setProps({\n        width: newWidth,\n        height: newHeight\n      });\n      this.props.onResize({\n        width: newWidth,\n        height: newHeight\n      });\n    }\n  }\n\n  _createAnimationLoop(props) {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels\n    } = props;\n    return new animation_loop/* default */.Z({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts => (0,esm/* createGLContext */.s9)({ ...glOptions,\n        ...opts,\n        canvas: this.canvas,\n        debug,\n        onContextLost: () => this._onContextLost()\n      }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  _getViewState() {\n    return this.props.viewState || this.viewState;\n  }\n\n  _getViews() {\n    let views = this.props.views || [new map_view/* default */.Z({\n      id: \'default-view\'\n    })];\n    views = Array.isArray(views) ? views : [views];\n\n    if (views.length && this.props.controller) {\n      views[0].props.controller = this.props.controller;\n    }\n\n    return views;\n  }\n\n  _onContextLost() {\n    const {\n      onError\n    } = this.props;\n\n    if (this.animationLoop && onError) {\n      onError(new Error(\'WebGL context is lost\'));\n    }\n  }\n\n  _pickAndCallback() {\n    const {\n      _pickRequest\n    } = this;\n\n    if (_pickRequest.event) {\n      const {\n        result,\n        emptyInfo\n      } = this._pick(\'pickObject\', \'pickObject Time\', _pickRequest);\n\n      this.cursorState.isHovering = result.length > 0;\n      let pickedInfo = emptyInfo;\n      let handled = false;\n\n      for (const info of result) {\n        var _info$layer;\n\n        pickedInfo = info;\n        handled = ((_info$layer = info.layer) === null || _info$layer === void 0 ? void 0 : _info$layer.onHover(info, _pickRequest.event)) || handled;\n      }\n\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      if (this.props.getTooltip && this.tooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      _pickRequest.event = null;\n    }\n  }\n\n  _updateCursor() {\n    const container = this.props.parent || this.canvas;\n\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.cursorState);\n    }\n  }\n\n  _setGLContext(gl) {\n    if (this.layerManager) {\n      return;\n    }\n\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      (0,esm/* instrumentGLContext */.yW)(gl, {\n        enable: true,\n        copyState: true\n      });\n    }\n\n    this.tooltip = new tooltip/* default */.Z(this.canvas);\n    (0,esm/* setParameters */.dR)(gl, {\n      blend: true,\n      blendFunc: [770, 771, 1, 771],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: 515\n    });\n    this.props.onWebGLInitialized(gl);\n    const timeline = new animation_timeline/* Timeline */.T();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n    this.eventManager = new dist_esm/* EventManager */.Q(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n\n    for (const eventType in lib_constants/* EVENTS */.FP) {\n      this.eventManager.on(eventType, this._onEvent);\n    }\n\n    this.viewManager = new view_manager/* default */.Z({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n    const viewport = this.viewManager.getViewports()[0];\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n    this.effectManager = new EffectManager();\n    this.deckRenderer = new DeckRenderer(gl);\n    this.deckPicker = new DeckPicker(gl);\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n\n    this.props.onLoad();\n  }\n\n  _drawLayers(redrawReason, renderOptions) {\n    const {\n      gl\n    } = this.layerManager.context;\n    (0,esm/* setParameters */.dR)(gl, this.props.parameters);\n    this.props.onBeforeRender({\n      gl\n    });\n    this.deckRenderer.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager.getLayers(),\n      viewports: this.viewManager.getViewports(),\n      onViewportActive: this.layerManager.activateViewport,\n      views: this.viewManager.getViews(),\n      pass: \'screen\',\n      effects: this.effectManager.getEffects(),\n      ...renderOptions\n    });\n    this.props.onAfterRender({\n      gl\n    });\n  }\n\n  _onRenderFrame(animationProps) {\n    this._getFrameStats();\n\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n\n      this.stats.reset();\n      log/* default.table */.Z.table(4, this.metrics)();\n\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n      this.tooltip.setTooltip(null);\n    }\n\n    this.layerManager.updateLayers();\n\n    this._pickAndCallback();\n\n    this.redraw();\n\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  _onViewStateChange(params) {\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    if (this.viewState) {\n      this.viewState = { ...this.viewState,\n        [params.viewId]: viewState\n      };\n\n      if (!this.props.viewState) {\n        if (this.viewManager) {\n          this.viewManager.setProps({\n            viewState: this.viewState\n          });\n        }\n      }\n    }\n  }\n\n  _onInteractionStateChange(interactionState) {\n    this.cursorState.isDragging = interactionState.isDragging || false;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  _getFrameStats() {\n    const {\n      stats\n    } = this;\n    stats.get(\'frameRate\').timeEnd();\n    stats.get(\'frameRate\').timeStart();\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get(\'GPU Time\').addTime(animationLoopStats.get(\'GPU Time\').lastTiming);\n    stats.get(\'CPU Time\').addTime(animationLoopStats.get(\'CPU Time\').lastTiming);\n  }\n\n  _getMetrics() {\n    const {\n      metrics,\n      stats\n    } = this;\n    metrics.fps = stats.get(\'frameRate\').getHz();\n    metrics.setPropsTime = stats.get(\'setProps Time\').time;\n    metrics.updateAttributesTime = stats.get(\'Update Attributes\').time;\n    metrics.framesRedrawn = stats.get(\'Redraw Count\').count;\n    metrics.pickTime = stats.get(\'pickObject Time\').time + stats.get(\'pickMultipleObjects Time\').time + stats.get(\'pickObjects Time\').time;\n    metrics.pickCount = stats.get(\'Pick Count\').count;\n    metrics.gpuTime = stats.get(\'GPU Time\').time;\n    metrics.cpuTime = stats.get(\'CPU Time\').time;\n    metrics.gpuTimePerFrame = stats.get(\'GPU Time\').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get(\'CPU Time\').getAverageTime();\n    const memoryStats = init/* lumaStats.get */.lR.get(\'Memory Usage\');\n    metrics.bufferMemory = memoryStats.get(\'Buffer Memory\').count;\n    metrics.textureMemory = memoryStats.get(\'Texture Memory\').count;\n    metrics.renderbufferMemory = memoryStats.get(\'Renderbuffer Memory\').count;\n    metrics.gpuMemory = memoryStats.get(\'GPU Memory\').count;\n  }\n\n}\n\n(0,defineProperty/* default */.Z)(Deck, "defaultProps", defaultProps);\n\n(0,defineProperty/* default */.Z)(Deck, "VERSION", VERSION);\n//# sourceMappingURL=deck.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68315\n')},52447:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ Layer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/constants.js\nvar constants = __webpack_require__(24088);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/attribute.js + 3 modules\nvar attribute_attribute = __webpack_require__(13906);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/log.js\nvar log = __webpack_require__(80744);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/memoize.js\nvar memoize = __webpack_require__(88177);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/math-utils.js\nvar math_utils = __webpack_require__(75126);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/debug/index.js\nvar debug = __webpack_require__(63803);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/transform/transform.js + 5 modules\nvar transform = __webpack_require__(19718);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/transitions/gpu-interpolation-transition.js\nvar gpu_interpolation_transition = __webpack_require__(20198);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/transitions/gpu-spring-transition.js\nvar gpu_spring_transition = __webpack_require__(7563);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/attribute-transition-manager.js\n\n\n\n\n\nconst TRANSITION_TYPES = {\n  interpolation: gpu_interpolation_transition/* default */.Z,\n  spring: gpu_spring_transition/* default */.Z\n};\nclass AttributeTransitionManager {\n  constructor(gl, {\n    id,\n    timeline\n  }) {\n    (0,defineProperty/* default */.Z)(this, \"id\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"isSupported\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"gl\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"timeline\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"transitions\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"needsRedraw\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"numInstances\", void 0);\n\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n    this.isSupported = transform/* default.isSupported */.Z.isSupported(gl);\n  }\n\n  finalize() {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  update({\n    attributes,\n    transitions,\n    numInstances\n  }) {\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n      if (!settings) continue;\n\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  hasAttribute(attributeName) {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  run() {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n\n  _removeTransition(attributeName) {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  _updateAttribute(attributeName, attribute, settings) {\n    const transition = this.transitions[attributeName];\n    let isNew = !transition || transition.type !== settings.type;\n\n    if (isNew) {\n      if (!this.isSupported) {\n        log/* default.warn */.Z.warn(\"WebGL2 not supported by this browser. Transition for \".concat(attributeName, \" is disabled.\"))();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log/* default.error */.Z.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n\n}\n//# sourceMappingURL=attribute-transition-manager.js.map\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/attribute/attribute-manager.js\n\n\n\n\n\n\n\nconst TRACE_INVALIDATE = 'attributeManager.invalidate';\nconst TRACE_UPDATE_START = 'attributeManager.updateStart';\nconst TRACE_UPDATE_END = 'attributeManager.updateEnd';\nconst TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';\nconst TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';\nconst TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';\nclass AttributeManager {\n  constructor(gl, {\n    id = 'attribute-manager',\n    stats,\n    timeline\n  } = {}) {\n    (0,defineProperty/* default */.Z)(this, \"id\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"gl\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"attributes\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"updateTriggers\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"needsRedraw\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"userData\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"stats\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"attributeTransitionManager\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"mergeBoundsMemoized\", (0,memoize/* default */.Z)(math_utils/* mergeBounds */.cc));\n\n    this.id = id;\n    this.gl = gl;\n    this.attributes = {};\n    this.updateTriggers = {};\n    this.needsRedraw = true;\n    this.userData = {};\n    this.stats = stats;\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: \"\".concat(id, \"-transitions\"),\n      timeline\n    });\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n\n    this.attributeTransitionManager.finalize();\n  }\n\n  getNeedsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  setNeedsRedraw() {\n    this.needsRedraw = true;\n  }\n\n  add(attributes) {\n    this._add(attributes);\n  }\n\n  addInstanced(attributes) {\n    this._add(attributes, {\n      instanced: 1\n    });\n  }\n\n  remove(attributeNameArray) {\n    for (const name of attributeNameArray) {\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n\n    (0,debug/* default */.Z)(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n\n    (0,debug/* default */.Z)(TRACE_INVALIDATE, this, 'all');\n  }\n\n  update({\n    data,\n    numInstances,\n    startIndices = null,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {}\n  }) {\n    let updated = false;\n    (0,debug/* default */.Z)(TRACE_UPDATE_START, this);\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      const accessorName = attribute.settings.accessor;\n      attribute.startIndices = startIndices;\n      attribute.numInstances = numInstances;\n\n      if (props[attributeName]) {\n        log/* default.removed */.Z.removed(\"props.\".concat(attributeName), \"data.attributes.\".concat(attributeName))();\n      }\n\n      if (attribute.setExternalBuffer(buffers[attributeName])) {} else if (attribute.setBinaryValue(typeof accessorName === 'string' ? buffers[accessorName] : undefined, data.startIndices)) {} else if (typeof accessorName === 'string' && !buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {} else if (attribute.needsUpdate()) {\n        updated = true;\n\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw = this.needsRedraw || attribute.needsRedraw();\n    }\n\n    if (updated) {\n      (0,debug/* default */.Z)(TRACE_UPDATE_END, this, numInstances);\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  updateTransition() {\n    const {\n      attributeTransitionManager\n    } = this;\n    const transitionUpdated = attributeTransitionManager.run();\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getBounds(attributeNames) {\n    const bounds = attributeNames.map(attributeName => {\n      var _this$attributes$attr;\n\n      return (_this$attributes$attr = this.attributes[attributeName]) === null || _this$attributes$attr === void 0 ? void 0 : _this$attributes$attr.getBounds();\n    });\n    return this.mergeBoundsMemoized(bounds);\n  }\n\n  getChangedAttributes(opts = {\n    clearChangedFlags: false\n  }) {\n    const {\n      attributes,\n      attributeTransitionManager\n    } = this;\n    const changedAttributes = { ...attributeTransitionManager.getAttributes()\n    };\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  getShaderAttributes(attributes, excludeAttributes = {}) {\n    if (!attributes) {\n      attributes = this.getAttributes();\n    }\n\n    const shaderAttributes = {};\n\n    for (const attributeName in attributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    return shaderAttributes;\n  }\n\n  _add(attributes, extraProps = {}) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);\n    }\n\n    this._mapUpdateTriggersToAttributes();\n  }\n\n  _createAttribute(name, attribute, extraProps) {\n    const props = { ...attribute,\n      id: name,\n      size: attribute.isIndexed && 1 || attribute.size || 1,\n      divisor: extraProps.instanced ? 1 : attribute.divisor || 0\n    };\n    return new attribute_attribute/* default */.Z(this.gl, props);\n  }\n\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {\n      attributes,\n      updateTriggers\n    } = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    }\n\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {\n      attribute,\n      numInstances\n    } = opts;\n    (0,debug/* default */.Z)(TRACE_ATTRIBUTE_UPDATE_START, attribute);\n\n    if (attribute.constant) {\n      attribute.setConstantValue(attribute.value);\n      return;\n    }\n\n    if (attribute.allocate(numInstances)) {\n      (0,debug/* default */.Z)(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);\n    }\n\n    const updated = attribute.updateBuffer(opts);\n\n    if (updated) {\n      this.needsRedraw = true;\n      (0,debug/* default */.Z)(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);\n    }\n  }\n\n}\n//# sourceMappingURL=attribute-manager.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/uniform-transition-manager.js + 2 modules\nvar uniform_transition_manager = __webpack_require__(52413);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\nvar props = __webpack_require__(71761);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lifecycle/constants.js\nvar lifecycle_constants = __webpack_require__(85409);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/count.js\nvar count = __webpack_require__(75015);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/assert.js\nvar assert = __webpack_require__(75304);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/shader.js\nvar shader = __webpack_require__(27870);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/shaderlib/project/project-functions.js\nvar project_functions = __webpack_require__(18547);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/typed-array-manager.js\nvar typed_array_manager = __webpack_require__(36610);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lifecycle/component.js + 3 modules\nvar component = __webpack_require__(85089);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lifecycle/component-state.js\nvar component_state = __webpack_require__(88018);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/layer-state.js\n\n\nclass LayerState extends component_state/* default */.Z {\n  constructor({\n    attributeManager,\n    layer\n  }) {\n    super(layer);\n\n    (0,defineProperty/* default */.Z)(this, \"attributeManager\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"needsRedraw\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"needsUpdate\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"subLayers\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"usesPickingColorCache\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"hasPickingBuffer\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"changeFlags\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"viewport\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"uniformTransitions\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"propsInTransition\", void 0);\n\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.needsUpdate = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer() {\n    return this.component;\n  }\n\n  _fetch(propName, url) {\n    const layer = this.layer;\n    const fetch = layer === null || layer === void 0 ? void 0 : layer.props.fetch;\n\n    if (fetch) {\n      return fetch(url, {\n        propName,\n        layer\n      });\n    }\n\n    return super._fetch(propName, url);\n  }\n\n  _onResolve(propName, value) {\n    const layer = this.layer;\n\n    if (layer) {\n      const onDataLoad = layer.props.onDataLoad;\n\n      if (propName === 'data' && onDataLoad) {\n        onDataLoad(value, {\n          propName,\n          layer\n        });\n      }\n    }\n  }\n\n  _onError(propName, error) {\n    const layer = this.layer;\n\n    if (layer) {\n      layer.raiseError(error, \"loading \".concat(propName, \" of \").concat(this.layer));\n    }\n  }\n\n}\n//# sourceMappingURL=layer-state.js.map\n// EXTERNAL MODULE: ./node_modules/@math.gl/web-mercator/dist/esm/index.js + 8 modules\nvar dist_esm = __webpack_require__(78866);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/api/load.js + 24 modules\nvar load = __webpack_require__(44534);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/layer.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\nconst EMPTY_ARRAY = Object.freeze([]);\nconst areViewportsEqual = (0,memoize/* default */.Z)(({\n  oldViewport,\n  viewport\n}) => {\n  return oldViewport.equals(viewport);\n});\nlet pickingColorCache = new Uint8ClampedArray(0);\nconst defaultProps = {\n  data: {\n    type: 'data',\n    value: EMPTY_ARRAY,\n    async: true\n  },\n  dataComparator: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  _dataDiff: {\n    type: 'function',\n    value: data => data && data.__diff,\n    optional: true\n  },\n  dataTransform: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  onError: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  fetch: {\n    type: 'function',\n    value: (url, {\n      propName,\n      layer,\n      loaders,\n      loadOptions,\n      signal\n    }) => {\n      const {\n        resourceManager\n      } = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n\n      if (signal) {\n        var _loadOptions;\n\n        loadOptions = { ...loadOptions,\n          fetch: { ...((_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.fetch),\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        resourceManager.add({\n          resourceId: url,\n          data: (0,load/* load */.z)(url, loaders),\n          persistent: false\n        });\n        inResourceManager = true;\n      }\n\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => {\n            var _layer$internalState;\n\n            return (_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.reloadAsyncProp(propName, data);\n          },\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return (0,load/* load */.z)(url, loaders, loadOptions);\n    }\n  },\n  updateTriggers: {},\n  visible: true,\n  pickable: false,\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  operation: 'draw',\n  onHover: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  onClick: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  onDragStart: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  onDrag: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  onDragEnd: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  coordinateSystem: constants/* COORDINATE_SYSTEM.DEFAULT */.Df.DEFAULT,\n  coordinateOrigin: {\n    type: 'array',\n    value: [0, 0, 0],\n    compare: true\n  },\n  modelMatrix: {\n    type: 'array',\n    value: null,\n    compare: true,\n    optional: true\n  },\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n  parameters: {\n    type: 'object',\n    value: {},\n    optional: true,\n    compare: 2\n  },\n  loadOptions: {\n    type: 'object',\n    value: null,\n    optional: true,\n    ignore: true\n  },\n  transitions: null,\n  extensions: [],\n  loaders: {\n    type: 'array',\n    value: [],\n    optional: true,\n    ignore: true\n  },\n  getPolygonOffset: {\n    type: 'function',\n    value: ({\n      layerIndex\n    }) => [0, -layerIndex * 100]\n  },\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {\n    type: 'accessor',\n    value: [0, 0, 128, 128]\n  }\n};\nclass Layer extends component/* default */.Z {\n  constructor(...args) {\n    super(...args);\n\n    (0,defineProperty/* default */.Z)(this, \"internalState\", null);\n\n    (0,defineProperty/* default */.Z)(this, \"lifecycle\", lifecycle_constants/* LIFECYCLE.NO_STATE */.dt.NO_STATE);\n\n    (0,defineProperty/* default */.Z)(this, \"context\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"state\", void 0);\n\n    (0,defineProperty/* default */.Z)(this, \"parent\", null);\n  }\n\n  get root() {\n    let layer = this;\n\n    while (layer.parent) {\n      layer = layer.parent;\n    }\n\n    return layer;\n  }\n\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return \"\".concat(className, \"({id: '\").concat(this.props.id, \"'})\");\n  }\n\n  project(xyz) {\n    (0,assert/* default */.Z)(this.internalState);\n    const viewport = this.internalState.viewport || this.context.viewport;\n    const worldPosition = (0,project_functions/* getWorldPosition */.T)(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = (0,dist_esm/* worldToPixels */.aW)(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  unproject(xy) {\n    (0,assert/* default */.Z)(this.internalState);\n    const viewport = this.internalState.viewport || this.context.viewport;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz, params) {\n    (0,assert/* default */.Z)(this.internalState);\n    const viewport = this.internalState.viewport || this.context.viewport;\n    return (0,project_functions/* projectPosition */.D)(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem,\n      ...params\n    });\n  }\n\n  get isComposite() {\n    return false;\n  }\n\n  setState(partialState) {\n    this.setChangeFlags({\n      stateChanged: true\n    });\n    Object.assign(this.state, partialState);\n    this.setNeedsRedraw();\n  }\n\n  setNeedsRedraw() {\n    if (this.internalState) {\n      this.internalState.needsRedraw = true;\n    }\n  }\n\n  setNeedsUpdate() {\n    if (this.internalState) {\n      this.context.layerManager.setNeedsUpdate(String(this));\n      this.internalState.needsUpdate = true;\n    }\n  }\n\n  get isLoaded() {\n    return this.internalState ? !this.internalState.isAsyncPropLoading() : false;\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  getModels() {\n    return this.state && (this.state.models || this.state.model && [this.state.model]) || [];\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  use64bitPositions() {\n    const {\n      coordinateSystem\n    } = this.props;\n    return coordinateSystem === constants/* COORDINATE_SYSTEM.DEFAULT */.Df.DEFAULT || coordinateSystem === constants/* COORDINATE_SYSTEM.LNGLAT */.Df.LNGLAT || coordinateSystem === constants/* COORDINATE_SYSTEM.CARTESIAN */.Df.CARTESIAN;\n  }\n\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent) || false;\n    }\n\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent) || false;\n    }\n\n    return false;\n  }\n\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  encodePickingColor(i, target = []) {\n    target[0] = i + 1 & 255;\n    target[1] = i + 1 >> 8 & 255;\n    target[2] = i + 1 >> 8 >> 8 & 255;\n    return target;\n  }\n\n  decodePickingColor(color) {\n    (0,assert/* default */.Z)(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  getNumInstances() {\n    if (Number.isFinite(this.props.numInstances)) {\n      return this.props.numInstances;\n    }\n\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    return (0,count/* count */.Q)(this.props.data);\n  }\n\n  getStartIndices() {\n    if (this.props.startIndices) {\n      return this.props.startIndices;\n    }\n\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  getBounds() {\n    var _this$getAttributeMan;\n\n    return (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 ? void 0 : _this$getAttributeMan.getBounds(['positions', 'instancePositions']);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = (0,shader/* mergeShaders */.l)(shaders, extension.getShaders.call(this, extension));\n    }\n\n    return shaders;\n  }\n\n  shouldUpdateState(params) {\n    return params.changeFlags.propsOrDataChanged;\n  }\n\n  updateState(params) {\n    const attributeManager = this.getAttributeManager();\n    const {\n      dataChanged\n    } = params.changeFlags;\n\n    if (dataChanged && attributeManager) {\n      if (Array.isArray(dataChanged)) {\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (attributeManager) {\n      const {\n        props\n      } = params;\n      const hasPickingBuffer = this.internalState.hasPickingBuffer;\n      const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable || props.extensions.some(extension => extension.getNeedsPickingBuffer.call(this, extension));\n\n      if (hasPickingBuffer !== needsPickingBuffer) {\n        this.internalState.hasPickingBuffer = needsPickingBuffer;\n        const {\n          pickingColors,\n          instancePickingColors\n        } = attributeManager.attributes;\n        const pickingColorsAttribute = pickingColors || instancePickingColors;\n\n        if (pickingColorsAttribute) {\n          if (needsPickingBuffer && pickingColorsAttribute.constant) {\n            pickingColorsAttribute.constant = false;\n            attributeManager.invalidate(pickingColorsAttribute.id);\n          }\n\n          if (!pickingColorsAttribute.value && !needsPickingBuffer) {\n            pickingColorsAttribute.constant = true;\n            pickingColorsAttribute.value = [0, 0, 0];\n          }\n        }\n      }\n    }\n  }\n\n  finalizeState(context) {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n\n    if (this.context) {\n      this.context.resourceManager.unsubscribe({\n        consumerId: this.id\n      });\n    }\n\n    if (this.internalState) {\n      this.internalState.uniformTransitions.clear();\n      this.internalState.finalize();\n    }\n  }\n\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  getPickingInfo({\n    info,\n    mode,\n    sourceLayer\n  }) {\n    const {\n      index\n    } = info;\n\n    if (index >= 0) {\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  raiseError(error, message) {\n    var _this$props$onError, _this$props;\n\n    if (message) {\n      error.message = \"\".concat(message, \": \").concat(error.message);\n    }\n\n    if (!((_this$props$onError = (_this$props = this.props).onError) !== null && _this$props$onError !== void 0 && _this$props$onError.call(_this$props, error))) {\n      var _this$context, _this$context$onError;\n\n      (_this$context = this.context) === null || _this$context === void 0 ? void 0 : (_this$context$onError = _this$context.onError) === null || _this$context$onError === void 0 ? void 0 : _this$context$onError.call(_this$context, error, this);\n    }\n  }\n\n  getNeedsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  needsUpdate() {\n    if (!this.internalState) {\n      return false;\n    }\n\n    return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());\n  }\n\n  hasUniformTransition() {\n    var _this$internalState;\n\n    return ((_this$internalState = this.internalState) === null || _this$internalState === void 0 ? void 0 : _this$internalState.uniformTransitions.active) || false;\n  }\n\n  activateViewport(viewport) {\n    if (!this.internalState) {\n      return;\n    }\n\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({\n      oldViewport,\n      viewport\n    })) {\n      this.setChangeFlags({\n        viewportChanged: true\n      });\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  invalidateAttribute(name = 'all') {\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  _updateAttributes() {\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager) {\n      return;\n    }\n\n    const props = this.props;\n    const numInstances = this.getNumInstances();\n    const startIndices = this.getStartIndices();\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this\n    });\n    const changedAttributes = attributeManager.getChangedAttributes({\n      clearChangedFlags: true\n    });\n    this.updateAttributes(changedAttributes);\n  }\n\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  _updateUniformTransition() {\n    const {\n      uniformTransitions\n    } = this.internalState;\n\n    if (uniformTransitions.active) {\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {\n          value: propsInTransition[key]\n        });\n      }\n\n      return props;\n    }\n\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {\n    numInstances\n  }) {\n    if (attribute.constant) {\n      return;\n    }\n\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log/* default.warn */.Z.warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();\n      }\n\n      pickingColorCache = typed_array_manager/* default.allocate */.Z.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);\n    model.setAttributes(shaderAttributes);\n  }\n\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {\n      pickingColors,\n      instancePickingColors\n    } = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    if (!colors) {\n      return;\n    }\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start\n    });\n  }\n\n  restorePickingColors() {\n    const {\n      pickingColors,\n      instancePickingColors\n    } = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    if (!colors) {\n      return;\n    }\n\n    if (this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n\n    colors.updateSubBuffer({\n      startOffset: 0\n    });\n  }\n\n  _initialize() {\n    (0,assert/* default */.Z)(!this.internalState);\n    (0,assert/* default */.Z)(Number.isFinite(this.props.coordinateSystem));\n    (0,debug/* default */.Z)(TRACE_INITIALIZE, this);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: 5121,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this._clearChangeFlags();\n\n    this.state = {};\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log/* default.deprecated */.Z.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()')();\n        return attributeManager;\n      }\n    });\n    this.internalState.uniformTransitions = new uniform_transition_manager/* default */.Z(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n    this.internalState.setAsyncProps(this.props);\n    this.initializeState(this.context);\n\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n\n    this.setChangeFlags({\n      dataChanged: 'init',\n      propsChanged: 'init',\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._update();\n  }\n\n  _transferState(oldLayer) {\n    (0,debug/* default */.Z)(TRACE_MATCHED, this, this === oldLayer);\n    const {\n      state,\n      internalState\n    } = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    this.internalState = internalState;\n    this.state = state;\n    this.internalState.setAsyncProps(this.props);\n\n    this._diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _update() {\n    const stateNeedsUpdate = this.needsUpdate();\n    (0,debug/* default */.Z)(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (!stateNeedsUpdate) {\n      return;\n    }\n\n    const currentProps = this.props;\n    const context = this.context;\n    const internalState = this.internalState;\n    const currentViewport = context.viewport;\n\n    const propsInTransition = this._updateUniformTransition();\n\n    internalState.propsInTransition = propsInTransition;\n    context.viewport = internalState.viewport || currentViewport;\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n\n      const oldModels = this.getModels();\n\n      if (context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {}\n      }\n\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n\n      this._postUpdate(updateParams, modelChanged);\n    } finally {\n      context.viewport = currentViewport;\n      this.props = currentProps;\n\n      this._clearChangeFlags();\n\n      internalState.needsUpdate = false;\n      internalState.resetOldProps();\n    }\n  }\n\n  _finalize() {\n    (0,debug/* default */.Z)(TRACE_FINALIZE, this);\n    this.finalizeState(this.context);\n\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, this.context, extension);\n    }\n  }\n\n  _drawLayer({\n    moduleParameters = null,\n    uniforms = {},\n    parameters = {}\n  }) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    const context = this.context;\n    this.props = this.internalState.propsInTransition || currentProps;\n    const opacity = this.props.opacity;\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      const {\n        getPolygonOffset\n      } = this.props;\n      const offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];\n      (0,esm/* setParameters */.dR)(context.gl, {\n        polygonOffset: offsets\n      });\n      (0,esm/* withParameters */.s8)(context.gl, parameters, () => {\n        const opts = {\n          moduleParameters,\n          uniforms,\n          parameters,\n          context\n        };\n\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n  }\n\n  getChangeFlags() {\n    var _this$internalState2;\n\n    return (_this$internalState2 = this.internalState) === null || _this$internalState2 === void 0 ? void 0 : _this$internalState2.changeFlags;\n  }\n\n  setChangeFlags(flags) {\n    if (!this.internalState) {\n      return;\n    }\n\n    const {\n      changeFlags\n    } = this.internalState;\n\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n\n        switch (key) {\n          case 'dataChanged':\n            const dataChangedReason = flags[key];\n            const prevDataChangedReason = changeFlags[key];\n\n            if (dataChangedReason && Array.isArray(prevDataChangedReason)) {\n              changeFlags.dataChanged = Array.isArray(dataChangedReason) ? prevDataChangedReason.concat(dataChangedReason) : dataChangedReason;\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n\n        }\n\n        if (flagChanged) {\n          (0,debug/* default */.Z)(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n\n    const propsOrDataChanged = Boolean(changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged);\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged = propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;\n  }\n\n  _clearChangeFlags() {\n    this.internalState.changeFlags = {\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  _diffProps(newProps, oldProps) {\n    const changeFlags = (0,props/* diffProps */.Yt)(newProps, oldProps);\n\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        var _newProps$transitions;\n\n        this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], (_newProps$transitions = newProps.transitions) === null || _newProps$transitions === void 0 ? void 0 : _newProps$transitions[key]);\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  validateProps() {\n    (0,props/* validateProps */.eQ)(this.props);\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {\n      highlightColor\n    } = this.props;\n\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n\n    this.setModuleParameters(pickingModuleParameters);\n    this.setNeedsRedraw();\n  }\n\n  _getAttributeManager() {\n    const context = this.context;\n    return new AttributeManager(context.gl, {\n      id: this.props.id,\n      stats: context.stats,\n      timeline: context.timeline\n    });\n  }\n\n  _postUpdate(updateParams, forceUpdate) {\n    const {\n      props,\n      oldProps\n    } = updateParams;\n    this.setNeedsRedraw();\n\n    this._updateAttributes();\n\n    const {\n      model\n    } = this.state;\n    model === null || model === void 0 ? void 0 : model.setInstanceCount(this.getNumInstances());\n    const {\n      autoHighlight,\n      highlightedObjectIndex,\n      highlightColor\n    } = props;\n\n    if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {\n      const parameters = {};\n\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      if (forceUpdate || highlightedObjectIndex !== oldProps.highlightedObjectIndex) {\n        parameters.pickingSelectedColor = Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  _getNeedsRedraw(opts) {\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || this.internalState.needsRedraw && this.id;\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager ? attributeManager.getNeedsRedraw(opts) : false;\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    if (redraw) {\n      for (const extension of this.props.extensions) {\n        extension.onNeedsRedraw.call(this, extension);\n      }\n    }\n\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n    return redraw;\n  }\n\n  _onAsyncPropUpdated() {\n    this._diffProps(this.props, this.internalState.getOldProps());\n\n    this.setNeedsUpdate();\n  }\n\n}\n\n(0,defineProperty/* default */.Z)(Layer, \"defaultProps\", defaultProps);\n\n(0,defineProperty/* default */.Z)(Layer, \"layerName\", 'Layer');\n//# sourceMappingURL=layer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52447\n")}}]);