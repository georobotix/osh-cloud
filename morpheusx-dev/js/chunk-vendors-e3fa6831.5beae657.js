(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[9859],{9365:function(module,exports){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! nouislider - 14.4.0 - 5/6/2020 */\n(function(factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function() {\n    "use strict";\n\n    var VERSION = "14.4.0";\n\n    //region Helper Methods\n\n    function isValidFormatter(entry) {\n        return typeof entry === "object" && typeof entry.to === "function" && typeof entry.from === "function";\n    }\n\n    function removeElement(el) {\n        el.parentElement.removeChild(el);\n    }\n\n    function isSet(value) {\n        return value !== null && value !== undefined;\n    }\n\n    // Bindable version\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n\n    // Removes duplicates from an array.\n    function unique(array) {\n        return array.filter(function(a) {\n            return !this[a] ? (this[a] = true) : false;\n        }, {});\n    }\n\n    // Round a value to the closest \'to\'.\n    function closest(value, to) {\n        return Math.round(value / to) * to;\n    }\n\n    // Current position of an element relative to the document.\n    function offset(elem, orientation) {\n        var rect = elem.getBoundingClientRect();\n        var doc = elem.ownerDocument;\n        var docElem = doc.documentElement;\n        var pageOffset = getPageOffset(doc);\n\n        // getBoundingClientRect contains left scroll in Chrome on Android.\n        // I haven\'t found a feature detection that proves this. Worst case\n        // scenario on mis-match: the \'tap\' feature on horizontal sliders breaks.\n        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\n            pageOffset.x = 0;\n        }\n\n        return orientation\n            ? rect.top + pageOffset.y - docElem.clientTop\n            : rect.left + pageOffset.x - docElem.clientLeft;\n    }\n\n    // Checks whether a value is numerical.\n    function isNumeric(a) {\n        return typeof a === "number" && !isNaN(a) && isFinite(a);\n    }\n\n    // Sets a class and removes it after [duration] ms.\n    function addClassFor(element, className, duration) {\n        if (duration > 0) {\n            addClass(element, className);\n            setTimeout(function() {\n                removeClass(element, className);\n            }, duration);\n        }\n    }\n\n    // Limits a value to 0 - 100\n    function limit(a) {\n        return Math.max(Math.min(a, 100), 0);\n    }\n\n    // Wraps a variable as an array, if it isn\'t one yet.\n    // Note that an input array is returned by reference!\n    function asArray(a) {\n        return Array.isArray(a) ? a : [a];\n    }\n\n    // Counts decimals\n    function countDecimals(numStr) {\n        numStr = String(numStr);\n        var pieces = numStr.split(".");\n        return pieces.length > 1 ? pieces[1].length : 0;\n    }\n\n    // http://youmightnotneedjquery.com/#add_class\n    function addClass(el, className) {\n        if (el.classList && !/\\s/.test(className)) {\n            el.classList.add(className);\n        } else {\n            el.className += " " + className;\n        }\n    }\n\n    // http://youmightnotneedjquery.com/#remove_class\n    function removeClass(el, className) {\n        if (el.classList && !/\\s/.test(className)) {\n            el.classList.remove(className);\n        } else {\n            el.className = el.className.replace(\n                new RegExp("(^|\\\\b)" + className.split(" ").join("|") + "(\\\\b|$)", "gi"),\n                " "\n            );\n        }\n    }\n\n    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/\n    function hasClass(el, className) {\n        return el.classList\n            ? el.classList.contains(className)\n            : new RegExp("\\\\b" + className + "\\\\b").test(el.className);\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes\n    function getPageOffset(doc) {\n        var supportPageOffset = window.pageXOffset !== undefined;\n        var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";\n        var x = supportPageOffset\n            ? window.pageXOffset\n            : isCSS1Compat\n                ? doc.documentElement.scrollLeft\n                : doc.body.scrollLeft;\n        var y = supportPageOffset\n            ? window.pageYOffset\n            : isCSS1Compat\n                ? doc.documentElement.scrollTop\n                : doc.body.scrollTop;\n\n        return {\n            x: x,\n            y: y\n        };\n    }\n\n    // we provide a function to compute constants instead\n    // of accessing window.* as soon as the module needs it\n    // so that we do not compute anything if not needed\n    function getActions() {\n        // Determine the events to bind. IE11 implements pointerEvents without\n        // a prefix, which breaks compatibility with the IE10 implementation.\n        return window.navigator.pointerEnabled\n            ? {\n                  start: "pointerdown",\n                  move: "pointermove",\n                  end: "pointerup"\n              }\n            : window.navigator.msPointerEnabled\n                ? {\n                      start: "MSPointerDown",\n                      move: "MSPointerMove",\n                      end: "MSPointerUp"\n                  }\n                : {\n                      start: "mousedown touchstart",\n                      move: "mousemove touchmove",\n                      end: "mouseup touchend"\n                  };\n    }\n\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // Issue #785\n    function getSupportsPassive() {\n        var supportsPassive = false;\n\n        /* eslint-disable */\n        try {\n            var opts = Object.defineProperty({}, "passive", {\n                get: function() {\n                    supportsPassive = true;\n                }\n            });\n\n            window.addEventListener("test", null, opts);\n        } catch (e) {}\n        /* eslint-enable */\n\n        return supportsPassive;\n    }\n\n    function getSupportsTouchActionNone() {\n        return window.CSS && CSS.supports && CSS.supports("touch-action", "none");\n    }\n\n    //endregion\n\n    //region Range Calculation\n\n    // Determine the size of a sub-range in relation to a full range.\n    function subRangeRatio(pa, pb) {\n        return 100 / (pb - pa);\n    }\n\n    // (percentage) How many percent is this value of this range?\n    function fromPercentage(range, value) {\n        return (value * 100) / (range[1] - range[0]);\n    }\n\n    // (percentage) Where is this value on this range?\n    function toPercentage(range, value) {\n        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]);\n    }\n\n    // (value) How much is this percentage on this range?\n    function isPercentage(range, value) {\n        return (value * (range[1] - range[0])) / 100 + range[0];\n    }\n\n    function getJ(value, arr) {\n        var j = 1;\n\n        while (value >= arr[j]) {\n            j += 1;\n        }\n\n        return j;\n    }\n\n    // (percentage) Input a value, find where, on a scale of 0-100, it applies.\n    function toStepping(xVal, xPct, value) {\n        if (value >= xVal.slice(-1)[0]) {\n            return 100;\n        }\n\n        var j = getJ(value, xVal);\n        var va = xVal[j - 1];\n        var vb = xVal[j];\n        var pa = xPct[j - 1];\n        var pb = xPct[j];\n\n        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);\n    }\n\n    // (value) Input a percentage, find where it is on the specified range.\n    function fromStepping(xVal, xPct, value) {\n        // There is no range group that fits 100\n        if (value >= 100) {\n            return xVal.slice(-1)[0];\n        }\n\n        var j = getJ(value, xPct);\n        var va = xVal[j - 1];\n        var vb = xVal[j];\n        var pa = xPct[j - 1];\n        var pb = xPct[j];\n\n        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\n    }\n\n    // (percentage) Get the step that applies at a certain value.\n    function getStep(xPct, xSteps, snap, value) {\n        if (value === 100) {\n            return value;\n        }\n\n        var j = getJ(value, xPct);\n        var a = xPct[j - 1];\n        var b = xPct[j];\n\n        // If \'snap\' is set, steps are used as fixed points on the slider.\n        if (snap) {\n            // Find the closest position, a or b.\n            if (value - a > (b - a) / 2) {\n                return b;\n            }\n\n            return a;\n        }\n\n        if (!xSteps[j - 1]) {\n            return value;\n        }\n\n        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);\n    }\n\n    function handleEntryPoint(index, value, that) {\n        var percentage;\n\n        // Wrap numerical input in an array.\n        if (typeof value === "number") {\n            value = [value];\n        }\n\n        // Reject any invalid input, by testing whether value is an array.\n        if (!Array.isArray(value)) {\n            throw new Error("noUiSlider (" + VERSION + "): \'range\' contains invalid value.");\n        }\n\n        // Covert min/max syntax to 0 and 100.\n        if (index === "min") {\n            percentage = 0;\n        } else if (index === "max") {\n            percentage = 100;\n        } else {\n            percentage = parseFloat(index);\n        }\n\n        // Check for correct input.\n        if (!isNumeric(percentage) || !isNumeric(value[0])) {\n            throw new Error("noUiSlider (" + VERSION + "): \'range\' value isn\'t numeric.");\n        }\n\n        // Store values.\n        that.xPct.push(percentage);\n        that.xVal.push(value[0]);\n\n        // NaN will evaluate to false too, but to keep\n        // logging clear, set step explicitly. Make sure\n        // not to override the \'step\' setting with false.\n        if (!percentage) {\n            if (!isNaN(value[1])) {\n                that.xSteps[0] = value[1];\n            }\n        } else {\n            that.xSteps.push(isNaN(value[1]) ? false : value[1]);\n        }\n\n        that.xHighestCompleteStep.push(0);\n    }\n\n    function handleStepPoint(i, n, that) {\n        // Ignore \'false\' stepping.\n        if (!n) {\n            return;\n        }\n\n        // Step over zero-length ranges (#948);\n        if (that.xVal[i] === that.xVal[i + 1]) {\n            that.xSteps[i] = that.xHighestCompleteStep[i] = that.xVal[i];\n\n            return;\n        }\n\n        // Factor to range ratio\n        that.xSteps[i] =\n            fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);\n\n        var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];\n        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);\n        var step = that.xVal[i] + that.xNumSteps[i] * highestStep;\n\n        that.xHighestCompleteStep[i] = step;\n    }\n\n    //endregion\n\n    //region Spectrum\n\n    function Spectrum(entry, snap, singleStep) {\n        this.xPct = [];\n        this.xVal = [];\n        this.xSteps = [singleStep || false];\n        this.xNumSteps = [false];\n        this.xHighestCompleteStep = [];\n\n        this.snap = snap;\n\n        var index;\n        var ordered = []; // [0, \'min\'], [1, \'50%\'], [2, \'max\']\n\n        // Map the object keys to an array.\n        for (index in entry) {\n            if (entry.hasOwnProperty(index)) {\n                ordered.push([entry[index], index]);\n            }\n        }\n\n        // Sort all entries by value (numeric sort).\n        if (ordered.length && typeof ordered[0][0] === "object") {\n            ordered.sort(function(a, b) {\n                return a[0][0] - b[0][0];\n            });\n        } else {\n            ordered.sort(function(a, b) {\n                return a[0] - b[0];\n            });\n        }\n\n        // Convert all entries to subranges.\n        for (index = 0; index < ordered.length; index++) {\n            handleEntryPoint(ordered[index][1], ordered[index][0], this);\n        }\n\n        // Store the actual step values.\n        // xSteps is sorted in the same order as xPct and xVal.\n        this.xNumSteps = this.xSteps.slice(0);\n\n        // Convert all numeric steps to the percentage of the subrange they represent.\n        for (index = 0; index < this.xNumSteps.length; index++) {\n            handleStepPoint(index, this.xNumSteps[index], this);\n        }\n    }\n\n    Spectrum.prototype.getMargin = function(value) {\n        var step = this.xNumSteps[0];\n\n        if (step && (value / step) % 1 !== 0) {\n            throw new Error("noUiSlider (" + VERSION + "): \'limit\', \'margin\' and \'padding\' must be divisible by step.");\n        }\n\n        return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;\n    };\n\n    Spectrum.prototype.toStepping = function(value) {\n        value = toStepping(this.xVal, this.xPct, value);\n\n        return value;\n    };\n\n    Spectrum.prototype.fromStepping = function(value) {\n        return fromStepping(this.xVal, this.xPct, value);\n    };\n\n    Spectrum.prototype.getStep = function(value) {\n        value = getStep(this.xPct, this.xSteps, this.snap, value);\n\n        return value;\n    };\n\n    Spectrum.prototype.getDefaultStep = function(value, isDown, size) {\n        var j = getJ(value, this.xPct);\n\n        // When at the top or stepping down, look at the previous sub-range\n        if (value === 100 || (isDown && value === this.xPct[j - 1])) {\n            j = Math.max(j - 1, 1);\n        }\n\n        return (this.xVal[j] - this.xVal[j - 1]) / size;\n    };\n\n    Spectrum.prototype.getNearbySteps = function(value) {\n        var j = getJ(value, this.xPct);\n\n        return {\n            stepBefore: {\n                startValue: this.xVal[j - 2],\n                step: this.xNumSteps[j - 2],\n                highestStep: this.xHighestCompleteStep[j - 2]\n            },\n            thisStep: {\n                startValue: this.xVal[j - 1],\n                step: this.xNumSteps[j - 1],\n                highestStep: this.xHighestCompleteStep[j - 1]\n            },\n            stepAfter: {\n                startValue: this.xVal[j],\n                step: this.xNumSteps[j],\n                highestStep: this.xHighestCompleteStep[j]\n            }\n        };\n    };\n\n    Spectrum.prototype.countStepDecimals = function() {\n        var stepDecimals = this.xNumSteps.map(countDecimals);\n        return Math.max.apply(null, stepDecimals);\n    };\n\n    // Outside testing\n    Spectrum.prototype.convert = function(value) {\n        return this.getStep(this.toStepping(value));\n    };\n\n    //endregion\n\n    //region Options\n\n    /*\tEvery input option is tested and parsed. This\'ll prevent\n        endless validation in internal methods. These tests are\n        structured with an item for every option available. An\n        option can be marked as required by setting the \'r\' flag.\n        The testing function is provided with three arguments:\n            - The provided value for the option;\n            - A reference to the options object;\n            - The name for the option;\n\n        The testing function returns false when an error is detected,\n        or true when everything is OK. It can also modify the option\n        object, to make sure all values can be correctly looped elsewhere. */\n\n    //region Defaults\n\n    var defaultFormatter = {\n        to: function(value) {\n            return value !== undefined && value.toFixed(2);\n        },\n        from: Number\n    };\n\n    var cssClasses = {\n        target: "target",\n        base: "base",\n        origin: "origin",\n        handle: "handle",\n        handleLower: "handle-lower",\n        handleUpper: "handle-upper",\n        touchArea: "touch-area",\n        horizontal: "horizontal",\n        vertical: "vertical",\n        background: "background",\n        connect: "connect",\n        connects: "connects",\n        ltr: "ltr",\n        rtl: "rtl",\n        textDirectionLtr: "txt-dir-ltr",\n        textDirectionRtl: "txt-dir-rtl",\n        draggable: "draggable",\n        drag: "state-drag",\n        tap: "state-tap",\n        active: "active",\n        tooltip: "tooltip",\n        pips: "pips",\n        pipsHorizontal: "pips-horizontal",\n        pipsVertical: "pips-vertical",\n        marker: "marker",\n        markerHorizontal: "marker-horizontal",\n        markerVertical: "marker-vertical",\n        markerNormal: "marker-normal",\n        markerLarge: "marker-large",\n        markerSub: "marker-sub",\n        value: "value",\n        valueHorizontal: "value-horizontal",\n        valueVertical: "value-vertical",\n        valueNormal: "value-normal",\n        valueLarge: "value-large",\n        valueSub: "value-sub"\n    };\n\n    //endregion\n\n    function validateFormat(entry) {\n        // Any object with a to and from method is supported.\n        if (isValidFormatter(entry)) {\n            return true;\n        }\n\n        throw new Error("noUiSlider (" + VERSION + "): \'format\' requires \'to\' and \'from\' methods.");\n    }\n\n    function testStep(parsed, entry) {\n        if (!isNumeric(entry)) {\n            throw new Error("noUiSlider (" + VERSION + "): \'step\' is not numeric.");\n        }\n\n        // The step option can still be used to set stepping\n        // for linear sliders. Overwritten if set in \'range\'.\n        parsed.singleStep = entry;\n    }\n\n    function testRange(parsed, entry) {\n        // Filter incorrect input.\n        if (typeof entry !== "object" || Array.isArray(entry)) {\n            throw new Error("noUiSlider (" + VERSION + "): \'range\' is not an object.");\n        }\n\n        // Catch missing start or end.\n        if (entry.min === undefined || entry.max === undefined) {\n            throw new Error("noUiSlider (" + VERSION + "): Missing \'min\' or \'max\' in \'range\'.");\n        }\n\n        // Catch equal start or end.\n        if (entry.min === entry.max) {\n            throw new Error("noUiSlider (" + VERSION + "): \'range\' \'min\' and \'max\' cannot be equal.");\n        }\n\n        parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);\n    }\n\n    function testStart(parsed, entry) {\n        entry = asArray(entry);\n\n        // Validate input. Values aren\'t tested, as the public .val method\n        // will always provide a valid location.\n        if (!Array.isArray(entry) || !entry.length) {\n            throw new Error("noUiSlider (" + VERSION + "): \'start\' option is incorrect.");\n        }\n\n        // Store the number of handles.\n        parsed.handles = entry.length;\n\n        // When the slider is initialized, the .val method will\n        // be called with the start options.\n        parsed.start = entry;\n    }\n\n    function testSnap(parsed, entry) {\n        // Enforce 100% stepping within subranges.\n        parsed.snap = entry;\n\n        if (typeof entry !== "boolean") {\n            throw new Error("noUiSlider (" + VERSION + "): \'snap\' option must be a boolean.");\n        }\n    }\n\n    function testAnimate(parsed, entry) {\n        // Enforce 100% stepping within subranges.\n        parsed.animate = entry;\n\n        if (typeof entry !== "boolean") {\n            throw new Error("noUiSlider (" + VERSION + "): \'animate\' option must be a boolean.");\n        }\n    }\n\n    function testAnimationDuration(parsed, entry) {\n        parsed.animationDuration = entry;\n\n        if (typeof entry !== "number") {\n            throw new Error("noUiSlider (" + VERSION + "): \'animationDuration\' option must be a number.");\n        }\n    }\n\n    function testConnect(parsed, entry) {\n        var connect = [false];\n        var i;\n\n        // Map legacy options\n        if (entry === "lower") {\n            entry = [true, false];\n        } else if (entry === "upper") {\n            entry = [false, true];\n        }\n\n        // Handle boolean options\n        if (entry === true || entry === false) {\n            for (i = 1; i < parsed.handles; i++) {\n                connect.push(entry);\n            }\n\n            connect.push(false);\n        }\n\n        // Reject invalid input\n        else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {\n            throw new Error("noUiSlider (" + VERSION + "): \'connect\' option doesn\'t match handle count.");\n        } else {\n            connect = entry;\n        }\n\n        parsed.connect = connect;\n    }\n\n    function testOrientation(parsed, entry) {\n        // Set orientation to an a numerical value for easy\n        // array selection.\n        switch (entry) {\n            case "horizontal":\n                parsed.ort = 0;\n                break;\n            case "vertical":\n                parsed.ort = 1;\n                break;\n            default:\n                throw new Error("noUiSlider (" + VERSION + "): \'orientation\' option is invalid.");\n        }\n    }\n\n    function testMargin(parsed, entry) {\n        if (!isNumeric(entry)) {\n            throw new Error("noUiSlider (" + VERSION + "): \'margin\' option must be numeric.");\n        }\n\n        // Issue #582\n        if (entry === 0) {\n            return;\n        }\n\n        parsed.margin = parsed.spectrum.getMargin(entry);\n\n        if (!parsed.margin) {\n            throw new Error("noUiSlider (" + VERSION + "): \'margin\' option is only supported on linear sliders.");\n        }\n    }\n\n    function testLimit(parsed, entry) {\n        if (!isNumeric(entry)) {\n            throw new Error("noUiSlider (" + VERSION + "): \'limit\' option must be numeric.");\n        }\n\n        parsed.limit = parsed.spectrum.getMargin(entry);\n\n        if (!parsed.limit || parsed.handles < 2) {\n            throw new Error(\n                "noUiSlider (" +\n                    VERSION +\n                    "): \'limit\' option is only supported on linear sliders with 2 or more handles."\n            );\n        }\n    }\n\n    function testPadding(parsed, entry) {\n        if (!isNumeric(entry) && !Array.isArray(entry)) {\n            throw new Error(\n                "noUiSlider (" + VERSION + "): \'padding\' option must be numeric or array of exactly 2 numbers."\n            );\n        }\n\n        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {\n            throw new Error(\n                "noUiSlider (" + VERSION + "): \'padding\' option must be numeric or array of exactly 2 numbers."\n            );\n        }\n\n        if (entry === 0) {\n            return;\n        }\n\n        if (!Array.isArray(entry)) {\n            entry = [entry, entry];\n        }\n\n        // \'getMargin\' returns false for invalid values.\n        parsed.padding = [parsed.spectrum.getMargin(entry[0]), parsed.spectrum.getMargin(entry[1])];\n\n        if (parsed.padding[0] === false || parsed.padding[1] === false) {\n            throw new Error("noUiSlider (" + VERSION + "): \'padding\' option is only supported on linear sliders.");\n        }\n\n        if (parsed.padding[0] < 0 || parsed.padding[1] < 0) {\n            throw new Error("noUiSlider (" + VERSION + "): \'padding\' option must be a positive number(s).");\n        }\n\n        if (parsed.padding[0] + parsed.padding[1] > 100) {\n            throw new Error("noUiSlider (" + VERSION + "): \'padding\' option must not exceed 100% of the range.");\n        }\n    }\n\n    function testDirection(parsed, entry) {\n        // Set direction as a numerical value for easy parsing.\n        // Invert connection for RTL sliders, so that the proper\n        // handles get the connect/background classes.\n        switch (entry) {\n            case "ltr":\n                parsed.dir = 0;\n                break;\n            case "rtl":\n                parsed.dir = 1;\n                break;\n            default:\n                throw new Error("noUiSlider (" + VERSION + "): \'direction\' option was not recognized.");\n        }\n    }\n\n    function testBehaviour(parsed, entry) {\n        // Make sure the input is a string.\n        if (typeof entry !== "string") {\n            throw new Error("noUiSlider (" + VERSION + "): \'behaviour\' must be a string containing options.");\n        }\n\n        // Check if the string contains any keywords.\n        // None are required.\n        var tap = entry.indexOf("tap") >= 0;\n        var drag = entry.indexOf("drag") >= 0;\n        var fixed = entry.indexOf("fixed") >= 0;\n        var snap = entry.indexOf("snap") >= 0;\n        var hover = entry.indexOf("hover") >= 0;\n        var unconstrained = entry.indexOf("unconstrained") >= 0;\n\n        if (fixed) {\n            if (parsed.handles !== 2) {\n                throw new Error("noUiSlider (" + VERSION + "): \'fixed\' behaviour must be used with 2 handles");\n            }\n\n            // Use margin to enforce fixed state\n            testMargin(parsed, parsed.start[1] - parsed.start[0]);\n        }\n\n        if (unconstrained && (parsed.margin || parsed.limit)) {\n            throw new Error(\n                "noUiSlider (" + VERSION + "): \'unconstrained\' behaviour cannot be used with margin or limit"\n            );\n        }\n\n        parsed.events = {\n            tap: tap || snap,\n            drag: drag,\n            fixed: fixed,\n            snap: snap,\n            hover: hover,\n            unconstrained: unconstrained\n        };\n    }\n\n    function testTooltips(parsed, entry) {\n        if (entry === false) {\n            return;\n        }\n\n        if (entry === true) {\n            parsed.tooltips = [];\n\n            for (var i = 0; i < parsed.handles; i++) {\n                parsed.tooltips.push(true);\n            }\n        } else {\n            parsed.tooltips = asArray(entry);\n\n            if (parsed.tooltips.length !== parsed.handles) {\n                throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");\n            }\n\n            parsed.tooltips.forEach(function(formatter) {\n                if (\n                    typeof formatter !== "boolean" &&\n                    (typeof formatter !== "object" || typeof formatter.to !== "function")\n                ) {\n                    throw new Error("noUiSlider (" + VERSION + "): \'tooltips\' must be passed a formatter or \'false\'.");\n                }\n            });\n        }\n    }\n\n    function testAriaFormat(parsed, entry) {\n        parsed.ariaFormat = entry;\n        validateFormat(entry);\n    }\n\n    function testFormat(parsed, entry) {\n        parsed.format = entry;\n        validateFormat(entry);\n    }\n\n    function testKeyboardSupport(parsed, entry) {\n        parsed.keyboardSupport = entry;\n\n        if (typeof entry !== "boolean") {\n            throw new Error("noUiSlider (" + VERSION + "): \'keyboardSupport\' option must be a boolean.");\n        }\n    }\n\n    function testDocumentElement(parsed, entry) {\n        // This is an advanced option. Passed values are used without validation.\n        parsed.documentElement = entry;\n    }\n\n    function testCssPrefix(parsed, entry) {\n        if (typeof entry !== "string" && entry !== false) {\n            throw new Error("noUiSlider (" + VERSION + "): \'cssPrefix\' must be a string or `false`.");\n        }\n\n        parsed.cssPrefix = entry;\n    }\n\n    function testCssClasses(parsed, entry) {\n        if (typeof entry !== "object") {\n            throw new Error("noUiSlider (" + VERSION + "): \'cssClasses\' must be an object.");\n        }\n\n        if (typeof parsed.cssPrefix === "string") {\n            parsed.cssClasses = {};\n\n            for (var key in entry) {\n                if (!entry.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];\n            }\n        } else {\n            parsed.cssClasses = entry;\n        }\n    }\n\n    // Test all developer settings and parse to assumption-safe values.\n    function testOptions(options) {\n        // To prove a fix for #537, freeze options here.\n        // If the object is modified, an error will be thrown.\n        // Object.freeze(options);\n\n        var parsed = {\n            margin: 0,\n            limit: 0,\n            padding: 0,\n            animate: true,\n            animationDuration: 300,\n            ariaFormat: defaultFormatter,\n            format: defaultFormatter\n        };\n\n        // Tests are executed in the order they are presented here.\n        var tests = {\n            step: { r: false, t: testStep },\n            start: { r: true, t: testStart },\n            connect: { r: true, t: testConnect },\n            direction: { r: true, t: testDirection },\n            snap: { r: false, t: testSnap },\n            animate: { r: false, t: testAnimate },\n            animationDuration: { r: false, t: testAnimationDuration },\n            range: { r: true, t: testRange },\n            orientation: { r: false, t: testOrientation },\n            margin: { r: false, t: testMargin },\n            limit: { r: false, t: testLimit },\n            padding: { r: false, t: testPadding },\n            behaviour: { r: true, t: testBehaviour },\n            ariaFormat: { r: false, t: testAriaFormat },\n            format: { r: false, t: testFormat },\n            tooltips: { r: false, t: testTooltips },\n            keyboardSupport: { r: true, t: testKeyboardSupport },\n            documentElement: { r: false, t: testDocumentElement },\n            cssPrefix: { r: true, t: testCssPrefix },\n            cssClasses: { r: true, t: testCssClasses }\n        };\n\n        var defaults = {\n            connect: false,\n            direction: "ltr",\n            behaviour: "tap",\n            orientation: "horizontal",\n            keyboardSupport: true,\n            cssPrefix: "noUi-",\n            cssClasses: cssClasses\n        };\n\n        // AriaFormat defaults to regular format, if any.\n        if (options.format && !options.ariaFormat) {\n            options.ariaFormat = options.format;\n        }\n\n        // Run all options through a testing mechanism to ensure correct\n        // input. It should be noted that options might get modified to\n        // be handled properly. E.g. wrapping integers in arrays.\n        Object.keys(tests).forEach(function(name) {\n            // If the option isn\'t set, but it is required, throw an error.\n            if (!isSet(options[name]) && defaults[name] === undefined) {\n                if (tests[name].r) {\n                    throw new Error("noUiSlider (" + VERSION + "): \'" + name + "\' is required.");\n                }\n\n                return true;\n            }\n\n            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);\n        });\n\n        // Forward pips options\n        parsed.pips = options.pips;\n\n        // All recent browsers accept unprefixed transform.\n        // We need -ms- for IE9 and -webkit- for older Android;\n        // Assume use of -webkit- if unprefixed and -ms- are not supported.\n        // https://caniuse.com/#feat=transforms2d\n        var d = document.createElement("div");\n        var msPrefix = d.style.msTransform !== undefined;\n        var noPrefix = d.style.transform !== undefined;\n\n        parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";\n\n        // Pips don\'t move, so we can place them using left/top.\n        var styles = [["left", "top"], ["right", "bottom"]];\n\n        parsed.style = styles[parsed.dir][parsed.ort];\n\n        return parsed;\n    }\n\n    //endregion\n\n    function scope(target, options, originalOptions) {\n        var actions = getActions();\n        var supportsTouchActionNone = getSupportsTouchActionNone();\n        var supportsPassive = supportsTouchActionNone && getSupportsPassive();\n\n        // All variables local to \'scope\' are prefixed with \'scope_\'\n\n        // Slider DOM Nodes\n        var scope_Target = target;\n        var scope_Base;\n        var scope_Handles;\n        var scope_Connects;\n        var scope_Pips;\n        var scope_Tooltips;\n\n        // Slider state values\n        var scope_Spectrum = options.spectrum;\n        var scope_Values = [];\n        var scope_Locations = [];\n        var scope_HandleNumbers = [];\n        var scope_ActiveHandlesCount = 0;\n        var scope_Events = {};\n\n        // Exposed API\n        var scope_Self;\n\n        // Document Nodes\n        var scope_Document = target.ownerDocument;\n        var scope_DocumentElement = options.documentElement || scope_Document.documentElement;\n        var scope_Body = scope_Document.body;\n\n        // Pips constants\n        var PIPS_NONE = -1;\n        var PIPS_NO_VALUE = 0;\n        var PIPS_LARGE_VALUE = 1;\n        var PIPS_SMALL_VALUE = 2;\n\n        // For horizontal sliders in standard ltr documents,\n        // make .noUi-origin overflow to the left so the document doesn\'t scroll.\n        var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;\n\n        // Creates a node, adds it to target, returns the new node.\n        function addNodeTo(addTarget, className) {\n            var div = scope_Document.createElement("div");\n\n            if (className) {\n                addClass(div, className);\n            }\n\n            addTarget.appendChild(div);\n\n            return div;\n        }\n\n        // Append a origin to the base\n        function addOrigin(base, handleNumber) {\n            var origin = addNodeTo(base, options.cssClasses.origin);\n            var handle = addNodeTo(origin, options.cssClasses.handle);\n\n            addNodeTo(handle, options.cssClasses.touchArea);\n\n            handle.setAttribute("data-handle", handleNumber);\n\n            if (options.keyboardSupport) {\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n                // 0 = focusable and reachable\n                handle.setAttribute("tabindex", "0");\n                handle.addEventListener("keydown", function(event) {\n                    return eventKeydown(event, handleNumber);\n                });\n            }\n\n            handle.setAttribute("role", "slider");\n            handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");\n\n            if (handleNumber === 0) {\n                addClass(handle, options.cssClasses.handleLower);\n            } else if (handleNumber === options.handles - 1) {\n                addClass(handle, options.cssClasses.handleUpper);\n            }\n\n            return origin;\n        }\n\n        // Insert nodes for connect elements\n        function addConnect(base, add) {\n            if (!add) {\n                return false;\n            }\n\n            return addNodeTo(base, options.cssClasses.connect);\n        }\n\n        // Add handles to the slider base.\n        function addElements(connectOptions, base) {\n            var connectBase = addNodeTo(base, options.cssClasses.connects);\n\n            scope_Handles = [];\n            scope_Connects = [];\n\n            scope_Connects.push(addConnect(connectBase, connectOptions[0]));\n\n            // [::::O====O====O====]\n            // connectOptions = [0, 1, 1, 1]\n\n            for (var i = 0; i < options.handles; i++) {\n                // Keep a list of all added handles.\n                scope_Handles.push(addOrigin(base, i));\n                scope_HandleNumbers[i] = i;\n                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));\n            }\n        }\n\n        // Initialize a single slider.\n        function addSlider(addTarget) {\n            // Apply classes and data to the target.\n            addClass(addTarget, options.cssClasses.target);\n\n            if (options.dir === 0) {\n                addClass(addTarget, options.cssClasses.ltr);\n            } else {\n                addClass(addTarget, options.cssClasses.rtl);\n            }\n\n            if (options.ort === 0) {\n                addClass(addTarget, options.cssClasses.horizontal);\n            } else {\n                addClass(addTarget, options.cssClasses.vertical);\n            }\n\n            var textDirection = getComputedStyle(addTarget).direction;\n\n            if (textDirection === "rtl") {\n                addClass(addTarget, options.cssClasses.textDirectionRtl);\n            } else {\n                addClass(addTarget, options.cssClasses.textDirectionLtr);\n            }\n\n            return addNodeTo(addTarget, options.cssClasses.base);\n        }\n\n        function addTooltip(handle, handleNumber) {\n            if (!options.tooltips[handleNumber]) {\n                return false;\n            }\n\n            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);\n        }\n\n        function isSliderDisabled() {\n            return scope_Target.hasAttribute("disabled");\n        }\n\n        // Disable the slider dragging if any handle is disabled\n        function isHandleDisabled(handleNumber) {\n            var handleOrigin = scope_Handles[handleNumber];\n            return handleOrigin.hasAttribute("disabled");\n        }\n\n        function removeTooltips() {\n            if (scope_Tooltips) {\n                removeEvent("update.tooltips");\n                scope_Tooltips.forEach(function(tooltip) {\n                    if (tooltip) {\n                        removeElement(tooltip);\n                    }\n                });\n                scope_Tooltips = null;\n            }\n        }\n\n        // The tooltips option is a shorthand for using the \'update\' event.\n        function tooltips() {\n            removeTooltips();\n\n            // Tooltips are added with options.tooltips in original order.\n            scope_Tooltips = scope_Handles.map(addTooltip);\n\n            bindEvent("update.tooltips", function(values, handleNumber, unencoded) {\n                if (!scope_Tooltips[handleNumber]) {\n                    return;\n                }\n\n                var formattedValue = values[handleNumber];\n\n                if (options.tooltips[handleNumber] !== true) {\n                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);\n                }\n\n                scope_Tooltips[handleNumber].innerHTML = formattedValue;\n            });\n        }\n\n        function aria() {\n            bindEvent("update", function(values, handleNumber, unencoded, tap, positions) {\n                // Update Aria Values for all handles, as a change in one changes min and max values for the next.\n                scope_HandleNumbers.forEach(function(index) {\n                    var handle = scope_Handles[index];\n\n                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);\n                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);\n\n                    var now = positions[index];\n\n                    // Formatted value for display\n                    var text = options.ariaFormat.to(unencoded[index]);\n\n                    // Map to slider range values\n                    min = scope_Spectrum.fromStepping(min).toFixed(1);\n                    max = scope_Spectrum.fromStepping(max).toFixed(1);\n                    now = scope_Spectrum.fromStepping(now).toFixed(1);\n\n                    handle.children[0].setAttribute("aria-valuemin", min);\n                    handle.children[0].setAttribute("aria-valuemax", max);\n                    handle.children[0].setAttribute("aria-valuenow", now);\n                    handle.children[0].setAttribute("aria-valuetext", text);\n                });\n            });\n        }\n\n        function getGroup(mode, values, stepped) {\n            // Use the range.\n            if (mode === "range" || mode === "steps") {\n                return scope_Spectrum.xVal;\n            }\n\n            if (mode === "count") {\n                if (values < 2) {\n                    throw new Error("noUiSlider (" + VERSION + "): \'values\' (>= 2) required for mode \'count\'.");\n                }\n\n                // Divide 0 - 100 in \'count\' parts.\n                var interval = values - 1;\n                var spread = 100 / interval;\n\n                values = [];\n\n                // List these parts and have them handled as \'positions\'.\n                while (interval--) {\n                    values[interval] = interval * spread;\n                }\n\n                values.push(100);\n\n                mode = "positions";\n            }\n\n            if (mode === "positions") {\n                // Map all percentages to on-range values.\n                return values.map(function(value) {\n                    return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\n                });\n            }\n\n            if (mode === "values") {\n                // If the value must be stepped, it needs to be converted to a percentage first.\n                if (stepped) {\n                    return values.map(function(value) {\n                        // Convert to percentage, apply step, return to value.\n                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\n                    });\n                }\n\n                // Otherwise, we can simply use the values.\n                return values;\n            }\n        }\n\n        function generateSpread(density, mode, group) {\n            function safeIncrement(value, increment) {\n                // Avoid floating point variance by dropping the smallest decimal places.\n                return (value + increment).toFixed(7) / 1;\n            }\n\n            var indexes = {};\n            var firstInRange = scope_Spectrum.xVal[0];\n            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];\n            var ignoreFirst = false;\n            var ignoreLast = false;\n            var prevPct = 0;\n\n            // Create a copy of the group, sort it and filter away all duplicates.\n            group = unique(\n                group.slice().sort(function(a, b) {\n                    return a - b;\n                })\n            );\n\n            // Make sure the range starts with the first element.\n            if (group[0] !== firstInRange) {\n                group.unshift(firstInRange);\n                ignoreFirst = true;\n            }\n\n            // Likewise for the last one.\n            if (group[group.length - 1] !== lastInRange) {\n                group.push(lastInRange);\n                ignoreLast = true;\n            }\n\n            group.forEach(function(current, index) {\n                // Get the current step and the lower + upper positions.\n                var step;\n                var i;\n                var q;\n                var low = current;\n                var high = group[index + 1];\n                var newPct;\n                var pctDifference;\n                var pctPos;\n                var type;\n                var steps;\n                var realSteps;\n                var stepSize;\n                var isSteps = mode === "steps";\n\n                // When using \'steps\' mode, use the provided steps.\n                // Otherwise, we\'ll step on to the next subrange.\n                if (isSteps) {\n                    step = scope_Spectrum.xNumSteps[index];\n                }\n\n                // Default to a \'full\' step.\n                if (!step) {\n                    step = high - low;\n                }\n\n                // Low can be 0, so test for false. If high is undefined,\n                // we are at the last subrange. Index 0 is already handled.\n                if (low === false || high === undefined) {\n                    return;\n                }\n\n                // Make sure step isn\'t 0, which would cause an infinite loop (#654)\n                step = Math.max(step, 0.0000001);\n\n                // Find all steps in the subrange.\n                for (i = low; i <= high; i = safeIncrement(i, step)) {\n                    // Get the percentage value for the current step,\n                    // calculate the size for the subrange.\n                    newPct = scope_Spectrum.toStepping(i);\n                    pctDifference = newPct - prevPct;\n\n                    steps = pctDifference / density;\n                    realSteps = Math.round(steps);\n\n                    // This ratio represents the amount of percentage-space a point indicates.\n                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.\n                    // Round the percentage offset to an even number, then divide by two\n                    // to spread the offset on both sides of the range.\n                    stepSize = pctDifference / realSteps;\n\n                    // Divide all points evenly, adding the correct number to this subrange.\n                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.\n                    for (q = 1; q <= realSteps; q += 1) {\n                        // The ratio between the rounded value and the actual size might be ~1% off.\n                        // Correct the percentage offset by the number of points\n                        // per subrange. density = 1 will result in 100 points on the\n                        // full range, 2 for 50, 4 for 25, etc.\n                        pctPos = prevPct + q * stepSize;\n                        indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];\n                    }\n\n                    // Determine the point type.\n                    type = group.indexOf(i) > -1 ? PIPS_LARGE_VALUE : isSteps ? PIPS_SMALL_VALUE : PIPS_NO_VALUE;\n\n                    // Enforce the \'ignoreFirst\' option by overwriting the type for 0.\n                    if (!index && ignoreFirst && i !== high) {\n                        type = 0;\n                    }\n\n                    if (!(i === high && ignoreLast)) {\n                        // Mark the \'type\' of this point. 0 = plain, 1 = real value, 2 = step value.\n                        indexes[newPct.toFixed(5)] = [i, type];\n                    }\n\n                    // Update the percentage count.\n                    prevPct = newPct;\n                }\n            });\n\n            return indexes;\n        }\n\n        function addMarking(spread, filterFunc, formatter) {\n            var element = scope_Document.createElement("div");\n\n            var valueSizeClasses = [];\n            valueSizeClasses[PIPS_NO_VALUE] = options.cssClasses.valueNormal;\n            valueSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.valueLarge;\n            valueSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.valueSub;\n\n            var markerSizeClasses = [];\n            markerSizeClasses[PIPS_NO_VALUE] = options.cssClasses.markerNormal;\n            markerSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.markerLarge;\n            markerSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.markerSub;\n\n            var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];\n            var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];\n\n            addClass(element, options.cssClasses.pips);\n            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);\n\n            function getClasses(type, source) {\n                var a = source === options.cssClasses.value;\n                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;\n                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;\n\n                return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];\n            }\n\n            function addSpread(offset, value, type) {\n                // Apply the filter function, if it is set.\n                type = filterFunc ? filterFunc(value, type) : type;\n\n                if (type === PIPS_NONE) {\n                    return;\n                }\n\n                // Add a marker for every point\n                var node = addNodeTo(element, false);\n                node.className = getClasses(type, options.cssClasses.marker);\n                node.style[options.style] = offset + "%";\n\n                // Values are only appended for points marked \'1\' or \'2\'.\n                if (type > PIPS_NO_VALUE) {\n                    node = addNodeTo(element, false);\n                    node.className = getClasses(type, options.cssClasses.value);\n                    node.setAttribute("data-value", value);\n                    node.style[options.style] = offset + "%";\n                    node.innerHTML = formatter.to(value);\n                }\n            }\n\n            // Append all points.\n            Object.keys(spread).forEach(function(offset) {\n                addSpread(offset, spread[offset][0], spread[offset][1]);\n            });\n\n            return element;\n        }\n\n        function removePips() {\n            if (scope_Pips) {\n                removeElement(scope_Pips);\n                scope_Pips = null;\n            }\n        }\n\n        function pips(grid) {\n            // Fix #669\n            removePips();\n\n            var mode = grid.mode;\n            var density = grid.density || 1;\n            var filter = grid.filter || false;\n            var values = grid.values || false;\n            var stepped = grid.stepped || false;\n            var group = getGroup(mode, values, stepped);\n            var spread = generateSpread(density, mode, group);\n            var format = grid.format || {\n                to: Math.round\n            };\n\n            scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));\n\n            return scope_Pips;\n        }\n\n        // Shorthand for base dimensions.\n        function baseSize() {\n            var rect = scope_Base.getBoundingClientRect();\n            var alt = "offset" + ["Width", "Height"][options.ort];\n            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];\n        }\n\n        // Handler for attaching events trough a proxy.\n        function attachEvent(events, element, callback, data) {\n            // This function can be used to \'filter\' events to the slider.\n            // element is a node, not a nodeList\n\n            var method = function(e) {\n                e = fixEvent(e, data.pageOffset, data.target || element);\n\n                // fixEvent returns false if this event has a different target\n                // when handling (multi-) touch events;\n                if (!e) {\n                    return false;\n                }\n\n                // doNotReject is passed by all end events to make sure released touches\n                // are not rejected, leaving the slider "stuck" to the cursor;\n                if (isSliderDisabled() && !data.doNotReject) {\n                    return false;\n                }\n\n                // Stop if an active \'tap\' transition is taking place.\n                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {\n                    return false;\n                }\n\n                // Ignore right or middle clicks on start #454\n                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\n                    return false;\n                }\n\n                // Ignore right or middle clicks on start #454\n                if (data.hover && e.buttons) {\n                    return false;\n                }\n\n                // \'supportsPassive\' is only true if a browser also supports touch-action: none in CSS.\n                // iOS safari does not, so it doesn\'t get to benefit from passive scrolling. iOS does support\n                // touch-action: manipulation, but that allows panning, which breaks\n                // sliders after zooming/on non-responsive pages.\n                // See: https://bugs.webkit.org/show_bug.cgi?id=133112\n                if (!supportsPassive) {\n                    e.preventDefault();\n                }\n\n                e.calcPoint = e.points[options.ort];\n\n                // Call the event handler with the event [ and additional data ].\n                callback(e, data);\n            };\n\n            var methods = [];\n\n            // Bind a closure on the target for every event type.\n            events.split(" ").forEach(function(eventName) {\n                element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);\n                methods.push([eventName, method]);\n            });\n\n            return methods;\n        }\n\n        // Provide a clean event with standardized offset values.\n        function fixEvent(e, pageOffset, eventTarget) {\n            // Filter the event to register the type, which can be\n            // touch, mouse or pointer. Offset changes need to be\n            // made on an event specific basis.\n            var touch = e.type.indexOf("touch") === 0;\n            var mouse = e.type.indexOf("mouse") === 0;\n            var pointer = e.type.indexOf("pointer") === 0;\n\n            var x;\n            var y;\n\n            // IE10 implemented pointer events with a prefix;\n            if (e.type.indexOf("MSPointer") === 0) {\n                pointer = true;\n            }\n\n            // The only thing one handle should be concerned about is the touches that originated on top of it.\n            if (touch) {\n                // Returns true if a touch originated on the target.\n                var isTouchOnTarget = function(checkTouch) {\n                    return (\n                        checkTouch.target === eventTarget ||\n                        eventTarget.contains(checkTouch.target) ||\n                        (checkTouch.target.shadowRoot && checkTouch.target.shadowRoot.contains(eventTarget))\n                    );\n                };\n\n                // In the case of touchstart events, we need to make sure there is still no more than one\n                // touch on the target so we look amongst all touches.\n                if (e.type === "touchstart") {\n                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);\n\n                    // Do not support more than one touch per handle.\n                    if (targetTouches.length > 1) {\n                        return false;\n                    }\n\n                    x = targetTouches[0].pageX;\n                    y = targetTouches[0].pageY;\n                } else {\n                    // In the other cases, find on changedTouches is enough.\n                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);\n\n                    // Cancel if the target touch has not moved.\n                    if (!targetTouch) {\n                        return false;\n                    }\n\n                    x = targetTouch.pageX;\n                    y = targetTouch.pageY;\n                }\n            }\n\n            pageOffset = pageOffset || getPageOffset(scope_Document);\n\n            if (mouse || pointer) {\n                x = e.clientX + pageOffset.x;\n                y = e.clientY + pageOffset.y;\n            }\n\n            e.pageOffset = pageOffset;\n            e.points = [x, y];\n            e.cursor = mouse || pointer; // Fix #435\n\n            return e;\n        }\n\n        // Translate a coordinate in the document to a percentage on the slider\n        function calcPointToPercentage(calcPoint) {\n            var location = calcPoint - offset(scope_Base, options.ort);\n            var proposal = (location * 100) / baseSize();\n\n            // Clamp proposal between 0% and 100%\n            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements\n            // are used (e.g. contained handles feature)\n            proposal = limit(proposal);\n\n            return options.dir ? 100 - proposal : proposal;\n        }\n\n        // Find handle closest to a certain percentage on the slider\n        function getClosestHandle(clickedPosition) {\n            var smallestDifference = 100;\n            var handleNumber = false;\n\n            scope_Handles.forEach(function(handle, index) {\n                // Disabled handles are ignored\n                if (isHandleDisabled(index)) {\n                    return;\n                }\n\n                var handlePosition = scope_Locations[index];\n                var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition);\n\n                // Initial state\n                var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100;\n\n                // Difference with this handle is smaller than the previously checked handle\n                var isCloser = differenceWithThisHandle < smallestDifference;\n                var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;\n\n                if (isCloser || isCloserAfter || clickAtEdge) {\n                    handleNumber = index;\n                    smallestDifference = differenceWithThisHandle;\n                }\n            });\n\n            return handleNumber;\n        }\n\n        // Fire \'end\' when a mouse or pen leaves the document.\n        function documentLeave(event, data) {\n            if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {\n                eventEnd(event, data);\n            }\n        }\n\n        // Handle movement on document for handle and range drag.\n        function eventMove(event, data) {\n            // Fix #498\n            // Check value of .buttons in \'start\' to work around a bug in IE10 mobile (data.buttonsProperty).\n            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero\n            // IE9 has .buttons and .which zero on mousemove.\n            // Firefox breaks the spec MDN defines.\n            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {\n                return eventEnd(event, data);\n            }\n\n            // Check if we are moving up or down\n            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);\n\n            // Convert the movement into a percentage of the slider width/height\n            var proposal = (movement * 100) / data.baseSize;\n\n            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);\n        }\n\n        // Unbind move events on document, call callbacks.\n        function eventEnd(event, data) {\n            // The handle is no longer active, so remove the class.\n            if (data.handle) {\n                removeClass(data.handle, options.cssClasses.active);\n                scope_ActiveHandlesCount -= 1;\n            }\n\n            // Unbind the move and end events, which are added on \'start\'.\n            data.listeners.forEach(function(c) {\n                scope_DocumentElement.removeEventListener(c[0], c[1]);\n            });\n\n            if (scope_ActiveHandlesCount === 0) {\n                // Remove dragging class.\n                removeClass(scope_Target, options.cssClasses.drag);\n                setZindex();\n\n                // Remove cursor styles and text-selection events bound to the body.\n                if (event.cursor) {\n                    scope_Body.style.cursor = "";\n                    scope_Body.removeEventListener("selectstart", preventDefault);\n                }\n            }\n\n            data.handleNumbers.forEach(function(handleNumber) {\n                fireEvent("change", handleNumber);\n                fireEvent("set", handleNumber);\n                fireEvent("end", handleNumber);\n            });\n        }\n\n        // Bind move events on document.\n        function eventStart(event, data) {\n            // Ignore event if any handle is disabled\n            if (data.handleNumbers.some(isHandleDisabled)) {\n                return false;\n            }\n\n            var handle;\n\n            if (data.handleNumbers.length === 1) {\n                var handleOrigin = scope_Handles[data.handleNumbers[0]];\n\n                handle = handleOrigin.children[0];\n                scope_ActiveHandlesCount += 1;\n\n                // Mark the handle as \'active\' so it can be styled.\n                addClass(handle, options.cssClasses.active);\n            }\n\n            // A drag should never propagate up to the \'tap\' event.\n            event.stopPropagation();\n\n            // Record the event listeners.\n            var listeners = [];\n\n            // Attach the move and end events.\n            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {\n                // The event target has changed so we need to propagate the original one so that we keep\n                // relying on it to extract target touches.\n                target: event.target,\n                handle: handle,\n                listeners: listeners,\n                startCalcPoint: event.calcPoint,\n                baseSize: baseSize(),\n                pageOffset: event.pageOffset,\n                handleNumbers: data.handleNumbers,\n                buttonsProperty: event.buttons,\n                locations: scope_Locations.slice()\n            });\n\n            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {\n                target: event.target,\n                handle: handle,\n                listeners: listeners,\n                doNotReject: true,\n                handleNumbers: data.handleNumbers\n            });\n\n            var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {\n                target: event.target,\n                handle: handle,\n                listeners: listeners,\n                doNotReject: true,\n                handleNumbers: data.handleNumbers\n            });\n\n            // We want to make sure we pushed the listeners in the listener list rather than creating\n            // a new one as it has already been passed to the event handlers.\n            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));\n\n            // Text selection isn\'t an issue on touch devices,\n            // so adding cursor styles can be skipped.\n            if (event.cursor) {\n                // Prevent the \'I\' cursor and extend the range-drag cursor.\n                scope_Body.style.cursor = getComputedStyle(event.target).cursor;\n\n                // Mark the target with a dragging state.\n                if (scope_Handles.length > 1) {\n                    addClass(scope_Target, options.cssClasses.drag);\n                }\n\n                // Prevent text selection when dragging the handles.\n                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,\n                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,\n                // meaning the only holdout is iOS Safari. This doesn\'t matter: text selection isn\'t triggered there.\n                // The \'cursor\' flag is false.\n                // See: http://caniuse.com/#search=selectstart\n                scope_Body.addEventListener("selectstart", preventDefault, false);\n            }\n\n            data.handleNumbers.forEach(function(handleNumber) {\n                fireEvent("start", handleNumber);\n            });\n        }\n\n        // Move closest handle to tapped location.\n        function eventTap(event) {\n            // The tap event shouldn\'t propagate up\n            event.stopPropagation();\n\n            var proposal = calcPointToPercentage(event.calcPoint);\n            var handleNumber = getClosestHandle(proposal);\n\n            // Tackle the case that all handles are \'disabled\'.\n            if (handleNumber === false) {\n                return false;\n            }\n\n            // Flag the slider as it is now in a transitional state.\n            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.\n            if (!options.events.snap) {\n                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n            }\n\n            setHandle(handleNumber, proposal, true, true);\n\n            setZindex();\n\n            fireEvent("slide", handleNumber, true);\n            fireEvent("update", handleNumber, true);\n            fireEvent("change", handleNumber, true);\n            fireEvent("set", handleNumber, true);\n\n            if (options.events.snap) {\n                eventStart(event, { handleNumbers: [handleNumber] });\n            }\n        }\n\n        // Fires a \'hover\' event for a hovered mouse/pen position.\n        function eventHover(event) {\n            var proposal = calcPointToPercentage(event.calcPoint);\n\n            var to = scope_Spectrum.getStep(proposal);\n            var value = scope_Spectrum.fromStepping(to);\n\n            Object.keys(scope_Events).forEach(function(targetEvent) {\n                if ("hover" === targetEvent.split(".")[0]) {\n                    scope_Events[targetEvent].forEach(function(callback) {\n                        callback.call(scope_Self, value);\n                    });\n                }\n            });\n        }\n\n        // Handles keydown on focused handles\n        // Don\'t move the document when pressing arrow keys on focused handles\n        function eventKeydown(event, handleNumber) {\n            if (isSliderDisabled() || isHandleDisabled(handleNumber)) {\n                return false;\n            }\n\n            var horizontalKeys = ["Left", "Right"];\n            var verticalKeys = ["Down", "Up"];\n            var largeStepKeys = ["PageDown", "PageUp"];\n            var edgeKeys = ["Home", "End"];\n\n            if (options.dir && !options.ort) {\n                // On an right-to-left slider, the left and right keys act inverted\n                horizontalKeys.reverse();\n            } else if (options.ort && !options.dir) {\n                // On a top-to-bottom slider, the up and down keys act inverted\n                verticalKeys.reverse();\n                largeStepKeys.reverse();\n            }\n\n            // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n            var key = event.key.replace("Arrow", "");\n\n            var isLargeDown = key === largeStepKeys[0];\n            var isLargeUp = key === largeStepKeys[1];\n            var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;\n            var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;\n            var isMin = key === edgeKeys[0];\n            var isMax = key === edgeKeys[1];\n\n            if (!isDown && !isUp && !isMin && !isMax) {\n                return true;\n            }\n\n            event.preventDefault();\n\n            var to;\n\n            if (isUp || isDown) {\n                var multiplier = 5;\n                var direction = isDown ? 0 : 1;\n                var steps = getNextStepsForHandle(handleNumber);\n                var step = steps[direction];\n\n                // At the edge of a slider, do nothing\n                if (step === null) {\n                    return false;\n                }\n\n                // No step set, use the default of 10% of the sub-range\n                if (step === false) {\n                    step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, 10);\n                }\n\n                if (isLargeUp || isLargeDown) {\n                    step *= multiplier;\n                }\n\n                // Step over zero-length ranges (#948);\n                step = Math.max(step, 0.0000001);\n\n                // Decrement for down steps\n                step = (isDown ? -1 : 1) * step;\n\n                to = scope_Values[handleNumber] + step;\n            } else if (isMax) {\n                // End key\n                to = options.spectrum.xVal[options.spectrum.xVal.length - 1];\n            } else {\n                // Home key\n                to = options.spectrum.xVal[0];\n            }\n\n            setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);\n\n            fireEvent("slide", handleNumber);\n            fireEvent("update", handleNumber);\n            fireEvent("change", handleNumber);\n            fireEvent("set", handleNumber);\n\n            return false;\n        }\n\n        // Attach events to several slider parts.\n        function bindSliderEvents(behaviour) {\n            // Attach the standard drag event to the handles.\n            if (!behaviour.fixed) {\n                scope_Handles.forEach(function(handle, index) {\n                    // These events are only bound to the visual handle\n                    // element, not the \'real\' origin element.\n                    attachEvent(actions.start, handle.children[0], eventStart, {\n                        handleNumbers: [index]\n                    });\n                });\n            }\n\n            // Attach the tap event to the slider base.\n            if (behaviour.tap) {\n                attachEvent(actions.start, scope_Base, eventTap, {});\n            }\n\n            // Fire hover events\n            if (behaviour.hover) {\n                attachEvent(actions.move, scope_Base, eventHover, {\n                    hover: true\n                });\n            }\n\n            // Make the range draggable.\n            if (behaviour.drag) {\n                scope_Connects.forEach(function(connect, index) {\n                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {\n                        return;\n                    }\n\n                    var handleBefore = scope_Handles[index - 1];\n                    var handleAfter = scope_Handles[index];\n                    var eventHolders = [connect];\n\n                    addClass(connect, options.cssClasses.draggable);\n\n                    // When the range is fixed, the entire range can\n                    // be dragged by the handles. The handle in the first\n                    // origin will propagate the start event upward,\n                    // but it needs to be bound manually on the other.\n                    if (behaviour.fixed) {\n                        eventHolders.push(handleBefore.children[0]);\n                        eventHolders.push(handleAfter.children[0]);\n                    }\n\n                    eventHolders.forEach(function(eventHolder) {\n                        attachEvent(actions.start, eventHolder, eventStart, {\n                            handles: [handleBefore, handleAfter],\n                            handleNumbers: [index - 1, index]\n                        });\n                    });\n                });\n            }\n        }\n\n        // Attach an event to this slider, possibly including a namespace\n        function bindEvent(namespacedEvent, callback) {\n            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\n            scope_Events[namespacedEvent].push(callback);\n\n            // If the event bound is \'update,\' fire it immediately for all handles.\n            if (namespacedEvent.split(".")[0] === "update") {\n                scope_Handles.forEach(function(a, index) {\n                    fireEvent("update", index);\n                });\n            }\n        }\n\n        // Undo attachment of event\n        function removeEvent(namespacedEvent) {\n            var event = namespacedEvent && namespacedEvent.split(".")[0];\n            var namespace = event && namespacedEvent.substring(event.length);\n\n            Object.keys(scope_Events).forEach(function(bind) {\n                var tEvent = bind.split(".")[0];\n                var tNamespace = bind.substring(tEvent.length);\n\n                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\n                    delete scope_Events[bind];\n                }\n            });\n        }\n\n        // External event handling\n        function fireEvent(eventName, handleNumber, tap) {\n            Object.keys(scope_Events).forEach(function(targetEvent) {\n                var eventType = targetEvent.split(".")[0];\n\n                if (eventName === eventType) {\n                    scope_Events[targetEvent].forEach(function(callback) {\n                        callback.call(\n                            // Use the slider public API as the scope (\'this\')\n                            scope_Self,\n                            // Return values as array, so arg_1[arg_2] is always valid.\n                            scope_Values.map(options.format.to),\n                            // Handle index, 0 or 1\n                            handleNumber,\n                            // Un-formatted slider values\n                            scope_Values.slice(),\n                            // Event is fired by tap, true or false\n                            tap || false,\n                            // Left offset of the handle, in relation to the slider\n                            scope_Locations.slice(),\n                            // add the slider public API to an accessible parameter when this is unavailable\n                            scope_Self\n                        );\n                    });\n                }\n            });\n        }\n\n        // Split out the handle positioning logic so the Move event can use it, too\n        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {\n            // For sliders with multiple handles, limit movement to the other handle.\n            // Apply the margin option by adding it to the handle positions.\n            if (scope_Handles.length > 1 && !options.events.unconstrained) {\n                if (lookBackward && handleNumber > 0) {\n                    to = Math.max(to, reference[handleNumber - 1] + options.margin);\n                }\n\n                if (lookForward && handleNumber < scope_Handles.length - 1) {\n                    to = Math.min(to, reference[handleNumber + 1] - options.margin);\n                }\n            }\n\n            // The limit option has the opposite effect, limiting handles to a\n            // maximum distance from another. Limit must be > 0, as otherwise\n            // handles would be unmovable.\n            if (scope_Handles.length > 1 && options.limit) {\n                if (lookBackward && handleNumber > 0) {\n                    to = Math.min(to, reference[handleNumber - 1] + options.limit);\n                }\n\n                if (lookForward && handleNumber < scope_Handles.length - 1) {\n                    to = Math.max(to, reference[handleNumber + 1] - options.limit);\n                }\n            }\n\n            // The padding option keeps the handles a certain distance from the\n            // edges of the slider. Padding must be > 0.\n            if (options.padding) {\n                if (handleNumber === 0) {\n                    to = Math.max(to, options.padding[0]);\n                }\n\n                if (handleNumber === scope_Handles.length - 1) {\n                    to = Math.min(to, 100 - options.padding[1]);\n                }\n            }\n\n            to = scope_Spectrum.getStep(to);\n\n            // Limit percentage to the 0 - 100 range\n            to = limit(to);\n\n            // Return false if handle can\'t move\n            if (to === reference[handleNumber] && !getValue) {\n                return false;\n            }\n\n            return to;\n        }\n\n        // Uses slider orientation to create CSS rules. a = base value;\n        function inRuleOrder(v, a) {\n            var o = options.ort;\n            return (o ? a : v) + ", " + (o ? v : a);\n        }\n\n        // Moves handle(s) by a percentage\n        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])\n        function moveHandles(upward, proposal, locations, handleNumbers) {\n            var proposals = locations.slice();\n\n            var b = [!upward, upward];\n            var f = [upward, !upward];\n\n            // Copy handleNumbers so we don\'t change the dataset\n            handleNumbers = handleNumbers.slice();\n\n            // Check to see which handle is \'leading\'.\n            // If that one can\'t move the second can\'t either.\n            if (upward) {\n                handleNumbers.reverse();\n            }\n\n            // Step 1: get the maximum percentage that any of the handles can move\n            if (handleNumbers.length > 1) {\n                handleNumbers.forEach(function(handleNumber, o) {\n                    var to = checkHandlePosition(\n                        proposals,\n                        handleNumber,\n                        proposals[handleNumber] + proposal,\n                        b[o],\n                        f[o],\n                        false\n                    );\n\n                    // Stop if one of the handles can\'t move.\n                    if (to === false) {\n                        proposal = 0;\n                    } else {\n                        proposal = to - proposals[handleNumber];\n                        proposals[handleNumber] = to;\n                    }\n                });\n            }\n\n            // If using one handle, check backward AND forward\n            else {\n                b = f = [true];\n            }\n\n            var state = false;\n\n            // Step 2: Try to set the handles with the found percentage\n            handleNumbers.forEach(function(handleNumber, o) {\n                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;\n            });\n\n            // Step 3: If a handle moved, fire events\n            if (state) {\n                handleNumbers.forEach(function(handleNumber) {\n                    fireEvent("update", handleNumber);\n                    fireEvent("slide", handleNumber);\n                });\n            }\n        }\n\n        // Takes a base value and an offset. This offset is used for the connect bar size.\n        // In the initial design for this feature, the origin element was 1% wide.\n        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature\n        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223\n        function transformDirection(a, b) {\n            return options.dir ? 100 - a - b : a;\n        }\n\n        // Updates scope_Locations and scope_Values, updates visual state\n        function updateHandlePosition(handleNumber, to) {\n            // Update locations.\n            scope_Locations[handleNumber] = to;\n\n            // Convert the value to the slider stepping/range.\n            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);\n\n            var translation = 10 * (transformDirection(to, 0) - scope_DirOffset);\n            var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";\n\n            scope_Handles[handleNumber].style[options.transformRule] = translateRule;\n\n            updateConnect(handleNumber);\n            updateConnect(handleNumber + 1);\n        }\n\n        // Handles before the slider middle are stacked later = higher,\n        // Handles after the middle later is lower\n        // [[7] [8] .......... | .......... [5] [4]\n        function setZindex() {\n            scope_HandleNumbers.forEach(function(handleNumber) {\n                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;\n                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);\n                scope_Handles[handleNumber].style.zIndex = zIndex;\n            });\n        }\n\n        // Test suggested values and apply margin, step.\n        function setHandle(handleNumber, to, lookBackward, lookForward) {\n            to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);\n\n            if (to === false) {\n                return false;\n            }\n\n            updateHandlePosition(handleNumber, to);\n\n            return true;\n        }\n\n        // Updates style attribute for connect nodes\n        function updateConnect(index) {\n            // Skip connects set to false\n            if (!scope_Connects[index]) {\n                return;\n            }\n\n            var l = 0;\n            var h = 100;\n\n            if (index !== 0) {\n                l = scope_Locations[index - 1];\n            }\n\n            if (index !== scope_Connects.length - 1) {\n                h = scope_Locations[index];\n            }\n\n            // We use two rules:\n            // \'translate\' to change the left/top offset;\n            // \'scale\' to change the width of the element;\n            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)\n            var connectWidth = h - l;\n            var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";\n            var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";\n\n            scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;\n        }\n\n        // Parses value passed to .set method. Returns current value if not parse-able.\n        function resolveToValue(to, handleNumber) {\n            // Setting with null indicates an \'ignore\'.\n            // Inputting \'false\' is invalid.\n            if (to === null || to === false || to === undefined) {\n                return scope_Locations[handleNumber];\n            }\n\n            // If a formatted number was passed, attempt to decode it.\n            if (typeof to === "number") {\n                to = String(to);\n            }\n\n            to = options.format.from(to);\n            to = scope_Spectrum.toStepping(to);\n\n            // If parsing the number failed, use the current value.\n            if (to === false || isNaN(to)) {\n                return scope_Locations[handleNumber];\n            }\n\n            return to;\n        }\n\n        // Set the slider value.\n        function valueSet(input, fireSetEvent) {\n            var values = asArray(input);\n            var isInit = scope_Locations[0] === undefined;\n\n            // Event fires by default\n            fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent;\n\n            // Animation is optional.\n            // Make sure the initial values were set before using animated placement.\n            if (options.animate && !isInit) {\n                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n            }\n\n            // First pass, without lookAhead but with lookBackward. Values are set from left to right.\n            scope_HandleNumbers.forEach(function(handleNumber) {\n                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);\n            });\n\n            var i = scope_HandleNumbers.length === 1 ? 0 : 1;\n\n            // Secondary passes. Now that all base values are set, apply constraints.\n            // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)\n            for (; i < scope_HandleNumbers.length; ++i) {\n                scope_HandleNumbers.forEach(function(handleNumber) {\n                    setHandle(handleNumber, scope_Locations[handleNumber], true, true);\n                });\n            }\n\n            setZindex();\n\n            scope_HandleNumbers.forEach(function(handleNumber) {\n                fireEvent("update", handleNumber);\n\n                // Fire the event only for handles that received a new value, as per #579\n                if (values[handleNumber] !== null && fireSetEvent) {\n                    fireEvent("set", handleNumber);\n                }\n            });\n        }\n\n        // Reset slider to initial values\n        function valueReset(fireSetEvent) {\n            valueSet(options.start, fireSetEvent);\n        }\n\n        // Set value for a single handle\n        function valueSetHandle(handleNumber, value, fireSetEvent) {\n            // Ensure numeric input\n            handleNumber = Number(handleNumber);\n\n            if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {\n                throw new Error("noUiSlider (" + VERSION + "): invalid handle number, got: " + handleNumber);\n            }\n\n            // Look both backward and forward, since we don\'t want this handle to "push" other handles (#960);\n            setHandle(handleNumber, resolveToValue(value, handleNumber), true, true);\n\n            fireEvent("update", handleNumber);\n\n            if (fireSetEvent) {\n                fireEvent("set", handleNumber);\n            }\n        }\n\n        // Get the slider value.\n        function valueGet() {\n            var values = scope_Values.map(options.format.to);\n\n            // If only one handle is used, return a single value.\n            if (values.length === 1) {\n                return values[0];\n            }\n\n            return values;\n        }\n\n        // Removes classes from the root and empties it.\n        function destroy() {\n            for (var key in options.cssClasses) {\n                if (!options.cssClasses.hasOwnProperty(key)) {\n                    continue;\n                }\n                removeClass(scope_Target, options.cssClasses[key]);\n            }\n\n            while (scope_Target.firstChild) {\n                scope_Target.removeChild(scope_Target.firstChild);\n            }\n\n            delete scope_Target.noUiSlider;\n        }\n\n        function getNextStepsForHandle(handleNumber) {\n            var location = scope_Locations[handleNumber];\n            var nearbySteps = scope_Spectrum.getNearbySteps(location);\n            var value = scope_Values[handleNumber];\n            var increment = nearbySteps.thisStep.step;\n            var decrement = null;\n\n            // If snapped, directly use defined step value\n            if (options.snap) {\n                return [\n                    value - nearbySteps.stepBefore.startValue || null,\n                    nearbySteps.stepAfter.startValue - value || null\n                ];\n            }\n\n            // If the next value in this step moves into the next step,\n            // the increment is the start of the next step - the current value\n            if (increment !== false) {\n                if (value + increment > nearbySteps.stepAfter.startValue) {\n                    increment = nearbySteps.stepAfter.startValue - value;\n                }\n            }\n\n            // If the value is beyond the starting point\n            if (value > nearbySteps.thisStep.startValue) {\n                decrement = nearbySteps.thisStep.step;\n            } else if (nearbySteps.stepBefore.step === false) {\n                decrement = false;\n            }\n\n            // If a handle is at the start of a step, it always steps back into the previous step first\n            else {\n                decrement = value - nearbySteps.stepBefore.highestStep;\n            }\n\n            // Now, if at the slider edges, there is no in/decrement\n            if (location === 100) {\n                increment = null;\n            } else if (location === 0) {\n                decrement = null;\n            }\n\n            // As per #391, the comparison for the decrement step can have some rounding issues.\n            var stepDecimals = scope_Spectrum.countStepDecimals();\n\n            // Round per #391\n            if (increment !== null && increment !== false) {\n                increment = Number(increment.toFixed(stepDecimals));\n            }\n\n            if (decrement !== null && decrement !== false) {\n                decrement = Number(decrement.toFixed(stepDecimals));\n            }\n\n            return [decrement, increment];\n        }\n\n        // Get the current step size for the slider.\n        function getNextSteps() {\n            return scope_HandleNumbers.map(getNextStepsForHandle);\n        }\n\n        // Updateable: margin, limit, padding, step, range, animate, snap\n        function updateOptions(optionsToUpdate, fireSetEvent) {\n            // Spectrum is created using the range, snap, direction and step options.\n            // \'snap\' and \'step\' can be updated.\n            // If \'snap\' and \'step\' are not passed, they should remain unchanged.\n            var v = valueGet();\n\n            var updateAble = [\n                "margin",\n                "limit",\n                "padding",\n                "range",\n                "animate",\n                "snap",\n                "step",\n                "format",\n                "pips",\n                "tooltips"\n            ];\n\n            // Only change options that we\'re actually passed to update.\n            updateAble.forEach(function(name) {\n                // Check for undefined. null removes the value.\n                if (optionsToUpdate[name] !== undefined) {\n                    originalOptions[name] = optionsToUpdate[name];\n                }\n            });\n\n            var newOptions = testOptions(originalOptions);\n\n            // Load new options into the slider state\n            updateAble.forEach(function(name) {\n                if (optionsToUpdate[name] !== undefined) {\n                    options[name] = newOptions[name];\n                }\n            });\n\n            scope_Spectrum = newOptions.spectrum;\n\n            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)\n            options.margin = newOptions.margin;\n            options.limit = newOptions.limit;\n            options.padding = newOptions.padding;\n\n            // Update pips, removes existing.\n            if (options.pips) {\n                pips(options.pips);\n            } else {\n                removePips();\n            }\n\n            // Update tooltips, removes existing.\n            if (options.tooltips) {\n                tooltips();\n            } else {\n                removeTooltips();\n            }\n\n            // Invalidate the current positioning so valueSet forces an update.\n            scope_Locations = [];\n            valueSet(optionsToUpdate.start || v, fireSetEvent);\n        }\n\n        // Initialization steps\n        function setupSlider() {\n            // Create the base element, initialize HTML and set classes.\n            // Add handles and connect elements.\n            scope_Base = addSlider(scope_Target);\n\n            addElements(options.connect, scope_Base);\n\n            // Attach user events.\n            bindSliderEvents(options.events);\n\n            // Use the public value method to set the start values.\n            valueSet(options.start);\n\n            if (options.pips) {\n                pips(options.pips);\n            }\n\n            if (options.tooltips) {\n                tooltips();\n            }\n\n            aria();\n        }\n\n        setupSlider();\n\n        // noinspection JSUnusedGlobalSymbols\n        scope_Self = {\n            destroy: destroy,\n            steps: getNextSteps,\n            on: bindEvent,\n            off: removeEvent,\n            get: valueGet,\n            set: valueSet,\n            setHandle: valueSetHandle,\n            reset: valueReset,\n            // Exposed for unit testing, don\'t use this in your application.\n            __moveHandles: function(a, b, c) {\n                moveHandles(a, b, scope_Locations, c);\n            },\n            options: originalOptions, // Issue #600, #678\n            updateOptions: updateOptions,\n            target: scope_Target, // Issue #597\n            removePips: removePips,\n            removeTooltips: removeTooltips,\n            getTooltips: function() {\n                return scope_Tooltips;\n            },\n            getOrigins: function() {\n                return scope_Handles;\n            },\n            pips: pips // Issue #594\n        };\n\n        return scope_Self;\n    }\n\n    // Run the standard initializer\n    function initialize(target, originalOptions) {\n        if (!target || !target.nodeName) {\n            throw new Error("noUiSlider (" + VERSION + "): create requires a single element, got: " + target);\n        }\n\n        // Throw an error if the slider was already initialized.\n        if (target.noUiSlider) {\n            throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");\n        }\n\n        // Test the options and create the slider environment;\n        var options = testOptions(originalOptions, target);\n        var api = scope(target, options, originalOptions);\n\n        target.noUiSlider = api;\n\n        return api;\n    }\n\n    // Use an object instead of a function for future expandability;\n    return {\n        // Exposed for unit testing, don\'t use this in your application.\n        __spectrum: Spectrum,\n        version: VERSION,\n        // A reference to the default classes, allows global changes.\n        // Use the cssClasses option for changes to one slider.\n        cssClasses: cssClasses,\n        create: initialize\n    };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9365\n')}}]);