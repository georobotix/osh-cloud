"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[6617],{1157:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Hint defining optimization support for a 3D tile\n *\n * @enum {Number}\n *\n * @private\n */\nvar Cesium3DTileOptimizationHint = {\n  NOT_COMPUTED: -1,\n  USE_OPTIMIZATION: 1,\n  SKIP_OPTIMIZATION: 0,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(Cesium3DTileOptimizationHint));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1Ny5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLDJDQUEyQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0Nlc2l1bTNEVGlsZU9wdGltaXphdGlvbkhpbnQuanM/NzAxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhpbnQgZGVmaW5pbmcgb3B0aW1pemF0aW9uIHN1cHBvcnQgZm9yIGEgM0QgdGlsZVxuICpcbiAqIEBlbnVtIHtOdW1iZXJ9XG4gKlxuICogQHByaXZhdGVcbiAqL1xudmFyIENlc2l1bTNEVGlsZU9wdGltaXphdGlvbkhpbnQgPSB7XG4gIE5PVF9DT01QVVRFRDogLTEsXG4gIFVTRV9PUFRJTUlaQVRJT046IDEsXG4gIFNLSVBfT1BUSU1JWkFUSU9OOiAwLFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoQ2VzaXVtM0RUaWxlT3B0aW1pemF0aW9uSGludCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1157\n')},97318:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1157);\n/* harmony import */ var _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17106);\n/* harmony import */ var _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43338);\n\n\n\n\n\n\n/**\n * Utility functions for computing optimization hints for a {@link Cesium3DTileset}.\n *\n * @namespace Cesium3DTileOptimizations\n *\n * @private\n */\nvar Cesium3DTileOptimizations = {};\n\nvar scratchAxis = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n/**\n * Evaluates support for the childrenWithinParent optimization. This is used to more tightly cull tilesets if\n * children bounds are fully contained within the parent. Currently, support for the optimization only works for\n * oriented bounding boxes, so both the child and parent tile must be either a {@link TileOrientedBoundingBox} or\n * {@link TileBoundingRegion}. The purpose of this check is to prevent use of a culling optimization when the child\n * bounds exceed those of the parent. If the child bounds are greater, it is more likely that the optimization will\n * waste CPU cycles. Bounding spheres are not supported for the reason that the child bounds can very often be\n * partially outside of the parent bounds.\n *\n * @param {Cesium3DTile} tile The tile to check.\n * @returns {Boolean} Whether the childrenWithinParent optimization is supported.\n */\nCesium3DTileOptimizations.checkChildrenWithinParent = function (tile) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("tile", tile);\n  //>>includeEnd(\'debug\');\n\n  var children = tile.children;\n  var length = children.length;\n\n  // Check if the parent has an oriented bounding box.\n  var boundingVolume = tile.boundingVolume;\n  if (\n    boundingVolume instanceof _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z ||\n    boundingVolume instanceof _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z\n  ) {\n    var orientedBoundingBox = boundingVolume._orientedBoundingBox;\n    tile._optimChildrenWithinParent =\n      _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].USE_OPTIMIZATION */ .Z.USE_OPTIMIZATION;\n    for (var i = 0; i < length; ++i) {\n      var child = children[i];\n\n      // Check if the child has an oriented bounding box.\n      var childBoundingVolume = child.boundingVolume;\n      if (\n        !(\n          childBoundingVolume instanceof _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z ||\n          childBoundingVolume instanceof _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z\n        )\n      ) {\n        // Do not support if the parent and child both do not have oriented bounding boxes.\n        tile._optimChildrenWithinParent =\n          _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SKIP_OPTIMIZATION */ .Z.SKIP_OPTIMIZATION;\n        break;\n      }\n\n      var childOrientedBoundingBox = childBoundingVolume._orientedBoundingBox;\n\n      // Compute the axis from the parent to the child.\n      var axis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n        childOrientedBoundingBox.center,\n        orientedBoundingBox.center,\n        scratchAxis\n      );\n      var axisLength = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].magnitude */ .Z.magnitude(axis);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].divideByScalar */ .Z.divideByScalar(axis, axisLength, axis);\n\n      // Project the bounding box of the parent onto the axis. Because the axis is a ray from the parent\n      // to the child, the projection parameterized along the ray will be (+/- proj1).\n      var proj1 =\n        Math.abs(orientedBoundingBox.halfAxes[0] * axis.x) +\n        Math.abs(orientedBoundingBox.halfAxes[1] * axis.y) +\n        Math.abs(orientedBoundingBox.halfAxes[2] * axis.z) +\n        Math.abs(orientedBoundingBox.halfAxes[3] * axis.x) +\n        Math.abs(orientedBoundingBox.halfAxes[4] * axis.y) +\n        Math.abs(orientedBoundingBox.halfAxes[5] * axis.z) +\n        Math.abs(orientedBoundingBox.halfAxes[6] * axis.x) +\n        Math.abs(orientedBoundingBox.halfAxes[7] * axis.y) +\n        Math.abs(orientedBoundingBox.halfAxes[8] * axis.z);\n\n      // Project the bounding box of the child onto the axis. Because the axis is a ray from the parent\n      // to the child, the projection parameterized along the ray will be (+/- proj2) + axis.length.\n      var proj2 =\n        Math.abs(childOrientedBoundingBox.halfAxes[0] * axis.x) +\n        Math.abs(childOrientedBoundingBox.halfAxes[1] * axis.y) +\n        Math.abs(childOrientedBoundingBox.halfAxes[2] * axis.z) +\n        Math.abs(childOrientedBoundingBox.halfAxes[3] * axis.x) +\n        Math.abs(childOrientedBoundingBox.halfAxes[4] * axis.y) +\n        Math.abs(childOrientedBoundingBox.halfAxes[5] * axis.z) +\n        Math.abs(childOrientedBoundingBox.halfAxes[6] * axis.x) +\n        Math.abs(childOrientedBoundingBox.halfAxes[7] * axis.y) +\n        Math.abs(childOrientedBoundingBox.halfAxes[8] * axis.z);\n\n      // If the child extends the parent\'s bounds, the optimization is not valid and we skip it.\n      if (proj1 <= proj2 + axisLength) {\n        tile._optimChildrenWithinParent =\n          _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SKIP_OPTIMIZATION */ .Z.SKIP_OPTIMIZATION;\n        break;\n      }\n    }\n  }\n\n  return (\n    tile._optimChildrenWithinParent ===\n    _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].USE_OPTIMIZATION */ .Z.USE_OPTIMIZATION\n  );\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTileOptimizations);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97318\n')},94170:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cesium3DTilesetMostDetailedTraversal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1793);\n/* harmony import */ var _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67346);\n\n\n\n/**\n * The pass in which a 3D Tileset is updated.\n *\n * @private\n */\nvar Cesium3DTilePass = {\n  RENDER: 0,\n  PICK: 1,\n  SHADOW: 2,\n  PRELOAD: 3,\n  PRELOAD_FLIGHT: 4,\n  REQUEST_RENDER_MODE_DEFER_CHECK: 5,\n  MOST_DETAILED_PRELOAD: 6,\n  MOST_DETAILED_PICK: 7,\n  NUMBER_OF_PASSES: 8,\n};\n\nvar passOptions = new Array(Cesium3DTilePass.NUMBER_OF_PASSES);\n\npassOptions[Cesium3DTilePass.RENDER] = Object.freeze({\n  traversal: _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,\n  isRender: true,\n  requestTiles: true,\n  ignoreCommands: false,\n});\n\npassOptions[Cesium3DTilePass.PICK] = Object.freeze({\n  traversal: _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: false,\n  ignoreCommands: false,\n});\n\npassOptions[Cesium3DTilePass.SHADOW] = Object.freeze({\n  traversal: _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: true,\n  ignoreCommands: false,\n});\n\npassOptions[Cesium3DTilePass.PRELOAD] = Object.freeze({\n  traversal: _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: true,\n  ignoreCommands: true,\n});\n\npassOptions[Cesium3DTilePass.PRELOAD_FLIGHT] = Object.freeze({\n  traversal: _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: true,\n  ignoreCommands: true,\n});\n\npassOptions[Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK] = Object.freeze({\n  traversal: _Cesium3DTilesetTraversal_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: true,\n  ignoreCommands: true,\n});\n\npassOptions[Cesium3DTilePass.MOST_DETAILED_PRELOAD] = Object.freeze({\n  traversal: _Cesium3DTilesetMostDetailedTraversal_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: true,\n  ignoreCommands: true,\n});\n\npassOptions[Cesium3DTilePass.MOST_DETAILED_PICK] = Object.freeze({\n  traversal: _Cesium3DTilesetMostDetailedTraversal_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z,\n  isRender: false,\n  requestTiles: false,\n  ignoreCommands: false,\n});\n\nCesium3DTilePass.getPassOptions = function (pass) {\n  return passOptions[pass];\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(Cesium3DTilePass));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQxNzAuanMiLCJtYXBwaW5ncyI6Ijs7QUFBNkY7QUFDeEI7O0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsYUFBYSw2RUFBd0I7QUFDckM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLGFBQWEsNkVBQXdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxhQUFhLDZFQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsYUFBYSw2RUFBd0I7QUFDckM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLGFBQWEsNkVBQXdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxhQUFhLDZFQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsYUFBYSx5RkFBb0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLGFBQWEseUZBQW9DO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EseURBQWUsK0JBQStCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQ2VzaXVtM0RUaWxlUGFzcy5qcz81MzMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDZXNpdW0zRFRpbGVzZXRNb3N0RGV0YWlsZWRUcmF2ZXJzYWwgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlc2V0TW9zdERldGFpbGVkVHJhdmVyc2FsLmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlc2V0VHJhdmVyc2FsIGZyb20gXCIuL0Nlc2l1bTNEVGlsZXNldFRyYXZlcnNhbC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwYXNzIGluIHdoaWNoIGEgM0QgVGlsZXNldCBpcyB1cGRhdGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBDZXNpdW0zRFRpbGVQYXNzID0ge1xuICBSRU5ERVI6IDAsXG4gIFBJQ0s6IDEsXG4gIFNIQURPVzogMixcbiAgUFJFTE9BRDogMyxcbiAgUFJFTE9BRF9GTElHSFQ6IDQsXG4gIFJFUVVFU1RfUkVOREVSX01PREVfREVGRVJfQ0hFQ0s6IDUsXG4gIE1PU1RfREVUQUlMRURfUFJFTE9BRDogNixcbiAgTU9TVF9ERVRBSUxFRF9QSUNLOiA3LFxuICBOVU1CRVJfT0ZfUEFTU0VTOiA4LFxufTtcblxudmFyIHBhc3NPcHRpb25zID0gbmV3IEFycmF5KENlc2l1bTNEVGlsZVBhc3MuTlVNQkVSX09GX1BBU1NFUyk7XG5cbnBhc3NPcHRpb25zW0Nlc2l1bTNEVGlsZVBhc3MuUkVOREVSXSA9IE9iamVjdC5mcmVlemUoe1xuICB0cmF2ZXJzYWw6IENlc2l1bTNEVGlsZXNldFRyYXZlcnNhbCxcbiAgaXNSZW5kZXI6IHRydWUsXG4gIHJlcXVlc3RUaWxlczogdHJ1ZSxcbiAgaWdub3JlQ29tbWFuZHM6IGZhbHNlLFxufSk7XG5cbnBhc3NPcHRpb25zW0Nlc2l1bTNEVGlsZVBhc3MuUElDS10gPSBPYmplY3QuZnJlZXplKHtcbiAgdHJhdmVyc2FsOiBDZXNpdW0zRFRpbGVzZXRUcmF2ZXJzYWwsXG4gIGlzUmVuZGVyOiBmYWxzZSxcbiAgcmVxdWVzdFRpbGVzOiBmYWxzZSxcbiAgaWdub3JlQ29tbWFuZHM6IGZhbHNlLFxufSk7XG5cbnBhc3NPcHRpb25zW0Nlc2l1bTNEVGlsZVBhc3MuU0hBRE9XXSA9IE9iamVjdC5mcmVlemUoe1xuICB0cmF2ZXJzYWw6IENlc2l1bTNEVGlsZXNldFRyYXZlcnNhbCxcbiAgaXNSZW5kZXI6IGZhbHNlLFxuICByZXF1ZXN0VGlsZXM6IHRydWUsXG4gIGlnbm9yZUNvbW1hbmRzOiBmYWxzZSxcbn0pO1xuXG5wYXNzT3B0aW9uc1tDZXNpdW0zRFRpbGVQYXNzLlBSRUxPQURdID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHRyYXZlcnNhbDogQ2VzaXVtM0RUaWxlc2V0VHJhdmVyc2FsLFxuICBpc1JlbmRlcjogZmFsc2UsXG4gIHJlcXVlc3RUaWxlczogdHJ1ZSxcbiAgaWdub3JlQ29tbWFuZHM6IHRydWUsXG59KTtcblxucGFzc09wdGlvbnNbQ2VzaXVtM0RUaWxlUGFzcy5QUkVMT0FEX0ZMSUdIVF0gPSBPYmplY3QuZnJlZXplKHtcbiAgdHJhdmVyc2FsOiBDZXNpdW0zRFRpbGVzZXRUcmF2ZXJzYWwsXG4gIGlzUmVuZGVyOiBmYWxzZSxcbiAgcmVxdWVzdFRpbGVzOiB0cnVlLFxuICBpZ25vcmVDb21tYW5kczogdHJ1ZSxcbn0pO1xuXG5wYXNzT3B0aW9uc1tDZXNpdW0zRFRpbGVQYXNzLlJFUVVFU1RfUkVOREVSX01PREVfREVGRVJfQ0hFQ0tdID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHRyYXZlcnNhbDogQ2VzaXVtM0RUaWxlc2V0VHJhdmVyc2FsLFxuICBpc1JlbmRlcjogZmFsc2UsXG4gIHJlcXVlc3RUaWxlczogdHJ1ZSxcbiAgaWdub3JlQ29tbWFuZHM6IHRydWUsXG59KTtcblxucGFzc09wdGlvbnNbQ2VzaXVtM0RUaWxlUGFzcy5NT1NUX0RFVEFJTEVEX1BSRUxPQURdID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHRyYXZlcnNhbDogQ2VzaXVtM0RUaWxlc2V0TW9zdERldGFpbGVkVHJhdmVyc2FsLFxuICBpc1JlbmRlcjogZmFsc2UsXG4gIHJlcXVlc3RUaWxlczogdHJ1ZSxcbiAgaWdub3JlQ29tbWFuZHM6IHRydWUsXG59KTtcblxucGFzc09wdGlvbnNbQ2VzaXVtM0RUaWxlUGFzcy5NT1NUX0RFVEFJTEVEX1BJQ0tdID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHRyYXZlcnNhbDogQ2VzaXVtM0RUaWxlc2V0TW9zdERldGFpbGVkVHJhdmVyc2FsLFxuICBpc1JlbmRlcjogZmFsc2UsXG4gIHJlcXVlc3RUaWxlczogZmFsc2UsXG4gIGlnbm9yZUNvbW1hbmRzOiBmYWxzZSxcbn0pO1xuXG5DZXNpdW0zRFRpbGVQYXNzLmdldFBhc3NPcHRpb25zID0gZnVuY3Rpb24gKHBhc3MpIHtcbiAgcmV0dXJuIHBhc3NPcHRpb25zW3Bhc3NdO1xufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoQ2VzaXVtM0RUaWxlUGFzcyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94170\n')},55715:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n\n\n/**\n * The state for a 3D Tiles update pass.\n *\n * @private\n * @constructor\n */\nfunction Cesium3DTilePassState(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options", options);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.pass", options.pass);\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The pass.\n   *\n   * @type {Cesium3DTilePass}\n   */\n  this.pass = options.pass;\n\n  /**\n   * An array of rendering commands to use instead of {@link FrameState.commandList} for the current pass.\n   *\n   * @type {DrawCommand[]}\n   */\n  this.commandList = options.commandList;\n\n  /**\n   * A camera to use instead of {@link FrameState.camera} for the current pass.\n   *\n   * @type {Camera}\n   */\n  this.camera = options.camera;\n\n  /**\n   * A culling volume to use instead of {@link FrameState.cullingVolume} for the current pass.\n   *\n   * @type {CullingVolume}\n   */\n  this.cullingVolume = options.cullingVolume;\n\n  /**\n   * A read-only property that indicates whether the pass is ready, i.e. all tiles needed by the pass are loaded.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default false\n   */\n  this.ready = false;\n}\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilePassState);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU3MTUuanMiLCJtYXBwaW5ncyI6IjtBQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMkZBQW1CO0FBQ3JCLEVBQUUsMkZBQW1CO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsdURBQXVELDhCQUE4QjtBQUNyRjtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLHlCQUF5QjtBQUMxRDtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLGdDQUFnQztBQUN6RTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUscUJBQXFCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQ2VzaXVtM0RUaWxlUGFzc1N0YXRlLmpzPzgyMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoZWNrIGZyb20gXCIuLi9Db3JlL0NoZWNrLmpzXCI7XG5cbi8qKlxuICogVGhlIHN0YXRlIGZvciBhIDNEIFRpbGVzIHVwZGF0ZSBwYXNzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ2VzaXVtM0RUaWxlUGFzc1N0YXRlKG9wdGlvbnMpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgQ2hlY2sudHlwZU9mLm9iamVjdChcIm9wdGlvbnNcIiwgb3B0aW9ucyk7XG4gIENoZWNrLnR5cGVPZi5udW1iZXIoXCJvcHRpb25zLnBhc3NcIiwgb3B0aW9ucy5wYXNzKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXNzLlxuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlUGFzc31cbiAgICovXG4gIHRoaXMucGFzcyA9IG9wdGlvbnMucGFzcztcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcmVuZGVyaW5nIGNvbW1hbmRzIHRvIHVzZSBpbnN0ZWFkIG9mIHtAbGluayBGcmFtZVN0YXRlLmNvbW1hbmRMaXN0fSBmb3IgdGhlIGN1cnJlbnQgcGFzcy5cbiAgICpcbiAgICogQHR5cGUge0RyYXdDb21tYW5kW119XG4gICAqL1xuICB0aGlzLmNvbW1hbmRMaXN0ID0gb3B0aW9ucy5jb21tYW5kTGlzdDtcblxuICAvKipcbiAgICogQSBjYW1lcmEgdG8gdXNlIGluc3RlYWQgb2Yge0BsaW5rIEZyYW1lU3RhdGUuY2FtZXJhfSBmb3IgdGhlIGN1cnJlbnQgcGFzcy5cbiAgICpcbiAgICogQHR5cGUge0NhbWVyYX1cbiAgICovXG4gIHRoaXMuY2FtZXJhID0gb3B0aW9ucy5jYW1lcmE7XG5cbiAgLyoqXG4gICAqIEEgY3VsbGluZyB2b2x1bWUgdG8gdXNlIGluc3RlYWQgb2Yge0BsaW5rIEZyYW1lU3RhdGUuY3VsbGluZ1ZvbHVtZX0gZm9yIHRoZSBjdXJyZW50IHBhc3MuXG4gICAqXG4gICAqIEB0eXBlIHtDdWxsaW5nVm9sdW1lfVxuICAgKi9cbiAgdGhpcy5jdWxsaW5nVm9sdW1lID0gb3B0aW9ucy5jdWxsaW5nVm9sdW1lO1xuXG4gIC8qKlxuICAgKiBBIHJlYWQtb25seSBwcm9wZXJ0eSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBwYXNzIGlzIHJlYWR5LCBpLmUuIGFsbCB0aWxlcyBuZWVkZWQgYnkgdGhlIHBhc3MgYXJlIGxvYWRlZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xufVxuZXhwb3J0IGRlZmF1bHQgQ2VzaXVtM0RUaWxlUGFzc1N0YXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///55715\n')},81066:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Cesium3DTileFeature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52381);\n/* harmony import */ var _createBillboardPointCallback_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(13304);\n\n\n\n\n\n\n\n/**\n * A point feature of a {@link Cesium3DTileset}.\n * <p>\n * Provides access to a feature\'s properties stored in the tile\'s batch table, as well\n * as the ability to show/hide a feature and change its point properties\n * </p>\n * <p>\n * Modifications to a <code>Cesium3DTilePointFeature</code> object have the lifetime of the tile\'s\n * content.  If the tile\'s content is unloaded, e.g., due to it going out of view and needing\n * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n * </p>\n * <p>\n * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n * </p>\n *\n * @alias Cesium3DTilePointFeature\n * @constructor\n *\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n *\n * @example\n * // On mouse over, display all the properties for a feature in the console log.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTilePointFeature) {\n *         var propertyNames = feature.getPropertyNames();\n *         var length = propertyNames.length;\n *         for (var i = 0; i < length; ++i) {\n *             var propertyName = propertyNames[i];\n *             console.log(propertyName + \': \' + feature.getProperty(propertyName));\n *         }\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nfunction Cesium3DTilePointFeature(\n  content,\n  batchId,\n  billboard,\n  label,\n  polyline\n) {\n  this._content = content;\n  this._billboard = billboard;\n  this._label = label;\n  this._polyline = polyline;\n\n  this._batchId = batchId;\n  this._billboardImage = undefined;\n  this._billboardColor = undefined;\n  this._billboardOutlineColor = undefined;\n  this._billboardOutlineWidth = undefined;\n  this._billboardSize = undefined;\n  this._pointSize = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._heightOffset = undefined;\n\n  this._pickIds = new Array(3);\n\n  setBillboardImage(this);\n}\n\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nObject.defineProperties(Cesium3DTilePointFeature.prototype, {\n  /**\n   * Gets or sets if the feature will be shown. This is set for all features\n   * when a style\'s show is evaluated.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._label.show;\n    },\n    set: function (value) {\n      this._label.show = value;\n      this._billboard.show = value;\n      this._polyline.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the color of the point of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(value, this._color);\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point size of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = value;\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point outline color of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(value, this._pointOutlineColor);\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the point outline width in pixels of this feature.\n   * <p>\n   * Only applied when <code>image</code> is <code>undefined</code>.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = value;\n      setBillboardImage(this);\n    },\n  },\n\n  /**\n   * Gets or sets the label color of this feature.\n   * <p>\n   * The color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelColor: {\n    get: function () {\n      return this._label.fillColor;\n    },\n    set: function (value) {\n      this._label.fillColor = value;\n      this._polyline.show = this._label.show && value.alpha > 0.0;\n    },\n  },\n\n  /**\n   * Gets or sets the label outline color of this feature.\n   * <p>\n   * The outline color will be applied to the label if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._label.outlineColor;\n    },\n    set: function (value) {\n      this._label.outlineColor = value;\n    },\n  },\n\n  /**\n   * Gets or sets the outline width in pixels of this feature.\n   * <p>\n   * The outline width will be applied to the point if <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._label.outlineWidth;\n    },\n    set: function (value) {\n      this._label.outlineWidth = value;\n    },\n  },\n\n  /**\n   * Gets or sets the font of this feature.\n   * <p>\n   * Only applied when the <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  font: {\n    get: function () {\n      return this._label.font;\n    },\n    set: function (value) {\n      this._label.font = value;\n    },\n  },\n\n  /**\n   * Gets or sets the fill and outline style of this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {LabelStyle}\n   */\n  labelStyle: {\n    get: function () {\n      return this._label.style;\n    },\n    set: function (value) {\n      this._label.style = value;\n    },\n  },\n\n  /**\n   * Gets or sets the text for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  labelText: {\n    get: function () {\n      return this._label.text;\n    },\n    set: function (value) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value)) {\n        value = "";\n      }\n      this._label.text = value;\n    },\n  },\n\n  /**\n   * Gets or sets the background color of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  backgroundColor: {\n    get: function () {\n      return this._label.backgroundColor;\n    },\n    set: function (value) {\n      this._label.backgroundColor = value;\n    },\n  },\n\n  /**\n   * Gets or sets the background padding of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cartesian2}\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._label.backgroundPadding;\n    },\n    set: function (value) {\n      this._label.backgroundPadding = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether to display the background of the text for this feature.\n   * <p>\n   * Only applied when <code>labelText</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._label.showBackground;\n    },\n    set: function (value) {\n      this._label.showBackground = value;\n    },\n  },\n\n  /**\n   * Gets or sets the near and far scaling properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._label.scaleByDistance;\n    },\n    set: function (value) {\n      this._label.scaleByDistance = value;\n      this._billboard.scaleByDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the near and far translucency properties for this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {NearFarScalar}\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._label.translucencyByDistance;\n    },\n    set: function (value) {\n      this._label.translucencyByDistance = value;\n      this._billboard.translucencyByDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this feature will be displayed.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {DistanceDisplayCondition}\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._label.distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._label.distanceDisplayCondition = value;\n      this._polyline.distanceDisplayCondition = value;\n      this._billboard.distanceDisplayCondition = value;\n    },\n  },\n\n  /**\n   * Gets or sets the height offset in meters of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      var offset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._heightOffset, 0.0);\n\n      var ellipsoid = this._content.tileset.ellipsoid;\n      var cart = ellipsoid.cartesianToCartographic(\n        this._billboard.position,\n        scratchCartographic\n      );\n      cart.height = cart.height - offset + value;\n      var newPosition = ellipsoid.cartographicToCartesian(cart);\n\n      this._billboard.position = newPosition;\n      this._label.position = this._billboard.position;\n      this._polyline.positions = [this._polyline.positions[0], newPosition];\n\n      this._heightOffset = value;\n    },\n  },\n\n  /**\n   * Gets or sets whether the anchor line is displayed.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Boolean}\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._polyline.show;\n    },\n    set: function (value) {\n      this._polyline.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the color for the anchor line.\n   * <p>\n   * Only applied when <code>heightOffset</code> is defined.\n   * </p>\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Color}\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._polyline.material.uniforms.color;\n    },\n    set: function (value) {\n      this._polyline.material.uniforms.color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n        value,\n        this._polyline.material.uniforms.color\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the image of this feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {String}\n   */\n  image: {\n    get: function () {\n      return this._billboardImage;\n    },\n    set: function (value) {\n      var imageChanged = this._billboardImage !== value;\n      this._billboardImage = value;\n      if (imageChanged) {\n        setBillboardImage(this);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance where depth testing will be disabled.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._label.disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._label.disableDepthTestDistance = value;\n      this._billboard.disableDepthTestDistance = value;\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point, which determines if the point is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._billboard.horizontalOrigin;\n    },\n    set: function (value) {\n      this._billboard.horizontalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets or sets the vertical origin of this point, which determines if the point is\n   * to the bottom, center, or top of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._billboard.verticalOrigin;\n    },\n    set: function (value) {\n      this._billboard.verticalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this point\'s text, which determines if the point\'s text is\n   * to the left, center, or right of its anchor position.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {HorizontalOrigin}\n   */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._label.horizontalOrigin;\n    },\n    set: function (value) {\n      this._label.horizontalOrigin = value;\n    },\n  },\n\n  /**\n   * Get or sets the vertical origin of this point\'s text, which determines if the point\'s text is\n   * to the bottom, center, top, or baseline of it\'s anchor point.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {VerticalOrigin}\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._label.verticalOrigin;\n    },\n    set: function (value) {\n      this._label.verticalOrigin = value;\n    },\n  },\n\n  /**\n   * Gets the content of the tile containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileContent}\n   *\n   * @readonly\n   * @private\n   */\n  content: {\n    get: function () {\n      return this._content;\n    },\n  },\n\n  /**\n   * Gets the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n   * the tileset containing the feature.\n   *\n   * @memberof Cesium3DTilePointFeature.prototype\n   *\n   * @type {Cesium3DTileset}\n   *\n   * @readonly\n   */\n  primitive: {\n    get: function () {\n      return this._content.tileset;\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickIds: {\n    get: function () {\n      var ids = this._pickIds;\n      ids[0] = this._billboard.pickId;\n      ids[1] = this._label.pickId;\n      ids[2] = this._polyline.pickId;\n      return ids;\n    },\n  },\n});\n\nCesium3DTilePointFeature.defaultColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE;\nCesium3DTilePointFeature.defaultPointOutlineColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].BLACK */ .Z.BLACK;\nCesium3DTilePointFeature.defaultPointOutlineWidth = 0.0;\nCesium3DTilePointFeature.defaultPointSize = 8.0;\n\nfunction setBillboardImage(feature) {\n  var b = feature._billboard;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(feature._billboardImage) && feature._billboardImage !== b.image) {\n    b.image = feature._billboardImage;\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(feature._billboardImage)) {\n    return;\n  }\n\n  var newColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    feature._color,\n    Cesium3DTilePointFeature.defaultColor\n  );\n  var newOutlineColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    feature._pointOutlineColor,\n    Cesium3DTilePointFeature.defaultPointOutlineColor\n  );\n  var newOutlineWidth = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    feature._pointOutlineWidth,\n    Cesium3DTilePointFeature.defaultPointOutlineWidth\n  );\n  var newPointSize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    feature._pointSize,\n    Cesium3DTilePointFeature.defaultPointSize\n  );\n\n  var currentColor = feature._billboardColor;\n  var currentOutlineColor = feature._billboardOutlineColor;\n  var currentOutlineWidth = feature._billboardOutlineWidth;\n  var currentPointSize = feature._billboardSize;\n\n  if (\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(newColor, currentColor) &&\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(newOutlineColor, currentOutlineColor) &&\n    newOutlineWidth === currentOutlineWidth &&\n    newPointSize === currentPointSize\n  ) {\n    return;\n  }\n\n  feature._billboardColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(newColor, feature._billboardColor);\n  feature._billboardOutlineColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    newOutlineColor,\n    feature._billboardOutlineColor\n  );\n  feature._billboardOutlineWidth = newOutlineWidth;\n  feature._billboardSize = newPointSize;\n\n  var centerAlpha = newColor.alpha;\n  var cssColor = newColor.toCssColorString();\n  var cssOutlineColor = newOutlineColor.toCssColorString();\n  var textureId = JSON.stringify([\n    cssColor,\n    newPointSize,\n    cssOutlineColor,\n    newOutlineWidth,\n  ]);\n\n  b.setImage(\n    textureId,\n    (0,_createBillboardPointCallback_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n      centerAlpha,\n      cssColor,\n      cssOutlineColor,\n      newOutlineWidth,\n      newPointSize\n    )\n  );\n}\n\n/**\n * Returns whether the feature contains this property. This includes properties from this feature\'s\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {Boolean} Whether the feature contains this property.\n */\nCesium3DTilePointFeature.prototype.hasProperty = function (name) {\n  return this._content.batchTable.hasProperty(this._batchId, name);\n};\n\n/**\n * Returns an array of property names for the feature. This includes properties from this feature\'s\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String[]} [results] An array into which to store the results.\n * @returns {String[]} The names of the feature\'s properties.\n */\nCesium3DTilePointFeature.prototype.getPropertyNames = function (results) {\n  return this._content.batchTable.getPropertyNames(this._batchId, results);\n};\n\n/**\n * Returns a copy of the value of the feature\'s property with the given name. This includes properties from this feature\'s\n * class and inherited classes when using a batch table hierarchy.\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_batch_table_hierarchy}\n *\n * @param {String} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n *\n * @example\n * // Display all the properties for a feature in the console log.\n * var propertyNames = feature.getPropertyNames();\n * var length = propertyNames.length;\n * for (var i = 0; i < length; ++i) {\n *     var propertyName = propertyNames[i];\n *     console.log(propertyName + \': \' + feature.getProperty(propertyName));\n * }\n */\nCesium3DTilePointFeature.prototype.getProperty = function (name) {\n  return this._content.batchTable.getProperty(this._batchId, name);\n};\n\n/**\n * Returns a copy of the value of the feature\'s property with the given name.\n * If the feature is contained within a tileset that uses the\n * <code>3DTILES_metadata</code> extension, tileset, group and tile metadata is\n * inherited.\n * <p>\n * To resolve name conflicts, this method resolves names from most specific to\n * least specific by metadata granularity in the order: feature, tile, group,\n * tileset. Within each granularity, semantics are resolved first, then other\n * properties.\n * </p>\n * @param {String} name The case-sensitive name of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nCesium3DTilePointFeature.prototype.getPropertyInherited = function (name) {\n  return _Cesium3DTileFeature_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].getPropertyInherited */ .Z.getPropertyInherited(\n    this._content,\n    this._batchId,\n    name\n  );\n};\n\n/**\n * Sets the value of the feature\'s property with the given name.\n * <p>\n * If a property with the given name doesn\'t exist, it is created.\n * </p>\n *\n * @param {String} name The case-sensitive name of the property.\n * @param {*} value The value of the property that will be copied.\n *\n * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n *\n * @example\n * var height = feature.getProperty(\'Height\'); // e.g., the height of a building\n *\n * @example\n * var name = \'clicked\';\n * if (feature.getProperty(name)) {\n *     console.log(\'already clicked\');\n * } else {\n *     feature.setProperty(name, true);\n *     console.log(\'first click\');\n * }\n */\nCesium3DTilePointFeature.prototype.setProperty = function (name, value) {\n  this._content.batchTable.setProperty(this._batchId, name, value);\n\n  // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n  // property is in one of the style\'s expressions or - if it can be done quickly -\n  // if the new property value changed the result of an expression.\n  this._content.featurePropertiesDirty = true;\n};\n\n/**\n * Returns whether the feature\'s class name equals <code>className</code>. Unlike {@link Cesium3DTilePointFeature#isClass}\n * this function only checks the feature\'s exact class and not inherited classes.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature\'s class name equals <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isExactClass = function (className) {\n  return this._content.batchTable.isExactClass(this._batchId, className);\n};\n\n/**\n * Returns whether the feature\'s class or any inherited classes are named <code>className</code>.\n * <p>\n * This function returns <code>false</code> if no batch table hierarchy is present.\n * </p>\n *\n * @param {String} className The name to check against.\n * @returns {Boolean} Whether the feature\'s class or inherited classes are named <code>className</code>\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.isClass = function (className) {\n  return this._content.batchTable.isClass(this._batchId, className);\n};\n\n/**\n * Returns the feature\'s class name.\n * <p>\n * This function returns <code>undefined</code> if no batch table hierarchy is present.\n * </p>\n *\n * @returns {String} The feature\'s class name.\n *\n * @private\n */\nCesium3DTilePointFeature.prototype.getExactClassName = function () {\n  return this._content.batchTable.getExactClassName(this._batchId);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilePointFeature);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81066\n')},36819:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * The refinement approach for a tile.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification#refinement|Refinement}\n * in the 3D Tiles spec.\n * </p>\n *\n * @enum {Number}\n *\n * @private\n */\nvar Cesium3DTileRefine = {\n  /**\n   * Render this tile and, if it doesn't meet the screen space error, also refine to its children.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ADD: 0,\n\n  /**\n   * Render this tile or, if it doesn't meet the screen space error, refine to its descendants instead.\n   *\n   * @type {Number}\n   * @constant\n   */\n  REPLACE: 1,\n};\n/* harmony default export */ __webpack_exports__[\"Z\"] = (Object.freeze(Cesium3DTileRefine));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY4MTkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsaUNBQWlDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQ2VzaXVtM0RUaWxlUmVmaW5lLmpzP2I1MWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgcmVmaW5lbWVudCBhcHByb2FjaCBmb3IgYSB0aWxlLlxuICogPHA+XG4gKiBTZWUgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvM2QtdGlsZXMvdHJlZS9tYWluL3NwZWNpZmljYXRpb24jcmVmaW5lbWVudHxSZWZpbmVtZW50fVxuICogaW4gdGhlIDNEIFRpbGVzIHNwZWMuXG4gKiA8L3A+XG4gKlxuICogQGVudW0ge051bWJlcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgQ2VzaXVtM0RUaWxlUmVmaW5lID0ge1xuICAvKipcbiAgICogUmVuZGVyIHRoaXMgdGlsZSBhbmQsIGlmIGl0IGRvZXNuJ3QgbWVldCB0aGUgc2NyZWVuIHNwYWNlIGVycm9yLCBhbHNvIHJlZmluZSB0byBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgQUREOiAwLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhpcyB0aWxlIG9yLCBpZiBpdCBkb2Vzbid0IG1lZXQgdGhlIHNjcmVlbiBzcGFjZSBlcnJvciwgcmVmaW5lIHRvIGl0cyBkZXNjZW5kYW50cyBpbnN0ZWFkLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFJFUExBQ0U6IDEsXG59O1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShDZXNpdW0zRFRpbGVSZWZpbmUpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36819\n")},39154:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83856);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(68985);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(13222);\n/* harmony import */ var _ConditionsExpression_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50451);\n/* harmony import */ var _Expression_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19427);\n\n\n\n\n\n\n\n\n\n/**\n * A style that is applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates an expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n *\n * @alias Cesium3DTileStyle\n * @constructor\n *\n * @param {Resource|String|Object} [style] The url of a style or an object defining a style.\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : {\n *         conditions : [\n *             ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n *             ['${Height} >= 50', 'color(\"red\")'],\n *             ['true', 'color(\"blue\")']\n *         ]\n *     },\n *     show : '${Height} > 0',\n *     meta : {\n *         description : '\"Building id ${id} has height ${Height}.\"'\n *     }\n * });\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : 'vec4(${Temperature})',\n *     pointSize : '${Temperature} * 2.0'\n * });\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n */\nfunction Cesium3DTileStyle(style) {\n  this._style = {};\n  this._ready = false;\n\n  this._show = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._labelColor = undefined;\n  this._labelOutlineColor = undefined;\n  this._labelOutlineWidth = undefined;\n  this._font = undefined;\n  this._labelStyle = undefined;\n  this._labelText = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundEnabled = undefined;\n  this._scaleByDistance = undefined;\n  this._translucencyByDistance = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._heightOffset = undefined;\n  this._anchorLineEnabled = undefined;\n  this._anchorLineColor = undefined;\n  this._image = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._horizontalOrigin = undefined;\n  this._verticalOrigin = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelVerticalOrigin = undefined;\n  this._meta = undefined;\n\n  this._colorShaderFunction = undefined;\n  this._showShaderFunction = undefined;\n  this._pointSizeShaderFunction = undefined;\n  this._colorShaderFunctionReady = false;\n  this._showShaderFunctionReady = false;\n  this._pointSizeShaderFunctionReady = false;\n\n  this._colorShaderTranslucent = false;\n\n  var promise;\n  if (typeof style === \"string\" || style instanceof _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z) {\n    var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"].createIfNeeded */ .Z.createIfNeeded(style);\n    promise = resource.fetchJson(style);\n  } else {\n    promise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"].resolve */ .Z.resolve(style);\n  }\n\n  var that = this;\n  this._readyPromise = promise.then(function (styleJson) {\n    setup(that, styleJson);\n    return that;\n  });\n}\n\nfunction setup(that, styleJson) {\n  styleJson = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)((0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(styleJson, true), that._style);\n  that._style = styleJson;\n\n  that.show = styleJson.show;\n  that.color = styleJson.color;\n  that.pointSize = styleJson.pointSize;\n  that.pointOutlineColor = styleJson.pointOutlineColor;\n  that.pointOutlineWidth = styleJson.pointOutlineWidth;\n  that.labelColor = styleJson.labelColor;\n  that.labelOutlineColor = styleJson.labelOutlineColor;\n  that.labelOutlineWidth = styleJson.labelOutlineWidth;\n  that.labelStyle = styleJson.labelStyle;\n  that.font = styleJson.font;\n  that.labelText = styleJson.labelText;\n  that.backgroundColor = styleJson.backgroundColor;\n  that.backgroundPadding = styleJson.backgroundPadding;\n  that.backgroundEnabled = styleJson.backgroundEnabled;\n  that.scaleByDistance = styleJson.scaleByDistance;\n  that.translucencyByDistance = styleJson.translucencyByDistance;\n  that.distanceDisplayCondition = styleJson.distanceDisplayCondition;\n  that.heightOffset = styleJson.heightOffset;\n  that.anchorLineEnabled = styleJson.anchorLineEnabled;\n  that.anchorLineColor = styleJson.anchorLineColor;\n  that.image = styleJson.image;\n  that.disableDepthTestDistance = styleJson.disableDepthTestDistance;\n  that.horizontalOrigin = styleJson.horizontalOrigin;\n  that.verticalOrigin = styleJson.verticalOrigin;\n  that.labelHorizontalOrigin = styleJson.labelHorizontalOrigin;\n  that.labelVerticalOrigin = styleJson.labelVerticalOrigin;\n\n  var meta = {};\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(styleJson.meta)) {\n    var defines = styleJson.defines;\n    var metaJson = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(styleJson.meta, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n    for (var property in metaJson) {\n      if (metaJson.hasOwnProperty(property)) {\n        meta[property] = new _Expression_js__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z(metaJson[property], defines);\n      }\n    }\n  }\n\n  that._meta = meta;\n\n  that._ready = true;\n}\n\nfunction getExpression(tileStyle, value) {\n  var defines = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(tileStyle._style, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT)\n    .defines;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(value)) {\n    return undefined;\n  } else if (typeof value === \"boolean\" || typeof value === \"number\") {\n    return new _Expression_js__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z(String(value));\n  } else if (typeof value === \"string\") {\n    return new _Expression_js__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z(value, defines);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(value.conditions)) {\n    return new _ConditionsExpression_js__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z(value, defines);\n  }\n  return value;\n}\n\nfunction getJsonFromExpression(expression) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(expression)) {\n    return undefined;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(expression.expression)) {\n    return expression.expression;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(expression.conditionsExpression)) {\n    return (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(expression.conditionsExpression, true);\n  }\n  return expression;\n}\n\nObject.defineProperties(Cesium3DTileStyle.prototype, {\n  /**\n   * Gets the object defining the style using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default {}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\n   */\n  style: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._style;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the style is ready and its expressions can be evaluated.  When\n   * a style is constructed with an object, as opposed to a url, this is <code>true</code> immediately.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when the the style is ready and its expressions can be evaluated.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Promise.<Cesium3DTileStyle>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>show</code> property. Alternatively a boolean, string, or object defining a show style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return or convert to a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     show : '(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)'\n   * });\n   * style.show.evaluate(feature); // returns true or false depending on the feature's properties\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a custom function\n   * style.show = {\n   *     evaluate : function(feature) {\n   *         return true;\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a boolean\n   * style.show = true;\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a string\n   * style.show = '${Height} > 0';\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a condition\n   * style.show = {\n   *     conditions: [\n   *         ['${height} > 2', 'false'],\n   *         ['true', 'true']\n   *     ];\n   * };\n   */\n  show: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._show;\n    },\n    set: function (value) {\n      this._show = getExpression(this, value);\n      this._style.show = getJsonFromExpression(this._show);\n      this._showShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>color</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     color : '(${Temperature} > 90) ? color(\"red\") : color(\"white\")'\n   * });\n   * style.color.evaluateColor(feature, result); // returns a Cesium.Color object\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a custom function\n   * style.color = {\n   *     evaluateColor : function(feature, result) {\n   *         return Cesium.Color.clone(Cesium.Color.WHITE, result);\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a string\n   * style.color = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a condition\n   * style.color = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  color: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._color;\n    },\n    set: function (value) {\n      this._color = getExpression(this, value);\n      this._style.color = getJsonFromExpression(this._color);\n      this._colorShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointSize</code> property. Alternatively a string or object defining a point size style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile or a Point Cloud tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     pointSize : '(${Temperature} > 90) ? 2.0 : 1.0'\n   * });\n   * style.pointSize.evaluate(feature); // returns a Number\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a custom function\n   * style.pointSize = {\n   *     evaluate : function(feature) {\n   *         return 1.0;\n   *     }\n   * };\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a number\n   * style.pointSize = 1.0;\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a string\n   * style.pointSize = '${height} / 10';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a condition\n   * style.pointSize =  {\n   *     conditions : [\n   *         ['${height} > 2', '1.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  pointSize: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = getExpression(this, value);\n      this._style.pointSize = getJsonFromExpression(this._pointSize);\n      this._pointSizeShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a string\n   * style.pointOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a condition\n   * style.pointOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  pointOutlineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = getExpression(this, value);\n      this._style.pointOutlineColor = getJsonFromExpression(\n        this._pointOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a string\n   * style.pointOutlineWidth = '5';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a condition\n   * style.pointOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  pointOutlineWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = getExpression(this, value);\n      this._style.pointOutlineWidth = getJsonFromExpression(\n        this._pointOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a string\n   * style.labelColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a condition\n   * style.labelColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelColor;\n    },\n    set: function (value) {\n      this._labelColor = getExpression(this, value);\n      this._style.labelColor = getJsonFromExpression(this._labelColor);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a string\n   * style.labelOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a condition\n   * style.labelOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelOutlineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelOutlineColor;\n    },\n    set: function (value) {\n      this._labelOutlineColor = getExpression(this, value);\n      this._style.labelOutlineColor = getJsonFromExpression(\n        this._labelOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a string\n   * style.labelOutlineWidth = '5';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a condition\n   * style.labelOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  labelOutlineWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelOutlineWidth;\n    },\n    set: function (value) {\n      this._labelOutlineWidth = getExpression(this, value);\n      this._style.labelOutlineWidth = getJsonFromExpression(\n        this._labelOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>font</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     font : '(${Temperature} > 90) ? \"30px Helvetica\" : \"24px Helvetica\"'\n   * });\n   * style.font.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override font expression with a custom function\n   * style.font = {\n   *     evaluate : function(feature) {\n   *         return '24px Helvetica';\n   *     }\n   * };\n   */\n  font: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._font;\n    },\n    set: function (value) {\n      this._font = getExpression(this, value);\n      this._style.font = getJsonFromExpression(this._font);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>label style</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>LabelStyle</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelStyle : '(${Temperature} > 90) ? ' + LabelStyle.FILL_AND_OUTLINE + ' : ' + LabelStyle.FILL\n   * });\n   * style.labelStyle.evaluate(feature); // returns a LabelStyle\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelStyle expression with a custom function\n   * style.labelStyle = {\n   *     evaluate : function(feature) {\n   *         return LabelStyle.FILL;\n   *     }\n   * };\n   */\n  labelStyle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelStyle;\n    },\n    set: function (value) {\n      this._labelStyle = getExpression(this, value);\n      this._style.labelStyle = getJsonFromExpression(this._labelStyle);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelText</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelText : '(${Temperature} > 90) ? \">90\" : \"<=90\"'\n   * });\n   * style.labelText.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelText expression with a custom function\n   * style.labelText = {\n   *     evaluate : function(feature) {\n   *         return 'Example label text';\n   *     }\n   * };\n   */\n  labelText: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelText;\n    },\n    set: function (value) {\n      this._labelText = getExpression(this, value);\n      this._style.labelText = getJsonFromExpression(this._labelText);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a string\n   * style.backgroundColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a condition\n   * style.backgroundColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  backgroundColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._backgroundColor;\n    },\n    set: function (value) {\n      this._backgroundColor = getExpression(this, value);\n      this._style.backgroundColor = getJsonFromExpression(\n        this._backgroundColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundPadding</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundPadding expression with a string\n   * style.backgroundPadding = 'vec2(5.0, 7.0)';\n   * style.backgroundPadding.evaluate(feature); // returns a Cartesian2\n   */\n  backgroundPadding: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._backgroundPadding;\n    },\n    set: function (value) {\n      this._backgroundPadding = getExpression(this, value);\n      this._style.backgroundPadding = getJsonFromExpression(\n        this._backgroundPadding\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a string\n   * style.backgroundEnabled = 'true';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a condition\n   * style.backgroundEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  backgroundEnabled: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._backgroundEnabled;\n    },\n    set: function (value) {\n      this._backgroundEnabled = getExpression(this, value);\n      this._style.backgroundEnabled = getJsonFromExpression(\n        this._backgroundEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>scaleByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override scaleByDistance expression with a string\n   * style.scaleByDistance = 'vec4(1.5e2, 2.0, 1.5e7, 0.5)';\n   * style.scaleByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  scaleByDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      this._scaleByDistance = getExpression(this, value);\n      this._style.scaleByDistance = getJsonFromExpression(\n        this._scaleByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>translucencyByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override translucencyByDistance expression with a string\n   * style.translucencyByDistance = 'vec4(1.5e2, 1.0, 1.5e7, 0.2)';\n   * style.translucencyByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  translucencyByDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      this._translucencyByDistance = getExpression(this, value);\n      this._style.translucencyByDistance = getJsonFromExpression(\n        this._translucencyByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>distanceDisplayCondition</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override distanceDisplayCondition expression with a string\n   * style.distanceDisplayCondition = 'vec2(0.0, 5.5e6)';\n   * style.distanceDisplayCondition.evaluate(feature); // returns a Cartesian2\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._distanceDisplayCondition = getExpression(this, value);\n      this._style.distanceDisplayCondition = getJsonFromExpression(\n        this._distanceDisplayCondition\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>heightOffset</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a string\n   * style.heightOffset = '2.0';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a condition\n   * style.heightOffset = {\n   *     conditions : [\n   *         ['${height} > 2', '4.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  heightOffset: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._heightOffset;\n    },\n    set: function (value) {\n      this._heightOffset = getExpression(this, value);\n      this._style.heightOffset = getJsonFromExpression(this._heightOffset);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a string\n   * style.anchorLineEnabled = 'true';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a condition\n   * style.anchorLineEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  anchorLineEnabled: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._anchorLineEnabled;\n    },\n    set: function (value) {\n      this._anchorLineEnabled = getExpression(this, value);\n      this._style.anchorLineEnabled = getJsonFromExpression(\n        this._anchorLineEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a string\n   * style.anchorLineColor = 'color(\"blue\")';\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a condition\n   * style.anchorLineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  anchorLineColor: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._anchorLineColor;\n    },\n    set: function (value) {\n      this._anchorLineColor = getExpression(this, value);\n      this._style.anchorLineColor = getJsonFromExpression(\n        this._anchorLineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>image</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     image : '(${Temperature} > 90) ? \"/url/to/image1\" : \"/url/to/image2\"'\n   * });\n   * style.image.evaluate(feature); // returns a String\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override image expression with a custom function\n   * style.image = {\n   *     evaluate : function(feature) {\n   *         return '/url/to/image';\n   *     }\n   * };\n   */\n  image: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._image;\n    },\n    set: function (value) {\n      this._image = getExpression(this, value);\n      this._style.image = getJsonFromExpression(this._image);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>disableDepthTestDistance</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override disableDepthTestDistance expression with a string\n   * style.disableDepthTestDistance = '1000.0';\n   * style.disableDepthTestDistance.evaluate(feature); // returns a Number\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._disableDepthTestDistance = getExpression(this, value);\n      this._style.disableDepthTestDistance = getJsonFromExpression(\n        this._disableDepthTestDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>horizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>HorizontalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     horizontalOrigin : HorizontalOrigin.LEFT\n   * });\n   * style.horizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override horizontalOrigin expression with a custom function\n   * style.horizontalOrigin = {\n   *     evaluate : function(feature) {\n   *         return HorizontalOrigin.CENTER;\n   *     }\n   * };\n   */\n  horizontalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      this._horizontalOrigin = getExpression(this, value);\n      this._style.horizontalOrigin = getJsonFromExpression(\n        this._horizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>verticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     verticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.verticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override verticalOrigin expression with a custom function\n   * style.verticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  verticalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      this._verticalOrigin = getExpression(this, value);\n      this._style.verticalOrigin = getJsonFromExpression(this._verticalOrigin);\n    },\n  },\n\n  /**\n         Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelHorizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n         * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n         * <p>\n         * The expression must return a <code>HorizontalOrigin</code>.\n         * </p>\n         * <p>\n         * This expression is only applicable to point features in a Vector tile.\n         * </p>\n         *\n         * @memberof Cesium3DTileStyle.prototype\n         *\n         * @type {StyleExpression}\n         *\n         * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n         *\n         * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n         *\n         * @example\n         * var style = new Cesium3DTileStyle({\n         *     labelHorizontalOrigin : HorizontalOrigin.LEFT\n         * });\n         * style.labelHorizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n         *\n         * @example\n         * var style = new Cesium.Cesium3DTileStyle();\n         * // Override labelHorizontalOrigin expression with a custom function\n         * style.labelHorizontalOrigin = {\n         *     evaluate : function(feature) {\n         *         return HorizontalOrigin.CENTER;\n         *     }\n         * };\n         */\n  labelHorizontalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelHorizontalOrigin;\n    },\n    set: function (value) {\n      this._labelHorizontalOrigin = getExpression(this, value);\n      this._style.labelHorizontalOrigin = getJsonFromExpression(\n        this._labelHorizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelVerticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     labelVerticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.labelVerticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * var style = new Cesium.Cesium3DTileStyle();\n   * // Override labelVerticalOrigin expression with a custom function\n   * style.labelVerticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._labelVerticalOrigin;\n    },\n    set: function (value) {\n      this._labelVerticalOrigin = getExpression(this, value);\n      this._style.labelVerticalOrigin = getJsonFromExpression(\n        this._labelVerticalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the object containing application-specific expression that can be explicitly\n   * evaluated, e.g., for display in a UI.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @exception {DeveloperError} The style is not loaded.  Use {@link Cesium3DTileStyle#readyPromise} or wait for {@link Cesium3DTileStyle#ready} to be true.\n   *\n   * @example\n   * var style = new Cesium3DTileStyle({\n   *     meta : {\n   *         description : '\"Building id ${id} has height ${Height}.\"'\n   *     }\n   * });\n   * style.meta.description.evaluate(feature); // returns a String with the substituted variables\n   */\n  meta: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(\n          \"The style is not loaded.  Use Cesium3DTileStyle.readyPromise or wait for Cesium3DTileStyle.ready to be true.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._meta;\n    },\n    set: function (value) {\n      this._meta = value;\n    },\n  },\n});\n\n/**\n * Gets the color shader function for this style.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getColorShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._colorShaderFunctionReady) {\n    shaderState.translucent = this._colorShaderTranslucent;\n    // Return the cached result, may be undefined\n    return this._colorShaderFunction;\n  }\n\n  this._colorShaderFunctionReady = true;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.color) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.color.getShaderFunction)) {\n    this._colorShaderFunction = this.color.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"vec4\"\n    );\n  } else {\n    this._colorShaderFunction = undefined;\n  }\n\n  this._colorShaderTranslucent = shaderState.translucent;\n  return this._colorShaderFunction;\n};\n\n/**\n * Gets the show shader function for this style.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getShowShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._showShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._showShaderFunction;\n  }\n\n  this._showShaderFunctionReady = true;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.show) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.show.getShaderFunction)) {\n    this._showShaderFunction = this.show.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"bool\"\n    );\n  } else {\n    this._showShaderFunction = undefined;\n  }\n  return this._showShaderFunction;\n};\n\n/**\n * Gets the pointSize shader function for this style.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getPointSizeShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._pointSizeShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._pointSizeShaderFunction;\n  }\n\n  this._pointSizeShaderFunctionReady = true;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.pointSize) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.pointSize.getShaderFunction)) {\n    this._pointSizeShaderFunction = this.pointSize.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"float\"\n    );\n  } else {\n    this._pointSizeShaderFunction = undefined;\n  }\n\n  return this._pointSizeShaderFunction;\n};\n\n/**\n * Gets the variables used by the style.\n *\n * @returns {String[]} The variables used by the style.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getVariables = function () {\n  var variables = [];\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.color) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.color.getVariables)) {\n    variables.push.apply(variables, this.color.getVariables());\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.show) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.show.getVariables)) {\n    variables.push.apply(variables, this.show.getVariables());\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.pointSize) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z)(this.pointSize.getVariables)) {\n    variables.push.apply(variables, this.pointSize.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\n/* harmony default export */ __webpack_exports__[\"Z\"] = (Cesium3DTileStyle);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39154\n")},79459:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82982);\n\n\n/**\n * @private\n */\nfunction Cesium3DTileStyleEngine() {\n  this._style = undefined; // The style provided by the user\n  this._styleDirty = false; // true when the style is reassigned\n  this._lastStyleTime = 0; // The "time" when the last style was assigned\n}\n\nObject.defineProperties(Cesium3DTileStyleEngine.prototype, {\n  style: {\n    get: function () {\n      return this._style;\n    },\n    set: function (value) {\n      if (value === this._style) {\n        return;\n      }\n      this._style = value;\n      this._styleDirty = true;\n    },\n  },\n});\n\nCesium3DTileStyleEngine.prototype.makeDirty = function () {\n  this._styleDirty = true;\n};\n\nCesium3DTileStyleEngine.prototype.resetDirty = function () {\n  this._styleDirty = false;\n};\n\nCesium3DTileStyleEngine.prototype.applyStyle = function (tileset) {\n  if (!tileset.ready) {\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this._style) && !this._style.ready) {\n    return;\n  }\n\n  var styleDirty = this._styleDirty;\n\n  if (styleDirty) {\n    // Increase "time", so the style is applied to all visible tiles\n    ++this._lastStyleTime;\n  }\n\n  var lastStyleTime = this._lastStyleTime;\n  var statistics = tileset._statistics;\n\n  // If a new style was assigned, loop through all the visible tiles; otherwise, loop through\n  // only the tiles that are newly visible, i.e., they are visible this frame, but were not\n  // visible last frame.  In many cases, the newly selected tiles list will be short or empty.\n  var tiles = styleDirty\n    ? tileset._selectedTiles\n    : tileset._selectedTilesToStyle;\n  // PERFORMANCE_IDEA: does mouse-over picking basically trash this?  We need to style on\n  // pick, for example, because a feature\'s show may be false.\n\n  var length = tiles.length;\n  for (var i = 0; i < length; ++i) {\n    var tile = tiles[i];\n    if (tile.lastStyleTime !== lastStyleTime) {\n      // Apply the style to this tile if it wasn\'t already applied because:\n      //   1) the user assigned a new style to the tileset\n      //   2) this tile is now visible, but it wasn\'t visible when the style was first assigned\n      var content = tile.content;\n      tile.lastStyleTime = lastStyleTime;\n      content.applyStyle(this._style);\n      statistics.numberOfFeaturesStyled += content.featuresLength;\n      ++statistics.numberOfTilesStyled;\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTileStyleEngine);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk0NTkuanMiLCJtYXBwaW5ncyI6IjtBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsNEJBQTRCO0FBQzVCLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQ2VzaXVtM0RUaWxlU3R5bGVFbmdpbmUuanM/MTAyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQ2VzaXVtM0RUaWxlU3R5bGVFbmdpbmUoKSB7XG4gIHRoaXMuX3N0eWxlID0gdW5kZWZpbmVkOyAvLyBUaGUgc3R5bGUgcHJvdmlkZWQgYnkgdGhlIHVzZXJcbiAgdGhpcy5fc3R5bGVEaXJ0eSA9IGZhbHNlOyAvLyB0cnVlIHdoZW4gdGhlIHN0eWxlIGlzIHJlYXNzaWduZWRcbiAgdGhpcy5fbGFzdFN0eWxlVGltZSA9IDA7IC8vIFRoZSBcInRpbWVcIiB3aGVuIHRoZSBsYXN0IHN0eWxlIHdhcyBhc3NpZ25lZFxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDZXNpdW0zRFRpbGVTdHlsZUVuZ2luZS5wcm90b3R5cGUsIHtcbiAgc3R5bGU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHRoaXMuX3N0eWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0eWxlID0gdmFsdWU7XG4gICAgICB0aGlzLl9zdHlsZURpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuICB9LFxufSk7XG5cbkNlc2l1bTNEVGlsZVN0eWxlRW5naW5lLnByb3RvdHlwZS5tYWtlRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3N0eWxlRGlydHkgPSB0cnVlO1xufTtcblxuQ2VzaXVtM0RUaWxlU3R5bGVFbmdpbmUucHJvdG90eXBlLnJlc2V0RGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3N0eWxlRGlydHkgPSBmYWxzZTtcbn07XG5cbkNlc2l1bTNEVGlsZVN0eWxlRW5naW5lLnByb3RvdHlwZS5hcHBseVN0eWxlID0gZnVuY3Rpb24gKHRpbGVzZXQpIHtcbiAgaWYgKCF0aWxlc2V0LnJlYWR5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRlZmluZWQodGhpcy5fc3R5bGUpICYmICF0aGlzLl9zdHlsZS5yZWFkeSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZURpcnR5ID0gdGhpcy5fc3R5bGVEaXJ0eTtcblxuICBpZiAoc3R5bGVEaXJ0eSkge1xuICAgIC8vIEluY3JlYXNlIFwidGltZVwiLCBzbyB0aGUgc3R5bGUgaXMgYXBwbGllZCB0byBhbGwgdmlzaWJsZSB0aWxlc1xuICAgICsrdGhpcy5fbGFzdFN0eWxlVGltZTtcbiAgfVxuXG4gIHZhciBsYXN0U3R5bGVUaW1lID0gdGhpcy5fbGFzdFN0eWxlVGltZTtcbiAgdmFyIHN0YXRpc3RpY3MgPSB0aWxlc2V0Ll9zdGF0aXN0aWNzO1xuXG4gIC8vIElmIGEgbmV3IHN0eWxlIHdhcyBhc3NpZ25lZCwgbG9vcCB0aHJvdWdoIGFsbCB0aGUgdmlzaWJsZSB0aWxlczsgb3RoZXJ3aXNlLCBsb29wIHRocm91Z2hcbiAgLy8gb25seSB0aGUgdGlsZXMgdGhhdCBhcmUgbmV3bHkgdmlzaWJsZSwgaS5lLiwgdGhleSBhcmUgdmlzaWJsZSB0aGlzIGZyYW1lLCBidXQgd2VyZSBub3RcbiAgLy8gdmlzaWJsZSBsYXN0IGZyYW1lLiAgSW4gbWFueSBjYXNlcywgdGhlIG5ld2x5IHNlbGVjdGVkIHRpbGVzIGxpc3Qgd2lsbCBiZSBzaG9ydCBvciBlbXB0eS5cbiAgdmFyIHRpbGVzID0gc3R5bGVEaXJ0eVxuICAgID8gdGlsZXNldC5fc2VsZWN0ZWRUaWxlc1xuICAgIDogdGlsZXNldC5fc2VsZWN0ZWRUaWxlc1RvU3R5bGU7XG4gIC8vIFBFUkZPUk1BTkNFX0lERUE6IGRvZXMgbW91c2Utb3ZlciBwaWNraW5nIGJhc2ljYWxseSB0cmFzaCB0aGlzPyAgV2UgbmVlZCB0byBzdHlsZSBvblxuICAvLyBwaWNrLCBmb3IgZXhhbXBsZSwgYmVjYXVzZSBhIGZlYXR1cmUncyBzaG93IG1heSBiZSBmYWxzZS5cblxuICB2YXIgbGVuZ3RoID0gdGlsZXMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHRpbGUgPSB0aWxlc1tpXTtcbiAgICBpZiAodGlsZS5sYXN0U3R5bGVUaW1lICE9PSBsYXN0U3R5bGVUaW1lKSB7XG4gICAgICAvLyBBcHBseSB0aGUgc3R5bGUgdG8gdGhpcyB0aWxlIGlmIGl0IHdhc24ndCBhbHJlYWR5IGFwcGxpZWQgYmVjYXVzZTpcbiAgICAgIC8vICAgMSkgdGhlIHVzZXIgYXNzaWduZWQgYSBuZXcgc3R5bGUgdG8gdGhlIHRpbGVzZXRcbiAgICAgIC8vICAgMikgdGhpcyB0aWxlIGlzIG5vdyB2aXNpYmxlLCBidXQgaXQgd2Fzbid0IHZpc2libGUgd2hlbiB0aGUgc3R5bGUgd2FzIGZpcnN0IGFzc2lnbmVkXG4gICAgICB2YXIgY29udGVudCA9IHRpbGUuY29udGVudDtcbiAgICAgIHRpbGUubGFzdFN0eWxlVGltZSA9IGxhc3RTdHlsZVRpbWU7XG4gICAgICBjb250ZW50LmFwcGx5U3R5bGUodGhpcy5fc3R5bGUpO1xuICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkZlYXR1cmVzU3R5bGVkICs9IGNvbnRlbnQuZmVhdHVyZXNMZW5ndGg7XG4gICAgICArK3N0YXRpc3RpY3MubnVtYmVyT2ZUaWxlc1N0eWxlZDtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBDZXNpdW0zRFRpbGVTdHlsZUVuZ2luZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79459\n')}}]);