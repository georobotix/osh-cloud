"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[440],{4260:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Represents the position relative to the terrain.\n *\n * @enum {Number}\n */\nvar HeightReference = {\n  /**\n   * The position is absolute.\n   * @type {Number}\n   * @constant\n   */\n  NONE: 0,\n\n  /**\n   * The position is clamped to the terrain.\n   * @type {Number}\n   * @constant\n   */\n  CLAMP_TO_GROUND: 1,\n\n  /**\n   * The position height is the height above the terrain.\n   * @type {Number}\n   * @constant\n   */\n  RELATIVE_TO_GROUND: 2,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(HeightReference));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI2MC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSw4QkFBOEIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9IZWlnaHRSZWZlcmVuY2UuanM/MjMxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcHJlc2VudHMgdGhlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB0ZXJyYWluLlxuICpcbiAqIEBlbnVtIHtOdW1iZXJ9XG4gKi9cbnZhciBIZWlnaHRSZWZlcmVuY2UgPSB7XG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTk9ORTogMCxcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIGlzIGNsYW1wZWQgdG8gdGhlIHRlcnJhaW4uXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgQ0xBTVBfVE9fR1JPVU5EOiAxLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gaGVpZ2h0IGlzIHRoZSBoZWlnaHQgYWJvdmUgdGhlIHRlcnJhaW4uXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgUkVMQVRJVkVfVE9fR1JPVU5EOiAyLFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoSGVpZ2h0UmVmZXJlbmNlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4260\n')},62919:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * The horizontal location of an origin relative to an object, e.g., a {@link Billboard}\n * or {@link Label}.  For example, setting the horizontal origin to <code>LEFT</code>\n * or <code>RIGHT</code> will display a billboard to the left or right (in screen space)\n * of the anchor position.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.setHorizontalOrigin.png' width='648' height='196' /><br />\n * </div>\n *\n * @enum {Number}\n *\n * @see Billboard#horizontalOrigin\n * @see Label#horizontalOrigin\n */\nvar HorizontalOrigin = {\n  /**\n   * The origin is at the horizontal center of the object.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CENTER: 0,\n\n  /**\n   * The origin is on the left side of the object.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LEFT: 1,\n\n  /**\n   * The origin is on the right side of the object.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RIGHT: -1,\n};\n/* harmony default export */ __webpack_exports__[\"Z\"] = (Object.freeze(HorizontalOrigin));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI5MTkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx3RUFBd0U7QUFDeEUsT0FBTyxZQUFZO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsK0JBQStCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvSG9yaXpvbnRhbE9yaWdpbi5qcz8yMWRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGhvcml6b250YWwgbG9jYXRpb24gb2YgYW4gb3JpZ2luIHJlbGF0aXZlIHRvIGFuIG9iamVjdCwgZS5nLiwgYSB7QGxpbmsgQmlsbGJvYXJkfVxuICogb3Ige0BsaW5rIExhYmVsfS4gIEZvciBleGFtcGxlLCBzZXR0aW5nIHRoZSBob3Jpem9udGFsIG9yaWdpbiB0byA8Y29kZT5MRUZUPC9jb2RlPlxuICogb3IgPGNvZGU+UklHSFQ8L2NvZGU+IHdpbGwgZGlzcGxheSBhIGJpbGxib2FyZCB0byB0aGUgbGVmdCBvciByaWdodCAoaW4gc2NyZWVuIHNwYWNlKVxuICogb2YgdGhlIGFuY2hvciBwb3NpdGlvbi5cbiAqIDxiciAvPjxiciAvPlxuICogPGRpdiBhbGlnbj0nY2VudGVyJz5cbiAqIDxpbWcgc3JjPSdJbWFnZXMvQmlsbGJvYXJkLnNldEhvcml6b250YWxPcmlnaW4ucG5nJyB3aWR0aD0nNjQ4JyBoZWlnaHQ9JzE5NicgLz48YnIgLz5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbnVtIHtOdW1iZXJ9XG4gKlxuICogQHNlZSBCaWxsYm9hcmQjaG9yaXpvbnRhbE9yaWdpblxuICogQHNlZSBMYWJlbCNob3Jpem9udGFsT3JpZ2luXG4gKi9cbnZhciBIb3Jpem9udGFsT3JpZ2luID0ge1xuICAvKipcbiAgICogVGhlIG9yaWdpbiBpcyBhdCB0aGUgaG9yaXpvbnRhbCBjZW50ZXIgb2YgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBDRU5URVI6IDAsXG5cbiAgLyoqXG4gICAqIFRoZSBvcmlnaW4gaXMgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgb2JqZWN0LlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIExFRlQ6IDEsXG5cbiAgLyoqXG4gICAqIFRoZSBvcmlnaW4gaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBSSUdIVDogLTEsXG59O1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShIb3Jpem9udGFsT3JpZ2luKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62919\n")},53901:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86511);\n/* harmony import */ var _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73919);\n\n\n\n\n/**\n * Stores details about a tile of imagery.\n *\n * @alias Imagery\n * @private\n */\nfunction Imagery(imageryLayer, x, y, level, rectangle) {\n  this.imageryLayer = imageryLayer;\n  this.x = x;\n  this.y = y;\n  this.level = level;\n  this.request = undefined;\n\n  if (level !== 0) {\n    var parentX = (x / 2) | 0;\n    var parentY = (y / 2) | 0;\n    var parentLevel = level - 1;\n    this.parent = imageryLayer.getImageryFromCache(\n      parentX,\n      parentY,\n      parentLevel\n    );\n  }\n\n  this.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNLOADED */ .Z.UNLOADED;\n  this.imageUrl = undefined;\n  this.image = undefined;\n  this.texture = undefined;\n  this.textureWebMercator = undefined;\n  this.credits = undefined;\n  this.referenceCount = 0;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(rectangle) && imageryLayer.imageryProvider.ready) {\n    var tilingScheme = imageryLayer.imageryProvider.tilingScheme;\n    rectangle = tilingScheme.tileXYToRectangle(x, y, level);\n  }\n\n  this.rectangle = rectangle;\n}\nImagery.createPlaceholder = function (imageryLayer) {\n  var result = new Imagery(imageryLayer, 0, 0, 0);\n  result.addReference();\n  result.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PLACEHOLDER */ .Z.PLACEHOLDER;\n  return result;\n};\n\nImagery.prototype.addReference = function () {\n  ++this.referenceCount;\n};\n\nImagery.prototype.releaseReference = function () {\n  --this.referenceCount;\n\n  if (this.referenceCount === 0) {\n    this.imageryLayer.removeImageryFromCache(this);\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.parent)) {\n      this.parent.releaseReference();\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.image) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.image.destroy)) {\n      this.image.destroy();\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.texture)) {\n      this.texture.destroy();\n    }\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.textureWebMercator) &&\n      this.texture !== this.textureWebMercator\n    ) {\n      this.textureWebMercator.destroy();\n    }\n\n    (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this);\n\n    return 0;\n  }\n\n  return this.referenceCount;\n};\n\nImagery.prototype.processStateMachine = function (\n  frameState,\n  needGeographicProjection,\n  skipLoading\n) {\n  if (this.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNLOADED */ .Z.UNLOADED && !skipLoading) {\n    this.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].TRANSITIONING */ .Z.TRANSITIONING;\n    this.imageryLayer._requestImagery(this);\n  }\n\n  if (this.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].RECEIVED */ .Z.RECEIVED) {\n    this.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].TRANSITIONING */ .Z.TRANSITIONING;\n    this.imageryLayer._createTexture(frameState.context, this);\n  }\n\n  // If the imagery is already ready, but we need a geographic version and don\'t have it yet,\n  // we still need to do the reprojection step. This can happen if the Web Mercator version\n  // is fine initially, but the geographic one is needed later.\n  var needsReprojection =\n    this.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].READY */ .Z.READY &&\n    needGeographicProjection &&\n    !this.texture;\n\n  if (this.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].TEXTURE_LOADED */ .Z.TEXTURE_LOADED || needsReprojection) {\n    this.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].TRANSITIONING */ .Z.TRANSITIONING;\n    this.imageryLayer._reprojectTexture(\n      frameState,\n      this,\n      needGeographicProjection\n    );\n  }\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Imagery);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM5MDEuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXlDO0FBQ1k7QUFDUjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsbUZBQXFCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLHFFQUFPO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIseUZBQXdCO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxRQUFRLHFFQUFPO0FBQ2Y7QUFDQTs7QUFFQSxRQUFRLHFFQUFPLGdCQUFnQixxRUFBTztBQUN0QztBQUNBOztBQUVBLFFBQVEscUVBQU87QUFDZjtBQUNBOztBQUVBO0FBQ0EsTUFBTSxxRUFBTztBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksMkVBQWE7O0FBRWpCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1GQUFxQjtBQUMxQyxpQkFBaUIsNkZBQTBCO0FBQzNDO0FBQ0E7O0FBRUEscUJBQXFCLG1GQUFxQjtBQUMxQyxpQkFBaUIsNkZBQTBCO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkVBQWtCO0FBQ3JDO0FBQ0E7O0FBRUEscUJBQXFCLCtGQUEyQjtBQUNoRCxpQkFBaUIsNkZBQTBCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsT0FBTyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0ltYWdlcnkuanM/MTM0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgZGVzdHJveU9iamVjdCBmcm9tIFwiLi4vQ29yZS9kZXN0cm95T2JqZWN0LmpzXCI7XG5pbXBvcnQgSW1hZ2VyeVN0YXRlIGZyb20gXCIuL0ltYWdlcnlTdGF0ZS5qc1wiO1xuXG4vKipcbiAqIFN0b3JlcyBkZXRhaWxzIGFib3V0IGEgdGlsZSBvZiBpbWFnZXJ5LlxuICpcbiAqIEBhbGlhcyBJbWFnZXJ5XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBJbWFnZXJ5KGltYWdlcnlMYXllciwgeCwgeSwgbGV2ZWwsIHJlY3RhbmdsZSkge1xuICB0aGlzLmltYWdlcnlMYXllciA9IGltYWdlcnlMYXllcjtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB0aGlzLnJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGxldmVsICE9PSAwKSB7XG4gICAgdmFyIHBhcmVudFggPSAoeCAvIDIpIHwgMDtcbiAgICB2YXIgcGFyZW50WSA9ICh5IC8gMikgfCAwO1xuICAgIHZhciBwYXJlbnRMZXZlbCA9IGxldmVsIC0gMTtcbiAgICB0aGlzLnBhcmVudCA9IGltYWdlcnlMYXllci5nZXRJbWFnZXJ5RnJvbUNhY2hlKFxuICAgICAgcGFyZW50WCxcbiAgICAgIHBhcmVudFksXG4gICAgICBwYXJlbnRMZXZlbFxuICAgICk7XG4gIH1cblxuICB0aGlzLnN0YXRlID0gSW1hZ2VyeVN0YXRlLlVOTE9BREVEO1xuICB0aGlzLmltYWdlVXJsID0gdW5kZWZpbmVkO1xuICB0aGlzLmltYWdlID0gdW5kZWZpbmVkO1xuICB0aGlzLnRleHR1cmUgPSB1bmRlZmluZWQ7XG4gIHRoaXMudGV4dHVyZVdlYk1lcmNhdG9yID0gdW5kZWZpbmVkO1xuICB0aGlzLmNyZWRpdHMgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmVmZXJlbmNlQ291bnQgPSAwO1xuXG4gIGlmICghZGVmaW5lZChyZWN0YW5nbGUpICYmIGltYWdlcnlMYXllci5pbWFnZXJ5UHJvdmlkZXIucmVhZHkpIHtcbiAgICB2YXIgdGlsaW5nU2NoZW1lID0gaW1hZ2VyeUxheWVyLmltYWdlcnlQcm92aWRlci50aWxpbmdTY2hlbWU7XG4gICAgcmVjdGFuZ2xlID0gdGlsaW5nU2NoZW1lLnRpbGVYWVRvUmVjdGFuZ2xlKHgsIHksIGxldmVsKTtcbiAgfVxuXG4gIHRoaXMucmVjdGFuZ2xlID0gcmVjdGFuZ2xlO1xufVxuSW1hZ2VyeS5jcmVhdGVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChpbWFnZXJ5TGF5ZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBJbWFnZXJ5KGltYWdlcnlMYXllciwgMCwgMCwgMCk7XG4gIHJlc3VsdC5hZGRSZWZlcmVuY2UoKTtcbiAgcmVzdWx0LnN0YXRlID0gSW1hZ2VyeVN0YXRlLlBMQUNFSE9MREVSO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuSW1hZ2VyeS5wcm90b3R5cGUuYWRkUmVmZXJlbmNlID0gZnVuY3Rpb24gKCkge1xuICArK3RoaXMucmVmZXJlbmNlQ291bnQ7XG59O1xuXG5JbWFnZXJ5LnByb3RvdHlwZS5yZWxlYXNlUmVmZXJlbmNlID0gZnVuY3Rpb24gKCkge1xuICAtLXRoaXMucmVmZXJlbmNlQ291bnQ7XG5cbiAgaWYgKHRoaXMucmVmZXJlbmNlQ291bnQgPT09IDApIHtcbiAgICB0aGlzLmltYWdlcnlMYXllci5yZW1vdmVJbWFnZXJ5RnJvbUNhY2hlKHRoaXMpO1xuXG4gICAgaWYgKGRlZmluZWQodGhpcy5wYXJlbnQpKSB7XG4gICAgICB0aGlzLnBhcmVudC5yZWxlYXNlUmVmZXJlbmNlKCk7XG4gICAgfVxuXG4gICAgaWYgKGRlZmluZWQodGhpcy5pbWFnZSkgJiYgZGVmaW5lZCh0aGlzLmltYWdlLmRlc3Ryb3kpKSB7XG4gICAgICB0aGlzLmltYWdlLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBpZiAoZGVmaW5lZCh0aGlzLnRleHR1cmUpKSB7XG4gICAgICB0aGlzLnRleHR1cmUuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGRlZmluZWQodGhpcy50ZXh0dXJlV2ViTWVyY2F0b3IpICYmXG4gICAgICB0aGlzLnRleHR1cmUgIT09IHRoaXMudGV4dHVyZVdlYk1lcmNhdG9yXG4gICAgKSB7XG4gICAgICB0aGlzLnRleHR1cmVXZWJNZXJjYXRvci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgZGVzdHJveU9iamVjdCh0aGlzKTtcblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMucmVmZXJlbmNlQ291bnQ7XG59O1xuXG5JbWFnZXJ5LnByb3RvdHlwZS5wcm9jZXNzU3RhdGVNYWNoaW5lID0gZnVuY3Rpb24gKFxuICBmcmFtZVN0YXRlLFxuICBuZWVkR2VvZ3JhcGhpY1Byb2plY3Rpb24sXG4gIHNraXBMb2FkaW5nXG4pIHtcbiAgaWYgKHRoaXMuc3RhdGUgPT09IEltYWdlcnlTdGF0ZS5VTkxPQURFRCAmJiAhc2tpcExvYWRpbmcpIHtcbiAgICB0aGlzLnN0YXRlID0gSW1hZ2VyeVN0YXRlLlRSQU5TSVRJT05JTkc7XG4gICAgdGhpcy5pbWFnZXJ5TGF5ZXIuX3JlcXVlc3RJbWFnZXJ5KHRoaXMpO1xuICB9XG5cbiAgaWYgKHRoaXMuc3RhdGUgPT09IEltYWdlcnlTdGF0ZS5SRUNFSVZFRCkge1xuICAgIHRoaXMuc3RhdGUgPSBJbWFnZXJ5U3RhdGUuVFJBTlNJVElPTklORztcbiAgICB0aGlzLmltYWdlcnlMYXllci5fY3JlYXRlVGV4dHVyZShmcmFtZVN0YXRlLmNvbnRleHQsIHRoaXMpO1xuICB9XG5cbiAgLy8gSWYgdGhlIGltYWdlcnkgaXMgYWxyZWFkeSByZWFkeSwgYnV0IHdlIG5lZWQgYSBnZW9ncmFwaGljIHZlcnNpb24gYW5kIGRvbid0IGhhdmUgaXQgeWV0LFxuICAvLyB3ZSBzdGlsbCBuZWVkIHRvIGRvIHRoZSByZXByb2plY3Rpb24gc3RlcC4gVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBXZWIgTWVyY2F0b3IgdmVyc2lvblxuICAvLyBpcyBmaW5lIGluaXRpYWxseSwgYnV0IHRoZSBnZW9ncmFwaGljIG9uZSBpcyBuZWVkZWQgbGF0ZXIuXG4gIHZhciBuZWVkc1JlcHJvamVjdGlvbiA9XG4gICAgdGhpcy5zdGF0ZSA9PT0gSW1hZ2VyeVN0YXRlLlJFQURZICYmXG4gICAgbmVlZEdlb2dyYXBoaWNQcm9qZWN0aW9uICYmXG4gICAgIXRoaXMudGV4dHVyZTtcblxuICBpZiAodGhpcy5zdGF0ZSA9PT0gSW1hZ2VyeVN0YXRlLlRFWFRVUkVfTE9BREVEIHx8IG5lZWRzUmVwcm9qZWN0aW9uKSB7XG4gICAgdGhpcy5zdGF0ZSA9IEltYWdlcnlTdGF0ZS5UUkFOU0lUSU9OSU5HO1xuICAgIHRoaXMuaW1hZ2VyeUxheWVyLl9yZXByb2plY3RUZXh0dXJlKFxuICAgICAgZnJhbWVTdGF0ZSxcbiAgICAgIHRoaXMsXG4gICAgICBuZWVkR2VvZ3JhcGhpY1Byb2plY3Rpb25cbiAgICApO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgSW1hZ2VyeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53901\n')},59379:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63367);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96037);\n/* harmony import */ var _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(39756);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(22832);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99417);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(38443);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96190);\n/* harmony import */ var _Core_Request_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22426);\n/* harmony import */ var _Core_RequestState_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(6224);\n/* harmony import */ var _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82968);\n/* harmony import */ var _Core_TerrainProvider_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(1497);\n/* harmony import */ var _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(9121);\n/* harmony import */ var _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(79962);\n/* harmony import */ var _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(99095);\n/* harmony import */ var _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(58597);\n/* harmony import */ var _Renderer_ComputeCommand_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(92357);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_MipmapHint_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(45368);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(46588);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(88453);\n/* harmony import */ var _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(18192);\n/* harmony import */ var _Shaders_ReprojectWebMercatorFS_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(4443);\n/* harmony import */ var _Shaders_ReprojectWebMercatorVS_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(29560);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(13222);\n/* harmony import */ var _Imagery_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(53901);\n/* harmony import */ var _ImagerySplitDirection_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(80955);\n/* harmony import */ var _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(73919);\n/* harmony import */ var _TileImagery_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(70262);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An imagery layer that displays tiled image data from a single imagery provider\n * on a {@link Globe}.\n *\n * @alias ImageryLayer\n * @constructor\n *\n * @param {ImageryProvider} imageryProvider The imagery provider to use.\n * @param {Object} [options] Object with the following properties:\n * @param {Rectangle} [options.rectangle=imageryProvider.rectangle] The rectangle of the layer.  This rectangle\n *        can limit the visible portion of the imagery provider.\n * @param {Number|Function} [options.alpha=1.0] The alpha blending value of this layer, from 0.0 to 1.0.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates of the\n *                          imagery tile for which the alpha is required, and it is expected to return\n *                          the alpha value to use for the tile.\n * @param {Number|Function} [options.nightAlpha=1.0] The alpha blending value of this layer on the night side of the globe, from 0.0 to 1.0.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates of the\n *                          imagery tile for which the alpha is required, and it is expected to return\n *                          the alpha value to use for the tile. This only takes effect when <code>enableLighting</code> is <code>true</code>.\n * @param {Number|Function} [options.dayAlpha=1.0] The alpha blending value of this layer on the day side of the globe, from 0.0 to 1.0.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates of the\n *                          imagery tile for which the alpha is required, and it is expected to return\n *                          the alpha value to use for the tile. This only takes effect when <code>enableLighting</code> is <code>true</code>.\n * @param {Number|Function} [options.brightness=1.0] The brightness of this layer.  1.0 uses the unmodified imagery\n *                          color.  Less than 1.0 makes the imagery darker while greater than 1.0 makes it brighter.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates of the\n *                          imagery tile for which the brightness is required, and it is expected to return\n *                          the brightness value to use for the tile.  The function is executed for every\n *                          frame and for every tile, so it must be fast.\n * @param {Number|Function} [options.contrast=1.0] The contrast of this layer.  1.0 uses the unmodified imagery color.\n *                          Less than 1.0 reduces the contrast while greater than 1.0 increases it.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates of the\n *                          imagery tile for which the contrast is required, and it is expected to return\n *                          the contrast value to use for the tile.  The function is executed for every\n *                          frame and for every tile, so it must be fast.\n * @param {Number|Function} [options.hue=0.0] The hue of this layer.  0.0 uses the unmodified imagery color.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates\n *                          of the imagery tile for which the hue is required, and it is expected to return\n *                          the contrast value to use for the tile.  The function is executed for every\n *                          frame and for every tile, so it must be fast.\n * @param {Number|Function} [options.saturation=1.0] The saturation of this layer.  1.0 uses the unmodified imagery color.\n *                          Less than 1.0 reduces the saturation while greater than 1.0 increases it.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates\n *                          of the imagery tile for which the saturation is required, and it is expected to return\n *                          the contrast value to use for the tile.  The function is executed for every\n *                          frame and for every tile, so it must be fast.\n * @param {Number|Function} [options.gamma=1.0] The gamma correction to apply to this layer.  1.0 uses the unmodified imagery color.\n *                          This can either be a simple number or a function with the signature\n *                          <code>function(frameState, layer, x, y, level)</code>.  The function is passed the\n *                          current frame state, this layer, and the x, y, and level coordinates of the\n *                          imagery tile for which the gamma is required, and it is expected to return\n *                          the gamma value to use for the tile.  The function is executed for every\n *                          frame and for every tile, so it must be fast.\n * @param {ImagerySplitDirection|Function} [options.splitDirection=ImagerySplitDirection.NONE] The {@link ImagerySplitDirection} split to apply to this layer.\n * @param {TextureMinificationFilter} [options.minificationFilter=TextureMinificationFilter.LINEAR] The\n *                                    texture minification filter to apply to this layer. Possible values\n *                                    are <code>TextureMinificationFilter.LINEAR</code> and\n *                                    <code>TextureMinificationFilter.NEAREST</code>.\n * @param {TextureMagnificationFilter} [options.magnificationFilter=TextureMagnificationFilter.LINEAR] The\n *                                     texture minification filter to apply to this layer. Possible values\n *                                     are <code>TextureMagnificationFilter.LINEAR</code> and\n *                                     <code>TextureMagnificationFilter.NEAREST</code>.\n * @param {Boolean} [options.show=true] True if the layer is shown; otherwise, false.\n * @param {Number} [options.maximumAnisotropy=maximum supported] The maximum anisotropy level to use\n *        for texture filtering.  If this parameter is not specified, the maximum anisotropy supported\n *        by the WebGL stack will be used.  Larger values make the imagery look better in horizon\n *        views.\n * @param {Number} [options.minimumTerrainLevel] The minimum terrain level-of-detail at which to show this imagery layer,\n *                 or undefined to show it at all levels.  Level zero is the least-detailed level.\n * @param {Number} [options.maximumTerrainLevel] The maximum terrain level-of-detail at which to show this imagery layer,\n *                 or undefined to show it at all levels.  Level zero is the least-detailed level.\n * @param {Rectangle} [options.cutoutRectangle] Cartographic rectangle for cutting out a portion of this ImageryLayer.\n * @param {Color} [options.colorToAlpha] Color to be used as alpha.\n * @param {Number} [options.colorToAlphaThreshold=0.004] Threshold for color-to-alpha.\n */\nfunction ImageryLayer(imageryProvider, options) {\n  this._imageryProvider = imageryProvider;\n\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * The alpha blending value of this layer, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.alpha = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.alpha,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultAlpha, 1.0)\n  );\n\n  /**\n   * The alpha blending value of this layer on the night side of the globe, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque. This only takes effect when {@link Globe#enableLighting} is <code>true</code>.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.nightAlpha = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.nightAlpha,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultNightAlpha, 1.0)\n  );\n\n  /**\n   * The alpha blending value of this layer on the day side of the globe, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque. This only takes effect when {@link Globe#enableLighting} is <code>true</code>.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.dayAlpha = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.dayAlpha,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultDayAlpha, 1.0)\n  );\n\n  /**\n   * The brightness of this layer.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number}\n   * @default {@link ImageryLayer.DEFAULT_BRIGHTNESS}\n   */\n  this.brightness = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.brightness,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      imageryProvider.defaultBrightness,\n      ImageryLayer.DEFAULT_BRIGHTNESS\n    )\n  );\n\n  /**\n   * The contrast of this layer.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number}\n   * @default {@link ImageryLayer.DEFAULT_CONTRAST}\n   */\n  this.contrast = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.contrast,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultContrast, ImageryLayer.DEFAULT_CONTRAST)\n  );\n\n  /**\n   * The hue of this layer in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number}\n   * @default {@link ImageryLayer.DEFAULT_HUE}\n   */\n  this.hue = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.hue,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultHue, ImageryLayer.DEFAULT_HUE)\n  );\n\n  /**\n   * The saturation of this layer. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number}\n   * @default {@link ImageryLayer.DEFAULT_SATURATION}\n   */\n  this.saturation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.saturation,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      imageryProvider.defaultSaturation,\n      ImageryLayer.DEFAULT_SATURATION\n    )\n  );\n\n  /**\n   * The gamma correction to apply to this layer.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number}\n   * @default {@link ImageryLayer.DEFAULT_GAMMA}\n   */\n  this.gamma = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.gamma,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultGamma, ImageryLayer.DEFAULT_GAMMA)\n  );\n\n  /**\n   * The {@link ImagerySplitDirection} to apply to this layer.\n   *\n   * @type {ImagerySplitDirection}\n   * @default {@link ImageryLayer.DEFAULT_SPLIT}\n   */\n  this.splitDirection = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.splitDirection,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(imageryProvider.defaultSplit, ImageryLayer.DEFAULT_SPLIT)\n  );\n\n  /**\n   * The {@link TextureMinificationFilter} to apply to this layer.\n   * Possible values are {@link TextureMinificationFilter.LINEAR} (the default)\n   * and {@link TextureMinificationFilter.NEAREST}.\n   *\n   * To take effect, this property must be set immediately after adding the imagery layer.\n   * Once a texture is loaded it won\'t be possible to change the texture filter used.\n   *\n   * @type {TextureMinificationFilter}\n   * @default {@link ImageryLayer.DEFAULT_MINIFICATION_FILTER}\n   */\n  this.minificationFilter = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.minificationFilter,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      imageryProvider.defaultMinificationFilter,\n      ImageryLayer.DEFAULT_MINIFICATION_FILTER\n    )\n  );\n\n  /**\n   * The {@link TextureMagnificationFilter} to apply to this layer.\n   * Possible values are {@link TextureMagnificationFilter.LINEAR} (the default)\n   * and {@link TextureMagnificationFilter.NEAREST}.\n   *\n   * To take effect, this property must be set immediately after adding the imagery layer.\n   * Once a texture is loaded it won\'t be possible to change the texture filter used.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default {@link ImageryLayer.DEFAULT_MAGNIFICATION_FILTER}\n   */\n  this.magnificationFilter = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.magnificationFilter,\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      imageryProvider.defaultMagnificationFilter,\n      ImageryLayer.DEFAULT_MAGNIFICATION_FILTER\n    )\n  );\n\n  /**\n   * Determines if this layer is shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.show, true);\n\n  this._minimumTerrainLevel = options.minimumTerrainLevel;\n  this._maximumTerrainLevel = options.maximumTerrainLevel;\n\n  this._rectangle = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.rectangle, _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE);\n  this._maximumAnisotropy = options.maximumAnisotropy;\n\n  this._imageryCache = {};\n\n  this._skeletonPlaceholder = new _TileImagery_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z(_Imagery_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"].createPlaceholder */ .Z.createPlaceholder(this));\n\n  // The value of the show property on the last update.\n  this._show = true;\n\n  // The index of this layer in the ImageryLayerCollection.\n  this._layerIndex = -1;\n\n  // true if this is the base (lowest shown) layer.\n  this._isBaseLayer = false;\n\n  this._requestImageError = undefined;\n\n  this._reprojectComputeCommands = [];\n\n  /**\n   * Rectangle cutout in this layer of imagery.\n   *\n   * @type {Rectangle}\n   */\n  this.cutoutRectangle = options.cutoutRectangle;\n\n  /**\n   * Color value that should be set to transparent.\n   *\n   * @type {Color}\n   */\n  this.colorToAlpha = options.colorToAlpha;\n\n  /**\n   * Normalized (0-1) threshold for color-to-alpha.\n   *\n   * @type {Number}\n   */\n  this.colorToAlphaThreshold = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.colorToAlphaThreshold,\n    ImageryLayer.DEFAULT_APPLY_COLOR_TO_ALPHA_THRESHOLD\n  );\n}\n\nObject.defineProperties(ImageryLayer.prototype, {\n  /**\n   * Gets the imagery provider for this layer.\n   * @memberof ImageryLayer.prototype\n   * @type {ImageryProvider}\n   * @readonly\n   */\n  imageryProvider: {\n    get: function () {\n      return this._imageryProvider;\n    },\n  },\n\n  /**\n   * Gets the rectangle of this layer.  If this rectangle is smaller than the rectangle of the\n   * {@link ImageryProvider}, only a portion of the imagery provider is shown.\n   * @memberof ImageryLayer.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n});\n\n/**\n * This value is used as the default brightness for the imagery layer if one is not provided during construction\n * or by the imagery provider. This value does not modify the brightness of the imagery.\n * @type {Number}\n * @default 1.0\n */\nImageryLayer.DEFAULT_BRIGHTNESS = 1.0;\n/**\n * This value is used as the default contrast for the imagery layer if one is not provided during construction\n * or by the imagery provider. This value does not modify the contrast of the imagery.\n * @type {Number}\n * @default 1.0\n */\nImageryLayer.DEFAULT_CONTRAST = 1.0;\n/**\n * This value is used as the default hue for the imagery layer if one is not provided during construction\n * or by the imagery provider. This value does not modify the hue of the imagery.\n * @type {Number}\n * @default 0.0\n */\nImageryLayer.DEFAULT_HUE = 0.0;\n/**\n * This value is used as the default saturation for the imagery layer if one is not provided during construction\n * or by the imagery provider. This value does not modify the saturation of the imagery.\n * @type {Number}\n * @default 1.0\n */\nImageryLayer.DEFAULT_SATURATION = 1.0;\n/**\n * This value is used as the default gamma for the imagery layer if one is not provided during construction\n * or by the imagery provider. This value does not modify the gamma of the imagery.\n * @type {Number}\n * @default 1.0\n */\nImageryLayer.DEFAULT_GAMMA = 1.0;\n\n/**\n * This value is used as the default split for the imagery layer if one is not provided during construction\n * or by the imagery provider.\n * @type {ImagerySplitDirection}\n * @default ImagerySplitDirection.NONE\n */\nImageryLayer.DEFAULT_SPLIT = _ImagerySplitDirection_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].NONE */ .Z.NONE;\n\n/**\n * This value is used as the default texture minification filter for the imagery layer if one is not provided\n * during construction or by the imagery provider.\n * @type {TextureMinificationFilter}\n * @default TextureMinificationFilter.LINEAR\n */\nImageryLayer.DEFAULT_MINIFICATION_FILTER = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].LINEAR */ .Z.LINEAR;\n\n/**\n * This value is used as the default texture magnification filter for the imagery layer if one is not provided\n * during construction or by the imagery provider.\n * @type {TextureMagnificationFilter}\n * @default TextureMagnificationFilter.LINEAR\n */\nImageryLayer.DEFAULT_MAGNIFICATION_FILTER = _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].LINEAR */ .Z.LINEAR;\n\n/**\n * This value is used as the default threshold for color-to-alpha if one is not provided\n * during construction or by the imagery provider.\n * @type {Number}\n * @default 0.004\n */\nImageryLayer.DEFAULT_APPLY_COLOR_TO_ALPHA_THRESHOLD = 0.004;\n\n/**\n * Gets a value indicating whether this layer is the base layer in the\n * {@link ImageryLayerCollection}.  The base layer is the one that underlies all\n * others.  It is special in that it is treated as if it has global rectangle, even if\n * it actually does not, by stretching the texels at the edges over the entire\n * globe.\n *\n * @returns {Boolean} true if this is the base layer; otherwise, false.\n */\nImageryLayer.prototype.isBaseLayer = function () {\n  return this._isBaseLayer;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ImageryLayer#destroy\n */\nImageryLayer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * imageryLayer = imageryLayer && imageryLayer.destroy();\n *\n * @see ImageryLayer#isDestroyed\n */\nImageryLayer.prototype.destroy = function () {\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n\nvar imageryBoundsScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\nvar tileImageryBoundsScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\nvar clippedRectangleScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\nvar terrainRectangleScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\n/**\n * Computes the intersection of this layer\'s rectangle with the imagery provider\'s availability rectangle,\n * producing the overall bounds of imagery that can be produced by this layer.\n *\n * @returns {Promise.<Rectangle>} A promise to a rectangle which defines the overall bounds of imagery that can be produced by this layer.\n *\n * @example\n * // Zoom to an imagery layer.\n * imageryLayer.getViewableRectangle().then(function (rectangle) {\n *     return camera.flyTo({\n *         destination: rectangle\n *     });\n * });\n */\nImageryLayer.prototype.getViewableRectangle = function () {\n  var imageryProvider = this._imageryProvider;\n  var rectangle = this._rectangle;\n  return imageryProvider.readyPromise.then(function () {\n    return _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].intersection */ .Z.intersection(imageryProvider.rectangle, rectangle);\n  });\n};\n\n/**\n * Create skeletons for the imagery tiles that partially or completely overlap a given terrain\n * tile.\n *\n * @private\n *\n * @param {Tile} tile The terrain tile.\n * @param {TerrainProvider} terrainProvider The terrain provider associated with the terrain tile.\n * @param {Number} insertionPoint The position to insert new skeletons before in the tile\'s imagery list.\n * @returns {Boolean} true if this layer overlaps any portion of the terrain tile; otherwise, false.\n */\nImageryLayer.prototype._createTileImagerySkeletons = function (\n  tile,\n  terrainProvider,\n  insertionPoint\n) {\n  var surfaceTile = tile.data;\n\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(this._minimumTerrainLevel) &&\n    tile.level < this._minimumTerrainLevel\n  ) {\n    return false;\n  }\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(this._maximumTerrainLevel) &&\n    tile.level > this._maximumTerrainLevel\n  ) {\n    return false;\n  }\n\n  var imageryProvider = this._imageryProvider;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(insertionPoint)) {\n    insertionPoint = surfaceTile.imagery.length;\n  }\n\n  if (!imageryProvider.ready) {\n    // The imagery provider is not ready, so we can\'t create skeletons, yet.\n    // Instead, add a placeholder so that we\'ll know to create\n    // the skeletons once the provider is ready.\n    this._skeletonPlaceholder.loadingImagery.addReference();\n    surfaceTile.imagery.splice(insertionPoint, 0, this._skeletonPlaceholder);\n    return true;\n  }\n\n  // Use Web Mercator for our texture coordinate computations if this imagery layer uses\n  // that projection and the terrain tile falls entirely inside the valid bounds of the\n  // projection.\n  var useWebMercatorT =\n    imageryProvider.tilingScheme.projection instanceof _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z &&\n    tile.rectangle.north < _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].MaximumLatitude */ .Z.MaximumLatitude &&\n    tile.rectangle.south > -_Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].MaximumLatitude */ .Z.MaximumLatitude;\n\n  // Compute the rectangle of the imagery from this imageryProvider that overlaps\n  // the geometry tile.  The ImageryProvider and ImageryLayer both have the\n  // opportunity to constrain the rectangle.  The imagery TilingScheme\'s rectangle\n  // always fully contains the ImageryProvider\'s rectangle.\n  var imageryBounds = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].intersection */ .Z.intersection(\n    imageryProvider.rectangle,\n    this._rectangle,\n    imageryBoundsScratch\n  );\n  var rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].intersection */ .Z.intersection(\n    tile.rectangle,\n    imageryBounds,\n    tileImageryBoundsScratch\n  );\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(rectangle)) {\n    // There is no overlap between this terrain tile and this imagery\n    // provider.  Unless this is the base layer, no skeletons need to be created.\n    // We stretch texels at the edge of the base layer over the entire globe.\n    if (!this.isBaseLayer()) {\n      return false;\n    }\n\n    var baseImageryRectangle = imageryBounds;\n    var baseTerrainRectangle = tile.rectangle;\n    rectangle = tileImageryBoundsScratch;\n\n    if (baseTerrainRectangle.south >= baseImageryRectangle.north) {\n      rectangle.north = rectangle.south = baseImageryRectangle.north;\n    } else if (baseTerrainRectangle.north <= baseImageryRectangle.south) {\n      rectangle.north = rectangle.south = baseImageryRectangle.south;\n    } else {\n      rectangle.south = Math.max(\n        baseTerrainRectangle.south,\n        baseImageryRectangle.south\n      );\n      rectangle.north = Math.min(\n        baseTerrainRectangle.north,\n        baseImageryRectangle.north\n      );\n    }\n\n    if (baseTerrainRectangle.west >= baseImageryRectangle.east) {\n      rectangle.west = rectangle.east = baseImageryRectangle.east;\n    } else if (baseTerrainRectangle.east <= baseImageryRectangle.west) {\n      rectangle.west = rectangle.east = baseImageryRectangle.west;\n    } else {\n      rectangle.west = Math.max(\n        baseTerrainRectangle.west,\n        baseImageryRectangle.west\n      );\n      rectangle.east = Math.min(\n        baseTerrainRectangle.east,\n        baseImageryRectangle.east\n      );\n    }\n  }\n\n  var latitudeClosestToEquator = 0.0;\n  if (rectangle.south > 0.0) {\n    latitudeClosestToEquator = rectangle.south;\n  } else if (rectangle.north < 0.0) {\n    latitudeClosestToEquator = rectangle.north;\n  }\n\n  // Compute the required level in the imagery tiling scheme.\n  // The errorRatio should really be imagerySSE / terrainSSE rather than this hard-coded value.\n  // But first we need configurable imagery SSE and we need the rendering to be able to handle more\n  // images attached to a terrain tile than there are available texture units.  So that\'s for the future.\n  var errorRatio = 1.0;\n  var targetGeometricError =\n    errorRatio * terrainProvider.getLevelMaximumGeometricError(tile.level);\n  var imageryLevel = getLevelWithMaximumTexelSpacing(\n    this,\n    targetGeometricError,\n    latitudeClosestToEquator\n  );\n  imageryLevel = Math.max(0, imageryLevel);\n  var maximumLevel = imageryProvider.maximumLevel;\n  if (imageryLevel > maximumLevel) {\n    imageryLevel = maximumLevel;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(imageryProvider.minimumLevel)) {\n    var minimumLevel = imageryProvider.minimumLevel;\n    if (imageryLevel < minimumLevel) {\n      imageryLevel = minimumLevel;\n    }\n  }\n\n  var imageryTilingScheme = imageryProvider.tilingScheme;\n  var northwestTileCoordinates = imageryTilingScheme.positionToTileXY(\n    _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].northwest */ .Z.northwest(rectangle),\n    imageryLevel\n  );\n  var southeastTileCoordinates = imageryTilingScheme.positionToTileXY(\n    _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].southeast */ .Z.southeast(rectangle),\n    imageryLevel\n  );\n\n  // If the southeast corner of the rectangle lies very close to the north or west side\n  // of the southeast tile, we don\'t actually need the southernmost or easternmost\n  // tiles.\n  // Similarly, if the northwest corner of the rectangle lies very close to the south or east side\n  // of the northwest tile, we don\'t actually need the northernmost or westernmost tiles.\n\n  // We define "very close" as being within 1/512 of the width of the tile.\n  var veryCloseX = tile.rectangle.width / 512.0;\n  var veryCloseY = tile.rectangle.height / 512.0;\n\n  var northwestTileRectangle = imageryTilingScheme.tileXYToRectangle(\n    northwestTileCoordinates.x,\n    northwestTileCoordinates.y,\n    imageryLevel\n  );\n  if (\n    Math.abs(northwestTileRectangle.south - tile.rectangle.north) <\n      veryCloseY &&\n    northwestTileCoordinates.y < southeastTileCoordinates.y\n  ) {\n    ++northwestTileCoordinates.y;\n  }\n  if (\n    Math.abs(northwestTileRectangle.east - tile.rectangle.west) < veryCloseX &&\n    northwestTileCoordinates.x < southeastTileCoordinates.x\n  ) {\n    ++northwestTileCoordinates.x;\n  }\n\n  var southeastTileRectangle = imageryTilingScheme.tileXYToRectangle(\n    southeastTileCoordinates.x,\n    southeastTileCoordinates.y,\n    imageryLevel\n  );\n  if (\n    Math.abs(southeastTileRectangle.north - tile.rectangle.south) <\n      veryCloseY &&\n    southeastTileCoordinates.y > northwestTileCoordinates.y\n  ) {\n    --southeastTileCoordinates.y;\n  }\n  if (\n    Math.abs(southeastTileRectangle.west - tile.rectangle.east) < veryCloseX &&\n    southeastTileCoordinates.x > northwestTileCoordinates.x\n  ) {\n    --southeastTileCoordinates.x;\n  }\n\n  // Create TileImagery instances for each imagery tile overlapping this terrain tile.\n  // We need to do all texture coordinate computations in the imagery tile\'s tiling scheme.\n\n  var terrainRectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].clone */ .Z.clone(\n    tile.rectangle,\n    terrainRectangleScratch\n  );\n  var imageryRectangle = imageryTilingScheme.tileXYToRectangle(\n    northwestTileCoordinates.x,\n    northwestTileCoordinates.y,\n    imageryLevel\n  );\n  var clippedImageryRectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].intersection */ .Z.intersection(\n    imageryRectangle,\n    imageryBounds,\n    clippedRectangleScratch\n  );\n\n  var imageryTileXYToRectangle;\n  if (useWebMercatorT) {\n    imageryTilingScheme.rectangleToNativeRectangle(\n      terrainRectangle,\n      terrainRectangle\n    );\n    imageryTilingScheme.rectangleToNativeRectangle(\n      imageryRectangle,\n      imageryRectangle\n    );\n    imageryTilingScheme.rectangleToNativeRectangle(\n      clippedImageryRectangle,\n      clippedImageryRectangle\n    );\n    imageryTilingScheme.rectangleToNativeRectangle(\n      imageryBounds,\n      imageryBounds\n    );\n    imageryTileXYToRectangle = imageryTilingScheme.tileXYToNativeRectangle.bind(\n      imageryTilingScheme\n    );\n    veryCloseX = terrainRectangle.width / 512.0;\n    veryCloseY = terrainRectangle.height / 512.0;\n  } else {\n    imageryTileXYToRectangle = imageryTilingScheme.tileXYToRectangle.bind(\n      imageryTilingScheme\n    );\n  }\n\n  var minU;\n  var maxU = 0.0;\n\n  var minV = 1.0;\n  var maxV;\n\n  // If this is the northern-most or western-most tile in the imagery tiling scheme,\n  // it may not start at the northern or western edge of the terrain tile.\n  // Calculate where it does start.\n  if (\n    !this.isBaseLayer() &&\n    Math.abs(clippedImageryRectangle.west - terrainRectangle.west) >= veryCloseX\n  ) {\n    maxU = Math.min(\n      1.0,\n      (clippedImageryRectangle.west - terrainRectangle.west) /\n        terrainRectangle.width\n    );\n  }\n\n  if (\n    !this.isBaseLayer() &&\n    Math.abs(clippedImageryRectangle.north - terrainRectangle.north) >=\n      veryCloseY\n  ) {\n    minV = Math.max(\n      0.0,\n      (clippedImageryRectangle.north - terrainRectangle.south) /\n        terrainRectangle.height\n    );\n  }\n\n  var initialMinV = minV;\n\n  for (\n    var i = northwestTileCoordinates.x;\n    i <= southeastTileCoordinates.x;\n    i++\n  ) {\n    minU = maxU;\n\n    imageryRectangle = imageryTileXYToRectangle(\n      i,\n      northwestTileCoordinates.y,\n      imageryLevel\n    );\n    clippedImageryRectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].simpleIntersection */ .Z.simpleIntersection(\n      imageryRectangle,\n      imageryBounds,\n      clippedRectangleScratch\n    );\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(clippedImageryRectangle)) {\n      continue;\n    }\n\n    maxU = Math.min(\n      1.0,\n      (clippedImageryRectangle.east - terrainRectangle.west) /\n        terrainRectangle.width\n    );\n\n    // If this is the eastern-most imagery tile mapped to this terrain tile,\n    // and there are more imagery tiles to the east of this one, the maxU\n    // should be 1.0 to make sure rounding errors don\'t make the last\n    // image fall shy of the edge of the terrain tile.\n    if (\n      i === southeastTileCoordinates.x &&\n      (this.isBaseLayer() ||\n        Math.abs(clippedImageryRectangle.east - terrainRectangle.east) <\n          veryCloseX)\n    ) {\n      maxU = 1.0;\n    }\n\n    minV = initialMinV;\n\n    for (\n      var j = northwestTileCoordinates.y;\n      j <= southeastTileCoordinates.y;\n      j++\n    ) {\n      maxV = minV;\n\n      imageryRectangle = imageryTileXYToRectangle(i, j, imageryLevel);\n      clippedImageryRectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].simpleIntersection */ .Z.simpleIntersection(\n        imageryRectangle,\n        imageryBounds,\n        clippedRectangleScratch\n      );\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(clippedImageryRectangle)) {\n        continue;\n      }\n\n      minV = Math.max(\n        0.0,\n        (clippedImageryRectangle.south - terrainRectangle.south) /\n          terrainRectangle.height\n      );\n\n      // If this is the southern-most imagery tile mapped to this terrain tile,\n      // and there are more imagery tiles to the south of this one, the minV\n      // should be 0.0 to make sure rounding errors don\'t make the last\n      // image fall shy of the edge of the terrain tile.\n      if (\n        j === southeastTileCoordinates.y &&\n        (this.isBaseLayer() ||\n          Math.abs(clippedImageryRectangle.south - terrainRectangle.south) <\n            veryCloseY)\n      ) {\n        minV = 0.0;\n      }\n\n      var texCoordsRectangle = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(minU, minV, maxU, maxV);\n      var imagery = this.getImageryFromCache(i, j, imageryLevel);\n      surfaceTile.imagery.splice(\n        insertionPoint,\n        0,\n        new _TileImagery_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z(imagery, texCoordsRectangle, useWebMercatorT)\n      );\n      ++insertionPoint;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Calculate the translation and scale for a particular {@link TileImagery} attached to a\n * particular terrain tile.\n *\n * @private\n *\n * @param {Tile} tile The terrain tile.\n * @param {TileImagery} tileImagery The imagery tile mapping.\n * @returns {Cartesian4} The translation and scale where X and Y are the translation and Z and W\n *          are the scale.\n */\nImageryLayer.prototype._calculateTextureTranslationAndScale = function (\n  tile,\n  tileImagery\n) {\n  var imageryRectangle = tileImagery.readyImagery.rectangle;\n  var terrainRectangle = tile.rectangle;\n\n  if (tileImagery.useWebMercatorT) {\n    var tilingScheme =\n      tileImagery.readyImagery.imageryLayer.imageryProvider.tilingScheme;\n    imageryRectangle = tilingScheme.rectangleToNativeRectangle(\n      imageryRectangle,\n      imageryBoundsScratch\n    );\n    terrainRectangle = tilingScheme.rectangleToNativeRectangle(\n      terrainRectangle,\n      terrainRectangleScratch\n    );\n  }\n\n  var terrainWidth = terrainRectangle.width;\n  var terrainHeight = terrainRectangle.height;\n\n  var scaleX = terrainWidth / imageryRectangle.width;\n  var scaleY = terrainHeight / imageryRectangle.height;\n  return new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n    (scaleX * (terrainRectangle.west - imageryRectangle.west)) / terrainWidth,\n    (scaleY * (terrainRectangle.south - imageryRectangle.south)) /\n      terrainHeight,\n    scaleX,\n    scaleY\n  );\n};\n\n/**\n * Request a particular piece of imagery from the imagery provider.  This method handles raising an\n * error event if the request fails, and retrying the request if necessary.\n *\n * @private\n *\n * @param {Imagery} imagery The imagery to request.\n */\nImageryLayer.prototype._requestImagery = function (imagery) {\n  var imageryProvider = this._imageryProvider;\n\n  var that = this;\n\n  function success(image) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(image)) {\n      return failure();\n    }\n\n    imagery.image = image;\n    imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].RECEIVED */ .Z.RECEIVED;\n    imagery.request = undefined;\n\n    _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].handleSuccess */ .Z.handleSuccess(that._requestImageError);\n  }\n\n  function failure(e) {\n    if (imagery.request.state === _Core_RequestState_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CANCELLED */ .Z.CANCELLED) {\n      // Cancelled due to low priority - try again later.\n      imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].UNLOADED */ .Z.UNLOADED;\n      imagery.request = undefined;\n      return;\n    }\n\n    // Initially assume failure.  handleError may retry, in which case the state will\n    // change to TRANSITIONING.\n    imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].FAILED */ .Z.FAILED;\n    imagery.request = undefined;\n\n    var message =\n      "Failed to obtain image tile X: " +\n      imagery.x +\n      " Y: " +\n      imagery.y +\n      " Level: " +\n      imagery.level +\n      ".";\n    that._requestImageError = _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].handleError */ .Z.handleError(\n      that._requestImageError,\n      imageryProvider,\n      imageryProvider.errorEvent,\n      message,\n      imagery.x,\n      imagery.y,\n      imagery.level,\n      doRequest,\n      e\n    );\n  }\n\n  function doRequest() {\n    var request = new _Core_Request_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n      throttle: false,\n      throttleByServer: true,\n      type: _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IMAGERY */ .Z.IMAGERY,\n    });\n    imagery.request = request;\n    imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].TRANSITIONING */ .Z.TRANSITIONING;\n    var imagePromise = imageryProvider.requestImage(\n      imagery.x,\n      imagery.y,\n      imagery.level,\n      request\n    );\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(imagePromise)) {\n      // Too many parallel requests, so postpone loading tile.\n      imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].UNLOADED */ .Z.UNLOADED;\n      imagery.request = undefined;\n      return;\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(imageryProvider.getTileCredits)) {\n      imagery.credits = imageryProvider.getTileCredits(\n        imagery.x,\n        imagery.y,\n        imagery.level\n      );\n    }\n\n    (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(imagePromise, success, failure);\n  }\n\n  doRequest();\n};\n\nImageryLayer.prototype._createTextureWebGL = function (context, imagery) {\n  var sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n    minificationFilter: this.minificationFilter,\n    magnificationFilter: this.magnificationFilter,\n  });\n\n  var image = imagery.image;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(image.internalFormat)) {\n    return new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z({\n      context: context,\n      pixelFormat: image.internalFormat,\n      width: image.width,\n      height: image.height,\n      source: {\n        arrayBufferView: image.bufferView,\n      },\n      sampler: sampler,\n    });\n  }\n  return new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z({\n    context: context,\n    source: image,\n    pixelFormat: this._imageryProvider.hasAlphaChannel\n      ? _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].RGBA */ .Z.RGBA\n      : _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].RGB */ .Z.RGB,\n    sampler: sampler,\n  });\n};\n\n/**\n * Create a WebGL texture for a given {@link Imagery} instance.\n *\n * @private\n *\n * @param {Context} context The rendered context to use to create textures.\n * @param {Imagery} imagery The imagery for which to create a texture.\n */\nImageryLayer.prototype._createTexture = function (context, imagery) {\n  var imageryProvider = this._imageryProvider;\n  var image = imagery.image;\n\n  // If this imagery provider has a discard policy, use it to check if this\n  // image should be discarded.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(imageryProvider.tileDiscardPolicy)) {\n    var discardPolicy = imageryProvider.tileDiscardPolicy;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(discardPolicy)) {\n      // If the discard policy is not ready yet, transition back to the\n      // RECEIVED state and we\'ll try again next time.\n      if (!discardPolicy.isReady()) {\n        imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].RECEIVED */ .Z.RECEIVED;\n        return;\n      }\n\n      // Mark discarded imagery tiles invalid.  Parent imagery will be used instead.\n      if (discardPolicy.shouldDiscardImage(image)) {\n        imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].INVALID */ .Z.INVALID;\n        return;\n      }\n    }\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    this.minificationFilter !== _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].NEAREST */ .Z.NEAREST &&\n    this.minificationFilter !== _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].LINEAR */ .Z.LINEAR\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "ImageryLayer minification filter must be NEAREST or LINEAR"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  // Imagery does not need to be discarded, so upload it to WebGL.\n  var texture = this._createTextureWebGL(context, imagery);\n\n  if (\n    imageryProvider.tilingScheme.projection instanceof _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z\n  ) {\n    imagery.textureWebMercator = texture;\n  } else {\n    imagery.texture = texture;\n  }\n  imagery.image = undefined;\n  imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].TEXTURE_LOADED */ .Z.TEXTURE_LOADED;\n};\n\nfunction getSamplerKey(\n  minificationFilter,\n  magnificationFilter,\n  maximumAnisotropy\n) {\n  return (\n    minificationFilter + ":" + magnificationFilter + ":" + maximumAnisotropy\n  );\n}\n\nImageryLayer.prototype._finalizeReprojectTexture = function (context, texture) {\n  var minificationFilter = this.minificationFilter;\n  var magnificationFilter = this.magnificationFilter;\n  var usesLinearTextureFilter =\n    minificationFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].LINEAR */ .Z.LINEAR &&\n    magnificationFilter === _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].LINEAR */ .Z.LINEAR;\n  // Use mipmaps if this texture has power-of-two dimensions.\n  // In addition, mipmaps are only generated if the texture filters are both LINEAR.\n  if (\n    usesLinearTextureFilter &&\n    !_Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].isCompressedFormat */ .Z.isCompressedFormat(texture.pixelFormat) &&\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(texture.width) &&\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(texture.height)\n  ) {\n    minificationFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].LINEAR_MIPMAP_LINEAR */ .Z.LINEAR_MIPMAP_LINEAR;\n    var maximumSupportedAnisotropy =\n      _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].maximumTextureFilterAnisotropy */ .Z.maximumTextureFilterAnisotropy;\n    var maximumAnisotropy = Math.min(\n      maximumSupportedAnisotropy,\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._maximumAnisotropy, maximumSupportedAnisotropy)\n    );\n    var mipmapSamplerKey = getSamplerKey(\n      minificationFilter,\n      magnificationFilter,\n      maximumAnisotropy\n    );\n    var mipmapSamplers = context.cache.imageryLayerMipmapSamplers;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(mipmapSamplers)) {\n      mipmapSamplers = {};\n      context.cache.imageryLayerMipmapSamplers = mipmapSamplers;\n    }\n    var mipmapSampler = mipmapSamplers[mipmapSamplerKey];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(mipmapSampler)) {\n      mipmapSampler = mipmapSamplers[mipmapSamplerKey] = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n        wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n        wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n        minificationFilter: minificationFilter,\n        magnificationFilter: magnificationFilter,\n        maximumAnisotropy: maximumAnisotropy,\n      });\n    }\n    texture.generateMipmap(_Renderer_MipmapHint_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].NICEST */ .Z.NICEST);\n    texture.sampler = mipmapSampler;\n  } else {\n    var nonMipmapSamplerKey = getSamplerKey(\n      minificationFilter,\n      magnificationFilter,\n      0\n    );\n    var nonMipmapSamplers = context.cache.imageryLayerNonMipmapSamplers;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(nonMipmapSamplers)) {\n      nonMipmapSamplers = {};\n      context.cache.imageryLayerNonMipmapSamplers = nonMipmapSamplers;\n    }\n    var nonMipmapSampler = nonMipmapSamplers[nonMipmapSamplerKey];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(nonMipmapSampler)) {\n      nonMipmapSampler = nonMipmapSamplers[nonMipmapSamplerKey] = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n        wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n        wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n        minificationFilter: minificationFilter,\n        magnificationFilter: magnificationFilter,\n      });\n    }\n    texture.sampler = nonMipmapSampler;\n  }\n};\n\n/**\n * Enqueues a command re-projecting a texture to a {@link GeographicProjection} on the next update, if necessary, and generate\n * mipmaps for the geographic texture.\n *\n * @private\n *\n * @param {FrameState} frameState The frameState.\n * @param {Imagery} imagery The imagery instance to reproject.\n * @param {Boolean} [needGeographicProjection=true] True to reproject to geographic, or false if Web Mercator is fine.\n */\nImageryLayer.prototype._reprojectTexture = function (\n  frameState,\n  imagery,\n  needGeographicProjection\n) {\n  var texture = imagery.textureWebMercator || imagery.texture;\n  var rectangle = imagery.rectangle;\n  var context = frameState.context;\n\n  needGeographicProjection = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(needGeographicProjection, true);\n\n  // Reproject this texture if it is not already in a geographic projection and\n  // the pixels are more than 1e-5 radians apart.  The pixel spacing cutoff\n  // avoids precision problems in the reprojection transformation while making\n  // no noticeable difference in the georeferencing of the image.\n  if (\n    needGeographicProjection &&\n    !(\n      this._imageryProvider.tilingScheme.projection instanceof\n      _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z\n    ) &&\n    rectangle.width / texture.width > 1e-5\n  ) {\n    var that = this;\n    imagery.addReference();\n    var computeCommand = new _Renderer_ComputeCommand_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z({\n      persists: true,\n      owner: this,\n      // Update render resources right before execution instead of now.\n      // This allows different ImageryLayers to share the same vao and buffers.\n      preExecute: function (command) {\n        reprojectToGeographic(command, context, texture, imagery.rectangle);\n      },\n      postExecute: function (outputTexture) {\n        imagery.texture = outputTexture;\n        that._finalizeReprojectTexture(context, outputTexture);\n        imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].READY */ .Z.READY;\n        imagery.releaseReference();\n      },\n      canceled: function () {\n        imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].TEXTURE_LOADED */ .Z.TEXTURE_LOADED;\n        imagery.releaseReference();\n      },\n    });\n    this._reprojectComputeCommands.push(computeCommand);\n  } else {\n    if (needGeographicProjection) {\n      imagery.texture = texture;\n    }\n    this._finalizeReprojectTexture(context, texture);\n    imagery.state = _ImageryState_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].READY */ .Z.READY;\n  }\n};\n\n/**\n * Updates frame state to execute any queued texture re-projections.\n *\n * @private\n *\n * @param {FrameState} frameState The frameState.\n */\nImageryLayer.prototype.queueReprojectionCommands = function (frameState) {\n  var computeCommands = this._reprojectComputeCommands;\n  var length = computeCommands.length;\n  for (var i = 0; i < length; ++i) {\n    frameState.commandList.push(computeCommands[i]);\n  }\n  computeCommands.length = 0;\n};\n\n/**\n * Cancels re-projection commands queued for the next frame.\n *\n * @private\n */\nImageryLayer.prototype.cancelReprojections = function () {\n  this._reprojectComputeCommands.forEach(function (command) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(command.canceled)) {\n      command.canceled();\n    }\n  });\n  this._reprojectComputeCommands.length = 0;\n};\n\nImageryLayer.prototype.getImageryFromCache = function (\n  x,\n  y,\n  level,\n  imageryRectangle\n) {\n  var cacheKey = getImageryCacheKey(x, y, level);\n  var imagery = this._imageryCache[cacheKey];\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(imagery)) {\n    imagery = new _Imagery_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z(this, x, y, level, imageryRectangle);\n    this._imageryCache[cacheKey] = imagery;\n  }\n\n  imagery.addReference();\n  return imagery;\n};\n\nImageryLayer.prototype.removeImageryFromCache = function (imagery) {\n  var cacheKey = getImageryCacheKey(imagery.x, imagery.y, imagery.level);\n  delete this._imageryCache[cacheKey];\n};\n\nfunction getImageryCacheKey(x, y, level) {\n  return JSON.stringify([x, y, level]);\n}\n\nvar uniformMap = {\n  u_textureDimensions: function () {\n    return this.textureDimensions;\n  },\n  u_texture: function () {\n    return this.texture;\n  },\n\n  textureDimensions: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(),\n  texture: undefined,\n};\n\nvar float32ArrayScratch = _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].supportsTypedArrays */ .Z.supportsTypedArrays()\n  ? new Float32Array(2 * 64)\n  : undefined;\n\nfunction reprojectToGeographic(command, context, texture, rectangle) {\n  // This function has gone through a number of iterations, because GPUs are awesome.\n  //\n  // Originally, we had a very simple vertex shader and computed the Web Mercator texture coordinates\n  // per-fragment in the fragment shader.  That worked well, except on mobile devices, because\n  // fragment shaders have limited precision on many mobile devices.  The result was smearing artifacts\n  // at medium zoom levels because different geographic texture coordinates would be reprojected to Web\n  // Mercator as the same value.\n  //\n  // Our solution was to reproject to Web Mercator in the vertex shader instead of the fragment shader.\n  // This required far more vertex data.  With fragment shader reprojection, we only needed a single quad.\n  // But to achieve the same precision with vertex shader reprojection, we needed a vertex for each\n  // output pixel.  So we used a grid of 256x256 vertices, because most of our imagery\n  // tiles are 256x256.  Fortunately the grid could be created and uploaded to the GPU just once and\n  // re-used for all reprojections, so the performance was virtually unchanged from our original fragment\n  // shader approach.  See https://github.com/CesiumGS/cesium/pull/714.\n  //\n  // Over a year later, we noticed (https://github.com/CesiumGS/cesium/issues/2110)\n  // that our reprojection code was creating a rare but severe artifact on some GPUs (Intel HD 4600\n  // for one).  The problem was that the GLSL sin function on these GPUs had a discontinuity at fine scales in\n  // a few places.\n  //\n  // We solved this by implementing a more reliable sin function based on the CORDIC algorithm\n  // (https://github.com/CesiumGS/cesium/pull/2111).  Even though this was a fair\n  // amount of code to be executing per vertex, the performance seemed to be pretty good on most GPUs.\n  // Unfortunately, on some GPUs, the performance was absolutely terrible\n  // (https://github.com/CesiumGS/cesium/issues/2258).\n  //\n  // So that brings us to our current solution, the one you see here.  Effectively, we compute the Web\n  // Mercator texture coordinates on the CPU and store the T coordinate with each vertex (the S coordinate\n  // is the same in Geographic and Web Mercator).  To make this faster, we reduced our reprojection mesh\n  // to be only 2 vertices wide and 64 vertices high.  We should have reduced the width to 2 sooner,\n  // because the extra vertices weren\'t buying us anything.  The height of 64 means we are technically\n  // doing a slightly less accurate reprojection than we were before, but we can\'t see the difference\n  // so it\'s worth the 4x speedup.\n\n  var reproject = context.cache.imageryLayer_reproject;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(reproject)) {\n    reproject = context.cache.imageryLayer_reproject = {\n      vertexArray: undefined,\n      shaderProgram: undefined,\n      sampler: undefined,\n      destroy: function () {\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(this.framebuffer)) {\n          this.framebuffer.destroy();\n        }\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(this.vertexArray)) {\n          this.vertexArray.destroy();\n        }\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z)(this.shaderProgram)) {\n          this.shaderProgram.destroy();\n        }\n      },\n    };\n\n    var positions = new Float32Array(2 * 64 * 2);\n    var index = 0;\n    for (var j = 0; j < 64; ++j) {\n      var y = j / 63.0;\n      positions[index++] = 0.0;\n      positions[index++] = y;\n      positions[index++] = 1.0;\n      positions[index++] = y;\n    }\n\n    var reprojectAttributeIndices = {\n      position: 0,\n      webMercatorT: 1,\n    };\n\n    var indices = _Core_TerrainProvider_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].getRegularGridIndices */ .Z.getRegularGridIndices(2, 64);\n    var indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n      context: context,\n      typedArray: indices,\n      usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n      indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n    });\n\n    reproject.vertexArray = new _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z({\n      context: context,\n      attributes: [\n        {\n          index: reprojectAttributeIndices.position,\n          vertexBuffer: _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n            context: context,\n            typedArray: positions,\n            usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n          }),\n          componentsPerAttribute: 2,\n        },\n        {\n          index: reprojectAttributeIndices.webMercatorT,\n          vertexBuffer: _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n            context: context,\n            sizeInBytes: 64 * 2 * 4,\n            usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].STREAM_DRAW */ .Z.STREAM_DRAW,\n          }),\n          componentsPerAttribute: 1,\n        },\n      ],\n      indexBuffer: indexBuffer,\n    });\n\n    var vs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z({\n      sources: [_Shaders_ReprojectWebMercatorVS_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z],\n    });\n\n    reproject.shaderProgram = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].fromCache */ .Z.fromCache({\n      context: context,\n      vertexShaderSource: vs,\n      fragmentShaderSource: _Shaders_ReprojectWebMercatorFS_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z,\n      attributeLocations: reprojectAttributeIndices,\n    });\n\n    reproject.sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n      wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].LINEAR */ .Z.LINEAR,\n      magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].LINEAR */ .Z.LINEAR,\n    });\n  }\n\n  texture.sampler = reproject.sampler;\n\n  var width = texture.width;\n  var height = texture.height;\n\n  uniformMap.textureDimensions.x = width;\n  uniformMap.textureDimensions.y = height;\n  uniformMap.texture = texture;\n\n  var sinLatitude = Math.sin(rectangle.south);\n  var southMercatorY = 0.5 * Math.log((1 + sinLatitude) / (1 - sinLatitude));\n\n  sinLatitude = Math.sin(rectangle.north);\n  var northMercatorY = 0.5 * Math.log((1 + sinLatitude) / (1 - sinLatitude));\n  var oneOverMercatorHeight = 1.0 / (northMercatorY - southMercatorY);\n\n  var outputTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: texture.pixelFormat,\n    pixelDatatype: texture.pixelDatatype,\n    preMultiplyAlpha: texture.preMultiplyAlpha,\n  });\n\n  // Allocate memory for the mipmaps.  Failure to do this before rendering\n  // to the texture via the FBO, and calling generateMipmap later,\n  // will result in the texture appearing blank.  I can\'t pretend to\n  // understand exactly why this is.\n  if (_Core_Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(width) && _Core_Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(height)) {\n    outputTexture.generateMipmap(_Renderer_MipmapHint_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].NICEST */ .Z.NICEST);\n  }\n\n  var south = rectangle.south;\n  var north = rectangle.north;\n\n  var webMercatorT = float32ArrayScratch;\n\n  var outputIndex = 0;\n  for (var webMercatorTIndex = 0; webMercatorTIndex < 64; ++webMercatorTIndex) {\n    var fraction = webMercatorTIndex / 63.0;\n    var latitude = _Core_Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].lerp */ .Z.lerp(south, north, fraction);\n    sinLatitude = Math.sin(latitude);\n    var mercatorY = 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n    var mercatorFraction = (mercatorY - southMercatorY) * oneOverMercatorHeight;\n    webMercatorT[outputIndex++] = mercatorFraction;\n    webMercatorT[outputIndex++] = mercatorFraction;\n  }\n\n  reproject.vertexArray\n    .getAttribute(1)\n    .vertexBuffer.copyFromArrayView(webMercatorT);\n\n  command.shaderProgram = reproject.shaderProgram;\n  command.outputTexture = outputTexture;\n  command.uniformMap = uniformMap;\n  command.vertexArray = reproject.vertexArray;\n}\n\n/**\n * Gets the level with the specified world coordinate spacing between texels, or less.\n *\n * @param {ImageryLayer} layer The imagery layer to use.\n * @param {Number} texelSpacing The texel spacing for which to find a corresponding level.\n * @param {Number} latitudeClosestToEquator The latitude closest to the equator that we\'re concerned with.\n * @returns {Number} The level with the specified texel spacing or less.\n * @private\n */\nfunction getLevelWithMaximumTexelSpacing(\n  layer,\n  texelSpacing,\n  latitudeClosestToEquator\n) {\n  // PERFORMANCE_IDEA: factor out the stuff that doesn\'t change.\n  var imageryProvider = layer._imageryProvider;\n  var tilingScheme = imageryProvider.tilingScheme;\n  var ellipsoid = tilingScheme.ellipsoid;\n  var latitudeFactor = !(\n    layer._imageryProvider.tilingScheme.projection instanceof\n    _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z\n  )\n    ? Math.cos(latitudeClosestToEquator)\n    : 1.0;\n  var tilingSchemeRectangle = tilingScheme.rectangle;\n  var levelZeroMaximumTexelSpacing =\n    (ellipsoid.maximumRadius * tilingSchemeRectangle.width * latitudeFactor) /\n    (imageryProvider.tileWidth * tilingScheme.getNumberOfXTilesAtLevel(0));\n\n  var twoToTheLevelPower = levelZeroMaximumTexelSpacing / texelSpacing;\n  var level = Math.log(twoToTheLevelPower) / Math.log(2);\n  var rounded = Math.round(level);\n  return rounded | 0;\n}\n/* harmony default export */ __webpack_exports__["Z"] = (ImageryLayer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59379\n')},59848:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96190);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(13222);\n/* harmony import */ var _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(59379);\n\n\n\n\n\n\n\n\n\n\n/**\n * An ordered collection of imagery layers.\n *\n * @alias ImageryLayerCollection\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Adjustment.html|Cesium Sandcastle Imagery Adjustment Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n */\nfunction ImageryLayerCollection() {\n  this._layers = [];\n\n  /**\n   * An event that is raised when a layer is added to the collection.  Event handlers are passed the layer that\n   * was added and the index at which it was added.\n   * @type {Event}\n   * @default Event()\n   */\n  this.layerAdded = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  /**\n   * An event that is raised when a layer is removed from the collection.  Event handlers are passed the layer that\n   * was removed and the index from which it was removed.\n   * @type {Event}\n   * @default Event()\n   */\n  this.layerRemoved = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  /**\n   * An event that is raised when a layer changes position in the collection.  Event handlers are passed the layer that\n   * was moved, its new index after the move, and its old index prior to the move.\n   * @type {Event}\n   * @default Event()\n   */\n  this.layerMoved = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  /**\n   * An event that is raised when a layer is shown or hidden by setting the\n   * {@link ImageryLayer#show} property.  Event handlers are passed a reference to this layer,\n   * the index of the layer in the collection, and a flag that is true if the layer is now\n   * shown or false if it is now hidden.\n   *\n   * @type {Event}\n   * @default Event()\n   */\n  this.layerShownOrHidden = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n}\n\nObject.defineProperties(ImageryLayerCollection.prototype, {\n  /**\n   * Gets the number of layers in this collection.\n   * @memberof ImageryLayerCollection.prototype\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      return this._layers.length;\n    },\n  },\n});\n\n/**\n * Adds a layer to the collection.\n *\n * @param {ImageryLayer} layer the layer to add.\n * @param {Number} [index] the index to add the layer at.  If omitted, the layer will\n *                         be added on top of all existing layers.\n *\n * @exception {DeveloperError} index, if supplied, must be greater than or equal to zero and less than or equal to the number of the layers.\n */\nImageryLayerCollection.prototype.add = function (layer, index) {\n  var hasIndex = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(index);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(layer)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("layer is required.");\n  }\n  if (hasIndex) {\n    if (index < 0) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("index must be greater than or equal to zero.");\n    } else if (index > this._layers.length) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n        "index must be less than or equal to the number of layers."\n      );\n    }\n  }\n  //>>includeEnd(\'debug\');\n\n  if (!hasIndex) {\n    index = this._layers.length;\n    this._layers.push(layer);\n  } else {\n    this._layers.splice(index, 0, layer);\n  }\n\n  this._update();\n  this.layerAdded.raiseEvent(layer, index);\n};\n\n/**\n * Creates a new layer using the given ImageryProvider and adds it to the collection.\n *\n * @param {ImageryProvider} imageryProvider the imagery provider to create a new layer for.\n * @param {Number} [index] the index to add the layer at.  If omitted, the layer will\n *                         added on top of all existing layers.\n * @returns {ImageryLayer} The newly created layer.\n */\nImageryLayerCollection.prototype.addImageryProvider = function (\n  imageryProvider,\n  index\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(imageryProvider)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("imageryProvider is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var layer = new _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(imageryProvider);\n  this.add(layer, index);\n  return layer;\n};\n\n/**\n * Removes a layer from this collection, if present.\n *\n * @param {ImageryLayer} layer The layer to remove.\n * @param {Boolean} [destroy=true] whether to destroy the layers in addition to removing them.\n * @returns {Boolean} true if the layer was in the collection and was removed,\n *                    false if the layer was not in the collection.\n */\nImageryLayerCollection.prototype.remove = function (layer, destroy) {\n  destroy = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(destroy, true);\n\n  var index = this._layers.indexOf(layer);\n  if (index !== -1) {\n    this._layers.splice(index, 1);\n\n    this._update();\n\n    this.layerRemoved.raiseEvent(layer, index);\n\n    if (destroy) {\n      layer.destroy();\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all layers from this collection.\n *\n * @param {Boolean} [destroy=true] whether to destroy the layers in addition to removing them.\n */\nImageryLayerCollection.prototype.removeAll = function (destroy) {\n  destroy = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(destroy, true);\n\n  var layers = this._layers;\n  for (var i = 0, len = layers.length; i < len; i++) {\n    var layer = layers[i];\n    this.layerRemoved.raiseEvent(layer, i);\n\n    if (destroy) {\n      layer.destroy();\n    }\n  }\n\n  this._layers = [];\n};\n\n/**\n * Checks to see if the collection contains a given layer.\n *\n * @param {ImageryLayer} layer the layer to check for.\n *\n * @returns {Boolean} true if the collection contains the layer, false otherwise.\n */\nImageryLayerCollection.prototype.contains = function (layer) {\n  return this.indexOf(layer) !== -1;\n};\n\n/**\n * Determines the index of a given layer in the collection.\n *\n * @param {ImageryLayer} layer The layer to find the index of.\n *\n * @returns {Number} The index of the layer in the collection, or -1 if the layer does not exist in the collection.\n */\nImageryLayerCollection.prototype.indexOf = function (layer) {\n  return this._layers.indexOf(layer);\n};\n\n/**\n * Gets a layer by index from the collection.\n *\n * @param {Number} index the index to retrieve.\n *\n * @returns {ImageryLayer} The imagery layer at the given index.\n */\nImageryLayerCollection.prototype.get = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(index)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("index is required.", "index");\n  }\n  //>>includeEnd(\'debug\');\n\n  return this._layers[index];\n};\n\nfunction getLayerIndex(layers, layer) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(layer)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("layer is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var index = layers.indexOf(layer);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (index === -1) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("layer is not in this collection.");\n  }\n  //>>includeEnd(\'debug\');\n\n  return index;\n}\n\nfunction swapLayers(collection, i, j) {\n  var arr = collection._layers;\n  i = _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clamp */ .Z.clamp(i, 0, arr.length - 1);\n  j = _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clamp */ .Z.clamp(j, 0, arr.length - 1);\n\n  if (i === j) {\n    return;\n  }\n\n  var temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n\n  collection._update();\n\n  collection.layerMoved.raiseEvent(temp, j, i);\n}\n\n/**\n * Raises a layer up one position in the collection.\n *\n * @param {ImageryLayer} layer the layer to move.\n *\n * @exception {DeveloperError} layer is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nImageryLayerCollection.prototype.raise = function (layer) {\n  var index = getLayerIndex(this._layers, layer);\n  swapLayers(this, index, index + 1);\n};\n\n/**\n * Lowers a layer down one position in the collection.\n *\n * @param {ImageryLayer} layer the layer to move.\n *\n * @exception {DeveloperError} layer is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nImageryLayerCollection.prototype.lower = function (layer) {\n  var index = getLayerIndex(this._layers, layer);\n  swapLayers(this, index, index - 1);\n};\n\n/**\n * Raises a layer to the top of the collection.\n *\n * @param {ImageryLayer} layer the layer to move.\n *\n * @exception {DeveloperError} layer is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nImageryLayerCollection.prototype.raiseToTop = function (layer) {\n  var index = getLayerIndex(this._layers, layer);\n  if (index === this._layers.length - 1) {\n    return;\n  }\n  this._layers.splice(index, 1);\n  this._layers.push(layer);\n\n  this._update();\n\n  this.layerMoved.raiseEvent(layer, this._layers.length - 1, index);\n};\n\n/**\n * Lowers a layer to the bottom of the collection.\n *\n * @param {ImageryLayer} layer the layer to move.\n *\n * @exception {DeveloperError} layer is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nImageryLayerCollection.prototype.lowerToBottom = function (layer) {\n  var index = getLayerIndex(this._layers, layer);\n  if (index === 0) {\n    return;\n  }\n  this._layers.splice(index, 1);\n  this._layers.splice(0, 0, layer);\n\n  this._update();\n\n  this.layerMoved.raiseEvent(layer, 0, index);\n};\n\nvar applicableRectangleScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n\nfunction pickImageryHelper(scene, pickedLocation, pickFeatures, callback) {\n  // Find the terrain tile containing the picked location.\n  var tilesToRender = scene.globe._surface._tilesToRender;\n  var pickedTile;\n\n  for (\n    var textureIndex = 0;\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(pickedTile) && textureIndex < tilesToRender.length;\n    ++textureIndex\n  ) {\n    var tile = tilesToRender[textureIndex];\n    if (_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].contains */ .Z.contains(tile.rectangle, pickedLocation)) {\n      pickedTile = tile;\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(pickedTile)) {\n    return;\n  }\n\n  // Pick against all attached imagery tiles containing the pickedLocation.\n  var imageryTiles = pickedTile.data.imagery;\n\n  for (var i = imageryTiles.length - 1; i >= 0; --i) {\n    var terrainImagery = imageryTiles[i];\n    var imagery = terrainImagery.readyImagery;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(imagery)) {\n      continue;\n    }\n    var provider = imagery.imageryLayer.imageryProvider;\n    if (pickFeatures && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(provider.pickFeatures)) {\n      continue;\n    }\n\n    if (!_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].contains */ .Z.contains(imagery.rectangle, pickedLocation)) {\n      continue;\n    }\n\n    // If this imagery came from a parent, it may not be applicable to its entire rectangle.\n    // Check the textureCoordinateRectangle.\n    var applicableRectangle = applicableRectangleScratch;\n\n    var epsilon = 1 / 1024; // 1/4 of a pixel in a typical 256x256 tile.\n    applicableRectangle.west = _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].lerp */ .Z.lerp(\n      pickedTile.rectangle.west,\n      pickedTile.rectangle.east,\n      terrainImagery.textureCoordinateRectangle.x - epsilon\n    );\n    applicableRectangle.east = _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].lerp */ .Z.lerp(\n      pickedTile.rectangle.west,\n      pickedTile.rectangle.east,\n      terrainImagery.textureCoordinateRectangle.z + epsilon\n    );\n    applicableRectangle.south = _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].lerp */ .Z.lerp(\n      pickedTile.rectangle.south,\n      pickedTile.rectangle.north,\n      terrainImagery.textureCoordinateRectangle.y - epsilon\n    );\n    applicableRectangle.north = _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].lerp */ .Z.lerp(\n      pickedTile.rectangle.south,\n      pickedTile.rectangle.north,\n      terrainImagery.textureCoordinateRectangle.w + epsilon\n    );\n    if (!_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].contains */ .Z.contains(applicableRectangle, pickedLocation)) {\n      continue;\n    }\n\n    callback(imagery);\n  }\n}\n\n/**\n * Determines the imagery layers that are intersected by a pick ray. To compute a pick ray from a\n * location on the screen, use {@link Camera.getPickRay}.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {Scene} scene The scene.\n * @return {ImageryLayer[]|undefined} An array that includes all of\n *                                 the layers that are intersected by a given pick ray. Undefined if\n *                                 no layers are selected.\n *\n */\nImageryLayerCollection.prototype.pickImageryLayers = function (ray, scene) {\n  // Find the picked location on the globe.\n  var pickedPosition = scene.globe.pick(ray, scene);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(pickedPosition)) {\n    return;\n  }\n\n  var pickedLocation = scene.globe.ellipsoid.cartesianToCartographic(\n    pickedPosition\n  );\n\n  var imageryLayers = [];\n\n  pickImageryHelper(scene, pickedLocation, false, function (imagery) {\n    imageryLayers.push(imagery.imageryLayer);\n  });\n\n  if (imageryLayers.length === 0) {\n    return undefined;\n  }\n\n  return imageryLayers;\n};\n\n/**\n * Asynchronously determines the imagery layer features that are intersected by a pick ray.  The intersected imagery\n * layer features are found by invoking {@link ImageryProvider#pickFeatures} for each imagery layer tile intersected\n * by the pick ray.  To compute a pick ray from a location on the screen, use {@link Camera.getPickRay}.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {Scene} scene The scene.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise that resolves to an array of features intersected by the pick ray.\n *                                             If it can be quickly determined that no features are intersected (for example,\n *                                             because no active imagery providers support {@link ImageryProvider#pickFeatures}\n *                                             or because the pick ray does not intersect the surface), this function will\n *                                             return undefined.\n *\n * @example\n * var pickRay = viewer.camera.getPickRay(windowPosition);\n * var featuresPromise = viewer.imageryLayers.pickImageryLayerFeatures(pickRay, viewer.scene);\n * if (!Cesium.defined(featuresPromise)) {\n *     console.log(\'No features picked.\');\n * } else {\n *     Cesium.when(featuresPromise, function(features) {\n *         // This function is called asynchronously when the list if picked features is available.\n *         console.log(\'Number of features: \' + features.length);\n *         if (features.length > 0) {\n *             console.log(\'First feature name: \' + features[0].name);\n *         }\n *     });\n * }\n */\nImageryLayerCollection.prototype.pickImageryLayerFeatures = function (\n  ray,\n  scene\n) {\n  // Find the picked location on the globe.\n  var pickedPosition = scene.globe.pick(ray, scene);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(pickedPosition)) {\n    return;\n  }\n\n  var pickedLocation = scene.globe.ellipsoid.cartesianToCartographic(\n    pickedPosition\n  );\n\n  var promises = [];\n  var imageryLayers = [];\n\n  pickImageryHelper(scene, pickedLocation, true, function (imagery) {\n    var provider = imagery.imageryLayer.imageryProvider;\n    var promise = provider.pickFeatures(\n      imagery.x,\n      imagery.y,\n      imagery.level,\n      pickedLocation.longitude,\n      pickedLocation.latitude\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(promise)) {\n      promises.push(promise);\n      imageryLayers.push(imagery.imageryLayer);\n    }\n  });\n\n  if (promises.length === 0) {\n    return undefined;\n  }\n  return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].all */ .Z.all(promises, function (results) {\n    var features = [];\n    for (var resultIndex = 0; resultIndex < results.length; ++resultIndex) {\n      var result = results[resultIndex];\n      var image = imageryLayers[resultIndex];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(result) && result.length > 0) {\n        for (\n          var featureIndex = 0;\n          featureIndex < result.length;\n          ++featureIndex\n        ) {\n          var feature = result[featureIndex];\n          feature.imageryLayer = image;\n          // For features without a position, use the picked location.\n          if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(feature.position)) {\n            feature.position = pickedLocation;\n          }\n          features.push(feature);\n        }\n      }\n    }\n    return features;\n  });\n};\n\n/**\n * Updates frame state to execute any queued texture re-projections.\n *\n * @private\n *\n * @param {FrameState} frameState The frameState.\n */\nImageryLayerCollection.prototype.queueReprojectionCommands = function (\n  frameState\n) {\n  var layers = this._layers;\n  for (var i = 0, len = layers.length; i < len; ++i) {\n    layers[i].queueReprojectionCommands(frameState);\n  }\n};\n\n/**\n * Cancels re-projection commands queued for the next frame.\n *\n * @private\n */\nImageryLayerCollection.prototype.cancelReprojections = function () {\n  var layers = this._layers;\n  for (var i = 0, len = layers.length; i < len; ++i) {\n    layers[i].cancelReprojections();\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} true if this object was destroyed; otherwise, false.\n *\n * @see ImageryLayerCollection#destroy\n */\nImageryLayerCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by all layers in this collection.  Explicitly destroying this\n * object allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector.\n * <br /><br />\n * Once this object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * layerCollection = layerCollection && layerCollection.destroy();\n *\n * @see ImageryLayerCollection#isDestroyed\n */\nImageryLayerCollection.prototype.destroy = function () {\n  this.removeAll(true);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this);\n};\n\nImageryLayerCollection.prototype._update = function () {\n  var isBaseLayer = true;\n  var layers = this._layers;\n  var layersShownOrHidden;\n  var layer;\n  var i, len;\n  for (i = 0, len = layers.length; i < len; ++i) {\n    layer = layers[i];\n\n    layer._layerIndex = i;\n\n    if (layer.show) {\n      layer._isBaseLayer = isBaseLayer;\n      isBaseLayer = false;\n    } else {\n      layer._isBaseLayer = false;\n    }\n\n    if (layer.show !== layer._show) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(layer._show)) {\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(layersShownOrHidden)) {\n          layersShownOrHidden = [];\n        }\n        layersShownOrHidden.push(layer);\n      }\n      layer._show = layer.show;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(layersShownOrHidden)) {\n    for (i = 0, len = layersShownOrHidden.length; i < len; ++i) {\n      layer = layersShownOrHidden[i];\n      this.layerShownOrHidden.raiseEvent(layer, layer._layerIndex, layer.show);\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ImageryLayerCollection);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59848\n')},93855:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82982);\n\n\n/**\n * Describes a rasterized feature, such as a point, polygon, polyline, etc., in an imagery layer.\n *\n * @alias ImageryLayerFeatureInfo\n * @constructor\n */\nfunction ImageryLayerFeatureInfo() {\n  /**\n   * Gets or sets the name of the feature.\n   * @type {String|undefined}\n   */\n  this.name = undefined;\n\n  /**\n   * Gets or sets an HTML description of the feature.  The HTML is not trusted and should\n   * be sanitized before display to the user.\n   * @type {String|undefined}\n   */\n  this.description = undefined;\n\n  /**\n   * Gets or sets the position of the feature, or undefined if the position is not known.\n   *\n   * @type {Cartographic|undefined}\n   */\n  this.position = undefined;\n\n  /**\n   * Gets or sets the raw data describing the feature.  The raw data may be in any\n   * number of formats, such as GeoJSON, KML, etc.\n   * @type {Object|undefined}\n   */\n  this.data = undefined;\n\n  /**\n   * Gets or sets the image layer of the feature.\n   * @type {Object|undefined}\n   */\n  this.imageryLayer = undefined;\n}\n\n/**\n * Configures the name of this feature by selecting an appropriate property.  The name will be obtained from\n * one of the following sources, in this order: 1) the property with the name \'name\', 2) the property with the name \'title\',\n * 3) the first property containing the word \'name\', 4) the first property containing the word \'title\'.  If\n * the name cannot be obtained from any of these sources, the existing name will be left unchanged.\n *\n * @param {Object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureNameFromProperties = function (\n  properties\n) {\n  var namePropertyPrecedence = 10;\n  var nameProperty;\n\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key) && properties[key]) {\n      var lowerKey = key.toLowerCase();\n\n      if (namePropertyPrecedence > 1 && lowerKey === "name") {\n        namePropertyPrecedence = 1;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 2 && lowerKey === "title") {\n        namePropertyPrecedence = 2;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 3 && /name/i.test(key)) {\n        namePropertyPrecedence = 3;\n        nameProperty = key;\n      } else if (namePropertyPrecedence > 4 && /title/i.test(key)) {\n        namePropertyPrecedence = 4;\n        nameProperty = key;\n      }\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(nameProperty)) {\n    this.name = properties[nameProperty];\n  }\n};\n\n/**\n * Configures the description of this feature by creating an HTML table of properties and their values.\n *\n * @param {Object} properties An object literal containing the properties of the feature.\n */\nImageryLayerFeatureInfo.prototype.configureDescriptionFromProperties = function (\n  properties\n) {\n  function describe(properties) {\n    var html = \'<table class="cesium-infoBox-defaultTable">\';\n    for (var key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        var value = properties[key];\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(value)) {\n          if (typeof value === "object") {\n            html +=\n              "<tr><td>" + key + "</td><td>" + describe(value) + "</td></tr>";\n          } else {\n            html += "<tr><td>" + key + "</td><td>" + value + "</td></tr>";\n          }\n        }\n      }\n    }\n    html += "</table>";\n\n    return html;\n  }\n\n  this.description = describe(properties);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ImageryLayerFeatureInfo);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM4NTUuanMiLCJtYXBwaW5ncyI6IjtBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUVBQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9JbWFnZXJ5TGF5ZXJGZWF0dXJlSW5mby5qcz8zZGYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcblxuLyoqXG4gKiBEZXNjcmliZXMgYSByYXN0ZXJpemVkIGZlYXR1cmUsIHN1Y2ggYXMgYSBwb2ludCwgcG9seWdvbiwgcG9seWxpbmUsIGV0Yy4sIGluIGFuIGltYWdlcnkgbGF5ZXIuXG4gKlxuICogQGFsaWFzIEltYWdlcnlMYXllckZlYXR1cmVJbmZvXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW1hZ2VyeUxheWVyRmVhdHVyZUluZm8oKSB7XG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUuXG4gICAqIEB0eXBlIHtTdHJpbmd8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5uYW1lID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgYW4gSFRNTCBkZXNjcmlwdGlvbiBvZiB0aGUgZmVhdHVyZS4gIFRoZSBIVE1MIGlzIG5vdCB0cnVzdGVkIGFuZCBzaG91bGRcbiAgICogYmUgc2FuaXRpemVkIGJlZm9yZSBkaXNwbGF5IHRvIHRoZSB1c2VyLlxuICAgKiBAdHlwZSB7U3RyaW5nfHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuZGVzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGZlYXR1cmUsIG9yIHVuZGVmaW5lZCBpZiB0aGUgcG9zaXRpb24gaXMgbm90IGtub3duLlxuICAgKlxuICAgKiBAdHlwZSB7Q2FydG9ncmFwaGljfHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgcmF3IGRhdGEgZGVzY3JpYmluZyB0aGUgZmVhdHVyZS4gIFRoZSByYXcgZGF0YSBtYXkgYmUgaW4gYW55XG4gICAqIG51bWJlciBvZiBmb3JtYXRzLCBzdWNoIGFzIEdlb0pTT04sIEtNTCwgZXRjLlxuICAgKiBAdHlwZSB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuZGF0YSA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBpbWFnZSBsYXllciBvZiB0aGUgZmVhdHVyZS5cbiAgICogQHR5cGUge09iamVjdHx1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLmltYWdlcnlMYXllciA9IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDb25maWd1cmVzIHRoZSBuYW1lIG9mIHRoaXMgZmVhdHVyZSBieSBzZWxlY3RpbmcgYW4gYXBwcm9wcmlhdGUgcHJvcGVydHkuICBUaGUgbmFtZSB3aWxsIGJlIG9idGFpbmVkIGZyb21cbiAqIG9uZSBvZiB0aGUgZm9sbG93aW5nIHNvdXJjZXMsIGluIHRoaXMgb3JkZXI6IDEpIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBuYW1lICduYW1lJywgMikgdGhlIHByb3BlcnR5IHdpdGggdGhlIG5hbWUgJ3RpdGxlJyxcbiAqIDMpIHRoZSBmaXJzdCBwcm9wZXJ0eSBjb250YWluaW5nIHRoZSB3b3JkICduYW1lJywgNCkgdGhlIGZpcnN0IHByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIHdvcmQgJ3RpdGxlJy4gIElmXG4gKiB0aGUgbmFtZSBjYW5ub3QgYmUgb2J0YWluZWQgZnJvbSBhbnkgb2YgdGhlc2Ugc291cmNlcywgdGhlIGV4aXN0aW5nIG5hbWUgd2lsbCBiZSBsZWZ0IHVuY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBBbiBvYmplY3QgbGl0ZXJhbCBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBmZWF0dXJlLlxuICovXG5JbWFnZXJ5TGF5ZXJGZWF0dXJlSW5mby5wcm90b3R5cGUuY29uZmlndXJlTmFtZUZyb21Qcm9wZXJ0aWVzID0gZnVuY3Rpb24gKFxuICBwcm9wZXJ0aWVzXG4pIHtcbiAgdmFyIG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPSAxMDtcbiAgdmFyIG5hbWVQcm9wZXJ0eTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGtleSkgJiYgcHJvcGVydGllc1trZXldKSB7XG4gICAgICB2YXIgbG93ZXJLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPiAxICYmIGxvd2VyS2V5ID09PSBcIm5hbWVcIikge1xuICAgICAgICBuYW1lUHJvcGVydHlQcmVjZWRlbmNlID0gMTtcbiAgICAgICAgbmFtZVByb3BlcnR5ID0ga2V5O1xuICAgICAgfSBlbHNlIGlmIChuYW1lUHJvcGVydHlQcmVjZWRlbmNlID4gMiAmJiBsb3dlcktleSA9PT0gXCJ0aXRsZVwiKSB7XG4gICAgICAgIG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPSAyO1xuICAgICAgICBuYW1lUHJvcGVydHkgPSBrZXk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPiAzICYmIC9uYW1lL2kudGVzdChrZXkpKSB7XG4gICAgICAgIG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPSAzO1xuICAgICAgICBuYW1lUHJvcGVydHkgPSBrZXk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPiA0ICYmIC90aXRsZS9pLnRlc3Qoa2V5KSkge1xuICAgICAgICBuYW1lUHJvcGVydHlQcmVjZWRlbmNlID0gNDtcbiAgICAgICAgbmFtZVByb3BlcnR5ID0ga2V5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkZWZpbmVkKG5hbWVQcm9wZXJ0eSkpIHtcbiAgICB0aGlzLm5hbWUgPSBwcm9wZXJ0aWVzW25hbWVQcm9wZXJ0eV07XG4gIH1cbn07XG5cbi8qKlxuICogQ29uZmlndXJlcyB0aGUgZGVzY3JpcHRpb24gb2YgdGhpcyBmZWF0dXJlIGJ5IGNyZWF0aW5nIGFuIEhUTUwgdGFibGUgb2YgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIEFuIG9iamVjdCBsaXRlcmFsIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGZlYXR1cmUuXG4gKi9cbkltYWdlcnlMYXllckZlYXR1cmVJbmZvLnByb3RvdHlwZS5jb25maWd1cmVEZXNjcmlwdGlvbkZyb21Qcm9wZXJ0aWVzID0gZnVuY3Rpb24gKFxuICBwcm9wZXJ0aWVzXG4pIHtcbiAgZnVuY3Rpb24gZGVzY3JpYmUocHJvcGVydGllcykge1xuICAgIHZhciBodG1sID0gJzx0YWJsZSBjbGFzcz1cImNlc2l1bS1pbmZvQm94LWRlZmF1bHRUYWJsZVwiPic7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcHJvcGVydGllc1trZXldO1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBodG1sICs9XG4gICAgICAgICAgICAgIFwiPHRyPjx0ZD5cIiArIGtleSArIFwiPC90ZD48dGQ+XCIgKyBkZXNjcmliZSh2YWx1ZSkgKyBcIjwvdGQ+PC90cj5cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHRtbCArPSBcIjx0cj48dGQ+XCIgKyBrZXkgKyBcIjwvdGQ+PHRkPlwiICsgdmFsdWUgKyBcIjwvdGQ+PC90cj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaHRtbCArPSBcIjwvdGFibGU+XCI7XG5cbiAgICByZXR1cm4gaHRtbDtcbiAgfVxuXG4gIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmliZShwcm9wZXJ0aWVzKTtcbn07XG5leHBvcnQgZGVmYXVsdCBJbWFnZXJ5TGF5ZXJGZWF0dXJlSW5mbztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93855\n')},95451:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n/* harmony import */ var _Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54973);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(68985);\n\n\n\n\n\n\n/**\n * Provides imagery to be displayed on the surface of an ellipsoid.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias ImageryProvider\n * @constructor\n * @abstract\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see GridImageryProvider\n * @see IonImageryProvider\n * @see MapboxImageryProvider\n * @see MapboxStyleImageryProvider\n * @see SingleTileImageryProvider\n * @see TileCoordinatesImageryProvider\n * @see UrlTemplateImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers.html|Cesium Sandcastle Imagery Layers Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n */\nfunction ImageryProvider() {\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n}\n\nObject.defineProperties(ImageryProvider.prototype, {\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n};\n\nvar ktx2Regex = /\\.ktx2$/i;\n\n/**\n * Loads an image from a given URL.  If the server referenced by the URL already has\n * too many requests pending, this function will instead return undefined, indicating\n * that the request should be retried later.\n *\n * @param {ImageryProvider} imageryProvider The imagery provider for the URL.\n * @param {Resource|String} url The URL of the image.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\nImageryProvider.loadImage = function (imageryProvider, url) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("url", url);\n  //>>includeEnd(\'debug\');\n\n  var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].createIfNeeded */ .Z.createIfNeeded(url);\n\n  if (ktx2Regex.test(resource.url)) {\n    return (0,_Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(resource);\n  } else if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(imageryProvider) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(imageryProvider.tileDiscardPolicy)\n  ) {\n    return resource.fetchImage({\n      preferBlob: true,\n      preferImageBitmap: true,\n      flipY: true,\n    });\n  }\n\n  return resource.fetchImage({\n    preferImageBitmap: true,\n    flipY: true,\n  });\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ImageryProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///95451\n')},80955:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * The direction to display an ImageryLayer relative to the {@link Scene#imagerySplitPosition}.\n *\n * @enum {Number}\n *\n * @see ImageryLayer#splitDirection\n */\nvar ImagerySplitDirection = {\n  /**\n   * Display the ImageryLayer to the left of the {@link Scene#imagerySplitPosition}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LEFT: -1.0,\n\n  /**\n   *  Always display the ImageryLayer.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NONE: 0.0,\n\n  /**\n   * Display the ImageryLayer to the right of the {@link Scene#imagerySplitPosition}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RIGHT: 1.0,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(ImagerySplitDirection));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA5NTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSw2REFBNkQsaUNBQWlDO0FBQzlGO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsaUNBQWlDO0FBQ25GO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbURBQW1ELGlDQUFpQztBQUNwRjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLG9DQUFvQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0ltYWdlcnlTcGxpdERpcmVjdGlvbi5qcz9kNjQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGRpcmVjdGlvbiB0byBkaXNwbGF5IGFuIEltYWdlcnlMYXllciByZWxhdGl2ZSB0byB0aGUge0BsaW5rIFNjZW5lI2ltYWdlcnlTcGxpdFBvc2l0aW9ufS5cbiAqXG4gKiBAZW51bSB7TnVtYmVyfVxuICpcbiAqIEBzZWUgSW1hZ2VyeUxheWVyI3NwbGl0RGlyZWN0aW9uXG4gKi9cbnZhciBJbWFnZXJ5U3BsaXREaXJlY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBEaXNwbGF5IHRoZSBJbWFnZXJ5TGF5ZXIgdG8gdGhlIGxlZnQgb2YgdGhlIHtAbGluayBTY2VuZSNpbWFnZXJ5U3BsaXRQb3NpdGlvbn0uXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTEVGVDogLTEuMCxcblxuICAvKipcbiAgICogIEFsd2F5cyBkaXNwbGF5IHRoZSBJbWFnZXJ5TGF5ZXIuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTk9ORTogMC4wLFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IHRoZSBJbWFnZXJ5TGF5ZXIgdG8gdGhlIHJpZ2h0IG9mIHRoZSB7QGxpbmsgU2NlbmUjaW1hZ2VyeVNwbGl0UG9zaXRpb259LlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFJJR0hUOiAxLjAsXG59O1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShJbWFnZXJ5U3BsaXREaXJlY3Rpb24pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80955\n')},73919:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * @private\n */\nvar ImageryState = {\n  UNLOADED: 0,\n  TRANSITIONING: 1,\n  RECEIVED: 2,\n  TEXTURE_LOADED: 3,\n  READY: 4,\n  FAILED: 5,\n  INVALID: 6,\n  PLACEHOLDER: 7,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(ImageryState));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM5MTkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSwyQkFBMkIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9JbWFnZXJ5U3RhdGUuanM/MmFjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBJbWFnZXJ5U3RhdGUgPSB7XG4gIFVOTE9BREVEOiAwLFxuICBUUkFOU0lUSU9OSU5HOiAxLFxuICBSRUNFSVZFRDogMixcbiAgVEVYVFVSRV9MT0FERUQ6IDMsXG4gIFJFQURZOiA0LFxuICBGQUlMRUQ6IDUsXG4gIElOVkFMSUQ6IDYsXG4gIFBMQUNFSE9MREVSOiA3LFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoSW1hZ2VyeVN0YXRlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73919\n')}}]);