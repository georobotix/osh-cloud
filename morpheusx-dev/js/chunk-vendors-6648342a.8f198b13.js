"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[5200],{11042:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14459);\n/* harmony import */ var _Core_GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71351);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(13222);\n\n\n\n\n\n\n\nvar defaultColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0, 1.0, 0.4);\nvar defaultGlowColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.0, 1.0, 0.0, 0.05);\nvar defaultBackgroundColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.0, 0.5, 0.0, 0.2);\n\n/**\n * @typedef {Object} GridImageryProvider.ConstructorOptions\n *\n * Initialization options for the GridImageryProvider constructor\n *\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme\'s ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @property {Number} [cells=8] The number of grids cells.\n * @property {Color} [color=Color(1.0, 1.0, 1.0, 0.4)] The color to draw grid lines.\n * @property {Color} [glowColor=Color(0.0, 1.0, 0.0, 0.05)] The color to draw glow for grid lines.\n * @property {Number} [glowWidth=6] The width of lines used for rendering the line glow effect.\n * @property {Color} [backgroundColor=Color(0.0, 0.5, 0.0, 0.2)] Background fill color.\n * @property {Number} [tileWidth=256] The width of the tile for level-of-detail selection purposes.\n * @property {Number} [tileHeight=256] The height of the tile for level-of-detail selection purposes.\n * @property {Number} [canvasSize=256] The size of the canvas used for rendering.\n */\n\n/**\n * An {@link ImageryProvider} that draws a wireframe grid on every tile with controllable background and glow.\n * May be useful for custom rendering effects or debugging terrain.\n *\n * @alias GridImageryProvider\n * @constructor\n * @param {GridImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n */\nfunction GridImageryProvider(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  this._tilingScheme = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.tilingScheme)\n    ? options.tilingScheme\n    : new _Core_GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({ ellipsoid: options.ellipsoid });\n  this._cells = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.cells, 8);\n  this._color = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.color, defaultColor);\n  this._glowColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.glowColor, defaultGlowColor);\n  this._glowWidth = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.glowWidth, 6);\n  this._backgroundColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    options.backgroundColor,\n    defaultBackgroundColor\n  );\n  this._errorEvent = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n  this._tileWidth = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.tileWidth, 256);\n  this._tileHeight = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.tileHeight, 256);\n\n  // A little larger than tile size so lines are sharper\n  // Note: can\'t be too much difference otherwise texture blowout\n  this._canvasSize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.canvasSize, 256);\n\n  // We only need a single canvas since all tiles will be the same\n  this._canvas = this._createGridCanvas();\n\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].resolve */ .Z.resolve(true);\n}\n\nObject.defineProperties(GridImageryProvider.prototype, {\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GridImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GridImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GridImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GridImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GridImageryProvider#ready} returns true.\n   * @memberof GridImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GridImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Draws a grid of lines into a canvas.\n */\nGridImageryProvider.prototype._drawGrid = function (context) {\n  var minPixel = 0;\n  var maxPixel = this._canvasSize;\n  for (var x = 0; x <= this._cells; ++x) {\n    var nx = x / this._cells;\n    var val = 1 + nx * (maxPixel - 1);\n\n    context.moveTo(val, minPixel);\n    context.lineTo(val, maxPixel);\n    context.moveTo(minPixel, val);\n    context.lineTo(maxPixel, val);\n  }\n  context.stroke();\n};\n\n/**\n * Render a grid into a canvas with background and glow\n */\nGridImageryProvider.prototype._createGridCanvas = function () {\n  var canvas = document.createElement("canvas");\n  canvas.width = this._canvasSize;\n  canvas.height = this._canvasSize;\n  var minPixel = 0;\n  var maxPixel = this._canvasSize;\n\n  var context = canvas.getContext("2d");\n\n  // Fill the background\n  var cssBackgroundColor = this._backgroundColor.toCssColorString();\n  context.fillStyle = cssBackgroundColor;\n  context.fillRect(minPixel, minPixel, maxPixel, maxPixel);\n\n  // Glow for grid lines\n  var cssGlowColor = this._glowColor.toCssColorString();\n  context.strokeStyle = cssGlowColor;\n  // Wide\n  context.lineWidth = this._glowWidth;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n  // Narrow\n  context.lineWidth = this._glowWidth * 0.5;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  this._drawGrid(context);\n\n  // Grid lines\n  var cssColor = this._color.toCssColorString();\n  // Border\n  context.strokeStyle = cssColor;\n  context.lineWidth = 2;\n  context.strokeRect(minPixel, minPixel, maxPixel, maxPixel);\n  // Inner\n  context.lineWidth = 1;\n  this._drawGrid(context);\n\n  return canvas;\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nGridImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GridImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\nGridImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._canvas;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nGridImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (GridImageryProvider)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11042\n')},14978:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53773);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26865);\n/* harmony import */ var _Core_GeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15361);\n/* harmony import */ var _Core_GroundPolylineGeometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(46031);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(60072);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(46588);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(53642);\n/* harmony import */ var _Shaders_PolylineShadowVolumeFS_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(145);\n/* harmony import */ var _Shaders_PolylineShadowVolumeMorphFS_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(27610);\n/* harmony import */ var _Shaders_PolylineShadowVolumeMorphVS_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(38632);\n/* harmony import */ var _Shaders_PolylineShadowVolumeVS_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(73248);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(13222);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(13633);\n/* harmony import */ var _ClassificationType_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(73001);\n/* harmony import */ var _CullFace_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(71593);\n/* harmony import */ var _PolylineColorAppearance_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(54052);\n/* harmony import */ var _PolylineMaterialAppearance_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(13597);\n/* harmony import */ var _Primitive_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(34380);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(89917);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(87233);\n/* harmony import */ var _StencilFunction_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(77053);\n/* harmony import */ var _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(81255);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A GroundPolylinePrimitive represents a polyline draped over the terrain or 3D Tiles in the {@link Scene}.\n * <p>\n * Only to be used with GeometryInstances containing {@link GroundPolylineGeometry}.\n * </p>\n *\n * @alias GroundPolylinePrimitive\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Array|GeometryInstance} [options.geometryInstances] GeometryInstances containing GroundPolylineGeometry\n * @param {Appearance} [options.appearance] The Appearance used to render the polyline. Defaults to a white color {@link Material} on a {@link PolylineMaterialAppearance}.\n * @param {Boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {Boolean} [options.interleave=false] When <code>true</code>, geometry vertex attributes are interleaved, which can slightly improve rendering performance but increases load time.\n * @param {Boolean} [options.releaseGeometryInstances=true] When <code>true</code>, the primitive does not keep a reference to the input <code>geometryInstances</code> to save memory.\n * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each geometry instance will only be pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n * @param {Boolean} [options.asynchronous=true] Determines if the primitive will be created asynchronously or block until ready. If false initializeTerrainHeights() must be called first.\n * @param {ClassificationType} [options.classificationType=ClassificationType.BOTH] Determines whether terrain, 3D Tiles or both will be classified.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive\'s commands\' bounding spheres are shown.\n * @param {Boolean} [options.debugShowShadowVolume=false] For debugging only. Determines if the shadow volume for each geometry in the primitive is drawn. Must be <code>true</code> on creation to have effect.\n *\n * @example\n * // 1. Draw a polyline on terrain with a basic color material\n *\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.GroundPolylineGeometry({\n *      positions : Cesium.Cartesian3.fromDegreesArray([\n *          -112.1340164450331, 36.05494287836128,\n *          -112.08821010582645, 36.097804071380715\n *      ]),\n *      width : 4.0\n *   }),\n *   id : \'object returned when this instance is picked and to get/set per-instance attributes\'\n * });\n *\n * scene.groundPrimitives.add(new Cesium.GroundPolylinePrimitive({\n *   geometryInstances : instance,\n *   appearance : new Cesium.PolylineMaterialAppearance()\n * }));\n *\n * // 2. Draw a looped polyline on terrain with per-instance color and a distance display condition.\n * // Distance display conditions for polylines on terrain are based on an approximate terrain height\n * // instead of true terrain height.\n *\n * var instance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.GroundPolylineGeometry({\n *      positions : Cesium.Cartesian3.fromDegreesArray([\n *          -112.1340164450331, 36.05494287836128,\n *          -112.08821010582645, 36.097804071380715,\n *          -112.13296079730024, 36.168769146801104\n *      ]),\n *      loop : true,\n *      width : 4.0\n *   }),\n *   attributes : {\n *      color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.fromCssColorString(\'green\').withAlpha(0.7)),\n *      distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(1000, 30000)\n *   },\n *   id : \'object returned when this instance is picked and to get/set per-instance attributes\'\n * });\n *\n * scene.groundPrimitives.add(new Cesium.GroundPolylinePrimitive({\n *   geometryInstances : instance,\n *   appearance : new Cesium.PolylineColorAppearance()\n * }));\n */\nfunction GroundPolylinePrimitive(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * The geometry instances rendered with this primitive. This may\n   * be <code>undefined</code> if <code>options.releaseGeometryInstances</code>\n   * is <code>true</code> when the primitive is constructed.\n   * <p>\n   * Changing this property after the primitive is rendered has no effect.\n   * </p>\n   *\n   * @readonly\n   * @type {Array|GeometryInstance}\n   *\n   * @default undefined\n   */\n  this.geometryInstances = options.geometryInstances;\n  this._hasPerInstanceColors = true;\n\n  var appearance = options.appearance;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(appearance)) {\n    appearance = new _PolylineMaterialAppearance_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z();\n  }\n  /**\n   * The {@link Appearance} used to shade this primitive. Each geometry\n   * instance is shaded with the same appearance.  Some appearances, like\n   * {@link PolylineColorAppearance} allow giving each instance unique\n   * properties.\n   *\n   * @type Appearance\n   *\n   * @default undefined\n   */\n  this.appearance = appearance;\n\n  /**\n   * Determines if the primitive will be shown.  This affects all geometry\n   * instances in the primitive.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.show, true);\n\n  /**\n   * Determines whether terrain, 3D Tiles or both will be classified.\n   *\n   * @type {ClassificationType}\n   *\n   * @default ClassificationType.BOTH\n   */\n  this.classificationType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.classificationType,\n    _ClassificationType_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].BOTH */ .Z.BOTH\n  );\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n\n  // Shadow volume is shown by removing a discard in the shader, so this isn\'t toggleable.\n  this._debugShowShadowVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.debugShowShadowVolume,\n    false\n  );\n\n  this._primitiveOptions = {\n    geometryInstances: undefined,\n    appearance: undefined,\n    vertexCacheOptimize: false,\n    interleave: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.interleave, false),\n    releaseGeometryInstances: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      options.releaseGeometryInstances,\n      true\n    ),\n    allowPicking: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.allowPicking, true),\n    asynchronous: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.asynchronous, true),\n    compressVertices: false,\n    _createShaderProgramFunction: undefined,\n    _createCommandsFunction: undefined,\n    _updateAndQueueCommandsFunction: undefined,\n  };\n\n  // Used when inserting in an OrderedPrimitiveCollection\n  this._zIndex = undefined;\n\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].defer */ .Z.defer();\n\n  this._primitive = undefined;\n\n  this._sp = undefined;\n  this._sp2D = undefined;\n  this._spMorph = undefined;\n\n  this._renderState = getRenderState(false);\n  this._renderState3DTiles = getRenderState(true);\n\n  this._renderStateMorph = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromCache */ .Z.fromCache({\n    cull: {\n      enabled: true,\n      face: _CullFace_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].FRONT */ .Z.FRONT, // Geometry is "inverted," so cull front when materials on volume instead of on terrain (morph)\n    },\n    depthTest: {\n      enabled: true,\n    },\n    blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].PRE_MULTIPLIED_ALPHA_BLEND */ .Z.PRE_MULTIPLIED_ALPHA_BLEND,\n    depthMask: false,\n  });\n}\n\nObject.defineProperties(GroundPolylinePrimitive.prototype, {\n  /**\n   * Determines if geometry vertex attributes are interleaved, which can slightly improve rendering performance.\n   *\n   * @memberof GroundPolylinePrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  interleave: {\n    get: function () {\n      return this._primitiveOptions.interleave;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the primitive does not keep a reference to the input <code>geometryInstances</code> to save memory.\n   *\n   * @memberof GroundPolylinePrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  releaseGeometryInstances: {\n    get: function () {\n      return this._primitiveOptions.releaseGeometryInstances;\n    },\n  },\n\n  /**\n   * When <code>true</code>, each geometry instance will only be pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n   *\n   * @memberof GroundPolylinePrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  allowPicking: {\n    get: function () {\n      return this._primitiveOptions.allowPicking;\n    },\n  },\n\n  /**\n   * Determines if the geometry instances will be created and batched on a web worker.\n   *\n   * @memberof GroundPolylinePrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  asynchronous: {\n    get: function () {\n      return this._primitiveOptions.asynchronous;\n    },\n  },\n\n  /**\n   * Determines if the primitive is complete and ready to render.  If this property is\n   * true, the primitive will be rendered the next time that {@link GroundPolylinePrimitive#update}\n   * is called.\n   *\n   * @memberof GroundPolylinePrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves when the primitive is ready to render.\n   * @memberof GroundPolylinePrimitive.prototype\n   * @type {Promise.<GroundPolylinePrimitive>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * If true, draws the shadow volume for each geometry in the primitive.\n   * </p>\n   *\n   * @memberof GroundPolylinePrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  debugShowShadowVolume: {\n    get: function () {\n      return this._debugShowShadowVolume;\n    },\n  },\n});\n\n/**\n * Initializes the minimum and maximum terrain heights. This only needs to be called if you are creating the\n * GroundPolylinePrimitive synchronously.\n *\n * @returns {Promise<void>} A promise that will resolve once the terrain heights have been loaded.\n */\nGroundPolylinePrimitive.initializeTerrainHeights = function () {\n  return _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].initialize */ .Z.initialize();\n};\n\nfunction createShaderProgram(groundPolylinePrimitive, frameState, appearance) {\n  var context = frameState.context;\n  var primitive = groundPolylinePrimitive._primitive;\n  var attributeLocations = primitive._attributeLocations;\n\n  var vs = primitive._batchTable.getVertexShaderCallback()(\n    _Shaders_PolylineShadowVolumeVS_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z\n  );\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._appendShowToShader */ .Z._appendShowToShader(primitive, vs);\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._appendDistanceDisplayConditionToShader */ .Z._appendDistanceDisplayConditionToShader(primitive, vs);\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._modifyShaderPosition */ .Z._modifyShaderPosition(\n    groundPolylinePrimitive,\n    vs,\n    frameState.scene3DOnly\n  );\n\n  var vsMorph = primitive._batchTable.getVertexShaderCallback()(\n    _Shaders_PolylineShadowVolumeMorphVS_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z\n  );\n  vsMorph = _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._appendShowToShader */ .Z._appendShowToShader(primitive, vsMorph);\n  vsMorph = _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._appendDistanceDisplayConditionToShader */ .Z._appendDistanceDisplayConditionToShader(\n    primitive,\n    vsMorph\n  );\n  vsMorph = _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._modifyShaderPosition */ .Z._modifyShaderPosition(\n    groundPolylinePrimitive,\n    vsMorph,\n    frameState.scene3DOnly\n  );\n\n  // Access pick color from fragment shader.\n  // Helps with varying budget.\n  var fs = primitive._batchTable.getVertexShaderCallback()(\n    _Shaders_PolylineShadowVolumeFS_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z\n  );\n\n  var vsDefines = [\n    "GLOBE_MINIMUM_ALTITUDE " +\n      frameState.mapProjection.ellipsoid.minimumRadius.toFixed(1),\n  ];\n  var colorDefine = "";\n  var materialShaderSource = "";\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(appearance.material)) {\n    materialShaderSource = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(appearance.material)\n      ? appearance.material.shaderSource\n      : "";\n\n    // Check for use of v_width and v_polylineAngle in material shader\n    // to determine whether these varyings should be active in the vertex shader.\n    if (\n      materialShaderSource.search(/varying\\s+float\\s+v_polylineAngle;/g) !== -1\n    ) {\n      vsDefines.push("ANGLE_VARYING");\n    }\n    if (materialShaderSource.search(/varying\\s+float\\s+v_width;/g) !== -1) {\n      vsDefines.push("WIDTH_VARYING");\n    }\n  } else {\n    colorDefine = "PER_INSTANCE_COLOR";\n  }\n\n  vsDefines.push(colorDefine);\n  var fsDefines = groundPolylinePrimitive.debugShowShadowVolume\n    ? ["DEBUG_SHOW_VOLUME", colorDefine]\n    : [colorDefine];\n\n  var vsColor3D = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n    defines: vsDefines,\n    sources: [vs],\n  });\n  var fsColor3D = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n    defines: fsDefines,\n    sources: [materialShaderSource, fs],\n  });\n  groundPolylinePrimitive._sp = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].replaceCache */ .Z.replaceCache({\n    context: context,\n    shaderProgram: primitive._sp,\n    vertexShaderSource: vsColor3D,\n    fragmentShaderSource: fsColor3D,\n    attributeLocations: attributeLocations,\n  });\n\n  // Derive 2D/CV\n  var colorProgram2D = context.shaderCache.getDerivedShaderProgram(\n    groundPolylinePrimitive._sp,\n    "2dColor"\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(colorProgram2D)) {\n    var vsColor2D = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n      defines: vsDefines.concat(["COLUMBUS_VIEW_2D"]),\n      sources: [vs],\n    });\n    colorProgram2D = context.shaderCache.createDerivedShaderProgram(\n      groundPolylinePrimitive._sp,\n      "2dColor",\n      {\n        context: context,\n        shaderProgram: groundPolylinePrimitive._sp2D,\n        vertexShaderSource: vsColor2D,\n        fragmentShaderSource: fsColor3D,\n        attributeLocations: attributeLocations,\n      }\n    );\n  }\n  groundPolylinePrimitive._sp2D = colorProgram2D;\n\n  // Derive Morph\n  var colorProgramMorph = context.shaderCache.getDerivedShaderProgram(\n    groundPolylinePrimitive._sp,\n    "MorphColor"\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(colorProgramMorph)) {\n    var vsColorMorph = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n      defines: vsDefines.concat([\n        "MAX_TERRAIN_HEIGHT " +\n          _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"]._defaultMaxTerrainHeight.toFixed */ .Z._defaultMaxTerrainHeight.toFixed(1),\n      ]),\n      sources: [vsMorph],\n    });\n\n    fs = primitive._batchTable.getVertexShaderCallback()(\n      _Shaders_PolylineShadowVolumeMorphFS_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z\n    );\n    var fsColorMorph = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n      defines: fsDefines,\n      sources: [materialShaderSource, fs],\n    });\n    colorProgramMorph = context.shaderCache.createDerivedShaderProgram(\n      groundPolylinePrimitive._sp,\n      "MorphColor",\n      {\n        context: context,\n        shaderProgram: groundPolylinePrimitive._spMorph,\n        vertexShaderSource: vsColorMorph,\n        fragmentShaderSource: fsColorMorph,\n        attributeLocations: attributeLocations,\n      }\n    );\n  }\n  groundPolylinePrimitive._spMorph = colorProgramMorph;\n}\n\nfunction getRenderState(mask3DTiles) {\n  return _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromCache */ .Z.fromCache({\n    cull: {\n      enabled: true, // prevent double-draw. Geometry is "inverted" (reversed winding order) so we\'re drawing backfaces.\n    },\n    blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].PRE_MULTIPLIED_ALPHA_BLEND */ .Z.PRE_MULTIPLIED_ALPHA_BLEND,\n    depthMask: false,\n    stencilTest: {\n      enabled: mask3DTiles,\n      frontFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].EQUAL */ .Z.EQUAL,\n      frontOperation: {\n        fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].KEEP */ .Z.KEEP,\n        zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].KEEP */ .Z.KEEP,\n      },\n      backFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].EQUAL */ .Z.EQUAL,\n      backOperation: {\n        fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].KEEP */ .Z.KEEP,\n        zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].KEEP */ .Z.KEEP,\n      },\n      reference: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n      mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n    },\n  });\n}\n\nfunction createCommands(\n  groundPolylinePrimitive,\n  appearance,\n  material,\n  translucent,\n  colorCommands,\n  pickCommands\n) {\n  var primitive = groundPolylinePrimitive._primitive;\n  var length = primitive._va.length;\n  colorCommands.length = length;\n  pickCommands.length = length;\n\n  var isPolylineColorAppearance = appearance instanceof _PolylineColorAppearance_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z;\n\n  var materialUniforms = isPolylineColorAppearance ? {} : material._uniforms;\n  var uniformMap = primitive._batchTable.getUniformMapCallback()(\n    materialUniforms\n  );\n\n  for (var i = 0; i < length; i++) {\n    var vertexArray = primitive._va[i];\n\n    var command = colorCommands[i];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(command)) {\n      command = colorCommands[i] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n        owner: groundPolylinePrimitive,\n        primitiveType: primitive._primitiveType,\n      });\n    }\n\n    command.vertexArray = vertexArray;\n    command.renderState = groundPolylinePrimitive._renderState;\n    command.shaderProgram = groundPolylinePrimitive._sp;\n    command.uniformMap = uniformMap;\n    command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION;\n    command.pickId = "czm_batchTable_pickColor(v_endPlaneNormalEcAndBatchId.w)";\n\n    var derivedTilesetCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.tileset\n    );\n    derivedTilesetCommand.renderState =\n      groundPolylinePrimitive._renderState3DTiles;\n    derivedTilesetCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION;\n    command.derivedCommands.tileset = derivedTilesetCommand;\n\n    // derive for 2D\n    var derived2DCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.color2D\n    );\n    derived2DCommand.shaderProgram = groundPolylinePrimitive._sp2D;\n    command.derivedCommands.color2D = derived2DCommand;\n\n    var derived2DTilesetCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].shallowClone */ .Z.shallowClone(\n      derivedTilesetCommand,\n      derivedTilesetCommand.derivedCommands.color2D\n    );\n    derived2DTilesetCommand.shaderProgram = groundPolylinePrimitive._sp2D;\n    derivedTilesetCommand.derivedCommands.color2D = derived2DTilesetCommand;\n\n    // derive for Morph\n    var derivedMorphCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.colorMorph\n    );\n    derivedMorphCommand.renderState = groundPolylinePrimitive._renderStateMorph;\n    derivedMorphCommand.shaderProgram = groundPolylinePrimitive._spMorph;\n    derivedMorphCommand.pickId = "czm_batchTable_pickColor(v_batchId)";\n    command.derivedCommands.colorMorph = derivedMorphCommand;\n  }\n}\n\nfunction updateAndQueueCommand(\n  groundPolylinePrimitive,\n  command,\n  frameState,\n  modelMatrix,\n  cull,\n  boundingVolume,\n  debugShowBoundingVolume\n) {\n  // Use derived appearance command for morph and 2D\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].MORPHING */ .Z.MORPHING) {\n    command = command.derivedCommands.colorMorph;\n  } else if (frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    command = command.derivedCommands.color2D;\n  }\n  command.modelMatrix = modelMatrix;\n  command.boundingVolume = boundingVolume;\n  command.cull = cull;\n  command.debugShowBoundingVolume = debugShowBoundingVolume;\n\n  frameState.commandList.push(command);\n}\n\nfunction updateAndQueueCommands(\n  groundPolylinePrimitive,\n  frameState,\n  colorCommands,\n  pickCommands,\n  modelMatrix,\n  cull,\n  debugShowBoundingVolume\n) {\n  var primitive = groundPolylinePrimitive._primitive;\n\n  _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"]._updateBoundingVolumes */ .Z._updateBoundingVolumes(primitive, frameState, modelMatrix); // Expected to be identity - GroundPrimitives don\'t support other model matrices\n\n  var boundingSpheres;\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    boundingSpheres = primitive._boundingSphereWC;\n  } else if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    boundingSpheres = primitive._boundingSphereCV;\n  } else if (\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(primitive._boundingSphere2D)\n  ) {\n    boundingSpheres = primitive._boundingSphere2D;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(primitive._boundingSphereMorph)) {\n    boundingSpheres = primitive._boundingSphereMorph;\n  }\n\n  var morphing = frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].MORPHING */ .Z.MORPHING;\n  var classificationType = groundPolylinePrimitive.classificationType;\n  var queueTerrainCommands =\n    classificationType !== _ClassificationType_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE;\n  var queue3DTilesCommands =\n    classificationType !== _ClassificationType_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].TERRAIN */ .Z.TERRAIN && !morphing;\n\n  var command;\n  var passes = frameState.passes;\n  if (passes.render || (passes.pick && primitive.allowPicking)) {\n    var colorLength = colorCommands.length;\n    for (var j = 0; j < colorLength; ++j) {\n      var boundingVolume = boundingSpheres[j];\n      if (queueTerrainCommands) {\n        command = colorCommands[j];\n        updateAndQueueCommand(\n          groundPolylinePrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n      if (queue3DTilesCommands) {\n        command = colorCommands[j].derivedCommands.tileset;\n        updateAndQueueCommand(\n          groundPolylinePrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n    }\n  }\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} For synchronous GroundPolylinePrimitives, you must call GroundPolylinePrimitives.initializeTerrainHeights() and wait for the returned promise to resolve.\n * @exception {DeveloperError} All GeometryInstances must have color attributes to use PolylineColorAppearance with GroundPolylinePrimitive.\n */\nGroundPolylinePrimitive.prototype.update = function (frameState) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(this._primitive) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(this.geometryInstances)) {\n    return;\n  }\n\n  if (!_Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].initialized */ .Z.initialized) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (!this.asynchronous) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "For synchronous GroundPolylinePrimitives, you must call GroundPolylinePrimitives.initializeTerrainHeights() and wait for the returned promise to resolve."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    GroundPolylinePrimitive.initializeTerrainHeights();\n    return;\n  }\n\n  var i;\n\n  var that = this;\n  var primitiveOptions = this._primitiveOptions;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(this._primitive)) {\n    var geometryInstances = Array.isArray(this.geometryInstances)\n      ? this.geometryInstances\n      : [this.geometryInstances];\n    var geometryInstancesLength = geometryInstances.length;\n    var groundInstances = new Array(geometryInstancesLength);\n\n    var attributes;\n\n    // Check if each instance has a color attribute.\n    for (i = 0; i < geometryInstancesLength; ++i) {\n      attributes = geometryInstances[i].attributes;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(attributes) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(attributes.color)) {\n        this._hasPerInstanceColors = false;\n        break;\n      }\n    }\n\n    for (i = 0; i < geometryInstancesLength; ++i) {\n      var geometryInstance = geometryInstances[i];\n      attributes = {};\n      var instanceAttributes = geometryInstance.attributes;\n      for (var attributeKey in instanceAttributes) {\n        if (instanceAttributes.hasOwnProperty(attributeKey)) {\n          attributes[attributeKey] = instanceAttributes[attributeKey];\n        }\n      }\n\n      // Automatically create line width attribute if not already given\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(attributes.width)) {\n        attributes.width = new _Core_GeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n          componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n          componentsPerAttribute: 1.0,\n          value: [geometryInstance.geometry.width],\n        });\n      }\n\n      // Update each geometry for framestate.scene3DOnly = true and projection\n      geometryInstance.geometry._scene3DOnly = frameState.scene3DOnly;\n      _Core_GroundPolylineGeometry_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].setProjectionAndEllipsoid */ .Z.setProjectionAndEllipsoid(\n        geometryInstance.geometry,\n        frameState.mapProjection\n      );\n\n      groundInstances[i] = new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n        geometry: geometryInstance.geometry,\n        attributes: attributes,\n        id: geometryInstance.id,\n        pickPrimitive: that,\n      });\n    }\n\n    primitiveOptions.geometryInstances = groundInstances;\n    primitiveOptions.appearance = this.appearance;\n\n    primitiveOptions._createShaderProgramFunction = function (\n      primitive,\n      frameState,\n      appearance\n    ) {\n      createShaderProgram(that, frameState, appearance);\n    };\n    primitiveOptions._createCommandsFunction = function (\n      primitive,\n      appearance,\n      material,\n      translucent,\n      twoPasses,\n      colorCommands,\n      pickCommands\n    ) {\n      createCommands(\n        that,\n        appearance,\n        material,\n        translucent,\n        colorCommands,\n        pickCommands\n      );\n    };\n    primitiveOptions._updateAndQueueCommandsFunction = function (\n      primitive,\n      frameState,\n      colorCommands,\n      pickCommands,\n      modelMatrix,\n      cull,\n      debugShowBoundingVolume,\n      twoPasses\n    ) {\n      updateAndQueueCommands(\n        that,\n        frameState,\n        colorCommands,\n        pickCommands,\n        modelMatrix,\n        cull,\n        debugShowBoundingVolume\n      );\n    };\n\n    this._primitive = new _Primitive_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(primitiveOptions);\n    this._primitive.readyPromise.then(function (primitive) {\n      that._ready = true;\n\n      if (that.releaseGeometryInstances) {\n        that.geometryInstances = undefined;\n      }\n\n      var error = primitive._error;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(error)) {\n        that._readyPromise.resolve(that);\n      } else {\n        that._readyPromise.reject(error);\n      }\n    });\n  }\n\n  if (\n    this.appearance instanceof _PolylineColorAppearance_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z &&\n    !this._hasPerInstanceColors\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "All GeometryInstances must have color attributes to use PolylineColorAppearance with GroundPolylinePrimitive."\n    );\n  }\n\n  this._primitive.appearance = this.appearance;\n  this._primitive.show = this.show;\n  this._primitive.debugShowBoundingVolume = this.debugShowBoundingVolume;\n  this._primitive.update(frameState);\n};\n\n/**\n * Returns the modifiable per-instance attributes for a {@link GeometryInstance}.\n *\n * @param {*} id The id of the {@link GeometryInstance}.\n * @returns {Object} The typed array in the attribute\'s format or undefined if the is no instance with id.\n *\n * @exception {DeveloperError} must call update before calling getGeometryInstanceAttributes.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes(\'an id\');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA);\n * attributes.show = Cesium.ShowGeometryInstanceAttribute.toValue(true);\n */\nGroundPolylinePrimitive.prototype.getGeometryInstanceAttributes = function (\n  id\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(this._primitive)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "must call update before calling getGeometryInstanceAttributes"\n    );\n  }\n  //>>includeEnd(\'debug\');\n  return this._primitive.getGeometryInstanceAttributes(id);\n};\n\n/**\n * Checks if the given Scene supports GroundPolylinePrimitives.\n * GroundPolylinePrimitives require support for the WEBGL_depth_texture extension.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports GroundPolylinePrimitives.\n */\nGroundPolylinePrimitive.isSupported = function (scene) {\n  return scene.frameState.context.depthTexture;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see GroundPolylinePrimitive#destroy\n */\nGroundPolylinePrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * e = e && e.destroy();\n *\n * @see GroundPolylinePrimitive#isDestroyed\n */\nGroundPolylinePrimitive.prototype.destroy = function () {\n  this._primitive = this._primitive && this._primitive.destroy();\n  this._sp = this._sp && this._sp.destroy();\n\n  // Derived programs, destroyed above if they existed.\n  this._sp2D = undefined;\n  this._spMorph = undefined;\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GroundPolylinePrimitive);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14978\n')},47780:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53773);\n/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(26865);\n/* harmony import */ var _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(25405);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96190);\n/* harmony import */ var _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(78257);\n/* harmony import */ var _ClassificationPrimitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14662);\n/* harmony import */ var _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(73001);\n/* harmony import */ var _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(64060);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(89917);\n/* harmony import */ var _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(88472);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(13222);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar GroundPrimitiveUniformMap = {\n  u_globeMinimumAltitude: function () {\n    return 55000.0;\n  },\n};\n\n/**\n * A ground primitive represents geometry draped over terrain or 3D Tiles in the {@link Scene}.\n * <p>\n * A primitive combines geometry instances with an {@link Appearance} that describes the full shading, including\n * {@link Material} and {@link RenderState}.  Roughly, the geometry instance defines the structure and placement,\n * and the appearance defines the visual characteristics.  Decoupling geometry and appearance allows us to mix\n * and match most of them and add a new geometry or appearance independently of each other.\n * </p>\n * <p>\n * Support for the WEBGL_depth_texture extension is required to use GeometryInstances with different PerInstanceColors\n * or materials besides PerInstanceColorAppearance.\n * </p>\n * <p>\n * Textured GroundPrimitives were designed for notional patterns and are not meant for precisely mapping\n * textures to terrain - for that use case, use {@link SingleTileImageryProvider}.\n * </p>\n * <p>\n * For correct rendering, this feature requires the EXT_frag_depth WebGL extension. For hardware that do not support this extension, there\n * will be rendering artifacts for some viewing angles.\n * </p>\n * <p>\n * Valid geometries are {@link CircleGeometry}, {@link CorridorGeometry}, {@link EllipseGeometry}, {@link PolygonGeometry}, and {@link RectangleGeometry}.\n * </p>\n *\n * @alias GroundPrimitive\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Array|GeometryInstance} [options.geometryInstances] The geometry instances to render.\n * @param {Appearance} [options.appearance] The appearance used to render the primitive. Defaults to a flat PerInstanceColorAppearance when GeometryInstances have a color attribute.\n * @param {Boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {Boolean} [options.vertexCacheOptimize=false] When <code>true</code>, geometry vertices are optimized for the pre and post-vertex-shader caches.\n * @param {Boolean} [options.interleave=false] When <code>true</code>, geometry vertex attributes are interleaved, which can slightly improve rendering performance but increases load time.\n * @param {Boolean} [options.compressVertices=true] When <code>true</code>, the geometry vertices are compressed, which will save memory.\n * @param {Boolean} [options.releaseGeometryInstances=true] When <code>true</code>, the primitive does not keep a reference to the input <code>geometryInstances</code> to save memory.\n * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each geometry instance will only be pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n * @param {Boolean} [options.asynchronous=true] Determines if the primitive will be created asynchronously or block until ready. If false initializeTerrainHeights() must be called first.\n * @param {ClassificationType} [options.classificationType=ClassificationType.BOTH] Determines whether terrain, 3D Tiles or both will be classified.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive\'s commands\' bounding spheres are shown.\n * @param {Boolean} [options.debugShowShadowVolume=false] For debugging only. Determines if the shadow volume for each geometry in the primitive is drawn. Must be <code>true</code> on\n *                  creation for the volumes to be created before the geometry is released or options.releaseGeometryInstance must be <code>false</code>.\n *\n * @example\n * // Example 1: Create primitive with a single instance\n * var rectangleInstance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.RectangleGeometry({\n *     rectangle : Cesium.Rectangle.fromDegrees(-140.0, 30.0, -100.0, 40.0)\n *   }),\n *   id : \'rectangle\',\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(0.0, 1.0, 1.0, 0.5)\n *   }\n * });\n * scene.primitives.add(new Cesium.GroundPrimitive({\n *   geometryInstances : rectangleInstance\n * }));\n *\n * // Example 2: Batch instances\n * var color = new Cesium.ColorGeometryInstanceAttribute(0.0, 1.0, 1.0, 0.5); // Both instances must have the same color.\n * var rectangleInstance = new Cesium.GeometryInstance({\n *   geometry : new Cesium.RectangleGeometry({\n *     rectangle : Cesium.Rectangle.fromDegrees(-140.0, 30.0, -100.0, 40.0)\n *   }),\n *   id : \'rectangle\',\n *   attributes : {\n *     color : color\n *   }\n * });\n * var ellipseInstance = new Cesium.GeometryInstance({\n *     geometry : new Cesium.EllipseGeometry({\n *         center : Cesium.Cartesian3.fromDegrees(-105.0, 40.0),\n *         semiMinorAxis : 300000.0,\n *         semiMajorAxis : 400000.0\n *     }),\n *     id : \'ellipse\',\n *     attributes : {\n *         color : color\n *     }\n * });\n * scene.primitives.add(new Cesium.GroundPrimitive({\n *   geometryInstances : [rectangleInstance, ellipseInstance]\n * }));\n *\n * @see Primitive\n * @see ClassificationPrimitive\n * @see GeometryInstance\n * @see Appearance\n */\nfunction GroundPrimitive(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var appearance = options.appearance;\n  var geometryInstances = options.geometryInstances;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(appearance) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(geometryInstances)) {\n    var geometryInstancesArray = Array.isArray(geometryInstances)\n      ? geometryInstances\n      : [geometryInstances];\n    var geometryInstanceCount = geometryInstancesArray.length;\n    for (var i = 0; i < geometryInstanceCount; i++) {\n      var attributes = geometryInstancesArray[i].attributes;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(attributes) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(attributes.color)) {\n        appearance = new _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n          flat: true,\n        });\n        break;\n      }\n    }\n  }\n  /**\n   * The {@link Appearance} used to shade this primitive. Each geometry\n   * instance is shaded with the same appearance.  Some appearances, like\n   * {@link PerInstanceColorAppearance} allow giving each instance unique\n   * properties.\n   *\n   * @type Appearance\n   *\n   * @default undefined\n   */\n  this.appearance = appearance;\n\n  /**\n   * The geometry instances rendered with this primitive.  This may\n   * be <code>undefined</code> if <code>options.releaseGeometryInstances</code>\n   * is <code>true</code> when the primitive is constructed.\n   * <p>\n   * Changing this property after the primitive is rendered has no effect.\n   * </p>\n   *\n   * @readonly\n   * @type {Array|GeometryInstance}\n   *\n   * @default undefined\n   */\n  this.geometryInstances = options.geometryInstances;\n  /**\n   * Determines if the primitive will be shown.  This affects all geometry\n   * instances in the primitive.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.show, true);\n  /**\n   * Determines whether terrain, 3D Tiles or both will be classified.\n   *\n   * @type {ClassificationType}\n   *\n   * @default ClassificationType.BOTH\n   */\n  this.classificationType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n    options.classificationType,\n    _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].BOTH */ .Z.BOTH\n  );\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the shadow volume for each geometry in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowShadowVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n    options.debugShowShadowVolume,\n    false\n  );\n\n  this._boundingVolumes = [];\n  this._boundingVolumes2D = [];\n\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].defer */ .Z.defer();\n\n  this._primitive = undefined;\n\n  this._maxHeight = undefined;\n  this._minHeight = undefined;\n\n  this._maxTerrainHeight = _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"]._defaultMaxTerrainHeight */ .Z._defaultMaxTerrainHeight;\n  this._minTerrainHeight = _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"]._defaultMinTerrainHeight */ .Z._defaultMinTerrainHeight;\n\n  this._boundingSpheresKeys = [];\n  this._boundingSpheres = [];\n\n  this._useFragmentCulling = false;\n  // Used when inserting in an OrderedPrimitiveCollection\n  this._zIndex = undefined;\n\n  var that = this;\n  this._classificationPrimitiveOptions = {\n    geometryInstances: undefined,\n    appearance: undefined,\n    vertexCacheOptimize: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.vertexCacheOptimize, false),\n    interleave: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.interleave, false),\n    releaseGeometryInstances: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n      options.releaseGeometryInstances,\n      true\n    ),\n    allowPicking: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.allowPicking, true),\n    asynchronous: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.asynchronous, true),\n    compressVertices: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.compressVertices, true),\n    _createBoundingVolumeFunction: undefined,\n    _updateAndQueueCommandsFunction: undefined,\n    _pickPrimitive: that,\n    _extruded: true,\n    _uniformMap: GroundPrimitiveUniformMap,\n  };\n}\n\nObject.defineProperties(GroundPrimitive.prototype, {\n  /**\n   * When <code>true</code>, geometry vertices are optimized for the pre and post-vertex-shader caches.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  vertexCacheOptimize: {\n    get: function () {\n      return this._classificationPrimitiveOptions.vertexCacheOptimize;\n    },\n  },\n\n  /**\n   * Determines if geometry vertex attributes are interleaved, which can slightly improve rendering performance.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  interleave: {\n    get: function () {\n      return this._classificationPrimitiveOptions.interleave;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the primitive does not keep a reference to the input <code>geometryInstances</code> to save memory.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  releaseGeometryInstances: {\n    get: function () {\n      return this._classificationPrimitiveOptions.releaseGeometryInstances;\n    },\n  },\n\n  /**\n   * When <code>true</code>, each geometry instance will only be pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  allowPicking: {\n    get: function () {\n      return this._classificationPrimitiveOptions.allowPicking;\n    },\n  },\n\n  /**\n   * Determines if the geometry instances will be created and batched on a web worker.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  asynchronous: {\n    get: function () {\n      return this._classificationPrimitiveOptions.asynchronous;\n    },\n  },\n\n  /**\n   * When <code>true</code>, geometry vertices are compressed, which will save memory.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  compressVertices: {\n    get: function () {\n      return this._classificationPrimitiveOptions.compressVertices;\n    },\n  },\n\n  /**\n   * Determines if the primitive is complete and ready to render.  If this property is\n   * true, the primitive will be rendered the next time that {@link GroundPrimitive#update}\n   * is called.\n   *\n   * @memberof GroundPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves when the primitive is ready to render.\n   * @memberof GroundPrimitive.prototype\n   * @type {Promise.<GroundPrimitive>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n});\n\n/**\n * Determines if GroundPrimitive rendering is supported.\n *\n * @function\n * @param {Scene} scene The scene.\n * @returns {Boolean} <code>true</code> if GroundPrimitives are supported; otherwise, returns <code>false</code>\n */\nGroundPrimitive.isSupported = _ClassificationPrimitive_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].isSupported */ .Z.isSupported;\n\nfunction getComputeMaximumHeightFunction(primitive) {\n  return function (granularity, ellipsoid) {\n    var r = ellipsoid.maximumRadius;\n    var delta = r / Math.cos(granularity * 0.5) - r;\n    return primitive._maxHeight + delta;\n  };\n}\n\nfunction getComputeMinimumHeightFunction(primitive) {\n  return function (granularity, ellipsoid) {\n    return primitive._minHeight;\n  };\n}\n\nvar scratchBVCartesianHigh = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchBVCartesianLow = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchBVCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchBVCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchBVRectangle = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\nfunction getRectangle(frameState, geometry) {\n  var ellipsoid = frameState.mapProjection.ellipsoid;\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(geometry.attributes) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(geometry.attributes.position3DHigh)\n  ) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(geometry.rectangle)) {\n      return geometry.rectangle;\n    }\n\n    return undefined;\n  }\n\n  var highPositions = geometry.attributes.position3DHigh.values;\n  var lowPositions = geometry.attributes.position3DLow.values;\n  var length = highPositions.length;\n\n  var minLat = Number.POSITIVE_INFINITY;\n  var minLon = Number.POSITIVE_INFINITY;\n  var maxLat = Number.NEGATIVE_INFINITY;\n  var maxLon = Number.NEGATIVE_INFINITY;\n\n  for (var i = 0; i < length; i += 3) {\n    var highPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n      highPositions,\n      i,\n      scratchBVCartesianHigh\n    );\n    var lowPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(lowPositions, i, scratchBVCartesianLow);\n\n    var position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n      highPosition,\n      lowPosition,\n      scratchBVCartesian\n    );\n    var cartographic = ellipsoid.cartesianToCartographic(\n      position,\n      scratchBVCartographic\n    );\n\n    var latitude = cartographic.latitude;\n    var longitude = cartographic.longitude;\n\n    minLat = Math.min(minLat, latitude);\n    minLon = Math.min(minLon, longitude);\n    maxLat = Math.max(maxLat, latitude);\n    maxLon = Math.max(maxLon, longitude);\n  }\n\n  var rectangle = scratchBVRectangle;\n  rectangle.north = maxLat;\n  rectangle.south = minLat;\n  rectangle.east = maxLon;\n  rectangle.west = minLon;\n\n  return rectangle;\n}\n\nfunction setMinMaxTerrainHeights(primitive, rectangle, ellipsoid) {\n  var result = _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getMinimumMaximumHeights */ .Z.getMinimumMaximumHeights(\n    rectangle,\n    ellipsoid\n  );\n\n  primitive._minTerrainHeight = result.minimumTerrainHeight;\n  primitive._maxTerrainHeight = result.maximumTerrainHeight;\n}\n\nfunction createBoundingVolume(groundPrimitive, frameState, geometry) {\n  var ellipsoid = frameState.mapProjection.ellipsoid;\n  var rectangle = getRectangle(frameState, geometry);\n\n  var obb = _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].fromRectangle */ .Z.fromRectangle(\n    rectangle,\n    groundPrimitive._minHeight,\n    groundPrimitive._maxHeight,\n    ellipsoid\n  );\n  groundPrimitive._boundingVolumes.push(obb);\n\n  if (!frameState.scene3DOnly) {\n    var projection = frameState.mapProjection;\n    var boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromRectangleWithHeights2D */ .Z.fromRectangleWithHeights2D(\n      rectangle,\n      projection,\n      groundPrimitive._maxHeight,\n      groundPrimitive._minHeight\n    );\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n      boundingVolume.center.z,\n      boundingVolume.center.x,\n      boundingVolume.center.y,\n      boundingVolume.center\n    );\n\n    groundPrimitive._boundingVolumes2D.push(boundingVolume);\n  }\n}\n\nfunction boundingVolumeIndex(commandIndex, length) {\n  return Math.floor((commandIndex % length) / 2);\n}\n\nfunction updateAndQueueRenderCommand(\n  groundPrimitive,\n  command,\n  frameState,\n  modelMatrix,\n  cull,\n  boundingVolume,\n  debugShowBoundingVolume\n) {\n  // Use derived appearance command for 2D if needed\n  var classificationPrimitive = groundPrimitive._primitive;\n  if (\n    frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    command.shaderProgram === classificationPrimitive._spColor &&\n    classificationPrimitive._needs2DShader\n  ) {\n    command = command.derivedCommands.appearance2D;\n  }\n\n  command.owner = groundPrimitive;\n  command.modelMatrix = modelMatrix;\n  command.boundingVolume = boundingVolume;\n  command.cull = cull;\n  command.debugShowBoundingVolume = debugShowBoundingVolume;\n\n  frameState.commandList.push(command);\n}\n\nfunction updateAndQueuePickCommand(\n  groundPrimitive,\n  command,\n  frameState,\n  modelMatrix,\n  cull,\n  boundingVolume\n) {\n  // Use derived pick command for 2D if needed\n  var classificationPrimitive = groundPrimitive._primitive;\n  if (\n    frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    command.shaderProgram === classificationPrimitive._spPick &&\n    classificationPrimitive._needs2DShader\n  ) {\n    command = command.derivedCommands.pick2D;\n  }\n\n  command.owner = groundPrimitive;\n  command.modelMatrix = modelMatrix;\n  command.boundingVolume = boundingVolume;\n  command.cull = cull;\n\n  frameState.commandList.push(command);\n}\n\nfunction updateAndQueueCommands(\n  groundPrimitive,\n  frameState,\n  colorCommands,\n  pickCommands,\n  modelMatrix,\n  cull,\n  debugShowBoundingVolume,\n  twoPasses\n) {\n  var boundingVolumes;\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    boundingVolumes = groundPrimitive._boundingVolumes;\n  } else {\n    boundingVolumes = groundPrimitive._boundingVolumes2D;\n  }\n\n  var classificationType = groundPrimitive.classificationType;\n  var queueTerrainCommands =\n    classificationType !== _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE;\n  var queue3DTilesCommands = classificationType !== _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TERRAIN */ .Z.TERRAIN;\n\n  var passes = frameState.passes;\n  var classificationPrimitive = groundPrimitive._primitive;\n\n  var i;\n  var boundingVolume;\n  var command;\n\n  if (passes.render) {\n    var colorLength = colorCommands.length;\n\n    for (i = 0; i < colorLength; ++i) {\n      boundingVolume = boundingVolumes[boundingVolumeIndex(i, colorLength)];\n      if (queueTerrainCommands) {\n        command = colorCommands[i];\n        updateAndQueueRenderCommand(\n          groundPrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n      if (queue3DTilesCommands) {\n        command = colorCommands[i].derivedCommands.tileset;\n        updateAndQueueRenderCommand(\n          groundPrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n    }\n\n    if (frameState.invertClassification) {\n      var ignoreShowCommands = classificationPrimitive._commandsIgnoreShow;\n      var ignoreShowCommandsLength = ignoreShowCommands.length;\n      for (i = 0; i < ignoreShowCommandsLength; ++i) {\n        boundingVolume = boundingVolumes[i];\n        command = ignoreShowCommands[i];\n        updateAndQueueRenderCommand(\n          groundPrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n    }\n  }\n\n  if (passes.pick) {\n    var pickLength = pickCommands.length;\n\n    var pickOffsets;\n    if (!groundPrimitive._useFragmentCulling) {\n      // Must be using pick offsets\n      pickOffsets = classificationPrimitive._primitive._pickOffsets;\n    }\n    for (i = 0; i < pickLength; ++i) {\n      boundingVolume = boundingVolumes[boundingVolumeIndex(i, pickLength)];\n      if (!groundPrimitive._useFragmentCulling) {\n        var pickOffset = pickOffsets[boundingVolumeIndex(i, pickLength)];\n        boundingVolume = boundingVolumes[pickOffset.index];\n      }\n      if (queueTerrainCommands) {\n        command = pickCommands[i];\n        updateAndQueuePickCommand(\n          groundPrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume\n        );\n      }\n      if (queue3DTilesCommands) {\n        command = pickCommands[i].derivedCommands.tileset;\n        updateAndQueuePickCommand(\n          groundPrimitive,\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume\n        );\n      }\n    }\n  }\n}\n\n/**\n * Initializes the minimum and maximum terrain heights. This only needs to be called if you are creating the\n * GroundPrimitive synchronously.\n *\n * @returns {Promise<void>} A promise that will resolve once the terrain heights have been loaded.\n *\n */\nGroundPrimitive.initializeTerrainHeights = function () {\n  return _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].initialize */ .Z.initialize();\n};\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} For synchronous GroundPrimitive, you must call GroundPrimitive.initializeTerrainHeights() and wait for the returned promise to resolve.\n * @exception {DeveloperError} All instance geometries must have the same primitiveType.\n * @exception {DeveloperError} Appearance and material have a uniform with the same name.\n */\nGroundPrimitive.prototype.update = function (frameState) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._primitive) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this.geometryInstances)) {\n    return;\n  }\n\n  if (!_Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].initialized */ .Z.initialized) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (!this.asynchronous) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n        "For synchronous GroundPrimitives, you must call GroundPrimitive.initializeTerrainHeights() and wait for the returned promise to resolve."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    GroundPrimitive.initializeTerrainHeights();\n    return;\n  }\n\n  var that = this;\n  var primitiveOptions = this._classificationPrimitiveOptions;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._primitive)) {\n    var ellipsoid = frameState.mapProjection.ellipsoid;\n\n    var instance;\n    var geometry;\n    var instanceType;\n\n    var instances = Array.isArray(this.geometryInstances)\n      ? this.geometryInstances\n      : [this.geometryInstances];\n    var length = instances.length;\n    var groundInstances = new Array(length);\n\n    var i;\n    var rectangle;\n    for (i = 0; i < length; ++i) {\n      instance = instances[i];\n      geometry = instance.geometry;\n      var instanceRectangle = getRectangle(frameState, geometry);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(rectangle)) {\n        rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].clone */ .Z.clone(instanceRectangle);\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(instanceRectangle)) {\n        _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].union */ .Z.union(rectangle, instanceRectangle, rectangle);\n      }\n\n      var id = instance.id;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(id) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(instanceRectangle)) {\n        var boundingSphere = _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getBoundingSphere */ .Z.getBoundingSphere(\n          instanceRectangle,\n          ellipsoid\n        );\n        this._boundingSpheresKeys.push(id);\n        this._boundingSpheres.push(boundingSphere);\n      }\n\n      instanceType = geometry.constructor;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(instanceType) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(instanceType.createShadowVolume)) {\n        //>>includeStart(\'debug\', pragmas.debug);\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n          "Not all of the geometry instances have GroundPrimitive support."\n        );\n        //>>includeEnd(\'debug\');\n      }\n    }\n\n    // Now compute the min/max heights for the primitive\n    setMinMaxTerrainHeights(this, rectangle, ellipsoid);\n    var exaggeration = frameState.terrainExaggeration;\n    var exaggerationRelativeHeight =\n      frameState.terrainExaggerationRelativeHeight;\n    this._minHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].getHeight */ .Z.getHeight(\n      this._minTerrainHeight,\n      exaggeration,\n      exaggerationRelativeHeight\n    );\n    this._maxHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].getHeight */ .Z.getHeight(\n      this._maxTerrainHeight,\n      exaggeration,\n      exaggerationRelativeHeight\n    );\n\n    var useFragmentCulling = GroundPrimitive._supportsMaterials(\n      frameState.context\n    );\n    this._useFragmentCulling = useFragmentCulling;\n\n    if (useFragmentCulling) {\n      // Determine whether to add spherical or planar extent attributes for computing texture coordinates.\n      // This depends on the size of the GeometryInstances.\n      var attributes;\n      var usePlanarExtents = true;\n      for (i = 0; i < length; ++i) {\n        instance = instances[i];\n        geometry = instance.geometry;\n        rectangle = getRectangle(frameState, geometry);\n        if (_ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].shouldUseSphericalCoordinates */ .Z.shouldUseSphericalCoordinates(rectangle)) {\n          usePlanarExtents = false;\n          break;\n        }\n      }\n\n      for (i = 0; i < length; ++i) {\n        instance = instances[i];\n        geometry = instance.geometry;\n        instanceType = geometry.constructor;\n\n        var boundingRectangle = getRectangle(frameState, geometry);\n        var textureCoordinateRotationPoints =\n          geometry.textureCoordinateRotationPoints;\n\n        if (usePlanarExtents) {\n          attributes = _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].getPlanarTextureCoordinateAttributes */ .Z.getPlanarTextureCoordinateAttributes(\n            boundingRectangle,\n            textureCoordinateRotationPoints,\n            ellipsoid,\n            frameState.mapProjection,\n            this._maxHeight\n          );\n        } else {\n          attributes = _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].getSphericalExtentGeometryInstanceAttributes */ .Z.getSphericalExtentGeometryInstanceAttributes(\n            boundingRectangle,\n            textureCoordinateRotationPoints,\n            ellipsoid,\n            frameState.mapProjection\n          );\n        }\n\n        var instanceAttributes = instance.attributes;\n        for (var attributeKey in instanceAttributes) {\n          if (instanceAttributes.hasOwnProperty(attributeKey)) {\n            attributes[attributeKey] = instanceAttributes[attributeKey];\n          }\n        }\n\n        groundInstances[i] = new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n          geometry: instanceType.createShadowVolume(\n            geometry,\n            getComputeMinimumHeightFunction(this),\n            getComputeMaximumHeightFunction(this)\n          ),\n          attributes: attributes,\n          id: instance.id,\n        });\n      }\n    } else {\n      // ClassificationPrimitive will check if the colors are all the same if it detects lack of fragment culling attributes\n      for (i = 0; i < length; ++i) {\n        instance = instances[i];\n        geometry = instance.geometry;\n        instanceType = geometry.constructor;\n        groundInstances[i] = new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n          geometry: instanceType.createShadowVolume(\n            geometry,\n            getComputeMinimumHeightFunction(this),\n            getComputeMaximumHeightFunction(this)\n          ),\n          attributes: instance.attributes,\n          id: instance.id,\n        });\n      }\n    }\n\n    primitiveOptions.geometryInstances = groundInstances;\n    primitiveOptions.appearance = this.appearance;\n\n    primitiveOptions._createBoundingVolumeFunction = function (\n      frameState,\n      geometry\n    ) {\n      createBoundingVolume(that, frameState, geometry);\n    };\n    primitiveOptions._updateAndQueueCommandsFunction = function (\n      primitive,\n      frameState,\n      colorCommands,\n      pickCommands,\n      modelMatrix,\n      cull,\n      debugShowBoundingVolume,\n      twoPasses\n    ) {\n      updateAndQueueCommands(\n        that,\n        frameState,\n        colorCommands,\n        pickCommands,\n        modelMatrix,\n        cull,\n        debugShowBoundingVolume,\n        twoPasses\n      );\n    };\n\n    this._primitive = new _ClassificationPrimitive_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(primitiveOptions);\n    this._primitive.readyPromise.then(function (primitive) {\n      that._ready = true;\n\n      if (that.releaseGeometryInstances) {\n        that.geometryInstances = undefined;\n      }\n\n      var error = primitive._error;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(error)) {\n        that._readyPromise.resolve(that);\n      } else {\n        that._readyPromise.reject(error);\n      }\n    });\n  }\n\n  this._primitive.appearance = this.appearance;\n  this._primitive.show = this.show;\n  this._primitive.debugShowShadowVolume = this.debugShowShadowVolume;\n  this._primitive.debugShowBoundingVolume = this.debugShowBoundingVolume;\n  this._primitive.update(frameState);\n};\n\n/**\n * @private\n */\nGroundPrimitive.prototype.getBoundingSphere = function (id) {\n  var index = this._boundingSpheresKeys.indexOf(id);\n  if (index !== -1) {\n    return this._boundingSpheres[index];\n  }\n\n  return undefined;\n};\n\n/**\n * Returns the modifiable per-instance attributes for a {@link GeometryInstance}.\n *\n * @param {*} id The id of the {@link GeometryInstance}.\n * @returns {Object} The typed array in the attribute\'s format or undefined if the is no instance with id.\n *\n * @exception {DeveloperError} must call update before calling getGeometryInstanceAttributes.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes(\'an id\');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA);\n * attributes.show = Cesium.ShowGeometryInstanceAttribute.toValue(true);\n */\nGroundPrimitive.prototype.getGeometryInstanceAttributes = function (id) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._primitive)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "must call update before calling getGeometryInstanceAttributes"\n    );\n  }\n  //>>includeEnd(\'debug\');\n  return this._primitive.getGeometryInstanceAttributes(id);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see GroundPrimitive#destroy\n */\nGroundPrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * e = e && e.destroy();\n *\n * @see GroundPrimitive#isDestroyed\n */\nGroundPrimitive.prototype.destroy = function () {\n  this._primitive = this._primitive && this._primitive.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this);\n};\n\n/**\n * Exposed for testing.\n *\n * @param {Context} context Rendering context\n * @returns {Boolean} Whether or not the current context supports materials on GroundPrimitives.\n * @private\n */\nGroundPrimitive._supportsMaterials = function (context) {\n  return context.depthTexture;\n};\n\n/**\n * Checks if the given Scene supports materials on GroundPrimitives.\n * Materials on GroundPrimitives require support for the WEBGL_depth_texture extension.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports materials on GroundPrimitives.\n */\nGroundPrimitive.supportsMaterials = function (scene) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.object */ .Z.typeOf.object("scene", scene);\n  //>>includeEnd(\'debug\');\n\n  return GroundPrimitive._supportsMaterials(scene.frameState.context);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GroundPrimitive);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47780\n')},11654:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18349);\n\n\n\n\n\n/**\n * Metadata about a group of {@link Cesium3DTileContent}\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.id The ID of the group.\n * @param {Object} options.group The group JSON object.\n * @param {MetadataClass} [options.class] The class that group metadata conforms to.\n *\n * @alias GroupMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction GroupMetadata(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var id = options.id;\n  var group = options.group;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("options.id", id);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.group", group);\n  //>>includeEnd(\'debug\');\n\n  var properties = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(group.properties) ? group.properties : {};\n\n  this._class = options.class;\n  this._properties = properties;\n  this._id = id;\n  this._name = group.name;\n  this._description = group.description;\n  this._extras = group.extras;\n  this._extensions = group.extensions;\n}\n\nObject.defineProperties(GroupMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   * @private\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * The ID of the group.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * The name of the group.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The description of the group.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  description: {\n    get: function () {\n      return this._description;\n    },\n  },\n\n  /**\n   * Extras in the JSON object.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * Extensions in the JSON object.\n   *\n   * @memberof GroupMetadata.prototype\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Returns whether the group has this property.\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {Boolean} Whether the group has this property.\n * @private\n */\nGroupMetadata.prototype.hasProperty = function (propertyId) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].hasProperty */ .Z.hasProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Returns whether the group has a property with the given semantic.\n *\n * @param {String} semantic The case-sensitive semantic of the property.\n * @returns {Boolean} Whether the group has a property with the given semantic.\n * @private\n */\nGroupMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].hasPropertyBySemantic */ .Z.hasPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class\n  );\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {String[]} [results] An array into which to store the results.\n * @returns {String[]} The property IDs.\n * @private\n */\nGroupMetadata.prototype.getPropertyIds = function (results) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].getPropertyIds */ .Z.getPropertyIds(this._properties, this._class, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the group does not have this property.\n * @private\n */\nGroupMetadata.prototype.getProperty = function (propertyId) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].getProperty */ .Z.getProperty(propertyId, this._properties, this._class);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {Boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nGroupMetadata.prototype.setProperty = function (propertyId, value) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].setProperty */ .Z.setProperty(\n    propertyId,\n    value,\n    this._properties,\n    this._class\n  );\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {String} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the group does not have this semantic.\n * @private\n */\nGroupMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].getPropertyBySemantic */ .Z.getPropertyBySemantic(\n    semantic,\n    this._properties,\n    this._class\n  );\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {String} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {Boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nGroupMetadata.prototype.setPropertyBySemantic = function (semantic, value) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].setPropertyBySemantic */ .Z.setPropertyBySemantic(\n    semantic,\n    value,\n    this._properties,\n    this._class\n  );\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (GroupMetadata);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2NTQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFxQztBQUNjO0FBQ1Y7QUFDUTs7QUFFakQ7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxZQUFZLHNIQUFzSDtBQUNsSTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwRUFBWSxVQUFVLGdHQUF5QjtBQUMzRDtBQUNBOztBQUVBO0FBQ0EsRUFBRSwyRkFBbUI7QUFDckIsRUFBRSwyRkFBbUI7QUFDckI7O0FBRUEsbUJBQW1CLHFFQUFPOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsU0FBUywyRkFBMEI7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtHQUFvQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpR0FBNkI7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQSxTQUFTLDJGQUEwQjtBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFNBQVMsMkZBQTBCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLFNBQVMsK0dBQW9DO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtHQUFvQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseURBQWUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0dyb3VwTWV0YWRhdGEuanM/MzViNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL0NvcmUvZGVmYXVsdFZhbHVlLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgTWV0YWRhdGFFbnRpdHkgZnJvbSBcIi4vTWV0YWRhdGFFbnRpdHkuanNcIjtcblxuLyoqXG4gKiBNZXRhZGF0YSBhYm91dCBhIGdyb3VwIG9mIHtAbGluayBDZXNpdW0zRFRpbGVDb250ZW50fVxuICogPHA+XG4gKiBTZWUgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvM2QtdGlsZXMvdHJlZS8zZC10aWxlcy1uZXh0L2V4dGVuc2lvbnMvM0RUSUxFU19tZXRhZGF0YXwzRFRJTEVTX21ldGFkYXRhIEV4dGVuc2lvbn0gZm9yIDNEIFRpbGVzXG4gKiA8L3A+XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuaWQgVGhlIElEIG9mIHRoZSBncm91cC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmdyb3VwIFRoZSBncm91cCBKU09OIG9iamVjdC5cbiAqIEBwYXJhbSB7TWV0YWRhdGFDbGFzc30gW29wdGlvbnMuY2xhc3NdIFRoZSBjbGFzcyB0aGF0IGdyb3VwIG1ldGFkYXRhIGNvbmZvcm1zIHRvLlxuICpcbiAqIEBhbGlhcyBHcm91cE1ldGFkYXRhXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAqL1xuZnVuY3Rpb24gR3JvdXBNZXRhZGF0YShvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWUob3B0aW9ucywgZGVmYXVsdFZhbHVlLkVNUFRZX09CSkVDVCk7XG4gIHZhciBpZCA9IG9wdGlvbnMuaWQ7XG4gIHZhciBncm91cCA9IG9wdGlvbnMuZ3JvdXA7XG5cbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgQ2hlY2sudHlwZU9mLnN0cmluZyhcIm9wdGlvbnMuaWRcIiwgaWQpO1xuICBDaGVjay50eXBlT2Yub2JqZWN0KFwib3B0aW9ucy5ncm91cFwiLCBncm91cCk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBwcm9wZXJ0aWVzID0gZGVmaW5lZChncm91cC5wcm9wZXJ0aWVzKSA/IGdyb3VwLnByb3BlcnRpZXMgOiB7fTtcblxuICB0aGlzLl9jbGFzcyA9IG9wdGlvbnMuY2xhc3M7XG4gIHRoaXMuX3Byb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9uYW1lID0gZ3JvdXAubmFtZTtcbiAgdGhpcy5fZGVzY3JpcHRpb24gPSBncm91cC5kZXNjcmlwdGlvbjtcbiAgdGhpcy5fZXh0cmFzID0gZ3JvdXAuZXh0cmFzO1xuICB0aGlzLl9leHRlbnNpb25zID0gZ3JvdXAuZXh0ZW5zaW9ucztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoR3JvdXBNZXRhZGF0YS5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIFRoZSBjbGFzcyB0aGF0IHByb3BlcnRpZXMgY29uZm9ybSB0by5cbiAgICpcbiAgICogQG1lbWJlcm9mIEdyb3VwTWV0YWRhdGEucHJvdG90eXBlXG4gICAqIEB0eXBlIHtNZXRhZGF0YUNsYXNzfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNsYXNzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2xhc3M7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBncm91cC5cbiAgICpcbiAgICogQG1lbWJlcm9mIEdyb3VwTWV0YWRhdGEucHJvdG90eXBlXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEByZWFkb25seVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZ3JvdXAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBHcm91cE1ldGFkYXRhLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG5hbWU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgZ3JvdXAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBHcm91cE1ldGFkYXRhLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRlc2NyaXB0aW9uOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogRXh0cmFzIGluIHRoZSBKU09OIG9iamVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIEdyb3VwTWV0YWRhdGEucHJvdG90eXBlXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGV4dHJhczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhcztcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBFeHRlbnNpb25zIGluIHRoZSBKU09OIG9iamVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIEdyb3VwTWV0YWRhdGEucHJvdG90eXBlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEByZWFkb25seVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZXh0ZW5zaW9uczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V4dGVuc2lvbnM7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgZ3JvdXAgaGFzIHRoaXMgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5SWQgVGhlIGNhc2Utc2Vuc2l0aXZlIElEIG9mIHRoZSBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBncm91cCBoYXMgdGhpcyBwcm9wZXJ0eS5cbiAqIEBwcml2YXRlXG4gKi9cbkdyb3VwTWV0YWRhdGEucHJvdG90eXBlLmhhc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5SWQpIHtcbiAgcmV0dXJuIE1ldGFkYXRhRW50aXR5Lmhhc1Byb3BlcnR5KHByb3BlcnR5SWQsIHRoaXMuX3Byb3BlcnRpZXMsIHRoaXMuX2NsYXNzKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBncm91cCBoYXMgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBzZW1hbnRpYy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VtYW50aWMgVGhlIGNhc2Utc2Vuc2l0aXZlIHNlbWFudGljIG9mIHRoZSBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBncm91cCBoYXMgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBzZW1hbnRpYy5cbiAqIEBwcml2YXRlXG4gKi9cbkdyb3VwTWV0YWRhdGEucHJvdG90eXBlLmhhc1Byb3BlcnR5QnlTZW1hbnRpYyA9IGZ1bmN0aW9uIChzZW1hbnRpYykge1xuICByZXR1cm4gTWV0YWRhdGFFbnRpdHkuaGFzUHJvcGVydHlCeVNlbWFudGljKFxuICAgIHNlbWFudGljLFxuICAgIHRoaXMuX3Byb3BlcnRpZXMsXG4gICAgdGhpcy5fY2xhc3NcbiAgKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBwcm9wZXJ0eSBJRHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmdbXX0gW3Jlc3VsdHNdIEFuIGFycmF5IGludG8gd2hpY2ggdG8gc3RvcmUgdGhlIHJlc3VsdHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nW119IFRoZSBwcm9wZXJ0eSBJRHMuXG4gKiBAcHJpdmF0ZVxuICovXG5Hcm91cE1ldGFkYXRhLnByb3RvdHlwZS5nZXRQcm9wZXJ0eUlkcyA9IGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gIHJldHVybiBNZXRhZGF0YUVudGl0eS5nZXRQcm9wZXJ0eUlkcyh0aGlzLl9wcm9wZXJ0aWVzLCB0aGlzLl9jbGFzcywgcmVzdWx0cyk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gKiA8cD5cbiAqIElmIHRoZSBwcm9wZXJ0eSBpcyBub3JtYWxpemVkIHRoZSBub3JtYWxpemVkIHZhbHVlIGlzIHJldHVybmVkLlxuICogPC9wPlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eUlkIFRoZSBjYXNlLXNlbnNpdGl2ZSBJRCBvZiB0aGUgcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBvciA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IGlmIHRoZSBncm91cCBkb2VzIG5vdCBoYXZlIHRoaXMgcHJvcGVydHkuXG4gKiBAcHJpdmF0ZVxuICovXG5Hcm91cE1ldGFkYXRhLnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eUlkKSB7XG4gIHJldHVybiBNZXRhZGF0YUVudGl0eS5nZXRQcm9wZXJ0eShwcm9wZXJ0eUlkLCB0aGlzLl9wcm9wZXJ0aWVzLCB0aGlzLl9jbGFzcyk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBJRC5cbiAqIDxwPlxuICogSWYgdGhlIHByb3BlcnR5IGlzIG5vcm1hbGl6ZWQgYSBub3JtYWxpemVkIHZhbHVlIG11c3QgYmUgcHJvdmlkZWQgdG8gdGhpcyBmdW5jdGlvbi5cbiAqIDwvcD5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlJZCBUaGUgY2FzZS1zZW5zaXRpdmUgSUQgb2YgdGhlIHByb3BlcnR5LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSBjb3BpZWQuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHByb3BlcnR5IHdhcyBzZXQsIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5Hcm91cE1ldGFkYXRhLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eUlkLCB2YWx1ZSkge1xuICByZXR1cm4gTWV0YWRhdGFFbnRpdHkuc2V0UHJvcGVydHkoXG4gICAgcHJvcGVydHlJZCxcbiAgICB2YWx1ZSxcbiAgICB0aGlzLl9wcm9wZXJ0aWVzLFxuICAgIHRoaXMuX2NsYXNzXG4gICk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gc2VtYW50aWMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNlbWFudGljIFRoZSBjYXNlLXNlbnNpdGl2ZSBzZW1hbnRpYyBvZiB0aGUgcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBvciA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IGlmIHRoZSBncm91cCBkb2VzIG5vdCBoYXZlIHRoaXMgc2VtYW50aWMuXG4gKiBAcHJpdmF0ZVxuICovXG5Hcm91cE1ldGFkYXRhLnByb3RvdHlwZS5nZXRQcm9wZXJ0eUJ5U2VtYW50aWMgPSBmdW5jdGlvbiAoc2VtYW50aWMpIHtcbiAgcmV0dXJuIE1ldGFkYXRhRW50aXR5LmdldFByb3BlcnR5QnlTZW1hbnRpYyhcbiAgICBzZW1hbnRpYyxcbiAgICB0aGlzLl9wcm9wZXJ0aWVzLFxuICAgIHRoaXMuX2NsYXNzXG4gICk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBzZW1hbnRpYy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VtYW50aWMgVGhlIGNhc2Utc2Vuc2l0aXZlIHNlbWFudGljIG9mIHRoZSBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgY29waWVkLlxuICogQHJldHVybnMge0Jvb2xlYW59IDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBwcm9wZXJ0eSB3YXMgc2V0LCA8Y29kZT5mYWxzZTwvY29kZT4gb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqL1xuR3JvdXBNZXRhZGF0YS5wcm90b3R5cGUuc2V0UHJvcGVydHlCeVNlbWFudGljID0gZnVuY3Rpb24gKHNlbWFudGljLCB2YWx1ZSkge1xuICByZXR1cm4gTWV0YWRhdGFFbnRpdHkuc2V0UHJvcGVydHlCeVNlbWFudGljKFxuICAgIHNlbWFudGljLFxuICAgIHZhbHVlLFxuICAgIHRoaXMuX3Byb3BlcnRpZXMsXG4gICAgdGhpcy5fY2xhc3NcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3VwTWV0YWRhdGE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11654\n')}}]);