"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[5898],{59359:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _arrayFill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23401);\n/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66553);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(84828);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12572);\n/* harmony import */ var _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(47302);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(50491);\n/* harmony import */ var _GeographicProjection_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(39756);\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82408);\n/* harmony import */ var _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(13616);\n/* harmony import */ var _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(56652);\n/* harmony import */ var _GeometryInstance_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(26865);\n/* harmony import */ var _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(87379);\n/* harmony import */ var _GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(57552);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(22832);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(99417);\n/* harmony import */ var _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(68201);\n/* harmony import */ var _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(97264);\n/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(87811);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(96190);\n/* harmony import */ var _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(67252);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar scratchCartesian1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchCartesian2 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchCartesian3 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchCartesian4 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar texCoordScratch = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar textureMatrixScratch = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z();\nvar tangentMatrixScratch = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z();\nvar quaternionScratch = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z();\n\nvar scratchNormal = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchTangent = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchBitangent = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nvar scratchCartographic = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar projectedCenterScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nvar scratchMinTexCoord = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchMaxTexCoord = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction computeTopBottomAttributes(positions, options, extrude) {\n  var vertexFormat = options.vertexFormat;\n  var center = options.center;\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var ellipsoid = options.ellipsoid;\n  var stRotation = options.stRotation;\n  var size = extrude ? (positions.length / 3) * 2 : positions.length / 3;\n  var shadowVolume = options.shadowVolume;\n\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array(size * 2)\n    : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size * 3) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size * 3) : undefined;\n  var bitangents = vertexFormat.bitangent\n    ? new Float32Array(size * 3)\n    : undefined;\n\n  var extrudeNormals = shadowVolume ? new Float32Array(size * 3) : undefined;\n\n  var textureCoordIndex = 0;\n\n  // Raise positions to a height above the ellipsoid and compute the\n  // texture coordinates, normals, tangents, and bitangents.\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n\n  var projection = new _GeographicProjection_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(ellipsoid);\n  var projectedCenter = projection.project(\n    ellipsoid.cartesianToCartographic(center, scratchCartographic),\n    projectedCenterScratch\n  );\n\n  var geodeticNormal = ellipsoid.scaleToGeodeticSurface(\n    center,\n    scratchCartesian1\n  );\n  ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n\n  var textureMatrix = textureMatrixScratch;\n  var tangentMatrix = tangentMatrixScratch;\n  if (stRotation !== 0) {\n    var rotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(\n      geodeticNormal,\n      stRotation,\n      quaternionScratch\n    );\n    textureMatrix = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromQuaternion */ .Z.fromQuaternion(rotation, textureMatrix);\n\n    rotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(\n      geodeticNormal,\n      -stRotation,\n      quaternionScratch\n    );\n    tangentMatrix = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromQuaternion */ .Z.fromQuaternion(rotation, tangentMatrix);\n  } else {\n    textureMatrix = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].clone */ .Z.clone(_Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].IDENTITY */ .Z.IDENTITY, textureMatrix);\n    tangentMatrix = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].clone */ .Z.clone(_Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].IDENTITY */ .Z.IDENTITY, tangentMatrix);\n  }\n\n  var minTexCoord = _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    Number.POSITIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    scratchMinTexCoord\n  );\n  var maxTexCoord = _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    Number.NEGATIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n    scratchMaxTexCoord\n  );\n\n  var length = positions.length;\n  var bottomOffset = extrude ? length : 0;\n  var stOffset = (bottomOffset / 3) * 2;\n  for (var i = 0; i < length; i += 3) {\n    var i1 = i + 1;\n    var i2 = i + 2;\n    var position = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(positions, i, scratchCartesian1);\n\n    if (vertexFormat.st) {\n      var rotatedPoint = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n        textureMatrix,\n        position,\n        scratchCartesian2\n      );\n      var projectedPoint = projection.project(\n        ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic),\n        scratchCartesian3\n      );\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].subtract */ .Z.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n      texCoordScratch.x =\n        (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n      texCoordScratch.y =\n        (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n      minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n      minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n      maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n      maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n      if (extrude) {\n        textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n        textureCoordinates[textureCoordIndex + 1 + stOffset] =\n          texCoordScratch.y;\n      }\n\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n    }\n\n    if (\n      vertexFormat.normal ||\n      vertexFormat.tangent ||\n      vertexFormat.bitangent ||\n      shadowVolume\n    ) {\n      normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n      if (shadowVolume) {\n        extrudeNormals[i + bottomOffset] = -normal.x;\n        extrudeNormals[i1 + bottomOffset] = -normal.y;\n        extrudeNormals[i2 + bottomOffset] = -normal.z;\n      }\n\n      if (\n        vertexFormat.normal ||\n        vertexFormat.tangent ||\n        vertexFormat.bitangent\n      ) {\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\n          tangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].normalize */ .Z.normalize(\n            _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].cross */ .Z.cross(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_Z */ .Z.UNIT_Z, normal, tangent),\n            tangent\n          );\n          _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].multiplyByVector */ .Z.multiplyByVector(tangentMatrix, tangent, tangent);\n        }\n        if (vertexFormat.normal) {\n          normals[i] = normal.x;\n          normals[i1] = normal.y;\n          normals[i2] = normal.z;\n          if (extrude) {\n            normals[i + bottomOffset] = -normal.x;\n            normals[i1 + bottomOffset] = -normal.y;\n            normals[i2 + bottomOffset] = -normal.z;\n          }\n        }\n\n        if (vertexFormat.tangent) {\n          tangents[i] = tangent.x;\n          tangents[i1] = tangent.y;\n          tangents[i2] = tangent.z;\n          if (extrude) {\n            tangents[i + bottomOffset] = -tangent.x;\n            tangents[i1 + bottomOffset] = -tangent.y;\n            tangents[i2 + bottomOffset] = -tangent.z;\n          }\n        }\n\n        if (vertexFormat.bitangent) {\n          bitangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].normalize */ .Z.normalize(\n            _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].cross */ .Z.cross(normal, tangent, bitangent),\n            bitangent\n          );\n          bitangents[i] = bitangent.x;\n          bitangents[i1] = bitangent.y;\n          bitangents[i2] = bitangent.z;\n          if (extrude) {\n            bitangents[i + bottomOffset] = bitangent.x;\n            bitangents[i1 + bottomOffset] = bitangent.y;\n            bitangents[i2 + bottomOffset] = bitangent.z;\n          }\n        }\n      }\n    }\n  }\n\n  if (vertexFormat.st) {\n    length = textureCoordinates.length;\n    for (var k = 0; k < length; k += 2) {\n      textureCoordinates[k] =\n        (textureCoordinates[k] - minTexCoord.x) /\n        (maxTexCoord.x - minTexCoord.x);\n      textureCoordinates[k + 1] =\n        (textureCoordinates[k + 1] - minTexCoord.y) /\n        (maxTexCoord.y - minTexCoord.y);\n    }\n  }\n\n  var attributes = new _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n\n  if (vertexFormat.position) {\n    var finalPositions = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].raisePositionsToHeight */ .Z.raisePositionsToHeight(\n      positions,\n      options,\n      extrude\n    );\n    attributes.position = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      values: finalPositions,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (shadowVolume) {\n    attributes.extrudeDirection = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n  }\n\n  if (extrude && (0,_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(options.offsetAttribute)) {\n    var offsetAttribute = new Uint8Array(size);\n    if (options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].TOP */ .Z.TOP) {\n      offsetAttribute = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(offsetAttribute, 1, 0, size / 2);\n    } else {\n      var offsetValue =\n        options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].NONE */ .Z.NONE ? 0 : 1;\n      offsetAttribute = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(offsetAttribute, offsetValue);\n    }\n\n    attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return attributes;\n}\n\nfunction topIndices(numPts) {\n  // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\n  //              = -1 + 4 * ((n * ( n + 1)) / 2)\n  // total triangles = 2 * numTrangles in half\n  // indices = total triangles * 3;\n  // Substitute numPts for n above\n\n  var indices = new Array(12 * (numPts * (numPts + 1)) - 6);\n  var indicesIndex = 0;\n  var prevIndex;\n  var numInterior;\n  var positionIndex;\n  var i;\n  var j;\n  // Indices triangles to the \'right\' of the north vector\n\n  prevIndex = 0;\n  positionIndex = 1;\n  for (i = 0; i < 3; i++) {\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n\n  for (i = 2; i < numPts + 1; ++i) {\n    positionIndex = i * (i + 1) - 1;\n    prevIndex = (i - 1) * i - 1;\n\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n\n    numInterior = 2 * i;\n    for (j = 0; j < numInterior - 1; ++j) {\n      indices[indicesIndex++] = positionIndex;\n      indices[indicesIndex++] = prevIndex++;\n      indices[indicesIndex++] = prevIndex;\n\n      indices[indicesIndex++] = positionIndex++;\n      indices[indicesIndex++] = prevIndex;\n      indices[indicesIndex++] = positionIndex;\n    }\n\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n\n  // Indices for center column of triangles\n  numInterior = numPts * 2;\n  ++positionIndex;\n  ++prevIndex;\n  for (i = 0; i < numInterior - 1; ++i) {\n    indices[indicesIndex++] = positionIndex;\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex;\n\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n\n  indices[indicesIndex++] = positionIndex;\n  indices[indicesIndex++] = prevIndex++;\n  indices[indicesIndex++] = prevIndex;\n\n  indices[indicesIndex++] = positionIndex++;\n  indices[indicesIndex++] = prevIndex++;\n  indices[indicesIndex++] = prevIndex;\n\n  // Reverse the process creating indices to the \'left\' of the north vector\n  ++prevIndex;\n  for (i = numPts - 1; i > 1; --i) {\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n\n    numInterior = 2 * i;\n    for (j = 0; j < numInterior - 1; ++j) {\n      indices[indicesIndex++] = positionIndex;\n      indices[indicesIndex++] = prevIndex++;\n      indices[indicesIndex++] = prevIndex;\n\n      indices[indicesIndex++] = positionIndex++;\n      indices[indicesIndex++] = prevIndex;\n      indices[indicesIndex++] = positionIndex;\n    }\n\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = positionIndex++;\n  }\n\n  for (i = 0; i < 3; i++) {\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n  return indices;\n}\n\nvar boundingSphereCenter = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nfunction computeEllipse(options) {\n  var center = options.center;\n  boundingSphereCenter = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter),\n    options.height,\n    boundingSphereCenter\n  );\n  boundingSphereCenter = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].add */ .Z.add(\n    center,\n    boundingSphereCenter,\n    boundingSphereCenter\n  );\n  var boundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n    boundingSphereCenter,\n    options.semiMajorAxis\n  );\n  var cep = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].computeEllipsePositions */ .Z.computeEllipsePositions(\n    options,\n    true,\n    false\n  );\n  var positions = cep.positions;\n  var numPts = cep.numPts;\n  var attributes = computeTopBottomAttributes(positions, options, false);\n  var indices = topIndices(numPts);\n  indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].createTypedArray */ .Z.createTypedArray(positions.length / 3, indices);\n  return {\n    boundingSphere: boundingSphere,\n    attributes: attributes,\n    indices: indices,\n  };\n}\n\nfunction computeWallAttributes(positions, options) {\n  var vertexFormat = options.vertexFormat;\n  var center = options.center;\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var ellipsoid = options.ellipsoid;\n  var height = options.height;\n  var extrudedHeight = options.extrudedHeight;\n  var stRotation = options.stRotation;\n  var size = (positions.length / 3) * 2;\n\n  var finalPositions = new Float64Array(size * 3);\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array(size * 2)\n    : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size * 3) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size * 3) : undefined;\n  var bitangents = vertexFormat.bitangent\n    ? new Float32Array(size * 3)\n    : undefined;\n\n  var shadowVolume = options.shadowVolume;\n  var extrudeNormals = shadowVolume ? new Float32Array(size * 3) : undefined;\n\n  var textureCoordIndex = 0;\n\n  // Raise positions to a height above the ellipsoid and compute the\n  // texture coordinates, normals, tangents, and bitangents.\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n\n  var projection = new _GeographicProjection_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(ellipsoid);\n  var projectedCenter = projection.project(\n    ellipsoid.cartesianToCartographic(center, scratchCartographic),\n    projectedCenterScratch\n  );\n\n  var geodeticNormal = ellipsoid.scaleToGeodeticSurface(\n    center,\n    scratchCartesian1\n  );\n  ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n  var rotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(\n    geodeticNormal,\n    stRotation,\n    quaternionScratch\n  );\n  var textureMatrix = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromQuaternion */ .Z.fromQuaternion(rotation, textureMatrixScratch);\n\n  var minTexCoord = _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    Number.POSITIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    scratchMinTexCoord\n  );\n  var maxTexCoord = _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    Number.NEGATIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n    scratchMaxTexCoord\n  );\n\n  var length = positions.length;\n  var stOffset = (length / 3) * 2;\n  for (var i = 0; i < length; i += 3) {\n    var i1 = i + 1;\n    var i2 = i + 2;\n    var position = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(positions, i, scratchCartesian1);\n    var extrudedPosition;\n\n    if (vertexFormat.st) {\n      var rotatedPoint = _Matrix3_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n        textureMatrix,\n        position,\n        scratchCartesian2\n      );\n      var projectedPoint = projection.project(\n        ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic),\n        scratchCartesian3\n      );\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].subtract */ .Z.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n      texCoordScratch.x =\n        (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n      texCoordScratch.y =\n        (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n      minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n      minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n      maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n      maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n      textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n      textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n    }\n\n    position = ellipsoid.scaleToGeodeticSurface(position, position);\n    extrudedPosition = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(position, scratchCartesian2);\n    normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n    if (shadowVolume) {\n      extrudeNormals[i + length] = -normal.x;\n      extrudeNormals[i1 + length] = -normal.y;\n      extrudeNormals[i2 + length] = -normal.z;\n    }\n\n    var scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      normal,\n      height,\n      scratchCartesian4\n    );\n    position = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].add */ .Z.add(position, scaledNormal, position);\n    scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      normal,\n      extrudedHeight,\n      scaledNormal\n    );\n    extrudedPosition = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].add */ .Z.add(\n      extrudedPosition,\n      scaledNormal,\n      extrudedPosition\n    );\n\n    if (vertexFormat.position) {\n      finalPositions[i + length] = extrudedPosition.x;\n      finalPositions[i1 + length] = extrudedPosition.y;\n      finalPositions[i2 + length] = extrudedPosition.z;\n\n      finalPositions[i] = position.x;\n      finalPositions[i1] = position.y;\n      finalPositions[i2] = position.z;\n    }\n\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n      bitangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(normal, bitangent);\n      var next = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(\n        positions,\n        (i + 3) % length,\n        scratchCartesian4\n      );\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].subtract */ .Z.subtract(next, position, next);\n      var bottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].subtract */ .Z.subtract(\n        extrudedPosition,\n        position,\n        scratchCartesian3\n      );\n\n      normal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].normalize */ .Z.normalize(\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].cross */ .Z.cross(bottom, next, normal),\n        normal\n      );\n\n      if (vertexFormat.normal) {\n        normals[i] = normal.x;\n        normals[i1] = normal.y;\n        normals[i2] = normal.z;\n\n        normals[i + length] = normal.x;\n        normals[i1 + length] = normal.y;\n        normals[i2 + length] = normal.z;\n      }\n\n      if (vertexFormat.tangent) {\n        tangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].normalize */ .Z.normalize(\n          _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].cross */ .Z.cross(bitangent, normal, tangent),\n          tangent\n        );\n        tangents[i] = tangent.x;\n        tangents[i1] = tangent.y;\n        tangents[i2] = tangent.z;\n\n        tangents[i + length] = tangent.x;\n        tangents[i + 1 + length] = tangent.y;\n        tangents[i + 2 + length] = tangent.z;\n      }\n\n      if (vertexFormat.bitangent) {\n        bitangents[i] = bitangent.x;\n        bitangents[i1] = bitangent.y;\n        bitangents[i2] = bitangent.z;\n\n        bitangents[i + length] = bitangent.x;\n        bitangents[i1 + length] = bitangent.y;\n        bitangents[i2 + length] = bitangent.z;\n      }\n    }\n  }\n\n  if (vertexFormat.st) {\n    length = textureCoordinates.length;\n    for (var k = 0; k < length; k += 2) {\n      textureCoordinates[k] =\n        (textureCoordinates[k] - minTexCoord.x) /\n        (maxTexCoord.x - minTexCoord.x);\n      textureCoordinates[k + 1] =\n        (textureCoordinates[k + 1] - minTexCoord.y) /\n        (maxTexCoord.y - minTexCoord.y);\n    }\n  }\n\n  var attributes = new _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n\n  if (vertexFormat.position) {\n    attributes.position = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      values: finalPositions,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (shadowVolume) {\n    attributes.extrudeDirection = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n  }\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(options.offsetAttribute)) {\n    var offsetAttribute = new Uint8Array(size);\n    if (options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].TOP */ .Z.TOP) {\n      offsetAttribute = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(offsetAttribute, 1, 0, size / 2);\n    } else {\n      var offsetValue =\n        options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].NONE */ .Z.NONE ? 0 : 1;\n      offsetAttribute = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(offsetAttribute, offsetValue);\n    }\n    attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return attributes;\n}\n\nfunction computeWallIndices(positions) {\n  var length = positions.length / 3;\n  var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].createTypedArray */ .Z.createTypedArray(length, length * 6);\n  var index = 0;\n  for (var i = 0; i < length; i++) {\n    var UL = i;\n    var LL = i + length;\n    var UR = (UL + 1) % length;\n    var LR = UR + length;\n    indices[index++] = UL;\n    indices[index++] = LL;\n    indices[index++] = UR;\n    indices[index++] = UR;\n    indices[index++] = LL;\n    indices[index++] = LR;\n  }\n\n  return indices;\n}\n\nvar topBoundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar bottomBoundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction computeExtrudedEllipse(options) {\n  var center = options.center;\n  var ellipsoid = options.ellipsoid;\n  var semiMajorAxis = options.semiMajorAxis;\n  var scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1),\n    options.height,\n    scratchCartesian1\n  );\n  topBoundingSphere.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].add */ .Z.add(\n    center,\n    scaledNormal,\n    topBoundingSphere.center\n  );\n  topBoundingSphere.radius = semiMajorAxis;\n\n  scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    ellipsoid.geodeticSurfaceNormal(center, scaledNormal),\n    options.extrudedHeight,\n    scaledNormal\n  );\n  bottomBoundingSphere.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].add */ .Z.add(\n    center,\n    scaledNormal,\n    bottomBoundingSphere.center\n  );\n  bottomBoundingSphere.radius = semiMajorAxis;\n\n  var cep = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].computeEllipsePositions */ .Z.computeEllipsePositions(options, true, true);\n  var positions = cep.positions;\n  var numPts = cep.numPts;\n  var outerPositions = cep.outerPositions;\n  var boundingSphere = _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].union */ .Z.union(\n    topBoundingSphere,\n    bottomBoundingSphere\n  );\n  var topBottomAttributes = computeTopBottomAttributes(\n    positions,\n    options,\n    true\n  );\n  var indices = topIndices(numPts);\n  var length = indices.length;\n  indices.length = length * 2;\n  var posLength = positions.length / 3;\n  for (var i = 0; i < length; i += 3) {\n    indices[i + length] = indices[i + 2] + posLength;\n    indices[i + 1 + length] = indices[i + 1] + posLength;\n    indices[i + 2 + length] = indices[i] + posLength;\n  }\n\n  var topBottomIndices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].createTypedArray */ .Z.createTypedArray(\n    (posLength * 2) / 3,\n    indices\n  );\n\n  var topBottomGeo = new _Geometry_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n    attributes: topBottomAttributes,\n    indices: topBottomIndices,\n    primitiveType: _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n  });\n\n  var wallAttributes = computeWallAttributes(outerPositions, options);\n  indices = computeWallIndices(outerPositions);\n  var wallIndices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].createTypedArray */ .Z.createTypedArray(\n    (outerPositions.length * 2) / 3,\n    indices\n  );\n\n  var wallGeo = new _Geometry_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n    attributes: wallAttributes,\n    indices: wallIndices,\n    primitiveType: _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n  });\n\n  var geo = _GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].combineInstances */ .Z.combineInstances([\n    new _GeometryInstance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n      geometry: topBottomGeo,\n    }),\n    new _GeometryInstance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n      geometry: wallGeo,\n    }),\n  ]);\n\n  return {\n    boundingSphere: boundingSphere,\n    attributes: geo[0].attributes,\n    indices: geo[0].indices,\n  };\n}\n\nfunction computeRectangle(\n  center,\n  semiMajorAxis,\n  semiMinorAxis,\n  rotation,\n  granularity,\n  ellipsoid,\n  result\n) {\n  var cep = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].computeEllipsePositions */ .Z.computeEllipsePositions(\n    {\n      center: center,\n      semiMajorAxis: semiMajorAxis,\n      semiMinorAxis: semiMinorAxis,\n      rotation: rotation,\n      granularity: granularity,\n    },\n    false,\n    true\n  );\n  var positionsFlat = cep.outerPositions;\n  var positionsCount = positionsFlat.length / 3;\n  var positions = new Array(positionsCount);\n  for (var i = 0; i < positionsCount; ++i) {\n    positions[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(positionsFlat, i * 3);\n  }\n  var rectangle = _Rectangle_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].fromCartesianArray */ .Z.fromCartesianArray(positions, ellipsoid, result);\n  // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\n  // When this happens, make the rectangle into a "circle" around the pole\n  if (rectangle.width > _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].PI */ .Z.PI) {\n    rectangle.north =\n      rectangle.north > 0.0\n        ? _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].EPSILON7 */ .Z.EPSILON7\n        : rectangle.north;\n    rectangle.south =\n      rectangle.south < 0.0\n        ? _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].EPSILON7 */ .Z.EPSILON7 - _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO\n        : rectangle.south;\n    rectangle.east = _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].PI */ .Z.PI;\n    rectangle.west = -_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].PI */ .Z.PI;\n  }\n  return rectangle;\n}\n\n/**\n * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias EllipseGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The ellipse\'s center point in the fixed frame.\n * @param {Number} options.semiMajorAxis The length of the ellipse\'s semi-major axis in meters.\n * @param {Number} options.semiMinorAxis The length of the ellipse\'s semi-minor axis in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse\'s extruded face and the ellipsoid surface.\n * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n *\n * @example\n * // Create an ellipse.\n * var ellipse = new Cesium.EllipseGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   semiMajorAxis : 500000.0,\n *   semiMinorAxis : 300000.0,\n *   rotation : Cesium.Math.toRadians(60.0)\n * });\n * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\n *\n * @see EllipseGeometry.createGeometry\n */\nfunction EllipseGeometry(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var center = options.center;\n  var ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].WGS84 */ .Z.WGS84);\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var granularity = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.granularity,\n    _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE\n  );\n  var vertexFormat = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.vertexFormat, _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].DEFAULT */ .Z.DEFAULT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("options.center", center);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("options.semiMajorAxis", semiMajorAxis);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("options.semiMinorAxis", semiMinorAxis);\n  if (semiMajorAxis < semiMinorAxis) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n      "semiMajorAxis must be greater than or equal to the semiMinorAxis."\n    );\n  }\n  if (granularity <= 0.0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("granularity must be greater than zero.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var height = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.height, 0.0);\n  var extrudedHeight = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.extrudedHeight, height);\n\n  this._center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(center);\n  this._semiMajorAxis = semiMajorAxis;\n  this._semiMinorAxis = semiMinorAxis;\n  this._ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].clone */ .Z.clone(ellipsoid);\n  this._rotation = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.rotation, 0.0);\n  this._stRotation = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.stRotation, 0.0);\n  this._height = Math.max(extrudedHeight, height);\n  this._granularity = granularity;\n  this._vertexFormat = _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(vertexFormat);\n  this._extrudedHeight = Math.min(extrudedHeight, height);\n  this._shadowVolume = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.shadowVolume, false);\n  this._workerName = "createEllipseGeometry";\n  this._offsetAttribute = options.offsetAttribute;\n\n  this._rectangle = undefined;\n  this._textureCoordinateRotationPoints = undefined;\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipseGeometry.packedLength =\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength +\n  _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].packedLength */ .Z.packedLength +\n  _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].packedLength */ .Z.packedLength +\n  9;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipseGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipseGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("value", value);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(startingIndex, 0);\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].pack */ .Z.pack(value._center, array, startingIndex);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength;\n\n  _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].pack */ .Z.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].packedLength */ .Z.packedLength;\n\n  _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].pack */ .Z.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].packedLength */ .Z.packedLength;\n\n  array[startingIndex++] = value._semiMajorAxis;\n  array[startingIndex++] = value._semiMinorAxis;\n  array[startingIndex++] = value._rotation;\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex] = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchCenter = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchEllipsoid = new _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\nvar scratchVertexFormat = new _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\nvar scratchOptions = {\n  center: scratchCenter,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  rotation: undefined,\n  stRotation: undefined,\n  height: undefined,\n  granularity: undefined,\n  extrudedHeight: undefined,\n  shadowVolume: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipseGeometry} [result] The object into which to store the result.\n * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\n */\nEllipseGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(startingIndex, 0);\n\n  var center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchCenter);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength;\n\n  var ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].packedLength */ .Z.packedLength;\n\n  var vertexFormat = _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].unpack */ .Z.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].packedLength */ .Z.packedLength;\n\n  var semiMajorAxis = array[startingIndex++];\n  var semiMinorAxis = array[startingIndex++];\n  var rotation = array[startingIndex++];\n  var stRotation = array[startingIndex++];\n  var height = array[startingIndex++];\n  var granularity = array[startingIndex++];\n  var extrudedHeight = array[startingIndex++];\n  var shadowVolume = array[startingIndex++] === 1.0;\n  var offsetAttribute = array[startingIndex];\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(result)) {\n    scratchOptions.height = height;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.granularity = granularity;\n    scratchOptions.stRotation = stRotation;\n    scratchOptions.rotation = rotation;\n    scratchOptions.semiMajorAxis = semiMajorAxis;\n    scratchOptions.semiMinorAxis = semiMinorAxis;\n    scratchOptions.shadowVolume = shadowVolume;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n\n    return new EllipseGeometry(scratchOptions);\n  }\n\n  result._center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(center, result._center);\n  result._ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].clone */ .Z.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(vertexFormat, result._vertexFormat);\n  result._semiMajorAxis = semiMajorAxis;\n  result._semiMinorAxis = semiMinorAxis;\n  result._rotation = rotation;\n  result._stRotation = stRotation;\n  result._height = height;\n  result._granularity = granularity;\n  result._extrudedHeight = extrudedHeight;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the bounding rectangle based on the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The ellipse\'s center point in the fixed frame.\n * @param {Number} options.semiMajorAxis The length of the ellipse\'s semi-major axis in meters.\n * @param {Number} options.semiMinorAxis The length of the ellipse\'s semi-minor axis in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n * @param {Rectangle} [result] An object in which to store the result\n *\n * @returns {Rectangle} The result rectangle\n */\nEllipseGeometry.computeRectangle = function (options, result) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var center = options.center;\n  var ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].WGS84 */ .Z.WGS84);\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var granularity = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.granularity,\n    _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE\n  );\n  var rotation = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.rotation, 0.0);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("options.center", center);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("options.semiMajorAxis", semiMajorAxis);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("options.semiMinorAxis", semiMinorAxis);\n  if (semiMajorAxis < semiMinorAxis) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n      "semiMajorAxis must be greater than or equal to the semiMinorAxis."\n    );\n  }\n  if (granularity <= 0.0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("granularity must be greater than zero.");\n  }\n  //>>includeEnd(\'debug\');\n\n  return computeRectangle(\n    center,\n    semiMajorAxis,\n    semiMinorAxis,\n    rotation,\n    granularity,\n    ellipsoid,\n    result\n  );\n};\n\n/**\n * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipseGeometry.createGeometry = function (ellipseGeometry) {\n  if (\n    ellipseGeometry._semiMajorAxis <= 0.0 ||\n    ellipseGeometry._semiMinorAxis <= 0.0\n  ) {\n    return;\n  }\n\n  var height = ellipseGeometry._height;\n  var extrudedHeight = ellipseGeometry._extrudedHeight;\n  var extrude = !_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n    height,\n    extrudedHeight,\n    0,\n    _Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].EPSILON2 */ .Z.EPSILON2\n  );\n\n  ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(\n    ellipseGeometry._center,\n    ellipseGeometry._center\n  );\n  var options = {\n    center: ellipseGeometry._center,\n    semiMajorAxis: ellipseGeometry._semiMajorAxis,\n    semiMinorAxis: ellipseGeometry._semiMinorAxis,\n    ellipsoid: ellipseGeometry._ellipsoid,\n    rotation: ellipseGeometry._rotation,\n    height: height,\n    granularity: ellipseGeometry._granularity,\n    vertexFormat: ellipseGeometry._vertexFormat,\n    stRotation: ellipseGeometry._stRotation,\n  };\n  var geometry;\n  if (extrude) {\n    options.extrudedHeight = extrudedHeight;\n    options.shadowVolume = ellipseGeometry._shadowVolume;\n    options.offsetAttribute = ellipseGeometry._offsetAttribute;\n    geometry = computeExtrudedEllipse(options);\n  } else {\n    geometry = computeEllipse(options);\n\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(ellipseGeometry._offsetAttribute)) {\n      var length = geometry.attributes.position.values.length;\n      var applyOffset = new Uint8Array(length / 3);\n      var offsetValue =\n        ellipseGeometry._offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].NONE */ .Z.NONE\n          ? 0\n          : 1;\n      (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(applyOffset, offsetValue);\n      geometry.attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n        componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n  }\n\n  return new _Geometry_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n    boundingSphere: geometry.boundingSphere,\n    offsetAttribute: ellipseGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nEllipseGeometry.createShadowVolume = function (\n  ellipseGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  var granularity = ellipseGeometry._granularity;\n  var ellipsoid = ellipseGeometry._ellipsoid;\n\n  var minHeight = minHeightFunc(granularity, ellipsoid);\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new EllipseGeometry({\n    center: ellipseGeometry._center,\n    semiMajorAxis: ellipseGeometry._semiMajorAxis,\n    semiMinorAxis: ellipseGeometry._semiMinorAxis,\n    ellipsoid: ellipsoid,\n    rotation: ellipseGeometry._rotation,\n    stRotation: ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: _VertexFormat_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].POSITION_ONLY */ .Z.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nfunction textureCoordinateRotationPoints(ellipseGeometry) {\n  var stRotation = -ellipseGeometry._stRotation;\n  if (stRotation === 0.0) {\n    return [0, 0, 0, 1, 1, 0];\n  }\n\n  var cep = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].computeEllipsePositions */ .Z.computeEllipsePositions(\n    {\n      center: ellipseGeometry._center,\n      semiMajorAxis: ellipseGeometry._semiMajorAxis,\n      semiMinorAxis: ellipseGeometry._semiMinorAxis,\n      rotation: ellipseGeometry._rotation,\n      granularity: ellipseGeometry._granularity,\n    },\n    false,\n    true\n  );\n  var positionsFlat = cep.outerPositions;\n  var positionsCount = positionsFlat.length / 3;\n  var positions = new Array(positionsCount);\n  for (var i = 0; i < positionsCount; ++i) {\n    positions[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(positionsFlat, i * 3);\n  }\n\n  var ellipsoid = ellipseGeometry._ellipsoid;\n  var boundingRectangle = ellipseGeometry.rectangle;\n  return _Geometry_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"]._textureCoordinateRotationPoints */ .Z._textureCoordinateRotationPoints(\n    positions,\n    stRotation,\n    ellipsoid,\n    boundingRectangle\n  );\n}\n\nObject.defineProperties(EllipseGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(this._rectangle)) {\n        this._rectangle = computeRectangle(\n          this._center,\n          this._semiMajorAxis,\n          this._semiMinorAxis,\n          this._rotation,\n          this._granularity,\n          this._ellipsoid\n        );\n      }\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(this._textureCoordinateRotationPoints)) {\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n          this\n        );\n      }\n      return this._textureCoordinateRotationPoints;\n    },\n  },\n});\n/* harmony default export */ __webpack_exports__["Z"] = (EllipseGeometry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59359\n')},47302:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99417);\n/* harmony import */ var _Matrix3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68201);\n/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(87811);\n\n\n\n\n\nvar EllipseGeometryLibrary = {};\n\nvar rotAxis = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar tempVec = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar unitQuat = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar rotMtx = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction pointOnEllipsoid(\n  theta,\n  rotation,\n  northVec,\n  eastVec,\n  aSqr,\n  ab,\n  bSqr,\n  mag,\n  unitPos,\n  result\n) {\n  var azimuth = theta + rotation;\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(eastVec, Math.cos(azimuth), rotAxis);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(northVec, Math.sin(azimuth), tempVec);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(rotAxis, tempVec, rotAxis);\n\n  var cosThetaSquared = Math.cos(theta);\n  cosThetaSquared = cosThetaSquared * cosThetaSquared;\n\n  var sinThetaSquared = Math.sin(theta);\n  sinThetaSquared = sinThetaSquared * sinThetaSquared;\n\n  var radius = ab / Math.sqrt(bSqr * cosThetaSquared + aSqr * sinThetaSquared);\n  var angle = radius / mag;\n\n  // Create the quaternion to rotate the position vector to the boundary of the ellipse.\n  _Quaternion_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(rotAxis, angle, unitQuat);\n  _Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromQuaternion */ .Z.fromQuaternion(unitQuat, rotMtx);\n\n  _Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByVector */ .Z.multiplyByVector(rotMtx, unitPos, result);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(result, result);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(result, mag, result);\n  return result;\n}\n\nvar scratchCartesian1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchCartesian2 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchCartesian3 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchNormal = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n/**\n * Returns the positions raised to the given heights\n * @private\n */\nEllipseGeometryLibrary.raisePositionsToHeight = function (\n  positions,\n  options,\n  extrude\n) {\n  var ellipsoid = options.ellipsoid;\n  var height = options.height;\n  var extrudedHeight = options.extrudedHeight;\n  var size = extrude ? (positions.length / 3) * 2 : positions.length / 3;\n\n  var finalPositions = new Float64Array(size * 3);\n\n  var length = positions.length;\n  var bottomOffset = extrude ? length : 0;\n  for (var i = 0; i < length; i += 3) {\n    var i1 = i + 1;\n    var i2 = i + 2;\n\n    var position = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromArray */ .Z.fromArray(positions, i, scratchCartesian1);\n    ellipsoid.scaleToGeodeticSurface(position, position);\n\n    var extrudedPosition = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(position, scratchCartesian2);\n    var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n    var scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      normal,\n      height,\n      scratchCartesian3\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(position, scaledNormal, position);\n\n    if (extrude) {\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(normal, extrudedHeight, scaledNormal);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(extrudedPosition, scaledNormal, extrudedPosition);\n\n      finalPositions[i + bottomOffset] = extrudedPosition.x;\n      finalPositions[i1 + bottomOffset] = extrudedPosition.y;\n      finalPositions[i2 + bottomOffset] = extrudedPosition.z;\n    }\n\n    finalPositions[i] = position.x;\n    finalPositions[i1] = position.y;\n    finalPositions[i2] = position.z;\n  }\n\n  return finalPositions;\n};\n\nvar unitPosScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar eastVecScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar northVecScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n/**\n * Returns an array of positions that make up the ellipse.\n * @private\n */\nEllipseGeometryLibrary.computeEllipsePositions = function (\n  options,\n  addFillPositions,\n  addEdgePositions\n) {\n  var semiMinorAxis = options.semiMinorAxis;\n  var semiMajorAxis = options.semiMajorAxis;\n  var rotation = options.rotation;\n  var center = options.center;\n\n  // Computing the arc-length of the ellipse is too expensive to be practical. Estimating it using the\n  // arc length of the sphere is too inaccurate and creates sharp edges when either the semi-major or\n  // semi-minor axis is much bigger than the other. Instead, scale the angle delta to make\n  // the distance along the ellipse boundary more closely match the granularity.\n  var granularity = options.granularity * 8.0;\n\n  var aSqr = semiMinorAxis * semiMinorAxis;\n  var bSqr = semiMajorAxis * semiMajorAxis;\n  var ab = semiMajorAxis * semiMinorAxis;\n\n  var mag = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].magnitude */ .Z.magnitude(center);\n\n  var unitPos = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(center, unitPosScratch);\n  var eastVec = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].cross */ .Z.cross(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].UNIT_Z */ .Z.UNIT_Z, center, eastVecScratch);\n  eastVec = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(eastVec, eastVec);\n  var northVec = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].cross */ .Z.cross(unitPos, eastVec, northVecScratch);\n\n  // The number of points in the first quadrant\n  var numPts = 1 + Math.ceil(_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO / granularity);\n\n  var deltaTheta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO / (numPts - 1);\n  var theta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - numPts * deltaTheta;\n  if (theta < 0.0) {\n    numPts -= Math.ceil(Math.abs(theta) / deltaTheta);\n  }\n\n  // If the number of points were three, the ellipse\n  // would be tessellated like below:\n  //\n  //         *---*\n  //       / | \\ | \\\n  //     *---*---*---*\n  //   / | \\ | \\ | \\ | \\\n  //  / .*---*---*---*. \\\n  // * ` | \\ | \\ | \\ | `*\n  //  \\`.*---*---*---*.`/\n  //   \\ | \\ | \\ | \\ | /\n  //     *---*---*---*\n  //       \\ | \\ | /\n  //         *---*\n  // The first and last column have one position and fan to connect to the adjacent column.\n  // Each other vertical column contains an even number of positions.\n  var size = 2 * (numPts * (numPts + 2));\n  var positions = addFillPositions ? new Array(size * 3) : undefined;\n  var positionIndex = 0;\n  var position = scratchCartesian1;\n  var reflectedPosition = scratchCartesian2;\n\n  var outerPositionsLength = numPts * 4 * 3;\n  var outerRightIndex = outerPositionsLength - 1;\n  var outerLeftIndex = 0;\n  var outerPositions = addEdgePositions\n    ? new Array(outerPositionsLength)\n    : undefined;\n\n  var i;\n  var j;\n  var numInterior;\n  var t;\n  var interiorPosition;\n\n  // Compute points in the \'eastern\' half of the ellipse\n  theta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO;\n  position = pointOnEllipsoid(\n    theta,\n    rotation,\n    northVec,\n    eastVec,\n    aSqr,\n    ab,\n    bSqr,\n    mag,\n    unitPos,\n    position\n  );\n  if (addFillPositions) {\n    positions[positionIndex++] = position.x;\n    positions[positionIndex++] = position.y;\n    positions[positionIndex++] = position.z;\n  }\n  if (addEdgePositions) {\n    outerPositions[outerRightIndex--] = position.z;\n    outerPositions[outerRightIndex--] = position.y;\n    outerPositions[outerRightIndex--] = position.x;\n  }\n  theta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - deltaTheta;\n  for (i = 1; i < numPts + 1; ++i) {\n    position = pointOnEllipsoid(\n      theta,\n      rotation,\n      northVec,\n      eastVec,\n      aSqr,\n      ab,\n      bSqr,\n      mag,\n      unitPos,\n      position\n    );\n    reflectedPosition = pointOnEllipsoid(\n      Math.PI - theta,\n      rotation,\n      northVec,\n      eastVec,\n      aSqr,\n      ab,\n      bSqr,\n      mag,\n      unitPos,\n      reflectedPosition\n    );\n\n    if (addFillPositions) {\n      positions[positionIndex++] = position.x;\n      positions[positionIndex++] = position.y;\n      positions[positionIndex++] = position.z;\n\n      numInterior = 2 * i + 2;\n      for (j = 1; j < numInterior - 1; ++j) {\n        t = j / (numInterior - 1);\n        interiorPosition = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lerp */ .Z.lerp(\n          position,\n          reflectedPosition,\n          t,\n          scratchCartesian3\n        );\n        positions[positionIndex++] = interiorPosition.x;\n        positions[positionIndex++] = interiorPosition.y;\n        positions[positionIndex++] = interiorPosition.z;\n      }\n\n      positions[positionIndex++] = reflectedPosition.x;\n      positions[positionIndex++] = reflectedPosition.y;\n      positions[positionIndex++] = reflectedPosition.z;\n    }\n\n    if (addEdgePositions) {\n      outerPositions[outerRightIndex--] = position.z;\n      outerPositions[outerRightIndex--] = position.y;\n      outerPositions[outerRightIndex--] = position.x;\n      outerPositions[outerLeftIndex++] = reflectedPosition.x;\n      outerPositions[outerLeftIndex++] = reflectedPosition.y;\n      outerPositions[outerLeftIndex++] = reflectedPosition.z;\n    }\n\n    theta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - (i + 1) * deltaTheta;\n  }\n\n  // Compute points in the \'western\' half of the ellipse\n  for (i = numPts; i > 1; --i) {\n    theta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - (i - 1) * deltaTheta;\n\n    position = pointOnEllipsoid(\n      -theta,\n      rotation,\n      northVec,\n      eastVec,\n      aSqr,\n      ab,\n      bSqr,\n      mag,\n      unitPos,\n      position\n    );\n    reflectedPosition = pointOnEllipsoid(\n      theta + Math.PI,\n      rotation,\n      northVec,\n      eastVec,\n      aSqr,\n      ab,\n      bSqr,\n      mag,\n      unitPos,\n      reflectedPosition\n    );\n\n    if (addFillPositions) {\n      positions[positionIndex++] = position.x;\n      positions[positionIndex++] = position.y;\n      positions[positionIndex++] = position.z;\n\n      numInterior = 2 * (i - 1) + 2;\n      for (j = 1; j < numInterior - 1; ++j) {\n        t = j / (numInterior - 1);\n        interiorPosition = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lerp */ .Z.lerp(\n          position,\n          reflectedPosition,\n          t,\n          scratchCartesian3\n        );\n        positions[positionIndex++] = interiorPosition.x;\n        positions[positionIndex++] = interiorPosition.y;\n        positions[positionIndex++] = interiorPosition.z;\n      }\n\n      positions[positionIndex++] = reflectedPosition.x;\n      positions[positionIndex++] = reflectedPosition.y;\n      positions[positionIndex++] = reflectedPosition.z;\n    }\n\n    if (addEdgePositions) {\n      outerPositions[outerRightIndex--] = position.z;\n      outerPositions[outerRightIndex--] = position.y;\n      outerPositions[outerRightIndex--] = position.x;\n      outerPositions[outerLeftIndex++] = reflectedPosition.x;\n      outerPositions[outerLeftIndex++] = reflectedPosition.y;\n      outerPositions[outerLeftIndex++] = reflectedPosition.z;\n    }\n  }\n\n  theta = _Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO;\n  position = pointOnEllipsoid(\n    -theta,\n    rotation,\n    northVec,\n    eastVec,\n    aSqr,\n    ab,\n    bSqr,\n    mag,\n    unitPos,\n    position\n  );\n\n  var r = {};\n  if (addFillPositions) {\n    positions[positionIndex++] = position.x;\n    positions[positionIndex++] = position.y;\n    positions[positionIndex++] = position.z;\n    r.positions = positions;\n    r.numPts = numPts;\n  }\n  if (addEdgePositions) {\n    outerPositions[outerRightIndex--] = position.z;\n    outerPositions[outerRightIndex--] = position.y;\n    outerPositions[outerRightIndex--] = position.x;\n    r.outerPositions = outerPositions;\n  }\n\n  return r;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipseGeometryLibrary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47302\n')},27337:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _arrayFill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23401);\n/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84828);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12572);\n/* harmony import */ var _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(47302);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50491);\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82408);\n/* harmony import */ var _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(13616);\n/* harmony import */ var _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(56652);\n/* harmony import */ var _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(87379);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(22832);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(99417);\n/* harmony import */ var _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(97264);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar scratchCartesian1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar boundingSphereCenter = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction computeEllipse(options) {\n  var center = options.center;\n  boundingSphereCenter = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter),\n    options.height,\n    boundingSphereCenter\n  );\n  boundingSphereCenter = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n    center,\n    boundingSphereCenter,\n    boundingSphereCenter\n  );\n  var boundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n    boundingSphereCenter,\n    options.semiMajorAxis\n  );\n  var positions = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].computeEllipsePositions */ .Z.computeEllipsePositions(\n    options,\n    false,\n    true\n  ).outerPositions;\n\n  var attributes = new _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    position: new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      values: _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].raisePositionsToHeight */ .Z.raisePositionsToHeight(\n        positions,\n        options,\n        false\n      ),\n    }),\n  });\n\n  var length = positions.length / 3;\n  var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArray */ .Z.createTypedArray(length, length * 2);\n  var index = 0;\n  for (var i = 0; i < length; ++i) {\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n  }\n\n  return {\n    boundingSphere: boundingSphere,\n    attributes: attributes,\n    indices: indices,\n  };\n}\n\nvar topBoundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar bottomBoundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nfunction computeExtrudedEllipse(options) {\n  var center = options.center;\n  var ellipsoid = options.ellipsoid;\n  var semiMajorAxis = options.semiMajorAxis;\n  var scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1),\n    options.height,\n    scratchCartesian1\n  );\n  topBoundingSphere.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n    center,\n    scaledNormal,\n    topBoundingSphere.center\n  );\n  topBoundingSphere.radius = semiMajorAxis;\n\n  scaledNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    ellipsoid.geodeticSurfaceNormal(center, scaledNormal),\n    options.extrudedHeight,\n    scaledNormal\n  );\n  bottomBoundingSphere.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n    center,\n    scaledNormal,\n    bottomBoundingSphere.center\n  );\n  bottomBoundingSphere.radius = semiMajorAxis;\n\n  var positions = _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].computeEllipsePositions */ .Z.computeEllipsePositions(\n    options,\n    false,\n    true\n  ).outerPositions;\n  var attributes = new _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    position: new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      values: _EllipseGeometryLibrary_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].raisePositionsToHeight */ .Z.raisePositionsToHeight(\n        positions,\n        options,\n        true\n      ),\n    }),\n  });\n\n  positions = attributes.position.values;\n  var boundingSphere = _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].union */ .Z.union(\n    topBoundingSphere,\n    bottomBoundingSphere\n  );\n  var length = positions.length / 3;\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(options.offsetAttribute)) {\n    var applyOffset = new Uint8Array(length);\n    if (options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TOP */ .Z.TOP) {\n      applyOffset = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(applyOffset, 1, 0, length / 2);\n    } else {\n      var offsetValue =\n        options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].NONE */ .Z.NONE ? 0 : 1;\n      applyOffset = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(applyOffset, offsetValue);\n    }\n\n    attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  var numberOfVerticalLines = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.numberOfVerticalLines, 16);\n  numberOfVerticalLines = _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clamp */ .Z.clamp(\n    numberOfVerticalLines,\n    0,\n    length / 2\n  );\n\n  var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArray */ .Z.createTypedArray(\n    length,\n    length * 2 + numberOfVerticalLines * 2\n  );\n\n  length /= 2;\n  var index = 0;\n  var i;\n  for (i = 0; i < length; ++i) {\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n    indices[index++] = i + length;\n    indices[index++] = ((i + 1) % length) + length;\n  }\n\n  var numSide;\n  if (numberOfVerticalLines > 0) {\n    var numSideLines = Math.min(numberOfVerticalLines, length);\n    numSide = Math.round(length / numSideLines);\n\n    var maxI = Math.min(numSide * numberOfVerticalLines, length);\n    for (i = 0; i < maxI; i += numSide) {\n      indices[index++] = i;\n      indices[index++] = i + length;\n    }\n  }\n\n  return {\n    boundingSphere: boundingSphere,\n    attributes: attributes,\n    indices: indices,\n  };\n}\n\n/**\n * A description of the outline of an ellipse on an ellipsoid.\n *\n * @alias EllipseOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The ellipse\'s center point in the fixed frame.\n * @param {Number} options.semiMajorAxis The length of the ellipse\'s semi-major axis in meters.\n * @param {Number} options.semiMinorAxis The length of the ellipse\'s semi-minor axis in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse\'s extruded face and the ellipsoid surface.\n * @param {Number} [options.rotation=0.0] The angle from north (counter-clockwise) in radians.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the ellipse in radians.\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surface of an extruded ellipse.\n *\n * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see EllipseOutlineGeometry.createGeometry\n *\n * @example\n * var ellipse = new Cesium.EllipseOutlineGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   semiMajorAxis : 500000.0,\n *   semiMinorAxis : 300000.0,\n *   rotation : Cesium.Math.toRadians(60.0)\n * });\n * var geometry = Cesium.EllipseOutlineGeometry.createGeometry(ellipse);\n */\nfunction EllipseOutlineGeometry(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var center = options.center;\n  var ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].WGS84 */ .Z.WGS84);\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var granularity = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.granularity,\n    _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE\n  );\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(center)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("center is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(semiMajorAxis)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("semiMajorAxis is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(semiMinorAxis)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("semiMinorAxis is required.");\n  }\n  if (semiMajorAxis < semiMinorAxis) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n      "semiMajorAxis must be greater than or equal to the semiMinorAxis."\n    );\n  }\n  if (granularity <= 0.0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("granularity must be greater than zero.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var height = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.height, 0.0);\n  var extrudedHeight = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.extrudedHeight, height);\n\n  this._center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(center);\n  this._semiMajorAxis = semiMajorAxis;\n  this._semiMinorAxis = semiMinorAxis;\n  this._ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(ellipsoid);\n  this._rotation = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.rotation, 0.0);\n  this._height = Math.max(extrudedHeight, height);\n  this._granularity = granularity;\n  this._extrudedHeight = Math.min(extrudedHeight, height);\n  this._numberOfVerticalLines = Math.max(\n    (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.numberOfVerticalLines, 16),\n    0\n  );\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = "createEllipseOutlineGeometry";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipseOutlineGeometry.packedLength =\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength + _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].packedLength */ .Z.packedLength + 8;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipseOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipseOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(value)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("value is required");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(startingIndex, 0);\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(value._center, array, startingIndex);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength;\n\n  _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].pack */ .Z.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].packedLength */ .Z.packedLength;\n\n  array[startingIndex++] = value._semiMajorAxis;\n  array[startingIndex++] = value._semiMinorAxis;\n  array[startingIndex++] = value._rotation;\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._numberOfVerticalLines;\n  array[startingIndex] = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchCenter = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchEllipsoid = new _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\nvar scratchOptions = {\n  center: scratchCenter,\n  ellipsoid: scratchEllipsoid,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  rotation: undefined,\n  height: undefined,\n  granularity: undefined,\n  extrudedHeight: undefined,\n  numberOfVerticalLines: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipseOutlineGeometry} [result] The object into which to store the result.\n * @returns {EllipseOutlineGeometry} The modified result parameter or a new EllipseOutlineGeometry instance if one was not provided.\n */\nEllipseOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(startingIndex, 0);\n\n  var center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchCenter);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength;\n\n  var ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].packedLength */ .Z.packedLength;\n\n  var semiMajorAxis = array[startingIndex++];\n  var semiMinorAxis = array[startingIndex++];\n  var rotation = array[startingIndex++];\n  var height = array[startingIndex++];\n  var granularity = array[startingIndex++];\n  var extrudedHeight = array[startingIndex++];\n  var numberOfVerticalLines = array[startingIndex++];\n  var offsetAttribute = array[startingIndex];\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(result)) {\n    scratchOptions.height = height;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.granularity = granularity;\n    scratchOptions.rotation = rotation;\n    scratchOptions.semiMajorAxis = semiMajorAxis;\n    scratchOptions.semiMinorAxis = semiMinorAxis;\n    scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n\n    return new EllipseOutlineGeometry(scratchOptions);\n  }\n\n  result._center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(center, result._center);\n  result._ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(ellipsoid, result._ellipsoid);\n  result._semiMajorAxis = semiMajorAxis;\n  result._semiMinorAxis = semiMinorAxis;\n  result._rotation = rotation;\n  result._height = height;\n  result._granularity = granularity;\n  result._extrudedHeight = extrudedHeight;\n  result._numberOfVerticalLines = numberOfVerticalLines;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of an ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipseOutlineGeometry} ellipseGeometry A description of the ellipse.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipseOutlineGeometry.createGeometry = function (ellipseGeometry) {\n  if (\n    ellipseGeometry._semiMajorAxis <= 0.0 ||\n    ellipseGeometry._semiMinorAxis <= 0.0\n  ) {\n    return;\n  }\n\n  var height = ellipseGeometry._height;\n  var extrudedHeight = ellipseGeometry._extrudedHeight;\n  var extrude = !_Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n    height,\n    extrudedHeight,\n    0,\n    _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].EPSILON2 */ .Z.EPSILON2\n  );\n\n  ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(\n    ellipseGeometry._center,\n    ellipseGeometry._center\n  );\n  var options = {\n    center: ellipseGeometry._center,\n    semiMajorAxis: ellipseGeometry._semiMajorAxis,\n    semiMinorAxis: ellipseGeometry._semiMinorAxis,\n    ellipsoid: ellipseGeometry._ellipsoid,\n    rotation: ellipseGeometry._rotation,\n    height: height,\n    granularity: ellipseGeometry._granularity,\n    numberOfVerticalLines: ellipseGeometry._numberOfVerticalLines,\n  };\n  var geometry;\n  if (extrude) {\n    options.extrudedHeight = extrudedHeight;\n    options.offsetAttribute = ellipseGeometry._offsetAttribute;\n    geometry = computeExtrudedEllipse(options);\n  } else {\n    geometry = computeEllipse(options);\n\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(ellipseGeometry._offsetAttribute)) {\n      var length = geometry.attributes.position.values.length;\n      var applyOffset = new Uint8Array(length / 3);\n      var offsetValue =\n        ellipseGeometry._offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].NONE */ .Z.NONE\n          ? 0\n          : 1;\n      (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(applyOffset, offsetValue);\n      geometry.attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n  }\n\n  return new _Geometry_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].LINES */ .Z.LINES,\n    boundingSphere: geometry.boundingSphere,\n    offsetAttribute: ellipseGeometry._offsetAttribute,\n  });\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipseOutlineGeometry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27337\n')},50491:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99417);\n/* harmony import */ var _scaleToGeodeticSurface_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(97);\n\n\n\n\n\n\n\n\n\nfunction initialize(ellipsoid, x, y, z) {\n  x = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(x, 0.0);\n  y = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(y, 0.0);\n  z = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(z, 0.0);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("x", x, 0.0);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("y", y, 0.0);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("z", z, 0.0);\n  //>>includeEnd(\'debug\');\n\n  ellipsoid._radii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(x, y, z);\n\n  ellipsoid._radiiSquared = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(x * x, y * y, z * z);\n\n  ellipsoid._radiiToTheFourth = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n    x * x * x * x,\n    y * y * y * y,\n    z * z * z * z\n  );\n\n  ellipsoid._oneOverRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n    x === 0.0 ? 0.0 : 1.0 / x,\n    y === 0.0 ? 0.0 : 1.0 / y,\n    z === 0.0 ? 0.0 : 1.0 / z\n  );\n\n  ellipsoid._oneOverRadiiSquared = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n    x === 0.0 ? 0.0 : 1.0 / (x * x),\n    y === 0.0 ? 0.0 : 1.0 / (y * y),\n    z === 0.0 ? 0.0 : 1.0 / (z * z)\n  );\n\n  ellipsoid._minimumRadius = Math.min(x, y, z);\n\n  ellipsoid._maximumRadius = Math.max(x, y, z);\n\n  ellipsoid._centerToleranceSquared = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EPSILON1 */ .Z.EPSILON1;\n\n  if (ellipsoid._radiiSquared.z !== 0) {\n    ellipsoid._squaredXOverSquaredZ =\n      ellipsoid._radiiSquared.x / ellipsoid._radiiSquared.z;\n  }\n}\n\n/**\n * A quadratic surface defined in Cartesian coordinates by the equation\n * <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\n * by Cesium to represent the shape of planetary bodies.\n *\n * Rather than constructing this object directly, one of the provided\n * constants is normally used.\n * @alias Ellipsoid\n * @constructor\n *\n * @param {Number} [x=0] The radius in the x direction.\n * @param {Number} [y=0] The radius in the y direction.\n * @param {Number} [z=0] The radius in the z direction.\n *\n * @exception {DeveloperError} All radii components must be greater than or equal to zero.\n *\n * @see Ellipsoid.fromCartesian3\n * @see Ellipsoid.WGS84\n * @see Ellipsoid.UNIT_SPHERE\n */\nfunction Ellipsoid(x, y, z) {\n  this._radii = undefined;\n  this._radiiSquared = undefined;\n  this._radiiToTheFourth = undefined;\n  this._oneOverRadii = undefined;\n  this._oneOverRadiiSquared = undefined;\n  this._minimumRadius = undefined;\n  this._maximumRadius = undefined;\n  this._centerToleranceSquared = undefined;\n  this._squaredXOverSquaredZ = undefined;\n\n  initialize(this, x, y, z);\n}\n\nObject.defineProperties(Ellipsoid.prototype, {\n  /**\n   * Gets the radii of the ellipsoid.\n   * @memberof Ellipsoid.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  radii: {\n    get: function () {\n      return this._radii;\n    },\n  },\n  /**\n   * Gets the squared radii of the ellipsoid.\n   * @memberof Ellipsoid.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  radiiSquared: {\n    get: function () {\n      return this._radiiSquared;\n    },\n  },\n  /**\n   * Gets the radii of the ellipsoid raise to the fourth power.\n   * @memberof Ellipsoid.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  radiiToTheFourth: {\n    get: function () {\n      return this._radiiToTheFourth;\n    },\n  },\n  /**\n   * Gets one over the radii of the ellipsoid.\n   * @memberof Ellipsoid.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  oneOverRadii: {\n    get: function () {\n      return this._oneOverRadii;\n    },\n  },\n  /**\n   * Gets one over the squared radii of the ellipsoid.\n   * @memberof Ellipsoid.prototype\n   * @type {Cartesian3}\n   * @readonly\n   */\n  oneOverRadiiSquared: {\n    get: function () {\n      return this._oneOverRadiiSquared;\n    },\n  },\n  /**\n   * Gets the minimum radius of the ellipsoid.\n   * @memberof Ellipsoid.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumRadius: {\n    get: function () {\n      return this._minimumRadius;\n    },\n  },\n  /**\n   * Gets the maximum radius of the ellipsoid.\n   * @memberof Ellipsoid.prototype\n   * @type {Number}\n   * @readonly\n   */\n  maximumRadius: {\n    get: function () {\n      return this._maximumRadius;\n    },\n  },\n});\n\n/**\n * Duplicates an Ellipsoid instance.\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid to duplicate.\n * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\n *                    instance should be created.\n * @returns {Ellipsoid} The cloned Ellipsoid. (Returns undefined if ellipsoid is undefined)\n */\nEllipsoid.clone = function (ellipsoid, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(ellipsoid)) {\n    return undefined;\n  }\n  var radii = ellipsoid._radii;\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    return new Ellipsoid(radii.x, radii.y, radii.z);\n  }\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(radii, result._radii);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(ellipsoid._radiiSquared, result._radiiSquared);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(ellipsoid._radiiToTheFourth, result._radiiToTheFourth);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(ellipsoid._oneOverRadii, result._oneOverRadii);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(ellipsoid._oneOverRadiiSquared, result._oneOverRadiiSquared);\n  result._minimumRadius = ellipsoid._minimumRadius;\n  result._maximumRadius = ellipsoid._maximumRadius;\n  result._centerToleranceSquared = ellipsoid._centerToleranceSquared;\n\n  return result;\n};\n\n/**\n * Computes an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\n *\n * @param {Cartesian3} [cartesian=Cartesian3.ZERO] The ellipsoid\'s radius in the x, y, and z directions.\n * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\n *                    instance should be created.\n * @returns {Ellipsoid} A new Ellipsoid instance.\n *\n * @exception {DeveloperError} All radii components must be greater than or equal to zero.\n *\n * @see Ellipsoid.WGS84\n * @see Ellipsoid.UNIT_SPHERE\n */\nEllipsoid.fromCartesian3 = function (cartesian, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new Ellipsoid();\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(cartesian)) {\n    return result;\n  }\n\n  initialize(result, cartesian.x, cartesian.y, cartesian.z);\n  return result;\n};\n\n/**\n * An Ellipsoid instance initialized to the WGS84 standard.\n *\n * @type {Ellipsoid}\n * @constant\n */\nEllipsoid.WGS84 = Object.freeze(\n  new Ellipsoid(6378137.0, 6378137.0, 6356752.3142451793)\n);\n\n/**\n * An Ellipsoid instance initialized to radii of (1.0, 1.0, 1.0).\n *\n * @type {Ellipsoid}\n * @constant\n */\nEllipsoid.UNIT_SPHERE = Object.freeze(new Ellipsoid(1.0, 1.0, 1.0));\n\n/**\n * An Ellipsoid instance initialized to a sphere with the lunar radius.\n *\n * @type {Ellipsoid}\n * @constant\n */\nEllipsoid.MOON = Object.freeze(\n  new Ellipsoid(\n    _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].LUNAR_RADIUS */ .Z.LUNAR_RADIUS,\n    _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].LUNAR_RADIUS */ .Z.LUNAR_RADIUS,\n    _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].LUNAR_RADIUS */ .Z.LUNAR_RADIUS\n  )\n);\n\n/**\n * Duplicates an Ellipsoid instance.\n *\n * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\n *                    instance should be created.\n * @returns {Ellipsoid} The cloned Ellipsoid.\n */\nEllipsoid.prototype.clone = function (result) {\n  return Ellipsoid.clone(this, result);\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipsoid.packedLength = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].packedLength */ .Z.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Ellipsoid} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipsoid.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(startingIndex, 0);\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].pack */ .Z.pack(value._radii, array, startingIndex);\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Ellipsoid} [result] The object into which to store the result.\n * @returns {Ellipsoid} The modified result parameter or a new Ellipsoid instance if one was not provided.\n */\nEllipsoid.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(startingIndex, 0);\n\n  var radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].unpack */ .Z.unpack(array, startingIndex);\n  return Ellipsoid.fromCartesian3(radii, result);\n};\n\n/**\n * Computes the unit vector directed from the center of this ellipsoid toward the provided Cartesian position.\n * @function\n *\n * @param {Cartesian3} cartesian The Cartesian for which to to determine the geocentric normal.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\n */\nEllipsoid.prototype.geocentricSurfaceNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize;\n\n/**\n * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\n *\n * @param {Cartographic} cartographic The cartographic position for which to to determine the geodetic normal.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\n */\nEllipsoid.prototype.geodeticSurfaceNormalCartographic = function (\n  cartographic,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("cartographic", cartographic);\n  //>>includeEnd(\'debug\');\n\n  var longitude = cartographic.longitude;\n  var latitude = cartographic.latitude;\n  var cosLatitude = Math.cos(latitude);\n\n  var x = cosLatitude * Math.cos(longitude);\n  var y = cosLatitude * Math.sin(longitude);\n  var z = Math.sin(latitude);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(result, result);\n};\n\n/**\n * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\n *\n * @param {Cartesian3} cartesian The Cartesian position for which to to determine the surface normal.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided, or undefined if a normal cannot be found.\n */\nEllipsoid.prototype.geodeticSurfaceNormal = function (cartesian, result) {\n  if (\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(cartesian, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO, _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EPSILON14 */ .Z.EPSILON14)\n  ) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyComponents */ .Z.multiplyComponents(\n    cartesian,\n    this._oneOverRadiiSquared,\n    result\n  );\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(result, result);\n};\n\nvar cartographicToCartesianNormal = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar cartographicToCartesianK = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n/**\n * Converts the provided cartographic to Cartesian representation.\n *\n * @param {Cartographic} cartographic The cartographic position.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\n *\n * @example\n * //Create a Cartographic and determine it\'s Cartesian representation on a WGS84 ellipsoid.\n * var position = new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 5000);\n * var cartesianPosition = Cesium.Ellipsoid.WGS84.cartographicToCartesian(position);\n */\nEllipsoid.prototype.cartographicToCartesian = function (cartographic, result) {\n  //`cartographic is required` is thrown from geodeticSurfaceNormalCartographic.\n  var n = cartographicToCartesianNormal;\n  var k = cartographicToCartesianK;\n  this.geodeticSurfaceNormalCartographic(cartographic, n);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyComponents */ .Z.multiplyComponents(this._radiiSquared, n, k);\n  var gamma = Math.sqrt(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].dot */ .Z.dot(n, k));\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].divideByScalar */ .Z.divideByScalar(k, gamma, k);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(n, cartographic.height, n);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(k, n, result);\n};\n\n/**\n * Converts the provided array of cartographics to an array of Cartesians.\n *\n * @param {Cartographic[]} cartographics An array of cartographic positions.\n * @param {Cartesian3[]} [result] The object onto which to store the result.\n * @returns {Cartesian3[]} The modified result parameter or a new Array instance if none was provided.\n *\n * @example\n * //Convert an array of Cartographics and determine their Cartesian representation on a WGS84 ellipsoid.\n * var positions = [new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 0),\n *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.321), Cesium.Math.toRadians(78.123), 100),\n *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.645), Cesium.Math.toRadians(78.456), 250)];\n * var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(positions);\n */\nEllipsoid.prototype.cartographicArrayToCartesianArray = function (\n  cartographics,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("cartographics", cartographics);\n  //>>includeEnd(\'debug\')\n\n  var length = cartographics.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new Array(length);\n  } else {\n    result.length = length;\n  }\n  for (var i = 0; i < length; i++) {\n    result[i] = this.cartographicToCartesian(cartographics[i], result[i]);\n  }\n  return result;\n};\n\nvar cartesianToCartographicN = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar cartesianToCartographicP = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar cartesianToCartographicH = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n/**\n * Converts the provided cartesian to cartographic representation.\n * The cartesian is undefined at the center of the ellipsoid.\n *\n * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\n *\n * @example\n * //Create a Cartesian and determine it\'s Cartographic representation on a WGS84 ellipsoid.\n * var position = new Cesium.Cartesian3(17832.12, 83234.52, 952313.73);\n * var cartographicPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(position);\n */\nEllipsoid.prototype.cartesianToCartographic = function (cartesian, result) {\n  //`cartesian is required.` is thrown from scaleToGeodeticSurface\n  var p = this.scaleToGeodeticSurface(cartesian, cartesianToCartographicP);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(p)) {\n    return undefined;\n  }\n\n  var n = this.geodeticSurfaceNormal(p, cartesianToCartographicN);\n  var h = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(cartesian, p, cartesianToCartographicH);\n\n  var longitude = Math.atan2(n.y, n.x);\n  var latitude = Math.asin(n.z);\n  var height =\n    _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].sign */ .Z.sign(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].dot */ .Z.dot(h, cartesian)) * _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].magnitude */ .Z.magnitude(h);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    return new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(longitude, latitude, height);\n  }\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\n/**\n * Converts the provided array of cartesians to an array of cartographics.\n *\n * @param {Cartesian3[]} cartesians An array of Cartesian positions.\n * @param {Cartographic[]} [result] The object onto which to store the result.\n * @returns {Cartographic[]} The modified result parameter or a new Array instance if none was provided.\n *\n * @example\n * //Create an array of Cartesians and determine their Cartographic representation on a WGS84 ellipsoid.\n * var positions = [new Cesium.Cartesian3(17832.12, 83234.52, 952313.73),\n *                  new Cesium.Cartesian3(17832.13, 83234.53, 952313.73),\n *                  new Cesium.Cartesian3(17832.14, 83234.54, 952313.73)]\n * var cartographicPositions = Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(positions);\n */\nEllipsoid.prototype.cartesianArrayToCartographicArray = function (\n  cartesians,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("cartesians", cartesians);\n  //>>includeEnd(\'debug\');\n\n  var length = cartesians.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new Array(length);\n  } else {\n    result.length = length;\n  }\n  for (var i = 0; i < length; ++i) {\n    result[i] = this.cartesianToCartographic(cartesians[i], result[i]);\n  }\n  return result;\n};\n\n/**\n * Scales the provided Cartesian position along the geodetic surface normal\n * so that it is on the surface of this ellipsoid.  If the position is\n * at the center of the ellipsoid, this function returns undefined.\n *\n * @param {Cartesian3} cartesian The Cartesian position to scale.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\n */\nEllipsoid.prototype.scaleToGeodeticSurface = function (cartesian, result) {\n  return (0,_scaleToGeodeticSurface_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(\n    cartesian,\n    this._oneOverRadii,\n    this._oneOverRadiiSquared,\n    this._centerToleranceSquared,\n    result\n  );\n};\n\n/**\n * Scales the provided Cartesian position along the geocentric surface normal\n * so that it is on the surface of this ellipsoid.\n *\n * @param {Cartesian3} cartesian The Cartesian position to scale.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\n */\nEllipsoid.prototype.scaleToGeocentricSurface = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n\n  var positionX = cartesian.x;\n  var positionY = cartesian.y;\n  var positionZ = cartesian.z;\n  var oneOverRadiiSquared = this._oneOverRadiiSquared;\n\n  var beta =\n    1.0 /\n    Math.sqrt(\n      positionX * positionX * oneOverRadiiSquared.x +\n        positionY * positionY * oneOverRadiiSquared.y +\n        positionZ * positionZ * oneOverRadiiSquared.z\n    );\n\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(cartesian, beta, result);\n};\n\n/**\n * Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\n * its components by the result of {@link Ellipsoid#oneOverRadii}.\n *\n * @param {Cartesian3} position The position to transform.\n * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\n *        return a new instance.\n * @returns {Cartesian3} The position expressed in the scaled space.  The returned instance is the\n *          one passed as the result parameter if it is not undefined, or a new instance of it is.\n */\nEllipsoid.prototype.transformPositionToScaledSpace = function (\n  position,\n  result\n) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyComponents */ .Z.multiplyComponents(position, this._oneOverRadii, result);\n};\n\n/**\n * Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\n * its components by the result of {@link Ellipsoid#radii}.\n *\n * @param {Cartesian3} position The position to transform.\n * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\n *        return a new instance.\n * @returns {Cartesian3} The position expressed in the unscaled space.  The returned instance is the\n *          one passed as the result parameter if it is not undefined, or a new instance of it is.\n */\nEllipsoid.prototype.transformPositionFromScaledSpace = function (\n  position,\n  result\n) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyComponents */ .Z.multiplyComponents(position, this._radii, result);\n};\n\n/**\n * Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Ellipsoid} [right] The other Ellipsoid.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nEllipsoid.prototype.equals = function (right) {\n  return (\n    this === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(right) && _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(this._radii, right._radii))\n  );\n};\n\n/**\n * Creates a string representing this Ellipsoid in the format \'(radii.x, radii.y, radii.z)\'.\n *\n * @returns {String} A string representing this ellipsoid in the format \'(radii.x, radii.y, radii.z)\'.\n */\nEllipsoid.prototype.toString = function () {\n  return this._radii.toString();\n};\n\n/**\n * Computes a point which is the intersection of the surface normal with the z-axis.\n *\n * @param {Cartesian3} position the position. must be on the surface of the ellipsoid.\n * @param {Number} [buffer = 0.0] A buffer to subtract from the ellipsoid size when checking if the point is inside the ellipsoid.\n *                                In earth case, with common earth datums, there is no need for this buffer since the intersection point is always (relatively) very close to the center.\n *                                In WGS84 datum, intersection point is at max z = +-42841.31151331382 (0.673% of z-axis).\n *                                Intersection point could be outside the ellipsoid if the ratio of MajorAxis / AxisOfRotation is bigger than the square root of 2\n * @param {Cartesian3} [result] The cartesian to which to copy the result, or undefined to create and\n *        return a new instance.\n * @returns {Cartesian3 | undefined} the intersection point if it\'s inside the ellipsoid, undefined otherwise\n *\n * @exception {DeveloperError} position is required.\n * @exception {DeveloperError} Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y).\n * @exception {DeveloperError} Ellipsoid.radii.z must be greater than 0.\n */\nEllipsoid.prototype.getSurfaceNormalIntersectionWithZAxis = function (\n  position,\n  buffer,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("position", position);\n\n  if (\n    !_Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      this._radii.x,\n      this._radii.y,\n      _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EPSILON15 */ .Z.EPSILON15\n    )\n  ) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)"\n    );\n  }\n\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("Ellipsoid.radii.z", this._radii.z, 0);\n  //>>includeEnd(\'debug\');\n\n  buffer = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(buffer, 0.0);\n\n  var squaredXOverSquaredZ = this._squaredXOverSquaredZ;\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n\n  result.x = 0.0;\n  result.y = 0.0;\n  result.z = position.z * (1 - squaredXOverSquaredZ);\n\n  if (Math.abs(result.z) >= this._radii.z - buffer) {\n    return undefined;\n  }\n\n  return result;\n};\n\nvar abscissas = [\n  0.14887433898163,\n  0.43339539412925,\n  0.67940956829902,\n  0.86506336668898,\n  0.97390652851717,\n  0.0,\n];\nvar weights = [\n  0.29552422471475,\n  0.26926671930999,\n  0.21908636251598,\n  0.14945134915058,\n  0.066671344308684,\n  0.0,\n];\n\n/**\n * Compute the 10th order Gauss-Legendre Quadrature of the given definite integral.\n *\n * @param {Number} a The lower bound for the integration.\n * @param {Number} b The upper bound for the integration.\n * @param {Ellipsoid~RealValuedScalarFunction} func The function to integrate.\n * @returns {Number} The value of the integral of the given function over the given domain.\n *\n * @private\n */\nfunction gaussLegendreQuadrature(a, b, func) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number */ .Z.typeOf.number("a", a);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number */ .Z.typeOf.number("b", b);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.func */ .Z.typeOf.func("func", func);\n  //>>includeEnd(\'debug\');\n\n  // The range is half of the normal range since the five weights add to one (ten weights add to two).\n  // The values of the abscissas are multiplied by two to account for this.\n  var xMean = 0.5 * (b + a);\n  var xRange = 0.5 * (b - a);\n\n  var sum = 0.0;\n  for (var i = 0; i < 5; i++) {\n    var dx = xRange * abscissas[i];\n    sum += weights[i] * (func(xMean + dx) + func(xMean - dx));\n  }\n\n  // Scale the sum to the range of x.\n  sum *= xRange;\n  return sum;\n}\n\n/**\n * A real valued scalar function.\n * @callback Ellipsoid~RealValuedScalarFunction\n *\n * @param {Number} x The value used to evaluate the function.\n * @returns {Number} The value of the function at x.\n *\n * @private\n */\n\n/**\n * Computes an approximation of the surface area of a rectangle on the surface of an ellipsoid using\n * Gauss-Legendre 10th order quadrature.\n *\n * @param {Rectangle} rectangle The rectangle used for computing the surface area.\n * @returns {Number} The approximate area of the rectangle on the surface of this ellipsoid.\n */\nEllipsoid.prototype.surfaceArea = function (rectangle) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("rectangle", rectangle);\n  //>>includeEnd(\'debug\');\n  var minLongitude = rectangle.west;\n  var maxLongitude = rectangle.east;\n  var minLatitude = rectangle.south;\n  var maxLatitude = rectangle.north;\n\n  while (maxLongitude < minLongitude) {\n    maxLongitude += _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TWO_PI */ .Z.TWO_PI;\n  }\n\n  var radiiSquared = this._radiiSquared;\n  var a2 = radiiSquared.x;\n  var b2 = radiiSquared.y;\n  var c2 = radiiSquared.z;\n  var a2b2 = a2 * b2;\n  return gaussLegendreQuadrature(minLatitude, maxLatitude, function (lat) {\n    // phi represents the angle measured from the north pole\n    // sin(phi) = sin(pi / 2 - lat) = cos(lat), cos(phi) is similar\n    var sinPhi = Math.cos(lat);\n    var cosPhi = Math.sin(lat);\n    return (\n      Math.cos(lat) *\n      gaussLegendreQuadrature(minLongitude, maxLongitude, function (lon) {\n        var cosTheta = Math.cos(lon);\n        var sinTheta = Math.sin(lon);\n        return Math.sqrt(\n          a2b2 * cosPhi * cosPhi +\n            c2 *\n              (b2 * cosTheta * cosTheta + a2 * sinTheta * sinTheta) *\n              sinPhi *\n              sinPhi\n        );\n      })\n    );\n  });\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (Ellipsoid);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50491\n')},39043:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50491);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99417);\n\n\n\n\n\n\n\n\nfunction setConstants(ellipsoidGeodesic) {\n  var uSquared = ellipsoidGeodesic._uSquared;\n  var a = ellipsoidGeodesic._ellipsoid.maximumRadius;\n  var b = ellipsoidGeodesic._ellipsoid.minimumRadius;\n  var f = (a - b) / a;\n\n  var cosineHeading = Math.cos(ellipsoidGeodesic._startHeading);\n  var sineHeading = Math.sin(ellipsoidGeodesic._startHeading);\n\n  var tanU = (1 - f) * Math.tan(ellipsoidGeodesic._start.latitude);\n\n  var cosineU = 1.0 / Math.sqrt(1.0 + tanU * tanU);\n  var sineU = cosineU * tanU;\n\n  var sigma = Math.atan2(tanU, cosineHeading);\n\n  var sineAlpha = cosineU * sineHeading;\n  var sineSquaredAlpha = sineAlpha * sineAlpha;\n\n  var cosineSquaredAlpha = 1.0 - sineSquaredAlpha;\n  var cosineAlpha = Math.sqrt(cosineSquaredAlpha);\n\n  var u2Over4 = uSquared / 4.0;\n  var u4Over16 = u2Over4 * u2Over4;\n  var u6Over64 = u4Over16 * u2Over4;\n  var u8Over256 = u4Over16 * u4Over16;\n\n  var a0 =\n    1.0 +\n    u2Over4 -\n    (3.0 * u4Over16) / 4.0 +\n    (5.0 * u6Over64) / 4.0 -\n    (175.0 * u8Over256) / 64.0;\n  var a1 = 1.0 - u2Over4 + (15.0 * u4Over16) / 8.0 - (35.0 * u6Over64) / 8.0;\n  var a2 = 1.0 - 3.0 * u2Over4 + (35.0 * u4Over16) / 4.0;\n  var a3 = 1.0 - 5.0 * u2Over4;\n\n  var distanceRatio =\n    a0 * sigma -\n    (a1 * Math.sin(2.0 * sigma) * u2Over4) / 2.0 -\n    (a2 * Math.sin(4.0 * sigma) * u4Over16) / 16.0 -\n    (a3 * Math.sin(6.0 * sigma) * u6Over64) / 48.0 -\n    (Math.sin(8.0 * sigma) * 5.0 * u8Over256) / 512;\n\n  var constants = ellipsoidGeodesic._constants;\n\n  constants.a = a;\n  constants.b = b;\n  constants.f = f;\n  constants.cosineHeading = cosineHeading;\n  constants.sineHeading = sineHeading;\n  constants.tanU = tanU;\n  constants.cosineU = cosineU;\n  constants.sineU = sineU;\n  constants.sigma = sigma;\n  constants.sineAlpha = sineAlpha;\n  constants.sineSquaredAlpha = sineSquaredAlpha;\n  constants.cosineSquaredAlpha = cosineSquaredAlpha;\n  constants.cosineAlpha = cosineAlpha;\n  constants.u2Over4 = u2Over4;\n  constants.u4Over16 = u4Over16;\n  constants.u6Over64 = u6Over64;\n  constants.u8Over256 = u8Over256;\n  constants.a0 = a0;\n  constants.a1 = a1;\n  constants.a2 = a2;\n  constants.a3 = a3;\n  constants.distanceRatio = distanceRatio;\n}\n\nfunction computeC(f, cosineSquaredAlpha) {\n  return (\n    (f * cosineSquaredAlpha * (4.0 + f * (4.0 - 3.0 * cosineSquaredAlpha))) /\n    16.0\n  );\n}\n\nfunction computeDeltaLambda(\n  f,\n  sineAlpha,\n  cosineSquaredAlpha,\n  sigma,\n  sineSigma,\n  cosineSigma,\n  cosineTwiceSigmaMidpoint\n) {\n  var C = computeC(f, cosineSquaredAlpha);\n\n  return (\n    (1.0 - C) *\n    f *\n    sineAlpha *\n    (sigma +\n      C *\n        sineSigma *\n        (cosineTwiceSigmaMidpoint +\n          C *\n            cosineSigma *\n            (2.0 * cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint - 1.0)))\n  );\n}\n\nfunction vincentyInverseFormula(\n  ellipsoidGeodesic,\n  major,\n  minor,\n  firstLongitude,\n  firstLatitude,\n  secondLongitude,\n  secondLatitude\n) {\n  var eff = (major - minor) / major;\n  var l = secondLongitude - firstLongitude;\n\n  var u1 = Math.atan((1 - eff) * Math.tan(firstLatitude));\n  var u2 = Math.atan((1 - eff) * Math.tan(secondLatitude));\n\n  var cosineU1 = Math.cos(u1);\n  var sineU1 = Math.sin(u1);\n  var cosineU2 = Math.cos(u2);\n  var sineU2 = Math.sin(u2);\n\n  var cc = cosineU1 * cosineU2;\n  var cs = cosineU1 * sineU2;\n  var ss = sineU1 * sineU2;\n  var sc = sineU1 * cosineU2;\n\n  var lambda = l;\n  var lambdaDot = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TWO_PI */ .Z.TWO_PI;\n\n  var cosineLambda = Math.cos(lambda);\n  var sineLambda = Math.sin(lambda);\n\n  var sigma;\n  var cosineSigma;\n  var sineSigma;\n  var cosineSquaredAlpha;\n  var cosineTwiceSigmaMidpoint;\n\n  do {\n    cosineLambda = Math.cos(lambda);\n    sineLambda = Math.sin(lambda);\n\n    var temp = cs - sc * cosineLambda;\n    sineSigma = Math.sqrt(\n      cosineU2 * cosineU2 * sineLambda * sineLambda + temp * temp\n    );\n    cosineSigma = ss + cc * cosineLambda;\n\n    sigma = Math.atan2(sineSigma, cosineSigma);\n\n    var sineAlpha;\n\n    if (sineSigma === 0.0) {\n      sineAlpha = 0.0;\n      cosineSquaredAlpha = 1.0;\n    } else {\n      sineAlpha = (cc * sineLambda) / sineSigma;\n      cosineSquaredAlpha = 1.0 - sineAlpha * sineAlpha;\n    }\n\n    lambdaDot = lambda;\n\n    cosineTwiceSigmaMidpoint = cosineSigma - (2.0 * ss) / cosineSquaredAlpha;\n\n    if (!isFinite(cosineTwiceSigmaMidpoint)) {\n      cosineTwiceSigmaMidpoint = 0.0;\n    }\n\n    lambda =\n      l +\n      computeDeltaLambda(\n        eff,\n        sineAlpha,\n        cosineSquaredAlpha,\n        sigma,\n        sineSigma,\n        cosineSigma,\n        cosineTwiceSigmaMidpoint\n      );\n  } while (Math.abs(lambda - lambdaDot) > _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EPSILON12 */ .Z.EPSILON12);\n\n  var uSquared =\n    (cosineSquaredAlpha * (major * major - minor * minor)) / (minor * minor);\n  var A =\n    1.0 +\n    (uSquared *\n      (4096.0 + uSquared * (uSquared * (320.0 - 175.0 * uSquared) - 768.0))) /\n      16384.0;\n  var B =\n    (uSquared *\n      (256.0 + uSquared * (uSquared * (74.0 - 47.0 * uSquared) - 128.0))) /\n    1024.0;\n\n  var cosineSquaredTwiceSigmaMidpoint =\n    cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint;\n  var deltaSigma =\n    B *\n    sineSigma *\n    (cosineTwiceSigmaMidpoint +\n      (B *\n        (cosineSigma * (2.0 * cosineSquaredTwiceSigmaMidpoint - 1.0) -\n          (B *\n            cosineTwiceSigmaMidpoint *\n            (4.0 * sineSigma * sineSigma - 3.0) *\n            (4.0 * cosineSquaredTwiceSigmaMidpoint - 3.0)) /\n            6.0)) /\n        4.0);\n\n  var distance = minor * A * (sigma - deltaSigma);\n\n  var startHeading = Math.atan2(cosineU2 * sineLambda, cs - sc * cosineLambda);\n  var endHeading = Math.atan2(cosineU1 * sineLambda, cs * cosineLambda - sc);\n\n  ellipsoidGeodesic._distance = distance;\n  ellipsoidGeodesic._startHeading = startHeading;\n  ellipsoidGeodesic._endHeading = endHeading;\n  ellipsoidGeodesic._uSquared = uSquared;\n}\n\nvar scratchCart1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchCart2 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nfunction computeProperties(ellipsoidGeodesic, start, end, ellipsoid) {\n  var firstCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(\n    ellipsoid.cartographicToCartesian(start, scratchCart2),\n    scratchCart1\n  );\n  var lastCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(\n    ellipsoid.cartographicToCartesian(end, scratchCart2),\n    scratchCart2\n  );\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n    "value",\n    Math.abs(\n      Math.abs(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].angleBetween */ .Z.angleBetween(firstCartesian, lastCartesian)) - Math.PI\n    ),\n    0.0125\n  );\n  //>>includeEnd(\'debug\');\n\n  vincentyInverseFormula(\n    ellipsoidGeodesic,\n    ellipsoid.maximumRadius,\n    ellipsoid.minimumRadius,\n    start.longitude,\n    start.latitude,\n    end.longitude,\n    end.latitude\n  );\n\n  ellipsoidGeodesic._start = _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    start,\n    ellipsoidGeodesic._start\n  );\n  ellipsoidGeodesic._end = _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(end, ellipsoidGeodesic._end);\n  ellipsoidGeodesic._start.height = 0;\n  ellipsoidGeodesic._end.height = 0;\n\n  setConstants(ellipsoidGeodesic);\n}\n\n/**\n * Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.\n *\n * @alias EllipsoidGeodesic\n * @constructor\n *\n * @param {Cartographic} [start] The initial planetodetic point on the path.\n * @param {Cartographic} [end] The final planetodetic point on the path.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the geodesic lies.\n */\nfunction EllipsoidGeodesic(start, end, ellipsoid) {\n  var e = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].WGS84 */ .Z.WGS84);\n  this._ellipsoid = e;\n  this._start = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._end = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n  this._constants = {};\n  this._startHeading = undefined;\n  this._endHeading = undefined;\n  this._distance = undefined;\n  this._uSquared = undefined;\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(start) && (0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(end)) {\n    computeProperties(this, start, end, e);\n  }\n}\n\nObject.defineProperties(EllipsoidGeodesic.prototype, {\n  /**\n   * Gets the ellipsoid.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the surface distance between the start and end point\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  surfaceDistance: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", this._distance);\n      //>>includeEnd(\'debug\');\n\n      return this._distance;\n    },\n  },\n\n  /**\n   * Gets the initial planetodetic point on the path.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  start: {\n    get: function () {\n      return this._start;\n    },\n  },\n\n  /**\n   * Gets the final planetodetic point on the path.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  end: {\n    get: function () {\n      return this._end;\n    },\n  },\n\n  /**\n   * Gets the heading at the initial point.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  startHeading: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", this._distance);\n      //>>includeEnd(\'debug\');\n\n      return this._startHeading;\n    },\n  },\n\n  /**\n   * Gets the heading at the final point.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  endHeading: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", this._distance);\n      //>>includeEnd(\'debug\');\n\n      return this._endHeading;\n    },\n  },\n});\n\n/**\n * Sets the start and end points of the geodesic\n *\n * @param {Cartographic} start The initial planetodetic point on the path.\n * @param {Cartographic} end The final planetodetic point on the path.\n */\nEllipsoidGeodesic.prototype.setEndPoints = function (start, end) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("start", start);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("end", end);\n  //>>includeEnd(\'debug\');\n\n  computeProperties(this, start, end, this._ellipsoid);\n};\n\n/**\n * Provides the location of a point at the indicated portion along the geodesic.\n *\n * @param {Number} fraction The portion of the distance between the initial and final points.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the geodesic.\n */\nEllipsoidGeodesic.prototype.interpolateUsingFraction = function (\n  fraction,\n  result\n) {\n  return this.interpolateUsingSurfaceDistance(\n    this._distance * fraction,\n    result\n  );\n};\n\n/**\n * Provides the location of a point at the indicated distance along the geodesic.\n *\n * @param {Number} distance The distance from the inital point to the point of interest along the geodesic\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the geodesic.\n *\n * @exception {DeveloperError} start and end must be set before calling function interpolateUsingSurfaceDistance\n */\nEllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance = function (\n  distance,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", this._distance);\n  //>>includeEnd(\'debug\');\n\n  var constants = this._constants;\n\n  var s = constants.distanceRatio + distance / constants.b;\n\n  var cosine2S = Math.cos(2.0 * s);\n  var cosine4S = Math.cos(4.0 * s);\n  var cosine6S = Math.cos(6.0 * s);\n  var sine2S = Math.sin(2.0 * s);\n  var sine4S = Math.sin(4.0 * s);\n  var sine6S = Math.sin(6.0 * s);\n  var sine8S = Math.sin(8.0 * s);\n\n  var s2 = s * s;\n  var s3 = s * s2;\n\n  var u8Over256 = constants.u8Over256;\n  var u2Over4 = constants.u2Over4;\n  var u6Over64 = constants.u6Over64;\n  var u4Over16 = constants.u4Over16;\n  var sigma =\n    (2.0 * s3 * u8Over256 * cosine2S) / 3.0 +\n    s *\n      (1.0 -\n        u2Over4 +\n        (7.0 * u4Over16) / 4.0 -\n        (15.0 * u6Over64) / 4.0 +\n        (579.0 * u8Over256) / 64.0 -\n        (u4Over16 - (15.0 * u6Over64) / 4.0 + (187.0 * u8Over256) / 16.0) *\n          cosine2S -\n        ((5.0 * u6Over64) / 4.0 - (115.0 * u8Over256) / 16.0) * cosine4S -\n        (29.0 * u8Over256 * cosine6S) / 16.0) +\n    (u2Over4 / 2.0 -\n      u4Over16 +\n      (71.0 * u6Over64) / 32.0 -\n      (85.0 * u8Over256) / 16.0) *\n      sine2S +\n    ((5.0 * u4Over16) / 16.0 -\n      (5.0 * u6Over64) / 4.0 +\n      (383.0 * u8Over256) / 96.0) *\n      sine4S -\n    s2 *\n      ((u6Over64 - (11.0 * u8Over256) / 2.0) * sine2S +\n        (5.0 * u8Over256 * sine4S) / 2.0) +\n    ((29.0 * u6Over64) / 96.0 - (29.0 * u8Over256) / 16.0) * sine6S +\n    (539.0 * u8Over256 * sine8S) / 1536.0;\n\n  var theta = Math.asin(Math.sin(sigma) * constants.cosineAlpha);\n  var latitude = Math.atan((constants.a / constants.b) * Math.tan(theta));\n\n  // Redefine in terms of relative argument of latitude.\n  sigma = sigma - constants.sigma;\n\n  var cosineTwiceSigmaMidpoint = Math.cos(2.0 * constants.sigma + sigma);\n\n  var sineSigma = Math.sin(sigma);\n  var cosineSigma = Math.cos(sigma);\n\n  var cc = constants.cosineU * cosineSigma;\n  var ss = constants.sineU * sineSigma;\n\n  var lambda = Math.atan2(\n    sineSigma * constants.sineHeading,\n    cc - ss * constants.cosineHeading\n  );\n\n  var l =\n    lambda -\n    computeDeltaLambda(\n      constants.f,\n      constants.sineAlpha,\n      constants.cosineSquaredAlpha,\n      sigma,\n      sineSigma,\n      cosineSigma,\n      cosineTwiceSigmaMidpoint\n    );\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(result)) {\n    result.longitude = this._start.longitude + l;\n    result.latitude = latitude;\n    result.height = 0.0;\n    return result;\n  }\n\n  return new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(this._start.longitude + l, latitude, 0.0);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidGeodesic);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39043\n')},64727:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _arrayFill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23401);\n/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(84828);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50491);\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82408);\n/* harmony import */ var _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(13616);\n/* harmony import */ var _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(56652);\n/* harmony import */ var _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(87379);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(22832);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(99417);\n/* harmony import */ var _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(97264);\n/* harmony import */ var _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(67252);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar scratchPosition = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchNormal = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchTangent = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchBitangent = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchNormalST = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar defaultRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(1.0, 1.0, 1.0);\n\nvar cos = Math.cos;\nvar sin = Math.sin;\n\n/**\n * A description of an ellipsoid centered at the origin.\n *\n * @alias EllipsoidGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see EllipsoidGeometry#createGeometry\n *\n * @example\n * var ellipsoid = new Cesium.EllipsoidGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\n * });\n * var geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\n */\nfunction EllipsoidGeometry(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var radii = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.radii, defaultRadii);\n  var innerRadii = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.innerRadii, radii);\n  var minimumClock = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.minimumClock, 0.0);\n  var maximumClock = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.maximumClock, _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI);\n  var minimumCone = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.minimumCone, 0.0);\n  var maximumCone = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.maximumCone, _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].PI */ .Z.PI);\n  var stackPartitions = Math.round((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.stackPartitions, 64));\n  var slicePartitions = Math.round((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.slicePartitions, 64));\n  var vertexFormat = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.vertexFormat, _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].DEFAULT */ .Z.DEFAULT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (slicePartitions < 3) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "options.slicePartitions cannot be less than three."\n    );\n  }\n  if (stackPartitions < 3) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "options.stackPartitions cannot be less than three."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  this._radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(radii);\n  this._innerRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(innerRadii);\n  this._minimumClock = minimumClock;\n  this._maximumClock = maximumClock;\n  this._minimumCone = minimumCone;\n  this._maximumCone = maximumCone;\n  this._stackPartitions = stackPartitions;\n  this._slicePartitions = slicePartitions;\n  this._vertexFormat = _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].clone */ .Z.clone(vertexFormat);\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = "createEllipsoidGeometry";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipsoidGeometry.packedLength =\n  2 * _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength + _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].packedLength */ .Z.packedLength + 7;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipsoidGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipsoidGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(value)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("value is required");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(startingIndex, 0);\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].pack */ .Z.pack(value._radii, array, startingIndex);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength;\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].pack */ .Z.pack(value._innerRadii, array, startingIndex);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength;\n\n  _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].pack */ .Z.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].packedLength */ .Z.packedLength;\n\n  array[startingIndex++] = value._minimumClock;\n  array[startingIndex++] = value._maximumClock;\n  array[startingIndex++] = value._minimumCone;\n  array[startingIndex++] = value._maximumCone;\n  array[startingIndex++] = value._stackPartitions;\n  array[startingIndex++] = value._slicePartitions;\n  array[startingIndex] = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchInnerRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchVertexFormat = new _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\nvar scratchOptions = {\n  radii: scratchRadii,\n  innerRadii: scratchInnerRadii,\n  vertexFormat: scratchVertexFormat,\n  minimumClock: undefined,\n  maximumClock: undefined,\n  minimumCone: undefined,\n  maximumCone: undefined,\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipsoidGeometry} [result] The object into which to store the result.\n * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\n */\nEllipsoidGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(startingIndex, 0);\n\n  var radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchRadii);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength;\n\n  var innerRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchInnerRadii);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packedLength */ .Z.packedLength;\n\n  var vertexFormat = _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].unpack */ .Z.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].packedLength */ .Z.packedLength;\n\n  var minimumClock = array[startingIndex++];\n  var maximumClock = array[startingIndex++];\n  var minimumCone = array[startingIndex++];\n  var maximumCone = array[startingIndex++];\n  var stackPartitions = array[startingIndex++];\n  var slicePartitions = array[startingIndex++];\n  var offsetAttribute = array[startingIndex];\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(result)) {\n    scratchOptions.minimumClock = minimumClock;\n    scratchOptions.maximumClock = maximumClock;\n    scratchOptions.minimumCone = minimumCone;\n    scratchOptions.maximumCone = maximumCone;\n    scratchOptions.stackPartitions = stackPartitions;\n    scratchOptions.slicePartitions = slicePartitions;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new EllipsoidGeometry(scratchOptions);\n  }\n\n  result._radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(radii, result._radii);\n  result._innerRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(innerRadii, result._innerRadii);\n  result._vertexFormat = _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].clone */ .Z.clone(vertexFormat, result._vertexFormat);\n  result._minimumClock = minimumClock;\n  result._maximumClock = maximumClock;\n  result._minimumCone = minimumCone;\n  result._maximumCone = maximumCone;\n  result._stackPartitions = stackPartitions;\n  result._slicePartitions = slicePartitions;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipsoidGeometry.createGeometry = function (ellipsoidGeometry) {\n  var radii = ellipsoidGeometry._radii;\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\n    return;\n  }\n\n  var innerRadii = ellipsoidGeometry._innerRadii;\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\n    return;\n  }\n\n  var minimumClock = ellipsoidGeometry._minimumClock;\n  var maximumClock = ellipsoidGeometry._maximumClock;\n  var minimumCone = ellipsoidGeometry._minimumCone;\n  var maximumCone = ellipsoidGeometry._maximumCone;\n  var vertexFormat = ellipsoidGeometry._vertexFormat;\n\n  // Add an extra slice and stack so that the number of partitions is the\n  // number of surfaces rather than the number of joints\n  var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n  var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n  slicePartitions = Math.round(\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\n      _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI\n  );\n  stackPartitions = Math.round(\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].PI */ .Z.PI\n  );\n\n  if (slicePartitions < 2) {\n    slicePartitions = 2;\n  }\n  if (stackPartitions < 2) {\n    stackPartitions = 2;\n  }\n\n  var i;\n  var j;\n  var index = 0;\n\n  // Create arrays for theta and phi. Duplicate first and last angle to\n  // allow different normals at the intersections.\n  var phis = [minimumCone];\n  var thetas = [minimumClock];\n  for (i = 0; i < stackPartitions; i++) {\n    phis.push(\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1)\n    );\n  }\n  phis.push(maximumCone);\n  for (j = 0; j < slicePartitions; j++) {\n    thetas.push(\n      minimumClock + (j * (maximumClock - minimumClock)) / (slicePartitions - 1)\n    );\n  }\n  thetas.push(maximumClock);\n  var numPhis = phis.length;\n  var numThetas = thetas.length;\n\n  // Allow for extra indices if there is an inner surface and if we need\n  // to close the sides if the clock range is not a full circle\n  var extraIndices = 0;\n  var vertexMultiplier = 1.0;\n  var hasInnerSurface =\n    innerRadii.x !== radii.x ||\n    innerRadii.y !== radii.y ||\n    innerRadii.z !== radii.z;\n  var isTopOpen = false;\n  var isBotOpen = false;\n  var isClockOpen = false;\n  if (hasInnerSurface) {\n    vertexMultiplier = 2.0;\n    if (minimumCone > 0.0) {\n      isTopOpen = true;\n      extraIndices += slicePartitions - 1;\n    }\n    if (maximumCone < Math.PI) {\n      isBotOpen = true;\n      extraIndices += slicePartitions - 1;\n    }\n    if ((maximumClock - minimumClock) % _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI) {\n      isClockOpen = true;\n      extraIndices += (stackPartitions - 1) * 2 + 1;\n    } else {\n      extraIndices += 1;\n    }\n  }\n\n  var vertexCount = numThetas * numPhis * vertexMultiplier;\n  var positions = new Float64Array(vertexCount * 3);\n  var isInner = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(new Array(vertexCount), false);\n  var negateNormal = (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(new Array(vertexCount), false);\n\n  // Multiply by 6 because there are two triangles per sector\n  var indexCount = slicePartitions * stackPartitions * vertexMultiplier;\n  var numIndices =\n    6 *\n    (indexCount +\n      extraIndices +\n      1 -\n      (slicePartitions + stackPartitions) * vertexMultiplier);\n  var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArray */ .Z.createTypedArray(indexCount, numIndices);\n\n  var normals = vertexFormat.normal\n    ? new Float32Array(vertexCount * 3)\n    : undefined;\n  var tangents = vertexFormat.tangent\n    ? new Float32Array(vertexCount * 3)\n    : undefined;\n  var bitangents = vertexFormat.bitangent\n    ? new Float32Array(vertexCount * 3)\n    : undefined;\n  var st = vertexFormat.st ? new Float32Array(vertexCount * 2) : undefined;\n\n  // Calculate sin/cos phi\n  var sinPhi = new Array(numPhis);\n  var cosPhi = new Array(numPhis);\n  for (i = 0; i < numPhis; i++) {\n    sinPhi[i] = sin(phis[i]);\n    cosPhi[i] = cos(phis[i]);\n  }\n\n  // Calculate sin/cos theta\n  var sinTheta = new Array(numThetas);\n  var cosTheta = new Array(numThetas);\n  for (j = 0; j < numThetas; j++) {\n    cosTheta[j] = cos(thetas[j]);\n    sinTheta[j] = sin(thetas[j]);\n  }\n\n  // Create outer surface\n  for (i = 0; i < numPhis; i++) {\n    for (j = 0; j < numThetas; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Create inner surface\n  var vertexIndex = vertexCount / 2.0;\n  if (hasInnerSurface) {\n    for (i = 0; i < numPhis; i++) {\n      for (j = 0; j < numThetas; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n\n        // Keep track of which vertices are the inner and which ones\n        // need the normal to be negated\n        isInner[vertexIndex] = true;\n        if (i > 0 && i !== numPhis - 1 && j !== 0 && j !== numThetas - 1) {\n          negateNormal[vertexIndex] = true;\n        }\n        vertexIndex++;\n      }\n    }\n  }\n\n  // Create indices for outer surface\n  index = 0;\n  var topOffset;\n  var bottomOffset;\n  for (i = 1; i < numPhis - 2; i++) {\n    topOffset = i * numThetas;\n    bottomOffset = (i + 1) * numThetas;\n\n    for (j = 1; j < numThetas - 2; j++) {\n      indices[index++] = bottomOffset + j;\n      indices[index++] = bottomOffset + j + 1;\n      indices[index++] = topOffset + j + 1;\n\n      indices[index++] = bottomOffset + j;\n      indices[index++] = topOffset + j + 1;\n      indices[index++] = topOffset + j;\n    }\n  }\n\n  // Create indices for inner surface\n  if (hasInnerSurface) {\n    var offset = numPhis * numThetas;\n    for (i = 1; i < numPhis - 2; i++) {\n      topOffset = offset + i * numThetas;\n      bottomOffset = offset + (i + 1) * numThetas;\n\n      for (j = 1; j < numThetas - 2; j++) {\n        indices[index++] = bottomOffset + j;\n        indices[index++] = topOffset + j;\n        indices[index++] = topOffset + j + 1;\n\n        indices[index++] = bottomOffset + j;\n        indices[index++] = topOffset + j + 1;\n        indices[index++] = bottomOffset + j + 1;\n      }\n    }\n  }\n\n  var outerOffset;\n  var innerOffset;\n  if (hasInnerSurface) {\n    if (isTopOpen) {\n      // Connect the top of the inner surface to the top of the outer surface\n      innerOffset = numPhis * numThetas;\n      for (i = 1; i < numThetas - 2; i++) {\n        indices[index++] = i;\n        indices[index++] = i + 1;\n        indices[index++] = innerOffset + i + 1;\n\n        indices[index++] = i;\n        indices[index++] = innerOffset + i + 1;\n        indices[index++] = innerOffset + i;\n      }\n    }\n\n    if (isBotOpen) {\n      // Connect the bottom of the inner surface to the bottom of the outer surface\n      outerOffset = numPhis * numThetas - numThetas;\n      innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;\n      for (i = 1; i < numThetas - 2; i++) {\n        indices[index++] = outerOffset + i + 1;\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n\n        indices[index++] = outerOffset + i + 1;\n        indices[index++] = innerOffset + i;\n        indices[index++] = innerOffset + i + 1;\n      }\n    }\n  }\n\n  // Connect the edges if clock is not closed\n  if (isClockOpen) {\n    for (i = 1; i < numPhis - 2; i++) {\n      innerOffset = numThetas * numPhis + numThetas * i;\n      outerOffset = numThetas * i;\n      indices[index++] = innerOffset;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = outerOffset;\n\n      indices[index++] = innerOffset;\n      indices[index++] = innerOffset + numThetas;\n      indices[index++] = outerOffset + numThetas;\n    }\n\n    for (i = 1; i < numPhis - 2; i++) {\n      innerOffset = numThetas * numPhis + numThetas * (i + 1) - 1;\n      outerOffset = numThetas * (i + 1) - 1;\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = innerOffset;\n      indices[index++] = outerOffset;\n\n      indices[index++] = outerOffset + numThetas;\n      indices[index++] = innerOffset + numThetas;\n      indices[index++] = innerOffset;\n    }\n  }\n\n  var attributes = new _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\n  if (vertexFormat.position) {\n    attributes.position = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n  }\n\n  var stIndex = 0;\n  var normalIndex = 0;\n  var tangentIndex = 0;\n  var bitangentIndex = 0;\n  var vertexCountHalf = vertexCount / 2.0;\n\n  var ellipsoid;\n  var ellipsoidOuter = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(radii);\n  var ellipsoidInner = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(innerRadii);\n\n  if (\n    vertexFormat.st ||\n    vertexFormat.normal ||\n    vertexFormat.tangent ||\n    vertexFormat.bitangent\n  ) {\n    for (i = 0; i < vertexCount; i++) {\n      ellipsoid = isInner[i] ? ellipsoidInner : ellipsoidOuter;\n      var position = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(positions, i * 3, scratchPosition);\n      var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n      if (negateNormal[i]) {\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].negate */ .Z.negate(normal, normal);\n      }\n\n      if (vertexFormat.st) {\n        var normalST = _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].negate */ .Z.negate(normal, scratchNormalST);\n        st[stIndex++] =\n          Math.atan2(normalST.y, normalST.x) / _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI + 0.5;\n        st[stIndex++] = Math.asin(normal.z) / Math.PI + 0.5;\n      }\n\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        var tangent = scratchTangent;\n\n        // Use UNIT_X for the poles\n        var tangetOffset = 0;\n        var unit;\n        if (isInner[i]) {\n          tangetOffset = vertexCountHalf;\n        }\n        if (\n          !isTopOpen &&\n          i >= tangetOffset &&\n          i < tangetOffset + numThetas * 2\n        ) {\n          unit = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_X */ .Z.UNIT_X;\n        } else {\n          unit = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_Z */ .Z.UNIT_Z;\n        }\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].cross */ .Z.cross(unit, normal, tangent);\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].normalize */ .Z.normalize(tangent, tangent);\n\n        if (vertexFormat.tangent) {\n          tangents[tangentIndex++] = tangent.x;\n          tangents[tangentIndex++] = tangent.y;\n          tangents[tangentIndex++] = tangent.z;\n        }\n\n        if (vertexFormat.bitangent) {\n          var bitangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].cross */ .Z.cross(normal, tangent, scratchBitangent);\n          _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].normalize */ .Z.normalize(bitangent, bitangent);\n\n          bitangents[bitangentIndex++] = bitangent.x;\n          bitangents[bitangentIndex++] = bitangent.y;\n          bitangents[bitangentIndex++] = bitangent.z;\n        }\n      }\n    }\n\n    if (vertexFormat.st) {\n      attributes.st = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].FLOAT */ .Z.FLOAT,\n        componentsPerAttribute: 2,\n        values: st,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      attributes.normal = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].FLOAT */ .Z.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      attributes.tangent = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].FLOAT */ .Z.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      attributes.bitangent = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].FLOAT */ .Z.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n  }\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(ellipsoidGeometry._offsetAttribute)) {\n    var length = positions.length;\n    var applyOffset = new Uint8Array(length / 3);\n    var offsetValue =\n      ellipsoidGeometry._offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].NONE */ .Z.NONE\n        ? 0\n        : 1;\n    (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(applyOffset, offsetValue);\n    attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new _Geometry_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n    boundingSphere: _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromEllipsoid */ .Z.fromEllipsoid(ellipsoidOuter),\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\n  });\n};\n\nvar unitEllipsoidGeometry;\n\n/**\n * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nEllipsoidGeometry.getUnitEllipsoid = function () {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(unitEllipsoidGeometry)) {\n    unitEllipsoidGeometry = EllipsoidGeometry.createGeometry(\n      new EllipsoidGeometry({\n        radii: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(1.0, 1.0, 1.0),\n        vertexFormat: _VertexFormat_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].POSITION_ONLY */ .Z.POSITION_ONLY,\n      })\n    );\n  }\n  return unitEllipsoidGeometry;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidGeometry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64727\n')},75619:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _arrayFill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23401);\n/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84828);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(50491);\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82408);\n/* harmony import */ var _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(13616);\n/* harmony import */ var _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(56652);\n/* harmony import */ var _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(87379);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22832);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(99417);\n/* harmony import */ var _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(97264);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0);\nvar cos = Math.cos;\nvar sin = Math.sin;\n\n/**\n * A description of the outline of an ellipsoid centered at the origin.\n *\n * @alias EllipsoidOutlineGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\n * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\n * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\n *\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n *\n * @example\n * var ellipsoid = new Cesium.EllipsoidOutlineGeometry({\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\n *   stackPartitions: 6,\n *   slicePartitions: 5\n * });\n * var geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\n */\nfunction EllipsoidOutlineGeometry(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var radii = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.radii, defaultRadii);\n  var innerRadii = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.innerRadii, radii);\n  var minimumClock = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.minimumClock, 0.0);\n  var maximumClock = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.maximumClock, _Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].TWO_PI */ .Z.TWO_PI);\n  var minimumCone = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.minimumCone, 0.0);\n  var maximumCone = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.maximumCone, _Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].PI */ .Z.PI);\n  var stackPartitions = Math.round((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.stackPartitions, 10));\n  var slicePartitions = Math.round((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.slicePartitions, 8));\n  var subdivisions = Math.round((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.subdivisions, 128));\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (stackPartitions < 1) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("options.stackPartitions cannot be less than 1");\n  }\n  if (slicePartitions < 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("options.slicePartitions cannot be less than 0");\n  }\n  if (subdivisions < 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n      "options.subdivisions must be greater than or equal to zero."\n    );\n  }\n  if (\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(options.offsetAttribute) &&\n    options.offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].TOP */ .Z.TOP\n  ) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n      "GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  this._radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(radii);\n  this._innerRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(innerRadii);\n  this._minimumClock = minimumClock;\n  this._maximumClock = maximumClock;\n  this._minimumCone = minimumCone;\n  this._maximumCone = maximumCone;\n  this._stackPartitions = stackPartitions;\n  this._slicePartitions = slicePartitions;\n  this._subdivisions = subdivisions;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = "createEllipsoidOutlineGeometry";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipsoidOutlineGeometry.packedLength = 2 * _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength + 8;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipsoidOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipsoidOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(value)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("value is required");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(startingIndex, 0);\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(value._radii, array, startingIndex);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength;\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(value._innerRadii, array, startingIndex);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength;\n\n  array[startingIndex++] = value._minimumClock;\n  array[startingIndex++] = value._maximumClock;\n  array[startingIndex++] = value._minimumCone;\n  array[startingIndex++] = value._maximumCone;\n  array[startingIndex++] = value._stackPartitions;\n  array[startingIndex++] = value._slicePartitions;\n  array[startingIndex++] = value._subdivisions;\n  array[startingIndex] = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchInnerRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchOptions = {\n  radii: scratchRadii,\n  innerRadii: scratchInnerRadii,\n  minimumClock: undefined,\n  maximumClock: undefined,\n  minimumCone: undefined,\n  maximumCone: undefined,\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  subdivisions: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\n * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\n */\nEllipsoidOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(startingIndex, 0);\n\n  var radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchRadii);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength;\n\n  var innerRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, startingIndex, scratchInnerRadii);\n  startingIndex += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packedLength */ .Z.packedLength;\n\n  var minimumClock = array[startingIndex++];\n  var maximumClock = array[startingIndex++];\n  var minimumCone = array[startingIndex++];\n  var maximumCone = array[startingIndex++];\n  var stackPartitions = array[startingIndex++];\n  var slicePartitions = array[startingIndex++];\n  var subdivisions = array[startingIndex++];\n  var offsetAttribute = array[startingIndex];\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(result)) {\n    scratchOptions.minimumClock = minimumClock;\n    scratchOptions.maximumClock = maximumClock;\n    scratchOptions.minimumCone = minimumCone;\n    scratchOptions.maximumCone = maximumCone;\n    scratchOptions.stackPartitions = stackPartitions;\n    scratchOptions.slicePartitions = slicePartitions;\n    scratchOptions.subdivisions = subdivisions;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new EllipsoidOutlineGeometry(scratchOptions);\n  }\n\n  result._radii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(radii, result._radii);\n  result._innerRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(innerRadii, result._innerRadii);\n  result._minimumClock = minimumClock;\n  result._maximumClock = maximumClock;\n  result._minimumCone = minimumCone;\n  result._maximumCone = maximumCone;\n  result._stackPartitions = stackPartitions;\n  result._slicePartitions = slicePartitions;\n  result._subdivisions = subdivisions;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipsoidOutlineGeometry.createGeometry = function (ellipsoidGeometry) {\n  var radii = ellipsoidGeometry._radii;\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\n    return;\n  }\n\n  var innerRadii = ellipsoidGeometry._innerRadii;\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\n    return;\n  }\n\n  var minimumClock = ellipsoidGeometry._minimumClock;\n  var maximumClock = ellipsoidGeometry._maximumClock;\n  var minimumCone = ellipsoidGeometry._minimumCone;\n  var maximumCone = ellipsoidGeometry._maximumCone;\n  var subdivisions = ellipsoidGeometry._subdivisions;\n  var ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(radii);\n\n  // Add an extra slice and stack to remain consistent with EllipsoidGeometry\n  var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n  var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n  slicePartitions = Math.round(\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\n      _Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].TWO_PI */ .Z.TWO_PI\n  );\n  stackPartitions = Math.round(\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / _Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].PI */ .Z.PI\n  );\n\n  if (slicePartitions < 2) {\n    slicePartitions = 2;\n  }\n  if (stackPartitions < 2) {\n    stackPartitions = 2;\n  }\n\n  var extraIndices = 0;\n  var vertexMultiplier = 1.0;\n  var hasInnerSurface =\n    innerRadii.x !== radii.x ||\n    innerRadii.y !== radii.y ||\n    innerRadii.z !== radii.z;\n  var isTopOpen = false;\n  var isBotOpen = false;\n  if (hasInnerSurface) {\n    vertexMultiplier = 2.0;\n    // Add 2x slicePartitions to connect the top/bottom of the outer to\n    // the top/bottom of the inner\n    if (minimumCone > 0.0) {\n      isTopOpen = true;\n      extraIndices += slicePartitions;\n    }\n    if (maximumCone < Math.PI) {\n      isBotOpen = true;\n      extraIndices += slicePartitions;\n    }\n  }\n\n  var vertexCount =\n    subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);\n  var positions = new Float64Array(vertexCount * 3);\n\n  // Multiply by two because two points define each line segment\n  var numIndices =\n    2 *\n    (vertexCount +\n      extraIndices -\n      (slicePartitions + stackPartitions) * vertexMultiplier);\n  var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createTypedArray */ .Z.createTypedArray(vertexCount, numIndices);\n\n  var i;\n  var j;\n  var theta;\n  var phi;\n  var index = 0;\n\n  // Calculate sin/cos phi\n  var sinPhi = new Array(stackPartitions);\n  var cosPhi = new Array(stackPartitions);\n  for (i = 0; i < stackPartitions; i++) {\n    phi =\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1);\n    sinPhi[i] = sin(phi);\n    cosPhi[i] = cos(phi);\n  }\n\n  // Calculate sin/cos theta\n  var sinTheta = new Array(subdivisions);\n  var cosTheta = new Array(subdivisions);\n  for (i = 0; i < subdivisions; i++) {\n    theta =\n      minimumClock + (i * (maximumClock - minimumClock)) / (subdivisions - 1);\n    sinTheta[i] = sin(theta);\n    cosTheta[i] = cos(theta);\n  }\n\n  // Calculate the latitude lines on the outer surface\n  for (i = 0; i < stackPartitions; i++) {\n    for (j = 0; j < subdivisions; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Calculate the latitude lines on the inner surface\n  if (hasInnerSurface) {\n    for (i = 0; i < stackPartitions; i++) {\n      for (j = 0; j < subdivisions; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n      }\n    }\n  }\n\n  // Calculate sin/cos phi\n  sinPhi.length = subdivisions;\n  cosPhi.length = subdivisions;\n  for (i = 0; i < subdivisions; i++) {\n    phi = minimumCone + (i * (maximumCone - minimumCone)) / (subdivisions - 1);\n    sinPhi[i] = sin(phi);\n    cosPhi[i] = cos(phi);\n  }\n\n  // Calculate sin/cos theta for each slice partition\n  sinTheta.length = slicePartitions;\n  cosTheta.length = slicePartitions;\n  for (i = 0; i < slicePartitions; i++) {\n    theta =\n      minimumClock +\n      (i * (maximumClock - minimumClock)) / (slicePartitions - 1);\n    sinTheta[i] = sin(theta);\n    cosTheta[i] = cos(theta);\n  }\n\n  // Calculate the longitude lines on the outer surface\n  for (i = 0; i < subdivisions; i++) {\n    for (j = 0; j < slicePartitions; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Calculate the longitude lines on the inner surface\n  if (hasInnerSurface) {\n    for (i = 0; i < subdivisions; i++) {\n      for (j = 0; j < slicePartitions; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n      }\n    }\n  }\n\n  // Create indices for the latitude lines\n  index = 0;\n  for (i = 0; i < stackPartitions * vertexMultiplier; i++) {\n    var topOffset = i * subdivisions;\n    for (j = 0; j < subdivisions - 1; j++) {\n      indices[index++] = topOffset + j;\n      indices[index++] = topOffset + j + 1;\n    }\n  }\n\n  // Create indices for the outer longitude lines\n  var offset = stackPartitions * subdivisions * vertexMultiplier;\n  for (i = 0; i < slicePartitions; i++) {\n    for (j = 0; j < subdivisions - 1; j++) {\n      indices[index++] = offset + i + j * slicePartitions;\n      indices[index++] = offset + i + (j + 1) * slicePartitions;\n    }\n  }\n\n  // Create indices for the inner longitude lines\n  if (hasInnerSurface) {\n    offset =\n      stackPartitions * subdivisions * vertexMultiplier +\n      slicePartitions * subdivisions;\n    for (i = 0; i < slicePartitions; i++) {\n      for (j = 0; j < subdivisions - 1; j++) {\n        indices[index++] = offset + i + j * slicePartitions;\n        indices[index++] = offset + i + (j + 1) * slicePartitions;\n      }\n    }\n  }\n\n  if (hasInnerSurface) {\n    var outerOffset = stackPartitions * subdivisions * vertexMultiplier;\n    var innerOffset = outerOffset + subdivisions * slicePartitions;\n    if (isTopOpen) {\n      // Draw lines from the top of the inner surface to the top of the outer surface\n      for (i = 0; i < slicePartitions; i++) {\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n      }\n    }\n\n    if (isBotOpen) {\n      // Draw lines from the top of the inner surface to the top of the outer surface\n      outerOffset += subdivisions * slicePartitions - slicePartitions;\n      innerOffset += subdivisions * slicePartitions - slicePartitions;\n      for (i = 0; i < slicePartitions; i++) {\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n      }\n    }\n  }\n\n  var attributes = new _GeometryAttributes_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n    position: new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    }),\n  });\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(ellipsoidGeometry._offsetAttribute)) {\n    var length = positions.length;\n    var applyOffset = new Uint8Array(length / 3);\n    var offsetValue =\n      ellipsoidGeometry._offsetAttribute === _GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NONE */ .Z.NONE\n        ? 0\n        : 1;\n    (0,_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(applyOffset, offsetValue);\n    attributes.applyOffset = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new _Geometry_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: _PrimitiveType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].LINES */ .Z.LINES,\n    boundingSphere: _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromEllipsoid */ .Z.fromEllipsoid(ellipsoid),\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\n  });\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidOutlineGeometry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75619\n')},8398:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50491);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(99417);\n\n\n\n\n\n\n\n\n\nfunction calculateM(ellipticity, major, latitude) {\n  if (ellipticity === 0.0) {\n    // sphere\n    return major * latitude;\n  }\n\n  var e2 = ellipticity * ellipticity;\n  var e4 = e2 * e2;\n  var e6 = e4 * e2;\n  var e8 = e6 * e2;\n  var e10 = e8 * e2;\n  var e12 = e10 * e2;\n  var phi = latitude;\n  var sin2Phi = Math.sin(2 * phi);\n  var sin4Phi = Math.sin(4 * phi);\n  var sin6Phi = Math.sin(6 * phi);\n  var sin8Phi = Math.sin(8 * phi);\n  var sin10Phi = Math.sin(10 * phi);\n  var sin12Phi = Math.sin(12 * phi);\n\n  return (\n    major *\n    ((1 -\n      e2 / 4 -\n      (3 * e4) / 64 -\n      (5 * e6) / 256 -\n      (175 * e8) / 16384 -\n      (441 * e10) / 65536 -\n      (4851 * e12) / 1048576) *\n      phi -\n      ((3 * e2) / 8 +\n        (3 * e4) / 32 +\n        (45 * e6) / 1024 +\n        (105 * e8) / 4096 +\n        (2205 * e10) / 131072 +\n        (6237 * e12) / 524288) *\n        sin2Phi +\n      ((15 * e4) / 256 +\n        (45 * e6) / 1024 +\n        (525 * e8) / 16384 +\n        (1575 * e10) / 65536 +\n        (155925 * e12) / 8388608) *\n        sin4Phi -\n      ((35 * e6) / 3072 +\n        (175 * e8) / 12288 +\n        (3675 * e10) / 262144 +\n        (13475 * e12) / 1048576) *\n        sin6Phi +\n      ((315 * e8) / 131072 + (2205 * e10) / 524288 + (43659 * e12) / 8388608) *\n        sin8Phi -\n      ((693 * e10) / 1310720 + (6237 * e12) / 5242880) * sin10Phi +\n      ((1001 * e12) / 8388608) * sin12Phi)\n  );\n}\n\nfunction calculateInverseM(M, ellipticity, major) {\n  var d = M / major;\n\n  if (ellipticity === 0.0) {\n    // sphere\n    return d;\n  }\n\n  var d2 = d * d;\n  var d3 = d2 * d;\n  var d4 = d3 * d;\n  var e = ellipticity;\n  var e2 = e * e;\n  var e4 = e2 * e2;\n  var e6 = e4 * e2;\n  var e8 = e6 * e2;\n  var e10 = e8 * e2;\n  var e12 = e10 * e2;\n  var sin2D = Math.sin(2 * d);\n  var cos2D = Math.cos(2 * d);\n  var sin4D = Math.sin(4 * d);\n  var cos4D = Math.cos(4 * d);\n  var sin6D = Math.sin(6 * d);\n  var cos6D = Math.cos(6 * d);\n  var sin8D = Math.sin(8 * d);\n  var cos8D = Math.cos(8 * d);\n  var sin10D = Math.sin(10 * d);\n  var cos10D = Math.cos(10 * d);\n  var sin12D = Math.sin(12 * d);\n\n  return (\n    d +\n    (d * e2) / 4 +\n    (7 * d * e4) / 64 +\n    (15 * d * e6) / 256 +\n    (579 * d * e8) / 16384 +\n    (1515 * d * e10) / 65536 +\n    (16837 * d * e12) / 1048576 +\n    ((3 * d * e4) / 16 +\n      (45 * d * e6) / 256 -\n      (d * (32 * d2 - 561) * e8) / 4096 -\n      (d * (232 * d2 - 1677) * e10) / 16384 +\n      (d * (399985 - 90560 * d2 + 512 * d4) * e12) / 5242880) *\n      cos2D +\n    ((21 * d * e6) / 256 +\n      (483 * d * e8) / 4096 -\n      (d * (224 * d2 - 1969) * e10) / 16384 -\n      (d * (33152 * d2 - 112599) * e12) / 1048576) *\n      cos4D +\n    ((151 * d * e8) / 4096 +\n      (4681 * d * e10) / 65536 +\n      (1479 * d * e12) / 16384 -\n      (453 * d3 * e12) / 32768) *\n      cos6D +\n    ((1097 * d * e10) / 65536 + (42783 * d * e12) / 1048576) * cos8D +\n    ((8011 * d * e12) / 1048576) * cos10D +\n    ((3 * e2) / 8 +\n      (3 * e4) / 16 +\n      (213 * e6) / 2048 -\n      (3 * d2 * e6) / 64 +\n      (255 * e8) / 4096 -\n      (33 * d2 * e8) / 512 +\n      (20861 * e10) / 524288 -\n      (33 * d2 * e10) / 512 +\n      (d4 * e10) / 1024 +\n      (28273 * e12) / 1048576 -\n      (471 * d2 * e12) / 8192 +\n      (9 * d4 * e12) / 4096) *\n      sin2D +\n    ((21 * e4) / 256 +\n      (21 * e6) / 256 +\n      (533 * e8) / 8192 -\n      (21 * d2 * e8) / 512 +\n      (197 * e10) / 4096 -\n      (315 * d2 * e10) / 4096 +\n      (584039 * e12) / 16777216 -\n      (12517 * d2 * e12) / 131072 +\n      (7 * d4 * e12) / 2048) *\n      sin4D +\n    ((151 * e6) / 6144 +\n      (151 * e8) / 4096 +\n      (5019 * e10) / 131072 -\n      (453 * d2 * e10) / 16384 +\n      (26965 * e12) / 786432 -\n      (8607 * d2 * e12) / 131072) *\n      sin6D +\n    ((1097 * e8) / 131072 +\n      (1097 * e10) / 65536 +\n      (225797 * e12) / 10485760 -\n      (1097 * d2 * e12) / 65536) *\n      sin8D +\n    ((8011 * e10) / 2621440 + (8011 * e12) / 1048576) * sin10D +\n    ((293393 * e12) / 251658240) * sin12D\n  );\n}\n\nfunction calculateSigma(ellipticity, latitude) {\n  if (ellipticity === 0.0) {\n    // sphere\n    return Math.log(Math.tan(0.5 * (_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO + latitude)));\n  }\n\n  var eSinL = ellipticity * Math.sin(latitude);\n  return (\n    Math.log(Math.tan(0.5 * (_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO + latitude))) -\n    (ellipticity / 2.0) * Math.log((1 + eSinL) / (1 - eSinL))\n  );\n}\n\nfunction calculateHeading(\n  ellipsoidRhumbLine,\n  firstLongitude,\n  firstLatitude,\n  secondLongitude,\n  secondLatitude\n) {\n  var sigma1 = calculateSigma(ellipsoidRhumbLine._ellipticity, firstLatitude);\n  var sigma2 = calculateSigma(ellipsoidRhumbLine._ellipticity, secondLatitude);\n  return Math.atan2(\n    _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(secondLongitude - firstLongitude),\n    sigma2 - sigma1\n  );\n}\n\nfunction calculateArcLength(\n  ellipsoidRhumbLine,\n  major,\n  minor,\n  firstLongitude,\n  firstLatitude,\n  secondLongitude,\n  secondLatitude\n) {\n  var heading = ellipsoidRhumbLine._heading;\n  var deltaLongitude = secondLongitude - firstLongitude;\n\n  var distance = 0.0;\n\n  //Check to see if the rhumb line has constant latitude\n  //This equation will diverge if heading gets close to 90 degrees\n  if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      Math.abs(heading),\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO,\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON8 */ .Z.EPSILON8\n    )\n  ) {\n    //If heading is close to 90 degrees\n    if (major === minor) {\n      distance =\n        major *\n        Math.cos(firstLatitude) *\n        _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(deltaLongitude);\n    } else {\n      var sinPhi = Math.sin(firstLatitude);\n      distance =\n        (major *\n          Math.cos(firstLatitude) *\n          _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(deltaLongitude)) /\n        Math.sqrt(1 - ellipsoidRhumbLine._ellipticitySquared * sinPhi * sinPhi);\n    }\n  } else {\n    var M1 = calculateM(ellipsoidRhumbLine._ellipticity, major, firstLatitude);\n    var M2 = calculateM(ellipsoidRhumbLine._ellipticity, major, secondLatitude);\n\n    distance = (M2 - M1) / Math.cos(heading);\n  }\n  return Math.abs(distance);\n}\n\nvar scratchCart1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchCart2 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction computeProperties(ellipsoidRhumbLine, start, end, ellipsoid) {\n  var firstCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(\n    ellipsoid.cartographicToCartesian(start, scratchCart2),\n    scratchCart1\n  );\n  var lastCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(\n    ellipsoid.cartographicToCartesian(end, scratchCart2),\n    scratchCart2\n  );\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n    "value",\n    Math.abs(\n      Math.abs(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].angleBetween */ .Z.angleBetween(firstCartesian, lastCartesian)) - Math.PI\n    ),\n    0.0125\n  );\n  //>>includeEnd(\'debug\');\n\n  var major = ellipsoid.maximumRadius;\n  var minor = ellipsoid.minimumRadius;\n  var majorSquared = major * major;\n  var minorSquared = minor * minor;\n  ellipsoidRhumbLine._ellipticitySquared =\n    (majorSquared - minorSquared) / majorSquared;\n  ellipsoidRhumbLine._ellipticity = Math.sqrt(\n    ellipsoidRhumbLine._ellipticitySquared\n  );\n\n  ellipsoidRhumbLine._start = _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    start,\n    ellipsoidRhumbLine._start\n  );\n  ellipsoidRhumbLine._start.height = 0;\n\n  ellipsoidRhumbLine._end = _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(end, ellipsoidRhumbLine._end);\n  ellipsoidRhumbLine._end.height = 0;\n\n  ellipsoidRhumbLine._heading = calculateHeading(\n    ellipsoidRhumbLine,\n    start.longitude,\n    start.latitude,\n    end.longitude,\n    end.latitude\n  );\n  ellipsoidRhumbLine._distance = calculateArcLength(\n    ellipsoidRhumbLine,\n    ellipsoid.maximumRadius,\n    ellipsoid.minimumRadius,\n    start.longitude,\n    start.latitude,\n    end.longitude,\n    end.latitude\n  );\n}\n\nfunction interpolateUsingSurfaceDistance(\n  start,\n  heading,\n  distance,\n  major,\n  ellipticity,\n  result\n) {\n  if (distance === 0.0) {\n    return _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(start, result);\n  }\n\n  var ellipticitySquared = ellipticity * ellipticity;\n\n  var longitude;\n  var latitude;\n  var deltaLongitude;\n\n  //Check to see if the rhumb line has constant latitude\n  //This won\'t converge if heading is close to 90 degrees\n  if (\n    Math.abs(_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - Math.abs(heading)) > _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON8 */ .Z.EPSILON8\n  ) {\n    //Calculate latitude of the second point\n    var M1 = calculateM(ellipticity, major, start.latitude);\n    var deltaM = distance * Math.cos(heading);\n    var M2 = M1 + deltaM;\n    latitude = calculateInverseM(M2, ellipticity, major);\n\n    //Now find the longitude of the second point\n    var sigma1 = calculateSigma(ellipticity, start.latitude);\n    var sigma2 = calculateSigma(ellipticity, latitude);\n    deltaLongitude = Math.tan(heading) * (sigma2 - sigma1);\n    longitude = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(start.longitude + deltaLongitude);\n  } else {\n    //If heading is close to 90 degrees\n    latitude = start.latitude;\n    var localRad;\n\n    if (ellipticity === 0.0) {\n      // sphere\n      localRad = major * Math.cos(start.latitude);\n    } else {\n      var sinPhi = Math.sin(start.latitude);\n      localRad =\n        (major * Math.cos(start.latitude)) /\n        Math.sqrt(1 - ellipticitySquared * sinPhi * sinPhi);\n    }\n\n    deltaLongitude = distance / localRad;\n    if (heading > 0.0) {\n      longitude = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(start.longitude + deltaLongitude);\n    } else {\n      longitude = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(start.longitude - deltaLongitude);\n    }\n  }\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result.longitude = longitude;\n    result.latitude = latitude;\n    result.height = 0;\n\n    return result;\n  }\n\n  return new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(longitude, latitude, 0);\n}\n\n/**\n * Initializes a rhumb line on the ellipsoid connecting the two provided planetodetic points.\n *\n * @alias EllipsoidRhumbLine\n * @constructor\n *\n * @param {Cartographic} [start] The initial planetodetic point on the path.\n * @param {Cartographic} [end] The final planetodetic point on the path.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rhumb line lies.\n *\n * @exception {DeveloperError} angle between start and end must be at least 0.0125 radians.\n */\nfunction EllipsoidRhumbLine(start, end, ellipsoid) {\n  var e = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].WGS84 */ .Z.WGS84);\n  this._ellipsoid = e;\n  this._start = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._end = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n  this._heading = undefined;\n  this._distance = undefined;\n  this._ellipticity = undefined;\n  this._ellipticitySquared = undefined;\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(start) && (0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(end)) {\n    computeProperties(this, start, end, e);\n  }\n}\n\nObject.defineProperties(EllipsoidRhumbLine.prototype, {\n  /**\n   * Gets the ellipsoid.\n   * @memberof EllipsoidRhumbLine.prototype\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the surface distance between the start and end point\n   * @memberof EllipsoidRhumbLine.prototype\n   * @type {Number}\n   * @readonly\n   */\n  surfaceDistance: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", this._distance);\n      //>>includeEnd(\'debug\');\n\n      return this._distance;\n    },\n  },\n\n  /**\n   * Gets the initial planetodetic point on the path.\n   * @memberof EllipsoidRhumbLine.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  start: {\n    get: function () {\n      return this._start;\n    },\n  },\n\n  /**\n   * Gets the final planetodetic point on the path.\n   * @memberof EllipsoidRhumbLine.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  end: {\n    get: function () {\n      return this._end;\n    },\n  },\n\n  /**\n   * Gets the heading from the start point to the end point.\n   * @memberof EllipsoidRhumbLine.prototype\n   * @type {Number}\n   * @readonly\n   */\n  heading: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", this._distance);\n      //>>includeEnd(\'debug\');\n\n      return this._heading;\n    },\n  },\n});\n\n/**\n * Create a rhumb line using an initial position with a heading and distance.\n *\n * @param {Cartographic} start The initial planetodetic point on the path.\n * @param {Number} heading The heading in radians.\n * @param {Number} distance The rhumb line distance between the start and end point.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rhumb line lies.\n * @param {EllipsoidRhumbLine} [result] The object in which to store the result.\n * @returns {EllipsoidRhumbLine} The EllipsoidRhumbLine object.\n */\nEllipsoidRhumbLine.fromStartHeadingDistance = function (\n  start,\n  heading,\n  distance,\n  ellipsoid,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("start", start);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("heading", heading);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("distance", distance);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("distance", distance, 0.0);\n  //>>includeEnd(\'debug\');\n\n  var e = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].WGS84 */ .Z.WGS84);\n  var major = e.maximumRadius;\n  var minor = e.minimumRadius;\n  var majorSquared = major * major;\n  var minorSquared = minor * minor;\n  var ellipticity = Math.sqrt((majorSquared - minorSquared) / majorSquared);\n\n  heading = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(heading);\n  var end = interpolateUsingSurfaceDistance(\n    start,\n    heading,\n    distance,\n    e.maximumRadius,\n    ellipticity\n  );\n\n  if (\n    !(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result) ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(ellipsoid) && !ellipsoid.equals(result.ellipsoid))\n  ) {\n    return new EllipsoidRhumbLine(start, end, e);\n  }\n\n  result.setEndPoints(start, end);\n  return result;\n};\n\n/**\n * Sets the start and end points of the rhumb line.\n *\n * @param {Cartographic} start The initial planetodetic point on the path.\n * @param {Cartographic} end The final planetodetic point on the path.\n */\nEllipsoidRhumbLine.prototype.setEndPoints = function (start, end) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("start", start);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("end", end);\n  //>>includeEnd(\'debug\');\n\n  computeProperties(this, start, end, this._ellipsoid);\n};\n\n/**\n * Provides the location of a point at the indicated portion along the rhumb line.\n *\n * @param {Number} fraction The portion of the distance between the initial and final points.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the rhumb line.\n */\nEllipsoidRhumbLine.prototype.interpolateUsingFraction = function (\n  fraction,\n  result\n) {\n  return this.interpolateUsingSurfaceDistance(\n    fraction * this._distance,\n    result\n  );\n};\n\n/**\n * Provides the location of a point at the indicated distance along the rhumb line.\n *\n * @param {Number} distance The distance from the inital point to the point of interest along the rhumbLine.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the rhumb line.\n *\n * @exception {DeveloperError} start and end must be set before calling function interpolateUsingSurfaceDistance\n */\nEllipsoidRhumbLine.prototype.interpolateUsingSurfaceDistance = function (\n  distance,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number */ .Z.typeOf.number("distance", distance);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this._distance) || this._distance === 0.0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "EllipsoidRhumbLine must have distinct start and end set."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  return interpolateUsingSurfaceDistance(\n    this._start,\n    this._heading,\n    distance,\n    this._ellipsoid.maximumRadius,\n    this._ellipticity,\n    result\n  );\n};\n\n/**\n * Provides the location of a point at the indicated longitude along the rhumb line.\n * If the longitude is outside the range of start and end points, the first intersection with the longitude from the start point in the direction of the heading is returned. This follows the spiral property of a rhumb line.\n *\n * @param {Number} intersectionLongitude The longitude, in radians, at which to find the intersection point from the starting point using the heading.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the intersection point along the rhumb line, undefined if there is no intersection or infinite intersections.\n *\n * @exception {DeveloperError} start and end must be set before calling function findIntersectionWithLongitude.\n */\nEllipsoidRhumbLine.prototype.findIntersectionWithLongitude = function (\n  intersectionLongitude,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number */ .Z.typeOf.number("intersectionLongitude", intersectionLongitude);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this._distance) || this._distance === 0.0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "EllipsoidRhumbLine must have distinct start and end set."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var ellipticity = this._ellipticity;\n  var heading = this._heading;\n  var absHeading = Math.abs(heading);\n  var start = this._start;\n\n  intersectionLongitude = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(intersectionLongitude);\n\n  if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      Math.abs(intersectionLongitude),\n      Math.PI,\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON14 */ .Z.EPSILON14\n    )\n  ) {\n    intersectionLongitude = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].sign */ .Z.sign(start.longitude) * Math.PI;\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  // If heading is -PI/2 or PI/2, this is an E-W rhumb line\n  // If heading is 0 or PI, this is an N-S rhumb line\n  if (Math.abs(_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - absHeading) <= _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON8 */ .Z.EPSILON8) {\n    result.longitude = intersectionLongitude;\n    result.latitude = start.latitude;\n    result.height = 0;\n    return result;\n  } else if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      Math.abs(_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - absHeading),\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO,\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON8 */ .Z.EPSILON8\n    )\n  ) {\n    if (\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        intersectionLongitude,\n        start.longitude,\n        _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON12 */ .Z.EPSILON12\n      )\n    ) {\n      return undefined;\n    }\n\n    result.longitude = intersectionLongitude;\n    result.latitude =\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO *\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].sign */ .Z.sign(_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO - heading);\n    result.height = 0;\n    return result;\n  }\n\n  // Use iterative solver from Equation 9 from http://edwilliams.org/ellipsoid/ellipsoid.pdf\n  var phi1 = start.latitude;\n  var eSinPhi1 = ellipticity * Math.sin(phi1);\n  var leftComponent =\n    Math.tan(0.5 * (_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO + phi1)) *\n    Math.exp((intersectionLongitude - start.longitude) / Math.tan(heading));\n  var denominator = (1 + eSinPhi1) / (1 - eSinPhi1);\n\n  var newPhi = start.latitude;\n  var phi;\n  do {\n    phi = newPhi;\n    var eSinPhi = ellipticity * Math.sin(phi);\n    var numerator = (1 + eSinPhi) / (1 - eSinPhi);\n    newPhi =\n      2 *\n        Math.atan(\n          leftComponent * Math.pow(numerator / denominator, ellipticity / 2)\n        ) -\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO;\n  } while (!_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(newPhi, phi, _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON12 */ .Z.EPSILON12));\n\n  result.longitude = intersectionLongitude;\n  result.latitude = newPhi;\n  result.height = 0;\n  return result;\n};\n\n/**\n * Provides the location of a point at the indicated latitude along the rhumb line.\n * If the latitude is outside the range of start and end points, the first intersection with the latitude from that start point in the direction of the heading is returned. This follows the spiral property of a rhumb line.\n *\n * @param {Number} intersectionLatitude The latitude, in radians, at which to find the intersection point from the starting point using the heading.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the intersection point along the rhumb line, undefined if there is no intersection or infinite intersections.\n *\n * @exception {DeveloperError} start and end must be set before calling function findIntersectionWithLongitude.\n */\nEllipsoidRhumbLine.prototype.findIntersectionWithLatitude = function (\n  intersectionLatitude,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number */ .Z.typeOf.number("intersectionLatitude", intersectionLatitude);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this._distance) || this._distance === 0.0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "EllipsoidRhumbLine must have distinct start and end set."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var ellipticity = this._ellipticity;\n  var heading = this._heading;\n  var start = this._start;\n\n  // If start and end have same latitude, return undefined since it\'s either no intersection or infinite intersections\n  if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      Math.abs(heading),\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO,\n      _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EPSILON8 */ .Z.EPSILON8\n    )\n  ) {\n    return;\n  }\n\n  // Can be solved using the same equations from interpolateUsingSurfaceDistance\n  var sigma1 = calculateSigma(ellipticity, start.latitude);\n  var sigma2 = calculateSigma(ellipticity, intersectionLatitude);\n  var deltaLongitude = Math.tan(heading) * (sigma2 - sigma1);\n  var longitude = _Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].negativePiToPi */ .Z.negativePiToPi(start.longitude + deltaLongitude);\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n    result.longitude = longitude;\n    result.latitude = intersectionLatitude;\n    result.height = 0;\n\n    return result;\n  }\n\n  return new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(longitude, intersectionLatitude, 0);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidRhumbLine);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8398\n')},74744:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _AxisAlignedBoundingBox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55829);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50491);\n/* harmony import */ var _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(67627);\n/* harmony import */ var _Matrix4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(72248);\n/* harmony import */ var _Plane_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7749);\n/* harmony import */ var _Ray_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68457);\n/* harmony import */ var _Transforms_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(95555);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar scratchCart4 = new _Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n/**\n * A plane tangent to the provided ellipsoid at the provided origin.\n * If origin is not on the surface of the ellipsoid, it\'s surface projection will be used.\n * If origin is at the center of the ellipsoid, an exception will be thrown.\n * @alias EllipsoidTangentPlane\n * @constructor\n *\n * @param {Cartesian3} origin The point on the surface of the ellipsoid where the tangent plane touches.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\n *\n * @exception {DeveloperError} origin must not be at the center of the ellipsoid.\n */\nfunction EllipsoidTangentPlane(origin, ellipsoid) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("origin", origin);\n  //>>includeEnd(\'debug\');\n\n  ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].WGS84 */ .Z.WGS84);\n  origin = ellipsoid.scaleToGeodeticSurface(origin);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(origin)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "origin must not be at the center of the ellipsoid."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var eastNorthUp = _Transforms_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(origin, ellipsoid);\n  this._ellipsoid = ellipsoid;\n  this._origin = origin;\n  this._xAxis = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCartesian4 */ .Z.fromCartesian4(\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].getColumn */ .Z.getColumn(eastNorthUp, 0, scratchCart4)\n  );\n  this._yAxis = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCartesian4 */ .Z.fromCartesian4(\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].getColumn */ .Z.getColumn(eastNorthUp, 1, scratchCart4)\n  );\n\n  var normal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCartesian4 */ .Z.fromCartesian4(\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].getColumn */ .Z.getColumn(eastNorthUp, 2, scratchCart4)\n  );\n  this._plane = _Plane_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromPointNormal */ .Z.fromPointNormal(origin, normal);\n}\n\nObject.defineProperties(EllipsoidTangentPlane.prototype, {\n  /**\n   * Gets the ellipsoid.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the origin.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @type {Cartesian3}\n   */\n  origin: {\n    get: function () {\n      return this._origin;\n    },\n  },\n\n  /**\n   * Gets the plane which is tangent to the ellipsoid.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Plane}\n   */\n  plane: {\n    get: function () {\n      return this._plane;\n    },\n  },\n\n  /**\n   * Gets the local X-axis (east) of the tangent plane.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Cartesian3}\n   */\n  xAxis: {\n    get: function () {\n      return this._xAxis;\n    },\n  },\n\n  /**\n   * Gets the local Y-axis (north) of the tangent plane.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Cartesian3}\n   */\n  yAxis: {\n    get: function () {\n      return this._yAxis;\n    },\n  },\n\n  /**\n   * Gets the local Z-axis (up) of the tangent plane.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Cartesian3}\n   */\n  zAxis: {\n    get: function () {\n      return this._plane.normal;\n    },\n  },\n});\n\nvar tmp = new _AxisAlignedBoundingBox_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n/**\n * Creates a new instance from the provided ellipsoid and the center\n * point of the provided Cartesians.\n *\n * @param {Cartesian3[]} cartesians The list of positions surrounding the center point.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\n * @returns {EllipsoidTangentPlane} The new instance of EllipsoidTangentPlane.\n */\nEllipsoidTangentPlane.fromPoints = function (cartesians, ellipsoid) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesians", cartesians);\n  //>>includeEnd(\'debug\');\n\n  var box = _AxisAlignedBoundingBox_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromPoints */ .Z.fromPoints(cartesians, tmp);\n  return new EllipsoidTangentPlane(box.center, ellipsoid);\n};\n\nvar scratchProjectPointOntoPlaneRay = new _Ray_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z();\nvar scratchProjectPointOntoPlaneCartesian3 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n/**\n * Computes the projection of the provided 3D position onto the 2D plane, radially outward from the {@link EllipsoidTangentPlane.ellipsoid} coordinate system origin.\n *\n * @param {Cartesian3} cartesian The point to project.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided. Undefined if there is no intersection point\n */\nEllipsoidTangentPlane.prototype.projectPointOntoPlane = function (\n  cartesian,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  var ray = scratchProjectPointOntoPlaneRay;\n  ray.origin = cartesian;\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(cartesian, ray.direction);\n\n  var intersectionPoint = _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].rayPlane */ .Z.rayPlane(\n    ray,\n    this._plane,\n    scratchProjectPointOntoPlaneCartesian3\n  );\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(intersectionPoint)) {\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].negate */ .Z.negate(ray.direction, ray.direction);\n    intersectionPoint = _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].rayPlane */ .Z.rayPlane(\n      ray,\n      this._plane,\n      scratchProjectPointOntoPlaneCartesian3\n    );\n  }\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(intersectionPoint)) {\n    var v = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].subtract */ .Z.subtract(\n      intersectionPoint,\n      this._origin,\n      intersectionPoint\n    );\n    var x = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].dot */ .Z.dot(this._xAxis, v);\n    var y = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].dot */ .Z.dot(this._yAxis, v);\n\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(result)) {\n      return new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(x, y);\n    }\n    result.x = x;\n    result.y = y;\n    return result;\n  }\n  return undefined;\n};\n\n/**\n * Computes the projection of the provided 3D positions onto the 2D plane (where possible), radially outward from the global origin.\n * The resulting array may be shorter than the input array - if a single projection is impossible it will not be included.\n *\n * @see EllipsoidTangentPlane.projectPointOntoPlane\n *\n * @param {Cartesian3[]} cartesians The array of points to project.\n * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\n * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointsOntoPlane = function (\n  cartesians,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesians", cartesians);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(result)) {\n    result = [];\n  }\n\n  var count = 0;\n  var length = cartesians.length;\n  for (var i = 0; i < length; i++) {\n    var p = this.projectPointOntoPlane(cartesians[i], result[count]);\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(p)) {\n      result[count] = p;\n      count++;\n    }\n  }\n  result.length = count;\n  return result;\n};\n\n/**\n * Computes the projection of the provided 3D position onto the 2D plane, along the plane normal.\n *\n * @param {Cartesian3} cartesian The point to project.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointToNearestOnPlane = function (\n  cartesian,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  var ray = scratchProjectPointOntoPlaneRay;\n  ray.origin = cartesian;\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(this._plane.normal, ray.direction);\n\n  var intersectionPoint = _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].rayPlane */ .Z.rayPlane(\n    ray,\n    this._plane,\n    scratchProjectPointOntoPlaneCartesian3\n  );\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(intersectionPoint)) {\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].negate */ .Z.negate(ray.direction, ray.direction);\n    intersectionPoint = _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].rayPlane */ .Z.rayPlane(\n      ray,\n      this._plane,\n      scratchProjectPointOntoPlaneCartesian3\n    );\n  }\n\n  var v = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].subtract */ .Z.subtract(\n    intersectionPoint,\n    this._origin,\n    intersectionPoint\n  );\n  var x = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].dot */ .Z.dot(this._xAxis, v);\n  var y = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].dot */ .Z.dot(this._yAxis, v);\n\n  result.x = x;\n  result.y = y;\n  return result;\n};\n\n/**\n * Computes the projection of the provided 3D positions onto the 2D plane, along the plane normal.\n *\n * @see EllipsoidTangentPlane.projectPointToNearestOnPlane\n *\n * @param {Cartesian3[]} cartesians The array of points to project.\n * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\n * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided. This will have the same length as <code>cartesians</code>.\n */\nEllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane = function (\n  cartesians,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesians", cartesians);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(result)) {\n    result = [];\n  }\n\n  var length = cartesians.length;\n  result.length = length;\n  for (var i = 0; i < length; i++) {\n    result[i] = this.projectPointToNearestOnPlane(cartesians[i], result[i]);\n  }\n  return result;\n};\n\nvar projectPointsOntoEllipsoidScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n/**\n * Computes the projection of the provided 2D position onto the 3D ellipsoid.\n *\n * @param {Cartesian2} cartesian The points to project.\n * @param {Cartesian3} [result] The Cartesian3 instance to store result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointOntoEllipsoid = function (\n  cartesian,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n  }\n\n  var ellipsoid = this._ellipsoid;\n  var origin = this._origin;\n  var xAxis = this._xAxis;\n  var yAxis = this._yAxis;\n  var tmp = projectPointsOntoEllipsoidScratch;\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(xAxis, cartesian.x, tmp);\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(origin, tmp, result);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(yAxis, cartesian.y, tmp);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(result, tmp, result);\n  ellipsoid.scaleToGeocentricSurface(result, result);\n\n  return result;\n};\n\n/**\n * Computes the projection of the provided 2D positions onto the 3D ellipsoid.\n *\n * @param {Cartesian2[]} cartesians The array of points to project.\n * @param {Cartesian3[]} [result] The array of Cartesian3 instances onto which to store results.\n * @returns {Cartesian3[]} The modified result parameter or a new array of Cartesian3 instances if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid = function (\n  cartesians,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("cartesians", cartesians);\n  //>>includeEnd(\'debug\');\n\n  var length = cartesians.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(result)) {\n    result = new Array(length);\n  } else {\n    result.length = length;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    result[i] = this.projectPointOntoEllipsoid(cartesians[i], result[i]);\n  }\n\n  return result;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidTangentPlane);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74744\n')},81176:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50491);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(71351);\n/* harmony import */ var _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(57134);\n/* harmony import */ var _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1497);\n\n\n\n\n\n\n\n\n\n/**\n * A very simple {@link TerrainProvider} that produces geometry by tessellating an ellipsoidal\n * surface.\n *\n * @alias EllipsoidTerrainProvider\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {TilingScheme} [options.tilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link GeographicTilingScheme}\n * is used.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n * this parameter is ignored and the tiling scheme\'s ellipsoid is used instead. If neither\n * parameter is specified, the WGS84 ellipsoid is used.\n *\n * @see TerrainProvider\n */\nfunction EllipsoidTerrainProvider(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._tilingScheme = options.tilingScheme;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this._tilingScheme)) {\n    this._tilingScheme = new _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      ellipsoid: (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].WGS84 */ .Z.WGS84),\n    });\n  }\n\n  // Note: the 64 below does NOT need to match the actual vertex dimensions, because\n  // the ellipsoid is significantly smoother than actual terrain.\n  this._levelZeroMaximumGeometricError = _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].getEstimatedLevelZeroGeometricErrorForAHeightmap */ .Z.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n    this._tilingScheme.ellipsoid,\n    64,\n    this._tilingScheme.getNumberOfXTilesAtLevel(0)\n  );\n\n  this._errorEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve(true);\n}\n\nObject.defineProperties(EllipsoidTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link EllipsoidTerrainProvider#ready} returns true.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof EllipsoidTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link TerrainProvider#ready} returns true.  The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nEllipsoidTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  var width = 16;\n  var height = 16;\n  return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve(\n    new _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n      buffer: new Uint8Array(width * height),\n      width: width,\n      height: height,\n    })\n  );\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nEllipsoidTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nEllipsoidTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nEllipsoidTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidTerrainProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81176\n')},61252:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50491);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(96190);\n\n\n\n\n\n\n\n\n/**\n * Determine whether or not other objects are visible or hidden behind the visible horizon defined by\n * an {@link Ellipsoid} and a camera position.  The ellipsoid is assumed to be located at the\n * origin of the coordinate system.  This class uses the algorithm described in the\n * {@link https://cesium.com/blog/2013/04/25/Horizon-culling/|Horizon Culling} blog post.\n *\n * @alias EllipsoidalOccluder\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid to use as an occluder.\n * @param {Cartesian3} [cameraPosition] The coordinate of the viewer/camera.  If this parameter is not\n *        specified, {@link EllipsoidalOccluder#cameraPosition} must be called before\n *        testing visibility.\n *\n * @constructor\n *\n * @example\n * // Construct an ellipsoidal occluder with radii 1.0, 1.1, and 0.9.\n * var cameraPosition = new Cesium.Cartesian3(5.0, 6.0, 7.0);\n * var occluderEllipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\n * var occluder = new Cesium.EllipsoidalOccluder(occluderEllipsoid, cameraPosition);\n *\n * @private\n */\nfunction EllipsoidalOccluder(ellipsoid, cameraPosition) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("ellipsoid", ellipsoid);\n  //>>includeEnd(\'debug\');\n\n  this._ellipsoid = ellipsoid;\n  this._cameraPosition = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._cameraPositionInScaledSpace = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._distanceToLimbInScaledSpaceSquared = 0.0;\n\n  // cameraPosition fills in the above values\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(cameraPosition)) {\n    this.cameraPosition = cameraPosition;\n  }\n}\n\nObject.defineProperties(EllipsoidalOccluder.prototype, {\n  /**\n   * Gets the occluding ellipsoid.\n   * @memberof EllipsoidalOccluder.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n  /**\n   * Gets or sets the position of the camera.\n   * @memberof EllipsoidalOccluder.prototype\n   * @type {Cartesian3}\n   */\n  cameraPosition: {\n    get: function () {\n      return this._cameraPosition;\n    },\n    set: function (cameraPosition) {\n      // See https://cesium.com/blog/2013/04/25/Horizon-culling/\n      var ellipsoid = this._ellipsoid;\n      var cv = ellipsoid.transformPositionToScaledSpace(\n        cameraPosition,\n        this._cameraPositionInScaledSpace\n      );\n      var vhMagnitudeSquared = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(cv) - 1.0;\n\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(cameraPosition, this._cameraPosition);\n      this._cameraPositionInScaledSpace = cv;\n      this._distanceToLimbInScaledSpaceSquared = vhMagnitudeSquared;\n    },\n  },\n});\n\nvar scratchCartesian = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n/**\n * Determines whether or not a point, the <code>occludee</code>, is hidden from view by the occluder.\n *\n * @param {Cartesian3} occludee The point to test for visibility.\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n *\n * @example\n * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\n * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\n * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\n * var point = new Cesium.Cartesian3(0, -3, -3);\n * occluder.isPointVisible(point); //returns true\n */\nEllipsoidalOccluder.prototype.isPointVisible = function (occludee) {\n  var ellipsoid = this._ellipsoid;\n  var occludeeScaledSpacePosition = ellipsoid.transformPositionToScaledSpace(\n    occludee,\n    scratchCartesian\n  );\n  return isScaledSpacePointVisible(\n    occludeeScaledSpacePosition,\n    this._cameraPositionInScaledSpace,\n    this._distanceToLimbInScaledSpaceSquared\n  );\n};\n\n/**\n * Determines whether or not a point expressed in the ellipsoid scaled space, is hidden from view by the\n * occluder.  To transform a Cartesian X, Y, Z position in the coordinate system aligned with the ellipsoid\n * into the scaled space, call {@link Ellipsoid#transformPositionToScaledSpace}.\n *\n * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space.\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n *\n * @example\n * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\n * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\n * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\n * var point = new Cesium.Cartesian3(0, -3, -3);\n * var scaledSpacePoint = ellipsoid.transformPositionToScaledSpace(point);\n * occluder.isScaledSpacePointVisible(scaledSpacePoint); //returns true\n */\nEllipsoidalOccluder.prototype.isScaledSpacePointVisible = function (\n  occludeeScaledSpacePosition\n) {\n  return isScaledSpacePointVisible(\n    occludeeScaledSpacePosition,\n    this._cameraPositionInScaledSpace,\n    this._distanceToLimbInScaledSpaceSquared\n  );\n};\n\nvar scratchCameraPositionInScaledSpaceShrunk = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n/**\n * Similar to {@link EllipsoidalOccluder#isScaledSpacePointVisible} except tests against an\n * ellipsoid that has been shrunk by the minimum height when the minimum height is below\n * the ellipsoid. This is intended to be used with points generated by\n * {@link EllipsoidalOccluder#computeHorizonCullingPointPossiblyUnderEllipsoid} or\n * {@link EllipsoidalOccluder#computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid}.\n *\n * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space of the possibly-shrunk ellipsoid.\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n */\nEllipsoidalOccluder.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid = function (\n  occludeeScaledSpacePosition,\n  minimumHeight\n) {\n  var ellipsoid = this._ellipsoid;\n  var vhMagnitudeSquared;\n  var cv;\n\n  if (\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(minimumHeight) &&\n    minimumHeight < 0.0 &&\n    ellipsoid.minimumRadius > -minimumHeight\n  ) {\n    // This code is similar to the cameraPosition setter, but unrolled for performance because it will be called a lot.\n    cv = scratchCameraPositionInScaledSpaceShrunk;\n    cv.x = this._cameraPosition.x / (ellipsoid.radii.x + minimumHeight);\n    cv.y = this._cameraPosition.y / (ellipsoid.radii.y + minimumHeight);\n    cv.z = this._cameraPosition.z / (ellipsoid.radii.z + minimumHeight);\n    vhMagnitudeSquared = cv.x * cv.x + cv.y * cv.y + cv.z * cv.z - 1.0;\n  } else {\n    cv = this._cameraPositionInScaledSpace;\n    vhMagnitudeSquared = this._distanceToLimbInScaledSpaceSquared;\n  }\n\n  return isScaledSpacePointVisible(\n    occludeeScaledSpacePosition,\n    cv,\n    vhMagnitudeSquared\n  );\n};\n\n/**\n * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\n * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\n * is expressed in the ellipsoid-scaled space and is suitable for use with\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\n *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                       ellipsoid\'s axes.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPoint = function (\n  directionToPoint,\n  positions,\n  result\n) {\n  return computeHorizonCullingPointFromPositions(\n    this._ellipsoid,\n    directionToPoint,\n    positions,\n    result\n  );\n};\n\nvar scratchEllipsoidShrunk = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNIT_SPHERE */ .Z.UNIT_SPHERE);\n\n/**\n * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPoint} except computes the culling\n * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\n * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\n * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\n *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                       ellipsoid\'s axes.\n * @param {Number} [minimumHeight] The minimum height of all positions. If this value is undefined, all positions are assumed to be above the ellipsoid.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid = function (\n  directionToPoint,\n  positions,\n  minimumHeight,\n  result\n) {\n  var possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(\n    this._ellipsoid,\n    minimumHeight,\n    scratchEllipsoidShrunk\n  );\n  return computeHorizonCullingPointFromPositions(\n    possiblyShrunkEllipsoid,\n    directionToPoint,\n    positions,\n    result\n  );\n};\n/**\n * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\n * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\n * is expressed in the ellipsoid-scaled space and is suitable for use with\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\n *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                   ellipsoid\'s axes.\n * @param {Number} [stride=3]\n * @param {Cartesian3} [center=Cartesian3.ZERO]\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices = function (\n  directionToPoint,\n  vertices,\n  stride,\n  center,\n  result\n) {\n  return computeHorizonCullingPointFromVertices(\n    this._ellipsoid,\n    directionToPoint,\n    vertices,\n    stride,\n    center,\n    result\n  );\n};\n\n/**\n * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPointFromVertices} except computes the culling\n * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\n * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\n * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\n *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                   ellipsoid\'s axes.\n * @param {Number} [stride=3]\n * @param {Cartesian3} [center=Cartesian3.ZERO]\n * @param {Number} [minimumHeight] The minimum height of all vertices. If this value is undefined, all vertices are assumed to be above the ellipsoid.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid = function (\n  directionToPoint,\n  vertices,\n  stride,\n  center,\n  minimumHeight,\n  result\n) {\n  var possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(\n    this._ellipsoid,\n    minimumHeight,\n    scratchEllipsoidShrunk\n  );\n  return computeHorizonCullingPointFromVertices(\n    possiblyShrunkEllipsoid,\n    directionToPoint,\n    vertices,\n    stride,\n    center,\n    result\n  );\n};\n\nvar subsampleScratch = [];\n\n/**\n * Computes a point that can be used for horizon culling of a rectangle.  If the point is below\n * the horizon, the ellipsoid-conforming rectangle is guaranteed to be below the horizon as well.\n * The returned point is expressed in the ellipsoid-scaled space and is suitable for use with\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\n *\n * @param {Rectangle} rectangle The rectangle for which to compute the horizon culling point.\n * @param {Ellipsoid} ellipsoid The ellipsoid on which the rectangle is defined.  This may be different from\n *                    the ellipsoid used by this instance for occlusion testing.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle = function (\n  rectangle,\n  ellipsoid,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("rectangle", rectangle);\n  //>>includeEnd(\'debug\');\n\n  var positions = _Rectangle_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].subsample */ .Z.subsample(\n    rectangle,\n    ellipsoid,\n    0.0,\n    subsampleScratch\n  );\n  var bs = _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromPoints */ .Z.fromPoints(positions);\n\n  // If the bounding sphere center is too close to the center of the occluder, it doesn\'t make\n  // sense to try to horizon cull it.\n  if (_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(bs.center) < 0.1 * ellipsoid.minimumRadius) {\n    return undefined;\n  }\n\n  return this.computeHorizonCullingPoint(bs.center, positions, result);\n};\n\nvar scratchEllipsoidShrunkRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction getPossiblyShrunkEllipsoid(ellipsoid, minimumHeight, result) {\n  if (\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(minimumHeight) &&\n    minimumHeight < 0.0 &&\n    ellipsoid.minimumRadius > -minimumHeight\n  ) {\n    var ellipsoidShrunkRadii = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n      ellipsoid.radii.x + minimumHeight,\n      ellipsoid.radii.y + minimumHeight,\n      ellipsoid.radii.z + minimumHeight,\n      scratchEllipsoidShrunkRadii\n    );\n    ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(ellipsoidShrunkRadii, result);\n  }\n  return ellipsoid;\n}\n\nfunction computeHorizonCullingPointFromPositions(\n  ellipsoid,\n  directionToPoint,\n  positions,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("directionToPoint", directionToPoint);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("positions", positions);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(\n    ellipsoid,\n    directionToPoint\n  );\n  var resultMagnitude = 0.0;\n\n  for (var i = 0, len = positions.length; i < len; ++i) {\n    var position = positions[i];\n    var candidateMagnitude = computeMagnitude(\n      ellipsoid,\n      position,\n      scaledSpaceDirectionToPoint\n    );\n    if (candidateMagnitude < 0.0) {\n      // all points should face the same direction, but this one doesn\'t, so return undefined\n      return undefined;\n    }\n    resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\n  }\n\n  return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\n}\n\nvar positionScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction computeHorizonCullingPointFromVertices(\n  ellipsoid,\n  directionToPoint,\n  vertices,\n  stride,\n  center,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("directionToPoint", directionToPoint);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("vertices", vertices);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number */ .Z.typeOf.number("stride", stride);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  stride = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stride, 3);\n  center = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(center, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO);\n  var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(\n    ellipsoid,\n    directionToPoint\n  );\n  var resultMagnitude = 0.0;\n\n  for (var i = 0, len = vertices.length; i < len; i += stride) {\n    positionScratch.x = vertices[i] + center.x;\n    positionScratch.y = vertices[i + 1] + center.y;\n    positionScratch.z = vertices[i + 2] + center.z;\n\n    var candidateMagnitude = computeMagnitude(\n      ellipsoid,\n      positionScratch,\n      scaledSpaceDirectionToPoint\n    );\n    if (candidateMagnitude < 0.0) {\n      // all points should face the same direction, but this one doesn\'t, so return undefined\n      return undefined;\n    }\n    resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\n  }\n\n  return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\n}\n\nfunction isScaledSpacePointVisible(\n  occludeeScaledSpacePosition,\n  cameraPositionInScaledSpace,\n  distanceToLimbInScaledSpaceSquared\n) {\n  // See https://cesium.com/blog/2013/04/25/Horizon-culling/\n  var cv = cameraPositionInScaledSpace;\n  var vhMagnitudeSquared = distanceToLimbInScaledSpaceSquared;\n  var vt = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(\n    occludeeScaledSpacePosition,\n    cv,\n    scratchCartesian\n  );\n  var vtDotVc = -_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(vt, cv);\n  // If vhMagnitudeSquared < 0 then we are below the surface of the ellipsoid and\n  // in this case, set the culling plane to be on V.\n  var isOccluded =\n    vhMagnitudeSquared < 0\n      ? vtDotVc > 0\n      : vtDotVc > vhMagnitudeSquared &&\n        (vtDotVc * vtDotVc) / _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(vt) >\n          vhMagnitudeSquared;\n  return !isOccluded;\n}\n\nvar scaledSpaceScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar directionScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint) {\n  var scaledSpacePosition = ellipsoid.transformPositionToScaledSpace(\n    position,\n    scaledSpaceScratch\n  );\n  var magnitudeSquared = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(scaledSpacePosition);\n  var magnitude = Math.sqrt(magnitudeSquared);\n  var direction = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].divideByScalar */ .Z.divideByScalar(\n    scaledSpacePosition,\n    magnitude,\n    directionScratch\n  );\n\n  // For the purpose of this computation, points below the ellipsoid are consider to be on it instead.\n  magnitudeSquared = Math.max(1.0, magnitudeSquared);\n  magnitude = Math.max(1.0, magnitude);\n\n  var cosAlpha = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(direction, scaledSpaceDirectionToPoint);\n  var sinAlpha = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(direction, scaledSpaceDirectionToPoint, direction)\n  );\n  var cosBeta = 1.0 / magnitude;\n  var sinBeta = Math.sqrt(magnitudeSquared - 1.0) * cosBeta;\n\n  return 1.0 / (cosAlpha * cosBeta - sinAlpha * sinBeta);\n}\n\nfunction magnitudeToPoint(\n  scaledSpaceDirectionToPoint,\n  resultMagnitude,\n  result\n) {\n  // The horizon culling point is undefined if there were no positions from which to compute it,\n  // the directionToPoint is pointing opposite all of the positions,  or if we computed NaN or infinity.\n  if (\n    resultMagnitude <= 0.0 ||\n    resultMagnitude === 1.0 / 0.0 ||\n    resultMagnitude !== resultMagnitude\n  ) {\n    return undefined;\n  }\n\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    scaledSpaceDirectionToPoint,\n    resultMagnitude,\n    result\n  );\n}\n\nvar directionToPointScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint) {\n  if (_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(directionToPoint, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO)) {\n    return directionToPoint;\n  }\n\n  ellipsoid.transformPositionToScaledSpace(\n    directionToPoint,\n    directionToPointScratch\n  );\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(directionToPointScratch, directionToPointScratch);\n}\n/* harmony default export */ __webpack_exports__["Z"] = (EllipsoidalOccluder);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61252\n')},74938:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n\n\n\n\n/**\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @alias EncodedCartesian3\n * @constructor\n *\n * @private\n */\nfunction EncodedCartesian3() {\n  /**\n   * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.high = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO);\n\n  /**\n   * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.low = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO);\n}\n\n/**\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\n * 32-bit floating-point and added, approximate the original input.  The returned object\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\n * <p>\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Number} value The floating-point value to encode.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Object} The modified result parameter or a new instance if one was not provided.\n *\n * @example\n * var value = 1234567.1234567;\n * var splitValue = Cesium.EncodedCartesian3.encode(value);\n */\nEncodedCartesian3.encode = function (value, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    result = {\n      high: 0.0,\n      low: 0.0,\n    };\n  }\n\n  var doubleHigh;\n  if (value >= 0.0) {\n    doubleHigh = Math.floor(value / 65536.0) * 65536.0;\n    result.high = doubleHigh;\n    result.low = value - doubleHigh;\n  } else {\n    doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\n    result.high = -doubleHigh;\n    result.low = value + doubleHigh;\n  }\n\n  return result;\n};\n\nvar scratchEncode = {\n  high: 0.0,\n  low: 0.0,\n};\n\n/**\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * The fixed-point encoding follows {@link https://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\n *\n * @example\n * var cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\n * var encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\n */\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    result = new EncodedCartesian3();\n  }\n\n  var high = result.high;\n  var low = result.low;\n\n  EncodedCartesian3.encode(cartesian.x, scratchEncode);\n  high.x = scratchEncode.high;\n  low.x = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.y, scratchEncode);\n  high.y = scratchEncode.high;\n  low.y = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.z, scratchEncode);\n  high.z = scratchEncode.high;\n  low.z = scratchEncode.low;\n\n  return result;\n};\n\nvar encodedP = new EncodedCartesian3();\n\n/**\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\n * <p>\n * This is used to create interleaved high-precision position vertex attributes.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {Number[]} cartesianArray The array to write to.\n * @param {Number} index The index into the array to start writing.  Six elements will be written.\n *\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\n *\n * @example\n * var positions = [\n *    new Cesium.Cartesian3(),\n *    // ...\n * ];\n * var encodedPositions = new Float32Array(2 * 3 * positions.length);\n * var j = 0;\n * for (var i = 0; i < positions.length; ++i) {\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\n *   j += 6;\n * }\n */\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("cartesianArray", cartesianArray);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("index", index);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("index", index, 0);\n  //>>includeEnd(\'debug\');\n\n  EncodedCartesian3.fromCartesian(cartesian, encodedP);\n  var high = encodedP.high;\n  var low = encodedP.low;\n\n  cartesianArray[index] = high.x;\n  cartesianArray[index + 1] = high.y;\n  cartesianArray[index + 2] = high.z;\n  cartesianArray[index + 3] = low.x;\n  cartesianArray[index + 4] = low.y;\n  cartesianArray[index + 5] = low.z;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (EncodedCartesian3);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74938\n')},14459:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n\n\n\n/**\n * A generic utility class for managing subscribers for a particular event.\n * This class is usually instantiated inside of a container class and\n * exposed as a property for others to subscribe to.\n *\n * @alias Event\n * @constructor\n * @example\n * MyObject.prototype.myListener = function(arg1, arg2) {\n *     this.myArg1Copy = arg1;\n *     this.myArg2Copy = arg2;\n * }\n *\n * var myObjectInstance = new MyObject();\n * var evt = new Cesium.Event();\n * evt.addEventListener(MyObject.prototype.myListener, myObjectInstance);\n * evt.raiseEvent('1', '2');\n * evt.removeEventListener(MyObject.prototype.myListener);\n */\nfunction Event() {\n  this._listeners = [];\n  this._scopes = [];\n  this._toRemove = [];\n  this._insideRaiseEvent = false;\n}\n\nObject.defineProperties(Event.prototype, {\n  /**\n   * The number of listeners currently subscribed to the event.\n   * @memberof Event.prototype\n   * @type {Number}\n   * @readonly\n   */\n  numberOfListeners: {\n    get: function () {\n      return this._listeners.length - this._toRemove.length;\n    },\n  },\n});\n\n/**\n * Registers a callback function to be executed whenever the event is raised.\n * An optional scope can be provided to serve as the <code>this</code> pointer\n * in which the function will execute.\n *\n * @param {Function} listener The function to be executed when the event is raised.\n * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\n *        pointer in which the listener function will execute.\n * @returns {Event.RemoveCallback} A function that will remove this event listener when invoked.\n *\n * @see Event#raiseEvent\n * @see Event#removeEventListener\n */\nEvent.prototype.addEventListener = function (listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].typeOf.func */ .Z.typeOf.func(\"listener\", listener);\n  //>>includeEnd('debug');\n\n  this._listeners.push(listener);\n  this._scopes.push(scope);\n\n  var event = this;\n  return function () {\n    event.removeEventListener(listener, scope);\n  };\n};\n\n/**\n * Unregisters a previously registered callback.\n *\n * @param {Function} listener The function to be unregistered.\n * @param {Object} [scope] The scope that was originally passed to addEventListener.\n * @returns {Boolean} <code>true</code> if the listener was removed; <code>false</code> if the listener and scope are not registered with the event.\n *\n * @see Event#addEventListener\n * @see Event#raiseEvent\n */\nEvent.prototype.removeEventListener = function (listener, scope) {\n  //>>includeStart('debug', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].typeOf.func */ .Z.typeOf.func(\"listener\", listener);\n  //>>includeEnd('debug');\n\n  var listeners = this._listeners;\n  var scopes = this._scopes;\n\n  var index = -1;\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i] === listener && scopes[i] === scope) {\n      index = i;\n      break;\n    }\n  }\n\n  if (index !== -1) {\n    if (this._insideRaiseEvent) {\n      //In order to allow removing an event subscription from within\n      //a callback, we don't actually remove the items here.  Instead\n      //remember the index they are at and undefined their value.\n      this._toRemove.push(index);\n      listeners[index] = undefined;\n      scopes[index] = undefined;\n    } else {\n      listeners.splice(index, 1);\n      scopes.splice(index, 1);\n    }\n    return true;\n  }\n\n  return false;\n};\n\nfunction compareNumber(a, b) {\n  return b - a;\n}\n\n/**\n * Raises the event by calling each registered listener with all supplied arguments.\n *\n * @param {...Object} arguments This method takes any number of parameters and passes them through to the listener functions.\n *\n * @see Event#addEventListener\n * @see Event#removeEventListener\n */\nEvent.prototype.raiseEvent = function () {\n  this._insideRaiseEvent = true;\n\n  var i;\n  var listeners = this._listeners;\n  var scopes = this._scopes;\n  var length = listeners.length;\n\n  for (i = 0; i < length; i++) {\n    var listener = listeners[i];\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)(listener)) {\n      listeners[i].apply(scopes[i], arguments);\n    }\n  }\n\n  //Actually remove items removed in removeEventListener.\n  var toRemove = this._toRemove;\n  length = toRemove.length;\n  if (length > 0) {\n    toRemove.sort(compareNumber);\n    for (i = 0; i < length; i++) {\n      var index = toRemove[i];\n      listeners.splice(index, 1);\n      scopes.splice(index, 1);\n    }\n    toRemove.length = 0;\n  }\n\n  this._insideRaiseEvent = false;\n};\n\n/**\n * A function that removes a listener.\n * @callback Event.RemoveCallback\n */\n/* harmony default export */ __webpack_exports__[\"Z\"] = (Event);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0NTkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBK0I7QUFDSTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsa0ZBQWlCO0FBQ25COztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUywrQ0FBK0M7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxrRkFBaUI7QUFDbkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLFlBQVk7QUFDMUI7QUFDQSxRQUFRLGdFQUFPO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLEtBQUssRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9Db3JlL0V2ZW50LmpzP2ViNjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoZWNrIGZyb20gXCIuL0NoZWNrLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi9kZWZpbmVkLmpzXCI7XG5cbi8qKlxuICogQSBnZW5lcmljIHV0aWxpdHkgY2xhc3MgZm9yIG1hbmFnaW5nIHN1YnNjcmliZXJzIGZvciBhIHBhcnRpY3VsYXIgZXZlbnQuXG4gKiBUaGlzIGNsYXNzIGlzIHVzdWFsbHkgaW5zdGFudGlhdGVkIGluc2lkZSBvZiBhIGNvbnRhaW5lciBjbGFzcyBhbmRcbiAqIGV4cG9zZWQgYXMgYSBwcm9wZXJ0eSBmb3Igb3RoZXJzIHRvIHN1YnNjcmliZSB0by5cbiAqXG4gKiBAYWxpYXMgRXZlbnRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4YW1wbGVcbiAqIE15T2JqZWN0LnByb3RvdHlwZS5teUxpc3RlbmVyID0gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICogICAgIHRoaXMubXlBcmcxQ29weSA9IGFyZzE7XG4gKiAgICAgdGhpcy5teUFyZzJDb3B5ID0gYXJnMjtcbiAqIH1cbiAqXG4gKiB2YXIgbXlPYmplY3RJbnN0YW5jZSA9IG5ldyBNeU9iamVjdCgpO1xuICogdmFyIGV2dCA9IG5ldyBDZXNpdW0uRXZlbnQoKTtcbiAqIGV2dC5hZGRFdmVudExpc3RlbmVyKE15T2JqZWN0LnByb3RvdHlwZS5teUxpc3RlbmVyLCBteU9iamVjdEluc3RhbmNlKTtcbiAqIGV2dC5yYWlzZUV2ZW50KCcxJywgJzInKTtcbiAqIGV2dC5yZW1vdmVFdmVudExpc3RlbmVyKE15T2JqZWN0LnByb3RvdHlwZS5teUxpc3RlbmVyKTtcbiAqL1xuZnVuY3Rpb24gRXZlbnQoKSB7XG4gIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xuICB0aGlzLl9zY29wZXMgPSBbXTtcbiAgdGhpcy5fdG9SZW1vdmUgPSBbXTtcbiAgdGhpcy5faW5zaWRlUmFpc2VFdmVudCA9IGZhbHNlO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhFdmVudC5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGN1cnJlbnRseSBzdWJzY3JpYmVkIHRvIHRoZSBldmVudC5cbiAgICogQG1lbWJlcm9mIEV2ZW50LnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG51bWJlck9mTGlzdGVuZXJzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdGVuZXJzLmxlbmd0aCAtIHRoaXMuX3RvUmVtb3ZlLmxlbmd0aDtcbiAgICB9LFxuICB9LFxufSk7XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIGV2ZW50IGlzIHJhaXNlZC5cbiAqIEFuIG9wdGlvbmFsIHNjb3BlIGNhbiBiZSBwcm92aWRlZCB0byBzZXJ2ZSBhcyB0aGUgPGNvZGU+dGhpczwvY29kZT4gcG9pbnRlclxuICogaW4gd2hpY2ggdGhlIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXMgcmFpc2VkLlxuICogQHBhcmFtIHtPYmplY3R9IFtzY29wZV0gQW4gb3B0aW9uYWwgb2JqZWN0IHNjb3BlIHRvIHNlcnZlIGFzIHRoZSA8Y29kZT50aGlzPC9jb2RlPlxuICogICAgICAgIHBvaW50ZXIgaW4gd2hpY2ggdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZS5cbiAqIEByZXR1cm5zIHtFdmVudC5SZW1vdmVDYWxsYmFja30gQSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVtb3ZlIHRoaXMgZXZlbnQgbGlzdGVuZXIgd2hlbiBpbnZva2VkLlxuICpcbiAqIEBzZWUgRXZlbnQjcmFpc2VFdmVudFxuICogQHNlZSBFdmVudCNyZW1vdmVFdmVudExpc3RlbmVyXG4gKi9cbkV2ZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBzY29wZSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2YuZnVuYyhcImxpc3RlbmVyXCIsIGxpc3RlbmVyKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB0aGlzLl9zY29wZXMucHVzaChzY29wZSk7XG5cbiAgdmFyIGV2ZW50ID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBldmVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyLCBzY29wZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIFVucmVnaXN0ZXJzIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiB0byBiZSB1bnJlZ2lzdGVyZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlXSBUaGUgc2NvcGUgdGhhdCB3YXMgb3JpZ2luYWxseSBwYXNzZWQgdG8gYWRkRXZlbnRMaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQ7IDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgbGlzdGVuZXIgYW5kIHNjb3BlIGFyZSBub3QgcmVnaXN0ZXJlZCB3aXRoIHRoZSBldmVudC5cbiAqXG4gKiBAc2VlIEV2ZW50I2FkZEV2ZW50TGlzdGVuZXJcbiAqIEBzZWUgRXZlbnQjcmFpc2VFdmVudFxuICovXG5FdmVudC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgc2NvcGUpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgQ2hlY2sudHlwZU9mLmZ1bmMoXCJsaXN0ZW5lclwiLCBsaXN0ZW5lcik7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gIHZhciBzY29wZXMgPSB0aGlzLl9zY29wZXM7XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIgJiYgc2NvcGVzW2ldID09PSBzY29wZSkge1xuICAgICAgaW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGlmICh0aGlzLl9pbnNpZGVSYWlzZUV2ZW50KSB7XG4gICAgICAvL0luIG9yZGVyIHRvIGFsbG93IHJlbW92aW5nIGFuIGV2ZW50IHN1YnNjcmlwdGlvbiBmcm9tIHdpdGhpblxuICAgICAgLy9hIGNhbGxiYWNrLCB3ZSBkb24ndCBhY3R1YWxseSByZW1vdmUgdGhlIGl0ZW1zIGhlcmUuICBJbnN0ZWFkXG4gICAgICAvL3JlbWVtYmVyIHRoZSBpbmRleCB0aGV5IGFyZSBhdCBhbmQgdW5kZWZpbmVkIHRoZWlyIHZhbHVlLlxuICAgICAgdGhpcy5fdG9SZW1vdmUucHVzaChpbmRleCk7XG4gICAgICBsaXN0ZW5lcnNbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgc2NvcGVzW2luZGV4XSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBzY29wZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVyKGEsIGIpIHtcbiAgcmV0dXJuIGIgLSBhO1xufVxuXG4vKipcbiAqIFJhaXNlcyB0aGUgZXZlbnQgYnkgY2FsbGluZyBlYWNoIHJlZ2lzdGVyZWQgbGlzdGVuZXIgd2l0aCBhbGwgc3VwcGxpZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBhcmd1bWVudHMgVGhpcyBtZXRob2QgdGFrZXMgYW55IG51bWJlciBvZiBwYXJhbWV0ZXJzIGFuZCBwYXNzZXMgdGhlbSB0aHJvdWdoIHRvIHRoZSBsaXN0ZW5lciBmdW5jdGlvbnMuXG4gKlxuICogQHNlZSBFdmVudCNhZGRFdmVudExpc3RlbmVyXG4gKiBAc2VlIEV2ZW50I3JlbW92ZUV2ZW50TGlzdGVuZXJcbiAqL1xuRXZlbnQucHJvdG90eXBlLnJhaXNlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2luc2lkZVJhaXNlRXZlbnQgPSB0cnVlO1xuXG4gIHZhciBpO1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICB2YXIgc2NvcGVzID0gdGhpcy5fc2NvcGVzO1xuICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgaWYgKGRlZmluZWQobGlzdGVuZXIpKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkoc2NvcGVzW2ldLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIC8vQWN0dWFsbHkgcmVtb3ZlIGl0ZW1zIHJlbW92ZWQgaW4gcmVtb3ZlRXZlbnRMaXN0ZW5lci5cbiAgdmFyIHRvUmVtb3ZlID0gdGhpcy5fdG9SZW1vdmU7XG4gIGxlbmd0aCA9IHRvUmVtb3ZlLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICB0b1JlbW92ZS5zb3J0KGNvbXBhcmVOdW1iZXIpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGluZGV4ID0gdG9SZW1vdmVbaV07XG4gICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHNjb3Blcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICB0b1JlbW92ZS5sZW5ndGggPSAwO1xuICB9XG5cbiAgdGhpcy5faW5zaWRlUmFpc2VFdmVudCA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmVtb3ZlcyBhIGxpc3RlbmVyLlxuICogQGNhbGxiYWNrIEV2ZW50LlJlbW92ZUNhbGxiYWNrXG4gKi9cbmV4cG9ydCBkZWZhdWx0IEV2ZW50O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14459\n")},79539:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n\n/**\n * A convenience object that simplifies the common pattern of attaching event listeners\n * to several events, then removing all those listeners at once later, for example, in\n * a destroy method.\n *\n * @alias EventHelper\n * @constructor\n *\n *\n * @example\n * var helper = new Cesium.EventHelper();\n *\n * helper.add(someObject.event, listener1, this);\n * helper.add(otherObject.event, listener2, this);\n *\n * // later...\n * helper.removeAll();\n *\n * @see Event\n */\nfunction EventHelper() {\n  this._removalFunctions = [];\n}\n\n/**\n * Adds a listener to an event, and records the registration to be cleaned up later.\n *\n * @param {Event} event The event to attach to.\n * @param {Function} listener The function to be executed when the event is raised.\n * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\n *        pointer in which the listener function will execute.\n * @returns {EventHelper.RemoveCallback} A function that will remove this event listener when invoked.\n *\n * @see Event#addEventListener\n */\nEventHelper.prototype.add = function (event, listener, scope) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(event)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("event is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  var removalFunction = event.addEventListener(listener, scope);\n  this._removalFunctions.push(removalFunction);\n\n  var that = this;\n  return function () {\n    removalFunction();\n    var removalFunctions = that._removalFunctions;\n    removalFunctions.splice(removalFunctions.indexOf(removalFunction), 1);\n  };\n};\n\n/**\n * Unregisters all previously added listeners.\n *\n * @see Event#removeEventListener\n */\nEventHelper.prototype.removeAll = function () {\n  var removalFunctions = this._removalFunctions;\n  for (var i = 0, len = removalFunctions.length; i < len; ++i) {\n    removalFunctions[i]();\n  }\n  removalFunctions.length = 0;\n};\n\n/**\n * A function that removes a listener.\n * @callback EventHelper.RemoveCallback\n */\n/* harmony default export */ __webpack_exports__["Z"] = (EventHelper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1MzkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBbUM7QUFDYzs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGdFQUFPO0FBQ2QsY0FBYyxtRUFBYztBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsU0FBUztBQUMxRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLFdBQVcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9Db3JlL0V2ZW50SGVscGVyLmpzP2VhMDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4vZGVmaW5lZC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuL0RldmVsb3BlckVycm9yLmpzXCI7XG5cbi8qKlxuICogQSBjb252ZW5pZW5jZSBvYmplY3QgdGhhdCBzaW1wbGlmaWVzIHRoZSBjb21tb24gcGF0dGVybiBvZiBhdHRhY2hpbmcgZXZlbnQgbGlzdGVuZXJzXG4gKiB0byBzZXZlcmFsIGV2ZW50cywgdGhlbiByZW1vdmluZyBhbGwgdGhvc2UgbGlzdGVuZXJzIGF0IG9uY2UgbGF0ZXIsIGZvciBleGFtcGxlLCBpblxuICogYSBkZXN0cm95IG1ldGhvZC5cbiAqXG4gKiBAYWxpYXMgRXZlbnRIZWxwZXJcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIGhlbHBlciA9IG5ldyBDZXNpdW0uRXZlbnRIZWxwZXIoKTtcbiAqXG4gKiBoZWxwZXIuYWRkKHNvbWVPYmplY3QuZXZlbnQsIGxpc3RlbmVyMSwgdGhpcyk7XG4gKiBoZWxwZXIuYWRkKG90aGVyT2JqZWN0LmV2ZW50LCBsaXN0ZW5lcjIsIHRoaXMpO1xuICpcbiAqIC8vIGxhdGVyLi4uXG4gKiBoZWxwZXIucmVtb3ZlQWxsKCk7XG4gKlxuICogQHNlZSBFdmVudFxuICovXG5mdW5jdGlvbiBFdmVudEhlbHBlcigpIHtcbiAgdGhpcy5fcmVtb3ZhbEZ1bmN0aW9ucyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZHMgYSBsaXN0ZW5lciB0byBhbiBldmVudCwgYW5kIHJlY29yZHMgdGhlIHJlZ2lzdHJhdGlvbiB0byBiZSBjbGVhbmVkIHVwIGxhdGVyLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBhdHRhY2ggdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXMgcmFpc2VkLlxuICogQHBhcmFtIHtPYmplY3R9IFtzY29wZV0gQW4gb3B0aW9uYWwgb2JqZWN0IHNjb3BlIHRvIHNlcnZlIGFzIHRoZSA8Y29kZT50aGlzPC9jb2RlPlxuICogICAgICAgIHBvaW50ZXIgaW4gd2hpY2ggdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZS5cbiAqIEByZXR1cm5zIHtFdmVudEhlbHBlci5SZW1vdmVDYWxsYmFja30gQSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVtb3ZlIHRoaXMgZXZlbnQgbGlzdGVuZXIgd2hlbiBpbnZva2VkLlxuICpcbiAqIEBzZWUgRXZlbnQjYWRkRXZlbnRMaXN0ZW5lclxuICovXG5FdmVudEhlbHBlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGV2ZW50LCBsaXN0ZW5lciwgc2NvcGUpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKCFkZWZpbmVkKGV2ZW50KSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcImV2ZW50IGlzIHJlcXVpcmVkXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciByZW1vdmFsRnVuY3Rpb24gPSBldmVudC5hZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyLCBzY29wZSk7XG4gIHRoaXMuX3JlbW92YWxGdW5jdGlvbnMucHVzaChyZW1vdmFsRnVuY3Rpb24pO1xuXG4gIHZhciB0aGF0ID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmFsRnVuY3Rpb24oKTtcbiAgICB2YXIgcmVtb3ZhbEZ1bmN0aW9ucyA9IHRoYXQuX3JlbW92YWxGdW5jdGlvbnM7XG4gICAgcmVtb3ZhbEZ1bmN0aW9ucy5zcGxpY2UocmVtb3ZhbEZ1bmN0aW9ucy5pbmRleE9mKHJlbW92YWxGdW5jdGlvbiksIDEpO1xuICB9O1xufTtcblxuLyoqXG4gKiBVbnJlZ2lzdGVycyBhbGwgcHJldmlvdXNseSBhZGRlZCBsaXN0ZW5lcnMuXG4gKlxuICogQHNlZSBFdmVudCNyZW1vdmVFdmVudExpc3RlbmVyXG4gKi9cbkV2ZW50SGVscGVyLnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZW1vdmFsRnVuY3Rpb25zID0gdGhpcy5fcmVtb3ZhbEZ1bmN0aW9ucztcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJlbW92YWxGdW5jdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICByZW1vdmFsRnVuY3Rpb25zW2ldKCk7XG4gIH1cbiAgcmVtb3ZhbEZ1bmN0aW9ucy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmVtb3ZlcyBhIGxpc3RlbmVyLlxuICogQGNhbGxiYWNrIEV2ZW50SGVscGVyLlJlbW92ZUNhbGxiYWNrXG4gKi9cbmV4cG9ydCBkZWZhdWx0IEV2ZW50SGVscGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///79539\n')}}]);