"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[7105],{50442:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__[\"Z\"] = (\"uniform sampler2D u_noiseTexture;\\n\\\nuniform float u_noiseTextureLength;\\n\\\nuniform float u_noiseDetail;\\n\\\nvarying vec2 v_offset;\\n\\\nvarying vec3 v_maximumSize;\\n\\\nvarying float v_slice;\\n\\\nvarying float v_brightness;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nfloat noiseTextureLengthSquared = u_noiseTextureLength * u_noiseTextureLength;\\n\\\nvec3 dimensions = vec3(noiseTextureLengthSquared,\\n\\\n                       u_noiseTextureLength,\\n\\\n                       u_noiseTextureLength);\\n\\\n\\n\\\nvec4 sampleNoiseTexture(vec3 position) {\\n\\\n    vec3 recenteredPos = position + vec3(u_noiseTextureLength / 2.0);\\n\\\n    vec3 lerpValue = fract(recenteredPos);\\n\\\n\\n\\\n    vec3 slice = floor(recenteredPos);\\n\\\n    vec3 slice0 = wrapVec(slice, u_noiseTextureLength);\\n\\\n    vec3 slice1 = wrapVec(slice0 + vec3(1.0), u_noiseTextureLength);\\n\\\n    slice0 /= dimensions;\\n\\\n    slice1 /= dimensions;\\n\\\n\\n\\\n    float u00 = slice0.x + slice0.z;\\n\\\n    float u01 = slice0.x + slice1.z;\\n\\\n    float u10 = slice1.x + slice0.z;\\n\\\n    float u11 = slice1.x + slice1.z;\\n\\\n\\n\\\n    vec2 uv000 = vec2(u00, slice0.y);\\n\\\n    vec2 uv001 = vec2(u01, slice0.y);\\n\\\n    vec2 uv010 = vec2(u00, slice1.y);\\n\\\n    vec2 uv011 = vec2(u01, slice1.y);\\n\\\n    vec2 uv100 = vec2(u10, slice0.y);\\n\\\n    vec2 uv101 = vec2(u11, slice0.y);\\n\\\n    vec2 uv110 = vec2(u10, slice1.y);\\n\\\n    vec2 uv111 = vec2(u11, slice1.y);\\n\\\n\\n\\\n    vec4 sample000 = texture2D(u_noiseTexture, uv000);\\n\\\n    vec4 sample001 = texture2D(u_noiseTexture, uv001);\\n\\\n    vec4 sample010 = texture2D(u_noiseTexture, uv010);\\n\\\n    vec4 sample011 = texture2D(u_noiseTexture, uv011);\\n\\\n    vec4 sample100 = texture2D(u_noiseTexture, uv100);\\n\\\n    vec4 sample101 = texture2D(u_noiseTexture, uv101);\\n\\\n    vec4 sample110 = texture2D(u_noiseTexture, uv110);\\n\\\n    vec4 sample111 = texture2D(u_noiseTexture, uv111);\\n\\\n\\n\\\n    vec4 xLerp00 = mix(sample000, sample100, lerpValue.x);\\n\\\n    vec4 xLerp01 = mix(sample001, sample101, lerpValue.x);\\n\\\n    vec4 xLerp10 = mix(sample010, sample110, lerpValue.x);\\n\\\n    vec4 xLerp11 = mix(sample011, sample111, lerpValue.x);\\n\\\n\\n\\\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\\n\\\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\\n\\\n    return mix(yLerp0, yLerp1, lerpValue.z);\\n\\\n}\\n\\\n\\n\\\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\\n\\\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\\n\\\n                     out vec3 point, out vec3 normal) {  \\n\\\n    float A = dot(dir, dir);\\n\\\n    float B = dot(origin, dir);\\n\\\n    float C = dot(origin, origin) - 0.25;\\n\\\n    float discriminant = (B * B) - (A * C);\\n\\\n    if(discriminant < 0.0) {\\n\\\n        return false;\\n\\\n    }\\n\\\n    float root = sqrt(discriminant);\\n\\\n    float t = (-B - root) / A;\\n\\\n    if(t < 0.0) {\\n\\\n        t = (-B + root) / A;\\n\\\n    }\\n\\\n    point = origin + t * dir;\\n\\\n    \\n\\\n    if(slice >= 0.0) {\\n\\\n        point.z = (slice / 2.0) - 0.5;\\n\\\n        if(length(point) > 0.5) {\\n\\\n            return false;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    normal = normalize(point);\\n\\\n    point -= czm_epsilon2 * normal;\\n\\\n\\n\\\n    return true;\\n\\\n}\\n\\\n\\n\\\n// Transforms the ray origin and direction into unit sphere space,\\n\\\n// then transforms the result back into the ellipsoid's space.\\n\\\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\\n\\\n                        out vec3 point, out vec3 normal) {\\n\\\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\\n\\\n        return false;\\n\\\n    }\\n\\\n\\n\\\n    vec3 o = (origin - center) / scale;\\n\\\n    vec3 d = dir / scale;\\n\\\n    vec3 p, n;\\n\\\n    bool intersected = intersectSphere(o, d, slice, p, n);\\n\\\n    if(intersected) {\\n\\\n        point = (p * scale) + center;\\n\\\n        normal = n;\\n\\\n    }\\n\\\n    return intersected;\\n\\\n}\\n\\\n\\n\\\n// Assume that if phase shift is being called for octave i,\\n\\\n// the frequency is of i - 1. This saves us from doing extra\\n\\\n// division / multiplication operations.\\n\\\nvec2 phaseShift2D(vec2 p, vec2 freq) {\\n\\\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx); \\n\\\n}\\n\\\n\\n\\\nvec2 phaseShift3D(vec3 p, vec2 freq) {\\n\\\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\\n\\\n}\\n\\\n\\n\\\n// The cloud texture function derived from Gardner's 1985 paper,\\n\\\n// \\\"Visual Simulation of Clouds.\\\"\\n\\\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\\n\\\nconst float T0    = 0.6;  // contrast of the texture pattern\\n\\\nconst float k     = 0.1;  // computed to produce a maximum value of 1 \\n\\\nconst float C0    = 0.8;  // coefficient\\n\\\nconst float FX0   = 0.6;  // frequency X\\n\\\nconst float FY0   = 0.6;  // frequency Y\\n\\\nconst int octaves = 5;\\n\\\n\\n\\\nfloat T(vec3 point) {\\n\\\n    vec2 sum = vec2(0.0);\\n\\\n    float Ci = C0;\\n\\\n    vec2 FXY = vec2(FX0, FY0);\\n\\\n    vec2 PXY = vec2(0.0);\\n\\\n    for(int i = 1; i <= octaves; i++) {\\n\\\n        PXY = phaseShift3D(point, FXY);\\n\\\n        Ci *= 0.707;\\n\\\n        FXY *= 2.0;\\n\\\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\\n\\\n        sum += Ci * sinTerm + vec2(T0);\\n\\\n    }\\n\\\n    return k * sum.x * sum.y;\\n\\\n}\\n\\\n\\n\\\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light, \\n\\\nconst float t = 0.4;  // fraction of texture shading \\n\\\nconst float s = 0.25; // fraction of specular reflection\\n\\\n\\n\\\nfloat I(float Id, float Is, float It) {\\n\\\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\\n\\\n}\\n\\\n\\n\\\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\\n\\\n\\n\\\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\\n\\\n               float brightness) {\\n\\\n    vec3 cloudPoint, cloudNormal;\\n\\\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\\n\\\n                            cloudPoint, cloudNormal)) {\\n\\\n        return vec4(0.0);\\n\\\n    }\\n\\\n\\n\\\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\\n\\\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\\n\\\n    float It = T(cloudPoint);                                 // texture function\\n\\\n    float intensity = I(Id, Is, It);\\n\\\n    vec3 color = intensity * clamp(brightness, 0.1, 1.0) * vec3(1.0);\\n\\\n\\n\\\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\\n\\\n    float W = noise.x;\\n\\\n    float W2 = noise.y;\\n\\\n    float W3 = noise.z;\\n\\\n\\n\\\n    // The dot product between the cloud's normal and the ray's direction is greatest\\n\\\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\\n\\\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\\n\\\n    // so that no harsh lines appear.\\n\\\n    \\n\\\n    // The first (and biggest) layer of worley noise is then subtracted from this.\\n\\\n    // The final result is scaled up so that the base cloud is not too translucent.\\n\\\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\\n\\\n    float TR = pow(ndDot, 3.0) - W; // translucency\\n\\\n    TR *= 1.3;\\n\\\n    \\n\\\n    // Subtracting the second and third layers of worley noise is more complicated.\\n\\\n    // If these layers of noise were simply subtracted from the current translucency,\\n\\\n    // the shape derived from the first layer of noise would be completely deleted.\\n\\\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\\n\\\n    // However, because the edges of the ellipsoid were already blurred away, mapping\\n\\\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\\n\\\n    // The value of (0.5 - ndDot) provides the best compromise.\\n\\\n    float minusDot = 0.5 - ndDot;\\n\\\n\\n\\\n    // Even with the previous calculation, subtracting the second layer of wnoise\\n\\\n    // erode too much of the cloud. The addition of it, however, will detailed\\n\\\n    // volume to the cloud. As long as the noise is only added and not subtracted,\\n\\\n    // the results are aesthetically pleasing.\\n\\\n    \\n\\\n    // The minusDot product is mapped in a way that it is larger at the edges of\\n\\\n    // the ellipsoid, so a subtraction and min operation are used instead of\\n\\\n    // an addition and max one.\\n\\\n    TR -= min(minusDot * W2, 0.0);\\n\\\n\\n\\\n    // The third level of worley noise is subtracted from the result, with some\\n\\\n    // modifications. First, a scalar is added to minusDot so that the noise\\n\\\n    // starts affecting the shape farther away from the center of the ellipsoid's\\n\\\n    // surface. Then, it is scaled down so its impact is not too intense.\\n\\\n    TR -= 0.8 * (minusDot + 0.25) * W3;\\n\\\n\\n\\\n    // The texture function's shading does not correlate with the shape of the cloud\\n\\\n    // produced by the layers of noise, so an extra shading scalar is calculated.\\n\\\n    // The darkest areas of the cloud are assigned to be where the noise erodes\\n\\\n    // the cloud the most. This is then interpolated based on the translucency\\n\\\n    // and the diffuse shading term of that point in the cloud.\\n\\\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\\n\\\n\\n\\\n    // To avoid values that are too dark, this scalar is increased by a small amount\\n\\\n    // and clamped so it never goes to zero.\\n\\\n    shading = clamp(shading + 0.2, 0.3, 1.0);\\n\\\n\\n\\\n    // Finally, the contrast of the cloud's color is increased.\\n\\\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\\n\\\n    return vec4(finalColor, clamp(TR, 0.0, 1.0));\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n#ifdef DEBUG_BILLBOARDS\\n\\\n    gl_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\\n\\\n#endif\\n\\\n    \\n\\\n    // To avoid calculations with high values,\\n\\\n    // we raycast from an arbitrarily smaller space.\\n\\\n    vec2 coordinate = v_maximumSize.xy * v_offset;\\n\\\n\\n\\\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\\n\\\n    vec3 ellipsoidCenter = vec3(0.0);\\n\\\n\\n\\\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\\n\\\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\\n\\\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\\n\\\n    vec3 rayOrigin = eye;\\n\\\n\\n\\\n#ifdef DEBUG_ELLIPSOIDS\\n\\\n    vec3 point, normal;\\n\\\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\\n\\\n                          point, normal)) {\\n\\\n        gl_FragColor = v_brightness * vec4(1.0);\\n\\\n    }\\n\\\n#else\\n\\\n#ifndef DEBUG_BILLBOARDS\\n\\\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\\n\\\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);    \\n\\\n    if(cloud.w < 0.01) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    gl_FragColor = cloud;\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50442\n")},16999:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("#ifdef INSTANCED\\n\\\nattribute vec2 direction;\\n\\\n#endif\\n\\\nattribute vec4 positionHighAndScaleX;\\n\\\nattribute vec4 positionLowAndScaleY;\\n\\\nattribute vec4 packedAttribute0;\\n\\\nattribute vec4 packedAttribute1;\\n\\\n\\n\\\nvarying vec2 v_offset;\\n\\\nvarying vec3 v_maximumSize;\\n\\\nvarying float v_slice;\\n\\\nvarying float v_brightness;\\n\\\n\\n\\\nvoid main() {\\n\\\n    // Unpack attributes.\\n\\\n    vec3 positionHigh = positionHighAndScaleX.xyz;\\n\\\n    vec3 positionLow = positionLowAndScaleY.xyz;\\n\\\n    vec2 scale = vec2(positionHighAndScaleX.w, positionLowAndScaleY.w);\\n\\\n\\n\\\n    float show = packedAttribute0.x;\\n\\\n    float brightness = packedAttribute0.y;\\n\\\n    vec2 coordinates = packedAttribute0.wz;\\n\\\n    vec3 maximumSize = packedAttribute1.xyz;\\n\\\n    float slice = packedAttribute1.w;\\n\\\n\\n\\\n#ifdef INSTANCED\\n\\\n    vec2 dir = direction;\\n\\\n#else\\n\\\n    vec2 dir = coordinates;\\n\\\n#endif\\n\\\n\\n\\\n    vec2 offset = dir - vec2(0.5, 0.5);\\n\\\n    vec2 scaledOffset = scale * offset;\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n    positionEC.xy += scaledOffset;\\n\\\n    \\n\\\n    positionEC.xyz *= show;\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n\\n\\\n    v_offset = offset;\\n\\\n    v_maximumSize = maximumSize;\\n\\\n    v_slice = slice;\\n\\\n    v_brightness = brightness;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5OTkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZTtBQUNmLHlCQUF5QjtBQUN6QjtBQUNBLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7QUFDM0Isc0JBQXNCO0FBQ3RCLDJCQUEyQjtBQUMzQjtBQUNBLGFBQWE7QUFDYjtBQUNBLGtEQUFrRDtBQUNsRCxnREFBZ0Q7QUFDaEQsdUVBQXVFO0FBQ3ZFO0FBQ0Esb0NBQW9DO0FBQ3BDLDBDQUEwQztBQUMxQywyQ0FBMkM7QUFDM0MsNENBQTRDO0FBQzVDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsdUNBQXVDO0FBQ3ZDLG1FQUFtRTtBQUNuRSxxREFBcUQ7QUFDckQsa0NBQWtDO0FBQ2xDO0FBQ0EsMkJBQTJCO0FBQzNCLDhDQUE4QztBQUM5QztBQUNBLHNCQUFzQjtBQUN0QixnQ0FBZ0M7QUFDaEMsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5QixDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvQ2xvdWRDb2xsZWN0aW9uVlMuanM/ZWE0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCIjaWZkZWYgSU5TVEFOQ0VEXFxuXFxcbmF0dHJpYnV0ZSB2ZWMyIGRpcmVjdGlvbjtcXG5cXFxuI2VuZGlmXFxuXFxcbmF0dHJpYnV0ZSB2ZWM0IHBvc2l0aW9uSGlnaEFuZFNjYWxlWDtcXG5cXFxuYXR0cmlidXRlIHZlYzQgcG9zaXRpb25Mb3dBbmRTY2FsZVk7XFxuXFxcbmF0dHJpYnV0ZSB2ZWM0IHBhY2tlZEF0dHJpYnV0ZTA7XFxuXFxcbmF0dHJpYnV0ZSB2ZWM0IHBhY2tlZEF0dHJpYnV0ZTE7XFxuXFxcblxcblxcXG52YXJ5aW5nIHZlYzIgdl9vZmZzZXQ7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X21heGltdW1TaXplO1xcblxcXG52YXJ5aW5nIGZsb2F0IHZfc2xpY2U7XFxuXFxcbnZhcnlpbmcgZmxvYXQgdl9icmlnaHRuZXNzO1xcblxcXG5cXG5cXFxudm9pZCBtYWluKCkge1xcblxcXG4gICAgLy8gVW5wYWNrIGF0dHJpYnV0ZXMuXFxuXFxcbiAgICB2ZWMzIHBvc2l0aW9uSGlnaCA9IHBvc2l0aW9uSGlnaEFuZFNjYWxlWC54eXo7XFxuXFxcbiAgICB2ZWMzIHBvc2l0aW9uTG93ID0gcG9zaXRpb25Mb3dBbmRTY2FsZVkueHl6O1xcblxcXG4gICAgdmVjMiBzY2FsZSA9IHZlYzIocG9zaXRpb25IaWdoQW5kU2NhbGVYLncsIHBvc2l0aW9uTG93QW5kU2NhbGVZLncpO1xcblxcXG5cXG5cXFxuICAgIGZsb2F0IHNob3cgPSBwYWNrZWRBdHRyaWJ1dGUwLng7XFxuXFxcbiAgICBmbG9hdCBicmlnaHRuZXNzID0gcGFja2VkQXR0cmlidXRlMC55O1xcblxcXG4gICAgdmVjMiBjb29yZGluYXRlcyA9IHBhY2tlZEF0dHJpYnV0ZTAud3o7XFxuXFxcbiAgICB2ZWMzIG1heGltdW1TaXplID0gcGFja2VkQXR0cmlidXRlMS54eXo7XFxuXFxcbiAgICBmbG9hdCBzbGljZSA9IHBhY2tlZEF0dHJpYnV0ZTEudztcXG5cXFxuXFxuXFxcbiNpZmRlZiBJTlNUQU5DRURcXG5cXFxuICAgIHZlYzIgZGlyID0gZGlyZWN0aW9uO1xcblxcXG4jZWxzZVxcblxcXG4gICAgdmVjMiBkaXIgPSBjb29yZGluYXRlcztcXG5cXFxuI2VuZGlmXFxuXFxcblxcblxcXG4gICAgdmVjMiBvZmZzZXQgPSBkaXIgLSB2ZWMyKDAuNSwgMC41KTtcXG5cXFxuICAgIHZlYzIgc2NhbGVkT2Zmc2V0ID0gc2NhbGUgKiBvZmZzZXQ7XFxuXFxcbiAgICB2ZWM0IHAgPSBjem1fdHJhbnNsYXRlUmVsYXRpdmVUb0V5ZShwb3NpdGlvbkhpZ2gsIHBvc2l0aW9uTG93KTtcXG5cXFxuICAgIHZlYzQgcG9zaXRpb25FQyA9IGN6bV9tb2RlbFZpZXdSZWxhdGl2ZVRvRXllICogcDtcXG5cXFxuICAgIHBvc2l0aW9uRUMueHkgKz0gc2NhbGVkT2Zmc2V0O1xcblxcXG4gICAgXFxuXFxcbiAgICBwb3NpdGlvbkVDLnh5eiAqPSBzaG93O1xcblxcXG4gICAgZ2xfUG9zaXRpb24gPSBjem1fcHJvamVjdGlvbiAqIHBvc2l0aW9uRUM7XFxuXFxcblxcblxcXG4gICAgdl9vZmZzZXQgPSBvZmZzZXQ7XFxuXFxcbiAgICB2X21heGltdW1TaXplID0gbWF4aW11bVNpemU7XFxuXFxcbiAgICB2X3NsaWNlID0gc2xpY2U7XFxuXFxcbiAgICB2X2JyaWdodG5lc3MgPSBicmlnaHRuZXNzO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16999\n')},12444:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("uniform float u_noiseTextureLength;\\n\\\nuniform float u_noiseDetail;\\n\\\nuniform vec3 u_noiseOffset;\\n\\\nvarying vec2 v_position;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nvec3 random3(vec3 p) {\\n\\\n    float dot1 = dot(p, vec3(127.1, 311.7, 932.8));\\n\\\n    float dot2 = dot(p, vec3(269.5, 183.3, 421.4));\\n\\\n    return fract(vec3(sin(dot1 - dot2), cos(dot1 * dot2), dot1 * dot2));\\n\\\n}\\n\\\n\\n\\\n// Frequency corresponds to cell size.\\n\\\n// The higher the frequency, the smaller the cell size.\\n\\\nvec3 getWorleyCellPoint(vec3 centerCell, vec3 offset, float freq) {\\n\\\n    vec3 cell = centerCell + offset;\\n\\\n    cell = wrapVec(cell, u_noiseTextureLength / u_noiseDetail);\\n\\\n    cell += floor(u_noiseOffset / u_noiseDetail);\\n\\\n    vec3 p = offset + random3(cell);\\n\\\n    return p;\\n\\\n}\\n\\\n\\n\\\nfloat worleyNoise(vec3 p, float freq) {\\n\\\n    vec3 centerCell = floor(p * freq);\\n\\\n    vec3 pointInCell = fract(p * freq);\\n\\\n    float shortestDistance = 1000.0;\\n\\\n\\n\\\n    for(float z = -1.0; z <= 1.0; z++) {\\n\\\n        for(float y = -1.0; y <= 1.0; y++) {\\n\\\n            for(float x = -1.0; x <= 1.0; x++) {\\n\\\n                vec3 offset = vec3(x, y, z);\\n\\\n                vec3 point = getWorleyCellPoint(centerCell, offset, freq);\\n\\\n\\n\\\n                float distance = length(pointInCell - point);\\n\\\n                if(distance < shortestDistance) {\\n\\\n                    shortestDistance = distance;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    return shortestDistance;\\n\\\n}\\n\\\n\\n\\\nconst float MAX_FBM_ITERATIONS = 10.0;\\n\\\n\\n\\\nfloat worleyFBMNoise(vec3 p, float octaves, float scale) {\\n\\\n    float noise = 0.0;\\n\\\n    float freq = 1.0;\\n\\\n    float persistence = 0.625;\\n\\\n    for(float i = 0.0; i < MAX_FBM_ITERATIONS; i++) {\\n\\\n        if(i >= octaves) {\\n\\\n            break;\\n\\\n        }\\n\\\n        \\n\\\n        noise += worleyNoise(p * scale, freq * scale) * persistence;\\n\\\n        persistence *= 0.5;\\n\\\n        freq *= 2.0;\\n\\\n    }\\n\\\n    return noise;\\n\\\n}\\n\\\n\\n\\\nvoid main() {   \\n\\\n    float z = floor(v_position.x / u_noiseTextureLength);\\n\\\n    float x = v_position.x - z * u_noiseTextureLength;\\n\\\n    vec3 position = vec3(x, v_position.y, z);\\n\\\n    position /= u_noiseDetail;\\n\\\n    float worley0 = clamp(worleyFBMNoise(position, 3.0, 1.0), 0.0, 1.0);\\n\\\n    float worley1 = clamp(worleyFBMNoise(position, 3.0, 2.0), 0.0, 1.0);\\n\\\n    float worley2 = clamp(worleyFBMNoise(position, 3.0, 3.0), 0.0, 1.0);\\n\\\n    gl_FragColor = vec4(worley0, worley1, worley2, 1.0);\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0NDQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSxvQ0FBb0M7QUFDbkQsNEJBQTRCO0FBQzVCLDJCQUEyQjtBQUMzQix3QkFBd0I7QUFDeEI7QUFDQSw0Q0FBNEM7QUFDNUMscUJBQXFCO0FBQ3JCLG9DQUFvQztBQUNwQyxvREFBb0Q7QUFDcEQsd0RBQXdEO0FBQ3hELEtBQUs7QUFDTCxtQ0FBbUM7QUFDbkMsQ0FBQztBQUNEO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsQ0FBQztBQUNEO0FBQ0Esc0JBQXNCO0FBQ3RCLG1EQUFtRDtBQUNuRCxtREFBbUQ7QUFDbkQsd0VBQXdFO0FBQ3hFLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkUsb0NBQW9DO0FBQ3BDLCtEQUErRDtBQUMvRCxpREFBaUQ7QUFDakQsb0NBQW9DO0FBQ3BDLGFBQWE7QUFDYixDQUFDO0FBQ0Q7QUFDQSx1Q0FBdUM7QUFDdkMsc0NBQXNDO0FBQ3RDLHVDQUF1QztBQUN2QyxvQ0FBb0M7QUFDcEM7QUFDQSx3QkFBd0IsVUFBVSxNQUFNO0FBQ3hDLDRCQUE0QixVQUFVLE1BQU07QUFDNUMsZ0NBQWdDLFVBQVUsTUFBTTtBQUNoRCw0Q0FBNEM7QUFDNUMsMEVBQTBFO0FBQzFFO0FBQ0EsNkRBQTZEO0FBQzdELGlEQUFpRDtBQUNqRCxnREFBZ0Q7QUFDaEQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsNEJBQTRCO0FBQzVCLENBQUM7QUFDRDtBQUNBLHNDQUFzQztBQUN0QztBQUNBLDBEQUEwRDtBQUMxRCxzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCLDhCQUE4QjtBQUM5Qix1QkFBdUIsd0JBQXdCLE1BQU07QUFDckQsMEJBQTBCO0FBQzFCLGtCQUFrQjtBQUNsQixTQUFTO0FBQ1Q7QUFDQSxvRUFBb0U7QUFDcEUsMkJBQTJCO0FBQzNCLG9CQUFvQjtBQUNwQixLQUFLO0FBQ0wsaUJBQWlCO0FBQ2pCLENBQUM7QUFDRDtBQUNBLGdCQUFnQjtBQUNoQix5REFBeUQ7QUFDekQsc0RBQXNEO0FBQ3RELDZDQUE2QztBQUM3Qyw4QkFBOEI7QUFDOUIsd0VBQXdFO0FBQ3hFLHdFQUF3RTtBQUN4RSx3RUFBd0U7QUFDeEUsd0RBQXdEO0FBQ3hELENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9DbG91ZE5vaXNlRlMuanM/Mzk5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJ1bmlmb3JtIGZsb2F0IHVfbm9pc2VUZXh0dXJlTGVuZ3RoO1xcblxcXG51bmlmb3JtIGZsb2F0IHVfbm9pc2VEZXRhaWw7XFxuXFxcbnVuaWZvcm0gdmVjMyB1X25vaXNlT2Zmc2V0O1xcblxcXG52YXJ5aW5nIHZlYzIgdl9wb3NpdGlvbjtcXG5cXFxuXFxuXFxcbmZsb2F0IHdyYXAoZmxvYXQgdmFsdWUsIGZsb2F0IHJhbmdlTGVuZ3RoKSB7XFxuXFxcbiAgICBpZih2YWx1ZSA8IDAuMCkge1xcblxcXG4gICAgICAgIGZsb2F0IGFic1ZhbHVlID0gYWJzKHZhbHVlKTtcXG5cXFxuICAgICAgICBmbG9hdCBtb2RWYWx1ZSA9IG1vZChhYnNWYWx1ZSwgcmFuZ2VMZW5ndGgpO1xcblxcXG4gICAgICAgIHJldHVybiBtb2QocmFuZ2VMZW5ndGggLSBtb2RWYWx1ZSwgcmFuZ2VMZW5ndGgpO1xcblxcXG4gICAgfVxcblxcXG4gICAgcmV0dXJuIG1vZCh2YWx1ZSwgcmFuZ2VMZW5ndGgpO1xcblxcXG59XFxuXFxcblxcblxcXG52ZWMzIHdyYXBWZWModmVjMyB2YWx1ZSwgZmxvYXQgcmFuZ2VMZW5ndGgpIHtcXG5cXFxuICAgIHJldHVybiB2ZWMzKHdyYXAodmFsdWUueCwgcmFuZ2VMZW5ndGgpLFxcblxcXG4gICAgICAgICAgICAgICAgd3JhcCh2YWx1ZS55LCByYW5nZUxlbmd0aCksXFxuXFxcbiAgICAgICAgICAgICAgICB3cmFwKHZhbHVlLnosIHJhbmdlTGVuZ3RoKSk7XFxuXFxcbn1cXG5cXFxuXFxuXFxcbnZlYzMgcmFuZG9tMyh2ZWMzIHApIHtcXG5cXFxuICAgIGZsb2F0IGRvdDEgPSBkb3QocCwgdmVjMygxMjcuMSwgMzExLjcsIDkzMi44KSk7XFxuXFxcbiAgICBmbG9hdCBkb3QyID0gZG90KHAsIHZlYzMoMjY5LjUsIDE4My4zLCA0MjEuNCkpO1xcblxcXG4gICAgcmV0dXJuIGZyYWN0KHZlYzMoc2luKGRvdDEgLSBkb3QyKSwgY29zKGRvdDEgKiBkb3QyKSwgZG90MSAqIGRvdDIpKTtcXG5cXFxufVxcblxcXG5cXG5cXFxuLy8gRnJlcXVlbmN5IGNvcnJlc3BvbmRzIHRvIGNlbGwgc2l6ZS5cXG5cXFxuLy8gVGhlIGhpZ2hlciB0aGUgZnJlcXVlbmN5LCB0aGUgc21hbGxlciB0aGUgY2VsbCBzaXplLlxcblxcXG52ZWMzIGdldFdvcmxleUNlbGxQb2ludCh2ZWMzIGNlbnRlckNlbGwsIHZlYzMgb2Zmc2V0LCBmbG9hdCBmcmVxKSB7XFxuXFxcbiAgICB2ZWMzIGNlbGwgPSBjZW50ZXJDZWxsICsgb2Zmc2V0O1xcblxcXG4gICAgY2VsbCA9IHdyYXBWZWMoY2VsbCwgdV9ub2lzZVRleHR1cmVMZW5ndGggLyB1X25vaXNlRGV0YWlsKTtcXG5cXFxuICAgIGNlbGwgKz0gZmxvb3IodV9ub2lzZU9mZnNldCAvIHVfbm9pc2VEZXRhaWwpO1xcblxcXG4gICAgdmVjMyBwID0gb2Zmc2V0ICsgcmFuZG9tMyhjZWxsKTtcXG5cXFxuICAgIHJldHVybiBwO1xcblxcXG59XFxuXFxcblxcblxcXG5mbG9hdCB3b3JsZXlOb2lzZSh2ZWMzIHAsIGZsb2F0IGZyZXEpIHtcXG5cXFxuICAgIHZlYzMgY2VudGVyQ2VsbCA9IGZsb29yKHAgKiBmcmVxKTtcXG5cXFxuICAgIHZlYzMgcG9pbnRJbkNlbGwgPSBmcmFjdChwICogZnJlcSk7XFxuXFxcbiAgICBmbG9hdCBzaG9ydGVzdERpc3RhbmNlID0gMTAwMC4wO1xcblxcXG5cXG5cXFxuICAgIGZvcihmbG9hdCB6ID0gLTEuMDsgeiA8PSAxLjA7IHorKykge1xcblxcXG4gICAgICAgIGZvcihmbG9hdCB5ID0gLTEuMDsgeSA8PSAxLjA7IHkrKykge1xcblxcXG4gICAgICAgICAgICBmb3IoZmxvYXQgeCA9IC0xLjA7IHggPD0gMS4wOyB4KyspIHtcXG5cXFxuICAgICAgICAgICAgICAgIHZlYzMgb2Zmc2V0ID0gdmVjMyh4LCB5LCB6KTtcXG5cXFxuICAgICAgICAgICAgICAgIHZlYzMgcG9pbnQgPSBnZXRXb3JsZXlDZWxsUG9pbnQoY2VudGVyQ2VsbCwgb2Zmc2V0LCBmcmVxKTtcXG5cXFxuXFxuXFxcbiAgICAgICAgICAgICAgICBmbG9hdCBkaXN0YW5jZSA9IGxlbmd0aChwb2ludEluQ2VsbCAtIHBvaW50KTtcXG5cXFxuICAgICAgICAgICAgICAgIGlmKGRpc3RhbmNlIDwgc2hvcnRlc3REaXN0YW5jZSkge1xcblxcXG4gICAgICAgICAgICAgICAgICAgIHNob3J0ZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcXG5cXFxuICAgICAgICAgICAgICAgIH1cXG5cXFxuICAgICAgICAgICAgfVxcblxcXG4gICAgICAgIH1cXG5cXFxuICAgIH1cXG5cXFxuXFxuXFxcbiAgICByZXR1cm4gc2hvcnRlc3REaXN0YW5jZTtcXG5cXFxufVxcblxcXG5cXG5cXFxuY29uc3QgZmxvYXQgTUFYX0ZCTV9JVEVSQVRJT05TID0gMTAuMDtcXG5cXFxuXFxuXFxcbmZsb2F0IHdvcmxleUZCTU5vaXNlKHZlYzMgcCwgZmxvYXQgb2N0YXZlcywgZmxvYXQgc2NhbGUpIHtcXG5cXFxuICAgIGZsb2F0IG5vaXNlID0gMC4wO1xcblxcXG4gICAgZmxvYXQgZnJlcSA9IDEuMDtcXG5cXFxuICAgIGZsb2F0IHBlcnNpc3RlbmNlID0gMC42MjU7XFxuXFxcbiAgICBmb3IoZmxvYXQgaSA9IDAuMDsgaSA8IE1BWF9GQk1fSVRFUkFUSU9OUzsgaSsrKSB7XFxuXFxcbiAgICAgICAgaWYoaSA+PSBvY3RhdmVzKSB7XFxuXFxcbiAgICAgICAgICAgIGJyZWFrO1xcblxcXG4gICAgICAgIH1cXG5cXFxuICAgICAgICBcXG5cXFxuICAgICAgICBub2lzZSArPSB3b3JsZXlOb2lzZShwICogc2NhbGUsIGZyZXEgKiBzY2FsZSkgKiBwZXJzaXN0ZW5jZTtcXG5cXFxuICAgICAgICBwZXJzaXN0ZW5jZSAqPSAwLjU7XFxuXFxcbiAgICAgICAgZnJlcSAqPSAyLjA7XFxuXFxcbiAgICB9XFxuXFxcbiAgICByZXR1cm4gbm9pc2U7XFxuXFxcbn1cXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpIHsgICBcXG5cXFxuICAgIGZsb2F0IHogPSBmbG9vcih2X3Bvc2l0aW9uLnggLyB1X25vaXNlVGV4dHVyZUxlbmd0aCk7XFxuXFxcbiAgICBmbG9hdCB4ID0gdl9wb3NpdGlvbi54IC0geiAqIHVfbm9pc2VUZXh0dXJlTGVuZ3RoO1xcblxcXG4gICAgdmVjMyBwb3NpdGlvbiA9IHZlYzMoeCwgdl9wb3NpdGlvbi55LCB6KTtcXG5cXFxuICAgIHBvc2l0aW9uIC89IHVfbm9pc2VEZXRhaWw7XFxuXFxcbiAgICBmbG9hdCB3b3JsZXkwID0gY2xhbXAod29ybGV5RkJNTm9pc2UocG9zaXRpb24sIDMuMCwgMS4wKSwgMC4wLCAxLjApO1xcblxcXG4gICAgZmxvYXQgd29ybGV5MSA9IGNsYW1wKHdvcmxleUZCTU5vaXNlKHBvc2l0aW9uLCAzLjAsIDIuMCksIDAuMCwgMS4wKTtcXG5cXFxuICAgIGZsb2F0IHdvcmxleTIgPSBjbGFtcCh3b3JsZXlGQk1Ob2lzZShwb3NpdGlvbiwgMy4wLCAzLjApLCAwLjAsIDEuMCk7XFxuXFxcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHdvcmxleTAsIHdvcmxleTEsIHdvcmxleTIsIDEuMCk7XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12444\n')},61968:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("uniform float u_noiseTextureLength;\\n\\\nattribute vec2 position;\\n\\\n\\n\\\nvarying vec2 v_position;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = vec4(position, 0.1, 1.0);\\n\\\n\\n\\\n    vec2 transformedPos = (position / 2.0) + vec2(0.5);\\n\\\n    transformedPos *= u_noiseTextureLength;\\n\\\n    transformedPos.x *= u_noiseTextureLength;\\n\\\n    v_position = transformedPos;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE5NjguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSxvQ0FBb0M7QUFDbkQsd0JBQXdCO0FBQ3hCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMkNBQTJDO0FBQzNDO0FBQ0EsdURBQXVEO0FBQ3ZELDJDQUEyQztBQUMzQyw2Q0FBNkM7QUFDN0MsZ0NBQWdDO0FBQ2hDLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9DbG91ZE5vaXNlVlMuanM/YzM1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJ1bmlmb3JtIGZsb2F0IHVfbm9pc2VUZXh0dXJlTGVuZ3RoO1xcblxcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMiB2X3Bvc2l0aW9uO1xcblxcXG5cXG5cXFxudm9pZCBtYWluKClcXG5cXFxue1xcblxcXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAwLjEsIDEuMCk7XFxuXFxcblxcblxcXG4gICAgdmVjMiB0cmFuc2Zvcm1lZFBvcyA9IChwb3NpdGlvbiAvIDIuMCkgKyB2ZWMyKDAuNSk7XFxuXFxcbiAgICB0cmFuc2Zvcm1lZFBvcyAqPSB1X25vaXNlVGV4dHVyZUxlbmd0aDtcXG5cXFxuICAgIHRyYW5zZm9ybWVkUG9zLnggKj0gdV9ub2lzZVRleHR1cmVMZW5ndGg7XFxuXFxcbiAgICB2X3Bvc2l0aW9uID0gdHJhbnNmb3JtZWRQb3M7XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///61968\n')},19447:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("uniform sampler2D u_opaqueDepthTexture;\\n\\\nuniform sampler2D u_translucentDepthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float opaqueDepth = texture2D(u_opaqueDepthTexture, v_textureCoordinates).r;\\n\\\n    float translucentDepth = texture2D(u_translucentDepthTexture, v_textureCoordinates).r;\\n\\\n    translucentDepth = czm_branchFreeTernary(translucentDepth > opaqueDepth, 1.0, translucentDepth);\\n\\\n    gl_FragColor = czm_packDepth(translucentDepth);\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk0NDcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSx3Q0FBd0M7QUFDdkQsNENBQTRDO0FBQzVDO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsZ0ZBQWdGO0FBQ2hGLDBGQUEwRjtBQUMxRixvR0FBb0c7QUFDcEcsbURBQW1EO0FBQ25ELENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9Db21wYXJlQW5kUGFja1RyYW5zbHVjZW50RGVwdGguanM/MTBlZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJ1bmlmb3JtIHNhbXBsZXIyRCB1X29wYXF1ZURlcHRoVGV4dHVyZTtcXG5cXFxudW5pZm9ybSBzYW1wbGVyMkQgdV90cmFuc2x1Y2VudERlcHRoVGV4dHVyZTtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMiB2X3RleHR1cmVDb29yZGluYXRlcztcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIGZsb2F0IG9wYXF1ZURlcHRoID0gdGV4dHVyZTJEKHVfb3BhcXVlRGVwdGhUZXh0dXJlLCB2X3RleHR1cmVDb29yZGluYXRlcykucjtcXG5cXFxuICAgIGZsb2F0IHRyYW5zbHVjZW50RGVwdGggPSB0ZXh0dXJlMkQodV90cmFuc2x1Y2VudERlcHRoVGV4dHVyZSwgdl90ZXh0dXJlQ29vcmRpbmF0ZXMpLnI7XFxuXFxcbiAgICB0cmFuc2x1Y2VudERlcHRoID0gY3ptX2JyYW5jaEZyZWVUZXJuYXJ5KHRyYW5zbHVjZW50RGVwdGggPiBvcGFxdWVEZXB0aCwgMS4wLCB0cmFuc2x1Y2VudERlcHRoKTtcXG5cXFxuICAgIGdsX0ZyYWdDb2xvciA9IGN6bV9wYWNrRGVwdGgodHJhbnNsdWNlbnREZXB0aCk7XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19447\n')},19065:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("/**\\n\\\n * Compositing for Weighted Blended Order-Independent Transparency. See:\\n\\\n * - http://jcgt.org/published/0002/02/09/\\n\\\n * - http://casual-effects.blogspot.com/2014/03/weighted-blended-order-independent.html\\n\\\n */\\n\\\n\\n\\\nuniform sampler2D u_opaque;\\n\\\nuniform sampler2D u_accumulation;\\n\\\nuniform sampler2D u_revealage;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 opaque = texture2D(u_opaque, v_textureCoordinates);\\n\\\n    vec4 accum = texture2D(u_accumulation, v_textureCoordinates);\\n\\\n    float r = texture2D(u_revealage, v_textureCoordinates).r;\\n\\\n\\n\\\n#ifdef MRT\\n\\\n    vec4 transparent = vec4(accum.rgb / clamp(r, 1e-4, 5e4), accum.a);\\n\\\n#else\\n\\\n    vec4 transparent = vec4(accum.rgb / clamp(accum.a, 1e-4, 5e4), r);\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragColor = (1.0 - transparent.a) * transparent + transparent.a * opaque;\\n\\\n\\n\\\n    if (opaque != czm_backgroundColor)\\n\\\n    {\\n\\\n        gl_FragColor.a = 1.0;\\n\\\n    }\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwNjUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsaUNBQWlDO0FBQ2pDLDhCQUE4QjtBQUM5QjtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsQ0FBQztBQUNELDREQUE0RDtBQUM1RCxpRUFBaUU7QUFDakUsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBLGdGQUFnRjtBQUNoRjtBQUNBO0FBQ0EsS0FBSztBQUNMLDZCQUE2QjtBQUM3QixLQUFLO0FBQ0wsQ0FBQztBQUNELENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TaGFkZXJzL0NvbXBvc2l0ZU9JVEZTLmpzPzMxNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwiLyoqXFxuXFxcbiAqIENvbXBvc2l0aW5nIGZvciBXZWlnaHRlZCBCbGVuZGVkIE9yZGVyLUluZGVwZW5kZW50IFRyYW5zcGFyZW5jeS4gU2VlOlxcblxcXG4gKiAtIGh0dHA6Ly9qY2d0Lm9yZy9wdWJsaXNoZWQvMDAwMi8wMi8wOS9cXG5cXFxuICogLSBodHRwOi8vY2FzdWFsLWVmZmVjdHMuYmxvZ3Nwb3QuY29tLzIwMTQvMDMvd2VpZ2h0ZWQtYmxlbmRlZC1vcmRlci1pbmRlcGVuZGVudC5odG1sXFxuXFxcbiAqL1xcblxcXG5cXG5cXFxudW5pZm9ybSBzYW1wbGVyMkQgdV9vcGFxdWU7XFxuXFxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfYWNjdW11bGF0aW9uO1xcblxcXG51bmlmb3JtIHNhbXBsZXIyRCB1X3JldmVhbGFnZTtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMiB2X3RleHR1cmVDb29yZGluYXRlcztcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIHZlYzQgb3BhcXVlID0gdGV4dHVyZTJEKHVfb3BhcXVlLCB2X3RleHR1cmVDb29yZGluYXRlcyk7XFxuXFxcbiAgICB2ZWM0IGFjY3VtID0gdGV4dHVyZTJEKHVfYWNjdW11bGF0aW9uLCB2X3RleHR1cmVDb29yZGluYXRlcyk7XFxuXFxcbiAgICBmbG9hdCByID0gdGV4dHVyZTJEKHVfcmV2ZWFsYWdlLCB2X3RleHR1cmVDb29yZGluYXRlcykucjtcXG5cXFxuXFxuXFxcbiNpZmRlZiBNUlRcXG5cXFxuICAgIHZlYzQgdHJhbnNwYXJlbnQgPSB2ZWM0KGFjY3VtLnJnYiAvIGNsYW1wKHIsIDFlLTQsIDVlNCksIGFjY3VtLmEpO1xcblxcXG4jZWxzZVxcblxcXG4gICAgdmVjNCB0cmFuc3BhcmVudCA9IHZlYzQoYWNjdW0ucmdiIC8gY2xhbXAoYWNjdW0uYSwgMWUtNCwgNWU0KSwgcik7XFxuXFxcbiNlbmRpZlxcblxcXG5cXG5cXFxuICAgIGdsX0ZyYWdDb2xvciA9ICgxLjAgLSB0cmFuc3BhcmVudC5hKSAqIHRyYW5zcGFyZW50ICsgdHJhbnNwYXJlbnQuYSAqIG9wYXF1ZTtcXG5cXFxuXFxuXFxcbiAgICBpZiAob3BhcXVlICE9IGN6bV9iYWNrZ3JvdW5kQ29sb3IpXFxuXFxcbiAgICB7XFxuXFxcbiAgICAgICAgZ2xfRnJhZ0NvbG9yLmEgPSAxLjA7XFxuXFxcbiAgICB9XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19065\n')},10135:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec4 positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 position;\\n\\\n    vec3 direction;\\n\\\n    if (czm_orthographicIn3D == 1.0)\\n\\\n    {\\n\\\n        vec2 uv = (gl_FragCoord.xy -  czm_viewport.xy) / czm_viewport.zw;\\n\\\n        vec2 minPlane = vec2(czm_frustumPlanes.z, czm_frustumPlanes.y); // left, bottom\\n\\\n        vec2 maxPlane = vec2(czm_frustumPlanes.w, czm_frustumPlanes.x); // right, top\\n\\\n        position = vec3(mix(minPlane, maxPlane, uv), 0.0);\\n\\\n        direction = vec3(0.0, 0.0, -1.0);\\n\\\n    } \\n\\\n    else \\n\\\n    {\\n\\\n        position = vec3(0.0);\\n\\\n        direction = normalize(positionEC.xyz);\\n\\\n    }\\n\\\n\\n\\\n    czm_ray ray = czm_ray(position, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_center = czm_view[3].xyz;\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\\n\\\n    if (!czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    czm_writeLogDepth();\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxMzUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSx5QkFBeUI7QUFDeEM7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CO0FBQ0EsS0FBSztBQUNMLHlFQUF5RTtBQUN6RSx3RUFBd0U7QUFDeEUsd0VBQXdFO0FBQ3hFLDBEQUEwRDtBQUMxRCx5Q0FBeUM7QUFDekMsTUFBTTtBQUNOO0FBQ0EsS0FBSztBQUNMLDZCQUE2QjtBQUM3Qiw4Q0FBOEM7QUFDOUMsS0FBSztBQUNMO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EseUhBQXlIO0FBQ3pIO0FBQ0EsS0FBSztBQUNMLGdEQUFnRDtBQUNoRCxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0wsZ0JBQWdCO0FBQ2hCLEtBQUs7QUFDTDtBQUNBLHdCQUF3QjtBQUN4QixDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvRGVwdGhQbGFuZUZTLmpzPzUwNjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwidmFyeWluZyB2ZWM0IHBvc2l0aW9uRUM7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICB2ZWMzIHBvc2l0aW9uO1xcblxcXG4gICAgdmVjMyBkaXJlY3Rpb247XFxuXFxcbiAgICBpZiAoY3ptX29ydGhvZ3JhcGhpY0luM0QgPT0gMS4wKVxcblxcXG4gICAge1xcblxcXG4gICAgICAgIHZlYzIgdXYgPSAoZ2xfRnJhZ0Nvb3JkLnh5IC0gIGN6bV92aWV3cG9ydC54eSkgLyBjem1fdmlld3BvcnQuenc7XFxuXFxcbiAgICAgICAgdmVjMiBtaW5QbGFuZSA9IHZlYzIoY3ptX2ZydXN0dW1QbGFuZXMueiwgY3ptX2ZydXN0dW1QbGFuZXMueSk7IC8vIGxlZnQsIGJvdHRvbVxcblxcXG4gICAgICAgIHZlYzIgbWF4UGxhbmUgPSB2ZWMyKGN6bV9mcnVzdHVtUGxhbmVzLncsIGN6bV9mcnVzdHVtUGxhbmVzLngpOyAvLyByaWdodCwgdG9wXFxuXFxcbiAgICAgICAgcG9zaXRpb24gPSB2ZWMzKG1peChtaW5QbGFuZSwgbWF4UGxhbmUsIHV2KSwgMC4wKTtcXG5cXFxuICAgICAgICBkaXJlY3Rpb24gPSB2ZWMzKDAuMCwgMC4wLCAtMS4wKTtcXG5cXFxuICAgIH0gXFxuXFxcbiAgICBlbHNlIFxcblxcXG4gICAge1xcblxcXG4gICAgICAgIHBvc2l0aW9uID0gdmVjMygwLjApO1xcblxcXG4gICAgICAgIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZShwb3NpdGlvbkVDLnh5eik7XFxuXFxcbiAgICB9XFxuXFxcblxcblxcXG4gICAgY3ptX3JheSByYXkgPSBjem1fcmF5KHBvc2l0aW9uLCBkaXJlY3Rpb24pO1xcblxcXG5cXG5cXFxuICAgIHZlYzMgZWxsaXBzb2lkX2NlbnRlciA9IGN6bV92aWV3WzNdLnh5ejtcXG5cXFxuXFxuXFxcbiAgICBjem1fcmF5U2VnbWVudCBpbnRlcnNlY3Rpb24gPSBjem1fcmF5RWxsaXBzb2lkSW50ZXJzZWN0aW9uSW50ZXJ2YWwocmF5LCBlbGxpcHNvaWRfY2VudGVyLCBjem1fZWxsaXBzb2lkSW52ZXJzZVJhZGlpKTtcXG5cXFxuICAgIGlmICghY3ptX2lzRW1wdHkoaW50ZXJzZWN0aW9uKSlcXG5cXFxuICAgIHtcXG5cXFxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCwgMS4wLCAwLjAsIDEuMCk7XFxuXFxcbiAgICB9XFxuXFxcbiAgICBlbHNlXFxuXFxcbiAgICB7XFxuXFxcbiAgICAgICAgZGlzY2FyZDtcXG5cXFxuICAgIH1cXG5cXFxuXFxuXFxcbiAgICBjem1fd3JpdGVMb2dEZXB0aCgpO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10135\n')},39774:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec4 position;\\n\\\n\\n\\\nvarying vec4 positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    positionEC = czm_modelView * position;\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n\\n\\\n    czm_vertexLogDepth();\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk3NzQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSx5QkFBeUI7QUFDeEM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCwwQ0FBMEM7QUFDMUMsOENBQThDO0FBQzlDO0FBQ0EseUJBQXlCO0FBQ3pCLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9EZXB0aFBsYW5lVlMuanM/MWMxOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJhdHRyaWJ1dGUgdmVjNCBwb3NpdGlvbjtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjNCBwb3NpdGlvbkVDO1xcblxcXG5cXG5cXFxudm9pZCBtYWluKClcXG5cXFxue1xcblxcXG4gICAgcG9zaXRpb25FQyA9IGN6bV9tb2RlbFZpZXcgKiBwb3NpdGlvbjtcXG5cXFxuICAgIGdsX1Bvc2l0aW9uID0gY3ptX3Byb2plY3Rpb24gKiBwb3NpdGlvbkVDO1xcblxcXG5cXG5cXFxuICAgIGN6bV92ZXJ0ZXhMb2dEZXB0aCgpO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39774\n')},90565:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\nuniform vec3 u_oneOverEllipsoidRadiiSquared;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvec4 computeEllipsoidColor(czm_ray ray, float intersection, float side)\\n\\\n{\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, intersection);\\n\\\n    vec3 positionMC = (czm_inverseModelView * vec4(positionEC, 1.0)).xyz;\\n\\\n    vec3 geodeticNormal = normalize(czm_geodeticSurfaceNormal(positionMC, vec3(0.0), u_oneOverEllipsoidRadiiSquared));\\n\\\n    vec3 sphericalNormal = normalize(positionMC / u_radii);\\n\\\n    vec3 normalMC = geodeticNormal * side;              // normalized surface normal (always facing the viewer) in model coordinates\\n\\\n    vec3 normalEC = normalize(czm_normal * normalMC);   // normalized surface normal in eye coordiantes\\n\\\n\\n\\\n    vec2 st = czm_ellipsoidWgs84TextureCoordinates(sphericalNormal);\\n\\\n    vec3 positionToEyeEC = -positionEC;\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.s = st.s;\\n\\\n    materialInput.st = st;\\n\\\n    materialInput.str = (positionMC + u_radii) / u_radii;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef ONLY_SUN_LIGHTING\\n\\\n    return czm_private_phong(normalize(positionToEyeEC), material, czm_sunDirectionEC);\\n\\\n#else\\n\\\n    return czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // PERFORMANCE_TODO: When dynamic branching is available, compute ratio of maximum and minimum radii\\n\\\n    // in the vertex shader. Only when it is larger than some constant, march along the ray.\\n\\\n    // Otherwise perform one intersection test which will be the common case.\\n\\\n\\n\\\n    // Test if the ray intersects a sphere with the ellipsoid\'s maximum radius.\\n\\\n    // For very oblate ellipsoids, using the ellipsoid\'s radii for an intersection test\\n\\\n    // may cause false negatives. This will discard fragments before marching the ray forward.\\n\\\n    float maxRadius = max(u_radii.x, max(u_radii.y, u_radii.z)) * 1.5;\\n\\\n    vec3 direction = normalize(v_positionEC);\\n\\\n    vec3 ellipsoidCenter = czm_modelView[3].xyz;\\n\\\n\\n\\\n    float t1 = -1.0;\\n\\\n    float t2 = -1.0;\\n\\\n\\n\\\n    float b = -2.0 * dot(direction, ellipsoidCenter);\\n\\\n    float c = dot(ellipsoidCenter, ellipsoidCenter) - maxRadius * maxRadius;\\n\\\n\\n\\\n    float discriminant = b * b - 4.0 * c;\\n\\\n    if (discriminant >= 0.0) {\\n\\\n        t1 = (-b - sqrt(discriminant)) * 0.5;\\n\\\n        t2 = (-b + sqrt(discriminant)) * 0.5;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    float t = min(t1, t2);\\n\\\n    if (t < 0.0) {\\n\\\n        t = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    // March ray forward to intersection with larger sphere and find\\n\\\n    czm_ray ray = czm_ray(t * direction, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_inverseRadii = vec3(1.0 / u_radii.x, 1.0 / u_radii.y, 1.0 / u_radii.z);\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoidCenter, ellipsoid_inverseRadii);\\n\\\n\\n\\\n    if (czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If the viewer is outside, compute outsideFaceColor, with normals facing outward.\\n\\\n    vec4 outsideFaceColor = (intersection.start != 0.0) ? computeEllipsoidColor(ray, intersection.start, 1.0) : vec4(0.0);\\n\\\n\\n\\\n    // If the viewer either is inside or can see inside, compute insideFaceColor, with normals facing inward.\\n\\\n    vec4 insideFaceColor = (outsideFaceColor.a < 1.0) ? computeEllipsoidColor(ray, intersection.stop, -1.0) : vec4(0.0);\\n\\\n\\n\\\n    gl_FragColor = mix(insideFaceColor, outsideFaceColor, outsideFaceColor.a);\\n\\\n    gl_FragColor.a = 1.0 - (1.0 - insideFaceColor.a) * (1.0 - outsideFaceColor.a);\\n\\\n\\n\\\n#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    t = (intersection.start != 0.0) ? intersection.start : intersection.stop;\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, t);\\n\\\n    vec4 positionCC = czm_projection * vec4(positionEC, 1.0);\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(1.0 + positionCC.w);\\n\\\n#else\\n\\\n    float z = positionCC.z / positionCC.w;\\n\\\n\\n\\\n    float n = czm_depthRange.near;\\n\\\n    float f = czm_depthRange.far;\\n\\\n\\n\\\n    gl_FragDepthEXT = (z * (f - n) + f + n) * 0.5;\\n\\\n#endif\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90565\n')},26440:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position;\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // In the vertex data, the cube goes from (-1.0, -1.0, -1.0) to (1.0, 1.0, 1.0) in model coordinates.\\n\\\n    // Scale to consider the radii.  We could also do this once on the CPU when using the BoxGeometry,\\n\\\n    // but doing it here allows us to change the radii without rewriting the vertex data, and\\n\\\n    // allows all ellipsoids to reuse the same vertex data.\\n\\\n    vec4 p = vec4(u_radii * position, 1.0);\\n\\\n\\n\\\n    v_positionEC = (czm_modelView * p).xyz;     // position in eye coordinates\\n\\\n    gl_Position = czm_modelViewProjection * p;  // position in clip coordinates\\n\\\n\\n\\\n    // With multi-frustum, when the ellipsoid primitive is positioned on the intersection of two frustums\\n\\\n    // and close to terrain, the terrain (writes depth) in the closest frustum can overwrite part of the\\n\\\n    // ellipsoid (does not write depth) that was rendered in the farther frustum.\\n\\\n    //\\n\\\n    // Here, we clamp the depth in the vertex shader to avoid being overwritten; however, this creates\\n\\\n    // artifacts since some fragments can be alpha blended twice.  This is solved by only rendering\\n\\\n    // the ellipsoid in the closest frustum to the viewer.\\n\\\n    gl_Position.z = clamp(gl_Position.z, czm_depthRange.near, czm_depthRange.far);\\n\\\n\\n\\\n    czm_vertexLogDepth();\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY0NDAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSx5QkFBeUI7QUFDeEM7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLGdEQUFnRDtBQUNoRCxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0Esa0ZBQWtGO0FBQ2xGO0FBQ0EseUJBQXlCO0FBQ3pCLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9FbGxpcHNvaWRWUy5qcz8yNGU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgcmVidWlsdCBieSB0aGUgQ2VzaXVtIGJ1aWxkIHByb2Nlc3MuXG5leHBvcnQgZGVmYXVsdCBcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcblxcXG5cXG5cXFxudW5pZm9ybSB2ZWMzIHVfcmFkaWk7XFxuXFxcblxcblxcXG52YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbkVDO1xcblxcXG5cXG5cXFxudm9pZCBtYWluKClcXG5cXFxue1xcblxcXG4gICAgLy8gSW4gdGhlIHZlcnRleCBkYXRhLCB0aGUgY3ViZSBnb2VzIGZyb20gKC0xLjAsIC0xLjAsIC0xLjApIHRvICgxLjAsIDEuMCwgMS4wKSBpbiBtb2RlbCBjb29yZGluYXRlcy5cXG5cXFxuICAgIC8vIFNjYWxlIHRvIGNvbnNpZGVyIHRoZSByYWRpaS4gIFdlIGNvdWxkIGFsc28gZG8gdGhpcyBvbmNlIG9uIHRoZSBDUFUgd2hlbiB1c2luZyB0aGUgQm94R2VvbWV0cnksXFxuXFxcbiAgICAvLyBidXQgZG9pbmcgaXQgaGVyZSBhbGxvd3MgdXMgdG8gY2hhbmdlIHRoZSByYWRpaSB3aXRob3V0IHJld3JpdGluZyB0aGUgdmVydGV4IGRhdGEsIGFuZFxcblxcXG4gICAgLy8gYWxsb3dzIGFsbCBlbGxpcHNvaWRzIHRvIHJldXNlIHRoZSBzYW1lIHZlcnRleCBkYXRhLlxcblxcXG4gICAgdmVjNCBwID0gdmVjNCh1X3JhZGlpICogcG9zaXRpb24sIDEuMCk7XFxuXFxcblxcblxcXG4gICAgdl9wb3NpdGlvbkVDID0gKGN6bV9tb2RlbFZpZXcgKiBwKS54eXo7ICAgICAvLyBwb3NpdGlvbiBpbiBleWUgY29vcmRpbmF0ZXNcXG5cXFxuICAgIGdsX1Bvc2l0aW9uID0gY3ptX21vZGVsVmlld1Byb2plY3Rpb24gKiBwOyAgLy8gcG9zaXRpb24gaW4gY2xpcCBjb29yZGluYXRlc1xcblxcXG5cXG5cXFxuICAgIC8vIFdpdGggbXVsdGktZnJ1c3R1bSwgd2hlbiB0aGUgZWxsaXBzb2lkIHByaW1pdGl2ZSBpcyBwb3NpdGlvbmVkIG9uIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGZydXN0dW1zXFxuXFxcbiAgICAvLyBhbmQgY2xvc2UgdG8gdGVycmFpbiwgdGhlIHRlcnJhaW4gKHdyaXRlcyBkZXB0aCkgaW4gdGhlIGNsb3Nlc3QgZnJ1c3R1bSBjYW4gb3ZlcndyaXRlIHBhcnQgb2YgdGhlXFxuXFxcbiAgICAvLyBlbGxpcHNvaWQgKGRvZXMgbm90IHdyaXRlIGRlcHRoKSB0aGF0IHdhcyByZW5kZXJlZCBpbiB0aGUgZmFydGhlciBmcnVzdHVtLlxcblxcXG4gICAgLy9cXG5cXFxuICAgIC8vIEhlcmUsIHdlIGNsYW1wIHRoZSBkZXB0aCBpbiB0aGUgdmVydGV4IHNoYWRlciB0byBhdm9pZCBiZWluZyBvdmVyd3JpdHRlbjsgaG93ZXZlciwgdGhpcyBjcmVhdGVzXFxuXFxcbiAgICAvLyBhcnRpZmFjdHMgc2luY2Ugc29tZSBmcmFnbWVudHMgY2FuIGJlIGFscGhhIGJsZW5kZWQgdHdpY2UuICBUaGlzIGlzIHNvbHZlZCBieSBvbmx5IHJlbmRlcmluZ1xcblxcXG4gICAgLy8gdGhlIGVsbGlwc29pZCBpbiB0aGUgY2xvc2VzdCBmcnVzdHVtIHRvIHRoZSB2aWV3ZXIuXFxuXFxcbiAgICBnbF9Qb3NpdGlvbi56ID0gY2xhbXAoZ2xfUG9zaXRpb24ueiwgY3ptX2RlcHRoUmFuZ2UubmVhciwgY3ptX2RlcHRoUmFuZ2UuZmFyKTtcXG5cXFxuXFxuXFxcbiAgICBjem1fdmVydGV4TG9nRGVwdGgoKTtcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26440\n')},61333:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * @license\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__[\"Z\"] = (\"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *  * Redistributions of source code must retain the above copyright\\n\\\n *    notice, this list of conditions and the following disclaimer.\\n\\\n *  * Redistributions in binary form must reproduce the above copyright\\n\\\n *    notice, this list of conditions and the following disclaimer in the\\n\\\n *    documentation and/or other materials provided with the distribution.\\n\\\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\\n\\\n *    contributors may be used to endorse or promote products derived\\n\\\n *    from this software without specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\\n\\\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n\\\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\\n\\\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\n\\\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\n\\\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\n\\\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\\n\\\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n */\\n\\\n\\n\\\n// NVIDIA GameWorks Graphics Samples GitHub link: https://github.com/NVIDIAGameWorks/GraphicsSamples\\n\\\n// Original FXAA 3.11 shader link: https://github.com/NVIDIAGameWorks/GraphicsSamples/blob/master/samples/es3-kepler/FXAA/FXAA3_11.h\\n\\\n\\n\\\n// Steps used to integrate into Cesium:\\n\\\n// * The following defines are set:\\n\\\n//       #define FXAA_PC 1\\n\\\n//       #define FXAA_WEBGL_1 1\\n\\\n//       #define FXAA_GREEN_AS_LUMA 1\\n\\\n//       #define FXAA_EARLY_EXIT 1\\n\\\n//       #define FXAA_GLSL_120 1\\n\\\n// * All other preprocessor directives besides the FXAA_QUALITY__P* directives were removed.\\n\\\n// * Double underscores are invalid for preprocessor directives so replace them with a single underscore. Replace\\n\\\n//   /FXAA_QUALITY__P(.*)/g with /FXAA_QUALITY__P$1/.\\n\\\n// * There are no implicit conversions from ivec* to vec* so replace:\\n\\\n//       #define FxaaInt2 ivec2\\n\\\n//           with\\n\\\n//       #define FxaaInt2 vec2\\n\\\n// * The texture2DLod function is only available in vertex shaders so replace:\\n\\\n//       #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\\n\\\n//       #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\\n\\\n//           with\\n\\\n//       #define FxaaTexTop(t, p) texture2D(t, p)\\n\\\n//       #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\\n\\\n// * FXAA_QUALITY_PRESET is prepended in the javascript code. We may want to expose that setting in the future.\\n\\\n// * The following parameters to FxaaPixelShader are unused and can be removed:\\n\\\n//       fxaaConsolePosPos\\n\\\n//       fxaaConsoleRcpFrameOpt\\n\\\n//       fxaaConsoleRcpFrameOpt2\\n\\\n//       fxaaConsole360RcpFrameOpt2\\n\\\n//       fxaaConsoleEdgeSharpness\\n\\\n//       fxaaConsoleEdgeThreshold\\n\\\n//       fxaaConsoleEdgeThresholdMi\\n\\\n//       fxaaConsole360ConstDir\\n\\\n\\n\\\n//\\n\\\n// Choose the quality preset.\\n\\\n// This needs to be compiled into the shader as it effects code.\\n\\\n// Best option to include multiple presets is to\\n\\\n// in each shader define the preset, then include this file.\\n\\\n//\\n\\\n// OPTIONS\\n\\\n// -----------------------------------------------------------------------\\n\\\n// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\\n\\\n// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\\n\\\n// 39       - no dither, very expensive\\n\\\n//\\n\\\n// NOTES\\n\\\n// -----------------------------------------------------------------------\\n\\\n// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\\n\\\n// 13 = about same speed as FXAA 3.9 and better than 12\\n\\\n// 23 = closest to FXAA 3.9 visually and performance wise\\n\\\n//  _ = the lowest digit is directly related to performance\\n\\\n// _  = the highest digit is directly related to style\\n\\\n//\\n\\\n//#define FXAA_QUALITY_PRESET 12\\n\\\n\\n\\\n\\n\\\n#if (FXAA_QUALITY_PRESET == 10)\\n\\\n    #define FXAA_QUALITY_PS 3\\n\\\n    #define FXAA_QUALITY_P0 1.5\\n\\\n    #define FXAA_QUALITY_P1 3.0\\n\\\n    #define FXAA_QUALITY_P2 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 11)\\n\\\n    #define FXAA_QUALITY_PS 4\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 3.0\\n\\\n    #define FXAA_QUALITY_P3 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 12)\\n\\\n    #define FXAA_QUALITY_PS 5\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 4.0\\n\\\n    #define FXAA_QUALITY_P4 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 13)\\n\\\n    #define FXAA_QUALITY_PS 6\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 4.0\\n\\\n    #define FXAA_QUALITY_P5 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 14)\\n\\\n    #define FXAA_QUALITY_PS 7\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 4.0\\n\\\n    #define FXAA_QUALITY_P6 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 15)\\n\\\n    #define FXAA_QUALITY_PS 8\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 4.0\\n\\\n    #define FXAA_QUALITY_P7 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 20)\\n\\\n    #define FXAA_QUALITY_PS 3\\n\\\n    #define FXAA_QUALITY_P0 1.5\\n\\\n    #define FXAA_QUALITY_P1 2.0\\n\\\n    #define FXAA_QUALITY_P2 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 21)\\n\\\n    #define FXAA_QUALITY_PS 4\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 22)\\n\\\n    #define FXAA_QUALITY_PS 5\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 23)\\n\\\n    #define FXAA_QUALITY_PS 6\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 24)\\n\\\n    #define FXAA_QUALITY_PS 7\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 3.0\\n\\\n    #define FXAA_QUALITY_P6 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 25)\\n\\\n    #define FXAA_QUALITY_PS 8\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 4.0\\n\\\n    #define FXAA_QUALITY_P7 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 26)\\n\\\n    #define FXAA_QUALITY_PS 9\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 4.0\\n\\\n    #define FXAA_QUALITY_P8 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 27)\\n\\\n    #define FXAA_QUALITY_PS 10\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 4.0\\n\\\n    #define FXAA_QUALITY_P9 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 28)\\n\\\n    #define FXAA_QUALITY_PS 11\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 4.0\\n\\\n    #define FXAA_QUALITY_P10 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 29)\\n\\\n    #define FXAA_QUALITY_PS 12\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 2.0\\n\\\n    #define FXAA_QUALITY_P10 4.0\\n\\\n    #define FXAA_QUALITY_P11 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 39)\\n\\\n    #define FXAA_QUALITY_PS 12\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.0\\n\\\n    #define FXAA_QUALITY_P2 1.0\\n\\\n    #define FXAA_QUALITY_P3 1.0\\n\\\n    #define FXAA_QUALITY_P4 1.0\\n\\\n    #define FXAA_QUALITY_P5 1.5\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 2.0\\n\\\n    #define FXAA_QUALITY_P10 4.0\\n\\\n    #define FXAA_QUALITY_P11 8.0\\n\\\n#endif\\n\\\n\\n\\\n#define FxaaBool bool\\n\\\n#define FxaaFloat float\\n\\\n#define FxaaFloat2 vec2\\n\\\n#define FxaaFloat3 vec3\\n\\\n#define FxaaFloat4 vec4\\n\\\n#define FxaaHalf float\\n\\\n#define FxaaHalf2 vec2\\n\\\n#define FxaaHalf3 vec3\\n\\\n#define FxaaHalf4 vec4\\n\\\n#define FxaaInt2 vec2\\n\\\n#define FxaaTex sampler2D\\n\\\n\\n\\\n#define FxaaSat(x) clamp(x, 0.0, 1.0)\\n\\\n#define FxaaTexTop(t, p) texture2D(t, p)\\n\\\n#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\\n\\\n\\n\\\nFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\\n\\\n\\n\\\nFxaaFloat4 FxaaPixelShader(\\n\\\n    //\\n\\\n    // Use noperspective interpolation here (turn off perspective interpolation).\\n\\\n    // {xy} = center of pixel\\n\\\n    FxaaFloat2 pos,\\n\\\n    //\\n\\\n    // Input color texture.\\n\\\n    // {rgb_} = color in linear or perceptual color space\\n\\\n    // if (FXAA_GREEN_AS_LUMA == 0)\\n\\\n    //     {___a} = luma in perceptual color space (not linear)\\n\\\n    FxaaTex tex,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This must be from a constant/uniform.\\n\\\n    // {x_} = 1.0/screenWidthInPixels\\n\\\n    // {_y} = 1.0/screenHeightInPixels\\n\\\n    FxaaFloat2 fxaaQualityRcpFrame,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_SUBPIX define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // Choose the amount of sub-pixel aliasing removal.\\n\\\n    // This can effect sharpness.\\n\\\n    //   1.00 - upper limit (softer)\\n\\\n    //   0.75 - default amount of filtering\\n\\\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\\n\\\n    //   0.25 - almost off\\n\\\n    //   0.00 - completely off\\n\\\n    FxaaFloat fxaaQualitySubpix,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // The minimum amount of local contrast required to apply algorithm.\\n\\\n    //   0.333 - too little (faster)\\n\\\n    //   0.250 - low quality\\n\\\n    //   0.166 - default\\n\\\n    //   0.125 - high quality\\n\\\n    //   0.063 - overkill (slower)\\n\\\n    FxaaFloat fxaaQualityEdgeThreshold,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // Trims the algorithm from processing darks.\\n\\\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\\n\\\n    //   0.0625 - high quality (faster)\\n\\\n    //   0.0312 - visible limit (slower)\\n\\\n    // Special notes when using FXAA_GREEN_AS_LUMA,\\n\\\n    //   Likely want to set this to zero.\\n\\\n    //   As colors that are mostly not-green\\n\\\n    //   will appear very dark in the green channel!\\n\\\n    //   Tune by looking at mostly non-green content,\\n\\\n    //   then start at zero and increase until aliasing is a problem.\\n\\\n    FxaaFloat fxaaQualityEdgeThresholdMin\\n\\\n) {\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posM;\\n\\\n    posM.x = pos.x;\\n\\\n    posM.y = pos.y;\\n\\\n    FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\\n\\\n    #define lumaM rgbyM.y\\n\\\n    FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat maxSM = max(lumaS, lumaM);\\n\\\n    FxaaFloat minSM = min(lumaS, lumaM);\\n\\\n    FxaaFloat maxESM = max(lumaE, maxSM);\\n\\\n    FxaaFloat minESM = min(lumaE, minSM);\\n\\\n    FxaaFloat maxWN = max(lumaN, lumaW);\\n\\\n    FxaaFloat minWN = min(lumaN, lumaW);\\n\\\n    FxaaFloat rangeMax = max(maxWN, maxESM);\\n\\\n    FxaaFloat rangeMin = min(minWN, minESM);\\n\\\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\\n\\\n    FxaaFloat range = rangeMax - rangeMin;\\n\\\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\\n\\\n    FxaaBool earlyExit = range < rangeMaxClamped;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(earlyExit)\\n\\\n        return rgbyM;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNS = lumaN + lumaS;\\n\\\n    FxaaFloat lumaWE = lumaW + lumaE;\\n\\\n    FxaaFloat subpixRcpRange = 1.0/range;\\n\\\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\\n\\\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\\n\\\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\\n\\\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\\n\\\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\\n\\\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\\n\\\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\\n\\\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\\n\\\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\\n\\\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\\n\\\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\\n\\\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\\n\\\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\\n\\\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\\n\\\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\\n\\\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(!horzSpan) lumaN = lumaW;\\n\\\n    if(!horzSpan) lumaS = lumaE;\\n\\\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\\n\\\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat gradientN = lumaN - lumaM;\\n\\\n    FxaaFloat gradientS = lumaS - lumaM;\\n\\\n    FxaaFloat lumaNN = lumaN + lumaM;\\n\\\n    FxaaFloat lumaSS = lumaS + lumaM;\\n\\\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\\n\\\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\\n\\\n    if(pairN) lengthSign = -lengthSign;\\n\\\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posB;\\n\\\n    posB.x = posM.x;\\n\\\n    posB.y = posM.y;\\n\\\n    FxaaFloat2 offNP;\\n\\\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\\n\\\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\\n\\\n    if(!horzSpan) posB.x += lengthSign * 0.5;\\n\\\n    if( horzSpan) posB.y += lengthSign * 0.5;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posN;\\n\\\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\\n\\\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\\n\\\n    FxaaFloat2 posP;\\n\\\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\\n\\\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\\n\\\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\\n\\\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\\n\\\n    FxaaFloat subpixE = subpixC * subpixC;\\n\\\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(!pairN) lumaNN = lumaSS;\\n\\\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\\n\\\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\\n\\\n    FxaaFloat subpixF = subpixD * subpixE;\\n\\\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    lumaEndN -= lumaNN * 0.5;\\n\\\n    lumaEndP -= lumaNN * 0.5;\\n\\\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\\n\\\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\\n\\\n    FxaaBool doneNP = (!doneN) || (!doneP);\\n\\\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\\n\\\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(doneNP) {\\n\\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\\n\\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\\n\\\n        doneNP = (!doneN) || (!doneP);\\n\\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\\n\\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        #if (FXAA_QUALITY_PS > 3)\\n\\\n        if(doneNP) {\\n\\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\\n\\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\\n\\\n            doneNP = (!doneN) || (!doneP);\\n\\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\\n\\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            #if (FXAA_QUALITY_PS > 4)\\n\\\n            if(doneNP) {\\n\\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\\n\\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\\n\\\n                doneNP = (!doneN) || (!doneP);\\n\\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\\n\\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                #if (FXAA_QUALITY_PS > 5)\\n\\\n                if(doneNP) {\\n\\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\\n\\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\\n\\\n                    doneNP = (!doneN) || (!doneP);\\n\\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\\n\\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    #if (FXAA_QUALITY_PS > 6)\\n\\\n                    if(doneNP) {\\n\\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\\n\\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\\n\\\n                        doneNP = (!doneN) || (!doneP);\\n\\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\\n\\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                        #if (FXAA_QUALITY_PS > 7)\\n\\\n                        if(doneNP) {\\n\\\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\\n\\\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\\n\\\n                            doneNP = (!doneN) || (!doneP);\\n\\\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\\n\\\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    #if (FXAA_QUALITY_PS > 8)\\n\\\n    if(doneNP) {\\n\\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\\n\\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\\n\\\n        doneNP = (!doneN) || (!doneP);\\n\\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\\n\\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        #if (FXAA_QUALITY_PS > 9)\\n\\\n        if(doneNP) {\\n\\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\\n\\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\\n\\\n            doneNP = (!doneN) || (!doneP);\\n\\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\\n\\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            #if (FXAA_QUALITY_PS > 10)\\n\\\n            if(doneNP) {\\n\\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\\n\\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\\n\\\n                doneNP = (!doneN) || (!doneP);\\n\\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\\n\\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                #if (FXAA_QUALITY_PS > 11)\\n\\\n                if(doneNP) {\\n\\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\\n\\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\\n\\\n                    doneNP = (!doneN) || (!doneP);\\n\\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\\n\\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    #if (FXAA_QUALITY_PS > 12)\\n\\\n                    if(doneNP) {\\n\\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\\n\\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\\n\\\n                        doneNP = (!doneN) || (!doneP);\\n\\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\\n\\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    }\\n\\\n                    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                }\\n\\\n                #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            }\\n\\\n            #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        }\\n\\\n        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    }\\n\\\n    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                        }\\n\\\n                        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    }\\n\\\n                    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                }\\n\\\n                #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            }\\n\\\n            #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        }\\n\\\n        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    }\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat dstN = posM.x - posN.x;\\n\\\n    FxaaFloat dstP = posP.x - posM.x;\\n\\\n    if(!horzSpan) dstN = posM.y - posN.y;\\n\\\n    if(!horzSpan) dstP = posP.y - posM.y;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\\n\\\n    FxaaFloat spanLength = (dstP + dstN);\\n\\\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\\n\\\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaBool directionN = dstN < dstP;\\n\\\n    FxaaFloat dst = min(dstN, dstP);\\n\\\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\\n\\\n    FxaaFloat subpixG = subpixF * subpixF;\\n\\\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\\n\\\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\\n\\\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\\n\\\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\\n\\\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\\n\\\n    return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\\n\\\n}\\n\\\n\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61333\n")}}]);