"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[9096],{82075:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * The alpha rendering mode of the material.\n *\n * @enum {String}\n * @private\n */\nvar AlphaMode = {\n  /**\n   * The alpha value is ignored and the rendered output is fully opaque.\n   *\n   * @type {String}\n   * @constant\n   */\n  OPAQUE: "OPAQUE",\n\n  /**\n   * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n   *\n   * @type {String}\n   * @constant\n   */\n  MASK: "MASK",\n\n  /**\n   * The rendered output is composited onto the destination with alpha blending.\n   *\n   * @type {String}\n   * @constant\n   */\n  BLEND: "BLEND",\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(AlphaMode));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIwNzUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseURBQWUsd0JBQXdCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQWxwaGFNb2RlLmpzPzI4YzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYWxwaGEgcmVuZGVyaW5nIG1vZGUgb2YgdGhlIG1hdGVyaWFsLlxuICpcbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgQWxwaGFNb2RlID0ge1xuICAvKipcbiAgICogVGhlIGFscGhhIHZhbHVlIGlzIGlnbm9yZWQgYW5kIHRoZSByZW5kZXJlZCBvdXRwdXQgaXMgZnVsbHkgb3BhcXVlLlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIE9QQVFVRTogXCJPUEFRVUVcIixcblxuICAvKipcbiAgICogVGhlIHJlbmRlcmVkIG91dHB1dCBpcyBlaXRoZXIgZnVsbHkgb3BhcXVlIG9yIGZ1bGx5IHRyYW5zcGFyZW50IGRlcGVuZGluZyBvbiB0aGUgYWxwaGEgdmFsdWUgYW5kIHRoZSBzcGVjaWZpZWQgYWxwaGEgY3V0b2ZmIHZhbHVlLlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIE1BU0s6IFwiTUFTS1wiLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVuZGVyZWQgb3V0cHV0IGlzIGNvbXBvc2l0ZWQgb250byB0aGUgZGVzdGluYXRpb24gd2l0aCBhbHBoYSBibGVuZGluZy5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBCTEVORDogXCJCTEVORFwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShBbHBoYU1vZGUpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///82075\n')},12804:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83856);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8182);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(13633);\n/* harmony import */ var _CullFace_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(71593);\n\n\n\n\n\n\n\n/**\n * An appearance defines the full GLSL vertex and fragment shaders and the\n * render state used to draw a {@link Primitive}.  All appearances implement\n * this base <code>Appearance</code> interface.\n *\n * @alias Appearance\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link Appearance#renderState} has alpha blending enabled.\n * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link Appearance#renderState} has backface culling enabled.\n * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n * @param {Object} [options.renderState] Optional render state to override the default render state.\n *\n * @see MaterialAppearance\n * @see EllipsoidSurfaceAppearance\n * @see PerInstanceColorAppearance\n * @see DebugAppearance\n * @see PolylineColorAppearance\n * @see PolylineMaterialAppearance\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Geometry%20and%20Appearances.html|Geometry and Appearances Demo}\n */\nfunction Appearance(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link Appearance}\n   * properties, this is not read-only, so an appearance\'s material can change on the fly.\n   *\n   * @type Material\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = options.material;\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.translucent, true);\n\n  this._vertexShaderSource = options.vertexShaderSource;\n  this._fragmentShaderSource = options.fragmentShaderSource;\n  this._renderState = options.renderState;\n  this._closed = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.closed, false);\n}\n\nObject.defineProperties(Appearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof Appearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account the {@link Appearance#material}.\n   * Use {@link Appearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof Appearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   *\n   * @memberof Appearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed.\n   *\n   * @memberof Appearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n});\n\n/**\n * Procedurally creates the full GLSL fragment shader source for this appearance\n * taking into account {@link Appearance#fragmentShaderSource} and {@link Appearance#material}.\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nAppearance.prototype.getFragmentShaderSource = function () {\n  var parts = [];\n  if (this.flat) {\n    parts.push("#define FLAT");\n  }\n  if (this.faceForward) {\n    parts.push("#define FACE_FORWARD");\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this.material)) {\n    parts.push(this.material.shaderSource);\n  }\n  parts.push(this.fragmentShaderSource);\n\n  return parts.join("\\n");\n};\n\n/**\n * Determines if the geometry is translucent based on {@link Appearance#translucent} and {@link Material#isTranslucent}.\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nAppearance.prototype.isTranslucent = function () {\n  return (\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this.material) && this.material.isTranslucent()) ||\n    (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this.material) && this.translucent)\n  );\n};\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @returns {Object} The render state.\n */\nAppearance.prototype.getRenderState = function () {\n  var translucent = this.isTranslucent();\n  var rs = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this.renderState, false);\n  if (translucent) {\n    rs.depthMask = false;\n    rs.blending = _BlendingState_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND;\n  } else {\n    rs.depthMask = true;\n  }\n  return rs;\n};\n\n/**\n * @private\n */\nAppearance.getDefaultRenderState = function (translucent, closed, existing) {\n  var rs = {\n    depthTest: {\n      enabled: true,\n    },\n  };\n\n  if (translucent) {\n    rs.depthMask = false;\n    rs.blending = _BlendingState_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND;\n  }\n\n  if (closed) {\n    rs.cull = {\n      enabled: true,\n      face: _CullFace_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].BACK */ .Z.BACK,\n    };\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(existing)) {\n    rs = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(existing, rs, true);\n  }\n\n  return rs;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Appearance);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12804\n')},37741:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Credit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52975);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14459);\n/* harmony import */ var _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39756);\n/* harmony import */ var _Core_GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71351);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96190);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68985);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9407);\n/* harmony import */ var _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9121);\n/* harmony import */ var _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(79962);\n/* harmony import */ var _Core_WebMercatorTilingScheme_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(42423);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(13222);\n/* harmony import */ var _DiscardMissingTileImagePolicy_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(64158);\n/* harmony import */ var _ImageryLayerFeatureInfo_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(93855);\n/* harmony import */ var _ImageryProvider_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(95451);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef {Object} ArcGisMapServerImageryProvider.ConstructorOptions\n *\n * Initialization options for the ArcGisMapServerImageryProvider constructor\n *\n * @property {Resource|String} url The URL of the ArcGIS MapServer service.\n * @property {String} [token] The ArcGIS token used to authenticate with the ArcGIS MapServer service.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded.  If this value is not specified, a default\n *        {@link DiscardMissingTileImagePolicy} is used for tiled map servers, and a\n *        {@link NeverTileDiscardPolicy} is used for non-tiled map servers.  In the former case,\n *        we request tile 0,0 at the maximum tile level and check pixels (0,0), (200,20), (20,200),\n *        (80,110), and (160, 130).  If all of these pixels are transparent, the discard check is\n *        disabled and no tiles are discarded.  If any of them have a non-transparent color, any\n *        tile that has the same values in these pixel locations is discarded.  The end result of\n *        these defaults should be correct tile discarding for a standard ArcGIS Server.  To ensure\n *        that no tiles are discarded, construct and pass a {@link NeverTileDiscardPolicy} for this\n *        parameter.\n * @property {Boolean} [usePreCachedTilesIfAvailable=true] If true, the server\'s pre-cached\n *        tiles are used if they are available.  If false, any pre-cached tiles are ignored and the\n *        \'export\' service is used.\n * @property {String} [layers] A comma-separated list of the layers to show, or undefined if all layers should be shown.\n * @property {Boolean} [enablePickFeatures=true] If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will invoke\n *        the Identify service on the MapServer and return the features included in the response.  If false,\n *        {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you don\'t want this provider\'s features to\n *        be pickable. Can be overridden by setting the {@link ArcGisMapServerImageryProvider#enablePickFeatures} property on the object.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.  This parameter is ignored when accessing\n *                    a tiled layer.\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n *                       This parameter is ignored when accessing a tiled server.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified and used,\n *                    this parameter is ignored and the tiling scheme\'s ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.  This parameter is ignored when accessing a tiled server.\n * @property {Number} [tileWidth=256] The width of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @property {Number} [tileHeight=256] The height of each tile in pixels.  This parameter is ignored when accessing a tiled server.\n * @property {Number} [maximumLevel] The maximum tile level to request, or undefined if there is no maximum.  This parameter is ignored when accessing\n *                                        a tiled server.\n */\n\n/**\n * Provides tiled imagery hosted by an ArcGIS MapServer.  By default, the server\'s pre-cached tiles are\n * used, if available.\n *\n * @alias ArcGisMapServerImageryProvider\n * @constructor\n *\n * @param {ArcGisMapServerImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var esri = new Cesium.ArcGisMapServerImageryProvider({\n *     url : \'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\'\n * });\n *\n * @see {@link https://developers.arcgis.com/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction ArcGisMapServerImageryProvider(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(options.url)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("options.url is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(options.url);\n  resource.appendForwardSlash();\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(options.token)) {\n    resource.setQueryParameters({\n      token: options.token,\n    });\n  }\n\n  this._resource = resource;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tileWidth = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.tileWidth, 256);\n  this._tileHeight = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.tileHeight, 256);\n  this._maximumLevel = options.maximumLevel;\n  this._tilingScheme = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.tilingScheme,\n    new _Core_GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({ ellipsoid: options.ellipsoid })\n  );\n  this._useTiles = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.usePreCachedTilesIfAvailable, true);\n  this._rectangle = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.rectangle,\n    this._tilingScheme.rectangle\n  );\n  this._layers = options.layers;\n\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(credit);\n  }\n  this._credit = credit;\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link ArcGisMapServerImageryProvider#pickFeatures} will\n   * invoke the "identify" operation on the ArcGIS server and return the features included in the response.  If false,\n   * {@link ArcGisMapServerImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n   * without communicating with the server.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enablePickFeatures = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.enablePickFeatures, true);\n\n  this._errorEvent = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].defer */ .Z.defer();\n\n  // Grab the details of this MapServer.\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(data) {\n    var tileInfo = data.tileInfo;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(tileInfo)) {\n      that._useTiles = false;\n    } else {\n      that._tileWidth = tileInfo.rows;\n      that._tileHeight = tileInfo.cols;\n\n      if (\n        tileInfo.spatialReference.wkid === 102100 ||\n        tileInfo.spatialReference.wkid === 102113\n      ) {\n        that._tilingScheme = new _Core_WebMercatorTilingScheme_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n          ellipsoid: options.ellipsoid,\n        });\n      } else if (data.tileInfo.spatialReference.wkid === 4326) {\n        that._tilingScheme = new _Core_GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n          ellipsoid: options.ellipsoid,\n        });\n      } else {\n        var message =\n          "Tile spatial reference WKID " +\n          data.tileInfo.spatialReference.wkid +\n          " is not supported.";\n        metadataError = _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].handleError */ .Z.handleError(\n          metadataError,\n          that,\n          that._errorEvent,\n          message,\n          undefined,\n          undefined,\n          undefined,\n          requestMetadata\n        );\n        return;\n      }\n      that._maximumLevel = data.tileInfo.lods.length - 1;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(data.fullExtent)) {\n        if (\n          (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(data.fullExtent.spatialReference) &&\n          (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(data.fullExtent.spatialReference.wkid)\n        ) {\n          if (\n            data.fullExtent.spatialReference.wkid === 102100 ||\n            data.fullExtent.spatialReference.wkid === 102113\n          ) {\n            var projection = new _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n            var extent = data.fullExtent;\n            var sw = projection.unproject(\n              new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n                Math.max(\n                  extent.xmin,\n                  -that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                Math.max(\n                  extent.ymin,\n                  -that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                0.0\n              )\n            );\n            var ne = projection.unproject(\n              new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n                Math.min(\n                  extent.xmax,\n                  that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                Math.min(\n                  extent.ymax,\n                  that._tilingScheme.ellipsoid.maximumRadius * Math.PI\n                ),\n                0.0\n              )\n            );\n            that._rectangle = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n              sw.longitude,\n              sw.latitude,\n              ne.longitude,\n              ne.latitude\n            );\n          } else if (data.fullExtent.spatialReference.wkid === 4326) {\n            that._rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromDegrees */ .Z.fromDegrees(\n              data.fullExtent.xmin,\n              data.fullExtent.ymin,\n              data.fullExtent.xmax,\n              data.fullExtent.ymax\n            );\n          } else {\n            var extentMessage =\n              "fullExtent.spatialReference WKID " +\n              data.fullExtent.spatialReference.wkid +\n              " is not supported.";\n            metadataError = _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].handleError */ .Z.handleError(\n              metadataError,\n              that,\n              that._errorEvent,\n              extentMessage,\n              undefined,\n              undefined,\n              undefined,\n              requestMetadata\n            );\n            return;\n          }\n        }\n      } else {\n        that._rectangle = that._tilingScheme.rectangle;\n      }\n\n      // Install the default tile discard policy if none has been supplied.\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(that._tileDiscardPolicy)) {\n        that._tileDiscardPolicy = new _DiscardMissingTileImagePolicy_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z({\n          missingImageUrl: buildImageResource(that, 0, 0, that._maximumLevel)\n            .url,\n          pixelsToCheck: [\n            new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0, 0),\n            new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(200, 20),\n            new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(20, 200),\n            new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(80, 110),\n            new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(160, 130),\n          ],\n          disableCheckIfAllPixelsAreTransparent: true,\n        });\n      }\n\n      that._useTiles = true;\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(data.copyrightText) && data.copyrightText.length > 0) {\n      that._credit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(data.copyrightText);\n    }\n\n    that._ready = true;\n    that._readyPromise.resolve(true);\n    _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].handleSuccess */ .Z.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message =\n      "An error occurred while accessing " + that._resource.url + ".";\n    metadataError = _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].handleError */ .Z.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestMetadata\n    );\n    that._readyPromise.reject(new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(message));\n  }\n\n  function requestMetadata() {\n    var resource = that._resource.getDerivedResource({\n      queryParameters: {\n        f: "json",\n      },\n    });\n    var metadata = resource.fetchJsonp();\n    (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(metadata, metadataSuccess, metadataFailure);\n  }\n\n  if (this._useTiles) {\n    requestMetadata();\n  } else {\n    this._ready = true;\n    this._readyPromise.resolve(true);\n  }\n}\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  var resource;\n  if (imageryProvider._useTiles) {\n    resource = imageryProvider._resource.getDerivedResource({\n      url: "tile/" + level + "/" + y + "/" + x,\n      request: request,\n    });\n  } else {\n    var nativeRectangle = imageryProvider._tilingScheme.tileXYToNativeRectangle(\n      x,\n      y,\n      level\n    );\n    var bbox =\n      nativeRectangle.west +\n      "," +\n      nativeRectangle.south +\n      "," +\n      nativeRectangle.east +\n      "," +\n      nativeRectangle.north;\n\n    var query = {\n      bbox: bbox,\n      size: imageryProvider._tileWidth + "," + imageryProvider._tileHeight,\n      format: "png32",\n      transparent: true,\n      f: "image",\n    };\n\n    if (\n      imageryProvider._tilingScheme.projection instanceof _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z\n    ) {\n      query.bboxSR = 4326;\n      query.imageSR = 4326;\n    } else {\n      query.bboxSR = 3857;\n      query.imageSR = 3857;\n    }\n    if (imageryProvider.layers) {\n      query.layers = "show:" + imageryProvider.layers;\n    }\n\n    resource = imageryProvider._resource.getDerivedResource({\n      url: "export",\n      request: request,\n      queryParameters: query,\n    });\n  }\n\n  return resource;\n}\n\nObject.defineProperties(ArcGisMapServerImageryProvider.prototype, {\n  /**\n   * Gets the URL of the ArcGIS MapServer.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    },\n  },\n\n  /**\n   * Gets the ArcGIS token used to authenticate with the ArcGis MapServer service.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  token: {\n    get: function () {\n      return this._resource.queryParameters.token;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "tileWidth must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "tileHeight must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "maximumLevel must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "minimumLevel must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "tilingScheme must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "rectangle must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "tileDiscardPolicy must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether this imagery provider is using pre-cached tiles from the\n   * ArcGIS MapServer.  If the imagery provider is not yet ready ({@link ArcGisMapServerImageryProvider#ready}), this function\n   * will return the value of `options.usePreCachedTilesIfAvailable`, even if the MapServer does\n   * not have pre-cached tiles.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  usingPrecachedTiles: {\n    get: function () {\n      return this._useTiles;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets the comma-separated list of layer IDs to show.\n   * @memberof ArcGisMapServerImageryProvider.prototype\n   *\n   * @type {String}\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nArcGisMapServerImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link ArcGisMapServerImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nArcGisMapServerImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._ready) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n      "requestImage must not be called before the imagery provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  return _ImageryProvider_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].loadImage */ .Z.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request)\n  );\n};\n\n/**\n    /**\n     * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n     * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n     *\n     * @param {Number} x The tile X coordinate.\n     * @param {Number} y The tile Y coordinate.\n     * @param {Number} level The tile level.\n     * @param {Number} longitude The longitude at which to pick features.\n     * @param {Number} latitude  The latitude at which to pick features.\n     * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n     *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n     *                   instances.  The array may be empty if no features are found at the given location.\n     *\n     * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n     */\nArcGisMapServerImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._ready) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n      "pickFeatures must not be called before the imagery provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  if (!this.enablePickFeatures) {\n    return undefined;\n  }\n\n  var rectangle = this._tilingScheme.tileXYToNativeRectangle(x, y, level);\n\n  var horizontal;\n  var vertical;\n  var sr;\n  if (this._tilingScheme.projection instanceof _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z) {\n    horizontal = _Core_Math_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toDegrees */ .Z.toDegrees(longitude);\n    vertical = _Core_Math_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toDegrees */ .Z.toDegrees(latitude);\n    sr = "4326";\n  } else {\n    var projected = this._tilingScheme.projection.project(\n      new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(longitude, latitude, 0.0)\n    );\n    horizontal = projected.x;\n    vertical = projected.y;\n    sr = "3857";\n  }\n\n  var layers = "visible";\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(this._layers)) {\n    layers += ":" + this._layers;\n  }\n\n  var query = {\n    f: "json",\n    tolerance: 2,\n    geometryType: "esriGeometryPoint",\n    geometry: horizontal + "," + vertical,\n    mapExtent:\n      rectangle.west +\n      "," +\n      rectangle.south +\n      "," +\n      rectangle.east +\n      "," +\n      rectangle.north,\n    imageDisplay: this._tileWidth + "," + this._tileHeight + ",96",\n    sr: sr,\n    layers: layers,\n  };\n\n  var resource = this._resource.getDerivedResource({\n    url: "identify",\n    queryParameters: query,\n  });\n\n  return resource.fetchJson().then(function (json) {\n    var result = [];\n\n    var features = json.results;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(features)) {\n      return result;\n    }\n\n    for (var i = 0; i < features.length; ++i) {\n      var feature = features[i];\n\n      var featureInfo = new _ImageryLayerFeatureInfo_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z();\n      featureInfo.data = feature;\n      featureInfo.name = feature.value;\n      featureInfo.properties = feature.attributes;\n      featureInfo.configureDescriptionFromProperties(feature.attributes);\n\n      // If this is a point feature, use the coordinates of the point.\n      if (feature.geometryType === "esriGeometryPoint" && feature.geometry) {\n        var wkid =\n          feature.geometry.spatialReference &&\n          feature.geometry.spatialReference.wkid\n            ? feature.geometry.spatialReference.wkid\n            : 4326;\n        if (wkid === 4326 || wkid === 4283) {\n          featureInfo.position = _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromDegrees */ .Z.fromDegrees(\n            feature.geometry.x,\n            feature.geometry.y,\n            feature.geometry.z\n          );\n        } else if (wkid === 102100 || wkid === 900913 || wkid === 3857) {\n          var projection = new _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n          featureInfo.position = projection.unproject(\n            new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n              feature.geometry.x,\n              feature.geometry.y,\n              feature.geometry.z\n            )\n          );\n        }\n      }\n\n      result.push(featureInfo);\n    }\n\n    return result;\n  });\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ArcGisMapServerImageryProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RkFBcUI7QUFDcEQ7QUFDQSxnQkFBZ0Isb0VBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHlEQUFlLDhCQUE4QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0FyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5qcz8zZThjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYXJ0ZXNpYW4yIGZyb20gXCIuLi9Db3JlL0NhcnRlc2lhbjIuanNcIjtcbmltcG9ydCBDYXJ0ZXNpYW4zIGZyb20gXCIuLi9Db3JlL0NhcnRlc2lhbjMuanNcIjtcbmltcG9ydCBDYXJ0b2dyYXBoaWMgZnJvbSBcIi4uL0NvcmUvQ2FydG9ncmFwaGljLmpzXCI7XG5pbXBvcnQgQ3JlZGl0IGZyb20gXCIuLi9Db3JlL0NyZWRpdC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vQ29yZS9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuaW1wb3J0IEV2ZW50IGZyb20gXCIuLi9Db3JlL0V2ZW50LmpzXCI7XG5pbXBvcnQgR2VvZ3JhcGhpY1Byb2plY3Rpb24gZnJvbSBcIi4uL0NvcmUvR2VvZ3JhcGhpY1Byb2plY3Rpb24uanNcIjtcbmltcG9ydCBHZW9ncmFwaGljVGlsaW5nU2NoZW1lIGZyb20gXCIuLi9Db3JlL0dlb2dyYXBoaWNUaWxpbmdTY2hlbWUuanNcIjtcbmltcG9ydCBDZXNpdW1NYXRoIGZyb20gXCIuLi9Db3JlL01hdGguanNcIjtcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSBcIi4uL0NvcmUvUmVjdGFuZ2xlLmpzXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4uL0NvcmUvUmVzb3VyY2UuanNcIjtcbmltcG9ydCBSdW50aW1lRXJyb3IgZnJvbSBcIi4uL0NvcmUvUnVudGltZUVycm9yLmpzXCI7XG5pbXBvcnQgVGlsZVByb3ZpZGVyRXJyb3IgZnJvbSBcIi4uL0NvcmUvVGlsZVByb3ZpZGVyRXJyb3IuanNcIjtcbmltcG9ydCBXZWJNZXJjYXRvclByb2plY3Rpb24gZnJvbSBcIi4uL0NvcmUvV2ViTWVyY2F0b3JQcm9qZWN0aW9uLmpzXCI7XG5pbXBvcnQgV2ViTWVyY2F0b3JUaWxpbmdTY2hlbWUgZnJvbSBcIi4uL0NvcmUvV2ViTWVyY2F0b3JUaWxpbmdTY2hlbWUuanNcIjtcbmltcG9ydCB3aGVuIGZyb20gXCIuLi9UaGlyZFBhcnR5L3doZW4uanNcIjtcbmltcG9ydCBEaXNjYXJkTWlzc2luZ1RpbGVJbWFnZVBvbGljeSBmcm9tIFwiLi9EaXNjYXJkTWlzc2luZ1RpbGVJbWFnZVBvbGljeS5qc1wiO1xuaW1wb3J0IEltYWdlcnlMYXllckZlYXR1cmVJbmZvIGZyb20gXCIuL0ltYWdlcnlMYXllckZlYXR1cmVJbmZvLmpzXCI7XG5pbXBvcnQgSW1hZ2VyeVByb3ZpZGVyIGZyb20gXCIuL0ltYWdlcnlQcm92aWRlci5qc1wiO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5Db25zdHJ1Y3Rvck9wdGlvbnNcbiAqXG4gKiBJbml0aWFsaXphdGlvbiBvcHRpb25zIGZvciB0aGUgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyIGNvbnN0cnVjdG9yXG4gKlxuICogQHByb3BlcnR5IHtSZXNvdXJjZXxTdHJpbmd9IHVybCBUaGUgVVJMIG9mIHRoZSBBcmNHSVMgTWFwU2VydmVyIHNlcnZpY2UuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW3Rva2VuXSBUaGUgQXJjR0lTIHRva2VuIHVzZWQgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIEFyY0dJUyBNYXBTZXJ2ZXIgc2VydmljZS5cbiAqIEBwcm9wZXJ0eSB7VGlsZURpc2NhcmRQb2xpY3l9IFt0aWxlRGlzY2FyZFBvbGljeV0gVGhlIHBvbGljeSB0aGF0IGRldGVybWluZXMgaWYgYSB0aWxlXG4gKiAgICAgICAgaXMgaW52YWxpZCBhbmQgc2hvdWxkIGJlIGRpc2NhcmRlZC4gIElmIHRoaXMgdmFsdWUgaXMgbm90IHNwZWNpZmllZCwgYSBkZWZhdWx0XG4gKiAgICAgICAge0BsaW5rIERpc2NhcmRNaXNzaW5nVGlsZUltYWdlUG9saWN5fSBpcyB1c2VkIGZvciB0aWxlZCBtYXAgc2VydmVycywgYW5kIGFcbiAqICAgICAgICB7QGxpbmsgTmV2ZXJUaWxlRGlzY2FyZFBvbGljeX0gaXMgdXNlZCBmb3Igbm9uLXRpbGVkIG1hcCBzZXJ2ZXJzLiAgSW4gdGhlIGZvcm1lciBjYXNlLFxuICogICAgICAgIHdlIHJlcXVlc3QgdGlsZSAwLDAgYXQgdGhlIG1heGltdW0gdGlsZSBsZXZlbCBhbmQgY2hlY2sgcGl4ZWxzICgwLDApLCAoMjAwLDIwKSwgKDIwLDIwMCksXG4gKiAgICAgICAgKDgwLDExMCksIGFuZCAoMTYwLCAxMzApLiAgSWYgYWxsIG9mIHRoZXNlIHBpeGVscyBhcmUgdHJhbnNwYXJlbnQsIHRoZSBkaXNjYXJkIGNoZWNrIGlzXG4gKiAgICAgICAgZGlzYWJsZWQgYW5kIG5vIHRpbGVzIGFyZSBkaXNjYXJkZWQuICBJZiBhbnkgb2YgdGhlbSBoYXZlIGEgbm9uLXRyYW5zcGFyZW50IGNvbG9yLCBhbnlcbiAqICAgICAgICB0aWxlIHRoYXQgaGFzIHRoZSBzYW1lIHZhbHVlcyBpbiB0aGVzZSBwaXhlbCBsb2NhdGlvbnMgaXMgZGlzY2FyZGVkLiAgVGhlIGVuZCByZXN1bHQgb2ZcbiAqICAgICAgICB0aGVzZSBkZWZhdWx0cyBzaG91bGQgYmUgY29ycmVjdCB0aWxlIGRpc2NhcmRpbmcgZm9yIGEgc3RhbmRhcmQgQXJjR0lTIFNlcnZlci4gIFRvIGVuc3VyZVxuICogICAgICAgIHRoYXQgbm8gdGlsZXMgYXJlIGRpc2NhcmRlZCwgY29uc3RydWN0IGFuZCBwYXNzIGEge0BsaW5rIE5ldmVyVGlsZURpc2NhcmRQb2xpY3l9IGZvciB0aGlzXG4gKiAgICAgICAgcGFyYW1ldGVyLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbdXNlUHJlQ2FjaGVkVGlsZXNJZkF2YWlsYWJsZT10cnVlXSBJZiB0cnVlLCB0aGUgc2VydmVyJ3MgcHJlLWNhY2hlZFxuICogICAgICAgIHRpbGVzIGFyZSB1c2VkIGlmIHRoZXkgYXJlIGF2YWlsYWJsZS4gIElmIGZhbHNlLCBhbnkgcHJlLWNhY2hlZCB0aWxlcyBhcmUgaWdub3JlZCBhbmQgdGhlXG4gKiAgICAgICAgJ2V4cG9ydCcgc2VydmljZSBpcyB1c2VkLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IFtsYXllcnNdIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIGxheWVycyB0byBzaG93LCBvciB1bmRlZmluZWQgaWYgYWxsIGxheWVycyBzaG91bGQgYmUgc2hvd24uXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IFtlbmFibGVQaWNrRmVhdHVyZXM9dHJ1ZV0gSWYgdHJ1ZSwge0BsaW5rIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlciNwaWNrRmVhdHVyZXN9IHdpbGwgaW52b2tlXG4gKiAgICAgICAgdGhlIElkZW50aWZ5IHNlcnZpY2Ugb24gdGhlIE1hcFNlcnZlciBhbmQgcmV0dXJuIHRoZSBmZWF0dXJlcyBpbmNsdWRlZCBpbiB0aGUgcmVzcG9uc2UuICBJZiBmYWxzZSxcbiAqICAgICAgICB7QGxpbmsgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyI3BpY2tGZWF0dXJlc30gd2lsbCBpbW1lZGlhdGVseSByZXR1cm4gdW5kZWZpbmVkIChpbmRpY2F0aW5nIG5vIHBpY2thYmxlIGZlYXR1cmVzKVxuICogICAgICAgIHdpdGhvdXQgY29tbXVuaWNhdGluZyB3aXRoIHRoZSBzZXJ2ZXIuICBTZXQgdGhpcyBwcm9wZXJ0eSB0byBmYWxzZSBpZiB5b3UgZG9uJ3Qgd2FudCB0aGlzIHByb3ZpZGVyJ3MgZmVhdHVyZXMgdG9cbiAqICAgICAgICBiZSBwaWNrYWJsZS4gQ2FuIGJlIG92ZXJyaWRkZW4gYnkgc2V0dGluZyB0aGUge0BsaW5rIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlciNlbmFibGVQaWNrRmVhdHVyZXN9IHByb3BlcnR5IG9uIHRoZSBvYmplY3QuXG4gKiBAcHJvcGVydHkge1JlY3RhbmdsZX0gW3JlY3RhbmdsZT1SZWN0YW5nbGUuTUFYX1ZBTFVFXSBUaGUgcmVjdGFuZ2xlIG9mIHRoZSBsYXllci4gIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgd2hlbiBhY2Nlc3NpbmdcbiAqICAgICAgICAgICAgICAgICAgICBhIHRpbGVkIGxheWVyLlxuICogQHByb3BlcnR5IHtUaWxpbmdTY2hlbWV9IFt0aWxpbmdTY2hlbWU9bmV3IEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUoKV0gVGhlIHRpbGluZyBzY2hlbWUgdG8gdXNlIHRvIGRpdmlkZSB0aGUgd29ybGQgaW50byB0aWxlcy5cbiAqICAgICAgICAgICAgICAgICAgICAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIHdoZW4gYWNjZXNzaW5nIGEgdGlsZWQgc2VydmVyLlxuICogQHByb3BlcnR5IHtFbGxpcHNvaWR9IFtlbGxpcHNvaWRdIFRoZSBlbGxpcHNvaWQuICBJZiB0aGUgdGlsaW5nU2NoZW1lIGlzIHNwZWNpZmllZCBhbmQgdXNlZCxcbiAqICAgICAgICAgICAgICAgICAgICB0aGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGFuZCB0aGUgdGlsaW5nIHNjaGVtZSdzIGVsbGlwc29pZCBpcyB1c2VkIGluc3RlYWQuIElmIG5laXRoZXJcbiAqICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkLCB0aGUgV0dTODQgZWxsaXBzb2lkIGlzIHVzZWQuXG4gKiBAcHJvcGVydHkge0NyZWRpdHxTdHJpbmd9IFtjcmVkaXRdIEEgY3JlZGl0IGZvciB0aGUgZGF0YSBzb3VyY2UsIHdoaWNoIGlzIGRpc3BsYXllZCBvbiB0aGUgY2FudmFzLiAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCB3aGVuIGFjY2Vzc2luZyBhIHRpbGVkIHNlcnZlci5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdGlsZVdpZHRoPTI1Nl0gVGhlIHdpZHRoIG9mIGVhY2ggdGlsZSBpbiBwaXhlbHMuICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIHdoZW4gYWNjZXNzaW5nIGEgdGlsZWQgc2VydmVyLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFt0aWxlSGVpZ2h0PTI1Nl0gVGhlIGhlaWdodCBvZiBlYWNoIHRpbGUgaW4gcGl4ZWxzLiAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCB3aGVuIGFjY2Vzc2luZyBhIHRpbGVkIHNlcnZlci5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWF4aW11bUxldmVsXSBUaGUgbWF4aW11bSB0aWxlIGxldmVsIHRvIHJlcXVlc3QsIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBubyBtYXhpbXVtLiAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCB3aGVuIGFjY2Vzc2luZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSB0aWxlZCBzZXJ2ZXIuXG4gKi9cblxuLyoqXG4gKiBQcm92aWRlcyB0aWxlZCBpbWFnZXJ5IGhvc3RlZCBieSBhbiBBcmNHSVMgTWFwU2VydmVyLiAgQnkgZGVmYXVsdCwgdGhlIHNlcnZlcidzIHByZS1jYWNoZWQgdGlsZXMgYXJlXG4gKiB1c2VkLCBpZiBhdmFpbGFibGUuXG4gKlxuICogQGFsaWFzIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlclxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIuQ29uc3RydWN0b3JPcHRpb25zfSBvcHRpb25zIE9iamVjdCBkZXNjcmliaW5nIGluaXRpYWxpemF0aW9uIG9wdGlvbnNcbiAqXG4gKiBAc2VlIEJpbmdNYXBzSW1hZ2VyeVByb3ZpZGVyXG4gKiBAc2VlIEdvb2dsZUVhcnRoRW50ZXJwcmlzZU1hcHNQcm92aWRlclxuICogQHNlZSBPcGVuU3RyZWV0TWFwSW1hZ2VyeVByb3ZpZGVyXG4gKiBAc2VlIFNpbmdsZVRpbGVJbWFnZXJ5UHJvdmlkZXJcbiAqIEBzZWUgVGlsZU1hcFNlcnZpY2VJbWFnZXJ5UHJvdmlkZXJcbiAqIEBzZWUgV2ViTWFwU2VydmljZUltYWdlcnlQcm92aWRlclxuICogQHNlZSBXZWJNYXBUaWxlU2VydmljZUltYWdlcnlQcm92aWRlclxuICogQHNlZSBVcmxUZW1wbGF0ZUltYWdlcnlQcm92aWRlclxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIGVzcmkgPSBuZXcgQ2VzaXVtLkFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlcih7XG4gKiAgICAgdXJsIDogJ2h0dHBzOi8vc2VydmljZXMuYXJjZ2lzb25saW5lLmNvbS9BcmNHSVMvcmVzdC9zZXJ2aWNlcy9Xb3JsZF9JbWFnZXJ5L01hcFNlcnZlcidcbiAqIH0pO1xuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVycy5hcmNnaXMuY29tL3Jlc3QvfEFyY0dJUyBTZXJ2ZXIgUkVTVCBBUEl9XG4gKiBAc2VlIHtAbGluayBodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzL3xDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZ31cbiAqL1xuZnVuY3Rpb24gQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLCBkZWZhdWx0VmFsdWUuRU1QVFlfT0JKRUNUKTtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIWRlZmluZWQob3B0aW9ucy51cmwpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwib3B0aW9ucy51cmwgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBhbHBoYSBibGVuZGluZyB2YWx1ZSBvZiB0aGlzIHByb3ZpZGVyLCB3aXRoIDAuMCByZXByZXNlbnRpbmcgZnVsbHkgdHJhbnNwYXJlbnQgYW5kXG4gICAqIDEuMCByZXByZXNlbnRpbmcgZnVsbHkgb3BhcXVlLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfHVuZGVmaW5lZH1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLmRlZmF1bHRBbHBoYSA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYWxwaGEgYmxlbmRpbmcgdmFsdWUgb24gdGhlIG5pZ2h0IHNpZGUgb2YgdGhlIGdsb2JlIG9mIHRoaXMgcHJvdmlkZXIsIHdpdGggMC4wIHJlcHJlc2VudGluZyBmdWxseSB0cmFuc3BhcmVudCBhbmRcbiAgICogMS4wIHJlcHJlc2VudGluZyBmdWxseSBvcGFxdWUuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ8dW5kZWZpbmVkfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuZGVmYXVsdE5pZ2h0QWxwaGEgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGFscGhhIGJsZW5kaW5nIHZhbHVlIG9uIHRoZSBkYXkgc2lkZSBvZiB0aGUgZ2xvYmUgb2YgdGhpcyBwcm92aWRlciwgd2l0aCAwLjAgcmVwcmVzZW50aW5nIGZ1bGx5IHRyYW5zcGFyZW50IGFuZFxuICAgKiAxLjAgcmVwcmVzZW50aW5nIGZ1bGx5IG9wYXF1ZS5cbiAgICpcbiAgICogQHR5cGUge051bWJlcnx1bmRlZmluZWR9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5kZWZhdWx0RGF5QWxwaGEgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGJyaWdodG5lc3Mgb2YgdGhpcyBwcm92aWRlci4gIDEuMCB1c2VzIHRoZSB1bm1vZGlmaWVkIGltYWdlcnkgY29sb3IuICBMZXNzIHRoYW4gMS4wXG4gICAqIG1ha2VzIHRoZSBpbWFnZXJ5IGRhcmtlciB3aGlsZSBncmVhdGVyIHRoYW4gMS4wIG1ha2VzIGl0IGJyaWdodGVyLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfHVuZGVmaW5lZH1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLmRlZmF1bHRCcmlnaHRuZXNzID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBjb250cmFzdCBvZiB0aGlzIHByb3ZpZGVyLiAgMS4wIHVzZXMgdGhlIHVubW9kaWZpZWQgaW1hZ2VyeSBjb2xvci4gIExlc3MgdGhhbiAxLjAgcmVkdWNlc1xuICAgKiB0aGUgY29udHJhc3Qgd2hpbGUgZ3JlYXRlciB0aGFuIDEuMCBpbmNyZWFzZXMgaXQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ8dW5kZWZpbmVkfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuZGVmYXVsdENvbnRyYXN0ID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBodWUgb2YgdGhpcyBwcm92aWRlciBpbiByYWRpYW5zLiAwLjAgdXNlcyB0aGUgdW5tb2RpZmllZCBpbWFnZXJ5IGNvbG9yLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfHVuZGVmaW5lZH1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLmRlZmF1bHRIdWUgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHNhdHVyYXRpb24gb2YgdGhpcyBwcm92aWRlci4gMS4wIHVzZXMgdGhlIHVubW9kaWZpZWQgaW1hZ2VyeSBjb2xvci4gTGVzcyB0aGFuIDEuMCByZWR1Y2VzIHRoZVxuICAgKiBzYXR1cmF0aW9uIHdoaWxlIGdyZWF0ZXIgdGhhbiAxLjAgaW5jcmVhc2VzIGl0LlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfHVuZGVmaW5lZH1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLmRlZmF1bHRTYXR1cmF0aW9uID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBnYW1tYSBjb3JyZWN0aW9uIHRvIGFwcGx5IHRvIHRoaXMgcHJvdmlkZXIuICAxLjAgdXNlcyB0aGUgdW5tb2RpZmllZCBpbWFnZXJ5IGNvbG9yLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfHVuZGVmaW5lZH1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLmRlZmF1bHRHYW1tYSA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdGV4dHVyZSBtaW5pZmljYXRpb24gZmlsdGVyIHRvIGFwcGx5IHRvIHRoaXMgcHJvdmlkZXIuXG4gICAqXG4gICAqIEB0eXBlIHtUZXh0dXJlTWluaWZpY2F0aW9uRmlsdGVyfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuZGVmYXVsdE1pbmlmaWNhdGlvbkZpbHRlciA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdGV4dHVyZSBtYWduaWZpY2F0aW9uIGZpbHRlciB0byBhcHBseSB0byB0aGlzIHByb3ZpZGVyLlxuICAgKlxuICAgKiBAdHlwZSB7VGV4dHVyZU1hZ25pZmljYXRpb25GaWx0ZXJ9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5kZWZhdWx0TWFnbmlmaWNhdGlvbkZpbHRlciA9IHVuZGVmaW5lZDtcblxuICB2YXIgcmVzb3VyY2UgPSBSZXNvdXJjZS5jcmVhdGVJZk5lZWRlZChvcHRpb25zLnVybCk7XG4gIHJlc291cmNlLmFwcGVuZEZvcndhcmRTbGFzaCgpO1xuXG4gIGlmIChkZWZpbmVkKG9wdGlvbnMudG9rZW4pKSB7XG4gICAgcmVzb3VyY2Uuc2V0UXVlcnlQYXJhbWV0ZXJzKHtcbiAgICAgIHRva2VuOiBvcHRpb25zLnRva2VuLFxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5fcmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgdGhpcy5fdGlsZURpc2NhcmRQb2xpY3kgPSBvcHRpb25zLnRpbGVEaXNjYXJkUG9saWN5O1xuXG4gIHRoaXMuX3RpbGVXaWR0aCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLnRpbGVXaWR0aCwgMjU2KTtcbiAgdGhpcy5fdGlsZUhlaWdodCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLnRpbGVIZWlnaHQsIDI1Nik7XG4gIHRoaXMuX21heGltdW1MZXZlbCA9IG9wdGlvbnMubWF4aW11bUxldmVsO1xuICB0aGlzLl90aWxpbmdTY2hlbWUgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy50aWxpbmdTY2hlbWUsXG4gICAgbmV3IEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUoeyBlbGxpcHNvaWQ6IG9wdGlvbnMuZWxsaXBzb2lkIH0pXG4gICk7XG4gIHRoaXMuX3VzZVRpbGVzID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMudXNlUHJlQ2FjaGVkVGlsZXNJZkF2YWlsYWJsZSwgdHJ1ZSk7XG4gIHRoaXMuX3JlY3RhbmdsZSA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLnJlY3RhbmdsZSxcbiAgICB0aGlzLl90aWxpbmdTY2hlbWUucmVjdGFuZ2xlXG4gICk7XG4gIHRoaXMuX2xheWVycyA9IG9wdGlvbnMubGF5ZXJzO1xuXG4gIHZhciBjcmVkaXQgPSBvcHRpb25zLmNyZWRpdDtcbiAgaWYgKHR5cGVvZiBjcmVkaXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICBjcmVkaXQgPSBuZXcgQ3JlZGl0KGNyZWRpdCk7XG4gIH1cbiAgdGhpcy5fY3JlZGl0ID0gY3JlZGl0O1xuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgZmVhdHVyZSBwaWNraW5nIGlzIGVuYWJsZWQuICBJZiB0cnVlLCB7QGxpbmsgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyI3BpY2tGZWF0dXJlc30gd2lsbFxuICAgKiBpbnZva2UgdGhlIFwiaWRlbnRpZnlcIiBvcGVyYXRpb24gb24gdGhlIEFyY0dJUyBzZXJ2ZXIgYW5kIHJldHVybiB0aGUgZmVhdHVyZXMgaW5jbHVkZWQgaW4gdGhlIHJlc3BvbnNlLiAgSWYgZmFsc2UsXG4gICAqIHtAbGluayBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIjcGlja0ZlYXR1cmVzfSB3aWxsIGltbWVkaWF0ZWx5IHJldHVybiB1bmRlZmluZWQgKGluZGljYXRpbmcgbm8gcGlja2FibGUgZmVhdHVyZXMpXG4gICAqIHdpdGhvdXQgY29tbXVuaWNhdGluZyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB0aGlzLmVuYWJsZVBpY2tGZWF0dXJlcyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmVuYWJsZVBpY2tGZWF0dXJlcywgdHJ1ZSk7XG5cbiAgdGhpcy5fZXJyb3JFdmVudCA9IG5ldyBFdmVudCgpO1xuXG4gIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG4gIHRoaXMuX3JlYWR5UHJvbWlzZSA9IHdoZW4uZGVmZXIoKTtcblxuICAvLyBHcmFiIHRoZSBkZXRhaWxzIG9mIHRoaXMgTWFwU2VydmVyLlxuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBtZXRhZGF0YUVycm9yO1xuXG4gIGZ1bmN0aW9uIG1ldGFkYXRhU3VjY2VzcyhkYXRhKSB7XG4gICAgdmFyIHRpbGVJbmZvID0gZGF0YS50aWxlSW5mbztcbiAgICBpZiAoIWRlZmluZWQodGlsZUluZm8pKSB7XG4gICAgICB0aGF0Ll91c2VUaWxlcyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll90aWxlV2lkdGggPSB0aWxlSW5mby5yb3dzO1xuICAgICAgdGhhdC5fdGlsZUhlaWdodCA9IHRpbGVJbmZvLmNvbHM7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGlsZUluZm8uc3BhdGlhbFJlZmVyZW5jZS53a2lkID09PSAxMDIxMDAgfHxcbiAgICAgICAgdGlsZUluZm8uc3BhdGlhbFJlZmVyZW5jZS53a2lkID09PSAxMDIxMTNcbiAgICAgICkge1xuICAgICAgICB0aGF0Ll90aWxpbmdTY2hlbWUgPSBuZXcgV2ViTWVyY2F0b3JUaWxpbmdTY2hlbWUoe1xuICAgICAgICAgIGVsbGlwc29pZDogb3B0aW9ucy5lbGxpcHNvaWQsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnRpbGVJbmZvLnNwYXRpYWxSZWZlcmVuY2Uud2tpZCA9PT0gNDMyNikge1xuICAgICAgICB0aGF0Ll90aWxpbmdTY2hlbWUgPSBuZXcgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZSh7XG4gICAgICAgICAgZWxsaXBzb2lkOiBvcHRpb25zLmVsbGlwc29pZCxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWVzc2FnZSA9XG4gICAgICAgICAgXCJUaWxlIHNwYXRpYWwgcmVmZXJlbmNlIFdLSUQgXCIgK1xuICAgICAgICAgIGRhdGEudGlsZUluZm8uc3BhdGlhbFJlZmVyZW5jZS53a2lkICtcbiAgICAgICAgICBcIiBpcyBub3Qgc3VwcG9ydGVkLlwiO1xuICAgICAgICBtZXRhZGF0YUVycm9yID0gVGlsZVByb3ZpZGVyRXJyb3IuaGFuZGxlRXJyb3IoXG4gICAgICAgICAgbWV0YWRhdGFFcnJvcixcbiAgICAgICAgICB0aGF0LFxuICAgICAgICAgIHRoYXQuX2Vycm9yRXZlbnQsXG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICByZXF1ZXN0TWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhhdC5fbWF4aW11bUxldmVsID0gZGF0YS50aWxlSW5mby5sb2RzLmxlbmd0aCAtIDE7XG5cbiAgICAgIGlmIChkZWZpbmVkKGRhdGEuZnVsbEV4dGVudCkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGRlZmluZWQoZGF0YS5mdWxsRXh0ZW50LnNwYXRpYWxSZWZlcmVuY2UpICYmXG4gICAgICAgICAgZGVmaW5lZChkYXRhLmZ1bGxFeHRlbnQuc3BhdGlhbFJlZmVyZW5jZS53a2lkKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBkYXRhLmZ1bGxFeHRlbnQuc3BhdGlhbFJlZmVyZW5jZS53a2lkID09PSAxMDIxMDAgfHxcbiAgICAgICAgICAgIGRhdGEuZnVsbEV4dGVudC5zcGF0aWFsUmVmZXJlbmNlLndraWQgPT09IDEwMjExM1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIHByb2plY3Rpb24gPSBuZXcgV2ViTWVyY2F0b3JQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICB2YXIgZXh0ZW50ID0gZGF0YS5mdWxsRXh0ZW50O1xuICAgICAgICAgICAgdmFyIHN3ID0gcHJvamVjdGlvbi51bnByb2plY3QoXG4gICAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4zKFxuICAgICAgICAgICAgICAgIE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgZXh0ZW50LnhtaW4sXG4gICAgICAgICAgICAgICAgICAtdGhhdC5fdGlsaW5nU2NoZW1lLmVsbGlwc29pZC5tYXhpbXVtUmFkaXVzICogTWF0aC5QSVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICBleHRlbnQueW1pbixcbiAgICAgICAgICAgICAgICAgIC10aGF0Ll90aWxpbmdTY2hlbWUuZWxsaXBzb2lkLm1heGltdW1SYWRpdXMgKiBNYXRoLlBJXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAwLjBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHZhciBuZSA9IHByb2plY3Rpb24udW5wcm9qZWN0KFxuICAgICAgICAgICAgICBuZXcgQ2FydGVzaWFuMyhcbiAgICAgICAgICAgICAgICBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgIGV4dGVudC54bWF4LFxuICAgICAgICAgICAgICAgICAgdGhhdC5fdGlsaW5nU2NoZW1lLmVsbGlwc29pZC5tYXhpbXVtUmFkaXVzICogTWF0aC5QSVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICBleHRlbnQueW1heCxcbiAgICAgICAgICAgICAgICAgIHRoYXQuX3RpbGluZ1NjaGVtZS5lbGxpcHNvaWQubWF4aW11bVJhZGl1cyAqIE1hdGguUElcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIDAuMFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhhdC5fcmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZShcbiAgICAgICAgICAgICAgc3cubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICBzdy5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgbmUubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICBuZS5sYXRpdHVkZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZnVsbEV4dGVudC5zcGF0aWFsUmVmZXJlbmNlLndraWQgPT09IDQzMjYpIHtcbiAgICAgICAgICAgIHRoYXQuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZS5mcm9tRGVncmVlcyhcbiAgICAgICAgICAgICAgZGF0YS5mdWxsRXh0ZW50LnhtaW4sXG4gICAgICAgICAgICAgIGRhdGEuZnVsbEV4dGVudC55bWluLFxuICAgICAgICAgICAgICBkYXRhLmZ1bGxFeHRlbnQueG1heCxcbiAgICAgICAgICAgICAgZGF0YS5mdWxsRXh0ZW50LnltYXhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBleHRlbnRNZXNzYWdlID1cbiAgICAgICAgICAgICAgXCJmdWxsRXh0ZW50LnNwYXRpYWxSZWZlcmVuY2UgV0tJRCBcIiArXG4gICAgICAgICAgICAgIGRhdGEuZnVsbEV4dGVudC5zcGF0aWFsUmVmZXJlbmNlLndraWQgK1xuICAgICAgICAgICAgICBcIiBpcyBub3Qgc3VwcG9ydGVkLlwiO1xuICAgICAgICAgICAgbWV0YWRhdGFFcnJvciA9IFRpbGVQcm92aWRlckVycm9yLmhhbmRsZUVycm9yKFxuICAgICAgICAgICAgICBtZXRhZGF0YUVycm9yLFxuICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICB0aGF0Ll9lcnJvckV2ZW50LFxuICAgICAgICAgICAgICBleHRlbnRNZXNzYWdlLFxuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGF0Ll9yZWN0YW5nbGUgPSB0aGF0Ll90aWxpbmdTY2hlbWUucmVjdGFuZ2xlO1xuICAgICAgfVxuXG4gICAgICAvLyBJbnN0YWxsIHRoZSBkZWZhdWx0IHRpbGUgZGlzY2FyZCBwb2xpY3kgaWYgbm9uZSBoYXMgYmVlbiBzdXBwbGllZC5cbiAgICAgIGlmICghZGVmaW5lZCh0aGF0Ll90aWxlRGlzY2FyZFBvbGljeSkpIHtcbiAgICAgICAgdGhhdC5fdGlsZURpc2NhcmRQb2xpY3kgPSBuZXcgRGlzY2FyZE1pc3NpbmdUaWxlSW1hZ2VQb2xpY3koe1xuICAgICAgICAgIG1pc3NpbmdJbWFnZVVybDogYnVpbGRJbWFnZVJlc291cmNlKHRoYXQsIDAsIDAsIHRoYXQuX21heGltdW1MZXZlbClcbiAgICAgICAgICAgIC51cmwsXG4gICAgICAgICAgcGl4ZWxzVG9DaGVjazogW1xuICAgICAgICAgICAgbmV3IENhcnRlc2lhbjIoMCwgMCksXG4gICAgICAgICAgICBuZXcgQ2FydGVzaWFuMigyMDAsIDIwKSxcbiAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4yKDIwLCAyMDApLFxuICAgICAgICAgICAgbmV3IENhcnRlc2lhbjIoODAsIDExMCksXG4gICAgICAgICAgICBuZXcgQ2FydGVzaWFuMigxNjAsIDEzMCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICBkaXNhYmxlQ2hlY2tJZkFsbFBpeGVsc0FyZVRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhhdC5fdXNlVGlsZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkZWZpbmVkKGRhdGEuY29weXJpZ2h0VGV4dCkgJiYgZGF0YS5jb3B5cmlnaHRUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoYXQuX2NyZWRpdCA9IG5ldyBDcmVkaXQoZGF0YS5jb3B5cmlnaHRUZXh0KTtcbiAgICB9XG5cbiAgICB0aGF0Ll9yZWFkeSA9IHRydWU7XG4gICAgdGhhdC5fcmVhZHlQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgVGlsZVByb3ZpZGVyRXJyb3IuaGFuZGxlU3VjY2VzcyhtZXRhZGF0YUVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ldGFkYXRhRmFpbHVyZShlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPVxuICAgICAgXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhY2Nlc3NpbmcgXCIgKyB0aGF0Ll9yZXNvdXJjZS51cmwgKyBcIi5cIjtcbiAgICBtZXRhZGF0YUVycm9yID0gVGlsZVByb3ZpZGVyRXJyb3IuaGFuZGxlRXJyb3IoXG4gICAgICBtZXRhZGF0YUVycm9yLFxuICAgICAgdGhhdCxcbiAgICAgIHRoYXQuX2Vycm9yRXZlbnQsXG4gICAgICBtZXNzYWdlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgcmVxdWVzdE1ldGFkYXRhXG4gICAgKTtcbiAgICB0aGF0Ll9yZWFkeVByb21pc2UucmVqZWN0KG5ldyBSdW50aW1lRXJyb3IobWVzc2FnZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgIHZhciByZXNvdXJjZSA9IHRoYXQuX3Jlc291cmNlLmdldERlcml2ZWRSZXNvdXJjZSh7XG4gICAgICBxdWVyeVBhcmFtZXRlcnM6IHtcbiAgICAgICAgZjogXCJqc29uXCIsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHZhciBtZXRhZGF0YSA9IHJlc291cmNlLmZldGNoSnNvbnAoKTtcbiAgICB3aGVuKG1ldGFkYXRhLCBtZXRhZGF0YVN1Y2Nlc3MsIG1ldGFkYXRhRmFpbHVyZSk7XG4gIH1cblxuICBpZiAodGhpcy5fdXNlVGlsZXMpIHtcbiAgICByZXF1ZXN0TWV0YWRhdGEoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9yZWFkeSA9IHRydWU7XG4gICAgdGhpcy5fcmVhZHlQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRJbWFnZVJlc291cmNlKGltYWdlcnlQcm92aWRlciwgeCwgeSwgbGV2ZWwsIHJlcXVlc3QpIHtcbiAgdmFyIHJlc291cmNlO1xuICBpZiAoaW1hZ2VyeVByb3ZpZGVyLl91c2VUaWxlcykge1xuICAgIHJlc291cmNlID0gaW1hZ2VyeVByb3ZpZGVyLl9yZXNvdXJjZS5nZXREZXJpdmVkUmVzb3VyY2Uoe1xuICAgICAgdXJsOiBcInRpbGUvXCIgKyBsZXZlbCArIFwiL1wiICsgeSArIFwiL1wiICsgeCxcbiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5hdGl2ZVJlY3RhbmdsZSA9IGltYWdlcnlQcm92aWRlci5fdGlsaW5nU2NoZW1lLnRpbGVYWVRvTmF0aXZlUmVjdGFuZ2xlKFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBsZXZlbFxuICAgICk7XG4gICAgdmFyIGJib3ggPVxuICAgICAgbmF0aXZlUmVjdGFuZ2xlLndlc3QgK1xuICAgICAgXCIsXCIgK1xuICAgICAgbmF0aXZlUmVjdGFuZ2xlLnNvdXRoICtcbiAgICAgIFwiLFwiICtcbiAgICAgIG5hdGl2ZVJlY3RhbmdsZS5lYXN0ICtcbiAgICAgIFwiLFwiICtcbiAgICAgIG5hdGl2ZVJlY3RhbmdsZS5ub3J0aDtcblxuICAgIHZhciBxdWVyeSA9IHtcbiAgICAgIGJib3g6IGJib3gsXG4gICAgICBzaXplOiBpbWFnZXJ5UHJvdmlkZXIuX3RpbGVXaWR0aCArIFwiLFwiICsgaW1hZ2VyeVByb3ZpZGVyLl90aWxlSGVpZ2h0LFxuICAgICAgZm9ybWF0OiBcInBuZzMyXCIsXG4gICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICAgIGY6IFwiaW1hZ2VcIixcbiAgICB9O1xuXG4gICAgaWYgKFxuICAgICAgaW1hZ2VyeVByb3ZpZGVyLl90aWxpbmdTY2hlbWUucHJvamVjdGlvbiBpbnN0YW5jZW9mIEdlb2dyYXBoaWNQcm9qZWN0aW9uXG4gICAgKSB7XG4gICAgICBxdWVyeS5iYm94U1IgPSA0MzI2O1xuICAgICAgcXVlcnkuaW1hZ2VTUiA9IDQzMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5LmJib3hTUiA9IDM4NTc7XG4gICAgICBxdWVyeS5pbWFnZVNSID0gMzg1NztcbiAgICB9XG4gICAgaWYgKGltYWdlcnlQcm92aWRlci5sYXllcnMpIHtcbiAgICAgIHF1ZXJ5LmxheWVycyA9IFwic2hvdzpcIiArIGltYWdlcnlQcm92aWRlci5sYXllcnM7XG4gICAgfVxuXG4gICAgcmVzb3VyY2UgPSBpbWFnZXJ5UHJvdmlkZXIuX3Jlc291cmNlLmdldERlcml2ZWRSZXNvdXJjZSh7XG4gICAgICB1cmw6IFwiZXhwb3J0XCIsXG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgcXVlcnlQYXJhbWV0ZXJzOiBxdWVyeSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXNvdXJjZTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogR2V0cyB0aGUgVVJMIG9mIHRoZSBBcmNHSVMgTWFwU2VydmVyLlxuICAgKiBAbWVtYmVyb2YgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHVybDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlLl91cmw7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgQXJjR0lTIHRva2VuIHVzZWQgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIEFyY0dpcyBNYXBTZXJ2ZXIgc2VydmljZS5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB0b2tlbjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnF1ZXJ5UGFyYW1ldGVycy50b2tlbjtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcm94eSB1c2VkIGJ5IHRoaXMgcHJvdmlkZXIuXG4gICAqIEBtZW1iZXJvZiBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIucHJvdG90eXBlXG4gICAqIEB0eXBlIHtQcm94eX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBwcm94eToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnByb3h5O1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHdpZHRoIG9mIGVhY2ggdGlsZSwgaW4gcGl4ZWxzLiBUaGlzIGZ1bmN0aW9uIHNob3VsZFxuICAgKiBub3QgYmUgY2FsbGVkIGJlZm9yZSB7QGxpbmsgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyI3JlYWR5fSByZXR1cm5zIHRydWUuXG4gICAqIEBtZW1iZXJvZiBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIucHJvdG90eXBlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdGlsZVdpZHRoOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKCF0aGlzLl9yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJ0aWxlV2lkdGggbXVzdCBub3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgaW1hZ2VyeSBwcm92aWRlciBpcyByZWFkeS5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90aWxlV2lkdGg7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgaGVpZ2h0IG9mIGVhY2ggdGlsZSwgaW4gcGl4ZWxzLiAgVGhpcyBmdW5jdGlvbiBzaG91bGRcbiAgICogbm90IGJlIGNhbGxlZCBiZWZvcmUge0BsaW5rIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlciNyZWFkeX0gcmV0dXJucyB0cnVlLlxuICAgKiBAbWVtYmVyb2YgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHRpbGVIZWlnaHQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoIXRoaXMuX3JlYWR5KSB7XG4gICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcbiAgICAgICAgICBcInRpbGVIZWlnaHQgbXVzdCBub3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgaW1hZ2VyeSBwcm92aWRlciBpcyByZWFkeS5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90aWxlSGVpZ2h0O1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1heGltdW0gbGV2ZWwtb2YtZGV0YWlsIHRoYXQgY2FuIGJlIHJlcXVlc3RlZC4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkXG4gICAqIG5vdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIjcmVhZHl9IHJldHVybnMgdHJ1ZS5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICogQHR5cGUge051bWJlcnx1bmRlZmluZWR9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbWF4aW11bUxldmVsOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKCF0aGlzLl9yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJtYXhpbXVtTGV2ZWwgbXVzdCBub3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgaW1hZ2VyeSBwcm92aWRlciBpcyByZWFkeS5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9tYXhpbXVtTGV2ZWw7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWluaW11bSBsZXZlbC1vZi1kZXRhaWwgdGhhdCBjYW4gYmUgcmVxdWVzdGVkLiAgVGhpcyBmdW5jdGlvbiBzaG91bGRcbiAgICogbm90IGJlIGNhbGxlZCBiZWZvcmUge0BsaW5rIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlciNyZWFkeX0gcmV0dXJucyB0cnVlLlxuICAgKiBAbWVtYmVyb2YgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG1pbmltdW1MZXZlbDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmICghdGhpcy5fcmVhZHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgIFwibWluaW11bUxldmVsIG11c3Qgbm90IGJlIGNhbGxlZCBiZWZvcmUgdGhlIGltYWdlcnkgcHJvdmlkZXIgaXMgcmVhZHkuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICByZXR1cm4gMDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0aWxpbmcgc2NoZW1lIHVzZWQgYnkgdGhpcyBwcm92aWRlci4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkXG4gICAqIG5vdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIjcmVhZHl9IHJldHVybnMgdHJ1ZS5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICogQHR5cGUge1RpbGluZ1NjaGVtZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB0aWxpbmdTY2hlbWU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoIXRoaXMuX3JlYWR5KSB7XG4gICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcbiAgICAgICAgICBcInRpbGluZ1NjaGVtZSBtdXN0IG5vdCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBpbWFnZXJ5IHByb3ZpZGVyIGlzIHJlYWR5LlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3RpbGluZ1NjaGVtZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSByZWN0YW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSBpbWFnZXJ5IHByb3ZpZGVkIGJ5IHRoaXMgaW5zdGFuY2UuICBUaGlzIGZ1bmN0aW9uIHNob3VsZFxuICAgKiBub3QgYmUgY2FsbGVkIGJlZm9yZSB7QGxpbmsgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyI3JlYWR5fSByZXR1cm5zIHRydWUuXG4gICAqIEBtZW1iZXJvZiBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIucHJvdG90eXBlXG4gICAqIEB0eXBlIHtSZWN0YW5nbGV9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcmVjdGFuZ2xlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKCF0aGlzLl9yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJyZWN0YW5nbGUgbXVzdCBub3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgaW1hZ2VyeSBwcm92aWRlciBpcyByZWFkeS5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9yZWN0YW5nbGU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgdGlsZSBkaXNjYXJkIHBvbGljeS4gIElmIG5vdCB1bmRlZmluZWQsIHRoZSBkaXNjYXJkIHBvbGljeSBpcyByZXNwb25zaWJsZVxuICAgKiBmb3IgZmlsdGVyaW5nIG91dCBcIm1pc3NpbmdcIiB0aWxlcyB2aWEgaXRzIHNob3VsZERpc2NhcmRJbWFnZSBmdW5jdGlvbi4gIElmIHRoaXMgZnVuY3Rpb25cbiAgICogcmV0dXJucyB1bmRlZmluZWQsIG5vIHRpbGVzIGFyZSBmaWx0ZXJlZC4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkXG4gICAqIG5vdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIjcmVhZHl9IHJldHVybnMgdHJ1ZS5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICogQHR5cGUge1RpbGVEaXNjYXJkUG9saWN5fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHRpbGVEaXNjYXJkUG9saWN5OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKCF0aGlzLl9yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJ0aWxlRGlzY2FyZFBvbGljeSBtdXN0IG5vdCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBpbWFnZXJ5IHByb3ZpZGVyIGlzIHJlYWR5LlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3RpbGVEaXNjYXJkUG9saWN5O1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgYW4gZXZlbnQgdGhhdCBpcyByYWlzZWQgd2hlbiB0aGUgaW1hZ2VyeSBwcm92aWRlciBlbmNvdW50ZXJzIGFuIGFzeW5jaHJvbm91cyBlcnJvci4gIEJ5IHN1YnNjcmliaW5nXG4gICAqIHRvIHRoZSBldmVudCwgeW91IHdpbGwgYmUgbm90aWZpZWQgb2YgdGhlIGVycm9yIGFuZCBjYW4gcG90ZW50aWFsbHkgcmVjb3ZlciBmcm9tIGl0LiAgRXZlbnQgbGlzdGVuZXJzXG4gICAqIGFyZSBwYXNzZWQgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFRpbGVQcm92aWRlckVycm9yfS5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICogQHR5cGUge0V2ZW50fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGVycm9yRXZlbnQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvckV2ZW50O1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IHRoZSBwcm92aWRlciBpcyByZWFkeSBmb3IgdXNlLlxuICAgKiBAbWVtYmVyb2YgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICByZWFkeToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWR5O1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdHJ1ZSB3aGVuIHRoZSBwcm92aWRlciBpcyByZWFkeSBmb3IgdXNlLlxuICAgKiBAbWVtYmVyb2YgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7UHJvbWlzZS48Qm9vbGVhbj59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcmVhZHlQcm9taXNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZHlQcm9taXNlLnByb21pc2U7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgY3JlZGl0IHRvIGRpc3BsYXkgd2hlbiB0aGlzIGltYWdlcnkgcHJvdmlkZXIgaXMgYWN0aXZlLiAgVHlwaWNhbGx5IHRoaXMgaXMgdXNlZCB0byBjcmVkaXRcbiAgICogdGhlIHNvdXJjZSBvZiB0aGUgaW1hZ2VyeS4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG5vdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIjcmVhZHl9IHJldHVybnMgdHJ1ZS5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICogQHR5cGUge0NyZWRpdH1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBjcmVkaXQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jcmVkaXQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGlzIGltYWdlcnkgcHJvdmlkZXIgaXMgdXNpbmcgcHJlLWNhY2hlZCB0aWxlcyBmcm9tIHRoZVxuICAgKiBBcmNHSVMgTWFwU2VydmVyLiAgSWYgdGhlIGltYWdlcnkgcHJvdmlkZXIgaXMgbm90IHlldCByZWFkeSAoe0BsaW5rIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlciNyZWFkeX0pLCB0aGlzIGZ1bmN0aW9uXG4gICAqIHdpbGwgcmV0dXJuIHRoZSB2YWx1ZSBvZiBgb3B0aW9ucy51c2VQcmVDYWNoZWRUaWxlc0lmQXZhaWxhYmxlYCwgZXZlbiBpZiB0aGUgTWFwU2VydmVyIGRvZXNcbiAgICogbm90IGhhdmUgcHJlLWNhY2hlZCB0aWxlcy5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB1c2luZ1ByZWNhY2hlZFRpbGVzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXNlVGlsZXM7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIGltYWdlcyBwcm92aWRlZCBieSB0aGlzIGltYWdlcnkgcHJvdmlkZXJcbiAgICogaW5jbHVkZSBhbiBhbHBoYSBjaGFubmVsLiAgSWYgdGhpcyBwcm9wZXJ0eSBpcyBmYWxzZSwgYW4gYWxwaGEgY2hhbm5lbCwgaWYgcHJlc2VudCwgd2lsbFxuICAgKiBiZSBpZ25vcmVkLiAgSWYgdGhpcyBwcm9wZXJ0eSBpcyB0cnVlLCBhbnkgaW1hZ2VzIHdpdGhvdXQgYW4gYWxwaGEgY2hhbm5lbCB3aWxsIGJlIHRyZWF0ZWRcbiAgICogYXMgaWYgdGhlaXIgYWxwaGEgaXMgMS4wIGV2ZXJ5d2hlcmUuICBXaGVuIHRoaXMgcHJvcGVydHkgaXMgZmFsc2UsIG1lbW9yeSB1c2FnZVxuICAgKiBhbmQgdGV4dHVyZSB1cGxvYWQgdGltZSBhcmUgcmVkdWNlZC5cbiAgICogQG1lbWJlcm9mIEFyY0dpc01hcFNlcnZlckltYWdlcnlQcm92aWRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBoYXNBbHBoYUNoYW5uZWw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGxheWVyIElEcyB0byBzaG93LlxuICAgKiBAbWVtYmVyb2YgQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgbGF5ZXJzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGF5ZXJzO1xuICAgIH0sXG4gIH0sXG59KTtcblxuLyoqXG4gKiBHZXRzIHRoZSBjcmVkaXRzIHRvIGJlIGRpc3BsYXllZCB3aGVuIGEgZ2l2ZW4gdGlsZSBpcyBkaXNwbGF5ZWQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIHRpbGUgWCBjb29yZGluYXRlLlxuICogQHBhcmFtIHtOdW1iZXJ9IHkgVGhlIHRpbGUgWSBjb29yZGluYXRlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIFRoZSB0aWxlIGxldmVsO1xuICogQHJldHVybnMge0NyZWRpdFtdfSBUaGUgY3JlZGl0cyB0byBiZSBkaXNwbGF5ZWQgd2hlbiB0aGUgdGlsZSBpcyBkaXNwbGF5ZWQuXG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IDxjb2RlPmdldFRpbGVDcmVkaXRzPC9jb2RlPiBtdXN0IG5vdCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBpbWFnZXJ5IHByb3ZpZGVyIGlzIHJlYWR5LlxuICovXG5BcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIucHJvdG90eXBlLmdldFRpbGVDcmVkaXRzID0gZnVuY3Rpb24gKFxuICB4LFxuICB5LFxuICBsZXZlbFxuKSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIFJlcXVlc3RzIHRoZSBpbWFnZSBmb3IgYSBnaXZlbiB0aWxlLiAgVGhpcyBmdW5jdGlvbiBzaG91bGRcbiAqIG5vdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIjcmVhZHl9IHJldHVybnMgdHJ1ZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgdGlsZSBYIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge051bWJlcn0geSBUaGUgdGlsZSBZIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgVGhlIHRpbGUgbGV2ZWwuXG4gKiBAcGFyYW0ge1JlcXVlc3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdCBvYmplY3QuIEludGVuZGVkIGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAqIEByZXR1cm5zIHtQcm9taXNlLjxIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50Pnx1bmRlZmluZWR9IEEgcHJvbWlzZSBmb3IgdGhlIGltYWdlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gdGhlIGltYWdlIGlzIGF2YWlsYWJsZSwgb3JcbiAqICAgICAgICAgIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgdG9vIG1hbnkgYWN0aXZlIHJlcXVlc3RzIHRvIHRoZSBzZXJ2ZXIsIGFuZCB0aGUgcmVxdWVzdFxuICogICAgICAgICAgc2hvdWxkIGJlIHJldHJpZWQgbGF0ZXIuICBUaGUgcmVzb2x2ZWQgaW1hZ2UgbWF5IGJlIGVpdGhlciBhblxuICogICAgICAgICAgSW1hZ2Ugb3IgYSBDYW52YXMgRE9NIG9iamVjdC5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gPGNvZGU+cmVxdWVzdEltYWdlPC9jb2RlPiBtdXN0IG5vdCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBpbWFnZXJ5IHByb3ZpZGVyIGlzIHJlYWR5LlxuICovXG5BcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIucHJvdG90eXBlLnJlcXVlc3RJbWFnZSA9IGZ1bmN0aW9uIChcbiAgeCxcbiAgeSxcbiAgbGV2ZWwsXG4gIHJlcXVlc3Rcbikge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIXRoaXMuX3JlYWR5KSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgXCJyZXF1ZXN0SW1hZ2UgbXVzdCBub3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgaW1hZ2VyeSBwcm92aWRlciBpcyByZWFkeS5cIlxuICAgICk7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgcmV0dXJuIEltYWdlcnlQcm92aWRlci5sb2FkSW1hZ2UoXG4gICAgdGhpcyxcbiAgICBidWlsZEltYWdlUmVzb3VyY2UodGhpcywgeCwgeSwgbGV2ZWwsIHJlcXVlc3QpXG4gICk7XG59O1xuXG4vKipcbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXNseSBkZXRlcm1pbmVzIHdoYXQgZmVhdHVyZXMsIGlmIGFueSwgYXJlIGxvY2F0ZWQgYXQgYSBnaXZlbiBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIHdpdGhpblxuICAgICAqIGEgdGlsZS4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG5vdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBJbWFnZXJ5UHJvdmlkZXIjcmVhZHl9IHJldHVybnMgdHJ1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSB0aWxlIFggY29vcmRpbmF0ZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSBUaGUgdGlsZSBZIGNvb3JkaW5hdGUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIFRoZSB0aWxlIGxldmVsLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsb25naXR1ZGUgVGhlIGxvbmdpdHVkZSBhdCB3aGljaCB0byBwaWNrIGZlYXR1cmVzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsYXRpdHVkZSAgVGhlIGxhdGl0dWRlIGF0IHdoaWNoIHRvIHBpY2sgZmVhdHVyZXMuXG4gICAgICogQHJldHVybiB7UHJvbWlzZS48SW1hZ2VyeUxheWVyRmVhdHVyZUluZm9bXT58dW5kZWZpbmVkfSBBIHByb21pc2UgZm9yIHRoZSBwaWNrZWQgZmVhdHVyZXMgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB0aGUgYXN5bmNocm9ub3VzXG4gICAgICogICAgICAgICAgICAgICAgICAgcGlja2luZyBjb21wbGV0ZXMuICBUaGUgcmVzb2x2ZWQgdmFsdWUgaXMgYW4gYXJyYXkgb2Yge0BsaW5rIEltYWdlcnlMYXllckZlYXR1cmVJbmZvfVxuICAgICAqICAgICAgICAgICAgICAgICAgIGluc3RhbmNlcy4gIFRoZSBhcnJheSBtYXkgYmUgZW1wdHkgaWYgbm8gZmVhdHVyZXMgYXJlIGZvdW5kIGF0IHRoZSBnaXZlbiBsb2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSA8Y29kZT5waWNrRmVhdHVyZXM8L2NvZGU+IG11c3Qgbm90IGJlIGNhbGxlZCBiZWZvcmUgdGhlIGltYWdlcnkgcHJvdmlkZXIgaXMgcmVhZHkuXG4gICAgICovXG5BcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIucHJvdG90eXBlLnBpY2tGZWF0dXJlcyA9IGZ1bmN0aW9uIChcbiAgeCxcbiAgeSxcbiAgbGV2ZWwsXG4gIGxvbmdpdHVkZSxcbiAgbGF0aXR1ZGVcbikge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIXRoaXMuX3JlYWR5KSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgXCJwaWNrRmVhdHVyZXMgbXVzdCBub3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgaW1hZ2VyeSBwcm92aWRlciBpcyByZWFkeS5cIlxuICAgICk7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgaWYgKCF0aGlzLmVuYWJsZVBpY2tGZWF0dXJlcykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgcmVjdGFuZ2xlID0gdGhpcy5fdGlsaW5nU2NoZW1lLnRpbGVYWVRvTmF0aXZlUmVjdGFuZ2xlKHgsIHksIGxldmVsKTtcblxuICB2YXIgaG9yaXpvbnRhbDtcbiAgdmFyIHZlcnRpY2FsO1xuICB2YXIgc3I7XG4gIGlmICh0aGlzLl90aWxpbmdTY2hlbWUucHJvamVjdGlvbiBpbnN0YW5jZW9mIEdlb2dyYXBoaWNQcm9qZWN0aW9uKSB7XG4gICAgaG9yaXpvbnRhbCA9IENlc2l1bU1hdGgudG9EZWdyZWVzKGxvbmdpdHVkZSk7XG4gICAgdmVydGljYWwgPSBDZXNpdW1NYXRoLnRvRGVncmVlcyhsYXRpdHVkZSk7XG4gICAgc3IgPSBcIjQzMjZcIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcHJvamVjdGVkID0gdGhpcy5fdGlsaW5nU2NoZW1lLnByb2plY3Rpb24ucHJvamVjdChcbiAgICAgIG5ldyBDYXJ0b2dyYXBoaWMobG9uZ2l0dWRlLCBsYXRpdHVkZSwgMC4wKVxuICAgICk7XG4gICAgaG9yaXpvbnRhbCA9IHByb2plY3RlZC54O1xuICAgIHZlcnRpY2FsID0gcHJvamVjdGVkLnk7XG4gICAgc3IgPSBcIjM4NTdcIjtcbiAgfVxuXG4gIHZhciBsYXllcnMgPSBcInZpc2libGVcIjtcbiAgaWYgKGRlZmluZWQodGhpcy5fbGF5ZXJzKSkge1xuICAgIGxheWVycyArPSBcIjpcIiArIHRoaXMuX2xheWVycztcbiAgfVxuXG4gIHZhciBxdWVyeSA9IHtcbiAgICBmOiBcImpzb25cIixcbiAgICB0b2xlcmFuY2U6IDIsXG4gICAgZ2VvbWV0cnlUeXBlOiBcImVzcmlHZW9tZXRyeVBvaW50XCIsXG4gICAgZ2VvbWV0cnk6IGhvcml6b250YWwgKyBcIixcIiArIHZlcnRpY2FsLFxuICAgIG1hcEV4dGVudDpcbiAgICAgIHJlY3RhbmdsZS53ZXN0ICtcbiAgICAgIFwiLFwiICtcbiAgICAgIHJlY3RhbmdsZS5zb3V0aCArXG4gICAgICBcIixcIiArXG4gICAgICByZWN0YW5nbGUuZWFzdCArXG4gICAgICBcIixcIiArXG4gICAgICByZWN0YW5nbGUubm9ydGgsXG4gICAgaW1hZ2VEaXNwbGF5OiB0aGlzLl90aWxlV2lkdGggKyBcIixcIiArIHRoaXMuX3RpbGVIZWlnaHQgKyBcIiw5NlwiLFxuICAgIHNyOiBzcixcbiAgICBsYXllcnM6IGxheWVycyxcbiAgfTtcblxuICB2YXIgcmVzb3VyY2UgPSB0aGlzLl9yZXNvdXJjZS5nZXREZXJpdmVkUmVzb3VyY2Uoe1xuICAgIHVybDogXCJpZGVudGlmeVwiLFxuICAgIHF1ZXJ5UGFyYW1ldGVyczogcXVlcnksXG4gIH0pO1xuXG4gIHJldHVybiByZXNvdXJjZS5mZXRjaEpzb24oKS50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgdmFyIGZlYXR1cmVzID0ganNvbi5yZXN1bHRzO1xuICAgIGlmICghZGVmaW5lZChmZWF0dXJlcykpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlc1tpXTtcblxuICAgICAgdmFyIGZlYXR1cmVJbmZvID0gbmV3IEltYWdlcnlMYXllckZlYXR1cmVJbmZvKCk7XG4gICAgICBmZWF0dXJlSW5mby5kYXRhID0gZmVhdHVyZTtcbiAgICAgIGZlYXR1cmVJbmZvLm5hbWUgPSBmZWF0dXJlLnZhbHVlO1xuICAgICAgZmVhdHVyZUluZm8ucHJvcGVydGllcyA9IGZlYXR1cmUuYXR0cmlidXRlcztcbiAgICAgIGZlYXR1cmVJbmZvLmNvbmZpZ3VyZURlc2NyaXB0aW9uRnJvbVByb3BlcnRpZXMoZmVhdHVyZS5hdHRyaWJ1dGVzKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHBvaW50IGZlYXR1cmUsIHVzZSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50LlxuICAgICAgaWYgKGZlYXR1cmUuZ2VvbWV0cnlUeXBlID09PSBcImVzcmlHZW9tZXRyeVBvaW50XCIgJiYgZmVhdHVyZS5nZW9tZXRyeSkge1xuICAgICAgICB2YXIgd2tpZCA9XG4gICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5zcGF0aWFsUmVmZXJlbmNlICYmXG4gICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5zcGF0aWFsUmVmZXJlbmNlLndraWRcbiAgICAgICAgICAgID8gZmVhdHVyZS5nZW9tZXRyeS5zcGF0aWFsUmVmZXJlbmNlLndraWRcbiAgICAgICAgICAgIDogNDMyNjtcbiAgICAgICAgaWYgKHdraWQgPT09IDQzMjYgfHwgd2tpZCA9PT0gNDI4Mykge1xuICAgICAgICAgIGZlYXR1cmVJbmZvLnBvc2l0aW9uID0gQ2FydG9ncmFwaGljLmZyb21EZWdyZWVzKFxuICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS54LFxuICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS55LFxuICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS56XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh3a2lkID09PSAxMDIxMDAgfHwgd2tpZCA9PT0gOTAwOTEzIHx8IHdraWQgPT09IDM4NTcpIHtcbiAgICAgICAgICB2YXIgcHJvamVjdGlvbiA9IG5ldyBXZWJNZXJjYXRvclByb2plY3Rpb24oKTtcbiAgICAgICAgICBmZWF0dXJlSW5mby5wb3NpdGlvbiA9IHByb2plY3Rpb24udW5wcm9qZWN0KFxuICAgICAgICAgICAgbmV3IENhcnRlc2lhbjMoXG4gICAgICAgICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkueCxcbiAgICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS55LFxuICAgICAgICAgICAgICBmZWF0dXJlLmdlb21ldHJ5LnpcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC5wdXNoKGZlYXR1cmVJbmZvKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcbn07XG5leHBvcnQgZGVmYXVsdCBBcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37741\n')},77072:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66553);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(71171);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(72248);\n\n\n\n\n\n\n\n\n\n/**\n * An enum describing the attribute type for glTF and 3D Tiles.\n *\n * @enum {String}\n *\n * @private\n */\nvar AttributeType = {\n  /**\n   * The attribute is a single component.\n   *\n   * @type {String}\n   * @constant\n   */\n  SCALAR: "SCALAR",\n\n  /**\n   * The attribute is a two-component vector.\n   *\n   * @type {String}\n   * @constant\n   */\n  VEC2: "VEC2",\n\n  /**\n   * The attribute is a three-component vector.\n   *\n   * @type {String}\n   * @constant\n   */\n  VEC3: "VEC3",\n\n  /**\n   * The attribute is a four-component vector.\n   *\n   * @type {String}\n   * @constant\n   */\n  VEC4: "VEC4",\n\n  /**\n   * The attribute is a 2x2 matrix.\n   *\n   * @type {String}\n   * @constant\n   */\n  MAT2: "MAT2",\n\n  /**\n   * The attribute is a 3x3 matrix.\n   *\n   * @type {String}\n   * @constant\n   */\n  MAT3: "MAT3",\n\n  /**\n   * The attribute is a 4x4 matrix.\n   *\n   * @type {String}\n   * @constant\n   */\n  MAT4: "MAT4",\n};\n\n/**\n * Gets the scalar, vector, or matrix type for the attribute type.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {*} The math type.\n *\n * @private\n */\nAttributeType.getMathType = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return Number;\n    case AttributeType.VEC2:\n      return _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z;\n    case AttributeType.VEC3:\n      return _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z;\n    case AttributeType.VEC4:\n      return _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z;\n    case AttributeType.MAT2:\n      return _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z;\n    case AttributeType.MAT3:\n      return _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z;\n    case AttributeType.MAT4:\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z;\n    //>>includeStart(\'debug\', pragmas.debug);\n    default:\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z("attributeType is not a valid value.");\n    //>>includeEnd(\'debug\');\n  }\n};\n\n/**\n * Gets the number of components per attribute.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {Number} The number of components.\n *\n * @private\n */\nAttributeType.getNumberOfComponents = function (attributeType) {\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return 1;\n    case AttributeType.VEC2:\n      return 2;\n    case AttributeType.VEC3:\n      return 3;\n    case AttributeType.VEC4:\n    case AttributeType.MAT2:\n      return 4;\n    case AttributeType.MAT3:\n      return 9;\n    case AttributeType.MAT4:\n      return 16;\n    //>>includeStart(\'debug\', pragmas.debug);\n    default:\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z("attributeType is not a valid value.");\n    //>>includeEnd(\'debug\');\n  }\n};\n\n/**\n * Gets the GLSL type for the attribute type.\n *\n * @param {AttributeType} attributeType The attribute type.\n * @returns {String} The GLSL type for the attribute type.\n *\n * @private\n */\nAttributeType.getGlslType = function (attributeType) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.string */ .Z.typeOf.string("attributeType", attributeType);\n  //>>includeEnd(\'debug\');\n\n  switch (attributeType) {\n    case AttributeType.SCALAR:\n      return "float";\n    case AttributeType.VEC2:\n      return "vec2";\n    case AttributeType.VEC3:\n      return "vec3";\n    case AttributeType.VEC4:\n      return "vec4";\n    case AttributeType.MAT2:\n      return "mat2";\n    case AttributeType.MAT3:\n      return "mat3";\n    case AttributeType.MAT4:\n      return "mat4";\n    //>>includeStart(\'debug\', pragmas.debug);\n    default:\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z("attributeType is not a valid value.");\n    //>>includeEnd(\'debug\');\n  }\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(AttributeType));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcwNzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDQTtBQUNBO0FBQ1Y7QUFDa0I7QUFDZDtBQUNBO0FBQ0E7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9FQUFVO0FBQ3ZCO0FBQ0EsYUFBYSxvRUFBVTtBQUN2QjtBQUNBLGFBQWEsb0VBQVU7QUFDdkI7QUFDQSxhQUFhLGlFQUFPO0FBQ3BCO0FBQ0EsYUFBYSxpRUFBTztBQUNwQjtBQUNBLGFBQWEsaUVBQU87QUFDcEI7QUFDQTtBQUNBLGdCQUFnQix3RUFBYztBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdFQUFjO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDJGQUFtQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdFQUFjO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQSx5REFBZSw0QkFBNEIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9BdHRyaWJ1dGVUeXBlLmpzPzE5ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRlc2lhbjIgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMi5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjQgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuNC5qc1wiO1xuaW1wb3J0IENoZWNrIGZyb20gXCIuLi9Db3JlL0NoZWNrLmpzXCI7XG5pbXBvcnQgRGV2ZWxvcGVyRXJyb3IgZnJvbSBcIi4uL0NvcmUvRGV2ZWxvcGVyRXJyb3IuanNcIjtcbmltcG9ydCBNYXRyaXgyIGZyb20gXCIuLi9Db3JlL01hdHJpeDIuanNcIjtcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuLi9Db3JlL01hdHJpeDMuanNcIjtcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9Db3JlL01hdHJpeDQuanNcIjtcblxuLyoqXG4gKiBBbiBlbnVtIGRlc2NyaWJpbmcgdGhlIGF0dHJpYnV0ZSB0eXBlIGZvciBnbFRGIGFuZCAzRCBUaWxlcy5cbiAqXG4gKiBAZW51bSB7U3RyaW5nfVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBBdHRyaWJ1dGVUeXBlID0ge1xuICAvKipcbiAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIHNpbmdsZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgU0NBTEFSOiBcIlNDQUxBUlwiLFxuXG4gIC8qKlxuICAgKiBUaGUgYXR0cmlidXRlIGlzIGEgdHdvLWNvbXBvbmVudCB2ZWN0b3IuXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgVkVDMjogXCJWRUMyXCIsXG5cbiAgLyoqXG4gICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSB0aHJlZS1jb21wb25lbnQgdmVjdG9yLlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFZFQzM6IFwiVkVDM1wiLFxuXG4gIC8qKlxuICAgKiBUaGUgYXR0cmlidXRlIGlzIGEgZm91ci1jb21wb25lbnQgdmVjdG9yLlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFZFQzQ6IFwiVkVDNFwiLFxuXG4gIC8qKlxuICAgKiBUaGUgYXR0cmlidXRlIGlzIGEgMngyIG1hdHJpeC5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBNQVQyOiBcIk1BVDJcIixcblxuICAvKipcbiAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIDN4MyBtYXRyaXguXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTUFUMzogXCJNQVQzXCIsXG5cbiAgLyoqXG4gICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSA0eDQgbWF0cml4LlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIE1BVDQ6IFwiTUFUNFwiLFxufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY2FsYXIsIHZlY3Rvciwgb3IgbWF0cml4IHR5cGUgZm9yIHRoZSBhdHRyaWJ1dGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge0F0dHJpYnV0ZVR5cGV9IGF0dHJpYnV0ZVR5cGUgVGhlIGF0dHJpYnV0ZSB0eXBlLlxuICogQHJldHVybnMgeyp9IFRoZSBtYXRoIHR5cGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQXR0cmlidXRlVHlwZS5nZXRNYXRoVHlwZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVUeXBlKSB7XG4gIHN3aXRjaCAoYXR0cmlidXRlVHlwZSkge1xuICAgIGNhc2UgQXR0cmlidXRlVHlwZS5TQ0FMQVI6XG4gICAgICByZXR1cm4gTnVtYmVyO1xuICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUMyOlxuICAgICAgcmV0dXJuIENhcnRlc2lhbjI7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzM6XG4gICAgICByZXR1cm4gQ2FydGVzaWFuMztcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDNDpcbiAgICAgIHJldHVybiBDYXJ0ZXNpYW40O1xuICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQyOlxuICAgICAgcmV0dXJuIE1hdHJpeDI7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDM6XG4gICAgICByZXR1cm4gTWF0cml4MztcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUNDpcbiAgICAgIHJldHVybiBNYXRyaXg0O1xuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcImF0dHJpYnV0ZVR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuXCIpO1xuICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIG51bWJlciBvZiBjb21wb25lbnRzIHBlciBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVUeXBlfSBhdHRyaWJ1dGVUeXBlIFRoZSBhdHRyaWJ1dGUgdHlwZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5BdHRyaWJ1dGVUeXBlLmdldE51bWJlck9mQ29tcG9uZW50cyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVUeXBlKSB7XG4gIHN3aXRjaCAoYXR0cmlidXRlVHlwZSkge1xuICAgIGNhc2UgQXR0cmlidXRlVHlwZS5TQ0FMQVI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUMzOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzQ6XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDI6XG4gICAgICByZXR1cm4gNDtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMzpcbiAgICAgIHJldHVybiA5O1xuICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQ0OlxuICAgICAgcmV0dXJuIDE2O1xuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcImF0dHJpYnV0ZVR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuXCIpO1xuICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIEdMU0wgdHlwZSBmb3IgdGhlIGF0dHJpYnV0ZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7QXR0cmlidXRlVHlwZX0gYXR0cmlidXRlVHlwZSBUaGUgYXR0cmlidXRlIHR5cGUuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgR0xTTCB0eXBlIGZvciB0aGUgYXR0cmlidXRlIHR5cGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQXR0cmlidXRlVHlwZS5nZXRHbHNsVHlwZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVUeXBlKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIENoZWNrLnR5cGVPZi5zdHJpbmcoXCJhdHRyaWJ1dGVUeXBlXCIsIGF0dHJpYnV0ZVR5cGUpO1xuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICBzd2l0Y2ggKGF0dHJpYnV0ZVR5cGUpIHtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuU0NBTEFSOlxuICAgICAgcmV0dXJuIFwiZmxvYXRcIjtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMjpcbiAgICAgIHJldHVybiBcInZlYzJcIjtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMzpcbiAgICAgIHJldHVybiBcInZlYzNcIjtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDNDpcbiAgICAgIHJldHVybiBcInZlYzRcIjtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMjpcbiAgICAgIHJldHVybiBcIm1hdDJcIjtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMzpcbiAgICAgIHJldHVybiBcIm1hdDNcIjtcbiAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUNDpcbiAgICAgIHJldHVybiBcIm1hdDRcIjtcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJhdHRyaWJ1dGVUeXBlIGlzIG5vdCBhIHZhbGlkIHZhbHVlLlwiKTtcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShBdHRyaWJ1dGVUeXBlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77072\n')},66270:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2932);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8743);\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A post process stage that will get the luminance value at each pixel and\n * uses parallel reduction to compute the average luminance in a 1x1 texture.\n * This texture can be used as input for tone mapping.\n *\n * @constructor\n * @private\n */\nfunction AutoExposure() {\n  this._uniformMap = undefined;\n  this._command = undefined;\n\n  this._colorTexture = undefined;\n  this._depthTexture = undefined;\n\n  this._ready = false;\n\n  this._name = "czm_autoexposure";\n\n  this._logDepthChanged = undefined;\n  this._useLogDepth = undefined;\n\n  this._framebuffers = undefined;\n  this._previousLuminance = undefined;\n\n  this._commands = undefined;\n  this._clearCommand = undefined;\n\n  this._minMaxLuminance = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n  /**\n   * Whether or not to execute this post-process stage when ready.\n   *\n   * @type {Boolean}\n   */\n  this.enabled = true;\n  this._enabled = true;\n\n  /**\n   * The minimum value used to clamp the luminance.\n   *\n   * @type {Number}\n   * @default 0.1\n   */\n  this.minimumLuminance = 0.1;\n\n  /**\n   * The maximum value used to clamp the luminance.\n   *\n   * @type {Number}\n   * @default 10.0\n   */\n  this.maximumLuminance = 10.0;\n}\n\nObject.defineProperties(AutoExposure.prototype, {\n  /**\n   * Determines if this post-process stage is ready to be executed. A stage is only executed when both <code>ready</code>\n   * and {@link AutoExposure#enabled} are <code>true</code>. A stage will not be ready while it is waiting on textures\n   * to load.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n  /**\n   * The unique name of this post-process stage for reference by other stages.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * A reference to the texture written to when executing this post process stage.\n   *\n   * @memberof AutoExposure.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function () {\n      var framebuffers = this._framebuffers;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(framebuffers)) {\n        return undefined;\n      }\n      return framebuffers[framebuffers.length - 1].getColorTexture(0);\n    },\n  },\n});\n\nfunction destroyFramebuffers(autoexposure) {\n  var framebuffers = autoexposure._framebuffers;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(framebuffers)) {\n    return;\n  }\n\n  var length = framebuffers.length;\n  for (var i = 0; i < length; ++i) {\n    framebuffers[i].destroy();\n  }\n  autoexposure._framebuffers = undefined;\n\n  autoexposure._previousLuminance.destroy();\n  autoexposure._previousLuminance = undefined;\n}\n\nfunction createFramebuffers(autoexposure, context) {\n  destroyFramebuffers(autoexposure);\n\n  var width = autoexposure._width;\n  var height = autoexposure._height;\n\n  var pixelFormat = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA;\n  var pixelDatatype = context.halfFloatingPointTexture\n    ? _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT\n    : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT;\n\n  var length = Math.ceil(Math.log(Math.max(width, height)) / Math.log(3.0));\n  var framebuffers = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    width = Math.max(Math.ceil(width / 3.0), 1.0);\n    height = Math.max(Math.ceil(height / 3.0), 1.0);\n    framebuffers[i] = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n      context: context,\n      colorTextures: [\n        new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n          context: context,\n          width: width,\n          height: height,\n          pixelFormat: pixelFormat,\n          pixelDatatype: pixelDatatype,\n          sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].NEAREST */ .Z.NEAREST,\n        }),\n      ],\n    });\n  }\n\n  var lastTexture = framebuffers[length - 1].getColorTexture(0);\n  autoexposure._previousLuminance = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [\n      new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n        context: context,\n        width: lastTexture.width,\n        height: lastTexture.height,\n        pixelFormat: pixelFormat,\n        pixelDatatype: pixelDatatype,\n        sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].NEAREST */ .Z.NEAREST,\n      }),\n    ],\n  });\n\n  autoexposure._framebuffers = framebuffers;\n}\n\nfunction destroyCommands(autoexposure) {\n  var commands = autoexposure._commands;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(commands)) {\n    return;\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    commands[i].shaderProgram.destroy();\n  }\n  autoexposure._commands = undefined;\n}\n\nfunction createUniformMap(autoexposure, index) {\n  var uniforms;\n  if (index === 0) {\n    uniforms = {\n      colorTexture: function () {\n        return autoexposure._colorTexture;\n      },\n      colorTextureDimensions: function () {\n        return autoexposure._colorTexture.dimensions;\n      },\n    };\n  } else {\n    var texture = autoexposure._framebuffers[index - 1].getColorTexture(0);\n    uniforms = {\n      colorTexture: function () {\n        return texture;\n      },\n      colorTextureDimensions: function () {\n        return texture.dimensions;\n      },\n    };\n  }\n\n  uniforms.minMaxLuminance = function () {\n    return autoexposure._minMaxLuminance;\n  };\n  uniforms.previousLuminance = function () {\n    return autoexposure._previousLuminance.getColorTexture(0);\n  };\n\n  return uniforms;\n}\n\nfunction getShaderSource(index, length) {\n  var source =\n    "uniform sampler2D colorTexture; \\n" +\n    "varying vec2 v_textureCoordinates; \\n" +\n    "float sampleTexture(vec2 offset) { \\n";\n\n  if (index === 0) {\n    source +=\n      "    vec4 color = texture2D(colorTexture, v_textureCoordinates + offset); \\n" +\n      "    return czm_luminance(color.rgb); \\n";\n  } else {\n    source +=\n      "    return texture2D(colorTexture, v_textureCoordinates + offset).r; \\n";\n  }\n\n  source += "}\\n\\n";\n\n  source +=\n    "uniform vec2 colorTextureDimensions; \\n" +\n    "uniform vec2 minMaxLuminance; \\n" +\n    "uniform sampler2D previousLuminance; \\n" +\n    "void main() { \\n" +\n    "    float color = 0.0; \\n" +\n    "    float xStep = 1.0 / colorTextureDimensions.x; \\n" +\n    "    float yStep = 1.0 / colorTextureDimensions.y; \\n" +\n    "    int count = 0; \\n" +\n    "    for (int i = 0; i < 3; ++i) { \\n" +\n    "        for (int j = 0; j < 3; ++j) { \\n" +\n    "            vec2 offset; \\n" +\n    "            offset.x = -xStep + float(i) * xStep; \\n" +\n    "            offset.y = -yStep + float(j) * yStep; \\n" +\n    "            if (offset.x < 0.0 || offset.x > 1.0 || offset.y < 0.0 || offset.y > 1.0) { \\n" +\n    "                continue; \\n" +\n    "            } \\n" +\n    "            color += sampleTexture(offset); \\n" +\n    "            ++count; \\n" +\n    "        } \\n" +\n    "    } \\n" +\n    "    if (count > 0) { \\n" +\n    "        color /= float(count); \\n" +\n    "    } \\n";\n\n  if (index === length - 1) {\n    source +=\n      "    float previous = texture2D(previousLuminance, vec2(0.5)).r; \\n" +\n      "    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n" +\n      "    color = previous + (color - previous) / (60.0 * 1.5); \\n" +\n      "    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n";\n  }\n\n  source += "    gl_FragColor = vec4(color); \\n" + "} \\n";\n  return source;\n}\n\nfunction createCommands(autoexposure, context) {\n  destroyCommands(autoexposure);\n  var framebuffers = autoexposure._framebuffers;\n  var length = framebuffers.length;\n\n  var commands = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    commands[i] = context.createViewportQuadCommand(\n      getShaderSource(i, length),\n      {\n        framebuffer: framebuffers[i],\n        uniformMap: createUniformMap(autoexposure, i),\n      }\n    );\n  }\n  autoexposure._commands = commands;\n}\n\n/**\n * A function that will be called before execute. Used to clear any textures attached to framebuffers.\n * @param {Context} context The context.\n * @private\n */\nAutoExposure.prototype.clear = function (context) {\n  var framebuffers = this._framebuffers;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(framebuffers)) {\n    return;\n  }\n\n  var clearCommand = this._clearCommand;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(clearCommand)) {\n    clearCommand = this._clearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      framebuffer: undefined,\n    });\n  }\n\n  var length = framebuffers.length;\n  for (var i = 0; i < length; ++i) {\n    clearCommand.framebuffer = framebuffers[i];\n    clearCommand.execute(context);\n  }\n};\n\n/**\n * A function that will be called before execute. Used to create WebGL resources and load any textures.\n * @param {Context} context The context.\n * @private\n */\nAutoExposure.prototype.update = function (context) {\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  if (width !== this._width || height !== this._height) {\n    this._width = width;\n    this._height = height;\n\n    createFramebuffers(this, context);\n    createCommands(this, context);\n\n    if (!this._ready) {\n      this._ready = true;\n    }\n  }\n\n  this._minMaxLuminance.x = this.minimumLuminance;\n  this._minMaxLuminance.y = this.maximumLuminance;\n\n  var framebuffers = this._framebuffers;\n  var temp = framebuffers[framebuffers.length - 1];\n  framebuffers[framebuffers.length - 1] = this._previousLuminance;\n  this._commands[\n    this._commands.length - 1\n  ].framebuffer = this._previousLuminance;\n  this._previousLuminance = temp;\n};\n\n/**\n * Executes the post-process stage. The color texture is the texture rendered to by the scene or from the previous stage.\n * @param {Context} context The context.\n * @param {Texture} colorTexture The input color texture.\n * @private\n */\nAutoExposure.prototype.execute = function (context, colorTexture) {\n  this._colorTexture = colorTexture;\n\n  var commands = this._commands;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(commands)) {\n    return;\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    commands[i].execute(context);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see AutoExposure#destroy\n */\nAutoExposure.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see AutoExposure#isDestroyed\n */\nAutoExposure.prototype.destroy = function () {\n  destroyFramebuffers(this);\n  destroyCommands(this);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (AutoExposure);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///66270\n')},66577:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72248);\n\n\n\n\n\n/**\n * An enum describing the x, y, and z axes and helper conversion functions.\n *\n * @enum {Number}\n */\nvar Axis = {\n  /**\n   * Denotes the x-axis.\n   *\n   * @type {Number}\n   * @constant\n   */\n  X: 0,\n\n  /**\n   * Denotes the y-axis.\n   *\n   * @type {Number}\n   * @constant\n   */\n  Y: 1,\n\n  /**\n   * Denotes the z-axis.\n   *\n   * @type {Number}\n   * @constant\n   */\n  Z: 2,\n};\n\n/**\n * Matrix used to convert from y-up to z-up\n *\n * @type {Matrix4}\n * @constant\n */\nAxis.Y_UP_TO_Z_UP = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRotationX */ .Z.fromRotationX(_Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n);\n\n/**\n * Matrix used to convert from z-up to y-up\n *\n * @type {Matrix4}\n * @constant\n */\nAxis.Z_UP_TO_Y_UP = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRotationX */ .Z.fromRotationX(-_Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n);\n\n/**\n * Matrix used to convert from x-up to z-up\n *\n * @type {Matrix4}\n * @constant\n */\nAxis.X_UP_TO_Z_UP = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRotationY */ .Z.fromRotationY(-_Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n);\n\n/**\n * Matrix used to convert from z-up to x-up\n *\n * @type {Matrix4}\n * @constant\n */\nAxis.Z_UP_TO_X_UP = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRotationY */ .Z.fromRotationY(_Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n);\n\n/**\n * Matrix used to convert from x-up to y-up\n *\n * @type {Matrix4}\n * @constant\n */\nAxis.X_UP_TO_Y_UP = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRotationZ */ .Z.fromRotationZ(_Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n);\n\n/**\n * Matrix used to convert from y-up to x-up\n *\n * @type {Matrix4}\n * @constant\n */\nAxis.Y_UP_TO_X_UP = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRotationZ */ .Z.fromRotationZ(-_Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n);\n\n/**\n * Gets the axis by name\n *\n * @param {String} name The name of the axis.\n * @returns {Number} The axis enum.\n */\nAxis.fromName = function (name) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("name", name);\n  //>>includeEnd(\'debug\');\n\n  return Axis[name];\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(Axis));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY1NzcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFxQztBQUNJO0FBQ0E7QUFDQTs7QUFFekM7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0Esb0JBQW9CLGlIQUErQjtBQUNuRCxFQUFFLDZGQUFxQixDQUFDLHNGQUFzQjtBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLG9CQUFvQixpSEFBK0I7QUFDbkQsRUFBRSw2RkFBcUIsRUFBRSxzRkFBc0I7QUFDL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxvQkFBb0IsaUhBQStCO0FBQ25ELEVBQUUsNkZBQXFCLEVBQUUsc0ZBQXNCO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0Esb0JBQW9CLGlIQUErQjtBQUNuRCxFQUFFLDZGQUFxQixDQUFDLHNGQUFzQjtBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLG9CQUFvQixpSEFBK0I7QUFDbkQsRUFBRSw2RkFBcUIsQ0FBQyxzRkFBc0I7QUFDOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxvQkFBb0IsaUhBQStCO0FBQ25ELEVBQUUsNkZBQXFCLEVBQUUsc0ZBQXNCO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0EsRUFBRSwyRkFBbUI7QUFDckI7O0FBRUE7QUFDQTs7QUFFQSx5REFBZSxtQkFBbUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9BeGlzLmpzP2QwYWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoZWNrIGZyb20gXCIuLi9Db3JlL0NoZWNrLmpzXCI7XG5pbXBvcnQgQ2VzaXVtTWF0aCBmcm9tIFwiLi4vQ29yZS9NYXRoLmpzXCI7XG5pbXBvcnQgTWF0cml4MyBmcm9tIFwiLi4vQ29yZS9NYXRyaXgzLmpzXCI7XG5pbXBvcnQgTWF0cml4NCBmcm9tIFwiLi4vQ29yZS9NYXRyaXg0LmpzXCI7XG5cbi8qKlxuICogQW4gZW51bSBkZXNjcmliaW5nIHRoZSB4LCB5LCBhbmQgeiBheGVzIGFuZCBoZWxwZXIgY29udmVyc2lvbiBmdW5jdGlvbnMuXG4gKlxuICogQGVudW0ge051bWJlcn1cbiAqL1xudmFyIEF4aXMgPSB7XG4gIC8qKlxuICAgKiBEZW5vdGVzIHRoZSB4LWF4aXMuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgWDogMCxcblxuICAvKipcbiAgICogRGVub3RlcyB0aGUgeS1heGlzLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFk6IDEsXG5cbiAgLyoqXG4gICAqIERlbm90ZXMgdGhlIHotYXhpcy5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBaOiAyLFxufTtcblxuLyoqXG4gKiBNYXRyaXggdXNlZCB0byBjb252ZXJ0IGZyb20geS11cCB0byB6LXVwXG4gKlxuICogQHR5cGUge01hdHJpeDR9XG4gKiBAY29uc3RhbnRcbiAqL1xuQXhpcy5ZX1VQX1RPX1pfVVAgPSBNYXRyaXg0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKFxuICBNYXRyaXgzLmZyb21Sb3RhdGlvblgoQ2VzaXVtTWF0aC5QSV9PVkVSX1RXTylcbik7XG5cbi8qKlxuICogTWF0cml4IHVzZWQgdG8gY29udmVydCBmcm9tIHotdXAgdG8geS11cFxuICpcbiAqIEB0eXBlIHtNYXRyaXg0fVxuICogQGNvbnN0YW50XG4gKi9cbkF4aXMuWl9VUF9UT19ZX1VQID0gTWF0cml4NC5mcm9tUm90YXRpb25UcmFuc2xhdGlvbihcbiAgTWF0cml4My5mcm9tUm90YXRpb25YKC1DZXNpdW1NYXRoLlBJX09WRVJfVFdPKVxuKTtcblxuLyoqXG4gKiBNYXRyaXggdXNlZCB0byBjb252ZXJ0IGZyb20geC11cCB0byB6LXVwXG4gKlxuICogQHR5cGUge01hdHJpeDR9XG4gKiBAY29uc3RhbnRcbiAqL1xuQXhpcy5YX1VQX1RPX1pfVVAgPSBNYXRyaXg0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKFxuICBNYXRyaXgzLmZyb21Sb3RhdGlvblkoLUNlc2l1bU1hdGguUElfT1ZFUl9UV08pXG4pO1xuXG4vKipcbiAqIE1hdHJpeCB1c2VkIHRvIGNvbnZlcnQgZnJvbSB6LXVwIHRvIHgtdXBcbiAqXG4gKiBAdHlwZSB7TWF0cml4NH1cbiAqIEBjb25zdGFudFxuICovXG5BeGlzLlpfVVBfVE9fWF9VUCA9IE1hdHJpeDQuZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24oXG4gIE1hdHJpeDMuZnJvbVJvdGF0aW9uWShDZXNpdW1NYXRoLlBJX09WRVJfVFdPKVxuKTtcblxuLyoqXG4gKiBNYXRyaXggdXNlZCB0byBjb252ZXJ0IGZyb20geC11cCB0byB5LXVwXG4gKlxuICogQHR5cGUge01hdHJpeDR9XG4gKiBAY29uc3RhbnRcbiAqL1xuQXhpcy5YX1VQX1RPX1lfVVAgPSBNYXRyaXg0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKFxuICBNYXRyaXgzLmZyb21Sb3RhdGlvblooQ2VzaXVtTWF0aC5QSV9PVkVSX1RXTylcbik7XG5cbi8qKlxuICogTWF0cml4IHVzZWQgdG8gY29udmVydCBmcm9tIHktdXAgdG8geC11cFxuICpcbiAqIEB0eXBlIHtNYXRyaXg0fVxuICogQGNvbnN0YW50XG4gKi9cbkF4aXMuWV9VUF9UT19YX1VQID0gTWF0cml4NC5mcm9tUm90YXRpb25UcmFuc2xhdGlvbihcbiAgTWF0cml4My5mcm9tUm90YXRpb25aKC1DZXNpdW1NYXRoLlBJX09WRVJfVFdPKVxuKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBheGlzIGJ5IG5hbWVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYXhpcy5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBheGlzIGVudW0uXG4gKi9cbkF4aXMuZnJvbU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2Yuc3RyaW5nKFwibmFtZVwiLCBuYW1lKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgcmV0dXJuIEF4aXNbbmFtZV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKEF4aXMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66577\n')}}]);