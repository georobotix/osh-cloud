"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[3105],{11491:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * ArcType defines the path that should be taken connecting vertices.\n *\n * @enum {Number}\n */\nvar ArcType = {\n  /**\n   * Straight line that does not conform to the surface of the ellipsoid.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NONE: 0,\n\n  /**\n   * Follow geodesic path.\n   *\n   * @type {Number}\n   * @constant\n   */\n  GEODESIC: 1,\n\n  /**\n   * Follow rhumb or loxodrome path.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RHUMB: 2,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(ArcType));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0OTEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsc0JBQXNCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9BcmNUeXBlLmpzPzdhYTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBcmNUeXBlIGRlZmluZXMgdGhlIHBhdGggdGhhdCBzaG91bGQgYmUgdGFrZW4gY29ubmVjdGluZyB2ZXJ0aWNlcy5cbiAqXG4gKiBAZW51bSB7TnVtYmVyfVxuICovXG52YXIgQXJjVHlwZSA9IHtcbiAgLyoqXG4gICAqIFN0cmFpZ2h0IGxpbmUgdGhhdCBkb2VzIG5vdCBjb25mb3JtIHRvIHRoZSBzdXJmYWNlIG9mIHRoZSBlbGxpcHNvaWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTk9ORTogMCxcblxuICAvKipcbiAgICogRm9sbG93IGdlb2Rlc2ljIHBhdGguXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgR0VPREVTSUM6IDEsXG5cbiAgLyoqXG4gICAqIEZvbGxvdyByaHVtYiBvciBsb3hvZHJvbWUgcGF0aC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBSSFVNQjogMixcbn07XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKEFyY1R5cGUpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11491\n')},8629:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n\n/**\n * A collection of key-value pairs that is stored as a hash for easy\n * lookup but also provides an array for fast iteration.\n * @alias AssociativeArray\n * @constructor\n */\nfunction AssociativeArray() {\n  this._array = [];\n  this._hash = {};\n}\n\nObject.defineProperties(AssociativeArray.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      return this._array.length;\n    },\n  },\n  /**\n   * Gets an unordered array of all values in the collection.\n   * This is a live array that will automatically reflect the values in the collection,\n   * it should not be modified directly.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Array}\n   */\n  values: {\n    get: function () {\n      return this._array;\n    },\n  },\n});\n\n/**\n * Determines if the provided key is in the array.\n *\n * @param {String|Number} key The key to check.\n * @returns {Boolean} <code>true</code> if the key is in the array, <code>false</code> otherwise.\n */\nAssociativeArray.prototype.contains = function (key) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (typeof key !== "string" && typeof key !== "number") {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("key is required to be a string or number.");\n  }\n  //>>includeEnd(\'debug\');\n  return (0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this._hash[key]);\n};\n\n/**\n * Associates the provided key with the provided value.  If the key already\n * exists, it is overwritten with the new value.\n *\n * @param {String|Number} key A unique identifier.\n * @param {*} value The value to associate with the provided key.\n */\nAssociativeArray.prototype.set = function (key, value) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (typeof key !== "string" && typeof key !== "number") {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("key is required to be a string or number.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var oldValue = this._hash[key];\n  if (value !== oldValue) {\n    this.remove(key);\n    this._hash[key] = value;\n    this._array.push(value);\n  }\n};\n\n/**\n * Retrieves the value associated with the provided key.\n *\n * @param {String|Number} key The key whose value is to be retrieved.\n * @returns {*} The associated value, or undefined if the key does not exist in the collection.\n */\nAssociativeArray.prototype.get = function (key) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (typeof key !== "string" && typeof key !== "number") {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("key is required to be a string or number.");\n  }\n  //>>includeEnd(\'debug\');\n  return this._hash[key];\n};\n\n/**\n * Removes a key-value pair from the collection.\n *\n * @param {String|Number} key The key to be removed.\n * @returns {Boolean} True if it was removed, false if the key was not in the collection.\n */\nAssociativeArray.prototype.remove = function (key) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(key) && typeof key !== "string" && typeof key !== "number") {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("key is required to be a string or number.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var value = this._hash[key];\n  var hasValue = (0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(value);\n  if (hasValue) {\n    var array = this._array;\n    array.splice(array.indexOf(value), 1);\n    delete this._hash[key];\n  }\n  return hasValue;\n};\n\n/**\n * Clears the collection.\n */\nAssociativeArray.prototype.removeAll = function () {\n  var array = this._array;\n  if (array.length > 0) {\n    this._hash = {};\n    array.length = 0;\n  }\n};\n/* harmony default export */ __webpack_exports__["Z"] = (AssociativeArray);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYyOS5qcyIsIm1hcHBpbmdzIjoiOztBQUFtQztBQUNjOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUVBQWM7QUFDNUI7QUFDQTtBQUNBLFNBQVMsZ0VBQU87QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1FQUFjO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUVBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxNQUFNLGdFQUFPO0FBQ2IsY0FBYyxtRUFBYztBQUM1QjtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdFQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsZ0JBQWdCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9Bc3NvY2lhdGl2ZUFycmF5LmpzPzA1OWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4vZGVmaW5lZC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuL0RldmVsb3BlckVycm9yLmpzXCI7XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGtleS12YWx1ZSBwYWlycyB0aGF0IGlzIHN0b3JlZCBhcyBhIGhhc2ggZm9yIGVhc3lcbiAqIGxvb2t1cCBidXQgYWxzbyBwcm92aWRlcyBhbiBhcnJheSBmb3IgZmFzdCBpdGVyYXRpb24uXG4gKiBAYWxpYXMgQXNzb2NpYXRpdmVBcnJheVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEFzc29jaWF0aXZlQXJyYXkoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX2hhc2ggPSB7fTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXNzb2NpYXRpdmVBcnJheS5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICogQG1lbWJlcm9mIEFzc29jaWF0aXZlQXJyYXkucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBsZW5ndGg6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hcnJheS5sZW5ndGg7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEdldHMgYW4gdW5vcmRlcmVkIGFycmF5IG9mIGFsbCB2YWx1ZXMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAqIFRoaXMgaXMgYSBsaXZlIGFycmF5IHRoYXQgd2lsbCBhdXRvbWF0aWNhbGx5IHJlZmxlY3QgdGhlIHZhbHVlcyBpbiB0aGUgY29sbGVjdGlvbixcbiAgICogaXQgc2hvdWxkIG5vdCBiZSBtb2RpZmllZCBkaXJlY3RseS5cbiAgICogQG1lbWJlcm9mIEFzc29jaWF0aXZlQXJyYXkucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHZhbHVlczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICAgIH0sXG4gIH0sXG59KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm92aWRlZCBrZXkgaXMgaW4gdGhlIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIGtleSBpcyBpbiB0aGUgYXJyYXksIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXG4gKi9cbkFzc29jaWF0aXZlQXJyYXkucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGtleSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAodHlwZW9mIGtleSAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwia2V5IGlzIHJlcXVpcmVkIHRvIGJlIGEgc3RyaW5nIG9yIG51bWJlci5cIik7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gIHJldHVybiBkZWZpbmVkKHRoaXMuX2hhc2hba2V5XSk7XG59O1xuXG4vKipcbiAqIEFzc29jaWF0ZXMgdGhlIHByb3ZpZGVkIGtleSB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZS4gIElmIHRoZSBrZXkgYWxyZWFkeVxuICogZXhpc3RzLCBpdCBpcyBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXkgQSB1bmlxdWUgaWRlbnRpZmllci5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBwcm92aWRlZCBrZXkuXG4gKi9cbkFzc29jaWF0aXZlQXJyYXkucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmICh0eXBlb2Yga2V5ICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBrZXkgIT09IFwibnVtYmVyXCIpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJrZXkgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcgb3IgbnVtYmVyLlwiKTtcbiAgfVxuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLl9oYXNoW2tleV07XG4gIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICB0aGlzLnJlbW92ZShrZXkpO1xuICAgIHRoaXMuX2hhc2hba2V5XSA9IHZhbHVlO1xuICAgIHRoaXMuX2FycmF5LnB1c2godmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBrZXkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXkgVGhlIGtleSB3aG9zZSB2YWx1ZSBpcyB0byBiZSByZXRyaWV2ZWQuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIGFzc29jaWF0ZWQgdmFsdWUsIG9yIHVuZGVmaW5lZCBpZiB0aGUga2V5IGRvZXMgbm90IGV4aXN0IGluIHRoZSBjb2xsZWN0aW9uLlxuICovXG5Bc3NvY2lhdGl2ZUFycmF5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmICh0eXBlb2Yga2V5ICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBrZXkgIT09IFwibnVtYmVyXCIpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJrZXkgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcgb3IgbnVtYmVyLlwiKTtcbiAgfVxuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcbiAgcmV0dXJuIHRoaXMuX2hhc2hba2V5XTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXkgVGhlIGtleSB0byBiZSByZW1vdmVkLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgaXQgd2FzIHJlbW92ZWQsIGZhbHNlIGlmIHRoZSBrZXkgd2FzIG5vdCBpbiB0aGUgY29sbGVjdGlvbi5cbiAqL1xuQXNzb2NpYXRpdmVBcnJheS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoZGVmaW5lZChrZXkpICYmIHR5cGVvZiBrZXkgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGtleSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcImtleSBpcyByZXF1aXJlZCB0byBiZSBhIHN0cmluZyBvciBudW1iZXIuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciB2YWx1ZSA9IHRoaXMuX2hhc2hba2V5XTtcbiAgdmFyIGhhc1ZhbHVlID0gZGVmaW5lZCh2YWx1ZSk7XG4gIGlmIChoYXNWYWx1ZSkge1xuICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgIGFycmF5LnNwbGljZShhcnJheS5pbmRleE9mKHZhbHVlKSwgMSk7XG4gICAgZGVsZXRlIHRoaXMuX2hhc2hba2V5XTtcbiAgfVxuICByZXR1cm4gaGFzVmFsdWU7XG59O1xuXG4vKipcbiAqIENsZWFycyB0aGUgY29sbGVjdGlvbi5cbiAqL1xuQXNzb2NpYXRpdmVBcnJheS5wcm90b3R5cGUucmVtb3ZlQWxsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSB0aGlzLl9hcnJheTtcbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLl9oYXNoID0ge307XG4gICAgYXJyYXkubGVuZ3RoID0gMDtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IEFzc29jaWF0aXZlQXJyYXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8629\n')},52323:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(84828);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66553);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99417);\n/* harmony import */ var _Scene_AttributeType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(77072);\n\n\n\n\n\n\n\n\n\nvar RIGHT_SHIFT = 1.0 / 256.0;\nvar LEFT_SHIFT = 256.0;\n\n/**\n * Attribute compression and decompression functions.\n *\n * @namespace AttributeCompression\n *\n * @private\n */\nvar AttributeCompression = {};\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the \'oct\' encoding.\n *\n * Oct encoding is a compact representation of unit length vectors.\n * The \'oct\' encoding is described in "A Survey of Efficient Representations of Independent Unit Vectors",\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\n *\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 component \'oct\' encoding.\n * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n *\n * @see AttributeCompression.octDecodeInRange\n */\nAttributeCompression.octEncodeInRange = function (vector, rangeMax, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("vector", vector);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("result", result);\n  var magSquared = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(vector);\n  if (Math.abs(magSquared - 1.0) > _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].EPSILON6 */ .Z.EPSILON6) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z("vector must be normalized.");\n  }\n  //>>includeEnd(\'debug\');\n\n  result.x =\n    vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n  result.y =\n    vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n  if (vector.z < 0) {\n    var x = result.x;\n    var y = result.y;\n    result.x = (1.0 - Math.abs(y)) * _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].signNotZero */ .Z.signNotZero(x);\n    result.y = (1.0 - Math.abs(x)) * _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].signNotZero */ .Z.signNotZero(y);\n  }\n\n  result.x = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].toSNorm */ .Z.toSNorm(result.x, rangeMax);\n  result.y = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].toSNorm */ .Z.toSNorm(result.y, rangeMax);\n\n  return result;\n};\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the \'oct\' encoding.\n *\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte \'oct\' encoding.\n * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\n * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n *\n * @see AttributeCompression.octEncodeInRange\n * @see AttributeCompression.octDecode\n */\nAttributeCompression.octEncode = function (vector, result) {\n  return AttributeCompression.octEncodeInRange(vector, 255, result);\n};\n\nvar octEncodeScratch = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar uint8ForceArray = new Uint8Array(1);\nfunction forceUint8(value) {\n  uint8ForceArray[0] = value;\n  return uint8ForceArray[0];\n}\n/**\n * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte \'oct\' encoding.\n * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\n * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n *\n * @see AttributeCompression.octEncodeInRange\n * @see AttributeCompression.octDecodeFromCartesian4\n */\nAttributeCompression.octEncodeToCartesian4 = function (vector, result) {\n  AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\n  result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\n  result.y = forceUint8(octEncodeScratch.x);\n  result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\n  result.w = forceUint8(octEncodeScratch.y);\n  return result;\n};\n\n/**\n * Decodes a unit-length vector in \'oct\' encoding to a normalized 3-component vector.\n *\n * @param {Number} x The x component of the oct-encoded unit length vector.\n * @param {Number} y The y component of the oct-encoded unit length vector.\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @param {Cartesian3} result The decoded and normalized vector\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\n *\n * @see AttributeCompression.octEncodeInRange\n */\nAttributeCompression.octDecodeInRange = function (x, y, rangeMax, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("result", result);\n  if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "x and y must be unsigned normalized integers between 0 and " + rangeMax\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  result.x = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].fromSNorm */ .Z.fromSNorm(x, rangeMax);\n  result.y = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].fromSNorm */ .Z.fromSNorm(y, rangeMax);\n  result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\n\n  if (result.z < 0.0) {\n    var oldVX = result.x;\n    result.x = (1.0 - Math.abs(result.y)) * _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].signNotZero */ .Z.signNotZero(oldVX);\n    result.y = (1.0 - Math.abs(oldVX)) * _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].signNotZero */ .Z.signNotZero(result.y);\n  }\n\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(result, result);\n};\n\n/**\n * Decodes a unit-length vector in 2 byte \'oct\' encoding to a normalized 3-component vector.\n *\n * @param {Number} x The x component of the oct-encoded unit length vector.\n * @param {Number} y The y component of the oct-encoded unit length vector.\n * @param {Cartesian3} result The decoded and normalized vector.\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\n *\n * @see AttributeCompression.octDecodeInRange\n */\nAttributeCompression.octDecode = function (x, y, result) {\n  return AttributeCompression.octDecodeInRange(x, y, 255, result);\n};\n\n/**\n * Decodes a unit-length vector in 4 byte \'oct\' encoding to a normalized 3-component vector.\n *\n * @param {Cartesian4} encoded The oct-encoded unit length vector.\n * @param {Cartesian3} result The decoded and normalized vector.\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\n *\n * @see AttributeCompression.octDecodeInRange\n * @see AttributeCompression.octEncodeToCartesian4\n */\nAttributeCompression.octDecodeFromCartesian4 = function (encoded, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("encoded", encoded);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n  var x = encoded.x;\n  var y = encoded.y;\n  var z = encoded.z;\n  var w = encoded.w;\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    x < 0 ||\n    x > 255 ||\n    y < 0 ||\n    y > 255 ||\n    z < 0 ||\n    z > 255 ||\n    w < 0 ||\n    w > 255\n  ) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "x, y, z, and w must be unsigned normalized integers between 0 and 255"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var xOct16 = x * LEFT_SHIFT + y;\n  var yOct16 = z * LEFT_SHIFT + w;\n  return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\n};\n\n/**\n * Packs an oct encoded vector into a single floating-point number.\n *\n * @param {Cartesian2} encoded The oct encoded vector.\n * @returns {Number} The oct encoded vector packed into a single float.\n *\n */\nAttributeCompression.octPackFloat = function (encoded) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("encoded", encoded);\n  //>>includeEnd(\'debug\');\n  return 256.0 * encoded.x + encoded.y;\n};\n\nvar scratchEncodeCart2 = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the \'oct\' encoding and\n * stores those values in a single float-point number.\n *\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte \'oct\' encoding.\n * @returns {Number} The 2 byte oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n */\nAttributeCompression.octEncodeFloat = function (vector) {\n  AttributeCompression.octEncode(vector, scratchEncodeCart2);\n  return AttributeCompression.octPackFloat(scratchEncodeCart2);\n};\n\n/**\n * Decodes a unit-length vector in \'oct\' encoding packed in a floating-point number to a normalized 3-component vector.\n *\n * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\n * @param {Cartesian3} result The decoded and normalized vector\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n */\nAttributeCompression.octDecodeFloat = function (value, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("value", value);\n  //>>includeEnd(\'debug\');\n\n  var temp = value / 256.0;\n  var x = Math.floor(temp);\n  var y = (temp - x) * 256.0;\n\n  return AttributeCompression.octDecode(x, y, result);\n};\n\n/**\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the \'oct\' encoding and\n * packs those into two floating-point numbers.\n *\n * @param {Cartesian3} v1 A normalized vector to be compressed.\n * @param {Cartesian3} v2 A normalized vector to be compressed.\n * @param {Cartesian3} v3 A normalized vector to be compressed.\n * @param {Cartesian2} result The \'oct\' encoded vectors packed into two floating-point numbers.\n * @returns {Cartesian2} The \'oct\' encoded vectors packed into two floating-point numbers.\n *\n */\nAttributeCompression.octPack = function (v1, v2, v3, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("v1", v1);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("v2", v2);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("v3", v3);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("result", result);\n  //>>includeEnd(\'debug\');\n\n  var encoded1 = AttributeCompression.octEncodeFloat(v1);\n  var encoded2 = AttributeCompression.octEncodeFloat(v2);\n\n  var encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\n  result.x = 65536.0 * encoded3.x + encoded1;\n  result.y = 65536.0 * encoded3.y + encoded2;\n  return result;\n};\n\n/**\n * Decodes three unit-length vectors in \'oct\' encoding packed into a floating-point number to a normalized 3-component vector.\n *\n * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\n * @param {Cartesian3} v1 One decoded and normalized vector.\n * @param {Cartesian3} v2 One decoded and normalized vector.\n * @param {Cartesian3} v3 One decoded and normalized vector.\n */\nAttributeCompression.octUnpack = function (packed, v1, v2, v3) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("packed", packed);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("v1", v1);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("v2", v2);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("v3", v3);\n  //>>includeEnd(\'debug\');\n\n  var temp = packed.x / 65536.0;\n  var x = Math.floor(temp);\n  var encodedFloat1 = (temp - x) * 65536.0;\n\n  temp = packed.y / 65536.0;\n  var y = Math.floor(temp);\n  var encodedFloat2 = (temp - y) * 65536.0;\n\n  AttributeCompression.octDecodeFloat(encodedFloat1, v1);\n  AttributeCompression.octDecodeFloat(encodedFloat2, v2);\n  AttributeCompression.octDecode(x, y, v3);\n};\n\n/**\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\n *\n * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\n * @returns {Number} The packed texture coordinates.\n *\n */\nAttributeCompression.compressTextureCoordinates = function (\n  textureCoordinates\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("textureCoordinates", textureCoordinates);\n  //>>includeEnd(\'debug\');\n\n  // Move x and y to the range 0-4095;\n  var x = (textureCoordinates.x * 4095.0) | 0;\n  var y = (textureCoordinates.y * 4095.0) | 0;\n  return 4096.0 * x + y;\n};\n\n/**\n * Decompresses texture coordinates that were packed into a single float.\n *\n * @param {Number} compressed The compressed texture coordinates.\n * @param {Cartesian2} result The decompressed texture coordinates.\n * @returns {Cartesian2} The modified result parameter.\n *\n */\nAttributeCompression.decompressTextureCoordinates = function (\n  compressed,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("compressed", compressed);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("result", result);\n  //>>includeEnd(\'debug\');\n\n  var temp = compressed / 4096.0;\n  var xZeroTo4095 = Math.floor(temp);\n  result.x = xZeroTo4095 / 4095.0;\n  result.y = (compressed - xZeroTo4095 * 4096) / 4095;\n  return result;\n};\n\nfunction zigZagDecode(value) {\n  return (value >> 1) ^ -(value & 1);\n}\n\n/**\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\n *\n * @param {Uint16Array} uBuffer The buffer view of u values.\n * @param {Uint16Array} vBuffer The buffer view of v values.\n * @param {Uint16Array} [heightBuffer] The buffer view of height values.\n *\n * @see {@link https://github.com/CesiumGS/quantized-mesh|quantized-mesh-1.0 terrain format}\n */\nAttributeCompression.zigZagDeltaDecode = function (\n  uBuffer,\n  vBuffer,\n  heightBuffer\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("uBuffer", uBuffer);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("vBuffer", vBuffer);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number.equals */ .Z.typeOf.number.equals(\n    "uBuffer.length",\n    "vBuffer.length",\n    uBuffer.length,\n    vBuffer.length\n  );\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(heightBuffer)) {\n    _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number.equals */ .Z.typeOf.number.equals(\n      "uBuffer.length",\n      "heightBuffer.length",\n      uBuffer.length,\n      heightBuffer.length\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var count = uBuffer.length;\n\n  var u = 0;\n  var v = 0;\n  var height = 0;\n\n  for (var i = 0; i < count; ++i) {\n    u += zigZagDecode(uBuffer[i]);\n    v += zigZagDecode(vBuffer[i]);\n\n    uBuffer[i] = u;\n    vBuffer[i] = v;\n\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(heightBuffer)) {\n      height += zigZagDecode(heightBuffer[i]);\n      heightBuffer[i] = height;\n    }\n  }\n};\n\n/**\n * Dequantizes a quantized typed array into a floating point typed array.\n *\n * @see {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data}\n *\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array} typedArray The typed array for the quantized data.\n * @param {ComponentDatatype} componentDatatype The component datatype of the quantized data.\n * @param {AttributeType} type The attribute type of the quantized data.\n * @param {Number} count The number of attributes referenced in the dequantized array.\n *\n * @returns {Float32Array} The dequantized array.\n */\nAttributeCompression.dequantize = function (\n  typedArray,\n  componentDatatype,\n  type,\n  count\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("typedArray", typedArray);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("componentDatatype", componentDatatype);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("type", type);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("count", count);\n  //>>includeEnd(\'debug\');\n\n  var componentsPerAttribute = _Scene_AttributeType_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].getNumberOfComponents */ .Z.getNumberOfComponents(type);\n\n  var divisor;\n  switch (componentDatatype) {\n    case _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BYTE */ .Z.BYTE:\n      divisor = 127.0;\n      break;\n    case _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE:\n      divisor = 255.0;\n      break;\n    case _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SHORT */ .Z.SHORT:\n      divisor = 32767.0;\n      break;\n    case _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT:\n      divisor = 65535.0;\n      break;\n    case _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].INT */ .Z.INT:\n      divisor = 2147483647.0;\n      break;\n    case _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNSIGNED_INT */ .Z.UNSIGNED_INT:\n      divisor = 4294967295.0;\n      break;\n    //>>includeStart(\'debug\', pragmas.debug);\n    default:\n      throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "Cannot dequantize component datatype: " + componentDatatype\n      );\n    //>>includeEnd(\'debug\');\n  }\n\n  var dequantizedTypedArray = new Float32Array(count * componentsPerAttribute);\n\n  for (var i = 0; i < count; i++) {\n    for (var j = 0; j < componentsPerAttribute; j++) {\n      var index = i * componentsPerAttribute + j;\n      dequantizedTypedArray[index] = Math.max(\n        typedArray[index] / divisor,\n        -1.0\n      );\n    }\n  }\n\n  return dequantizedTypedArray;\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (AttributeCompression);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52323\n')},55829:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Intersect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84935);\n\n\n\n\n\n\n/**\n * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\n * @alias AxisAlignedBoundingBox\n * @constructor\n *\n * @param {Cartesian3} [minimum=Cartesian3.ZERO] The minimum point along the x, y, and z axes.\n * @param {Cartesian3} [maximum=Cartesian3.ZERO] The maximum point along the x, y, and z axes.\n * @param {Cartesian3} [center] The center of the box; automatically computed if not supplied.\n *\n * @see BoundingSphere\n * @see BoundingRectangle\n */\nfunction AxisAlignedBoundingBox(minimum, maximum, center) {\n  /**\n   * The minimum point defining the bounding box.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.minimum = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(minimum, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO));\n\n  /**\n   * The maximum point defining the bounding box.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.maximum = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(maximum, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO));\n\n  //If center was not defined, compute it.\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(center)) {\n    center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].midpoint */ .Z.midpoint(this.minimum, this.maximum, new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z());\n  } else {\n    center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(center);\n  }\n\n  /**\n   * The center point of the bounding box.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n}\n\n/**\n * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\n * finding the points spaced the farthest apart on the x, y, and z axes.\n *\n * @param {Cartesian3[]} positions List of points that the bounding box will enclose.  Each point must have a <code>x</code>, <code>y</code>, and <code>z</code> properties.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n *\n * @example\n * // Compute an axis aligned bounding box enclosing two points.\n * var box = Cesium.AxisAlignedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\n */\nAxisAlignedBoundingBox.fromPoints = function (positions, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new AxisAlignedBoundingBox();\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(positions) || positions.length === 0) {\n    result.minimum = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO, result.minimum);\n    result.maximum = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO, result.maximum);\n    result.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO, result.center);\n    return result;\n  }\n\n  var minimumX = positions[0].x;\n  var minimumY = positions[0].y;\n  var minimumZ = positions[0].z;\n\n  var maximumX = positions[0].x;\n  var maximumY = positions[0].y;\n  var maximumZ = positions[0].z;\n\n  var length = positions.length;\n  for (var i = 1; i < length; i++) {\n    var p = positions[i];\n    var x = p.x;\n    var y = p.y;\n    var z = p.z;\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n    minimumZ = Math.min(z, minimumZ);\n    maximumZ = Math.max(z, maximumZ);\n  }\n\n  var minimum = result.minimum;\n  minimum.x = minimumX;\n  minimum.y = minimumY;\n  minimum.z = minimumZ;\n\n  var maximum = result.maximum;\n  maximum.x = maximumX;\n  maximum.y = maximumY;\n  maximum.z = maximumZ;\n\n  result.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].midpoint */ .Z.midpoint(minimum, maximum, result.center);\n\n  return result;\n};\n\n/**\n * Duplicates a AxisAlignedBoundingBox instance.\n *\n * @param {AxisAlignedBoundingBox} box The bounding box to duplicate.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\n */\nAxisAlignedBoundingBox.clone = function (box, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(box)) {\n    return undefined;\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);\n  }\n\n  result.minimum = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(box.minimum, result.minimum);\n  result.maximum = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(box.maximum, result.maximum);\n  result.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(box.center, result.center);\n  return result;\n};\n\n/**\n * Compares the provided AxisAlignedBoundingBox componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {AxisAlignedBoundingBox} [left] The first AxisAlignedBoundingBox.\n * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nAxisAlignedBoundingBox.equals = function (left, right) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(left.center, right.center) &&\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(left.minimum, right.minimum) &&\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(left.maximum, right.maximum))\n  );\n};\n\nvar intersectScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n/**\n * Determines which side of a plane a box is located.\n *\n * @param {AxisAlignedBoundingBox} box The bounding box to test.\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n *                      intersects the plane.\n */\nAxisAlignedBoundingBox.intersectPlane = function (box, plane) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("box", box);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("plane", plane);\n  //>>includeEnd(\'debug\');\n\n  intersectScratch = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n    box.maximum,\n    box.minimum,\n    intersectScratch\n  );\n  var h = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(intersectScratch, 0.5, intersectScratch); //The positive half diagonal\n  var normal = plane.normal;\n  var e =\n    h.x * Math.abs(normal.x) +\n    h.y * Math.abs(normal.y) +\n    h.z * Math.abs(normal.z);\n  var s = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].dot */ .Z.dot(box.center, normal) + plane.distance; //signed distance from center\n\n  if (s - e > 0) {\n    return _Intersect_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].INSIDE */ .Z.INSIDE;\n  }\n\n  if (s + e < 0) {\n    //Not in front because normals point inward\n    return _Intersect_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].OUTSIDE */ .Z.OUTSIDE;\n  }\n\n  return _Intersect_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].INTERSECTING */ .Z.INTERSECTING;\n};\n\n/**\n * Duplicates this AxisAlignedBoundingBox instance.\n *\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n */\nAxisAlignedBoundingBox.prototype.clone = function (result) {\n  return AxisAlignedBoundingBox.clone(this, result);\n};\n\n/**\n * Determines which side of a plane this box is located.\n *\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n *                      intersects the plane.\n */\nAxisAlignedBoundingBox.prototype.intersectPlane = function (plane) {\n  return AxisAlignedBoundingBox.intersectPlane(this, plane);\n};\n\n/**\n * Compares this AxisAlignedBoundingBox against the provided AxisAlignedBoundingBox componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {AxisAlignedBoundingBox} [right] The right hand side AxisAlignedBoundingBox.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nAxisAlignedBoundingBox.prototype.equals = function (right) {\n  return AxisAlignedBoundingBox.equals(this, right);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (AxisAlignedBoundingBox);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55829\n')}}]);