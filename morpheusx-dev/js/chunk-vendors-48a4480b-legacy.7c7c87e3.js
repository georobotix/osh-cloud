"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[1537],{2819:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_Uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93922);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13222);\n/* harmony import */ var _buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72000);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(82982);\n/* harmony import */ var _destroyObject_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(86511);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12572);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14459);\n/* harmony import */ var _FeatureDetection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(96037);\n/* harmony import */ var _isCrossOriginUrl_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(77850);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(68985);\n/* harmony import */ var _RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9407);\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction canTransferArrayBuffer() {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(TaskProcessor._canTransferArrayBuffer)) {\n    var worker = new Worker(getWorkerUrl("Workers/transferTypedArrayTest.js"));\n    worker.postMessage = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(\n      worker.webkitPostMessage,\n      worker.postMessage\n    );\n\n    var value = 99;\n    var array = new Int8Array([value]);\n\n    try {\n      // postMessage might fail with a DataCloneError\n      // if transferring array buffers is not supported.\n      worker.postMessage(\n        {\n          array: array,\n        },\n        [array.buffer]\n      );\n    } catch (e) {\n      TaskProcessor._canTransferArrayBuffer = false;\n      return TaskProcessor._canTransferArrayBuffer;\n    }\n\n    var deferred = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defer */ .Z.defer();\n\n    worker.onmessage = function (event) {\n      var array = event.data.array;\n\n      // some versions of Firefox silently fail to transfer typed arrays.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=841904\n      // Check to make sure the value round-trips successfully.\n      var result = (0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(array) && array[0] === value;\n      deferred.resolve(result);\n\n      worker.terminate();\n\n      TaskProcessor._canTransferArrayBuffer = result;\n    };\n\n    TaskProcessor._canTransferArrayBuffer = deferred.promise;\n  }\n\n  return TaskProcessor._canTransferArrayBuffer;\n}\n\nvar taskCompletedEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n\nfunction completeTask(processor, data) {\n  --processor._activeTasks;\n\n  var id = data.id;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(id)) {\n    // This is not one of ours.\n    return;\n  }\n\n  var deferreds = processor._deferreds;\n  var deferred = deferreds[id];\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(data.error)) {\n    var error = data.error;\n    if (error.name === "RuntimeError") {\n      error = new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(data.error.message);\n      error.stack = data.error.stack;\n    } else if (error.name === "DeveloperError") {\n      error = new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(data.error.message);\n      error.stack = data.error.stack;\n    }\n    taskCompletedEvent.raiseEvent(error);\n    deferred.reject(error);\n  } else {\n    taskCompletedEvent.raiseEvent();\n    deferred.resolve(data.result);\n  }\n\n  delete deferreds[id];\n}\n\nfunction getWorkerUrl(moduleID) {\n  var url = (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(moduleID);\n\n  if ((0,_isCrossOriginUrl_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(url)) {\n    //to load cross-origin, create a shim worker from a blob URL\n    var script = \'importScripts("\' + url + \'");\';\n\n    var blob;\n    try {\n      blob = new Blob([script], {\n        type: "application/javascript",\n      });\n    } catch (e) {\n      var BlobBuilder =\n        window.BlobBuilder ||\n        window.WebKitBlobBuilder ||\n        window.MozBlobBuilder ||\n        window.MSBlobBuilder;\n      var blobBuilder = new BlobBuilder();\n      blobBuilder.append(script);\n      blob = blobBuilder.getBlob("application/javascript");\n    }\n\n    var URL = window.URL || window.webkitURL;\n    url = URL.createObjectURL(blob);\n  }\n\n  return url;\n}\n\nvar bootstrapperUrlResult;\nfunction getBootstrapperUrl() {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(bootstrapperUrlResult)) {\n    bootstrapperUrlResult = getWorkerUrl("Workers/cesiumWorkerBootstrapper.js");\n  }\n  return bootstrapperUrlResult;\n}\n\nfunction createWorker(processor) {\n  var worker = new Worker(getBootstrapperUrl());\n  worker.postMessage = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(\n    worker.webkitPostMessage,\n    worker.postMessage\n  );\n\n  var bootstrapMessage = {\n    loaderConfig: {\n      paths: {\n        Workers: (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)("Workers"),\n      },\n      baseUrl: _buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].getCesiumBaseUrl */ .Z.getCesiumBaseUrl().url,\n    },\n    workerModule: processor._workerPath,\n  };\n\n  worker.postMessage(bootstrapMessage);\n  worker.onmessage = function (event) {\n    completeTask(processor, event.data);\n  };\n\n  return worker;\n}\n\nfunction getWebAssemblyLoaderConfig(processor, wasmOptions) {\n  var config = {\n    modulePath: undefined,\n    wasmBinaryFile: undefined,\n    wasmBinary: undefined,\n  };\n\n  // Web assembly not supported, use fallback js module if provided\n  if (!_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].supportsWebAssembly */ .Z.supportsWebAssembly()) {\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(wasmOptions.fallbackModulePath)) {\n      throw new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(\n        "This browser does not support Web Assembly, and no backup module was provided for " +\n          processor._workerPath\n      );\n    }\n\n    config.modulePath = (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(wasmOptions.fallbackModulePath);\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].resolve */ .Z.resolve(config);\n  }\n\n  config.modulePath = (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(wasmOptions.modulePath);\n  config.wasmBinaryFile = (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(wasmOptions.wasmBinaryFile);\n\n  return _Resource_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fetchArrayBuffer */ .Z.fetchArrayBuffer({\n    url: config.wasmBinaryFile,\n  }).then(function (arrayBuffer) {\n    config.wasmBinary = arrayBuffer;\n    return config;\n  });\n}\n\n/**\n * A wrapper around a web worker that allows scheduling tasks for a given worker,\n * returning results asynchronously via a promise.\n *\n * The Worker is not constructed until a task is scheduled.\n *\n * @alias TaskProcessor\n * @constructor\n *\n * @param {String} workerPath The Url to the worker. This can either be an absolute path or relative to the Cesium Workers folder.\n * @param {Number} [maximumActiveTasks=Number.POSITIVE_INFINITY] The maximum number of active tasks.  Once exceeded,\n *                                        scheduleTask will not queue any more tasks, allowing\n *                                        work to be rescheduled in future frames.\n */\nfunction TaskProcessor(workerPath, maximumActiveTasks) {\n  var uri = new _ThirdParty_Uri_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(workerPath);\n  this._workerPath =\n    uri.scheme().length !== 0 && uri.fragment().length === 0\n      ? workerPath\n      : TaskProcessor._workerModulePrefix + workerPath;\n  this._maximumActiveTasks = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(\n    maximumActiveTasks,\n    Number.POSITIVE_INFINITY\n  );\n  this._activeTasks = 0;\n  this._deferreds = {};\n  this._nextID = 0;\n}\n\nvar emptyTransferableObjectArray = [];\n\n/**\n * Schedule a task to be processed by the web worker asynchronously.  If there are currently more\n * tasks active than the maximum set by the constructor, will immediately return undefined.\n * Otherwise, returns a promise that will resolve to the result posted back by the worker when\n * finished.\n *\n * @param {Object} parameters Any input data that will be posted to the worker.\n * @param {Object[]} [transferableObjects] An array of objects contained in parameters that should be\n *                                      transferred to the worker instead of copied.\n * @returns {Promise.<Object>|undefined} Either a promise that will resolve to the result when available, or undefined\n *                    if there are too many active tasks,\n *\n * @example\n * var taskProcessor = new Cesium.TaskProcessor(\'myWorkerPath\');\n * var promise = taskProcessor.scheduleTask({\n *     someParameter : true,\n *     another : \'hello\'\n * });\n * if (!Cesium.defined(promise)) {\n *     // too many active tasks - try again later\n * } else {\n *     Cesium.when(promise, function(result) {\n *         // use the result of the task\n *     });\n * }\n */\nTaskProcessor.prototype.scheduleTask = function (\n  parameters,\n  transferableObjects\n) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(this._worker)) {\n    this._worker = createWorker(this);\n  }\n\n  if (this._activeTasks >= this._maximumActiveTasks) {\n    return undefined;\n  }\n\n  ++this._activeTasks;\n\n  var processor = this;\n  return (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(canTransferArrayBuffer(), function (canTransferArrayBuffer) {\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(transferableObjects)) {\n      transferableObjects = emptyTransferableObjectArray;\n    } else if (!canTransferArrayBuffer) {\n      transferableObjects.length = 0;\n    }\n\n    var id = processor._nextID++;\n    var deferred = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defer */ .Z.defer();\n    processor._deferreds[id] = deferred;\n\n    processor._worker.postMessage(\n      {\n        id: id,\n        parameters: parameters,\n        canTransferArrayBuffer: canTransferArrayBuffer,\n      },\n      transferableObjects\n    );\n\n    return deferred.promise;\n  });\n};\n\n/**\n * Posts a message to a web worker with configuration to initialize loading\n * and compiling a web assembly module asychronously, as well as an optional\n * fallback JavaScript module to use if Web Assembly is not supported.\n *\n * @param {Object} [webAssemblyOptions] An object with the following properties:\n * @param {String} [webAssemblyOptions.modulePath] The path of the web assembly JavaScript wrapper module.\n * @param {String} [webAssemblyOptions.wasmBinaryFile] The path of the web assembly binary file.\n * @param {String} [webAssemblyOptions.fallbackModulePath] The path of the fallback JavaScript module to use if web assembly is not supported.\n * @returns {Promise.<Object>} A promise that resolves to the result when the web worker has loaded and compiled the web assembly module and is ready to process tasks.\n */\nTaskProcessor.prototype.initWebAssemblyModule = function (webAssemblyOptions) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(this._worker)) {\n    this._worker = createWorker(this);\n  }\n\n  var deferred = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defer */ .Z.defer();\n  var processor = this;\n  var worker = this._worker;\n  getWebAssemblyLoaderConfig(this, webAssemblyOptions).then(function (\n    wasmConfig\n  ) {\n    return (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(canTransferArrayBuffer(), function (canTransferArrayBuffer) {\n      var transferableObjects;\n      var binary = wasmConfig.wasmBinary;\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(binary) && canTransferArrayBuffer) {\n        transferableObjects = [binary];\n      }\n\n      worker.onmessage = function (event) {\n        worker.onmessage = function (event) {\n          completeTask(processor, event.data);\n        };\n\n        deferred.resolve(event.data);\n      };\n\n      worker.postMessage(\n        { webAssemblyConfig: wasmConfig },\n        transferableObjects\n      );\n    });\n  });\n\n  return deferred;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see TaskProcessor#destroy\n */\nTaskProcessor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys this object.  This will immediately terminate the Worker.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n */\nTaskProcessor.prototype.destroy = function () {\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(this._worker)) {\n    this._worker.terminate();\n  }\n  return (0,_destroyObject_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this);\n};\n\n/**\n * An event that\'s raised when a task is completed successfully.  Event handlers are passed\n * the error object is a task fails.\n *\n * @type {Event}\n *\n * @private\n */\nTaskProcessor.taskCompletedEvent = taskCompletedEvent;\n\n// exposed for testing purposes\nTaskProcessor._defaultWorkerModulePrefix = "Workers/";\nTaskProcessor._workerModulePrefix = TaskProcessor._defaultWorkerModulePrefix;\nTaskProcessor._canTransferArrayBuffer = undefined;\n/* harmony default export */ __webpack_exports__["Z"] = (TaskProcessor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2819\n')},99978:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n/**\n * Terrain data for a single tile.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias TerrainData\n * @constructor\n *\n * @see HeightmapTerrainData\n * @see QuantizedMeshTerrainData\n * @see GoogleEarthEnterpriseTerrainData\n */\nfunction TerrainData() {\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n}\n\nObject.defineProperties(TerrainData.prototype, {\n  /**\n   * An array of credits for this tile.\n   * @memberof TerrainData.prototype\n   * @type {Credit[]}\n   */\n  credits: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n  /**\n   * The water mask included in this terrain data, if any.  A water mask is a rectangular\n   * Uint8Array or image where a value of 255 indicates water and a value of 0 indicates land.\n   * Values in between 0 and 255 are allowed as well to smoothly blend between land and water.\n   * @memberof TerrainData.prototype\n   * @type {Uint8Array|HTMLImageElement|HTMLCanvasElement}\n   */\n  waterMask: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n});\n\n/**\n * Computes the terrain height at a specified longitude and latitude.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle covered by this terrain data.\n * @param {Number} longitude The longitude in radians.\n * @param {Number} latitude The latitude in radians.\n * @returns {Number} The terrain height at the specified position.  If the position\n *          is outside the rectangle, this method will extrapolate the height, which is likely to be wildly\n *          incorrect for positions far outside the rectangle.\n */\nTerrainData.prototype.interpolateHeight =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Determines if a given child tile is available, based on the\n * {@link TerrainData#childTileMask}.  The given child tile coordinates are assumed\n * to be one of the four children of this tile.  If non-child tile coordinates are\n * given, the availability of the southeast child tile is returned.\n * @function\n *\n * @param {Number} thisX The tile X coordinate of this (the parent) tile.\n * @param {Number} thisY The tile Y coordinate of this (the parent) tile.\n * @param {Number} childX The tile X coordinate of the child tile to check for availability.\n * @param {Number} childY The tile Y coordinate of the child tile to check for availability.\n * @returns {Boolean} True if the child tile is available; otherwise, false.\n */\nTerrainData.prototype.isChildAvailable = _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Creates a {@link TerrainMesh} from this terrain data.\n * @function\n *\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {TilingScheme} options.tilingScheme The tiling scheme to which this tile belongs.\n * @param {Number} options.x The X coordinate of the tile for which to create the terrain data.\n * @param {Number} options.y The Y coordinate of the tile for which to create the terrain data.\n * @param {Number} options.level The level of the tile for which to create the terrain data.\n * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\n * @param {Number} [options.exaggerationRelativeHeight=0.0] The height relative to which terrain is exaggerated.\n * @param {Boolean} [options.throttle=true] If true, indicates that this operation will need to be retried if too many asynchronous mesh creations are already in progress.\n * @returns {Promise.<TerrainMesh>|undefined} A promise for the terrain mesh, or undefined if too many\n *          asynchronous mesh creations are already in progress and the operation should\n *          be retried later.\n */\nTerrainData.prototype.createMesh = _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Upsamples this terrain data for use by a descendant tile.\n * @function\n *\n * @param {TilingScheme} tilingScheme The tiling scheme of this terrain data.\n * @param {Number} thisX The X coordinate of this tile in the tiling scheme.\n * @param {Number} thisY The Y coordinate of this tile in the tiling scheme.\n * @param {Number} thisLevel The level of this tile in the tiling scheme.\n * @param {Number} descendantX The X coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantY The Y coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantLevel The level within the tiling scheme of the descendant tile for which we are upsampling.\n * @returns {Promise.<TerrainData>|undefined} A promise for upsampled terrain data for the descendant tile,\n *          or undefined if too many asynchronous upsample operations are in progress and the request has been\n *          deferred.\n */\nTerrainData.prototype.upsample = _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Gets a value indicating whether or not this terrain data was created by upsampling lower resolution\n * terrain data.  If this value is false, the data was obtained from some other source, such\n * as by downloading it from a remote server.  This method should return true for instances\n * returned from a call to {@link TerrainData#upsample}.\n * @function\n *\n * @returns {Boolean} True if this instance was created by upsampling; otherwise, false.\n */\nTerrainData.prototype.wasCreatedByUpsampling =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * The maximum number of asynchronous tasks used for terrain processing.\n *\n * @type {Number}\n * @private\n */\nTerrainData.maximumAsynchronousTasks = 5;\n\n/* harmony default export */ __webpack_exports__["Z"] = (TerrainData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk5NzguanMiLCJtYXBwaW5ncyI6IjtBQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxtSEFBc0M7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVMsbUhBQXNDO0FBQy9DLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTLG1IQUFzQztBQUMvQyxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsbUhBQXNDOztBQUV4QztBQUNBO0FBQ0EsSUFBSSxnQ0FBZ0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTLHFDQUFxQztBQUMzRDtBQUNBLHlDQUF5QyxtSEFBc0M7O0FBRS9FO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsaUNBQWlDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxtSEFBc0M7O0FBRXpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsaUNBQWlDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtSEFBc0M7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0EsYUFBYSxTQUFTLGlEQUFpRDtBQUN2RTtBQUNBO0FBQ0EsRUFBRSxtSEFBc0M7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUEseURBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL0NvcmUvVGVycmFpbkRhdGEuanM/MTY2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGV2ZWxvcGVyRXJyb3IgZnJvbSBcIi4vRGV2ZWxvcGVyRXJyb3IuanNcIjtcblxuLyoqXG4gKiBUZXJyYWluIGRhdGEgZm9yIGEgc2luZ2xlIHRpbGUuICBUaGlzIHR5cGUgZGVzY3JpYmVzIGFuXG4gKiBpbnRlcmZhY2UgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gKlxuICogQGFsaWFzIFRlcnJhaW5EYXRhXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAc2VlIEhlaWdodG1hcFRlcnJhaW5EYXRhXG4gKiBAc2VlIFF1YW50aXplZE1lc2hUZXJyYWluRGF0YVxuICogQHNlZSBHb29nbGVFYXJ0aEVudGVycHJpc2VUZXJyYWluRGF0YVxuICovXG5mdW5jdGlvbiBUZXJyYWluRGF0YSgpIHtcbiAgRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVGVycmFpbkRhdGEucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBjcmVkaXRzIGZvciB0aGlzIHRpbGUuXG4gICAqIEBtZW1iZXJvZiBUZXJyYWluRGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge0NyZWRpdFtdfVxuICAgKi9cbiAgY3JlZGl0czoge1xuICAgIGdldDogRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IsXG4gIH0sXG4gIC8qKlxuICAgKiBUaGUgd2F0ZXIgbWFzayBpbmNsdWRlZCBpbiB0aGlzIHRlcnJhaW4gZGF0YSwgaWYgYW55LiAgQSB3YXRlciBtYXNrIGlzIGEgcmVjdGFuZ3VsYXJcbiAgICogVWludDhBcnJheSBvciBpbWFnZSB3aGVyZSBhIHZhbHVlIG9mIDI1NSBpbmRpY2F0ZXMgd2F0ZXIgYW5kIGEgdmFsdWUgb2YgMCBpbmRpY2F0ZXMgbGFuZC5cbiAgICogVmFsdWVzIGluIGJldHdlZW4gMCBhbmQgMjU1IGFyZSBhbGxvd2VkIGFzIHdlbGwgdG8gc21vb3RobHkgYmxlbmQgYmV0d2VlbiBsYW5kIGFuZCB3YXRlci5cbiAgICogQG1lbWJlcm9mIFRlcnJhaW5EYXRhLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7VWludDhBcnJheXxIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fVxuICAgKi9cbiAgd2F0ZXJNYXNrOiB7XG4gICAgZ2V0OiBEZXZlbG9wZXJFcnJvci50aHJvd0luc3RhbnRpYXRpb25FcnJvcixcbiAgfSxcbn0pO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSB0ZXJyYWluIGhlaWdodCBhdCBhIHNwZWNpZmllZCBsb25naXR1ZGUgYW5kIGxhdGl0dWRlLlxuICogQGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtSZWN0YW5nbGV9IHJlY3RhbmdsZSBUaGUgcmVjdGFuZ2xlIGNvdmVyZWQgYnkgdGhpcyB0ZXJyYWluIGRhdGEuXG4gKiBAcGFyYW0ge051bWJlcn0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGUgaW4gcmFkaWFucy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBsYXRpdHVkZSBUaGUgbGF0aXR1ZGUgaW4gcmFkaWFucy5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSB0ZXJyYWluIGhlaWdodCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLiAgSWYgdGhlIHBvc2l0aW9uXG4gKiAgICAgICAgICBpcyBvdXRzaWRlIHRoZSByZWN0YW5nbGUsIHRoaXMgbWV0aG9kIHdpbGwgZXh0cmFwb2xhdGUgdGhlIGhlaWdodCwgd2hpY2ggaXMgbGlrZWx5IHRvIGJlIHdpbGRseVxuICogICAgICAgICAgaW5jb3JyZWN0IGZvciBwb3NpdGlvbnMgZmFyIG91dHNpZGUgdGhlIHJlY3RhbmdsZS5cbiAqL1xuVGVycmFpbkRhdGEucHJvdG90eXBlLmludGVycG9sYXRlSGVpZ2h0ID1cbiAgRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3I7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIGNoaWxkIHRpbGUgaXMgYXZhaWxhYmxlLCBiYXNlZCBvbiB0aGVcbiAqIHtAbGluayBUZXJyYWluRGF0YSNjaGlsZFRpbGVNYXNrfS4gIFRoZSBnaXZlbiBjaGlsZCB0aWxlIGNvb3JkaW5hdGVzIGFyZSBhc3N1bWVkXG4gKiB0byBiZSBvbmUgb2YgdGhlIGZvdXIgY2hpbGRyZW4gb2YgdGhpcyB0aWxlLiAgSWYgbm9uLWNoaWxkIHRpbGUgY29vcmRpbmF0ZXMgYXJlXG4gKiBnaXZlbiwgdGhlIGF2YWlsYWJpbGl0eSBvZiB0aGUgc291dGhlYXN0IGNoaWxkIHRpbGUgaXMgcmV0dXJuZWQuXG4gKiBAZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdGhpc1ggVGhlIHRpbGUgWCBjb29yZGluYXRlIG9mIHRoaXMgKHRoZSBwYXJlbnQpIHRpbGUuXG4gKiBAcGFyYW0ge051bWJlcn0gdGhpc1kgVGhlIHRpbGUgWSBjb29yZGluYXRlIG9mIHRoaXMgKHRoZSBwYXJlbnQpIHRpbGUuXG4gKiBAcGFyYW0ge051bWJlcn0gY2hpbGRYIFRoZSB0aWxlIFggY29vcmRpbmF0ZSBvZiB0aGUgY2hpbGQgdGlsZSB0byBjaGVjayBmb3IgYXZhaWxhYmlsaXR5LlxuICogQHBhcmFtIHtOdW1iZXJ9IGNoaWxkWSBUaGUgdGlsZSBZIGNvb3JkaW5hdGUgb2YgdGhlIGNoaWxkIHRpbGUgdG8gY2hlY2sgZm9yIGF2YWlsYWJpbGl0eS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBjaGlsZCB0aWxlIGlzIGF2YWlsYWJsZTsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqL1xuVGVycmFpbkRhdGEucHJvdG90eXBlLmlzQ2hpbGRBdmFpbGFibGUgPSBEZXZlbG9wZXJFcnJvci50aHJvd0luc3RhbnRpYXRpb25FcnJvcjtcblxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIFRlcnJhaW5NZXNofSBmcm9tIHRoaXMgdGVycmFpbiBkYXRhLlxuICogQGZ1bmN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiBAcGFyYW0ge1RpbGluZ1NjaGVtZX0gb3B0aW9ucy50aWxpbmdTY2hlbWUgVGhlIHRpbGluZyBzY2hlbWUgdG8gd2hpY2ggdGhpcyB0aWxlIGJlbG9uZ3MuXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy54IFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHRpbGUgZm9yIHdoaWNoIHRvIGNyZWF0ZSB0aGUgdGVycmFpbiBkYXRhLlxuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMueSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSB0aWxlIGZvciB3aGljaCB0byBjcmVhdGUgdGhlIHRlcnJhaW4gZGF0YS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmxldmVsIFRoZSBsZXZlbCBvZiB0aGUgdGlsZSBmb3Igd2hpY2ggdG8gY3JlYXRlIHRoZSB0ZXJyYWluIGRhdGEuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZXhhZ2dlcmF0aW9uPTEuMF0gVGhlIHNjYWxlIHVzZWQgdG8gZXhhZ2dlcmF0ZSB0aGUgdGVycmFpbi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodD0wLjBdIFRoZSBoZWlnaHQgcmVsYXRpdmUgdG8gd2hpY2ggdGVycmFpbiBpcyBleGFnZ2VyYXRlZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudGhyb3R0bGU9dHJ1ZV0gSWYgdHJ1ZSwgaW5kaWNhdGVzIHRoYXQgdGhpcyBvcGVyYXRpb24gd2lsbCBuZWVkIHRvIGJlIHJldHJpZWQgaWYgdG9vIG1hbnkgYXN5bmNocm9ub3VzIG1lc2ggY3JlYXRpb25zIGFyZSBhbHJlYWR5IGluIHByb2dyZXNzLlxuICogQHJldHVybnMge1Byb21pc2UuPFRlcnJhaW5NZXNoPnx1bmRlZmluZWR9IEEgcHJvbWlzZSBmb3IgdGhlIHRlcnJhaW4gbWVzaCwgb3IgdW5kZWZpbmVkIGlmIHRvbyBtYW55XG4gKiAgICAgICAgICBhc3luY2hyb25vdXMgbWVzaCBjcmVhdGlvbnMgYXJlIGFscmVhZHkgaW4gcHJvZ3Jlc3MgYW5kIHRoZSBvcGVyYXRpb24gc2hvdWxkXG4gKiAgICAgICAgICBiZSByZXRyaWVkIGxhdGVyLlxuICovXG5UZXJyYWluRGF0YS5wcm90b3R5cGUuY3JlYXRlTWVzaCA9IERldmVsb3BlckVycm9yLnRocm93SW5zdGFudGlhdGlvbkVycm9yO1xuXG4vKipcbiAqIFVwc2FtcGxlcyB0aGlzIHRlcnJhaW4gZGF0YSBmb3IgdXNlIGJ5IGEgZGVzY2VuZGFudCB0aWxlLlxuICogQGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtUaWxpbmdTY2hlbWV9IHRpbGluZ1NjaGVtZSBUaGUgdGlsaW5nIHNjaGVtZSBvZiB0aGlzIHRlcnJhaW4gZGF0YS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aGlzWCBUaGUgWCBjb29yZGluYXRlIG9mIHRoaXMgdGlsZSBpbiB0aGUgdGlsaW5nIHNjaGVtZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aGlzWSBUaGUgWSBjb29yZGluYXRlIG9mIHRoaXMgdGlsZSBpbiB0aGUgdGlsaW5nIHNjaGVtZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aGlzTGV2ZWwgVGhlIGxldmVsIG9mIHRoaXMgdGlsZSBpbiB0aGUgdGlsaW5nIHNjaGVtZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXNjZW5kYW50WCBUaGUgWCBjb29yZGluYXRlIHdpdGhpbiB0aGUgdGlsaW5nIHNjaGVtZSBvZiB0aGUgZGVzY2VuZGFudCB0aWxlIGZvciB3aGljaCB3ZSBhcmUgdXBzYW1wbGluZy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXNjZW5kYW50WSBUaGUgWSBjb29yZGluYXRlIHdpdGhpbiB0aGUgdGlsaW5nIHNjaGVtZSBvZiB0aGUgZGVzY2VuZGFudCB0aWxlIGZvciB3aGljaCB3ZSBhcmUgdXBzYW1wbGluZy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXNjZW5kYW50TGV2ZWwgVGhlIGxldmVsIHdpdGhpbiB0aGUgdGlsaW5nIHNjaGVtZSBvZiB0aGUgZGVzY2VuZGFudCB0aWxlIGZvciB3aGljaCB3ZSBhcmUgdXBzYW1wbGluZy5cbiAqIEByZXR1cm5zIHtQcm9taXNlLjxUZXJyYWluRGF0YT58dW5kZWZpbmVkfSBBIHByb21pc2UgZm9yIHVwc2FtcGxlZCB0ZXJyYWluIGRhdGEgZm9yIHRoZSBkZXNjZW5kYW50IHRpbGUsXG4gKiAgICAgICAgICBvciB1bmRlZmluZWQgaWYgdG9vIG1hbnkgYXN5bmNocm9ub3VzIHVwc2FtcGxlIG9wZXJhdGlvbnMgYXJlIGluIHByb2dyZXNzIGFuZCB0aGUgcmVxdWVzdCBoYXMgYmVlblxuICogICAgICAgICAgZGVmZXJyZWQuXG4gKi9cblRlcnJhaW5EYXRhLnByb3RvdHlwZS51cHNhbXBsZSA9IERldmVsb3BlckVycm9yLnRocm93SW5zdGFudGlhdGlvbkVycm9yO1xuXG4vKipcbiAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IHRoaXMgdGVycmFpbiBkYXRhIHdhcyBjcmVhdGVkIGJ5IHVwc2FtcGxpbmcgbG93ZXIgcmVzb2x1dGlvblxuICogdGVycmFpbiBkYXRhLiAgSWYgdGhpcyB2YWx1ZSBpcyBmYWxzZSwgdGhlIGRhdGEgd2FzIG9idGFpbmVkIGZyb20gc29tZSBvdGhlciBzb3VyY2UsIHN1Y2hcbiAqIGFzIGJ5IGRvd25sb2FkaW5nIGl0IGZyb20gYSByZW1vdGUgc2VydmVyLiAgVGhpcyBtZXRob2Qgc2hvdWxkIHJldHVybiB0cnVlIGZvciBpbnN0YW5jZXNcbiAqIHJldHVybmVkIGZyb20gYSBjYWxsIHRvIHtAbGluayBUZXJyYWluRGF0YSN1cHNhbXBsZX0uXG4gKiBAZnVuY3Rpb25cbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGlzIGluc3RhbmNlIHdhcyBjcmVhdGVkIGJ5IHVwc2FtcGxpbmc7IG90aGVyd2lzZSwgZmFsc2UuXG4gKi9cblRlcnJhaW5EYXRhLnByb3RvdHlwZS53YXNDcmVhdGVkQnlVcHNhbXBsaW5nID1cbiAgRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3I7XG5cbi8qKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jaHJvbm91cyB0YXNrcyB1c2VkIGZvciB0ZXJyYWluIHByb2Nlc3NpbmcuXG4gKlxuICogQHR5cGUge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cblRlcnJhaW5EYXRhLm1heGltdW1Bc3luY2hyb25vdXNUYXNrcyA9IDU7XG5cbmV4cG9ydCBkZWZhdWx0IFRlcnJhaW5EYXRhO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///99978\n')},41782:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52323);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84828);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(82982);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99417);\n/* harmony import */ var _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(72248);\n/* harmony import */ var _TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(78257);\n/* harmony import */ var _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(735);\n\n\n\n\n\n\n\n\n\n\n\nvar cartesian3Scratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar cartesian3DimScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar cartesian2Scratch = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar matrix4Scratch = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\nvar matrix4Scratch2 = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n\nvar SHIFT_LEFT_12 = Math.pow(2.0, 12.0);\n\n/**\n * Data used to quantize and pack the terrain mesh. The position can be unpacked for picking and all attributes\n * are unpacked in the vertex shader.\n *\n * @alias TerrainEncoding\n * @constructor\n *\n * @param {Cartesian3} center The center point of the vertices.\n * @param {AxisAlignedBoundingBox} axisAlignedBoundingBox The bounds of the tile in the east-north-up coordinates at the tiles center.\n * @param {Number} minimumHeight The minimum height.\n * @param {Number} maximumHeight The maximum height.\n * @param {Matrix4} fromENU The east-north-up to fixed frame matrix at the center of the terrain mesh.\n * @param {Boolean} hasVertexNormals If the mesh has vertex normals.\n * @param {Boolean} [hasWebMercatorT=false] true if the terrain data includes a Web Mercator texture coordinate; otherwise, false.\n * @param {Boolean} [hasGeodeticSurfaceNormals=false] true if the terrain data includes geodetic surface normals; otherwise, false.\n * @param {Number} [exaggeration=1.0] A scalar used to exaggerate terrain.\n * @param {Number} [exaggerationRelativeHeight=0.0] The relative height from which terrain is exaggerated.\n *\n * @private\n */\nfunction TerrainEncoding(\n  center,\n  axisAlignedBoundingBox,\n  minimumHeight,\n  maximumHeight,\n  fromENU,\n  hasVertexNormals,\n  hasWebMercatorT,\n  hasGeodeticSurfaceNormals,\n  exaggeration,\n  exaggerationRelativeHeight\n) {\n  var quantization = _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NONE */ .Z.NONE;\n  var toENU;\n  var matrix;\n\n  if (\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(axisAlignedBoundingBox) &&\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(minimumHeight) &&\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(maximumHeight) &&\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(fromENU)\n  ) {\n    var minimum = axisAlignedBoundingBox.minimum;\n    var maximum = axisAlignedBoundingBox.maximum;\n\n    var dimensions = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].subtract */ .Z.subtract(\n      maximum,\n      minimum,\n      cartesian3DimScratch\n    );\n    var hDim = maximumHeight - minimumHeight;\n    var maxDim = Math.max(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maximumComponent */ .Z.maximumComponent(dimensions), hDim);\n\n    if (maxDim < SHIFT_LEFT_12 - 1.0) {\n      quantization = _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12;\n    } else {\n      quantization = _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NONE */ .Z.NONE;\n    }\n\n    toENU = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].inverseTransformation */ .Z.inverseTransformation(fromENU, new _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z());\n\n    var translation = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].negate */ .Z.negate(minimum, cartesian3Scratch);\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiply */ .Z.multiply(\n      _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromTranslation */ .Z.fromTranslation(translation, matrix4Scratch),\n      toENU,\n      toENU\n    );\n\n    var scale = cartesian3Scratch;\n    scale.x = 1.0 / dimensions.x;\n    scale.y = 1.0 / dimensions.y;\n    scale.z = 1.0 / dimensions.z;\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiply */ .Z.multiply(_Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromScale */ .Z.fromScale(scale, matrix4Scratch), toENU, toENU);\n\n    matrix = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(fromENU);\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].setTranslation */ .Z.setTranslation(matrix, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO, matrix);\n\n    fromENU = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(fromENU, new _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z());\n\n    var translationMatrix = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromTranslation */ .Z.fromTranslation(minimum, matrix4Scratch);\n    var scaleMatrix = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromScale */ .Z.fromScale(dimensions, matrix4Scratch2);\n    var st = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiply */ .Z.multiply(translationMatrix, scaleMatrix, matrix4Scratch);\n\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiply */ .Z.multiply(fromENU, st, fromENU);\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiply */ .Z.multiply(matrix, st, matrix);\n  }\n\n  /**\n   * How the vertices of the mesh were compressed.\n   * @type {TerrainQuantization}\n   */\n  this.quantization = quantization;\n\n  /**\n   * The minimum height of the tile including the skirts.\n   * @type {Number}\n   */\n  this.minimumHeight = minimumHeight;\n\n  /**\n   * The maximum height of the tile.\n   * @type {Number}\n   */\n  this.maximumHeight = maximumHeight;\n\n  /**\n   * The center of the tile.\n   * @type {Cartesian3}\n   */\n  this.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(center);\n\n  /**\n   * A matrix that takes a vertex from the tile, transforms it to east-north-up at the center and scales\n   * it so each component is in the [0, 1] range.\n   * @type {Matrix4}\n   */\n  this.toScaledENU = toENU;\n\n  /**\n   * A matrix that restores a vertex transformed with toScaledENU back to the earth fixed reference frame\n   * @type {Matrix4}\n   */\n  this.fromScaledENU = fromENU;\n\n  /**\n   * The matrix used to decompress the terrain vertices in the shader for RTE rendering.\n   * @type {Matrix4}\n   */\n  this.matrix = matrix;\n\n  /**\n   * The terrain mesh contains normals.\n   * @type {Boolean}\n   */\n  this.hasVertexNormals = hasVertexNormals;\n\n  /**\n   * The terrain mesh contains a vertical texture coordinate following the Web Mercator projection.\n   * @type {Boolean}\n   */\n  this.hasWebMercatorT = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(hasWebMercatorT, false);\n\n  /**\n   * The terrain mesh contains geodetic surface normals, used for terrain exaggeration.\n   * @type {Boolean}\n   */\n  this.hasGeodeticSurfaceNormals = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    hasGeodeticSurfaceNormals,\n    false\n  );\n\n  /**\n   * A scalar used to exaggerate terrain.\n   * @type {Number}\n   */\n  this.exaggeration = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(exaggeration, 1.0);\n\n  /**\n   * The relative height from which terrain is exaggerated.\n   */\n  this.exaggerationRelativeHeight = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    exaggerationRelativeHeight,\n    0.0\n  );\n\n  /**\n   * The number of components in each vertex. This value can differ with different quantizations.\n   * @type {Number}\n   */\n  this.stride = 0;\n\n  this._offsetGeodeticSurfaceNormal = 0;\n  this._offsetVertexNormal = 0;\n\n  // Calculate the stride and offsets declared above\n  this._calculateStrideAndOffsets();\n}\n\nTerrainEncoding.prototype.encode = function (\n  vertexBuffer,\n  bufferIndex,\n  position,\n  uv,\n  height,\n  normalToPack,\n  webMercatorT,\n  geodeticSurfaceNormal\n) {\n  var u = uv.x;\n  var v = uv.y;\n\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12) {\n    position = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n      this.toScaledENU,\n      position,\n      cartesian3Scratch\n    );\n\n    position.x = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clamp */ .Z.clamp(position.x, 0.0, 1.0);\n    position.y = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clamp */ .Z.clamp(position.y, 0.0, 1.0);\n    position.z = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clamp */ .Z.clamp(position.z, 0.0, 1.0);\n\n    var hDim = this.maximumHeight - this.minimumHeight;\n    var h = _Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clamp */ .Z.clamp((height - this.minimumHeight) / hDim, 0.0, 1.0);\n\n    _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(position.x, position.y, cartesian2Scratch);\n    var compressed0 = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n      cartesian2Scratch\n    );\n\n    _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(position.z, h, cartesian2Scratch);\n    var compressed1 = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n      cartesian2Scratch\n    );\n\n    _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(u, v, cartesian2Scratch);\n    var compressed2 = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n      cartesian2Scratch\n    );\n\n    vertexBuffer[bufferIndex++] = compressed0;\n    vertexBuffer[bufferIndex++] = compressed1;\n    vertexBuffer[bufferIndex++] = compressed2;\n\n    if (this.hasWebMercatorT) {\n      _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(webMercatorT, 0.0, cartesian2Scratch);\n      var compressed3 = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n        cartesian2Scratch\n      );\n      vertexBuffer[bufferIndex++] = compressed3;\n    }\n  } else {\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].subtract */ .Z.subtract(position, this.center, cartesian3Scratch);\n\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.x;\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.y;\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.z;\n    vertexBuffer[bufferIndex++] = height;\n    vertexBuffer[bufferIndex++] = u;\n    vertexBuffer[bufferIndex++] = v;\n\n    if (this.hasWebMercatorT) {\n      vertexBuffer[bufferIndex++] = webMercatorT;\n    }\n  }\n\n  if (this.hasVertexNormals) {\n    vertexBuffer[bufferIndex++] = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].octPackFloat */ .Z.octPackFloat(\n      normalToPack\n    );\n  }\n\n  if (this.hasGeodeticSurfaceNormals) {\n    vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.x;\n    vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.y;\n    vertexBuffer[bufferIndex++] = geodeticSurfaceNormal.z;\n  }\n\n  return bufferIndex;\n};\n\nvar scratchPosition = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchGeodeticSurfaceNormal = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nTerrainEncoding.prototype.addGeodeticSurfaceNormals = function (\n  oldBuffer,\n  newBuffer,\n  ellipsoid\n) {\n  if (this.hasGeodeticSurfaceNormals) {\n    return;\n  }\n\n  var oldStride = this.stride;\n  var vertexCount = oldBuffer.length / oldStride;\n  this.hasGeodeticSurfaceNormals = true;\n  this._calculateStrideAndOffsets();\n  var newStride = this.stride;\n\n  for (var index = 0; index < vertexCount; index++) {\n    for (var offset = 0; offset < oldStride; offset++) {\n      var oldIndex = index * oldStride + offset;\n      var newIndex = index * newStride + offset;\n      newBuffer[newIndex] = oldBuffer[oldIndex];\n    }\n    var position = this.decodePosition(newBuffer, index, scratchPosition);\n    var geodeticSurfaceNormal = ellipsoid.geodeticSurfaceNormal(\n      position,\n      scratchGeodeticSurfaceNormal\n    );\n\n    var bufferIndex = index * newStride + this._offsetGeodeticSurfaceNormal;\n    newBuffer[bufferIndex] = geodeticSurfaceNormal.x;\n    newBuffer[bufferIndex + 1] = geodeticSurfaceNormal.y;\n    newBuffer[bufferIndex + 2] = geodeticSurfaceNormal.z;\n  }\n};\n\nTerrainEncoding.prototype.removeGeodeticSurfaceNormals = function (\n  oldBuffer,\n  newBuffer\n) {\n  if (!this.hasGeodeticSurfaceNormals) {\n    return;\n  }\n\n  var oldStride = this.stride;\n  var vertexCount = oldBuffer.length / oldStride;\n  this.hasGeodeticSurfaceNormals = false;\n  this._calculateStrideAndOffsets();\n  var newStride = this.stride;\n\n  for (var index = 0; index < vertexCount; index++) {\n    for (var offset = 0; offset < newStride; offset++) {\n      var oldIndex = index * oldStride + offset;\n      var newIndex = index * newStride + offset;\n      newBuffer[newIndex] = oldBuffer[oldIndex];\n    }\n  }\n};\n\nTerrainEncoding.prototype.decodePosition = function (buffer, index, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n  }\n\n  index *= this.stride;\n\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12) {\n    var xy = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].decompressTextureCoordinates */ .Z.decompressTextureCoordinates(\n      buffer[index],\n      cartesian2Scratch\n    );\n    result.x = xy.x;\n    result.y = xy.y;\n\n    var zh = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].decompressTextureCoordinates */ .Z.decompressTextureCoordinates(\n      buffer[index + 1],\n      cartesian2Scratch\n    );\n    result.z = zh.x;\n\n    return _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(this.fromScaledENU, result, result);\n  }\n\n  result.x = buffer[index];\n  result.y = buffer[index + 1];\n  result.z = buffer[index + 2];\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(result, this.center, result);\n};\n\nTerrainEncoding.prototype.getExaggeratedPosition = function (\n  buffer,\n  index,\n  result\n) {\n  result = this.decodePosition(buffer, index, result);\n\n  var exaggeration = this.exaggeration;\n  var exaggerationRelativeHeight = this.exaggerationRelativeHeight;\n  var hasExaggeration = exaggeration !== 1.0;\n  if (hasExaggeration && this.hasGeodeticSurfaceNormals) {\n    var geodeticSurfaceNormal = this.decodeGeodeticSurfaceNormal(\n      buffer,\n      index,\n      scratchGeodeticSurfaceNormal\n    );\n    var rawHeight = this.decodeHeight(buffer, index);\n    var heightDifference =\n      _TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].getHeight */ .Z.getHeight(\n        rawHeight,\n        exaggeration,\n        exaggerationRelativeHeight\n      ) - rawHeight;\n\n    // some math is unrolled for better performance\n    result.x += geodeticSurfaceNormal.x * heightDifference;\n    result.y += geodeticSurfaceNormal.y * heightDifference;\n    result.z += geodeticSurfaceNormal.z * heightDifference;\n  }\n\n  return result;\n};\n\nTerrainEncoding.prototype.decodeTextureCoordinates = function (\n  buffer,\n  index,\n  result\n) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  index *= this.stride;\n\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12) {\n    return _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].decompressTextureCoordinates */ .Z.decompressTextureCoordinates(\n      buffer[index + 2],\n      result\n    );\n  }\n\n  return _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(buffer[index + 4], buffer[index + 5], result);\n};\n\nTerrainEncoding.prototype.decodeHeight = function (buffer, index) {\n  index *= this.stride;\n\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12) {\n    var zh = _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].decompressTextureCoordinates */ .Z.decompressTextureCoordinates(\n      buffer[index + 1],\n      cartesian2Scratch\n    );\n    return (\n      zh.y * (this.maximumHeight - this.minimumHeight) + this.minimumHeight\n    );\n  }\n\n  return buffer[index + 3];\n};\n\nTerrainEncoding.prototype.decodeWebMercatorT = function (buffer, index) {\n  index *= this.stride;\n\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12) {\n    return _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].decompressTextureCoordinates */ .Z.decompressTextureCoordinates(\n      buffer[index + 3],\n      cartesian2Scratch\n    ).x;\n  }\n\n  return buffer[index + 6];\n};\n\nTerrainEncoding.prototype.getOctEncodedNormal = function (\n  buffer,\n  index,\n  result\n) {\n  index = index * this.stride + this._offsetVertexNormal;\n\n  var temp = buffer[index] / 256.0;\n  var x = Math.floor(temp);\n  var y = (temp - x) * 256.0;\n\n  return _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(x, y, result);\n};\n\nTerrainEncoding.prototype.decodeGeodeticSurfaceNormal = function (\n  buffer,\n  index,\n  result\n) {\n  index = index * this.stride + this._offsetGeodeticSurfaceNormal;\n\n  result.x = buffer[index];\n  result.y = buffer[index + 1];\n  result.z = buffer[index + 2];\n  return result;\n};\n\nTerrainEncoding.prototype._calculateStrideAndOffsets = function () {\n  var vertexStride = 0;\n\n  switch (this.quantization) {\n    case _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BITS12 */ .Z.BITS12:\n      vertexStride += 3;\n      break;\n    default:\n      vertexStride += 6;\n  }\n  if (this.hasWebMercatorT) {\n    vertexStride += 1;\n  }\n  if (this.hasVertexNormals) {\n    this._offsetVertexNormal = vertexStride;\n    vertexStride += 1;\n  }\n  if (this.hasGeodeticSurfaceNormals) {\n    this._offsetGeodeticSurfaceNormal = vertexStride;\n    vertexStride += 3;\n  }\n\n  this.stride = vertexStride;\n};\n\nvar attributesIndicesNone = {\n  position3DAndHeight: 0,\n  textureCoordAndEncodedNormals: 1,\n  geodeticSurfaceNormal: 2,\n};\nvar attributesIndicesBits12 = {\n  compressed0: 0,\n  compressed1: 1,\n  geodeticSurfaceNormal: 2,\n};\n\nTerrainEncoding.prototype.getAttributes = function (buffer) {\n  var datatype = _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT;\n  var sizeInBytes = _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].getSizeInBytes */ .Z.getSizeInBytes(datatype);\n  var strideInBytes = this.stride * sizeInBytes;\n  var offsetInBytes = 0;\n\n  var attributes = [];\n  function addAttribute(index, componentsPerAttribute) {\n    attributes.push({\n      index: index,\n      vertexBuffer: buffer,\n      componentDatatype: datatype,\n      componentsPerAttribute: componentsPerAttribute,\n      offsetInBytes: offsetInBytes,\n      strideInBytes: strideInBytes,\n    });\n    offsetInBytes += componentsPerAttribute * sizeInBytes;\n  }\n\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NONE */ .Z.NONE) {\n    addAttribute(attributesIndicesNone.position3DAndHeight, 4);\n\n    var componentsTexCoordAndNormals = 2;\n    componentsTexCoordAndNormals += this.hasWebMercatorT ? 1 : 0;\n    componentsTexCoordAndNormals += this.hasVertexNormals ? 1 : 0;\n    addAttribute(\n      attributesIndicesNone.textureCoordAndEncodedNormals,\n      componentsTexCoordAndNormals\n    );\n\n    if (this.hasGeodeticSurfaceNormals) {\n      addAttribute(attributesIndicesNone.geodeticSurfaceNormal, 3);\n    }\n  } else {\n    // When there is no webMercatorT or vertex normals, the attribute only needs 3 components: x/y, z/h, u/v.\n    // WebMercatorT and vertex normals each take up one component, so if only one of them is present the first\n    // attribute gets a 4th component. If both are present, we need an additional attribute that has 1 component.\n    var usingAttribute0Component4 =\n      this.hasWebMercatorT || this.hasVertexNormals;\n    var usingAttribute1Component1 =\n      this.hasWebMercatorT && this.hasVertexNormals;\n    addAttribute(\n      attributesIndicesBits12.compressed0,\n      usingAttribute0Component4 ? 4 : 3\n    );\n\n    if (usingAttribute1Component1) {\n      addAttribute(attributesIndicesBits12.compressed1, 1);\n    }\n\n    if (this.hasGeodeticSurfaceNormals) {\n      addAttribute(attributesIndicesBits12.geodeticSurfaceNormal, 3);\n    }\n  }\n\n  return attributes;\n};\n\nTerrainEncoding.prototype.getAttributeLocations = function () {\n  if (this.quantization === _TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NONE */ .Z.NONE) {\n    return attributesIndicesNone;\n  }\n  return attributesIndicesBits12;\n};\n\nTerrainEncoding.clone = function (encoding, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(encoding)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(result)) {\n    result = new TerrainEncoding();\n  }\n\n  result.quantization = encoding.quantization;\n  result.minimumHeight = encoding.minimumHeight;\n  result.maximumHeight = encoding.maximumHeight;\n  result.center = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(encoding.center);\n  result.toScaledENU = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(encoding.toScaledENU);\n  result.fromScaledENU = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(encoding.fromScaledENU);\n  result.matrix = _Matrix4_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(encoding.matrix);\n  result.hasVertexNormals = encoding.hasVertexNormals;\n  result.hasWebMercatorT = encoding.hasWebMercatorT;\n  result.hasGeodeticSurfaceNormals = encoding.hasGeodeticSurfaceNormals;\n  result.exaggeration = encoding.exaggeration;\n  result.exaggerationRelativeHeight = encoding.exaggerationRelativeHeight;\n\n  result._calculateStrideAndOffsets();\n\n  return result;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (TerrainEncoding);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41782\n')},78257:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n\n\n/**\n * @private\n */\nvar TerrainExaggeration = {};\n\n/**\n * Scales a height relative to an offset.\n *\n * @param {Number} height The height.\n * @param {Number} scale A scalar used to exaggerate the terrain. If the value is 1.0 there will be no effect.\n * @param {Number} relativeHeight The height relative to which terrain is exaggerated. If the value is 0.0 terrain will be exaggerated relative to the ellipsoid surface.\n */\nTerrainExaggeration.getHeight = function (height, scale, relativeHeight) {\n  return (height - relativeHeight) * scale + relativeHeight;\n};\n\nvar scratchCartographic = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n/**\n * Scales a position by exaggeration.\n */\nTerrainExaggeration.getPosition = function (\n  position,\n  ellipsoid,\n  terrainExaggeration,\n  terrainExaggerationRelativeHeight,\n  result\n) {\n  var cartographic = ellipsoid.cartesianToCartographic(\n    position,\n    scratchCartographic\n  );\n  var newHeight = TerrainExaggeration.getHeight(\n    cartographic.height,\n    terrainExaggeration,\n    terrainExaggerationRelativeHeight\n  );\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRadians */ .Z.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    newHeight,\n    ellipsoid,\n    result\n  );\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (TerrainExaggeration);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzgyNTcuanMiLCJtYXBwaW5ncyI6IjtBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCLCtEQUFVOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsdUZBQXNCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlEQUFlLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL0NvcmUvVGVycmFpbkV4YWdnZXJhdGlvbi5qcz82NmZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYXJ0ZXNpYW4zIGZyb20gXCIuL0NhcnRlc2lhbjMuanNcIjtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgVGVycmFpbkV4YWdnZXJhdGlvbiA9IHt9O1xuXG4vKipcbiAqIFNjYWxlcyBhIGhlaWdodCByZWxhdGl2ZSB0byBhbiBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0LlxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIEEgc2NhbGFyIHVzZWQgdG8gZXhhZ2dlcmF0ZSB0aGUgdGVycmFpbi4gSWYgdGhlIHZhbHVlIGlzIDEuMCB0aGVyZSB3aWxsIGJlIG5vIGVmZmVjdC5cbiAqIEBwYXJhbSB7TnVtYmVyfSByZWxhdGl2ZUhlaWdodCBUaGUgaGVpZ2h0IHJlbGF0aXZlIHRvIHdoaWNoIHRlcnJhaW4gaXMgZXhhZ2dlcmF0ZWQuIElmIHRoZSB2YWx1ZSBpcyAwLjAgdGVycmFpbiB3aWxsIGJlIGV4YWdnZXJhdGVkIHJlbGF0aXZlIHRvIHRoZSBlbGxpcHNvaWQgc3VyZmFjZS5cbiAqL1xuVGVycmFpbkV4YWdnZXJhdGlvbi5nZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0LCBzY2FsZSwgcmVsYXRpdmVIZWlnaHQpIHtcbiAgcmV0dXJuIChoZWlnaHQgLSByZWxhdGl2ZUhlaWdodCkgKiBzY2FsZSArIHJlbGF0aXZlSGVpZ2h0O1xufTtcblxudmFyIHNjcmF0Y2hDYXJ0b2dyYXBoaWMgPSBuZXcgQ2FydGVzaWFuMygpO1xuXG4vKipcbiAqIFNjYWxlcyBhIHBvc2l0aW9uIGJ5IGV4YWdnZXJhdGlvbi5cbiAqL1xuVGVycmFpbkV4YWdnZXJhdGlvbi5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChcbiAgcG9zaXRpb24sXG4gIGVsbGlwc29pZCxcbiAgdGVycmFpbkV4YWdnZXJhdGlvbixcbiAgdGVycmFpbkV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0LFxuICByZXN1bHRcbikge1xuICB2YXIgY2FydG9ncmFwaGljID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKFxuICAgIHBvc2l0aW9uLFxuICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNcbiAgKTtcbiAgdmFyIG5ld0hlaWdodCA9IFRlcnJhaW5FeGFnZ2VyYXRpb24uZ2V0SGVpZ2h0KFxuICAgIGNhcnRvZ3JhcGhpYy5oZWlnaHQsXG4gICAgdGVycmFpbkV4YWdnZXJhdGlvbixcbiAgICB0ZXJyYWluRXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHRcbiAgKTtcbiAgcmV0dXJuIENhcnRlc2lhbjMuZnJvbVJhZGlhbnMoXG4gICAgY2FydG9ncmFwaGljLmxvbmdpdHVkZSxcbiAgICBjYXJ0b2dyYXBoaWMubGF0aXR1ZGUsXG4gICAgbmV3SGVpZ2h0LFxuICAgIGVsbGlwc29pZCxcbiAgICByZXN1bHRcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRlcnJhaW5FeGFnZ2VyYXRpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///78257\n')},13758:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n\n\n/**\n * A mesh plus related metadata for a single tile of terrain.  Instances of this type are\n * usually created from raw {@link TerrainData}.\n *\n * @alias TerrainMesh\n * @constructor\n *\n * @param {Cartesian3} center The center of the tile.  Vertex positions are specified relative to this center.\n * @param {Float32Array} vertices The vertex data, including positions, texture coordinates, and heights.\n *                       The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent\n *                       the Cartesian position of the vertex, H is the height above the ellipsoid, and\n *                       U and V are the texture coordinates.\n * @param {Uint8Array|Uint16Array|Uint32Array} indices The indices describing how the vertices are connected to form triangles.\n * @param {Number} indexCountWithoutSkirts The index count of the mesh not including skirts.\n * @param {Number} vertexCountWithoutSkirts The vertex count of the mesh not including skirts.\n * @param {Number} minimumHeight The lowest height in the tile, in meters above the ellipsoid.\n * @param {Number} maximumHeight The highest height in the tile, in meters above the ellipsoid.\n * @param {BoundingSphere} boundingSphere3D A bounding sphere that completely contains the tile.\n * @param {Cartesian3} occludeePointInScaledSpace The occludee point of the tile, represented in ellipsoid-\n *                     scaled space, and used for horizon culling.  If this point is below the horizon,\n *                     the tile is considered to be entirely below the horizon.\n * @param {Number} [vertexStride=6] The number of components in each vertex.\n * @param {OrientedBoundingBox} [orientedBoundingBox] A bounding box that completely contains the tile.\n * @param {TerrainEncoding} encoding Information used to decode the mesh.\n * @param {Number[]} westIndicesSouthToNorth The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).\n * @param {Number[]} southIndicesEastToWest The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).\n * @param {Number[]} eastIndicesNorthToSouth The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).\n * @param {Number[]} northIndicesWestToEast The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).\n *\n * @private\n */\nfunction TerrainMesh(\n  center,\n  vertices,\n  indices,\n  indexCountWithoutSkirts,\n  vertexCountWithoutSkirts,\n  minimumHeight,\n  maximumHeight,\n  boundingSphere3D,\n  occludeePointInScaledSpace,\n  vertexStride,\n  orientedBoundingBox,\n  encoding,\n  westIndicesSouthToNorth,\n  southIndicesEastToWest,\n  eastIndicesNorthToSouth,\n  northIndicesWestToEast\n) {\n  /**\n   * The center of the tile.  Vertex positions are specified relative to this center.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n\n  /**\n   * The vertex data, including positions, texture coordinates, and heights.\n   * The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent\n   * the Cartesian position of the vertex, H is the height above the ellipsoid, and\n   * U and V are the texture coordinates.  The vertex data may have additional attributes after those\n   * mentioned above when the {@link TerrainMesh#stride} is greater than 6.\n   * @type {Float32Array}\n   */\n  this.vertices = vertices;\n\n  /**\n   * The number of components in each vertex.  Typically this is 6 for the 6 components\n   * [X, Y, Z, H, U, V], but if each vertex has additional data (such as a vertex normal), this value\n   * may be higher.\n   * @type {Number}\n   */\n  this.stride = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(vertexStride, 6);\n\n  /**\n   * The indices describing how the vertices are connected to form triangles.\n   * @type {Uint8Array|Uint16Array|Uint32Array}\n   */\n  this.indices = indices;\n\n  /**\n   * The index count of the mesh not including skirts.\n   * @type {Number}\n   */\n  this.indexCountWithoutSkirts = indexCountWithoutSkirts;\n\n  /**\n   * The vertex count of the mesh not including skirts.\n   * @type {Number}\n   */\n  this.vertexCountWithoutSkirts = vertexCountWithoutSkirts;\n\n  /**\n   * The lowest height in the tile, in meters above the ellipsoid.\n   * @type {Number}\n   */\n  this.minimumHeight = minimumHeight;\n\n  /**\n   * The highest height in the tile, in meters above the ellipsoid.\n   * @type {Number}\n   */\n  this.maximumHeight = maximumHeight;\n\n  /**\n   * A bounding sphere that completely contains the tile.\n   * @type {BoundingSphere}\n   */\n  this.boundingSphere3D = boundingSphere3D;\n\n  /**\n   * The occludee point of the tile, represented in ellipsoid-\n   * scaled space, and used for horizon culling.  If this point is below the horizon,\n   * the tile is considered to be entirely below the horizon.\n   * @type {Cartesian3}\n   */\n  this.occludeePointInScaledSpace = occludeePointInScaledSpace;\n\n  /**\n   * A bounding box that completely contains the tile.\n   * @type {OrientedBoundingBox}\n   */\n  this.orientedBoundingBox = orientedBoundingBox;\n\n  /**\n   * Information for decoding the mesh vertices.\n   * @type {TerrainEncoding}\n   */\n  this.encoding = encoding;\n\n  /**\n   * The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).\n   * @type {Number[]}\n   */\n  this.westIndicesSouthToNorth = westIndicesSouthToNorth;\n\n  /**\n   * The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).\n   * @type {Number[]}\n   */\n  this.southIndicesEastToWest = southIndicesEastToWest;\n\n  /**\n   * The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).\n   * @type {Number[]}\n   */\n  this.eastIndicesNorthToSouth = eastIndicesNorthToSouth;\n\n  /**\n   * The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).\n   * @type {Number[]}\n   */\n  this.northIndicesWestToEast = northIndicesWestToEast;\n}\n/* harmony default export */ __webpack_exports__["Z"] = (TerrainMesh);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3NTguanMiLCJtYXBwaW5ncyI6IjtBQUE2Qzs7QUFFN0M7QUFDQTtBQUNBLDZCQUE2QixrQkFBa0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0NBQW9DO0FBQy9DLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdCQUFnQjtBQUMzQixXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLGlCQUFpQjtBQUM1QixXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMEJBQTBCO0FBQ3pELFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsZ0JBQWdCLHFFQUFZOztBQUU1QjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSx5REFBZSxXQUFXLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9UZXJyYWluTWVzaC5qcz8yMGY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4vZGVmYXVsdFZhbHVlLmpzXCI7XG5cbi8qKlxuICogQSBtZXNoIHBsdXMgcmVsYXRlZCBtZXRhZGF0YSBmb3IgYSBzaW5nbGUgdGlsZSBvZiB0ZXJyYWluLiAgSW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBhcmVcbiAqIHVzdWFsbHkgY3JlYXRlZCBmcm9tIHJhdyB7QGxpbmsgVGVycmFpbkRhdGF9LlxuICpcbiAqIEBhbGlhcyBUZXJyYWluTWVzaFxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtDYXJ0ZXNpYW4zfSBjZW50ZXIgVGhlIGNlbnRlciBvZiB0aGUgdGlsZS4gIFZlcnRleCBwb3NpdGlvbnMgYXJlIHNwZWNpZmllZCByZWxhdGl2ZSB0byB0aGlzIGNlbnRlci5cbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSB2ZXJ0aWNlcyBUaGUgdmVydGV4IGRhdGEsIGluY2x1ZGluZyBwb3NpdGlvbnMsIHRleHR1cmUgY29vcmRpbmF0ZXMsIGFuZCBoZWlnaHRzLlxuICogICAgICAgICAgICAgICAgICAgICAgIFRoZSB2ZXJ0ZXggZGF0YSBpcyBpbiB0aGUgb3JkZXIgW1gsIFksIFosIEgsIFUsIFZdLCB3aGVyZSBYLCBZLCBhbmQgWiByZXByZXNlbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICB0aGUgQ2FydGVzaWFuIHBvc2l0aW9uIG9mIHRoZSB2ZXJ0ZXgsIEggaXMgdGhlIGhlaWdodCBhYm92ZSB0aGUgZWxsaXBzb2lkLCBhbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICBVIGFuZCBWIGFyZSB0aGUgdGV4dHVyZSBjb29yZGluYXRlcy5cbiAqIEBwYXJhbSB7VWludDhBcnJheXxVaW50MTZBcnJheXxVaW50MzJBcnJheX0gaW5kaWNlcyBUaGUgaW5kaWNlcyBkZXNjcmliaW5nIGhvdyB0aGUgdmVydGljZXMgYXJlIGNvbm5lY3RlZCB0byBmb3JtIHRyaWFuZ2xlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleENvdW50V2l0aG91dFNraXJ0cyBUaGUgaW5kZXggY291bnQgb2YgdGhlIG1lc2ggbm90IGluY2x1ZGluZyBza2lydHMuXG4gKiBAcGFyYW0ge051bWJlcn0gdmVydGV4Q291bnRXaXRob3V0U2tpcnRzIFRoZSB2ZXJ0ZXggY291bnQgb2YgdGhlIG1lc2ggbm90IGluY2x1ZGluZyBza2lydHMuXG4gKiBAcGFyYW0ge051bWJlcn0gbWluaW11bUhlaWdodCBUaGUgbG93ZXN0IGhlaWdodCBpbiB0aGUgdGlsZSwgaW4gbWV0ZXJzIGFib3ZlIHRoZSBlbGxpcHNvaWQuXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4aW11bUhlaWdodCBUaGUgaGlnaGVzdCBoZWlnaHQgaW4gdGhlIHRpbGUsIGluIG1ldGVycyBhYm92ZSB0aGUgZWxsaXBzb2lkLlxuICogQHBhcmFtIHtCb3VuZGluZ1NwaGVyZX0gYm91bmRpbmdTcGhlcmUzRCBBIGJvdW5kaW5nIHNwaGVyZSB0aGF0IGNvbXBsZXRlbHkgY29udGFpbnMgdGhlIHRpbGUuXG4gKiBAcGFyYW0ge0NhcnRlc2lhbjN9IG9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlIFRoZSBvY2NsdWRlZSBwb2ludCBvZiB0aGUgdGlsZSwgcmVwcmVzZW50ZWQgaW4gZWxsaXBzb2lkLVxuICogICAgICAgICAgICAgICAgICAgICBzY2FsZWQgc3BhY2UsIGFuZCB1c2VkIGZvciBob3Jpem9uIGN1bGxpbmcuICBJZiB0aGlzIHBvaW50IGlzIGJlbG93IHRoZSBob3Jpem9uLFxuICogICAgICAgICAgICAgICAgICAgICB0aGUgdGlsZSBpcyBjb25zaWRlcmVkIHRvIGJlIGVudGlyZWx5IGJlbG93IHRoZSBob3Jpem9uLlxuICogQHBhcmFtIHtOdW1iZXJ9IFt2ZXJ0ZXhTdHJpZGU9Nl0gVGhlIG51bWJlciBvZiBjb21wb25lbnRzIGluIGVhY2ggdmVydGV4LlxuICogQHBhcmFtIHtPcmllbnRlZEJvdW5kaW5nQm94fSBbb3JpZW50ZWRCb3VuZGluZ0JveF0gQSBib3VuZGluZyBib3ggdGhhdCBjb21wbGV0ZWx5IGNvbnRhaW5zIHRoZSB0aWxlLlxuICogQHBhcmFtIHtUZXJyYWluRW5jb2Rpbmd9IGVuY29kaW5nIEluZm9ybWF0aW9uIHVzZWQgdG8gZGVjb2RlIHRoZSBtZXNoLlxuICogQHBhcmFtIHtOdW1iZXJbXX0gd2VzdEluZGljZXNTb3V0aFRvTm9ydGggVGhlIGluZGljZXMgb2YgdGhlIHZlcnRpY2VzIG9uIHRoZSBXZXN0ZXJuIGVkZ2Ugb2YgdGhlIHRpbGUsIG9yZGVyZWQgZnJvbSBTb3V0aCB0byBOb3J0aCAoY2xvY2t3aXNlKS5cbiAqIEBwYXJhbSB7TnVtYmVyW119IHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QgVGhlIGluZGljZXMgb2YgdGhlIHZlcnRpY2VzIG9uIHRoZSBTb3V0aGVybiBlZGdlIG9mIHRoZSB0aWxlLCBvcmRlcmVkIGZyb20gRWFzdCB0byBXZXN0IChjbG9ja3dpc2UpLlxuICogQHBhcmFtIHtOdW1iZXJbXX0gZWFzdEluZGljZXNOb3J0aFRvU291dGggVGhlIGluZGljZXMgb2YgdGhlIHZlcnRpY2VzIG9uIHRoZSBFYXN0ZXJuIGVkZ2Ugb2YgdGhlIHRpbGUsIG9yZGVyZWQgZnJvbSBOb3J0aCB0byBTb3V0aCAoY2xvY2t3aXNlKS5cbiAqIEBwYXJhbSB7TnVtYmVyW119IG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QgVGhlIGluZGljZXMgb2YgdGhlIHZlcnRpY2VzIG9uIHRoZSBOb3J0aGVybiBlZGdlIG9mIHRoZSB0aWxlLCBvcmRlcmVkIGZyb20gV2VzdCB0byBFYXN0IChjbG9ja3dpc2UpLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFRlcnJhaW5NZXNoKFxuICBjZW50ZXIsXG4gIHZlcnRpY2VzLFxuICBpbmRpY2VzLFxuICBpbmRleENvdW50V2l0aG91dFNraXJ0cyxcbiAgdmVydGV4Q291bnRXaXRob3V0U2tpcnRzLFxuICBtaW5pbXVtSGVpZ2h0LFxuICBtYXhpbXVtSGVpZ2h0LFxuICBib3VuZGluZ1NwaGVyZTNELFxuICBvY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZSxcbiAgdmVydGV4U3RyaWRlLFxuICBvcmllbnRlZEJvdW5kaW5nQm94LFxuICBlbmNvZGluZyxcbiAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGgsXG4gIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsXG4gIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLFxuICBub3J0aEluZGljZXNXZXN0VG9FYXN0XG4pIHtcbiAgLyoqXG4gICAqIFRoZSBjZW50ZXIgb2YgdGhlIHRpbGUuICBWZXJ0ZXggcG9zaXRpb25zIGFyZSBzcGVjaWZpZWQgcmVsYXRpdmUgdG8gdGhpcyBjZW50ZXIuXG4gICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfVxuICAgKi9cbiAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJ0ZXggZGF0YSwgaW5jbHVkaW5nIHBvc2l0aW9ucywgdGV4dHVyZSBjb29yZGluYXRlcywgYW5kIGhlaWdodHMuXG4gICAqIFRoZSB2ZXJ0ZXggZGF0YSBpcyBpbiB0aGUgb3JkZXIgW1gsIFksIFosIEgsIFUsIFZdLCB3aGVyZSBYLCBZLCBhbmQgWiByZXByZXNlbnRcbiAgICogdGhlIENhcnRlc2lhbiBwb3NpdGlvbiBvZiB0aGUgdmVydGV4LCBIIGlzIHRoZSBoZWlnaHQgYWJvdmUgdGhlIGVsbGlwc29pZCwgYW5kXG4gICAqIFUgYW5kIFYgYXJlIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLiAgVGhlIHZlcnRleCBkYXRhIG1heSBoYXZlIGFkZGl0aW9uYWwgYXR0cmlidXRlcyBhZnRlciB0aG9zZVxuICAgKiBtZW50aW9uZWQgYWJvdmUgd2hlbiB0aGUge0BsaW5rIFRlcnJhaW5NZXNoI3N0cmlkZX0gaXMgZ3JlYXRlciB0aGFuIDYuXG4gICAqIEB0eXBlIHtGbG9hdDMyQXJyYXl9XG4gICAqL1xuICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXM7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29tcG9uZW50cyBpbiBlYWNoIHZlcnRleC4gIFR5cGljYWxseSB0aGlzIGlzIDYgZm9yIHRoZSA2IGNvbXBvbmVudHNcbiAgICogW1gsIFksIFosIEgsIFUsIFZdLCBidXQgaWYgZWFjaCB2ZXJ0ZXggaGFzIGFkZGl0aW9uYWwgZGF0YSAoc3VjaCBhcyBhIHZlcnRleCBub3JtYWwpLCB0aGlzIHZhbHVlXG4gICAqIG1heSBiZSBoaWdoZXIuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLnN0cmlkZSA9IGRlZmF1bHRWYWx1ZSh2ZXJ0ZXhTdHJpZGUsIDYpO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kaWNlcyBkZXNjcmliaW5nIGhvdyB0aGUgdmVydGljZXMgYXJlIGNvbm5lY3RlZCB0byBmb3JtIHRyaWFuZ2xlcy5cbiAgICogQHR5cGUge1VpbnQ4QXJyYXl8VWludDE2QXJyYXl8VWludDMyQXJyYXl9XG4gICAqL1xuICB0aGlzLmluZGljZXMgPSBpbmRpY2VzO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggY291bnQgb2YgdGhlIG1lc2ggbm90IGluY2x1ZGluZyBza2lydHMuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLmluZGV4Q291bnRXaXRob3V0U2tpcnRzID0gaW5kZXhDb3VudFdpdGhvdXRTa2lydHM7XG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJ0ZXggY291bnQgb2YgdGhlIG1lc2ggbm90IGluY2x1ZGluZyBza2lydHMuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLnZlcnRleENvdW50V2l0aG91dFNraXJ0cyA9IHZlcnRleENvdW50V2l0aG91dFNraXJ0cztcblxuICAvKipcbiAgICogVGhlIGxvd2VzdCBoZWlnaHQgaW4gdGhlIHRpbGUsIGluIG1ldGVycyBhYm92ZSB0aGUgZWxsaXBzb2lkLlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgdGhpcy5taW5pbXVtSGVpZ2h0ID0gbWluaW11bUhlaWdodDtcblxuICAvKipcbiAgICogVGhlIGhpZ2hlc3QgaGVpZ2h0IGluIHRoZSB0aWxlLCBpbiBtZXRlcnMgYWJvdmUgdGhlIGVsbGlwc29pZC5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHRoaXMubWF4aW11bUhlaWdodCA9IG1heGltdW1IZWlnaHQ7XG5cbiAgLyoqXG4gICAqIEEgYm91bmRpbmcgc3BoZXJlIHRoYXQgY29tcGxldGVseSBjb250YWlucyB0aGUgdGlsZS5cbiAgICogQHR5cGUge0JvdW5kaW5nU3BoZXJlfVxuICAgKi9cbiAgdGhpcy5ib3VuZGluZ1NwaGVyZTNEID0gYm91bmRpbmdTcGhlcmUzRDtcblxuICAvKipcbiAgICogVGhlIG9jY2x1ZGVlIHBvaW50IG9mIHRoZSB0aWxlLCByZXByZXNlbnRlZCBpbiBlbGxpcHNvaWQtXG4gICAqIHNjYWxlZCBzcGFjZSwgYW5kIHVzZWQgZm9yIGhvcml6b24gY3VsbGluZy4gIElmIHRoaXMgcG9pbnQgaXMgYmVsb3cgdGhlIGhvcml6b24sXG4gICAqIHRoZSB0aWxlIGlzIGNvbnNpZGVyZWQgdG8gYmUgZW50aXJlbHkgYmVsb3cgdGhlIGhvcml6b24uXG4gICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfVxuICAgKi9cbiAgdGhpcy5vY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZSA9IG9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlO1xuXG4gIC8qKlxuICAgKiBBIGJvdW5kaW5nIGJveCB0aGF0IGNvbXBsZXRlbHkgY29udGFpbnMgdGhlIHRpbGUuXG4gICAqIEB0eXBlIHtPcmllbnRlZEJvdW5kaW5nQm94fVxuICAgKi9cbiAgdGhpcy5vcmllbnRlZEJvdW5kaW5nQm94ID0gb3JpZW50ZWRCb3VuZGluZ0JveDtcblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gZm9yIGRlY29kaW5nIHRoZSBtZXNoIHZlcnRpY2VzLlxuICAgKiBAdHlwZSB7VGVycmFpbkVuY29kaW5nfVxuICAgKi9cbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kaWNlcyBvZiB0aGUgdmVydGljZXMgb24gdGhlIFdlc3Rlcm4gZWRnZSBvZiB0aGUgdGlsZSwgb3JkZXJlZCBmcm9tIFNvdXRoIHRvIE5vcnRoIChjbG9ja3dpc2UpLlxuICAgKiBAdHlwZSB7TnVtYmVyW119XG4gICAqL1xuICB0aGlzLndlc3RJbmRpY2VzU291dGhUb05vcnRoID0gd2VzdEluZGljZXNTb3V0aFRvTm9ydGg7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRpY2VzIG9mIHRoZSB2ZXJ0aWNlcyBvbiB0aGUgU291dGhlcm4gZWRnZSBvZiB0aGUgdGlsZSwgb3JkZXJlZCBmcm9tIEVhc3QgdG8gV2VzdCAoY2xvY2t3aXNlKS5cbiAgICogQHR5cGUge051bWJlcltdfVxuICAgKi9cbiAgdGhpcy5zb3V0aEluZGljZXNFYXN0VG9XZXN0ID0gc291dGhJbmRpY2VzRWFzdFRvV2VzdDtcblxuICAvKipcbiAgICogVGhlIGluZGljZXMgb2YgdGhlIHZlcnRpY2VzIG9uIHRoZSBFYXN0ZXJuIGVkZ2Ugb2YgdGhlIHRpbGUsIG9yZGVyZWQgZnJvbSBOb3J0aCB0byBTb3V0aCAoY2xvY2t3aXNlKS5cbiAgICogQHR5cGUge051bWJlcltdfVxuICAgKi9cbiAgdGhpcy5lYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCA9IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kaWNlcyBvZiB0aGUgdmVydGljZXMgb24gdGhlIE5vcnRoZXJuIGVkZ2Ugb2YgdGhlIHRpbGUsIG9yZGVyZWQgZnJvbSBXZXN0IHRvIEVhc3QgKGNsb2Nrd2lzZSkuXG4gICAqIEB0eXBlIHtOdW1iZXJbXX1cbiAgICovXG4gIHRoaXMubm9ydGhJbmRpY2VzV2VzdFRvRWFzdCA9IG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3Q7XG59XG5leHBvcnQgZGVmYXVsdCBUZXJyYWluTWVzaDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13758\n')},1497:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22832);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99417);\n\n\n\n\n\n/**\n * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\n * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias TerrainProvider\n * @constructor\n *\n * @see EllipsoidTerrainProvider\n * @see CesiumTerrainProvider\n * @see VRTheWorldTerrainProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n */\nfunction TerrainProvider() {\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n}\n\nObject.defineProperties(TerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof TerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain. This function should\n   * not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof TerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof TerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n});\n\nvar regularGridIndicesCache = [];\n\n/**\n * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\n * this function multiple times with the same grid width and height returns the\n * same list of indices.  The total number of vertices must be less than or equal\n * to 65536.\n *\n * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\n * @param {Number} height The number of vertices in the regular grid in the vertical direction.\n * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\n */\nTerrainProvider.getRegularGridIndices = function (width, height) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (width * height >= _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FOUR_GIGABYTES */ .Z.FOUR_GIGABYTES) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "The total number of vertices (width * height) must be less than 4,294,967,296."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var byWidth = regularGridIndicesCache[width];\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(byWidth)) {\n    regularGridIndicesCache[width] = byWidth = [];\n  }\n\n  var indices = byWidth[height];\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(indices)) {\n    if (width * height < _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SIXTY_FOUR_KILOBYTES */ .Z.SIXTY_FOUR_KILOBYTES) {\n      indices = byWidth[height] = new Uint16Array(\n        (width - 1) * (height - 1) * 6\n      );\n    } else {\n      indices = byWidth[height] = new Uint32Array(\n        (width - 1) * (height - 1) * 6\n      );\n    }\n    addRegularGridIndices(width, height, indices, 0);\n  }\n\n  return indices;\n};\n\nvar regularGridAndEdgeIndicesCache = [];\n\n/**\n * @private\n */\nTerrainProvider.getRegularGridIndicesAndEdgeIndices = function (width, height) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (width * height >= _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FOUR_GIGABYTES */ .Z.FOUR_GIGABYTES) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "The total number of vertices (width * height) must be less than 4,294,967,296."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var byWidth = regularGridAndEdgeIndicesCache[width];\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(byWidth)) {\n    regularGridAndEdgeIndicesCache[width] = byWidth = [];\n  }\n\n  var indicesAndEdges = byWidth[height];\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(indicesAndEdges)) {\n    var indices = TerrainProvider.getRegularGridIndices(width, height);\n\n    var edgeIndices = getEdgeIndices(width, height);\n    var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n    var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n    var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n    var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n    indicesAndEdges = byWidth[height] = {\n      indices: indices,\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\n      southIndicesEastToWest: southIndicesEastToWest,\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n      northIndicesWestToEast: northIndicesWestToEast,\n    };\n  }\n\n  return indicesAndEdges;\n};\n\nvar regularGridAndSkirtAndEdgeIndicesCache = [];\n\n/**\n * @private\n */\nTerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function (\n  width,\n  height\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (width * height >= _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FOUR_GIGABYTES */ .Z.FOUR_GIGABYTES) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "The total number of vertices (width * height) must be less than 4,294,967,296."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(byWidth)) {\n    regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\n  }\n\n  var indicesAndEdges = byWidth[height];\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(indicesAndEdges)) {\n    var gridVertexCount = width * height;\n    var gridIndexCount = (width - 1) * (height - 1) * 6;\n    var edgeVertexCount = width * 2 + height * 2;\n    var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\n    var vertexCount = gridVertexCount + edgeVertexCount;\n    var indexCount = gridIndexCount + edgeIndexCount;\n\n    var edgeIndices = getEdgeIndices(width, height);\n    var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n    var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n    var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n    var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n    var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].createTypedArray */ .Z.createTypedArray(vertexCount, indexCount);\n    addRegularGridIndices(width, height, indices, 0);\n    TerrainProvider.addSkirtIndices(\n      westIndicesSouthToNorth,\n      southIndicesEastToWest,\n      eastIndicesNorthToSouth,\n      northIndicesWestToEast,\n      gridVertexCount,\n      indices,\n      gridIndexCount\n    );\n\n    indicesAndEdges = byWidth[height] = {\n      indices: indices,\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\n      southIndicesEastToWest: southIndicesEastToWest,\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n      northIndicesWestToEast: northIndicesWestToEast,\n      indexCountWithoutSkirts: gridIndexCount,\n    };\n  }\n\n  return indicesAndEdges;\n};\n\n/**\n * @private\n */\nTerrainProvider.addSkirtIndices = function (\n  westIndicesSouthToNorth,\n  southIndicesEastToWest,\n  eastIndicesNorthToSouth,\n  northIndicesWestToEast,\n  vertexCount,\n  indices,\n  offset\n) {\n  var vertexIndex = vertexCount;\n  offset = addSkirtIndices(\n    westIndicesSouthToNorth,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += westIndicesSouthToNorth.length;\n  offset = addSkirtIndices(\n    southIndicesEastToWest,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += southIndicesEastToWest.length;\n  offset = addSkirtIndices(\n    eastIndicesNorthToSouth,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += eastIndicesNorthToSouth.length;\n  addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\n};\n\nfunction getEdgeIndices(width, height) {\n  var westIndicesSouthToNorth = new Array(height);\n  var southIndicesEastToWest = new Array(width);\n  var eastIndicesNorthToSouth = new Array(height);\n  var northIndicesWestToEast = new Array(width);\n\n  var i;\n  for (i = 0; i < width; ++i) {\n    northIndicesWestToEast[i] = i;\n    southIndicesEastToWest[i] = width * height - 1 - i;\n  }\n\n  for (i = 0; i < height; ++i) {\n    eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\n    westIndicesSouthToNorth[i] = (height - i - 1) * width;\n  }\n\n  return {\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\n    southIndicesEastToWest: southIndicesEastToWest,\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n    northIndicesWestToEast: northIndicesWestToEast,\n  };\n}\n\nfunction addRegularGridIndices(width, height, indices, offset) {\n  var index = 0;\n  for (var j = 0; j < height - 1; ++j) {\n    for (var i = 0; i < width - 1; ++i) {\n      var upperLeft = index;\n      var lowerLeft = upperLeft + width;\n      var lowerRight = lowerLeft + 1;\n      var upperRight = upperLeft + 1;\n\n      indices[offset++] = upperLeft;\n      indices[offset++] = lowerLeft;\n      indices[offset++] = upperRight;\n      indices[offset++] = upperRight;\n      indices[offset++] = lowerLeft;\n      indices[offset++] = lowerRight;\n\n      ++index;\n    }\n    ++index;\n  }\n}\n\nfunction addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\n  var previousIndex = edgeIndices[0];\n\n  var length = edgeIndices.length;\n  for (var i = 1; i < length; ++i) {\n    var index = edgeIndices[i];\n\n    indices[offset++] = previousIndex;\n    indices[offset++] = index;\n    indices[offset++] = vertexIndex;\n\n    indices[offset++] = vertexIndex;\n    indices[offset++] = index;\n    indices[offset++] = vertexIndex + 1;\n\n    previousIndex = index;\n    ++vertexIndex;\n  }\n\n  return offset;\n}\n\n/**\n * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\n * ensure that adjacent heightmap vertices are separated by no more than\n * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\n * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\n * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\n * @type {Number}\n */\nTerrainProvider.heightmapTerrainQuality = 0.25;\n\n/**\n * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\n * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\n * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\n * @returns {Number} An estimated geometric error.\n */\nTerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function (\n  ellipsoid,\n  tileImageWidth,\n  numberOfTilesAtLevelZero\n) {\n  return (\n    (ellipsoid.maximumRadius *\n      2 *\n      Math.PI *\n      TerrainProvider.heightmapTerrainQuality) /\n    (tileImageWidth * numberOfTilesAtLevelZero)\n  );\n};\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\n * may optionally include a water mask and an indication of which child tiles are available.\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nTerrainProvider.prototype.requestTileGeometry =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\n * called before {@link TerrainProvider#ready} returns true.\n * @function\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nTerrainProvider.prototype.getLevelMaximumGeometricError =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Determines whether data for a tile is available to be loaded.\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported by the terrain provider, otherwise true or false.\n */\nTerrainProvider.prototype.getTileDataAvailable =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Makes sure we load availability data for a tile\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nTerrainProvider.prototype.loadTileDataAvailability =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n/* harmony default export */ __webpack_exports__["Z"] = (TerrainProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1497\n')},735:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * This enumerated type is used to determine how the vertices of the terrain mesh are compressed.\n *\n * @enum {Number}\n *\n * @private\n */\nvar TerrainQuantization = {\n  /**\n   * The vertices are not compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NONE: 0,\n\n  /**\n   * The vertices are compressed to 12 bits.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BITS12: 1,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(TerrainQuantization));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM1LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsa0NBQWtDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9UZXJyYWluUXVhbnRpemF0aW9uLmpzP2Q1M2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGVudW1lcmF0ZWQgdHlwZSBpcyB1c2VkIHRvIGRldGVybWluZSBob3cgdGhlIHZlcnRpY2VzIG9mIHRoZSB0ZXJyYWluIG1lc2ggYXJlIGNvbXByZXNzZWQuXG4gKlxuICogQGVudW0ge051bWJlcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgVGVycmFpblF1YW50aXphdGlvbiA9IHtcbiAgLyoqXG4gICAqIFRoZSB2ZXJ0aWNlcyBhcmUgbm90IGNvbXByZXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTk9ORTogMCxcblxuICAvKipcbiAgICogVGhlIHZlcnRpY2VzIGFyZSBjb21wcmVzc2VkIHRvIDEyIGJpdHMuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgQklUUzEyOiAxLFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoVGVycmFpblF1YW50aXphdGlvbik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///735\n')},25707:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _binarySearch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(377);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51688);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96190);\n\n\n\n\n\n/**\n * Reports the availability of tiles in a {@link TilingScheme}.\n *\n * @alias TileAvailability\n * @constructor\n *\n * @param {TilingScheme} tilingScheme The tiling scheme in which to report availability.\n * @param {Number} maximumLevel The maximum tile level that is potentially available.\n */\nfunction TileAvailability(tilingScheme, maximumLevel) {\n  this._tilingScheme = tilingScheme;\n  this._maximumLevel = maximumLevel;\n\n  this._rootNodes = [];\n}\n\nvar rectangleScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction findNode(level, x, y, nodes) {\n  var count = nodes.length;\n  for (var i = 0; i < count; ++i) {\n    var node = nodes[i];\n    if (node.x === x && node.y === y && node.level === level) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Marks a rectangular range of tiles in a particular level as being available.  For best performance,\n * add your ranges in order of increasing level.\n *\n * @param {Number} level The level.\n * @param {Number} startX The X coordinate of the first available tiles at the level.\n * @param {Number} startY The Y coordinate of the first available tiles at the level.\n * @param {Number} endX The X coordinate of the last available tiles at the level.\n * @param {Number} endY The Y coordinate of the last available tiles at the level.\n */\nTileAvailability.prototype.addAvailableTileRange = function (\n  level,\n  startX,\n  startY,\n  endX,\n  endY\n) {\n  var tilingScheme = this._tilingScheme;\n\n  var rootNodes = this._rootNodes;\n  if (level === 0) {\n    for (var y = startY; y <= endY; ++y) {\n      for (var x = startX; x <= endX; ++x) {\n        if (!findNode(level, x, y, rootNodes)) {\n          rootNodes.push(new QuadtreeNode(tilingScheme, undefined, 0, x, y));\n        }\n      }\n    }\n  }\n\n  tilingScheme.tileXYToRectangle(startX, startY, level, rectangleScratch);\n  var west = rectangleScratch.west;\n  var north = rectangleScratch.north;\n\n  tilingScheme.tileXYToRectangle(endX, endY, level, rectangleScratch);\n  var east = rectangleScratch.east;\n  var south = rectangleScratch.south;\n\n  var rectangleWithLevel = new RectangleWithLevel(\n    level,\n    west,\n    south,\n    east,\n    north\n  );\n\n  for (var i = 0; i < rootNodes.length; ++i) {\n    var rootNode = rootNodes[i];\n    if (rectanglesOverlap(rootNode.extent, rectangleWithLevel)) {\n      putRectangleInQuadtree(this._maximumLevel, rootNode, rectangleWithLevel);\n    }\n  }\n};\n\n/**\n * Determines the level of the most detailed tile covering the position.  This function\n * usually completes in time logarithmic to the number of rectangles added with\n * {@link TileAvailability#addAvailableTileRange}.\n *\n * @param {Cartographic} position The position for which to determine the maximum available level.  The height component is ignored.\n * @return {Number} The level of the most detailed tile covering the position.\n * @throws {DeveloperError} If position is outside any tile according to the tiling scheme.\n */\nTileAvailability.prototype.computeMaximumLevelAtPosition = function (position) {\n  // Find the root node that contains this position.\n  var node;\n  for (var nodeIndex = 0; nodeIndex < this._rootNodes.length; ++nodeIndex) {\n    var rootNode = this._rootNodes[nodeIndex];\n    if (rectangleContainsPosition(rootNode.extent, position)) {\n      node = rootNode;\n      break;\n    }\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(node)) {\n    return -1;\n  }\n\n  return findMaxLevelFromNode(undefined, node, position);\n};\n\nvar rectanglesScratch = [];\nvar remainingToCoverByLevelScratch = [];\nvar westScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar eastScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n/**\n * Finds the most detailed level that is available _everywhere_ within a given rectangle.  More detailed\n * tiles may be available in parts of the rectangle, but not the whole thing.  The return value of this\n * function may be safely passed to {@link sampleTerrain} for any position within the rectangle.  This function\n * usually completes in time logarithmic to the number of rectangles added with\n * {@link TileAvailability#addAvailableTileRange}.\n *\n * @param {Rectangle} rectangle The rectangle.\n * @return {Number} The best available level for the entire rectangle.\n */\nTileAvailability.prototype.computeBestAvailableLevelOverRectangle = function (\n  rectangle\n) {\n  var rectangles = rectanglesScratch;\n  rectangles.length = 0;\n\n  if (rectangle.east < rectangle.west) {\n    // Rectangle crosses the IDL, make it two rectangles.\n    rectangles.push(\n      _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRadians */ .Z.fromRadians(\n        -Math.PI,\n        rectangle.south,\n        rectangle.east,\n        rectangle.north,\n        westScratch\n      )\n    );\n    rectangles.push(\n      _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRadians */ .Z.fromRadians(\n        rectangle.west,\n        rectangle.south,\n        Math.PI,\n        rectangle.north,\n        eastScratch\n      )\n    );\n  } else {\n    rectangles.push(rectangle);\n  }\n\n  var remainingToCoverByLevel = remainingToCoverByLevelScratch;\n  remainingToCoverByLevel.length = 0;\n\n  var i;\n  for (i = 0; i < this._rootNodes.length; ++i) {\n    updateCoverageWithNode(\n      remainingToCoverByLevel,\n      this._rootNodes[i],\n      rectangles\n    );\n  }\n\n  for (i = remainingToCoverByLevel.length - 1; i >= 0; --i) {\n    if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(remainingToCoverByLevel[i]) &&\n      remainingToCoverByLevel[i].length === 0\n    ) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\nvar cartographicScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n/**\n * Determines if a particular tile is available.\n * @param {Number} level The tile level to check.\n * @param {Number} x The X coordinate of the tile to check.\n * @param {Number} y The Y coordinate of the tile to check.\n * @return {Boolean} True if the tile is available; otherwise, false.\n */\nTileAvailability.prototype.isTileAvailable = function (level, x, y) {\n  // Get the center of the tile and find the maximum level at that position.\n  // Because availability is by tile, if the level is available at that point, it\n  // is sure to be available for the whole tile.  We assume that if a tile at level n exists,\n  // then all its parent tiles back to level 0 exist too.  This isn\'t really enforced\n  // anywhere, but Cesium would never load a tile for which this is not true.\n  var rectangle = this._tilingScheme.tileXYToRectangle(\n    x,\n    y,\n    level,\n    rectangleScratch\n  );\n  _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].center */ .Z.center(rectangle, cartographicScratch);\n  return this.computeMaximumLevelAtPosition(cartographicScratch) >= level;\n};\n\n/**\n * Computes a bit mask indicating which of a tile\'s four children exist.\n * If a child\'s bit is set, a tile is available for that child.  If it is cleared,\n * the tile is not available.  The bit values are as follows:\n * <table>\n *     <tr><th>Bit Position</th><th>Bit Value</th><th>Child Tile</th></tr>\n *     <tr><td>0</td><td>1</td><td>Southwest</td></tr>\n *     <tr><td>1</td><td>2</td><td>Southeast</td></tr>\n *     <tr><td>2</td><td>4</td><td>Northwest</td></tr>\n *     <tr><td>3</td><td>8</td><td>Northeast</td></tr>\n * </table>\n *\n * @param {Number} level The level of the parent tile.\n * @param {Number} x The X coordinate of the parent tile.\n * @param {Number} y The Y coordinate of the parent tile.\n * @return {Number} The bit mask indicating child availability.\n */\nTileAvailability.prototype.computeChildMaskForTile = function (level, x, y) {\n  var childLevel = level + 1;\n  if (childLevel >= this._maximumLevel) {\n    return 0;\n  }\n\n  var mask = 0;\n\n  mask |= this.isTileAvailable(childLevel, 2 * x, 2 * y + 1) ? 1 : 0;\n  mask |= this.isTileAvailable(childLevel, 2 * x + 1, 2 * y + 1) ? 2 : 0;\n  mask |= this.isTileAvailable(childLevel, 2 * x, 2 * y) ? 4 : 0;\n  mask |= this.isTileAvailable(childLevel, 2 * x + 1, 2 * y) ? 8 : 0;\n\n  return mask;\n};\n\nfunction QuadtreeNode(tilingScheme, parent, level, x, y) {\n  this.tilingScheme = tilingScheme;\n  this.parent = parent;\n  this.level = level;\n  this.x = x;\n  this.y = y;\n  this.extent = tilingScheme.tileXYToRectangle(x, y, level);\n\n  this.rectangles = [];\n  this._sw = undefined;\n  this._se = undefined;\n  this._nw = undefined;\n  this._ne = undefined;\n}\n\nObject.defineProperties(QuadtreeNode.prototype, {\n  nw: {\n    get: function () {\n      if (!this._nw) {\n        this._nw = new QuadtreeNode(\n          this.tilingScheme,\n          this,\n          this.level + 1,\n          this.x * 2,\n          this.y * 2\n        );\n      }\n      return this._nw;\n    },\n  },\n\n  ne: {\n    get: function () {\n      if (!this._ne) {\n        this._ne = new QuadtreeNode(\n          this.tilingScheme,\n          this,\n          this.level + 1,\n          this.x * 2 + 1,\n          this.y * 2\n        );\n      }\n      return this._ne;\n    },\n  },\n\n  sw: {\n    get: function () {\n      if (!this._sw) {\n        this._sw = new QuadtreeNode(\n          this.tilingScheme,\n          this,\n          this.level + 1,\n          this.x * 2,\n          this.y * 2 + 1\n        );\n      }\n      return this._sw;\n    },\n  },\n\n  se: {\n    get: function () {\n      if (!this._se) {\n        this._se = new QuadtreeNode(\n          this.tilingScheme,\n          this,\n          this.level + 1,\n          this.x * 2 + 1,\n          this.y * 2 + 1\n        );\n      }\n      return this._se;\n    },\n  },\n});\n\nfunction RectangleWithLevel(level, west, south, east, north) {\n  this.level = level;\n  this.west = west;\n  this.south = south;\n  this.east = east;\n  this.north = north;\n}\n\nfunction rectanglesOverlap(rectangle1, rectangle2) {\n  var west = Math.max(rectangle1.west, rectangle2.west);\n  var south = Math.max(rectangle1.south, rectangle2.south);\n  var east = Math.min(rectangle1.east, rectangle2.east);\n  var north = Math.min(rectangle1.north, rectangle2.north);\n  return south < north && west < east;\n}\n\nfunction putRectangleInQuadtree(maxDepth, node, rectangle) {\n  while (node.level < maxDepth) {\n    if (rectangleFullyContainsRectangle(node.nw.extent, rectangle)) {\n      node = node.nw;\n    } else if (rectangleFullyContainsRectangle(node.ne.extent, rectangle)) {\n      node = node.ne;\n    } else if (rectangleFullyContainsRectangle(node.sw.extent, rectangle)) {\n      node = node.sw;\n    } else if (rectangleFullyContainsRectangle(node.se.extent, rectangle)) {\n      node = node.se;\n    } else {\n      break;\n    }\n  }\n\n  if (\n    node.rectangles.length === 0 ||\n    node.rectangles[node.rectangles.length - 1].level <= rectangle.level\n  ) {\n    node.rectangles.push(rectangle);\n  } else {\n    // Maintain ordering by level when inserting.\n    var index = (0,_binarySearch_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n      node.rectangles,\n      rectangle.level,\n      rectangleLevelComparator\n    );\n    if (index < 0) {\n      index = ~index;\n    }\n    node.rectangles.splice(index, 0, rectangle);\n  }\n}\n\nfunction rectangleLevelComparator(a, b) {\n  return a.level - b;\n}\n\nfunction rectangleFullyContainsRectangle(potentialContainer, rectangleToTest) {\n  return (\n    rectangleToTest.west >= potentialContainer.west &&\n    rectangleToTest.east <= potentialContainer.east &&\n    rectangleToTest.south >= potentialContainer.south &&\n    rectangleToTest.north <= potentialContainer.north\n  );\n}\n\nfunction rectangleContainsPosition(potentialContainer, positionToTest) {\n  return (\n    positionToTest.longitude >= potentialContainer.west &&\n    positionToTest.longitude <= potentialContainer.east &&\n    positionToTest.latitude >= potentialContainer.south &&\n    positionToTest.latitude <= potentialContainer.north\n  );\n}\n\nfunction findMaxLevelFromNode(stopNode, node, position) {\n  var maxLevel = 0;\n\n  // Find the deepest quadtree node containing this point.\n  var found = false;\n  while (!found) {\n    var nw = node._nw && rectangleContainsPosition(node._nw.extent, position);\n    var ne = node._ne && rectangleContainsPosition(node._ne.extent, position);\n    var sw = node._sw && rectangleContainsPosition(node._sw.extent, position);\n    var se = node._se && rectangleContainsPosition(node._se.extent, position);\n\n    // The common scenario is that the point is in only one quadrant and we can simply\n    // iterate down the tree.  But if the point is on a boundary between tiles, it is\n    // in multiple tiles and we need to check all of them, so use recursion.\n    if (nw + ne + sw + se > 1) {\n      if (nw) {\n        maxLevel = Math.max(\n          maxLevel,\n          findMaxLevelFromNode(node, node._nw, position)\n        );\n      }\n      if (ne) {\n        maxLevel = Math.max(\n          maxLevel,\n          findMaxLevelFromNode(node, node._ne, position)\n        );\n      }\n      if (sw) {\n        maxLevel = Math.max(\n          maxLevel,\n          findMaxLevelFromNode(node, node._sw, position)\n        );\n      }\n      if (se) {\n        maxLevel = Math.max(\n          maxLevel,\n          findMaxLevelFromNode(node, node._se, position)\n        );\n      }\n      break;\n    } else if (nw) {\n      node = node._nw;\n    } else if (ne) {\n      node = node._ne;\n    } else if (sw) {\n      node = node._sw;\n    } else if (se) {\n      node = node._se;\n    } else {\n      found = true;\n    }\n  }\n\n  // Work up the tree until we find a rectangle that contains this point.\n  while (node !== stopNode) {\n    var rectangles = node.rectangles;\n\n    // Rectangles are sorted by level, lowest first.\n    for (\n      var i = rectangles.length - 1;\n      i >= 0 && rectangles[i].level > maxLevel;\n      --i\n    ) {\n      var rectangle = rectangles[i];\n      if (rectangleContainsPosition(rectangle, position)) {\n        maxLevel = rectangle.level;\n      }\n    }\n\n    node = node.parent;\n  }\n\n  return maxLevel;\n}\n\nfunction updateCoverageWithNode(\n  remainingToCoverByLevel,\n  node,\n  rectanglesToCover\n) {\n  if (!node) {\n    return;\n  }\n\n  var i;\n  var anyOverlap = false;\n  for (i = 0; i < rectanglesToCover.length; ++i) {\n    anyOverlap =\n      anyOverlap || rectanglesOverlap(node.extent, rectanglesToCover[i]);\n  }\n\n  if (!anyOverlap) {\n    // This node is not applicable to the rectangle(s).\n    return;\n  }\n\n  var rectangles = node.rectangles;\n  for (i = 0; i < rectangles.length; ++i) {\n    var rectangle = rectangles[i];\n\n    if (!remainingToCoverByLevel[rectangle.level]) {\n      remainingToCoverByLevel[rectangle.level] = rectanglesToCover;\n    }\n\n    remainingToCoverByLevel[rectangle.level] = subtractRectangle(\n      remainingToCoverByLevel[rectangle.level],\n      rectangle\n    );\n  }\n\n  // Update with child nodes.\n  updateCoverageWithNode(remainingToCoverByLevel, node._nw, rectanglesToCover);\n  updateCoverageWithNode(remainingToCoverByLevel, node._ne, rectanglesToCover);\n  updateCoverageWithNode(remainingToCoverByLevel, node._sw, rectanglesToCover);\n  updateCoverageWithNode(remainingToCoverByLevel, node._se, rectanglesToCover);\n}\n\nfunction subtractRectangle(rectangleList, rectangleToSubtract) {\n  var result = [];\n  for (var i = 0; i < rectangleList.length; ++i) {\n    var rectangle = rectangleList[i];\n    if (!rectanglesOverlap(rectangle, rectangleToSubtract)) {\n      // Disjoint rectangles.  Original rectangle is unmodified.\n      result.push(rectangle);\n    } else {\n      // rectangleToSubtract partially or completely overlaps rectangle.\n      if (rectangle.west < rectangleToSubtract.west) {\n        result.push(\n          new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n            rectangle.west,\n            rectangle.south,\n            rectangleToSubtract.west,\n            rectangle.north\n          )\n        );\n      }\n      if (rectangle.east > rectangleToSubtract.east) {\n        result.push(\n          new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n            rectangleToSubtract.east,\n            rectangle.south,\n            rectangle.east,\n            rectangle.north\n          )\n        );\n      }\n      if (rectangle.south < rectangleToSubtract.south) {\n        result.push(\n          new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n            Math.max(rectangleToSubtract.west, rectangle.west),\n            rectangle.south,\n            Math.min(rectangleToSubtract.east, rectangle.east),\n            rectangleToSubtract.south\n          )\n        );\n      }\n      if (rectangle.north > rectangleToSubtract.north) {\n        result.push(\n          new _Rectangle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n            Math.max(rectangleToSubtract.west, rectangle.west),\n            rectangleToSubtract.north,\n            Math.min(rectangleToSubtract.east, rectangle.east),\n            rectangle.north\n          )\n        );\n      }\n    }\n  }\n\n  return result;\n}\n/* harmony default export */ __webpack_exports__["Z"] = (TileAvailability);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3MDcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUE2QztBQUNBO0FBQ1Y7QUFDSTs7QUFFdkM7QUFDQSwyQ0FBMkMsbUJBQW1CO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDJCQUEyQiw4REFBUzs7QUFFcEM7QUFDQTtBQUNBLGtCQUFrQixXQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUIsV0FBVztBQUNwQywyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDZDQUE2QztBQUNqRDtBQUNBLFdBQVcsY0FBYztBQUN6QixZQUFZLFFBQVE7QUFDcEIsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsb0NBQW9DO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLGdFQUFPO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsOERBQVM7QUFDL0Isc0JBQXNCLDhEQUFTOztBQUUvQjtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMscUJBQXFCO0FBQzFEO0FBQ0EsSUFBSSw2Q0FBNkM7QUFDakQ7QUFDQSxXQUFXLFdBQVc7QUFDdEIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHNGQUFxQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxzRkFBcUI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyw0QkFBNEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0EsTUFBTSxnRUFBTztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEIsaUVBQVk7O0FBRTFDO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZLFNBQVMsK0JBQStCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSw0RUFBZ0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsZ0JBQWdCLHFFQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyx1QkFBdUI7QUFDckM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOERBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4REFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhEQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOERBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBZSxnQkFBZ0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9Db3JlL1RpbGVBdmFpbGFiaWxpdHkuanM/NGQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmluYXJ5U2VhcmNoIGZyb20gXCIuL2JpbmFyeVNlYXJjaC5qc1wiO1xuaW1wb3J0IENhcnRvZ3JhcGhpYyBmcm9tIFwiLi9DYXJ0b2dyYXBoaWMuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuL2RlZmluZWQuanNcIjtcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSBcIi4vUmVjdGFuZ2xlLmpzXCI7XG5cbi8qKlxuICogUmVwb3J0cyB0aGUgYXZhaWxhYmlsaXR5IG9mIHRpbGVzIGluIGEge0BsaW5rIFRpbGluZ1NjaGVtZX0uXG4gKlxuICogQGFsaWFzIFRpbGVBdmFpbGFiaWxpdHlcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7VGlsaW5nU2NoZW1lfSB0aWxpbmdTY2hlbWUgVGhlIHRpbGluZyBzY2hlbWUgaW4gd2hpY2ggdG8gcmVwb3J0IGF2YWlsYWJpbGl0eS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhpbXVtTGV2ZWwgVGhlIG1heGltdW0gdGlsZSBsZXZlbCB0aGF0IGlzIHBvdGVudGlhbGx5IGF2YWlsYWJsZS5cbiAqL1xuZnVuY3Rpb24gVGlsZUF2YWlsYWJpbGl0eSh0aWxpbmdTY2hlbWUsIG1heGltdW1MZXZlbCkge1xuICB0aGlzLl90aWxpbmdTY2hlbWUgPSB0aWxpbmdTY2hlbWU7XG4gIHRoaXMuX21heGltdW1MZXZlbCA9IG1heGltdW1MZXZlbDtcblxuICB0aGlzLl9yb290Tm9kZXMgPSBbXTtcbn1cblxudmFyIHJlY3RhbmdsZVNjcmF0Y2ggPSBuZXcgUmVjdGFuZ2xlKCk7XG5cbmZ1bmN0aW9uIGZpbmROb2RlKGxldmVsLCB4LCB5LCBub2Rlcykge1xuICB2YXIgY291bnQgPSBub2Rlcy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKG5vZGUueCA9PT0geCAmJiBub2RlLnkgPT09IHkgJiYgbm9kZS5sZXZlbCA9PT0gbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBNYXJrcyBhIHJlY3Rhbmd1bGFyIHJhbmdlIG9mIHRpbGVzIGluIGEgcGFydGljdWxhciBsZXZlbCBhcyBiZWluZyBhdmFpbGFibGUuICBGb3IgYmVzdCBwZXJmb3JtYW5jZSxcbiAqIGFkZCB5b3VyIHJhbmdlcyBpbiBvcmRlciBvZiBpbmNyZWFzaW5nIGxldmVsLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCBUaGUgbGV2ZWwuXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnRYIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGF2YWlsYWJsZSB0aWxlcyBhdCB0aGUgbGV2ZWwuXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnRZIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGF2YWlsYWJsZSB0aWxlcyBhdCB0aGUgbGV2ZWwuXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kWCBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBsYXN0IGF2YWlsYWJsZSB0aWxlcyBhdCB0aGUgbGV2ZWwuXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kWSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBsYXN0IGF2YWlsYWJsZSB0aWxlcyBhdCB0aGUgbGV2ZWwuXG4gKi9cblRpbGVBdmFpbGFiaWxpdHkucHJvdG90eXBlLmFkZEF2YWlsYWJsZVRpbGVSYW5nZSA9IGZ1bmN0aW9uIChcbiAgbGV2ZWwsXG4gIHN0YXJ0WCxcbiAgc3RhcnRZLFxuICBlbmRYLFxuICBlbmRZXG4pIHtcbiAgdmFyIHRpbGluZ1NjaGVtZSA9IHRoaXMuX3RpbGluZ1NjaGVtZTtcblxuICB2YXIgcm9vdE5vZGVzID0gdGhpcy5fcm9vdE5vZGVzO1xuICBpZiAobGV2ZWwgPT09IDApIHtcbiAgICBmb3IgKHZhciB5ID0gc3RhcnRZOyB5IDw9IGVuZFk7ICsreSkge1xuICAgICAgZm9yICh2YXIgeCA9IHN0YXJ0WDsgeCA8PSBlbmRYOyArK3gpIHtcbiAgICAgICAgaWYgKCFmaW5kTm9kZShsZXZlbCwgeCwgeSwgcm9vdE5vZGVzKSkge1xuICAgICAgICAgIHJvb3ROb2Rlcy5wdXNoKG5ldyBRdWFkdHJlZU5vZGUodGlsaW5nU2NoZW1lLCB1bmRlZmluZWQsIDAsIHgsIHkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRpbGluZ1NjaGVtZS50aWxlWFlUb1JlY3RhbmdsZShzdGFydFgsIHN0YXJ0WSwgbGV2ZWwsIHJlY3RhbmdsZVNjcmF0Y2gpO1xuICB2YXIgd2VzdCA9IHJlY3RhbmdsZVNjcmF0Y2gud2VzdDtcbiAgdmFyIG5vcnRoID0gcmVjdGFuZ2xlU2NyYXRjaC5ub3J0aDtcblxuICB0aWxpbmdTY2hlbWUudGlsZVhZVG9SZWN0YW5nbGUoZW5kWCwgZW5kWSwgbGV2ZWwsIHJlY3RhbmdsZVNjcmF0Y2gpO1xuICB2YXIgZWFzdCA9IHJlY3RhbmdsZVNjcmF0Y2guZWFzdDtcbiAgdmFyIHNvdXRoID0gcmVjdGFuZ2xlU2NyYXRjaC5zb3V0aDtcblxuICB2YXIgcmVjdGFuZ2xlV2l0aExldmVsID0gbmV3IFJlY3RhbmdsZVdpdGhMZXZlbChcbiAgICBsZXZlbCxcbiAgICB3ZXN0LFxuICAgIHNvdXRoLFxuICAgIGVhc3QsXG4gICAgbm9ydGhcbiAgKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3ROb2Rlcy5sZW5ndGg7ICsraSkge1xuICAgIHZhciByb290Tm9kZSA9IHJvb3ROb2Rlc1tpXTtcbiAgICBpZiAocmVjdGFuZ2xlc092ZXJsYXAocm9vdE5vZGUuZXh0ZW50LCByZWN0YW5nbGVXaXRoTGV2ZWwpKSB7XG4gICAgICBwdXRSZWN0YW5nbGVJblF1YWR0cmVlKHRoaXMuX21heGltdW1MZXZlbCwgcm9vdE5vZGUsIHJlY3RhbmdsZVdpdGhMZXZlbCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGxldmVsIG9mIHRoZSBtb3N0IGRldGFpbGVkIHRpbGUgY292ZXJpbmcgdGhlIHBvc2l0aW9uLiAgVGhpcyBmdW5jdGlvblxuICogdXN1YWxseSBjb21wbGV0ZXMgaW4gdGltZSBsb2dhcml0aG1pYyB0byB0aGUgbnVtYmVyIG9mIHJlY3RhbmdsZXMgYWRkZWQgd2l0aFxuICoge0BsaW5rIFRpbGVBdmFpbGFiaWxpdHkjYWRkQXZhaWxhYmxlVGlsZVJhbmdlfS5cbiAqXG4gKiBAcGFyYW0ge0NhcnRvZ3JhcGhpY30gcG9zaXRpb24gVGhlIHBvc2l0aW9uIGZvciB3aGljaCB0byBkZXRlcm1pbmUgdGhlIG1heGltdW0gYXZhaWxhYmxlIGxldmVsLiAgVGhlIGhlaWdodCBjb21wb25lbnQgaXMgaWdub3JlZC5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIGxldmVsIG9mIHRoZSBtb3N0IGRldGFpbGVkIHRpbGUgY292ZXJpbmcgdGhlIHBvc2l0aW9uLlxuICogQHRocm93cyB7RGV2ZWxvcGVyRXJyb3J9IElmIHBvc2l0aW9uIGlzIG91dHNpZGUgYW55IHRpbGUgYWNjb3JkaW5nIHRvIHRoZSB0aWxpbmcgc2NoZW1lLlxuICovXG5UaWxlQXZhaWxhYmlsaXR5LnByb3RvdHlwZS5jb21wdXRlTWF4aW11bUxldmVsQXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAvLyBGaW5kIHRoZSByb290IG5vZGUgdGhhdCBjb250YWlucyB0aGlzIHBvc2l0aW9uLlxuICB2YXIgbm9kZTtcbiAgZm9yICh2YXIgbm9kZUluZGV4ID0gMDsgbm9kZUluZGV4IDwgdGhpcy5fcm9vdE5vZGVzLmxlbmd0aDsgKytub2RlSW5kZXgpIHtcbiAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLl9yb290Tm9kZXNbbm9kZUluZGV4XTtcbiAgICBpZiAocmVjdGFuZ2xlQ29udGFpbnNQb3NpdGlvbihyb290Tm9kZS5leHRlbnQsIHBvc2l0aW9uKSkge1xuICAgICAgbm9kZSA9IHJvb3ROb2RlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFkZWZpbmVkKG5vZGUpKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgcmV0dXJuIGZpbmRNYXhMZXZlbEZyb21Ob2RlKHVuZGVmaW5lZCwgbm9kZSwgcG9zaXRpb24pO1xufTtcblxudmFyIHJlY3RhbmdsZXNTY3JhdGNoID0gW107XG52YXIgcmVtYWluaW5nVG9Db3ZlckJ5TGV2ZWxTY3JhdGNoID0gW107XG52YXIgd2VzdFNjcmF0Y2ggPSBuZXcgUmVjdGFuZ2xlKCk7XG52YXIgZWFzdFNjcmF0Y2ggPSBuZXcgUmVjdGFuZ2xlKCk7XG5cbi8qKlxuICogRmluZHMgdGhlIG1vc3QgZGV0YWlsZWQgbGV2ZWwgdGhhdCBpcyBhdmFpbGFibGUgX2V2ZXJ5d2hlcmVfIHdpdGhpbiBhIGdpdmVuIHJlY3RhbmdsZS4gIE1vcmUgZGV0YWlsZWRcbiAqIHRpbGVzIG1heSBiZSBhdmFpbGFibGUgaW4gcGFydHMgb2YgdGhlIHJlY3RhbmdsZSwgYnV0IG5vdCB0aGUgd2hvbGUgdGhpbmcuICBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoaXNcbiAqIGZ1bmN0aW9uIG1heSBiZSBzYWZlbHkgcGFzc2VkIHRvIHtAbGluayBzYW1wbGVUZXJyYWlufSBmb3IgYW55IHBvc2l0aW9uIHdpdGhpbiB0aGUgcmVjdGFuZ2xlLiAgVGhpcyBmdW5jdGlvblxuICogdXN1YWxseSBjb21wbGV0ZXMgaW4gdGltZSBsb2dhcml0aG1pYyB0byB0aGUgbnVtYmVyIG9mIHJlY3RhbmdsZXMgYWRkZWQgd2l0aFxuICoge0BsaW5rIFRpbGVBdmFpbGFiaWxpdHkjYWRkQXZhaWxhYmxlVGlsZVJhbmdlfS5cbiAqXG4gKiBAcGFyYW0ge1JlY3RhbmdsZX0gcmVjdGFuZ2xlIFRoZSByZWN0YW5nbGUuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBiZXN0IGF2YWlsYWJsZSBsZXZlbCBmb3IgdGhlIGVudGlyZSByZWN0YW5nbGUuXG4gKi9cblRpbGVBdmFpbGFiaWxpdHkucHJvdG90eXBlLmNvbXB1dGVCZXN0QXZhaWxhYmxlTGV2ZWxPdmVyUmVjdGFuZ2xlID0gZnVuY3Rpb24gKFxuICByZWN0YW5nbGVcbikge1xuICB2YXIgcmVjdGFuZ2xlcyA9IHJlY3RhbmdsZXNTY3JhdGNoO1xuICByZWN0YW5nbGVzLmxlbmd0aCA9IDA7XG5cbiAgaWYgKHJlY3RhbmdsZS5lYXN0IDwgcmVjdGFuZ2xlLndlc3QpIHtcbiAgICAvLyBSZWN0YW5nbGUgY3Jvc3NlcyB0aGUgSURMLCBtYWtlIGl0IHR3byByZWN0YW5nbGVzLlxuICAgIHJlY3RhbmdsZXMucHVzaChcbiAgICAgIFJlY3RhbmdsZS5mcm9tUmFkaWFucyhcbiAgICAgICAgLU1hdGguUEksXG4gICAgICAgIHJlY3RhbmdsZS5zb3V0aCxcbiAgICAgICAgcmVjdGFuZ2xlLmVhc3QsXG4gICAgICAgIHJlY3RhbmdsZS5ub3J0aCxcbiAgICAgICAgd2VzdFNjcmF0Y2hcbiAgICAgIClcbiAgICApO1xuICAgIHJlY3RhbmdsZXMucHVzaChcbiAgICAgIFJlY3RhbmdsZS5mcm9tUmFkaWFucyhcbiAgICAgICAgcmVjdGFuZ2xlLndlc3QsXG4gICAgICAgIHJlY3RhbmdsZS5zb3V0aCxcbiAgICAgICAgTWF0aC5QSSxcbiAgICAgICAgcmVjdGFuZ2xlLm5vcnRoLFxuICAgICAgICBlYXN0U2NyYXRjaFxuICAgICAgKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmVjdGFuZ2xlcy5wdXNoKHJlY3RhbmdsZSk7XG4gIH1cblxuICB2YXIgcmVtYWluaW5nVG9Db3ZlckJ5TGV2ZWwgPSByZW1haW5pbmdUb0NvdmVyQnlMZXZlbFNjcmF0Y2g7XG4gIHJlbWFpbmluZ1RvQ292ZXJCeUxldmVsLmxlbmd0aCA9IDA7XG5cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9yb290Tm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICB1cGRhdGVDb3ZlcmFnZVdpdGhOb2RlKFxuICAgICAgcmVtYWluaW5nVG9Db3ZlckJ5TGV2ZWwsXG4gICAgICB0aGlzLl9yb290Tm9kZXNbaV0sXG4gICAgICByZWN0YW5nbGVzXG4gICAgKTtcbiAgfVxuXG4gIGZvciAoaSA9IHJlbWFpbmluZ1RvQ292ZXJCeUxldmVsLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKFxuICAgICAgZGVmaW5lZChyZW1haW5pbmdUb0NvdmVyQnlMZXZlbFtpXSkgJiZcbiAgICAgIHJlbWFpbmluZ1RvQ292ZXJCeUxldmVsW2ldLmxlbmd0aCA9PT0gMFxuICAgICkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59O1xuXG52YXIgY2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWMoKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcGFydGljdWxhciB0aWxlIGlzIGF2YWlsYWJsZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCBUaGUgdGlsZSBsZXZlbCB0byBjaGVjay5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIHRpbGUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge051bWJlcn0geSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSB0aWxlIHRvIGNoZWNrLlxuICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdGlsZSBpcyBhdmFpbGFibGU7IG90aGVyd2lzZSwgZmFsc2UuXG4gKi9cblRpbGVBdmFpbGFiaWxpdHkucHJvdG90eXBlLmlzVGlsZUF2YWlsYWJsZSA9IGZ1bmN0aW9uIChsZXZlbCwgeCwgeSkge1xuICAvLyBHZXQgdGhlIGNlbnRlciBvZiB0aGUgdGlsZSBhbmQgZmluZCB0aGUgbWF4aW11bSBsZXZlbCBhdCB0aGF0IHBvc2l0aW9uLlxuICAvLyBCZWNhdXNlIGF2YWlsYWJpbGl0eSBpcyBieSB0aWxlLCBpZiB0aGUgbGV2ZWwgaXMgYXZhaWxhYmxlIGF0IHRoYXQgcG9pbnQsIGl0XG4gIC8vIGlzIHN1cmUgdG8gYmUgYXZhaWxhYmxlIGZvciB0aGUgd2hvbGUgdGlsZS4gIFdlIGFzc3VtZSB0aGF0IGlmIGEgdGlsZSBhdCBsZXZlbCBuIGV4aXN0cyxcbiAgLy8gdGhlbiBhbGwgaXRzIHBhcmVudCB0aWxlcyBiYWNrIHRvIGxldmVsIDAgZXhpc3QgdG9vLiAgVGhpcyBpc24ndCByZWFsbHkgZW5mb3JjZWRcbiAgLy8gYW55d2hlcmUsIGJ1dCBDZXNpdW0gd291bGQgbmV2ZXIgbG9hZCBhIHRpbGUgZm9yIHdoaWNoIHRoaXMgaXMgbm90IHRydWUuXG4gIHZhciByZWN0YW5nbGUgPSB0aGlzLl90aWxpbmdTY2hlbWUudGlsZVhZVG9SZWN0YW5nbGUoXG4gICAgeCxcbiAgICB5LFxuICAgIGxldmVsLFxuICAgIHJlY3RhbmdsZVNjcmF0Y2hcbiAgKTtcbiAgUmVjdGFuZ2xlLmNlbnRlcihyZWN0YW5nbGUsIGNhcnRvZ3JhcGhpY1NjcmF0Y2gpO1xuICByZXR1cm4gdGhpcy5jb21wdXRlTWF4aW11bUxldmVsQXRQb3NpdGlvbihjYXJ0b2dyYXBoaWNTY3JhdGNoKSA+PSBsZXZlbDtcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBiaXQgbWFzayBpbmRpY2F0aW5nIHdoaWNoIG9mIGEgdGlsZSdzIGZvdXIgY2hpbGRyZW4gZXhpc3QuXG4gKiBJZiBhIGNoaWxkJ3MgYml0IGlzIHNldCwgYSB0aWxlIGlzIGF2YWlsYWJsZSBmb3IgdGhhdCBjaGlsZC4gIElmIGl0IGlzIGNsZWFyZWQsXG4gKiB0aGUgdGlsZSBpcyBub3QgYXZhaWxhYmxlLiAgVGhlIGJpdCB2YWx1ZXMgYXJlIGFzIGZvbGxvd3M6XG4gKiA8dGFibGU+XG4gKiAgICAgPHRyPjx0aD5CaXQgUG9zaXRpb248L3RoPjx0aD5CaXQgVmFsdWU8L3RoPjx0aD5DaGlsZCBUaWxlPC90aD48L3RyPlxuICogICAgIDx0cj48dGQ+MDwvdGQ+PHRkPjE8L3RkPjx0ZD5Tb3V0aHdlc3Q8L3RkPjwvdHI+XG4gKiAgICAgPHRyPjx0ZD4xPC90ZD48dGQ+MjwvdGQ+PHRkPlNvdXRoZWFzdDwvdGQ+PC90cj5cbiAqICAgICA8dHI+PHRkPjI8L3RkPjx0ZD40PC90ZD48dGQ+Tm9ydGh3ZXN0PC90ZD48L3RyPlxuICogICAgIDx0cj48dGQ+MzwvdGQ+PHRkPjg8L3RkPjx0ZD5Ob3J0aGVhc3Q8L3RkPjwvdHI+XG4gKiA8L3RhYmxlPlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCBUaGUgbGV2ZWwgb2YgdGhlIHBhcmVudCB0aWxlLlxuICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgcGFyZW50IHRpbGUuXG4gKiBAcGFyYW0ge051bWJlcn0geSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBwYXJlbnQgdGlsZS5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIGJpdCBtYXNrIGluZGljYXRpbmcgY2hpbGQgYXZhaWxhYmlsaXR5LlxuICovXG5UaWxlQXZhaWxhYmlsaXR5LnByb3RvdHlwZS5jb21wdXRlQ2hpbGRNYXNrRm9yVGlsZSA9IGZ1bmN0aW9uIChsZXZlbCwgeCwgeSkge1xuICB2YXIgY2hpbGRMZXZlbCA9IGxldmVsICsgMTtcbiAgaWYgKGNoaWxkTGV2ZWwgPj0gdGhpcy5fbWF4aW11bUxldmVsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgbWFzayA9IDA7XG5cbiAgbWFzayB8PSB0aGlzLmlzVGlsZUF2YWlsYWJsZShjaGlsZExldmVsLCAyICogeCwgMiAqIHkgKyAxKSA/IDEgOiAwO1xuICBtYXNrIHw9IHRoaXMuaXNUaWxlQXZhaWxhYmxlKGNoaWxkTGV2ZWwsIDIgKiB4ICsgMSwgMiAqIHkgKyAxKSA/IDIgOiAwO1xuICBtYXNrIHw9IHRoaXMuaXNUaWxlQXZhaWxhYmxlKGNoaWxkTGV2ZWwsIDIgKiB4LCAyICogeSkgPyA0IDogMDtcbiAgbWFzayB8PSB0aGlzLmlzVGlsZUF2YWlsYWJsZShjaGlsZExldmVsLCAyICogeCArIDEsIDIgKiB5KSA/IDggOiAwO1xuXG4gIHJldHVybiBtYXNrO1xufTtcblxuZnVuY3Rpb24gUXVhZHRyZWVOb2RlKHRpbGluZ1NjaGVtZSwgcGFyZW50LCBsZXZlbCwgeCwgeSkge1xuICB0aGlzLnRpbGluZ1NjaGVtZSA9IHRpbGluZ1NjaGVtZTtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5leHRlbnQgPSB0aWxpbmdTY2hlbWUudGlsZVhZVG9SZWN0YW5nbGUoeCwgeSwgbGV2ZWwpO1xuXG4gIHRoaXMucmVjdGFuZ2xlcyA9IFtdO1xuICB0aGlzLl9zdyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX253ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9uZSA9IHVuZGVmaW5lZDtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVhZHRyZWVOb2RlLnByb3RvdHlwZSwge1xuICBudzoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLl9udykge1xuICAgICAgICB0aGlzLl9udyA9IG5ldyBRdWFkdHJlZU5vZGUoXG4gICAgICAgICAgdGhpcy50aWxpbmdTY2hlbWUsXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0aGlzLmxldmVsICsgMSxcbiAgICAgICAgICB0aGlzLnggKiAyLFxuICAgICAgICAgIHRoaXMueSAqIDJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9udztcbiAgICB9LFxuICB9LFxuXG4gIG5lOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuX25lKSB7XG4gICAgICAgIHRoaXMuX25lID0gbmV3IFF1YWR0cmVlTm9kZShcbiAgICAgICAgICB0aGlzLnRpbGluZ1NjaGVtZSxcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMubGV2ZWwgKyAxLFxuICAgICAgICAgIHRoaXMueCAqIDIgKyAxLFxuICAgICAgICAgIHRoaXMueSAqIDJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9uZTtcbiAgICB9LFxuICB9LFxuXG4gIHN3OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuX3N3KSB7XG4gICAgICAgIHRoaXMuX3N3ID0gbmV3IFF1YWR0cmVlTm9kZShcbiAgICAgICAgICB0aGlzLnRpbGluZ1NjaGVtZSxcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMubGV2ZWwgKyAxLFxuICAgICAgICAgIHRoaXMueCAqIDIsXG4gICAgICAgICAgdGhpcy55ICogMiArIDFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9zdztcbiAgICB9LFxuICB9LFxuXG4gIHNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuX3NlKSB7XG4gICAgICAgIHRoaXMuX3NlID0gbmV3IFF1YWR0cmVlTm9kZShcbiAgICAgICAgICB0aGlzLnRpbGluZ1NjaGVtZSxcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMubGV2ZWwgKyAxLFxuICAgICAgICAgIHRoaXMueCAqIDIgKyAxLFxuICAgICAgICAgIHRoaXMueSAqIDIgKyAxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fc2U7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiBSZWN0YW5nbGVXaXRoTGV2ZWwobGV2ZWwsIHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCkge1xuICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIHRoaXMud2VzdCA9IHdlc3Q7XG4gIHRoaXMuc291dGggPSBzb3V0aDtcbiAgdGhpcy5lYXN0ID0gZWFzdDtcbiAgdGhpcy5ub3J0aCA9IG5vcnRoO1xufVxuXG5mdW5jdGlvbiByZWN0YW5nbGVzT3ZlcmxhcChyZWN0YW5nbGUxLCByZWN0YW5nbGUyKSB7XG4gIHZhciB3ZXN0ID0gTWF0aC5tYXgocmVjdGFuZ2xlMS53ZXN0LCByZWN0YW5nbGUyLndlc3QpO1xuICB2YXIgc291dGggPSBNYXRoLm1heChyZWN0YW5nbGUxLnNvdXRoLCByZWN0YW5nbGUyLnNvdXRoKTtcbiAgdmFyIGVhc3QgPSBNYXRoLm1pbihyZWN0YW5nbGUxLmVhc3QsIHJlY3RhbmdsZTIuZWFzdCk7XG4gIHZhciBub3J0aCA9IE1hdGgubWluKHJlY3RhbmdsZTEubm9ydGgsIHJlY3RhbmdsZTIubm9ydGgpO1xuICByZXR1cm4gc291dGggPCBub3J0aCAmJiB3ZXN0IDwgZWFzdDtcbn1cblxuZnVuY3Rpb24gcHV0UmVjdGFuZ2xlSW5RdWFkdHJlZShtYXhEZXB0aCwgbm9kZSwgcmVjdGFuZ2xlKSB7XG4gIHdoaWxlIChub2RlLmxldmVsIDwgbWF4RGVwdGgpIHtcbiAgICBpZiAocmVjdGFuZ2xlRnVsbHlDb250YWluc1JlY3RhbmdsZShub2RlLm53LmV4dGVudCwgcmVjdGFuZ2xlKSkge1xuICAgICAgbm9kZSA9IG5vZGUubnc7XG4gICAgfSBlbHNlIGlmIChyZWN0YW5nbGVGdWxseUNvbnRhaW5zUmVjdGFuZ2xlKG5vZGUubmUuZXh0ZW50LCByZWN0YW5nbGUpKSB7XG4gICAgICBub2RlID0gbm9kZS5uZTtcbiAgICB9IGVsc2UgaWYgKHJlY3RhbmdsZUZ1bGx5Q29udGFpbnNSZWN0YW5nbGUobm9kZS5zdy5leHRlbnQsIHJlY3RhbmdsZSkpIHtcbiAgICAgIG5vZGUgPSBub2RlLnN3O1xuICAgIH0gZWxzZSBpZiAocmVjdGFuZ2xlRnVsbHlDb250YWluc1JlY3RhbmdsZShub2RlLnNlLmV4dGVudCwgcmVjdGFuZ2xlKSkge1xuICAgICAgbm9kZSA9IG5vZGUuc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChcbiAgICBub2RlLnJlY3RhbmdsZXMubGVuZ3RoID09PSAwIHx8XG4gICAgbm9kZS5yZWN0YW5nbGVzW25vZGUucmVjdGFuZ2xlcy5sZW5ndGggLSAxXS5sZXZlbCA8PSByZWN0YW5nbGUubGV2ZWxcbiAgKSB7XG4gICAgbm9kZS5yZWN0YW5nbGVzLnB1c2gocmVjdGFuZ2xlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBNYWludGFpbiBvcmRlcmluZyBieSBsZXZlbCB3aGVuIGluc2VydGluZy5cbiAgICB2YXIgaW5kZXggPSBiaW5hcnlTZWFyY2goXG4gICAgICBub2RlLnJlY3RhbmdsZXMsXG4gICAgICByZWN0YW5nbGUubGV2ZWwsXG4gICAgICByZWN0YW5nbGVMZXZlbENvbXBhcmF0b3JcbiAgICApO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGluZGV4ID0gfmluZGV4O1xuICAgIH1cbiAgICBub2RlLnJlY3RhbmdsZXMuc3BsaWNlKGluZGV4LCAwLCByZWN0YW5nbGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY3RhbmdsZUxldmVsQ29tcGFyYXRvcihhLCBiKSB7XG4gIHJldHVybiBhLmxldmVsIC0gYjtcbn1cblxuZnVuY3Rpb24gcmVjdGFuZ2xlRnVsbHlDb250YWluc1JlY3RhbmdsZShwb3RlbnRpYWxDb250YWluZXIsIHJlY3RhbmdsZVRvVGVzdCkge1xuICByZXR1cm4gKFxuICAgIHJlY3RhbmdsZVRvVGVzdC53ZXN0ID49IHBvdGVudGlhbENvbnRhaW5lci53ZXN0ICYmXG4gICAgcmVjdGFuZ2xlVG9UZXN0LmVhc3QgPD0gcG90ZW50aWFsQ29udGFpbmVyLmVhc3QgJiZcbiAgICByZWN0YW5nbGVUb1Rlc3Quc291dGggPj0gcG90ZW50aWFsQ29udGFpbmVyLnNvdXRoICYmXG4gICAgcmVjdGFuZ2xlVG9UZXN0Lm5vcnRoIDw9IHBvdGVudGlhbENvbnRhaW5lci5ub3J0aFxuICApO1xufVxuXG5mdW5jdGlvbiByZWN0YW5nbGVDb250YWluc1Bvc2l0aW9uKHBvdGVudGlhbENvbnRhaW5lciwgcG9zaXRpb25Ub1Rlc3QpIHtcbiAgcmV0dXJuIChcbiAgICBwb3NpdGlvblRvVGVzdC5sb25naXR1ZGUgPj0gcG90ZW50aWFsQ29udGFpbmVyLndlc3QgJiZcbiAgICBwb3NpdGlvblRvVGVzdC5sb25naXR1ZGUgPD0gcG90ZW50aWFsQ29udGFpbmVyLmVhc3QgJiZcbiAgICBwb3NpdGlvblRvVGVzdC5sYXRpdHVkZSA+PSBwb3RlbnRpYWxDb250YWluZXIuc291dGggJiZcbiAgICBwb3NpdGlvblRvVGVzdC5sYXRpdHVkZSA8PSBwb3RlbnRpYWxDb250YWluZXIubm9ydGhcbiAgKTtcbn1cblxuZnVuY3Rpb24gZmluZE1heExldmVsRnJvbU5vZGUoc3RvcE5vZGUsIG5vZGUsIHBvc2l0aW9uKSB7XG4gIHZhciBtYXhMZXZlbCA9IDA7XG5cbiAgLy8gRmluZCB0aGUgZGVlcGVzdCBxdWFkdHJlZSBub2RlIGNvbnRhaW5pbmcgdGhpcyBwb2ludC5cbiAgdmFyIGZvdW5kID0gZmFsc2U7XG4gIHdoaWxlICghZm91bmQpIHtcbiAgICB2YXIgbncgPSBub2RlLl9udyAmJiByZWN0YW5nbGVDb250YWluc1Bvc2l0aW9uKG5vZGUuX253LmV4dGVudCwgcG9zaXRpb24pO1xuICAgIHZhciBuZSA9IG5vZGUuX25lICYmIHJlY3RhbmdsZUNvbnRhaW5zUG9zaXRpb24obm9kZS5fbmUuZXh0ZW50LCBwb3NpdGlvbik7XG4gICAgdmFyIHN3ID0gbm9kZS5fc3cgJiYgcmVjdGFuZ2xlQ29udGFpbnNQb3NpdGlvbihub2RlLl9zdy5leHRlbnQsIHBvc2l0aW9uKTtcbiAgICB2YXIgc2UgPSBub2RlLl9zZSAmJiByZWN0YW5nbGVDb250YWluc1Bvc2l0aW9uKG5vZGUuX3NlLmV4dGVudCwgcG9zaXRpb24pO1xuXG4gICAgLy8gVGhlIGNvbW1vbiBzY2VuYXJpbyBpcyB0aGF0IHRoZSBwb2ludCBpcyBpbiBvbmx5IG9uZSBxdWFkcmFudCBhbmQgd2UgY2FuIHNpbXBseVxuICAgIC8vIGl0ZXJhdGUgZG93biB0aGUgdHJlZS4gIEJ1dCBpZiB0aGUgcG9pbnQgaXMgb24gYSBib3VuZGFyeSBiZXR3ZWVuIHRpbGVzLCBpdCBpc1xuICAgIC8vIGluIG11bHRpcGxlIHRpbGVzIGFuZCB3ZSBuZWVkIHRvIGNoZWNrIGFsbCBvZiB0aGVtLCBzbyB1c2UgcmVjdXJzaW9uLlxuICAgIGlmIChudyArIG5lICsgc3cgKyBzZSA+IDEpIHtcbiAgICAgIGlmIChudykge1xuICAgICAgICBtYXhMZXZlbCA9IE1hdGgubWF4KFxuICAgICAgICAgIG1heExldmVsLFxuICAgICAgICAgIGZpbmRNYXhMZXZlbEZyb21Ob2RlKG5vZGUsIG5vZGUuX253LCBwb3NpdGlvbilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZSkge1xuICAgICAgICBtYXhMZXZlbCA9IE1hdGgubWF4KFxuICAgICAgICAgIG1heExldmVsLFxuICAgICAgICAgIGZpbmRNYXhMZXZlbEZyb21Ob2RlKG5vZGUsIG5vZGUuX25lLCBwb3NpdGlvbilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdykge1xuICAgICAgICBtYXhMZXZlbCA9IE1hdGgubWF4KFxuICAgICAgICAgIG1heExldmVsLFxuICAgICAgICAgIGZpbmRNYXhMZXZlbEZyb21Ob2RlKG5vZGUsIG5vZGUuX3N3LCBwb3NpdGlvbilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZSkge1xuICAgICAgICBtYXhMZXZlbCA9IE1hdGgubWF4KFxuICAgICAgICAgIG1heExldmVsLFxuICAgICAgICAgIGZpbmRNYXhMZXZlbEZyb21Ob2RlKG5vZGUsIG5vZGUuX3NlLCBwb3NpdGlvbilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAobncpIHtcbiAgICAgIG5vZGUgPSBub2RlLl9udztcbiAgICB9IGVsc2UgaWYgKG5lKSB7XG4gICAgICBub2RlID0gbm9kZS5fbmU7XG4gICAgfSBlbHNlIGlmIChzdykge1xuICAgICAgbm9kZSA9IG5vZGUuX3N3O1xuICAgIH0gZWxzZSBpZiAoc2UpIHtcbiAgICAgIG5vZGUgPSBub2RlLl9zZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdvcmsgdXAgdGhlIHRyZWUgdW50aWwgd2UgZmluZCBhIHJlY3RhbmdsZSB0aGF0IGNvbnRhaW5zIHRoaXMgcG9pbnQuXG4gIHdoaWxlIChub2RlICE9PSBzdG9wTm9kZSkge1xuICAgIHZhciByZWN0YW5nbGVzID0gbm9kZS5yZWN0YW5nbGVzO1xuXG4gICAgLy8gUmVjdGFuZ2xlcyBhcmUgc29ydGVkIGJ5IGxldmVsLCBsb3dlc3QgZmlyc3QuXG4gICAgZm9yIChcbiAgICAgIHZhciBpID0gcmVjdGFuZ2xlcy5sZW5ndGggLSAxO1xuICAgICAgaSA+PSAwICYmIHJlY3RhbmdsZXNbaV0ubGV2ZWwgPiBtYXhMZXZlbDtcbiAgICAgIC0taVxuICAgICkge1xuICAgICAgdmFyIHJlY3RhbmdsZSA9IHJlY3RhbmdsZXNbaV07XG4gICAgICBpZiAocmVjdGFuZ2xlQ29udGFpbnNQb3NpdGlvbihyZWN0YW5nbGUsIHBvc2l0aW9uKSkge1xuICAgICAgICBtYXhMZXZlbCA9IHJlY3RhbmdsZS5sZXZlbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gbWF4TGV2ZWw7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvdmVyYWdlV2l0aE5vZGUoXG4gIHJlbWFpbmluZ1RvQ292ZXJCeUxldmVsLFxuICBub2RlLFxuICByZWN0YW5nbGVzVG9Db3ZlclxuKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgYW55T3ZlcmxhcCA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgcmVjdGFuZ2xlc1RvQ292ZXIubGVuZ3RoOyArK2kpIHtcbiAgICBhbnlPdmVybGFwID1cbiAgICAgIGFueU92ZXJsYXAgfHwgcmVjdGFuZ2xlc092ZXJsYXAobm9kZS5leHRlbnQsIHJlY3RhbmdsZXNUb0NvdmVyW2ldKTtcbiAgfVxuXG4gIGlmICghYW55T3ZlcmxhcCkge1xuICAgIC8vIFRoaXMgbm9kZSBpcyBub3QgYXBwbGljYWJsZSB0byB0aGUgcmVjdGFuZ2xlKHMpLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZWN0YW5nbGVzID0gbm9kZS5yZWN0YW5nbGVzO1xuICBmb3IgKGkgPSAwOyBpIDwgcmVjdGFuZ2xlcy5sZW5ndGg7ICsraSkge1xuICAgIHZhciByZWN0YW5nbGUgPSByZWN0YW5nbGVzW2ldO1xuXG4gICAgaWYgKCFyZW1haW5pbmdUb0NvdmVyQnlMZXZlbFtyZWN0YW5nbGUubGV2ZWxdKSB7XG4gICAgICByZW1haW5pbmdUb0NvdmVyQnlMZXZlbFtyZWN0YW5nbGUubGV2ZWxdID0gcmVjdGFuZ2xlc1RvQ292ZXI7XG4gICAgfVxuXG4gICAgcmVtYWluaW5nVG9Db3ZlckJ5TGV2ZWxbcmVjdGFuZ2xlLmxldmVsXSA9IHN1YnRyYWN0UmVjdGFuZ2xlKFxuICAgICAgcmVtYWluaW5nVG9Db3ZlckJ5TGV2ZWxbcmVjdGFuZ2xlLmxldmVsXSxcbiAgICAgIHJlY3RhbmdsZVxuICAgICk7XG4gIH1cblxuICAvLyBVcGRhdGUgd2l0aCBjaGlsZCBub2Rlcy5cbiAgdXBkYXRlQ292ZXJhZ2VXaXRoTm9kZShyZW1haW5pbmdUb0NvdmVyQnlMZXZlbCwgbm9kZS5fbncsIHJlY3RhbmdsZXNUb0NvdmVyKTtcbiAgdXBkYXRlQ292ZXJhZ2VXaXRoTm9kZShyZW1haW5pbmdUb0NvdmVyQnlMZXZlbCwgbm9kZS5fbmUsIHJlY3RhbmdsZXNUb0NvdmVyKTtcbiAgdXBkYXRlQ292ZXJhZ2VXaXRoTm9kZShyZW1haW5pbmdUb0NvdmVyQnlMZXZlbCwgbm9kZS5fc3csIHJlY3RhbmdsZXNUb0NvdmVyKTtcbiAgdXBkYXRlQ292ZXJhZ2VXaXRoTm9kZShyZW1haW5pbmdUb0NvdmVyQnlMZXZlbCwgbm9kZS5fc2UsIHJlY3RhbmdsZXNUb0NvdmVyKTtcbn1cblxuZnVuY3Rpb24gc3VidHJhY3RSZWN0YW5nbGUocmVjdGFuZ2xlTGlzdCwgcmVjdGFuZ2xlVG9TdWJ0cmFjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjdGFuZ2xlTGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciByZWN0YW5nbGUgPSByZWN0YW5nbGVMaXN0W2ldO1xuICAgIGlmICghcmVjdGFuZ2xlc092ZXJsYXAocmVjdGFuZ2xlLCByZWN0YW5nbGVUb1N1YnRyYWN0KSkge1xuICAgICAgLy8gRGlzam9pbnQgcmVjdGFuZ2xlcy4gIE9yaWdpbmFsIHJlY3RhbmdsZSBpcyB1bm1vZGlmaWVkLlxuICAgICAgcmVzdWx0LnB1c2gocmVjdGFuZ2xlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVjdGFuZ2xlVG9TdWJ0cmFjdCBwYXJ0aWFsbHkgb3IgY29tcGxldGVseSBvdmVybGFwcyByZWN0YW5nbGUuXG4gICAgICBpZiAocmVjdGFuZ2xlLndlc3QgPCByZWN0YW5nbGVUb1N1YnRyYWN0Lndlc3QpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgbmV3IFJlY3RhbmdsZShcbiAgICAgICAgICAgIHJlY3RhbmdsZS53ZXN0LFxuICAgICAgICAgICAgcmVjdGFuZ2xlLnNvdXRoLFxuICAgICAgICAgICAgcmVjdGFuZ2xlVG9TdWJ0cmFjdC53ZXN0LFxuICAgICAgICAgICAgcmVjdGFuZ2xlLm5vcnRoXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHJlY3RhbmdsZS5lYXN0ID4gcmVjdGFuZ2xlVG9TdWJ0cmFjdC5lYXN0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgIG5ldyBSZWN0YW5nbGUoXG4gICAgICAgICAgICByZWN0YW5nbGVUb1N1YnRyYWN0LmVhc3QsXG4gICAgICAgICAgICByZWN0YW5nbGUuc291dGgsXG4gICAgICAgICAgICByZWN0YW5nbGUuZWFzdCxcbiAgICAgICAgICAgIHJlY3RhbmdsZS5ub3J0aFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWN0YW5nbGUuc291dGggPCByZWN0YW5nbGVUb1N1YnRyYWN0LnNvdXRoKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgIG5ldyBSZWN0YW5nbGUoXG4gICAgICAgICAgICBNYXRoLm1heChyZWN0YW5nbGVUb1N1YnRyYWN0Lndlc3QsIHJlY3RhbmdsZS53ZXN0KSxcbiAgICAgICAgICAgIHJlY3RhbmdsZS5zb3V0aCxcbiAgICAgICAgICAgIE1hdGgubWluKHJlY3RhbmdsZVRvU3VidHJhY3QuZWFzdCwgcmVjdGFuZ2xlLmVhc3QpLFxuICAgICAgICAgICAgcmVjdGFuZ2xlVG9TdWJ0cmFjdC5zb3V0aFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWN0YW5nbGUubm9ydGggPiByZWN0YW5nbGVUb1N1YnRyYWN0Lm5vcnRoKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgIG5ldyBSZWN0YW5nbGUoXG4gICAgICAgICAgICBNYXRoLm1heChyZWN0YW5nbGVUb1N1YnRyYWN0Lndlc3QsIHJlY3RhbmdsZS53ZXN0KSxcbiAgICAgICAgICAgIHJlY3RhbmdsZVRvU3VidHJhY3Qubm9ydGgsXG4gICAgICAgICAgICBNYXRoLm1pbihyZWN0YW5nbGVUb1N1YnRyYWN0LmVhc3QsIHJlY3RhbmdsZS5lYXN0KSxcbiAgICAgICAgICAgIHJlY3RhbmdsZS5ub3J0aFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGRlZmF1bHQgVGlsZUF2YWlsYWJpbGl0eTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25707\n')},41534:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * @private\n */\nvar TileEdge = {\n  WEST: 0,\n  NORTH: 1,\n  EAST: 2,\n  SOUTH: 3,\n  NORTHWEST: 4,\n  NORTHEAST: 5,\n  SOUTHWEST: 6,\n  SOUTHEAST: 7,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (TileEdge);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE1MzQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9UaWxlRWRnZS5qcz80OWIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xudmFyIFRpbGVFZGdlID0ge1xuICBXRVNUOiAwLFxuICBOT1JUSDogMSxcbiAgRUFTVDogMixcbiAgU09VVEg6IDMsXG4gIE5PUlRIV0VTVDogNCxcbiAgTk9SVEhFQVNUOiA1LFxuICBTT1VUSFdFU1Q6IDYsXG4gIFNPVVRIRUFTVDogNyxcbn07XG5leHBvcnQgZGVmYXVsdCBUaWxlRWRnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41534\n')},9121:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n/* harmony import */ var _formatError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(74771);\n\n\n\n\n/**\n * Provides details about an error that occurred in an {@link ImageryProvider} or a {@link TerrainProvider}.\n *\n * @alias TileProviderError\n * @constructor\n *\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that experienced the error.\n * @param {String} message A message describing the error.\n * @param {Number} [x] The X coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [y] The Y coordinate of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [level] The level of the tile that experienced the error, or undefined if the error\n *        is not specific to a particular tile.\n * @param {Number} [timesRetried=0] The number of times this operation has been retried.\n * @param {Error} [error] The error or exception that occurred, if any.\n */\nfunction TileProviderError(\n  provider,\n  message,\n  x,\n  y,\n  level,\n  timesRetried,\n  error\n) {\n  /**\n   * The {@link ImageryProvider} or {@link TerrainProvider} that experienced the error.\n   * @type {ImageryProvider|TerrainProvider}\n   */\n  this.provider = provider;\n\n  /**\n   * The message describing the error.\n   * @type {String}\n   */\n  this.message = message;\n\n  /**\n   * The X coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n  this.x = x;\n\n  /**\n   * The Y coordinate of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n  this.y = y;\n\n  /**\n   * The level-of-detail of the tile that experienced the error.  If the error is not specific\n   * to a particular tile, this property will be undefined.\n   * @type {Number}\n   */\n  this.level = level;\n\n  /**\n   * The number of times this operation has been retried.\n   * @type {Number}\n   * @default 0\n   */\n  this.timesRetried = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(timesRetried, 0);\n\n  /**\n   * True if the failed operation should be retried; otherwise, false.  The imagery or terrain provider\n   * will set the initial value of this property before raising the event, but any listeners\n   * can change it.  The value after the last listener is invoked will be acted upon.\n   * @type {Boolean}\n   * @default false\n   */\n  this.retry = false;\n\n  /**\n   * The error or exception that occurred, if any.\n   * @type {Error}\n   */\n  this.error = error;\n}\n\n/**\n * Handles an error in an {@link ImageryProvider} or {@link TerrainProvider} by raising an event if it has any listeners, or by\n * logging the error to the console if the event has no listeners.  This method also tracks the number\n * of times the operation has been retried and will automatically retry if requested to do so by the\n * event listeners.\n *\n * @param {TileProviderError} previousError The error instance returned by this function the last\n *        time it was called for this error, or undefined if this is the first time this error has\n *        occurred.\n * @param {ImageryProvider|TerrainProvider} provider The imagery or terrain provider that encountered the error.\n * @param {Event} event The event to raise to inform listeners of the error.\n * @param {String} message The message describing the error.\n * @param {Number} x The X coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Number} y The Y coordinate of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {Number} level The level-of-detail of the tile that experienced the error, or undefined if the\n *        error is not specific to a particular tile.\n * @param {TileProviderError.RetryFunction} retryFunction The function to call to retry the operation.  If undefined, the\n *        operation will not be retried.\n * @param {Error} [errorDetails] The error or exception that occurred, if any.\n * @returns {TileProviderError} The error instance that was passed to the event listeners and that\n *          should be passed to this function the next time it is called for the same error in order\n *          to track retry counts.\n */\nTileProviderError.handleError = function (\n  previousError,\n  provider,\n  event,\n  message,\n  x,\n  y,\n  level,\n  retryFunction,\n  errorDetails\n) {\n  var error = previousError;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(previousError)) {\n    error = new TileProviderError(\n      provider,\n      message,\n      x,\n      y,\n      level,\n      0,\n      errorDetails\n    );\n  } else {\n    error.provider = provider;\n    error.message = message;\n    error.x = x;\n    error.y = y;\n    error.level = level;\n    error.retry = false;\n    error.error = errorDetails;\n    ++error.timesRetried;\n  }\n\n  if (event.numberOfListeners > 0) {\n    event.raiseEvent(error);\n  } else {\n    console.log(\n      \'An error occurred in "\' +\n        provider.constructor.name +\n        \'": \' +\n        (0,_formatError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(message)\n    );\n  }\n\n  if (error.retry && (0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(retryFunction)) {\n    retryFunction();\n  }\n\n  return error;\n};\n\n/**\n * Handles success of an operation by resetting the retry count of a previous error, if any.  This way,\n * if the error occurs again in the future, the listeners will be informed that it has not yet been retried.\n *\n * @param {TileProviderError} previousError The previous error, or undefined if this operation has\n *        not previously resulted in an error.\n */\nTileProviderError.handleSuccess = function (previousError) {\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(previousError)) {\n    previousError.timesRetried = -1;\n  }\n};\n\n/**\n * A function that will be called to retry the operation.\n * @callback TileProviderError.RetryFunction\n */\n/* harmony default export */ __webpack_exports__["Z"] = (TileProviderError);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9121\n')},13829:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n/**\n * A tiling scheme for geometry or imagery on the surface of an ellipsoid.  At level-of-detail zero,\n * the coarsest, least-detailed level, the number of tiles is configurable.\n * At level of detail one, each of the level zero tiles has four children, two in each direction.\n * At level of detail two, each of the level one tiles has four children, two in each direction.\n * This continues for as many levels as are present in the geometry or imagery source.\n *\n * @alias TilingScheme\n * @constructor\n *\n * @see WebMercatorTilingScheme\n * @see GeographicTilingScheme\n */\nfunction TilingScheme(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n    "This type should not be instantiated directly.  Instead, use WebMercatorTilingScheme or GeographicTilingScheme."\n  );\n  //>>includeEnd(\'debug\');\n}\n\nObject.defineProperties(TilingScheme.prototype, {\n  /**\n   * Gets the ellipsoid that is tiled by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the rectangle, in radians, covered by this tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the map projection used by the tiling scheme.\n   * @memberof TilingScheme.prototype\n   * @type {MapProjection}\n   */\n  projection: {\n    get: _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the total number of tiles in the X direction at a specified level-of-detail.\n * @function\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the X direction at the given level.\n */\nTilingScheme.prototype.getNumberOfXTilesAtLevel =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n * @function\n *\n * @param {Number} level The level-of-detail.\n * @returns {Number} The number of tiles in the Y direction at the given level.\n */\nTilingScheme.prototype.getNumberOfYTilesAtLevel =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Transforms a rectangle specified in geodetic radians to the native coordinate system\n * of this tiling scheme.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle to transform.\n * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified \'result\', or a new object containing the native rectangle if \'result\'\n *          is undefined.\n */\nTilingScheme.prototype.rectangleToNativeRectangle =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n * of the tiling scheme.\n * @function\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified \'result\', or a new object containing the rectangle\n *          if \'result\' is undefined.\n */\nTilingScheme.prototype.tileXYToNativeRectangle =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n * @function\n *\n * @param {Number} x The integer x coordinate of the tile.\n * @param {Number} y The integer y coordinate of the tile.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Rectangle} The specified \'result\', or a new object containing the rectangle\n *          if \'result\' is undefined.\n */\nTilingScheme.prototype.tileXYToRectangle =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Calculates the tile x, y coordinates of the tile containing\n * a given cartographic position.\n * @function\n *\n * @param {Cartographic} position The position.\n * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n *        should be created.\n * @returns {Cartesian2} The specified \'result\', or a new object containing the tile x, y coordinates\n *          if \'result\' is undefined.\n */\nTilingScheme.prototype.positionToTileXY =\n  _DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (TilingScheme)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13829\n')},4877:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Constants for time conversions like those done by {@link JulianDate}.\n *\n * @namespace TimeConstants\n *\n * @see JulianDate\n *\n * @private\n */\nvar TimeConstants = {\n  /**\n   * The number of seconds in one millisecond: <code>0.001</code>\n   * @type {Number}\n   * @constant\n   */\n  SECONDS_PER_MILLISECOND: 0.001,\n\n  /**\n   * The number of seconds in one minute: <code>60</code>.\n   * @type {Number}\n   * @constant\n   */\n  SECONDS_PER_MINUTE: 60.0,\n\n  /**\n   * The number of minutes in one hour: <code>60</code>.\n   * @type {Number}\n   * @constant\n   */\n  MINUTES_PER_HOUR: 60.0,\n\n  /**\n   * The number of hours in one day: <code>24</code>.\n   * @type {Number}\n   * @constant\n   */\n  HOURS_PER_DAY: 24.0,\n\n  /**\n   * The number of seconds in one hour: <code>3600</code>.\n   * @type {Number}\n   * @constant\n   */\n  SECONDS_PER_HOUR: 3600.0,\n\n  /**\n   * The number of minutes in one day: <code>1440</code>.\n   * @type {Number}\n   * @constant\n   */\n  MINUTES_PER_DAY: 1440.0,\n\n  /**\n   * The number of seconds in one day, ignoring leap seconds: <code>86400</code>.\n   * @type {Number}\n   * @constant\n   */\n  SECONDS_PER_DAY: 86400.0,\n\n  /**\n   * The number of days in one Julian century: <code>36525</code>.\n   * @type {Number}\n   * @constant\n   */\n  DAYS_PER_JULIAN_CENTURY: 36525.0,\n\n  /**\n   * One trillionth of a second.\n   * @type {Number}\n   * @constant\n   */\n  PICOSECOND: 0.000000001,\n\n  /**\n   * The number of days to subtract from a Julian date to determine the\n   * modified Julian date, which gives the number of days since midnight\n   * on November 17, 1858.\n   * @type {Number}\n   * @constant\n   */\n  MODIFIED_JULIAN_DATE_DIFFERENCE: 2400000.5,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(TimeConstants));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg3Ny5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHNEQUFzRCxpQkFBaUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsNEJBQTRCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9UaW1lQ29uc3RhbnRzLmpzPzRlMjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25zdGFudHMgZm9yIHRpbWUgY29udmVyc2lvbnMgbGlrZSB0aG9zZSBkb25lIGJ5IHtAbGluayBKdWxpYW5EYXRlfS5cbiAqXG4gKiBAbmFtZXNwYWNlIFRpbWVDb25zdGFudHNcbiAqXG4gKiBAc2VlIEp1bGlhbkRhdGVcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgVGltZUNvbnN0YW50cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBvbmUgbWlsbGlzZWNvbmQ6IDxjb2RlPjAuMDAxPC9jb2RlPlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFNFQ09ORFNfUEVSX01JTExJU0VDT05EOiAwLjAwMSxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBzZWNvbmRzIGluIG9uZSBtaW51dGU6IDxjb2RlPjYwPC9jb2RlPi5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBTRUNPTkRTX1BFUl9NSU5VVEU6IDYwLjAsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWludXRlcyBpbiBvbmUgaG91cjogPGNvZGU+NjA8L2NvZGU+LlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIE1JTlVURVNfUEVSX0hPVVI6IDYwLjAsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgaG91cnMgaW4gb25lIGRheTogPGNvZGU+MjQ8L2NvZGU+LlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIEhPVVJTX1BFUl9EQVk6IDI0LjAsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBvbmUgaG91cjogPGNvZGU+MzYwMDwvY29kZT4uXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgU0VDT05EU19QRVJfSE9VUjogMzYwMC4wLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbnV0ZXMgaW4gb25lIGRheTogPGNvZGU+MTQ0MDwvY29kZT4uXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgTUlOVVRFU19QRVJfREFZOiAxNDQwLjAsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBvbmUgZGF5LCBpZ25vcmluZyBsZWFwIHNlY29uZHM6IDxjb2RlPjg2NDAwPC9jb2RlPi5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBTRUNPTkRTX1BFUl9EQVk6IDg2NDAwLjAsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgZGF5cyBpbiBvbmUgSnVsaWFuIGNlbnR1cnk6IDxjb2RlPjM2NTI1PC9jb2RlPi5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBEQVlTX1BFUl9KVUxJQU5fQ0VOVFVSWTogMzY1MjUuMCxcblxuICAvKipcbiAgICogT25lIHRyaWxsaW9udGggb2YgYSBzZWNvbmQuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgUElDT1NFQ09ORDogMC4wMDAwMDAwMDEsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgZGF5cyB0byBzdWJ0cmFjdCBmcm9tIGEgSnVsaWFuIGRhdGUgdG8gZGV0ZXJtaW5lIHRoZVxuICAgKiBtb2RpZmllZCBKdWxpYW4gZGF0ZSwgd2hpY2ggZ2l2ZXMgdGhlIG51bWJlciBvZiBkYXlzIHNpbmNlIG1pZG5pZ2h0XG4gICAqIG9uIE5vdmVtYmVyIDE3LCAxODU4LlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIE1PRElGSUVEX0pVTElBTl9EQVRFX0RJRkZFUkVOQ0U6IDI0MDAwMDAuNSxcbn07XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKFRpbWVDb25zdGFudHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4877\n')},77808:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(55293);\n\n\n\n\n\n\n/**\n * An interval defined by a start and a stop time; optionally including those times as part of the interval.\n * Arbitrary data can optionally be associated with each instance for used with {@link TimeIntervalCollection}.\n *\n * @alias TimeInterval\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {JulianDate} [options.start=new JulianDate()] The start time of the interval.\n * @param {JulianDate} [options.stop=new JulianDate()] The stop time of the interval.\n * @param {Boolean} [options.isStartIncluded=true] <code>true</code> if <code>options.start</code> is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded=true] <code>true</code> if <code>options.stop</code> is included in the interval, <code>false</code> otherwise.\n * @param {Object} [options.data] Arbitrary data associated with this interval.\n *\n * @example\n * // Create an instance that spans August 1st, 1980 and is associated\n * // with a Cartesian position.\n * var timeInterval = new Cesium.TimeInterval({\n *     start : Cesium.JulianDate.fromIso8601(\'1980-08-01T00:00:00Z\'),\n *     stop : Cesium.JulianDate.fromIso8601(\'1980-08-02T00:00:00Z\'),\n *     isStartIncluded : true,\n *     isStopIncluded : false,\n *     data : Cesium.Cartesian3.fromDegrees(39.921037, -75.170082)\n * });\n *\n * @example\n * // Create two instances from ISO 8601 intervals with associated numeric data\n * // then compute their intersection, summing the data they contain.\n * var left = Cesium.TimeInterval.fromIso8601({\n *     iso8601 : \'2000/2010\',\n *     data : 2\n * });\n *\n * var right = Cesium.TimeInterval.fromIso8601({\n *     iso8601 : \'1995/2005\',\n *     data : 3\n * });\n *\n * //The result of the below intersection will be an interval equivalent to\n * //var intersection = Cesium.TimeInterval.fromIso8601({\n * //  iso8601 : \'2000/2005\',\n * //  data : 5\n * //});\n * var intersection = new Cesium.TimeInterval();\n * Cesium.TimeInterval.intersect(left, right, intersection, function(leftData, rightData) {\n *     return leftData + rightData;\n * });\n *\n * @example\n * // Check if an interval contains a specific time.\n * var dateToCheck = Cesium.JulianDate.fromIso8601(\'1982-09-08T11:30:00Z\');\n * var containsDate = Cesium.TimeInterval.contains(timeInterval, dateToCheck);\n */\nfunction TimeInterval(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  /**\n   * Gets or sets the start time of this interval.\n   * @type {JulianDate}\n   */\n  this.start = (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.start)\n    ? _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(options.start)\n    : new _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  /**\n   * Gets or sets the stop time of this interval.\n   * @type {JulianDate}\n   */\n  this.stop = (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.stop)\n    ? _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(options.stop)\n    : new _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  /**\n   * Gets or sets the data associated with this interval.\n   * @type {*}\n   */\n  this.data = options.data;\n\n  /**\n   * Gets or sets whether or not the start time is included in this interval.\n   * @type {Boolean}\n   * @default true\n   */\n  this.isStartIncluded = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.isStartIncluded, true);\n\n  /**\n   * Gets or sets whether or not the stop time is included in this interval.\n   * @type {Boolean}\n   * @default true\n   */\n  this.isStopIncluded = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.isStopIncluded, true);\n}\n\nObject.defineProperties(TimeInterval.prototype, {\n  /**\n   * Gets whether or not this interval is empty.\n   * @memberof TimeInterval.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isEmpty: {\n    get: function () {\n      var stopComparedToStart = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].compare */ .Z.compare(this.stop, this.start);\n      return (\n        stopComparedToStart < 0 ||\n        (stopComparedToStart === 0 &&\n          (!this.isStartIncluded || !this.isStopIncluded))\n      );\n    },\n  },\n});\n\nvar scratchInterval = {\n  start: undefined,\n  stop: undefined,\n  isStartIncluded: undefined,\n  isStopIncluded: undefined,\n  data: undefined,\n};\n\n/**\n * Creates a new instance from a {@link http://en.wikipedia.org/wiki/ISO_8601|ISO 8601} interval.\n *\n * @throws DeveloperError if options.iso8601 does not match proper formatting.\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.iso8601 An ISO 8601 interval.\n * @param {Boolean} [options.isStartIncluded=true] <code>true</code> if <code>options.start</code> is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded=true] <code>true</code> if <code>options.stop</code> is included in the interval, <code>false</code> otherwise.\n * @param {Object} [options.data] Arbitrary data associated with this interval.\n * @param {TimeInterval} [result] An existing instance to use for the result.\n * @returns {TimeInterval} The modified result parameter or a new instance if none was provided.\n */\nTimeInterval.fromIso8601 = function (options, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options", options);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("options.iso8601", options.iso8601);\n  //>>includeEnd(\'debug\');\n\n  var dates = options.iso8601.split("/");\n  if (dates.length !== 2) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "options.iso8601 is an invalid ISO 8601 interval."\n    );\n  }\n  var start = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromIso8601 */ .Z.fromIso8601(dates[0]);\n  var stop = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromIso8601 */ .Z.fromIso8601(dates[1]);\n  var isStartIncluded = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.isStartIncluded, true);\n  var isStopIncluded = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.isStopIncluded, true);\n  var data = options.data;\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    scratchInterval.start = start;\n    scratchInterval.stop = stop;\n    scratchInterval.isStartIncluded = isStartIncluded;\n    scratchInterval.isStopIncluded = isStopIncluded;\n    scratchInterval.data = data;\n    return new TimeInterval(scratchInterval);\n  }\n\n  result.start = start;\n  result.stop = stop;\n  result.isStartIncluded = isStartIncluded;\n  result.isStopIncluded = isStopIncluded;\n  result.data = data;\n  return result;\n};\n\n/**\n * Creates an ISO8601 representation of the provided interval.\n *\n * @param {TimeInterval} timeInterval The interval to be converted.\n * @param {Number} [precision] The number of fractional digits used to represent the seconds component.  By default, the most precise representation is used.\n * @returns {String} The ISO8601 representation of the provided interval.\n */\nTimeInterval.toIso8601 = function (timeInterval, precision) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("timeInterval", timeInterval);\n  //>>includeEnd(\'debug\');\n\n  return (\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toIso8601 */ .Z.toIso8601(timeInterval.start, precision) +\n    "/" +\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toIso8601 */ .Z.toIso8601(timeInterval.stop, precision)\n  );\n};\n\n/**\n * Duplicates the provided instance.\n *\n * @param {TimeInterval} [timeInterval] The instance to clone.\n * @param {TimeInterval} [result] An existing instance to use for the result.\n * @returns {TimeInterval} The modified result parameter or a new instance if none was provided.\n */\nTimeInterval.clone = function (timeInterval, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(timeInterval)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new TimeInterval(timeInterval);\n  }\n  result.start = timeInterval.start;\n  result.stop = timeInterval.stop;\n  result.isStartIncluded = timeInterval.isStartIncluded;\n  result.isStopIncluded = timeInterval.isStopIncluded;\n  result.data = timeInterval.data;\n  return result;\n};\n\n/**\n * Compares two instances and returns <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TimeInterval} [left] The first instance.\n * @param {TimeInterval} [right] The second instance.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n * @returns {Boolean} <code>true</code> if the dates are equal; otherwise, <code>false</code>.\n */\nTimeInterval.equals = function (left, right, dataComparer) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      ((left.isEmpty && right.isEmpty) ||\n        (left.isStartIncluded === right.isStartIncluded &&\n          left.isStopIncluded === right.isStopIncluded &&\n          _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(left.start, right.start) &&\n          _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(left.stop, right.stop) &&\n          (left.data === right.data ||\n            ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(dataComparer) && dataComparer(left.data, right.data))))))\n  );\n};\n\n/**\n * Compares two instances and returns <code>true</code> if they are within <code>epsilon</code> seconds of\n * each other.  That is, in order for the dates to be considered equal (and for\n * this function to return <code>true</code>), the absolute value of the difference between them, in\n * seconds, must be less than <code>epsilon</code>.\n *\n * @param {TimeInterval} [left] The first instance.\n * @param {TimeInterval} [right] The second instance.\n * @param {Number} [epsilon=0] The maximum number of seconds that should separate the two instances.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n * @returns {Boolean} <code>true</code> if the two dates are within <code>epsilon</code> seconds of each other; otherwise <code>false</code>.\n */\nTimeInterval.equalsEpsilon = function (left, right, epsilon, dataComparer) {\n  epsilon = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(epsilon, 0);\n\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      ((left.isEmpty && right.isEmpty) ||\n        (left.isStartIncluded === right.isStartIncluded &&\n          left.isStopIncluded === right.isStopIncluded &&\n          _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(left.start, right.start, epsilon) &&\n          _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(left.stop, right.stop, epsilon) &&\n          (left.data === right.data ||\n            ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(dataComparer) && dataComparer(left.data, right.data))))))\n  );\n};\n\n/**\n * Computes the intersection of two intervals, optionally merging their data.\n *\n * @param {TimeInterval} left The first interval.\n * @param {TimeInterval} [right] The second interval.\n * @param {TimeInterval} [result] An existing instance to use for the result.\n * @param {TimeInterval.MergeCallback} [mergeCallback] A function which merges the data of the two intervals. If omitted, the data from the left interval will be used.\n * @returns {TimeInterval} The modified result parameter.\n */\nTimeInterval.intersect = function (left, right, result, mergeCallback) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right)) {\n    return TimeInterval.clone(TimeInterval.EMPTY, result);\n  }\n\n  var leftStart = left.start;\n  var leftStop = left.stop;\n\n  var rightStart = right.start;\n  var rightStop = right.stop;\n\n  var intersectsStartRight =\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].greaterThanOrEquals */ .Z.greaterThanOrEquals(rightStart, leftStart) &&\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].greaterThanOrEquals */ .Z.greaterThanOrEquals(leftStop, rightStart);\n  var intersectsStartLeft =\n    !intersectsStartRight &&\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].lessThanOrEquals */ .Z.lessThanOrEquals(rightStart, leftStart) &&\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].lessThanOrEquals */ .Z.lessThanOrEquals(leftStart, rightStop);\n\n  if (!intersectsStartRight && !intersectsStartLeft) {\n    return TimeInterval.clone(TimeInterval.EMPTY, result);\n  }\n\n  var leftIsStartIncluded = left.isStartIncluded;\n  var leftIsStopIncluded = left.isStopIncluded;\n  var rightIsStartIncluded = right.isStartIncluded;\n  var rightIsStopIncluded = right.isStopIncluded;\n  var leftLessThanRight = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].lessThan */ .Z.lessThan(leftStop, rightStop);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new TimeInterval();\n  }\n\n  result.start = intersectsStartRight ? rightStart : leftStart;\n  result.isStartIncluded =\n    (leftIsStartIncluded && rightIsStartIncluded) ||\n    (!_JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(rightStart, leftStart) &&\n      ((intersectsStartRight && rightIsStartIncluded) ||\n        (intersectsStartLeft && leftIsStartIncluded)));\n  result.stop = leftLessThanRight ? leftStop : rightStop;\n  result.isStopIncluded = leftLessThanRight\n    ? leftIsStopIncluded\n    : (leftIsStopIncluded && rightIsStopIncluded) ||\n      (!_JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(rightStop, leftStop) && rightIsStopIncluded);\n  result.data = (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(mergeCallback)\n    ? mergeCallback(left.data, right.data)\n    : left.data;\n  return result;\n};\n\n/**\n * Checks if the specified date is inside the provided interval.\n *\n * @param {TimeInterval} timeInterval The interval.\n * @param {JulianDate} julianDate The date to check.\n * @returns {Boolean} <code>true</code> if the interval contains the specified date, <code>false</code> otherwise.\n */\nTimeInterval.contains = function (timeInterval, julianDate) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("timeInterval", timeInterval);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("julianDate", julianDate);\n  //>>includeEnd(\'debug\');\n\n  if (timeInterval.isEmpty) {\n    return false;\n  }\n\n  var startComparedToDate = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].compare */ .Z.compare(timeInterval.start, julianDate);\n  if (startComparedToDate === 0) {\n    return timeInterval.isStartIncluded;\n  }\n\n  var dateComparedToStop = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].compare */ .Z.compare(julianDate, timeInterval.stop);\n  if (dateComparedToStop === 0) {\n    return timeInterval.isStopIncluded;\n  }\n\n  return startComparedToDate < 0 && dateComparedToStop < 0;\n};\n\n/**\n * Duplicates this instance.\n *\n * @param {TimeInterval} [result] An existing instance to use for the result.\n * @returns {TimeInterval} The modified result parameter or a new instance if none was provided.\n */\nTimeInterval.prototype.clone = function (result) {\n  return TimeInterval.clone(this, result);\n};\n\n/**\n * Compares this instance against the provided instance componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TimeInterval} [right] The right hand side interval.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nTimeInterval.prototype.equals = function (right, dataComparer) {\n  return TimeInterval.equals(this, right, dataComparer);\n};\n\n/**\n * Compares this instance against the provided instance componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {TimeInterval} [right] The right hand side interval.\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nTimeInterval.prototype.equalsEpsilon = function (right, epsilon, dataComparer) {\n  return TimeInterval.equalsEpsilon(this, right, epsilon, dataComparer);\n};\n\n/**\n * Creates a string representing this TimeInterval in ISO8601 format.\n *\n * @returns {String} A string representing this TimeInterval in ISO8601 format.\n */\nTimeInterval.prototype.toString = function () {\n  return TimeInterval.toIso8601(this);\n};\n\n/**\n * An immutable empty interval.\n *\n * @type {TimeInterval}\n * @constant\n */\nTimeInterval.EMPTY = Object.freeze(\n  new TimeInterval({\n    start: new _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n    stop: new _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n    isStartIncluded: false,\n    isStopIncluded: false,\n  })\n);\n\n/**\n * Function interface for merging interval data.\n * @callback TimeInterval.MergeCallback\n *\n * @param {*} leftData The first data instance.\n * @param {*} rightData The second data instance.\n * @returns {*} The result of merging the two data instances.\n */\n\n/**\n * Function interface for comparing interval data.\n * @callback TimeInterval.DataComparer\n * @param {*} leftData The first data instance.\n * @param {*} rightData The second data instance.\n * @returns {Boolean} <code>true</code> if the provided instances are equal, <code>false</code> otherwise.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (TimeInterval);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///77808\n')},46026:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _binarySearch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(377);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _GregorianDate_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(98648);\n/* harmony import */ var _isLeapYear_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(55706);\n/* harmony import */ var _Iso8601_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(22841);\n/* harmony import */ var _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(55293);\n/* harmony import */ var _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(77808);\n\n\n\n\n\n\n\n\n\n\n\nfunction compareIntervalStartTimes(left, right) {\n  return _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].compare */ .Z.compare(left.start, right.start);\n}\n\n/**\n * A non-overlapping collection of {@link TimeInterval} instances sorted by start time.\n * @alias TimeIntervalCollection\n * @constructor\n *\n * @param {TimeInterval[]} [intervals] An array of intervals to add to the collection.\n */\nfunction TimeIntervalCollection(intervals) {\n  this._intervals = [];\n  this._changedEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(intervals)) {\n    var length = intervals.length;\n    for (var i = 0; i < length; i++) {\n      this.addInterval(intervals[i]);\n    }\n  }\n}\n\nObject.defineProperties(TimeIntervalCollection.prototype, {\n  /**\n   * Gets an event that is raised whenever the collection of intervals change.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  changedEvent: {\n    get: function () {\n      return this._changedEvent;\n    },\n  },\n\n  /**\n   * Gets the start time of the collection.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {JulianDate}\n   * @readonly\n   */\n  start: {\n    get: function () {\n      var intervals = this._intervals;\n      return intervals.length === 0 ? undefined : intervals[0].start;\n    },\n  },\n\n  /**\n   * Gets whether or not the start time is included in the collection.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isStartIncluded: {\n    get: function () {\n      var intervals = this._intervals;\n      return intervals.length === 0 ? false : intervals[0].isStartIncluded;\n    },\n  },\n\n  /**\n   * Gets the stop time of the collection.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {JulianDate}\n   * @readonly\n   */\n  stop: {\n    get: function () {\n      var intervals = this._intervals;\n      var length = intervals.length;\n      return length === 0 ? undefined : intervals[length - 1].stop;\n    },\n  },\n\n  /**\n   * Gets whether or not the stop time is included in the collection.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isStopIncluded: {\n    get: function () {\n      var intervals = this._intervals;\n      var length = intervals.length;\n      return length === 0 ? false : intervals[length - 1].isStopIncluded;\n    },\n  },\n\n  /**\n   * Gets the number of intervals in the collection.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._intervals.length;\n    },\n  },\n\n  /**\n   * Gets whether or not the collection is empty.\n   * @memberof TimeIntervalCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isEmpty: {\n    get: function () {\n      return this._intervals.length === 0;\n    },\n  },\n});\n\n/**\n * Compares this instance against the provided instance componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TimeIntervalCollection} [right] The right hand side collection.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nTimeIntervalCollection.prototype.equals = function (right, dataComparer) {\n  if (this === right) {\n    return true;\n  }\n  if (!(right instanceof TimeIntervalCollection)) {\n    return false;\n  }\n  var intervals = this._intervals;\n  var rightIntervals = right._intervals;\n  var length = intervals.length;\n  if (length !== rightIntervals.length) {\n    return false;\n  }\n  for (var i = 0; i < length; i++) {\n    if (!_TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].equals */ .Z.equals(intervals[i], rightIntervals[i], dataComparer)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Gets the interval at the specified index.\n *\n * @param {Number} index The index of the interval to retrieve.\n * @returns {TimeInterval|undefined} The interval at the specified index, or <code>undefined</code> if no interval exists as that index.\n */\nTimeIntervalCollection.prototype.get = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(index)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("index is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  return this._intervals[index];\n};\n\n/**\n * Removes all intervals from the collection.\n */\nTimeIntervalCollection.prototype.removeAll = function () {\n  if (this._intervals.length > 0) {\n    this._intervals.length = 0;\n    this._changedEvent.raiseEvent(this);\n  }\n};\n\n/**\n * Finds and returns the interval that contains the specified date.\n *\n * @param {JulianDate} date The date to search for.\n * @returns {TimeInterval|undefined} The interval containing the specified date, <code>undefined</code> if no such interval exists.\n */\nTimeIntervalCollection.prototype.findIntervalContainingDate = function (date) {\n  var index = this.indexOf(date);\n  return index >= 0 ? this._intervals[index] : undefined;\n};\n\n/**\n * Finds and returns the data for the interval that contains the specified date.\n *\n * @param {JulianDate} date The date to search for.\n * @returns {Object} The data for the interval containing the specified date, or <code>undefined</code> if no such interval exists.\n */\nTimeIntervalCollection.prototype.findDataForIntervalContainingDate = function (\n  date\n) {\n  var index = this.indexOf(date);\n  return index >= 0 ? this._intervals[index].data : undefined;\n};\n\n/**\n * Checks if the specified date is inside this collection.\n *\n * @param {JulianDate} julianDate The date to check.\n * @returns {Boolean} <code>true</code> if the collection contains the specified date, <code>false</code> otherwise.\n */\nTimeIntervalCollection.prototype.contains = function (julianDate) {\n  return this.indexOf(julianDate) >= 0;\n};\n\nvar indexOfScratch = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\n\n/**\n * Finds and returns the index of the interval in the collection that contains the specified date.\n *\n * @param {JulianDate} date The date to search for.\n * @returns {Number} The index of the interval that contains the specified date, if no such interval exists,\n * it returns a negative number which is the bitwise complement of the index of the next interval that\n * starts after the date, or if no interval starts after the specified date, the bitwise complement of\n * the length of the collection.\n */\nTimeIntervalCollection.prototype.indexOf = function (date) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(date)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("date is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  var intervals = this._intervals;\n  indexOfScratch.start = date;\n  indexOfScratch.stop = date;\n  var index = (0,_binarySearch_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    intervals,\n    indexOfScratch,\n    compareIntervalStartTimes\n  );\n  if (index >= 0) {\n    if (intervals[index].isStartIncluded) {\n      return index;\n    }\n\n    if (\n      index > 0 &&\n      intervals[index - 1].stop.equals(date) &&\n      intervals[index - 1].isStopIncluded\n    ) {\n      return index - 1;\n    }\n    return ~index;\n  }\n\n  index = ~index;\n  if (\n    index > 0 &&\n    index - 1 < intervals.length &&\n    _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].contains */ .Z.contains(intervals[index - 1], date)\n  ) {\n    return index - 1;\n  }\n  return ~index;\n};\n\n/**\n * Returns the first interval in the collection that matches the specified parameters.\n * All parameters are optional and <code>undefined</code> parameters are treated as a don\'t care condition.\n *\n * @param {Object} [options] Object with the following properties:\n * @param {JulianDate} [options.start] The start time of the interval.\n * @param {JulianDate} [options.stop] The stop time of the interval.\n * @param {Boolean} [options.isStartIncluded] <code>true</code> if <code>options.start</code> is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded] <code>true</code> if <code>options.stop</code> is included in the interval, <code>false</code> otherwise.\n * @returns {TimeInterval|undefined} The first interval in the collection that matches the specified parameters.\n */\nTimeIntervalCollection.prototype.findInterval = function (options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var start = options.start;\n  var stop = options.stop;\n  var isStartIncluded = options.isStartIncluded;\n  var isStopIncluded = options.isStopIncluded;\n\n  var intervals = this._intervals;\n  for (var i = 0, len = intervals.length; i < len; i++) {\n    var interval = intervals[i];\n    if (\n      (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(start) || interval.start.equals(start)) &&\n      (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(stop) || interval.stop.equals(stop)) &&\n      (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(isStartIncluded) ||\n        interval.isStartIncluded === isStartIncluded) &&\n      (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(isStopIncluded) || interval.isStopIncluded === isStopIncluded)\n    ) {\n      return intervals[i];\n    }\n  }\n  return undefined;\n};\n\n/**\n * Adds an interval to the collection, merging intervals that contain the same data and\n * splitting intervals of different data as needed in order to maintain a non-overlapping collection.\n * The data in the new interval takes precedence over any existing intervals in the collection.\n *\n * @param {TimeInterval} interval The interval to add.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n */\nTimeIntervalCollection.prototype.addInterval = function (\n  interval,\n  dataComparer\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(interval)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("interval is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (interval.isEmpty) {\n    return;\n  }\n\n  var intervals = this._intervals;\n\n  // Handle the common case quickly: we\'re adding a new interval which is after all existing intervals.\n  if (\n    intervals.length === 0 ||\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(interval.start, intervals[intervals.length - 1].stop)\n  ) {\n    intervals.push(interval);\n    this._changedEvent.raiseEvent(this);\n    return;\n  }\n\n  // Keep the list sorted by the start date\n  var index = (0,_binarySearch_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(intervals, interval, compareIntervalStartTimes);\n  if (index < 0) {\n    index = ~index;\n  } else {\n    // interval\'s start date exactly equals the start date of at least one interval in the collection.\n    // It could actually equal the start date of two intervals if one of them does not actually\n    // include the date.  In that case, the binary search could have found either.  We need to\n    // look at the surrounding intervals and their IsStartIncluded properties in order to make sure\n    // we\'re working with the correct interval.\n\n    // eslint-disable-next-line no-lonely-if\n    if (\n      index > 0 &&\n      interval.isStartIncluded &&\n      intervals[index - 1].isStartIncluded &&\n      intervals[index - 1].start.equals(interval.start)\n    ) {\n      --index;\n    } else if (\n      index < intervals.length &&\n      !interval.isStartIncluded &&\n      intervals[index].isStartIncluded &&\n      intervals[index].start.equals(interval.start)\n    ) {\n      ++index;\n    }\n  }\n\n  var comparison;\n  if (index > 0) {\n    // Not the first thing in the list, so see if the interval before this one\n    // overlaps this one.\n\n    comparison = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].compare */ .Z.compare(intervals[index - 1].stop, interval.start);\n    if (\n      comparison > 0 ||\n      (comparison === 0 &&\n        (intervals[index - 1].isStopIncluded || interval.isStartIncluded))\n    ) {\n      // There is an overlap\n      if (\n        (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataComparer)\n          ? dataComparer(intervals[index - 1].data, interval.data)\n          : intervals[index - 1].data === interval.data\n      ) {\n        // Overlapping intervals have the same data, so combine them\n        if (_JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(interval.stop, intervals[index - 1].stop)) {\n          interval = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n            start: intervals[index - 1].start,\n            stop: interval.stop,\n            isStartIncluded: intervals[index - 1].isStartIncluded,\n            isStopIncluded: interval.isStopIncluded,\n            data: interval.data,\n          });\n        } else {\n          interval = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n            start: intervals[index - 1].start,\n            stop: intervals[index - 1].stop,\n            isStartIncluded: intervals[index - 1].isStartIncluded,\n            isStopIncluded:\n              intervals[index - 1].isStopIncluded ||\n              (interval.stop.equals(intervals[index - 1].stop) &&\n                interval.isStopIncluded),\n            data: interval.data,\n          });\n        }\n        intervals.splice(index - 1, 1);\n        --index;\n      } else {\n        // Overlapping intervals have different data.  The new interval\n        // being added \'wins\' so truncate the previous interval.\n        // If the existing interval extends past the end of the new one,\n        // split the existing interval into two intervals.\n        comparison = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].compare */ .Z.compare(\n          intervals[index - 1].stop,\n          interval.stop\n        );\n        if (\n          comparison > 0 ||\n          (comparison === 0 &&\n            intervals[index - 1].isStopIncluded &&\n            !interval.isStopIncluded)\n        ) {\n          intervals.splice(\n            index,\n            0,\n            new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n              start: interval.stop,\n              stop: intervals[index - 1].stop,\n              isStartIncluded: !interval.isStopIncluded,\n              isStopIncluded: intervals[index - 1].isStopIncluded,\n              data: intervals[index - 1].data,\n            })\n          );\n        }\n        intervals[index - 1] = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          start: intervals[index - 1].start,\n          stop: interval.start,\n          isStartIncluded: intervals[index - 1].isStartIncluded,\n          isStopIncluded: !interval.isStartIncluded,\n          data: intervals[index - 1].data,\n        });\n      }\n    }\n  }\n\n  while (index < intervals.length) {\n    // Not the last thing in the list, so see if the intervals after this one overlap this one.\n    comparison = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].compare */ .Z.compare(interval.stop, intervals[index].start);\n    if (\n      comparison > 0 ||\n      (comparison === 0 &&\n        (interval.isStopIncluded || intervals[index].isStartIncluded))\n    ) {\n      // There is an overlap\n      if (\n        (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataComparer)\n          ? dataComparer(intervals[index].data, interval.data)\n          : intervals[index].data === interval.data\n      ) {\n        // Overlapping intervals have the same data, so combine them\n        interval = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          start: interval.start,\n          stop: _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(intervals[index].stop, interval.stop)\n            ? intervals[index].stop\n            : interval.stop,\n          isStartIncluded: interval.isStartIncluded,\n          isStopIncluded: _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(\n            intervals[index].stop,\n            interval.stop\n          )\n            ? intervals[index].isStopIncluded\n            : interval.isStopIncluded,\n          data: interval.data,\n        });\n        intervals.splice(index, 1);\n      } else {\n        // Overlapping intervals have different data.  The new interval\n        // being added \'wins\' so truncate the next interval.\n        intervals[index] = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          start: interval.stop,\n          stop: intervals[index].stop,\n          isStartIncluded: !interval.isStopIncluded,\n          isStopIncluded: intervals[index].isStopIncluded,\n          data: intervals[index].data,\n        });\n\n        if (intervals[index].isEmpty) {\n          intervals.splice(index, 1);\n        } else {\n          // Found a partial span, so it is not possible for the next\n          // interval to be spanned at all.  Stop looking.\n          break;\n        }\n      }\n    } else {\n      // Found the last one we\'re spanning, so stop looking.\n      break;\n    }\n  }\n\n  // Add the new interval\n  intervals.splice(index, 0, interval);\n  this._changedEvent.raiseEvent(this);\n};\n\n/**\n * Removes the specified interval from this interval collection, creating a hole over the specified interval.\n * The data property of the input interval is ignored.\n *\n * @param {TimeInterval} interval The interval to remove.\n * @returns {Boolean} <code>true</code> if the interval was removed, <code>false</code> if no part of the interval was in the collection.\n */\nTimeIntervalCollection.prototype.removeInterval = function (interval) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(interval)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("interval is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (interval.isEmpty) {\n    return false;\n  }\n\n  var intervals = this._intervals;\n\n  var index = (0,_binarySearch_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(intervals, interval, compareIntervalStartTimes);\n  if (index < 0) {\n    index = ~index;\n  }\n\n  var result = false;\n\n  // Check for truncation of the end of the previous interval.\n  if (\n    index > 0 &&\n    (_JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(intervals[index - 1].stop, interval.start) ||\n      (intervals[index - 1].stop.equals(interval.start) &&\n        intervals[index - 1].isStopIncluded &&\n        interval.isStartIncluded))\n  ) {\n    result = true;\n\n    if (\n      _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(intervals[index - 1].stop, interval.stop) ||\n      (intervals[index - 1].isStopIncluded &&\n        !interval.isStopIncluded &&\n        intervals[index - 1].stop.equals(interval.stop))\n    ) {\n      // Break the existing interval into two pieces\n      intervals.splice(\n        index,\n        0,\n        new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          start: interval.stop,\n          stop: intervals[index - 1].stop,\n          isStartIncluded: !interval.isStopIncluded,\n          isStopIncluded: intervals[index - 1].isStopIncluded,\n          data: intervals[index - 1].data,\n        })\n      );\n    }\n    intervals[index - 1] = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      start: intervals[index - 1].start,\n      stop: interval.start,\n      isStartIncluded: intervals[index - 1].isStartIncluded,\n      isStopIncluded: !interval.isStartIncluded,\n      data: intervals[index - 1].data,\n    });\n  }\n\n  // Check if the Start of the current interval should remain because interval.start is the same but\n  // it is not included.\n  if (\n    index < intervals.length &&\n    !interval.isStartIncluded &&\n    intervals[index].isStartIncluded &&\n    interval.start.equals(intervals[index].start)\n  ) {\n    result = true;\n\n    intervals.splice(\n      index,\n      0,\n      new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n        start: intervals[index].start,\n        stop: intervals[index].start,\n        isStartIncluded: true,\n        isStopIncluded: true,\n        data: intervals[index].data,\n      })\n    );\n    ++index;\n  }\n\n  // Remove any intervals that are completely overlapped by the input interval.\n  while (\n    index < intervals.length &&\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(interval.stop, intervals[index].stop)\n  ) {\n    result = true;\n    intervals.splice(index, 1);\n  }\n\n  // Check for the case where the input interval ends on the same date\n  // as an existing interval.\n  if (index < intervals.length && interval.stop.equals(intervals[index].stop)) {\n    result = true;\n\n    if (!interval.isStopIncluded && intervals[index].isStopIncluded) {\n      // Last point of interval should remain because the stop date is included in\n      // the existing interval but is not included in the input interval.\n      if (\n        index + 1 < intervals.length &&\n        intervals[index + 1].start.equals(interval.stop) &&\n        intervals[index].data === intervals[index + 1].data\n      ) {\n        // Combine single point with the next interval\n        intervals.splice(index, 1);\n        intervals[index] = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          start: intervals[index].start,\n          stop: intervals[index].stop,\n          isStartIncluded: true,\n          isStopIncluded: intervals[index].isStopIncluded,\n          data: intervals[index].data,\n        });\n      } else {\n        intervals[index] = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          start: interval.stop,\n          stop: interval.stop,\n          isStartIncluded: true,\n          isStopIncluded: true,\n          data: intervals[index].data,\n        });\n      }\n    } else {\n      // Interval is completely overlapped\n      intervals.splice(index, 1);\n    }\n  }\n\n  // Truncate any partially-overlapped intervals.\n  if (\n    index < intervals.length &&\n    (_JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].greaterThan */ .Z.greaterThan(interval.stop, intervals[index].start) ||\n      (interval.stop.equals(intervals[index].start) &&\n        interval.isStopIncluded &&\n        intervals[index].isStartIncluded))\n  ) {\n    result = true;\n    intervals[index] = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      start: interval.stop,\n      stop: intervals[index].stop,\n      isStartIncluded: !interval.isStopIncluded,\n      isStopIncluded: intervals[index].isStopIncluded,\n      data: intervals[index].data,\n    });\n  }\n\n  if (result) {\n    this._changedEvent.raiseEvent(this);\n  }\n\n  return result;\n};\n\n/**\n * Creates a new instance that is the intersection of this collection and the provided collection.\n *\n * @param {TimeIntervalCollection} other The collection to intersect with.\n * @param {TimeInterval.DataComparer} [dataComparer] A function which compares the data of the two intervals.  If omitted, reference equality is used.\n * @param {TimeInterval.MergeCallback} [mergeCallback] A function which merges the data of the two intervals. If omitted, the data from the left interval will be used.\n * @returns {TimeIntervalCollection} A new TimeIntervalCollection which is the intersection of this collection and the provided collection.\n */\nTimeIntervalCollection.prototype.intersect = function (\n  other,\n  dataComparer,\n  mergeCallback\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(other)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("other is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var result = new TimeIntervalCollection();\n  var left = 0;\n  var right = 0;\n  var intervals = this._intervals;\n  var otherIntervals = other._intervals;\n\n  while (left < intervals.length && right < otherIntervals.length) {\n    var leftInterval = intervals[left];\n    var rightInterval = otherIntervals[right];\n    if (_JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].lessThan */ .Z.lessThan(leftInterval.stop, rightInterval.start)) {\n      ++left;\n    } else if (_JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].lessThan */ .Z.lessThan(rightInterval.stop, leftInterval.start)) {\n      ++right;\n    } else {\n      // The following will return an intersection whose data is \'merged\' if the callback is defined\n      if (\n        (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(mergeCallback) ||\n        ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataComparer) &&\n          dataComparer(leftInterval.data, rightInterval.data)) ||\n        (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataComparer) && rightInterval.data === leftInterval.data)\n      ) {\n        var intersection = _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].intersect */ .Z.intersect(\n          leftInterval,\n          rightInterval,\n          new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(),\n          mergeCallback\n        );\n        if (!intersection.isEmpty) {\n          // Since we start with an empty collection for \'result\', and there are no overlapping intervals in \'this\' (as a rule),\n          // the \'intersection\' will never overlap with a previous interval in \'result\'.  So, no need to do any additional \'merging\'.\n          result.addInterval(intersection, dataComparer);\n        }\n      }\n\n      if (\n        _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].lessThan */ .Z.lessThan(leftInterval.stop, rightInterval.stop) ||\n        (leftInterval.stop.equals(rightInterval.stop) &&\n          !leftInterval.isStopIncluded &&\n          rightInterval.isStopIncluded)\n      ) {\n        ++left;\n      } else {\n        ++right;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Creates a new instance from a JulianDate array.\n *\n * @param {Object} options Object with the following properties:\n * @param {JulianDate[]} options.julianDates An array of ISO 8601 dates.\n * @param {Boolean} [options.isStartIncluded=true] <code>true</code> if start time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded=true] <code>true</code> if stop time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.leadingInterval=false] <code>true</code> if you want to add a interval from Iso8601.MINIMUM_VALUE to start time,  <code>false</code> otherwise.\n * @param {Boolean} [options.trailingInterval=false] <code>true</code> if you want to add a interval from stop time to Iso8601.MAXIMUM_VALUE,  <code>false</code> otherwise.\n * @param {Function} [options.dataCallback] A function that will be return the data that is called with each interval before it is added to the collection. If unspecified, the data will be the index in the collection.\n * @param {TimeIntervalCollection} [result] An existing instance to use for the result.\n * @returns {TimeIntervalCollection} The modified result parameter or a new instance if none was provided.\n */\nTimeIntervalCollection.fromJulianDateArray = function (options, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.julianDates)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.iso8601Array is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(result)) {\n    result = new TimeIntervalCollection();\n  }\n\n  var julianDates = options.julianDates;\n  var length = julianDates.length;\n  var dataCallback = options.dataCallback;\n\n  var isStartIncluded = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.isStartIncluded, true);\n  var isStopIncluded = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.isStopIncluded, true);\n  var leadingInterval = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.leadingInterval, false);\n  var trailingInterval = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.trailingInterval, false);\n  var interval;\n\n  // Add a default interval, which will only end up being used up to first interval\n  var startIndex = 0;\n  if (leadingInterval) {\n    ++startIndex;\n    interval = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      start: _Iso8601_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE,\n      stop: julianDates[0],\n      isStartIncluded: true,\n      isStopIncluded: !isStartIncluded,\n    });\n    interval.data = (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataCallback)\n      ? dataCallback(interval, result.length)\n      : result.length;\n    result.addInterval(interval);\n  }\n\n  for (var i = 0; i < length - 1; ++i) {\n    var startDate = julianDates[i];\n    var endDate = julianDates[i + 1];\n\n    interval = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      start: startDate,\n      stop: endDate,\n      isStartIncluded: result.length === startIndex ? isStartIncluded : true,\n      isStopIncluded: i === length - 2 ? isStopIncluded : false,\n    });\n    interval.data = (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataCallback)\n      ? dataCallback(interval, result.length)\n      : result.length;\n    result.addInterval(interval);\n\n    startDate = endDate;\n  }\n\n  if (trailingInterval) {\n    interval = new _TimeInterval_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      start: julianDates[length - 1],\n      stop: _Iso8601_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].MAXIMUM_VALUE */ .Z.MAXIMUM_VALUE,\n      isStartIncluded: !isStopIncluded,\n      isStopIncluded: true,\n    });\n    interval.data = (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(dataCallback)\n      ? dataCallback(interval, result.length)\n      : result.length;\n    result.addInterval(interval);\n  }\n\n  return result;\n};\n\nvar scratchGregorianDate = new _GregorianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z();\nvar monthLengths = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * Adds duration represented as a GregorianDate to a JulianDate\n *\n * @param {JulianDate} julianDate The date.\n * @param {GregorianDate} duration An duration represented as a GregorianDate.\n * @param {JulianDate} result An existing instance to use for the result.\n * @returns {JulianDate} The modified result parameter.\n *\n * @private\n */\nfunction addToDate(julianDate, duration, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(result)) {\n    result = new _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n  }\n  _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].toGregorianDate */ .Z.toGregorianDate(julianDate, scratchGregorianDate);\n\n  var millisecond = scratchGregorianDate.millisecond + duration.millisecond;\n  var second = scratchGregorianDate.second + duration.second;\n  var minute = scratchGregorianDate.minute + duration.minute;\n  var hour = scratchGregorianDate.hour + duration.hour;\n  var day = scratchGregorianDate.day + duration.day;\n  var month = scratchGregorianDate.month + duration.month;\n  var year = scratchGregorianDate.year + duration.year;\n\n  if (millisecond >= 1000) {\n    second += Math.floor(millisecond / 1000);\n    millisecond = millisecond % 1000;\n  }\n\n  if (second >= 60) {\n    minute += Math.floor(second / 60);\n    second = second % 60;\n  }\n\n  if (minute >= 60) {\n    hour += Math.floor(minute / 60);\n    minute = minute % 60;\n  }\n\n  if (hour >= 24) {\n    day += Math.floor(hour / 24);\n    hour = hour % 24;\n  }\n\n  // If days is greater than the month\'s length we need to remove those number of days,\n  //  readjust month and year and repeat until days is less than the month\'s length.\n  monthLengths[2] = (0,_isLeapYear_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(year) ? 29 : 28;\n  while (day > monthLengths[month] || month >= 13) {\n    if (day > monthLengths[month]) {\n      day -= monthLengths[month];\n      ++month;\n    }\n\n    if (month >= 13) {\n      --month;\n      year += Math.floor(month / 12);\n      month = month % 12;\n      ++month;\n    }\n\n    monthLengths[2] = (0,_isLeapYear_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(year) ? 29 : 28;\n  }\n\n  scratchGregorianDate.millisecond = millisecond;\n  scratchGregorianDate.second = second;\n  scratchGregorianDate.minute = minute;\n  scratchGregorianDate.hour = hour;\n  scratchGregorianDate.day = day;\n  scratchGregorianDate.month = month;\n  scratchGregorianDate.year = year;\n\n  return _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromGregorianDate */ .Z.fromGregorianDate(scratchGregorianDate, result);\n}\n\nvar scratchJulianDate = new _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\nvar durationRegex = /P(?:([\\d.,]+)Y)?(?:([\\d.,]+)M)?(?:([\\d.,]+)W)?(?:([\\d.,]+)D)?(?:T(?:([\\d.,]+)H)?(?:([\\d.,]+)M)?(?:([\\d.,]+)S)?)?/;\n\n/**\n * Parses ISO8601 duration string\n *\n * @param {String} iso8601 An ISO 8601 duration.\n * @param {GregorianDate} result An existing instance to use for the result.\n * @returns {Boolean} True is parsing succeeded, false otherwise\n *\n * @private\n */\nfunction parseDuration(iso8601, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(iso8601) || iso8601.length === 0) {\n    return false;\n  }\n\n  // Reset object\n  result.year = 0;\n  result.month = 0;\n  result.day = 0;\n  result.hour = 0;\n  result.minute = 0;\n  result.second = 0;\n  result.millisecond = 0;\n\n  if (iso8601[0] === "P") {\n    var matches = iso8601.match(durationRegex);\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches)) {\n      return false;\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[1])) {\n      // Years\n      result.year = Number(matches[1].replace(",", "."));\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[2])) {\n      // Months\n      result.month = Number(matches[2].replace(",", "."));\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[3])) {\n      // Weeks\n      result.day = Number(matches[3].replace(",", ".")) * 7;\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[4])) {\n      // Days\n      result.day += Number(matches[4].replace(",", "."));\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[5])) {\n      // Hours\n      result.hour = Number(matches[5].replace(",", "."));\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[6])) {\n      // Weeks\n      result.minute = Number(matches[6].replace(",", "."));\n    }\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(matches[7])) {\n      // Seconds\n      var seconds = Number(matches[7].replace(",", "."));\n      result.second = Math.floor(seconds);\n      result.millisecond = (seconds % 1) * 1000;\n    }\n  } else {\n    // They can technically specify the duration as a normal date with some caveats. Try our best to load it.\n    if (iso8601[iso8601.length - 1] !== "Z") {\n      // It\'s not a date, its a duration, so it always has to be UTC\n      iso8601 += "Z";\n    }\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].toGregorianDate */ .Z.toGregorianDate(\n      _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromIso8601 */ .Z.fromIso8601(iso8601, scratchJulianDate),\n      result\n    );\n  }\n\n  // A duration of 0 will cause an infinite loop, so just make sure something is non-zero\n  return (\n    result.year ||\n    result.month ||\n    result.day ||\n    result.hour ||\n    result.minute ||\n    result.second ||\n    result.millisecond\n  );\n}\n\nvar scratchDuration = new _GregorianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z();\n/**\n * Creates a new instance from an {@link http://en.wikipedia.org/wiki/ISO_8601|ISO 8601} time interval (start/end/duration).\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.iso8601 An ISO 8601 interval.\n * @param {Boolean} [options.isStartIncluded=true] <code>true</code> if start time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded=true] <code>true</code> if stop time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.leadingInterval=false] <code>true</code> if you want to add a interval from Iso8601.MINIMUM_VALUE to start time,  <code>false</code> otherwise.\n * @param {Boolean} [options.trailingInterval=false] <code>true</code> if you want to add a interval from stop time to Iso8601.MAXIMUM_VALUE,  <code>false</code> otherwise.\n * @param {Function} [options.dataCallback] A function that will be return the data that is called with each interval before it is added to the collection. If unspecified, the data will be the index in the collection.\n * @param {TimeIntervalCollection} [result] An existing instance to use for the result.\n * @returns {TimeIntervalCollection} The modified result parameter or a new instance if none was provided.\n */\nTimeIntervalCollection.fromIso8601 = function (options, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.iso8601)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.iso8601 is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var dates = options.iso8601.split("/");\n  var start = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromIso8601 */ .Z.fromIso8601(dates[0]);\n  var stop = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromIso8601 */ .Z.fromIso8601(dates[1]);\n  var julianDates = [];\n\n  if (!parseDuration(dates[2], scratchDuration)) {\n    julianDates.push(start, stop);\n  } else {\n    var date = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(start);\n    julianDates.push(date);\n    while (_JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].compare */ .Z.compare(date, stop) < 0) {\n      date = addToDate(date, scratchDuration);\n      var afterStop = _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].compare */ .Z.compare(stop, date) <= 0;\n      if (afterStop) {\n        _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(stop, date);\n      }\n\n      julianDates.push(date);\n    }\n  }\n\n  return TimeIntervalCollection.fromJulianDateArray(\n    {\n      julianDates: julianDates,\n      isStartIncluded: options.isStartIncluded,\n      isStopIncluded: options.isStopIncluded,\n      leadingInterval: options.leadingInterval,\n      trailingInterval: options.trailingInterval,\n      dataCallback: options.dataCallback,\n    },\n    result\n  );\n};\n\n/**\n * Creates a new instance from a {@link http://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date array.\n *\n * @param {Object} options Object with the following properties:\n * @param {String[]} options.iso8601Dates An array of ISO 8601 dates.\n * @param {Boolean} [options.isStartIncluded=true] <code>true</code> if start time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded=true] <code>true</code> if stop time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.leadingInterval=false] <code>true</code> if you want to add a interval from Iso8601.MINIMUM_VALUE to start time,  <code>false</code> otherwise.\n * @param {Boolean} [options.trailingInterval=false] <code>true</code> if you want to add a interval from stop time to Iso8601.MAXIMUM_VALUE,  <code>false</code> otherwise.\n * @param {Function} [options.dataCallback] A function that will be return the data that is called with each interval before it is added to the collection. If unspecified, the data will be the index in the collection.\n * @param {TimeIntervalCollection} [result] An existing instance to use for the result.\n * @returns {TimeIntervalCollection} The modified result parameter or a new instance if none was provided.\n */\nTimeIntervalCollection.fromIso8601DateArray = function (options, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.iso8601Dates)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.iso8601Dates is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  return TimeIntervalCollection.fromJulianDateArray(\n    {\n      julianDates: options.iso8601Dates.map(function (date) {\n        return _JulianDate_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromIso8601 */ .Z.fromIso8601(date);\n      }),\n      isStartIncluded: options.isStartIncluded,\n      isStopIncluded: options.isStopIncluded,\n      leadingInterval: options.leadingInterval,\n      trailingInterval: options.trailingInterval,\n      dataCallback: options.dataCallback,\n    },\n    result\n  );\n};\n\n/**\n * Creates a new instance from a {@link http://en.wikipedia.org/wiki/ISO_8601|ISO 8601} duration array.\n *\n * @param {Object} options Object with the following properties:\n * @param {JulianDate} options.epoch An date that the durations are relative to.\n * @param {String} options.iso8601Durations An array of ISO 8601 durations.\n * @param {Boolean} [options.relativeToPrevious=false] <code>true</code> if durations are relative to previous date, <code>false</code> if always relative to the epoch.\n * @param {Boolean} [options.isStartIncluded=true] <code>true</code> if start time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.isStopIncluded=true] <code>true</code> if stop time is included in the interval, <code>false</code> otherwise.\n * @param {Boolean} [options.leadingInterval=false] <code>true</code> if you want to add a interval from Iso8601.MINIMUM_VALUE to start time,  <code>false</code> otherwise.\n * @param {Boolean} [options.trailingInterval=false] <code>true</code> if you want to add a interval from stop time to Iso8601.MAXIMUM_VALUE,  <code>false</code> otherwise.\n * @param {Function} [options.dataCallback] A function that will be return the data that is called with each interval before it is added to the collection. If unspecified, the data will be the index in the collection.\n * @param {TimeIntervalCollection} [result] An existing instance to use for the result.\n * @returns {TimeIntervalCollection} The modified result parameter or a new instance if none was provided.\n */\nTimeIntervalCollection.fromIso8601DurationArray = function (options, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.epoch)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.epoch is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.iso8601Durations)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.iso8601Durations is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var epoch = options.epoch;\n  var iso8601Durations = options.iso8601Durations;\n  var relativeToPrevious = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.relativeToPrevious, false);\n  var julianDates = [];\n  var date, previousDate;\n\n  var length = iso8601Durations.length;\n  for (var i = 0; i < length; ++i) {\n    // Allow a duration of 0 on the first iteration, because then it is just the epoch\n    if (parseDuration(iso8601Durations[i], scratchDuration) || i === 0) {\n      if (relativeToPrevious && (0,_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(previousDate)) {\n        date = addToDate(previousDate, scratchDuration);\n      } else {\n        date = addToDate(epoch, scratchDuration);\n      }\n      julianDates.push(date);\n      previousDate = date;\n    }\n  }\n\n  return TimeIntervalCollection.fromJulianDateArray(\n    {\n      julianDates: julianDates,\n      isStartIncluded: options.isStartIncluded,\n      isStopIncluded: options.isStopIncluded,\n      leadingInterval: options.leadingInterval,\n      trailingInterval: options.trailingInterval,\n      dataCallback: options.dataCallback,\n    },\n    result\n  );\n};\n/* harmony default export */ __webpack_exports__["Z"] = (TimeIntervalCollection);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46026\n')},13098:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Provides the type of time standards which JulianDate can take as input.\n *\n * @enum {Number}\n *\n * @see JulianDate\n */\nvar TimeStandard = {\n  /**\n   * Represents the coordinated Universal Time (UTC) time standard.\n   *\n   * UTC is related to TAI according to the relationship\n   * <code>UTC = TAI - deltaT</code> where <code>deltaT</code> is the number of leap\n   * seconds which have been introduced as of the time in TAI.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UTC: 0,\n\n  /**\n   * Represents the International Atomic Time (TAI) time standard.\n   * TAI is the principal time standard to which the other time standards are related.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TAI: 1,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(TimeStandard));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwOTguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsMkJBQTJCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9UaW1lU3RhbmRhcmQuanM/NDE1OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb3ZpZGVzIHRoZSB0eXBlIG9mIHRpbWUgc3RhbmRhcmRzIHdoaWNoIEp1bGlhbkRhdGUgY2FuIHRha2UgYXMgaW5wdXQuXG4gKlxuICogQGVudW0ge051bWJlcn1cbiAqXG4gKiBAc2VlIEp1bGlhbkRhdGVcbiAqL1xudmFyIFRpbWVTdGFuZGFyZCA9IHtcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgdGhlIGNvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpIHRpbWUgc3RhbmRhcmQuXG4gICAqXG4gICAqIFVUQyBpcyByZWxhdGVkIHRvIFRBSSBhY2NvcmRpbmcgdG8gdGhlIHJlbGF0aW9uc2hpcFxuICAgKiA8Y29kZT5VVEMgPSBUQUkgLSBkZWx0YVQ8L2NvZGU+IHdoZXJlIDxjb2RlPmRlbHRhVDwvY29kZT4gaXMgdGhlIG51bWJlciBvZiBsZWFwXG4gICAqIHNlY29uZHMgd2hpY2ggaGF2ZSBiZWVuIGludHJvZHVjZWQgYXMgb2YgdGhlIHRpbWUgaW4gVEFJLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFVUQzogMCxcblxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgSW50ZXJuYXRpb25hbCBBdG9taWMgVGltZSAoVEFJKSB0aW1lIHN0YW5kYXJkLlxuICAgKiBUQUkgaXMgdGhlIHByaW5jaXBhbCB0aW1lIHN0YW5kYXJkIHRvIHdoaWNoIHRoZSBvdGhlciB0aW1lIHN0YW5kYXJkcyBhcmUgcmVsYXRlZC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBUQUk6IDEsXG59O1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShUaW1lU3RhbmRhcmQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13098\n')},66965:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n\n\n\n\n/**\n * Encapsulates an algorithm to optimize triangles for the post\n * vertex-shader cache.  This is based on the 2007 SIGGRAPH paper\n * \'Fast Triangle Reordering for Vertex Locality and Reduced Overdraw.\'\n * The runtime is linear but several passes are made.\n *\n * @namespace Tipsify\n *\n * @see <a href=\'http://gfx.cs.princeton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf\'>\n * Fast Triangle Reordering for Vertex Locality and Reduced Overdraw</a>\n * by Sander, Nehab, and Barczak\n *\n * @private\n */\nvar Tipsify = {};\n\n/**\n * Calculates the average cache miss ratio (ACMR) for a given set of indices.\n *\n * @param {Object} options Object with the following properties:\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\n *                        in the vertex buffer that define the geometry\'s triangles.\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\n *                                     If not supplied, this value will be computed.\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\n * @returns {Number} The average cache miss ratio (ACMR).\n *\n * @exception {DeveloperError} indices length must be a multiple of three.\n * @exception {DeveloperError} cacheSize must be greater than two.\n *\n * @example\n * var indices = [0, 1, 2, 3, 4, 5];\n * var maxIndex = 5;\n * var cacheSize = 3;\n * var acmr = Cesium.Tipsify.calculateACMR({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\n */\nTipsify.calculateACMR = function (options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var indices = options.indices;\n  var maximumIndex = options.maximumIndex;\n  var cacheSize = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.cacheSize, 24);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(indices)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("indices is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var numIndices = indices.length;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (numIndices < 3 || numIndices % 3 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("indices length must be a multiple of three.");\n  }\n  if (maximumIndex <= 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("maximumIndex must be greater than zero.");\n  }\n  if (cacheSize < 3) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("cacheSize must be greater than two.");\n  }\n  //>>includeEnd(\'debug\');\n\n  // Compute the maximumIndex if not given\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(maximumIndex)) {\n    maximumIndex = 0;\n    var currentIndex = 0;\n    var intoIndices = indices[currentIndex];\n    while (currentIndex < numIndices) {\n      if (intoIndices > maximumIndex) {\n        maximumIndex = intoIndices;\n      }\n      ++currentIndex;\n      intoIndices = indices[currentIndex];\n    }\n  }\n\n  // Vertex time stamps\n  var vertexTimeStamps = [];\n  for (var i = 0; i < maximumIndex + 1; i++) {\n    vertexTimeStamps[i] = 0;\n  }\n\n  // Cache processing\n  var s = cacheSize + 1;\n  for (var j = 0; j < numIndices; ++j) {\n    if (s - vertexTimeStamps[indices[j]] > cacheSize) {\n      vertexTimeStamps[indices[j]] = s;\n      ++s;\n    }\n  }\n\n  return (s - cacheSize + 1) / (numIndices / 3);\n};\n\n/**\n * Optimizes triangles for the post-vertex shader cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\n *                        in the vertex buffer that define the geometry\'s triangles.\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\n *                                     If not supplied, this value will be computed.\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\n * @returns {Number[]} A list of the input indices in an optimized order.\n *\n * @exception {DeveloperError} indices length must be a multiple of three.\n * @exception {DeveloperError} cacheSize must be greater than two.\n *\n * @example\n * var indices = [0, 1, 2, 3, 4, 5];\n * var maxIndex = 5;\n * var cacheSize = 3;\n * var reorderedIndices = Cesium.Tipsify.tipsify({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\n */\nTipsify.tipsify = function (options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var indices = options.indices;\n  var maximumIndex = options.maximumIndex;\n  var cacheSize = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.cacheSize, 24);\n\n  var cursor;\n\n  function skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne) {\n    while (deadEnd.length >= 1) {\n      // while the stack is not empty\n      var d = deadEnd[deadEnd.length - 1]; // top of the stack\n      deadEnd.splice(deadEnd.length - 1, 1); // pop the stack\n\n      if (vertices[d].numLiveTriangles > 0) {\n        return d;\n      }\n    }\n\n    while (cursor < maximumIndexPlusOne) {\n      if (vertices[cursor].numLiveTriangles > 0) {\n        ++cursor;\n        return cursor - 1;\n      }\n      ++cursor;\n    }\n    return -1;\n  }\n\n  function getNextVertex(\n    indices,\n    cacheSize,\n    oneRing,\n    vertices,\n    s,\n    deadEnd,\n    maximumIndexPlusOne\n  ) {\n    var n = -1;\n    var p;\n    var m = -1;\n    var itOneRing = 0;\n    while (itOneRing < oneRing.length) {\n      var index = oneRing[itOneRing];\n      if (vertices[index].numLiveTriangles) {\n        p = 0;\n        if (\n          s -\n            vertices[index].timeStamp +\n            2 * vertices[index].numLiveTriangles <=\n          cacheSize\n        ) {\n          p = s - vertices[index].timeStamp;\n        }\n        if (p > m || m === -1) {\n          m = p;\n          n = index;\n        }\n      }\n      ++itOneRing;\n    }\n    if (n === -1) {\n      return skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne);\n    }\n    return n;\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(indices)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("indices is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var numIndices = indices.length;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (numIndices < 3 || numIndices % 3 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("indices length must be a multiple of three.");\n  }\n  if (maximumIndex <= 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("maximumIndex must be greater than zero.");\n  }\n  if (cacheSize < 3) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("cacheSize must be greater than two.");\n  }\n  //>>includeEnd(\'debug\');\n\n  // Determine maximum index\n  var maximumIndexPlusOne = 0;\n  var currentIndex = 0;\n  var intoIndices = indices[currentIndex];\n  var endIndex = numIndices;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(maximumIndex)) {\n    maximumIndexPlusOne = maximumIndex + 1;\n  } else {\n    while (currentIndex < endIndex) {\n      if (intoIndices > maximumIndexPlusOne) {\n        maximumIndexPlusOne = intoIndices;\n      }\n      ++currentIndex;\n      intoIndices = indices[currentIndex];\n    }\n    if (maximumIndexPlusOne === -1) {\n      return 0;\n    }\n    ++maximumIndexPlusOne;\n  }\n\n  // Vertices\n  var vertices = [];\n  var i;\n  for (i = 0; i < maximumIndexPlusOne; i++) {\n    vertices[i] = {\n      numLiveTriangles: 0,\n      timeStamp: 0,\n      vertexTriangles: [],\n    };\n  }\n  currentIndex = 0;\n  var triangle = 0;\n  while (currentIndex < endIndex) {\n    vertices[indices[currentIndex]].vertexTriangles.push(triangle);\n    ++vertices[indices[currentIndex]].numLiveTriangles;\n    vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);\n    ++vertices[indices[currentIndex + 1]].numLiveTriangles;\n    vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);\n    ++vertices[indices[currentIndex + 2]].numLiveTriangles;\n    ++triangle;\n    currentIndex += 3;\n  }\n\n  // Starting index\n  var f = 0;\n\n  // Time Stamp\n  var s = cacheSize + 1;\n  cursor = 1;\n\n  // Process\n  var oneRing = [];\n  var deadEnd = []; //Stack\n  var vertex;\n  var intoVertices;\n  var currentOutputIndex = 0;\n  var outputIndices = [];\n  var numTriangles = numIndices / 3;\n  var triangleEmitted = [];\n  for (i = 0; i < numTriangles; i++) {\n    triangleEmitted[i] = false;\n  }\n  var index;\n  var limit;\n  while (f !== -1) {\n    oneRing = [];\n    intoVertices = vertices[f];\n    limit = intoVertices.vertexTriangles.length;\n    for (var k = 0; k < limit; ++k) {\n      triangle = intoVertices.vertexTriangles[k];\n      if (!triangleEmitted[triangle]) {\n        triangleEmitted[triangle] = true;\n        currentIndex = triangle + triangle + triangle;\n        for (var j = 0; j < 3; ++j) {\n          // Set this index as a possible next index\n          index = indices[currentIndex];\n          oneRing.push(index);\n          deadEnd.push(index);\n\n          // Output index\n          outputIndices[currentOutputIndex] = index;\n          ++currentOutputIndex;\n\n          // Cache processing\n          vertex = vertices[index];\n          --vertex.numLiveTriangles;\n          if (s - vertex.timeStamp > cacheSize) {\n            vertex.timeStamp = s;\n            ++s;\n          }\n          ++currentIndex;\n        }\n      }\n    }\n    f = getNextVertex(\n      indices,\n      cacheSize,\n      oneRing,\n      vertices,\n      s,\n      deadEnd,\n      maximumIndexPlusOne\n    );\n  }\n\n  return outputIndices;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Tipsify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///66965\n')},95555:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _EarthOrientationParameters_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(13730);\n/* harmony import */ var _EarthOrientationParametersSample_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(22518);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(50491);\n/* harmony import */ var _HeadingPitchRoll_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(57674);\n/* harmony import */ var _Iau2006XysData_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(27846);\n/* harmony import */ var _Iau2006XysSample_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(50048);\n/* harmony import */ var _JulianDate_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(55293);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(99417);\n/* harmony import */ var _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(68201);\n/* harmony import */ var _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(72248);\n/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(87811);\n/* harmony import */ var _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(4877);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Contains functions for transforming positions to various reference frames.\n *\n * @namespace Transforms\n */\nvar Transforms = {};\n\nvar vectorProductLocalFrame = {\n  up: {\n    south: "east",\n    north: "west",\n    west: "south",\n    east: "north",\n  },\n  down: {\n    south: "west",\n    north: "east",\n    west: "north",\n    east: "south",\n  },\n  south: {\n    up: "west",\n    down: "east",\n    west: "down",\n    east: "up",\n  },\n  north: {\n    up: "east",\n    down: "west",\n    west: "up",\n    east: "down",\n  },\n  west: {\n    up: "north",\n    down: "south",\n    north: "down",\n    south: "up",\n  },\n  east: {\n    up: "south",\n    down: "north",\n    north: "up",\n    south: "down",\n  },\n};\n\nvar degeneratePositionLocalFrame = {\n  north: [-1, 0, 0],\n  east: [0, 1, 0],\n  up: [0, 0, 1],\n  south: [1, 0, 0],\n  west: [0, -1, 0],\n  down: [0, 0, -1],\n};\n\nvar localFrameToFixedFrameCache = {};\n\nvar scratchCalculateCartesian = {\n  east: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n  north: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n  up: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n  west: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n  south: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n  down: new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n};\nvar scratchFirstCartesian = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchSecondCartesian = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchThirdCartesian = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n/**\n * Generates a function that computes a 4x4 transformation matrix from a reference frame\n * centered at the provided origin to the provided ellipsoid\'s fixed reference frame.\n * @param  {String} firstAxis  name of the first axis of the local reference frame. Must be\n *  \'east\', \'north\', \'up\', \'west\', \'south\' or \'down\'.\n * @param  {String} secondAxis  name of the second axis of the local reference frame. Must be\n *  \'east\', \'north\', \'up\', \'west\', \'south\' or \'down\'.\n * @return {Transforms.LocalFrameToFixedFrame} The function that will computes a\n * 4x4 transformation matrix from a reference frame, with first axis and second axis compliant with the parameters,\n */\nTransforms.localFrameToFixedFrameGenerator = function (firstAxis, secondAxis) {\n  if (\n    !vectorProductLocalFrame.hasOwnProperty(firstAxis) ||\n    !vectorProductLocalFrame[firstAxis].hasOwnProperty(secondAxis)\n  ) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "firstAxis and secondAxis must be east, north, up, west, south or down."\n    );\n  }\n  var thirdAxis = vectorProductLocalFrame[firstAxis][secondAxis];\n\n  /**\n   * Computes a 4x4 transformation matrix from a reference frame\n   * centered at the provided origin to the provided ellipsoid\'s fixed reference frame.\n   * @callback Transforms.LocalFrameToFixedFrame\n   * @param {Cartesian3} origin The center point of the local reference frame.\n   * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n   * @param {Matrix4} [result] The object onto which to store the result.\n   * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\n   */\n  var resultat;\n  var hashAxis = firstAxis + secondAxis;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(localFrameToFixedFrameCache[hashAxis])) {\n    resultat = localFrameToFixedFrameCache[hashAxis];\n  } else {\n    resultat = function (origin, ellipsoid, result) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(origin)) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("origin is required.");\n      }\n      //>>includeEnd(\'debug\');\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n        result = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\n      }\n      if (\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(origin, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO, _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].EPSILON14 */ .Z.EPSILON14)\n      ) {\n        // If x, y, and z are zero, use the degenerate local frame, which is a special case\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n          degeneratePositionLocalFrame[firstAxis],\n          0,\n          scratchFirstCartesian\n        );\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n          degeneratePositionLocalFrame[secondAxis],\n          0,\n          scratchSecondCartesian\n        );\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n          degeneratePositionLocalFrame[thirdAxis],\n          0,\n          scratchThirdCartesian\n        );\n      } else if (\n        _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(origin.x, 0.0, _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].EPSILON14 */ .Z.EPSILON14) &&\n        _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(origin.y, 0.0, _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].EPSILON14 */ .Z.EPSILON14)\n      ) {\n        // If x and y are zero, assume origin is at a pole, which is a special case.\n        var sign = _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].sign */ .Z.sign(origin.z);\n\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n          degeneratePositionLocalFrame[firstAxis],\n          0,\n          scratchFirstCartesian\n        );\n        if (firstAxis !== "east" && firstAxis !== "west") {\n          _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n            scratchFirstCartesian,\n            sign,\n            scratchFirstCartesian\n          );\n        }\n\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n          degeneratePositionLocalFrame[secondAxis],\n          0,\n          scratchSecondCartesian\n        );\n        if (secondAxis !== "east" && secondAxis !== "west") {\n          _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n            scratchSecondCartesian,\n            sign,\n            scratchSecondCartesian\n          );\n        }\n\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n          degeneratePositionLocalFrame[thirdAxis],\n          0,\n          scratchThirdCartesian\n        );\n        if (thirdAxis !== "east" && thirdAxis !== "west") {\n          _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n            scratchThirdCartesian,\n            sign,\n            scratchThirdCartesian\n          );\n        }\n      } else {\n        ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].WGS84 */ .Z.WGS84);\n        ellipsoid.geodeticSurfaceNormal(origin, scratchCalculateCartesian.up);\n\n        var up = scratchCalculateCartesian.up;\n        var east = scratchCalculateCartesian.east;\n        east.x = -origin.y;\n        east.y = origin.x;\n        east.z = 0.0;\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(east, scratchCalculateCartesian.east);\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].cross */ .Z.cross(up, east, scratchCalculateCartesian.north);\n\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n          scratchCalculateCartesian.up,\n          -1,\n          scratchCalculateCartesian.down\n        );\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n          scratchCalculateCartesian.east,\n          -1,\n          scratchCalculateCartesian.west\n        );\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n          scratchCalculateCartesian.north,\n          -1,\n          scratchCalculateCartesian.south\n        );\n\n        scratchFirstCartesian = scratchCalculateCartesian[firstAxis];\n        scratchSecondCartesian = scratchCalculateCartesian[secondAxis];\n        scratchThirdCartesian = scratchCalculateCartesian[thirdAxis];\n      }\n      result[0] = scratchFirstCartesian.x;\n      result[1] = scratchFirstCartesian.y;\n      result[2] = scratchFirstCartesian.z;\n      result[3] = 0.0;\n      result[4] = scratchSecondCartesian.x;\n      result[5] = scratchSecondCartesian.y;\n      result[6] = scratchSecondCartesian.z;\n      result[7] = 0.0;\n      result[8] = scratchThirdCartesian.x;\n      result[9] = scratchThirdCartesian.y;\n      result[10] = scratchThirdCartesian.z;\n      result[11] = 0.0;\n      result[12] = origin.x;\n      result[13] = origin.y;\n      result[14] = origin.z;\n      result[15] = 1.0;\n      return result;\n    };\n    localFrameToFixedFrameCache[hashAxis] = resultat;\n  }\n  return resultat;\n};\n\n/**\n * Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\n * centered at the provided origin to the provided ellipsoid\'s fixed reference frame.\n * The local axes are defined as:\n * <ul>\n * <li>The <code>x</code> axis points in the local east direction.</li>\n * <li>The <code>y</code> axis points in the local north direction.</li>\n * <li>The <code>z</code> axis points in the direction of the ellipsoid surface normal which passes through the position.</li>\n * </ul>\n *\n * @function\n * @param {Cartesian3} origin The center point of the local reference frame.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\n *\n * @example\n * // Get the transform from local east-north-up at cartographic (0.0, 0.0) to Earth\'s fixed frame.\n * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var transform = Cesium.Transforms.eastNorthUpToFixedFrame(center);\n */\nTransforms.eastNorthUpToFixedFrame = Transforms.localFrameToFixedFrameGenerator(\n  "east",\n  "north"\n);\n\n/**\n * Computes a 4x4 transformation matrix from a reference frame with an north-east-down axes\n * centered at the provided origin to the provided ellipsoid\'s fixed reference frame.\n * The local axes are defined as:\n * <ul>\n * <li>The <code>x</code> axis points in the local north direction.</li>\n * <li>The <code>y</code> axis points in the local east direction.</li>\n * <li>The <code>z</code> axis points in the opposite direction of the ellipsoid surface normal which passes through the position.</li>\n * </ul>\n *\n * @function\n * @param {Cartesian3} origin The center point of the local reference frame.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\n *\n * @example\n * // Get the transform from local north-east-down at cartographic (0.0, 0.0) to Earth\'s fixed frame.\n * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var transform = Cesium.Transforms.northEastDownToFixedFrame(center);\n */\nTransforms.northEastDownToFixedFrame = Transforms.localFrameToFixedFrameGenerator(\n  "north",\n  "east"\n);\n\n/**\n * Computes a 4x4 transformation matrix from a reference frame with an north-up-east axes\n * centered at the provided origin to the provided ellipsoid\'s fixed reference frame.\n * The local axes are defined as:\n * <ul>\n * <li>The <code>x</code> axis points in the local north direction.</li>\n * <li>The <code>y</code> axis points in the direction of the ellipsoid surface normal which passes through the position.</li>\n * <li>The <code>z</code> axis points in the local east direction.</li>\n * </ul>\n *\n * @function\n * @param {Cartesian3} origin The center point of the local reference frame.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\n *\n * @example\n * // Get the transform from local north-up-east at cartographic (0.0, 0.0) to Earth\'s fixed frame.\n * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var transform = Cesium.Transforms.northUpEastToFixedFrame(center);\n */\nTransforms.northUpEastToFixedFrame = Transforms.localFrameToFixedFrameGenerator(\n  "north",\n  "up"\n);\n\n/**\n * Computes a 4x4 transformation matrix from a reference frame with an north-west-up axes\n * centered at the provided origin to the provided ellipsoid\'s fixed reference frame.\n * The local axes are defined as:\n * <ul>\n * <li>The <code>x</code> axis points in the local north direction.</li>\n * <li>The <code>y</code> axis points in the local west direction.</li>\n * <li>The <code>z</code> axis points in the direction of the ellipsoid surface normal which passes through the position.</li>\n * </ul>\n *\n * @function\n * @param {Cartesian3} origin The center point of the local reference frame.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\n *\n * @example\n * // Get the transform from local north-West-Up at cartographic (0.0, 0.0) to Earth\'s fixed frame.\n * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var transform = Cesium.Transforms.northWestUpToFixedFrame(center);\n */\nTransforms.northWestUpToFixedFrame = Transforms.localFrameToFixedFrameGenerator(\n  "north",\n  "west"\n);\n\nvar scratchHPRQuaternion = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\nvar scratchScale = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0);\nvar scratchHPRMatrix4 = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\n\n/**\n * Computes a 4x4 transformation matrix from a reference frame with axes computed from the heading-pitch-roll angles\n * centered at the provided origin to the provided ellipsoid\'s fixed reference frame. Heading is the rotation from the local north\n * direction where a positive angle is increasing eastward. Pitch is the rotation from the local east-north plane. Positive pitch angles\n * are above the plane. Negative pitch angles are below the plane. Roll is the first rotation applied about the local east axis.\n *\n * @param {Cartesian3} origin The center point of the local reference frame.\n * @param {HeadingPitchRoll} headingPitchRoll The heading, pitch, and roll.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Transforms.LocalFrameToFixedFrame} [fixedFrameTransform=Transforms.eastNorthUpToFixedFrame] A 4x4 transformation\n *  matrix from a reference frame to the provided ellipsoid\'s fixed reference frame\n * @param {Matrix4} [result] The object onto which to store the result.\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\n *\n * @example\n * // Get the transform from local heading-pitch-roll at cartographic (0.0, 0.0) to Earth\'s fixed frame.\n * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var heading = -Cesium.Math.PI_OVER_TWO;\n * var pitch = Cesium.Math.PI_OVER_FOUR;\n * var roll = 0.0;\n * var hpr = new Cesium.HeadingPitchRoll(heading, pitch, roll);\n * var transform = Cesium.Transforms.headingPitchRollToFixedFrame(center, hpr);\n */\nTransforms.headingPitchRollToFixedFrame = function (\n  origin,\n  headingPitchRoll,\n  ellipsoid,\n  fixedFrameTransform,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("HeadingPitchRoll", headingPitchRoll);\n  //>>includeEnd(\'debug\');\n\n  fixedFrameTransform = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(\n    fixedFrameTransform,\n    Transforms.eastNorthUpToFixedFrame\n  );\n  var hprQuaternion = _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].fromHeadingPitchRoll */ .Z.fromHeadingPitchRoll(\n    headingPitchRoll,\n    scratchHPRQuaternion\n  );\n  var hprMatrix = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].fromTranslationQuaternionRotationScale */ .Z.fromTranslationQuaternionRotationScale(\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO,\n    hprQuaternion,\n    scratchScale,\n    scratchHPRMatrix4\n  );\n  result = fixedFrameTransform(origin, ellipsoid, result);\n  return _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiply */ .Z.multiply(result, hprMatrix, result);\n};\n\nvar scratchENUMatrix4 = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\nvar scratchHPRMatrix3 = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n\n/**\n * Computes a quaternion from a reference frame with axes computed from the heading-pitch-roll angles\n * centered at the provided origin. Heading is the rotation from the local north\n * direction where a positive angle is increasing eastward. Pitch is the rotation from the local east-north plane. Positive pitch angles\n * are above the plane. Negative pitch angles are below the plane. Roll is the first rotation applied about the local east axis.\n *\n * @param {Cartesian3} origin The center point of the local reference frame.\n * @param {HeadingPitchRoll} headingPitchRoll The heading, pitch, and roll.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Transforms.LocalFrameToFixedFrame} [fixedFrameTransform=Transforms.eastNorthUpToFixedFrame] A 4x4 transformation\n *  matrix from a reference frame to the provided ellipsoid\'s fixed reference frame\n * @param {Quaternion} [result] The object onto which to store the result.\n * @returns {Quaternion} The modified result parameter or a new Quaternion instance if none was provided.\n *\n * @example\n * // Get the quaternion from local heading-pitch-roll at cartographic (0.0, 0.0) to Earth\'s fixed frame.\n * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var heading = -Cesium.Math.PI_OVER_TWO;\n * var pitch = Cesium.Math.PI_OVER_FOUR;\n * var roll = 0.0;\n * var hpr = new HeadingPitchRoll(heading, pitch, roll);\n * var quaternion = Cesium.Transforms.headingPitchRollQuaternion(center, hpr);\n */\nTransforms.headingPitchRollQuaternion = function (\n  origin,\n  headingPitchRoll,\n  ellipsoid,\n  fixedFrameTransform,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("HeadingPitchRoll", headingPitchRoll);\n  //>>includeEnd(\'debug\');\n\n  var transform = Transforms.headingPitchRollToFixedFrame(\n    origin,\n    headingPitchRoll,\n    ellipsoid,\n    fixedFrameTransform,\n    scratchENUMatrix4\n  );\n  var rotation = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].getMatrix3 */ .Z.getMatrix3(transform, scratchHPRMatrix3);\n  return _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].fromRotationMatrix */ .Z.fromRotationMatrix(rotation, result);\n};\n\nvar noScale = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0);\nvar hprCenterScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar ffScratch = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\nvar hprTransformScratch = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\nvar hprRotationScratch = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\nvar hprQuaternionScratch = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\n/**\n * Computes heading-pitch-roll angles from a transform in a particular reference frame. Heading is the rotation from the local north\n * direction where a positive angle is increasing eastward. Pitch is the rotation from the local east-north plane. Positive pitch angles\n * are above the plane. Negative pitch angles are below the plane. Roll is the first rotation applied about the local east axis.\n *\n * @param {Matrix4} transform The transform\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Transforms.LocalFrameToFixedFrame} [fixedFrameTransform=Transforms.eastNorthUpToFixedFrame] A 4x4 transformation\n *  matrix from a reference frame to the provided ellipsoid\'s fixed reference frame\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if none was provided.\n */\nTransforms.fixedFrameToHeadingPitchRoll = function (\n  transform,\n  ellipsoid,\n  fixedFrameTransform,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("transform", transform);\n  //>>includeEnd(\'debug\');\n\n  ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].WGS84 */ .Z.WGS84);\n  fixedFrameTransform = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(\n    fixedFrameTransform,\n    Transforms.eastNorthUpToFixedFrame\n  );\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _HeadingPitchRoll_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n  }\n\n  var center = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].getTranslation */ .Z.getTranslation(transform, hprCenterScratch);\n  if (_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(center, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO)) {\n    result.heading = 0;\n    result.pitch = 0;\n    result.roll = 0;\n    return result;\n  }\n  var toFixedFrame = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].inverseTransformation */ .Z.inverseTransformation(\n    fixedFrameTransform(center, ellipsoid, ffScratch),\n    ffScratch\n  );\n  var transformCopy = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].setScale */ .Z.setScale(transform, noScale, hprTransformScratch);\n  transformCopy = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].setTranslation */ .Z.setTranslation(\n    transformCopy,\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO,\n    transformCopy\n  );\n\n  toFixedFrame = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiply */ .Z.multiply(toFixedFrame, transformCopy, toFixedFrame);\n  var quaternionRotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].fromRotationMatrix */ .Z.fromRotationMatrix(\n    _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].getMatrix3 */ .Z.getMatrix3(toFixedFrame, hprRotationScratch),\n    hprQuaternionScratch\n  );\n  quaternionRotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].normalize */ .Z.normalize(\n    quaternionRotation,\n    quaternionRotation\n  );\n\n  return _HeadingPitchRoll_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromQuaternion */ .Z.fromQuaternion(quaternionRotation, result);\n};\n\nvar gmstConstant0 = 6 * 3600 + 41 * 60 + 50.54841;\nvar gmstConstant1 = 8640184.812866;\nvar gmstConstant2 = 0.093104;\nvar gmstConstant3 = -6.2e-6;\nvar rateCoef = 1.1772758384668e-19;\nvar wgs84WRPrecessing = 7.2921158553e-5;\nvar twoPiOverSecondsInDay = _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI / 86400.0;\nvar dateInUtc = new _JulianDate_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n/**\n * Computes a rotation matrix to transform a point or vector from True Equator Mean Equinox (TEME) axes to the\n * pseudo-fixed axes at a given time.  This method treats the UT1 time standard as equivalent to UTC.\n *\n * @param {JulianDate} date The time at which to compute the rotation matrix.\n * @param {Matrix3} [result] The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if none was provided.\n *\n * @example\n * //Set the view to the inertial frame.\n * scene.postUpdate.addEventListener(function(scene, time) {\n *    var now = Cesium.JulianDate.now();\n *    var offset = Cesium.Matrix4.multiplyByPoint(camera.transform, camera.position, new Cesium.Cartesian3());\n *    var transform = Cesium.Matrix4.fromRotationTranslation(Cesium.Transforms.computeTemeToPseudoFixedMatrix(now));\n *    var inverseTransform = Cesium.Matrix4.inverseTransformation(transform, new Cesium.Matrix4());\n *    Cesium.Matrix4.multiplyByPoint(inverseTransform, offset, offset);\n *    camera.lookAtTransform(transform, offset);\n * });\n */\nTransforms.computeTemeToPseudoFixedMatrix = function (date, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(date)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("date is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  // GMST is actually computed using UT1.  We\'re using UTC as an approximation of UT1.\n  // We do not want to use the function like convertTaiToUtc in JulianDate because\n  // we explicitly do not want to fail when inside the leap second.\n\n  dateInUtc = _JulianDate_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].addSeconds */ .Z.addSeconds(\n    date,\n    -_JulianDate_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].computeTaiMinusUtc */ .Z.computeTaiMinusUtc(date),\n    dateInUtc\n  );\n  var utcDayNumber = dateInUtc.dayNumber;\n  var utcSecondsIntoDay = dateInUtc.secondsOfDay;\n\n  var t;\n  var diffDays = utcDayNumber - 2451545;\n  if (utcSecondsIntoDay >= 43200.0) {\n    t = (diffDays + 0.5) / _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].DAYS_PER_JULIAN_CENTURY */ .Z.DAYS_PER_JULIAN_CENTURY;\n  } else {\n    t = (diffDays - 0.5) / _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].DAYS_PER_JULIAN_CENTURY */ .Z.DAYS_PER_JULIAN_CENTURY;\n  }\n\n  var gmst0 =\n    gmstConstant0 +\n    t * (gmstConstant1 + t * (gmstConstant2 + t * gmstConstant3));\n  var angle = (gmst0 * twoPiOverSecondsInDay) % _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI;\n  var ratio = wgs84WRPrecessing + rateCoef * (utcDayNumber - 2451545.5);\n  var secondsSinceMidnight =\n    (utcSecondsIntoDay + _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].SECONDS_PER_DAY */ .Z.SECONDS_PER_DAY * 0.5) %\n    _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].SECONDS_PER_DAY */ .Z.SECONDS_PER_DAY;\n  var gha = angle + ratio * secondsSinceMidnight;\n  var cosGha = Math.cos(gha);\n  var sinGha = Math.sin(gha);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    return new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z(\n      cosGha,\n      sinGha,\n      0.0,\n      -sinGha,\n      cosGha,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    );\n  }\n  result[0] = cosGha;\n  result[1] = -sinGha;\n  result[2] = 0.0;\n  result[3] = sinGha;\n  result[4] = cosGha;\n  result[5] = 0.0;\n  result[6] = 0.0;\n  result[7] = 0.0;\n  result[8] = 1.0;\n  return result;\n};\n\n/**\n * The source of IAU 2006 XYS data, used for computing the transformation between the\n * Fixed and ICRF axes.\n * @type {Iau2006XysData}\n *\n * @see Transforms.computeIcrfToFixedMatrix\n * @see Transforms.computeFixedToIcrfMatrix\n *\n * @private\n */\nTransforms.iau2006XysData = new _Iau2006XysData_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z();\n\n/**\n * The source of Earth Orientation Parameters (EOP) data, used for computing the transformation\n * between the Fixed and ICRF axes.  By default, zero values are used for all EOP values,\n * yielding a reasonable but not completely accurate representation of the ICRF axes.\n * @type {EarthOrientationParameters}\n *\n * @see Transforms.computeIcrfToFixedMatrix\n * @see Transforms.computeFixedToIcrfMatrix\n *\n * @private\n */\nTransforms.earthOrientationParameters = _EarthOrientationParameters_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NONE */ .Z.NONE;\n\nvar ttMinusTai = 32.184;\nvar j2000ttDays = 2451545.0;\n\n/**\n * Preloads the data necessary to transform between the ICRF and Fixed axes, in either\n * direction, over a given interval.  This function returns a promise that, when resolved,\n * indicates that the preload has completed.\n *\n * @param {TimeInterval} timeInterval The interval to preload.\n * @returns {Promise<void>} A promise that, when resolved, indicates that the preload has completed\n *          and evaluation of the transformation between the fixed and ICRF axes will\n *          no longer return undefined for a time inside the interval.\n *\n *\n * @example\n * var interval = new Cesium.TimeInterval(...);\n * when(Cesium.Transforms.preloadIcrfFixed(interval), function() {\n *     // the data is now loaded\n * });\n *\n * @see Transforms.computeIcrfToFixedMatrix\n * @see Transforms.computeFixedToIcrfMatrix\n * @see when\n */\nTransforms.preloadIcrfFixed = function (timeInterval) {\n  var startDayTT = timeInterval.start.dayNumber;\n  var startSecondTT = timeInterval.start.secondsOfDay + ttMinusTai;\n  var stopDayTT = timeInterval.stop.dayNumber;\n  var stopSecondTT = timeInterval.stop.secondsOfDay + ttMinusTai;\n\n  var xysPromise = Transforms.iau2006XysData.preload(\n    startDayTT,\n    startSecondTT,\n    stopDayTT,\n    stopSecondTT\n  );\n  var eopPromise = Transforms.earthOrientationParameters.getPromiseToLoad();\n\n  return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].all */ .Z.all([xysPromise, eopPromise]);\n};\n\n/**\n * Computes a rotation matrix to transform a point or vector from the International Celestial\n * Reference Frame (GCRF/ICRF) inertial frame axes to the Earth-Fixed frame axes (ITRF)\n * at a given time.  This function may return undefined if the data necessary to\n * do the transformation is not yet loaded.\n *\n * @param {JulianDate} date The time at which to compute the rotation matrix.\n * @param {Matrix3} [result] The object onto which to store the result.  If this parameter is\n *                  not specified, a new instance is created and returned.\n * @returns {Matrix3} The rotation matrix, or undefined if the data necessary to do the\n *                   transformation is not yet loaded.\n *\n *\n * @example\n * scene.postUpdate.addEventListener(function(scene, time) {\n *   // View in ICRF.\n *   var icrfToFixed = Cesium.Transforms.computeIcrfToFixedMatrix(time);\n *   if (Cesium.defined(icrfToFixed)) {\n *     var offset = Cesium.Cartesian3.clone(camera.position);\n *     var transform = Cesium.Matrix4.fromRotationTranslation(icrfToFixed);\n *     camera.lookAtTransform(transform, offset);\n *   }\n * });\n *\n * @see Transforms.preloadIcrfFixed\n */\nTransforms.computeIcrfToFixedMatrix = function (date, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(date)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("date is required.");\n  }\n  //>>includeEnd(\'debug\');\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n  }\n\n  var fixedToIcrfMtx = Transforms.computeFixedToIcrfMatrix(date, result);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(fixedToIcrfMtx)) {\n    return undefined;\n  }\n\n  return _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].transpose */ .Z.transpose(fixedToIcrfMtx, result);\n};\n\nvar xysScratch = new _Iau2006XysSample_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(0.0, 0.0, 0.0);\nvar eopScratch = new _EarthOrientationParametersSample_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0\n);\nvar rotation1Scratch = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\nvar rotation2Scratch = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n\n/**\n * Computes a rotation matrix to transform a point or vector from the Earth-Fixed frame axes (ITRF)\n * to the International Celestial Reference Frame (GCRF/ICRF) inertial frame axes\n * at a given time.  This function may return undefined if the data necessary to\n * do the transformation is not yet loaded.\n *\n * @param {JulianDate} date The time at which to compute the rotation matrix.\n * @param {Matrix3} [result] The object onto which to store the result.  If this parameter is\n *                  not specified, a new instance is created and returned.\n * @returns {Matrix3} The rotation matrix, or undefined if the data necessary to do the\n *                   transformation is not yet loaded.\n *\n *\n * @example\n * // Transform a point from the ICRF axes to the Fixed axes.\n * var now = Cesium.JulianDate.now();\n * var pointInFixed = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var fixedToIcrf = Cesium.Transforms.computeIcrfToFixedMatrix(now);\n * var pointInInertial = new Cesium.Cartesian3();\n * if (Cesium.defined(fixedToIcrf)) {\n *     pointInInertial = Cesium.Matrix3.multiplyByVector(fixedToIcrf, pointInFixed, pointInInertial);\n * }\n *\n * @see Transforms.preloadIcrfFixed\n */\nTransforms.computeFixedToIcrfMatrix = function (date, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(date)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("date is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n  }\n\n  // Compute pole wander\n  var eop = Transforms.earthOrientationParameters.compute(date, eopScratch);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(eop)) {\n    return undefined;\n  }\n\n  // There is no external conversion to Terrestrial Time (TT).\n  // So use International Atomic Time (TAI) and convert using offsets.\n  // Here we are assuming that dayTT and secondTT are positive\n  var dayTT = date.dayNumber;\n  // It\'s possible here that secondTT could roll over 86400\n  // This does not seem to affect the precision (unit tests check for this)\n  var secondTT = date.secondsOfDay + ttMinusTai;\n\n  var xys = Transforms.iau2006XysData.computeXysRadians(\n    dayTT,\n    secondTT,\n    xysScratch\n  );\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(xys)) {\n    return undefined;\n  }\n\n  var x = xys.x + eop.xPoleOffset;\n  var y = xys.y + eop.yPoleOffset;\n\n  // Compute XYS rotation\n  var a = 1.0 / (1.0 + Math.sqrt(1.0 - x * x - y * y));\n\n  var rotation1 = rotation1Scratch;\n  rotation1[0] = 1.0 - a * x * x;\n  rotation1[3] = -a * x * y;\n  rotation1[6] = x;\n  rotation1[1] = -a * x * y;\n  rotation1[4] = 1 - a * y * y;\n  rotation1[7] = y;\n  rotation1[2] = -x;\n  rotation1[5] = -y;\n  rotation1[8] = 1 - a * (x * x + y * y);\n\n  var rotation2 = _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].fromRotationZ */ .Z.fromRotationZ(-xys.s, rotation2Scratch);\n  var matrixQ = _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].multiply */ .Z.multiply(rotation1, rotation2, rotation1Scratch);\n\n  // Similar to TT conversions above\n  // It\'s possible here that secondTT could roll over 86400\n  // This does not seem to affect the precision (unit tests check for this)\n  var dateUt1day = date.dayNumber;\n  var dateUt1sec =\n    date.secondsOfDay - _JulianDate_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].computeTaiMinusUtc */ .Z.computeTaiMinusUtc(date) + eop.ut1MinusUtc;\n\n  // Compute Earth rotation angle\n  // The IERS standard for era is\n  //    era = 0.7790572732640 + 1.00273781191135448 * Tu\n  // where\n  //    Tu = JulianDateInUt1 - 2451545.0\n  // However, you get much more precision if you make the following simplification\n  //    era = a + (1 + b) * (JulianDayNumber + FractionOfDay - 2451545)\n  //    era = a + (JulianDayNumber - 2451545) + FractionOfDay + b (JulianDayNumber - 2451545 + FractionOfDay)\n  //    era = a + FractionOfDay + b (JulianDayNumber - 2451545 + FractionOfDay)\n  // since (JulianDayNumber - 2451545) represents an integer number of revolutions which will be discarded anyway.\n  var daysSinceJ2000 = dateUt1day - 2451545;\n  var fractionOfDay = dateUt1sec / _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].SECONDS_PER_DAY */ .Z.SECONDS_PER_DAY;\n  var era =\n    0.779057273264 +\n    fractionOfDay +\n    0.00273781191135448 * (daysSinceJ2000 + fractionOfDay);\n  era = (era % 1.0) * _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TWO_PI */ .Z.TWO_PI;\n\n  var earthRotation = _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].fromRotationZ */ .Z.fromRotationZ(era, rotation2Scratch);\n\n  // pseudoFixed to ICRF\n  var pfToIcrf = _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].multiply */ .Z.multiply(matrixQ, earthRotation, rotation1Scratch);\n\n  // Compute pole wander matrix\n  var cosxp = Math.cos(eop.xPoleWander);\n  var cosyp = Math.cos(eop.yPoleWander);\n  var sinxp = Math.sin(eop.xPoleWander);\n  var sinyp = Math.sin(eop.yPoleWander);\n\n  var ttt = dayTT - j2000ttDays + secondTT / _TimeConstants_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].SECONDS_PER_DAY */ .Z.SECONDS_PER_DAY;\n  ttt /= 36525.0;\n\n  // approximate sp value in rad\n  var sp = (-47.0e-6 * ttt * _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE) / 3600.0;\n  var cossp = Math.cos(sp);\n  var sinsp = Math.sin(sp);\n\n  var fToPfMtx = rotation2Scratch;\n  fToPfMtx[0] = cosxp * cossp;\n  fToPfMtx[1] = cosxp * sinsp;\n  fToPfMtx[2] = sinxp;\n  fToPfMtx[3] = -cosyp * sinsp + sinyp * sinxp * cossp;\n  fToPfMtx[4] = cosyp * cossp + sinyp * sinxp * sinsp;\n  fToPfMtx[5] = -sinyp * cosxp;\n  fToPfMtx[6] = -sinyp * sinsp - cosyp * sinxp * cossp;\n  fToPfMtx[7] = sinyp * cossp - cosyp * sinxp * sinsp;\n  fToPfMtx[8] = cosyp * cosxp;\n\n  return _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].multiply */ .Z.multiply(pfToIcrf, fToPfMtx, result);\n};\n\nvar pointToWindowCoordinatesTemp = new _Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n/**\n * Transform a point from model coordinates to window coordinates.\n *\n * @param {Matrix4} modelViewProjectionMatrix The 4x4 model-view-projection matrix.\n * @param {Matrix4} viewportTransformation The 4x4 viewport transformation.\n * @param {Cartesian3} point The point to transform.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\n */\nTransforms.pointToWindowCoordinates = function (\n  modelViewProjectionMatrix,\n  viewportTransformation,\n  point,\n  result\n) {\n  result = Transforms.pointToGLWindowCoordinates(\n    modelViewProjectionMatrix,\n    viewportTransformation,\n    point,\n    result\n  );\n  result.y = 2.0 * viewportTransformation[5] - result.y;\n  return result;\n};\n\n/**\n * @private\n */\nTransforms.pointToGLWindowCoordinates = function (\n  modelViewProjectionMatrix,\n  viewportTransformation,\n  point,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(modelViewProjectionMatrix)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("modelViewProjectionMatrix is required.");\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(viewportTransformation)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("viewportTransformation is required.");\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(point)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("point is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  var tmp = pointToWindowCoordinatesTemp;\n\n  _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n    modelViewProjectionMatrix,\n    _Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromElements */ .Z.fromElements(point.x, point.y, point.z, 1, tmp),\n    tmp\n  );\n  _Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(tmp, 1.0 / tmp.w, tmp);\n  _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiplyByVector */ .Z.multiplyByVector(viewportTransformation, tmp, tmp);\n  return _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromCartesian4 */ .Z.fromCartesian4(tmp, result);\n};\n\nvar normalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar rightScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar upScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n/**\n * Transform a position and velocity to a rotation matrix.\n *\n * @param {Cartesian3} position The position to transform.\n * @param {Cartesian3} velocity The velocity vector to transform.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\n * @param {Matrix3} [result] The object onto which to store the result.\n * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if none was provided.\n */\nTransforms.rotationMatrixFromPositionVelocity = function (\n  position,\n  velocity,\n  ellipsoid,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(position)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("position is required.");\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(velocity)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("velocity is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var normal = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].WGS84 */ .Z.WGS84).geodeticSurfaceNormal(\n    position,\n    normalScratch\n  );\n  var right = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].cross */ .Z.cross(velocity, normal, rightScratch);\n\n  if (_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(right, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO, _Math_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].EPSILON6 */ .Z.EPSILON6)) {\n    right = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNIT_X */ .Z.UNIT_X, right);\n  }\n\n  var up = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].cross */ .Z.cross(right, velocity, upScratch);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(up, up);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].cross */ .Z.cross(velocity, up, right);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].negate */ .Z.negate(right, right);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(right, right);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n  }\n\n  result[0] = velocity.x;\n  result[1] = velocity.y;\n  result[2] = velocity.z;\n  result[3] = right.x;\n  result[4] = right.y;\n  result[5] = right.z;\n  result[6] = up.x;\n  result[7] = up.y;\n  result[8] = up.z;\n\n  return result;\n};\n\nvar swizzleMatrix = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0\n);\n\nvar scratchCartographic = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar scratchCartesian3Projection = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchCenter = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchRotation = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\nvar scratchFromENU = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\nvar scratchToENU = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\n\n/**\n * @private\n */\nTransforms.basisTo2D = function (projection, matrix, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(projection)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("projection is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(matrix)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("matrix is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("result is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var rtcCenter = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].getTranslation */ .Z.getTranslation(matrix, scratchCenter);\n  var ellipsoid = projection.ellipsoid;\n\n  // Get the 2D Center\n  var cartographic = ellipsoid.cartesianToCartographic(\n    rtcCenter,\n    scratchCartographic\n  );\n  var projectedPosition = projection.project(\n    cartographic,\n    scratchCartesian3Projection\n  );\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    projectedPosition.z,\n    projectedPosition.x,\n    projectedPosition.y,\n    projectedPosition\n  );\n\n  // Assuming the instance are positioned in WGS84, invert the WGS84 transform to get the local transform and then convert to 2D\n  var fromENU = Transforms.eastNorthUpToFixedFrame(\n    rtcCenter,\n    ellipsoid,\n    scratchFromENU\n  );\n  var toENU = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].inverseTransformation */ .Z.inverseTransformation(fromENU, scratchToENU);\n  var rotation = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].getMatrix3 */ .Z.getMatrix3(matrix, scratchRotation);\n  var local = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiplyByMatrix3 */ .Z.multiplyByMatrix3(toENU, rotation, result);\n  _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiply */ .Z.multiply(swizzleMatrix, local, result); // Swap x, y, z for 2D\n  _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].setTranslation */ .Z.setTranslation(result, projectedPosition, result); // Use the projected center\n\n  return result;\n};\n\n/**\n * @private\n */\nTransforms.wgs84To2DModelMatrix = function (projection, center, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(projection)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("projection is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(center)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("center is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("result is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var ellipsoid = projection.ellipsoid;\n\n  var fromENU = Transforms.eastNorthUpToFixedFrame(\n    center,\n    ellipsoid,\n    scratchFromENU\n  );\n  var toENU = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].inverseTransformation */ .Z.inverseTransformation(fromENU, scratchToENU);\n\n  var cartographic = ellipsoid.cartesianToCartographic(\n    center,\n    scratchCartographic\n  );\n  var projectedPosition = projection.project(\n    cartographic,\n    scratchCartesian3Projection\n  );\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    projectedPosition.z,\n    projectedPosition.x,\n    projectedPosition.y,\n    projectedPosition\n  );\n\n  var translation = _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].fromTranslation */ .Z.fromTranslation(projectedPosition, scratchFromENU);\n  _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiply */ .Z.multiply(swizzleMatrix, toENU, result);\n  _Matrix4_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].multiply */ .Z.multiply(translation, result, result);\n\n  return result;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Transforms);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///95555\n')},72043:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87811);\n\n\n\n\n\nvar defaultScale = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0, 1.0);\nvar defaultTranslation = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO;\nvar defaultRotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].IDENTITY */ .Z.IDENTITY;\n\n/**\n * An affine transformation defined by a translation, rotation, and scale.\n * @alias TranslationRotationScale\n * @constructor\n *\n * @param {Cartesian3} [translation=Cartesian3.ZERO] A {@link Cartesian3} specifying the (x, y, z) translation to apply to the node.\n * @param {Quaternion} [rotation=Quaternion.IDENTITY] A {@link Quaternion} specifying the (x, y, z, w) rotation to apply to the node.\n * @param {Cartesian3} [scale=new Cartesian3(1.0, 1.0, 1.0)] A {@link Cartesian3} specifying the (x, y, z) scaling to apply to the node.\n */\nfunction TranslationRotationScale(translation, rotation, scale) {\n  /**\n   * Gets or sets the (x, y, z) translation to apply to the node.\n   * @type {Cartesian3}\n   * @default Cartesian3.ZERO\n   */\n  this.translation = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n    (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(translation, defaultTranslation)\n  );\n\n  /**\n   * Gets or sets the (x, y, z, w) rotation to apply to the node.\n   * @type {Quaternion}\n   * @default Quaternion.IDENTITY\n   */\n  this.rotation = _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(rotation, defaultRotation));\n\n  /**\n   * Gets or sets the (x, y, z) scaling to apply to the node.\n   * @type {Cartesian3}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  this.scale = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone((0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(scale, defaultScale));\n}\n\n/**\n * Compares this instance against the provided instance and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {TranslationRotationScale} [right] The right hand side TranslationRotationScale.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nTranslationRotationScale.prototype.equals = function (right) {\n  return (\n    this === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(right) &&\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(this.translation, right.translation) &&\n      _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(this.rotation, right.rotation) &&\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(this.scale, right.scale))\n  );\n};\n/* harmony default export */ __webpack_exports__["Z"] = (TranslationRotationScale);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIwNDMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF5QztBQUNJO0FBQ1Y7QUFDTTs7QUFFekMsdUJBQXVCLCtEQUFVO0FBQ2pDLHlCQUF5Qix5RUFBZTtBQUN4QyxzQkFBc0IsaUZBQW1COztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZLGlDQUFpQyxrQkFBa0I7QUFDMUUsV0FBVyxZQUFZLGtDQUFrQyxrQkFBa0I7QUFDM0UsV0FBVyxZQUFZLHlDQUF5QyxrQkFBa0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLHFCQUFxQiwyRUFBZ0I7QUFDckMsSUFBSSxxRUFBWTtBQUNoQjs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxrQkFBa0IsMkVBQWdCLENBQUMscUVBQVk7O0FBRS9DO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGVBQWUsMkVBQWdCLENBQUMscUVBQVk7QUFDNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDBCQUEwQjtBQUNyQyxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLGdFQUFPO0FBQ1osTUFBTSw2RUFBaUI7QUFDdkIsTUFBTSw2RUFBaUI7QUFDdkIsTUFBTSw2RUFBaUI7QUFDdkI7QUFDQTtBQUNBLHlEQUFlLHdCQUF3QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL0NvcmUvVHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlLmpzP2Q3ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4vQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuL2RlZmluZWQuanNcIjtcbmltcG9ydCBRdWF0ZXJuaW9uIGZyb20gXCIuL1F1YXRlcm5pb24uanNcIjtcblxudmFyIGRlZmF1bHRTY2FsZSA9IG5ldyBDYXJ0ZXNpYW4zKDEuMCwgMS4wLCAxLjApO1xudmFyIGRlZmF1bHRUcmFuc2xhdGlvbiA9IENhcnRlc2lhbjMuWkVSTztcbnZhciBkZWZhdWx0Um90YXRpb24gPSBRdWF0ZXJuaW9uLklERU5USVRZO1xuXG4vKipcbiAqIEFuIGFmZmluZSB0cmFuc2Zvcm1hdGlvbiBkZWZpbmVkIGJ5IGEgdHJhbnNsYXRpb24sIHJvdGF0aW9uLCBhbmQgc2NhbGUuXG4gKiBAYWxpYXMgVHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge0NhcnRlc2lhbjN9IFt0cmFuc2xhdGlvbj1DYXJ0ZXNpYW4zLlpFUk9dIEEge0BsaW5rIENhcnRlc2lhbjN9IHNwZWNpZnlpbmcgdGhlICh4LCB5LCB6KSB0cmFuc2xhdGlvbiB0byBhcHBseSB0byB0aGUgbm9kZS5cbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gW3JvdGF0aW9uPVF1YXRlcm5pb24uSURFTlRJVFldIEEge0BsaW5rIFF1YXRlcm5pb259IHNwZWNpZnlpbmcgdGhlICh4LCB5LCB6LCB3KSByb3RhdGlvbiB0byBhcHBseSB0byB0aGUgbm9kZS5cbiAqIEBwYXJhbSB7Q2FydGVzaWFuM30gW3NjYWxlPW5ldyBDYXJ0ZXNpYW4zKDEuMCwgMS4wLCAxLjApXSBBIHtAbGluayBDYXJ0ZXNpYW4zfSBzcGVjaWZ5aW5nIHRoZSAoeCwgeSwgeikgc2NhbGluZyB0byBhcHBseSB0byB0aGUgbm9kZS5cbiAqL1xuZnVuY3Rpb24gVHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlKHRyYW5zbGF0aW9uLCByb3RhdGlvbiwgc2NhbGUpIHtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgKHgsIHksIHopIHRyYW5zbGF0aW9uIHRvIGFwcGx5IHRvIHRoZSBub2RlLlxuICAgKiBAdHlwZSB7Q2FydGVzaWFuM31cbiAgICogQGRlZmF1bHQgQ2FydGVzaWFuMy5aRVJPXG4gICAqL1xuICB0aGlzLnRyYW5zbGF0aW9uID0gQ2FydGVzaWFuMy5jbG9uZShcbiAgICBkZWZhdWx0VmFsdWUodHJhbnNsYXRpb24sIGRlZmF1bHRUcmFuc2xhdGlvbilcbiAgKTtcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSAoeCwgeSwgeiwgdykgcm90YXRpb24gdG8gYXBwbHkgdG8gdGhlIG5vZGUuXG4gICAqIEB0eXBlIHtRdWF0ZXJuaW9ufVxuICAgKiBAZGVmYXVsdCBRdWF0ZXJuaW9uLklERU5USVRZXG4gICAqL1xuICB0aGlzLnJvdGF0aW9uID0gUXVhdGVybmlvbi5jbG9uZShkZWZhdWx0VmFsdWUocm90YXRpb24sIGRlZmF1bHRSb3RhdGlvbikpO1xuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlICh4LCB5LCB6KSBzY2FsaW5nIHRvIGFwcGx5IHRvIHRoZSBub2RlLlxuICAgKiBAdHlwZSB7Q2FydGVzaWFuM31cbiAgICogQGRlZmF1bHQgbmV3IENhcnRlc2lhbjMoMS4wLCAxLjAsIDEuMClcbiAgICovXG4gIHRoaXMuc2NhbGUgPSBDYXJ0ZXNpYW4zLmNsb25lKGRlZmF1bHRWYWx1ZShzY2FsZSwgZGVmYXVsdFNjYWxlKSk7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdGhpcyBpbnN0YW5jZSBhZ2FpbnN0IHRoZSBwcm92aWRlZCBpbnN0YW5jZSBhbmQgcmV0dXJuc1xuICogPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhleSBhcmUgZXF1YWwsIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtUcmFuc2xhdGlvblJvdGF0aW9uU2NhbGV9IFtyaWdodF0gVGhlIHJpZ2h0IGhhbmQgc2lkZSBUcmFuc2xhdGlvblJvdGF0aW9uU2NhbGUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhleSBhcmUgZXF1YWwsIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXG4gKi9cblRyYW5zbGF0aW9uUm90YXRpb25TY2FsZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHJpZ2h0KSB7XG4gIHJldHVybiAoXG4gICAgdGhpcyA9PT0gcmlnaHQgfHxcbiAgICAoZGVmaW5lZChyaWdodCkgJiZcbiAgICAgIENhcnRlc2lhbjMuZXF1YWxzKHRoaXMudHJhbnNsYXRpb24sIHJpZ2h0LnRyYW5zbGF0aW9uKSAmJlxuICAgICAgUXVhdGVybmlvbi5lcXVhbHModGhpcy5yb3RhdGlvbiwgcmlnaHQucm90YXRpb24pICYmXG4gICAgICBDYXJ0ZXNpYW4zLmVxdWFscyh0aGlzLnNjYWxlLCByaWdodC5zY2FsZSkpXG4gICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72043\n')},72579:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n\n\n\n\n/**\n * Uses the Tridiagonal Matrix Algorithm, also known as the Thomas Algorithm, to solve\n * a system of linear equations where the coefficient matrix is a tridiagonal matrix.\n *\n * @namespace TridiagonalSystemSolver\n */\nvar TridiagonalSystemSolver = {};\n\n/**\n * Solves a tridiagonal system of linear equations.\n *\n * @param {Number[]} diagonal An array with length <code>n</code> that contains the diagonal of the coefficient matrix.\n * @param {Number[]} lower An array with length <code>n - 1</code> that contains the lower diagonal of the coefficient matrix.\n * @param {Number[]} upper An array with length <code>n - 1</code> that contains the upper diagonal of the coefficient matrix.\n * @param {Cartesian3[]} right An array of Cartesians with length <code>n</code> that is the right side of the system of equations.\n *\n * @exception {DeveloperError} diagonal and right must have the same lengths.\n * @exception {DeveloperError} lower and upper must have the same lengths.\n * @exception {DeveloperError} lower and upper must be one less than the length of diagonal.\n *\n * @performance Linear time.\n *\n * @example\n * var lowerDiagonal = [1.0, 1.0, 1.0, 1.0];\n * var diagonal = [2.0, 4.0, 4.0, 4.0, 2.0];\n * var upperDiagonal = [1.0, 1.0, 1.0, 1.0];\n * var rightHandSide = [\n *     new Cesium.Cartesian3(410757.0, -1595711.0, 1375302.0),\n *     new Cesium.Cartesian3(-5986705.0, -2190640.0, 1099600.0),\n *     new Cesium.Cartesian3(-12593180.0, 288588.0, -1755549.0),\n *     new Cesium.Cartesian3(-5349898.0, 2457005.0, -2685438.0),\n *     new Cesium.Cartesian3(845820.0, 1573488.0, -1205591.0)\n * ];\n *\n * var solution = Cesium.TridiagonalSystemSolver.solve(lowerDiagonal, diagonal, upperDiagonal, rightHandSide);\n *\n * @returns {Cartesian3[]} An array of Cartesians with length <code>n</code> that is the solution to the tridiagonal system of equations.\n */\nTridiagonalSystemSolver.solve = function (lower, diagonal, upper, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(lower) || !(lower instanceof Array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("The array lower is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(diagonal) || !(diagonal instanceof Array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("The array diagonal is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(upper) || !(upper instanceof Array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("The array upper is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(right) || !(right instanceof Array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("The array right is required.");\n  }\n  if (diagonal.length !== right.length) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("diagonal and right must have the same lengths.");\n  }\n  if (lower.length !== upper.length) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("lower and upper must have the same lengths.");\n  } else if (lower.length !== diagonal.length - 1) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n      "lower and upper must be one less than the length of diagonal."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var c = new Array(upper.length);\n  var d = new Array(right.length);\n  var x = new Array(right.length);\n\n  var i;\n  for (i = 0; i < d.length; i++) {\n    d[i] = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n    x[i] = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n\n  c[0] = upper[0] / diagonal[0];\n  d[0] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(right[0], 1.0 / diagonal[0], d[0]);\n\n  var scalar;\n  for (i = 1; i < c.length; ++i) {\n    scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n    c[i] = upper[i] * scalar;\n    d[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n      right[i],\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(d[i - 1], lower[i - 1], d[i]),\n      d[i]\n    );\n    d[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(d[i], scalar, d[i]);\n  }\n\n  scalar = 1.0 / (diagonal[i] - c[i - 1] * lower[i - 1]);\n  d[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n    right[i],\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(d[i - 1], lower[i - 1], d[i]),\n    d[i]\n  );\n  d[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(d[i], scalar, d[i]);\n\n  x[x.length - 1] = d[d.length - 1];\n  for (i = x.length - 2; i >= 0; --i) {\n    x[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n      d[i],\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(x[i + 1], c[i], x[i]),\n      x[i]\n    );\n  }\n\n  return x;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (TridiagonalSystemSolver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI1NzkuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXlDO0FBQ047QUFDYzs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckIsV0FBVyxjQUFjO0FBQ3pCO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxPQUFPLGdFQUFPO0FBQ2QsY0FBYyxtRUFBYztBQUM1QjtBQUNBLE9BQU8sZ0VBQU87QUFDZCxjQUFjLG1FQUFjO0FBQzVCO0FBQ0EsT0FBTyxnRUFBTztBQUNkLGNBQWMsbUVBQWM7QUFDNUI7QUFDQSxPQUFPLGdFQUFPO0FBQ2QsY0FBYyxtRUFBYztBQUM1QjtBQUNBO0FBQ0EsY0FBYyxtRUFBYztBQUM1QjtBQUNBO0FBQ0EsY0FBYyxtRUFBYztBQUM1QixJQUFJO0FBQ0osY0FBYyxtRUFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLGNBQWM7QUFDNUIsZUFBZSwrREFBVTtBQUN6QixlQUFlLCtEQUFVO0FBQ3pCOztBQUVBO0FBQ0EsU0FBUyxpR0FBMkI7O0FBRXBDO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQSxXQUFXLGlGQUFtQjtBQUM5QjtBQUNBLE1BQU0saUdBQTJCO0FBQ2pDO0FBQ0E7QUFDQSxXQUFXLGlHQUEyQjtBQUN0Qzs7QUFFQTtBQUNBLFNBQVMsaUZBQW1CO0FBQzVCO0FBQ0EsSUFBSSxpR0FBMkI7QUFDL0I7QUFDQTtBQUNBLFNBQVMsaUdBQTJCOztBQUVwQztBQUNBLHlCQUF5QixRQUFRO0FBQ2pDLFdBQVcsaUZBQW1CO0FBQzlCO0FBQ0EsTUFBTSxpR0FBMkI7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9Db3JlL1RyaWRpYWdvbmFsU3lzdGVtU29sdmVyLmpzPzU0ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4vQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4vZGVmaW5lZC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuL0RldmVsb3BlckVycm9yLmpzXCI7XG5cbi8qKlxuICogVXNlcyB0aGUgVHJpZGlhZ29uYWwgTWF0cml4IEFsZ29yaXRobSwgYWxzbyBrbm93biBhcyB0aGUgVGhvbWFzIEFsZ29yaXRobSwgdG8gc29sdmVcbiAqIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgd2hlcmUgdGhlIGNvZWZmaWNpZW50IG1hdHJpeCBpcyBhIHRyaWRpYWdvbmFsIG1hdHJpeC5cbiAqXG4gKiBAbmFtZXNwYWNlIFRyaWRpYWdvbmFsU3lzdGVtU29sdmVyXG4gKi9cbnZhciBUcmlkaWFnb25hbFN5c3RlbVNvbHZlciA9IHt9O1xuXG4vKipcbiAqIFNvbHZlcyBhIHRyaWRpYWdvbmFsIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyW119IGRpYWdvbmFsIEFuIGFycmF5IHdpdGggbGVuZ3RoIDxjb2RlPm48L2NvZGU+IHRoYXQgY29udGFpbnMgdGhlIGRpYWdvbmFsIG9mIHRoZSBjb2VmZmljaWVudCBtYXRyaXguXG4gKiBAcGFyYW0ge051bWJlcltdfSBsb3dlciBBbiBhcnJheSB3aXRoIGxlbmd0aCA8Y29kZT5uIC0gMTwvY29kZT4gdGhhdCBjb250YWlucyB0aGUgbG93ZXIgZGlhZ29uYWwgb2YgdGhlIGNvZWZmaWNpZW50IG1hdHJpeC5cbiAqIEBwYXJhbSB7TnVtYmVyW119IHVwcGVyIEFuIGFycmF5IHdpdGggbGVuZ3RoIDxjb2RlPm4gLSAxPC9jb2RlPiB0aGF0IGNvbnRhaW5zIHRoZSB1cHBlciBkaWFnb25hbCBvZiB0aGUgY29lZmZpY2llbnQgbWF0cml4LlxuICogQHBhcmFtIHtDYXJ0ZXNpYW4zW119IHJpZ2h0IEFuIGFycmF5IG9mIENhcnRlc2lhbnMgd2l0aCBsZW5ndGggPGNvZGU+bjwvY29kZT4gdGhhdCBpcyB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgc3lzdGVtIG9mIGVxdWF0aW9ucy5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gZGlhZ29uYWwgYW5kIHJpZ2h0IG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGhzLlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IGxvd2VyIGFuZCB1cHBlciBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3Rocy5cbiAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBsb3dlciBhbmQgdXBwZXIgbXVzdCBiZSBvbmUgbGVzcyB0aGFuIHRoZSBsZW5ndGggb2YgZGlhZ29uYWwuXG4gKlxuICogQHBlcmZvcm1hbmNlIExpbmVhciB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgbG93ZXJEaWFnb25hbCA9IFsxLjAsIDEuMCwgMS4wLCAxLjBdO1xuICogdmFyIGRpYWdvbmFsID0gWzIuMCwgNC4wLCA0LjAsIDQuMCwgMi4wXTtcbiAqIHZhciB1cHBlckRpYWdvbmFsID0gWzEuMCwgMS4wLCAxLjAsIDEuMF07XG4gKiB2YXIgcmlnaHRIYW5kU2lkZSA9IFtcbiAqICAgICBuZXcgQ2VzaXVtLkNhcnRlc2lhbjMoNDEwNzU3LjAsIC0xNTk1NzExLjAsIDEzNzUzMDIuMCksXG4gKiAgICAgbmV3IENlc2l1bS5DYXJ0ZXNpYW4zKC01OTg2NzA1LjAsIC0yMTkwNjQwLjAsIDEwOTk2MDAuMCksXG4gKiAgICAgbmV3IENlc2l1bS5DYXJ0ZXNpYW4zKC0xMjU5MzE4MC4wLCAyODg1ODguMCwgLTE3NTU1NDkuMCksXG4gKiAgICAgbmV3IENlc2l1bS5DYXJ0ZXNpYW4zKC01MzQ5ODk4LjAsIDI0NTcwMDUuMCwgLTI2ODU0MzguMCksXG4gKiAgICAgbmV3IENlc2l1bS5DYXJ0ZXNpYW4zKDg0NTgyMC4wLCAxNTczNDg4LjAsIC0xMjA1NTkxLjApXG4gKiBdO1xuICpcbiAqIHZhciBzb2x1dGlvbiA9IENlc2l1bS5UcmlkaWFnb25hbFN5c3RlbVNvbHZlci5zb2x2ZShsb3dlckRpYWdvbmFsLCBkaWFnb25hbCwgdXBwZXJEaWFnb25hbCwgcmlnaHRIYW5kU2lkZSk7XG4gKlxuICogQHJldHVybnMge0NhcnRlc2lhbjNbXX0gQW4gYXJyYXkgb2YgQ2FydGVzaWFucyB3aXRoIGxlbmd0aCA8Y29kZT5uPC9jb2RlPiB0aGF0IGlzIHRoZSBzb2x1dGlvbiB0byB0aGUgdHJpZGlhZ29uYWwgc3lzdGVtIG9mIGVxdWF0aW9ucy5cbiAqL1xuVHJpZGlhZ29uYWxTeXN0ZW1Tb2x2ZXIuc29sdmUgPSBmdW5jdGlvbiAobG93ZXIsIGRpYWdvbmFsLCB1cHBlciwgcmlnaHQpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKCFkZWZpbmVkKGxvd2VyKSB8fCAhKGxvd2VyIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwiVGhlIGFycmF5IGxvd2VyIGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuICBpZiAoIWRlZmluZWQoZGlhZ29uYWwpIHx8ICEoZGlhZ29uYWwgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJUaGUgYXJyYXkgZGlhZ29uYWwgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIGlmICghZGVmaW5lZCh1cHBlcikgfHwgISh1cHBlciBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcIlRoZSBhcnJheSB1cHBlciBpcyByZXF1aXJlZC5cIik7XG4gIH1cbiAgaWYgKCFkZWZpbmVkKHJpZ2h0KSB8fCAhKHJpZ2h0IGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwiVGhlIGFycmF5IHJpZ2h0IGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuICBpZiAoZGlhZ29uYWwubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJkaWFnb25hbCBhbmQgcmlnaHQgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aHMuXCIpO1xuICB9XG4gIGlmIChsb3dlci5sZW5ndGggIT09IHVwcGVyLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcImxvd2VyIGFuZCB1cHBlciBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3Rocy5cIik7XG4gIH0gZWxzZSBpZiAobG93ZXIubGVuZ3RoICE9PSBkaWFnb25hbC5sZW5ndGggLSAxKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgXCJsb3dlciBhbmQgdXBwZXIgbXVzdCBiZSBvbmUgbGVzcyB0aGFuIHRoZSBsZW5ndGggb2YgZGlhZ29uYWwuXCJcbiAgICApO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBjID0gbmV3IEFycmF5KHVwcGVyLmxlbmd0aCk7XG4gIHZhciBkID0gbmV3IEFycmF5KHJpZ2h0Lmxlbmd0aCk7XG4gIHZhciB4ID0gbmV3IEFycmF5KHJpZ2h0Lmxlbmd0aCk7XG5cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBkLmxlbmd0aDsgaSsrKSB7XG4gICAgZFtpXSA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG4gICAgeFtpXSA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG4gIH1cblxuICBjWzBdID0gdXBwZXJbMF0gLyBkaWFnb25hbFswXTtcbiAgZFswXSA9IENhcnRlc2lhbjMubXVsdGlwbHlCeVNjYWxhcihyaWdodFswXSwgMS4wIC8gZGlhZ29uYWxbMF0sIGRbMF0pO1xuXG4gIHZhciBzY2FsYXI7XG4gIGZvciAoaSA9IDE7IGkgPCBjLmxlbmd0aDsgKytpKSB7XG4gICAgc2NhbGFyID0gMS4wIC8gKGRpYWdvbmFsW2ldIC0gY1tpIC0gMV0gKiBsb3dlcltpIC0gMV0pO1xuICAgIGNbaV0gPSB1cHBlcltpXSAqIHNjYWxhcjtcbiAgICBkW2ldID0gQ2FydGVzaWFuMy5zdWJ0cmFjdChcbiAgICAgIHJpZ2h0W2ldLFxuICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKGRbaSAtIDFdLCBsb3dlcltpIC0gMV0sIGRbaV0pLFxuICAgICAgZFtpXVxuICAgICk7XG4gICAgZFtpXSA9IENhcnRlc2lhbjMubXVsdGlwbHlCeVNjYWxhcihkW2ldLCBzY2FsYXIsIGRbaV0pO1xuICB9XG5cbiAgc2NhbGFyID0gMS4wIC8gKGRpYWdvbmFsW2ldIC0gY1tpIC0gMV0gKiBsb3dlcltpIC0gMV0pO1xuICBkW2ldID0gQ2FydGVzaWFuMy5zdWJ0cmFjdChcbiAgICByaWdodFtpXSxcbiAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoZFtpIC0gMV0sIGxvd2VyW2kgLSAxXSwgZFtpXSksXG4gICAgZFtpXVxuICApO1xuICBkW2ldID0gQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKGRbaV0sIHNjYWxhciwgZFtpXSk7XG5cbiAgeFt4Lmxlbmd0aCAtIDFdID0gZFtkLmxlbmd0aCAtIDFdO1xuICBmb3IgKGkgPSB4Lmxlbmd0aCAtIDI7IGkgPj0gMDsgLS1pKSB7XG4gICAgeFtpXSA9IENhcnRlc2lhbjMuc3VidHJhY3QoXG4gICAgICBkW2ldLFxuICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKHhbaSArIDFdLCBjW2ldLCB4W2ldKSxcbiAgICAgIHhbaV1cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHg7XG59O1xuZXhwb3J0IGRlZmF1bHQgVHJpZGlhZ29uYWxTeXN0ZW1Tb2x2ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72579\n')},84862:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_Uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93922);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n\n\n\n\n/**\n * A singleton that contains all of the servers that are trusted. Credentials will be sent with\n * any requests to these servers.\n *\n * @namespace TrustedServers\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nvar TrustedServers = {};\nvar _servers = {};\n\n/**\n * Adds a trusted server to the registry\n *\n * @param {String} host The host to be added.\n * @param {Number} port The port used to access the host.\n *\n * @example\n * // Add a trusted server\n * TrustedServers.add(\'my.server.com\', 80);\n */\nTrustedServers.add = function (host, port) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(host)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("host is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(port) || port <= 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("port is required to be greater than 0.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var authority = host.toLowerCase() + ":" + port;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_servers[authority])) {\n    _servers[authority] = true;\n  }\n};\n\n/**\n * Removes a trusted server from the registry\n *\n * @param {String} host The host to be removed.\n * @param {Number} port The port used to access the host.\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.remove(\'my.server.com\', 80);\n */\nTrustedServers.remove = function (host, port) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(host)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("host is required.");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(port) || port <= 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("port is required to be greater than 0.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var authority = host.toLowerCase() + ":" + port;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_servers[authority])) {\n    delete _servers[authority];\n  }\n};\n\nfunction getAuthority(url) {\n  var uri = new _ThirdParty_Uri_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(url);\n  uri.normalize();\n\n  // Removes username:password@ so we just have host[:port]\n  var authority = uri.authority();\n  if (authority.length === 0) {\n    return undefined; // Relative URL\n  }\n  uri.authority(authority);\n\n  if (authority.indexOf("@") !== -1) {\n    var parts = authority.split("@");\n    authority = parts[1];\n  }\n\n  // If the port is missing add one based on the scheme\n  if (authority.indexOf(":") === -1) {\n    var scheme = uri.scheme();\n    if (scheme.length === 0) {\n      scheme = window.location.protocol;\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n    if (scheme === "http") {\n      authority += ":80";\n    } else if (scheme === "https") {\n      authority += ":443";\n    } else {\n      return undefined;\n    }\n  }\n\n  return authority;\n}\n\n/**\n * Tests whether a server is trusted or not. The server must have been added with the port if it is included in the url.\n *\n * @param {String} url The url to be tested against the trusted list\n *\n * @returns {boolean} Returns true if url is trusted, false otherwise.\n *\n * @example\n * // Add server\n * TrustedServers.add(\'my.server.com\', 81);\n *\n * // Check if server is trusted\n * if (TrustedServers.contains(\'https://my.server.com:81/path/to/file.png\')) {\n *     // my.server.com:81 is trusted\n * }\n * if (TrustedServers.contains(\'https://my.server.com/path/to/file.png\')) {\n *     // my.server.com isn\'t trusted\n * }\n */\nTrustedServers.contains = function (url) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(url)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("url is required.");\n  }\n  //>>includeEnd(\'debug\');\n  var authority = getAuthority(url);\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(authority) && (0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_servers[authority])) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Clears the registry\n *\n * @example\n * // Remove a trusted server\n * TrustedServers.clear();\n */\nTrustedServers.clear = function () {\n  _servers = {};\n};\n/* harmony default export */ __webpack_exports__["Z"] = (TrustedServers);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ4NjIuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXVDO0FBQ0o7QUFDYzs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxnRUFBTztBQUNkLGNBQWMsbUVBQWM7QUFDNUI7QUFDQSxPQUFPLGdFQUFPO0FBQ2QsY0FBYyxtRUFBYztBQUM1QjtBQUNBOztBQUVBO0FBQ0EsT0FBTyxnRUFBTztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxnRUFBTztBQUNkLGNBQWMsbUVBQWM7QUFDNUI7QUFDQSxPQUFPLGdFQUFPO0FBQ2QsY0FBYyxtRUFBYztBQUM1QjtBQUNBOztBQUVBO0FBQ0EsTUFBTSxnRUFBTztBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixtRUFBRztBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sZ0VBQU87QUFDZCxjQUFjLG1FQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sZ0VBQU8sZUFBZSxnRUFBTztBQUNuQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxjQUFjLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9UcnVzdGVkU2VydmVycy5qcz9hNTI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVcmkgZnJvbSBcIi4uL1RoaXJkUGFydHkvVXJpLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRGV2ZWxvcGVyRXJyb3IgZnJvbSBcIi4vRGV2ZWxvcGVyRXJyb3IuanNcIjtcblxuLyoqXG4gKiBBIHNpbmdsZXRvbiB0aGF0IGNvbnRhaW5zIGFsbCBvZiB0aGUgc2VydmVycyB0aGF0IGFyZSB0cnVzdGVkLiBDcmVkZW50aWFscyB3aWxsIGJlIHNlbnQgd2l0aFxuICogYW55IHJlcXVlc3RzIHRvIHRoZXNlIHNlcnZlcnMuXG4gKlxuICogQG5hbWVzcGFjZSBUcnVzdGVkU2VydmVyc1xuICpcbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvfENyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nfVxuICovXG52YXIgVHJ1c3RlZFNlcnZlcnMgPSB7fTtcbnZhciBfc2VydmVycyA9IHt9O1xuXG4vKipcbiAqIEFkZHMgYSB0cnVzdGVkIHNlcnZlciB0byB0aGUgcmVnaXN0cnlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaG9zdCBUaGUgaG9zdCB0byBiZSBhZGRlZC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwb3J0IFRoZSBwb3J0IHVzZWQgdG8gYWNjZXNzIHRoZSBob3N0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgYSB0cnVzdGVkIHNlcnZlclxuICogVHJ1c3RlZFNlcnZlcnMuYWRkKCdteS5zZXJ2ZXIuY29tJywgODApO1xuICovXG5UcnVzdGVkU2VydmVycy5hZGQgPSBmdW5jdGlvbiAoaG9zdCwgcG9ydCkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIWRlZmluZWQoaG9zdCkpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJob3N0IGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuICBpZiAoIWRlZmluZWQocG9ydCkgfHwgcG9ydCA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwicG9ydCBpcyByZXF1aXJlZCB0byBiZSBncmVhdGVyIHRoYW4gMC5cIik7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIGF1dGhvcml0eSA9IGhvc3QudG9Mb3dlckNhc2UoKSArIFwiOlwiICsgcG9ydDtcbiAgaWYgKCFkZWZpbmVkKF9zZXJ2ZXJzW2F1dGhvcml0eV0pKSB7XG4gICAgX3NlcnZlcnNbYXV0aG9yaXR5XSA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHRydXN0ZWQgc2VydmVyIGZyb20gdGhlIHJlZ2lzdHJ5XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhvc3QgVGhlIGhvc3QgdG8gYmUgcmVtb3ZlZC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwb3J0IFRoZSBwb3J0IHVzZWQgdG8gYWNjZXNzIHRoZSBob3N0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZW1vdmUgYSB0cnVzdGVkIHNlcnZlclxuICogVHJ1c3RlZFNlcnZlcnMucmVtb3ZlKCdteS5zZXJ2ZXIuY29tJywgODApO1xuICovXG5UcnVzdGVkU2VydmVycy5yZW1vdmUgPSBmdW5jdGlvbiAoaG9zdCwgcG9ydCkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIWRlZmluZWQoaG9zdCkpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJob3N0IGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuICBpZiAoIWRlZmluZWQocG9ydCkgfHwgcG9ydCA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwicG9ydCBpcyByZXF1aXJlZCB0byBiZSBncmVhdGVyIHRoYW4gMC5cIik7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIGF1dGhvcml0eSA9IGhvc3QudG9Mb3dlckNhc2UoKSArIFwiOlwiICsgcG9ydDtcbiAgaWYgKGRlZmluZWQoX3NlcnZlcnNbYXV0aG9yaXR5XSkpIHtcbiAgICBkZWxldGUgX3NlcnZlcnNbYXV0aG9yaXR5XTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QXV0aG9yaXR5KHVybCkge1xuICB2YXIgdXJpID0gbmV3IFVyaSh1cmwpO1xuICB1cmkubm9ybWFsaXplKCk7XG5cbiAgLy8gUmVtb3ZlcyB1c2VybmFtZTpwYXNzd29yZEAgc28gd2UganVzdCBoYXZlIGhvc3RbOnBvcnRdXG4gIHZhciBhdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5KCk7XG4gIGlmIChhdXRob3JpdHkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gUmVsYXRpdmUgVVJMXG4gIH1cbiAgdXJpLmF1dGhvcml0eShhdXRob3JpdHkpO1xuXG4gIGlmIChhdXRob3JpdHkuaW5kZXhPZihcIkBcIikgIT09IC0xKSB7XG4gICAgdmFyIHBhcnRzID0gYXV0aG9yaXR5LnNwbGl0KFwiQFwiKTtcbiAgICBhdXRob3JpdHkgPSBwYXJ0c1sxXTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwb3J0IGlzIG1pc3NpbmcgYWRkIG9uZSBiYXNlZCBvbiB0aGUgc2NoZW1lXG4gIGlmIChhdXRob3JpdHkuaW5kZXhPZihcIjpcIikgPT09IC0xKSB7XG4gICAgdmFyIHNjaGVtZSA9IHVyaS5zY2hlbWUoKTtcbiAgICBpZiAoc2NoZW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2NoZW1lID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgc2NoZW1lID0gc2NoZW1lLnN1YnN0cmluZygwLCBzY2hlbWUubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGlmIChzY2hlbWUgPT09IFwiaHR0cFwiKSB7XG4gICAgICBhdXRob3JpdHkgKz0gXCI6ODBcIjtcbiAgICB9IGVsc2UgaWYgKHNjaGVtZSA9PT0gXCJodHRwc1wiKSB7XG4gICAgICBhdXRob3JpdHkgKz0gXCI6NDQzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF1dGhvcml0eTtcbn1cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGEgc2VydmVyIGlzIHRydXN0ZWQgb3Igbm90LiBUaGUgc2VydmVyIG11c3QgaGF2ZSBiZWVuIGFkZGVkIHdpdGggdGhlIHBvcnQgaWYgaXQgaXMgaW5jbHVkZWQgaW4gdGhlIHVybC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSB1cmwgdG8gYmUgdGVzdGVkIGFnYWluc3QgdGhlIHRydXN0ZWQgbGlzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdXJsIGlzIHRydXN0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIHNlcnZlclxuICogVHJ1c3RlZFNlcnZlcnMuYWRkKCdteS5zZXJ2ZXIuY29tJywgODEpO1xuICpcbiAqIC8vIENoZWNrIGlmIHNlcnZlciBpcyB0cnVzdGVkXG4gKiBpZiAoVHJ1c3RlZFNlcnZlcnMuY29udGFpbnMoJ2h0dHBzOi8vbXkuc2VydmVyLmNvbTo4MS9wYXRoL3RvL2ZpbGUucG5nJykpIHtcbiAqICAgICAvLyBteS5zZXJ2ZXIuY29tOjgxIGlzIHRydXN0ZWRcbiAqIH1cbiAqIGlmIChUcnVzdGVkU2VydmVycy5jb250YWlucygnaHR0cHM6Ly9teS5zZXJ2ZXIuY29tL3BhdGgvdG8vZmlsZS5wbmcnKSkge1xuICogICAgIC8vIG15LnNlcnZlci5jb20gaXNuJ3QgdHJ1c3RlZFxuICogfVxuICovXG5UcnVzdGVkU2VydmVycy5jb250YWlucyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKCFkZWZpbmVkKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJ1cmwgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuICB2YXIgYXV0aG9yaXR5ID0gZ2V0QXV0aG9yaXR5KHVybCk7XG4gIGlmIChkZWZpbmVkKGF1dGhvcml0eSkgJiYgZGVmaW5lZChfc2VydmVyc1thdXRob3JpdHldKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBDbGVhcnMgdGhlIHJlZ2lzdHJ5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlbW92ZSBhIHRydXN0ZWQgc2VydmVyXG4gKiBUcnVzdGVkU2VydmVycy5jbGVhcigpO1xuICovXG5UcnVzdGVkU2VydmVycy5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgX3NlcnZlcnMgPSB7fTtcbn07XG5leHBvcnQgZGVmYXVsdCBUcnVzdGVkU2VydmVycztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///84862\n')},15243:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _Credit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52975);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50491);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14459);\n/* harmony import */ var _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(71351);\n/* harmony import */ var _getImagePixels_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(81544);\n/* harmony import */ var _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(57134);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(99417);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96190);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68985);\n/* harmony import */ var _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(1497);\n/* harmony import */ var _TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9121);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction DataRectangle(rectangle, maxLevel) {\n  this.rectangle = rectangle;\n  this.maxLevel = maxLevel;\n}\n\n/**\n * A {@link TerrainProvider} that produces terrain geometry by tessellating height maps\n * retrieved from a {@link http://vr-theworld.com/|VT MÄK VR-TheWorld server}.\n *\n * @alias VRTheWorldTerrainProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The URL of the VR-TheWorld TileMap.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid.  If this parameter is not\n *                    specified, the WGS84 ellipsoid is used.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n *\n * @example\n * var terrainProvider = new Cesium.VRTheWorldTerrainProvider({\n *   url : \'https://www.vr-theworld.com/vr-theworld/tiles1.0.0/73/\'\n * });\n * viewer.terrainProvider = terrainProvider;\n *\n * @see TerrainProvider\n */\nfunction VRTheWorldTerrainProvider(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(options.url)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("options.url is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var resource = _Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(options.url);\n\n  this._resource = resource;\n\n  this._errorEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defer */ .Z.defer();\n\n  this._terrainDataStructure = {\n    heightScale: 1.0 / 1000.0,\n    heightOffset: -1000.0,\n    elementsPerHeight: 3,\n    stride: 4,\n    elementMultiplier: 256.0,\n    isBigEndian: true,\n    lowestEncodedHeight: 0,\n    highestEncodedHeight: 256 * 256 * 256 - 1,\n  };\n\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new _Credit_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(credit);\n  }\n  this._credit = credit;\n\n  this._tilingScheme = undefined;\n  this._rectangles = [];\n\n  var that = this;\n  var metadataError;\n  var ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].WGS84 */ .Z.WGS84);\n\n  function metadataSuccess(xml) {\n    var srs = xml.getElementsByTagName("SRS")[0].textContent;\n    if (srs === "EPSG:4326") {\n      that._tilingScheme = new _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({ ellipsoid: ellipsoid });\n    } else {\n      metadataFailure("SRS " + srs + " is not supported.");\n      return;\n    }\n\n    var tileFormat = xml.getElementsByTagName("TileFormat")[0];\n    that._heightmapWidth = parseInt(tileFormat.getAttribute("width"), 10);\n    that._heightmapHeight = parseInt(tileFormat.getAttribute("height"), 10);\n    that._levelZeroMaximumGeometricError = _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getEstimatedLevelZeroGeometricErrorForAHeightmap */ .Z.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n      ellipsoid,\n      Math.min(that._heightmapWidth, that._heightmapHeight),\n      that._tilingScheme.getNumberOfXTilesAtLevel(0)\n    );\n\n    var dataRectangles = xml.getElementsByTagName("DataExtent");\n\n    for (var i = 0; i < dataRectangles.length; ++i) {\n      var dataRectangle = dataRectangles[i];\n\n      var west = _Math_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toRadians */ .Z.toRadians(\n        parseFloat(dataRectangle.getAttribute("minx"))\n      );\n      var south = _Math_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toRadians */ .Z.toRadians(\n        parseFloat(dataRectangle.getAttribute("miny"))\n      );\n      var east = _Math_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toRadians */ .Z.toRadians(\n        parseFloat(dataRectangle.getAttribute("maxx"))\n      );\n      var north = _Math_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toRadians */ .Z.toRadians(\n        parseFloat(dataRectangle.getAttribute("maxy"))\n      );\n      var maxLevel = parseInt(dataRectangle.getAttribute("maxlevel"), 10);\n\n      that._rectangles.push(\n        new DataRectangle(new _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(west, south, east, north), maxLevel)\n      );\n    }\n\n    that._ready = true;\n    that._readyPromise.resolve(true);\n  }\n\n  function metadataFailure(e) {\n    var message = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      e,\n      "An error occurred while accessing " + that._resource.url + "."\n    );\n    metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].handleError */ .Z.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestMetadata\n    );\n  }\n\n  function requestMetadata() {\n    (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(that._resource.fetchXML(), metadataSuccess, metadataFailure);\n  }\n\n  requestMetadata();\n}\n\nObject.defineProperties(VRTheWorldTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link VRTheWorldTerrainProvider#ready} returns true.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link VRTheWorldTerrainProvider#ready} returns true.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n          "requestTileGeometry must not be called before ready returns true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link VRTheWorldTerrainProvider#ready} returns true.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link VRTheWorldTerrainProvider#ready} returns true.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof VRTheWorldTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link VRTheWorldTerrainProvider#ready} returns true.  The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nVRTheWorldTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this.ready) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "requestTileGeometry must not be called before ready returns true."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var yTiles = this._tilingScheme.getNumberOfYTilesAtLevel(level);\n  var resource = this._resource.getDerivedResource({\n    url: level + "/" + x + "/" + (yTiles - y - 1) + ".tif",\n    queryParameters: {\n      cesium: true,\n    },\n    request: request,\n  });\n  var promise = resource.fetchImage({\n    preferImageBitmap: true,\n  });\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(promise)) {\n    return undefined;\n  }\n\n  var that = this;\n  return (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(promise).then(function (image) {\n    return new _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n      buffer: (0,_getImagePixels_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(image),\n      width: that._heightmapWidth,\n      height: that._heightmapHeight,\n      childTileMask: getChildMask(that, x, y, level),\n      structure: that._terrainDataStructure,\n    });\n  });\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nVRTheWorldTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this.ready) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "requestTileGeometry must not be called before ready returns true."\n    );\n  }\n  //>>includeEnd(\'debug\');\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\nvar rectangleScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\nfunction getChildMask(provider, x, y, level) {\n  var tilingScheme = provider._tilingScheme;\n  var rectangles = provider._rectangles;\n  var parentRectangle = tilingScheme.tileXYToRectangle(x, y, level);\n\n  var childMask = 0;\n\n  for (var i = 0; i < rectangles.length && childMask !== 15; ++i) {\n    var rectangle = rectangles[i];\n    if (rectangle.maxLevel <= level) {\n      continue;\n    }\n\n    var testRectangle = rectangle.rectangle;\n\n    var intersection = _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].intersection */ .Z.intersection(\n      testRectangle,\n      parentRectangle,\n      rectangleScratch\n    );\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(intersection)) {\n      // Parent tile is inside this rectangle, so at least one child is, too.\n      if (\n        isTileInRectangle(tilingScheme, testRectangle, x * 2, y * 2, level + 1)\n      ) {\n        childMask |= 4; // northwest\n      }\n      if (\n        isTileInRectangle(\n          tilingScheme,\n          testRectangle,\n          x * 2 + 1,\n          y * 2,\n          level + 1\n        )\n      ) {\n        childMask |= 8; // northeast\n      }\n      if (\n        isTileInRectangle(\n          tilingScheme,\n          testRectangle,\n          x * 2,\n          y * 2 + 1,\n          level + 1\n        )\n      ) {\n        childMask |= 1; // southwest\n      }\n      if (\n        isTileInRectangle(\n          tilingScheme,\n          testRectangle,\n          x * 2 + 1,\n          y * 2 + 1,\n          level + 1\n        )\n      ) {\n        childMask |= 2; // southeast\n      }\n    }\n  }\n\n  return childMask;\n}\n\nfunction isTileInRectangle(tilingScheme, rectangle, x, y, level) {\n  var tileRectangle = tilingScheme.tileXYToRectangle(x, y, level);\n  return (0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(\n    _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].intersection */ .Z.intersection(tileRectangle, rectangle, rectangleScratch)\n  );\n}\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nVRTheWorldTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nVRTheWorldTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (VRTheWorldTerrainProvider)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15243\n')},67252:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n\n\n\n\n/**\n * A vertex format defines what attributes make up a vertex.  A VertexFormat can be provided\n * to a {@link Geometry} to request that certain properties be computed, e.g., just position,\n * position and normal, etc.\n *\n * @param {Object} [options] An object with boolean properties corresponding to VertexFormat properties as shown in the code example.\n *\n * @alias VertexFormat\n * @constructor\n *\n * @example\n * // Create a vertex format with position and 2D texture coordinate attributes.\n * var format = new Cesium.VertexFormat({\n *   position : true,\n *   st : true\n * });\n *\n * @see Geometry#attributes\n * @see Packable\n */\nfunction VertexFormat(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * When <code>true</code>, the vertex has a 3D position attribute.\n   * <p>\n   * 64-bit floating-point (for precision).  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.position = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.position, false);\n\n  /**\n   * When <code>true</code>, the vertex has a normal attribute (normalized), which is commonly used for lighting.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.normal = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.normal, false);\n\n  /**\n   * When <code>true</code>, the vertex has a 2D texture coordinate attribute.\n   * <p>\n   * 32-bit floating-point.  2 components per attribute\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.st = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.st, false);\n\n  /**\n   * When <code>true</code>, the vertex has a bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.bitangent = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.bitangent, false);\n\n  /**\n   * When <code>true</code>, the vertex has a tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n   * <p>\n   * 32-bit floating-point.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.tangent = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.tangent, false);\n\n  /**\n   * When <code>true</code>, the vertex has an RGB color attribute.\n   * <p>\n   * 8-bit unsigned byte.  3 components per attribute.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.color = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.color, false);\n}\n\n/**\n * An immutable vertex format with only a position attribute.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n */\nVertexFormat.POSITION_ONLY = Object.freeze(\n  new VertexFormat({\n    position: true,\n  })\n);\n\n/**\n * An immutable vertex format with position and normal attributes.\n * This is compatible with per-instance color appearances like {@link PerInstanceColorAppearance}.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n */\nVertexFormat.POSITION_AND_NORMAL = Object.freeze(\n  new VertexFormat({\n    position: true,\n    normal: true,\n  })\n);\n\n/**\n * An immutable vertex format with position, normal, and st attributes.\n * This is compatible with {@link MaterialAppearance} when {@link MaterialAppearance#materialSupport}\n * is <code>TEXTURED/code>.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n * @see VertexFormat#st\n */\nVertexFormat.POSITION_NORMAL_AND_ST = Object.freeze(\n  new VertexFormat({\n    position: true,\n    normal: true,\n    st: true,\n  })\n);\n\n/**\n * An immutable vertex format with position and st attributes.\n * This is compatible with {@link EllipsoidSurfaceAppearance}.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#st\n */\nVertexFormat.POSITION_AND_ST = Object.freeze(\n  new VertexFormat({\n    position: true,\n    st: true,\n  })\n);\n\n/**\n * An immutable vertex format with position and color attributes.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#color\n */\nVertexFormat.POSITION_AND_COLOR = Object.freeze(\n  new VertexFormat({\n    position: true,\n    color: true,\n  })\n);\n\n/**\n * An immutable vertex format with well-known attributes: position, normal, st, tangent, and bitangent.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n * @see VertexFormat#st\n * @see VertexFormat#tangent\n * @see VertexFormat#bitangent\n */\nVertexFormat.ALL = Object.freeze(\n  new VertexFormat({\n    position: true,\n    normal: true,\n    st: true,\n    tangent: true,\n    bitangent: true,\n  })\n);\n\n/**\n * An immutable vertex format with position, normal, and st attributes.\n * This is compatible with most appearances and materials; however\n * normal and st attributes are not always required.  When this is\n * known in advance, another <code>VertexFormat</code> should be used.\n *\n * @type {VertexFormat}\n * @constant\n *\n * @see VertexFormat#position\n * @see VertexFormat#normal\n */\nVertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nVertexFormat.packedLength = 6;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {VertexFormat} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nVertexFormat.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(value)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("value is required");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(startingIndex, 0);\n\n  array[startingIndex++] = value.position ? 1.0 : 0.0;\n  array[startingIndex++] = value.normal ? 1.0 : 0.0;\n  array[startingIndex++] = value.st ? 1.0 : 0.0;\n  array[startingIndex++] = value.tangent ? 1.0 : 0.0;\n  array[startingIndex++] = value.bitangent ? 1.0 : 0.0;\n  array[startingIndex] = value.color ? 1.0 : 0.0;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {VertexFormat} [result] The object into which to store the result.\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided.\n */\nVertexFormat.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(array)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("array is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(startingIndex, 0);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    result = new VertexFormat();\n  }\n\n  result.position = array[startingIndex++] === 1.0;\n  result.normal = array[startingIndex++] === 1.0;\n  result.st = array[startingIndex++] === 1.0;\n  result.tangent = array[startingIndex++] === 1.0;\n  result.bitangent = array[startingIndex++] === 1.0;\n  result.color = array[startingIndex] === 1.0;\n  return result;\n};\n\n/**\n * Duplicates a VertexFormat instance.\n *\n * @param {VertexFormat} vertexFormat The vertex format to duplicate.\n * @param {VertexFormat} [result] The object onto which to store the result.\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided. (Returns undefined if vertexFormat is undefined)\n */\nVertexFormat.clone = function (vertexFormat, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(vertexFormat)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    result = new VertexFormat();\n  }\n\n  result.position = vertexFormat.position;\n  result.normal = vertexFormat.normal;\n  result.st = vertexFormat.st;\n  result.tangent = vertexFormat.tangent;\n  result.bitangent = vertexFormat.bitangent;\n  result.color = vertexFormat.color;\n  return result;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (VertexFormat);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///67252\n')},36999:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _destroyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86511);\n/* harmony import */ var _Iso8601_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22841);\n/* harmony import */ var _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(55293);\n\n\n\n\n\n\n/**\n * Synchronizes a video element with a simulation clock.\n *\n * @alias VideoSynchronizer\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Clock} [options.clock] The clock instance used to drive the video.\n * @param {HTMLVideoElement} [options.element] The video element to be synchronized.\n * @param {JulianDate} [options.epoch=Iso8601.MINIMUM_VALUE] The simulation time that marks the start of the video.\n * @param {Number} [options.tolerance=1.0] The maximum amount of time, in seconds, that the clock and video can diverge.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Video.html|Video Material Demo}\n */\nfunction VideoSynchronizer(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._clock = undefined;\n  this._element = undefined;\n  this._clockSubscription = undefined;\n  this._seekFunction = undefined;\n  this._lastPlaybackRate = undefined;\n\n  this.clock = options.clock;\n  this.element = options.element;\n\n  /**\n   * Gets or sets the simulation time that marks the start of the video.\n   * @type {JulianDate}\n   * @default Iso8601.MINIMUM_VALUE\n   */\n  this.epoch = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.epoch, _Iso8601_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE);\n\n  /**\n   * Gets or sets the amount of time in seconds the video\'s currentTime\n   * and the clock\'s currentTime can diverge before a video seek is performed.\n   * Lower values make the synchronization more accurate but video\n   * performance might suffer.  Higher values provide better performance\n   * but at the cost of accuracy.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.tolerance = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.tolerance, 1.0);\n\n  this._seeking = false;\n  this._seekFunction = undefined;\n  this._firstTickAfterSeek = false;\n}\n\nObject.defineProperties(VideoSynchronizer.prototype, {\n  /**\n   * Gets or sets the clock used to drive the video element.\n   *\n   * @memberof VideoSynchronizer.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n    set: function (value) {\n      var oldValue = this._clock;\n\n      if (oldValue === value) {\n        return;\n      }\n\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(oldValue)) {\n        this._clockSubscription();\n        this._clockSubscription = undefined;\n      }\n\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value)) {\n        this._clockSubscription = value.onTick.addEventListener(\n          VideoSynchronizer.prototype._onTick,\n          this\n        );\n      }\n\n      this._clock = value;\n    },\n  },\n  /**\n   * Gets or sets the video element to synchronize.\n   *\n   * @memberof VideoSynchronizer.prototype\n   * @type {HTMLVideoElement}\n   */\n  element: {\n    get: function () {\n      return this._element;\n    },\n    set: function (value) {\n      var oldValue = this._element;\n\n      if (oldValue === value) {\n        return;\n      }\n\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(oldValue)) {\n        oldValue.removeEventListener("seeked", this._seekFunction, false);\n      }\n\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value)) {\n        this._seeking = false;\n        this._seekFunction = createSeekFunction(this);\n        value.addEventListener("seeked", this._seekFunction, false);\n      }\n\n      this._element = value;\n      this._seeking = false;\n      this._firstTickAfterSeek = false;\n    },\n  },\n});\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nVideoSynchronizer.prototype.destroy = function () {\n  this.element = undefined;\n  this.clock = undefined;\n  return (0,_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nVideoSynchronizer.prototype.isDestroyed = function () {\n  return false;\n};\n\nVideoSynchronizer.prototype._trySetPlaybackRate = function (clock) {\n  if (this._lastPlaybackRate === clock.multiplier) {\n    return;\n  }\n\n  var element = this._element;\n  try {\n    element.playbackRate = clock.multiplier;\n  } catch (error) {\n    // Seek manually for unsupported playbackRates.\n    element.playbackRate = 0.0;\n  }\n  this._lastPlaybackRate = clock.multiplier;\n};\n\nVideoSynchronizer.prototype._onTick = function (clock) {\n  var element = this._element;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(element) || element.readyState < 2) {\n    return;\n  }\n\n  var paused = element.paused;\n  var shouldAnimate = clock.shouldAnimate;\n  if (shouldAnimate === paused) {\n    if (shouldAnimate) {\n      element.play();\n    } else {\n      element.pause();\n    }\n  }\n\n  //We need to avoid constant seeking or the video will\n  //never contain a complete frame for us to render.\n  //So don\'t do anything if we\'re seeing or on the first\n  //tick after a seek (the latter of which allows the frame\n  //to actually be rendered.\n  if (this._seeking || this._firstTickAfterSeek) {\n    this._firstTickAfterSeek = false;\n    return;\n  }\n\n  this._trySetPlaybackRate(clock);\n\n  var clockTime = clock.currentTime;\n  var epoch = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this.epoch, _Iso8601_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE);\n  var videoTime = _JulianDate_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].secondsDifference */ .Z.secondsDifference(clockTime, epoch);\n\n  var duration = element.duration;\n  var desiredTime;\n  var currentTime = element.currentTime;\n  if (element.loop) {\n    videoTime = videoTime % duration;\n    if (videoTime < 0.0) {\n      videoTime = duration - videoTime;\n    }\n    desiredTime = videoTime;\n  } else if (videoTime > duration) {\n    desiredTime = duration;\n  } else if (videoTime < 0.0) {\n    desiredTime = 0.0;\n  } else {\n    desiredTime = videoTime;\n  }\n\n  //If the playing video\'s time and the scene\'s clock time\n  //ever drift too far apart, we want to set the video to match\n  var tolerance = shouldAnimate ? (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this.tolerance, 1.0) : 0.001;\n  if (Math.abs(desiredTime - currentTime) > tolerance) {\n    this._seeking = true;\n    element.currentTime = desiredTime;\n  }\n};\n\nfunction createSeekFunction(that) {\n  return function () {\n    that._seeking = false;\n    that._firstTickAfterSeek = true;\n  };\n}\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (VideoSynchronizer)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36999\n')}}]);