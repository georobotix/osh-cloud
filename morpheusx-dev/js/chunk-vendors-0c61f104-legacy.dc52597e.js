"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[9194],{11184:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88108);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8182);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(39960);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(38443);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(68985);\n/* harmony import */ var _Renderer_PassState_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(65121);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(88453);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(13222);\n/* harmony import */ var _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(26615);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Runs a post-process stage on either the texture rendered by the scene or the output of a previous post-process stage.\n *\n * @alias PostProcessStage\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {String} options.fragmentShader The fragment shader to use. The default <code>sampler2D</code> uniforms are <code>colorTexture</code> and <code>depthTexture</code>. The color texture is the output of rendering the scene or the previous stage. The depth texture is the output from rendering the scene. The shader should contain one or both uniforms. There is also a <code>vec2</code> varying named <code>v_textureCoordinates</code> that can be used to sample the textures.\n * @param {Object} [options.uniforms] An object whose properties will be used to set the shaders uniforms. The properties can be constant values or a function. A constant value can also be a URI, data URI, or HTML element to use as a texture.\n * @param {Number} [options.textureScale=1.0] A number in the range (0.0, 1.0] used to scale the texture dimensions. A scale of 1.0 will render this post-process stage  to a texture the size of the viewport.\n * @param {Boolean} [options.forcePowerOfTwo=false] Whether or not to force the texture dimensions to be both equal powers of two. The power of two will be the next power of two of the minimum of the dimensions.\n * @param {PostProcessStageSampleMode} [options.sampleMode=PostProcessStageSampleMode.NEAREST] How to sample the input color texture.\n * @param {PixelFormat} [options.pixelFormat=PixelFormat.RGBA] The color pixel format of the output texture.\n * @param {PixelDatatype} [options.pixelDatatype=PixelDatatype.UNSIGNED_BYTE] The pixel data type of the output texture.\n * @param {Color} [options.clearColor=Color.BLACK] The color to clear the output texture to.\n * @param {BoundingRectangle} [options.scissorRectangle] The rectangle to use for the scissor test.\n * @param {String} [options.name=createGuid()] The unique name of this post-process stage for reference by other stages in a composite. If a name is not supplied, a GUID will be generated.\n *\n * @exception {DeveloperError} options.textureScale must be greater than 0.0 and less than or equal to 1.0.\n * @exception {DeveloperError} options.pixelFormat must be a color format.\n * @exception {DeveloperError} When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension.  Check context.floatingPointTexture.\n *\n * @see PostProcessStageComposite\n *\n * @example\n * // Simple stage to change the color\n * var fs =\n *     \'uniform sampler2D colorTexture;\\n\' +\n *     \'varying vec2 v_textureCoordinates;\\n\' +\n *     \'uniform float scale;\\n\' +\n *     \'uniform vec3 offset;\\n\' +\n *     \'void main() {\\n\' +\n *     \'    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\' +\n *     \'    gl_FragColor = vec4(color.rgb * scale + offset, 1.0);\\n\' +\n *     \'}\\n\';\n * scene.postProcessStages.add(new Cesium.PostProcessStage({\n *     fragmentShader : fs,\n *     uniforms : {\n *         scale : 1.1,\n *         offset : function() {\n *             return new Cesium.Cartesian3(0.1, 0.2, 0.3);\n *         }\n *     }\n * }));\n *\n * @example\n * // Simple stage to change the color of what is selected.\n * // If czm_selected returns true, the current fragment belongs to geometry in the selected array.\n * var fs =\n *     \'uniform sampler2D colorTexture;\\n\' +\n *     \'varying vec2 v_textureCoordinates;\\n\' +\n *     \'uniform vec4 highlight;\\n\' +\n *     \'void main() {\\n\' +\n *     \'    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\' +\n *     \'    if (czm_selected()) {\\n\' +\n *     \'        vec3 highlighted = highlight.a * highlight.rgb + (1.0 - highlight.a) * color.rgb;\\n\' +\n *     \'        gl_FragColor = vec4(highlighted, 1.0);\\n\' +\n *     \'    } else { \\n\' +\n *     \'        gl_FragColor = color;\\n\' +\n *     \'    }\\n\' +\n *     \'}\\n\';\n * var stage = scene.postProcessStages.add(new Cesium.PostProcessStage({\n *     fragmentShader : fs,\n *     uniforms : {\n *         highlight : function() {\n *             return new Cesium.Color(1.0, 0.0, 0.0, 0.5);\n *         }\n *     }\n * }));\n * stage.selected = [cesium3DTileFeature];\n */\nfunction PostProcessStage(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var fragmentShader = options.fragmentShader;\n  var textureScale = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.textureScale, 1.0);\n  var pixelFormat = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.pixelFormat, _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RGBA */ .Z.RGBA);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.string */ .Z.typeOf.string("options.fragmentShader", fragmentShader);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("options.textureScale", textureScale, 0.0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n    "options.textureScale",\n    textureScale,\n    1.0\n  );\n  if (!_Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].isColorFormat */ .Z.isColorFormat(pixelFormat)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("options.pixelFormat must be a color format.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._fragmentShader = fragmentShader;\n  this._uniforms = options.uniforms;\n  this._textureScale = textureScale;\n  this._forcePowerOfTwo = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.forcePowerOfTwo, false);\n  this._sampleMode = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.sampleMode,\n    _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].NEAREST */ .Z.NEAREST\n  );\n  this._pixelFormat = pixelFormat;\n  this._pixelDatatype = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.pixelDatatype,\n    _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE\n  );\n  this._clearColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.clearColor, _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BLACK */ .Z.BLACK);\n\n  this._uniformMap = undefined;\n  this._command = undefined;\n\n  this._colorTexture = undefined;\n  this._depthTexture = undefined;\n  this._idTexture = undefined;\n\n  this._actualUniforms = {};\n  this._dirtyUniforms = [];\n  this._texturesToRelease = [];\n  this._texturesToCreate = [];\n  this._texturePromise = undefined;\n\n  var passState = new _Renderer_PassState_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\n  passState.scissorTest = {\n    enabled: true,\n    rectangle: (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(options.scissorRectangle)\n      ? _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(options.scissorRectangle)\n      : new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(),\n  };\n  this._passState = passState;\n\n  this._ready = false;\n\n  var name = options.name;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(name)) {\n    name = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z)();\n  }\n  this._name = name;\n\n  this._logDepthChanged = undefined;\n  this._useLogDepth = undefined;\n\n  this._selectedIdTexture = undefined;\n  this._selected = undefined;\n  this._selectedShadow = undefined;\n  this._parentSelected = undefined;\n  this._parentSelectedShadow = undefined;\n  this._combinedSelected = undefined;\n  this._combinedSelectedShadow = undefined;\n  this._selectedLength = 0;\n  this._parentSelectedLength = 0;\n  this._selectedDirty = true;\n\n  // set by PostProcessStageCollection\n  this._textureCache = undefined;\n  this._index = undefined;\n\n  /**\n   * Whether or not to execute this post-process stage when ready.\n   *\n   * @type {Boolean}\n   */\n  this.enabled = true;\n  this._enabled = true;\n}\n\nObject.defineProperties(PostProcessStage.prototype, {\n  /**\n   * Determines if this post-process stage is ready to be executed. A stage is only executed when both <code>ready</code>\n   * and {@link PostProcessStage#enabled} are <code>true</code>. A stage will not be ready while it is waiting on textures\n   * to load.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n  /**\n   * The unique name of this post-process stage for reference by other stages in a {@link PostProcessStageComposite}.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n  /**\n   * The fragment shader to use when execute this post-process stage.\n   * <p>\n   * The shader must contain a sampler uniform declaration for <code>colorTexture</code>, <code>depthTexture</code>,\n   * or both.\n   * </p>\n   * <p>\n   * The shader must contain a <code>vec2</code> varying declaration for <code>v_textureCoordinates</code> for sampling\n   * the texture uniforms.\n   * </p>\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {String}\n   * @readonly\n   */\n  fragmentShader: {\n    get: function () {\n      return this._fragmentShader;\n    },\n  },\n  /**\n   * An object whose properties are used to set the uniforms of the fragment shader.\n   * <p>\n   * The object property values can be either a constant or a function. The function will be called\n   * each frame before the post-process stage is executed.\n   * </p>\n   * <p>\n   * A constant value can also be a URI to an image, a data URI, or an HTML element that can be used as a texture, such as HTMLImageElement or HTMLCanvasElement.\n   * </p>\n   * <p>\n   * If this post-process stage is part of a {@link PostProcessStageComposite} that does not execute in series, the constant value can also be\n   * the name of another stage in a composite. This will set the uniform to the output texture the stage with that name.\n   * </p>\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Object}\n   * @readonly\n   */\n  uniforms: {\n    get: function () {\n      return this._uniforms;\n    },\n  },\n  /**\n   * A number in the range (0.0, 1.0] used to scale the output texture dimensions. A scale of 1.0 will render this post-process stage to a texture the size of the viewport.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Number}\n   * @readonly\n   */\n  textureScale: {\n    get: function () {\n      return this._textureScale;\n    },\n  },\n  /**\n   * Whether or not to force the output texture dimensions to be both equal powers of two. The power of two will be the next power of two of the minimum of the dimensions.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Number}\n   * @readonly\n   */\n  forcePowerOfTwo: {\n    get: function () {\n      return this._forcePowerOfTwo;\n    },\n  },\n  /**\n   * How to sample the input color texture.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {PostProcessStageSampleMode}\n   * @readonly\n   */\n  sampleMode: {\n    get: function () {\n      return this._sampleMode;\n    },\n  },\n  /**\n   * The color pixel format of the output texture.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {PixelFormat}\n   * @readonly\n   */\n  pixelFormat: {\n    get: function () {\n      return this._pixelFormat;\n    },\n  },\n  /**\n   * The pixel data type of the output texture.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {PixelDatatype}\n   * @readonly\n   */\n  pixelDatatype: {\n    get: function () {\n      return this._pixelDatatype;\n    },\n  },\n  /**\n   * The color to clear the output texture to.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Color}\n   * @readonly\n   */\n  clearColor: {\n    get: function () {\n      return this._clearColor;\n    },\n  },\n  /**\n   * The {@link BoundingRectangle} to use for the scissor test. A default bounding rectangle will disable the scissor test.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {BoundingRectangle}\n   * @readonly\n   */\n  scissorRectangle: {\n    get: function () {\n      return this._passState.scissorTest.rectangle;\n    },\n  },\n  /**\n   * A reference to the texture written to when executing this post process stage.\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function () {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(this._textureCache)) {\n        var framebuffer = this._textureCache.getFramebuffer(this._name);\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(framebuffer)) {\n          return framebuffer.getColorTexture(0);\n        }\n      }\n      return undefined;\n    },\n  },\n  /**\n   * The features selected for applying the post-process.\n   * <p>\n   * In the fragment shader, use <code>czm_selected</code> to determine whether or not to apply the post-process\n   * stage to that fragment. For example:\n   * <code>\n   * if (czm_selected(v_textureCoordinates)) {\n   *     // apply post-process stage\n   * } else {\n   *     gl_FragColor = texture2D(colorTexture, v_textureCordinates);\n   * }\n   * </code>\n   * </p>\n   *\n   * @memberof PostProcessStage.prototype\n   * @type {Array}\n   */\n  selected: {\n    get: function () {\n      return this._selected;\n    },\n    set: function (value) {\n      this._selected = value;\n    },\n  },\n  /**\n   * @private\n   */\n  parentSelected: {\n    get: function () {\n      return this._parentSelected;\n    },\n    set: function (value) {\n      this._parentSelected = value;\n    },\n  },\n});\n\nvar depthTextureRegex = /uniform\\s+sampler2D\\s+depthTexture/g;\n\n/**\n * @private\n */\nPostProcessStage.prototype._isSupported = function (context) {\n  return !depthTextureRegex.test(this._fragmentShader) || context.depthTexture;\n};\n\nfunction getUniformValueGetterAndSetter(stage, uniforms, name) {\n  var currentValue = uniforms[name];\n  if (\n    typeof currentValue === "string" ||\n    currentValue instanceof HTMLCanvasElement ||\n    currentValue instanceof HTMLImageElement ||\n    currentValue instanceof HTMLVideoElement ||\n    currentValue instanceof ImageData\n  ) {\n    stage._dirtyUniforms.push(name);\n  }\n\n  return {\n    get: function () {\n      return uniforms[name];\n    },\n    set: function (value) {\n      var currentValue = uniforms[name];\n      uniforms[name] = value;\n\n      var actualUniforms = stage._actualUniforms;\n      var actualValue = actualUniforms[name];\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(actualValue) &&\n        actualValue !== currentValue &&\n        actualValue instanceof _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z &&\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._textureCache.getStageByName(name))\n      ) {\n        stage._texturesToRelease.push(actualValue);\n        delete actualUniforms[name];\n        delete actualUniforms[name + "Dimensions"];\n      }\n\n      if (currentValue instanceof _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z) {\n        stage._texturesToRelease.push(currentValue);\n      }\n\n      if (\n        typeof value === "string" ||\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof HTMLVideoElement ||\n        value instanceof ImageData\n      ) {\n        stage._dirtyUniforms.push(name);\n      } else {\n        actualUniforms[name] = value;\n      }\n    },\n  };\n}\n\nfunction getUniformMapFunction(stage, name) {\n  return function () {\n    var value = stage._actualUniforms[name];\n    if (typeof value === "function") {\n      return value();\n    }\n    return value;\n  };\n}\n\nfunction getUniformMapDimensionsFunction(uniformMap, name) {\n  return function () {\n    var texture = uniformMap[name]();\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(texture)) {\n      return texture.dimensions;\n    }\n    return undefined;\n  };\n}\n\nfunction createUniformMap(stage) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._uniformMap)) {\n    return;\n  }\n\n  var uniformMap = {};\n  var newUniforms = {};\n  var uniforms = stage._uniforms;\n  var actualUniforms = stage._actualUniforms;\n  for (var name in uniforms) {\n    if (uniforms.hasOwnProperty(name)) {\n      if (typeof uniforms[name] !== "function") {\n        uniformMap[name] = getUniformMapFunction(stage, name);\n        newUniforms[name] = getUniformValueGetterAndSetter(\n          stage,\n          uniforms,\n          name\n        );\n      } else {\n        uniformMap[name] = uniforms[name];\n        newUniforms[name] = uniforms[name];\n      }\n\n      actualUniforms[name] = uniforms[name];\n\n      var value = uniformMap[name]();\n      if (\n        typeof value === "string" ||\n        value instanceof _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z ||\n        value instanceof HTMLImageElement ||\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLVideoElement\n      ) {\n        uniformMap[name + "Dimensions"] = getUniformMapDimensionsFunction(\n          uniformMap,\n          name\n        );\n      }\n    }\n  }\n\n  stage._uniforms = {};\n  Object.defineProperties(stage._uniforms, newUniforms);\n\n  stage._uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(uniformMap, {\n    colorTexture: function () {\n      return stage._colorTexture;\n    },\n    colorTextureDimensions: function () {\n      return stage._colorTexture.dimensions;\n    },\n    depthTexture: function () {\n      return stage._depthTexture;\n    },\n    depthTextureDimensions: function () {\n      return stage._depthTexture.dimensions;\n    },\n    czm_idTexture: function () {\n      return stage._idTexture;\n    },\n    czm_selectedIdTexture: function () {\n      return stage._selectedIdTexture;\n    },\n    czm_selectedIdTextureStep: function () {\n      return 1.0 / stage._selectedIdTexture.width;\n    },\n  });\n}\n\nfunction createDrawCommand(stage, context) {\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._command) &&\n    !stage._logDepthChanged &&\n    !stage._selectedDirty\n  ) {\n    return;\n  }\n\n  var fs = stage._fragmentShader;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._selectedIdTexture)) {\n    var width = stage._selectedIdTexture.width;\n\n    fs = fs.replace(/varying\\s+vec2\\s+v_textureCoordinates;/g, "");\n    fs =\n      "#define CZM_SELECTED_FEATURE \\n" +\n      "uniform sampler2D czm_idTexture; \\n" +\n      "uniform sampler2D czm_selectedIdTexture; \\n" +\n      "uniform float czm_selectedIdTextureStep; \\n" +\n      "varying vec2 v_textureCoordinates; \\n" +\n      "bool czm_selected(vec2 offset) \\n" +\n      "{ \\n" +\n      "    bool selected = false;\\n" +\n      "    vec4 id = texture2D(czm_idTexture, v_textureCoordinates + offset); \\n" +\n      "    for (int i = 0; i < " +\n      width +\n      "; ++i) \\n" +\n      "    { \\n" +\n      "        vec4 selectedId = texture2D(czm_selectedIdTexture, vec2((float(i) + 0.5) * czm_selectedIdTextureStep, 0.5)); \\n" +\n      "        if (all(equal(id, selectedId))) \\n" +\n      "        { \\n" +\n      "            return true; \\n" +\n      "        } \\n" +\n      "    } \\n" +\n      "    return false; \\n" +\n      "} \\n\\n" +\n      "bool czm_selected() \\n" +\n      "{ \\n" +\n      "    return czm_selected(vec2(0.0)); \\n" +\n      "} \\n\\n" +\n      fs;\n  }\n\n  var fragmentShader = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n    defines: [stage._useLogDepth ? "LOG_DEPTH" : ""],\n    sources: [fs],\n  });\n  stage._command = context.createViewportQuadCommand(fragmentShader, {\n    uniformMap: stage._uniformMap,\n    owner: stage,\n  });\n}\n\nfunction createSampler(stage) {\n  var mode = stage._sampleMode;\n\n  var minFilter;\n  var magFilter;\n\n  if (mode === _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].LINEAR */ .Z.LINEAR) {\n    minFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].LINEAR */ .Z.LINEAR;\n    magFilter = _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].LINEAR */ .Z.LINEAR;\n  } else {\n    minFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].NEAREST */ .Z.NEAREST;\n    magFilter = _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].NEAREST */ .Z.NEAREST;\n  }\n\n  var sampler = stage._sampler;\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(sampler) ||\n    sampler.minificationFilter !== minFilter ||\n    sampler.magnificationFilter !== magFilter\n  ) {\n    stage._sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n      wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      minificationFilter: minFilter,\n      magnificationFilter: magFilter,\n    });\n  }\n}\n\nfunction createLoadImageFunction(stage, name) {\n  return function (image) {\n    stage._texturesToCreate.push({\n      name: name,\n      source: image,\n    });\n  };\n}\n\nfunction createStageOutputTextureFunction(stage, name) {\n  return function () {\n    return stage._textureCache.getOutputTexture(name);\n  };\n}\n\nfunction updateUniformTextures(stage, context) {\n  var i;\n  var texture;\n  var name;\n\n  var texturesToRelease = stage._texturesToRelease;\n  var length = texturesToRelease.length;\n  for (i = 0; i < length; ++i) {\n    texture = texturesToRelease[i];\n    texture = texture && texture.destroy();\n  }\n  texturesToRelease.length = 0;\n\n  var texturesToCreate = stage._texturesToCreate;\n  length = texturesToCreate.length;\n  for (i = 0; i < length; ++i) {\n    var textureToCreate = texturesToCreate[i];\n    name = textureToCreate.name;\n    var source = textureToCreate.source;\n    stage._actualUniforms[name] = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      context: context,\n      source: source,\n    });\n  }\n  texturesToCreate.length = 0;\n\n  var dirtyUniforms = stage._dirtyUniforms;\n  if (dirtyUniforms.length === 0 && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._texturePromise)) {\n    stage._ready = true;\n    return;\n  }\n\n  if (dirtyUniforms.length === 0 || (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._texturePromise)) {\n    return;\n  }\n\n  length = dirtyUniforms.length;\n  var uniforms = stage._uniforms;\n  var promises = [];\n  for (i = 0; i < length; ++i) {\n    name = dirtyUniforms[i];\n    var stageNameUrlOrImage = uniforms[name];\n    var stageWithName = stage._textureCache.getStageByName(stageNameUrlOrImage);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stageWithName)) {\n      stage._actualUniforms[name] = createStageOutputTextureFunction(\n        stage,\n        stageNameUrlOrImage\n      );\n    } else if (typeof stageNameUrlOrImage === "string") {\n      var resource = new _Core_Resource_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n        url: stageNameUrlOrImage,\n      });\n\n      promises.push(\n        resource.fetchImage().then(createLoadImageFunction(stage, name))\n      );\n    } else {\n      stage._texturesToCreate.push({\n        name: name,\n        source: stageNameUrlOrImage,\n      });\n    }\n  }\n\n  dirtyUniforms.length = 0;\n\n  if (promises.length > 0) {\n    stage._ready = false;\n    stage._texturePromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].all */ .Z.all(promises).then(function () {\n      stage._ready = true;\n      stage._texturePromise = undefined;\n    });\n  } else {\n    stage._ready = true;\n  }\n}\n\nfunction releaseResources(stage) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._command)) {\n    stage._command.shaderProgram =\n      stage._command.shaderProgram && stage._command.shaderProgram.destroy();\n    stage._command = undefined;\n  }\n\n  stage._selectedIdTexture =\n    stage._selectedIdTexture && stage._selectedIdTexture.destroy();\n\n  var textureCache = stage._textureCache;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(textureCache)) {\n    return;\n  }\n\n  var uniforms = stage._uniforms;\n  var actualUniforms = stage._actualUniforms;\n  for (var name in actualUniforms) {\n    if (actualUniforms.hasOwnProperty(name)) {\n      if (actualUniforms[name] instanceof _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z) {\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(textureCache.getStageByName(uniforms[name]))) {\n          actualUniforms[name].destroy();\n        }\n        stage._dirtyUniforms.push(name);\n      }\n    }\n  }\n}\n\nfunction isSelectedTextureDirty(stage) {\n  var length = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._selected) ? stage._selected.length : 0;\n  var parentLength = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._parentSelected) ? stage._parentSelected : 0;\n  var dirty =\n    stage._selected !== stage._selectedShadow ||\n    length !== stage._selectedLength;\n  dirty =\n    dirty ||\n    stage._parentSelected !== stage._parentSelectedShadow ||\n    parentLength !== stage._parentSelectedLength;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._selected) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._parentSelected)) {\n    stage._combinedSelected = stage._selected.concat(stage._parentSelected);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._parentSelected)) {\n    stage._combinedSelected = stage._parentSelected;\n  } else {\n    stage._combinedSelected = stage._selected;\n  }\n\n  if (!dirty && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._combinedSelected)) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(stage._combinedSelectedShadow)) {\n      return true;\n    }\n\n    length = stage._combinedSelected.length;\n    for (var i = 0; i < length; ++i) {\n      if (stage._combinedSelected[i] !== stage._combinedSelectedShadow[i]) {\n        return true;\n      }\n    }\n  }\n  return dirty;\n}\n\nfunction createSelectedTexture(stage, context) {\n  if (!stage._selectedDirty) {\n    return;\n  }\n\n  stage._selectedIdTexture =\n    stage._selectedIdTexture && stage._selectedIdTexture.destroy();\n  stage._selectedIdTexture = undefined;\n\n  var features = stage._combinedSelected;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(features)) {\n    return;\n  }\n\n  var i;\n  var feature;\n\n  var textureLength = 0;\n  var length = features.length;\n  for (i = 0; i < length; ++i) {\n    feature = features[i];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(feature.pickIds)) {\n      textureLength += feature.pickIds.length;\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(feature.pickId)) {\n      ++textureLength;\n    }\n  }\n\n  if (length === 0 || textureLength === 0) {\n    // max pick id is reserved\n    var empty = new Uint8Array(4);\n    empty[0] = 255;\n    empty[1] = 255;\n    empty[2] = 255;\n    empty[3] = 255;\n\n    stage._selectedIdTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n      context: context,\n      pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RGBA */ .Z.RGBA,\n      pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      source: {\n        arrayBufferView: empty,\n        width: 1,\n        height: 1,\n      },\n      sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].NEAREST */ .Z.NEAREST,\n    });\n    return;\n  }\n\n  var pickColor;\n  var offset = 0;\n  var ids = new Uint8Array(textureLength * 4);\n  for (i = 0; i < length; ++i) {\n    feature = features[i];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(feature.pickIds)) {\n      var pickIds = feature.pickIds;\n      var pickIdsLength = pickIds.length;\n      for (var j = 0; j < pickIdsLength; ++j) {\n        pickColor = pickIds[j].color;\n        ids[offset] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.red);\n        ids[offset + 1] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.green);\n        ids[offset + 2] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.blue);\n        ids[offset + 3] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.alpha);\n        offset += 4;\n      }\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(feature.pickId)) {\n      pickColor = feature.pickId.color;\n      ids[offset] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.red);\n      ids[offset + 1] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.green);\n      ids[offset + 2] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.blue);\n      ids[offset + 3] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.alpha);\n      offset += 4;\n    }\n  }\n\n  stage._selectedIdTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n    context: context,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n    source: {\n      arrayBufferView: ids,\n      width: textureLength,\n      height: 1,\n    },\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n}\n\n/**\n * A function that will be called before execute. Used to create WebGL resources and load any textures.\n * @param {Context} context The context.\n * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n * @private\n */\nPostProcessStage.prototype.update = function (context, useLogDepth) {\n  if (this.enabled !== this._enabled && !this.enabled) {\n    releaseResources(this);\n  }\n\n  this._enabled = this.enabled;\n  if (!this._enabled) {\n    return;\n  }\n\n  this._logDepthChanged = useLogDepth !== this._useLogDepth;\n  this._useLogDepth = useLogDepth;\n\n  this._selectedDirty = isSelectedTextureDirty(this);\n\n  this._selectedShadow = this._selected;\n  this._parentSelectedShadow = this._parentSelected;\n  this._combinedSelectedShadow = this._combinedSelected;\n  this._selectedLength = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(this._selected) ? this._selected.length : 0;\n  this._parentSelectedLength = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(this._parentSelected)\n    ? this._parentSelected.length\n    : 0;\n\n  createSelectedTexture(this, context);\n  createUniformMap(this);\n  updateUniformTextures(this, context);\n  createDrawCommand(this, context);\n  createSampler(this);\n\n  this._selectedDirty = false;\n\n  if (!this._ready) {\n    return;\n  }\n\n  var framebuffer = this._textureCache.getFramebuffer(this._name);\n  this._command.framebuffer = framebuffer;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(framebuffer)) {\n    return;\n  }\n\n  var colorTexture = framebuffer.getColorTexture(0);\n  var renderState;\n  if (\n    colorTexture.width !== context.drawingBufferWidth ||\n    colorTexture.height !== context.drawingBufferHeight\n  ) {\n    renderState = this._renderState;\n    if (\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(renderState) ||\n      colorTexture.width !== renderState.viewport.width ||\n      colorTexture.height !== renderState.viewport.height\n    ) {\n      this._renderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromCache */ .Z.fromCache({\n        viewport: new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n          0,\n          0,\n          colorTexture.width,\n          colorTexture.height\n        ),\n      });\n    }\n  }\n\n  this._command.renderState = renderState;\n};\n\n/**\n * Executes the post-process stage. The color texture is the texture rendered to by the scene or from the previous stage.\n * @param {Context} context The context.\n * @param {Texture} colorTexture The input color texture.\n * @param {Texture} depthTexture The input depth texture.\n * @param {Texture} idTexture The id texture.\n * @private\n */\nPostProcessStage.prototype.execute = function (\n  context,\n  colorTexture,\n  depthTexture,\n  idTexture\n) {\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(this._command) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(this._command.framebuffer) ||\n    !this._ready ||\n    !this._enabled\n  ) {\n    return;\n  }\n\n  this._colorTexture = colorTexture;\n  this._depthTexture = depthTexture;\n  this._idTexture = idTexture;\n\n  if (!_Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(this._colorTexture.sampler, this._sampler)) {\n    this._colorTexture.sampler = this._sampler;\n  }\n\n  var passState =\n    this.scissorRectangle.width > 0 && this.scissorRectangle.height > 0\n      ? this._passState\n      : undefined;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(passState)) {\n    passState.context = context;\n  }\n\n  this._command.execute(context, passState);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see PostProcessStage#destroy\n */\nPostProcessStage.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PostProcessStage#isDestroyed\n */\nPostProcessStage.prototype.destroy = function () {\n  releaseResources(this);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (PostProcessStage);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBLFNBQVMsMkVBQWE7QUFDdEI7QUFDQSx5REFBZSxnQkFBZ0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9Qb3N0UHJvY2Vzc1N0YWdlLmpzP2I1ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvdW5kaW5nUmVjdGFuZ2xlIGZyb20gXCIuLi9Db3JlL0JvdW5kaW5nUmVjdGFuZ2xlLmpzXCI7XG5pbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBDb2xvciBmcm9tIFwiLi4vQ29yZS9Db2xvci5qc1wiO1xuaW1wb3J0IGNvbWJpbmUgZnJvbSBcIi4uL0NvcmUvY29tYmluZS5qc1wiO1xuaW1wb3J0IGNyZWF0ZUd1aWQgZnJvbSBcIi4uL0NvcmUvY3JlYXRlR3VpZC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vQ29yZS9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBkZXN0cm95T2JqZWN0IGZyb20gXCIuLi9Db3JlL2Rlc3Ryb3lPYmplY3QuanNcIjtcbmltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuaW1wb3J0IFBpeGVsRm9ybWF0IGZyb20gXCIuLi9Db3JlL1BpeGVsRm9ybWF0LmpzXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4uL0NvcmUvUmVzb3VyY2UuanNcIjtcbmltcG9ydCBQYXNzU3RhdGUgZnJvbSBcIi4uL1JlbmRlcmVyL1Bhc3NTdGF0ZS5qc1wiO1xuaW1wb3J0IFBpeGVsRGF0YXR5cGUgZnJvbSBcIi4uL1JlbmRlcmVyL1BpeGVsRGF0YXR5cGUuanNcIjtcbmltcG9ydCBSZW5kZXJTdGF0ZSBmcm9tIFwiLi4vUmVuZGVyZXIvUmVuZGVyU3RhdGUuanNcIjtcbmltcG9ydCBTYW1wbGVyIGZyb20gXCIuLi9SZW5kZXJlci9TYW1wbGVyLmpzXCI7XG5pbXBvcnQgU2hhZGVyU291cmNlIGZyb20gXCIuLi9SZW5kZXJlci9TaGFkZXJTb3VyY2UuanNcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9SZW5kZXJlci9UZXh0dXJlLmpzXCI7XG5pbXBvcnQgVGV4dHVyZU1hZ25pZmljYXRpb25GaWx0ZXIgZnJvbSBcIi4uL1JlbmRlcmVyL1RleHR1cmVNYWduaWZpY2F0aW9uRmlsdGVyLmpzXCI7XG5pbXBvcnQgVGV4dHVyZU1pbmlmaWNhdGlvbkZpbHRlciBmcm9tIFwiLi4vUmVuZGVyZXIvVGV4dHVyZU1pbmlmaWNhdGlvbkZpbHRlci5qc1wiO1xuaW1wb3J0IFRleHR1cmVXcmFwIGZyb20gXCIuLi9SZW5kZXJlci9UZXh0dXJlV3JhcC5qc1wiO1xuaW1wb3J0IHdoZW4gZnJvbSBcIi4uL1RoaXJkUGFydHkvd2hlbi5qc1wiO1xuaW1wb3J0IFBvc3RQcm9jZXNzU3RhZ2VTYW1wbGVNb2RlIGZyb20gXCIuL1Bvc3RQcm9jZXNzU3RhZ2VTYW1wbGVNb2RlLmpzXCI7XG5cbi8qKlxuICogUnVucyBhIHBvc3QtcHJvY2VzcyBzdGFnZSBvbiBlaXRoZXIgdGhlIHRleHR1cmUgcmVuZGVyZWQgYnkgdGhlIHNjZW5lIG9yIHRoZSBvdXRwdXQgb2YgYSBwcmV2aW91cyBwb3N0LXByb2Nlc3Mgc3RhZ2UuXG4gKlxuICogQGFsaWFzIFBvc3RQcm9jZXNzU3RhZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmZyYWdtZW50U2hhZGVyIFRoZSBmcmFnbWVudCBzaGFkZXIgdG8gdXNlLiBUaGUgZGVmYXVsdCA8Y29kZT5zYW1wbGVyMkQ8L2NvZGU+IHVuaWZvcm1zIGFyZSA8Y29kZT5jb2xvclRleHR1cmU8L2NvZGU+IGFuZCA8Y29kZT5kZXB0aFRleHR1cmU8L2NvZGU+LiBUaGUgY29sb3IgdGV4dHVyZSBpcyB0aGUgb3V0cHV0IG9mIHJlbmRlcmluZyB0aGUgc2NlbmUgb3IgdGhlIHByZXZpb3VzIHN0YWdlLiBUaGUgZGVwdGggdGV4dHVyZSBpcyB0aGUgb3V0cHV0IGZyb20gcmVuZGVyaW5nIHRoZSBzY2VuZS4gVGhlIHNoYWRlciBzaG91bGQgY29udGFpbiBvbmUgb3IgYm90aCB1bmlmb3Jtcy4gVGhlcmUgaXMgYWxzbyBhIDxjb2RlPnZlYzI8L2NvZGU+IHZhcnlpbmcgbmFtZWQgPGNvZGU+dl90ZXh0dXJlQ29vcmRpbmF0ZXM8L2NvZGU+IHRoYXQgY2FuIGJlIHVzZWQgdG8gc2FtcGxlIHRoZSB0ZXh0dXJlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy51bmlmb3Jtc10gQW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkIHRvIHNldCB0aGUgc2hhZGVycyB1bmlmb3Jtcy4gVGhlIHByb3BlcnRpZXMgY2FuIGJlIGNvbnN0YW50IHZhbHVlcyBvciBhIGZ1bmN0aW9uLiBBIGNvbnN0YW50IHZhbHVlIGNhbiBhbHNvIGJlIGEgVVJJLCBkYXRhIFVSSSwgb3IgSFRNTCBlbGVtZW50IHRvIHVzZSBhcyBhIHRleHR1cmUuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudGV4dHVyZVNjYWxlPTEuMF0gQSBudW1iZXIgaW4gdGhlIHJhbmdlICgwLjAsIDEuMF0gdXNlZCB0byBzY2FsZSB0aGUgdGV4dHVyZSBkaW1lbnNpb25zLiBBIHNjYWxlIG9mIDEuMCB3aWxsIHJlbmRlciB0aGlzIHBvc3QtcHJvY2VzcyBzdGFnZSAgdG8gYSB0ZXh0dXJlIHRoZSBzaXplIG9mIHRoZSB2aWV3cG9ydC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZm9yY2VQb3dlck9mVHdvPWZhbHNlXSBXaGV0aGVyIG9yIG5vdCB0byBmb3JjZSB0aGUgdGV4dHVyZSBkaW1lbnNpb25zIHRvIGJlIGJvdGggZXF1YWwgcG93ZXJzIG9mIHR3by4gVGhlIHBvd2VyIG9mIHR3byB3aWxsIGJlIHRoZSBuZXh0IHBvd2VyIG9mIHR3byBvZiB0aGUgbWluaW11bSBvZiB0aGUgZGltZW5zaW9ucy5cbiAqIEBwYXJhbSB7UG9zdFByb2Nlc3NTdGFnZVNhbXBsZU1vZGV9IFtvcHRpb25zLnNhbXBsZU1vZGU9UG9zdFByb2Nlc3NTdGFnZVNhbXBsZU1vZGUuTkVBUkVTVF0gSG93IHRvIHNhbXBsZSB0aGUgaW5wdXQgY29sb3IgdGV4dHVyZS5cbiAqIEBwYXJhbSB7UGl4ZWxGb3JtYXR9IFtvcHRpb25zLnBpeGVsRm9ybWF0PVBpeGVsRm9ybWF0LlJHQkFdIFRoZSBjb2xvciBwaXhlbCBmb3JtYXQgb2YgdGhlIG91dHB1dCB0ZXh0dXJlLlxuICogQHBhcmFtIHtQaXhlbERhdGF0eXBlfSBbb3B0aW9ucy5waXhlbERhdGF0eXBlPVBpeGVsRGF0YXR5cGUuVU5TSUdORURfQllURV0gVGhlIHBpeGVsIGRhdGEgdHlwZSBvZiB0aGUgb3V0cHV0IHRleHR1cmUuXG4gKiBAcGFyYW0ge0NvbG9yfSBbb3B0aW9ucy5jbGVhckNvbG9yPUNvbG9yLkJMQUNLXSBUaGUgY29sb3IgdG8gY2xlYXIgdGhlIG91dHB1dCB0ZXh0dXJlIHRvLlxuICogQHBhcmFtIHtCb3VuZGluZ1JlY3RhbmdsZX0gW29wdGlvbnMuc2Npc3NvclJlY3RhbmdsZV0gVGhlIHJlY3RhbmdsZSB0byB1c2UgZm9yIHRoZSBzY2lzc29yIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMubmFtZT1jcmVhdGVHdWlkKCldIFRoZSB1bmlxdWUgbmFtZSBvZiB0aGlzIHBvc3QtcHJvY2VzcyBzdGFnZSBmb3IgcmVmZXJlbmNlIGJ5IG90aGVyIHN0YWdlcyBpbiBhIGNvbXBvc2l0ZS4gSWYgYSBuYW1lIGlzIG5vdCBzdXBwbGllZCwgYSBHVUlEIHdpbGwgYmUgZ2VuZXJhdGVkLlxuICpcbiAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBvcHRpb25zLnRleHR1cmVTY2FsZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLjAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAxLjAuXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gb3B0aW9ucy5waXhlbEZvcm1hdCBtdXN0IGJlIGEgY29sb3IgZm9ybWF0LlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFdoZW4gb3B0aW9ucy5waXhlbERhdGF0eXBlIGlzIEZMT0FULCB0aGlzIFdlYkdMIGltcGxlbWVudGF0aW9uIG11c3Qgc3VwcG9ydCB0aGUgT0VTX3RleHR1cmVfZmxvYXQgZXh0ZW5zaW9uLiAgQ2hlY2sgY29udGV4dC5mbG9hdGluZ1BvaW50VGV4dHVyZS5cbiAqXG4gKiBAc2VlIFBvc3RQcm9jZXNzU3RhZ2VDb21wb3NpdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU2ltcGxlIHN0YWdlIHRvIGNoYW5nZSB0aGUgY29sb3JcbiAqIHZhciBmcyA9XG4gKiAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIGNvbG9yVGV4dHVyZTtcXG4nICtcbiAqICAgICAndmFyeWluZyB2ZWMyIHZfdGV4dHVyZUNvb3JkaW5hdGVzO1xcbicgK1xuICogICAgICd1bmlmb3JtIGZsb2F0IHNjYWxlO1xcbicgK1xuICogICAgICd1bmlmb3JtIHZlYzMgb2Zmc2V0O1xcbicgK1xuICogICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gKiAgICAgJyAgICB2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKGNvbG9yVGV4dHVyZSwgdl90ZXh0dXJlQ29vcmRpbmF0ZXMpO1xcbicgK1xuICogICAgICcgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvci5yZ2IgKiBzY2FsZSArIG9mZnNldCwgMS4wKTtcXG4nICtcbiAqICAgICAnfVxcbic7XG4gKiBzY2VuZS5wb3N0UHJvY2Vzc1N0YWdlcy5hZGQobmV3IENlc2l1bS5Qb3N0UHJvY2Vzc1N0YWdlKHtcbiAqICAgICBmcmFnbWVudFNoYWRlciA6IGZzLFxuICogICAgIHVuaWZvcm1zIDoge1xuICogICAgICAgICBzY2FsZSA6IDEuMSxcbiAqICAgICAgICAgb2Zmc2V0IDogZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gbmV3IENlc2l1bS5DYXJ0ZXNpYW4zKDAuMSwgMC4yLCAwLjMpO1xuICogICAgICAgICB9XG4gKiAgICAgfVxuICogfSkpO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTaW1wbGUgc3RhZ2UgdG8gY2hhbmdlIHRoZSBjb2xvciBvZiB3aGF0IGlzIHNlbGVjdGVkLlxuICogLy8gSWYgY3ptX3NlbGVjdGVkIHJldHVybnMgdHJ1ZSwgdGhlIGN1cnJlbnQgZnJhZ21lbnQgYmVsb25ncyB0byBnZW9tZXRyeSBpbiB0aGUgc2VsZWN0ZWQgYXJyYXkuXG4gKiB2YXIgZnMgPVxuICogICAgICd1bmlmb3JtIHNhbXBsZXIyRCBjb2xvclRleHR1cmU7XFxuJyArXG4gKiAgICAgJ3ZhcnlpbmcgdmVjMiB2X3RleHR1cmVDb29yZGluYXRlcztcXG4nICtcbiAqICAgICAndW5pZm9ybSB2ZWM0IGhpZ2hsaWdodDtcXG4nICtcbiAqICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICogICAgICcgICAgdmVjNCBjb2xvciA9IHRleHR1cmUyRChjb2xvclRleHR1cmUsIHZfdGV4dHVyZUNvb3JkaW5hdGVzKTtcXG4nICtcbiAqICAgICAnICAgIGlmIChjem1fc2VsZWN0ZWQoKSkge1xcbicgK1xuICogICAgICcgICAgICAgIHZlYzMgaGlnaGxpZ2h0ZWQgPSBoaWdobGlnaHQuYSAqIGhpZ2hsaWdodC5yZ2IgKyAoMS4wIC0gaGlnaGxpZ2h0LmEpICogY29sb3IucmdiO1xcbicgK1xuICogICAgICcgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoaGlnaGxpZ2h0ZWQsIDEuMCk7XFxuJyArXG4gKiAgICAgJyAgICB9IGVsc2UgeyBcXG4nICtcbiAqICAgICAnICAgICAgICBnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAqICAgICAnICAgIH1cXG4nICtcbiAqICAgICAnfVxcbic7XG4gKiB2YXIgc3RhZ2UgPSBzY2VuZS5wb3N0UHJvY2Vzc1N0YWdlcy5hZGQobmV3IENlc2l1bS5Qb3N0UHJvY2Vzc1N0YWdlKHtcbiAqICAgICBmcmFnbWVudFNoYWRlciA6IGZzLFxuICogICAgIHVuaWZvcm1zIDoge1xuICogICAgICAgICBoaWdobGlnaHQgOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBuZXcgQ2VzaXVtLkNvbG9yKDEuMCwgMC4wLCAwLjAsIDAuNSk7XG4gKiAgICAgICAgIH1cbiAqICAgICB9XG4gKiB9KSk7XG4gKiBzdGFnZS5zZWxlY3RlZCA9IFtjZXNpdW0zRFRpbGVGZWF0dXJlXTtcbiAqL1xuZnVuY3Rpb24gUG9zdFByb2Nlc3NTdGFnZShvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWUob3B0aW9ucywgZGVmYXVsdFZhbHVlLkVNUFRZX09CSkVDVCk7XG4gIHZhciBmcmFnbWVudFNoYWRlciA9IG9wdGlvbnMuZnJhZ21lbnRTaGFkZXI7XG4gIHZhciB0ZXh0dXJlU2NhbGUgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy50ZXh0dXJlU2NhbGUsIDEuMCk7XG4gIHZhciBwaXhlbEZvcm1hdCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLnBpeGVsRm9ybWF0LCBQaXhlbEZvcm1hdC5SR0JBKTtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2Yuc3RyaW5nKFwib3B0aW9ucy5mcmFnbWVudFNoYWRlclwiLCBmcmFnbWVudFNoYWRlcik7XG4gIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW4oXCJvcHRpb25zLnRleHR1cmVTY2FsZVwiLCB0ZXh0dXJlU2NhbGUsIDAuMCk7XG4gIENoZWNrLnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscyhcbiAgICBcIm9wdGlvbnMudGV4dHVyZVNjYWxlXCIsXG4gICAgdGV4dHVyZVNjYWxlLFxuICAgIDEuMFxuICApO1xuICBpZiAoIVBpeGVsRm9ybWF0LmlzQ29sb3JGb3JtYXQocGl4ZWxGb3JtYXQpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwib3B0aW9ucy5waXhlbEZvcm1hdCBtdXN0IGJlIGEgY29sb3IgZm9ybWF0LlwiKTtcbiAgfVxuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB0aGlzLl9mcmFnbWVudFNoYWRlciA9IGZyYWdtZW50U2hhZGVyO1xuICB0aGlzLl91bmlmb3JtcyA9IG9wdGlvbnMudW5pZm9ybXM7XG4gIHRoaXMuX3RleHR1cmVTY2FsZSA9IHRleHR1cmVTY2FsZTtcbiAgdGhpcy5fZm9yY2VQb3dlck9mVHdvID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuZm9yY2VQb3dlck9mVHdvLCBmYWxzZSk7XG4gIHRoaXMuX3NhbXBsZU1vZGUgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5zYW1wbGVNb2RlLFxuICAgIFBvc3RQcm9jZXNzU3RhZ2VTYW1wbGVNb2RlLk5FQVJFU1RcbiAgKTtcbiAgdGhpcy5fcGl4ZWxGb3JtYXQgPSBwaXhlbEZvcm1hdDtcbiAgdGhpcy5fcGl4ZWxEYXRhdHlwZSA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLnBpeGVsRGF0YXR5cGUsXG4gICAgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9CWVRFXG4gICk7XG4gIHRoaXMuX2NsZWFyQ29sb3IgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5jbGVhckNvbG9yLCBDb2xvci5CTEFDSyk7XG5cbiAgdGhpcy5fdW5pZm9ybU1hcCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY29tbWFuZCA9IHVuZGVmaW5lZDtcblxuICB0aGlzLl9jb2xvclRleHR1cmUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2RlcHRoVGV4dHVyZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5faWRUZXh0dXJlID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuX2FjdHVhbFVuaWZvcm1zID0ge307XG4gIHRoaXMuX2RpcnR5VW5pZm9ybXMgPSBbXTtcbiAgdGhpcy5fdGV4dHVyZXNUb1JlbGVhc2UgPSBbXTtcbiAgdGhpcy5fdGV4dHVyZXNUb0NyZWF0ZSA9IFtdO1xuICB0aGlzLl90ZXh0dXJlUHJvbWlzZSA9IHVuZGVmaW5lZDtcblxuICB2YXIgcGFzc1N0YXRlID0gbmV3IFBhc3NTdGF0ZSgpO1xuICBwYXNzU3RhdGUuc2Npc3NvclRlc3QgPSB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICByZWN0YW5nbGU6IGRlZmluZWQob3B0aW9ucy5zY2lzc29yUmVjdGFuZ2xlKVxuICAgICAgPyBCb3VuZGluZ1JlY3RhbmdsZS5jbG9uZShvcHRpb25zLnNjaXNzb3JSZWN0YW5nbGUpXG4gICAgICA6IG5ldyBCb3VuZGluZ1JlY3RhbmdsZSgpLFxuICB9O1xuICB0aGlzLl9wYXNzU3RhdGUgPSBwYXNzU3RhdGU7XG5cbiAgdGhpcy5fcmVhZHkgPSBmYWxzZTtcblxuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgaWYgKCFkZWZpbmVkKG5hbWUpKSB7XG4gICAgbmFtZSA9IGNyZWF0ZUd1aWQoKTtcbiAgfVxuICB0aGlzLl9uYW1lID0gbmFtZTtcblxuICB0aGlzLl9sb2dEZXB0aENoYW5nZWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3VzZUxvZ0RlcHRoID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuX3NlbGVjdGVkSWRUZXh0dXJlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc2VsZWN0ZWRTaGFkb3cgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3BhcmVudFNlbGVjdGVkID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wYXJlbnRTZWxlY3RlZFNoYWRvdyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY29tYmluZWRTZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY29tYmluZWRTZWxlY3RlZFNoYWRvdyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc2VsZWN0ZWRMZW5ndGggPSAwO1xuICB0aGlzLl9wYXJlbnRTZWxlY3RlZExlbmd0aCA9IDA7XG4gIHRoaXMuX3NlbGVjdGVkRGlydHkgPSB0cnVlO1xuXG4gIC8vIHNldCBieSBQb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvblxuICB0aGlzLl90ZXh0dXJlQ2FjaGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2luZGV4ID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byBleGVjdXRlIHRoaXMgcG9zdC1wcm9jZXNzIHN0YWdlIHdoZW4gcmVhZHkuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoaXMgcG9zdC1wcm9jZXNzIHN0YWdlIGlzIHJlYWR5IHRvIGJlIGV4ZWN1dGVkLiBBIHN0YWdlIGlzIG9ubHkgZXhlY3V0ZWQgd2hlbiBib3RoIDxjb2RlPnJlYWR5PC9jb2RlPlxuICAgKiBhbmQge0BsaW5rIFBvc3RQcm9jZXNzU3RhZ2UjZW5hYmxlZH0gYXJlIDxjb2RlPnRydWU8L2NvZGU+LiBBIHN0YWdlIHdpbGwgbm90IGJlIHJlYWR5IHdoaWxlIGl0IGlzIHdhaXRpbmcgb24gdGV4dHVyZXNcbiAgICogdG8gbG9hZC5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHJlYWR5OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZHk7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgbmFtZSBvZiB0aGlzIHBvc3QtcHJvY2VzcyBzdGFnZSBmb3IgcmVmZXJlbmNlIGJ5IG90aGVyIHN0YWdlcyBpbiBhIHtAbGluayBQb3N0UHJvY2Vzc1N0YWdlQ29tcG9zaXRlfS5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbmFtZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSBmcmFnbWVudCBzaGFkZXIgdG8gdXNlIHdoZW4gZXhlY3V0ZSB0aGlzIHBvc3QtcHJvY2VzcyBzdGFnZS5cbiAgICogPHA+XG4gICAqIFRoZSBzaGFkZXIgbXVzdCBjb250YWluIGEgc2FtcGxlciB1bmlmb3JtIGRlY2xhcmF0aW9uIGZvciA8Y29kZT5jb2xvclRleHR1cmU8L2NvZGU+LCA8Y29kZT5kZXB0aFRleHR1cmU8L2NvZGU+LFxuICAgKiBvciBib3RoLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBUaGUgc2hhZGVyIG11c3QgY29udGFpbiBhIDxjb2RlPnZlYzI8L2NvZGU+IHZhcnlpbmcgZGVjbGFyYXRpb24gZm9yIDxjb2RlPnZfdGV4dHVyZUNvb3JkaW5hdGVzPC9jb2RlPiBmb3Igc2FtcGxpbmdcbiAgICogdGhlIHRleHR1cmUgdW5pZm9ybXMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZnJhZ21lbnRTaGFkZXI6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mcmFnbWVudFNoYWRlcjtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogQW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIHVzZWQgdG8gc2V0IHRoZSB1bmlmb3JtcyBvZiB0aGUgZnJhZ21lbnQgc2hhZGVyLlxuICAgKiA8cD5cbiAgICogVGhlIG9iamVjdCBwcm9wZXJ0eSB2YWx1ZXMgY2FuIGJlIGVpdGhlciBhIGNvbnN0YW50IG9yIGEgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZFxuICAgKiBlYWNoIGZyYW1lIGJlZm9yZSB0aGUgcG9zdC1wcm9jZXNzIHN0YWdlIGlzIGV4ZWN1dGVkLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBBIGNvbnN0YW50IHZhbHVlIGNhbiBhbHNvIGJlIGEgVVJJIHRvIGFuIGltYWdlLCBhIGRhdGEgVVJJLCBvciBhbiBIVE1MIGVsZW1lbnQgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHRleHR1cmUsIHN1Y2ggYXMgSFRNTEltYWdlRWxlbWVudCBvciBIVE1MQ2FudmFzRWxlbWVudC5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogSWYgdGhpcyBwb3N0LXByb2Nlc3Mgc3RhZ2UgaXMgcGFydCBvZiBhIHtAbGluayBQb3N0UHJvY2Vzc1N0YWdlQ29tcG9zaXRlfSB0aGF0IGRvZXMgbm90IGV4ZWN1dGUgaW4gc2VyaWVzLCB0aGUgY29uc3RhbnQgdmFsdWUgY2FuIGFsc28gYmVcbiAgICogdGhlIG5hbWUgb2YgYW5vdGhlciBzdGFnZSBpbiBhIGNvbXBvc2l0ZS4gVGhpcyB3aWxsIHNldCB0aGUgdW5pZm9ybSB0byB0aGUgb3V0cHV0IHRleHR1cmUgdGhlIHN0YWdlIHdpdGggdGhhdCBuYW1lLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHVuaWZvcm1zOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdW5pZm9ybXM7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEEgbnVtYmVyIGluIHRoZSByYW5nZSAoMC4wLCAxLjBdIHVzZWQgdG8gc2NhbGUgdGhlIG91dHB1dCB0ZXh0dXJlIGRpbWVuc2lvbnMuIEEgc2NhbGUgb2YgMS4wIHdpbGwgcmVuZGVyIHRoaXMgcG9zdC1wcm9jZXNzIHN0YWdlIHRvIGEgdGV4dHVyZSB0aGUgc2l6ZSBvZiB0aGUgdmlld3BvcnQuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHRleHR1cmVTY2FsZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVTY2FsZTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gZm9yY2UgdGhlIG91dHB1dCB0ZXh0dXJlIGRpbWVuc2lvbnMgdG8gYmUgYm90aCBlcXVhbCBwb3dlcnMgb2YgdHdvLiBUaGUgcG93ZXIgb2YgdHdvIHdpbGwgYmUgdGhlIG5leHQgcG93ZXIgb2YgdHdvIG9mIHRoZSBtaW5pbXVtIG9mIHRoZSBkaW1lbnNpb25zLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9zdFByb2Nlc3NTdGFnZS5wcm90b3R5cGVcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmb3JjZVBvd2VyT2ZUd286IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb3JjZVBvd2VyT2ZUd287XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEhvdyB0byBzYW1wbGUgdGhlIGlucHV0IGNvbG9yIHRleHR1cmUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7UG9zdFByb2Nlc3NTdGFnZVNhbXBsZU1vZGV9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgc2FtcGxlTW9kZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NhbXBsZU1vZGU7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBwaXhlbCBmb3JtYXQgb2YgdGhlIG91dHB1dCB0ZXh0dXJlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9zdFByb2Nlc3NTdGFnZS5wcm90b3R5cGVcbiAgICogQHR5cGUge1BpeGVsRm9ybWF0fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHBpeGVsRm9ybWF0OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGl4ZWxGb3JtYXQ7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSBwaXhlbCBkYXRhIHR5cGUgb2YgdGhlIG91dHB1dCB0ZXh0dXJlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9zdFByb2Nlc3NTdGFnZS5wcm90b3R5cGVcbiAgICogQHR5cGUge1BpeGVsRGF0YXR5cGV9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcGl4ZWxEYXRhdHlwZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BpeGVsRGF0YXR5cGU7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciB0byBjbGVhciB0aGUgb3V0cHV0IHRleHR1cmUgdG8uXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Q29sb3J9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgY2xlYXJDb2xvcjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NsZWFyQ29sb3I7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSB7QGxpbmsgQm91bmRpbmdSZWN0YW5nbGV9IHRvIHVzZSBmb3IgdGhlIHNjaXNzb3IgdGVzdC4gQSBkZWZhdWx0IGJvdW5kaW5nIHJlY3RhbmdsZSB3aWxsIGRpc2FibGUgdGhlIHNjaXNzb3IgdGVzdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtCb3VuZGluZ1JlY3RhbmdsZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzY2lzc29yUmVjdGFuZ2xlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFzc1N0YXRlLnNjaXNzb3JUZXN0LnJlY3RhbmdsZTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIHRleHR1cmUgd3JpdHRlbiB0byB3aGVuIGV4ZWN1dGluZyB0aGlzIHBvc3QgcHJvY2VzcyBzdGFnZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtUZXh0dXJlfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG91dHB1dFRleHR1cmU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkZWZpbmVkKHRoaXMuX3RleHR1cmVDYWNoZSkpIHtcbiAgICAgICAgdmFyIGZyYW1lYnVmZmVyID0gdGhpcy5fdGV4dHVyZUNhY2hlLmdldEZyYW1lYnVmZmVyKHRoaXMuX25hbWUpO1xuICAgICAgICBpZiAoZGVmaW5lZChmcmFtZWJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gZnJhbWVidWZmZXIuZ2V0Q29sb3JUZXh0dXJlKDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBUaGUgZmVhdHVyZXMgc2VsZWN0ZWQgZm9yIGFwcGx5aW5nIHRoZSBwb3N0LXByb2Nlc3MuXG4gICAqIDxwPlxuICAgKiBJbiB0aGUgZnJhZ21lbnQgc2hhZGVyLCB1c2UgPGNvZGU+Y3ptX3NlbGVjdGVkPC9jb2RlPiB0byBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgdG8gYXBwbHkgdGhlIHBvc3QtcHJvY2Vzc1xuICAgKiBzdGFnZSB0byB0aGF0IGZyYWdtZW50LiBGb3IgZXhhbXBsZTpcbiAgICogPGNvZGU+XG4gICAqIGlmIChjem1fc2VsZWN0ZWQodl90ZXh0dXJlQ29vcmRpbmF0ZXMpKSB7XG4gICAqICAgICAvLyBhcHBseSBwb3N0LXByb2Nlc3Mgc3RhZ2VcbiAgICogfSBlbHNlIHtcbiAgICogICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChjb2xvclRleHR1cmUsIHZfdGV4dHVyZUNvcmRpbmF0ZXMpO1xuICAgKiB9XG4gICAqIDwvY29kZT5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9zdFByb2Nlc3NTdGFnZS5wcm90b3R5cGVcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgc2VsZWN0ZWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcGFyZW50U2VsZWN0ZWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJlbnRTZWxlY3RlZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aGlzLl9wYXJlbnRTZWxlY3RlZCA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG59KTtcblxudmFyIGRlcHRoVGV4dHVyZVJlZ2V4ID0gL3VuaWZvcm1cXHMrc2FtcGxlcjJEXFxzK2RlcHRoVGV4dHVyZS9nO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2UucHJvdG90eXBlLl9pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHJldHVybiAhZGVwdGhUZXh0dXJlUmVnZXgudGVzdCh0aGlzLl9mcmFnbWVudFNoYWRlcikgfHwgY29udGV4dC5kZXB0aFRleHR1cmU7XG59O1xuXG5mdW5jdGlvbiBnZXRVbmlmb3JtVmFsdWVHZXR0ZXJBbmRTZXR0ZXIoc3RhZ2UsIHVuaWZvcm1zLCBuYW1lKSB7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB1bmlmb3Jtc1tuYW1lXTtcbiAgaWYgKFxuICAgIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09IFwic3RyaW5nXCIgfHxcbiAgICBjdXJyZW50VmFsdWUgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCB8fFxuICAgIGN1cnJlbnRWYWx1ZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgfHxcbiAgICBjdXJyZW50VmFsdWUgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50IHx8XG4gICAgY3VycmVudFZhbHVlIGluc3RhbmNlb2YgSW1hZ2VEYXRhXG4gICkge1xuICAgIHN0YWdlLl9kaXJ0eVVuaWZvcm1zLnB1c2gobmFtZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1zW25hbWVdO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB1bmlmb3Jtc1tuYW1lXTtcbiAgICAgIHVuaWZvcm1zW25hbWVdID0gdmFsdWU7XG5cbiAgICAgIHZhciBhY3R1YWxVbmlmb3JtcyA9IHN0YWdlLl9hY3R1YWxVbmlmb3JtcztcbiAgICAgIHZhciBhY3R1YWxWYWx1ZSA9IGFjdHVhbFVuaWZvcm1zW25hbWVdO1xuICAgICAgaWYgKFxuICAgICAgICBkZWZpbmVkKGFjdHVhbFZhbHVlKSAmJlxuICAgICAgICBhY3R1YWxWYWx1ZSAhPT0gY3VycmVudFZhbHVlICYmXG4gICAgICAgIGFjdHVhbFZhbHVlIGluc3RhbmNlb2YgVGV4dHVyZSAmJlxuICAgICAgICAhZGVmaW5lZChzdGFnZS5fdGV4dHVyZUNhY2hlLmdldFN0YWdlQnlOYW1lKG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHN0YWdlLl90ZXh0dXJlc1RvUmVsZWFzZS5wdXNoKGFjdHVhbFZhbHVlKTtcbiAgICAgICAgZGVsZXRlIGFjdHVhbFVuaWZvcm1zW25hbWVdO1xuICAgICAgICBkZWxldGUgYWN0dWFsVW5pZm9ybXNbbmFtZSArIFwiRGltZW5zaW9uc1wiXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgICAgc3RhZ2UuX3RleHR1cmVzVG9SZWxlYXNlLnB1c2goY3VycmVudFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCB8fFxuICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50IHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgSW1hZ2VEYXRhXG4gICAgICApIHtcbiAgICAgICAgc3RhZ2UuX2RpcnR5VW5pZm9ybXMucHVzaChuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdHVhbFVuaWZvcm1zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5pZm9ybU1hcEZ1bmN0aW9uKHN0YWdlLCBuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhZ2UuX2FjdHVhbFVuaWZvcm1zW25hbWVdO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIHZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5pZm9ybU1hcERpbWVuc2lvbnNGdW5jdGlvbih1bmlmb3JtTWFwLCBuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRleHR1cmUgPSB1bmlmb3JtTWFwW25hbWVdKCk7XG4gICAgaWYgKGRlZmluZWQodGV4dHVyZSkpIHtcbiAgICAgIHJldHVybiB0ZXh0dXJlLmRpbWVuc2lvbnM7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaWZvcm1NYXAoc3RhZ2UpIHtcbiAgaWYgKGRlZmluZWQoc3RhZ2UuX3VuaWZvcm1NYXApKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVuaWZvcm1NYXAgPSB7fTtcbiAgdmFyIG5ld1VuaWZvcm1zID0ge307XG4gIHZhciB1bmlmb3JtcyA9IHN0YWdlLl91bmlmb3JtcztcbiAgdmFyIGFjdHVhbFVuaWZvcm1zID0gc3RhZ2UuX2FjdHVhbFVuaWZvcm1zO1xuICBmb3IgKHZhciBuYW1lIGluIHVuaWZvcm1zKSB7XG4gICAgaWYgKHVuaWZvcm1zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBpZiAodHlwZW9mIHVuaWZvcm1zW25hbWVdICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdW5pZm9ybU1hcFtuYW1lXSA9IGdldFVuaWZvcm1NYXBGdW5jdGlvbihzdGFnZSwgbmFtZSk7XG4gICAgICAgIG5ld1VuaWZvcm1zW25hbWVdID0gZ2V0VW5pZm9ybVZhbHVlR2V0dGVyQW5kU2V0dGVyKFxuICAgICAgICAgIHN0YWdlLFxuICAgICAgICAgIHVuaWZvcm1zLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaWZvcm1NYXBbbmFtZV0gPSB1bmlmb3Jtc1tuYW1lXTtcbiAgICAgICAgbmV3VW5pZm9ybXNbbmFtZV0gPSB1bmlmb3Jtc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgYWN0dWFsVW5pZm9ybXNbbmFtZV0gPSB1bmlmb3Jtc1tuYW1lXTtcblxuICAgICAgdmFyIHZhbHVlID0gdW5pZm9ybU1hcFtuYW1lXSgpO1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBUZXh0dXJlIHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCB8fFxuICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50IHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudFxuICAgICAgKSB7XG4gICAgICAgIHVuaWZvcm1NYXBbbmFtZSArIFwiRGltZW5zaW9uc1wiXSA9IGdldFVuaWZvcm1NYXBEaW1lbnNpb25zRnVuY3Rpb24oXG4gICAgICAgICAgdW5pZm9ybU1hcCxcbiAgICAgICAgICBuYW1lXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhZ2UuX3VuaWZvcm1zID0ge307XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0YWdlLl91bmlmb3JtcywgbmV3VW5pZm9ybXMpO1xuXG4gIHN0YWdlLl91bmlmb3JtTWFwID0gY29tYmluZSh1bmlmb3JtTWFwLCB7XG4gICAgY29sb3JUZXh0dXJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3RhZ2UuX2NvbG9yVGV4dHVyZTtcbiAgICB9LFxuICAgIGNvbG9yVGV4dHVyZURpbWVuc2lvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFnZS5fY29sb3JUZXh0dXJlLmRpbWVuc2lvbnM7XG4gICAgfSxcbiAgICBkZXB0aFRleHR1cmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFnZS5fZGVwdGhUZXh0dXJlO1xuICAgIH0sXG4gICAgZGVwdGhUZXh0dXJlRGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YWdlLl9kZXB0aFRleHR1cmUuZGltZW5zaW9ucztcbiAgICB9LFxuICAgIGN6bV9pZFRleHR1cmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFnZS5faWRUZXh0dXJlO1xuICAgIH0sXG4gICAgY3ptX3NlbGVjdGVkSWRUZXh0dXJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3RhZ2UuX3NlbGVjdGVkSWRUZXh0dXJlO1xuICAgIH0sXG4gICAgY3ptX3NlbGVjdGVkSWRUZXh0dXJlU3RlcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIDEuMCAvIHN0YWdlLl9zZWxlY3RlZElkVGV4dHVyZS53aWR0aDtcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHJhd0NvbW1hbmQoc3RhZ2UsIGNvbnRleHQpIHtcbiAgaWYgKFxuICAgIGRlZmluZWQoc3RhZ2UuX2NvbW1hbmQpICYmXG4gICAgIXN0YWdlLl9sb2dEZXB0aENoYW5nZWQgJiZcbiAgICAhc3RhZ2UuX3NlbGVjdGVkRGlydHlcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZzID0gc3RhZ2UuX2ZyYWdtZW50U2hhZGVyO1xuICBpZiAoZGVmaW5lZChzdGFnZS5fc2VsZWN0ZWRJZFRleHR1cmUpKSB7XG4gICAgdmFyIHdpZHRoID0gc3RhZ2UuX3NlbGVjdGVkSWRUZXh0dXJlLndpZHRoO1xuXG4gICAgZnMgPSBmcy5yZXBsYWNlKC92YXJ5aW5nXFxzK3ZlYzJcXHMrdl90ZXh0dXJlQ29vcmRpbmF0ZXM7L2csIFwiXCIpO1xuICAgIGZzID1cbiAgICAgIFwiI2RlZmluZSBDWk1fU0VMRUNURURfRkVBVFVSRSBcXG5cIiArXG4gICAgICBcInVuaWZvcm0gc2FtcGxlcjJEIGN6bV9pZFRleHR1cmU7IFxcblwiICtcbiAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgY3ptX3NlbGVjdGVkSWRUZXh0dXJlOyBcXG5cIiArXG4gICAgICBcInVuaWZvcm0gZmxvYXQgY3ptX3NlbGVjdGVkSWRUZXh0dXJlU3RlcDsgXFxuXCIgK1xuICAgICAgXCJ2YXJ5aW5nIHZlYzIgdl90ZXh0dXJlQ29vcmRpbmF0ZXM7IFxcblwiICtcbiAgICAgIFwiYm9vbCBjem1fc2VsZWN0ZWQodmVjMiBvZmZzZXQpIFxcblwiICtcbiAgICAgIFwieyBcXG5cIiArXG4gICAgICBcIiAgICBib29sIHNlbGVjdGVkID0gZmFsc2U7XFxuXCIgK1xuICAgICAgXCIgICAgdmVjNCBpZCA9IHRleHR1cmUyRChjem1faWRUZXh0dXJlLCB2X3RleHR1cmVDb29yZGluYXRlcyArIG9mZnNldCk7IFxcblwiICtcbiAgICAgIFwiICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIgK1xuICAgICAgd2lkdGggK1xuICAgICAgXCI7ICsraSkgXFxuXCIgK1xuICAgICAgXCIgICAgeyBcXG5cIiArXG4gICAgICBcIiAgICAgICAgdmVjNCBzZWxlY3RlZElkID0gdGV4dHVyZTJEKGN6bV9zZWxlY3RlZElkVGV4dHVyZSwgdmVjMigoZmxvYXQoaSkgKyAwLjUpICogY3ptX3NlbGVjdGVkSWRUZXh0dXJlU3RlcCwgMC41KSk7IFxcblwiICtcbiAgICAgIFwiICAgICAgICBpZiAoYWxsKGVxdWFsKGlkLCBzZWxlY3RlZElkKSkpIFxcblwiICtcbiAgICAgIFwiICAgICAgICB7IFxcblwiICtcbiAgICAgIFwiICAgICAgICAgICAgcmV0dXJuIHRydWU7IFxcblwiICtcbiAgICAgIFwiICAgICAgICB9IFxcblwiICtcbiAgICAgIFwiICAgIH0gXFxuXCIgK1xuICAgICAgXCIgICAgcmV0dXJuIGZhbHNlOyBcXG5cIiArXG4gICAgICBcIn0gXFxuXFxuXCIgK1xuICAgICAgXCJib29sIGN6bV9zZWxlY3RlZCgpIFxcblwiICtcbiAgICAgIFwieyBcXG5cIiArXG4gICAgICBcIiAgICByZXR1cm4gY3ptX3NlbGVjdGVkKHZlYzIoMC4wKSk7IFxcblwiICtcbiAgICAgIFwifSBcXG5cXG5cIiArXG4gICAgICBmcztcbiAgfVxuXG4gIHZhciBmcmFnbWVudFNoYWRlciA9IG5ldyBTaGFkZXJTb3VyY2Uoe1xuICAgIGRlZmluZXM6IFtzdGFnZS5fdXNlTG9nRGVwdGggPyBcIkxPR19ERVBUSFwiIDogXCJcIl0sXG4gICAgc291cmNlczogW2ZzXSxcbiAgfSk7XG4gIHN0YWdlLl9jb21tYW5kID0gY29udGV4dC5jcmVhdGVWaWV3cG9ydFF1YWRDb21tYW5kKGZyYWdtZW50U2hhZGVyLCB7XG4gICAgdW5pZm9ybU1hcDogc3RhZ2UuX3VuaWZvcm1NYXAsXG4gICAgb3duZXI6IHN0YWdlLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2FtcGxlcihzdGFnZSkge1xuICB2YXIgbW9kZSA9IHN0YWdlLl9zYW1wbGVNb2RlO1xuXG4gIHZhciBtaW5GaWx0ZXI7XG4gIHZhciBtYWdGaWx0ZXI7XG5cbiAgaWYgKG1vZGUgPT09IFBvc3RQcm9jZXNzU3RhZ2VTYW1wbGVNb2RlLkxJTkVBUikge1xuICAgIG1pbkZpbHRlciA9IFRleHR1cmVNaW5pZmljYXRpb25GaWx0ZXIuTElORUFSO1xuICAgIG1hZ0ZpbHRlciA9IFRleHR1cmVNYWduaWZpY2F0aW9uRmlsdGVyLkxJTkVBUjtcbiAgfSBlbHNlIHtcbiAgICBtaW5GaWx0ZXIgPSBUZXh0dXJlTWluaWZpY2F0aW9uRmlsdGVyLk5FQVJFU1Q7XG4gICAgbWFnRmlsdGVyID0gVGV4dHVyZU1hZ25pZmljYXRpb25GaWx0ZXIuTkVBUkVTVDtcbiAgfVxuXG4gIHZhciBzYW1wbGVyID0gc3RhZ2UuX3NhbXBsZXI7XG4gIGlmIChcbiAgICAhZGVmaW5lZChzYW1wbGVyKSB8fFxuICAgIHNhbXBsZXIubWluaWZpY2F0aW9uRmlsdGVyICE9PSBtaW5GaWx0ZXIgfHxcbiAgICBzYW1wbGVyLm1hZ25pZmljYXRpb25GaWx0ZXIgIT09IG1hZ0ZpbHRlclxuICApIHtcbiAgICBzdGFnZS5fc2FtcGxlciA9IG5ldyBTYW1wbGVyKHtcbiAgICAgIHdyYXBTOiBUZXh0dXJlV3JhcC5DTEFNUF9UT19FREdFLFxuICAgICAgd3JhcFQ6IFRleHR1cmVXcmFwLkNMQU1QX1RPX0VER0UsXG4gICAgICBtaW5pZmljYXRpb25GaWx0ZXI6IG1pbkZpbHRlcixcbiAgICAgIG1hZ25pZmljYXRpb25GaWx0ZXI6IG1hZ0ZpbHRlcixcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2FkSW1hZ2VGdW5jdGlvbihzdGFnZSwgbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgc3RhZ2UuX3RleHR1cmVzVG9DcmVhdGUucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc291cmNlOiBpbWFnZSxcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RhZ2VPdXRwdXRUZXh0dXJlRnVuY3Rpb24oc3RhZ2UsIG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RhZ2UuX3RleHR1cmVDYWNoZS5nZXRPdXRwdXRUZXh0dXJlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVVbmlmb3JtVGV4dHVyZXMoc3RhZ2UsIGNvbnRleHQpIHtcbiAgdmFyIGk7XG4gIHZhciB0ZXh0dXJlO1xuICB2YXIgbmFtZTtcblxuICB2YXIgdGV4dHVyZXNUb1JlbGVhc2UgPSBzdGFnZS5fdGV4dHVyZXNUb1JlbGVhc2U7XG4gIHZhciBsZW5ndGggPSB0ZXh0dXJlc1RvUmVsZWFzZS5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHRleHR1cmUgPSB0ZXh0dXJlc1RvUmVsZWFzZVtpXTtcbiAgICB0ZXh0dXJlID0gdGV4dHVyZSAmJiB0ZXh0dXJlLmRlc3Ryb3koKTtcbiAgfVxuICB0ZXh0dXJlc1RvUmVsZWFzZS5sZW5ndGggPSAwO1xuXG4gIHZhciB0ZXh0dXJlc1RvQ3JlYXRlID0gc3RhZ2UuX3RleHR1cmVzVG9DcmVhdGU7XG4gIGxlbmd0aCA9IHRleHR1cmVzVG9DcmVhdGUubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgdGV4dHVyZVRvQ3JlYXRlID0gdGV4dHVyZXNUb0NyZWF0ZVtpXTtcbiAgICBuYW1lID0gdGV4dHVyZVRvQ3JlYXRlLm5hbWU7XG4gICAgdmFyIHNvdXJjZSA9IHRleHR1cmVUb0NyZWF0ZS5zb3VyY2U7XG4gICAgc3RhZ2UuX2FjdHVhbFVuaWZvcm1zW25hbWVdID0gbmV3IFRleHR1cmUoe1xuICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgIH0pO1xuICB9XG4gIHRleHR1cmVzVG9DcmVhdGUubGVuZ3RoID0gMDtcblxuICB2YXIgZGlydHlVbmlmb3JtcyA9IHN0YWdlLl9kaXJ0eVVuaWZvcm1zO1xuICBpZiAoZGlydHlVbmlmb3Jtcy5sZW5ndGggPT09IDAgJiYgIWRlZmluZWQoc3RhZ2UuX3RleHR1cmVQcm9taXNlKSkge1xuICAgIHN0YWdlLl9yZWFkeSA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRpcnR5VW5pZm9ybXMubGVuZ3RoID09PSAwIHx8IGRlZmluZWQoc3RhZ2UuX3RleHR1cmVQcm9taXNlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxlbmd0aCA9IGRpcnR5VW5pZm9ybXMubGVuZ3RoO1xuICB2YXIgdW5pZm9ybXMgPSBzdGFnZS5fdW5pZm9ybXM7XG4gIHZhciBwcm9taXNlcyA9IFtdO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBuYW1lID0gZGlydHlVbmlmb3Jtc1tpXTtcbiAgICB2YXIgc3RhZ2VOYW1lVXJsT3JJbWFnZSA9IHVuaWZvcm1zW25hbWVdO1xuICAgIHZhciBzdGFnZVdpdGhOYW1lID0gc3RhZ2UuX3RleHR1cmVDYWNoZS5nZXRTdGFnZUJ5TmFtZShzdGFnZU5hbWVVcmxPckltYWdlKTtcbiAgICBpZiAoZGVmaW5lZChzdGFnZVdpdGhOYW1lKSkge1xuICAgICAgc3RhZ2UuX2FjdHVhbFVuaWZvcm1zW25hbWVdID0gY3JlYXRlU3RhZ2VPdXRwdXRUZXh0dXJlRnVuY3Rpb24oXG4gICAgICAgIHN0YWdlLFxuICAgICAgICBzdGFnZU5hbWVVcmxPckltYWdlXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0YWdlTmFtZVVybE9ySW1hZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhciByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZSh7XG4gICAgICAgIHVybDogc3RhZ2VOYW1lVXJsT3JJbWFnZSxcbiAgICAgIH0pO1xuXG4gICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICByZXNvdXJjZS5mZXRjaEltYWdlKCkudGhlbihjcmVhdGVMb2FkSW1hZ2VGdW5jdGlvbihzdGFnZSwgbmFtZSkpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFnZS5fdGV4dHVyZXNUb0NyZWF0ZS5wdXNoKHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc291cmNlOiBzdGFnZU5hbWVVcmxPckltYWdlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZGlydHlVbmlmb3Jtcy5sZW5ndGggPSAwO1xuXG4gIGlmIChwcm9taXNlcy5sZW5ndGggPiAwKSB7XG4gICAgc3RhZ2UuX3JlYWR5ID0gZmFsc2U7XG4gICAgc3RhZ2UuX3RleHR1cmVQcm9taXNlID0gd2hlbi5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgc3RhZ2UuX3JlYWR5ID0gdHJ1ZTtcbiAgICAgIHN0YWdlLl90ZXh0dXJlUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzdGFnZS5fcmVhZHkgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VSZXNvdXJjZXMoc3RhZ2UpIHtcbiAgaWYgKGRlZmluZWQoc3RhZ2UuX2NvbW1hbmQpKSB7XG4gICAgc3RhZ2UuX2NvbW1hbmQuc2hhZGVyUHJvZ3JhbSA9XG4gICAgICBzdGFnZS5fY29tbWFuZC5zaGFkZXJQcm9ncmFtICYmIHN0YWdlLl9jb21tYW5kLnNoYWRlclByb2dyYW0uZGVzdHJveSgpO1xuICAgIHN0YWdlLl9jb21tYW5kID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc3RhZ2UuX3NlbGVjdGVkSWRUZXh0dXJlID1cbiAgICBzdGFnZS5fc2VsZWN0ZWRJZFRleHR1cmUgJiYgc3RhZ2UuX3NlbGVjdGVkSWRUZXh0dXJlLmRlc3Ryb3koKTtcblxuICB2YXIgdGV4dHVyZUNhY2hlID0gc3RhZ2UuX3RleHR1cmVDYWNoZTtcbiAgaWYgKCFkZWZpbmVkKHRleHR1cmVDYWNoZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdW5pZm9ybXMgPSBzdGFnZS5fdW5pZm9ybXM7XG4gIHZhciBhY3R1YWxVbmlmb3JtcyA9IHN0YWdlLl9hY3R1YWxVbmlmb3JtcztcbiAgZm9yICh2YXIgbmFtZSBpbiBhY3R1YWxVbmlmb3Jtcykge1xuICAgIGlmIChhY3R1YWxVbmlmb3Jtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgaWYgKGFjdHVhbFVuaWZvcm1zW25hbWVdIGluc3RhbmNlb2YgVGV4dHVyZSkge1xuICAgICAgICBpZiAoIWRlZmluZWQodGV4dHVyZUNhY2hlLmdldFN0YWdlQnlOYW1lKHVuaWZvcm1zW25hbWVdKSkpIHtcbiAgICAgICAgICBhY3R1YWxVbmlmb3Jtc1tuYW1lXS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhZ2UuX2RpcnR5VW5pZm9ybXMucHVzaChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTZWxlY3RlZFRleHR1cmVEaXJ0eShzdGFnZSkge1xuICB2YXIgbGVuZ3RoID0gZGVmaW5lZChzdGFnZS5fc2VsZWN0ZWQpID8gc3RhZ2UuX3NlbGVjdGVkLmxlbmd0aCA6IDA7XG4gIHZhciBwYXJlbnRMZW5ndGggPSBkZWZpbmVkKHN0YWdlLl9wYXJlbnRTZWxlY3RlZCkgPyBzdGFnZS5fcGFyZW50U2VsZWN0ZWQgOiAwO1xuICB2YXIgZGlydHkgPVxuICAgIHN0YWdlLl9zZWxlY3RlZCAhPT0gc3RhZ2UuX3NlbGVjdGVkU2hhZG93IHx8XG4gICAgbGVuZ3RoICE9PSBzdGFnZS5fc2VsZWN0ZWRMZW5ndGg7XG4gIGRpcnR5ID1cbiAgICBkaXJ0eSB8fFxuICAgIHN0YWdlLl9wYXJlbnRTZWxlY3RlZCAhPT0gc3RhZ2UuX3BhcmVudFNlbGVjdGVkU2hhZG93IHx8XG4gICAgcGFyZW50TGVuZ3RoICE9PSBzdGFnZS5fcGFyZW50U2VsZWN0ZWRMZW5ndGg7XG5cbiAgaWYgKGRlZmluZWQoc3RhZ2UuX3NlbGVjdGVkKSAmJiBkZWZpbmVkKHN0YWdlLl9wYXJlbnRTZWxlY3RlZCkpIHtcbiAgICBzdGFnZS5fY29tYmluZWRTZWxlY3RlZCA9IHN0YWdlLl9zZWxlY3RlZC5jb25jYXQoc3RhZ2UuX3BhcmVudFNlbGVjdGVkKTtcbiAgfSBlbHNlIGlmIChkZWZpbmVkKHN0YWdlLl9wYXJlbnRTZWxlY3RlZCkpIHtcbiAgICBzdGFnZS5fY29tYmluZWRTZWxlY3RlZCA9IHN0YWdlLl9wYXJlbnRTZWxlY3RlZDtcbiAgfSBlbHNlIHtcbiAgICBzdGFnZS5fY29tYmluZWRTZWxlY3RlZCA9IHN0YWdlLl9zZWxlY3RlZDtcbiAgfVxuXG4gIGlmICghZGlydHkgJiYgZGVmaW5lZChzdGFnZS5fY29tYmluZWRTZWxlY3RlZCkpIHtcbiAgICBpZiAoIWRlZmluZWQoc3RhZ2UuX2NvbWJpbmVkU2VsZWN0ZWRTaGFkb3cpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZW5ndGggPSBzdGFnZS5fY29tYmluZWRTZWxlY3RlZC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHN0YWdlLl9jb21iaW5lZFNlbGVjdGVkW2ldICE9PSBzdGFnZS5fY29tYmluZWRTZWxlY3RlZFNoYWRvd1tpXSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpcnR5O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RlZFRleHR1cmUoc3RhZ2UsIGNvbnRleHQpIHtcbiAgaWYgKCFzdGFnZS5fc2VsZWN0ZWREaXJ0eSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YWdlLl9zZWxlY3RlZElkVGV4dHVyZSA9XG4gICAgc3RhZ2UuX3NlbGVjdGVkSWRUZXh0dXJlICYmIHN0YWdlLl9zZWxlY3RlZElkVGV4dHVyZS5kZXN0cm95KCk7XG4gIHN0YWdlLl9zZWxlY3RlZElkVGV4dHVyZSA9IHVuZGVmaW5lZDtcblxuICB2YXIgZmVhdHVyZXMgPSBzdGFnZS5fY29tYmluZWRTZWxlY3RlZDtcbiAgaWYgKCFkZWZpbmVkKGZlYXR1cmVzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgZmVhdHVyZTtcblxuICB2YXIgdGV4dHVyZUxlbmd0aCA9IDA7XG4gIHZhciBsZW5ndGggPSBmZWF0dXJlcy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGZlYXR1cmUgPSBmZWF0dXJlc1tpXTtcbiAgICBpZiAoZGVmaW5lZChmZWF0dXJlLnBpY2tJZHMpKSB7XG4gICAgICB0ZXh0dXJlTGVuZ3RoICs9IGZlYXR1cmUucGlja0lkcy5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChkZWZpbmVkKGZlYXR1cmUucGlja0lkKSkge1xuICAgICAgKyt0ZXh0dXJlTGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsZW5ndGggPT09IDAgfHwgdGV4dHVyZUxlbmd0aCA9PT0gMCkge1xuICAgIC8vIG1heCBwaWNrIGlkIGlzIHJlc2VydmVkXG4gICAgdmFyIGVtcHR5ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgZW1wdHlbMF0gPSAyNTU7XG4gICAgZW1wdHlbMV0gPSAyNTU7XG4gICAgZW1wdHlbMl0gPSAyNTU7XG4gICAgZW1wdHlbM10gPSAyNTU7XG5cbiAgICBzdGFnZS5fc2VsZWN0ZWRJZFRleHR1cmUgPSBuZXcgVGV4dHVyZSh7XG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgcGl4ZWxGb3JtYXQ6IFBpeGVsRm9ybWF0LlJHQkEsXG4gICAgICBwaXhlbERhdGF0eXBlOiBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0JZVEUsXG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgYXJyYXlCdWZmZXJWaWV3OiBlbXB0eSxcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgIH0sXG4gICAgICBzYW1wbGVyOiBTYW1wbGVyLk5FQVJFU1QsXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBpY2tDb2xvcjtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBpZHMgPSBuZXcgVWludDhBcnJheSh0ZXh0dXJlTGVuZ3RoICogNCk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGZlYXR1cmUgPSBmZWF0dXJlc1tpXTtcbiAgICBpZiAoZGVmaW5lZChmZWF0dXJlLnBpY2tJZHMpKSB7XG4gICAgICB2YXIgcGlja0lkcyA9IGZlYXR1cmUucGlja0lkcztcbiAgICAgIHZhciBwaWNrSWRzTGVuZ3RoID0gcGlja0lkcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBpY2tJZHNMZW5ndGg7ICsraikge1xuICAgICAgICBwaWNrQ29sb3IgPSBwaWNrSWRzW2pdLmNvbG9yO1xuICAgICAgICBpZHNbb2Zmc2V0XSA9IENvbG9yLmZsb2F0VG9CeXRlKHBpY2tDb2xvci5yZWQpO1xuICAgICAgICBpZHNbb2Zmc2V0ICsgMV0gPSBDb2xvci5mbG9hdFRvQnl0ZShwaWNrQ29sb3IuZ3JlZW4pO1xuICAgICAgICBpZHNbb2Zmc2V0ICsgMl0gPSBDb2xvci5mbG9hdFRvQnl0ZShwaWNrQ29sb3IuYmx1ZSk7XG4gICAgICAgIGlkc1tvZmZzZXQgKyAzXSA9IENvbG9yLmZsb2F0VG9CeXRlKHBpY2tDb2xvci5hbHBoYSk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGVmaW5lZChmZWF0dXJlLnBpY2tJZCkpIHtcbiAgICAgIHBpY2tDb2xvciA9IGZlYXR1cmUucGlja0lkLmNvbG9yO1xuICAgICAgaWRzW29mZnNldF0gPSBDb2xvci5mbG9hdFRvQnl0ZShwaWNrQ29sb3IucmVkKTtcbiAgICAgIGlkc1tvZmZzZXQgKyAxXSA9IENvbG9yLmZsb2F0VG9CeXRlKHBpY2tDb2xvci5ncmVlbik7XG4gICAgICBpZHNbb2Zmc2V0ICsgMl0gPSBDb2xvci5mbG9hdFRvQnl0ZShwaWNrQ29sb3IuYmx1ZSk7XG4gICAgICBpZHNbb2Zmc2V0ICsgM10gPSBDb2xvci5mbG9hdFRvQnl0ZShwaWNrQ29sb3IuYWxwaGEpO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgfVxuICB9XG5cbiAgc3RhZ2UuX3NlbGVjdGVkSWRUZXh0dXJlID0gbmV3IFRleHR1cmUoe1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgcGl4ZWxGb3JtYXQ6IFBpeGVsRm9ybWF0LlJHQkEsXG4gICAgcGl4ZWxEYXRhdHlwZTogUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9CWVRFLFxuICAgIHNvdXJjZToge1xuICAgICAgYXJyYXlCdWZmZXJWaWV3OiBpZHMsXG4gICAgICB3aWR0aDogdGV4dHVyZUxlbmd0aCxcbiAgICAgIGhlaWdodDogMSxcbiAgICB9LFxuICAgIHNhbXBsZXI6IFNhbXBsZXIuTkVBUkVTVCxcbiAgfSk7XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGJlZm9yZSBleGVjdXRlLiBVc2VkIHRvIGNyZWF0ZSBXZWJHTCByZXNvdXJjZXMgYW5kIGxvYWQgYW55IHRleHR1cmVzLlxuICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IFRoZSBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSB1c2VMb2dEZXB0aCBXaGV0aGVyIHRoZSBzY2VuZSB1c2VzIGEgbG9nYXJpdGhtaWMgZGVwdGggYnVmZmVyLlxuICogQHByaXZhdGVcbiAqL1xuUG9zdFByb2Nlc3NTdGFnZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNvbnRleHQsIHVzZUxvZ0RlcHRoKSB7XG4gIGlmICh0aGlzLmVuYWJsZWQgIT09IHRoaXMuX2VuYWJsZWQgJiYgIXRoaXMuZW5hYmxlZCkge1xuICAgIHJlbGVhc2VSZXNvdXJjZXModGhpcyk7XG4gIH1cblxuICB0aGlzLl9lbmFibGVkID0gdGhpcy5lbmFibGVkO1xuICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9sb2dEZXB0aENoYW5nZWQgPSB1c2VMb2dEZXB0aCAhPT0gdGhpcy5fdXNlTG9nRGVwdGg7XG4gIHRoaXMuX3VzZUxvZ0RlcHRoID0gdXNlTG9nRGVwdGg7XG5cbiAgdGhpcy5fc2VsZWN0ZWREaXJ0eSA9IGlzU2VsZWN0ZWRUZXh0dXJlRGlydHkodGhpcyk7XG5cbiAgdGhpcy5fc2VsZWN0ZWRTaGFkb3cgPSB0aGlzLl9zZWxlY3RlZDtcbiAgdGhpcy5fcGFyZW50U2VsZWN0ZWRTaGFkb3cgPSB0aGlzLl9wYXJlbnRTZWxlY3RlZDtcbiAgdGhpcy5fY29tYmluZWRTZWxlY3RlZFNoYWRvdyA9IHRoaXMuX2NvbWJpbmVkU2VsZWN0ZWQ7XG4gIHRoaXMuX3NlbGVjdGVkTGVuZ3RoID0gZGVmaW5lZCh0aGlzLl9zZWxlY3RlZCkgPyB0aGlzLl9zZWxlY3RlZC5sZW5ndGggOiAwO1xuICB0aGlzLl9wYXJlbnRTZWxlY3RlZExlbmd0aCA9IGRlZmluZWQodGhpcy5fcGFyZW50U2VsZWN0ZWQpXG4gICAgPyB0aGlzLl9wYXJlbnRTZWxlY3RlZC5sZW5ndGhcbiAgICA6IDA7XG5cbiAgY3JlYXRlU2VsZWN0ZWRUZXh0dXJlKHRoaXMsIGNvbnRleHQpO1xuICBjcmVhdGVVbmlmb3JtTWFwKHRoaXMpO1xuICB1cGRhdGVVbmlmb3JtVGV4dHVyZXModGhpcywgY29udGV4dCk7XG4gIGNyZWF0ZURyYXdDb21tYW5kKHRoaXMsIGNvbnRleHQpO1xuICBjcmVhdGVTYW1wbGVyKHRoaXMpO1xuXG4gIHRoaXMuX3NlbGVjdGVkRGlydHkgPSBmYWxzZTtcblxuICBpZiAoIXRoaXMuX3JlYWR5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZyYW1lYnVmZmVyID0gdGhpcy5fdGV4dHVyZUNhY2hlLmdldEZyYW1lYnVmZmVyKHRoaXMuX25hbWUpO1xuICB0aGlzLl9jb21tYW5kLmZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXI7XG5cbiAgaWYgKCFkZWZpbmVkKGZyYW1lYnVmZmVyKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjb2xvclRleHR1cmUgPSBmcmFtZWJ1ZmZlci5nZXRDb2xvclRleHR1cmUoMCk7XG4gIHZhciByZW5kZXJTdGF0ZTtcbiAgaWYgKFxuICAgIGNvbG9yVGV4dHVyZS53aWR0aCAhPT0gY29udGV4dC5kcmF3aW5nQnVmZmVyV2lkdGggfHxcbiAgICBjb2xvclRleHR1cmUuaGVpZ2h0ICE9PSBjb250ZXh0LmRyYXdpbmdCdWZmZXJIZWlnaHRcbiAgKSB7XG4gICAgcmVuZGVyU3RhdGUgPSB0aGlzLl9yZW5kZXJTdGF0ZTtcbiAgICBpZiAoXG4gICAgICAhZGVmaW5lZChyZW5kZXJTdGF0ZSkgfHxcbiAgICAgIGNvbG9yVGV4dHVyZS53aWR0aCAhPT0gcmVuZGVyU3RhdGUudmlld3BvcnQud2lkdGggfHxcbiAgICAgIGNvbG9yVGV4dHVyZS5oZWlnaHQgIT09IHJlbmRlclN0YXRlLnZpZXdwb3J0LmhlaWdodFxuICAgICkge1xuICAgICAgdGhpcy5fcmVuZGVyU3RhdGUgPSBSZW5kZXJTdGF0ZS5mcm9tQ2FjaGUoe1xuICAgICAgICB2aWV3cG9ydDogbmV3IEJvdW5kaW5nUmVjdGFuZ2xlKFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBjb2xvclRleHR1cmUud2lkdGgsXG4gICAgICAgICAgY29sb3JUZXh0dXJlLmhlaWdodFxuICAgICAgICApLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5fY29tbWFuZC5yZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcG9zdC1wcm9jZXNzIHN0YWdlLiBUaGUgY29sb3IgdGV4dHVyZSBpcyB0aGUgdGV4dHVyZSByZW5kZXJlZCB0byBieSB0aGUgc2NlbmUgb3IgZnJvbSB0aGUgcHJldmlvdXMgc3RhZ2UuXG4gKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgVGhlIGNvbnRleHQuXG4gKiBAcGFyYW0ge1RleHR1cmV9IGNvbG9yVGV4dHVyZSBUaGUgaW5wdXQgY29sb3IgdGV4dHVyZS5cbiAqIEBwYXJhbSB7VGV4dHVyZX0gZGVwdGhUZXh0dXJlIFRoZSBpbnB1dCBkZXB0aCB0ZXh0dXJlLlxuICogQHBhcmFtIHtUZXh0dXJlfSBpZFRleHR1cmUgVGhlIGlkIHRleHR1cmUuXG4gKiBAcHJpdmF0ZVxuICovXG5Qb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKFxuICBjb250ZXh0LFxuICBjb2xvclRleHR1cmUsXG4gIGRlcHRoVGV4dHVyZSxcbiAgaWRUZXh0dXJlXG4pIHtcbiAgaWYgKFxuICAgICFkZWZpbmVkKHRoaXMuX2NvbW1hbmQpIHx8XG4gICAgIWRlZmluZWQodGhpcy5fY29tbWFuZC5mcmFtZWJ1ZmZlcikgfHxcbiAgICAhdGhpcy5fcmVhZHkgfHxcbiAgICAhdGhpcy5fZW5hYmxlZFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9jb2xvclRleHR1cmUgPSBjb2xvclRleHR1cmU7XG4gIHRoaXMuX2RlcHRoVGV4dHVyZSA9IGRlcHRoVGV4dHVyZTtcbiAgdGhpcy5faWRUZXh0dXJlID0gaWRUZXh0dXJlO1xuXG4gIGlmICghU2FtcGxlci5lcXVhbHModGhpcy5fY29sb3JUZXh0dXJlLnNhbXBsZXIsIHRoaXMuX3NhbXBsZXIpKSB7XG4gICAgdGhpcy5fY29sb3JUZXh0dXJlLnNhbXBsZXIgPSB0aGlzLl9zYW1wbGVyO1xuICB9XG5cbiAgdmFyIHBhc3NTdGF0ZSA9XG4gICAgdGhpcy5zY2lzc29yUmVjdGFuZ2xlLndpZHRoID4gMCAmJiB0aGlzLnNjaXNzb3JSZWN0YW5nbGUuaGVpZ2h0ID4gMFxuICAgICAgPyB0aGlzLl9wYXNzU3RhdGVcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoZGVmaW5lZChwYXNzU3RhdGUpKSB7XG4gICAgcGFzc1N0YXRlLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgdGhpcy5fY29tbWFuZC5leGVjdXRlKGNvbnRleHQsIHBhc3NTdGF0ZSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIG9iamVjdCB3YXMgZGVzdHJveWVkOyBvdGhlcndpc2UsIGZhbHNlLlxuICogPHA+XG4gKiBJZiB0aGlzIG9iamVjdCB3YXMgZGVzdHJveWVkLCBpdCBzaG91bGQgbm90IGJlIHVzZWQ7IGNhbGxpbmcgYW55IGZ1bmN0aW9uIG90aGVyIHRoYW5cbiAqIDxjb2RlPmlzRGVzdHJveWVkPC9jb2RlPiB3aWxsIHJlc3VsdCBpbiBhIHtAbGluayBEZXZlbG9wZXJFcnJvcn0gZXhjZXB0aW9uLlxuICogPC9wPlxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGlzIG9iamVjdCB3YXMgZGVzdHJveWVkOyBvdGhlcndpc2UsIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiAqXG4gKiBAc2VlIFBvc3RQcm9jZXNzU3RhZ2UjZGVzdHJveVxuICovXG5Qb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZS5pc0Rlc3Ryb3llZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgV2ViR0wgcmVzb3VyY2VzIGhlbGQgYnkgdGhpcyBvYmplY3QuICBEZXN0cm95aW5nIGFuIG9iamVjdCBhbGxvd3MgZm9yIGRldGVybWluaXN0aWNcbiAqIHJlbGVhc2Ugb2YgV2ViR0wgcmVzb3VyY2VzLCBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvIGRlc3Ryb3kgdGhpcyBvYmplY3QuXG4gKiA8cD5cbiAqIE9uY2UgYW4gb2JqZWN0IGlzIGRlc3Ryb3llZCwgaXQgc2hvdWxkIG5vdCBiZSB1c2VkOyBjYWxsaW5nIGFueSBmdW5jdGlvbiBvdGhlciB0aGFuXG4gKiA8Y29kZT5pc0Rlc3Ryb3llZDwvY29kZT4gd2lsbCByZXN1bHQgaW4gYSB7QGxpbmsgRGV2ZWxvcGVyRXJyb3J9IGV4Y2VwdGlvbi4gIFRoZXJlZm9yZSxcbiAqIGFzc2lnbiB0aGUgcmV0dXJuIHZhbHVlICg8Y29kZT51bmRlZmluZWQ8L2NvZGU+KSB0byB0aGUgb2JqZWN0IGFzIGRvbmUgaW4gdGhlIGV4YW1wbGUuXG4gKiA8L3A+XG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQsIGkuZS4sIGRlc3Ryb3koKSB3YXMgY2FsbGVkLlxuICpcbiAqIEBzZWUgUG9zdFByb2Nlc3NTdGFnZSNpc0Rlc3Ryb3llZFxuICovXG5Qb3N0UHJvY2Vzc1N0YWdlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICByZWxlYXNlUmVzb3VyY2VzKHRoaXMpO1xuICByZXR1cm4gZGVzdHJveU9iamVjdCh0aGlzKTtcbn07XG5leHBvcnQgZGVmYXVsdCBQb3N0UHJvY2Vzc1N0YWdlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11184\n')},13638:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_arraySlice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68591);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(88453);\n/* harmony import */ var _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(7571);\n/* harmony import */ var _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(80875);\n/* harmony import */ var _PostProcessStageTextureCache_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(87878);\n/* harmony import */ var _Tonemapper_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(1057);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar stackScratch = [];\n\n/**\n * A collection of {@link PostProcessStage}s and/or {@link PostProcessStageComposite}s.\n * <p>\n * The input texture for each post-process stage is the texture rendered to by the scene or the texture rendered\n * to by the previous stage in the collection.\n * </p>\n * <p>\n * If the ambient occlusion or bloom stages are enabled, they will execute before all other stages.\n * </p>\n * <p>\n * If the FXAA stage is enabled, it will execute after all other stages.\n * </p>\n *\n * @alias PostProcessStageCollection\n * @constructor\n */\nfunction PostProcessStageCollection() {\n  var fxaa = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createFXAAStage */ .Z.createFXAAStage();\n  var ao = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createAmbientOcclusionStage */ .Z.createAmbientOcclusionStage();\n  var bloom = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createBloomStage */ .Z.createBloomStage();\n\n  // Auto-exposure is currently disabled because most shaders output a value in [0.0, 1.0].\n  // Some shaders, such as the atmosphere and ground atmosphere, output values slightly over 1.0.\n  this._autoExposureEnabled = false;\n  this._autoExposure = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createAutoExposureStage */ .Z.createAutoExposureStage();\n  this._tonemapping = undefined;\n  this._tonemapper = undefined;\n\n  // set tonemapper and tonemapping\n  this.tonemapper = _Tonemapper_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].ACES */ .Z.ACES;\n\n  var tonemapping = this._tonemapping;\n\n  fxaa.enabled = false;\n  ao.enabled = false;\n  bloom.enabled = false;\n  tonemapping.enabled = false; // will be enabled if necessary in update\n\n  var textureCache = new _PostProcessStageTextureCache_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(this);\n\n  var stageNames = {};\n  var stack = stackScratch;\n  stack.push(fxaa, ao, bloom, tonemapping);\n  while (stack.length > 0) {\n    var stage = stack.pop();\n    stageNames[stage.name] = stage;\n    stage._textureCache = textureCache;\n\n    var length = stage.length;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(stage.get(i));\n      }\n    }\n  }\n\n  this._stages = [];\n  this._activeStages = [];\n  this._previousActiveStages = [];\n\n  this._randomTexture = undefined; // For AO\n\n  var that = this;\n  ao.uniforms.randomTexture = function () {\n    return that._randomTexture;\n  };\n\n  this._ao = ao;\n  this._bloom = bloom;\n  this._fxaa = fxaa;\n\n  this._aoEnabled = undefined;\n  this._bloomEnabled = undefined;\n  this._tonemappingEnabled = undefined;\n  this._fxaaEnabled = undefined;\n\n  this._activeStagesChanged = false;\n  this._stagesRemoved = false;\n  this._textureCacheDirty = false;\n\n  this._stageNames = stageNames;\n  this._textureCache = textureCache;\n}\n\nObject.defineProperties(PostProcessStageCollection.prototype, {\n  /**\n   * Determines if all of the post-process stages in the collection are ready to be executed.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      var readyAndEnabled = false;\n      var stages = this._stages;\n      var length = stages.length;\n      for (var i = length - 1; i >= 0; --i) {\n        var stage = stages[i];\n        readyAndEnabled = readyAndEnabled || (stage.ready && stage.enabled);\n      }\n\n      var fxaa = this._fxaa;\n      var ao = this._ao;\n      var bloom = this._bloom;\n      var tonemapping = this._tonemapping;\n\n      readyAndEnabled = readyAndEnabled || (fxaa.ready && fxaa.enabled);\n      readyAndEnabled = readyAndEnabled || (ao.ready && ao.enabled);\n      readyAndEnabled = readyAndEnabled || (bloom.ready && bloom.enabled);\n      readyAndEnabled =\n        readyAndEnabled || (tonemapping.ready && tonemapping.enabled);\n\n      return readyAndEnabled;\n    },\n  },\n  /**\n   * A post-process stage for Fast Approximate Anti-aliasing.\n   * <p>\n   * When enabled, this stage will execute after all others.\n   * </p>\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {PostProcessStage}\n   * @readonly\n   */\n  fxaa: {\n    get: function () {\n      return this._fxaa;\n    },\n  },\n  /**\n   * A post-process stage that applies Horizon-based Ambient Occlusion (HBAO) to the input texture.\n   * <p>\n   * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n   * surface receives light and regardless of the light\'s position.\n   * </p>\n   * <p>\n   * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n   * <code>stepSize</code>, <code>frustumLength</code>, <code>ambientOcclusionOnly</code>,\n   * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n   * </p>\n   * <ul>\n   * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n   *\n   * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n   * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n   *\n   * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n   * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n   *\n   * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n   *\n   * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n   * The default value is <code>1000.0</code>.</li>\n   *\n   * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n   * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n   * </ul>\n   * <p>\n   * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n   * The blur is applied to the shadows generated from the image to make them smoother.\n   * </p>\n   * <p>\n   * When enabled, this stage will execute before all others.\n   * </p>\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {PostProcessStageComposite}\n   * @readonly\n   */\n  ambientOcclusion: {\n    get: function () {\n      return this._ao;\n    },\n  },\n  /**\n   * A post-process stage for a bloom effect.\n   * <p>\n   * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n   * </p>\n   * <p>\n   * This stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n   * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n   * </p>\n   * <ul>\n   * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n   *\n   * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n   * added to the brightness. The default value is <code>-0.3</code>.</li>\n   *\n   * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n   * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n   * </ul>\n   * <p>\n   * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n   * The blur is applied to the shadows generated from the image to make them smoother.\n   * </p>\n   * <p>\n   * When enabled, this stage will execute before all others.\n   * </p>\n   *\n   * @memberOf PostProcessStageCollection.prototype\n   * @type {PostProcessStageComposite}\n   * @readonly\n   */\n  bloom: {\n    get: function () {\n      return this._bloom;\n    },\n  },\n  /**\n   * The number of post-process stages in this collection.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      removeStages(this);\n      return this._stages.length;\n    },\n  },\n  /**\n   * A reference to the last texture written to when executing the post-process stages in this collection.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  outputTexture: {\n    get: function () {\n      var fxaa = this._fxaa;\n      if (fxaa.enabled && fxaa.ready) {\n        return this.getOutputTexture(fxaa.name);\n      }\n\n      var stages = this._stages;\n      var length = stages.length;\n      for (var i = length - 1; i >= 0; --i) {\n        var stage = stages[i];\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage) && stage.ready && stage.enabled) {\n          return this.getOutputTexture(stage.name);\n        }\n      }\n\n      var tonemapping = this._tonemapping;\n      if (tonemapping.enabled && tonemapping.ready) {\n        return this.getOutputTexture(tonemapping.name);\n      }\n\n      var bloom = this._bloom;\n      if (bloom.enabled && bloom.ready) {\n        return this.getOutputTexture(bloom.name);\n      }\n\n      var ao = this._ao;\n      if (ao.enabled && ao.ready) {\n        return this.getOutputTexture(ao.name);\n      }\n\n      return undefined;\n    },\n  },\n  /**\n   * Whether the collection has a stage that has selected features.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Boolean}\n   * @readonly\n   * @private\n   */\n  hasSelected: {\n    get: function () {\n      var stages = (0,_Core_arraySlice_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this._stages);\n      while (stages.length > 0) {\n        var stage = stages.pop();\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage)) {\n          continue;\n        }\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage.selected)) {\n          return true;\n        }\n        var length = stage.length;\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(length)) {\n          for (var i = 0; i < length; ++i) {\n            stages.push(stage.get(i));\n          }\n        }\n      }\n      return false;\n    },\n  },\n\n  /**\n   * Gets and sets the tonemapping algorithm used when rendering with high dynamic range.\n   *\n   * @memberof PostProcessStageCollection.prototype\n   * @type {Tonemapper}\n   * @private\n   */\n  tonemapper: {\n    get: function () {\n      return this._tonemapper;\n    },\n    set: function (value) {\n      if (this._tonemapper === value) {\n        return;\n      }\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!_Tonemapper_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].validate */ .Z.validate(value)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("tonemapper was set to an invalid value.");\n      }\n      //>>includeEnd(\'debug\');\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(this._tonemapping)) {\n        delete this._stageNames[this._tonemapping.name];\n        this._tonemapping.destroy();\n      }\n\n      var useAutoExposure = this._autoExposureEnabled;\n      var tonemapper;\n\n      switch (value) {\n        case _Tonemapper_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].REINHARD */ .Z.REINHARD:\n          tonemapper = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createReinhardTonemappingStage */ .Z.createReinhardTonemappingStage(\n            useAutoExposure\n          );\n          break;\n        case _Tonemapper_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].MODIFIED_REINHARD */ .Z.MODIFIED_REINHARD:\n          tonemapper = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createModifiedReinhardTonemappingStage */ .Z.createModifiedReinhardTonemappingStage(\n            useAutoExposure\n          );\n          break;\n        case _Tonemapper_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].FILMIC */ .Z.FILMIC:\n          tonemapper = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createFilmicTonemappingStage */ .Z.createFilmicTonemappingStage(\n            useAutoExposure\n          );\n          break;\n        default:\n          tonemapper = _PostProcessStageLibrary_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createAcesTonemappingStage */ .Z.createAcesTonemappingStage(\n            useAutoExposure\n          );\n          break;\n      }\n\n      if (useAutoExposure) {\n        var autoexposure = this._autoExposure;\n        tonemapper.uniforms.autoExposure = function () {\n          return autoexposure.outputTexture;\n        };\n      }\n\n      this._tonemapper = value;\n      this._tonemapping = tonemapper;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(this._stageNames)) {\n        this._stageNames[tonemapper.name] = tonemapper;\n        tonemapper._textureCache = this._textureCache;\n      }\n\n      this._textureCacheDirty = true;\n    },\n  },\n});\n\nfunction removeStages(collection) {\n  if (!collection._stagesRemoved) {\n    return;\n  }\n\n  collection._stagesRemoved = false;\n\n  var newStages = [];\n  var stages = collection._stages;\n  var length = stages.length;\n  for (var i = 0, j = 0; i < length; ++i) {\n    var stage = stages[i];\n    if (stage) {\n      stage._index = j++;\n      newStages.push(stage);\n    }\n  }\n\n  collection._stages = newStages;\n}\n\n/**\n * Adds the post-process stage to the collection.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to add to the collection.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage that was added to the collection.\n *\n * @exception {DeveloperError} The post-process stage has already been added to the collection or does not have a unique name.\n */\nPostProcessStageCollection.prototype.add = function (stage) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("stage", stage);\n  //>>includeEnd(\'debug\');\n\n  var stageNames = this._stageNames;\n\n  var stack = stackScratch;\n  stack.push(stage);\n  while (stack.length > 0) {\n    var currentStage = stack.pop();\n    //>>includeStart(\'debug\', pragmas.debug);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stageNames[currentStage.name])) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        currentStage.name +\n          " has already been added to the collection or does not have a unique name."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    stageNames[currentStage.name] = currentStage;\n    currentStage._textureCache = this._textureCache;\n\n    var length = currentStage.length;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(currentStage.get(i));\n      }\n    }\n  }\n\n  var stages = this._stages;\n  stage._index = stages.length;\n  stages.push(stage);\n  this._textureCacheDirty = true;\n  return stage;\n};\n\n/**\n * Removes a post-process stage from the collection and destroys it.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to remove from the collection.\n * @return {Boolean} Whether the post-process stage was removed.\n */\nPostProcessStageCollection.prototype.remove = function (stage) {\n  if (!this.contains(stage)) {\n    return false;\n  }\n\n  var stageNames = this._stageNames;\n\n  var stack = stackScratch;\n  stack.push(stage);\n  while (stack.length > 0) {\n    var currentStage = stack.pop();\n    delete stageNames[currentStage.name];\n\n    var length = currentStage.length;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(length)) {\n      for (var i = 0; i < length; ++i) {\n        stack.push(currentStage.get(i));\n      }\n    }\n  }\n\n  this._stages[stage._index] = undefined;\n  this._stagesRemoved = true;\n  this._textureCacheDirty = true;\n  stage._index = undefined;\n  stage._textureCache = undefined;\n  stage.destroy();\n  return true;\n};\n\n/**\n * Returns whether the collection contains a post-process stage.\n *\n * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage.\n * @return {Boolean} Whether the collection contains the post-process stage.\n */\nPostProcessStageCollection.prototype.contains = function (stage) {\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage._index) &&\n    stage._textureCache === this._textureCache\n  );\n};\n\n/**\n * Gets the post-process stage at <code>index</code>.\n *\n * @param {Number} index The index of the post-process stage.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage at index.\n */\nPostProcessStageCollection.prototype.get = function (index) {\n  removeStages(this);\n  var stages = this._stages;\n  //>>includeStart(\'debug\', pragmas.debug);\n  var length = stages.length;\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("stages length", length, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("index", index, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.lessThan */ .Z.typeOf.number.lessThan("index", index, length);\n  //>>includeEnd(\'debug\');\n  return stages[index];\n};\n\n/**\n * Removes all post-process stages from the collection and destroys them.\n */\nPostProcessStageCollection.prototype.removeAll = function () {\n  var stages = this._stages;\n  var length = stages.length;\n  for (var i = 0; i < length; ++i) {\n    this.remove(stages[i]);\n  }\n  stages.length = 0;\n};\n\n/**\n * Gets a post-process stage in the collection by its name.\n *\n * @param {String} name The name of the post-process stage.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage.\n *\n * @private\n */\nPostProcessStageCollection.prototype.getStageByName = function (name) {\n  return this._stageNames[name];\n};\n\n/**\n * Called before the post-process stages in the collection are executed. Calls update for each stage and creates WebGL resources.\n *\n * @param {Context} context The context.\n * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n *\n * @private\n */\nPostProcessStageCollection.prototype.update = function (\n  context,\n  useLogDepth,\n  useHdr\n) {\n  removeStages(this);\n\n  var previousActiveStages = this._activeStages;\n  var activeStages = (this._activeStages = this._previousActiveStages);\n  this._previousActiveStages = previousActiveStages;\n\n  var stages = this._stages;\n  var length = (activeStages.length = stages.length);\n\n  var i;\n  var stage;\n  var count = 0;\n  for (i = 0; i < length; ++i) {\n    stage = stages[i];\n    if (stage.ready && stage.enabled && stage._isSupported(context)) {\n      activeStages[count++] = stage;\n    }\n  }\n\n  activeStages.length = count;\n\n  var activeStagesChanged = count !== previousActiveStages.length;\n  if (!activeStagesChanged) {\n    for (i = 0; i < count; ++i) {\n      if (activeStages[i] !== previousActiveStages[i]) {\n        activeStagesChanged = true;\n        break;\n      }\n    }\n  }\n\n  var ao = this._ao;\n  var bloom = this._bloom;\n  var autoexposure = this._autoExposure;\n  var tonemapping = this._tonemapping;\n  var fxaa = this._fxaa;\n\n  tonemapping.enabled = useHdr;\n\n  var aoEnabled = ao.enabled && ao._isSupported(context);\n  var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n  var tonemappingEnabled =\n    tonemapping.enabled && tonemapping._isSupported(context);\n  var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n  if (\n    activeStagesChanged ||\n    this._textureCacheDirty ||\n    aoEnabled !== this._aoEnabled ||\n    bloomEnabled !== this._bloomEnabled ||\n    tonemappingEnabled !== this._tonemappingEnabled ||\n    fxaaEnabled !== this._fxaaEnabled\n  ) {\n    // The number of stages to execute has changed.\n    // Update dependencies and recreate framebuffers.\n    this._textureCache.updateDependencies();\n\n    this._aoEnabled = aoEnabled;\n    this._bloomEnabled = bloomEnabled;\n    this._tonemappingEnabled = tonemappingEnabled;\n    this._fxaaEnabled = fxaaEnabled;\n    this._textureCacheDirty = false;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(this._randomTexture) && !aoEnabled) {\n    this._randomTexture.destroy();\n    this._randomTexture = undefined;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(this._randomTexture) && aoEnabled) {\n    length = 256 * 256 * 3;\n    var random = new Uint8Array(length);\n    for (i = 0; i < length; i += 3) {\n      random[i] = Math.floor(Math.random() * 255.0);\n    }\n\n    this._randomTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      context: context,\n      pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].RGB */ .Z.RGB,\n      pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      source: {\n        arrayBufferView: random,\n        width: 256,\n        height: 256,\n      },\n      sampler: new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n        wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].REPEAT */ .Z.REPEAT,\n        wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].REPEAT */ .Z.REPEAT,\n        minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].NEAREST */ .Z.NEAREST,\n        magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NEAREST */ .Z.NEAREST,\n      }),\n    });\n  }\n\n  this._textureCache.update(context);\n\n  fxaa.update(context, useLogDepth);\n  ao.update(context, useLogDepth);\n  bloom.update(context, useLogDepth);\n  tonemapping.update(context, useLogDepth);\n\n  if (this._autoExposureEnabled) {\n    autoexposure.update(context, useLogDepth);\n  }\n\n  length = stages.length;\n  for (i = 0; i < length; ++i) {\n    stages[i].update(context, useLogDepth);\n  }\n\n  count = 0;\n  for (i = 0; i < length; ++i) {\n    stage = stages[i];\n    if (stage.ready && stage.enabled && stage._isSupported(context)) {\n      count++;\n    }\n  }\n\n  activeStagesChanged = count !== activeStages.length;\n  if (activeStagesChanged) {\n    this.update(context, useLogDepth, useHdr);\n  }\n};\n\n/**\n * Clears all of the framebuffers used by the stages.\n *\n * @param {Context} context The context.\n *\n * @private\n */\nPostProcessStageCollection.prototype.clear = function (context) {\n  this._textureCache.clear(context);\n\n  if (this._autoExposureEnabled) {\n    this._autoExposure.clear(context);\n  }\n};\n\nfunction getOutputTexture(stage) {\n  while ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage.length)) {\n    stage = stage.get(stage.length - 1);\n  }\n  return stage.outputTexture;\n}\n\n/**\n * Gets the output texture of a stage with the given name.\n *\n * @param {String} stageName The name of the stage.\n * @return {Texture|undefined} The texture rendered to by the stage with the given name.\n *\n * @private\n */\nPostProcessStageCollection.prototype.getOutputTexture = function (stageName) {\n  var stage = this.getStageByName(stageName);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage)) {\n    return undefined;\n  }\n  return getOutputTexture(stage);\n};\n\nfunction execute(stage, context, colorTexture, depthTexture, idTexture) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(stage.execute)) {\n    stage.execute(context, colorTexture, depthTexture, idTexture);\n    return;\n  }\n\n  var length = stage.length;\n  var i;\n\n  if (stage.inputPreviousStageTexture) {\n    execute(stage.get(0), context, colorTexture, depthTexture, idTexture);\n    for (i = 1; i < length; ++i) {\n      execute(\n        stage.get(i),\n        context,\n        getOutputTexture(stage.get(i - 1)),\n        depthTexture,\n        idTexture\n      );\n    }\n  } else {\n    for (i = 0; i < length; ++i) {\n      execute(stage.get(i), context, colorTexture, depthTexture, idTexture);\n    }\n  }\n}\n\n/**\n * Executes all ready and enabled stages in the collection.\n *\n * @param {Context} context The context.\n * @param {Texture} colorTexture The color texture rendered to by the scene.\n * @param {Texture} depthTexture The depth texture written to by the scene.\n * @param {Texture} idTexture The id texture written to by the scene.\n *\n * @private\n */\nPostProcessStageCollection.prototype.execute = function (\n  context,\n  colorTexture,\n  depthTexture,\n  idTexture\n) {\n  var activeStages = this._activeStages;\n  var length = activeStages.length;\n  var fxaa = this._fxaa;\n  var ao = this._ao;\n  var bloom = this._bloom;\n  var autoexposure = this._autoExposure;\n  var tonemapping = this._tonemapping;\n\n  var aoEnabled = ao.enabled && ao._isSupported(context);\n  var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n  var autoExposureEnabled = this._autoExposureEnabled;\n  var tonemappingEnabled =\n    tonemapping.enabled && tonemapping._isSupported(context);\n  var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n  if (\n    !fxaaEnabled &&\n    !aoEnabled &&\n    !bloomEnabled &&\n    !tonemappingEnabled &&\n    length === 0\n  ) {\n    return;\n  }\n\n  var initialTexture = colorTexture;\n  if (aoEnabled && ao.ready) {\n    execute(ao, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(ao);\n  }\n  if (bloomEnabled && bloom.ready) {\n    execute(bloom, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(bloom);\n  }\n  if (autoExposureEnabled && autoexposure.ready) {\n    execute(autoexposure, context, initialTexture, depthTexture, idTexture);\n  }\n  if (tonemappingEnabled && tonemapping.ready) {\n    execute(tonemapping, context, initialTexture, depthTexture, idTexture);\n    initialTexture = getOutputTexture(tonemapping);\n  }\n\n  var lastTexture = initialTexture;\n\n  if (length > 0) {\n    execute(activeStages[0], context, initialTexture, depthTexture, idTexture);\n    for (var i = 1; i < length; ++i) {\n      execute(\n        activeStages[i],\n        context,\n        getOutputTexture(activeStages[i - 1]),\n        depthTexture,\n        idTexture\n      );\n    }\n    lastTexture = getOutputTexture(activeStages[length - 1]);\n  }\n\n  if (fxaaEnabled && fxaa.ready) {\n    execute(fxaa, context, lastTexture, depthTexture, idTexture);\n  }\n};\n\n/**\n * Copies the output of all executed stages to the color texture of a framebuffer.\n *\n * @param {Context} context The context.\n * @param {Framebuffer} framebuffer The framebuffer to copy to.\n *\n * @private\n */\nPostProcessStageCollection.prototype.copy = function (context, framebuffer) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(this._copyColorCommand)) {\n    var that = this;\n    this._copyColorCommand = context.createViewportQuadCommand(_Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z, {\n      uniformMap: {\n        colorTexture: function () {\n          return that.outputTexture;\n        },\n      },\n      owner: this,\n    });\n  }\n\n  this._copyColorCommand.framebuffer = framebuffer;\n  this._copyColorCommand.execute(context);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see PostProcessStageCollection#destroy\n */\nPostProcessStageCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PostProcessStageCollection#isDestroyed\n */\nPostProcessStageCollection.prototype.destroy = function () {\n  this._fxaa.destroy();\n  this._ao.destroy();\n  this._bloom.destroy();\n  this._autoExposure.destroy();\n  this._tonemapping.destroy();\n  this.removeAll();\n  this._textureCache = this._textureCache && this._textureCache.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (PostProcessStageCollection);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQsOENBQThDLHNCQUFzQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywyRUFBYTtBQUN0QjtBQUNBLHlEQUFlLDBCQUEwQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL1Bvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLmpzPzE1OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFycmF5U2xpY2UgZnJvbSBcIi4uL0NvcmUvYXJyYXlTbGljZS5qc1wiO1xuaW1wb3J0IENoZWNrIGZyb20gXCIuLi9Db3JlL0NoZWNrLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgZGVzdHJveU9iamVjdCBmcm9tIFwiLi4vQ29yZS9kZXN0cm95T2JqZWN0LmpzXCI7XG5pbXBvcnQgRGV2ZWxvcGVyRXJyb3IgZnJvbSBcIi4uL0NvcmUvRGV2ZWxvcGVyRXJyb3IuanNcIjtcbmltcG9ydCBQaXhlbEZvcm1hdCBmcm9tIFwiLi4vQ29yZS9QaXhlbEZvcm1hdC5qc1wiO1xuaW1wb3J0IFBpeGVsRGF0YXR5cGUgZnJvbSBcIi4uL1JlbmRlcmVyL1BpeGVsRGF0YXR5cGUuanNcIjtcbmltcG9ydCBTYW1wbGVyIGZyb20gXCIuLi9SZW5kZXJlci9TYW1wbGVyLmpzXCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vUmVuZGVyZXIvVGV4dHVyZS5qc1wiO1xuaW1wb3J0IFRleHR1cmVNYWduaWZpY2F0aW9uRmlsdGVyIGZyb20gXCIuLi9SZW5kZXJlci9UZXh0dXJlTWFnbmlmaWNhdGlvbkZpbHRlci5qc1wiO1xuaW1wb3J0IFRleHR1cmVNaW5pZmljYXRpb25GaWx0ZXIgZnJvbSBcIi4uL1JlbmRlcmVyL1RleHR1cmVNaW5pZmljYXRpb25GaWx0ZXIuanNcIjtcbmltcG9ydCBUZXh0dXJlV3JhcCBmcm9tIFwiLi4vUmVuZGVyZXIvVGV4dHVyZVdyYXAuanNcIjtcbmltcG9ydCBQYXNzVGhyb3VnaCBmcm9tIFwiLi4vU2hhZGVycy9Qb3N0UHJvY2Vzc1N0YWdlcy9QYXNzVGhyb3VnaC5qc1wiO1xuaW1wb3J0IFBvc3RQcm9jZXNzU3RhZ2VMaWJyYXJ5IGZyb20gXCIuL1Bvc3RQcm9jZXNzU3RhZ2VMaWJyYXJ5LmpzXCI7XG5pbXBvcnQgUG9zdFByb2Nlc3NTdGFnZVRleHR1cmVDYWNoZSBmcm9tIFwiLi9Qb3N0UHJvY2Vzc1N0YWdlVGV4dHVyZUNhY2hlLmpzXCI7XG5pbXBvcnQgVG9uZW1hcHBlciBmcm9tIFwiLi9Ub25lbWFwcGVyLmpzXCI7XG5cbnZhciBzdGFja1NjcmF0Y2ggPSBbXTtcblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2Yge0BsaW5rIFBvc3RQcm9jZXNzU3RhZ2V9cyBhbmQvb3Ige0BsaW5rIFBvc3RQcm9jZXNzU3RhZ2VDb21wb3NpdGV9cy5cbiAqIDxwPlxuICogVGhlIGlucHV0IHRleHR1cmUgZm9yIGVhY2ggcG9zdC1wcm9jZXNzIHN0YWdlIGlzIHRoZSB0ZXh0dXJlIHJlbmRlcmVkIHRvIGJ5IHRoZSBzY2VuZSBvciB0aGUgdGV4dHVyZSByZW5kZXJlZFxuICogdG8gYnkgdGhlIHByZXZpb3VzIHN0YWdlIGluIHRoZSBjb2xsZWN0aW9uLlxuICogPC9wPlxuICogPHA+XG4gKiBJZiB0aGUgYW1iaWVudCBvY2NsdXNpb24gb3IgYmxvb20gc3RhZ2VzIGFyZSBlbmFibGVkLCB0aGV5IHdpbGwgZXhlY3V0ZSBiZWZvcmUgYWxsIG90aGVyIHN0YWdlcy5cbiAqIDwvcD5cbiAqIDxwPlxuICogSWYgdGhlIEZYQUEgc3RhZ2UgaXMgZW5hYmxlZCwgaXQgd2lsbCBleGVjdXRlIGFmdGVyIGFsbCBvdGhlciBzdGFnZXMuXG4gKiA8L3A+XG4gKlxuICogQGFsaWFzIFBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24oKSB7XG4gIHZhciBmeGFhID0gUG9zdFByb2Nlc3NTdGFnZUxpYnJhcnkuY3JlYXRlRlhBQVN0YWdlKCk7XG4gIHZhciBhbyA9IFBvc3RQcm9jZXNzU3RhZ2VMaWJyYXJ5LmNyZWF0ZUFtYmllbnRPY2NsdXNpb25TdGFnZSgpO1xuICB2YXIgYmxvb20gPSBQb3N0UHJvY2Vzc1N0YWdlTGlicmFyeS5jcmVhdGVCbG9vbVN0YWdlKCk7XG5cbiAgLy8gQXV0by1leHBvc3VyZSBpcyBjdXJyZW50bHkgZGlzYWJsZWQgYmVjYXVzZSBtb3N0IHNoYWRlcnMgb3V0cHV0IGEgdmFsdWUgaW4gWzAuMCwgMS4wXS5cbiAgLy8gU29tZSBzaGFkZXJzLCBzdWNoIGFzIHRoZSBhdG1vc3BoZXJlIGFuZCBncm91bmQgYXRtb3NwaGVyZSwgb3V0cHV0IHZhbHVlcyBzbGlnaHRseSBvdmVyIDEuMC5cbiAgdGhpcy5fYXV0b0V4cG9zdXJlRW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLl9hdXRvRXhwb3N1cmUgPSBQb3N0UHJvY2Vzc1N0YWdlTGlicmFyeS5jcmVhdGVBdXRvRXhwb3N1cmVTdGFnZSgpO1xuICB0aGlzLl90b25lbWFwcGluZyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fdG9uZW1hcHBlciA9IHVuZGVmaW5lZDtcblxuICAvLyBzZXQgdG9uZW1hcHBlciBhbmQgdG9uZW1hcHBpbmdcbiAgdGhpcy50b25lbWFwcGVyID0gVG9uZW1hcHBlci5BQ0VTO1xuXG4gIHZhciB0b25lbWFwcGluZyA9IHRoaXMuX3RvbmVtYXBwaW5nO1xuXG4gIGZ4YWEuZW5hYmxlZCA9IGZhbHNlO1xuICBhby5lbmFibGVkID0gZmFsc2U7XG4gIGJsb29tLmVuYWJsZWQgPSBmYWxzZTtcbiAgdG9uZW1hcHBpbmcuZW5hYmxlZCA9IGZhbHNlOyAvLyB3aWxsIGJlIGVuYWJsZWQgaWYgbmVjZXNzYXJ5IGluIHVwZGF0ZVxuXG4gIHZhciB0ZXh0dXJlQ2FjaGUgPSBuZXcgUG9zdFByb2Nlc3NTdGFnZVRleHR1cmVDYWNoZSh0aGlzKTtcblxuICB2YXIgc3RhZ2VOYW1lcyA9IHt9O1xuICB2YXIgc3RhY2sgPSBzdGFja1NjcmF0Y2g7XG4gIHN0YWNrLnB1c2goZnhhYSwgYW8sIGJsb29tLCB0b25lbWFwcGluZyk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHN0YWdlID0gc3RhY2sucG9wKCk7XG4gICAgc3RhZ2VOYW1lc1tzdGFnZS5uYW1lXSA9IHN0YWdlO1xuICAgIHN0YWdlLl90ZXh0dXJlQ2FjaGUgPSB0ZXh0dXJlQ2FjaGU7XG5cbiAgICB2YXIgbGVuZ3RoID0gc3RhZ2UubGVuZ3RoO1xuICAgIGlmIChkZWZpbmVkKGxlbmd0aCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc3RhY2sucHVzaChzdGFnZS5nZXQoaSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX3N0YWdlcyA9IFtdO1xuICB0aGlzLl9hY3RpdmVTdGFnZXMgPSBbXTtcbiAgdGhpcy5fcHJldmlvdXNBY3RpdmVTdGFnZXMgPSBbXTtcblxuICB0aGlzLl9yYW5kb21UZXh0dXJlID0gdW5kZWZpbmVkOyAvLyBGb3IgQU9cblxuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGFvLnVuaWZvcm1zLnJhbmRvbVRleHR1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoYXQuX3JhbmRvbVRleHR1cmU7XG4gIH07XG5cbiAgdGhpcy5fYW8gPSBhbztcbiAgdGhpcy5fYmxvb20gPSBibG9vbTtcbiAgdGhpcy5fZnhhYSA9IGZ4YWE7XG5cbiAgdGhpcy5fYW9FbmFibGVkID0gdW5kZWZpbmVkO1xuICB0aGlzLl9ibG9vbUVuYWJsZWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3RvbmVtYXBwaW5nRW5hYmxlZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZnhhYUVuYWJsZWQgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5fYWN0aXZlU3RhZ2VzQ2hhbmdlZCA9IGZhbHNlO1xuICB0aGlzLl9zdGFnZXNSZW1vdmVkID0gZmFsc2U7XG4gIHRoaXMuX3RleHR1cmVDYWNoZURpcnR5ID0gZmFsc2U7XG5cbiAgdGhpcy5fc3RhZ2VOYW1lcyA9IHN0YWdlTmFtZXM7XG4gIHRoaXMuX3RleHR1cmVDYWNoZSA9IHRleHR1cmVDYWNoZTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24ucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGFsbCBvZiB0aGUgcG9zdC1wcm9jZXNzIHN0YWdlcyBpbiB0aGUgY29sbGVjdGlvbiBhcmUgcmVhZHkgdG8gYmUgZXhlY3V0ZWQuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvbi5wcm90b3R5cGVcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcmVhZHk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZWFkeUFuZEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHZhciBzdGFnZXMgPSB0aGlzLl9zdGFnZXM7XG4gICAgICB2YXIgbGVuZ3RoID0gc3RhZ2VzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSBsZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgc3RhZ2UgPSBzdGFnZXNbaV07XG4gICAgICAgIHJlYWR5QW5kRW5hYmxlZCA9IHJlYWR5QW5kRW5hYmxlZCB8fCAoc3RhZ2UucmVhZHkgJiYgc3RhZ2UuZW5hYmxlZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBmeGFhID0gdGhpcy5fZnhhYTtcbiAgICAgIHZhciBhbyA9IHRoaXMuX2FvO1xuICAgICAgdmFyIGJsb29tID0gdGhpcy5fYmxvb207XG4gICAgICB2YXIgdG9uZW1hcHBpbmcgPSB0aGlzLl90b25lbWFwcGluZztcblxuICAgICAgcmVhZHlBbmRFbmFibGVkID0gcmVhZHlBbmRFbmFibGVkIHx8IChmeGFhLnJlYWR5ICYmIGZ4YWEuZW5hYmxlZCk7XG4gICAgICByZWFkeUFuZEVuYWJsZWQgPSByZWFkeUFuZEVuYWJsZWQgfHwgKGFvLnJlYWR5ICYmIGFvLmVuYWJsZWQpO1xuICAgICAgcmVhZHlBbmRFbmFibGVkID0gcmVhZHlBbmRFbmFibGVkIHx8IChibG9vbS5yZWFkeSAmJiBibG9vbS5lbmFibGVkKTtcbiAgICAgIHJlYWR5QW5kRW5hYmxlZCA9XG4gICAgICAgIHJlYWR5QW5kRW5hYmxlZCB8fCAodG9uZW1hcHBpbmcucmVhZHkgJiYgdG9uZW1hcHBpbmcuZW5hYmxlZCk7XG5cbiAgICAgIHJldHVybiByZWFkeUFuZEVuYWJsZWQ7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEEgcG9zdC1wcm9jZXNzIHN0YWdlIGZvciBGYXN0IEFwcHJveGltYXRlIEFudGktYWxpYXNpbmcuXG4gICAqIDxwPlxuICAgKiBXaGVuIGVuYWJsZWQsIHRoaXMgc3RhZ2Ugd2lsbCBleGVjdXRlIGFmdGVyIGFsbCBvdGhlcnMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7UG9zdFByb2Nlc3NTdGFnZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmeGFhOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZnhhYTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogQSBwb3N0LXByb2Nlc3Mgc3RhZ2UgdGhhdCBhcHBsaWVzIEhvcml6b24tYmFzZWQgQW1iaWVudCBPY2NsdXNpb24gKEhCQU8pIHRvIHRoZSBpbnB1dCB0ZXh0dXJlLlxuICAgKiA8cD5cbiAgICogQW1iaWVudCBvY2NsdXNpb24gc2ltdWxhdGVzIHNoYWRvd3MgZnJvbSBhbWJpZW50IGxpZ2h0LiBUaGVzZSBzaGFkb3dzIHdvdWxkIGFsd2F5cyBiZSBwcmVzZW50IHdoZW4gdGhlXG4gICAqIHN1cmZhY2UgcmVjZWl2ZXMgbGlnaHQgYW5kIHJlZ2FyZGxlc3Mgb2YgdGhlIGxpZ2h0J3MgcG9zaXRpb24uXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIFRoZSB1bmlmb3JtcyBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczogPGNvZGU+aW50ZW5zaXR5PC9jb2RlPiwgPGNvZGU+YmlhczwvY29kZT4sIDxjb2RlPmxlbmd0aENhcDwvY29kZT4sXG4gICAqIDxjb2RlPnN0ZXBTaXplPC9jb2RlPiwgPGNvZGU+ZnJ1c3R1bUxlbmd0aDwvY29kZT4sIDxjb2RlPmFtYmllbnRPY2NsdXNpb25Pbmx5PC9jb2RlPixcbiAgICogPGNvZGU+ZGVsdGE8L2NvZGU+LCA8Y29kZT5zaWdtYTwvY29kZT4sIGFuZCA8Y29kZT5ibHVyU3RlcFNpemU8L2NvZGU+LlxuICAgKiA8L3A+XG4gICAqIDx1bD5cbiAgICogPGxpPjxjb2RlPmludGVuc2l0eTwvY29kZT4gaXMgYSBzY2FsYXIgdmFsdWUgdXNlZCB0byBsaWdodGVuIG9yIGRhcmtlbiB0aGUgc2hhZG93cyBleHBvbmVudGlhbGx5LiBIaWdoZXIgdmFsdWVzIG1ha2UgdGhlIHNoYWRvd3MgZGFya2VyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA8Y29kZT4zLjA8L2NvZGU+LjwvbGk+XG4gICAqXG4gICAqIDxsaT48Y29kZT5iaWFzPC9jb2RlPiBpcyBhIHNjYWxhciB2YWx1ZSByZXByZXNlbnRpbmcgYW4gYW5nbGUgaW4gcmFkaWFucy4gSWYgdGhlIGRvdCBwcm9kdWN0IGJldHdlZW4gdGhlIG5vcm1hbCBvZiB0aGUgc2FtcGxlIGFuZCB0aGUgdmVjdG9yIHRvIHRoZSBjYW1lcmEgaXMgbGVzcyB0aGFuIHRoaXMgdmFsdWUsXG4gICAqIHNhbXBsaW5nIHN0b3BzIGluIHRoZSBjdXJyZW50IGRpcmVjdGlvbi4gVGhpcyBpcyB1c2VkIHRvIHJlbW92ZSBzaGFkb3dzIGZyb20gbmVhciBwbGFuYXIgZWRnZXMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDxjb2RlPjAuMTwvY29kZT4uPC9saT5cbiAgICpcbiAgICogPGxpPjxjb2RlPmxlbmd0aENhcDwvY29kZT4gaXMgYSBzY2FsYXIgdmFsdWUgcmVwcmVzZW50aW5nIGEgbGVuZ3RoIGluIG1ldGVycy4gSWYgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGN1cnJlbnQgc2FtcGxlIHRvIGZpcnN0IHNhbXBsZSBpcyBncmVhdGVyIHRoYW4gdGhpcyB2YWx1ZSxcbiAgICogc2FtcGxpbmcgc3RvcHMgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA8Y29kZT4wLjI2PC9jb2RlPi48L2xpPlxuICAgKlxuICAgKiA8bGk+PGNvZGU+c3RlcFNpemU8L2NvZGU+IGlzIGEgc2NhbGFyIHZhbHVlIGluZGljYXRpbmcgdGhlIGRpc3RhbmNlIHRvIHRoZSBuZXh0IHRleGVsIHNhbXBsZSBpbiB0aGUgY3VycmVudCBkaXJlY3Rpb24uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDxjb2RlPjEuOTU8L2NvZGU+LjwvbGk+XG4gICAqXG4gICAqIDxsaT48Y29kZT5mcnVzdHVtTGVuZ3RoPC9jb2RlPiBpcyBhIHNjYWxhciB2YWx1ZSBpbiBtZXRlcnMuIElmIHRoZSBjdXJyZW50IGZyYWdtZW50IGhhcyBhIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSBncmVhdGVyIHRoYW4gdGhpcyB2YWx1ZSwgYW1iaWVudCBvY2NsdXNpb24gaXMgbm90IGNvbXB1dGVkIGZvciB0aGUgZnJhZ21lbnQuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDxjb2RlPjEwMDAuMDwvY29kZT4uPC9saT5cbiAgICpcbiAgICogPGxpPjxjb2RlPmFtYmllbnRPY2NsdXNpb25Pbmx5PC9jb2RlPiBpcyBhIGJvb2xlYW4gdmFsdWUuIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4sIG9ubHkgdGhlIHNoYWRvd3MgZ2VuZXJhdGVkIGFyZSB3cml0dGVuIHRvIHRoZSBvdXRwdXQuIFdoZW4gPGNvZGU+ZmFsc2U8L2NvZGU+LCB0aGUgaW5wdXQgdGV4dHVyZSBpcyBtb2R1bGF0ZWRcbiAgICogd2l0aCB0aGUgYW1iaWVudCBvY2NsdXNpb24uIFRoaXMgaXMgYSB1c2VmdWwgZGVidWcgb3B0aW9uIGZvciBzZWVpbmcgdGhlIGVmZmVjdHMgb2YgY2hhbmdpbmcgdGhlIHVuaWZvcm0gdmFsdWVzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA8Y29kZT5mYWxzZTwvY29kZT4uPC9saT5cbiAgICogPC91bD5cbiAgICogPHA+XG4gICAqIDxjb2RlPmRlbHRhPC9jb2RlPiwgPGNvZGU+c2lnbWE8L2NvZGU+LCBhbmQgPGNvZGU+Ymx1clN0ZXBTaXplPC9jb2RlPiBhcmUgdGhlIHNhbWUgcHJvcGVydGllcyBhcyB7QGxpbmsgUG9zdFByb2Nlc3NTdGFnZUxpYnJhcnkjY3JlYXRlQmx1clN0YWdlfS5cbiAgICogVGhlIGJsdXIgaXMgYXBwbGllZCB0byB0aGUgc2hhZG93cyBnZW5lcmF0ZWQgZnJvbSB0aGUgaW1hZ2UgdG8gbWFrZSB0aGVtIHNtb290aGVyLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBXaGVuIGVuYWJsZWQsIHRoaXMgc3RhZ2Ugd2lsbCBleGVjdXRlIGJlZm9yZSBhbGwgb3RoZXJzLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvbi5wcm90b3R5cGVcbiAgICogQHR5cGUge1Bvc3RQcm9jZXNzU3RhZ2VDb21wb3NpdGV9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgYW1iaWVudE9jY2x1c2lvbjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FvO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBBIHBvc3QtcHJvY2VzcyBzdGFnZSBmb3IgYSBibG9vbSBlZmZlY3QuXG4gICAqIDxwPlxuICAgKiBBIGJsb29tIGVmZmVjdCBhZGRzIGdsb3cgZWZmZWN0LCBtYWtlcyBicmlnaHQgYXJlYXMgYnJpZ2h0ZXIsIGFuZCBkYXJrIGFyZWFzIGRhcmtlci5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogVGhpcyBzdGFnZSBoYXMgdGhlIGZvbGxvd2luZyB1bmlmb3JtczogPGNvZGU+Y29udHJhc3Q8L2NvZGU+LCA8Y29kZT5icmlnaHRuZXNzPC9jb2RlPiwgPGNvZGU+Z2xvd09ubHk8L2NvZGU+LFxuICAgKiA8Y29kZT5kZWx0YTwvY29kZT4sIDxjb2RlPnNpZ21hPC9jb2RlPiwgYW5kIDxjb2RlPnN0ZXBTaXplPC9jb2RlPi5cbiAgICogPC9wPlxuICAgKiA8dWw+XG4gICAqIDxsaT48Y29kZT5jb250cmFzdDwvY29kZT4gaXMgYSBzY2FsYXIgdmFsdWUgaW4gdGhlIHJhbmdlIFstMjU1LjAsIDI1NS4wXSBhbmQgYWZmZWN0cyB0aGUgY29udHJhY3Qgb2YgdGhlIGVmZmVjdC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgPGNvZGU+MTI4LjA8L2NvZGU+LjwvbGk+XG4gICAqXG4gICAqIDxsaT48Y29kZT5icmlnaHRuZXNzPC9jb2RlPiBpcyBhIHNjYWxhciB2YWx1ZS4gVGhlIGlucHV0IHRleHR1cmUgUkdCIHZhbHVlIGlzIGNvbnZlcnRlZCB0byBodWUsIHNhdHVyYXRpb24sIGFuZCBicmlnaHRuZXNzIChIU0IpIHRoZW4gdGhpcyB2YWx1ZSBpc1xuICAgKiBhZGRlZCB0byB0aGUgYnJpZ2h0bmVzcy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgPGNvZGU+LTAuMzwvY29kZT4uPC9saT5cbiAgICpcbiAgICogPGxpPjxjb2RlPmdsb3dPbmx5PC9jb2RlPiBpcyBhIGJvb2xlYW4gdmFsdWUuIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4sIG9ubHkgdGhlIGdsb3cgZWZmZWN0IHdpbGwgYmUgc2hvd24uIFdoZW4gPGNvZGU+ZmFsc2U8L2NvZGU+LCB0aGUgZ2xvdyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBpbnB1dCB0ZXh0dXJlLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA8Y29kZT5mYWxzZTwvY29kZT4uIFRoaXMgaXMgYSBkZWJ1ZyBvcHRpb24gZm9yIHZpZXdpbmcgdGhlIGVmZmVjdHMgd2hlbiBjaGFuZ2luZyB0aGUgb3RoZXIgdW5pZm9ybSB2YWx1ZXMuPC9saT5cbiAgICogPC91bD5cbiAgICogPHA+XG4gICAqIDxjb2RlPmRlbHRhPC9jb2RlPiwgPGNvZGU+c2lnbWE8L2NvZGU+LCBhbmQgPGNvZGU+c3RlcFNpemU8L2NvZGU+IGFyZSB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHtAbGluayBQb3N0UHJvY2Vzc1N0YWdlTGlicmFyeSNjcmVhdGVCbHVyU3RhZ2V9LlxuICAgKiBUaGUgYmx1ciBpcyBhcHBsaWVkIHRvIHRoZSBzaGFkb3dzIGdlbmVyYXRlZCBmcm9tIHRoZSBpbWFnZSB0byBtYWtlIHRoZW0gc21vb3RoZXIuXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIFdoZW4gZW5hYmxlZCwgdGhpcyBzdGFnZSB3aWxsIGV4ZWN1dGUgYmVmb3JlIGFsbCBvdGhlcnMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlck9mIFBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7UG9zdFByb2Nlc3NTdGFnZUNvbXBvc2l0ZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBibG9vbToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Jsb29tO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHBvc3QtcHJvY2VzcyBzdGFnZXMgaW4gdGhpcyBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24ucHJvdG90eXBlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbGVuZ3RoOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVTdGFnZXModGhpcyk7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhZ2VzLmxlbmd0aDtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIGxhc3QgdGV4dHVyZSB3cml0dGVuIHRvIHdoZW4gZXhlY3V0aW5nIHRoZSBwb3N0LXByb2Nlc3Mgc3RhZ2VzIGluIHRoaXMgY29sbGVjdGlvbi5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7VGV4dHVyZX1cbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvdXRwdXRUZXh0dXJlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZnhhYSA9IHRoaXMuX2Z4YWE7XG4gICAgICBpZiAoZnhhYS5lbmFibGVkICYmIGZ4YWEucmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3V0cHV0VGV4dHVyZShmeGFhLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhZ2VzID0gdGhpcy5fc3RhZ2VzO1xuICAgICAgdmFyIGxlbmd0aCA9IHN0YWdlcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIHN0YWdlID0gc3RhZ2VzW2ldO1xuICAgICAgICBpZiAoZGVmaW5lZChzdGFnZSkgJiYgc3RhZ2UucmVhZHkgJiYgc3RhZ2UuZW5hYmxlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldE91dHB1dFRleHR1cmUoc3RhZ2UubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRvbmVtYXBwaW5nID0gdGhpcy5fdG9uZW1hcHBpbmc7XG4gICAgICBpZiAodG9uZW1hcHBpbmcuZW5hYmxlZCAmJiB0b25lbWFwcGluZy5yZWFkeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPdXRwdXRUZXh0dXJlKHRvbmVtYXBwaW5nLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmxvb20gPSB0aGlzLl9ibG9vbTtcbiAgICAgIGlmIChibG9vbS5lbmFibGVkICYmIGJsb29tLnJlYWR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE91dHB1dFRleHR1cmUoYmxvb20ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbyA9IHRoaXMuX2FvO1xuICAgICAgaWYgKGFvLmVuYWJsZWQgJiYgYW8ucmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3V0cHV0VGV4dHVyZShhby5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogV2hldGhlciB0aGUgY29sbGVjdGlvbiBoYXMgYSBzdGFnZSB0aGF0IGhhcyBzZWxlY3RlZCBmZWF0dXJlcy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXNTZWxlY3RlZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YWdlcyA9IGFycmF5U2xpY2UodGhpcy5fc3RhZ2VzKTtcbiAgICAgIHdoaWxlIChzdGFnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgc3RhZ2UgPSBzdGFnZXMucG9wKCk7XG4gICAgICAgIGlmICghZGVmaW5lZChzdGFnZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZChzdGFnZS5zZWxlY3RlZCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gc3RhZ2UubGVuZ3RoO1xuICAgICAgICBpZiAoZGVmaW5lZChsZW5ndGgpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgc3RhZ2VzLnB1c2goc3RhZ2UuZ2V0KGkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIGFuZCBzZXRzIHRoZSB0b25lbWFwcGluZyBhbGdvcml0aG0gdXNlZCB3aGVuIHJlbmRlcmluZyB3aXRoIGhpZ2ggZHluYW1pYyByYW5nZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7VG9uZW1hcHBlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRvbmVtYXBwZXI6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90b25lbWFwcGVyO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl90b25lbWFwcGVyID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKCFUb25lbWFwcGVyLnZhbGlkYXRlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJ0b25lbWFwcGVyIHdhcyBzZXQgdG8gYW4gaW52YWxpZCB2YWx1ZS5cIik7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgaWYgKGRlZmluZWQodGhpcy5fdG9uZW1hcHBpbmcpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zdGFnZU5hbWVzW3RoaXMuX3RvbmVtYXBwaW5nLm5hbWVdO1xuICAgICAgICB0aGlzLl90b25lbWFwcGluZy5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB1c2VBdXRvRXhwb3N1cmUgPSB0aGlzLl9hdXRvRXhwb3N1cmVFbmFibGVkO1xuICAgICAgdmFyIHRvbmVtYXBwZXI7XG5cbiAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSBUb25lbWFwcGVyLlJFSU5IQVJEOlxuICAgICAgICAgIHRvbmVtYXBwZXIgPSBQb3N0UHJvY2Vzc1N0YWdlTGlicmFyeS5jcmVhdGVSZWluaGFyZFRvbmVtYXBwaW5nU3RhZ2UoXG4gICAgICAgICAgICB1c2VBdXRvRXhwb3N1cmVcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRvbmVtYXBwZXIuTU9ESUZJRURfUkVJTkhBUkQ6XG4gICAgICAgICAgdG9uZW1hcHBlciA9IFBvc3RQcm9jZXNzU3RhZ2VMaWJyYXJ5LmNyZWF0ZU1vZGlmaWVkUmVpbmhhcmRUb25lbWFwcGluZ1N0YWdlKFxuICAgICAgICAgICAgdXNlQXV0b0V4cG9zdXJlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUb25lbWFwcGVyLkZJTE1JQzpcbiAgICAgICAgICB0b25lbWFwcGVyID0gUG9zdFByb2Nlc3NTdGFnZUxpYnJhcnkuY3JlYXRlRmlsbWljVG9uZW1hcHBpbmdTdGFnZShcbiAgICAgICAgICAgIHVzZUF1dG9FeHBvc3VyZVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdG9uZW1hcHBlciA9IFBvc3RQcm9jZXNzU3RhZ2VMaWJyYXJ5LmNyZWF0ZUFjZXNUb25lbWFwcGluZ1N0YWdlKFxuICAgICAgICAgICAgdXNlQXV0b0V4cG9zdXJlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZUF1dG9FeHBvc3VyZSkge1xuICAgICAgICB2YXIgYXV0b2V4cG9zdXJlID0gdGhpcy5fYXV0b0V4cG9zdXJlO1xuICAgICAgICB0b25lbWFwcGVyLnVuaWZvcm1zLmF1dG9FeHBvc3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gYXV0b2V4cG9zdXJlLm91dHB1dFRleHR1cmU7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RvbmVtYXBwZXIgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX3RvbmVtYXBwaW5nID0gdG9uZW1hcHBlcjtcblxuICAgICAgaWYgKGRlZmluZWQodGhpcy5fc3RhZ2VOYW1lcykpIHtcbiAgICAgICAgdGhpcy5fc3RhZ2VOYW1lc1t0b25lbWFwcGVyLm5hbWVdID0gdG9uZW1hcHBlcjtcbiAgICAgICAgdG9uZW1hcHBlci5fdGV4dHVyZUNhY2hlID0gdGhpcy5fdGV4dHVyZUNhY2hlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl90ZXh0dXJlQ2FjaGVEaXJ0eSA9IHRydWU7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiByZW1vdmVTdGFnZXMoY29sbGVjdGlvbikge1xuICBpZiAoIWNvbGxlY3Rpb24uX3N0YWdlc1JlbW92ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb2xsZWN0aW9uLl9zdGFnZXNSZW1vdmVkID0gZmFsc2U7XG5cbiAgdmFyIG5ld1N0YWdlcyA9IFtdO1xuICB2YXIgc3RhZ2VzID0gY29sbGVjdGlvbi5fc3RhZ2VzO1xuICB2YXIgbGVuZ3RoID0gc3RhZ2VzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgc3RhZ2UgPSBzdGFnZXNbaV07XG4gICAgaWYgKHN0YWdlKSB7XG4gICAgICBzdGFnZS5faW5kZXggPSBqKys7XG4gICAgICBuZXdTdGFnZXMucHVzaChzdGFnZSk7XG4gICAgfVxuICB9XG5cbiAgY29sbGVjdGlvbi5fc3RhZ2VzID0gbmV3U3RhZ2VzO1xufVxuXG4vKipcbiAqIEFkZHMgdGhlIHBvc3QtcHJvY2VzcyBzdGFnZSB0byB0aGUgY29sbGVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1Bvc3RQcm9jZXNzU3RhZ2V8UG9zdFByb2Nlc3NTdGFnZUNvbXBvc2l0ZX0gc3RhZ2UgVGhlIHBvc3QtcHJvY2VzcyBzdGFnZSB0byBhZGQgdG8gdGhlIGNvbGxlY3Rpb24uXG4gKiBAcmV0dXJuIHtQb3N0UHJvY2Vzc1N0YWdlfFBvc3RQcm9jZXNzU3RhZ2VDb21wb3NpdGV9IFRoZSBwb3N0LXByb2Nlc3Mgc3RhZ2UgdGhhdCB3YXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24uXG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoZSBwb3N0LXByb2Nlc3Mgc3RhZ2UgaGFzIGFscmVhZHkgYmVlbiBhZGRlZCB0byB0aGUgY29sbGVjdGlvbiBvciBkb2VzIG5vdCBoYXZlIGEgdW5pcXVlIG5hbWUuXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoc3RhZ2UpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgQ2hlY2sudHlwZU9mLm9iamVjdChcInN0YWdlXCIsIHN0YWdlKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIHN0YWdlTmFtZXMgPSB0aGlzLl9zdGFnZU5hbWVzO1xuXG4gIHZhciBzdGFjayA9IHN0YWNrU2NyYXRjaDtcbiAgc3RhY2sucHVzaChzdGFnZSk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGN1cnJlbnRTdGFnZSA9IHN0YWNrLnBvcCgpO1xuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgaWYgKGRlZmluZWQoc3RhZ2VOYW1lc1tjdXJyZW50U3RhZ2UubmFtZV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgIGN1cnJlbnRTdGFnZS5uYW1lICtcbiAgICAgICAgICBcIiBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uIG9yIGRvZXMgbm90IGhhdmUgYSB1bmlxdWUgbmFtZS5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgc3RhZ2VOYW1lc1tjdXJyZW50U3RhZ2UubmFtZV0gPSBjdXJyZW50U3RhZ2U7XG4gICAgY3VycmVudFN0YWdlLl90ZXh0dXJlQ2FjaGUgPSB0aGlzLl90ZXh0dXJlQ2FjaGU7XG5cbiAgICB2YXIgbGVuZ3RoID0gY3VycmVudFN0YWdlLmxlbmd0aDtcbiAgICBpZiAoZGVmaW5lZChsZW5ndGgpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHN0YWNrLnB1c2goY3VycmVudFN0YWdlLmdldChpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0YWdlcyA9IHRoaXMuX3N0YWdlcztcbiAgc3RhZ2UuX2luZGV4ID0gc3RhZ2VzLmxlbmd0aDtcbiAgc3RhZ2VzLnB1c2goc3RhZ2UpO1xuICB0aGlzLl90ZXh0dXJlQ2FjaGVEaXJ0eSA9IHRydWU7XG4gIHJldHVybiBzdGFnZTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHBvc3QtcHJvY2VzcyBzdGFnZSBmcm9tIHRoZSBjb2xsZWN0aW9uIGFuZCBkZXN0cm95cyBpdC5cbiAqXG4gKiBAcGFyYW0ge1Bvc3RQcm9jZXNzU3RhZ2V8UG9zdFByb2Nlc3NTdGFnZUNvbXBvc2l0ZX0gc3RhZ2UgVGhlIHBvc3QtcHJvY2VzcyBzdGFnZSB0byByZW1vdmUgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IFdoZXRoZXIgdGhlIHBvc3QtcHJvY2VzcyBzdGFnZSB3YXMgcmVtb3ZlZC5cbiAqL1xuUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdGFnZSkge1xuICBpZiAoIXRoaXMuY29udGFpbnMoc3RhZ2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN0YWdlTmFtZXMgPSB0aGlzLl9zdGFnZU5hbWVzO1xuXG4gIHZhciBzdGFjayA9IHN0YWNrU2NyYXRjaDtcbiAgc3RhY2sucHVzaChzdGFnZSk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGN1cnJlbnRTdGFnZSA9IHN0YWNrLnBvcCgpO1xuICAgIGRlbGV0ZSBzdGFnZU5hbWVzW2N1cnJlbnRTdGFnZS5uYW1lXTtcblxuICAgIHZhciBsZW5ndGggPSBjdXJyZW50U3RhZ2UubGVuZ3RoO1xuICAgIGlmIChkZWZpbmVkKGxlbmd0aCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc3RhY2sucHVzaChjdXJyZW50U3RhZ2UuZ2V0KGkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9zdGFnZXNbc3RhZ2UuX2luZGV4XSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc3RhZ2VzUmVtb3ZlZCA9IHRydWU7XG4gIHRoaXMuX3RleHR1cmVDYWNoZURpcnR5ID0gdHJ1ZTtcbiAgc3RhZ2UuX2luZGV4ID0gdW5kZWZpbmVkO1xuICBzdGFnZS5fdGV4dHVyZUNhY2hlID0gdW5kZWZpbmVkO1xuICBzdGFnZS5kZXN0cm95KCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGNvbGxlY3Rpb24gY29udGFpbnMgYSBwb3N0LXByb2Nlc3Mgc3RhZ2UuXG4gKlxuICogQHBhcmFtIHtQb3N0UHJvY2Vzc1N0YWdlfFBvc3RQcm9jZXNzU3RhZ2VDb21wb3NpdGV9IHN0YWdlIFRoZSBwb3N0LXByb2Nlc3Mgc3RhZ2UuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIHRoZSBjb2xsZWN0aW9uIGNvbnRhaW5zIHRoZSBwb3N0LXByb2Nlc3Mgc3RhZ2UuXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChzdGFnZSkge1xuICByZXR1cm4gKFxuICAgIGRlZmluZWQoc3RhZ2UpICYmXG4gICAgZGVmaW5lZChzdGFnZS5faW5kZXgpICYmXG4gICAgc3RhZ2UuX3RleHR1cmVDYWNoZSA9PT0gdGhpcy5fdGV4dHVyZUNhY2hlXG4gICk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIHBvc3QtcHJvY2VzcyBzdGFnZSBhdCA8Y29kZT5pbmRleDwvY29kZT4uXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgcG9zdC1wcm9jZXNzIHN0YWdlLlxuICogQHJldHVybiB7UG9zdFByb2Nlc3NTdGFnZXxQb3N0UHJvY2Vzc1N0YWdlQ29tcG9zaXRlfSBUaGUgcG9zdC1wcm9jZXNzIHN0YWdlIGF0IGluZGV4LlxuICovXG5Qb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gIHJlbW92ZVN0YWdlcyh0aGlzKTtcbiAgdmFyIHN0YWdlcyA9IHRoaXMuX3N0YWdlcztcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgdmFyIGxlbmd0aCA9IHN0YWdlcy5sZW5ndGg7XG4gIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscyhcInN0YWdlcyBsZW5ndGhcIiwgbGVuZ3RoLCAwKTtcbiAgQ2hlY2sudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKFwiaW5kZXhcIiwgaW5kZXgsIDApO1xuICBDaGVjay50eXBlT2YubnVtYmVyLmxlc3NUaGFuKFwiaW5kZXhcIiwgaW5kZXgsIGxlbmd0aCk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuICByZXR1cm4gc3RhZ2VzW2luZGV4XTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgcG9zdC1wcm9jZXNzIHN0YWdlcyBmcm9tIHRoZSBjb2xsZWN0aW9uIGFuZCBkZXN0cm95cyB0aGVtLlxuICovXG5Qb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVtb3ZlQWxsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhZ2VzID0gdGhpcy5fc3RhZ2VzO1xuICB2YXIgbGVuZ3RoID0gc3RhZ2VzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHRoaXMucmVtb3ZlKHN0YWdlc1tpXSk7XG4gIH1cbiAgc3RhZ2VzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIEdldHMgYSBwb3N0LXByb2Nlc3Mgc3RhZ2UgaW4gdGhlIGNvbGxlY3Rpb24gYnkgaXRzIG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHBvc3QtcHJvY2VzcyBzdGFnZS5cbiAqIEByZXR1cm4ge1Bvc3RQcm9jZXNzU3RhZ2V8UG9zdFByb2Nlc3NTdGFnZUNvbXBvc2l0ZX0gVGhlIHBvc3QtcHJvY2VzcyBzdGFnZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5Qb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhZ2VCeU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gdGhpcy5fc3RhZ2VOYW1lc1tuYW1lXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIGJlZm9yZSB0aGUgcG9zdC1wcm9jZXNzIHN0YWdlcyBpbiB0aGUgY29sbGVjdGlvbiBhcmUgZXhlY3V0ZWQuIENhbGxzIHVwZGF0ZSBmb3IgZWFjaCBzdGFnZSBhbmQgY3JlYXRlcyBXZWJHTCByZXNvdXJjZXMuXG4gKlxuICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IFRoZSBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSB1c2VMb2dEZXB0aCBXaGV0aGVyIHRoZSBzY2VuZSB1c2VzIGEgbG9nYXJpdGhtaWMgZGVwdGggYnVmZmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoXG4gIGNvbnRleHQsXG4gIHVzZUxvZ0RlcHRoLFxuICB1c2VIZHJcbikge1xuICByZW1vdmVTdGFnZXModGhpcyk7XG5cbiAgdmFyIHByZXZpb3VzQWN0aXZlU3RhZ2VzID0gdGhpcy5fYWN0aXZlU3RhZ2VzO1xuICB2YXIgYWN0aXZlU3RhZ2VzID0gKHRoaXMuX2FjdGl2ZVN0YWdlcyA9IHRoaXMuX3ByZXZpb3VzQWN0aXZlU3RhZ2VzKTtcbiAgdGhpcy5fcHJldmlvdXNBY3RpdmVTdGFnZXMgPSBwcmV2aW91c0FjdGl2ZVN0YWdlcztcblxuICB2YXIgc3RhZ2VzID0gdGhpcy5fc3RhZ2VzO1xuICB2YXIgbGVuZ3RoID0gKGFjdGl2ZVN0YWdlcy5sZW5ndGggPSBzdGFnZXMubGVuZ3RoKTtcblxuICB2YXIgaTtcbiAgdmFyIHN0YWdlO1xuICB2YXIgY291bnQgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBzdGFnZSA9IHN0YWdlc1tpXTtcbiAgICBpZiAoc3RhZ2UucmVhZHkgJiYgc3RhZ2UuZW5hYmxlZCAmJiBzdGFnZS5faXNTdXBwb3J0ZWQoY29udGV4dCkpIHtcbiAgICAgIGFjdGl2ZVN0YWdlc1tjb3VudCsrXSA9IHN0YWdlO1xuICAgIH1cbiAgfVxuXG4gIGFjdGl2ZVN0YWdlcy5sZW5ndGggPSBjb3VudDtcblxuICB2YXIgYWN0aXZlU3RhZ2VzQ2hhbmdlZCA9IGNvdW50ICE9PSBwcmV2aW91c0FjdGl2ZVN0YWdlcy5sZW5ndGg7XG4gIGlmICghYWN0aXZlU3RhZ2VzQ2hhbmdlZCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICBpZiAoYWN0aXZlU3RhZ2VzW2ldICE9PSBwcmV2aW91c0FjdGl2ZVN0YWdlc1tpXSkge1xuICAgICAgICBhY3RpdmVTdGFnZXNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGFvID0gdGhpcy5fYW87XG4gIHZhciBibG9vbSA9IHRoaXMuX2Jsb29tO1xuICB2YXIgYXV0b2V4cG9zdXJlID0gdGhpcy5fYXV0b0V4cG9zdXJlO1xuICB2YXIgdG9uZW1hcHBpbmcgPSB0aGlzLl90b25lbWFwcGluZztcbiAgdmFyIGZ4YWEgPSB0aGlzLl9meGFhO1xuXG4gIHRvbmVtYXBwaW5nLmVuYWJsZWQgPSB1c2VIZHI7XG5cbiAgdmFyIGFvRW5hYmxlZCA9IGFvLmVuYWJsZWQgJiYgYW8uX2lzU3VwcG9ydGVkKGNvbnRleHQpO1xuICB2YXIgYmxvb21FbmFibGVkID0gYmxvb20uZW5hYmxlZCAmJiBibG9vbS5faXNTdXBwb3J0ZWQoY29udGV4dCk7XG4gIHZhciB0b25lbWFwcGluZ0VuYWJsZWQgPVxuICAgIHRvbmVtYXBwaW5nLmVuYWJsZWQgJiYgdG9uZW1hcHBpbmcuX2lzU3VwcG9ydGVkKGNvbnRleHQpO1xuICB2YXIgZnhhYUVuYWJsZWQgPSBmeGFhLmVuYWJsZWQgJiYgZnhhYS5faXNTdXBwb3J0ZWQoY29udGV4dCk7XG5cbiAgaWYgKFxuICAgIGFjdGl2ZVN0YWdlc0NoYW5nZWQgfHxcbiAgICB0aGlzLl90ZXh0dXJlQ2FjaGVEaXJ0eSB8fFxuICAgIGFvRW5hYmxlZCAhPT0gdGhpcy5fYW9FbmFibGVkIHx8XG4gICAgYmxvb21FbmFibGVkICE9PSB0aGlzLl9ibG9vbUVuYWJsZWQgfHxcbiAgICB0b25lbWFwcGluZ0VuYWJsZWQgIT09IHRoaXMuX3RvbmVtYXBwaW5nRW5hYmxlZCB8fFxuICAgIGZ4YWFFbmFibGVkICE9PSB0aGlzLl9meGFhRW5hYmxlZFxuICApIHtcbiAgICAvLyBUaGUgbnVtYmVyIG9mIHN0YWdlcyB0byBleGVjdXRlIGhhcyBjaGFuZ2VkLlxuICAgIC8vIFVwZGF0ZSBkZXBlbmRlbmNpZXMgYW5kIHJlY3JlYXRlIGZyYW1lYnVmZmVycy5cbiAgICB0aGlzLl90ZXh0dXJlQ2FjaGUudXBkYXRlRGVwZW5kZW5jaWVzKCk7XG5cbiAgICB0aGlzLl9hb0VuYWJsZWQgPSBhb0VuYWJsZWQ7XG4gICAgdGhpcy5fYmxvb21FbmFibGVkID0gYmxvb21FbmFibGVkO1xuICAgIHRoaXMuX3RvbmVtYXBwaW5nRW5hYmxlZCA9IHRvbmVtYXBwaW5nRW5hYmxlZDtcbiAgICB0aGlzLl9meGFhRW5hYmxlZCA9IGZ4YWFFbmFibGVkO1xuICAgIHRoaXMuX3RleHR1cmVDYWNoZURpcnR5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoZGVmaW5lZCh0aGlzLl9yYW5kb21UZXh0dXJlKSAmJiAhYW9FbmFibGVkKSB7XG4gICAgdGhpcy5fcmFuZG9tVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgdGhpcy5fcmFuZG9tVGV4dHVyZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghZGVmaW5lZCh0aGlzLl9yYW5kb21UZXh0dXJlKSAmJiBhb0VuYWJsZWQpIHtcbiAgICBsZW5ndGggPSAyNTYgKiAyNTYgKiAzO1xuICAgIHZhciByYW5kb20gPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuICAgICAgcmFuZG9tW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU1LjApO1xuICAgIH1cblxuICAgIHRoaXMuX3JhbmRvbVRleHR1cmUgPSBuZXcgVGV4dHVyZSh7XG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgcGl4ZWxGb3JtYXQ6IFBpeGVsRm9ybWF0LlJHQixcbiAgICAgIHBpeGVsRGF0YXR5cGU6IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfQllURSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICBhcnJheUJ1ZmZlclZpZXc6IHJhbmRvbSxcbiAgICAgICAgd2lkdGg6IDI1NixcbiAgICAgICAgaGVpZ2h0OiAyNTYsXG4gICAgICB9LFxuICAgICAgc2FtcGxlcjogbmV3IFNhbXBsZXIoe1xuICAgICAgICB3cmFwUzogVGV4dHVyZVdyYXAuUkVQRUFULFxuICAgICAgICB3cmFwVDogVGV4dHVyZVdyYXAuUkVQRUFULFxuICAgICAgICBtaW5pZmljYXRpb25GaWx0ZXI6IFRleHR1cmVNaW5pZmljYXRpb25GaWx0ZXIuTkVBUkVTVCxcbiAgICAgICAgbWFnbmlmaWNhdGlvbkZpbHRlcjogVGV4dHVyZU1hZ25pZmljYXRpb25GaWx0ZXIuTkVBUkVTVCxcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5fdGV4dHVyZUNhY2hlLnVwZGF0ZShjb250ZXh0KTtcblxuICBmeGFhLnVwZGF0ZShjb250ZXh0LCB1c2VMb2dEZXB0aCk7XG4gIGFvLnVwZGF0ZShjb250ZXh0LCB1c2VMb2dEZXB0aCk7XG4gIGJsb29tLnVwZGF0ZShjb250ZXh0LCB1c2VMb2dEZXB0aCk7XG4gIHRvbmVtYXBwaW5nLnVwZGF0ZShjb250ZXh0LCB1c2VMb2dEZXB0aCk7XG5cbiAgaWYgKHRoaXMuX2F1dG9FeHBvc3VyZUVuYWJsZWQpIHtcbiAgICBhdXRvZXhwb3N1cmUudXBkYXRlKGNvbnRleHQsIHVzZUxvZ0RlcHRoKTtcbiAgfVxuXG4gIGxlbmd0aCA9IHN0YWdlcy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHN0YWdlc1tpXS51cGRhdGUoY29udGV4dCwgdXNlTG9nRGVwdGgpO1xuICB9XG5cbiAgY291bnQgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBzdGFnZSA9IHN0YWdlc1tpXTtcbiAgICBpZiAoc3RhZ2UucmVhZHkgJiYgc3RhZ2UuZW5hYmxlZCAmJiBzdGFnZS5faXNTdXBwb3J0ZWQoY29udGV4dCkpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG5cbiAgYWN0aXZlU3RhZ2VzQ2hhbmdlZCA9IGNvdW50ICE9PSBhY3RpdmVTdGFnZXMubGVuZ3RoO1xuICBpZiAoYWN0aXZlU3RhZ2VzQ2hhbmdlZCkge1xuICAgIHRoaXMudXBkYXRlKGNvbnRleHQsIHVzZUxvZ0RlcHRoLCB1c2VIZHIpO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFycyBhbGwgb2YgdGhlIGZyYW1lYnVmZmVycyB1c2VkIGJ5IHRoZSBzdGFnZXMuXG4gKlxuICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IFRoZSBjb250ZXh0LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHRoaXMuX3RleHR1cmVDYWNoZS5jbGVhcihjb250ZXh0KTtcblxuICBpZiAodGhpcy5fYXV0b0V4cG9zdXJlRW5hYmxlZCkge1xuICAgIHRoaXMuX2F1dG9FeHBvc3VyZS5jbGVhcihjb250ZXh0KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0T3V0cHV0VGV4dHVyZShzdGFnZSkge1xuICB3aGlsZSAoZGVmaW5lZChzdGFnZS5sZW5ndGgpKSB7XG4gICAgc3RhZ2UgPSBzdGFnZS5nZXQoc3RhZ2UubGVuZ3RoIC0gMSk7XG4gIH1cbiAgcmV0dXJuIHN0YWdlLm91dHB1dFRleHR1cmU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgb3V0cHV0IHRleHR1cmUgb2YgYSBzdGFnZSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGFnZU5hbWUgVGhlIG5hbWUgb2YgdGhlIHN0YWdlLlxuICogQHJldHVybiB7VGV4dHVyZXx1bmRlZmluZWR9IFRoZSB0ZXh0dXJlIHJlbmRlcmVkIHRvIGJ5IHRoZSBzdGFnZSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRPdXRwdXRUZXh0dXJlID0gZnVuY3Rpb24gKHN0YWdlTmFtZSkge1xuICB2YXIgc3RhZ2UgPSB0aGlzLmdldFN0YWdlQnlOYW1lKHN0YWdlTmFtZSk7XG4gIGlmICghZGVmaW5lZChzdGFnZSkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBnZXRPdXRwdXRUZXh0dXJlKHN0YWdlKTtcbn07XG5cbmZ1bmN0aW9uIGV4ZWN1dGUoc3RhZ2UsIGNvbnRleHQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlLCBpZFRleHR1cmUpIHtcbiAgaWYgKGRlZmluZWQoc3RhZ2UuZXhlY3V0ZSkpIHtcbiAgICBzdGFnZS5leGVjdXRlKGNvbnRleHQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlLCBpZFRleHR1cmUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBzdGFnZS5sZW5ndGg7XG4gIHZhciBpO1xuXG4gIGlmIChzdGFnZS5pbnB1dFByZXZpb3VzU3RhZ2VUZXh0dXJlKSB7XG4gICAgZXhlY3V0ZShzdGFnZS5nZXQoMCksIGNvbnRleHQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlLCBpZFRleHR1cmUpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgZXhlY3V0ZShcbiAgICAgICAgc3RhZ2UuZ2V0KGkpLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBnZXRPdXRwdXRUZXh0dXJlKHN0YWdlLmdldChpIC0gMSkpLFxuICAgICAgICBkZXB0aFRleHR1cmUsXG4gICAgICAgIGlkVGV4dHVyZVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBleGVjdXRlKHN0YWdlLmdldChpKSwgY29udGV4dCwgY29sb3JUZXh0dXJlLCBkZXB0aFRleHR1cmUsIGlkVGV4dHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgYWxsIHJlYWR5IGFuZCBlbmFibGVkIHN0YWdlcyBpbiB0aGUgY29sbGVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgVGhlIGNvbnRleHQuXG4gKiBAcGFyYW0ge1RleHR1cmV9IGNvbG9yVGV4dHVyZSBUaGUgY29sb3IgdGV4dHVyZSByZW5kZXJlZCB0byBieSB0aGUgc2NlbmUuXG4gKiBAcGFyYW0ge1RleHR1cmV9IGRlcHRoVGV4dHVyZSBUaGUgZGVwdGggdGV4dHVyZSB3cml0dGVuIHRvIGJ5IHRoZSBzY2VuZS5cbiAqIEBwYXJhbSB7VGV4dHVyZX0gaWRUZXh0dXJlIFRoZSBpZCB0ZXh0dXJlIHdyaXR0ZW4gdG8gYnkgdGhlIHNjZW5lLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKFxuICBjb250ZXh0LFxuICBjb2xvclRleHR1cmUsXG4gIGRlcHRoVGV4dHVyZSxcbiAgaWRUZXh0dXJlXG4pIHtcbiAgdmFyIGFjdGl2ZVN0YWdlcyA9IHRoaXMuX2FjdGl2ZVN0YWdlcztcbiAgdmFyIGxlbmd0aCA9IGFjdGl2ZVN0YWdlcy5sZW5ndGg7XG4gIHZhciBmeGFhID0gdGhpcy5fZnhhYTtcbiAgdmFyIGFvID0gdGhpcy5fYW87XG4gIHZhciBibG9vbSA9IHRoaXMuX2Jsb29tO1xuICB2YXIgYXV0b2V4cG9zdXJlID0gdGhpcy5fYXV0b0V4cG9zdXJlO1xuICB2YXIgdG9uZW1hcHBpbmcgPSB0aGlzLl90b25lbWFwcGluZztcblxuICB2YXIgYW9FbmFibGVkID0gYW8uZW5hYmxlZCAmJiBhby5faXNTdXBwb3J0ZWQoY29udGV4dCk7XG4gIHZhciBibG9vbUVuYWJsZWQgPSBibG9vbS5lbmFibGVkICYmIGJsb29tLl9pc1N1cHBvcnRlZChjb250ZXh0KTtcbiAgdmFyIGF1dG9FeHBvc3VyZUVuYWJsZWQgPSB0aGlzLl9hdXRvRXhwb3N1cmVFbmFibGVkO1xuICB2YXIgdG9uZW1hcHBpbmdFbmFibGVkID1cbiAgICB0b25lbWFwcGluZy5lbmFibGVkICYmIHRvbmVtYXBwaW5nLl9pc1N1cHBvcnRlZChjb250ZXh0KTtcbiAgdmFyIGZ4YWFFbmFibGVkID0gZnhhYS5lbmFibGVkICYmIGZ4YWEuX2lzU3VwcG9ydGVkKGNvbnRleHQpO1xuXG4gIGlmIChcbiAgICAhZnhhYUVuYWJsZWQgJiZcbiAgICAhYW9FbmFibGVkICYmXG4gICAgIWJsb29tRW5hYmxlZCAmJlxuICAgICF0b25lbWFwcGluZ0VuYWJsZWQgJiZcbiAgICBsZW5ndGggPT09IDBcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluaXRpYWxUZXh0dXJlID0gY29sb3JUZXh0dXJlO1xuICBpZiAoYW9FbmFibGVkICYmIGFvLnJlYWR5KSB7XG4gICAgZXhlY3V0ZShhbywgY29udGV4dCwgaW5pdGlhbFRleHR1cmUsIGRlcHRoVGV4dHVyZSwgaWRUZXh0dXJlKTtcbiAgICBpbml0aWFsVGV4dHVyZSA9IGdldE91dHB1dFRleHR1cmUoYW8pO1xuICB9XG4gIGlmIChibG9vbUVuYWJsZWQgJiYgYmxvb20ucmVhZHkpIHtcbiAgICBleGVjdXRlKGJsb29tLCBjb250ZXh0LCBpbml0aWFsVGV4dHVyZSwgZGVwdGhUZXh0dXJlLCBpZFRleHR1cmUpO1xuICAgIGluaXRpYWxUZXh0dXJlID0gZ2V0T3V0cHV0VGV4dHVyZShibG9vbSk7XG4gIH1cbiAgaWYgKGF1dG9FeHBvc3VyZUVuYWJsZWQgJiYgYXV0b2V4cG9zdXJlLnJlYWR5KSB7XG4gICAgZXhlY3V0ZShhdXRvZXhwb3N1cmUsIGNvbnRleHQsIGluaXRpYWxUZXh0dXJlLCBkZXB0aFRleHR1cmUsIGlkVGV4dHVyZSk7XG4gIH1cbiAgaWYgKHRvbmVtYXBwaW5nRW5hYmxlZCAmJiB0b25lbWFwcGluZy5yZWFkeSkge1xuICAgIGV4ZWN1dGUodG9uZW1hcHBpbmcsIGNvbnRleHQsIGluaXRpYWxUZXh0dXJlLCBkZXB0aFRleHR1cmUsIGlkVGV4dHVyZSk7XG4gICAgaW5pdGlhbFRleHR1cmUgPSBnZXRPdXRwdXRUZXh0dXJlKHRvbmVtYXBwaW5nKTtcbiAgfVxuXG4gIHZhciBsYXN0VGV4dHVyZSA9IGluaXRpYWxUZXh0dXJlO1xuXG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgZXhlY3V0ZShhY3RpdmVTdGFnZXNbMF0sIGNvbnRleHQsIGluaXRpYWxUZXh0dXJlLCBkZXB0aFRleHR1cmUsIGlkVGV4dHVyZSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgZXhlY3V0ZShcbiAgICAgICAgYWN0aXZlU3RhZ2VzW2ldLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBnZXRPdXRwdXRUZXh0dXJlKGFjdGl2ZVN0YWdlc1tpIC0gMV0pLFxuICAgICAgICBkZXB0aFRleHR1cmUsXG4gICAgICAgIGlkVGV4dHVyZVxuICAgICAgKTtcbiAgICB9XG4gICAgbGFzdFRleHR1cmUgPSBnZXRPdXRwdXRUZXh0dXJlKGFjdGl2ZVN0YWdlc1tsZW5ndGggLSAxXSk7XG4gIH1cblxuICBpZiAoZnhhYUVuYWJsZWQgJiYgZnhhYS5yZWFkeSkge1xuICAgIGV4ZWN1dGUoZnhhYSwgY29udGV4dCwgbGFzdFRleHR1cmUsIGRlcHRoVGV4dHVyZSwgaWRUZXh0dXJlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb3BpZXMgdGhlIG91dHB1dCBvZiBhbGwgZXhlY3V0ZWQgc3RhZ2VzIHRvIHRoZSBjb2xvciB0ZXh0dXJlIG9mIGEgZnJhbWVidWZmZXIuXG4gKlxuICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IFRoZSBjb250ZXh0LlxuICogQHBhcmFtIHtGcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXIgVGhlIGZyYW1lYnVmZmVyIHRvIGNvcHkgdG8uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoY29udGV4dCwgZnJhbWVidWZmZXIpIHtcbiAgaWYgKCFkZWZpbmVkKHRoaXMuX2NvcHlDb2xvckNvbW1hbmQpKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuX2NvcHlDb2xvckNvbW1hbmQgPSBjb250ZXh0LmNyZWF0ZVZpZXdwb3J0UXVhZENvbW1hbmQoUGFzc1Rocm91Z2gsIHtcbiAgICAgIHVuaWZvcm1NYXA6IHtcbiAgICAgICAgY29sb3JUZXh0dXJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQub3V0cHV0VGV4dHVyZTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBvd25lcjogdGhpcyxcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuX2NvcHlDb2xvckNvbW1hbmQuZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlcjtcbiAgdGhpcy5fY29weUNvbG9yQ29tbWFuZC5leGVjdXRlKGNvbnRleHQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZDsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIDxwPlxuICogSWYgdGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZCwgaXQgc2hvdWxkIG5vdCBiZSB1c2VkOyBjYWxsaW5nIGFueSBmdW5jdGlvbiBvdGhlciB0aGFuXG4gKiA8Y29kZT5pc0Rlc3Ryb3llZDwvY29kZT4gd2lsbCByZXN1bHQgaW4gYSB7QGxpbmsgRGV2ZWxvcGVyRXJyb3J9IGV4Y2VwdGlvbi5cbiAqIDwvcD5cbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZDsgb3RoZXJ3aXNlLCA8Y29kZT5mYWxzZTwvY29kZT4uXG4gKlxuICogQHNlZSBQb3N0UHJvY2Vzc1N0YWdlQ29sbGVjdGlvbiNkZXN0cm95XG4gKi9cblBvc3RQcm9jZXNzU3RhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZS5pc0Rlc3Ryb3llZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgV2ViR0wgcmVzb3VyY2VzIGhlbGQgYnkgdGhpcyBvYmplY3QuICBEZXN0cm95aW5nIGFuIG9iamVjdCBhbGxvd3MgZm9yIGRldGVybWluaXN0aWNcbiAqIHJlbGVhc2Ugb2YgV2ViR0wgcmVzb3VyY2VzLCBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvIGRlc3Ryb3kgdGhpcyBvYmplY3QuXG4gKiA8cD5cbiAqIE9uY2UgYW4gb2JqZWN0IGlzIGRlc3Ryb3llZCwgaXQgc2hvdWxkIG5vdCBiZSB1c2VkOyBjYWxsaW5nIGFueSBmdW5jdGlvbiBvdGhlciB0aGFuXG4gKiA8Y29kZT5pc0Rlc3Ryb3llZDwvY29kZT4gd2lsbCByZXN1bHQgaW4gYSB7QGxpbmsgRGV2ZWxvcGVyRXJyb3J9IGV4Y2VwdGlvbi4gIFRoZXJlZm9yZSxcbiAqIGFzc2lnbiB0aGUgcmV0dXJuIHZhbHVlICg8Y29kZT51bmRlZmluZWQ8L2NvZGU+KSB0byB0aGUgb2JqZWN0IGFzIGRvbmUgaW4gdGhlIGV4YW1wbGUuXG4gKiA8L3A+XG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQsIGkuZS4sIGRlc3Ryb3koKSB3YXMgY2FsbGVkLlxuICpcbiAqIEBzZWUgUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24jaXNEZXN0cm95ZWRcbiAqL1xuUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2Z4YWEuZGVzdHJveSgpO1xuICB0aGlzLl9hby5kZXN0cm95KCk7XG4gIHRoaXMuX2Jsb29tLmRlc3Ryb3koKTtcbiAgdGhpcy5fYXV0b0V4cG9zdXJlLmRlc3Ryb3koKTtcbiAgdGhpcy5fdG9uZW1hcHBpbmcuZGVzdHJveSgpO1xuICB0aGlzLnJlbW92ZUFsbCgpO1xuICB0aGlzLl90ZXh0dXJlQ2FjaGUgPSB0aGlzLl90ZXh0dXJlQ2FjaGUgJiYgdGhpcy5fdGV4dHVyZUNhY2hlLmRlc3Ryb3koKTtcbiAgcmV0dXJuIGRlc3Ryb3lPYmplY3QodGhpcyk7XG59O1xuZXhwb3J0IGRlZmF1bHQgUG9zdFByb2Nlc3NTdGFnZUNvbGxlY3Rpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13638\n')},53798:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39960);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n\n\n\n\n\n\n/**\n * A collection of {@link PostProcessStage}s or other post-process composite stages that execute together logically.\n * <p>\n * All stages are executed in the order of the array. The input texture changes based on the value of <code>inputPreviousStageTexture</code>.\n * If <code>inputPreviousStageTexture</code> is <code>true</code>, the input to each stage is the output texture rendered to by the scene or of the stage that executed before it.\n * If <code>inputPreviousStageTexture</code> is <code>false</code>, the input texture is the same for each stage in the composite. The input texture is the texture rendered to by the scene\n * or the output texture of the previous stage.\n * </p>\n *\n * @alias PostProcessStageComposite\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Array} options.stages An array of {@link PostProcessStage}s or composites to be executed in order.\n * @param {Boolean} [options.inputPreviousStageTexture=true] Whether to execute each post-process stage where the input to one stage is the output of the previous. Otherwise, the input to each contained stage is the output of the stage that executed before the composite.\n * @param {String} [options.name=createGuid()] The unique name of this post-process stage for reference by other composites. If a name is not supplied, a GUID will be generated.\n * @param {Object} [options.uniforms] An alias to the uniforms of post-process stages.\n *\n * @exception {DeveloperError} options.stages.length must be greater than 0.0.\n *\n * @see PostProcessStage\n *\n * @example\n * // Example 1: separable blur filter\n * // The input to blurXDirection is the texture rendered to by the scene or the output of the previous stage.\n * // The input to blurYDirection is the texture rendered to by blurXDirection.\n * scene.postProcessStages.add(new Cesium.PostProcessStageComposite({\n *     stages : [blurXDirection, blurYDirection]\n * }));\n *\n * @example\n * // Example 2: referencing the output of another post-process stage\n * scene.postProcessStages.add(new Cesium.PostProcessStageComposite({\n *     inputPreviousStageTexture : false,\n *     stages : [\n *         // The same as Example 1.\n *         new Cesium.PostProcessStageComposite({\n *             inputPreviousStageTexture : true\n *             stages : [blurXDirection, blurYDirection],\n *             name : \'blur\'\n *         }),\n *         // The input texture for this stage is the same input texture to blurXDirection since inputPreviousStageTexture is false\n *         new Cesium.PostProcessStage({\n *             fragmentShader : compositeShader,\n *             uniforms : {\n *                 blurTexture : \'blur\' // The output of the composite with name \'blur\' (the texture that blurYDirection rendered to).\n *             }\n *         })\n *     ]\n * });\n *\n * @example\n * // Example 3: create a uniform alias\n * var uniforms = {};\n * Cesium.defineProperties(uniforms, {\n *     filterSize : {\n *         get : function() {\n *             return blurXDirection.uniforms.filterSize;\n *         },\n *         set : function(value) {\n *             blurXDirection.uniforms.filterSize = blurYDirection.uniforms.filterSize = value;\n *         }\n *     }\n * });\n * scene.postProcessStages.add(new Cesium.PostProcessStageComposite({\n *     stages : [blurXDirection, blurYDirection],\n *     uniforms : uniforms\n * }));\n */\nfunction PostProcessStageComposite(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.stages", options.stages);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan(\n    "options.stages.length",\n    options.stages.length,\n    0\n  );\n  //>>includeEnd(\'debug\');\n\n  this._stages = options.stages;\n  this._inputPreviousStageTexture = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    options.inputPreviousStageTexture,\n    true\n  );\n\n  var name = options.name;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(name)) {\n    name = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)();\n  }\n  this._name = name;\n\n  this._uniforms = options.uniforms;\n\n  // used by PostProcessStageCollection\n  this._textureCache = undefined;\n  this._index = undefined;\n\n  this._selected = undefined;\n  this._selectedShadow = undefined;\n  this._parentSelected = undefined;\n  this._parentSelectedShadow = undefined;\n  this._combinedSelected = undefined;\n  this._combinedSelectedShadow = undefined;\n  this._selectedLength = 0;\n  this._parentSelectedLength = 0;\n  this._selectedDirty = true;\n}\n\nObject.defineProperties(PostProcessStageComposite.prototype, {\n  /**\n   * Determines if this post-process stage is ready to be executed.\n   *\n   * @memberof PostProcessStageComposite.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      var stages = this._stages;\n      var length = stages.length;\n      for (var i = 0; i < length; ++i) {\n        if (!stages[i].ready) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * The unique name of this post-process stage for reference by other stages in a PostProcessStageComposite.\n   *\n   * @memberof PostProcessStageComposite.prototype\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n  /**\n   * Whether or not to execute this post-process stage when ready.\n   *\n   * @memberof PostProcessStageComposite.prototype\n   * @type {Boolean}\n   */\n  enabled: {\n    get: function () {\n      return this._stages[0].enabled;\n    },\n    set: function (value) {\n      var stages = this._stages;\n      var length = stages.length;\n      for (var i = 0; i < length; ++i) {\n        stages[i].enabled = value;\n      }\n    },\n  },\n  /**\n   * An alias to the uniform values of the post-process stages. May be <code>undefined</code>; in which case, get each stage to set uniform values.\n   * @memberof PostProcessStageComposite.prototype\n   * @type {Object}\n   */\n  uniforms: {\n    get: function () {\n      return this._uniforms;\n    },\n  },\n  /**\n   * All post-process stages are executed in the order of the array. The input texture changes based on the value of <code>inputPreviousStageTexture</code>.\n   * If <code>inputPreviousStageTexture</code> is <code>true</code>, the input to each stage is the output texture rendered to by the scene or of the stage that executed before it.\n   * If <code>inputPreviousStageTexture</code> is <code>false</code>, the input texture is the same for each stage in the composite. The input texture is the texture rendered to by the scene\n   * or the output texture of the previous stage.\n   *\n   * @memberof PostProcessStageComposite.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  inputPreviousStageTexture: {\n    get: function () {\n      return this._inputPreviousStageTexture;\n    },\n  },\n  /**\n   * The number of post-process stages in this composite.\n   *\n   * @memberof PostProcessStageComposite.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._stages.length;\n    },\n  },\n  /**\n   * The features selected for applying the post-process.\n   *\n   * @memberof PostProcessStageComposite.prototype\n   * @type {Array}\n   */\n  selected: {\n    get: function () {\n      return this._selected;\n    },\n    set: function (value) {\n      this._selected = value;\n    },\n  },\n  /**\n   * @private\n   */\n  parentSelected: {\n    get: function () {\n      return this._parentSelected;\n    },\n    set: function (value) {\n      this._parentSelected = value;\n    },\n  },\n});\n\n/**\n * @private\n */\nPostProcessStageComposite.prototype._isSupported = function (context) {\n  var stages = this._stages;\n  var length = stages.length;\n  for (var i = 0; i < length; ++i) {\n    if (!stages[i]._isSupported(context)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Gets the post-process stage at <code>index</code>\n *\n * @param {Number} index The index of the post-process stage or composite.\n * @return {PostProcessStage|PostProcessStageComposite} The post-process stage or composite at index.\n *\n * @exception {DeveloperError} index must be greater than or equal to 0.\n * @exception {DeveloperError} index must be less than {@link PostProcessStageComposite#length}.\n */\nPostProcessStageComposite.prototype.get = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("index", index, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.lessThan */ .Z.typeOf.number.lessThan("index", index, this.length);\n  //>>includeEnd(\'debug\');\n  return this._stages[index];\n};\n\nfunction isSelectedTextureDirty(stage) {\n  var length = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._selected) ? stage._selected.length : 0;\n  var parentLength = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._parentSelected) ? stage._parentSelected : 0;\n  var dirty =\n    stage._selected !== stage._selectedShadow ||\n    length !== stage._selectedLength;\n  dirty =\n    dirty ||\n    stage._parentSelected !== stage._parentSelectedShadow ||\n    parentLength !== stage._parentSelectedLength;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._selected) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._parentSelected)) {\n    stage._combinedSelected = stage._selected.concat(stage._parentSelected);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._parentSelected)) {\n    stage._combinedSelected = stage._parentSelected;\n  } else {\n    stage._combinedSelected = stage._selected;\n  }\n\n  if (!dirty && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._combinedSelected)) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(stage._combinedSelectedShadow)) {\n      return true;\n    }\n\n    length = stage._combinedSelected.length;\n    for (var i = 0; i < length; ++i) {\n      if (stage._combinedSelected[i] !== stage._combinedSelectedShadow[i]) {\n        return true;\n      }\n    }\n  }\n  return dirty;\n}\n\n/**\n * A function that will be called before execute. Updates each post-process stage in the composite.\n * @param {Context} context The context.\n * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n * @private\n */\nPostProcessStageComposite.prototype.update = function (context, useLogDepth) {\n  this._selectedDirty = isSelectedTextureDirty(this);\n\n  this._selectedShadow = this._selected;\n  this._parentSelectedShadow = this._parentSelected;\n  this._combinedSelectedShadow = this._combinedSelected;\n  this._selectedLength = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this._selected) ? this._selected.length : 0;\n  this._parentSelectedLength = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this._parentSelected)\n    ? this._parentSelected.length\n    : 0;\n\n  var stages = this._stages;\n  var length = stages.length;\n  for (var i = 0; i < length; ++i) {\n    var stage = stages[i];\n    if (this._selectedDirty) {\n      stage.parentSelected = this._combinedSelected;\n    }\n    stage.update(context, useLogDepth);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see PostProcessStageComposite#destroy\n */\nPostProcessStageComposite.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PostProcessStageComposite#isDestroyed\n */\nPostProcessStageComposite.prototype.destroy = function () {\n  var stages = this._stages;\n  var length = stages.length;\n  for (var i = 0; i < length; ++i) {\n    stages[i].destroy();\n  }\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (PostProcessStageComposite);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53798\n')},80875:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72000);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39960);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50491);\n/* harmony import */ var _Shaders_PostProcessStages_AcesTonemappingStage_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(31659);\n/* harmony import */ var _Shaders_PostProcessStages_AmbientOcclusionGenerate_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(11968);\n/* harmony import */ var _Shaders_PostProcessStages_AmbientOcclusionModulate_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(36756);\n/* harmony import */ var _Shaders_PostProcessStages_BlackAndWhite_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(92812);\n/* harmony import */ var _Shaders_PostProcessStages_BloomComposite_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(37386);\n/* harmony import */ var _Shaders_PostProcessStages_Brightness_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(60593);\n/* harmony import */ var _Shaders_PostProcessStages_ContrastBias_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82445);\n/* harmony import */ var _Shaders_PostProcessStages_DepthOfField_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(83890);\n/* harmony import */ var _Shaders_PostProcessStages_DepthView_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(39592);\n/* harmony import */ var _Shaders_PostProcessStages_EdgeDetection_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(10011);\n/* harmony import */ var _Shaders_PostProcessStages_FilmicTonemapping_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(95848);\n/* harmony import */ var _Shaders_PostProcessStages_FXAA_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(96273);\n/* harmony import */ var _Shaders_PostProcessStages_GaussianBlur1D_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(23077);\n/* harmony import */ var _Shaders_PostProcessStages_LensFlare_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(99182);\n/* harmony import */ var _Shaders_PostProcessStages_ModifiedReinhardTonemapping_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(47784);\n/* harmony import */ var _Shaders_PostProcessStages_NightVision_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(50920);\n/* harmony import */ var _Shaders_PostProcessStages_ReinhardTonemapping_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(51552);\n/* harmony import */ var _Shaders_PostProcessStages_Silhouette_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3026);\n/* harmony import */ var _Shaders_FXAA3_11_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(61333);\n/* harmony import */ var _AutoExposure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66270);\n/* harmony import */ var _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11184);\n/* harmony import */ var _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53798);\n/* harmony import */ var _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(26615);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Contains functions for creating common post-process stages.\n *\n * @namespace PostProcessStageLibrary\n */\nvar PostProcessStageLibrary = {};\n\nfunction createBlur(name) {\n  var delta = 1.0;\n  var sigma = 2.0;\n  var stepSize = 1.0;\n\n  var blurShader = "#define USE_STEP_SIZE\\n" + _Shaders_PostProcessStages_GaussianBlur1D_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z;\n  var blurX = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: name + "_x_direction",\n    fragmentShader: blurShader,\n    uniforms: {\n      delta: delta,\n      sigma: sigma,\n      stepSize: stepSize,\n      direction: 0.0,\n    },\n    sampleMode: _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].LINEAR */ .Z.LINEAR,\n  });\n  var blurY = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: name + "_y_direction",\n    fragmentShader: blurShader,\n    uniforms: {\n      delta: delta,\n      sigma: sigma,\n      stepSize: stepSize,\n      direction: 1.0,\n    },\n    sampleMode: _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].LINEAR */ .Z.LINEAR,\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    delta: {\n      get: function () {\n        return blurX.uniforms.delta;\n      },\n      set: function (value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.delta = blurYUniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blurX.uniforms.sigma;\n      },\n      set: function (value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.sigma = blurYUniforms.sigma = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return blurX.uniforms.stepSize;\n      },\n      set: function (value) {\n        var blurXUniforms = blurX.uniforms;\n        var blurYUniforms = blurY.uniforms;\n        blurXUniforms.stepSize = blurYUniforms.stepSize = value;\n      },\n    },\n  });\n  return new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: name,\n    stages: [blurX, blurY],\n    uniforms: uniforms,\n  });\n}\n\n/**\n * Creates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n * <p>\n * This stage has the following uniforms: <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <p>\n * <code>delta</code> and <code>sigma</code> are used to compute the weights of a Gaussian filter. The equation is <code>exp((-0.5 * delta * delta) / (sigma * sigma))</code>.\n * The default value for <code>delta</code> is <code>1.0</code>. The default value for <code>sigma</code> is <code>2.0</code>.\n * <code>stepSize</code> is the distance to the next texel. The default is <code>1.0</code>.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a Gaussian blur to the input texture.\n */\nPostProcessStageLibrary.createBlurStage = function () {\n  return createBlur("czm_blur");\n};\n\n/**\n * Creates a post-process stage that applies a depth of field effect.\n * <p>\n * Depth of field simulates camera focus. Objects in the scene that are in focus\n * will be clear whereas objects not in focus will be blurred.\n * </p>\n * <p>\n * This stage has the following uniforms: <code>focalDistance</code>, <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <p>\n * <code>focalDistance</code> is the distance in meters from the camera to set the camera focus.\n * </p>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * The blur is applied to the areas out of focus.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies a depth of field effect.\n */\nPostProcessStageLibrary.createDepthOfFieldStage = function () {\n  var blur = createBlur("czm_depth_of_field_blur");\n  var dof = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_depth_of_field_composite",\n    fragmentShader: _Shaders_PostProcessStages_DepthOfField_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n    uniforms: {\n      focalDistance: 5.0,\n      blurTexture: blur.name,\n    },\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    focalDistance: {\n      get: function () {\n        return dof.uniforms.focalDistance;\n      },\n      set: function (value) {\n        dof.uniforms.focalDistance = value;\n      },\n    },\n    delta: {\n      get: function () {\n        return blur.uniforms.delta;\n      },\n      set: function (value) {\n        blur.uniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blur.uniforms.sigma;\n      },\n      set: function (value) {\n        blur.uniforms.sigma = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return blur.uniforms.stepSize;\n      },\n      set: function (value) {\n        blur.uniforms.stepSize = value;\n      },\n    },\n  });\n  return new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_depth_of_field",\n    stages: [blur, dof],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms,\n  });\n};\n\n/**\n * Whether or not a depth of field stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isDepthOfFieldSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\n/**\n * Creates a post-process stage that detects edges.\n * <p>\n * Writes the color to the output texture with alpha set to 1.0 when it is on an edge.\n * </p>\n * <p>\n * This stage has the following uniforms: <code>color</code> and <code>length</code>\n * </p>\n * <ul>\n * <li><code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.</li>\n * <li><code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.</li>\n * </ul>\n * <p>\n * This stage is not supported in 2D.\n * </p>\n * @return {PostProcessStage} A post-process stage that applies an edge detection effect.\n *\n * @example\n * // multiple silhouette effects\n * var yellowEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n * yellowEdge.uniforms.color = Cesium.Color.YELLOW;\n * yellowEdge.selected = [feature0];\n *\n * var greenEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n * greenEdge.uniforms.color = Cesium.Color.LIME;\n * greenEdge.selected = [feature1];\n *\n * // draw edges around feature0 and feature1\n * postProcessStages.add(Cesium.PostProcessLibrary.createSilhouetteStage([yellowEdge, greenEdge]);\n */\nPostProcessStageLibrary.createEdgeDetectionStage = function () {\n  // unique name generated on call so more than one effect can be added\n  var name = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)();\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_edge_detection_" + name,\n    fragmentShader: _Shaders_PostProcessStages_EdgeDetection_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z,\n    uniforms: {\n      length: 0.25,\n      color: _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].BLACK */ .Z.BLACK),\n    },\n  });\n};\n\n/**\n * Whether or not an edge detection stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isEdgeDetectionSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\nfunction getSilhouetteEdgeDetection(edgeDetectionStages) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(edgeDetectionStages)) {\n    return PostProcessStageLibrary.createEdgeDetectionStage();\n  }\n\n  var edgeDetection = new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_edge_detection_multiple",\n    stages: edgeDetectionStages,\n    inputPreviousStageTexture: false,\n  });\n\n  var compositeUniforms = {};\n  var fsDecl = "";\n  var fsLoop = "";\n  for (var i = 0; i < edgeDetectionStages.length; ++i) {\n    fsDecl += "uniform sampler2D edgeTexture" + i + "; \\n";\n    fsLoop +=\n      "        vec4 edge" +\n      i +\n      " = texture2D(edgeTexture" +\n      i +\n      ", v_textureCoordinates); \\n" +\n      "        if (edge" +\n      i +\n      ".a > 0.0) \\n" +\n      "        { \\n" +\n      "            color = edge" +\n      i +\n      "; \\n" +\n      "            break; \\n" +\n      "        } \\n";\n    compositeUniforms["edgeTexture" + i] = edgeDetectionStages[i].name;\n  }\n\n  var fs =\n    fsDecl +\n    "varying vec2 v_textureCoordinates; \\n" +\n    "void main() { \\n" +\n    "    vec4 color = vec4(0.0); \\n" +\n    "    for (int i = 0; i < " +\n    edgeDetectionStages.length +\n    "; i++) \\n" +\n    "    { \\n" +\n    fsLoop +\n    "    } \\n" +\n    "    gl_FragColor = color; \\n" +\n    "} \\n";\n\n  var edgeComposite = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_edge_detection_combine",\n    fragmentShader: fs,\n    uniforms: compositeUniforms,\n  });\n  return new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_edge_detection_composite",\n    stages: [edgeDetection, edgeComposite],\n  });\n}\n\n/**\n * Creates a post-process stage that applies a silhouette effect.\n * <p>\n * A silhouette effect composites the color from the edge detection pass with input color texture.\n * </p>\n * <p>\n * This stage has the following uniforms when <code>edgeDetectionStages</code> is <code>undefined</code>: <code>color</code> and <code>length</code>\n * </p>\n * <p>\n * <code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.\n * <code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.\n * </p>\n * @param {PostProcessStage[]} [edgeDetectionStages] An array of edge detection post process stages.\n * @return {PostProcessStageComposite} A post-process stage that applies a silhouette effect.\n */\nPostProcessStageLibrary.createSilhouetteStage = function (edgeDetectionStages) {\n  var edgeDetection = getSilhouetteEdgeDetection(edgeDetectionStages);\n  var silhouetteProcess = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_silhouette_color_edges",\n    fragmentShader: _Shaders_PostProcessStages_Silhouette_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z,\n    uniforms: {\n      silhouetteTexture: edgeDetection.name,\n    },\n  });\n\n  return new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_silhouette",\n    stages: [edgeDetection, silhouetteProcess],\n    inputPreviousStageTexture: false,\n    uniforms: edgeDetection.uniforms,\n  });\n};\n\n/**\n * Whether or not a silhouette stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isSilhouetteSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\n/**\n * Creates a post-process stage that applies a bloom effect to the input texture.\n * <p>\n * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n * </p>\n * <p>\n * This post-process stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n * </p>\n * <ul>\n * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n * added to the brightness. The default value is <code>-0.3</code>.</li>\n * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n * </ul>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage to applies a bloom effect.\n *\n * @private\n */\nPostProcessStageLibrary.createBloomStage = function () {\n  var contrastBias = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_bloom_contrast_bias",\n    fragmentShader: _Shaders_PostProcessStages_ContrastBias_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z,\n    uniforms: {\n      contrast: 128.0,\n      brightness: -0.3,\n    },\n  });\n  var blur = createBlur("czm_bloom_blur");\n  var generateComposite = new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_bloom_contrast_bias_blur",\n    stages: [contrastBias, blur],\n  });\n\n  var bloomComposite = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_bloom_generate_composite",\n    fragmentShader: _Shaders_PostProcessStages_BloomComposite_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z,\n    uniforms: {\n      glowOnly: false,\n      bloomTexture: generateComposite.name,\n    },\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    glowOnly: {\n      get: function () {\n        return bloomComposite.uniforms.glowOnly;\n      },\n      set: function (value) {\n        bloomComposite.uniforms.glowOnly = value;\n      },\n    },\n    contrast: {\n      get: function () {\n        return contrastBias.uniforms.contrast;\n      },\n      set: function (value) {\n        contrastBias.uniforms.contrast = value;\n      },\n    },\n    brightness: {\n      get: function () {\n        return contrastBias.uniforms.brightness;\n      },\n      set: function (value) {\n        contrastBias.uniforms.brightness = value;\n      },\n    },\n    delta: {\n      get: function () {\n        return blur.uniforms.delta;\n      },\n      set: function (value) {\n        blur.uniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blur.uniforms.sigma;\n      },\n      set: function (value) {\n        blur.uniforms.sigma = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return blur.uniforms.stepSize;\n      },\n      set: function (value) {\n        blur.uniforms.stepSize = value;\n      },\n    },\n  });\n\n  return new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_bloom",\n    stages: [generateComposite, bloomComposite],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms,\n  });\n};\n\n/**\n * Creates a post-process stage that Horizon-based Ambient Occlusion (HBAO) to the input texture.\n * <p>\n * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n * surface receives light and regardless of the light\'s position.\n * </p>\n * <p>\n * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n * <code>stepSize</code>, <code>frustumLength</code>, <code>randomTexture</code>, <code>ambientOcclusionOnly</code>,\n * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n * </p>\n * <ul>\n * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n * The default value is <code>1000.0</code>.</li>\n * <li><code>randomTexture</code> is a texture where the red channel is a random value in [0.0, 1.0]. The default value is <code>undefined</code>. This texture needs to be set.</li>\n * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n * </ul>\n * <p>\n * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n * The blur is applied to the shadows generated from the image to make them smoother.\n * </p>\n * @return {PostProcessStageComposite} A post-process stage that applies an ambient occlusion effect.\n *\n * @private\n */\nPostProcessStageLibrary.createAmbientOcclusionStage = function () {\n  var generate = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_ambient_occlusion_generate",\n    fragmentShader: _Shaders_PostProcessStages_AmbientOcclusionGenerate_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z,\n    uniforms: {\n      intensity: 3.0,\n      bias: 0.1,\n      lengthCap: 0.26,\n      stepSize: 1.95,\n      frustumLength: 1000.0,\n      randomTexture: undefined,\n    },\n  });\n  var blur = createBlur("czm_ambient_occlusion_blur");\n  blur.uniforms.stepSize = 0.86;\n  var generateAndBlur = new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_ambient_occlusion_generate_blur",\n    stages: [generate, blur],\n  });\n\n  var ambientOcclusionModulate = new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_ambient_occlusion_composite",\n    fragmentShader: _Shaders_PostProcessStages_AmbientOcclusionModulate_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z,\n    uniforms: {\n      ambientOcclusionOnly: false,\n      ambientOcclusionTexture: generateAndBlur.name,\n    },\n  });\n\n  var uniforms = {};\n  Object.defineProperties(uniforms, {\n    intensity: {\n      get: function () {\n        return generate.uniforms.intensity;\n      },\n      set: function (value) {\n        generate.uniforms.intensity = value;\n      },\n    },\n    bias: {\n      get: function () {\n        return generate.uniforms.bias;\n      },\n      set: function (value) {\n        generate.uniforms.bias = value;\n      },\n    },\n    lengthCap: {\n      get: function () {\n        return generate.uniforms.lengthCap;\n      },\n      set: function (value) {\n        generate.uniforms.lengthCap = value;\n      },\n    },\n    stepSize: {\n      get: function () {\n        return generate.uniforms.stepSize;\n      },\n      set: function (value) {\n        generate.uniforms.stepSize = value;\n      },\n    },\n    frustumLength: {\n      get: function () {\n        return generate.uniforms.frustumLength;\n      },\n      set: function (value) {\n        generate.uniforms.frustumLength = value;\n      },\n    },\n    randomTexture: {\n      get: function () {\n        return generate.uniforms.randomTexture;\n      },\n      set: function (value) {\n        generate.uniforms.randomTexture = value;\n      },\n    },\n    delta: {\n      get: function () {\n        return blur.uniforms.delta;\n      },\n      set: function (value) {\n        blur.uniforms.delta = value;\n      },\n    },\n    sigma: {\n      get: function () {\n        return blur.uniforms.sigma;\n      },\n      set: function (value) {\n        blur.uniforms.sigma = value;\n      },\n    },\n    blurStepSize: {\n      get: function () {\n        return blur.uniforms.stepSize;\n      },\n      set: function (value) {\n        blur.uniforms.stepSize = value;\n      },\n    },\n    ambientOcclusionOnly: {\n      get: function () {\n        return ambientOcclusionModulate.uniforms.ambientOcclusionOnly;\n      },\n      set: function (value) {\n        ambientOcclusionModulate.uniforms.ambientOcclusionOnly = value;\n      },\n    },\n  });\n\n  return new _PostProcessStageComposite_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    name: "czm_ambient_occlusion",\n    stages: [generateAndBlur, ambientOcclusionModulate],\n    inputPreviousStageTexture: false,\n    uniforms: uniforms,\n  });\n};\n\n/**\n * Whether or not an ambient occlusion stage is supported.\n * <p>\n * This stage requires the WEBGL_depth_texture extension.\n * </p>\n *\n * @param {Scene} scene The scene.\n * @return {Boolean} Whether this post process stage is supported.\n *\n * @see {Context#depthTexture}\n * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n */\nPostProcessStageLibrary.isAmbientOcclusionSupported = function (scene) {\n  return scene.context.depthTexture;\n};\n\nvar fxaaFS = "#define FXAA_QUALITY_PRESET 39 \\n" + _Shaders_FXAA3_11_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z + "\\n" + _Shaders_PostProcessStages_FXAA_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z;\n\n/**\n * Creates a post-process stage that applies Fast Approximate Anti-aliasing (FXAA) to the input texture.\n * @return {PostProcessStage} A post-process stage that applies Fast Approximate Anti-aliasing to the input texture.\n *\n * @private\n */\nPostProcessStageLibrary.createFXAAStage = function () {\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_FXAA",\n    fragmentShader: fxaaFS,\n    sampleMode: _PostProcessStageSampleMode_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].LINEAR */ .Z.LINEAR,\n  });\n};\n\n/**\n * Creates a post-process stage that applies ACES tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies ACES tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createAcesTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? "#define AUTO_EXPOSURE\\n" : "";\n  fs += _Shaders_PostProcessStages_AcesTonemappingStage_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z;\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_aces",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that applies filmic tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies filmic tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createFilmicTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? "#define AUTO_EXPOSURE\\n" : "";\n  fs += _Shaders_PostProcessStages_FilmicTonemapping_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z;\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_filmic",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that applies Reinhard tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies Reinhard tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createReinhardTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? "#define AUTO_EXPOSURE\\n" : "";\n  fs += _Shaders_PostProcessStages_ReinhardTonemapping_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z;\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_reinhard",\n    fragmentShader: fs,\n    uniforms: {\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that applies modified Reinhard tonemapping operator.\n * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n * @return {PostProcessStage} A post-process stage that applies modified Reinhard tonemapping operator.\n * @private\n */\nPostProcessStageLibrary.createModifiedReinhardTonemappingStage = function (\n  useAutoExposure\n) {\n  var fs = useAutoExposure ? "#define AUTO_EXPOSURE\\n" : "";\n  fs += _Shaders_PostProcessStages_ModifiedReinhardTonemapping_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z;\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_modified_reinhard",\n    fragmentShader: fs,\n    uniforms: {\n      white: _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE,\n      autoExposure: undefined,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that finds the average luminance of the input texture.\n * @return {PostProcessStage} A post-process stage that finds the average luminance of the input texture.\n * @private\n */\nPostProcessStageLibrary.createAutoExposureStage = function () {\n  return new _AutoExposure_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n};\n\n/**\n * Creates a post-process stage that renders the input texture with black and white gradations.\n * <p>\n * This stage has one uniform value, <code>gradations</code>, which scales the luminance of each pixel.\n * </p>\n * @return {PostProcessStage} A post-process stage that renders the input texture with black and white gradations.\n */\nPostProcessStageLibrary.createBlackAndWhiteStage = function () {\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_black_and_white",\n    fragmentShader: _Shaders_PostProcessStages_BlackAndWhite_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z,\n    uniforms: {\n      gradations: 5.0,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that saturates the input texture.\n * <p>\n * This stage has one uniform value, <code>brightness</code>, which scales the saturation of each pixel.\n * </p>\n * @return {PostProcessStage} A post-process stage that saturates the input texture.\n */\nPostProcessStageLibrary.createBrightnessStage = function () {\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_brightness",\n    fragmentShader: _Shaders_PostProcessStages_Brightness_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z,\n    uniforms: {\n      brightness: 0.5,\n    },\n  });\n};\n\n/**\n * Creates a post-process stage that adds a night vision effect to the input texture.\n * @return {PostProcessStage} A post-process stage that adds a night vision effect to the input texture.\n */\nPostProcessStageLibrary.createNightVisionStage = function () {\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_night_vision",\n    fragmentShader: _Shaders_PostProcessStages_NightVision_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z,\n  });\n};\n\n/**\n * Creates a post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n * @return {PostProcessStage} A post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n *\n * @private\n */\nPostProcessStageLibrary.createDepthViewStage = function () {\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_depth_view",\n    fragmentShader: _Shaders_PostProcessStages_DepthView_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z,\n  });\n};\n\n/**\n * Creates a post-process stage that applies an effect simulating light flaring a camera lens.\n * <p>\n * This stage has the following uniforms: <code>dirtTexture</code>, <code>starTexture</code>, <code>intensity</code>, <code>distortion</code>, <code>ghostDispersal</code>,\n * <code>haloWidth</code>, <code>dirtAmount</code>, and <code>earthRadius</code>.\n * <ul>\n * <li><code>dirtTexture</code> is a texture sampled to simulate dirt on the lens.</li>\n * <li><code>starTexture</code> is the texture sampled for the star pattern of the flare.</li>\n * <li><code>intensity</code> is a scalar multiplied by the result of the lens flare. The default value is <code>2.0</code>.</li>\n * <li><code>distortion</code> is a scalar value that affects the chromatic effect distortion. The default value is <code>10.0</code>.</li>\n * <li><code>ghostDispersal</code> is a scalar indicating how far the halo effect is from the center of the texture. The default value is <code>0.4</code>.</li>\n * <li><code>haloWidth</code> is a scalar representing the width of the halo  from the ghost dispersal. The default value is <code>0.4</code>.</li>\n * <li><code>dirtAmount</code> is a scalar representing the amount of dirt on the lens. The default value is <code>0.4</code>.</li>\n * <li><code>earthRadius</code> is the maximum radius of the earth. The default value is <code>Ellipsoid.WGS84.maximumRadius</code>.</li>\n * </ul>\n * </p>\n * @return {PostProcessStage} A post-process stage for applying a lens flare effect.\n */\nPostProcessStageLibrary.createLensFlareStage = function () {\n  return new _PostProcessStage_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    name: "czm_lens_flare",\n    fragmentShader: _Shaders_PostProcessStages_LensFlare_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z,\n    uniforms: {\n      dirtTexture: (0,_Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)("Assets/Textures/LensFlare/DirtMask.jpg"),\n      starTexture: (0,_Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)("Assets/Textures/LensFlare/StarBurst.jpg"),\n      intensity: 2.0,\n      distortion: 10.0,\n      ghostDispersal: 0.4,\n      haloWidth: 0.4,\n      dirtAmount: 0.4,\n      earthRadius: _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].WGS84.maximumRadius */ .Z.WGS84.maximumRadius,\n    },\n  });\n};\n/* harmony default export */ __webpack_exports__["Z"] = (PostProcessStageLibrary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80875\n')},26615:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Determines how input texture to a {@link PostProcessStage} is sampled.\n *\n * @enum {Number}\n */\nvar PostProcessStageSampleMode = {\n  /**\n   * Samples the texture by returning the closest texel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NEAREST: 0,\n  /**\n   * Samples the texture through bi-linear interpolation of the four nearest texels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINEAR: 1,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (PostProcessStageSampleMode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2MTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxzQ0FBc0Msd0JBQXdCO0FBQzlEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsMEJBQTBCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvUG9zdFByb2Nlc3NTdGFnZVNhbXBsZU1vZGUuanM/NDc2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERldGVybWluZXMgaG93IGlucHV0IHRleHR1cmUgdG8gYSB7QGxpbmsgUG9zdFByb2Nlc3NTdGFnZX0gaXMgc2FtcGxlZC5cbiAqXG4gKiBAZW51bSB7TnVtYmVyfVxuICovXG52YXIgUG9zdFByb2Nlc3NTdGFnZVNhbXBsZU1vZGUgPSB7XG4gIC8qKlxuICAgKiBTYW1wbGVzIHRoZSB0ZXh0dXJlIGJ5IHJldHVybmluZyB0aGUgY2xvc2VzdCB0ZXhlbC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBORUFSRVNUOiAwLFxuICAvKipcbiAgICogU2FtcGxlcyB0aGUgdGV4dHVyZSB0aHJvdWdoIGJpLWxpbmVhciBpbnRlcnBvbGF0aW9uIG9mIHRoZSBmb3VyIG5lYXJlc3QgdGV4ZWxzLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIExJTkVBUjogMSxcbn07XG5leHBvcnQgZGVmYXVsdCBQb3N0UHJvY2Vzc1N0YWdlU2FtcGxlTW9kZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26615\n')},87878:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86511);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99417);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2932);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8743);\n\n\n\n\n\n\n\n\n/**\n * Creates a minimal amount of textures and framebuffers.\n *\n * @alias PostProcessStageTextureCache\n * @constructor\n *\n * @param {PostProcessStageCollection} postProcessStageCollection The post process collection.\n *\n * @private\n */\nfunction PostProcessStageTextureCache(postProcessStageCollection) {\n  this._collection = postProcessStageCollection;\n\n  this._framebuffers = [];\n  this._stageNameToFramebuffer = {};\n\n  this._width = undefined;\n  this._height = undefined;\n  this._updateDependencies = false;\n}\n\nfunction getLastStageName(stage) {\n  while ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(stage.length)) {\n    stage = stage.get(stage.length - 1);\n  }\n  return stage.name;\n}\n\nfunction getStageDependencies(\n  collection,\n  context,\n  dependencies,\n  stage,\n  previousName\n) {\n  if (!stage.enabled || !stage._isSupported(context)) {\n    return previousName;\n  }\n\n  var stageDependencies = (dependencies[stage.name] = {});\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(previousName)) {\n    var previous = collection.getStageByName(previousName);\n    stageDependencies[getLastStageName(previous)] = true;\n  }\n  var uniforms = stage.uniforms;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(uniforms)) {\n    var uniformNames = Object.getOwnPropertyNames(uniforms);\n    var uniformNamesLength = uniformNames.length;\n    for (var i = 0; i < uniformNamesLength; ++i) {\n      var value = uniforms[uniformNames[i]];\n      if (typeof value === "string") {\n        var dependent = collection.getStageByName(value);\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(dependent)) {\n          stageDependencies[getLastStageName(dependent)] = true;\n        }\n      }\n    }\n  }\n\n  return stage.name;\n}\n\nfunction getCompositeDependencies(\n  collection,\n  context,\n  dependencies,\n  composite,\n  previousName\n) {\n  if (\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(composite.enabled) && !composite.enabled) ||\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(composite._isSupported) && !composite._isSupported(context))\n  ) {\n    return previousName;\n  }\n\n  var originalDependency = previousName;\n\n  var inSeries =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(composite.inputPreviousStageTexture) ||\n    composite.inputPreviousStageTexture;\n  var currentName = previousName;\n  var length = composite.length;\n  for (var i = 0; i < length; ++i) {\n    var stage = composite.get(i);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(stage.length)) {\n      currentName = getCompositeDependencies(\n        collection,\n        context,\n        dependencies,\n        stage,\n        previousName\n      );\n    } else {\n      currentName = getStageDependencies(\n        collection,\n        context,\n        dependencies,\n        stage,\n        previousName\n      );\n    }\n    // Stages in a series only depend on the previous stage\n    if (inSeries) {\n      previousName = currentName;\n    }\n  }\n\n  // Stages not in a series depend on every stage executed before it since it could reference it as a uniform.\n  // This prevents looking at the dependencies of each stage in the composite, but might create more framebuffers than necessary.\n  // In practice, there are only 2-3 stages in these composites.\n  var j;\n  var name;\n  if (!inSeries) {\n    for (j = 1; j < length; ++j) {\n      name = getLastStageName(composite.get(j));\n      var currentDependencies = dependencies[name];\n      for (var k = 0; k < j; ++k) {\n        currentDependencies[getLastStageName(composite.get(k))] = true;\n      }\n    }\n  } else {\n    for (j = 1; j < length; ++j) {\n      name = getLastStageName(composite.get(j));\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(dependencies[name])) {\n        dependencies[name] = {};\n      }\n      dependencies[name][originalDependency] = true;\n    }\n  }\n\n  return currentName;\n}\n\nfunction getDependencies(collection, context) {\n  var dependencies = {};\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(collection.ambientOcclusion)) {\n    var ao = collection.ambientOcclusion;\n    var bloom = collection.bloom;\n    var tonemapping = collection._tonemapping;\n    var fxaa = collection.fxaa;\n\n    var previousName = getCompositeDependencies(\n      collection,\n      context,\n      dependencies,\n      ao,\n      undefined\n    );\n    previousName = getCompositeDependencies(\n      collection,\n      context,\n      dependencies,\n      bloom,\n      previousName\n    );\n    previousName = getStageDependencies(\n      collection,\n      context,\n      dependencies,\n      tonemapping,\n      previousName\n    );\n    previousName = getCompositeDependencies(\n      collection,\n      context,\n      dependencies,\n      collection,\n      previousName\n    );\n    getStageDependencies(collection, context, dependencies, fxaa, previousName);\n  } else {\n    getCompositeDependencies(\n      collection,\n      context,\n      dependencies,\n      collection,\n      undefined\n    );\n  }\n\n  return dependencies;\n}\n\nfunction getFramebuffer(cache, stageName, dependencies) {\n  var collection = cache._collection;\n  var stage = collection.getStageByName(stageName);\n\n  var textureScale = stage._textureScale;\n  var forcePowerOfTwo = stage._forcePowerOfTwo;\n  var pixelFormat = stage._pixelFormat;\n  var pixelDatatype = stage._pixelDatatype;\n  var clearColor = stage._clearColor;\n\n  var i;\n  var framebuffer;\n  var framebuffers = cache._framebuffers;\n  var length = framebuffers.length;\n  for (i = 0; i < length; ++i) {\n    framebuffer = framebuffers[i];\n\n    if (\n      textureScale !== framebuffer.textureScale ||\n      forcePowerOfTwo !== framebuffer.forcePowerOfTwo ||\n      pixelFormat !== framebuffer.pixelFormat ||\n      pixelDatatype !== framebuffer.pixelDatatype ||\n      !_Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(clearColor, framebuffer.clearColor)\n    ) {\n      continue;\n    }\n\n    var stageNames = framebuffer.stages;\n    var stagesLength = stageNames.length;\n    var foundConflict = false;\n    for (var j = 0; j < stagesLength; ++j) {\n      if (dependencies[stageNames[j]]) {\n        foundConflict = true;\n        break;\n      }\n    }\n\n    if (!foundConflict) {\n      break;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(framebuffer) && i < length) {\n    framebuffer.stages.push(stageName);\n    return framebuffer;\n  }\n\n  framebuffer = {\n    textureScale: textureScale,\n    forcePowerOfTwo: forcePowerOfTwo,\n    pixelFormat: pixelFormat,\n    pixelDatatype: pixelDatatype,\n    clearColor: clearColor,\n    stages: [stageName],\n    buffer: undefined,\n    clear: undefined,\n  };\n\n  framebuffers.push(framebuffer);\n  return framebuffer;\n}\n\nfunction createFramebuffers(cache, context) {\n  var dependencies = getDependencies(cache._collection, context);\n  for (var stageName in dependencies) {\n    if (dependencies.hasOwnProperty(stageName)) {\n      cache._stageNameToFramebuffer[stageName] = getFramebuffer(\n        cache,\n        stageName,\n        dependencies[stageName]\n      );\n    }\n  }\n}\n\nfunction releaseResources(cache) {\n  var framebuffers = cache._framebuffers;\n  var length = framebuffers.length;\n  for (var i = 0; i < length; ++i) {\n    var framebuffer = framebuffers[i];\n    framebuffer.buffer = framebuffer.buffer && framebuffer.buffer.destroy();\n    framebuffer.buffer = undefined;\n  }\n}\n\nfunction updateFramebuffers(cache, context) {\n  var width = cache._width;\n  var height = cache._height;\n\n  var framebuffers = cache._framebuffers;\n  var length = framebuffers.length;\n  for (var i = 0; i < length; ++i) {\n    var framebuffer = framebuffers[i];\n\n    var scale = framebuffer.textureScale;\n    var textureWidth = Math.ceil(width * scale);\n    var textureHeight = Math.ceil(height * scale);\n\n    var size = Math.min(textureWidth, textureHeight);\n    if (framebuffer.forcePowerOfTwo) {\n      if (!_Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(size)) {\n        size = _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].nextPowerOfTwo */ .Z.nextPowerOfTwo(size);\n      }\n      textureWidth = size;\n      textureHeight = size;\n    }\n\n    framebuffer.buffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      context: context,\n      colorTextures: [\n        new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n          context: context,\n          width: textureWidth,\n          height: textureHeight,\n          pixelFormat: framebuffer.pixelFormat,\n          pixelDatatype: framebuffer.pixelDatatype,\n        }),\n      ],\n    });\n    framebuffer.clear = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n      color: framebuffer.clearColor,\n      framebuffer: framebuffer.buffer,\n    });\n  }\n}\n\nPostProcessStageTextureCache.prototype.updateDependencies = function () {\n  this._updateDependencies = true;\n};\n\n/**\n * Called before the stages in the collection are executed. Creates the minimum amount of framebuffers for a post-process collection.\n *\n * @param {Context} context The context.\n */\nPostProcessStageTextureCache.prototype.update = function (context) {\n  var collection = this._collection;\n  var updateDependencies = this._updateDependencies;\n  var aoEnabled =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(collection.ambientOcclusion) &&\n    collection.ambientOcclusion.enabled &&\n    collection.ambientOcclusion._isSupported(context);\n  var bloomEnabled =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(collection.bloom) &&\n    collection.bloom.enabled &&\n    collection.bloom._isSupported(context);\n  var tonemappingEnabled =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(collection._tonemapping) &&\n    collection._tonemapping.enabled &&\n    collection._tonemapping._isSupported(context);\n  var fxaaEnabled =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(collection.fxaa) &&\n    collection.fxaa.enabled &&\n    collection.fxaa._isSupported(context);\n  var needsCheckDimensionsUpdate =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(collection._activeStages) ||\n    collection._activeStages.length > 0 ||\n    aoEnabled ||\n    bloomEnabled ||\n    tonemappingEnabled ||\n    fxaaEnabled;\n  if (\n    updateDependencies ||\n    (!needsCheckDimensionsUpdate && this._framebuffers.length > 0)\n  ) {\n    releaseResources(this);\n    this._framebuffers.length = 0;\n    this._stageNameToFramebuffer = {};\n    this._width = undefined;\n    this._height = undefined;\n  }\n\n  if (!updateDependencies && !needsCheckDimensionsUpdate) {\n    return;\n  }\n\n  if (this._framebuffers.length === 0) {\n    createFramebuffers(this, context);\n  }\n\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n  var dimensionsChanged = this._width !== width || this._height !== height;\n  if (!updateDependencies && !dimensionsChanged) {\n    return;\n  }\n\n  this._width = width;\n  this._height = height;\n  this._updateDependencies = false;\n  releaseResources(this);\n  updateFramebuffers(this, context);\n};\n\n/**\n * Clears all of the framebuffers.\n *\n * @param {Context} context The context.\n */\nPostProcessStageTextureCache.prototype.clear = function (context) {\n  var framebuffers = this._framebuffers;\n  for (var i = 0; i < framebuffers.length; ++i) {\n    framebuffers[i].clear.execute(context);\n  }\n};\n\n/**\n * Gets the stage with the given name.\n * @param {String} name The name of the stage.\n * @return {PostProcessStage|PostProcessStageComposite}\n */\nPostProcessStageTextureCache.prototype.getStageByName = function (name) {\n  return this._collection.getStageByName(name);\n};\n\n/**\n * Gets the output texture for a stage with the given name.\n * @param {String} name The name of the stage.\n * @return {Texture|undefined} The output texture of the stage with the given name.\n */\nPostProcessStageTextureCache.prototype.getOutputTexture = function (name) {\n  return this._collection.getOutputTexture(name);\n};\n\n/**\n * Gets the framebuffer for a stage with the given name.\n *\n * @param {String} name The name of the stage.\n * @return {Framebuffer|undefined} The framebuffer for the stage with the given name.\n */\nPostProcessStageTextureCache.prototype.getFramebuffer = function (name) {\n  var framebuffer = this._stageNameToFramebuffer[name];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(framebuffer)) {\n    return undefined;\n  }\n  return framebuffer.buffer;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see PostProcessStageTextureCache#destroy\n */\nPostProcessStageTextureCache.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see PostProcessStageTextureCache#isDestroyed\n */\nPostProcessStageTextureCache.prototype.destroy = function () {\n  releaseResources(this);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (PostProcessStageTextureCache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87878\n')}}]);