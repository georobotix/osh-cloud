"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[1458],{520:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ ScenegraphLayer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/layer.js + 3 modules\nvar lib_layer = __webpack_require__(52447);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/shaderlib/project32/project32.js\nvar project32 = __webpack_require__(93844);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/shaderlib/picking/picking.js\nvar picking = __webpack_require__(43844);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/log.js\nvar log = __webpack_require__(80744);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/pbr/pbr.js + 2 modules\nvar pbr = __webpack_require__(49764);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/experimental/dist/esm/scenegraph/scenegraph-node.js\nvar scenegraph_node = __webpack_require__(44522);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/experimental/dist/esm/gltf/create-gltf-objects.js + 6 modules\nvar create_gltf_objects = __webpack_require__(77910);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/gltf-loader.js + 50 modules\nvar gltf_loader = __webpack_require__(52462);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/mesh-layers/dist/esm/scenegraph-layer/gltf-utils.js\nasync function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.getUniforms()).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}\n//# sourceMappingURL=gltf-utils.js.map\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/utils/iterable-utils.js\nvar iterable_utils = __webpack_require__(38550);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/core/dist/esm/lib/constants.js\nvar constants = __webpack_require__(24088);\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/mesh-layers/dist/esm/utils/matrix.js\n\nconst RADIAN_PER_DEGREE = Math.PI / 180;\nconst modelMatrix = new Float32Array(16);\nconst valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  const pitch = orientation[0] * RADIAN_PER_DEGREE;\n  const yaw = orientation[1] * RADIAN_PER_DEGREE;\n  const roll = orientation[2] * RADIAN_PER_DEGREE;\n  const sr = Math.sin(roll);\n  const sp = Math.sin(pitch);\n  const sw = Math.sin(yaw);\n  const cr = Math.cos(roll);\n  const cp = Math.cos(pitch);\n  const cw = Math.cos(yaw);\n  const scx = scale[0];\n  const scy = scale[1];\n  const scz = scale[2];\n  targetMatrix[0] = scx * cw * cp;\n  targetMatrix[1] = scx * sw * cp;\n  targetMatrix[2] = scx * -sp;\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr);\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr);\n  targetMatrix[5] = scy * cp * sr;\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr);\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr);\n  targetMatrix[8] = scz * cp * cr;\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n  return mat4.subarray(0, 12);\n}\n\nconst MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  },\n\n  update(attribute, {\n    startRow,\n    endRow\n  }) {\n    const {\n      data,\n      getOrientation,\n      getScale,\n      getTranslation,\n      getTransformMatrix\n    } = this.props;\n    const arrayMatrix = Array.isArray(getTransformMatrix);\n    const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    const constantScale = Array.isArray(getScale);\n    const constantOrientation = Array.isArray(getOrientation);\n    const constantTranslation = Array.isArray(getTranslation);\n    const hasMatrix = constantMatrix || !arrayMatrix && Boolean(getTransformMatrix(data[0]));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    const instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      let matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n        const orientation = getOrientation;\n        const scale = getScale;\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      let i = startRow * attribute.size;\n      const {\n        iterable,\n        objectInfo\n      } = (0,iterable_utils/* createIterable */.jB)(data, startRow, endRow);\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        let matrix;\n\n        if (hasMatrix) {\n          modelMatrix.set(constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo));\n          matrix = getExtendedMat3FromMat4(modelMatrix);\n        } else {\n          matrix = valueArray;\n          const orientation = constantOrientation ? getOrientation : getOrientation(object, objectInfo);\n          const scale = constantScale ? getScale : getScale(object, objectInfo);\n          calculateTransformMatrix(matrix, orientation, scale);\n          matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n        }\n\n        instanceModelMatrixData[i++] = matrix[0];\n        instanceModelMatrixData[i++] = matrix[1];\n        instanceModelMatrixData[i++] = matrix[2];\n        instanceModelMatrixData[i++] = matrix[3];\n        instanceModelMatrixData[i++] = matrix[4];\n        instanceModelMatrixData[i++] = matrix[5];\n        instanceModelMatrixData[i++] = matrix[6];\n        instanceModelMatrixData[i++] = matrix[7];\n        instanceModelMatrixData[i++] = matrix[8];\n        instanceModelMatrixData[i++] = matrix[9];\n        instanceModelMatrixData[i++] = matrix[10];\n        instanceModelMatrixData[i++] = matrix[11];\n      }\n    }\n  }\n\n};\nfunction shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return coordinateSystem === constants/* COORDINATE_SYSTEM.CARTESIAN */.Df.CARTESIAN || coordinateSystem === constants/* COORDINATE_SYSTEM.METER_OFFSETS */.Df.METER_OFFSETS || coordinateSystem === constants/* COORDINATE_SYSTEM.DEFAULT */.Df.DEFAULT && !viewport.isGeospatial;\n}\n//# sourceMappingURL=matrix.js.map\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/mesh-layers/dist/esm/scenegraph-layer/scenegraph-layer-vertex.glsl.js\n/* harmony default export */ var scenegraph_layer_vertex_glsl = (\"#version 300 es\\nin vec3 instancePositions;\\nin vec3 instancePositions64Low;\\nin vec4 instanceColors;\\nin vec3 instancePickingColors;\\nin mat3 instanceModelMatrix;\\nin vec3 instanceTranslation;\\nuniform float sizeScale;\\nuniform float sizeMinPixels;\\nuniform float sizeMaxPixels;\\nuniform mat4 sceneModelMatrix;\\nuniform bool composeModelMatrix;\\nin vec4 POSITION;\\n\\n#ifdef HAS_UV\\n  in vec2 TEXCOORD_0;\\n#endif\\n\\n#ifdef MODULE_PBR\\n  #ifdef HAS_NORMALS\\n    in vec4 NORMAL;\\n  #endif\\n#endif\\nout vec4 vColor;\\n#ifndef MODULE_PBR\\n  #ifdef HAS_UV\\n    out vec2 vTEXCOORD_0;\\n  #endif\\n#endif\\nvoid main(void) {\\n  #if defined(HAS_UV) && !defined(MODULE_PBR)\\n    vTEXCOORD_0 = TEXCOORD_0;\\n    geometry.uv = vTEXCOORD_0;\\n  #endif\\n\\n  geometry.worldPosition = instancePositions;\\n  geometry.pickingColor = instancePickingColors;\\n\\n  vec3 normal = vec3(0.0, 0.0, 1.0);\\n  #ifdef MODULE_PBR\\n    #ifdef HAS_NORMALS\\n      normal = instanceModelMatrix * (sceneModelMatrix * vec4(NORMAL.xyz, 0.0)).xyz;\\n    #endif\\n  #endif\\n\\n  float originalSize = project_size_to_pixel(sizeScale);\\n  float clampedSize = clamp(originalSize, sizeMinPixels, sizeMaxPixels);\\n\\n  vec3 pos = (instanceModelMatrix * (sceneModelMatrix * POSITION).xyz) * sizeScale * (clampedSize / originalSize) + instanceTranslation;\\n  if(composeModelMatrix) {\\n    DECKGL_FILTER_SIZE(pos, geometry);\\n    geometry.normal = project_normal(normal);\\n    geometry.worldPosition += pos;\\n    gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\\n  }\\n  else {\\n    pos = project_size(pos);\\n    DECKGL_FILTER_SIZE(pos, geometry);\\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, geometry.position);\\n    geometry.normal = project_normal(normal);\\n  }\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n\\n  #ifdef MODULE_PBR\\n    pbr_vPosition = geometry.position.xyz;\\n    #ifdef HAS_NORMALS\\n      pbr_vNormal = geometry.normal;\\n    #endif\\n\\n    #ifdef HAS_UV\\n      pbr_vUV = TEXCOORD_0;\\n    #else\\n      pbr_vUV = vec2(0., 0.);\\n    #endif\\n    geometry.uv = pbr_vUV;\\n  #endif\\n\\n  vColor = instanceColors;\\n  DECKGL_FILTER_COLOR(vColor, geometry);\\n}\\n\");\n//# sourceMappingURL=scenegraph-layer-vertex.glsl.js.map\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/mesh-layers/dist/esm/scenegraph-layer/scenegraph-layer-fragment.glsl.js\n/* harmony default export */ var scenegraph_layer_fragment_glsl = (\"#version 300 es\\nuniform float opacity;\\nin vec4 vColor;\\n\\nout vec4 fragmentColor;\\n#ifndef MODULE_PBR\\n  #if defined(HAS_UV) && defined(HAS_BASECOLORMAP)\\n    in vec2 vTEXCOORD_0;\\n    uniform sampler2D u_BaseColorSampler;\\n  #endif\\n#endif\\n\\nvoid main(void) {\\n  #ifdef MODULE_PBR\\n    fragmentColor = vColor * pbr_filterColor(vec4(0));\\n    geometry.uv = pbr_vUV;\\n  #else\\n    #if defined(HAS_UV) && defined(HAS_BASECOLORMAP)\\n      fragmentColor = vColor * texture2D(u_BaseColorSampler, vTEXCOORD_0);\\n      geometry.uv = vTEXCOORD_0;\\n    #else\\n      fragmentColor = vColor;\\n    #endif\\n  #endif\\n\\n  fragmentColor.a *= opacity;\\n  DECKGL_FILTER_COLOR(fragmentColor, geometry);\\n}\\n\");\n//# sourceMappingURL=scenegraph-layer-fragment.glsl.js.map\n;// CONCATENATED MODULE: ./node_modules/@deck.gl/mesh-layers/dist/esm/scenegraph-layer/scenegraph-layer.js\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst defaultProps = {\n  scenegraph: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  _lighting: 'flat',\n  _imageBasedLightingEnvironment: null,\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  },\n  loaders: [gltf_loader/* GLTFLoader */.E]\n};\nclass ScenegraphLayer extends lib_layer/* default */.Z {\n  constructor(...args) {\n    super(...args);\n\n    (0,defineProperty/* default */.Z)(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    const modules = [project32/* default */.Z, picking/* default */.Z];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr/* pbr */.b);\n    }\n\n    return {\n      vs: scenegraph_layer_vertex_glsl,\n      fs: scenegraph_layer_fragment_glsl,\n      modules\n    };\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: 5121,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph();\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState(context) {\n    super.finalizeState(context);\n\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph() {\n    const props = this.props;\n    const {\n      gl\n    } = this.context;\n    let scenegraphData = null;\n\n    if (props.scenegraph instanceof scenegraph_node/* default */.Z) {\n      scenegraphData = {\n        scenes: [props.scenegraph]\n      };\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      const gltf = props.scenegraph;\n      const gltfObjects = (0,create_gltf_objects/* default */.Z)(gl, gltf, this._getModelOptions());\n      scenegraphData = {\n        gltf,\n        ...gltfObjects\n      };\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw());\n    } else if (props.scenegraph) {\n      log/* default.deprecated */.Z.deprecated('ScenegraphLayer.props.scenegraph', 'Use GLTFLoader instead of GLTFScenegraphLoader')();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {\n      layer: this,\n      gl\n    };\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof scenegraph_node/* default */.Z) {\n      this._deleteScenegraph();\n\n      this._applyAllAttributes(scenegraph);\n\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n\n      this.setState({\n        scenegraph,\n        animator\n      });\n    } else if (scenegraph !== null) {\n      log/* default.warn */.Z.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n    Object.keys(animationsProp).sort().forEach(key => {\n      const value = animationsProp[key];\n\n      if (key === '*') {\n        animations.forEach(animation => {\n          Object.assign(animation, value);\n        });\n      } else if (Number.isFinite(Number(key))) {\n        const number = Number(key);\n\n        if (number >= 0 && number < animations.length) {\n          Object.assign(animations[number], value);\n        } else {\n          log/* default.warn */.Z.warn(\"animation \".concat(key, \" not found\"))();\n        }\n      } else {\n        const findResult = animations.find(({\n          name\n        }) => name === key);\n\n        if (findResult) {\n          Object.assign(findResult, value);\n        } else {\n          log/* default.warn */.Z.warn(\"animation \".concat(key, \" not found\"))();\n        }\n      }\n    });\n  }\n\n  _deleteScenegraph() {\n    const {\n      scenegraph\n    } = this.state;\n\n    if (scenegraph instanceof scenegraph_node/* default */.Z) {\n      scenegraph.delete();\n    }\n  }\n\n  _getModelOptions() {\n    const {\n      _imageBasedLightingEnvironment\n    } = this.props;\n    let env = null;\n\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({\n          gl: this.context.gl,\n          layer: this\n        });\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !(0,esm/* isWebGL2 */.D0)(this.context.gl),\n        ...this.getShaders()\n      },\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      attributesAvailable: true\n    });\n    if (!this.state.scenegraph) return;\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({\n    moduleParameters = null,\n    parameters = {},\n    context\n  }) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {\n      viewport\n    } = this.context;\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      opacity,\n      coordinateSystem\n    } = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {\n      worldMatrix\n    }) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n\n}\n\n(0,defineProperty/* default */.Z)(ScenegraphLayer, \"defaultProps\", defaultProps);\n\n(0,defineProperty/* default */.Z)(ScenegraphLayer, \"layerName\", 'ScenegraphLayer');\n//# sourceMappingURL=scenegraph-layer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///520\n")}}]);