"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[798],{7164:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63367);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8182);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8743);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a texture to look up per instance attributes for batched primitives. For example, store each primitive\'s pick color in the texture.\n *\n * @alias BatchTable\n * @constructor\n * @private\n *\n * @param {Context} context The context in which the batch table is created.\n * @param {Object[]} attributes An array of objects describing a per instance attribute. Each object contains a datatype, components per attributes, whether it is normalized and a function name\n *     to retrieve the value in the vertex shader.\n * @param {Number} numberOfInstances The number of instances in a batch table.\n *\n * @example\n * // create the batch table\n * var attributes = [{\n *     functionName : \'getShow\',\n *     componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n *     componentsPerAttribute : 1\n * }, {\n *     functionName : \'getPickColor\',\n *     componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n *     componentsPerAttribute : 4,\n *     normalize : true\n * }];\n * var batchTable = new BatchTable(context, attributes, 5);\n *\n * // when creating the draw commands, update the uniform map and the vertex shader\n * vertexShaderSource = batchTable.getVertexShaderCallback()(vertexShaderSource);\n * var shaderProgram = ShaderProgram.fromCache({\n *    // ...\n *    vertexShaderSource : vertexShaderSource,\n * });\n *\n * drawCommand.shaderProgram = shaderProgram;\n * drawCommand.uniformMap = batchTable.getUniformMapCallback()(uniformMap);\n *\n * // use the attribute function names in the shader to retrieve the instance values\n * // ...\n * attribute float batchId;\n *\n * void main() {\n *     // ...\n *     float show = getShow(batchId);\n *     vec3 pickColor = getPickColor(batchId);\n *     // ...\n * }\n */\nfunction BatchTable(context, attributes, numberOfInstances) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(context)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("context is required");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(attributes)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("attributes is required");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(numberOfInstances)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("numberOfInstances is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._attributes = attributes;\n  this._numberOfInstances = numberOfInstances;\n\n  if (attributes.length === 0) {\n    return;\n  }\n\n  // PERFORMANCE_IDEA: We may be able to arrange the attributes so they can be packing into fewer texels.\n  // Right now, an attribute with one component uses an entire texel when 4 single component attributes can\n  // be packed into a texel.\n  //\n  // Packing floats into unsigned byte textures makes the problem worse. A single component float attribute\n  // will be packed into a single texel leaving 3 texels unused. 4 texels are reserved for each float attribute\n  // regardless of how many components it has.\n  var pixelDatatype = getDatatype(attributes);\n  var textureFloatSupported = context.floatingPointTexture;\n  var packFloats =\n    pixelDatatype === _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FLOAT */ .Z.FLOAT && !textureFloatSupported;\n  var offsets = createOffsets(attributes, packFloats);\n\n  var stride = getStride(offsets, attributes, packFloats);\n  var maxNumberOfInstancesPerRow = Math.floor(\n    _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].maximumTextureSize */ .Z.maximumTextureSize / stride\n  );\n\n  var instancesPerWidth = Math.min(\n    numberOfInstances,\n    maxNumberOfInstancesPerRow\n  );\n  var width = stride * instancesPerWidth;\n  var height = Math.ceil(numberOfInstances / instancesPerWidth);\n\n  var stepX = 1.0 / width;\n  var centerX = stepX * 0.5;\n  var stepY = 1.0 / height;\n  var centerY = stepY * 0.5;\n\n  this._textureDimensions = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(width, height);\n  this._textureStep = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(stepX, centerX, stepY, centerY);\n  this._pixelDatatype = !packFloats\n    ? pixelDatatype\n    : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE;\n  this._packFloats = packFloats;\n  this._offsets = offsets;\n  this._stride = stride;\n  this._texture = undefined;\n\n  var batchLength = 4 * width * height;\n  this._batchValues =\n    pixelDatatype === _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FLOAT */ .Z.FLOAT && !packFloats\n      ? new Float32Array(batchLength)\n      : new Uint8Array(batchLength);\n  this._batchValuesDirty = false;\n}\n\nObject.defineProperties(BatchTable.prototype, {\n  /**\n   * The attribute descriptions.\n   * @memberOf BatchTable.prototype\n   * @type {Object[]}\n   * @readonly\n   */\n  attributes: {\n    get: function () {\n      return this._attributes;\n    },\n  },\n  /**\n   * The number of instances.\n   * @memberOf BatchTable.prototype\n   * @type {Number}\n   * @readonly\n   */\n  numberOfInstances: {\n    get: function () {\n      return this._numberOfInstances;\n    },\n  },\n});\n\nfunction getDatatype(attributes) {\n  var foundFloatDatatype = false;\n  var length = attributes.length;\n  for (var i = 0; i < length; ++i) {\n    if (attributes[i].componentDatatype !== _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE) {\n      foundFloatDatatype = true;\n      break;\n    }\n  }\n  return foundFloatDatatype ? _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FLOAT */ .Z.FLOAT : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE;\n}\n\nfunction getAttributeType(attributes, attributeIndex) {\n  var componentsPerAttribute =\n    attributes[attributeIndex].componentsPerAttribute;\n  if (componentsPerAttribute === 2) {\n    return _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z;\n  } else if (componentsPerAttribute === 3) {\n    return _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z;\n  } else if (componentsPerAttribute === 4) {\n    return _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z;\n  }\n  return Number;\n}\n\nfunction createOffsets(attributes, packFloats) {\n  var offsets = new Array(attributes.length);\n\n  var currentOffset = 0;\n  var attributesLength = attributes.length;\n  for (var i = 0; i < attributesLength; ++i) {\n    var attribute = attributes[i];\n    var componentDatatype = attribute.componentDatatype;\n\n    offsets[i] = currentOffset;\n\n    if (componentDatatype !== _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE && packFloats) {\n      currentOffset += 4;\n    } else {\n      ++currentOffset;\n    }\n  }\n\n  return offsets;\n}\n\nfunction getStride(offsets, attributes, packFloats) {\n  var length = offsets.length;\n  var lastOffset = offsets[length - 1];\n  var lastAttribute = attributes[length - 1];\n  var componentDatatype = lastAttribute.componentDatatype;\n\n  if (componentDatatype !== _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE && packFloats) {\n    return lastOffset + 4;\n  }\n  return lastOffset + 1;\n}\n\nvar scratchPackedFloatCartesian4 = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction getPackedFloat(array, index, result) {\n  var packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, index, scratchPackedFloatCartesian4);\n  var x = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpackFloat */ .Z.unpackFloat(packed);\n\n  packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, index + 4, scratchPackedFloatCartesian4);\n  var y = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpackFloat */ .Z.unpackFloat(packed);\n\n  packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, index + 8, scratchPackedFloatCartesian4);\n  var z = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpackFloat */ .Z.unpackFloat(packed);\n\n  packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(array, index + 12, scratchPackedFloatCartesian4);\n  var w = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpackFloat */ .Z.unpackFloat(packed);\n\n  return _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(x, y, z, w, result);\n}\n\nfunction setPackedAttribute(value, array, index) {\n  var packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packFloat */ .Z.packFloat(value.x, scratchPackedFloatCartesian4);\n  _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(packed, array, index);\n\n  packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packFloat */ .Z.packFloat(value.y, packed);\n  _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(packed, array, index + 4);\n\n  packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packFloat */ .Z.packFloat(value.z, packed);\n  _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(packed, array, index + 8);\n\n  packed = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].packFloat */ .Z.packFloat(value.w, packed);\n  _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(packed, array, index + 12);\n}\n\nvar scratchGetAttributeCartesian4 = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n/**\n * Gets the value of an attribute in the table.\n *\n * @param {Number} instanceIndex The index of the instance.\n * @param {Number} attributeIndex The index of the attribute.\n * @param {undefined|Cartesian2|Cartesian3|Cartesian4} [result] The object onto which to store the result. The type is dependent on the attribute\'s number of components.\n * @returns {Number|Cartesian2|Cartesian3|Cartesian4} The attribute value stored for the instance.\n *\n * @exception {DeveloperError} instanceIndex is out of range.\n * @exception {DeveloperError} attributeIndex is out of range.\n */\nBatchTable.prototype.getBatchedAttribute = function (\n  instanceIndex,\n  attributeIndex,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (instanceIndex < 0 || instanceIndex >= this._numberOfInstances) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("instanceIndex is out of range.");\n  }\n  if (attributeIndex < 0 || attributeIndex >= this._attributes.length) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("attributeIndex is out of range");\n  }\n  //>>includeEnd(\'debug\');\n\n  var attributes = this._attributes;\n  var offset = this._offsets[attributeIndex];\n  var stride = this._stride;\n\n  var index = 4 * stride * instanceIndex + 4 * offset;\n  var value;\n\n  if (\n    this._packFloats &&\n    attributes[attributeIndex].componentDatatype !== _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE\n  ) {\n    value = getPackedFloat(\n      this._batchValues,\n      index,\n      scratchGetAttributeCartesian4\n    );\n  } else {\n    value = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].unpack */ .Z.unpack(\n      this._batchValues,\n      index,\n      scratchGetAttributeCartesian4\n    );\n  }\n\n  var attributeType = getAttributeType(attributes, attributeIndex);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(attributeType.fromCartesian4)) {\n    return attributeType.fromCartesian4(value, result);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(attributeType.clone)) {\n    return attributeType.clone(value, result);\n  }\n\n  return value.x;\n};\n\nvar setAttributeScratchValues = [\n  undefined,\n  undefined,\n  new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(),\n  new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n];\nvar setAttributeScratchCartesian4 = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n/**\n * Sets the value of an attribute in the table.\n *\n * @param {Number} instanceIndex The index of the instance.\n * @param {Number} attributeIndex The index of the attribute.\n * @param {Number|Cartesian2|Cartesian3|Cartesian4} value The value to be stored in the table. The type of value will depend on the number of components of the attribute.\n *\n * @exception {DeveloperError} instanceIndex is out of range.\n * @exception {DeveloperError} attributeIndex is out of range.\n */\nBatchTable.prototype.setBatchedAttribute = function (\n  instanceIndex,\n  attributeIndex,\n  value\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (instanceIndex < 0 || instanceIndex >= this._numberOfInstances) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("instanceIndex is out of range.");\n  }\n  if (attributeIndex < 0 || attributeIndex >= this._attributes.length) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("attributeIndex is out of range");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(value)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("value is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var attributes = this._attributes;\n  var result =\n    setAttributeScratchValues[\n      attributes[attributeIndex].componentsPerAttribute\n    ];\n  var currentAttribute = this.getBatchedAttribute(\n    instanceIndex,\n    attributeIndex,\n    result\n  );\n  var attributeType = getAttributeType(this._attributes, attributeIndex);\n  var entriesEqual = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(attributeType.equals)\n    ? attributeType.equals(currentAttribute, value)\n    : currentAttribute === value;\n  if (entriesEqual) {\n    return;\n  }\n\n  var attributeValue = setAttributeScratchCartesian4;\n  attributeValue.x = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(value.x) ? value.x : value;\n  attributeValue.y = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(value.y) ? value.y : 0.0;\n  attributeValue.z = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(value.z) ? value.z : 0.0;\n  attributeValue.w = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(value.w) ? value.w : 0.0;\n\n  var offset = this._offsets[attributeIndex];\n  var stride = this._stride;\n  var index = 4 * stride * instanceIndex + 4 * offset;\n\n  if (\n    this._packFloats &&\n    attributes[attributeIndex].componentDatatype !== _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE\n  ) {\n    setPackedAttribute(attributeValue, this._batchValues, index);\n  } else {\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].pack */ .Z.pack(attributeValue, this._batchValues, index);\n  }\n\n  this._batchValuesDirty = true;\n};\n\nfunction createTexture(batchTable, context) {\n  var dimensions = batchTable._textureDimensions;\n  batchTable._texture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    context: context,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: batchTable._pixelDatatype,\n    width: dimensions.x,\n    height: dimensions.y,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NEAREST */ .Z.NEAREST,\n    flipY: false,\n  });\n}\n\nfunction updateTexture(batchTable) {\n  var dimensions = batchTable._textureDimensions;\n  batchTable._texture.copyFrom({\n    source: {\n      width: dimensions.x,\n      height: dimensions.y,\n      arrayBufferView: batchTable._batchValues,\n    },\n  });\n}\n\n/**\n * Creates/updates the batch table texture.\n * @param {FrameState} frameState The frame state.\n *\n * @exception {RuntimeError} The floating point texture extension is required but not supported.\n */\nBatchTable.prototype.update = function (frameState) {\n  if (\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._texture) && !this._batchValuesDirty) ||\n    this._attributes.length === 0\n  ) {\n    return;\n  }\n\n  this._batchValuesDirty = false;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._texture)) {\n    createTexture(this, frameState.context);\n  }\n  updateTexture(this);\n};\n\n/**\n * Gets a function that will update a uniform map to contain values for looking up values in the batch table.\n *\n * @returns {BatchTable.updateUniformMapCallback} A callback for updating uniform maps.\n */\nBatchTable.prototype.getUniformMapCallback = function () {\n  var that = this;\n  return function (uniformMap) {\n    if (that._attributes.length === 0) {\n      return uniformMap;\n    }\n\n    var batchUniformMap = {\n      batchTexture: function () {\n        return that._texture;\n      },\n      batchTextureDimensions: function () {\n        return that._textureDimensions;\n      },\n      batchTextureStep: function () {\n        return that._textureStep;\n      },\n    };\n    return (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(uniformMap, batchUniformMap);\n  };\n};\n\nfunction getGlslComputeSt(batchTable) {\n  var stride = batchTable._stride;\n\n  // GLSL batchId is zero-based: [0, numberOfInstances - 1]\n  if (batchTable._textureDimensions.y === 1) {\n    return (\n      "uniform vec4 batchTextureStep; \\n" +\n      "vec2 computeSt(float batchId) \\n" +\n      "{ \\n" +\n      "    float stepX = batchTextureStep.x; \\n" +\n      "    float centerX = batchTextureStep.y; \\n" +\n      "    float numberOfAttributes = float(" +\n      stride +\n      "); \\n" +\n      "    return vec2(centerX + (batchId * numberOfAttributes * stepX), 0.5); \\n" +\n      "} \\n"\n    );\n  }\n\n  return (\n    "uniform vec4 batchTextureStep; \\n" +\n    "uniform vec2 batchTextureDimensions; \\n" +\n    "vec2 computeSt(float batchId) \\n" +\n    "{ \\n" +\n    "    float stepX = batchTextureStep.x; \\n" +\n    "    float centerX = batchTextureStep.y; \\n" +\n    "    float stepY = batchTextureStep.z; \\n" +\n    "    float centerY = batchTextureStep.w; \\n" +\n    "    float numberOfAttributes = float(" +\n    stride +\n    "); \\n" +\n    "    float xId = mod(batchId * numberOfAttributes, batchTextureDimensions.x); \\n" +\n    "    float yId = floor(batchId * numberOfAttributes / batchTextureDimensions.x); \\n" +\n    "    return vec2(centerX + (xId * stepX), centerY + (yId * stepY)); \\n" +\n    "} \\n"\n  );\n}\n\nfunction getComponentType(componentsPerAttribute) {\n  if (componentsPerAttribute === 1) {\n    return "float";\n  }\n  return "vec" + componentsPerAttribute;\n}\n\nfunction getComponentSwizzle(componentsPerAttribute) {\n  if (componentsPerAttribute === 1) {\n    return ".x";\n  } else if (componentsPerAttribute === 2) {\n    return ".xy";\n  } else if (componentsPerAttribute === 3) {\n    return ".xyz";\n  }\n  return "";\n}\n\nfunction getGlslAttributeFunction(batchTable, attributeIndex) {\n  var attributes = batchTable._attributes;\n  var attribute = attributes[attributeIndex];\n  var componentsPerAttribute = attribute.componentsPerAttribute;\n  var functionName = attribute.functionName;\n  var functionReturnType = getComponentType(componentsPerAttribute);\n  var functionReturnValue = getComponentSwizzle(componentsPerAttribute);\n\n  var offset = batchTable._offsets[attributeIndex];\n\n  var glslFunction =\n    functionReturnType +\n    " " +\n    functionName +\n    "(float batchId) \\n" +\n    "{ \\n" +\n    "    vec2 st = computeSt(batchId); \\n" +\n    "    st.x += batchTextureStep.x * float(" +\n    offset +\n    "); \\n";\n\n  if (\n    batchTable._packFloats &&\n    attribute.componentDatatype !== _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE\n  ) {\n    glslFunction +=\n      "vec4 textureValue; \\n" +\n      "textureValue.x = czm_unpackFloat(texture2D(batchTexture, st)); \\n" +\n      "textureValue.y = czm_unpackFloat(texture2D(batchTexture, st + vec2(batchTextureStep.x, 0.0))); \\n" +\n      "textureValue.z = czm_unpackFloat(texture2D(batchTexture, st + vec2(batchTextureStep.x * 2.0, 0.0))); \\n" +\n      "textureValue.w = czm_unpackFloat(texture2D(batchTexture, st + vec2(batchTextureStep.x * 3.0, 0.0))); \\n";\n  } else {\n    glslFunction += "    vec4 textureValue = texture2D(batchTexture, st); \\n";\n  }\n\n  glslFunction +=\n    "    " +\n    functionReturnType +\n    " value = textureValue" +\n    functionReturnValue +\n    "; \\n";\n\n  if (\n    batchTable._pixelDatatype === _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE &&\n    attribute.componentDatatype === _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE &&\n    !attribute.normalize\n  ) {\n    glslFunction += "value *= 255.0; \\n";\n  } else if (\n    batchTable._pixelDatatype === _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FLOAT */ .Z.FLOAT &&\n    attribute.componentDatatype === _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE &&\n    attribute.normalize\n  ) {\n    glslFunction += "value /= 255.0; \\n";\n  }\n\n  glslFunction += "    return value; \\n" + "} \\n";\n  return glslFunction;\n}\n\n/**\n * Gets a function that will update a vertex shader to contain functions for looking up values in the batch table.\n *\n * @returns {BatchTable.updateVertexShaderSourceCallback} A callback for updating a vertex shader source.\n */\nBatchTable.prototype.getVertexShaderCallback = function () {\n  var attributes = this._attributes;\n  if (attributes.length === 0) {\n    return function (source) {\n      return source;\n    };\n  }\n\n  var batchTableShader = "uniform highp sampler2D batchTexture; \\n";\n  batchTableShader += getGlslComputeSt(this) + "\\n";\n\n  var length = attributes.length;\n  for (var i = 0; i < length; ++i) {\n    batchTableShader += getGlslAttributeFunction(this, i);\n  }\n\n  return function (source) {\n    var mainIndex = source.indexOf("void main");\n    var beforeMain = source.substring(0, mainIndex);\n    var afterMain = source.substring(mainIndex);\n    return beforeMain + "\\n" + batchTableShader + "\\n" + afterMain;\n  };\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see BatchTable#destroy\n */\nBatchTable.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see BatchTable#isDestroyed\n */\nBatchTable.prototype.destroy = function () {\n  this._texture = this._texture && this._texture.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this);\n};\n\n/**\n * A callback for updating uniform maps.\n * @callback BatchTable.updateUniformMapCallback\n *\n * @param {Object} uniformMap The uniform map.\n * @returns {Object} The new uniform map with properties for retrieving values from the batch table.\n */\n\n/**\n * A callback for updating a vertex shader source.\n * @callback BatchTable.updateVertexShaderSourceCallback\n *\n * @param {String} vertexShaderSource The vertex shader source.\n * @returns {String} The new vertex shader source with the functions for retrieving batch table values injected.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (BatchTable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7164\n')},40384:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ BatchTableHierarchy; }\n/* harmony export */ });\n/* harmony import */ var _Core_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23401);\n/* harmony import */ var _AttributeType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77072);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83856);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8182);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(82982);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62200);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(17041);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9407);\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Object for handling the <code>3DTILES_batch_table_hierarchy</code> extension\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.extension The <code>3DTILES_batch_table_hierarchy</code> extension object.\n * @param {Uint8Array} [options.binaryBody] The binary body of the batch table\n *\n * @alias BatchTableHierarchy\n * @constructor\n *\n * @private\n */\nfunction BatchTableHierarchy(options) {\n  this._classes = undefined;\n  this._classIds = undefined;\n  this._classIndexes = undefined;\n  this._parentCounts = undefined;\n  this._parentIndexes = undefined;\n  this._parentIds = undefined;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.object */ .Z.typeOf.object("options.extension", options.extension);\n  //>>includeEnd(\'debug\');\n\n  initialize(this, options.extension, options.binaryBody);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  validateHierarchy(this);\n  //>>includeEnd(\'debug\');\n}\n\n/**\n * Parse the batch table hierarchy from the\n * <code>3DTILES_batch_table_hierarchy</code> extension.\n *\n * @param {BatchTableHierarchy} hierarchy The hierarchy instance\n * @param {Object} hierarchyJson The JSON of the extension\n * @param {Uint8Array} [binaryBody] The binary body of the batch table for accessing binary properties\n * @private\n */\nfunction initialize(hierarchy, hierarchyJson, binaryBody) {\n  var i;\n  var classId;\n  var binaryAccessor;\n\n  var instancesLength = hierarchyJson.instancesLength;\n  var classes = hierarchyJson.classes;\n  var classIds = hierarchyJson.classIds;\n  var parentCounts = hierarchyJson.parentCounts;\n  var parentIds = hierarchyJson.parentIds;\n  var parentIdsLength = instancesLength;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(classIds.byteOffset)) {\n    classIds.componentType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(\n      classIds.componentType,\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT\n    );\n    classIds.type = _AttributeType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SCALAR */ .Z.SCALAR;\n    binaryAccessor = (0,_getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(classIds);\n    classIds = binaryAccessor.createArrayBufferView(\n      binaryBody.buffer,\n      binaryBody.byteOffset + classIds.byteOffset,\n      instancesLength\n    );\n  }\n\n  var parentIndexes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentCounts)) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentCounts.byteOffset)) {\n      parentCounts.componentType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(\n        parentCounts.componentType,\n        _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT\n      );\n      parentCounts.type = _AttributeType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SCALAR */ .Z.SCALAR;\n      binaryAccessor = (0,_getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(parentCounts);\n      parentCounts = binaryAccessor.createArrayBufferView(\n        binaryBody.buffer,\n        binaryBody.byteOffset + parentCounts.byteOffset,\n        instancesLength\n      );\n    }\n    parentIndexes = new Uint16Array(instancesLength);\n    parentIdsLength = 0;\n    for (i = 0; i < instancesLength; ++i) {\n      parentIndexes[i] = parentIdsLength;\n      parentIdsLength += parentCounts[i];\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentIds) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentIds.byteOffset)) {\n    parentIds.componentType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(\n      parentIds.componentType,\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT\n    );\n    parentIds.type = _AttributeType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].SCALAR */ .Z.SCALAR;\n    binaryAccessor = (0,_getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(parentIds);\n    parentIds = binaryAccessor.createArrayBufferView(\n      binaryBody.buffer,\n      binaryBody.byteOffset + parentIds.byteOffset,\n      parentIdsLength\n    );\n  }\n\n  var classesLength = classes.length;\n  for (i = 0; i < classesLength; ++i) {\n    var classInstancesLength = classes[i].length;\n    var properties = classes[i].instances;\n    var binaryProperties = getBinaryProperties(\n      classInstancesLength,\n      properties,\n      binaryBody\n    );\n    classes[i].instances = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(binaryProperties, properties);\n  }\n\n  var classCounts = (0,_Core_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(new Array(classesLength), 0);\n  var classIndexes = new Uint16Array(instancesLength);\n  for (i = 0; i < instancesLength; ++i) {\n    classId = classIds[i];\n    classIndexes[i] = classCounts[classId];\n    ++classCounts[classId];\n  }\n\n  hierarchy._classes = classes;\n  hierarchy._classIds = classIds;\n  hierarchy._classIndexes = classIndexes;\n  hierarchy._parentCounts = parentCounts;\n  hierarchy._parentIndexes = parentIndexes;\n  hierarchy._parentIds = parentIds;\n}\n\nfunction getBinaryProperties(featuresLength, properties, binaryBody) {\n  var binaryProperties;\n  for (var name in properties) {\n    if (properties.hasOwnProperty(name)) {\n      var property = properties[name];\n      var byteOffset = property.byteOffset;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(byteOffset)) {\n        // This is a binary property\n        var componentType = property.componentType;\n        var type = property.type;\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(componentType)) {\n          throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("componentType is required.");\n        }\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(type)) {\n          throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("type is required.");\n        }\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(binaryBody)) {\n          throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(\n            "Property " + name + " requires a batch table binary."\n          );\n        }\n\n        var binaryAccessor = (0,_getBinaryAccessor_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(property);\n        var componentCount = binaryAccessor.componentsPerAttribute;\n        var classType = binaryAccessor.classType;\n        var typedArray = binaryAccessor.createArrayBufferView(\n          binaryBody.buffer,\n          binaryBody.byteOffset + byteOffset,\n          featuresLength\n        );\n\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(binaryProperties)) {\n          binaryProperties = {};\n        }\n\n        // Store any information needed to access the binary data, including the typed array,\n        // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n        binaryProperties[name] = {\n          typedArray: typedArray,\n          componentCount: componentCount,\n          type: classType,\n        };\n      }\n    }\n  }\n  return binaryProperties;\n}\n\n//>>includeStart(\'debug\', pragmas.debug);\nvar scratchValidateStack = [];\nfunction validateHierarchy(hierarchy) {\n  var stack = scratchValidateStack;\n  stack.length = 0;\n\n  var classIds = hierarchy._classIds;\n  var instancesLength = classIds.length;\n\n  for (var i = 0; i < instancesLength; ++i) {\n    validateInstance(hierarchy, i, stack);\n  }\n}\n\nfunction validateInstance(hierarchy, instanceIndex, stack) {\n  var parentCounts = hierarchy._parentCounts;\n  var parentIds = hierarchy._parentIds;\n  var parentIndexes = hierarchy._parentIndexes;\n  var classIds = hierarchy._classIds;\n  var instancesLength = classIds.length;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentIds)) {\n    // No need to validate if there are no parents\n    return;\n  }\n\n  if (instanceIndex >= instancesLength) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "Parent index " +\n        instanceIndex +\n        " exceeds the total number of instances: " +\n        instancesLength\n    );\n  }\n  if (stack.indexOf(instanceIndex) > -1) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "Circular dependency detected in the batch table hierarchy."\n    );\n  }\n\n  stack.push(instanceIndex);\n  var parentCount = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentCounts) ? parentCounts[instanceIndex] : 1;\n  var parentIndex = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentCounts)\n    ? parentIndexes[instanceIndex]\n    : instanceIndex;\n  for (var i = 0; i < parentCount; ++i) {\n    var parentId = parentIds[parentIndex + i];\n    // Stop the traversal when the instance has no parent (its parentId equals itself), else continue the traversal.\n    if (parentId !== instanceIndex) {\n      validateInstance(hierarchy, parentId, stack);\n    }\n  }\n  stack.pop(instanceIndex);\n}\n//>>includeEnd(\'debug\');\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nvar scratchVisited = [];\nvar scratchStack = [];\nvar marker = 0;\nfunction traverseHierarchyMultipleParents(\n  hierarchy,\n  instanceIndex,\n  endConditionCallback\n) {\n  var classIds = hierarchy._classIds;\n  var parentCounts = hierarchy._parentCounts;\n  var parentIds = hierarchy._parentIds;\n  var parentIndexes = hierarchy._parentIndexes;\n  var instancesLength = classIds.length;\n\n  // Ignore instances that have already been visited. This occurs in diamond inheritance situations.\n  // Use a marker value to indicate that an instance has been visited, which increments with each run.\n  // This is more efficient than clearing the visited array every time.\n  var visited = scratchVisited;\n  visited.length = Math.max(visited.length, instancesLength);\n  var visitedMarker = ++marker;\n\n  var stack = scratchStack;\n  stack.length = 0;\n  stack.push(instanceIndex);\n\n  while (stack.length > 0) {\n    instanceIndex = stack.pop();\n    if (visited[instanceIndex] === visitedMarker) {\n      // This instance has already been visited, stop traversal\n      continue;\n    }\n    visited[instanceIndex] = visitedMarker;\n    var result = endConditionCallback(hierarchy, instanceIndex);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(result)) {\n      // The end condition was met, stop the traversal and return the result\n      return result;\n    }\n    var parentCount = parentCounts[instanceIndex];\n    var parentIndex = parentIndexes[instanceIndex];\n    for (var i = 0; i < parentCount; ++i) {\n      var parentId = parentIds[parentIndex + i];\n      // Stop the traversal when the instance has no parent (its parentId equals itself)\n      // else add the parent to the stack to continue the traversal.\n      if (parentId !== instanceIndex) {\n        stack.push(parentId);\n      }\n    }\n  }\n}\n\nfunction traverseHierarchySingleParent(\n  hierarchy,\n  instanceIndex,\n  endConditionCallback\n) {\n  var hasParent = true;\n  while (hasParent) {\n    var result = endConditionCallback(hierarchy, instanceIndex);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(result)) {\n      // The end condition was met, stop the traversal and return the result\n      return result;\n    }\n    var parentId = hierarchy._parentIds[instanceIndex];\n    hasParent = parentId !== instanceIndex;\n    instanceIndex = parentId;\n  }\n}\n\nfunction traverseHierarchy(hierarchy, instanceIndex, endConditionCallback) {\n  // Traverse over the hierarchy and process each instance with the endConditionCallback.\n  // When the endConditionCallback returns a value, the traversal stops and that value is returned.\n  var parentCounts = hierarchy._parentCounts;\n  var parentIds = hierarchy._parentIds;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentIds)) {\n    return endConditionCallback(hierarchy, instanceIndex);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(parentCounts)) {\n    return traverseHierarchyMultipleParents(\n      hierarchy,\n      instanceIndex,\n      endConditionCallback\n    );\n  }\n  return traverseHierarchySingleParent(\n    hierarchy,\n    instanceIndex,\n    endConditionCallback\n  );\n}\n\n/**\n * Returns whether the feature has this property.\n *\n * @param {Number} batchId the batch ID of the feature\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {Boolean} Whether the feature has this property.\n * @private\n */\nBatchTableHierarchy.prototype.hasProperty = function (batchId, propertyId) {\n  var result = traverseHierarchy(this, batchId, function (\n    hierarchy,\n    instanceIndex\n  ) {\n    var classId = hierarchy._classIds[instanceIndex];\n    var instances = hierarchy._classes[classId].instances;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(instances[propertyId])) {\n      return true;\n    }\n  });\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(result);\n};\n\n/**\n * Returns whether any feature has this property.\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {Boolean} Whether any feature has this property.\n * @private\n */\nBatchTableHierarchy.prototype.propertyExists = function (propertyId) {\n  var classes = this._classes;\n  var classesLength = classes.length;\n  for (var i = 0; i < classesLength; ++i) {\n    var instances = classes[i].instances;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(instances[propertyId])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {Number} batchId the batch ID of the feature\n * @param {Number} index The index of the entity.\n * @param {String[]} [results] An array into which to store the results.\n * @returns {String[]} The property IDs.\n * @private\n */\nBatchTableHierarchy.prototype.getPropertyIds = function (batchId, results) {\n  results = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(results) ? results : [];\n  results.length = 0;\n\n  traverseHierarchy(this, batchId, function (hierarchy, instanceIndex) {\n    var classId = hierarchy._classIds[instanceIndex];\n    var instances = hierarchy._classes[classId].instances;\n    for (var name in instances) {\n      if (instances.hasOwnProperty(name)) {\n        if (results.indexOf(name) === -1) {\n          results.push(name);\n        }\n      }\n    }\n  });\n\n  return results;\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n *\n * @param {Number} batchId the batch ID of the feature\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.\n * @private\n */\nBatchTableHierarchy.prototype.getProperty = function (batchId, propertyId) {\n  return traverseHierarchy(this, batchId, function (hierarchy, instanceIndex) {\n    var classId = hierarchy._classIds[instanceIndex];\n    var instanceClass = hierarchy._classes[classId];\n    var indexInClass = hierarchy._classIndexes[instanceIndex];\n    var propertyValues = instanceClass.instances[propertyId];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(propertyValues)) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(propertyValues.typedArray)) {\n        return getBinaryProperty(propertyValues, indexInClass);\n      }\n      return (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(propertyValues[indexInClass], true);\n    }\n  });\n};\n\nfunction getBinaryProperty(binaryProperty, index) {\n  var typedArray = binaryProperty.typedArray;\n  var componentCount = binaryProperty.componentCount;\n  if (componentCount === 1) {\n    return typedArray[index];\n  }\n  return binaryProperty.type.unpack(typedArray, index * componentCount);\n}\n\n/**\n * Sets the value of the property with the given ID. Only properties of the\n * instance may be set; parent properties may not be set.\n *\n * @param {Number} batchId The batchId of the feature\n * @param {String} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {Boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n *\n * @exception {DeveloperError} when setting an inherited property\n * @private\n */\nBatchTableHierarchy.prototype.setProperty = function (\n  batchId,\n  propertyId,\n  value\n) {\n  var result = traverseHierarchy(this, batchId, function (\n    hierarchy,\n    instanceIndex\n  ) {\n    var classId = hierarchy._classIds[instanceIndex];\n    var instanceClass = hierarchy._classes[classId];\n    var indexInClass = hierarchy._classIndexes[instanceIndex];\n    var propertyValues = instanceClass.instances[propertyId];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(propertyValues)) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (instanceIndex !== batchId) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n          \'Inherited property "\' + propertyId + \'" is read-only.\'\n        );\n      }\n      //>>includeEnd(\'debug\');\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(propertyValues.typedArray)) {\n        setBinaryProperty(propertyValues, indexInClass, value);\n      } else {\n        propertyValues[indexInClass] = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(value, true);\n      }\n      return true;\n    }\n  });\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(result);\n};\n\nfunction setBinaryProperty(binaryProperty, index, value) {\n  var typedArray = binaryProperty.typedArray;\n  var componentCount = binaryProperty.componentCount;\n  if (componentCount === 1) {\n    typedArray[index] = value;\n  } else {\n    binaryProperty.type.pack(value, typedArray, index * componentCount);\n  }\n}\n\n/**\n * Check if a feature belongs to a class with the given name\n *\n * @param {Number} batchId The batch ID of the feature\n * @param {String} className The name of the class\n * @return {Boolean} <code>true</code> if the feature belongs to the class given by className, or <code>false</code> otherwise\n * @private\n */\nBatchTableHierarchy.prototype.isClass = function (batchId, className) {\n  // PERFORMANCE_IDEA : cache results in the ancestor classes to speed up this check if this area becomes a hotspot\n  // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n  var result = traverseHierarchy(this, batchId, function (\n    hierarchy,\n    instanceIndex\n  ) {\n    var classId = hierarchy._classIds[instanceIndex];\n    var instanceClass = hierarchy._classes[classId];\n    if (instanceClass.name === className) {\n      return true;\n    }\n  });\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(result);\n};\n\n/**\n * Get the name of the class a given feature belongs to\n *\n * @param {Number} batchId The batch ID of the feature\n * @return {String} The name of the class this feature belongs to\n */\nBatchTableHierarchy.prototype.getClassName = function (batchId) {\n  var classId = this._classIds[batchId];\n  var instanceClass = this._classes[classId];\n  return instanceClass.name;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40384\n')},31937:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ BatchTexture; }\n/* harmony export */ });\n/* harmony import */ var _Core_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23401);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8743);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An object that manages color, show/hide and picking textures for a batch\n * table or feature table.\n *\n * @param {Object} options Object with the following properties:\n * @param {Number} featuresLength The number of features in the batch table or feature table\n * @param {Cesium3DTileContent} content The content this batch texture belongs to. Used for creating the picking texture.\n * @param {Function} [colorChangedCallback] A callback function that is called whenever the color of a feature changes.\n *\n * @alias BatchTexture\n * @constructor\n *\n * @private\n */\nfunction BatchTexture(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("options.featuresLength", options.featuresLength);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("options.content", options.content);\n  //>>includeEnd(\'debug\');\n\n  var featuresLength = options.featuresLength;\n\n  // PERFORMANCE_IDEA: These parallel arrays probably generate cache misses in get/set color/show\n  // and use A LOT of memory.  How can we use less memory?\n  this._showAlphaProperties = undefined; // [Show (0 or 255), Alpha (0 to 255)] property for each feature\n  this._batchValues = undefined; // Per-feature RGBA (A is based on the color\'s alpha and feature\'s show property)\n\n  this._batchValuesDirty = false;\n  this._batchTexture = undefined;\n  this._defaultTexture = undefined;\n\n  this._pickTexture = undefined;\n  this._pickIds = [];\n\n  // Dimensions for batch and pick textures\n  var textureDimensions;\n  var textureStep;\n\n  if (featuresLength > 0) {\n    // PERFORMANCE_IDEA: this can waste memory in the last row in the uncommon case\n    // when more than one row is needed (e.g., > 16K features in one tile)\n    var width = Math.min(featuresLength, _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].maximumTextureSize */ .Z.maximumTextureSize);\n    var height = Math.ceil(featuresLength / _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].maximumTextureSize */ .Z.maximumTextureSize);\n    var stepX = 1.0 / width;\n    var centerX = stepX * 0.5;\n    var stepY = 1.0 / height;\n    var centerY = stepY * 0.5;\n\n    textureDimensions = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(width, height);\n    textureStep = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(stepX, centerX, stepY, centerY);\n  }\n\n  this._translucentFeaturesLength = 0;\n  this._featuresLength = featuresLength;\n  this._textureDimensions = textureDimensions;\n  this._textureStep = textureStep;\n  this._content = options.content;\n  this._colorChangedCallback = options.colorChangedCallback;\n}\n\nObject.defineProperties(BatchTexture.prototype, {\n  /**\n   * Number of features that are translucent\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  translucentFeaturesLength: {\n    get: function () {\n      return this._translucentFeaturesLength;\n    },\n  },\n\n  /**\n   * Total size of all GPU resources used by this batch texture.\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  memorySizeInBytes: {\n    get: function () {\n      var memory = 0;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._pickTexture)) {\n        memory += this._pickTexture.sizeInBytes;\n      }\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._batchTexture)) {\n        memory += this._batchTexture.sizeInBytes;\n      }\n      return memory;\n    },\n  },\n\n  /**\n   * Dimensions of the underlying batch texture.\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Cartesian2}\n   * @readonly\n   * @private\n   */\n  textureDimensions: {\n    get: function () {\n      return this._textureDimensions;\n    },\n  },\n\n  /**\n   * Size of each texture and distance from side to center of a texel in\n   * each direction. Stored as (stepX, centerX, stepY, centerY)\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Cartesian4}\n   * @readonly\n   * @private\n   */\n  textureStep: {\n    get: function () {\n      return this._textureStep;\n    },\n  },\n\n  /**\n   * The underlying texture used for styling. The texels are accessed\n   * by batch ID, and the value is the color of this feature after accounting\n   * for show/hide settings.\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  batchTexture: {\n    get: function () {\n      return this._batchTexture;\n    },\n  },\n\n  /**\n   * The default texture to use when there are no batch values\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  defaultTexture: {\n    get: function () {\n      return this._defaultTexture;\n    },\n  },\n\n  /**\n   * The underlying texture used for picking. The texels are accessed by\n   * batch ID, and the value is the pick color.\n   *\n   * @memberof BatchTexture.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  pickTexture: {\n    get: function () {\n      return this._pickTexture;\n    },\n  },\n});\n\nBatchTexture.DEFAULT_COLOR_VALUE = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].WHITE */ .Z.WHITE;\nBatchTexture.DEFAULT_SHOW_VALUE = true;\n\nfunction getByteLength(batchTexture) {\n  var dimensions = batchTexture._textureDimensions;\n  return dimensions.x * dimensions.y * 4;\n}\n\nfunction getBatchValues(batchTexture) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(batchTexture._batchValues)) {\n    // Default batch texture to RGBA = 255: white highlight (RGB) and show/alpha = true/255 (A).\n    var byteLength = getByteLength(batchTexture);\n    var bytes = new Uint8Array(byteLength);\n    (0,_Core_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(bytes, 255);\n    batchTexture._batchValues = bytes;\n  }\n\n  return batchTexture._batchValues;\n}\n\nfunction getShowAlphaProperties(batchTexture) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(batchTexture._showAlphaProperties)) {\n    var byteLength = 2 * batchTexture._featuresLength;\n    var bytes = new Uint8Array(byteLength);\n    // [Show = true, Alpha = 255]\n    (0,_Core_arrayFill_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(bytes, 255);\n    batchTexture._showAlphaProperties = bytes;\n  }\n  return batchTexture._showAlphaProperties;\n}\n\nfunction checkBatchId(batchId, featuresLength) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "batchId is required and between zero and featuresLength - 1 (" +\n        featuresLength -\n        +")."\n    );\n  }\n}\n\n/**\n * Set whether a feature is visible.\n *\n * @param {Number} batchId the ID of the feature\n * @param {Boolean} show <code>true</code> if the feature should be shown, <code>false</code> otherwise\n * @private\n */\nBatchTexture.prototype.setShow = function (batchId, show) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  checkBatchId(batchId, this._featuresLength);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.bool */ .Z.typeOf.bool("show", show);\n  //>>includeEnd(\'debug\');\n\n  if (show && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._showAlphaProperties)) {\n    // Avoid allocating since the default is show = true\n    return;\n  }\n\n  var showAlphaProperties = getShowAlphaProperties(this);\n  var propertyOffset = batchId * 2;\n\n  var newShow = show ? 255 : 0;\n  if (showAlphaProperties[propertyOffset] !== newShow) {\n    showAlphaProperties[propertyOffset] = newShow;\n\n    var batchValues = getBatchValues(this);\n\n    // Compute alpha used in the shader based on show and color.alpha properties\n    var offset = batchId * 4 + 3;\n    batchValues[offset] = show ? showAlphaProperties[propertyOffset + 1] : 0;\n\n    this._batchValuesDirty = true;\n  }\n};\n\n/**\n * Set the show for all features at once.\n *\n * @param {Boolean} show <code>true</code> if the feature should be shown, <code>false</code> otherwise\n * @private\n */\nBatchTexture.prototype.setAllShow = function (show) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.bool */ .Z.typeOf.bool("show", show);\n  //>>includeEnd(\'debug\');\n\n  var featuresLength = this._featuresLength;\n  for (var i = 0; i < featuresLength; ++i) {\n    this.setShow(i, show);\n  }\n};\n\n/**\n * Check the current show value for a feature\n *\n * @param {Number} batchId the ID of the feature\n * @return {Boolean} <code>true</code> if the feature is shown, or <code>false</code> otherwise\n * @private\n */\nBatchTexture.prototype.getShow = function (batchId) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  checkBatchId(batchId, this._featuresLength);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._showAlphaProperties)) {\n    // Avoid allocating since the default is show = true\n    return true;\n  }\n\n  var offset = batchId * 2;\n  return this._showAlphaProperties[offset] === 255;\n};\n\nvar scratchColorBytes = new Array(4);\n\n/**\n * Set the styling color of a feature\n *\n * @param {Number} batchId the ID of the feature\n * @param {Color} color the color to assign to this feature.\n *\n * @private\n */\nBatchTexture.prototype.setColor = function (batchId, color) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  checkBatchId(batchId, this._featuresLength);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("color", color);\n  //>>includeEnd(\'debug\');\n\n  if (\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equals */ .Z.equals(color, BatchTexture.DEFAULT_COLOR_VALUE) &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._batchValues)\n  ) {\n    // Avoid allocating since the default is white\n    return;\n  }\n\n  var newColor = color.toBytes(scratchColorBytes);\n  var newAlpha = newColor[3];\n\n  var batchValues = getBatchValues(this);\n  var offset = batchId * 4;\n\n  var showAlphaProperties = getShowAlphaProperties(this);\n  var propertyOffset = batchId * 2;\n\n  if (\n    batchValues[offset] !== newColor[0] ||\n    batchValues[offset + 1] !== newColor[1] ||\n    batchValues[offset + 2] !== newColor[2] ||\n    showAlphaProperties[propertyOffset + 1] !== newAlpha\n  ) {\n    batchValues[offset] = newColor[0];\n    batchValues[offset + 1] = newColor[1];\n    batchValues[offset + 2] = newColor[2];\n\n    var wasTranslucent = showAlphaProperties[propertyOffset + 1] !== 255;\n\n    // Compute alpha used in the shader based on show and color.alpha properties\n    var show = showAlphaProperties[propertyOffset] !== 0;\n    batchValues[offset + 3] = show ? newAlpha : 0;\n    showAlphaProperties[propertyOffset + 1] = newAlpha;\n\n    // Track number of translucent features so we know if this tile needs\n    // opaque commands, translucent commands, or both for rendering.\n    var isTranslucent = newAlpha !== 255;\n    if (isTranslucent && !wasTranslucent) {\n      ++this._translucentFeaturesLength;\n    } else if (!isTranslucent && wasTranslucent) {\n      --this._translucentFeaturesLength;\n    }\n\n    this._batchValuesDirty = true;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._colorChangedCallback)) {\n      this._colorChangedCallback(batchId, color);\n    }\n  }\n};\n\n/**\n * Set the styling color for all features at once\n *\n * @param {Color} color the color to assign to all features.\n *\n * @private\n */\nBatchTexture.prototype.setAllColor = function (color) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("color", color);\n  //>>includeEnd(\'debug\');\n\n  var featuresLength = this._featuresLength;\n  for (var i = 0; i < featuresLength; ++i) {\n    this.setColor(i, color);\n  }\n};\n\n/**\n * Get the current color of a feature\n *\n * @param {Number} batchId The ID of the feature\n * @param {Color} result A color object where the result will be stored.\n * @return {Color} The color assigned to the selected feature\n *\n * @private\n */\nBatchTexture.prototype.getColor = function (batchId, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  checkBatchId(batchId, this._featuresLength);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._batchValues)) {\n    return _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(BatchTexture.DEFAULT_COLOR_VALUE, result);\n  }\n\n  var batchValues = this._batchValues;\n  var offset = batchId * 4;\n\n  var showAlphaProperties = this._showAlphaProperties;\n  var propertyOffset = batchId * 2;\n\n  return _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromBytes */ .Z.fromBytes(\n    batchValues[offset],\n    batchValues[offset + 1],\n    batchValues[offset + 2],\n    showAlphaProperties[propertyOffset + 1],\n    result\n  );\n};\n\n/**\n * Get the pick color of a feature. This feature is an RGBA encoding of the\n * pick ID.\n *\n * @param {Number} batchId The ID of the feature\n * @return {PickId} The picking color assigned to this feature\n *\n * @private\n */\nBatchTexture.prototype.getPickColor = function (batchId) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  checkBatchId(batchId, this._featuresLength);\n  //>>includeEnd(\'debug\');\n  return this._pickIds[batchId];\n};\n\nfunction createTexture(batchTexture, context, bytes) {\n  var dimensions = batchTexture._textureDimensions;\n  return new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    context: context,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n    source: {\n      width: dimensions.x,\n      height: dimensions.y,\n      arrayBufferView: bytes,\n    },\n    flipY: false,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n}\n\nfunction createPickTexture(batchTexture, context) {\n  var featuresLength = batchTexture._featuresLength;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(batchTexture._pickTexture) && featuresLength > 0) {\n    var pickIds = batchTexture._pickIds;\n    var byteLength = getByteLength(batchTexture);\n    var bytes = new Uint8Array(byteLength);\n    var content = batchTexture._content;\n\n    // PERFORMANCE_IDEA: we could skip the pick texture completely by allocating\n    // a continuous range of pickIds and then converting the base pickId + batchId\n    // to RGBA in the shader.  The only consider is precision issues, which might\n    // not be an issue in WebGL 2.\n    for (var i = 0; i < featuresLength; ++i) {\n      var pickId = context.createPickId(content.getFeature(i));\n      pickIds.push(pickId);\n\n      var pickColor = pickId.color;\n      var offset = i * 4;\n      bytes[offset] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.red);\n      bytes[offset + 1] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.green);\n      bytes[offset + 2] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.blue);\n      bytes[offset + 3] = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.alpha);\n    }\n\n    batchTexture._pickTexture = createTexture(batchTexture, context, bytes);\n    content.tileset._statistics.batchTableByteLength +=\n      batchTexture._pickTexture.sizeInBytes;\n  }\n}\n\nfunction updateBatchTexture(batchTexture) {\n  var dimensions = batchTexture._textureDimensions;\n  // PERFORMANCE_IDEA: Instead of rewriting the entire texture, use fine-grained\n  // texture updates when less than, for example, 10%, of the values changed.  Or\n  // even just optimize the common case when one feature show/color changed.\n  batchTexture._batchTexture.copyFrom({\n    source: {\n      width: dimensions.x,\n      height: dimensions.y,\n      arrayBufferView: batchTexture._batchValues,\n    },\n  });\n}\n\nBatchTexture.prototype.update = function (tileset, frameState) {\n  var context = frameState.context;\n  this._defaultTexture = context.defaultTexture;\n\n  var passes = frameState.passes;\n  if (passes.pick || passes.postProcess) {\n    createPickTexture(this, context);\n  }\n\n  if (this._batchValuesDirty) {\n    this._batchValuesDirty = false;\n\n    // Create batch texture on-demand\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._batchTexture)) {\n      this._batchTexture = createTexture(this, context, this._batchValues);\n      tileset._statistics.batchTableByteLength += this._batchTexture.sizeInBytes;\n    }\n\n    updateBatchTexture(this); // Apply per-feature show/color updates\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see BatchTexture#destroy\n * @private\n */\nBatchTexture.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * e = e && e.destroy();\n *\n * @see BatchTexture#isDestroyed\n * @private\n */\nBatchTexture.prototype.destroy = function () {\n  this._batchTexture = this._batchTexture && this._batchTexture.destroy();\n  this._pickTexture = this._pickTexture && this._pickTexture.destroy();\n\n  var pickIds = this._pickIds;\n  var length = pickIds.length;\n  for (var i = 0; i < length; ++i) {\n    pickIds[i].destroy();\n  }\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31937\n')},68524:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8182);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(82982);\n/* harmony import */ var _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11954);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _Core_ExperimentalFeatures_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(54862);\n/* harmony import */ var _Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12540);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(72248);\n/* harmony import */ var _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(82968);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9407);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(8379);\n/* harmony import */ var _Axis_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(66577);\n/* harmony import */ var _Cesium3DTileBatchTable_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(84020);\n/* harmony import */ var _Cesium3DTileFeature_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(52381);\n/* harmony import */ var _Cesium3DTileFeatureTable_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(79553);\n/* harmony import */ var _ClassificationModel_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(40370);\n/* harmony import */ var _Model_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(16626);\n/* harmony import */ var _ModelAnimationLoop_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(61841);\n/* harmony import */ var _ModelExperimental_ModelExperimental_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(46521);\n/* harmony import */ var _ModelUtility_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(15322);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Batched3DModel|Batched 3D Model}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Batched3DModel3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Batched3DModel3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._model = undefined;\n  this._batchTable = undefined;\n  this._features = undefined;\n\n  this._classificationType = tileset.vectorClassificationOnly\n    ? undefined\n    : tileset.classificationType;\n\n  // Populate from gltf when available\n  this._batchIdAttributeName = undefined;\n  this._diffuseAttributeOrUniformName = {};\n\n  this._rtcCenterTransform = undefined;\n  this._contentModelMatrix = undefined;\n\n  this.featurePropertiesDirty = false;\n  this._groupMetadata = undefined;\n\n  initialize(this, arrayBuffer, byteOffset);\n}\n\n// This can be overridden for testing purposes\nBatched3DModel3DTileContent._deprecationWarning = _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z;\n\nObject.defineProperties(Batched3DModel3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return this._batchTable.featuresLength;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return this._model.pointsLength;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      return this._model.trianglesLength;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      return this._model.geometryByteLength;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return this._model.texturesByteLength;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return this._batchTable.memorySizeInBytes;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._model.readyPromise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    },\n  },\n\n  groupMetadata: {\n    get: function () {\n      return this._groupMetadata;\n    },\n    set: function (value) {\n      this._groupMetadata = value;\n    },\n  },\n});\n\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction getBatchIdAttributeName(gltf) {\n  var batchIdAttributeName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n    gltf,\n    "_BATCHID"\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(batchIdAttributeName)) {\n    batchIdAttributeName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n      gltf,\n      "BATCHID"\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(batchIdAttributeName)) {\n      Batched3DModel3DTileContent._deprecationWarning(\n        "b3dm-legacy-batchid",\n        "The glTF in this b3dm uses the semantic `BATCHID`. Application-specific semantics should be prefixed with an underscore: `_BATCHID`."\n      );\n    }\n  }\n  return batchIdAttributeName;\n}\n\nfunction getVertexShaderCallback(content) {\n  return function (vs, programId) {\n    var batchTable = content._batchTable;\n    var handleTranslucent = !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(content._classificationType);\n\n    var gltf = content._model.gltf;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(gltf)) {\n      content._batchIdAttributeName = getBatchIdAttributeName(gltf);\n      content._diffuseAttributeOrUniformName[\n        programId\n      ] = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].getDiffuseAttributeOrUniform */ .Z.getDiffuseAttributeOrUniform(gltf, programId);\n    }\n\n    var callback = batchTable.getVertexShaderCallback(\n      handleTranslucent,\n      content._batchIdAttributeName,\n      content._diffuseAttributeOrUniformName[programId]\n    );\n    return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(callback) ? callback(vs) : vs;\n  };\n}\n\nfunction getFragmentShaderCallback(content) {\n  return function (fs, programId) {\n    var batchTable = content._batchTable;\n    var handleTranslucent = !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(content._classificationType);\n\n    var gltf = content._model.gltf;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(gltf)) {\n      content._diffuseAttributeOrUniformName[\n        programId\n      ] = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].getDiffuseAttributeOrUniform */ .Z.getDiffuseAttributeOrUniform(gltf, programId);\n    }\n    var callback = batchTable.getFragmentShaderCallback(\n      handleTranslucent,\n      content._diffuseAttributeOrUniformName[programId],\n      false\n    );\n    return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(callback) ? callback(fs) : fs;\n  };\n}\n\nfunction getPickIdCallback(content) {\n  return function () {\n    return content._batchTable.getPickId();\n  };\n}\n\nfunction getClassificationFragmentShaderCallback(content) {\n  return function (fs) {\n    var batchTable = content._batchTable;\n    var callback = batchTable.getClassificationFragmentShaderCallback();\n    return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(callback) ? callback(fs) : fs;\n  };\n}\n\nfunction createColorChangedCallback(content) {\n  return function (batchId, color) {\n    content._model.updateCommands(batchId, color);\n  };\n}\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  var tileset = content._tileset;\n  var tile = content._tile;\n  var resource = content._resource;\n\n  var byteStart = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(byteOffset, 0);\n  byteOffset = byteStart;\n\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  var version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n      "Only Batched 3D Model version 1 is supported.  Version " +\n        version +\n        " is not."\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  var byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchLength;\n\n  // Legacy header #1: [batchLength] [batchTableByteLength]\n  // Legacy header #2: [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]\n  // Current header: [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // If the header is in the first legacy format \'batchTableJsonByteLength\' will be the start of the JSON string (a quotation mark) or the glTF magic.\n  // Accordingly its first byte will be either 0x22 or 0x67, and so the minimum uint32 expected is 0x22000000 = 570425344 = 570MB. It is unlikely that the feature table JSON will exceed this length.\n  // The check for the second legacy format is similar, except it checks \'batchTableBinaryByteLength\' instead\n  if (batchTableJsonByteLength >= 570425344) {\n    // First legacy check\n    byteOffset -= sizeOfUint32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    Batched3DModel3DTileContent._deprecationWarning(\n      "b3dm-legacy-header",\n      "This b3dm header is using the legacy format [batchLength] [batchTableByteLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Batched3DModel."\n    );\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    // Second legacy check\n    byteOffset -= sizeOfUint32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    Batched3DModel3DTileContent._deprecationWarning(\n      "b3dm-legacy-header",\n      "This b3dm header is using the legacy format [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Batched3DModel."\n    );\n  }\n\n  var featureTableJson;\n  if (featureTableJsonByteLength === 0) {\n    featureTableJson = {\n      BATCH_LENGTH: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(batchLength, 0),\n    };\n  } else {\n    featureTableJson = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(\n      uint8Array,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    byteOffset += featureTableJsonByteLength;\n  }\n\n  var featureTableBinary = new Uint8Array(\n    arrayBuffer,\n    byteOffset,\n    featureTableBinaryByteLength\n  );\n  byteOffset += featureTableBinaryByteLength;\n\n  var featureTable = new _Cesium3DTileFeatureTable_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(\n    featureTableJson,\n    featureTableBinary\n  );\n\n  batchLength = featureTable.getGlobalProperty("BATCH_LENGTH");\n  featureTable.featuresLength = batchLength;\n\n  var batchTableJson;\n  var batchTableBinary;\n  if (batchTableJsonByteLength > 0) {\n    // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n    // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n    //\n    // We could also make another request for it, but that would make the property set/get\n    // API async, and would double the number of numbers in some cases.\n    batchTableJson = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(\n      uint8Array,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(\n        arrayBuffer,\n        byteOffset,\n        batchTableBinaryByteLength\n      );\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  var colorChangedCallback;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(content._classificationType)) {\n    colorChangedCallback = createColorChangedCallback(content);\n  }\n\n  var batchTable = new _Cesium3DTileBatchTable_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n    content,\n    batchLength,\n    batchTableJson,\n    batchTableBinary,\n    colorChangedCallback\n  );\n  content._batchTable = batchTable;\n\n  var gltfByteLength = byteStart + byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("glTF byte length must be greater than 0.");\n  }\n\n  var gltfView;\n  if (byteOffset % 4 === 0) {\n    gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    Batched3DModel3DTileContent._deprecationWarning(\n      "b3dm-glb-unaligned",\n      "The embedded glb is not aligned to a 4-byte boundary."\n    );\n    gltfView = new Uint8Array(\n      uint8Array.subarray(byteOffset, byteOffset + gltfByteLength)\n    );\n  }\n\n  var pickObject = {\n    content: content,\n    primitive: tileset,\n  };\n\n  content._rtcCenterTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].IDENTITY */ .Z.IDENTITY;\n  var rtcCenter = featureTable.getGlobalProperty(\n    "RTC_CENTER",\n    _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n    3\n  );\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(rtcCenter)) {\n    content._rtcCenterTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromTranslation */ .Z.fromTranslation(\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromArray */ .Z.fromArray(rtcCenter)\n    );\n  }\n\n  content._contentModelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].multiply */ .Z.multiply(\n    tile.computedTransform,\n    content._rtcCenterTransform,\n    new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z()\n  );\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(content._classificationType)) {\n    var modelOptions = {\n      gltf: gltfView,\n      cull: false, // The model is already culled by 3D Tiles\n      releaseGltfJson: true, // Models are unique and will not benefit from caching so save memory\n      opaquePass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE, // Draw opaque portions of the model during the 3D Tiles pass\n      basePath: resource,\n      modelMatrix: content._contentModelMatrix,\n      upAxis: tileset._gltfUpAxis,\n      forwardAxis: _Axis_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].X */ .Z.X,\n      incrementallyLoadTextures: false,\n    };\n\n    if (_Core_ExperimentalFeatures_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].enableModelExperimental */ .Z.enableModelExperimental) {\n      modelOptions.customShader = tileset.customShader;\n      content._model = _ModelExperimental_ModelExperimental_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].fromGltf */ .Z.fromGltf(modelOptions);\n    } else {\n      modelOptions = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(modelOptions, {\n        requestType: _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TILES3D */ .Z.TILES3D,\n        shadows: tileset.shadows,\n        debugWireframe: tileset.debugWireframe,\n        vertexShaderLoaded: getVertexShaderCallback(content),\n        fragmentShaderLoaded: getFragmentShaderCallback(content),\n        uniformMapLoaded: batchTable.getUniformMapCallback(),\n        pickIdLoaded: getPickIdCallback(content),\n        addBatchIdToGeneratedShaders: batchLength > 0, // If the batch table has values in it, generated shaders will need a batchId attribute\n        pickObject: pickObject,\n        imageBasedLightingFactor: tileset.imageBasedLightingFactor,\n        lightColor: tileset.lightColor,\n        luminanceAtZenith: tileset.luminanceAtZenith,\n        sphericalHarmonicCoefficients: tileset.sphericalHarmonicCoefficients,\n        specularEnvironmentMaps: tileset.specularEnvironmentMaps,\n        backFaceCulling: tileset.backFaceCulling,\n        showOutline: tileset.showOutline,\n      });\n      // PERFORMANCE_IDEA: patch the shader on demand, e.g., the first time show/color changes.\n      // The pick shader still needs to be patched.\n      content._model = new _Model_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(modelOptions);\n    }\n\n    content._model.readyPromise.then(function (model) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(model.activeAnimations)) {\n        model.activeAnimations.addAll({\n          loop: _ModelAnimationLoop_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].REPEAT */ .Z.REPEAT,\n        });\n      }\n    });\n  } else {\n    // This transcodes glTF to an internal representation for geometry so we can take advantage of the re-batching of vector data.\n    // For a list of limitations on the input glTF, see the documentation for classificationType of Cesium3DTileset.\n    content._model = new _ClassificationModel_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z({\n      gltf: gltfView,\n      cull: false, // The model is already culled by 3D Tiles\n      basePath: resource,\n      requestType: _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TILES3D */ .Z.TILES3D,\n      modelMatrix: content._contentModelMatrix,\n      upAxis: tileset._gltfUpAxis,\n      forwardAxis: _Axis_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].X */ .Z.X,\n      debugWireframe: tileset.debugWireframe,\n      vertexShaderLoaded: getVertexShaderCallback(content),\n      classificationShaderLoaded: getClassificationFragmentShaderCallback(\n        content\n      ),\n      uniformMapLoaded: batchTable.getUniformMapCallback(),\n      pickIdLoaded: getPickIdCallback(content),\n      classificationType: content._classificationType,\n      batchTable: batchTable,\n    });\n  }\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n    for (var i = 0; i < featuresLength; ++i) {\n      features[i] = new _Cesium3DTileFeature_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z(content, i);\n    }\n    content._features = features;\n  }\n}\n\nBatched3DModel3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return this._batchTable.hasProperty(batchId, name);\n};\n\nBatched3DModel3DTileContent.prototype.getFeature = function (batchId) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  var featuresLength = this.featuresLength;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "batchId is required and between zero and featuresLength - 1 (" +\n        (featuresLength - 1) +\n        ")."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nBatched3DModel3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {\n  color = enabled ? color : _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE;\n  if (this.featuresLength === 0) {\n    this._model.color = color;\n  } else {\n    this._batchTable.setAllColor(color);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.applyStyle = function (style) {\n  if (this.featuresLength === 0) {\n    var hasColorStyle = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(style) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(style.color);\n    var hasShowStyle = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(style) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(style.show);\n    this._model.color = hasColorStyle\n      ? style.color.evaluateColor(undefined, this._model.color)\n      : _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE, this._model.color);\n    this._model.show = hasShowStyle ? style.show.evaluate(undefined) : true;\n  } else {\n    this._batchTable.applyStyle(style);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.update = function (tileset, frameState) {\n  var commandStart = frameState.commandList.length;\n\n  var model = this._model;\n  var tile = this._tile;\n  var batchTable = this._batchTable;\n\n  // In the PROCESSING state we may be calling update() to move forward\n  // the content\'s resource loading.  In the READY state, it will\n  // actually generate commands.\n  batchTable.update(tileset, frameState);\n\n  this._contentModelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].multiply */ .Z.multiply(\n    tile.computedTransform,\n    this._rtcCenterTransform,\n    this._contentModelMatrix\n  );\n  model.modelMatrix = this._contentModelMatrix;\n\n  model.shadows = tileset.shadows;\n  model.imageBasedLightingFactor = tileset.imageBasedLightingFactor;\n  model.lightColor = tileset.lightColor;\n  model.luminanceAtZenith = tileset.luminanceAtZenith;\n  model.sphericalHarmonicCoefficients = tileset.sphericalHarmonicCoefficients;\n  model.specularEnvironmentMaps = tileset.specularEnvironmentMaps;\n  model.backFaceCulling = tileset.backFaceCulling;\n  model.debugWireframe = tileset.debugWireframe;\n\n  // Update clipping planes\n  var tilesetClippingPlanes = tileset.clippingPlanes;\n  model.referenceMatrix = tileset.clippingPlanesOriginMatrix;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(tilesetClippingPlanes) && tile.clippingPlanesDirty) {\n    // Dereference the clipping planes from the model if they are irrelevant.\n    // Link/Dereference directly to avoid ownership checks.\n    // This will also trigger synchronous shader regeneration to remove or add the clipping plane and color blending code.\n    model._clippingPlanes =\n      tilesetClippingPlanes.enabled && tile._isClipped\n        ? tilesetClippingPlanes\n        : undefined;\n  }\n\n  // If the model references a different ClippingPlaneCollection due to the tileset\'s collection being replaced with a\n  // ClippingPlaneCollection that gives this tile the same clipping status, update the model to use the new ClippingPlaneCollection.\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(tilesetClippingPlanes) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(model._clippingPlanes) &&\n    model._clippingPlanes !== tilesetClippingPlanes\n  ) {\n    model._clippingPlanes = tilesetClippingPlanes;\n  }\n\n  model.update(frameState);\n\n  // If any commands were pushed, add derived commands\n  var commandEnd = frameState.commandList.length;\n  if (\n    commandStart < commandEnd &&\n    (frameState.passes.render || frameState.passes.pick) &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(this._classificationType)\n  ) {\n    batchTable.addDerivedCommands(frameState, commandStart);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nBatched3DModel3DTileContent.prototype.destroy = function () {\n  this._model = this._model && this._model.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Batched3DModel3DTileContent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68524\n')},80349:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88108);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59947);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(39960);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12572);\n/* harmony import */ var _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(47861);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(72248);\n/* harmony import */ var _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(15720);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(68985);\n/* harmony import */ var _HeightReference_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(4260);\n/* harmony import */ var _HorizontalOrigin_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(62919);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(89917);\n/* harmony import */ var _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(48244);\n/* harmony import */ var _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(60473);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A viewport-aligned image positioned in the 3D scene, that is created\n * and rendered using a {@link BillboardCollection}.  A billboard is created and its initial\n * properties are set by calling {@link BillboardCollection#add}.\n * <br /><br />\n * <div align=\'center\'>\n * <img src=\'Images/Billboard.png\' width=\'400\' height=\'300\' /><br />\n * Example billboards\n * </div>\n *\n * @alias Billboard\n *\n * @performance Reading a property, e.g., {@link Billboard#show}, is constant time.\n * Assigning to a property is constant time but results in\n * CPU to GPU traffic when {@link BillboardCollection#update} is called.  The per-billboard traffic is\n * the same regardless of how many properties were updated.  If most billboards in a collection need to be\n * updated, it may be more efficient to clear the collection with {@link BillboardCollection#removeAll}\n * and add new billboards instead of modifying each one.\n *\n * @exception {DeveloperError} scaleByDistance.far must be greater than scaleByDistance.near\n * @exception {DeveloperError} translucencyByDistance.far must be greater than translucencyByDistance.near\n * @exception {DeveloperError} pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near\n * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n *\n * @see BillboardCollection\n * @see BillboardCollection#add\n * @see Label\n *\n * @internalConstructor\n * @class\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction Billboard(options, billboardCollection) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(options.disableDepthTestDistance) &&\n    options.disableDepthTestDistance < 0.0\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n      "disableDepthTestDistance must be greater than or equal to 0.0."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var translucencyByDistance = options.translucencyByDistance;\n  var pixelOffsetScaleByDistance = options.pixelOffsetScaleByDistance;\n  var scaleByDistance = options.scaleByDistance;\n  var distanceDisplayCondition = options.distanceDisplayCondition;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(translucencyByDistance)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (translucencyByDistance.far <= translucencyByDistance.near) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n        "translucencyByDistance.far must be greater than translucencyByDistance.near."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    translucencyByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(translucencyByDistance);\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(pixelOffsetScaleByDistance)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (pixelOffsetScaleByDistance.far <= pixelOffsetScaleByDistance.near) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n        "pixelOffsetScaleByDistance.far must be greater than pixelOffsetScaleByDistance.near."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    pixelOffsetScaleByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(\n      pixelOffsetScaleByDistance\n    );\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(scaleByDistance)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (scaleByDistance.far <= scaleByDistance.near) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n        "scaleByDistance.far must be greater than scaleByDistance.near."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    scaleByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(scaleByDistance);\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(distanceDisplayCondition)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (distanceDisplayCondition.far <= distanceDisplayCondition.near) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n        "distanceDisplayCondition.far must be greater than distanceDisplayCondition.near."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    distanceDisplayCondition = _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].clone */ .Z.clone(\n      distanceDisplayCondition\n    );\n  }\n\n  this._show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.show, true);\n  this._position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.position, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO)\n  );\n  this._actualPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(this._position); // For columbus view and 2D\n  this._pixelOffset = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.pixelOffset, _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO)\n  );\n  this._translate = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0.0, 0.0); // used by labels for glyph vertex translation\n  this._eyeOffset = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.eyeOffset, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO)\n  );\n  this._heightReference = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.heightReference,\n    _HeightReference_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].NONE */ .Z.NONE\n  );\n  this._verticalOrigin = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.verticalOrigin,\n    _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].CENTER */ .Z.CENTER\n  );\n  this._horizontalOrigin = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.horizontalOrigin,\n    _HorizontalOrigin_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].CENTER */ .Z.CENTER\n  );\n  this._scale = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.scale, 1.0);\n  this._color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.color, _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].WHITE */ .Z.WHITE));\n  this._rotation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.rotation, 0.0);\n  this._alignedAxis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.alignedAxis, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO)\n  );\n  this._width = options.width;\n  this._height = options.height;\n  this._scaleByDistance = scaleByDistance;\n  this._translucencyByDistance = translucencyByDistance;\n  this._pixelOffsetScaleByDistance = pixelOffsetScaleByDistance;\n  this._sizeInMeters = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.sizeInMeters, false);\n  this._distanceDisplayCondition = distanceDisplayCondition;\n  this._disableDepthTestDistance = options.disableDepthTestDistance;\n  this._id = options.id;\n  this._collection = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.collection, billboardCollection);\n\n  this._pickId = undefined;\n  this._pickPrimitive = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options._pickPrimitive, this);\n  this._billboardCollection = billboardCollection;\n  this._dirty = false;\n  this._index = -1; //Used only by BillboardCollection\n  this._batchIndex = undefined; // Used only by Vector3DTilePoints and BillboardCollection\n\n  this._imageIndex = -1;\n  this._imageIndexPromise = undefined;\n  this._imageId = undefined;\n  this._image = undefined;\n  this._imageSubRegion = undefined;\n  this._imageWidth = undefined;\n  this._imageHeight = undefined;\n\n  this._labelDimensions = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelTranslate = undefined;\n\n  var image = options.image;\n  var imageId = options.imageId;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(image)) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(imageId)) {\n      if (typeof image === "string") {\n        imageId = image;\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(image.src)) {\n        imageId = image.src;\n      } else {\n        imageId = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)();\n      }\n    }\n\n    this._imageId = imageId;\n    this._image = image;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(options.imageSubRegion)) {\n    this._imageId = imageId;\n    this._imageSubRegion = options.imageSubRegion;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n\n  this._actualClampedPosition = undefined;\n  this._removeCallbackFunc = undefined;\n  this._mode = _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D;\n\n  this._clusterShow = true;\n  this._outlineColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.outlineColor, _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].BLACK */ .Z.BLACK)\n  );\n  this._outlineWidth = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.outlineWidth, 0.0);\n\n  this._updateClamping();\n}\n\nvar SHOW_INDEX = (Billboard.SHOW_INDEX = 0);\nvar POSITION_INDEX = (Billboard.POSITION_INDEX = 1);\nvar PIXEL_OFFSET_INDEX = (Billboard.PIXEL_OFFSET_INDEX = 2);\nvar EYE_OFFSET_INDEX = (Billboard.EYE_OFFSET_INDEX = 3);\nvar HORIZONTAL_ORIGIN_INDEX = (Billboard.HORIZONTAL_ORIGIN_INDEX = 4);\nvar VERTICAL_ORIGIN_INDEX = (Billboard.VERTICAL_ORIGIN_INDEX = 5);\nvar SCALE_INDEX = (Billboard.SCALE_INDEX = 6);\nvar IMAGE_INDEX_INDEX = (Billboard.IMAGE_INDEX_INDEX = 7);\nvar COLOR_INDEX = (Billboard.COLOR_INDEX = 8);\nvar ROTATION_INDEX = (Billboard.ROTATION_INDEX = 9);\nvar ALIGNED_AXIS_INDEX = (Billboard.ALIGNED_AXIS_INDEX = 10);\nvar SCALE_BY_DISTANCE_INDEX = (Billboard.SCALE_BY_DISTANCE_INDEX = 11);\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = (Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX = 12);\nvar PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = (Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = 13);\nvar DISTANCE_DISPLAY_CONDITION = (Billboard.DISTANCE_DISPLAY_CONDITION = 14);\nvar DISABLE_DEPTH_DISTANCE = (Billboard.DISABLE_DEPTH_DISTANCE = 15);\nBillboard.TEXTURE_COORDINATE_BOUNDS = 16;\nvar SDF_INDEX = (Billboard.SDF_INDEX = 17);\nBillboard.NUMBER_OF_PROPERTIES = 18;\n\nfunction makeDirty(billboard, propertyChanged) {\n  var billboardCollection = billboard._billboardCollection;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(billboardCollection)) {\n    billboardCollection._updateBillboard(billboard, propertyChanged);\n    billboard._dirty = true;\n  }\n}\n\nObject.defineProperties(Billboard.prototype, {\n  /**\n   * Determines if this billboard will be shown.  Use this to hide or show a billboard, instead\n   * of removing it and re-adding it to the collection.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.bool */ .Z.typeOf.bool("value", value);\n      //>>includeEnd(\'debug\');\n\n      if (this._show !== value) {\n        this._show = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the Cartesian position of this billboard.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  position: {\n    get: function () {\n      return this._position;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug)\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n      //>>includeEnd(\'debug\');\n\n      var position = this._position;\n      if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(position, value)) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, position);\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, this._actualPosition);\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the height reference of this billboard.\n   * @memberof Billboard.prototype\n   * @type {HeightReference}\n   * @default HeightReference.NONE\n   */\n  heightReference: {\n    get: function () {\n      return this._heightReference;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug)\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n\n      var heightReference = this._heightReference;\n      if (value !== heightReference) {\n        this._heightReference = value;\n        this._updateClamping();\n        makeDirty(this, POSITION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the pixel offset in screen space from the origin of this billboard.  This is commonly used\n   * to align multiple billboards and labels at the same position, e.g., an image and text.  The\n   * screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n   * left to right, and <code>y</code> increases from top to bottom.\n   * <br /><br />\n   * <div align=\'center\'>\n   * <table border=\'0\' cellpadding=\'5\'><tr>\n   * <td align=\'center\'><code>default</code><br/><img src=\'Images/Billboard.setPixelOffset.default.png\' width=\'250\' height=\'188\' /></td>\n   * <td align=\'center\'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src=\'Images/Billboard.setPixelOffset.x50y-25.png\' width=\'250\' height=\'188\' /></td>\n   * </tr></table>\n   * The billboard\'s origin is indicated by the yellow point.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian2}\n   */\n  pixelOffset: {\n    get: function () {\n      return this._pixelOffset;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n      //>>includeEnd(\'debug\');\n\n      var pixelOffset = this._pixelOffset;\n      if (!_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(pixelOffset, value)) {\n        _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(value, pixelOffset);\n        makeDirty(this, PIXEL_OFFSET_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far scaling properties of a Billboard based on the billboard\'s distance from the camera.\n   * A billboard\'s scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard\'s scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard\'s scaleByDistance to scale by 1.5 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.scaleByDistance = new Cesium.NearFarScalar(1.5e2, 1.5, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable scaling by distance\n   * b.scaleByDistance = undefined;\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n        if (value.far <= value.near) {\n          throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n            "far distance must be greater than near distance."\n          );\n        }\n      }\n      //>>includeEnd(\'debug\');\n\n      var scaleByDistance = this._scaleByDistance;\n      if (!_Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(scaleByDistance, value)) {\n        this._scaleByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(value, scaleByDistance);\n        makeDirty(this, SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of a Billboard based on the billboard\'s distance from the camera.\n   * A billboard\'s translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard\'s translucency remains clamped to the nearest bound.  If undefined,\n   * translucencyByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard\'s translucency to 1.0 when the\n   * // camera is 1500 meters from the billboard and disappear as\n   * // the camera distance approaches 8.0e6 meters.\n   * b.translucencyByDistance = new Cesium.NearFarScalar(1.5e2, 1.0, 8.0e6, 0.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable translucency by distance\n   * b.translucencyByDistance = undefined;\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n        if (value.far <= value.near) {\n          throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n            "far distance must be greater than near distance."\n          );\n        }\n      }\n      //>>includeEnd(\'debug\');\n\n      var translucencyByDistance = this._translucencyByDistance;\n      if (!_Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(translucencyByDistance, value)) {\n        this._translucencyByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(\n          value,\n          translucencyByDistance\n        );\n        makeDirty(this, TRANSLUCENCY_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets near and far pixel offset scaling properties of a Billboard based on the billboard\'s distance from the camera.\n   * A billboard\'s pixel offset will be scaled between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard\'s pixel offset scale remains clamped to the nearest bound.  If undefined,\n   * pixelOffsetScaleByDistance will be disabled.\n   * @memberof Billboard.prototype\n   * @type {NearFarScalar}\n   *\n   * @example\n   * // Example 1.\n   * // Set a billboard\'s pixel offset scale to 0.0 when the\n   * // camera is 1500 meters from the billboard and scale pixel offset to 10.0 pixels\n   * // in the y direction the camera distance approaches 8.0e6 meters.\n   * b.pixelOffset = new Cesium.Cartesian2(0.0, 1.0);\n   * b.pixelOffsetScaleByDistance = new Cesium.NearFarScalar(1.5e2, 0.0, 8.0e6, 10.0);\n   *\n   * @example\n   * // Example 2.\n   * // disable pixel offset by distance\n   * b.pixelOffsetScaleByDistance = undefined;\n   */\n  pixelOffsetScaleByDistance: {\n    get: function () {\n      return this._pixelOffsetScaleByDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n        if (value.far <= value.near) {\n          throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n            "far distance must be greater than near distance."\n          );\n        }\n      }\n      //>>includeEnd(\'debug\');\n\n      var pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n      if (!_Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(pixelOffsetScaleByDistance, value)) {\n        this._pixelOffsetScaleByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(\n          value,\n          pixelOffsetScaleByDistance\n        );\n        makeDirty(this, PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the 3D Cartesian offset applied to this billboard in eye coordinates.  Eye coordinates is a left-handed\n   * coordinate system, where <code>x</code> points towards the viewer\'s right, <code>y</code> points up, and\n   * <code>z</code> points into the screen.  Eye coordinates use the same scale as world and model coordinates,\n   * which is typically meters.\n   * <br /><br />\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * <br /><br />\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer\'s or Earth\'s orientation.\n   * <br /><br />\n   * <div align=\'center\'>\n   * <table border=\'0\' cellpadding=\'5\'><tr>\n   * <td align=\'center\'><img src=\'Images/Billboard.setEyeOffset.one.png\' width=\'250\' height=\'188\' /></td>\n   * <td align=\'center\'><img src=\'Images/Billboard.setEyeOffset.two.png\' width=\'250\' height=\'188\' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   */\n  eyeOffset: {\n    get: function () {\n      return this._eyeOffset;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n      //>>includeEnd(\'debug\');\n\n      var eyeOffset = this._eyeOffset;\n      if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(eyeOffset, value)) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, eyeOffset);\n        makeDirty(this, EYE_OFFSET_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the horizontal origin of this billboard, which determines if the billboard is\n   * to the left, center, or right of its anchor position.\n   * <br /><br />\n   * <div align=\'center\'>\n   * <img src=\'Images/Billboard.setHorizontalOrigin.png\' width=\'648\' height=\'196\' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {HorizontalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n\n      if (this._horizontalOrigin !== value) {\n        this._horizontalOrigin = value;\n        makeDirty(this, HORIZONTAL_ORIGIN_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the vertical origin of this billboard, which determines if the billboard is\n   * to the above, below, or at the center of its anchor position.\n   * <br /><br />\n   * <div align=\'center\'>\n   * <img src=\'Images/Billboard.setVerticalOrigin.png\' width=\'695\' height=\'175\' /><br />\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {VerticalOrigin}\n   * @example\n   * // Use a bottom, left origin\n   * b.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;\n   * b.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n\n      if (this._verticalOrigin !== value) {\n        this._verticalOrigin = value;\n        makeDirty(this, VERTICAL_ORIGIN_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the uniform scale that is multiplied with the billboard\'s image size in pixels.\n   * A scale of <code>1.0</code> does not change the size of the billboard; a scale greater than\n   * <code>1.0</code> enlarges the billboard; a positive scale less than <code>1.0</code> shrinks\n   * the billboard.\n   * <br /><br />\n   * <div align=\'center\'>\n   * <img src=\'Images/Billboard.setScale.png\' width=\'400\' height=\'300\' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  scale: {\n    get: function () {\n      return this._scale;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n\n      if (this._scale !== value) {\n        this._scale = value;\n        makeDirty(this, SCALE_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the color that is multiplied with the billboard\'s texture.  This has two common use cases.  First,\n   * the same white texture may be used by many different billboards, each with a different color, to create\n   * colored billboards.  Second, the color\'s alpha component can be used to make the billboard translucent as shown below.\n   * An alpha of <code>0.0</code> makes the billboard transparent, and <code>1.0</code> makes the billboard opaque.\n   * <br /><br />\n   * <div align=\'center\'>\n   * <table border=\'0\' cellpadding=\'5\'><tr>\n   * <td align=\'center\'><code>default</code><br/><img src=\'Images/Billboard.setColor.Alpha255.png\' width=\'250\' height=\'188\' /></td>\n   * <td align=\'center\'><code>alpha : 0.5</code><br/><img src=\'Images/Billboard.setColor.Alpha127.png\' width=\'250\' height=\'188\' /></td>\n   * </tr></table>\n   * </div>\n   * <br />\n   * The red, green, blue, and alpha values are indicated by <code>value</code>\'s <code>red</code>, <code>green</code>,\n   * <code>blue</code>, and <code>alpha</code> properties as shown in Example 1.  These components range from <code>0.0</code>\n   * (no intensity) to <code>1.0</code> (full intensity).\n   * @memberof Billboard.prototype\n   * @type {Color}\n   *\n   * @example\n   * // Example 1. Assign yellow.\n   * b.color = Cesium.Color.YELLOW;\n   *\n   * @example\n   * // Example 2. Make a billboard 50% translucent.\n   * b.color = new Cesium.Color(1.0, 1.0, 1.0, 0.5);\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n      //>>includeEnd(\'debug\');\n\n      var color = this._color;\n      if (!_Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equals */ .Z.equals(color, value)) {\n        _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(value, color);\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the rotation angle in radians.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  rotation: {\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n\n      if (this._rotation !== value) {\n        this._rotation = value;\n        makeDirty(this, ROTATION_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the aligned axis in world space. The aligned axis is the unit vector that the billboard up vector points towards.\n   * The default is the zero vector, which means the billboard is aligned to the screen up vector.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @example\n   * // Example 1.\n   * // Have the billboard up vector point north\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   *\n   * @example\n   * // Example 2.\n   * // Have the billboard point east.\n   * billboard.alignedAxis = Cesium.Cartesian3.UNIT_Z;\n   * billboard.rotation = -Cesium.Math.PI_OVER_TWO;\n   *\n   * @example\n   * // Example 3.\n   * // Reset the aligned axis\n   * billboard.alignedAxis = Cesium.Cartesian3.ZERO;\n   */\n  alignedAxis: {\n    get: function () {\n      return this._alignedAxis;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n      //>>includeEnd(\'debug\');\n\n      var alignedAxis = this._alignedAxis;\n      if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(alignedAxis, value)) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, alignedAxis);\n        makeDirty(this, ALIGNED_AXIS_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a width for the billboard. If undefined, the image width will be used.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  width: {\n    get: function () {\n      return (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this._width, this._imageWidth);\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      }\n      //>>includeEnd(\'debug\');\n      if (this._width !== value) {\n        this._width = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a height for the billboard. If undefined, the image height will be used.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  height: {\n    get: function () {\n      return (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this._height, this._imageHeight);\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      }\n      //>>includeEnd(\'debug\');\n      if (this._height !== value) {\n        this._height = value;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets if the billboard size is in meters or pixels. <code>true</code> to size the billboard in meters;\n   * otherwise, the size is in pixels.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  sizeInMeters: {\n    get: function () {\n      return this._sizeInMeters;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.bool */ .Z.typeOf.bool("value", value);\n      //>>includeEnd(\'debug\');\n      if (this._sizeInMeters !== value) {\n        this._sizeInMeters = value;\n        makeDirty(this, COLOR_INDEX);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof Billboard.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      if (\n        !_Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].equals */ .Z.equals(value, this._distanceDisplayCondition)\n      ) {\n        //>>includeStart(\'debug\', pragmas.debug);\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n          _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n          if (value.far <= value.near) {\n            throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n              "far distance must be greater than near distance."\n            );\n          }\n        }\n        //>>includeEnd(\'debug\');\n        this._distanceDisplayCondition = _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].clone */ .Z.clone(\n          value,\n          this._distanceDisplayCondition\n        );\n        makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n        if (value < 0.0) {\n          throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n            "disableDepthTestDistance must be greater than or equal to 0.0."\n          );\n        }\n      }\n      //>>includeEnd(\'debug\');\n      if (this._disableDepthTestDistance !== value) {\n        this._disableDepthTestDistance = value;\n        makeDirty(this, DISABLE_DEPTH_DISTANCE);\n      }\n    },\n  },\n\n  /**\n   * Gets or sets the user-defined object returned when the billboard is picked.\n   * @memberof Billboard.prototype\n   * @type {Object}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n    set: function (value) {\n      this._id = value;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._pickId)) {\n        this._pickId.object.id = value;\n      }\n    },\n  },\n\n  /**\n   * The primitive to return when picking this billboard.\n   * @memberof Billboard.prototype\n   * @private\n   */\n  pickPrimitive: {\n    get: function () {\n      return this._pickPrimitive;\n    },\n    set: function (value) {\n      this._pickPrimitive = value;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._pickId)) {\n        this._pickId.object.primitive = value;\n      }\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n  },\n\n  /**\n   * <p>\n   * Gets or sets the image to be used for this billboard.  If a texture has already been created for the\n   * given image, the existing texture is used.\n   * </p>\n   * <p>\n   * This property can be set to a loaded Image, a URL which will be loaded as an Image automatically,\n   * a canvas, or another billboard\'s image property (from the same billboard collection).\n   * </p>\n   *\n   * @memberof Billboard.prototype\n   * @type {String}\n   * @example\n   * // load an image from a URL\n   * b.image = \'some/image/url.png\';\n   *\n   * // assuming b1 and b2 are billboards in the same billboard collection,\n   * // use the same image for both billboards.\n   * b2.image = b1.image;\n   */\n  image: {\n    get: function () {\n      return this._imageId;\n    },\n    set: function (value) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        this._imageIndex = -1;\n        this._imageSubRegion = undefined;\n        this._imageId = undefined;\n        this._image = undefined;\n        this._imageIndexPromise = undefined;\n        makeDirty(this, IMAGE_INDEX_INDEX);\n      } else if (typeof value === "string") {\n        this.setImage(value, value);\n      } else if (value instanceof _Core_Resource_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z) {\n        this.setImage(value.url, value);\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value.src)) {\n        this.setImage(value.src, value);\n      } else {\n        this.setImage((0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(), value);\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, this billboard is ready to render, i.e., the image\n   * has been downloaded and the WebGL resources are created.\n   *\n   * @memberof Billboard.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._imageIndex !== -1;\n    },\n  },\n\n  /**\n   * Keeps track of the position of the billboard based on the height reference.\n   * @memberof Billboard.prototype\n   * @type {Cartesian3}\n   * @private\n   */\n  _clampedPosition: {\n    get: function () {\n      return this._actualClampedPosition;\n    },\n    set: function (value) {\n      this._actualClampedPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n        value,\n        this._actualClampedPosition\n      );\n      makeDirty(this, POSITION_INDEX);\n    },\n  },\n\n  /**\n   * Determines whether or not this billboard will be shown or hidden because it was clustered.\n   * @memberof Billboard.prototype\n   * @type {Boolean}\n   * @private\n   */\n  clusterShow: {\n    get: function () {\n      return this._clusterShow;\n    },\n    set: function (value) {\n      if (this._clusterShow !== value) {\n        this._clusterShow = value;\n        makeDirty(this, SHOW_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The outline color of this Billboard.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Color}\n   * @private\n   */\n  outlineColor: {\n    get: function () {\n      return this._outlineColor;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("value is required.");\n      }\n      //>>includeEnd(\'debug\');\n\n      var outlineColor = this._outlineColor;\n      if (!_Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equals */ .Z.equals(outlineColor, value)) {\n        _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(value, outlineColor);\n        makeDirty(this, SDF_INDEX);\n      }\n    },\n  },\n\n  /**\n   * The outline width of this Billboard in pixels.  Effective only for SDF billboards like Label glyphs.\n   * @memberof Billboard.prototype\n   * @type {Number}\n   * @private\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n    set: function (value) {\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        makeDirty(this, SDF_INDEX);\n      }\n    },\n  },\n});\n\nBillboard.prototype.getPickId = function (context) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._pickId)) {\n    this._pickId = context.createPickId({\n      primitive: this._pickPrimitive,\n      collection: this._collection,\n      id: this._id,\n    });\n  }\n\n  return this._pickId;\n};\n\nBillboard.prototype._updateClamping = function () {\n  Billboard._updateClamping(this._billboardCollection, this);\n};\n\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar scratchPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nBillboard._updateClamping = function (collection, owner) {\n  var scene = collection._scene;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(scene) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(scene.globe)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (owner._heightReference !== _HeightReference_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].NONE */ .Z.NONE) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n        "Height reference is not supported without a scene and globe."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    return;\n  }\n\n  var globe = scene.globe;\n  var ellipsoid = globe.ellipsoid;\n  var surface = globe._surface;\n\n  var mode = scene.frameState.mode;\n\n  var modeChanged = mode !== owner._mode;\n  owner._mode = mode;\n\n  if (\n    (owner._heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].NONE */ .Z.NONE || modeChanged) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(owner._removeCallbackFunc)\n  ) {\n    owner._removeCallbackFunc();\n    owner._removeCallbackFunc = undefined;\n    owner._clampedPosition = undefined;\n  }\n\n  if (\n    owner._heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].NONE */ .Z.NONE ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(owner._position)\n  ) {\n    return;\n  }\n\n  var position = ellipsoid.cartesianToCartographic(owner._position);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(position)) {\n    owner._actualClampedPosition = undefined;\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(owner._removeCallbackFunc)) {\n    owner._removeCallbackFunc();\n  }\n\n  function updateFunction(clampedPosition) {\n    if (owner._heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].RELATIVE_TO_GROUND */ .Z.RELATIVE_TO_GROUND) {\n      if (owner._mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n        var clampedCart = ellipsoid.cartesianToCartographic(\n          clampedPosition,\n          scratchCartographic\n        );\n        clampedCart.height += position.height;\n        ellipsoid.cartographicToCartesian(clampedCart, clampedPosition);\n      } else {\n        clampedPosition.x += position.height;\n      }\n    }\n    owner._clampedPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n      clampedPosition,\n      owner._clampedPosition\n    );\n  }\n  owner._removeCallbackFunc = surface.updateHeight(position, updateFunction);\n\n  _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(position, scratchCartographic);\n  var height = globe.getHeight(position);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(height)) {\n    scratchCartographic.height = height;\n  }\n\n  ellipsoid.cartographicToCartesian(scratchCartographic, scratchPosition);\n\n  updateFunction(scratchPosition);\n};\n\nBillboard.prototype._loadImage = function () {\n  var atlas = this._billboardCollection._textureAtlas;\n\n  var imageId = this._imageId;\n  var image = this._image;\n  var imageSubRegion = this._imageSubRegion;\n  var imageIndexPromise;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(image)) {\n    imageIndexPromise = atlas.addImage(imageId, image);\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(imageSubRegion)) {\n    imageIndexPromise = atlas.addSubRegion(imageId, imageSubRegion);\n  }\n\n  this._imageIndexPromise = imageIndexPromise;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(imageIndexPromise)) {\n    return;\n  }\n\n  var that = this;\n  imageIndexPromise\n    .then(function (index) {\n      if (\n        that._imageId !== imageId ||\n        that._image !== image ||\n        !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(that._imageSubRegion, imageSubRegion)\n      ) {\n        // another load occurred before this one finished, ignore the index\n        return;\n      }\n\n      // fill in imageWidth and imageHeight\n      var textureCoordinates = atlas.textureCoordinates[index];\n      that._imageWidth = atlas.texture.width * textureCoordinates.width;\n      that._imageHeight = atlas.texture.height * textureCoordinates.height;\n\n      that._imageIndex = index;\n      that._ready = true;\n      that._image = undefined;\n      that._imageIndexPromise = undefined;\n      makeDirty(that, IMAGE_INDEX_INDEX);\n    })\n    .otherwise(function (error) {\n      console.error("Error loading image for billboard: " + error);\n      that._imageIndexPromise = undefined;\n    });\n};\n\n/**\n * <p>\n * Sets the image to be used for this billboard.  If a texture has already been created for the\n * given id, the existing texture is used.\n * </p>\n * <p>\n * This function is useful for dynamically creating textures that are shared across many billboards.\n * Only the first billboard will actually call the function and create the texture, while subsequent\n * billboards created with the same id will simply re-use the existing texture.\n * </p>\n * <p>\n * To load an image from a URL, setting the {@link Billboard#image} property is more convenient.\n * </p>\n *\n * @param {String} id The id of the image.  This can be any string that uniquely identifies the image.\n * @param {HTMLImageElement|HTMLCanvasElement|String|Resource|Billboard.CreateImageCallback} image The image to load.  This parameter\n *        can either be a loaded Image or Canvas, a URL which will be loaded as an Image automatically,\n *        or a function which will be called to create the image if it hasn\'t been loaded already.\n * @example\n * // create a billboard image dynamically\n * function drawImage(id) {\n *   // create and draw an image using a canvas\n *   var canvas = document.createElement(\'canvas\');\n *   var context2D = canvas.getContext(\'2d\');\n *   // ... draw image\n *   return canvas;\n * }\n * // drawImage will be called to create the texture\n * b.setImage(\'myImage\', drawImage);\n *\n * // subsequent billboards created in the same collection using the same id will use the existing\n * // texture, without the need to create the canvas or draw the image\n * b2.setImage(\'myImage\', drawImage);\n */\nBillboard.prototype.setImage = function (id, image) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(id)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("id is required.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(image)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("image is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (this._imageId === id) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageSubRegion = undefined;\n  this._imageId = id;\n  this._image = image;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\n/**\n * Uses a sub-region of the image with the given id as the image for this billboard,\n * measured in pixels from the bottom-left.\n *\n * @param {String} id The id of the image to use.\n * @param {BoundingRectangle} subRegion The sub-region of the image.\n *\n * @exception {RuntimeError} image with id must be in the atlas\n */\nBillboard.prototype.setImageSubRegion = function (id, subRegion) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(id)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("id is required.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(subRegion)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("subRegion is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (\n    this._imageId === id &&\n    _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(this._imageSubRegion, subRegion)\n  ) {\n    return;\n  }\n\n  this._imageIndex = -1;\n  this._imageId = id;\n  this._imageSubRegion = _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(subRegion);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._billboardCollection._textureAtlas)) {\n    this._loadImage();\n  }\n};\n\nBillboard.prototype._setTranslate = function (value) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(value)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("value is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var translate = this._translate;\n  if (!_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(translate, value)) {\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(value, translate);\n    makeDirty(this, PIXEL_OFFSET_INDEX);\n  }\n};\n\nBillboard.prototype._getActualPosition = function () {\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._clampedPosition)\n    ? this._clampedPosition\n    : this._actualPosition;\n};\n\nBillboard.prototype._setActualPosition = function (value) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._clampedPosition)) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, this._actualPosition);\n  }\n  makeDirty(this, POSITION_INDEX);\n};\n\nvar tempCartesian3 = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nBillboard._computeActualPosition = function (\n  billboard,\n  position,\n  frameState,\n  modelMatrix\n) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(billboard._clampedPosition)) {\n    if (frameState.mode !== billboard._mode) {\n      billboard._updateClamping();\n    }\n    return billboard._clampedPosition;\n  } else if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    return position;\n  }\n\n  _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(modelMatrix, position, tempCartesian3);\n  return _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].computeActualWgs84Position */ .Z.computeActualWgs84Position(frameState, tempCartesian3);\n};\n\nvar scratchCartesian3 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n// This function is basically a stripped-down JavaScript version of BillboardCollectionVS.glsl\nBillboard._computeScreenSpacePosition = function (\n  modelMatrix,\n  position,\n  eyeOffset,\n  pixelOffset,\n  scene,\n  result\n) {\n  // Model to world coordinates\n  var positionWorld = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n    modelMatrix,\n    position,\n    scratchCartesian3\n  );\n\n  // World to window coordinates\n  var positionWC = _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].wgs84WithEyeOffsetToWindowCoordinates */ .Z.wgs84WithEyeOffsetToWindowCoordinates(\n    scene,\n    positionWorld,\n    eyeOffset,\n    result\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(positionWC)) {\n    return undefined;\n  }\n\n  // Apply pixel offset\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(positionWC, pixelOffset, positionWC);\n\n  return positionWC;\n};\n\nvar scratchPixelOffset = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0.0, 0.0);\n\n/**\n * Computes the screen-space position of the billboard\'s origin, taking into account eye and pixel offsets.\n * The screen space origin is the top, left corner of the canvas; <code>x</code> increases from\n * left to right, and <code>y</code> increases from top to bottom.\n *\n * @param {Scene} scene The scene.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The screen-space position of the billboard.\n *\n * @exception {DeveloperError} Billboard must be in a collection.\n *\n * @example\n * console.log(b.computeScreenSpacePosition(scene).toString());\n *\n * @see Billboard#eyeOffset\n * @see Billboard#pixelOffset\n */\nBillboard.prototype.computeScreenSpacePosition = function (scene, result) {\n  var billboardCollection = this._billboardCollection;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(billboardCollection)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n      "Billboard must be in a collection.  Was it removed?"\n    );\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(scene)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z("scene is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  // pixel offset for screen space computation is the pixelOffset + screen space translate\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(this._pixelOffset, scratchPixelOffset);\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(scratchPixelOffset, this._translate, scratchPixelOffset);\n\n  var modelMatrix = billboardCollection.modelMatrix;\n  var position = this._position;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._clampedPosition)) {\n    position = this._clampedPosition;\n    if (scene.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n      // position needs to be in world coordinates\n      var projection = scene.mapProjection;\n      var ellipsoid = projection.ellipsoid;\n      var cart = projection.unproject(position, scratchCartographic);\n      position = ellipsoid.cartographicToCartesian(cart, scratchCartesian3);\n      modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].IDENTITY */ .Z.IDENTITY;\n    }\n  }\n\n  var windowCoordinates = Billboard._computeScreenSpacePosition(\n    modelMatrix,\n    position,\n    this._eyeOffset,\n    scratchPixelOffset,\n    scene,\n    result\n  );\n  return windowCoordinates;\n};\n\n/**\n * Gets a billboard\'s screen space bounding box centered around screenSpacePosition.\n * @param {Billboard} billboard The billboard to get the screen space bounding box for.\n * @param {Cartesian2} screenSpacePosition The screen space center of the label.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The screen space bounding box.\n *\n * @private\n */\nBillboard.getScreenSpaceBoundingBox = function (\n  billboard,\n  screenSpacePosition,\n  result\n) {\n  var width = billboard.width;\n  var height = billboard.height;\n\n  var scale = billboard.scale;\n  width *= scale;\n  height *= scale;\n\n  var x = screenSpacePosition.x;\n  if (billboard.horizontalOrigin === _HorizontalOrigin_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].RIGHT */ .Z.RIGHT) {\n    x -= width;\n  } else if (billboard.horizontalOrigin === _HorizontalOrigin_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].CENTER */ .Z.CENTER) {\n    x -= width * 0.5;\n  }\n\n  var y = screenSpacePosition.y;\n  if (\n    billboard.verticalOrigin === _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].BOTTOM */ .Z.BOTTOM ||\n    billboard.verticalOrigin === _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].BASELINE */ .Z.BASELINE\n  ) {\n    y -= height;\n  } else if (billboard.verticalOrigin === _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].CENTER */ .Z.CENTER) {\n    y -= height * 0.5;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result)) {\n    result = new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n\n  return result;\n};\n\n/**\n * Determines if this billboard equals another billboard.  Billboards are equal if all their properties\n * are equal.  Billboards in different collections can be equal.\n *\n * @param {Billboard} other The billboard to compare for equality.\n * @returns {Boolean} <code>true</code> if the billboards are equal; otherwise, <code>false</code>.\n */\nBillboard.prototype.equals = function (other) {\n  return (\n    this === other ||\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(other) &&\n      this._id === other._id &&\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(this._position, other._position) &&\n      this._imageId === other._imageId &&\n      this._show === other._show &&\n      this._scale === other._scale &&\n      this._verticalOrigin === other._verticalOrigin &&\n      this._horizontalOrigin === other._horizontalOrigin &&\n      this._heightReference === other._heightReference &&\n      _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(this._imageSubRegion, other._imageSubRegion) &&\n      _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].equals */ .Z.equals(this._color, other._color) &&\n      _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(this._pixelOffset, other._pixelOffset) &&\n      _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(this._translate, other._translate) &&\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(this._eyeOffset, other._eyeOffset) &&\n      _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(this._scaleByDistance, other._scaleByDistance) &&\n      _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(\n        this._translucencyByDistance,\n        other._translucencyByDistance\n      ) &&\n      _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].equals */ .Z.equals(\n        this._pixelOffsetScaleByDistance,\n        other._pixelOffsetScaleByDistance\n      ) &&\n      _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].equals */ .Z.equals(\n        this._distanceDisplayCondition,\n        other._distanceDisplayCondition\n      ) &&\n      this._disableDepthTestDistance === other._disableDepthTestDistance)\n  );\n};\n\nBillboard.prototype._destroy = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._customData)) {\n    this._billboardCollection._scene.globe._surface.removeTileCustomData(\n      this._customData\n    );\n    this._customData = undefined;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n    this._removeCallbackFunc = undefined;\n  }\n\n  this.image = undefined;\n  this._pickId = this._pickId && this._pickId.destroy();\n  this._billboardCollection = undefined;\n};\n\n/**\n * A function that creates an image.\n * @callback Billboard.CreateImageCallback\n * @param {String} id The identifier of the image to load.\n * @returns {HTMLImageElement|HTMLCanvasElement|Promise<HTMLImageElement|HTMLCanvasElement>} The image, or a promise that will resolve to an image.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (Billboard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ3ZCLE1BQU0sa0ZBQWlCO0FBQ3ZCLE1BQU0sc0ZBQW9CO0FBQzFCLE1BQU0sc0ZBQW9CO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sc0ZBQW9CO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sZ0dBQStCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU0sc0VBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU0sc0VBQU87QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsZ0ZBQWdGO0FBQzdGO0FBQ0EseURBQWUsU0FBUyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0JpbGxib2FyZC5qcz8xZjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3VuZGluZ1JlY3RhbmdsZSBmcm9tIFwiLi4vQ29yZS9Cb3VuZGluZ1JlY3RhbmdsZS5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjIgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMi5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjQgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuNC5qc1wiO1xuaW1wb3J0IENhcnRvZ3JhcGhpYyBmcm9tIFwiLi4vQ29yZS9DYXJ0b2dyYXBoaWMuanNcIjtcbmltcG9ydCBDaGVjayBmcm9tIFwiLi4vQ29yZS9DaGVjay5qc1wiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9Db3JlL0NvbG9yLmpzXCI7XG5pbXBvcnQgY3JlYXRlR3VpZCBmcm9tIFwiLi4vQ29yZS9jcmVhdGVHdWlkLmpzXCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi9Db3JlL2RlZmF1bHRWYWx1ZS5qc1wiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuLi9Db3JlL0RldmVsb3BlckVycm9yLmpzXCI7XG5pbXBvcnQgRGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uIGZyb20gXCIuLi9Db3JlL0Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvbi5qc1wiO1xuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL0NvcmUvTWF0cml4NC5qc1wiO1xuaW1wb3J0IE5lYXJGYXJTY2FsYXIgZnJvbSBcIi4uL0NvcmUvTmVhckZhclNjYWxhci5qc1wiO1xuaW1wb3J0IFJlc291cmNlIGZyb20gXCIuLi9Db3JlL1Jlc291cmNlLmpzXCI7XG5pbXBvcnQgSGVpZ2h0UmVmZXJlbmNlIGZyb20gXCIuL0hlaWdodFJlZmVyZW5jZS5qc1wiO1xuaW1wb3J0IEhvcml6b250YWxPcmlnaW4gZnJvbSBcIi4vSG9yaXpvbnRhbE9yaWdpbi5qc1wiO1xuaW1wb3J0IFNjZW5lTW9kZSBmcm9tIFwiLi9TY2VuZU1vZGUuanNcIjtcbmltcG9ydCBTY2VuZVRyYW5zZm9ybXMgZnJvbSBcIi4vU2NlbmVUcmFuc2Zvcm1zLmpzXCI7XG5pbXBvcnQgVmVydGljYWxPcmlnaW4gZnJvbSBcIi4vVmVydGljYWxPcmlnaW4uanNcIjtcblxuLyoqXG4gKiBBIHZpZXdwb3J0LWFsaWduZWQgaW1hZ2UgcG9zaXRpb25lZCBpbiB0aGUgM0Qgc2NlbmUsIHRoYXQgaXMgY3JlYXRlZFxuICogYW5kIHJlbmRlcmVkIHVzaW5nIGEge0BsaW5rIEJpbGxib2FyZENvbGxlY3Rpb259LiAgQSBiaWxsYm9hcmQgaXMgY3JlYXRlZCBhbmQgaXRzIGluaXRpYWxcbiAqIHByb3BlcnRpZXMgYXJlIHNldCBieSBjYWxsaW5nIHtAbGluayBCaWxsYm9hcmRDb2xsZWN0aW9uI2FkZH0uXG4gKiA8YnIgLz48YnIgLz5cbiAqIDxkaXYgYWxpZ249J2NlbnRlcic+XG4gKiA8aW1nIHNyYz0nSW1hZ2VzL0JpbGxib2FyZC5wbmcnIHdpZHRoPSc0MDAnIGhlaWdodD0nMzAwJyAvPjxiciAvPlxuICogRXhhbXBsZSBiaWxsYm9hcmRzXG4gKiA8L2Rpdj5cbiAqXG4gKiBAYWxpYXMgQmlsbGJvYXJkXG4gKlxuICogQHBlcmZvcm1hbmNlIFJlYWRpbmcgYSBwcm9wZXJ0eSwgZS5nLiwge0BsaW5rIEJpbGxib2FyZCNzaG93fSwgaXMgY29uc3RhbnQgdGltZS5cbiAqIEFzc2lnbmluZyB0byBhIHByb3BlcnR5IGlzIGNvbnN0YW50IHRpbWUgYnV0IHJlc3VsdHMgaW5cbiAqIENQVSB0byBHUFUgdHJhZmZpYyB3aGVuIHtAbGluayBCaWxsYm9hcmRDb2xsZWN0aW9uI3VwZGF0ZX0gaXMgY2FsbGVkLiAgVGhlIHBlci1iaWxsYm9hcmQgdHJhZmZpYyBpc1xuICogdGhlIHNhbWUgcmVnYXJkbGVzcyBvZiBob3cgbWFueSBwcm9wZXJ0aWVzIHdlcmUgdXBkYXRlZC4gIElmIG1vc3QgYmlsbGJvYXJkcyBpbiBhIGNvbGxlY3Rpb24gbmVlZCB0byBiZVxuICogdXBkYXRlZCwgaXQgbWF5IGJlIG1vcmUgZWZmaWNpZW50IHRvIGNsZWFyIHRoZSBjb2xsZWN0aW9uIHdpdGgge0BsaW5rIEJpbGxib2FyZENvbGxlY3Rpb24jcmVtb3ZlQWxsfVxuICogYW5kIGFkZCBuZXcgYmlsbGJvYXJkcyBpbnN0ZWFkIG9mIG1vZGlmeWluZyBlYWNoIG9uZS5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gc2NhbGVCeURpc3RhbmNlLmZhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBzY2FsZUJ5RGlzdGFuY2UubmVhclxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UuZmFyIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UubmVhclxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IHBpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlLmZhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZS5uZWFyXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uLmZhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBkaXN0YW5jZURpc3BsYXlDb25kaXRpb24ubmVhclxuICpcbiAqIEBzZWUgQmlsbGJvYXJkQ29sbGVjdGlvblxuICogQHNlZSBCaWxsYm9hcmRDb2xsZWN0aW9uI2FkZFxuICogQHNlZSBMYWJlbFxuICpcbiAqIEBpbnRlcm5hbENvbnN0cnVjdG9yXG4gKiBAY2xhc3NcbiAqXG4gKiBAZGVtbyB7QGxpbmsgaHR0cHM6Ly9zYW5kY2FzdGxlLmNlc2l1bS5jb20vaW5kZXguaHRtbD9zcmM9QmlsbGJvYXJkcy5odG1sfENlc2l1bSBTYW5kY2FzdGxlIEJpbGxib2FyZCBEZW1vfVxuICovXG5mdW5jdGlvbiBCaWxsYm9hcmQob3B0aW9ucywgYmlsbGJvYXJkQ29sbGVjdGlvbikge1xuICBvcHRpb25zID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMsIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QpO1xuXG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmIChcbiAgICBkZWZpbmVkKG9wdGlvbnMuZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlKSAmJlxuICAgIG9wdGlvbnMuZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlIDwgMC4wXG4gICkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcbiAgICAgIFwiZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAuMC5cIlxuICAgICk7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UgPSBvcHRpb25zLnRyYW5zbHVjZW5jeUJ5RGlzdGFuY2U7XG4gIHZhciBwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZSA9IG9wdGlvbnMucGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2U7XG4gIHZhciBzY2FsZUJ5RGlzdGFuY2UgPSBvcHRpb25zLnNjYWxlQnlEaXN0YW5jZTtcbiAgdmFyIGRpc3RhbmNlRGlzcGxheUNvbmRpdGlvbiA9IG9wdGlvbnMuZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uO1xuICBpZiAoZGVmaW5lZCh0cmFuc2x1Y2VuY3lCeURpc3RhbmNlKSkge1xuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgaWYgKHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UuZmFyIDw9IHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UubmVhcikge1xuICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICBcInRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UuZmFyIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UubmVhci5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgdHJhbnNsdWNlbmN5QnlEaXN0YW5jZSA9IE5lYXJGYXJTY2FsYXIuY2xvbmUodHJhbnNsdWNlbmN5QnlEaXN0YW5jZSk7XG4gIH1cbiAgaWYgKGRlZmluZWQocGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2UpKSB7XG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICBpZiAocGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2UuZmFyIDw9IHBpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlLm5lYXIpIHtcbiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcbiAgICAgICAgXCJwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZS5mYXIgbXVzdCBiZSBncmVhdGVyIHRoYW4gcGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2UubmVhci5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgcGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2UgPSBOZWFyRmFyU2NhbGFyLmNsb25lKFxuICAgICAgcGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2VcbiAgICApO1xuICB9XG4gIGlmIChkZWZpbmVkKHNjYWxlQnlEaXN0YW5jZSkpIHtcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgIGlmIChzY2FsZUJ5RGlzdGFuY2UuZmFyIDw9IHNjYWxlQnlEaXN0YW5jZS5uZWFyKSB7XG4gICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgIFwic2NhbGVCeURpc3RhbmNlLmZhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBzY2FsZUJ5RGlzdGFuY2UubmVhci5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgc2NhbGVCeURpc3RhbmNlID0gTmVhckZhclNjYWxhci5jbG9uZShzY2FsZUJ5RGlzdGFuY2UpO1xuICB9XG4gIGlmIChkZWZpbmVkKGRpc3RhbmNlRGlzcGxheUNvbmRpdGlvbikpIHtcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgIGlmIChkaXN0YW5jZURpc3BsYXlDb25kaXRpb24uZmFyIDw9IGRpc3RhbmNlRGlzcGxheUNvbmRpdGlvbi5uZWFyKSB7XG4gICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgIFwiZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uLmZhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBkaXN0YW5jZURpc3BsYXlDb25kaXRpb24ubmVhci5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uID0gRGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uLmNsb25lKFxuICAgICAgZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uXG4gICAgKTtcbiAgfVxuXG4gIHRoaXMuX3Nob3cgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5zaG93LCB0cnVlKTtcbiAgdGhpcy5fcG9zaXRpb24gPSBDYXJ0ZXNpYW4zLmNsb25lKFxuICAgIGRlZmF1bHRWYWx1ZShvcHRpb25zLnBvc2l0aW9uLCBDYXJ0ZXNpYW4zLlpFUk8pXG4gICk7XG4gIHRoaXMuX2FjdHVhbFBvc2l0aW9uID0gQ2FydGVzaWFuMy5jbG9uZSh0aGlzLl9wb3NpdGlvbik7IC8vIEZvciBjb2x1bWJ1cyB2aWV3IGFuZCAyRFxuICB0aGlzLl9waXhlbE9mZnNldCA9IENhcnRlc2lhbjIuY2xvbmUoXG4gICAgZGVmYXVsdFZhbHVlKG9wdGlvbnMucGl4ZWxPZmZzZXQsIENhcnRlc2lhbjIuWkVSTylcbiAgKTtcbiAgdGhpcy5fdHJhbnNsYXRlID0gbmV3IENhcnRlc2lhbjIoMC4wLCAwLjApOyAvLyB1c2VkIGJ5IGxhYmVscyBmb3IgZ2x5cGggdmVydGV4IHRyYW5zbGF0aW9uXG4gIHRoaXMuX2V5ZU9mZnNldCA9IENhcnRlc2lhbjMuY2xvbmUoXG4gICAgZGVmYXVsdFZhbHVlKG9wdGlvbnMuZXllT2Zmc2V0LCBDYXJ0ZXNpYW4zLlpFUk8pXG4gICk7XG4gIHRoaXMuX2hlaWdodFJlZmVyZW5jZSA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLmhlaWdodFJlZmVyZW5jZSxcbiAgICBIZWlnaHRSZWZlcmVuY2UuTk9ORVxuICApO1xuICB0aGlzLl92ZXJ0aWNhbE9yaWdpbiA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLnZlcnRpY2FsT3JpZ2luLFxuICAgIFZlcnRpY2FsT3JpZ2luLkNFTlRFUlxuICApO1xuICB0aGlzLl9ob3Jpem9udGFsT3JpZ2luID0gZGVmYXVsdFZhbHVlKFxuICAgIG9wdGlvbnMuaG9yaXpvbnRhbE9yaWdpbixcbiAgICBIb3Jpem9udGFsT3JpZ2luLkNFTlRFUlxuICApO1xuICB0aGlzLl9zY2FsZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLnNjYWxlLCAxLjApO1xuICB0aGlzLl9jb2xvciA9IENvbG9yLmNsb25lKGRlZmF1bHRWYWx1ZShvcHRpb25zLmNvbG9yLCBDb2xvci5XSElURSkpO1xuICB0aGlzLl9yb3RhdGlvbiA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLnJvdGF0aW9uLCAwLjApO1xuICB0aGlzLl9hbGlnbmVkQXhpcyA9IENhcnRlc2lhbjMuY2xvbmUoXG4gICAgZGVmYXVsdFZhbHVlKG9wdGlvbnMuYWxpZ25lZEF4aXMsIENhcnRlc2lhbjMuWkVSTylcbiAgKTtcbiAgdGhpcy5fd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICB0aGlzLl9oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgdGhpcy5fc2NhbGVCeURpc3RhbmNlID0gc2NhbGVCeURpc3RhbmNlO1xuICB0aGlzLl90cmFuc2x1Y2VuY3lCeURpc3RhbmNlID0gdHJhbnNsdWNlbmN5QnlEaXN0YW5jZTtcbiAgdGhpcy5fcGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2UgPSBwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZTtcbiAgdGhpcy5fc2l6ZUluTWV0ZXJzID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuc2l6ZUluTWV0ZXJzLCBmYWxzZSk7XG4gIHRoaXMuX2Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvbiA9IGRpc3RhbmNlRGlzcGxheUNvbmRpdGlvbjtcbiAgdGhpcy5fZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlID0gb3B0aW9ucy5kaXNhYmxlRGVwdGhUZXN0RGlzdGFuY2U7XG4gIHRoaXMuX2lkID0gb3B0aW9ucy5pZDtcbiAgdGhpcy5fY29sbGVjdGlvbiA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmNvbGxlY3Rpb24sIGJpbGxib2FyZENvbGxlY3Rpb24pO1xuXG4gIHRoaXMuX3BpY2tJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcGlja1ByaW1pdGl2ZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLl9waWNrUHJpbWl0aXZlLCB0aGlzKTtcbiAgdGhpcy5fYmlsbGJvYXJkQ29sbGVjdGlvbiA9IGJpbGxib2FyZENvbGxlY3Rpb247XG4gIHRoaXMuX2RpcnR5ID0gZmFsc2U7XG4gIHRoaXMuX2luZGV4ID0gLTE7IC8vVXNlZCBvbmx5IGJ5IEJpbGxib2FyZENvbGxlY3Rpb25cbiAgdGhpcy5fYmF0Y2hJbmRleCA9IHVuZGVmaW5lZDsgLy8gVXNlZCBvbmx5IGJ5IFZlY3RvcjNEVGlsZVBvaW50cyBhbmQgQmlsbGJvYXJkQ29sbGVjdGlvblxuXG4gIHRoaXMuX2ltYWdlSW5kZXggPSAtMTtcbiAgdGhpcy5faW1hZ2VJbmRleFByb21pc2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2ltYWdlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2ltYWdlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9pbWFnZVN1YlJlZ2lvbiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5faW1hZ2VXaWR0aCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5faW1hZ2VIZWlnaHQgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5fbGFiZWxEaW1lbnNpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLl9sYWJlbEhvcml6b250YWxPcmlnaW4gPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2xhYmVsVHJhbnNsYXRlID0gdW5kZWZpbmVkO1xuXG4gIHZhciBpbWFnZSA9IG9wdGlvbnMuaW1hZ2U7XG4gIHZhciBpbWFnZUlkID0gb3B0aW9ucy5pbWFnZUlkO1xuICBpZiAoZGVmaW5lZChpbWFnZSkpIHtcbiAgICBpZiAoIWRlZmluZWQoaW1hZ2VJZCkpIHtcbiAgICAgIGlmICh0eXBlb2YgaW1hZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaW1hZ2VJZCA9IGltYWdlO1xuICAgICAgfSBlbHNlIGlmIChkZWZpbmVkKGltYWdlLnNyYykpIHtcbiAgICAgICAgaW1hZ2VJZCA9IGltYWdlLnNyYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlSWQgPSBjcmVhdGVHdWlkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW1hZ2VJZCA9IGltYWdlSWQ7XG4gICAgdGhpcy5faW1hZ2UgPSBpbWFnZTtcbiAgfVxuXG4gIGlmIChkZWZpbmVkKG9wdGlvbnMuaW1hZ2VTdWJSZWdpb24pKSB7XG4gICAgdGhpcy5faW1hZ2VJZCA9IGltYWdlSWQ7XG4gICAgdGhpcy5faW1hZ2VTdWJSZWdpb24gPSBvcHRpb25zLmltYWdlU3ViUmVnaW9uO1xuICB9XG5cbiAgaWYgKGRlZmluZWQodGhpcy5fYmlsbGJvYXJkQ29sbGVjdGlvbi5fdGV4dHVyZUF0bGFzKSkge1xuICAgIHRoaXMuX2xvYWRJbWFnZSgpO1xuICB9XG5cbiAgdGhpcy5fYWN0dWFsQ2xhbXBlZFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yZW1vdmVDYWxsYmFja0Z1bmMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX21vZGUgPSBTY2VuZU1vZGUuU0NFTkUzRDtcblxuICB0aGlzLl9jbHVzdGVyU2hvdyA9IHRydWU7XG4gIHRoaXMuX291dGxpbmVDb2xvciA9IENvbG9yLmNsb25lKFxuICAgIGRlZmF1bHRWYWx1ZShvcHRpb25zLm91dGxpbmVDb2xvciwgQ29sb3IuQkxBQ0spXG4gICk7XG4gIHRoaXMuX291dGxpbmVXaWR0aCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm91dGxpbmVXaWR0aCwgMC4wKTtcblxuICB0aGlzLl91cGRhdGVDbGFtcGluZygpO1xufVxuXG52YXIgU0hPV19JTkRFWCA9IChCaWxsYm9hcmQuU0hPV19JTkRFWCA9IDApO1xudmFyIFBPU0lUSU9OX0lOREVYID0gKEJpbGxib2FyZC5QT1NJVElPTl9JTkRFWCA9IDEpO1xudmFyIFBJWEVMX09GRlNFVF9JTkRFWCA9IChCaWxsYm9hcmQuUElYRUxfT0ZGU0VUX0lOREVYID0gMik7XG52YXIgRVlFX09GRlNFVF9JTkRFWCA9IChCaWxsYm9hcmQuRVlFX09GRlNFVF9JTkRFWCA9IDMpO1xudmFyIEhPUklaT05UQUxfT1JJR0lOX0lOREVYID0gKEJpbGxib2FyZC5IT1JJWk9OVEFMX09SSUdJTl9JTkRFWCA9IDQpO1xudmFyIFZFUlRJQ0FMX09SSUdJTl9JTkRFWCA9IChCaWxsYm9hcmQuVkVSVElDQUxfT1JJR0lOX0lOREVYID0gNSk7XG52YXIgU0NBTEVfSU5ERVggPSAoQmlsbGJvYXJkLlNDQUxFX0lOREVYID0gNik7XG52YXIgSU1BR0VfSU5ERVhfSU5ERVggPSAoQmlsbGJvYXJkLklNQUdFX0lOREVYX0lOREVYID0gNyk7XG52YXIgQ09MT1JfSU5ERVggPSAoQmlsbGJvYXJkLkNPTE9SX0lOREVYID0gOCk7XG52YXIgUk9UQVRJT05fSU5ERVggPSAoQmlsbGJvYXJkLlJPVEFUSU9OX0lOREVYID0gOSk7XG52YXIgQUxJR05FRF9BWElTX0lOREVYID0gKEJpbGxib2FyZC5BTElHTkVEX0FYSVNfSU5ERVggPSAxMCk7XG52YXIgU0NBTEVfQllfRElTVEFOQ0VfSU5ERVggPSAoQmlsbGJvYXJkLlNDQUxFX0JZX0RJU1RBTkNFX0lOREVYID0gMTEpO1xudmFyIFRSQU5TTFVDRU5DWV9CWV9ESVNUQU5DRV9JTkRFWCA9IChCaWxsYm9hcmQuVFJBTlNMVUNFTkNZX0JZX0RJU1RBTkNFX0lOREVYID0gMTIpO1xudmFyIFBJWEVMX09GRlNFVF9TQ0FMRV9CWV9ESVNUQU5DRV9JTkRFWCA9IChCaWxsYm9hcmQuUElYRUxfT0ZGU0VUX1NDQUxFX0JZX0RJU1RBTkNFX0lOREVYID0gMTMpO1xudmFyIERJU1RBTkNFX0RJU1BMQVlfQ09ORElUSU9OID0gKEJpbGxib2FyZC5ESVNUQU5DRV9ESVNQTEFZX0NPTkRJVElPTiA9IDE0KTtcbnZhciBESVNBQkxFX0RFUFRIX0RJU1RBTkNFID0gKEJpbGxib2FyZC5ESVNBQkxFX0RFUFRIX0RJU1RBTkNFID0gMTUpO1xuQmlsbGJvYXJkLlRFWFRVUkVfQ09PUkRJTkFURV9CT1VORFMgPSAxNjtcbnZhciBTREZfSU5ERVggPSAoQmlsbGJvYXJkLlNERl9JTkRFWCA9IDE3KTtcbkJpbGxib2FyZC5OVU1CRVJfT0ZfUFJPUEVSVElFUyA9IDE4O1xuXG5mdW5jdGlvbiBtYWtlRGlydHkoYmlsbGJvYXJkLCBwcm9wZXJ0eUNoYW5nZWQpIHtcbiAgdmFyIGJpbGxib2FyZENvbGxlY3Rpb24gPSBiaWxsYm9hcmQuX2JpbGxib2FyZENvbGxlY3Rpb247XG4gIGlmIChkZWZpbmVkKGJpbGxib2FyZENvbGxlY3Rpb24pKSB7XG4gICAgYmlsbGJvYXJkQ29sbGVjdGlvbi5fdXBkYXRlQmlsbGJvYXJkKGJpbGxib2FyZCwgcHJvcGVydHlDaGFuZ2VkKTtcbiAgICBiaWxsYm9hcmQuX2RpcnR5ID0gdHJ1ZTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhCaWxsYm9hcmQucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoaXMgYmlsbGJvYXJkIHdpbGwgYmUgc2hvd24uICBVc2UgdGhpcyB0byBoaWRlIG9yIHNob3cgYSBiaWxsYm9hcmQsIGluc3RlYWRcbiAgICogb2YgcmVtb3ZpbmcgaXQgYW5kIHJlLWFkZGluZyBpdCB0byB0aGUgY29sbGVjdGlvbi5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHNob3c6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaG93O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBDaGVjay50eXBlT2YuYm9vbChcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICBpZiAodGhpcy5fc2hvdyAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2hvdyA9IHZhbHVlO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgU0hPV19JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBDYXJ0ZXNpYW4gcG9zaXRpb24gb2YgdGhpcyBiaWxsYm9hcmQuXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfVxuICAgKi9cbiAgcG9zaXRpb246IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpXG4gICAgICBDaGVjay50eXBlT2Yub2JqZWN0KFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uO1xuICAgICAgaWYgKCFDYXJ0ZXNpYW4zLmVxdWFscyhwb3NpdGlvbiwgdmFsdWUpKSB7XG4gICAgICAgIENhcnRlc2lhbjMuY2xvbmUodmFsdWUsIHBvc2l0aW9uKTtcbiAgICAgICAgQ2FydGVzaWFuMy5jbG9uZSh2YWx1ZSwgdGhpcy5fYWN0dWFsUG9zaXRpb24pO1xuICAgICAgICB0aGlzLl91cGRhdGVDbGFtcGluZygpO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgUE9TSVRJT05fSU5ERVgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgaGVpZ2h0IHJlZmVyZW5jZSBvZiB0aGlzIGJpbGxib2FyZC5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge0hlaWdodFJlZmVyZW5jZX1cbiAgICogQGRlZmF1bHQgSGVpZ2h0UmVmZXJlbmNlLk5PTkVcbiAgICovXG4gIGhlaWdodFJlZmVyZW5jZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodFJlZmVyZW5jZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpXG4gICAgICBDaGVjay50eXBlT2YubnVtYmVyKFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHZhciBoZWlnaHRSZWZlcmVuY2UgPSB0aGlzLl9oZWlnaHRSZWZlcmVuY2U7XG4gICAgICBpZiAodmFsdWUgIT09IGhlaWdodFJlZmVyZW5jZSkge1xuICAgICAgICB0aGlzLl9oZWlnaHRSZWZlcmVuY2UgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ2xhbXBpbmcoKTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIFBPU0lUSU9OX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIHBpeGVsIG9mZnNldCBpbiBzY3JlZW4gc3BhY2UgZnJvbSB0aGUgb3JpZ2luIG9mIHRoaXMgYmlsbGJvYXJkLiAgVGhpcyBpcyBjb21tb25seSB1c2VkXG4gICAqIHRvIGFsaWduIG11bHRpcGxlIGJpbGxib2FyZHMgYW5kIGxhYmVscyBhdCB0aGUgc2FtZSBwb3NpdGlvbiwgZS5nLiwgYW4gaW1hZ2UgYW5kIHRleHQuICBUaGVcbiAgICogc2NyZWVuIHNwYWNlIG9yaWdpbiBpcyB0aGUgdG9wLCBsZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzOyA8Y29kZT54PC9jb2RlPiBpbmNyZWFzZXMgZnJvbVxuICAgKiBsZWZ0IHRvIHJpZ2h0LCBhbmQgPGNvZGU+eTwvY29kZT4gaW5jcmVhc2VzIGZyb20gdG9wIHRvIGJvdHRvbS5cbiAgICogPGJyIC8+PGJyIC8+XG4gICAqIDxkaXYgYWxpZ249J2NlbnRlcic+XG4gICAqIDx0YWJsZSBib3JkZXI9JzAnIGNlbGxwYWRkaW5nPSc1Jz48dHI+XG4gICAqIDx0ZCBhbGlnbj0nY2VudGVyJz48Y29kZT5kZWZhdWx0PC9jb2RlPjxici8+PGltZyBzcmM9J0ltYWdlcy9CaWxsYm9hcmQuc2V0UGl4ZWxPZmZzZXQuZGVmYXVsdC5wbmcnIHdpZHRoPScyNTAnIGhlaWdodD0nMTg4JyAvPjwvdGQ+XG4gICAqIDx0ZCBhbGlnbj0nY2VudGVyJz48Y29kZT5iLnBpeGVsb2Zmc2V0ID0gbmV3IENhcnRlc2lhbjIoNTAsIDI1KTs8L2NvZGU+PGJyLz48aW1nIHNyYz0nSW1hZ2VzL0JpbGxib2FyZC5zZXRQaXhlbE9mZnNldC54NTB5LTI1LnBuZycgd2lkdGg9JzI1MCcgaGVpZ2h0PScxODgnIC8+PC90ZD5cbiAgICogPC90cj48L3RhYmxlPlxuICAgKiBUaGUgYmlsbGJvYXJkJ3Mgb3JpZ2luIGlzIGluZGljYXRlZCBieSB0aGUgeWVsbG93IHBvaW50LlxuICAgKiA8L2Rpdj5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge0NhcnRlc2lhbjJ9XG4gICAqL1xuICBwaXhlbE9mZnNldDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BpeGVsT2Zmc2V0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBDaGVjay50eXBlT2Yub2JqZWN0KFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHZhciBwaXhlbE9mZnNldCA9IHRoaXMuX3BpeGVsT2Zmc2V0O1xuICAgICAgaWYgKCFDYXJ0ZXNpYW4yLmVxdWFscyhwaXhlbE9mZnNldCwgdmFsdWUpKSB7XG4gICAgICAgIENhcnRlc2lhbjIuY2xvbmUodmFsdWUsIHBpeGVsT2Zmc2V0KTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIFBJWEVMX09GRlNFVF9JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIG5lYXIgYW5kIGZhciBzY2FsaW5nIHByb3BlcnRpZXMgb2YgYSBCaWxsYm9hcmQgYmFzZWQgb24gdGhlIGJpbGxib2FyZCdzIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYS5cbiAgICogQSBiaWxsYm9hcmQncyBzY2FsZSB3aWxsIGludGVycG9sYXRlIGJldHdlZW4gdGhlIHtAbGluayBOZWFyRmFyU2NhbGFyI25lYXJWYWx1ZX0gYW5kXG4gICAqIHtAbGluayBOZWFyRmFyU2NhbGFyI2ZhclZhbHVlfSB3aGlsZSB0aGUgY2FtZXJhIGRpc3RhbmNlIGZhbGxzIHdpdGhpbiB0aGUgbG93ZXIgYW5kIHVwcGVyIGJvdW5kc1xuICAgKiBvZiB0aGUgc3BlY2lmaWVkIHtAbGluayBOZWFyRmFyU2NhbGFyI25lYXJ9IGFuZCB7QGxpbmsgTmVhckZhclNjYWxhciNmYXJ9LlxuICAgKiBPdXRzaWRlIG9mIHRoZXNlIHJhbmdlcyB0aGUgYmlsbGJvYXJkJ3Mgc2NhbGUgcmVtYWlucyBjbGFtcGVkIHRvIHRoZSBuZWFyZXN0IGJvdW5kLiAgSWYgdW5kZWZpbmVkLFxuICAgKiBzY2FsZUJ5RGlzdGFuY2Ugd2lsbCBiZSBkaXNhYmxlZC5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge05lYXJGYXJTY2FsYXJ9XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEV4YW1wbGUgMS5cbiAgICogLy8gU2V0IGEgYmlsbGJvYXJkJ3Mgc2NhbGVCeURpc3RhbmNlIHRvIHNjYWxlIGJ5IDEuNSB3aGVuIHRoZVxuICAgKiAvLyBjYW1lcmEgaXMgMTUwMCBtZXRlcnMgZnJvbSB0aGUgYmlsbGJvYXJkIGFuZCBkaXNhcHBlYXIgYXNcbiAgICogLy8gdGhlIGNhbWVyYSBkaXN0YW5jZSBhcHByb2FjaGVzIDguMGU2IG1ldGVycy5cbiAgICogYi5zY2FsZUJ5RGlzdGFuY2UgPSBuZXcgQ2VzaXVtLk5lYXJGYXJTY2FsYXIoMS41ZTIsIDEuNSwgOC4wZTYsIDAuMCk7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEV4YW1wbGUgMi5cbiAgICogLy8gZGlzYWJsZSBzY2FsaW5nIGJ5IGRpc3RhbmNlXG4gICAqIGIuc2NhbGVCeURpc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgKi9cbiAgc2NhbGVCeURpc3RhbmNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2NhbGVCeURpc3RhbmNlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdChcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLmZhciA8PSB2YWx1ZS5uZWFyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgICAgXCJmYXIgZGlzdGFuY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gbmVhciBkaXN0YW5jZS5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICB2YXIgc2NhbGVCeURpc3RhbmNlID0gdGhpcy5fc2NhbGVCeURpc3RhbmNlO1xuICAgICAgaWYgKCFOZWFyRmFyU2NhbGFyLmVxdWFscyhzY2FsZUJ5RGlzdGFuY2UsIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9zY2FsZUJ5RGlzdGFuY2UgPSBOZWFyRmFyU2NhbGFyLmNsb25lKHZhbHVlLCBzY2FsZUJ5RGlzdGFuY2UpO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgU0NBTEVfQllfRElTVEFOQ0VfSU5ERVgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyBuZWFyIGFuZCBmYXIgdHJhbnNsdWNlbmN5IHByb3BlcnRpZXMgb2YgYSBCaWxsYm9hcmQgYmFzZWQgb24gdGhlIGJpbGxib2FyZCdzIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYS5cbiAgICogQSBiaWxsYm9hcmQncyB0cmFuc2x1Y2VuY3kgd2lsbCBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHRoZSB7QGxpbmsgTmVhckZhclNjYWxhciNuZWFyVmFsdWV9IGFuZFxuICAgKiB7QGxpbmsgTmVhckZhclNjYWxhciNmYXJWYWx1ZX0gd2hpbGUgdGhlIGNhbWVyYSBkaXN0YW5jZSBmYWxscyB3aXRoaW4gdGhlIGxvd2VyIGFuZCB1cHBlciBib3VuZHNcbiAgICogb2YgdGhlIHNwZWNpZmllZCB7QGxpbmsgTmVhckZhclNjYWxhciNuZWFyfSBhbmQge0BsaW5rIE5lYXJGYXJTY2FsYXIjZmFyfS5cbiAgICogT3V0c2lkZSBvZiB0aGVzZSByYW5nZXMgdGhlIGJpbGxib2FyZCdzIHRyYW5zbHVjZW5jeSByZW1haW5zIGNsYW1wZWQgdG8gdGhlIG5lYXJlc3QgYm91bmQuICBJZiB1bmRlZmluZWQsXG4gICAqIHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2Ugd2lsbCBiZSBkaXNhYmxlZC5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge05lYXJGYXJTY2FsYXJ9XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEV4YW1wbGUgMS5cbiAgICogLy8gU2V0IGEgYmlsbGJvYXJkJ3MgdHJhbnNsdWNlbmN5IHRvIDEuMCB3aGVuIHRoZVxuICAgKiAvLyBjYW1lcmEgaXMgMTUwMCBtZXRlcnMgZnJvbSB0aGUgYmlsbGJvYXJkIGFuZCBkaXNhcHBlYXIgYXNcbiAgICogLy8gdGhlIGNhbWVyYSBkaXN0YW5jZSBhcHByb2FjaGVzIDguMGU2IG1ldGVycy5cbiAgICogYi50cmFuc2x1Y2VuY3lCeURpc3RhbmNlID0gbmV3IENlc2l1bS5OZWFyRmFyU2NhbGFyKDEuNWUyLCAxLjAsIDguMGU2LCAwLjApO1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBFeGFtcGxlIDIuXG4gICAqIC8vIGRpc2FibGUgdHJhbnNsdWNlbmN5IGJ5IGRpc3RhbmNlXG4gICAqIGIudHJhbnNsdWNlbmN5QnlEaXN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICovXG4gIHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2U6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc2x1Y2VuY3lCeURpc3RhbmNlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdChcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLmZhciA8PSB2YWx1ZS5uZWFyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgICAgXCJmYXIgZGlzdGFuY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gbmVhciBkaXN0YW5jZS5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICB2YXIgdHJhbnNsdWNlbmN5QnlEaXN0YW5jZSA9IHRoaXMuX3RyYW5zbHVjZW5jeUJ5RGlzdGFuY2U7XG4gICAgICBpZiAoIU5lYXJGYXJTY2FsYXIuZXF1YWxzKHRyYW5zbHVjZW5jeUJ5RGlzdGFuY2UsIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl90cmFuc2x1Y2VuY3lCeURpc3RhbmNlID0gTmVhckZhclNjYWxhci5jbG9uZShcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB0cmFuc2x1Y2VuY3lCeURpc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIG1ha2VEaXJ0eSh0aGlzLCBUUkFOU0xVQ0VOQ1lfQllfRElTVEFOQ0VfSU5ERVgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyBuZWFyIGFuZCBmYXIgcGl4ZWwgb2Zmc2V0IHNjYWxpbmcgcHJvcGVydGllcyBvZiBhIEJpbGxib2FyZCBiYXNlZCBvbiB0aGUgYmlsbGJvYXJkJ3MgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhLlxuICAgKiBBIGJpbGxib2FyZCdzIHBpeGVsIG9mZnNldCB3aWxsIGJlIHNjYWxlZCBiZXR3ZWVuIHRoZSB7QGxpbmsgTmVhckZhclNjYWxhciNuZWFyVmFsdWV9IGFuZFxuICAgKiB7QGxpbmsgTmVhckZhclNjYWxhciNmYXJWYWx1ZX0gd2hpbGUgdGhlIGNhbWVyYSBkaXN0YW5jZSBmYWxscyB3aXRoaW4gdGhlIGxvd2VyIGFuZCB1cHBlciBib3VuZHNcbiAgICogb2YgdGhlIHNwZWNpZmllZCB7QGxpbmsgTmVhckZhclNjYWxhciNuZWFyfSBhbmQge0BsaW5rIE5lYXJGYXJTY2FsYXIjZmFyfS5cbiAgICogT3V0c2lkZSBvZiB0aGVzZSByYW5nZXMgdGhlIGJpbGxib2FyZCdzIHBpeGVsIG9mZnNldCBzY2FsZSByZW1haW5zIGNsYW1wZWQgdG8gdGhlIG5lYXJlc3QgYm91bmQuICBJZiB1bmRlZmluZWQsXG4gICAqIHBpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtOZWFyRmFyU2NhbGFyfVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBFeGFtcGxlIDEuXG4gICAqIC8vIFNldCBhIGJpbGxib2FyZCdzIHBpeGVsIG9mZnNldCBzY2FsZSB0byAwLjAgd2hlbiB0aGVcbiAgICogLy8gY2FtZXJhIGlzIDE1MDAgbWV0ZXJzIGZyb20gdGhlIGJpbGxib2FyZCBhbmQgc2NhbGUgcGl4ZWwgb2Zmc2V0IHRvIDEwLjAgcGl4ZWxzXG4gICAqIC8vIGluIHRoZSB5IGRpcmVjdGlvbiB0aGUgY2FtZXJhIGRpc3RhbmNlIGFwcHJvYWNoZXMgOC4wZTYgbWV0ZXJzLlxuICAgKiBiLnBpeGVsT2Zmc2V0ID0gbmV3IENlc2l1bS5DYXJ0ZXNpYW4yKDAuMCwgMS4wKTtcbiAgICogYi5waXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZSA9IG5ldyBDZXNpdW0uTmVhckZhclNjYWxhcigxLjVlMiwgMC4wLCA4LjBlNiwgMTAuMCk7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEV4YW1wbGUgMi5cbiAgICogLy8gZGlzYWJsZSBwaXhlbCBvZmZzZXQgYnkgZGlzdGFuY2VcbiAgICogYi5waXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICovXG4gIHBpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2U7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBDaGVjay50eXBlT2Yub2JqZWN0KFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUuZmFyIDw9IHZhbHVlLm5lYXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgICBcImZhciBkaXN0YW5jZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBuZWFyIGRpc3RhbmNlLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHZhciBwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZSA9IHRoaXMuX3BpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlO1xuICAgICAgaWYgKCFOZWFyRmFyU2NhbGFyLmVxdWFscyhwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZSwgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuX3BpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlID0gTmVhckZhclNjYWxhci5jbG9uZShcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBwaXhlbE9mZnNldFNjYWxlQnlEaXN0YW5jZVxuICAgICAgICApO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgUElYRUxfT0ZGU0VUX1NDQUxFX0JZX0RJU1RBTkNFX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIDNEIENhcnRlc2lhbiBvZmZzZXQgYXBwbGllZCB0byB0aGlzIGJpbGxib2FyZCBpbiBleWUgY29vcmRpbmF0ZXMuICBFeWUgY29vcmRpbmF0ZXMgaXMgYSBsZWZ0LWhhbmRlZFxuICAgKiBjb29yZGluYXRlIHN5c3RlbSwgd2hlcmUgPGNvZGU+eDwvY29kZT4gcG9pbnRzIHRvd2FyZHMgdGhlIHZpZXdlcidzIHJpZ2h0LCA8Y29kZT55PC9jb2RlPiBwb2ludHMgdXAsIGFuZFxuICAgKiA8Y29kZT56PC9jb2RlPiBwb2ludHMgaW50byB0aGUgc2NyZWVuLiAgRXllIGNvb3JkaW5hdGVzIHVzZSB0aGUgc2FtZSBzY2FsZSBhcyB3b3JsZCBhbmQgbW9kZWwgY29vcmRpbmF0ZXMsXG4gICAqIHdoaWNoIGlzIHR5cGljYWxseSBtZXRlcnMuXG4gICAqIDxiciAvPjxiciAvPlxuICAgKiBBbiBleWUgb2Zmc2V0IGlzIGNvbW1vbmx5IHVzZWQgdG8gYXJyYW5nZSBtdWx0aXBsZSBiaWxsYm9hcmRzIG9yIG9iamVjdHMgYXQgdGhlIHNhbWUgcG9zaXRpb24sIGUuZy4sIHRvXG4gICAqIGFycmFuZ2UgYSBiaWxsYm9hcmQgYWJvdmUgaXRzIGNvcnJlc3BvbmRpbmcgM0QgbW9kZWwuXG4gICAqIDxiciAvPjxiciAvPlxuICAgKiBCZWxvdywgdGhlIGJpbGxib2FyZCBpcyBwb3NpdGlvbmVkIGF0IHRoZSBjZW50ZXIgb2YgdGhlIEVhcnRoIGJ1dCBhbiBleWUgb2Zmc2V0IG1ha2VzIGl0IGFsd2F5c1xuICAgKiBhcHBlYXIgb24gdG9wIG9mIHRoZSBFYXJ0aCByZWdhcmRsZXNzIG9mIHRoZSB2aWV3ZXIncyBvciBFYXJ0aCdzIG9yaWVudGF0aW9uLlxuICAgKiA8YnIgLz48YnIgLz5cbiAgICogPGRpdiBhbGlnbj0nY2VudGVyJz5cbiAgICogPHRhYmxlIGJvcmRlcj0nMCcgY2VsbHBhZGRpbmc9JzUnPjx0cj5cbiAgICogPHRkIGFsaWduPSdjZW50ZXInPjxpbWcgc3JjPSdJbWFnZXMvQmlsbGJvYXJkLnNldEV5ZU9mZnNldC5vbmUucG5nJyB3aWR0aD0nMjUwJyBoZWlnaHQ9JzE4OCcgLz48L3RkPlxuICAgKiA8dGQgYWxpZ249J2NlbnRlcic+PGltZyBzcmM9J0ltYWdlcy9CaWxsYm9hcmQuc2V0RXllT2Zmc2V0LnR3by5wbmcnIHdpZHRoPScyNTAnIGhlaWdodD0nMTg4JyAvPjwvdGQ+XG4gICAqIDwvdHI+PC90YWJsZT5cbiAgICogPGNvZGU+Yi5leWVPZmZzZXQgPSBuZXcgQ2FydGVzaWFuMygwLjAsIDgwMDAwMDAuMCwgMC4wKTs8L2NvZGU+PGJyIC8+PGJyIC8+XG4gICAqIDwvZGl2PlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Q2FydGVzaWFuM31cbiAgICovXG4gIGV5ZU9mZnNldDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V5ZU9mZnNldDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdChcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICB2YXIgZXllT2Zmc2V0ID0gdGhpcy5fZXllT2Zmc2V0O1xuICAgICAgaWYgKCFDYXJ0ZXNpYW4zLmVxdWFscyhleWVPZmZzZXQsIHZhbHVlKSkge1xuICAgICAgICBDYXJ0ZXNpYW4zLmNsb25lKHZhbHVlLCBleWVPZmZzZXQpO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgRVlFX09GRlNFVF9JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBob3Jpem9udGFsIG9yaWdpbiBvZiB0aGlzIGJpbGxib2FyZCwgd2hpY2ggZGV0ZXJtaW5lcyBpZiB0aGUgYmlsbGJvYXJkIGlzXG4gICAqIHRvIHRoZSBsZWZ0LCBjZW50ZXIsIG9yIHJpZ2h0IG9mIGl0cyBhbmNob3IgcG9zaXRpb24uXG4gICAqIDxiciAvPjxiciAvPlxuICAgKiA8ZGl2IGFsaWduPSdjZW50ZXInPlxuICAgKiA8aW1nIHNyYz0nSW1hZ2VzL0JpbGxib2FyZC5zZXRIb3Jpem9udGFsT3JpZ2luLnBuZycgd2lkdGg9JzY0OCcgaGVpZ2h0PScxOTYnIC8+PGJyIC8+XG4gICAqIDwvZGl2PlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7SG9yaXpvbnRhbE9yaWdpbn1cbiAgICogQGV4YW1wbGVcbiAgICogLy8gVXNlIGEgYm90dG9tLCBsZWZ0IG9yaWdpblxuICAgKiBiLmhvcml6b250YWxPcmlnaW4gPSBDZXNpdW0uSG9yaXpvbnRhbE9yaWdpbi5MRUZUO1xuICAgKiBiLnZlcnRpY2FsT3JpZ2luID0gQ2VzaXVtLlZlcnRpY2FsT3JpZ2luLkJPVFRPTTtcbiAgICovXG4gIGhvcml6b250YWxPcmlnaW46IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsT3JpZ2luO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBDaGVjay50eXBlT2YubnVtYmVyKFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIGlmICh0aGlzLl9ob3Jpem9udGFsT3JpZ2luICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9ob3Jpem9udGFsT3JpZ2luID0gdmFsdWU7XG4gICAgICAgIG1ha2VEaXJ0eSh0aGlzLCBIT1JJWk9OVEFMX09SSUdJTl9JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSB2ZXJ0aWNhbCBvcmlnaW4gb2YgdGhpcyBiaWxsYm9hcmQsIHdoaWNoIGRldGVybWluZXMgaWYgdGhlIGJpbGxib2FyZCBpc1xuICAgKiB0byB0aGUgYWJvdmUsIGJlbG93LCBvciBhdCB0aGUgY2VudGVyIG9mIGl0cyBhbmNob3IgcG9zaXRpb24uXG4gICAqIDxiciAvPjxiciAvPlxuICAgKiA8ZGl2IGFsaWduPSdjZW50ZXInPlxuICAgKiA8aW1nIHNyYz0nSW1hZ2VzL0JpbGxib2FyZC5zZXRWZXJ0aWNhbE9yaWdpbi5wbmcnIHdpZHRoPSc2OTUnIGhlaWdodD0nMTc1JyAvPjxiciAvPlxuICAgKiA8L2Rpdj5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge1ZlcnRpY2FsT3JpZ2lufVxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBVc2UgYSBib3R0b20sIGxlZnQgb3JpZ2luXG4gICAqIGIuaG9yaXpvbnRhbE9yaWdpbiA9IENlc2l1bS5Ib3Jpem9udGFsT3JpZ2luLkxFRlQ7XG4gICAqIGIudmVydGljYWxPcmlnaW4gPSBDZXNpdW0uVmVydGljYWxPcmlnaW4uQk9UVE9NO1xuICAgKi9cbiAgdmVydGljYWxPcmlnaW46IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbE9yaWdpbjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICBpZiAodGhpcy5fdmVydGljYWxPcmlnaW4gIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsT3JpZ2luID0gdmFsdWU7XG4gICAgICAgIG1ha2VEaXJ0eSh0aGlzLCBWRVJUSUNBTF9PUklHSU5fSU5ERVgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgdW5pZm9ybSBzY2FsZSB0aGF0IGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgYmlsbGJvYXJkJ3MgaW1hZ2Ugc2l6ZSBpbiBwaXhlbHMuXG4gICAqIEEgc2NhbGUgb2YgPGNvZGU+MS4wPC9jb2RlPiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHNpemUgb2YgdGhlIGJpbGxib2FyZDsgYSBzY2FsZSBncmVhdGVyIHRoYW5cbiAgICogPGNvZGU+MS4wPC9jb2RlPiBlbmxhcmdlcyB0aGUgYmlsbGJvYXJkOyBhIHBvc2l0aXZlIHNjYWxlIGxlc3MgdGhhbiA8Y29kZT4xLjA8L2NvZGU+IHNocmlua3NcbiAgICogdGhlIGJpbGxib2FyZC5cbiAgICogPGJyIC8+PGJyIC8+XG4gICAqIDxkaXYgYWxpZ249J2NlbnRlcic+XG4gICAqIDxpbWcgc3JjPSdJbWFnZXMvQmlsbGJvYXJkLnNldFNjYWxlLnBuZycgd2lkdGg9JzQwMCcgaGVpZ2h0PSczMDAnIC8+PGJyLz5cbiAgICogRnJvbSBsZWZ0IHRvIHJpZ2h0IGluIHRoZSBhYm92ZSBpbWFnZSwgdGhlIHNjYWxlcyBhcmUgPGNvZGU+MC41PC9jb2RlPiwgPGNvZGU+MS4wPC9jb2RlPixcbiAgICogYW5kIDxjb2RlPjIuMDwvY29kZT4uXG4gICAqIDwvZGl2PlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgc2NhbGU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY2FsZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICBpZiAodGhpcy5fc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NjYWxlID0gdmFsdWU7XG4gICAgICAgIG1ha2VEaXJ0eSh0aGlzLCBTQ0FMRV9JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBjb2xvciB0aGF0IGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgYmlsbGJvYXJkJ3MgdGV4dHVyZS4gIFRoaXMgaGFzIHR3byBjb21tb24gdXNlIGNhc2VzLiAgRmlyc3QsXG4gICAqIHRoZSBzYW1lIHdoaXRlIHRleHR1cmUgbWF5IGJlIHVzZWQgYnkgbWFueSBkaWZmZXJlbnQgYmlsbGJvYXJkcywgZWFjaCB3aXRoIGEgZGlmZmVyZW50IGNvbG9yLCB0byBjcmVhdGVcbiAgICogY29sb3JlZCBiaWxsYm9hcmRzLiAgU2Vjb25kLCB0aGUgY29sb3IncyBhbHBoYSBjb21wb25lbnQgY2FuIGJlIHVzZWQgdG8gbWFrZSB0aGUgYmlsbGJvYXJkIHRyYW5zbHVjZW50IGFzIHNob3duIGJlbG93LlxuICAgKiBBbiBhbHBoYSBvZiA8Y29kZT4wLjA8L2NvZGU+IG1ha2VzIHRoZSBiaWxsYm9hcmQgdHJhbnNwYXJlbnQsIGFuZCA8Y29kZT4xLjA8L2NvZGU+IG1ha2VzIHRoZSBiaWxsYm9hcmQgb3BhcXVlLlxuICAgKiA8YnIgLz48YnIgLz5cbiAgICogPGRpdiBhbGlnbj0nY2VudGVyJz5cbiAgICogPHRhYmxlIGJvcmRlcj0nMCcgY2VsbHBhZGRpbmc9JzUnPjx0cj5cbiAgICogPHRkIGFsaWduPSdjZW50ZXInPjxjb2RlPmRlZmF1bHQ8L2NvZGU+PGJyLz48aW1nIHNyYz0nSW1hZ2VzL0JpbGxib2FyZC5zZXRDb2xvci5BbHBoYTI1NS5wbmcnIHdpZHRoPScyNTAnIGhlaWdodD0nMTg4JyAvPjwvdGQ+XG4gICAqIDx0ZCBhbGlnbj0nY2VudGVyJz48Y29kZT5hbHBoYSA6IDAuNTwvY29kZT48YnIvPjxpbWcgc3JjPSdJbWFnZXMvQmlsbGJvYXJkLnNldENvbG9yLkFscGhhMTI3LnBuZycgd2lkdGg9JzI1MCcgaGVpZ2h0PScxODgnIC8+PC90ZD5cbiAgICogPC90cj48L3RhYmxlPlxuICAgKiA8L2Rpdj5cbiAgICogPGJyIC8+XG4gICAqIFRoZSByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgdmFsdWVzIGFyZSBpbmRpY2F0ZWQgYnkgPGNvZGU+dmFsdWU8L2NvZGU+J3MgPGNvZGU+cmVkPC9jb2RlPiwgPGNvZGU+Z3JlZW48L2NvZGU+LFxuICAgKiA8Y29kZT5ibHVlPC9jb2RlPiwgYW5kIDxjb2RlPmFscGhhPC9jb2RlPiBwcm9wZXJ0aWVzIGFzIHNob3duIGluIEV4YW1wbGUgMS4gIFRoZXNlIGNvbXBvbmVudHMgcmFuZ2UgZnJvbSA8Y29kZT4wLjA8L2NvZGU+XG4gICAqIChubyBpbnRlbnNpdHkpIHRvIDxjb2RlPjEuMDwvY29kZT4gKGZ1bGwgaW50ZW5zaXR5KS5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge0NvbG9yfVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBFeGFtcGxlIDEuIEFzc2lnbiB5ZWxsb3cuXG4gICAqIGIuY29sb3IgPSBDZXNpdW0uQ29sb3IuWUVMTE9XO1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBFeGFtcGxlIDIuIE1ha2UgYSBiaWxsYm9hcmQgNTAlIHRyYW5zbHVjZW50LlxuICAgKiBiLmNvbG9yID0gbmV3IENlc2l1bS5Db2xvcigxLjAsIDEuMCwgMS4wLCAwLjUpO1xuICAgKi9cbiAgY29sb3I6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdChcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICB2YXIgY29sb3IgPSB0aGlzLl9jb2xvcjtcbiAgICAgIGlmICghQ29sb3IuZXF1YWxzKGNvbG9yLCB2YWx1ZSkpIHtcbiAgICAgICAgQ29sb3IuY2xvbmUodmFsdWUsIGNvbG9yKTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIENPTE9SX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIHJvdGF0aW9uIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICByb3RhdGlvbjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0aW9uO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBDaGVjay50eXBlT2YubnVtYmVyKFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIGlmICh0aGlzLl9yb3RhdGlvbiAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcm90YXRpb24gPSB2YWx1ZTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIFJPVEFUSU9OX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGFsaWduZWQgYXhpcyBpbiB3b3JsZCBzcGFjZS4gVGhlIGFsaWduZWQgYXhpcyBpcyB0aGUgdW5pdCB2ZWN0b3IgdGhhdCB0aGUgYmlsbGJvYXJkIHVwIHZlY3RvciBwb2ludHMgdG93YXJkcy5cbiAgICogVGhlIGRlZmF1bHQgaXMgdGhlIHplcm8gdmVjdG9yLCB3aGljaCBtZWFucyB0aGUgYmlsbGJvYXJkIGlzIGFsaWduZWQgdG8gdGhlIHNjcmVlbiB1cCB2ZWN0b3IuXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfVxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBFeGFtcGxlIDEuXG4gICAqIC8vIEhhdmUgdGhlIGJpbGxib2FyZCB1cCB2ZWN0b3IgcG9pbnQgbm9ydGhcbiAgICogYmlsbGJvYXJkLmFsaWduZWRBeGlzID0gQ2VzaXVtLkNhcnRlc2lhbjMuVU5JVF9aO1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBFeGFtcGxlIDIuXG4gICAqIC8vIEhhdmUgdGhlIGJpbGxib2FyZCBwb2ludCBlYXN0LlxuICAgKiBiaWxsYm9hcmQuYWxpZ25lZEF4aXMgPSBDZXNpdW0uQ2FydGVzaWFuMy5VTklUX1o7XG4gICAqIGJpbGxib2FyZC5yb3RhdGlvbiA9IC1DZXNpdW0uTWF0aC5QSV9PVkVSX1RXTztcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gRXhhbXBsZSAzLlxuICAgKiAvLyBSZXNldCB0aGUgYWxpZ25lZCBheGlzXG4gICAqIGJpbGxib2FyZC5hbGlnbmVkQXhpcyA9IENlc2l1bS5DYXJ0ZXNpYW4zLlpFUk87XG4gICAqL1xuICBhbGlnbmVkQXhpczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FsaWduZWRBeGlzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBDaGVjay50eXBlT2Yub2JqZWN0KFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHZhciBhbGlnbmVkQXhpcyA9IHRoaXMuX2FsaWduZWRBeGlzO1xuICAgICAgaWYgKCFDYXJ0ZXNpYW4zLmVxdWFscyhhbGlnbmVkQXhpcywgdmFsdWUpKSB7XG4gICAgICAgIENhcnRlc2lhbjMuY2xvbmUodmFsdWUsIGFsaWduZWRBeGlzKTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIEFMSUdORURfQVhJU19JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGEgd2lkdGggZm9yIHRoZSBiaWxsYm9hcmQuIElmIHVuZGVmaW5lZCwgdGhlIGltYWdlIHdpZHRoIHdpbGwgYmUgdXNlZC5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHdpZHRoOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlKHRoaXMuX3dpZHRoLCB0aGlzLl9pbWFnZVdpZHRoKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIoXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcbiAgICAgIGlmICh0aGlzLl93aWR0aCAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB2YWx1ZTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIElNQUdFX0lOREVYX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgYSBoZWlnaHQgZm9yIHRoZSBiaWxsYm9hcmQuIElmIHVuZGVmaW5lZCwgdGhlIGltYWdlIGhlaWdodCB3aWxsIGJlIHVzZWQuXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBoZWlnaHQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWUodGhpcy5faGVpZ2h0LCB0aGlzLl9pbWFnZUhlaWdodCk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBDaGVjay50eXBlT2YubnVtYmVyKFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgICBpZiAodGhpcy5faGVpZ2h0ICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIElNQUdFX0lOREVYX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgaWYgdGhlIGJpbGxib2FyZCBzaXplIGlzIGluIG1ldGVycyBvciBwaXhlbHMuIDxjb2RlPnRydWU8L2NvZGU+IHRvIHNpemUgdGhlIGJpbGxib2FyZCBpbiBtZXRlcnM7XG4gICAqIG90aGVyd2lzZSwgdGhlIHNpemUgaXMgaW4gcGl4ZWxzLlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNpemVJbk1ldGVyczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NpemVJbk1ldGVycztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLmJvb2woXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcbiAgICAgIGlmICh0aGlzLl9zaXplSW5NZXRlcnMgIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NpemVJbk1ldGVycyA9IHZhbHVlO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgQ09MT1JfSU5ERVgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgY29uZGl0aW9uIHNwZWNpZnlpbmcgYXQgd2hhdCBkaXN0YW5jZSBmcm9tIHRoZSBjYW1lcmEgdGhhdCB0aGlzIGJpbGxib2FyZCB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge0Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvbn1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICBkaXN0YW5jZURpc3BsYXlDb25kaXRpb246IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kaXN0YW5jZURpc3BsYXlDb25kaXRpb247XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKFxuICAgICAgICAhRGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uLmVxdWFscyh2YWx1ZSwgdGhpcy5fZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uKVxuICAgICAgKSB7XG4gICAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIENoZWNrLnR5cGVPZi5vYmplY3QoXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKHZhbHVlLmZhciA8PSB2YWx1ZS5uZWFyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgICAgIFwiZmFyIGRpc3RhbmNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG5lYXIgZGlzdGFuY2UuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuICAgICAgICB0aGlzLl9kaXN0YW5jZURpc3BsYXlDb25kaXRpb24gPSBEaXN0YW5jZURpc3BsYXlDb25kaXRpb24uY2xvbmUoXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgdGhpcy5fZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uXG4gICAgICAgICk7XG4gICAgICAgIG1ha2VEaXJ0eSh0aGlzLCBESVNUQU5DRV9ESVNQTEFZX0NPTkRJVElPTik7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjYW1lcmEgYXQgd2hpY2ggdG8gZGlzYWJsZSB0aGUgZGVwdGggdGVzdCB0bywgZm9yIGV4YW1wbGUsIHByZXZlbnQgY2xpcHBpbmcgYWdhaW5zdCB0ZXJyYWluLlxuICAgKiBXaGVuIHNldCB0byB6ZXJvLCB0aGUgZGVwdGggdGVzdCBpcyBhbHdheXMgYXBwbGllZC4gV2hlbiBzZXQgdG8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCB0aGUgZGVwdGggdGVzdCBpcyBuZXZlciBhcHBsaWVkLlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIDwgMC4wKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgICAgXCJkaXNhYmxlRGVwdGhUZXN0RGlzdGFuY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMC4wLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgICBpZiAodGhpcy5fZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kaXNhYmxlRGVwdGhUZXN0RGlzdGFuY2UgPSB2YWx1ZTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIERJU0FCTEVfREVQVEhfRElTVEFOQ0UpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgdXNlci1kZWZpbmVkIG9iamVjdCByZXR1cm5lZCB3aGVuIHRoZSBiaWxsYm9hcmQgaXMgcGlja2VkLlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aGlzLl9pZCA9IHZhbHVlO1xuICAgICAgaWYgKGRlZmluZWQodGhpcy5fcGlja0lkKSkge1xuICAgICAgICB0aGlzLl9waWNrSWQub2JqZWN0LmlkID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHByaW1pdGl2ZSB0byByZXR1cm4gd2hlbiBwaWNraW5nIHRoaXMgYmlsbGJvYXJkLlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcGlja1ByaW1pdGl2ZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BpY2tQcmltaXRpdmU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdGhpcy5fcGlja1ByaW1pdGl2ZSA9IHZhbHVlO1xuICAgICAgaWYgKGRlZmluZWQodGhpcy5fcGlja0lkKSkge1xuICAgICAgICB0aGlzLl9waWNrSWQub2JqZWN0LnByaW1pdGl2ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwaWNrSWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9waWNrSWQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogPHA+XG4gICAqIEdldHMgb3Igc2V0cyB0aGUgaW1hZ2UgdG8gYmUgdXNlZCBmb3IgdGhpcyBiaWxsYm9hcmQuICBJZiBhIHRleHR1cmUgaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkIGZvciB0aGVcbiAgICogZ2l2ZW4gaW1hZ2UsIHRoZSBleGlzdGluZyB0ZXh0dXJlIGlzIHVzZWQuXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHNldCB0byBhIGxvYWRlZCBJbWFnZSwgYSBVUkwgd2hpY2ggd2lsbCBiZSBsb2FkZWQgYXMgYW4gSW1hZ2UgYXV0b21hdGljYWxseSxcbiAgICogYSBjYW52YXMsIG9yIGFub3RoZXIgYmlsbGJvYXJkJ3MgaW1hZ2UgcHJvcGVydHkgKGZyb20gdGhlIHNhbWUgYmlsbGJvYXJkIGNvbGxlY3Rpb24pLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEBleGFtcGxlXG4gICAqIC8vIGxvYWQgYW4gaW1hZ2UgZnJvbSBhIFVSTFxuICAgKiBiLmltYWdlID0gJ3NvbWUvaW1hZ2UvdXJsLnBuZyc7XG4gICAqXG4gICAqIC8vIGFzc3VtaW5nIGIxIGFuZCBiMiBhcmUgYmlsbGJvYXJkcyBpbiB0aGUgc2FtZSBiaWxsYm9hcmQgY29sbGVjdGlvbixcbiAgICogLy8gdXNlIHRoZSBzYW1lIGltYWdlIGZvciBib3RoIGJpbGxib2FyZHMuXG4gICAqIGIyLmltYWdlID0gYjEuaW1hZ2U7XG4gICAqL1xuICBpbWFnZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlSWQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9pbWFnZUluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX2ltYWdlU3ViUmVnaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9pbWFnZUlkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9pbWFnZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5faW1hZ2VJbmRleFByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1ha2VEaXJ0eSh0aGlzLCBJTUFHRV9JTkRFWF9JTkRFWCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aGlzLnNldEltYWdlKHZhbHVlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zZXRJbWFnZSh2YWx1ZS51cmwsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZCh2YWx1ZS5zcmMpKSB7XG4gICAgICAgIHRoaXMuc2V0SW1hZ2UodmFsdWUuc3JjLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEltYWdlKGNyZWF0ZUd1aWQoKSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4sIHRoaXMgYmlsbGJvYXJkIGlzIHJlYWR5IHRvIHJlbmRlciwgaS5lLiwgdGhlIGltYWdlXG4gICAqIGhhcyBiZWVuIGRvd25sb2FkZWQgYW5kIHRoZSBXZWJHTCByZXNvdXJjZXMgYXJlIGNyZWF0ZWQuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWR5OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW1hZ2VJbmRleCAhPT0gLTE7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogS2VlcHMgdHJhY2sgb2YgdGhlIHBvc2l0aW9uIG9mIHRoZSBiaWxsYm9hcmQgYmFzZWQgb24gdGhlIGhlaWdodCByZWZlcmVuY2UuXG4gICAqIEBtZW1iZXJvZiBCaWxsYm9hcmQucHJvdG90eXBlXG4gICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NsYW1wZWRQb3NpdGlvbjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FjdHVhbENsYW1wZWRQb3NpdGlvbjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aGlzLl9hY3R1YWxDbGFtcGVkUG9zaXRpb24gPSBDYXJ0ZXNpYW4zLmNsb25lKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdGhpcy5fYWN0dWFsQ2xhbXBlZFBvc2l0aW9uXG4gICAgICApO1xuICAgICAgbWFrZURpcnR5KHRoaXMsIFBPU0lUSU9OX0lOREVYKTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoaXMgYmlsbGJvYXJkIHdpbGwgYmUgc2hvd24gb3IgaGlkZGVuIGJlY2F1c2UgaXQgd2FzIGNsdXN0ZXJlZC5cbiAgICogQG1lbWJlcm9mIEJpbGxib2FyZC5wcm90b3R5cGVcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbHVzdGVyU2hvdzoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NsdXN0ZXJTaG93O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9jbHVzdGVyU2hvdyAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY2x1c3RlclNob3cgPSB2YWx1ZTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIFNIT1dfSU5ERVgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBvdXRsaW5lIGNvbG9yIG9mIHRoaXMgQmlsbGJvYXJkLiAgRWZmZWN0aXZlIG9ubHkgZm9yIFNERiBiaWxsYm9hcmRzIGxpa2UgTGFiZWwgZ2x5cGhzLlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Q29sb3J9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvdXRsaW5lQ29sb3I6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vdXRsaW5lQ29sb3I7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmICghZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwidmFsdWUgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHZhciBvdXRsaW5lQ29sb3IgPSB0aGlzLl9vdXRsaW5lQ29sb3I7XG4gICAgICBpZiAoIUNvbG9yLmVxdWFscyhvdXRsaW5lQ29sb3IsIHZhbHVlKSkge1xuICAgICAgICBDb2xvci5jbG9uZSh2YWx1ZSwgb3V0bGluZUNvbG9yKTtcbiAgICAgICAgbWFrZURpcnR5KHRoaXMsIFNERl9JTkRFWCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIG91dGxpbmUgd2lkdGggb2YgdGhpcyBCaWxsYm9hcmQgaW4gcGl4ZWxzLiAgRWZmZWN0aXZlIG9ubHkgZm9yIFNERiBiaWxsYm9hcmRzIGxpa2UgTGFiZWwgZ2x5cGhzLlxuICAgKiBAbWVtYmVyb2YgQmlsbGJvYXJkLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb3V0bGluZVdpZHRoOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb3V0bGluZVdpZHRoO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9vdXRsaW5lV2lkdGggIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX291dGxpbmVXaWR0aCA9IHZhbHVlO1xuICAgICAgICBtYWtlRGlydHkodGhpcywgU0RGX0lOREVYKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufSk7XG5cbkJpbGxib2FyZC5wcm90b3R5cGUuZ2V0UGlja0lkID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgaWYgKCFkZWZpbmVkKHRoaXMuX3BpY2tJZCkpIHtcbiAgICB0aGlzLl9waWNrSWQgPSBjb250ZXh0LmNyZWF0ZVBpY2tJZCh7XG4gICAgICBwcmltaXRpdmU6IHRoaXMuX3BpY2tQcmltaXRpdmUsXG4gICAgICBjb2xsZWN0aW9uOiB0aGlzLl9jb2xsZWN0aW9uLFxuICAgICAgaWQ6IHRoaXMuX2lkLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3BpY2tJZDtcbn07XG5cbkJpbGxib2FyZC5wcm90b3R5cGUuX3VwZGF0ZUNsYW1waW5nID0gZnVuY3Rpb24gKCkge1xuICBCaWxsYm9hcmQuX3VwZGF0ZUNsYW1waW5nKHRoaXMuX2JpbGxib2FyZENvbGxlY3Rpb24sIHRoaXMpO1xufTtcblxudmFyIHNjcmF0Y2hDYXJ0b2dyYXBoaWMgPSBuZXcgQ2FydG9ncmFwaGljKCk7XG52YXIgc2NyYXRjaFBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjMoKTtcblxuQmlsbGJvYXJkLl91cGRhdGVDbGFtcGluZyA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBvd25lcikge1xuICB2YXIgc2NlbmUgPSBjb2xsZWN0aW9uLl9zY2VuZTtcbiAgaWYgKCFkZWZpbmVkKHNjZW5lKSB8fCAhZGVmaW5lZChzY2VuZS5nbG9iZSkpIHtcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgIGlmIChvd25lci5faGVpZ2h0UmVmZXJlbmNlICE9PSBIZWlnaHRSZWZlcmVuY2UuTk9ORSkge1xuICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICBcIkhlaWdodCByZWZlcmVuY2UgaXMgbm90IHN1cHBvcnRlZCB3aXRob3V0IGEgc2NlbmUgYW5kIGdsb2JlLlwiXG4gICAgICApO1xuICAgIH1cbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZ2xvYmUgPSBzY2VuZS5nbG9iZTtcbiAgdmFyIGVsbGlwc29pZCA9IGdsb2JlLmVsbGlwc29pZDtcbiAgdmFyIHN1cmZhY2UgPSBnbG9iZS5fc3VyZmFjZTtcblxuICB2YXIgbW9kZSA9IHNjZW5lLmZyYW1lU3RhdGUubW9kZTtcblxuICB2YXIgbW9kZUNoYW5nZWQgPSBtb2RlICE9PSBvd25lci5fbW9kZTtcbiAgb3duZXIuX21vZGUgPSBtb2RlO1xuXG4gIGlmIChcbiAgICAob3duZXIuX2hlaWdodFJlZmVyZW5jZSA9PT0gSGVpZ2h0UmVmZXJlbmNlLk5PTkUgfHwgbW9kZUNoYW5nZWQpICYmXG4gICAgZGVmaW5lZChvd25lci5fcmVtb3ZlQ2FsbGJhY2tGdW5jKVxuICApIHtcbiAgICBvd25lci5fcmVtb3ZlQ2FsbGJhY2tGdW5jKCk7XG4gICAgb3duZXIuX3JlbW92ZUNhbGxiYWNrRnVuYyA9IHVuZGVmaW5lZDtcbiAgICBvd25lci5fY2xhbXBlZFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKFxuICAgIG93bmVyLl9oZWlnaHRSZWZlcmVuY2UgPT09IEhlaWdodFJlZmVyZW5jZS5OT05FIHx8XG4gICAgIWRlZmluZWQob3duZXIuX3Bvc2l0aW9uKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcG9zaXRpb24gPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMob3duZXIuX3Bvc2l0aW9uKTtcbiAgaWYgKCFkZWZpbmVkKHBvc2l0aW9uKSkge1xuICAgIG93bmVyLl9hY3R1YWxDbGFtcGVkUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRlZmluZWQob3duZXIuX3JlbW92ZUNhbGxiYWNrRnVuYykpIHtcbiAgICBvd25lci5fcmVtb3ZlQ2FsbGJhY2tGdW5jKCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGdW5jdGlvbihjbGFtcGVkUG9zaXRpb24pIHtcbiAgICBpZiAob3duZXIuX2hlaWdodFJlZmVyZW5jZSA9PT0gSGVpZ2h0UmVmZXJlbmNlLlJFTEFUSVZFX1RPX0dST1VORCkge1xuICAgICAgaWYgKG93bmVyLl9tb2RlID09PSBTY2VuZU1vZGUuU0NFTkUzRCkge1xuICAgICAgICB2YXIgY2xhbXBlZENhcnQgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoXG4gICAgICAgICAgY2xhbXBlZFBvc2l0aW9uLFxuICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNcbiAgICAgICAgKTtcbiAgICAgICAgY2xhbXBlZENhcnQuaGVpZ2h0ICs9IHBvc2l0aW9uLmhlaWdodDtcbiAgICAgICAgZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNsYW1wZWRDYXJ0LCBjbGFtcGVkUG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhbXBlZFBvc2l0aW9uLnggKz0gcG9zaXRpb24uaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgICBvd25lci5fY2xhbXBlZFBvc2l0aW9uID0gQ2FydGVzaWFuMy5jbG9uZShcbiAgICAgIGNsYW1wZWRQb3NpdGlvbixcbiAgICAgIG93bmVyLl9jbGFtcGVkUG9zaXRpb25cbiAgICApO1xuICB9XG4gIG93bmVyLl9yZW1vdmVDYWxsYmFja0Z1bmMgPSBzdXJmYWNlLnVwZGF0ZUhlaWdodChwb3NpdGlvbiwgdXBkYXRlRnVuY3Rpb24pO1xuXG4gIENhcnRvZ3JhcGhpYy5jbG9uZShwb3NpdGlvbiwgc2NyYXRjaENhcnRvZ3JhcGhpYyk7XG4gIHZhciBoZWlnaHQgPSBnbG9iZS5nZXRIZWlnaHQocG9zaXRpb24pO1xuICBpZiAoZGVmaW5lZChoZWlnaHQpKSB7XG4gICAgc2NyYXRjaENhcnRvZ3JhcGhpYy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oc2NyYXRjaENhcnRvZ3JhcGhpYywgc2NyYXRjaFBvc2l0aW9uKTtcblxuICB1cGRhdGVGdW5jdGlvbihzY3JhdGNoUG9zaXRpb24pO1xufTtcblxuQmlsbGJvYXJkLnByb3RvdHlwZS5fbG9hZEltYWdlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXRsYXMgPSB0aGlzLl9iaWxsYm9hcmRDb2xsZWN0aW9uLl90ZXh0dXJlQXRsYXM7XG5cbiAgdmFyIGltYWdlSWQgPSB0aGlzLl9pbWFnZUlkO1xuICB2YXIgaW1hZ2UgPSB0aGlzLl9pbWFnZTtcbiAgdmFyIGltYWdlU3ViUmVnaW9uID0gdGhpcy5faW1hZ2VTdWJSZWdpb247XG4gIHZhciBpbWFnZUluZGV4UHJvbWlzZTtcblxuICBpZiAoZGVmaW5lZChpbWFnZSkpIHtcbiAgICBpbWFnZUluZGV4UHJvbWlzZSA9IGF0bGFzLmFkZEltYWdlKGltYWdlSWQsIGltYWdlKTtcbiAgfVxuICBpZiAoZGVmaW5lZChpbWFnZVN1YlJlZ2lvbikpIHtcbiAgICBpbWFnZUluZGV4UHJvbWlzZSA9IGF0bGFzLmFkZFN1YlJlZ2lvbihpbWFnZUlkLCBpbWFnZVN1YlJlZ2lvbik7XG4gIH1cblxuICB0aGlzLl9pbWFnZUluZGV4UHJvbWlzZSA9IGltYWdlSW5kZXhQcm9taXNlO1xuXG4gIGlmICghZGVmaW5lZChpbWFnZUluZGV4UHJvbWlzZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGltYWdlSW5kZXhQcm9taXNlXG4gICAgLnRoZW4oZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoYXQuX2ltYWdlSWQgIT09IGltYWdlSWQgfHxcbiAgICAgICAgdGhhdC5faW1hZ2UgIT09IGltYWdlIHx8XG4gICAgICAgICFCb3VuZGluZ1JlY3RhbmdsZS5lcXVhbHModGhhdC5faW1hZ2VTdWJSZWdpb24sIGltYWdlU3ViUmVnaW9uKVxuICAgICAgKSB7XG4gICAgICAgIC8vIGFub3RoZXIgbG9hZCBvY2N1cnJlZCBiZWZvcmUgdGhpcyBvbmUgZmluaXNoZWQsIGlnbm9yZSB0aGUgaW5kZXhcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBmaWxsIGluIGltYWdlV2lkdGggYW5kIGltYWdlSGVpZ2h0XG4gICAgICB2YXIgdGV4dHVyZUNvb3JkaW5hdGVzID0gYXRsYXMudGV4dHVyZUNvb3JkaW5hdGVzW2luZGV4XTtcbiAgICAgIHRoYXQuX2ltYWdlV2lkdGggPSBhdGxhcy50ZXh0dXJlLndpZHRoICogdGV4dHVyZUNvb3JkaW5hdGVzLndpZHRoO1xuICAgICAgdGhhdC5faW1hZ2VIZWlnaHQgPSBhdGxhcy50ZXh0dXJlLmhlaWdodCAqIHRleHR1cmVDb29yZGluYXRlcy5oZWlnaHQ7XG5cbiAgICAgIHRoYXQuX2ltYWdlSW5kZXggPSBpbmRleDtcbiAgICAgIHRoYXQuX3JlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoYXQuX2ltYWdlID0gdW5kZWZpbmVkO1xuICAgICAgdGhhdC5faW1hZ2VJbmRleFByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICBtYWtlRGlydHkodGhhdCwgSU1BR0VfSU5ERVhfSU5ERVgpO1xuICAgIH0pXG4gICAgLm90aGVyd2lzZShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIGltYWdlIGZvciBiaWxsYm9hcmQ6IFwiICsgZXJyb3IpO1xuICAgICAgdGhhdC5faW1hZ2VJbmRleFByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIDxwPlxuICogU2V0cyB0aGUgaW1hZ2UgdG8gYmUgdXNlZCBmb3IgdGhpcyBiaWxsYm9hcmQuICBJZiBhIHRleHR1cmUgaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkIGZvciB0aGVcbiAqIGdpdmVuIGlkLCB0aGUgZXhpc3RpbmcgdGV4dHVyZSBpcyB1c2VkLlxuICogPC9wPlxuICogPHA+XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCBmb3IgZHluYW1pY2FsbHkgY3JlYXRpbmcgdGV4dHVyZXMgdGhhdCBhcmUgc2hhcmVkIGFjcm9zcyBtYW55IGJpbGxib2FyZHMuXG4gKiBPbmx5IHRoZSBmaXJzdCBiaWxsYm9hcmQgd2lsbCBhY3R1YWxseSBjYWxsIHRoZSBmdW5jdGlvbiBhbmQgY3JlYXRlIHRoZSB0ZXh0dXJlLCB3aGlsZSBzdWJzZXF1ZW50XG4gKiBiaWxsYm9hcmRzIGNyZWF0ZWQgd2l0aCB0aGUgc2FtZSBpZCB3aWxsIHNpbXBseSByZS11c2UgdGhlIGV4aXN0aW5nIHRleHR1cmUuXG4gKiA8L3A+XG4gKiA8cD5cbiAqIFRvIGxvYWQgYW4gaW1hZ2UgZnJvbSBhIFVSTCwgc2V0dGluZyB0aGUge0BsaW5rIEJpbGxib2FyZCNpbWFnZX0gcHJvcGVydHkgaXMgbW9yZSBjb252ZW5pZW50LlxuICogPC9wPlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIGltYWdlLiAgVGhpcyBjYW4gYmUgYW55IHN0cmluZyB0aGF0IHVuaXF1ZWx5IGlkZW50aWZpZXMgdGhlIGltYWdlLlxuICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fFN0cmluZ3xSZXNvdXJjZXxCaWxsYm9hcmQuQ3JlYXRlSW1hZ2VDYWxsYmFja30gaW1hZ2UgVGhlIGltYWdlIHRvIGxvYWQuICBUaGlzIHBhcmFtZXRlclxuICogICAgICAgIGNhbiBlaXRoZXIgYmUgYSBsb2FkZWQgSW1hZ2Ugb3IgQ2FudmFzLCBhIFVSTCB3aGljaCB3aWxsIGJlIGxvYWRlZCBhcyBhbiBJbWFnZSBhdXRvbWF0aWNhbGx5LFxuICogICAgICAgIG9yIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgdG8gY3JlYXRlIHRoZSBpbWFnZSBpZiBpdCBoYXNuJ3QgYmVlbiBsb2FkZWQgYWxyZWFkeS5cbiAqIEBleGFtcGxlXG4gKiAvLyBjcmVhdGUgYSBiaWxsYm9hcmQgaW1hZ2UgZHluYW1pY2FsbHlcbiAqIGZ1bmN0aW9uIGRyYXdJbWFnZShpZCkge1xuICogICAvLyBjcmVhdGUgYW5kIGRyYXcgYW4gaW1hZ2UgdXNpbmcgYSBjYW52YXNcbiAqICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICogICB2YXIgY29udGV4dDJEID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gKiAgIC8vIC4uLiBkcmF3IGltYWdlXG4gKiAgIHJldHVybiBjYW52YXM7XG4gKiB9XG4gKiAvLyBkcmF3SW1hZ2Ugd2lsbCBiZSBjYWxsZWQgdG8gY3JlYXRlIHRoZSB0ZXh0dXJlXG4gKiBiLnNldEltYWdlKCdteUltYWdlJywgZHJhd0ltYWdlKTtcbiAqXG4gKiAvLyBzdWJzZXF1ZW50IGJpbGxib2FyZHMgY3JlYXRlZCBpbiB0aGUgc2FtZSBjb2xsZWN0aW9uIHVzaW5nIHRoZSBzYW1lIGlkIHdpbGwgdXNlIHRoZSBleGlzdGluZ1xuICogLy8gdGV4dHVyZSwgd2l0aG91dCB0aGUgbmVlZCB0byBjcmVhdGUgdGhlIGNhbnZhcyBvciBkcmF3IHRoZSBpbWFnZVxuICogYjIuc2V0SW1hZ2UoJ215SW1hZ2UnLCBkcmF3SW1hZ2UpO1xuICovXG5CaWxsYm9hcmQucHJvdG90eXBlLnNldEltYWdlID0gZnVuY3Rpb24gKGlkLCBpbWFnZSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIWRlZmluZWQoaWQpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwiaWQgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIGlmICghZGVmaW5lZChpbWFnZSkpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJpbWFnZSBpcyByZXF1aXJlZC5cIik7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgaWYgKHRoaXMuX2ltYWdlSWQgPT09IGlkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5faW1hZ2VJbmRleCA9IC0xO1xuICB0aGlzLl9pbWFnZVN1YlJlZ2lvbiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5faW1hZ2VJZCA9IGlkO1xuICB0aGlzLl9pbWFnZSA9IGltYWdlO1xuXG4gIGlmIChkZWZpbmVkKHRoaXMuX2JpbGxib2FyZENvbGxlY3Rpb24uX3RleHR1cmVBdGxhcykpIHtcbiAgICB0aGlzLl9sb2FkSW1hZ2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBVc2VzIGEgc3ViLXJlZ2lvbiBvZiB0aGUgaW1hZ2Ugd2l0aCB0aGUgZ2l2ZW4gaWQgYXMgdGhlIGltYWdlIGZvciB0aGlzIGJpbGxib2FyZCxcbiAqIG1lYXN1cmVkIGluIHBpeGVscyBmcm9tIHRoZSBib3R0b20tbGVmdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBpbWFnZSB0byB1c2UuXG4gKiBAcGFyYW0ge0JvdW5kaW5nUmVjdGFuZ2xlfSBzdWJSZWdpb24gVGhlIHN1Yi1yZWdpb24gb2YgdGhlIGltYWdlLlxuICpcbiAqIEBleGNlcHRpb24ge1J1bnRpbWVFcnJvcn0gaW1hZ2Ugd2l0aCBpZCBtdXN0IGJlIGluIHRoZSBhdGxhc1xuICovXG5CaWxsYm9hcmQucHJvdG90eXBlLnNldEltYWdlU3ViUmVnaW9uID0gZnVuY3Rpb24gKGlkLCBzdWJSZWdpb24pIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKCFkZWZpbmVkKGlkKSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcImlkIGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuICBpZiAoIWRlZmluZWQoc3ViUmVnaW9uKSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcInN1YlJlZ2lvbiBpcyByZXF1aXJlZC5cIik7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgaWYgKFxuICAgIHRoaXMuX2ltYWdlSWQgPT09IGlkICYmXG4gICAgQm91bmRpbmdSZWN0YW5nbGUuZXF1YWxzKHRoaXMuX2ltYWdlU3ViUmVnaW9uLCBzdWJSZWdpb24pXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2ltYWdlSW5kZXggPSAtMTtcbiAgdGhpcy5faW1hZ2VJZCA9IGlkO1xuICB0aGlzLl9pbWFnZVN1YlJlZ2lvbiA9IEJvdW5kaW5nUmVjdGFuZ2xlLmNsb25lKHN1YlJlZ2lvbik7XG5cbiAgaWYgKGRlZmluZWQodGhpcy5fYmlsbGJvYXJkQ29sbGVjdGlvbi5fdGV4dHVyZUF0bGFzKSkge1xuICAgIHRoaXMuX2xvYWRJbWFnZSgpO1xuICB9XG59O1xuXG5CaWxsYm9hcmQucHJvdG90eXBlLl9zZXRUcmFuc2xhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcInZhbHVlIGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB2YXIgdHJhbnNsYXRlID0gdGhpcy5fdHJhbnNsYXRlO1xuICBpZiAoIUNhcnRlc2lhbjIuZXF1YWxzKHRyYW5zbGF0ZSwgdmFsdWUpKSB7XG4gICAgQ2FydGVzaWFuMi5jbG9uZSh2YWx1ZSwgdHJhbnNsYXRlKTtcbiAgICBtYWtlRGlydHkodGhpcywgUElYRUxfT0ZGU0VUX0lOREVYKTtcbiAgfVxufTtcblxuQmlsbGJvYXJkLnByb3RvdHlwZS5fZ2V0QWN0dWFsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVkKHRoaXMuX2NsYW1wZWRQb3NpdGlvbilcbiAgICA/IHRoaXMuX2NsYW1wZWRQb3NpdGlvblxuICAgIDogdGhpcy5fYWN0dWFsUG9zaXRpb247XG59O1xuXG5CaWxsYm9hcmQucHJvdG90eXBlLl9zZXRBY3R1YWxQb3NpdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAoIWRlZmluZWQodGhpcy5fY2xhbXBlZFBvc2l0aW9uKSkge1xuICAgIENhcnRlc2lhbjMuY2xvbmUodmFsdWUsIHRoaXMuX2FjdHVhbFBvc2l0aW9uKTtcbiAgfVxuICBtYWtlRGlydHkodGhpcywgUE9TSVRJT05fSU5ERVgpO1xufTtcblxudmFyIHRlbXBDYXJ0ZXNpYW4zID0gbmV3IENhcnRlc2lhbjQoKTtcbkJpbGxib2FyZC5fY29tcHV0ZUFjdHVhbFBvc2l0aW9uID0gZnVuY3Rpb24gKFxuICBiaWxsYm9hcmQsXG4gIHBvc2l0aW9uLFxuICBmcmFtZVN0YXRlLFxuICBtb2RlbE1hdHJpeFxuKSB7XG4gIGlmIChkZWZpbmVkKGJpbGxib2FyZC5fY2xhbXBlZFBvc2l0aW9uKSkge1xuICAgIGlmIChmcmFtZVN0YXRlLm1vZGUgIT09IGJpbGxib2FyZC5fbW9kZSkge1xuICAgICAgYmlsbGJvYXJkLl91cGRhdGVDbGFtcGluZygpO1xuICAgIH1cbiAgICByZXR1cm4gYmlsbGJvYXJkLl9jbGFtcGVkUG9zaXRpb247XG4gIH0gZWxzZSBpZiAoZnJhbWVTdGF0ZS5tb2RlID09PSBTY2VuZU1vZGUuU0NFTkUzRCkge1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIE1hdHJpeDQubXVsdGlwbHlCeVBvaW50KG1vZGVsTWF0cml4LCBwb3NpdGlvbiwgdGVtcENhcnRlc2lhbjMpO1xuICByZXR1cm4gU2NlbmVUcmFuc2Zvcm1zLmNvbXB1dGVBY3R1YWxXZ3M4NFBvc2l0aW9uKGZyYW1lU3RhdGUsIHRlbXBDYXJ0ZXNpYW4zKTtcbn07XG5cbnZhciBzY3JhdGNoQ2FydGVzaWFuMyA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgYmFzaWNhbGx5IGEgc3RyaXBwZWQtZG93biBKYXZhU2NyaXB0IHZlcnNpb24gb2YgQmlsbGJvYXJkQ29sbGVjdGlvblZTLmdsc2xcbkJpbGxib2FyZC5fY29tcHV0ZVNjcmVlblNwYWNlUG9zaXRpb24gPSBmdW5jdGlvbiAoXG4gIG1vZGVsTWF0cml4LFxuICBwb3NpdGlvbixcbiAgZXllT2Zmc2V0LFxuICBwaXhlbE9mZnNldCxcbiAgc2NlbmUsXG4gIHJlc3VsdFxuKSB7XG4gIC8vIE1vZGVsIHRvIHdvcmxkIGNvb3JkaW5hdGVzXG4gIHZhciBwb3NpdGlvbldvcmxkID0gTWF0cml4NC5tdWx0aXBseUJ5UG9pbnQoXG4gICAgbW9kZWxNYXRyaXgsXG4gICAgcG9zaXRpb24sXG4gICAgc2NyYXRjaENhcnRlc2lhbjNcbiAgKTtcblxuICAvLyBXb3JsZCB0byB3aW5kb3cgY29vcmRpbmF0ZXNcbiAgdmFyIHBvc2l0aW9uV0MgPSBTY2VuZVRyYW5zZm9ybXMud2dzODRXaXRoRXllT2Zmc2V0VG9XaW5kb3dDb29yZGluYXRlcyhcbiAgICBzY2VuZSxcbiAgICBwb3NpdGlvbldvcmxkLFxuICAgIGV5ZU9mZnNldCxcbiAgICByZXN1bHRcbiAgKTtcbiAgaWYgKCFkZWZpbmVkKHBvc2l0aW9uV0MpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIEFwcGx5IHBpeGVsIG9mZnNldFxuICBDYXJ0ZXNpYW4yLmFkZChwb3NpdGlvbldDLCBwaXhlbE9mZnNldCwgcG9zaXRpb25XQyk7XG5cbiAgcmV0dXJuIHBvc2l0aW9uV0M7XG59O1xuXG52YXIgc2NyYXRjaFBpeGVsT2Zmc2V0ID0gbmV3IENhcnRlc2lhbjIoMC4wLCAwLjApO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBzY3JlZW4tc3BhY2UgcG9zaXRpb24gb2YgdGhlIGJpbGxib2FyZCdzIG9yaWdpbiwgdGFraW5nIGludG8gYWNjb3VudCBleWUgYW5kIHBpeGVsIG9mZnNldHMuXG4gKiBUaGUgc2NyZWVuIHNwYWNlIG9yaWdpbiBpcyB0aGUgdG9wLCBsZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzOyA8Y29kZT54PC9jb2RlPiBpbmNyZWFzZXMgZnJvbVxuICogbGVmdCB0byByaWdodCwgYW5kIDxjb2RlPnk8L2NvZGU+IGluY3JlYXNlcyBmcm9tIHRvcCB0byBib3R0b20uXG4gKlxuICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgVGhlIHNjZW5lLlxuICogQHBhcmFtIHtDYXJ0ZXNpYW4yfSBbcmVzdWx0XSBUaGUgb2JqZWN0IG9udG8gd2hpY2ggdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtDYXJ0ZXNpYW4yfSBUaGUgc2NyZWVuLXNwYWNlIHBvc2l0aW9uIG9mIHRoZSBiaWxsYm9hcmQuXG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IEJpbGxib2FyZCBtdXN0IGJlIGluIGEgY29sbGVjdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc29sZS5sb2coYi5jb21wdXRlU2NyZWVuU3BhY2VQb3NpdGlvbihzY2VuZSkudG9TdHJpbmcoKSk7XG4gKlxuICogQHNlZSBCaWxsYm9hcmQjZXllT2Zmc2V0XG4gKiBAc2VlIEJpbGxib2FyZCNwaXhlbE9mZnNldFxuICovXG5CaWxsYm9hcmQucHJvdG90eXBlLmNvbXB1dGVTY3JlZW5TcGFjZVBvc2l0aW9uID0gZnVuY3Rpb24gKHNjZW5lLCByZXN1bHQpIHtcbiAgdmFyIGJpbGxib2FyZENvbGxlY3Rpb24gPSB0aGlzLl9iaWxsYm9hcmRDb2xsZWN0aW9uO1xuICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4yKCk7XG4gIH1cblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBpZiAoIWRlZmluZWQoYmlsbGJvYXJkQ29sbGVjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICBcIkJpbGxib2FyZCBtdXN0IGJlIGluIGEgY29sbGVjdGlvbi4gIFdhcyBpdCByZW1vdmVkP1wiXG4gICAgKTtcbiAgfVxuICBpZiAoIWRlZmluZWQoc2NlbmUpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwic2NlbmUgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIC8vIHBpeGVsIG9mZnNldCBmb3Igc2NyZWVuIHNwYWNlIGNvbXB1dGF0aW9uIGlzIHRoZSBwaXhlbE9mZnNldCArIHNjcmVlbiBzcGFjZSB0cmFuc2xhdGVcbiAgQ2FydGVzaWFuMi5jbG9uZSh0aGlzLl9waXhlbE9mZnNldCwgc2NyYXRjaFBpeGVsT2Zmc2V0KTtcbiAgQ2FydGVzaWFuMi5hZGQoc2NyYXRjaFBpeGVsT2Zmc2V0LCB0aGlzLl90cmFuc2xhdGUsIHNjcmF0Y2hQaXhlbE9mZnNldCk7XG5cbiAgdmFyIG1vZGVsTWF0cml4ID0gYmlsbGJvYXJkQ29sbGVjdGlvbi5tb2RlbE1hdHJpeDtcbiAgdmFyIHBvc2l0aW9uID0gdGhpcy5fcG9zaXRpb247XG4gIGlmIChkZWZpbmVkKHRoaXMuX2NsYW1wZWRQb3NpdGlvbikpIHtcbiAgICBwb3NpdGlvbiA9IHRoaXMuX2NsYW1wZWRQb3NpdGlvbjtcbiAgICBpZiAoc2NlbmUubW9kZSAhPT0gU2NlbmVNb2RlLlNDRU5FM0QpIHtcbiAgICAgIC8vIHBvc2l0aW9uIG5lZWRzIHRvIGJlIGluIHdvcmxkIGNvb3JkaW5hdGVzXG4gICAgICB2YXIgcHJvamVjdGlvbiA9IHNjZW5lLm1hcFByb2plY3Rpb247XG4gICAgICB2YXIgZWxsaXBzb2lkID0gcHJvamVjdGlvbi5lbGxpcHNvaWQ7XG4gICAgICB2YXIgY2FydCA9IHByb2plY3Rpb24udW5wcm9qZWN0KHBvc2l0aW9uLCBzY3JhdGNoQ2FydG9ncmFwaGljKTtcbiAgICAgIHBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnQsIHNjcmF0Y2hDYXJ0ZXNpYW4zKTtcbiAgICAgIG1vZGVsTWF0cml4ID0gTWF0cml4NC5JREVOVElUWTtcbiAgICB9XG4gIH1cblxuICB2YXIgd2luZG93Q29vcmRpbmF0ZXMgPSBCaWxsYm9hcmQuX2NvbXB1dGVTY3JlZW5TcGFjZVBvc2l0aW9uKFxuICAgIG1vZGVsTWF0cml4LFxuICAgIHBvc2l0aW9uLFxuICAgIHRoaXMuX2V5ZU9mZnNldCxcbiAgICBzY3JhdGNoUGl4ZWxPZmZzZXQsXG4gICAgc2NlbmUsXG4gICAgcmVzdWx0XG4gICk7XG4gIHJldHVybiB3aW5kb3dDb29yZGluYXRlcztcbn07XG5cbi8qKlxuICogR2V0cyBhIGJpbGxib2FyZCdzIHNjcmVlbiBzcGFjZSBib3VuZGluZyBib3ggY2VudGVyZWQgYXJvdW5kIHNjcmVlblNwYWNlUG9zaXRpb24uXG4gKiBAcGFyYW0ge0JpbGxib2FyZH0gYmlsbGJvYXJkIFRoZSBiaWxsYm9hcmQgdG8gZ2V0IHRoZSBzY3JlZW4gc3BhY2UgYm91bmRpbmcgYm94IGZvci5cbiAqIEBwYXJhbSB7Q2FydGVzaWFuMn0gc2NyZWVuU3BhY2VQb3NpdGlvbiBUaGUgc2NyZWVuIHNwYWNlIGNlbnRlciBvZiB0aGUgbGFiZWwuXG4gKiBAcGFyYW0ge0JvdW5kaW5nUmVjdGFuZ2xlfSBbcmVzdWx0XSBUaGUgb2JqZWN0IG9udG8gd2hpY2ggdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtCb3VuZGluZ1JlY3RhbmdsZX0gVGhlIHNjcmVlbiBzcGFjZSBib3VuZGluZyBib3guXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQmlsbGJvYXJkLmdldFNjcmVlblNwYWNlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoXG4gIGJpbGxib2FyZCxcbiAgc2NyZWVuU3BhY2VQb3NpdGlvbixcbiAgcmVzdWx0XG4pIHtcbiAgdmFyIHdpZHRoID0gYmlsbGJvYXJkLndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gYmlsbGJvYXJkLmhlaWdodDtcblxuICB2YXIgc2NhbGUgPSBiaWxsYm9hcmQuc2NhbGU7XG4gIHdpZHRoICo9IHNjYWxlO1xuICBoZWlnaHQgKj0gc2NhbGU7XG5cbiAgdmFyIHggPSBzY3JlZW5TcGFjZVBvc2l0aW9uLng7XG4gIGlmIChiaWxsYm9hcmQuaG9yaXpvbnRhbE9yaWdpbiA9PT0gSG9yaXpvbnRhbE9yaWdpbi5SSUdIVCkge1xuICAgIHggLT0gd2lkdGg7XG4gIH0gZWxzZSBpZiAoYmlsbGJvYXJkLmhvcml6b250YWxPcmlnaW4gPT09IEhvcml6b250YWxPcmlnaW4uQ0VOVEVSKSB7XG4gICAgeCAtPSB3aWR0aCAqIDAuNTtcbiAgfVxuXG4gIHZhciB5ID0gc2NyZWVuU3BhY2VQb3NpdGlvbi55O1xuICBpZiAoXG4gICAgYmlsbGJvYXJkLnZlcnRpY2FsT3JpZ2luID09PSBWZXJ0aWNhbE9yaWdpbi5CT1RUT00gfHxcbiAgICBiaWxsYm9hcmQudmVydGljYWxPcmlnaW4gPT09IFZlcnRpY2FsT3JpZ2luLkJBU0VMSU5FXG4gICkge1xuICAgIHkgLT0gaGVpZ2h0O1xuICB9IGVsc2UgaWYgKGJpbGxib2FyZC52ZXJ0aWNhbE9yaWdpbiA9PT0gVmVydGljYWxPcmlnaW4uQ0VOVEVSKSB7XG4gICAgeSAtPSBoZWlnaHQgKiAwLjU7XG4gIH1cblxuICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1JlY3RhbmdsZSgpO1xuICB9XG5cbiAgcmVzdWx0LnggPSB4O1xuICByZXN1bHQueSA9IHk7XG4gIHJlc3VsdC53aWR0aCA9IHdpZHRoO1xuICByZXN1bHQuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhpcyBiaWxsYm9hcmQgZXF1YWxzIGFub3RoZXIgYmlsbGJvYXJkLiAgQmlsbGJvYXJkcyBhcmUgZXF1YWwgaWYgYWxsIHRoZWlyIHByb3BlcnRpZXNcbiAqIGFyZSBlcXVhbC4gIEJpbGxib2FyZHMgaW4gZGlmZmVyZW50IGNvbGxlY3Rpb25zIGNhbiBiZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0ge0JpbGxib2FyZH0gb3RoZXIgVGhlIGJpbGxib2FyZCB0byBjb21wYXJlIGZvciBlcXVhbGl0eS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgYmlsbGJvYXJkcyBhcmUgZXF1YWw7IG90aGVyd2lzZSwgPGNvZGU+ZmFsc2U8L2NvZGU+LlxuICovXG5CaWxsYm9hcmQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gKFxuICAgIHRoaXMgPT09IG90aGVyIHx8XG4gICAgKGRlZmluZWQob3RoZXIpICYmXG4gICAgICB0aGlzLl9pZCA9PT0gb3RoZXIuX2lkICYmXG4gICAgICBDYXJ0ZXNpYW4zLmVxdWFscyh0aGlzLl9wb3NpdGlvbiwgb3RoZXIuX3Bvc2l0aW9uKSAmJlxuICAgICAgdGhpcy5faW1hZ2VJZCA9PT0gb3RoZXIuX2ltYWdlSWQgJiZcbiAgICAgIHRoaXMuX3Nob3cgPT09IG90aGVyLl9zaG93ICYmXG4gICAgICB0aGlzLl9zY2FsZSA9PT0gb3RoZXIuX3NjYWxlICYmXG4gICAgICB0aGlzLl92ZXJ0aWNhbE9yaWdpbiA9PT0gb3RoZXIuX3ZlcnRpY2FsT3JpZ2luICYmXG4gICAgICB0aGlzLl9ob3Jpem9udGFsT3JpZ2luID09PSBvdGhlci5faG9yaXpvbnRhbE9yaWdpbiAmJlxuICAgICAgdGhpcy5faGVpZ2h0UmVmZXJlbmNlID09PSBvdGhlci5faGVpZ2h0UmVmZXJlbmNlICYmXG4gICAgICBCb3VuZGluZ1JlY3RhbmdsZS5lcXVhbHModGhpcy5faW1hZ2VTdWJSZWdpb24sIG90aGVyLl9pbWFnZVN1YlJlZ2lvbikgJiZcbiAgICAgIENvbG9yLmVxdWFscyh0aGlzLl9jb2xvciwgb3RoZXIuX2NvbG9yKSAmJlxuICAgICAgQ2FydGVzaWFuMi5lcXVhbHModGhpcy5fcGl4ZWxPZmZzZXQsIG90aGVyLl9waXhlbE9mZnNldCkgJiZcbiAgICAgIENhcnRlc2lhbjIuZXF1YWxzKHRoaXMuX3RyYW5zbGF0ZSwgb3RoZXIuX3RyYW5zbGF0ZSkgJiZcbiAgICAgIENhcnRlc2lhbjMuZXF1YWxzKHRoaXMuX2V5ZU9mZnNldCwgb3RoZXIuX2V5ZU9mZnNldCkgJiZcbiAgICAgIE5lYXJGYXJTY2FsYXIuZXF1YWxzKHRoaXMuX3NjYWxlQnlEaXN0YW5jZSwgb3RoZXIuX3NjYWxlQnlEaXN0YW5jZSkgJiZcbiAgICAgIE5lYXJGYXJTY2FsYXIuZXF1YWxzKFxuICAgICAgICB0aGlzLl90cmFuc2x1Y2VuY3lCeURpc3RhbmNlLFxuICAgICAgICBvdGhlci5fdHJhbnNsdWNlbmN5QnlEaXN0YW5jZVxuICAgICAgKSAmJlxuICAgICAgTmVhckZhclNjYWxhci5lcXVhbHMoXG4gICAgICAgIHRoaXMuX3BpeGVsT2Zmc2V0U2NhbGVCeURpc3RhbmNlLFxuICAgICAgICBvdGhlci5fcGl4ZWxPZmZzZXRTY2FsZUJ5RGlzdGFuY2VcbiAgICAgICkgJiZcbiAgICAgIERpc3RhbmNlRGlzcGxheUNvbmRpdGlvbi5lcXVhbHMoXG4gICAgICAgIHRoaXMuX2Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvbixcbiAgICAgICAgb3RoZXIuX2Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvblxuICAgICAgKSAmJlxuICAgICAgdGhpcy5fZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlID09PSBvdGhlci5fZGlzYWJsZURlcHRoVGVzdERpc3RhbmNlKVxuICApO1xufTtcblxuQmlsbGJvYXJkLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGRlZmluZWQodGhpcy5fY3VzdG9tRGF0YSkpIHtcbiAgICB0aGlzLl9iaWxsYm9hcmRDb2xsZWN0aW9uLl9zY2VuZS5nbG9iZS5fc3VyZmFjZS5yZW1vdmVUaWxlQ3VzdG9tRGF0YShcbiAgICAgIHRoaXMuX2N1c3RvbURhdGFcbiAgICApO1xuICAgIHRoaXMuX2N1c3RvbURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoZGVmaW5lZCh0aGlzLl9yZW1vdmVDYWxsYmFja0Z1bmMpKSB7XG4gICAgdGhpcy5fcmVtb3ZlQ2FsbGJhY2tGdW5jKCk7XG4gICAgdGhpcy5fcmVtb3ZlQ2FsbGJhY2tGdW5jID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGhpcy5pbWFnZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcGlja0lkID0gdGhpcy5fcGlja0lkICYmIHRoaXMuX3BpY2tJZC5kZXN0cm95KCk7XG4gIHRoaXMuX2JpbGxib2FyZENvbGxlY3Rpb24gPSB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIGltYWdlLlxuICogQGNhbGxiYWNrIEJpbGxib2FyZC5DcmVhdGVJbWFnZUNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIGltYWdlIHRvIGxvYWQuXG4gKiBAcmV0dXJucyB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnQ+fSBUaGUgaW1hZ2UsIG9yIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB0byBhbiBpbWFnZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgQmlsbGJvYXJkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80349\n')},8044:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52323);\n/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59947);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12572);\n/* harmony import */ var _Core_EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(74938);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22832);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(72248);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(52200);\n/* harmony import */ var _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(99095);\n/* harmony import */ var _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(58597);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(60072);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(46588);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_VertexArrayFacade_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(52851);\n/* harmony import */ var _Shaders_BillboardCollectionFS_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(39111);\n/* harmony import */ var _Shaders_BillboardCollectionVS_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(64059);\n/* harmony import */ var _Billboard_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(80349);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(13633);\n/* harmony import */ var _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(27384);\n/* harmony import */ var _HeightReference_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(4260);\n/* harmony import */ var _HorizontalOrigin_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(62919);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(89917);\n/* harmony import */ var _SDFSettings_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(36191);\n/* harmony import */ var _TextureAtlas_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(54230);\n/* harmony import */ var _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(60473);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar SHOW_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SHOW_INDEX */ .Z.SHOW_INDEX;\nvar POSITION_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].POSITION_INDEX */ .Z.POSITION_INDEX;\nvar PIXEL_OFFSET_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].PIXEL_OFFSET_INDEX */ .Z.PIXEL_OFFSET_INDEX;\nvar EYE_OFFSET_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].EYE_OFFSET_INDEX */ .Z.EYE_OFFSET_INDEX;\nvar HORIZONTAL_ORIGIN_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].HORIZONTAL_ORIGIN_INDEX */ .Z.HORIZONTAL_ORIGIN_INDEX;\nvar VERTICAL_ORIGIN_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].VERTICAL_ORIGIN_INDEX */ .Z.VERTICAL_ORIGIN_INDEX;\nvar SCALE_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SCALE_INDEX */ .Z.SCALE_INDEX;\nvar IMAGE_INDEX_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].IMAGE_INDEX_INDEX */ .Z.IMAGE_INDEX_INDEX;\nvar COLOR_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].COLOR_INDEX */ .Z.COLOR_INDEX;\nvar ROTATION_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].ROTATION_INDEX */ .Z.ROTATION_INDEX;\nvar ALIGNED_AXIS_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].ALIGNED_AXIS_INDEX */ .Z.ALIGNED_AXIS_INDEX;\nvar SCALE_BY_DISTANCE_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SCALE_BY_DISTANCE_INDEX */ .Z.SCALE_BY_DISTANCE_INDEX;\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].TRANSLUCENCY_BY_DISTANCE_INDEX */ .Z.TRANSLUCENCY_BY_DISTANCE_INDEX;\nvar PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX =\n  _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX */ .Z.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX;\nvar DISTANCE_DISPLAY_CONDITION_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].DISTANCE_DISPLAY_CONDITION */ .Z.DISTANCE_DISPLAY_CONDITION;\nvar DISABLE_DEPTH_DISTANCE = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].DISABLE_DEPTH_DISTANCE */ .Z.DISABLE_DEPTH_DISTANCE;\nvar TEXTURE_COORDINATE_BOUNDS = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].TEXTURE_COORDINATE_BOUNDS */ .Z.TEXTURE_COORDINATE_BOUNDS;\nvar SDF_INDEX = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SDF_INDEX */ .Z.SDF_INDEX;\nvar NUMBER_OF_PROPERTIES = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].NUMBER_OF_PROPERTIES */ .Z.NUMBER_OF_PROPERTIES;\n\nvar attributeLocations;\n\nvar attributeLocationsBatched = {\n  positionHighAndScale: 0,\n  positionLowAndRotation: 1,\n  compressedAttribute0: 2, // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates\n  compressedAttribute1: 3, // aligned axis, translucency by distance, image width\n  compressedAttribute2: 4, // image height, color, pick color, size in meters, valid aligned axis, 13 bits free\n  eyeOffset: 5, // 4 bytes free\n  scaleByDistance: 6,\n  pixelOffsetScaleByDistance: 7,\n  compressedAttribute3: 8,\n  textureCoordinateBoundsOrLabelTranslate: 9,\n  a_batchId: 10,\n  sdf: 11,\n};\n\nvar attributeLocationsInstanced = {\n  direction: 0,\n  positionHighAndScale: 1,\n  positionLowAndRotation: 2, // texture offset in w\n  compressedAttribute0: 3,\n  compressedAttribute1: 4,\n  compressedAttribute2: 5,\n  eyeOffset: 6, // texture range in w\n  scaleByDistance: 7,\n  pixelOffsetScaleByDistance: 8,\n  compressedAttribute3: 9,\n  textureCoordinateBoundsOrLabelTranslate: 10,\n  a_batchId: 11,\n  sdf: 12,\n};\n\n/**\n * A renderable collection of billboards.  Billboards are viewport-aligned\n * images positioned in the 3D scene.\n * <br /><br />\n * <div align=\'center\'>\n * <img src=\'Images/Billboard.png\' width=\'400\' height=\'300\' /><br />\n * Example billboards\n * </div>\n * <br /><br />\n * Billboards are added and removed from the collection using {@link BillboardCollection#add}\n * and {@link BillboardCollection#remove}.  Billboards in a collection automatically share textures\n * for images with the same identifier.\n *\n * @alias BillboardCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms each billboard from model to world coordinates.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive\'s commands\' bounding spheres are shown.\n * @param {Scene} [options.scene] Must be passed in for billboards that use the height reference property or will be depth tested against the globe.\n * @param {BlendOption} [options.blendOption=BlendOption.OPAQUE_AND_TRANSLUCENT] The billboard blending option. The default\n * is used for rendering both opaque and translucent billboards. However, if either all of the billboards are completely opaque or all are completely translucent,\n * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve performance by up to 2x.\n * @param {Boolean} [options.show=true] Determines if the billboards in the collection will be shown.\n *\n * @performance For best performance, prefer a few collections, each with many billboards, to\n * many collections with only a few billboards each.  Organize collections so that billboards\n * with the same update frequency are in the same collection, i.e., billboards that do not\n * change should be in one collection; billboards that change every frame should be in another\n * collection; and so on.\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#remove\n * @see Billboard\n * @see LabelCollection\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n *\n * @example\n * // Create a billboard collection with two billboards\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * billboards.add({\n *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),\n *   image : \'url/to/image\'\n * });\n * billboards.add({\n *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),\n *   image : \'url/to/another/image\'\n * });\n */\nfunction BillboardCollection(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._scene = options.scene;\n  this._batchTable = options.batchTable;\n\n  this._textureAtlas = undefined;\n  this._textureAtlasGUID = undefined;\n  this._destroyTextureAtlas = true;\n  this._sp = undefined;\n  this._spTranslucent = undefined;\n  this._rsOpaque = undefined;\n  this._rsTranslucent = undefined;\n  this._vaf = undefined;\n\n  this._billboards = [];\n  this._billboardsToUpdate = [];\n  this._billboardsToUpdateIndex = 0;\n  this._billboardsRemoved = false;\n  this._createVertexArray = false;\n\n  this._shaderRotation = false;\n  this._compiledShaderRotation = false;\n\n  this._shaderAlignedAxis = false;\n  this._compiledShaderAlignedAxis = false;\n\n  this._shaderScaleByDistance = false;\n  this._compiledShaderScaleByDistance = false;\n\n  this._shaderTranslucencyByDistance = false;\n  this._compiledShaderTranslucencyByDistance = false;\n\n  this._shaderPixelOffsetScaleByDistance = false;\n  this._compiledShaderPixelOffsetScaleByDistance = false;\n\n  this._shaderDistanceDisplayCondition = false;\n  this._compiledShaderDistanceDisplayCondition = false;\n\n  this._shaderDisableDepthDistance = false;\n  this._compiledShaderDisableDepthDistance = false;\n\n  this._shaderClampToGround = false;\n  this._compiledShaderClampToGround = false;\n\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n\n  this._maxSize = 0.0;\n  this._maxEyeOffset = 0.0;\n  this._maxScale = 1.0;\n  this._maxPixelOffset = 0.0;\n  this._allHorizontalCenter = true;\n  this._allVerticalCenter = true;\n  this._allSizedInMeters = true;\n\n  this._baseVolume = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._baseVolumeWC = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._baseVolume2D = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._boundingVolume = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._boundingVolumeDirty = false;\n\n  this._colorCommands = [];\n\n  /**\n   * Determines if billboards in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.show, true);\n\n  /**\n   * The 4x4 transformation matrix that transforms each billboard in this collection from model to world coordinates.\n   * When this is the identity matrix, the billboards are drawn in world coordinates, i.e., Earth\'s WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   * @default {@link Matrix4.IDENTITY}\n   *\n   *\n   * @example\n   * var center = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n   * billboards.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);\n   * billboards.add({\n   *   image : \'url/to/image\',\n   *   position : new Cesium.Cartesian3(0.0, 0.0, 0.0) // center\n   * });\n   * billboards.add({\n   *   image : \'url/to/image\',\n   *   position : new Cesium.Cartesian3(1000000.0, 0.0, 0.0) // east\n   * });\n   * billboards.add({\n   *   image : \'url/to/image\',\n   *   position : new Cesium.Cartesian3(0.0, 1000000.0, 0.0) // north\n   * });\n   * billboards.add({\n   *   image : \'url/to/image\',\n   *   position : new Cesium.Cartesian3(0.0, 0.0, 1000000.0) // up\n   * });\n   *\n   * @see Transforms.eastNorthUpToFixedFrame\n   */\n  this.modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.modelMatrix, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY)\n  );\n  this._modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY);\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the texture atlas for this BillboardCollection as a fullscreen quad.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowTextureAtlas = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowTextureAtlas,\n    false\n  );\n\n  /**\n   * The billboard blending option. The default is used for rendering both opaque and translucent billboards.\n   * However, if either all of the billboards are completely opaque or all are completely translucent,\n   * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve\n   * performance by up to 2x.\n   * @type {BlendOption}\n   * @default BlendOption.OPAQUE_AND_TRANSLUCENT\n   */\n  this.blendOption = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.blendOption,\n    _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE_AND_TRANSLUCENT */ .Z.OPAQUE_AND_TRANSLUCENT\n  );\n  this._blendOption = undefined;\n\n  this._mode = _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE3D */ .Z.SCENE3D;\n\n  // The buffer usage for each attribute is determined based on the usage of the attribute over time.\n  this._buffersUsage = [\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // SHOW_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // POSITION_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // PIXEL_OFFSET_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // EYE_OFFSET_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // HORIZONTAL_ORIGIN_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // VERTICAL_ORIGIN_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // SCALE_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // IMAGE_INDEX_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // COLOR_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // ROTATION_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // ALIGNED_AXIS_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // SCALE_BY_DISTANCE_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // TRANSLUCENCY_BY_DISTANCE_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // DISTANCE_DISPLAY_CONDITION_INDEX\n    _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW, // TEXTURE_COORDINATE_BOUNDS\n  ];\n\n  this._highlightColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].WHITE */ .Z.WHITE); // Only used by Vector3DTilePoints\n\n  var that = this;\n  this._uniforms = {\n    u_atlas: function () {\n      return that._textureAtlas.texture;\n    },\n    u_highlightColor: function () {\n      return that._highlightColor;\n    },\n  };\n\n  var scene = this._scene;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(scene) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(scene.terrainProviderChanged)) {\n    this._removeCallbackFunc = scene.terrainProviderChanged.addEventListener(\n      function () {\n        var billboards = this._billboards;\n        var length = billboards.length;\n        for (var i = 0; i < length; ++i) {\n          if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboards[i])) {\n            billboards[i]._updateClamping();\n          }\n        }\n      },\n      this\n    );\n  }\n}\n\nObject.defineProperties(BillboardCollection.prototype, {\n  /**\n   * Returns the number of billboards in this collection.  This is commonly used with\n   * {@link BillboardCollection#get} to iterate over all the billboards\n   * in the collection.\n   * @memberof BillboardCollection.prototype\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      removeBillboards(this);\n      return this._billboards.length;\n    },\n  },\n\n  /**\n   * Gets or sets the textureAtlas.\n   * @memberof BillboardCollection.prototype\n   * @type {TextureAtlas}\n   * @private\n   */\n  textureAtlas: {\n    get: function () {\n      return this._textureAtlas;\n    },\n    set: function (value) {\n      if (this._textureAtlas !== value) {\n        this._textureAtlas =\n          this._destroyTextureAtlas &&\n          this._textureAtlas &&\n          this._textureAtlas.destroy();\n        this._textureAtlas = value;\n        this._createVertexArray = true; // New per-billboard texture coordinates\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a value which determines if the texture atlas is\n   * destroyed when the collection is destroyed.\n   *\n   * If the texture atlas is used by more than one collection, set this to <code>false</code>,\n   * and explicitly destroy the atlas to avoid attempting to destroy it multiple times.\n   *\n   * @memberof BillboardCollection.prototype\n   * @type {Boolean}\n   * @private\n   *\n   * @example\n   * // Set destroyTextureAtlas\n   * // Destroy a billboard collection but not its texture atlas.\n   *\n   * var atlas = new TextureAtlas({\n   *   scene : scene,\n   *   images : images\n   * });\n   * billboards.textureAtlas = atlas;\n   * billboards.destroyTextureAtlas = false;\n   * billboards = billboards.destroy();\n   * console.log(atlas.isDestroyed()); // False\n   */\n  destroyTextureAtlas: {\n    get: function () {\n      return this._destroyTextureAtlas;\n    },\n    set: function (value) {\n      this._destroyTextureAtlas = value;\n    },\n  },\n});\n\nfunction destroyBillboards(billboards) {\n  var length = billboards.length;\n  for (var i = 0; i < length; ++i) {\n    if (billboards[i]) {\n      billboards[i]._destroy();\n    }\n  }\n}\n\n/**\n * Creates and adds a billboard with the specified initial properties to the collection.\n * The added billboard is returned so it can be modified or removed from the collection later.\n *\n * @param {Object}[options] A template describing the billboard\'s properties as shown in Example 1.\n * @returns {Billboard} The billboard that was added to the collection.\n *\n * @performance Calling <code>add</code> is expected constant time.  However, the collection\'s vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, add as many billboards as possible before calling <code>update</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Example 1:  Add a billboard, specifying all the default values.\n * var b = billboards.add({\n *   show : true,\n *   position : Cesium.Cartesian3.ZERO,\n *   pixelOffset : Cesium.Cartesian2.ZERO,\n *   eyeOffset : Cesium.Cartesian3.ZERO,\n *   heightReference : Cesium.HeightReference.NONE,\n *   horizontalOrigin : Cesium.HorizontalOrigin.CENTER,\n *   verticalOrigin : Cesium.VerticalOrigin.CENTER,\n *   scale : 1.0,\n *   image : \'url/to/image\',\n *   imageSubRegion : undefined,\n *   color : Cesium.Color.WHITE,\n *   id : undefined,\n *   rotation : 0.0,\n *   alignedAxis : Cesium.Cartesian3.ZERO,\n *   width : undefined,\n *   height : undefined,\n *   scaleByDistance : undefined,\n *   translucencyByDistance : undefined,\n *   pixelOffsetScaleByDistance : undefined,\n *   sizeInMeters : false,\n *   distanceDisplayCondition : undefined\n * });\n *\n * @example\n * // Example 2:  Specify only the billboard\'s cartographic position.\n * var b = billboards.add({\n *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\n * });\n *\n * @see BillboardCollection#remove\n * @see BillboardCollection#removeAll\n */\nBillboardCollection.prototype.add = function (options) {\n  var billboard = new _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(options, this);\n  billboard._index = this._billboards.length;\n\n  this._billboards.push(billboard);\n  this._createVertexArray = true;\n\n  return billboard;\n};\n\n/**\n * Removes a billboard from the collection.\n *\n * @param {Billboard} billboard The billboard to remove.\n * @returns {Boolean} <code>true</code> if the billboard was removed; <code>false</code> if the billboard was not found in the collection.\n *\n * @performance Calling <code>remove</code> is expected constant time.  However, the collection\'s vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, remove as many billboards as possible before calling <code>update</code>.\n * If you intend to temporarily hide a billboard, it is usually more efficient to call\n * {@link Billboard#show} instead of removing and re-adding the billboard.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * var b = billboards.add(...);\n * billboards.remove(b);  // Returns true\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#removeAll\n * @see Billboard#show\n */\nBillboardCollection.prototype.remove = function (billboard) {\n  if (this.contains(billboard)) {\n    this._billboards[billboard._index] = undefined; // Removed later\n    this._billboardsRemoved = true;\n    this._createVertexArray = true;\n    billboard._destroy();\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all billboards from the collection.\n *\n * @performance <code>O(n)</code>.  It is more efficient to remove all the billboards\n * from a collection and then add new ones than to create a new collection entirely.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * billboards.add(...);\n * billboards.add(...);\n * billboards.removeAll();\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#remove\n */\nBillboardCollection.prototype.removeAll = function () {\n  destroyBillboards(this._billboards);\n  this._billboards = [];\n  this._billboardsToUpdate = [];\n  this._billboardsToUpdateIndex = 0;\n  this._billboardsRemoved = false;\n\n  this._createVertexArray = true;\n};\n\nfunction removeBillboards(billboardCollection) {\n  if (billboardCollection._billboardsRemoved) {\n    billboardCollection._billboardsRemoved = false;\n\n    var newBillboards = [];\n    var billboards = billboardCollection._billboards;\n    var length = billboards.length;\n    for (var i = 0, j = 0; i < length; ++i) {\n      var billboard = billboards[i];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboard)) {\n        billboard._index = j++;\n        newBillboards.push(billboard);\n      }\n    }\n\n    billboardCollection._billboards = newBillboards;\n  }\n}\n\nBillboardCollection.prototype._updateBillboard = function (\n  billboard,\n  propertyChanged\n) {\n  if (!billboard._dirty) {\n    this._billboardsToUpdate[this._billboardsToUpdateIndex++] = billboard;\n  }\n\n  ++this._propertiesChanged[propertyChanged];\n};\n\n/**\n * Check whether this collection contains a given billboard.\n *\n * @param {Billboard} [billboard] The billboard to check for.\n * @returns {Boolean} true if this collection contains the billboard, false otherwise.\n *\n * @see BillboardCollection#get\n */\nBillboardCollection.prototype.contains = function (billboard) {\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboard) && billboard._billboardCollection === this;\n};\n\n/**\n * Returns the billboard in the collection at the specified index.  Indices are zero-based\n * and increase as billboards are added.  Removing a billboard shifts all billboards after\n * it to the left, changing their indices.  This function is commonly used with\n * {@link BillboardCollection#length} to iterate over all the billboards\n * in the collection.\n *\n * @param {Number} index The zero-based index of the billboard.\n * @returns {Billboard} The billboard at the specified index.\n *\n * @performance Expected constant time.  If billboards were removed from the collection and\n * {@link BillboardCollection#update} was not called, an implicit <code>O(n)</code>\n * operation is performed.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every billboard in the collection\n * var len = billboards.length;\n * for (var i = 0; i < len; ++i) {\n *   var b = billboards.get(i);\n *   b.show = !b.show;\n * }\n *\n * @see BillboardCollection#length\n */\nBillboardCollection.prototype.get = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number */ .Z.typeOf.number("index", index);\n  //>>includeEnd(\'debug\');\n\n  removeBillboards(this);\n  return this._billboards[index];\n};\n\nvar getIndexBuffer;\n\nfunction getIndexBufferBatched(context) {\n  var sixteenK = 16 * 1024;\n\n  var indexBuffer = context.cache.billboardCollection_indexBufferBatched;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  // Subtract 6 because the last index is reserverd for primitive restart.\n  // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18\n  var length = sixteenK * 6 - 6;\n  var indices = new Uint16Array(length);\n  for (var i = 0, j = 0; i < length; i += 6, j += 4) {\n    indices[i] = j;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n\n    indices[i + 3] = j + 0;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  }\n\n  // PERFORMANCE_IDEA:  Should we reference count billboard collections, and eventually delete this?\n  // Is this too much memory to allocate up front?  Should we dynamically grow it?\n  indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: indices,\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_indexBufferBatched = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getIndexBufferInstanced(context) {\n  var indexBuffer = context.cache.billboardCollection_indexBufferInstanced;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n  });\n\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_indexBufferInstanced = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getVertexBufferInstanced(context) {\n  var vertexBuffer = context.cache.billboardCollection_vertexBufferInstanced;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(vertexBuffer)) {\n    return vertexBuffer;\n  }\n\n  vertexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n    context: context,\n    typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n  });\n\n  vertexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_vertexBufferInstanced = vertexBuffer;\n  return vertexBuffer;\n}\n\nBillboardCollection.prototype.computeNewBuffersUsage = function () {\n  var buffersUsage = this._buffersUsage;\n  var usageChanged = false;\n\n  var properties = this._propertiesChanged;\n  for (var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n    var newUsage =\n      properties[k] === 0 ? _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW : _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STREAM_DRAW */ .Z.STREAM_DRAW;\n    usageChanged = usageChanged || buffersUsage[k] !== newUsage;\n    buffersUsage[k] = newUsage;\n  }\n\n  return usageChanged;\n};\n\nfunction createVAF(\n  context,\n  numberOfBillboards,\n  buffersUsage,\n  instanced,\n  batchTable,\n  sdf\n) {\n  var attributes = [\n    {\n      index: attributeLocations.positionHighAndScale,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[POSITION_INDEX],\n    },\n    {\n      index: attributeLocations.positionLowAndRotation,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[POSITION_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute0,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[PIXEL_OFFSET_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute1,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[TRANSLUCENCY_BY_DISTANCE_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute2,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[COLOR_INDEX],\n    },\n    {\n      index: attributeLocations.eyeOffset,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[EYE_OFFSET_INDEX],\n    },\n    {\n      index: attributeLocations.scaleByDistance,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[SCALE_BY_DISTANCE_INDEX],\n    },\n    {\n      index: attributeLocations.pixelOffsetScaleByDistance,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute3,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[DISTANCE_DISPLAY_CONDITION_INDEX],\n    },\n    {\n      index: attributeLocations.textureCoordinateBoundsOrLabelTranslate,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[TEXTURE_COORDINATE_BOUNDS],\n    },\n  ];\n\n  // Instancing requires one non-instanced attribute.\n  if (instanced) {\n    attributes.push({\n      index: attributeLocations.direction,\n      componentsPerAttribute: 2,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      vertexBuffer: getVertexBufferInstanced(context),\n    });\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(batchTable)) {\n    attributes.push({\n      index: attributeLocations.a_batchId,\n      componentsPerAttribute: 1,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      bufferUsage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    });\n  }\n\n  if (sdf) {\n    attributes.push({\n      index: attributeLocations.sdf,\n      componentsPerAttribute: 2,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: buffersUsage[SDF_INDEX],\n    });\n  }\n\n  // When instancing is enabled, only one vertex is needed for each billboard.\n  var sizeInVertices = instanced ? numberOfBillboards : 4 * numberOfBillboards;\n  return new _Renderer_VertexArrayFacade_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z(context, attributes, sizeInVertices, instanced);\n}\n\n///////////////////////////////////////////////////////////////////////////\n\n// Four vertices per billboard.  Each has the same position, etc., but a different screen-space direction vector.\n\n// PERFORMANCE_IDEA:  Save memory if a property is the same for all billboards, use a latched attribute state,\n// instead of storing it in a vertex buffer.\n\nvar writePositionScratch = new _Core_EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\nfunction writePositionScaleAndRotation(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var positionHighWriter = vafWriters[attributeLocations.positionHighAndScale];\n  var positionLowWriter = vafWriters[attributeLocations.positionLowAndRotation];\n  var position = billboard._getActualPosition();\n\n  if (billboardCollection._mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].expand */ .Z.expand(\n      billboardCollection._baseVolume,\n      position,\n      billboardCollection._baseVolume\n    );\n    billboardCollection._boundingVolumeDirty = true;\n  }\n\n  _Core_EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromCartesian */ .Z.fromCartesian(position, writePositionScratch);\n  var scale = billboard.scale;\n  var rotation = billboard.rotation;\n\n  if (rotation !== 0.0) {\n    billboardCollection._shaderRotation = true;\n  }\n\n  billboardCollection._maxScale = Math.max(\n    billboardCollection._maxScale,\n    scale\n  );\n\n  var high = writePositionScratch.high;\n  var low = writePositionScratch.low;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    positionHighWriter(i, high.x, high.y, high.z, scale);\n    positionLowWriter(i, low.x, low.y, low.z, rotation);\n  } else {\n    i = billboard._index * 4;\n    positionHighWriter(i + 0, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 1, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 2, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 3, high.x, high.y, high.z, scale);\n\n    positionLowWriter(i + 0, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 1, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 2, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 3, low.x, low.y, low.z, rotation);\n  }\n}\n\nvar scratchCartesian2 = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nvar UPPER_BOUND = 32768.0; // 2^15\n\nvar LEFT_SHIFT16 = 65536.0; // 2^16\nvar LEFT_SHIFT12 = 4096.0; // 2^12\nvar LEFT_SHIFT8 = 256.0; // 2^8\nvar LEFT_SHIFT7 = 128.0;\nvar LEFT_SHIFT5 = 32.0;\nvar LEFT_SHIFT3 = 8.0;\nvar LEFT_SHIFT2 = 4.0;\n\nvar RIGHT_SHIFT8 = 1.0 / 256.0;\n\nvar LOWER_LEFT = 0.0;\nvar LOWER_RIGHT = 2.0;\nvar UPPER_RIGHT = 3.0;\nvar UPPER_LEFT = 1.0;\n\nfunction writeCompressedAttrib0(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute0];\n  var pixelOffset = billboard.pixelOffset;\n  var pixelOffsetX = pixelOffset.x;\n  var pixelOffsetY = pixelOffset.y;\n\n  var translate = billboard._translate;\n  var translateX = translate.x;\n  var translateY = translate.y;\n\n  billboardCollection._maxPixelOffset = Math.max(\n    billboardCollection._maxPixelOffset,\n    Math.abs(pixelOffsetX + translateX),\n    Math.abs(-pixelOffsetY + translateY)\n  );\n\n  var horizontalOrigin = billboard.horizontalOrigin;\n  var verticalOrigin = billboard._verticalOrigin;\n  var show = billboard.show && billboard.clusterShow;\n\n  // If the color alpha is zero, do not show this billboard.  This lets us avoid providing\n  // color during the pick pass and also eliminates a discard in the fragment shader.\n  if (billboard.color.alpha === 0.0) {\n    show = false;\n  }\n\n  // Raw billboards don\'t distinguish between BASELINE and BOTTOM, only LabelCollection does that.\n  if (verticalOrigin === _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].BASELINE */ .Z.BASELINE) {\n    verticalOrigin = _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].BOTTOM */ .Z.BOTTOM;\n  }\n\n  billboardCollection._allHorizontalCenter =\n    billboardCollection._allHorizontalCenter &&\n    horizontalOrigin === _HorizontalOrigin_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].CENTER */ .Z.CENTER;\n  billboardCollection._allVerticalCenter =\n    billboardCollection._allVerticalCenter &&\n    verticalOrigin === _VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].CENTER */ .Z.CENTER;\n\n  var bottomLeftX = 0;\n  var bottomLeftY = 0;\n  var width = 0;\n  var height = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(imageRectangle)) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Invalid billboard image index: " + index);\n    }\n    //>>includeEnd(\'debug\');\n\n    bottomLeftX = imageRectangle.x;\n    bottomLeftY = imageRectangle.y;\n    width = imageRectangle.width;\n    height = imageRectangle.height;\n  }\n  var topRightX = bottomLeftX + width;\n  var topRightY = bottomLeftY + height;\n\n  var compressed0 =\n    Math.floor(\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(pixelOffsetX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND\n    ) * LEFT_SHIFT7;\n  compressed0 += (horizontalOrigin + 1.0) * LEFT_SHIFT5;\n  compressed0 += (verticalOrigin + 1.0) * LEFT_SHIFT3;\n  compressed0 += (show ? 1.0 : 0.0) * LEFT_SHIFT2;\n\n  var compressed1 =\n    Math.floor(\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(pixelOffsetY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND\n    ) * LEFT_SHIFT8;\n  var compressed2 =\n    Math.floor(\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(translateX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND\n    ) * LEFT_SHIFT8;\n\n  var tempTanslateY =\n    (_Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(translateY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) *\n    RIGHT_SHIFT8;\n  var upperTranslateY = Math.floor(tempTanslateY);\n  var lowerTranslateY = Math.floor(\n    (tempTanslateY - upperTranslateY) * LEFT_SHIFT8\n  );\n\n  compressed1 += upperTranslateY;\n  compressed2 += lowerTranslateY;\n\n  scratchCartesian2.x = bottomLeftX;\n  scratchCartesian2.y = bottomLeftY;\n  var compressedTexCoordsLL = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n    scratchCartesian2\n  );\n  scratchCartesian2.x = topRightX;\n  var compressedTexCoordsLR = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n    scratchCartesian2\n  );\n  scratchCartesian2.y = topRightY;\n  var compressedTexCoordsUR = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n    scratchCartesian2\n  );\n  scratchCartesian2.x = bottomLeftX;\n  var compressedTexCoordsUL = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n    scratchCartesian2\n  );\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, compressed2, compressedTexCoordsLL);\n  } else {\n    i = billboard._index * 4;\n    writer(\n      i + 0,\n      compressed0 + LOWER_LEFT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsLL\n    );\n    writer(\n      i + 1,\n      compressed0 + LOWER_RIGHT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsLR\n    );\n    writer(\n      i + 2,\n      compressed0 + UPPER_RIGHT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsUR\n    );\n    writer(\n      i + 3,\n      compressed0 + UPPER_LEFT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsUL\n    );\n  }\n}\n\nfunction writeCompressedAttrib1(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute1];\n  var alignedAxis = billboard.alignedAxis;\n  if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(alignedAxis, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ZERO */ .Z.ZERO)) {\n    billboardCollection._shaderAlignedAxis = true;\n  }\n\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n\n  var translucency = billboard.translucencyByDistance;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(translucency)) {\n    near = translucency.near;\n    nearValue = translucency.nearValue;\n    far = translucency.far;\n    farValue = translucency.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // translucency by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderTranslucencyByDistance = true;\n    }\n  }\n\n  var width = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(imageRectangle)) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Invalid billboard image index: " + index);\n    }\n    //>>includeEnd(\'debug\');\n\n    width = imageRectangle.width;\n  }\n\n  var textureWidth = billboardCollection._textureAtlas.texture.width;\n  var imageWidth = Math.round(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(billboard.width, textureWidth * width)\n  );\n  billboardCollection._maxSize = Math.max(\n    billboardCollection._maxSize,\n    imageWidth\n  );\n\n  var compressed0 = _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(imageWidth, 0.0, LEFT_SHIFT16);\n  var compressed1 = 0.0;\n\n  if (\n    Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(alignedAxis) - 1.0) <\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].EPSILON6 */ .Z.EPSILON6\n  ) {\n    compressed1 = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].octEncodeFloat */ .Z.octEncodeFloat(alignedAxis);\n  }\n\n  nearValue = _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(nearValue, 0.0, 1.0);\n  nearValue = nearValue === 1.0 ? 255.0 : (nearValue * 255.0) | 0;\n  compressed0 = compressed0 * LEFT_SHIFT8 + nearValue;\n\n  farValue = _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(farValue, 0.0, 1.0);\n  farValue = farValue === 1.0 ? 255.0 : (farValue * 255.0) | 0;\n  compressed1 = compressed1 * LEFT_SHIFT8 + farValue;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, near, far);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0, compressed1, near, far);\n    writer(i + 1, compressed0, compressed1, near, far);\n    writer(i + 2, compressed0, compressed1, near, far);\n    writer(i + 3, compressed0, compressed1, near, far);\n  }\n}\n\nfunction writeCompressedAttrib2(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute2];\n  var color = billboard.color;\n  var pickColor = !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboardCollection._batchTable)\n    ? billboard.getPickId(frameState.context).color\n    : _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].WHITE */ .Z.WHITE;\n  var sizeInMeters = billboard.sizeInMeters ? 1.0 : 0.0;\n  var validAlignedAxis =\n    Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(billboard.alignedAxis) - 1.0) <\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].EPSILON6 */ .Z.EPSILON6\n      ? 1.0\n      : 0.0;\n\n  billboardCollection._allSizedInMeters =\n    billboardCollection._allSizedInMeters && sizeInMeters === 1.0;\n\n  var height = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(imageRectangle)) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Invalid billboard image index: " + index);\n    }\n    //>>includeEnd(\'debug\');\n\n    height = imageRectangle.height;\n  }\n\n  var dimensions = billboardCollection._textureAtlas.texture.dimensions;\n  var imageHeight = Math.round(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(billboard.height, dimensions.y * height)\n  );\n  billboardCollection._maxSize = Math.max(\n    billboardCollection._maxSize,\n    imageHeight\n  );\n  var labelHorizontalOrigin = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    billboard._labelHorizontalOrigin,\n    -2\n  );\n  labelHorizontalOrigin += 2;\n  var compressed3 = imageHeight * LEFT_SHIFT2 + labelHorizontalOrigin;\n\n  var red = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(color.red);\n  var green = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(color.green);\n  var blue = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(color.blue);\n  var compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n\n  red = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.red);\n  green = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.green);\n  blue = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.blue);\n  var compressed1 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n\n  var compressed2 =\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(color.alpha) * LEFT_SHIFT16 +\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(pickColor.alpha) * LEFT_SHIFT8;\n  compressed2 += sizeInMeters * 2.0 + validAlignedAxis;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, compressed2, compressed3);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 1, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 2, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 3, compressed0, compressed1, compressed2, compressed3);\n  }\n}\n\nfunction writeEyeOffset(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.eyeOffset];\n  var eyeOffset = billboard.eyeOffset;\n\n  // For billboards that are clamped to ground, move it slightly closer to the camera\n  var eyeOffsetZ = eyeOffset.z;\n  if (billboard._heightReference !== _HeightReference_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].NONE */ .Z.NONE) {\n    eyeOffsetZ *= 1.005;\n  }\n  billboardCollection._maxEyeOffset = Math.max(\n    billboardCollection._maxEyeOffset,\n    Math.abs(eyeOffset.x),\n    Math.abs(eyeOffset.y),\n    Math.abs(eyeOffsetZ)\n  );\n\n  if (billboardCollection._instanced) {\n    var width = 0;\n    var height = 0;\n    var index = billboard._imageIndex;\n    if (index !== -1) {\n      var imageRectangle = textureAtlasCoordinates[index];\n\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(imageRectangle)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Invalid billboard image index: " + index);\n      }\n      //>>includeEnd(\'debug\');\n\n      width = imageRectangle.width;\n      height = imageRectangle.height;\n    }\n\n    scratchCartesian2.x = width;\n    scratchCartesian2.y = height;\n    var compressedTexCoordsRange = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].compressTextureCoordinates */ .Z.compressTextureCoordinates(\n      scratchCartesian2\n    );\n\n    i = billboard._index;\n    writer(i, eyeOffset.x, eyeOffset.y, eyeOffsetZ, compressedTexCoordsRange);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 1, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 2, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 3, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n  }\n}\n\nfunction writeScaleByDistance(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.scaleByDistance];\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n\n  var scale = billboard.scaleByDistance;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(scale)) {\n    near = scale.near;\n    nearValue = scale.nearValue;\n    far = scale.far;\n    farValue = scale.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // scale by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderScaleByDistance = true;\n    }\n  }\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, nearValue, far, farValue);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, nearValue, far, farValue);\n    writer(i + 1, near, nearValue, far, farValue);\n    writer(i + 2, near, nearValue, far, farValue);\n    writer(i + 3, near, nearValue, far, farValue);\n  }\n}\n\nfunction writePixelOffsetScaleByDistance(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.pixelOffsetScaleByDistance];\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n\n  var pixelOffsetScale = billboard.pixelOffsetScaleByDistance;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(pixelOffsetScale)) {\n    near = pixelOffsetScale.near;\n    nearValue = pixelOffsetScale.nearValue;\n    far = pixelOffsetScale.far;\n    farValue = pixelOffsetScale.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // pixelOffsetScale by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderPixelOffsetScaleByDistance = true;\n    }\n  }\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, nearValue, far, farValue);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, nearValue, far, farValue);\n    writer(i + 1, near, nearValue, far, farValue);\n    writer(i + 2, near, nearValue, far, farValue);\n    writer(i + 3, near, nearValue, far, farValue);\n  }\n}\n\nfunction writeCompressedAttribute3(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute3];\n  var near = 0.0;\n  var far = Number.MAX_VALUE;\n\n  var distanceDisplayCondition = billboard.distanceDisplayCondition;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(distanceDisplayCondition)) {\n    near = distanceDisplayCondition.near;\n    far = distanceDisplayCondition.far;\n\n    near *= near;\n    far *= far;\n\n    billboardCollection._shaderDistanceDisplayCondition = true;\n  }\n\n  var disableDepthTestDistance = billboard.disableDepthTestDistance;\n  var clampToGround =\n    billboard.heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].CLAMP_TO_GROUND */ .Z.CLAMP_TO_GROUND &&\n    frameState.context.depthTexture;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(disableDepthTestDistance)) {\n    disableDepthTestDistance = clampToGround ? 5000.0 : 0.0;\n  }\n\n  disableDepthTestDistance *= disableDepthTestDistance;\n  if (clampToGround || disableDepthTestDistance > 0.0) {\n    billboardCollection._shaderDisableDepthDistance = true;\n    if (disableDepthTestDistance === Number.POSITIVE_INFINITY) {\n      disableDepthTestDistance = -1.0;\n    }\n  }\n\n  var imageHeight;\n  var imageWidth;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboard._labelDimensions)) {\n    var height = 0;\n    var width = 0;\n    var index = billboard._imageIndex;\n    if (index !== -1) {\n      var imageRectangle = textureAtlasCoordinates[index];\n\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(imageRectangle)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Invalid billboard image index: " + index);\n      }\n      //>>includeEnd(\'debug\');\n\n      height = imageRectangle.height;\n      width = imageRectangle.width;\n    }\n\n    imageHeight = Math.round(\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n        billboard.height,\n        billboardCollection._textureAtlas.texture.dimensions.y * height\n      )\n    );\n\n    var textureWidth = billboardCollection._textureAtlas.texture.width;\n    imageWidth = Math.round(\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(billboard.width, textureWidth * width)\n    );\n  } else {\n    imageWidth = billboard._labelDimensions.x;\n    imageHeight = billboard._labelDimensions.y;\n  }\n\n  var w = Math.floor(_Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(imageWidth, 0.0, LEFT_SHIFT12));\n  var h = Math.floor(_Core_Math_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clamp */ .Z.clamp(imageHeight, 0.0, LEFT_SHIFT12));\n  var dimensions = w * LEFT_SHIFT12 + h;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, far, disableDepthTestDistance, dimensions);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 1, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 2, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 3, near, far, disableDepthTestDistance, dimensions);\n  }\n}\n\nfunction writeTextureCoordinateBoundsOrLabelTranslate(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  if (billboard.heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].CLAMP_TO_GROUND */ .Z.CLAMP_TO_GROUND) {\n    var scene = billboardCollection._scene;\n    var context = frameState.context;\n    var globeTranslucent = frameState.globeTranslucencyState.translucent;\n    var depthTestAgainstTerrain =\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(scene.globe) && scene.globe.depthTestAgainstTerrain;\n\n    // Only do manual depth test if the globe is opaque and writes depth\n    billboardCollection._shaderClampToGround =\n      context.depthTexture && !globeTranslucent && depthTestAgainstTerrain;\n  }\n  var i;\n  var writer =\n    vafWriters[attributeLocations.textureCoordinateBoundsOrLabelTranslate];\n\n  if (_Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].maximumVertexTextureImageUnits */ .Z.maximumVertexTextureImageUnits > 0) {\n    //write _labelTranslate, used by depth testing in the vertex shader\n    var translateX = 0;\n    var translateY = 0;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboard._labelTranslate)) {\n      translateX = billboard._labelTranslate.x;\n      translateY = billboard._labelTranslate.y;\n    }\n    if (billboardCollection._instanced) {\n      i = billboard._index;\n      writer(i, translateX, translateY, 0.0, 0.0);\n    } else {\n      i = billboard._index * 4;\n      writer(i + 0, translateX, translateY, 0.0, 0.0);\n      writer(i + 1, translateX, translateY, 0.0, 0.0);\n      writer(i + 2, translateX, translateY, 0.0, 0.0);\n      writer(i + 3, translateX, translateY, 0.0, 0.0);\n    }\n    return;\n  }\n\n  //write texture coordinate bounds, used by depth testing in fragment shader\n  var minX = 0;\n  var minY = 0;\n  var width = 0;\n  var height = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(imageRectangle)) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Invalid billboard image index: " + index);\n    }\n    //>>includeEnd(\'debug\');\n\n    minX = imageRectangle.x;\n    minY = imageRectangle.y;\n    width = imageRectangle.width;\n    height = imageRectangle.height;\n  }\n  var maxX = minX + width;\n  var maxY = minY + height;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, minX, minY, maxX, maxY);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, minX, minY, maxX, maxY);\n    writer(i + 1, minX, minY, maxX, maxY);\n    writer(i + 2, minX, minY, maxX, maxY);\n    writer(i + 3, minX, minY, maxX, maxY);\n  }\n}\n\nfunction writeBatchId(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(billboardCollection._batchTable)) {\n    return;\n  }\n\n  var writer = vafWriters[attributeLocations.a_batchId];\n  var id = billboard._batchIndex;\n\n  var i;\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, id);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, id);\n    writer(i + 1, id);\n    writer(i + 2, id);\n    writer(i + 3, id);\n  }\n}\n\nfunction writeSDF(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  if (!billboardCollection._sdf) {\n    return;\n  }\n\n  var i;\n  var writer = vafWriters[attributeLocations.sdf];\n\n  var outlineColor = billboard.outlineColor;\n  var outlineWidth = billboard.outlineWidth;\n\n  var red = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(outlineColor.red);\n  var green = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(outlineColor.green);\n  var blue = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(outlineColor.blue);\n  var compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n\n  // Compute the relative outline distance\n  var outlineDistance = outlineWidth / _SDFSettings_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].RADIUS */ .Z.RADIUS;\n  var compressed1 =\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(outlineColor.alpha) * LEFT_SHIFT16 +\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].floatToByte */ .Z.floatToByte(outlineDistance) * LEFT_SHIFT8;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0 + LOWER_LEFT, compressed1);\n    writer(i + 1, compressed0 + LOWER_RIGHT, compressed1);\n    writer(i + 2, compressed0 + UPPER_RIGHT, compressed1);\n    writer(i + 3, compressed0 + UPPER_LEFT, compressed1);\n  }\n}\n\nfunction writeBillboard(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  writePositionScaleAndRotation(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttrib0(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttrib1(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttrib2(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeEyeOffset(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeScaleByDistance(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writePixelOffsetScaleByDistance(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttribute3(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeTextureCoordinateBoundsOrLabelTranslate(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeBatchId(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeSDF(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n}\n\nfunction recomputeActualPositions(\n  billboardCollection,\n  billboards,\n  length,\n  frameState,\n  modelMatrix,\n  recomputeBoundingVolume\n) {\n  var boundingVolume;\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    boundingVolume = billboardCollection._baseVolume;\n    billboardCollection._boundingVolumeDirty = true;\n  } else {\n    boundingVolume = billboardCollection._baseVolume2D;\n  }\n\n  var positions = [];\n  for (var i = 0; i < length; ++i) {\n    var billboard = billboards[i];\n    var position = billboard.position;\n    var actualPosition = _Billboard_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"]._computeActualPosition */ .Z._computeActualPosition(\n      billboard,\n      position,\n      frameState,\n      modelMatrix\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(actualPosition)) {\n      billboard._setActualPosition(actualPosition);\n\n      if (recomputeBoundingVolume) {\n        positions.push(actualPosition);\n      } else {\n        _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].expand */ .Z.expand(boundingVolume, actualPosition, boundingVolume);\n      }\n    }\n  }\n\n  if (recomputeBoundingVolume) {\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromPoints */ .Z.fromPoints(positions, boundingVolume);\n  }\n}\n\nfunction updateMode(billboardCollection, frameState) {\n  var mode = frameState.mode;\n\n  var billboards = billboardCollection._billboards;\n  var billboardsToUpdate = billboardCollection._billboardsToUpdate;\n  var modelMatrix = billboardCollection._modelMatrix;\n\n  if (\n    billboardCollection._createVertexArray ||\n    billboardCollection._mode !== mode ||\n    (mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n      !_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(modelMatrix, billboardCollection.modelMatrix))\n  ) {\n    billboardCollection._mode = mode;\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(billboardCollection.modelMatrix, modelMatrix);\n    billboardCollection._createVertexArray = true;\n\n    if (\n      mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE3D */ .Z.SCENE3D ||\n      mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE2D */ .Z.SCENE2D ||\n      mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW\n    ) {\n      recomputeActualPositions(\n        billboardCollection,\n        billboards,\n        billboards.length,\n        frameState,\n        modelMatrix,\n        true\n      );\n    }\n  } else if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].MORPHING */ .Z.MORPHING) {\n    recomputeActualPositions(\n      billboardCollection,\n      billboards,\n      billboards.length,\n      frameState,\n      modelMatrix,\n      true\n    );\n  } else if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE2D */ .Z.SCENE2D || mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    recomputeActualPositions(\n      billboardCollection,\n      billboardsToUpdate,\n      billboardCollection._billboardsToUpdateIndex,\n      frameState,\n      modelMatrix,\n      false\n    );\n  }\n}\n\nfunction updateBoundingVolume(collection, frameState, boundingVolume) {\n  var pixelScale = 1.0;\n  if (!collection._allSizedInMeters || collection._maxPixelOffset !== 0.0) {\n    pixelScale = frameState.camera.getPixelSize(\n      boundingVolume,\n      frameState.context.drawingBufferWidth,\n      frameState.context.drawingBufferHeight\n    );\n  }\n\n  var size = pixelScale * collection._maxScale * collection._maxSize * 2.0;\n  if (collection._allHorizontalCenter && collection._allVerticalCenter) {\n    size *= 0.5;\n  }\n\n  var offset =\n    pixelScale * collection._maxPixelOffset + collection._maxEyeOffset;\n  boundingVolume.radius += size + offset;\n}\n\nfunction createDebugCommand(billboardCollection, context) {\n  var fs;\n  fs =\n    "uniform sampler2D billboard_texture; \\n" +\n    "varying vec2 v_textureCoordinates; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    gl_FragColor = texture2D(billboard_texture, v_textureCoordinates); \\n" +\n    "} \\n";\n\n  var drawCommand = context.createViewportQuadCommand(fs, {\n    uniformMap: {\n      billboard_texture: function () {\n        return billboardCollection._textureAtlas.texture;\n      },\n    },\n  });\n  drawCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].OVERLAY */ .Z.OVERLAY;\n  return drawCommand;\n}\n\nvar scratchWriterArray = [];\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {RuntimeError} image with id must be in the atlas.\n */\nBillboardCollection.prototype.update = function (frameState) {\n  removeBillboards(this);\n\n  if (!this.show) {\n    return;\n  }\n\n  var billboards = this._billboards;\n  var billboardsLength = billboards.length;\n\n  var context = frameState.context;\n  this._instanced = context.instancedArrays;\n  attributeLocations = this._instanced\n    ? attributeLocationsInstanced\n    : attributeLocationsBatched;\n  getIndexBuffer = this._instanced\n    ? getIndexBufferInstanced\n    : getIndexBufferBatched;\n\n  var textureAtlas = this._textureAtlas;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(textureAtlas)) {\n    textureAtlas = this._textureAtlas = new _TextureAtlas_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z({\n      context: context,\n    });\n\n    for (var ii = 0; ii < billboardsLength; ++ii) {\n      billboards[ii]._loadImage();\n    }\n  }\n\n  var textureAtlasCoordinates = textureAtlas.textureCoordinates;\n  if (textureAtlasCoordinates.length === 0) {\n    // Can\'t write billboard vertices until we have texture coordinates\n    // provided by a texture atlas\n    return;\n  }\n\n  updateMode(this, frameState);\n\n  billboards = this._billboards;\n  billboardsLength = billboards.length;\n  var billboardsToUpdate = this._billboardsToUpdate;\n  var billboardsToUpdateLength = this._billboardsToUpdateIndex;\n\n  var properties = this._propertiesChanged;\n\n  var textureAtlasGUID = textureAtlas.guid;\n  var createVertexArray =\n    this._createVertexArray || this._textureAtlasGUID !== textureAtlasGUID;\n  this._textureAtlasGUID = textureAtlasGUID;\n\n  var vafWriters;\n  var pass = frameState.passes;\n  var picking = pass.pick;\n\n  // PERFORMANCE_IDEA: Round robin multiple buffers.\n  if (createVertexArray || (!picking && this.computeNewBuffersUsage())) {\n    this._createVertexArray = false;\n\n    for (var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n      properties[k] = 0;\n    }\n\n    this._vaf = this._vaf && this._vaf.destroy();\n\n    if (billboardsLength > 0) {\n      // PERFORMANCE_IDEA:  Instead of creating a new one, resize like std::vector.\n      this._vaf = createVAF(\n        context,\n        billboardsLength,\n        this._buffersUsage,\n        this._instanced,\n        this._batchTable,\n        this._sdf\n      );\n      vafWriters = this._vaf.writers;\n\n      // Rewrite entire buffer if billboards were added or removed.\n      for (var i = 0; i < billboardsLength; ++i) {\n        var billboard = this._billboards[i];\n        billboard._dirty = false; // In case it needed an update.\n        writeBillboard(\n          this,\n          frameState,\n          textureAtlasCoordinates,\n          vafWriters,\n          billboard\n        );\n      }\n\n      // Different billboard collections share the same index buffer.\n      this._vaf.commit(getIndexBuffer(context));\n    }\n\n    this._billboardsToUpdateIndex = 0;\n  } else if (billboardsToUpdateLength > 0) {\n    // Billboards were modified, but none were added or removed.\n    var writers = scratchWriterArray;\n    writers.length = 0;\n\n    if (\n      properties[POSITION_INDEX] ||\n      properties[ROTATION_INDEX] ||\n      properties[SCALE_INDEX]\n    ) {\n      writers.push(writePositionScaleAndRotation);\n    }\n\n    if (\n      properties[IMAGE_INDEX_INDEX] ||\n      properties[PIXEL_OFFSET_INDEX] ||\n      properties[HORIZONTAL_ORIGIN_INDEX] ||\n      properties[VERTICAL_ORIGIN_INDEX] ||\n      properties[SHOW_INDEX]\n    ) {\n      writers.push(writeCompressedAttrib0);\n      if (this._instanced) {\n        writers.push(writeEyeOffset);\n      }\n    }\n\n    if (\n      properties[IMAGE_INDEX_INDEX] ||\n      properties[ALIGNED_AXIS_INDEX] ||\n      properties[TRANSLUCENCY_BY_DISTANCE_INDEX]\n    ) {\n      writers.push(writeCompressedAttrib1);\n      writers.push(writeCompressedAttrib2);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[COLOR_INDEX]) {\n      writers.push(writeCompressedAttrib2);\n    }\n\n    if (properties[EYE_OFFSET_INDEX]) {\n      writers.push(writeEyeOffset);\n    }\n\n    if (properties[SCALE_BY_DISTANCE_INDEX]) {\n      writers.push(writeScaleByDistance);\n    }\n\n    if (properties[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX]) {\n      writers.push(writePixelOffsetScaleByDistance);\n    }\n\n    if (\n      properties[DISTANCE_DISPLAY_CONDITION_INDEX] ||\n      properties[DISABLE_DEPTH_DISTANCE] ||\n      properties[IMAGE_INDEX_INDEX] ||\n      properties[POSITION_INDEX]\n    ) {\n      writers.push(writeCompressedAttribute3);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[POSITION_INDEX]) {\n      writers.push(writeTextureCoordinateBoundsOrLabelTranslate);\n    }\n\n    if (properties[SDF_INDEX]) {\n      writers.push(writeSDF);\n    }\n\n    var numWriters = writers.length;\n    vafWriters = this._vaf.writers;\n\n    if (billboardsToUpdateLength / billboardsLength > 0.1) {\n      // If more than 10% of billboard change, rewrite the entire buffer.\n\n      // PERFORMANCE_IDEA:  I totally made up 10% :).\n\n      for (var m = 0; m < billboardsToUpdateLength; ++m) {\n        var b = billboardsToUpdate[m];\n        b._dirty = false;\n\n        for (var n = 0; n < numWriters; ++n) {\n          writers[n](this, frameState, textureAtlasCoordinates, vafWriters, b);\n        }\n      }\n      this._vaf.commit(getIndexBuffer(context));\n    } else {\n      for (var h = 0; h < billboardsToUpdateLength; ++h) {\n        var bb = billboardsToUpdate[h];\n        bb._dirty = false;\n\n        for (var o = 0; o < numWriters; ++o) {\n          writers[o](this, frameState, textureAtlasCoordinates, vafWriters, bb);\n        }\n\n        if (this._instanced) {\n          this._vaf.subCommit(bb._index, 1);\n        } else {\n          this._vaf.subCommit(bb._index * 4, 4);\n        }\n      }\n      this._vaf.endSubCommits();\n    }\n\n    this._billboardsToUpdateIndex = 0;\n  }\n\n  // If the number of total billboards ever shrinks considerably\n  // Truncate billboardsToUpdate so that we free memory that we\'re\n  // not going to be using.\n  if (billboardsToUpdateLength > billboardsLength * 1.5) {\n    billboardsToUpdate.length = billboardsLength;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this._vaf) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this._vaf.va)) {\n    return;\n  }\n\n  if (this._boundingVolumeDirty) {\n    this._boundingVolumeDirty = false;\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].transform */ .Z.transform(\n      this._baseVolume,\n      this.modelMatrix,\n      this._baseVolumeWC\n    );\n  }\n\n  var boundingVolume;\n  var modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY;\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    modelMatrix = this.modelMatrix;\n    boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n      this._baseVolumeWC,\n      this._boundingVolume\n    );\n  } else {\n    boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n      this._baseVolume2D,\n      this._boundingVolume\n    );\n  }\n  updateBoundingVolume(this, frameState, boundingVolume);\n\n  var blendOptionChanged = this._blendOption !== this.blendOption;\n  this._blendOption = this.blendOption;\n\n  if (blendOptionChanged) {\n    if (\n      this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE */ .Z.OPAQUE ||\n      this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE_AND_TRANSLUCENT */ .Z.OPAQUE_AND_TRANSLUCENT\n    ) {\n      this._rsOpaque = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromCache */ .Z.fromCache({\n        depthTest: {\n          enabled: true,\n          func: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].LESS */ .Z.LESS,\n        },\n        depthMask: true,\n      });\n    } else {\n      this._rsOpaque = undefined;\n    }\n\n    // If OPAQUE_AND_TRANSLUCENT is in use, only the opaque pass gets the benefit of the depth buffer,\n    // not the translucent pass.  Otherwise, if the TRANSLUCENT pass is on its own, it turns on\n    // a depthMask in lieu of full depth sorting (because it has opaque-ish fragments that look bad in OIT).\n    // When the TRANSLUCENT depth mask is in use, label backgrounds require the depth func to be LEQUAL.\n    var useTranslucentDepthMask = this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT;\n\n    if (\n      this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT ||\n      this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE_AND_TRANSLUCENT */ .Z.OPAQUE_AND_TRANSLUCENT\n    ) {\n      this._rsTranslucent = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromCache */ .Z.fromCache({\n        depthTest: {\n          enabled: true,\n          func: useTranslucentDepthMask\n            ? _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].LEQUAL */ .Z.LEQUAL\n            : _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].LESS */ .Z.LESS,\n        },\n        depthMask: useTranslucentDepthMask,\n        blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n      });\n    } else {\n      this._rsTranslucent = undefined;\n    }\n  }\n\n  this._shaderDisableDepthDistance =\n    this._shaderDisableDepthDistance ||\n    frameState.minimumDisableDepthTestDistance !== 0.0;\n\n  var vsSource;\n  var fsSource;\n  var vs;\n  var fs;\n  var vertDefines;\n\n  var supportVSTextureReads = _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].maximumVertexTextureImageUnits */ .Z.maximumVertexTextureImageUnits > 0;\n\n  if (\n    blendOptionChanged ||\n    this._shaderRotation !== this._compiledShaderRotation ||\n    this._shaderAlignedAxis !== this._compiledShaderAlignedAxis ||\n    this._shaderScaleByDistance !== this._compiledShaderScaleByDistance ||\n    this._shaderTranslucencyByDistance !==\n      this._compiledShaderTranslucencyByDistance ||\n    this._shaderPixelOffsetScaleByDistance !==\n      this._compiledShaderPixelOffsetScaleByDistance ||\n    this._shaderDistanceDisplayCondition !==\n      this._compiledShaderDistanceDisplayCondition ||\n    this._shaderDisableDepthDistance !==\n      this._compiledShaderDisableDepthDistance ||\n    this._shaderClampToGround !== this._compiledShaderClampToGround ||\n    this._sdf !== this._compiledSDF\n  ) {\n    vsSource = _Shaders_BillboardCollectionVS_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z;\n    fsSource = _Shaders_BillboardCollectionFS_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z;\n\n    vertDefines = [];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this._batchTable)) {\n      vertDefines.push("VECTOR_TILE");\n      vsSource = this._batchTable.getVertexShaderCallback(\n        false,\n        "a_batchId",\n        undefined\n      )(vsSource);\n      fsSource = this._batchTable.getFragmentShaderCallback(\n        false,\n        undefined\n      )(fsSource);\n    }\n\n    vs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n      defines: vertDefines,\n      sources: [vsSource],\n    });\n    if (this._instanced) {\n      vs.defines.push("INSTANCED");\n    }\n    if (this._shaderRotation) {\n      vs.defines.push("ROTATION");\n    }\n    if (this._shaderAlignedAxis) {\n      vs.defines.push("ALIGNED_AXIS");\n    }\n    if (this._shaderScaleByDistance) {\n      vs.defines.push("EYE_DISTANCE_SCALING");\n    }\n    if (this._shaderTranslucencyByDistance) {\n      vs.defines.push("EYE_DISTANCE_TRANSLUCENCY");\n    }\n    if (this._shaderPixelOffsetScaleByDistance) {\n      vs.defines.push("EYE_DISTANCE_PIXEL_OFFSET");\n    }\n    if (this._shaderDistanceDisplayCondition) {\n      vs.defines.push("DISTANCE_DISPLAY_CONDITION");\n    }\n    if (this._shaderDisableDepthDistance) {\n      vs.defines.push("DISABLE_DEPTH_DISTANCE");\n    }\n    if (this._shaderClampToGround) {\n      if (supportVSTextureReads) {\n        vs.defines.push("VERTEX_DEPTH_CHECK");\n      } else {\n        vs.defines.push("FRAGMENT_DEPTH_CHECK");\n      }\n    }\n\n    var sdfEdge = 1.0 - _SDFSettings_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].CUTOFF */ .Z.CUTOFF;\n\n    if (this._sdf) {\n      vs.defines.push("SDF");\n    }\n\n    var vectorFragDefine = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this._batchTable) ? "VECTOR_TILE" : "";\n\n    if (this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE_AND_TRANSLUCENT */ .Z.OPAQUE_AND_TRANSLUCENT) {\n      fs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n        defines: ["OPAQUE", vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push("VERTEX_DEPTH_CHECK");\n        } else {\n          fs.defines.push("FRAGMENT_DEPTH_CHECK");\n        }\n      }\n\n      if (this._sdf) {\n        fs.defines.push("SDF");\n        fs.defines.push("SDF_EDGE " + sdfEdge);\n      }\n\n      this._sp = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].replaceCache */ .Z.replaceCache({\n        context: context,\n        shaderProgram: this._sp,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n\n      fs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n        defines: ["TRANSLUCENT", vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push("VERTEX_DEPTH_CHECK");\n        } else {\n          fs.defines.push("FRAGMENT_DEPTH_CHECK");\n        }\n      }\n      if (this._sdf) {\n        fs.defines.push("SDF");\n        fs.defines.push("SDF_EDGE " + sdfEdge);\n      }\n      this._spTranslucent = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].replaceCache */ .Z.replaceCache({\n        context: context,\n        shaderProgram: this._spTranslucent,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n    }\n\n    if (this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE */ .Z.OPAQUE) {\n      fs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n        defines: [vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push("VERTEX_DEPTH_CHECK");\n        } else {\n          fs.defines.push("FRAGMENT_DEPTH_CHECK");\n        }\n      }\n      if (this._sdf) {\n        fs.defines.push("SDF");\n        fs.defines.push("SDF_EDGE " + sdfEdge);\n      }\n      this._sp = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].replaceCache */ .Z.replaceCache({\n        context: context,\n        shaderProgram: this._sp,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n    }\n\n    if (this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT) {\n      fs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n        defines: [vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push("VERTEX_DEPTH_CHECK");\n        } else {\n          fs.defines.push("FRAGMENT_DEPTH_CHECK");\n        }\n      }\n      if (this._sdf) {\n        fs.defines.push("SDF");\n        fs.defines.push("SDF_EDGE " + sdfEdge);\n      }\n      this._spTranslucent = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].replaceCache */ .Z.replaceCache({\n        context: context,\n        shaderProgram: this._spTranslucent,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n    }\n\n    this._compiledShaderRotation = this._shaderRotation;\n    this._compiledShaderAlignedAxis = this._shaderAlignedAxis;\n    this._compiledShaderScaleByDistance = this._shaderScaleByDistance;\n    this._compiledShaderTranslucencyByDistance = this._shaderTranslucencyByDistance;\n    this._compiledShaderPixelOffsetScaleByDistance = this._shaderPixelOffsetScaleByDistance;\n    this._compiledShaderDistanceDisplayCondition = this._shaderDistanceDisplayCondition;\n    this._compiledShaderDisableDepthDistance = this._shaderDisableDepthDistance;\n    this._compiledShaderClampToGround = this._shaderClampToGround;\n    this._compiledSDF = this._sdf;\n  }\n\n  var commandList = frameState.commandList;\n\n  if (pass.render || pass.pick) {\n    var colorList = this._colorCommands;\n\n    var opaque = this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE */ .Z.OPAQUE;\n    var opaqueAndTranslucent =\n      this._blendOption === _BlendOption_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].OPAQUE_AND_TRANSLUCENT */ .Z.OPAQUE_AND_TRANSLUCENT;\n\n    var va = this._vaf.va;\n    var vaLength = va.length;\n\n    var uniforms = this._uniforms;\n    var pickId;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this._batchTable)) {\n      uniforms = this._batchTable.getUniformMapCallback()(uniforms);\n      pickId = this._batchTable.getPickId();\n    } else {\n      pickId = "v_pickColor";\n    }\n\n    colorList.length = vaLength;\n    var totalLength = opaqueAndTranslucent ? vaLength * 2 : vaLength;\n    for (var j = 0; j < totalLength; ++j) {\n      var command = colorList[j];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(command)) {\n        command = colorList[j] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z();\n      }\n\n      var opaqueCommand = opaque || (opaqueAndTranslucent && j % 2 === 0);\n\n      command.pass =\n        opaqueCommand || !opaqueAndTranslucent ? _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].OPAQUE */ .Z.OPAQUE : _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT;\n      command.owner = this;\n\n      var index = opaqueAndTranslucent ? Math.floor(j / 2.0) : j;\n      command.boundingVolume = boundingVolume;\n      command.modelMatrix = modelMatrix;\n      command.count = va[index].indicesCount;\n      command.shaderProgram = opaqueCommand ? this._sp : this._spTranslucent;\n      command.uniformMap = uniforms;\n      command.vertexArray = va[index].va;\n      command.renderState = opaqueCommand\n        ? this._rsOpaque\n        : this._rsTranslucent;\n      command.debugShowBoundingVolume = this.debugShowBoundingVolume;\n      command.pickId = pickId;\n\n      if (this._instanced) {\n        command.count = 6;\n        command.instanceCount = billboardsLength;\n      }\n\n      commandList.push(command);\n    }\n\n    if (this.debugShowTextureAtlas) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this.debugCommand)) {\n        this.debugCommand = createDebugCommand(this, frameState.context);\n      }\n\n      commandList.push(this.debugCommand);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see BillboardCollection#destroy\n */\nBillboardCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * billboards = billboards && billboards.destroy();\n *\n * @see BillboardCollection#isDestroyed\n */\nBillboardCollection.prototype.destroy = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z)(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n    this._removeCallbackFunc = undefined;\n  }\n\n  this._textureAtlas =\n    this._destroyTextureAtlas &&\n    this._textureAtlas &&\n    this._textureAtlas.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._spTranslucent = this._spTranslucent && this._spTranslucent.destroy();\n  this._vaf = this._vaf && this._vaf.destroy();\n  destroyBillboards(this._billboards);\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (BillboardCollection);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8044\n')}}]);