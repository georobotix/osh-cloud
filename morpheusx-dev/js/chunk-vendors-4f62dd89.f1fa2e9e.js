"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[3347],{8403:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99417);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89917);\n\n\n\n\n\n/**\n * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n * performance improvements by rendering less geometry and dispatching less terrain requests.\n *\n * @alias Fog\n * @constructor\n */\nfunction Fog() {\n  /**\n   * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enabled = true;\n  /**\n   * A scalar that determines the density of the fog. Terrain that is in full fog are culled.\n   * The density of the fog increases as this number approaches 1.0 and becomes less dense as it approaches zero.\n   * The more dense the fog is, the more aggressively the terrain is culled. For example, if the camera is a height of\n   * 1000.0m above the ellipsoid, increasing the value to 3.0e-3 will cause many tiles close to the viewer be culled.\n   * Decreasing the value will push the fog further from the viewer, but decrease performance as more of the terrain is rendered.\n   * @type {Number}\n   * @default 2.0e-4\n   */\n  this.density = 2.0e-4;\n  /**\n   * A factor used to increase the screen space error of terrain tiles when they are partially in fog. The effect is to reduce\n   * the number of terrain tiles requested for rendering. If set to zero, the feature will be disabled. If the value is increased\n   * for mountainous regions, less tiles will need to be requested, but the terrain meshes near the horizon may be a noticeably\n   * lower resolution. If the value is increased in a relatively flat area, there will be little noticeable change on the horizon.\n   * @type {Number}\n   * @default 2.0\n   */\n  this.screenSpaceErrorFactor = 2.0;\n  /**\n   * The minimum brightness of the fog color from lighting. A value of 0.0 can cause the fog to be completely black. A value of 1.0 will not affect\n   * the brightness at all.\n   * @type {Number}\n   * @default 0.03\n   */\n  this.minimumBrightness = 0.03;\n}\n\n// These values were found by sampling the density at certain views and finding at what point culled tiles impacted the view at the horizon.\nvar heightsTable = [\n  359.393,\n  800.749,\n  1275.6501,\n  2151.1192,\n  3141.7763,\n  4777.5198,\n  6281.2493,\n  12364.307,\n  15900.765,\n  49889.0549,\n  78026.8259,\n  99260.7344,\n  120036.3873,\n  151011.0158,\n  156091.1953,\n  203849.3112,\n  274866.9803,\n  319916.3149,\n  493552.0528,\n  628733.5874,\n];\nvar densityTable = [\n  2.0e-5,\n  2.0e-4,\n  1.0e-4,\n  7.0e-5,\n  5.0e-5,\n  4.0e-5,\n  3.0e-5,\n  1.9e-5,\n  1.0e-5,\n  8.5e-6,\n  6.2e-6,\n  5.8e-6,\n  5.3e-6,\n  5.2e-6,\n  5.1e-6,\n  4.2e-6,\n  4.0e-6,\n  3.4e-6,\n  2.6e-6,\n  2.2e-6,\n];\n\n// Scale densities by 1e6 to bring lowest value to ~1. Prevents divide by zero.\nfor (var i = 0; i < densityTable.length; ++i) {\n  densityTable[i] *= 1.0e6;\n}\n// Change range to [0, 1].\nvar tableStartDensity = densityTable[1];\nvar tableEndDensity = densityTable[densityTable.length - 1];\nfor (var j = 0; j < densityTable.length; ++j) {\n  densityTable[j] =\n    (densityTable[j] - tableEndDensity) / (tableStartDensity - tableEndDensity);\n}\n\nvar tableLastIndex = 0;\n\nfunction findInterval(height) {\n  var heights = heightsTable;\n  var length = heights.length;\n\n  if (height < heights[0]) {\n    tableLastIndex = 0;\n    return tableLastIndex;\n  } else if (height > heights[length - 1]) {\n    tableLastIndex = length - 2;\n    return tableLastIndex;\n  }\n\n  // Take advantage of temporal coherence by checking current, next and previous intervals\n  // for containment of time.\n  if (height >= heights[tableLastIndex]) {\n    if (tableLastIndex + 1 < length && height < heights[tableLastIndex + 1]) {\n      return tableLastIndex;\n    } else if (\n      tableLastIndex + 2 < length &&\n      height < heights[tableLastIndex + 2]\n    ) {\n      ++tableLastIndex;\n      return tableLastIndex;\n    }\n  } else if (tableLastIndex - 1 >= 0 && height >= heights[tableLastIndex - 1]) {\n    --tableLastIndex;\n    return tableLastIndex;\n  }\n\n  // The above failed so do a linear search.\n  var i;\n  for (i = 0; i < length - 2; ++i) {\n    if (height >= heights[i] && height < heights[i + 1]) {\n      break;\n    }\n  }\n\n  tableLastIndex = i;\n  return tableLastIndex;\n}\n\nvar scratchPositionNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nFog.prototype.update = function (frameState) {\n  var enabled = (frameState.fog.enabled = this.enabled);\n  if (!enabled) {\n    return;\n  }\n\n  var camera = frameState.camera;\n  var positionCartographic = camera.positionCartographic;\n\n  // Turn off fog in space.\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(positionCartographic) ||\n    positionCartographic.height > 800000.0 ||\n    frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SCENE3D */ .Z.SCENE3D\n  ) {\n    frameState.fog.enabled = false;\n    return;\n  }\n\n  var height = positionCartographic.height;\n  var i = findInterval(height);\n  var t = _Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clamp */ .Z.clamp(\n    (height - heightsTable[i]) / (heightsTable[i + 1] - heightsTable[i]),\n    0.0,\n    1.0\n  );\n  var density = _Core_Math_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].lerp */ .Z.lerp(densityTable[i], densityTable[i + 1], t);\n\n  // Again, scale value to be in the range of densityTable (prevents divide by zero) and change to new range.\n  var startDensity = this.density * 1.0e6;\n  var endDensity = (startDensity / tableStartDensity) * tableEndDensity;\n  density = density * (startDensity - endDensity) * 1.0e-6;\n\n  // Fade fog in as the camera tilts toward the horizon.\n  var positionNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(\n    camera.positionWC,\n    scratchPositionNormal\n  );\n  var dot = Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].dot */ .Z.dot(camera.directionWC, positionNormal));\n  density *= 1.0 - dot;\n\n  frameState.fog.density = density;\n  frameState.fog.sse = this.screenSpaceErrorFactor;\n  frameState.fog.minimumBrightness = this.minimumBrightness;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Fog);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8403\n')},84725:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59081);\n/* harmony import */ var _Core_TimeConstants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4877);\n\n\n\n\n\n\n\n\n/**\n * Monitors the frame rate (frames per second) in a {@link Scene} and raises an event if the frame rate is\n * lower than a threshold.  Later, if the frame rate returns to the required level, a separate event is raised.\n * To avoid creating multiple FrameRateMonitors for a single {@link Scene}, use {@link FrameRateMonitor.fromScene}\n * instead of constructing an instance explicitly.\n *\n * @alias FrameRateMonitor\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Scene} options.scene The Scene instance for which to monitor performance.\n * @param {Number} [options.samplingWindow=5.0] The length of the sliding window over which to compute the average frame rate, in seconds.\n * @param {Number} [options.quietPeriod=2.0] The length of time to wait at startup and each time the page becomes visible (i.e. when the user\n *        switches back to the tab) before starting to measure performance, in seconds.\n * @param {Number} [options.warmupPeriod=5.0] The length of the warmup period, in seconds.  During the warmup period, a separate\n *        (usually lower) frame rate is required.\n * @param {Number} [options.minimumFrameRateDuringWarmup=4] The minimum frames-per-second that are required for acceptable performance during\n *        the warmup period.  If the frame rate averages less than this during any samplingWindow during the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n * @param {Number} [options.minimumFrameRateAfterWarmup=8] The minimum frames-per-second that are required for acceptable performance after\n *        the end of the warmup period.  If the frame rate averages less than this during any samplingWindow after the warmupPeriod, the\n *        lowFrameRate event will be raised and the page will redirect to the redirectOnLowFrameRateUrl, if any.\n */\nfunction FrameRateMonitor(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options.scene)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.scene is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._scene = options.scene;\n\n  /**\n   * Gets or sets the length of the sliding window over which to compute the average frame rate, in seconds.\n   * @type {Number}\n   */\n  this.samplingWindow = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.samplingWindow,\n    FrameRateMonitor.defaultSettings.samplingWindow\n  );\n\n  /**\n   * Gets or sets the length of time to wait at startup and each time the page becomes visible (i.e. when the user\n   * switches back to the tab) before starting to measure performance, in seconds.\n   * @type {Number}\n   */\n  this.quietPeriod = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.quietPeriod,\n    FrameRateMonitor.defaultSettings.quietPeriod\n  );\n\n  /**\n   * Gets or sets the length of the warmup period, in seconds.  During the warmup period, a separate\n   * (usually lower) frame rate is required.\n   * @type {Number}\n   */\n  this.warmupPeriod = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.warmupPeriod,\n    FrameRateMonitor.defaultSettings.warmupPeriod\n  );\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance during\n   * the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> during the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {Number}\n   */\n  this.minimumFrameRateDuringWarmup = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.minimumFrameRateDuringWarmup,\n    FrameRateMonitor.defaultSettings.minimumFrameRateDuringWarmup\n  );\n\n  /**\n   * Gets or sets the minimum frames-per-second that are required for acceptable performance after\n   * the end of the warmup period.  If the frame rate averages less than this during any <code>samplingWindow</code> after the <code>warmupPeriod</code>, the\n   * <code>lowFrameRate</code> event will be raised and the page will redirect to the <code>redirectOnLowFrameRateUrl</code>, if any.\n   * @type {Number}\n   */\n  this.minimumFrameRateAfterWarmup = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.minimumFrameRateAfterWarmup,\n    FrameRateMonitor.defaultSettings.minimumFrameRateAfterWarmup\n  );\n\n  this._lowFrameRate = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n  this._nominalFrameRate = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  this._frameTimes = [];\n  this._needsQuietPeriod = true;\n  this._quietPeriodEndTime = 0.0;\n  this._warmupPeriodEndTime = 0.0;\n  this._frameRateIsLow = false;\n  this._lastFramesPerSecond = undefined;\n  this._pauseCount = 0;\n\n  var that = this;\n  this._preUpdateRemoveListener = this._scene.preUpdate.addEventListener(\n    function (scene, time) {\n      update(that, time);\n    }\n  );\n\n  this._hiddenPropertyName =\n    document.hidden !== undefined\n      ? "hidden"\n      : document.mozHidden !== undefined\n      ? "mozHidden"\n      : document.msHidden !== undefined\n      ? "msHidden"\n      : document.webkitHidden !== undefined\n      ? "webkitHidden"\n      : undefined;\n\n  var visibilityChangeEventName =\n    document.hidden !== undefined\n      ? "visibilitychange"\n      : document.mozHidden !== undefined\n      ? "mozvisibilitychange"\n      : document.msHidden !== undefined\n      ? "msvisibilitychange"\n      : document.webkitHidden !== undefined\n      ? "webkitvisibilitychange"\n      : undefined;\n\n  function visibilityChangeListener() {\n    visibilityChanged(that);\n  }\n\n  this._visibilityChangeRemoveListener = undefined;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(visibilityChangeEventName)) {\n    document.addEventListener(\n      visibilityChangeEventName,\n      visibilityChangeListener,\n      false\n    );\n\n    this._visibilityChangeRemoveListener = function () {\n      document.removeEventListener(\n        visibilityChangeEventName,\n        visibilityChangeListener,\n        false\n      );\n    };\n  }\n}\n\n/**\n * The default frame rate monitoring settings.  These settings are used when {@link FrameRateMonitor.fromScene}\n * needs to create a new frame rate monitor, and for any settings that are not passed to the\n * {@link FrameRateMonitor} constructor.\n *\n * @memberof FrameRateMonitor\n * @type {Object}\n */\nFrameRateMonitor.defaultSettings = {\n  samplingWindow: 5.0,\n  quietPeriod: 2.0,\n  warmupPeriod: 5.0,\n  minimumFrameRateDuringWarmup: 4,\n  minimumFrameRateAfterWarmup: 8,\n};\n\n/**\n * Gets the {@link FrameRateMonitor} for a given scene.  If the scene does not yet have\n * a {@link FrameRateMonitor}, one is created with the {@link FrameRateMonitor.defaultSettings}.\n *\n * @param {Scene} scene The scene for which to get the {@link FrameRateMonitor}.\n * @returns {FrameRateMonitor} The scene\'s {@link FrameRateMonitor}.\n */\nFrameRateMonitor.fromScene = function (scene) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(scene)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("scene is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(scene._frameRateMonitor) ||\n    scene._frameRateMonitor.isDestroyed()\n  ) {\n    scene._frameRateMonitor = new FrameRateMonitor({\n      scene: scene,\n    });\n  }\n\n  return scene._frameRateMonitor;\n};\n\nObject.defineProperties(FrameRateMonitor.prototype, {\n  /**\n   * Gets the {@link Scene} instance for which to monitor performance.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n\n  /**\n   * Gets the event that is raised when a low frame rate is detected.  The function will be passed\n   * the {@link Scene} instance as its first parameter and the average number of frames per second\n   * over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  lowFrameRate: {\n    get: function () {\n      return this._lowFrameRate;\n    },\n  },\n\n  /**\n   * Gets the event that is raised when the frame rate returns to a normal level after having been low.\n   * The function will be passed the {@link Scene} instance as its first parameter and the average\n   * number of frames per second over the sampling window as its second parameter.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Event}\n   */\n  nominalFrameRate: {\n    get: function () {\n      return this._nominalFrameRate;\n    },\n  },\n\n  /**\n   * Gets the most recently computed average frames-per-second over the last <code>samplingWindow</code>.\n   * This property may be undefined if the frame rate has not been computed.\n   * @memberof FrameRateMonitor.prototype\n   * @type {Number}\n   */\n  lastFramesPerSecond: {\n    get: function () {\n      return this._lastFramesPerSecond;\n    },\n  },\n});\n\n/**\n * Pauses monitoring of the frame rate.  To resume monitoring, {@link FrameRateMonitor#unpause}\n * must be called once for each time this function is called.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.pause = function () {\n  ++this._pauseCount;\n  if (this._pauseCount === 1) {\n    this._frameTimes.length = 0;\n    this._lastFramesPerSecond = undefined;\n  }\n};\n\n/**\n * Resumes monitoring of the frame rate.  If {@link FrameRateMonitor#pause} was called\n * multiple times, this function must be called the same number of times in order to\n * actually resume monitoring.\n * @memberof FrameRateMonitor\n */\nFrameRateMonitor.prototype.unpause = function () {\n  --this._pauseCount;\n  if (this._pauseCount <= 0) {\n    this._pauseCount = 0;\n    this._needsQuietPeriod = true;\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof FrameRateMonitor\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see FrameRateMonitor#destroy\n */\nFrameRateMonitor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Unsubscribes this instance from all events it is listening to.\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof FrameRateMonitor\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @see FrameRateMonitor#isDestroyed\n */\nFrameRateMonitor.prototype.destroy = function () {\n  this._preUpdateRemoveListener();\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this._visibilityChangeRemoveListener)) {\n    this._visibilityChangeRemoveListener();\n  }\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this);\n};\n\nfunction update(monitor, time) {\n  if (monitor._pauseCount > 0) {\n    return;\n  }\n\n  var timeStamp = (0,_Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)();\n\n  if (monitor._needsQuietPeriod) {\n    monitor._needsQuietPeriod = false;\n    monitor._frameTimes.length = 0;\n    monitor._quietPeriodEndTime =\n      timeStamp + monitor.quietPeriod / _Core_TimeConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].SECONDS_PER_MILLISECOND */ .Z.SECONDS_PER_MILLISECOND;\n    monitor._warmupPeriodEndTime =\n      monitor._quietPeriodEndTime +\n      (monitor.warmupPeriod + monitor.samplingWindow) /\n        _Core_TimeConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].SECONDS_PER_MILLISECOND */ .Z.SECONDS_PER_MILLISECOND;\n  } else if (timeStamp >= monitor._quietPeriodEndTime) {\n    monitor._frameTimes.push(timeStamp);\n\n    var beginningOfWindow =\n      timeStamp -\n      monitor.samplingWindow / _Core_TimeConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].SECONDS_PER_MILLISECOND */ .Z.SECONDS_PER_MILLISECOND;\n\n    if (\n      monitor._frameTimes.length >= 2 &&\n      monitor._frameTimes[0] <= beginningOfWindow\n    ) {\n      while (\n        monitor._frameTimes.length >= 2 &&\n        monitor._frameTimes[1] < beginningOfWindow\n      ) {\n        monitor._frameTimes.shift();\n      }\n\n      var averageTimeBetweenFrames =\n        (timeStamp - monitor._frameTimes[0]) / (monitor._frameTimes.length - 1);\n\n      monitor._lastFramesPerSecond = 1000.0 / averageTimeBetweenFrames;\n\n      var maximumFrameTime =\n        1000.0 /\n        (timeStamp > monitor._warmupPeriodEndTime\n          ? monitor.minimumFrameRateAfterWarmup\n          : monitor.minimumFrameRateDuringWarmup);\n      if (averageTimeBetweenFrames > maximumFrameTime) {\n        if (!monitor._frameRateIsLow) {\n          monitor._frameRateIsLow = true;\n          monitor._needsQuietPeriod = true;\n          monitor.lowFrameRate.raiseEvent(\n            monitor.scene,\n            monitor._lastFramesPerSecond\n          );\n        }\n      } else if (monitor._frameRateIsLow) {\n        monitor._frameRateIsLow = false;\n        monitor._needsQuietPeriod = true;\n        monitor.nominalFrameRate.raiseEvent(\n          monitor.scene,\n          monitor._lastFramesPerSecond\n        );\n      }\n    }\n  }\n}\n\nfunction visibilityChanged(monitor) {\n  if (document[monitor._hiddenPropertyName]) {\n    monitor.pause();\n  } else {\n    monitor.unpause();\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (FrameRateMonitor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84725\n')},85079:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89917);\n\n\n/**\n * State information about the current frame.  An instance of this class\n * is provided to update functions.\n *\n * @param {Context} context The rendering context\n * @param {CreditDisplay} creditDisplay Handles adding and removing credits from an HTML element\n * @param {JobScheduler} jobScheduler The job scheduler\n *\n * @alias FrameState\n * @constructor\n *\n * @private\n */\nfunction FrameState(context, creditDisplay, jobScheduler) {\n  /**\n   * The rendering context.\n   *\n   * @type {Context}\n   */\n  this.context = context;\n\n  /**\n   * An array of rendering commands.\n   *\n   * @type {DrawCommand[]}\n   */\n  this.commandList = [];\n\n  /**\n   * An array of shadow maps.\n   * @type {ShadowMap[]}\n   */\n  this.shadowMaps = [];\n\n  /**\n   * The BRDF look up texture generator used for image-based lighting for PBR models\n   * @type {BrdfLutGenerator}\n   */\n  this.brdfLutGenerator = undefined;\n\n  /**\n   * The environment map used for image-based lighting for PBR models\n   * @type {CubeMap}\n   */\n  this.environmentMap = undefined;\n\n  /**\n   * The spherical harmonic coefficients used for image-based lighting for PBR models.\n   * @type {Cartesian3[]}\n   */\n  this.sphericalHarmonicCoefficients = undefined;\n\n  /**\n   * The specular environment atlas used for image-based lighting for PBR models.\n   * @type {Texture}\n   */\n  this.specularEnvironmentMaps = undefined;\n\n  /**\n   * The maximum level-of-detail of the specular environment atlas used for image-based lighting for PBR models.\n   * @type {Number}\n   */\n  this.specularEnvironmentMapsMaximumLOD = undefined;\n\n  /**\n   * The current mode of the scene.\n   *\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  this.mode = _SceneMode_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].SCENE3D */ .Z.SCENE3D;\n\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {Number}\n   */\n  this.morphTime = _SceneMode_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getMorphTime */ .Z.getMorphTime(_SceneMode_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].SCENE3D */ .Z.SCENE3D);\n\n  /**\n   * The current frame number.\n   *\n   * @type {Number}\n   * @default 0\n   */\n  this.frameNumber = 0;\n\n  /**\n   * <code>true</code> if a new frame has been issued and the frame number has been updated.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.newFrame = false;\n\n  /**\n   * The scene\'s current time.\n   *\n   * @type {JulianDate}\n   * @default undefined\n   */\n  this.time = undefined;\n\n  /**\n   * The job scheduler.\n   *\n   * @type {JobScheduler}\n   */\n  this.jobScheduler = jobScheduler;\n\n  /**\n   * The map projection to use in 2D and Columbus View modes.\n   *\n   * @type {MapProjection}\n   * @default undefined\n   */\n  this.mapProjection = undefined;\n\n  /**\n   * The current camera.\n   *\n   * @type {Camera}\n   * @default undefined\n   */\n  this.camera = undefined;\n\n  /**\n   * Whether the camera is underground.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.cameraUnderground = false;\n\n  /**\n   * The {@link GlobeTranslucencyState} object used by the scene.\n   *\n   * @type {GlobeTranslucencyState}\n   * @default undefined\n   */\n  this.globeTranslucencyState = undefined;\n\n  /**\n   * The culling volume.\n   *\n   * @type {CullingVolume}\n   * @default undefined\n   */\n  this.cullingVolume = undefined;\n\n  /**\n   * The current occluder.\n   *\n   * @type {Occluder}\n   * @default undefined\n   */\n  this.occluder = undefined;\n\n  /**\n   * The maximum screen-space error used to drive level-of-detail refinement.  Higher\n   * values will provide better performance but lower visual quality.\n   *\n   * @type {Number}\n   * @default 2\n   */\n  this.maximumScreenSpaceError = undefined;\n\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.pixelRatio = 1.0;\n\n  /**\n   * @typedef FrameState.Passes\n   * @type {Object}\n   * @property {Boolean} render <code>true</code> if the primitive should update for a render pass, <code>false</code> otherwise.\n   * @property {Boolean} pick <code>true</code> if the primitive should update for a picking pass, <code>false</code> otherwise.\n   * @property {Boolean} depth <code>true</code> if the primitive should update for a depth only pass, <code>false</code> otherwise.\n   * @property {Boolean} postProcess <code>true</code> if the primitive should update for a per-feature post-process pass, <code>false</code> otherwise.\n   * @property {Boolean} offscreen <code>true</code> if the primitive should update for an offscreen pass, <code>false</code> otherwise.\n   */\n\n  /**\n   * @type {FrameState.Passes}\n   */\n  this.passes = {\n    /**\n     * @default false\n     */\n    render: false,\n    /**\n     * @default false\n     */\n    pick: false,\n    /**\n     * @default false\n     */\n    depth: false,\n    /**\n     * @default false\n     */\n    postProcess: false,\n    /**\n     * @default false\n     */\n    offscreen: false,\n  };\n\n  /**\n   * The credit display.\n   *\n   * @type {CreditDisplay}\n   */\n  this.creditDisplay = creditDisplay;\n\n  /**\n   * An array of functions to be called at the end of the frame.  This array\n   * will be cleared after each frame.\n   * <p>\n   * This allows queueing up events in <code>update</code> functions and\n   * firing them at a time when the subscribers are free to change the\n   * scene state, e.g., manipulate the camera, instead of firing events\n   * directly in <code>update</code> functions.\n   * </p>\n   *\n   * @type {FrameState.AfterRenderCallback[]}\n   *\n   * @example\n   * frameState.afterRender.push(function() {\n   *   // take some action, raise an event, etc.\n   * });\n   */\n  this.afterRender = [];\n\n  /**\n   * Gets whether or not to optimized for 3D only.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.scene3DOnly = false;\n\n  /**\n   * @typedef FrameState.Fog\n   * @type {Object}\n   * @property {Boolean} enabled <code>true</code> if fog is enabled, <code>false</code> otherwise.\n   * @property {Number} density A positive number used to mix the color and fog color based on camera distance.\n   * @property {Number} sse A scalar used to modify the screen space error of geometry partially in fog.\n   * @property {Number} minimumBrightness The minimum brightness of terrain with fog applied.\n   */\n\n  /**\n   * @type {FrameState.Fog}\n   */\n\n  this.fog = {\n    /**\n     * @default false\n     */\n    enabled: false,\n    density: undefined,\n    sse: undefined,\n    minimumBrightness: undefined,\n  };\n\n  /**\n   * A scalar used to exaggerate the terrain.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.terrainExaggeration = 1.0;\n\n  /**\n   * The height relative to which terrain is exaggerated.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.terrainExaggerationRelativeHeight = 0.0;\n\n  /**\n   * @typedef FrameState.ShadowState\n   * @type {Object}\n   * @property {Boolean} shadowsEnabled Whether there are any active shadow maps this frame.\n   * @property {Boolean} lightShadowsEnabled Whether there are any active shadow maps that originate from light sources. Does not include shadow maps that are used for analytical purposes.\n   * @property {ShadowMap[]} shadowMaps All shadow maps that are enabled this frame.\n   * @property {ShadowMap[]} lightShadowMaps Shadow maps that originate from light sources. Does not include shadow maps that are used for analytical purposes. Only these shadow maps will be used to generate receive shadows shaders.\n   * @property {Number} nearPlane The near plane of the scene\'s frustum commands. Used for fitting cascaded shadow maps.\n   * @property {Number} farPlane The far plane of the scene\'s frustum commands. Used for fitting cascaded shadow maps.\n   * @property {Number} closestObjectSize The size of the bounding volume that is closest to the camera. This is used to place more shadow detail near the object.\n   * @property {Number} lastDirtyTime The time when a shadow map was last dirty\n   * @property {Boolean} outOfView Whether the shadows maps are out of view this frame\n   */\n\n  /**\n   * @type {FrameState.ShadowState}\n   */\n\n  this.shadowState = {\n    /**\n     * @default true\n     */\n    shadowsEnabled: true,\n    shadowMaps: [],\n    lightShadowMaps: [],\n    /**\n     * @default 1.0\n     */\n    nearPlane: 1.0,\n    /**\n     * @default 5000.0\n     */\n    farPlane: 5000.0,\n    /**\n     * @default 1000.0\n     */\n    closestObjectSize: 1000.0,\n    /**\n     * @default 0\n     */\n    lastDirtyTime: 0,\n    /**\n     * @default true\n     */\n    outOfView: true,\n  };\n\n  /**\n   * The position of the splitter to use when rendering imagery layers on either side of a splitter.\n   * This value should be between 0.0 and 1.0 with 0 being the far left of the viewport and 1 being the far right of the viewport.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.imagerySplitPosition = 0.0;\n\n  /**\n   * Distances to the near and far planes of the camera frustums\n   * @type {Number[]}\n   * @default []\n   */\n  this.frustumSplits = [];\n\n  /**\n   * The current scene background color\n   *\n   * @type {Color}\n   */\n  this.backgroundColor = undefined;\n\n  /**\n   * The light used to shade the scene.\n   *\n   * @type {Light}\n   */\n  this.light = undefined;\n\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied.\n   * @type {Number}\n   */\n  this.minimumDisableDepthTestDistance = undefined;\n\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied with {@link FrameState#invertClassificationColor}.\n   * @type {Boolean}\n   * @default false\n   */\n  this.invertClassification = false;\n\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link FrameState#invertClassification} is <code>true</code>.\n   * @type {Color}\n   */\n  this.invertClassificationColor = undefined;\n\n  /**\n   * Whether or not the scene uses a logarithmic depth buffer.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.useLogDepth = false;\n\n  /**\n   * Additional state used to update 3D Tilesets.\n   *\n   * @type {Cesium3DTilePassState}\n   */\n  this.tilesetPassState = undefined;\n\n  /**\n   * The minimum terrain height out of all rendered terrain tiles. Used to improve culling for objects underneath the ellipsoid but above terrain.\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  this.minimumTerrainHeight = 0.0;\n}\n\n/**\n * A function that will be called at the end of the frame.\n *\n * @callback FrameState.AfterRenderCallback\n */\n/* harmony default export */ __webpack_exports__["Z"] = (FrameState);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUwNzkuanMiLCJtYXBwaW5ncyI6IjtBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixlQUFlO0FBQ2Y7QUFDQSxjQUFjLDhFQUFpQjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxtQkFBbUIsd0ZBQXNCLENBQUMsOEVBQWlCOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsOEJBQThCO0FBQ3hDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixTQUFTO0FBQ3pCOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osZ0JBQWdCLFNBQVM7QUFDekIsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFFBQVE7QUFDeEI7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osZ0JBQWdCLFNBQVM7QUFDekIsZ0JBQWdCLFNBQVM7QUFDekIsZ0JBQWdCLGFBQWE7QUFDN0IsZ0JBQWdCLGFBQWE7QUFDN0IsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFNBQVM7QUFDekI7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrRUFBK0UsMkNBQTJDO0FBQzFILFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnRUFBZ0UsdUNBQXVDO0FBQ3ZHLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvRnJhbWVTdGF0ZS5qcz82MjNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTY2VuZU1vZGUgZnJvbSBcIi4vU2NlbmVNb2RlLmpzXCI7XG5cbi8qKlxuICogU3RhdGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgZnJhbWUuICBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzXG4gKiBpcyBwcm92aWRlZCB0byB1cGRhdGUgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dCBUaGUgcmVuZGVyaW5nIGNvbnRleHRcbiAqIEBwYXJhbSB7Q3JlZGl0RGlzcGxheX0gY3JlZGl0RGlzcGxheSBIYW5kbGVzIGFkZGluZyBhbmQgcmVtb3ZpbmcgY3JlZGl0cyBmcm9tIGFuIEhUTUwgZWxlbWVudFxuICogQHBhcmFtIHtKb2JTY2hlZHVsZXJ9IGpvYlNjaGVkdWxlciBUaGUgam9iIHNjaGVkdWxlclxuICpcbiAqIEBhbGlhcyBGcmFtZVN0YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBGcmFtZVN0YXRlKGNvbnRleHQsIGNyZWRpdERpc3BsYXksIGpvYlNjaGVkdWxlcikge1xuICAvKipcbiAgICogVGhlIHJlbmRlcmluZyBjb250ZXh0LlxuICAgKlxuICAgKiBAdHlwZSB7Q29udGV4dH1cbiAgICovXG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIHJlbmRlcmluZyBjb21tYW5kcy5cbiAgICpcbiAgICogQHR5cGUge0RyYXdDb21tYW5kW119XG4gICAqL1xuICB0aGlzLmNvbW1hbmRMaXN0ID0gW107XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIHNoYWRvdyBtYXBzLlxuICAgKiBAdHlwZSB7U2hhZG93TWFwW119XG4gICAqL1xuICB0aGlzLnNoYWRvd01hcHMgPSBbXTtcblxuICAvKipcbiAgICogVGhlIEJSREYgbG9vayB1cCB0ZXh0dXJlIGdlbmVyYXRvciB1c2VkIGZvciBpbWFnZS1iYXNlZCBsaWdodGluZyBmb3IgUEJSIG1vZGVsc1xuICAgKiBAdHlwZSB7QnJkZkx1dEdlbmVyYXRvcn1cbiAgICovXG4gIHRoaXMuYnJkZkx1dEdlbmVyYXRvciA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGVudmlyb25tZW50IG1hcCB1c2VkIGZvciBpbWFnZS1iYXNlZCBsaWdodGluZyBmb3IgUEJSIG1vZGVsc1xuICAgKiBAdHlwZSB7Q3ViZU1hcH1cbiAgICovXG4gIHRoaXMuZW52aXJvbm1lbnRNYXAgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBzcGhlcmljYWwgaGFybW9uaWMgY29lZmZpY2llbnRzIHVzZWQgZm9yIGltYWdlLWJhc2VkIGxpZ2h0aW5nIGZvciBQQlIgbW9kZWxzLlxuICAgKiBAdHlwZSB7Q2FydGVzaWFuM1tdfVxuICAgKi9cbiAgdGhpcy5zcGhlcmljYWxIYXJtb25pY0NvZWZmaWNpZW50cyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIHNwZWN1bGFyIGVudmlyb25tZW50IGF0bGFzIHVzZWQgZm9yIGltYWdlLWJhc2VkIGxpZ2h0aW5nIGZvciBQQlIgbW9kZWxzLlxuICAgKiBAdHlwZSB7VGV4dHVyZX1cbiAgICovXG4gIHRoaXMuc3BlY3VsYXJFbnZpcm9ubWVudE1hcHMgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGxldmVsLW9mLWRldGFpbCBvZiB0aGUgc3BlY3VsYXIgZW52aXJvbm1lbnQgYXRsYXMgdXNlZCBmb3IgaW1hZ2UtYmFzZWQgbGlnaHRpbmcgZm9yIFBCUiBtb2RlbHMuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLnNwZWN1bGFyRW52aXJvbm1lbnRNYXBzTWF4aW11bUxPRCA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgbW9kZSBvZiB0aGUgc2NlbmUuXG4gICAqXG4gICAqIEB0eXBlIHtTY2VuZU1vZGV9XG4gICAqIEBkZWZhdWx0IHtAbGluayBTY2VuZU1vZGUuU0NFTkUzRH1cbiAgICovXG4gIHRoaXMubW9kZSA9IFNjZW5lTW9kZS5TQ0VORTNEO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBtb3JwaCB0cmFuc2l0aW9uIHRpbWUgYmV0d2VlbiAyRC9Db2x1bWJ1cyBWaWV3IGFuZCAzRCxcbiAgICogd2l0aCAwLjAgYmVpbmcgMkQgb3IgQ29sdW1idXMgVmlldyBhbmQgMS4wIGJlaW5nIDNELlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgdGhpcy5tb3JwaFRpbWUgPSBTY2VuZU1vZGUuZ2V0TW9ycGhUaW1lKFNjZW5lTW9kZS5TQ0VORTNEKTtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgZnJhbWUgbnVtYmVyLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0aGlzLmZyYW1lTnVtYmVyID0gMDtcblxuICAvKipcbiAgICogPGNvZGU+dHJ1ZTwvY29kZT4gaWYgYSBuZXcgZnJhbWUgaGFzIGJlZW4gaXNzdWVkIGFuZCB0aGUgZnJhbWUgbnVtYmVyIGhhcyBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5uZXdGcmFtZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgc2NlbmUncyBjdXJyZW50IHRpbWUuXG4gICAqXG4gICAqIEB0eXBlIHtKdWxpYW5EYXRlfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMudGltZSA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGpvYiBzY2hlZHVsZXIuXG4gICAqXG4gICAqIEB0eXBlIHtKb2JTY2hlZHVsZXJ9XG4gICAqL1xuICB0aGlzLmpvYlNjaGVkdWxlciA9IGpvYlNjaGVkdWxlcjtcblxuICAvKipcbiAgICogVGhlIG1hcCBwcm9qZWN0aW9uIHRvIHVzZSBpbiAyRCBhbmQgQ29sdW1idXMgVmlldyBtb2Rlcy5cbiAgICpcbiAgICogQHR5cGUge01hcFByb2plY3Rpb259XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5tYXBQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBjYW1lcmEuXG4gICAqXG4gICAqIEB0eXBlIHtDYW1lcmF9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5jYW1lcmEgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNhbWVyYSBpcyB1bmRlcmdyb3VuZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0aGlzLmNhbWVyYVVuZGVyZ3JvdW5kID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRoZSB7QGxpbmsgR2xvYmVUcmFuc2x1Y2VuY3lTdGF0ZX0gb2JqZWN0IHVzZWQgYnkgdGhlIHNjZW5lLlxuICAgKlxuICAgKiBAdHlwZSB7R2xvYmVUcmFuc2x1Y2VuY3lTdGF0ZX1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLmdsb2JlVHJhbnNsdWNlbmN5U3RhdGUgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBjdWxsaW5nIHZvbHVtZS5cbiAgICpcbiAgICogQHR5cGUge0N1bGxpbmdWb2x1bWV9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5jdWxsaW5nVm9sdW1lID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBvY2NsdWRlci5cbiAgICpcbiAgICogQHR5cGUge09jY2x1ZGVyfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMub2NjbHVkZXIgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIHNjcmVlbi1zcGFjZSBlcnJvciB1c2VkIHRvIGRyaXZlIGxldmVsLW9mLWRldGFpbCByZWZpbmVtZW50LiAgSGlnaGVyXG4gICAqIHZhbHVlcyB3aWxsIHByb3ZpZGUgYmV0dGVyIHBlcmZvcm1hbmNlIGJ1dCBsb3dlciB2aXN1YWwgcXVhbGl0eS5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMlxuICAgKi9cbiAgdGhpcy5tYXhpbXVtU2NyZWVuU3BhY2VFcnJvciA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUmF0aW8gYmV0d2VlbiBhIHBpeGVsIGFuZCBhIGRlbnNpdHktaW5kZXBlbmRlbnQgcGl4ZWwuIFByb3ZpZGVzIGEgc3RhbmRhcmQgdW5pdCBvZlxuICAgKiBtZWFzdXJlIGZvciByZWFsIHBpeGVsIG1lYXN1cmVtZW50cyBhcHByb3ByaWF0ZSB0byBhIHBhcnRpY3VsYXIgZGV2aWNlLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxLjBcbiAgICovXG4gIHRoaXMucGl4ZWxSYXRpbyA9IDEuMDtcblxuICAvKipcbiAgICogQHR5cGVkZWYgRnJhbWVTdGF0ZS5QYXNzZXNcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSByZW5kZXIgPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHByaW1pdGl2ZSBzaG91bGQgdXBkYXRlIGZvciBhIHJlbmRlciBwYXNzLCA8Y29kZT5mYWxzZTwvY29kZT4gb3RoZXJ3aXNlLlxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHBpY2sgPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHByaW1pdGl2ZSBzaG91bGQgdXBkYXRlIGZvciBhIHBpY2tpbmcgcGFzcywgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZS5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBkZXB0aCA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgcHJpbWl0aXZlIHNob3VsZCB1cGRhdGUgZm9yIGEgZGVwdGggb25seSBwYXNzLCA8Y29kZT5mYWxzZTwvY29kZT4gb3RoZXJ3aXNlLlxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHBvc3RQcm9jZXNzIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBwcmltaXRpdmUgc2hvdWxkIHVwZGF0ZSBmb3IgYSBwZXItZmVhdHVyZSBwb3N0LXByb2Nlc3MgcGFzcywgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZS5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBvZmZzY3JlZW4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHByaW1pdGl2ZSBzaG91bGQgdXBkYXRlIGZvciBhbiBvZmZzY3JlZW4gcGFzcywgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtGcmFtZVN0YXRlLlBhc3Nlc31cbiAgICovXG4gIHRoaXMucGFzc2VzID0ge1xuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcmVuZGVyOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHBpY2s6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZGVwdGg6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcG9zdFByb2Nlc3M6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgb2Zmc2NyZWVuOiBmYWxzZSxcbiAgfTtcblxuICAvKipcbiAgICogVGhlIGNyZWRpdCBkaXNwbGF5LlxuICAgKlxuICAgKiBAdHlwZSB7Q3JlZGl0RGlzcGxheX1cbiAgICovXG4gIHRoaXMuY3JlZGl0RGlzcGxheSA9IGNyZWRpdERpc3BsYXk7XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyB0byBiZSBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGUgZnJhbWUuICBUaGlzIGFycmF5XG4gICAqIHdpbGwgYmUgY2xlYXJlZCBhZnRlciBlYWNoIGZyYW1lLlxuICAgKiA8cD5cbiAgICogVGhpcyBhbGxvd3MgcXVldWVpbmcgdXAgZXZlbnRzIGluIDxjb2RlPnVwZGF0ZTwvY29kZT4gZnVuY3Rpb25zIGFuZFxuICAgKiBmaXJpbmcgdGhlbSBhdCBhIHRpbWUgd2hlbiB0aGUgc3Vic2NyaWJlcnMgYXJlIGZyZWUgdG8gY2hhbmdlIHRoZVxuICAgKiBzY2VuZSBzdGF0ZSwgZS5nLiwgbWFuaXB1bGF0ZSB0aGUgY2FtZXJhLCBpbnN0ZWFkIG9mIGZpcmluZyBldmVudHNcbiAgICogZGlyZWN0bHkgaW4gPGNvZGU+dXBkYXRlPC9jb2RlPiBmdW5jdGlvbnMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0ZyYW1lU3RhdGUuQWZ0ZXJSZW5kZXJDYWxsYmFja1tdfVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBmcmFtZVN0YXRlLmFmdGVyUmVuZGVyLnB1c2goZnVuY3Rpb24oKSB7XG4gICAqICAgLy8gdGFrZSBzb21lIGFjdGlvbiwgcmFpc2UgYW4gZXZlbnQsIGV0Yy5cbiAgICogfSk7XG4gICAqL1xuICB0aGlzLmFmdGVyUmVuZGVyID0gW107XG5cbiAgLyoqXG4gICAqIEdldHMgd2hldGhlciBvciBub3QgdG8gb3B0aW1pemVkIGZvciAzRCBvbmx5LlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuc2NlbmUzRE9ubHkgPSBmYWxzZTtcblxuICAvKipcbiAgICogQHR5cGVkZWYgRnJhbWVTdGF0ZS5Gb2dcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVkIDxjb2RlPnRydWU8L2NvZGU+IGlmIGZvZyBpcyBlbmFibGVkLCA8Y29kZT5mYWxzZTwvY29kZT4gb3RoZXJ3aXNlLlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gZGVuc2l0eSBBIHBvc2l0aXZlIG51bWJlciB1c2VkIHRvIG1peCB0aGUgY29sb3IgYW5kIGZvZyBjb2xvciBiYXNlZCBvbiBjYW1lcmEgZGlzdGFuY2UuXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzc2UgQSBzY2FsYXIgdXNlZCB0byBtb2RpZnkgdGhlIHNjcmVlbiBzcGFjZSBlcnJvciBvZiBnZW9tZXRyeSBwYXJ0aWFsbHkgaW4gZm9nLlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gbWluaW11bUJyaWdodG5lc3MgVGhlIG1pbmltdW0gYnJpZ2h0bmVzcyBvZiB0ZXJyYWluIHdpdGggZm9nIGFwcGxpZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7RnJhbWVTdGF0ZS5Gb2d9XG4gICAqL1xuXG4gIHRoaXMuZm9nID0ge1xuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgZGVuc2l0eTogdW5kZWZpbmVkLFxuICAgIHNzZTogdW5kZWZpbmVkLFxuICAgIG1pbmltdW1CcmlnaHRuZXNzOiB1bmRlZmluZWQsXG4gIH07XG5cbiAgLyoqXG4gICAqIEEgc2NhbGFyIHVzZWQgdG8gZXhhZ2dlcmF0ZSB0aGUgdGVycmFpbi5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMS4wXG4gICAqL1xuICB0aGlzLnRlcnJhaW5FeGFnZ2VyYXRpb24gPSAxLjA7XG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgcmVsYXRpdmUgdG8gd2hpY2ggdGVycmFpbiBpcyBleGFnZ2VyYXRlZC5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMC4wXG4gICAqL1xuICB0aGlzLnRlcnJhaW5FeGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCA9IDAuMDtcblxuICAvKipcbiAgICogQHR5cGVkZWYgRnJhbWVTdGF0ZS5TaGFkb3dTdGF0ZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNoYWRvd3NFbmFibGVkIFdoZXRoZXIgdGhlcmUgYXJlIGFueSBhY3RpdmUgc2hhZG93IG1hcHMgdGhpcyBmcmFtZS5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBsaWdodFNoYWRvd3NFbmFibGVkIFdoZXRoZXIgdGhlcmUgYXJlIGFueSBhY3RpdmUgc2hhZG93IG1hcHMgdGhhdCBvcmlnaW5hdGUgZnJvbSBsaWdodCBzb3VyY2VzLiBEb2VzIG5vdCBpbmNsdWRlIHNoYWRvdyBtYXBzIHRoYXQgYXJlIHVzZWQgZm9yIGFuYWx5dGljYWwgcHVycG9zZXMuXG4gICAqIEBwcm9wZXJ0eSB7U2hhZG93TWFwW119IHNoYWRvd01hcHMgQWxsIHNoYWRvdyBtYXBzIHRoYXQgYXJlIGVuYWJsZWQgdGhpcyBmcmFtZS5cbiAgICogQHByb3BlcnR5IHtTaGFkb3dNYXBbXX0gbGlnaHRTaGFkb3dNYXBzIFNoYWRvdyBtYXBzIHRoYXQgb3JpZ2luYXRlIGZyb20gbGlnaHQgc291cmNlcy4gRG9lcyBub3QgaW5jbHVkZSBzaGFkb3cgbWFwcyB0aGF0IGFyZSB1c2VkIGZvciBhbmFseXRpY2FsIHB1cnBvc2VzLiBPbmx5IHRoZXNlIHNoYWRvdyBtYXBzIHdpbGwgYmUgdXNlZCB0byBnZW5lcmF0ZSByZWNlaXZlIHNoYWRvd3Mgc2hhZGVycy5cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IG5lYXJQbGFuZSBUaGUgbmVhciBwbGFuZSBvZiB0aGUgc2NlbmUncyBmcnVzdHVtIGNvbW1hbmRzLiBVc2VkIGZvciBmaXR0aW5nIGNhc2NhZGVkIHNoYWRvdyBtYXBzLlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gZmFyUGxhbmUgVGhlIGZhciBwbGFuZSBvZiB0aGUgc2NlbmUncyBmcnVzdHVtIGNvbW1hbmRzLiBVc2VkIGZvciBmaXR0aW5nIGNhc2NhZGVkIHNoYWRvdyBtYXBzLlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gY2xvc2VzdE9iamVjdFNpemUgVGhlIHNpemUgb2YgdGhlIGJvdW5kaW5nIHZvbHVtZSB0aGF0IGlzIGNsb3Nlc3QgdG8gdGhlIGNhbWVyYS4gVGhpcyBpcyB1c2VkIHRvIHBsYWNlIG1vcmUgc2hhZG93IGRldGFpbCBuZWFyIHRoZSBvYmplY3QuXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsYXN0RGlydHlUaW1lIFRoZSB0aW1lIHdoZW4gYSBzaGFkb3cgbWFwIHdhcyBsYXN0IGRpcnR5XG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gb3V0T2ZWaWV3IFdoZXRoZXIgdGhlIHNoYWRvd3MgbWFwcyBhcmUgb3V0IG9mIHZpZXcgdGhpcyBmcmFtZVxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGUge0ZyYW1lU3RhdGUuU2hhZG93U3RhdGV9XG4gICAqL1xuXG4gIHRoaXMuc2hhZG93U3RhdGUgPSB7XG4gICAgLyoqXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHNoYWRvd3NFbmFibGVkOiB0cnVlLFxuICAgIHNoYWRvd01hcHM6IFtdLFxuICAgIGxpZ2h0U2hhZG93TWFwczogW10sXG4gICAgLyoqXG4gICAgICogQGRlZmF1bHQgMS4wXG4gICAgICovXG4gICAgbmVhclBsYW5lOiAxLjAsXG4gICAgLyoqXG4gICAgICogQGRlZmF1bHQgNTAwMC4wXG4gICAgICovXG4gICAgZmFyUGxhbmU6IDUwMDAuMCxcbiAgICAvKipcbiAgICAgKiBAZGVmYXVsdCAxMDAwLjBcbiAgICAgKi9cbiAgICBjbG9zZXN0T2JqZWN0U2l6ZTogMTAwMC4wLFxuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBsYXN0RGlydHlUaW1lOiAwLFxuICAgIC8qKlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBvdXRPZlZpZXc6IHRydWUsXG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgc3BsaXR0ZXIgdG8gdXNlIHdoZW4gcmVuZGVyaW5nIGltYWdlcnkgbGF5ZXJzIG9uIGVpdGhlciBzaWRlIG9mIGEgc3BsaXR0ZXIuXG4gICAqIFRoaXMgdmFsdWUgc2hvdWxkIGJlIGJldHdlZW4gMC4wIGFuZCAxLjAgd2l0aCAwIGJlaW5nIHRoZSBmYXIgbGVmdCBvZiB0aGUgdmlld3BvcnQgYW5kIDEgYmVpbmcgdGhlIGZhciByaWdodCBvZiB0aGUgdmlld3BvcnQuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDAuMFxuICAgKi9cbiAgdGhpcy5pbWFnZXJ5U3BsaXRQb3NpdGlvbiA9IDAuMDtcblxuICAvKipcbiAgICogRGlzdGFuY2VzIHRvIHRoZSBuZWFyIGFuZCBmYXIgcGxhbmVzIG9mIHRoZSBjYW1lcmEgZnJ1c3R1bXNcbiAgICogQHR5cGUge051bWJlcltdfVxuICAgKiBAZGVmYXVsdCBbXVxuICAgKi9cbiAgdGhpcy5mcnVzdHVtU3BsaXRzID0gW107XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNjZW5lIGJhY2tncm91bmQgY29sb3JcbiAgICpcbiAgICogQHR5cGUge0NvbG9yfVxuICAgKi9cbiAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBsaWdodCB1c2VkIHRvIHNoYWRlIHRoZSBzY2VuZS5cbiAgICpcbiAgICogQHR5cGUge0xpZ2h0fVxuICAgKi9cbiAgdGhpcy5saWdodCA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSBhdCB3aGljaCB0byBkaXNhYmxlIHRoZSBkZXB0aCB0ZXN0IG9mIGJpbGxib2FyZHMsIGxhYmVscyBhbmQgcG9pbnRzXG4gICAqIHRvLCBmb3IgZXhhbXBsZSwgcHJldmVudCBjbGlwcGluZyBhZ2FpbnN0IHRlcnJhaW4uIFdoZW4gc2V0IHRvIHplcm8sIHRoZSBkZXB0aCB0ZXN0IHNob3VsZCBhbHdheXNcbiAgICogYmUgYXBwbGllZC4gV2hlbiBsZXNzIHRoYW4gemVybywgdGhlIGRlcHRoIHRlc3Qgc2hvdWxkIG5ldmVyIGJlIGFwcGxpZWQuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLm1pbmltdW1EaXNhYmxlRGVwdGhUZXN0RGlzdGFuY2UgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFdoZW4gPGNvZGU+ZmFsc2U8L2NvZGU+LCAzRCBUaWxlcyB3aWxsIHJlbmRlciBub3JtYWxseS4gV2hlbiA8Y29kZT50cnVlPC9jb2RlPiwgY2xhc3NpZmllZCAzRCBUaWxlIGdlb21ldHJ5IHdpbGwgcmVuZGVyIG5vcm1hbGx5IGFuZFxuICAgKiB1bmNsYXNzaWZpZWQgM0QgVGlsZSBnZW9tZXRyeSB3aWxsIHJlbmRlciB3aXRoIHRoZSBjb2xvciBtdWx0aXBsaWVkIHdpdGgge0BsaW5rIEZyYW1lU3RhdGUjaW52ZXJ0Q2xhc3NpZmljYXRpb25Db2xvcn0uXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5pbnZlcnRDbGFzc2lmaWNhdGlvbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgaGlnaGxpZ2h0IGNvbG9yIG9mIHVuY2xhc3NpZmllZCAzRCBUaWxlIGdlb21ldHJ5IHdoZW4ge0BsaW5rIEZyYW1lU3RhdGUjaW52ZXJ0Q2xhc3NpZmljYXRpb259IGlzIDxjb2RlPnRydWU8L2NvZGU+LlxuICAgKiBAdHlwZSB7Q29sb3J9XG4gICAqL1xuICB0aGlzLmludmVydENsYXNzaWZpY2F0aW9uQ29sb3IgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSBzY2VuZSB1c2VzIGEgbG9nYXJpdGhtaWMgZGVwdGggYnVmZmVyLlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMudXNlTG9nRGVwdGggPSBmYWxzZTtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBzdGF0ZSB1c2VkIHRvIHVwZGF0ZSAzRCBUaWxlc2V0cy5cbiAgICpcbiAgICogQHR5cGUge0Nlc2l1bTNEVGlsZVBhc3NTdGF0ZX1cbiAgICovXG4gIHRoaXMudGlsZXNldFBhc3NTdGF0ZSA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIG1pbmltdW0gdGVycmFpbiBoZWlnaHQgb3V0IG9mIGFsbCByZW5kZXJlZCB0ZXJyYWluIHRpbGVzLiBVc2VkIHRvIGltcHJvdmUgY3VsbGluZyBmb3Igb2JqZWN0cyB1bmRlcm5lYXRoIHRoZSBlbGxpcHNvaWQgYnV0IGFib3ZlIHRlcnJhaW4uXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDAuMFxuICAgKi9cbiAgdGhpcy5taW5pbXVtVGVycmFpbkhlaWdodCA9IDAuMDtcbn1cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGUgZnJhbWUuXG4gKlxuICogQGNhbGxiYWNrIEZyYW1lU3RhdGUuQWZ0ZXJSZW5kZXJDYWxsYmFja1xuICovXG5leHBvcnQgZGVmYXVsdCBGcmFtZVN0YXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85079\n')}}]);