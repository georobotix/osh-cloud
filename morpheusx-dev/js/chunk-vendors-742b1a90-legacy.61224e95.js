"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[552],{6652:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ Implicit3DTileContent; }\n/* harmony export */ });\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8182);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(86511);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99417);\n/* harmony import */ var _Core_HilbertOrder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(67662);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(96190);\n/* harmony import */ var _Core_S2Cell_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(90791);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(13222);\n/* harmony import */ var _ImplicitSubtree_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(61800);\n/* harmony import */ var _ImplicitTileMetadata_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(46433);\n/* harmony import */ var _hasExtension_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(81326);\n/* harmony import */ var _parseBoundingVolumeSemantics_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(19661);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A specialized {@link Cesium3DTileContent} that lazily evaluates an implicit\n * tileset. It is somewhat similar in operation to a\n * {@link Tileset3DTileContent} in that once the content is constructed, it\n * updates the tileset tree with more tiles. However, unlike external tilesets,\n * child subtrees are represented as additional placeholder nodes with\n * Implicit3DTileContent.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Implicit3DTileContent\n * @constructor\n *\n * @param {Cesium3DTileset} tileset The tileset this content belongs to\n * @param {Cesium3DTile} tile The tile this content belongs to.\n * @param {Resource} resource The resource for the tileset\n * @param {ArrayBuffer} arrayBuffer The array buffer that stores the content payload\n * @param {Number} [byteOffset=0] The offset into the array buffer\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction Implicit3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("tile.implicitTileset", tile.implicitTileset);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("tile.implicitCoordinates", tile.implicitCoordinates);\n  //>>includeEnd(\'debug\');\n\n  var implicitTileset = tile.implicitTileset;\n  var implicitCoordinates = tile.implicitCoordinates;\n\n  this._implicitTileset = implicitTileset;\n  this._implicitCoordinates = implicitCoordinates;\n  this._implicitSubtree = undefined;\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].defer */ .Z.defer();\n\n  this.featurePropertiesDirty = false;\n  this._groupMetadata = undefined;\n\n  var templateValues = implicitCoordinates.getTemplateValues();\n  var subtreeResource = implicitTileset.subtreeUriTemplate.getDerivedResource({\n    templateValues: templateValues,\n  });\n  this._url = subtreeResource.getUrlComponent(true);\n\n  initialize(this, arrayBuffer, byteOffset);\n}\n\nObject.defineProperties(Implicit3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._url;\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  groupMetadata: {\n    get: function () {\n      return this._groupMetadata;\n    },\n    set: function (value) {\n      this._groupMetadata = value;\n    },\n  },\n});\n\n/**\n * Initialize the implicit content by parsing the subtree resource and setting\n * up a promise chain to expand the immediate subtree.\n *\n * @param {Implicit3DTileContent} content The implicit content\n * @param {ArrayBuffer} arrayBuffer The ArrayBuffer containing a subtree binary\n * @param {Number} [byteOffset=0] The byte offset into the arrayBuffer\n * @private\n */\nfunction initialize(content, arrayBuffer, byteOffset) {\n  // Parse the subtree file\n  byteOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(byteOffset, 0);\n  var uint8Array = new Uint8Array(arrayBuffer, byteOffset);\n  var subtree = new _ImplicitSubtree_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(\n    content._resource,\n    uint8Array,\n    content._implicitTileset,\n    content._implicitCoordinates\n  );\n  content._implicitSubtree = subtree;\n\n  subtree.readyPromise\n    .then(function () {\n      expandSubtree(content, subtree);\n      content._readyPromise.resolve();\n    })\n    .otherwise(function (error) {\n      content._readyPromise.reject(error);\n    });\n}\n\n/**\n * Expand a single subtree placeholder tile. This transcodes the subtree into\n * a tree of {@link Cesium3DTile}. The root of this tree is stored in\n * the placeholder tile\'s children array. This method also creates placeholder\n * tiles for the child subtrees to be lazily expanded as needed.\n *\n * @param {Implicit3DTileContent} content The content\n * @param {ImplicitSubtree} subtree The parsed subtree\n * @private\n */\nfunction expandSubtree(content, subtree) {\n  var placeholderTile = content._tile;\n\n  // Parse the tiles inside this immediate subtree\n  var childIndex = content._implicitCoordinates.childIndex;\n  var results = transcodeSubtreeTiles(\n    content,\n    subtree,\n    placeholderTile,\n    childIndex\n  );\n\n  // Link the new subtree to the existing placeholder tile.\n  placeholderTile.children.push(results.rootTile);\n\n  // for each child subtree, make new placeholder tiles\n  var childSubtrees = listChildSubtrees(content, subtree, results.bottomRow);\n  for (var i = 0; i < childSubtrees.length; i++) {\n    var subtreeLocator = childSubtrees[i];\n    var leafTile = subtreeLocator.tile;\n    var implicitChildTile = makePlaceholderChildSubtree(\n      content,\n      leafTile,\n      subtreeLocator.childIndex\n    );\n    leafTile.children.push(implicitChildTile);\n  }\n}\n\n/**\n * A pair of (tile, childIndex) used for finding child subtrees.\n *\n * @typedef {Object} ChildSubtreeLocator\n * @property {Cesium3DTile} tile One of the tiles in the bottommost row of the subtree.\n * @property {Number} childIndex The morton index of the child tile relative to its parent\n * @private\n */\n\n/**\n * Determine what child subtrees exist and return a list of information\n *\n * @param {Implicit3DTileContent} content The implicit content\n * @param {ImplicitSubtree} subtree The subtree for looking up availability\n * @param {Array<Cesium3DTile|undefined>} bottomRow The bottom row of tiles in a transcoded subtree\n * @returns {ChildSubtreeLocator[]} A list of identifiers for the child subtrees.\n * @private\n */\nfunction listChildSubtrees(content, subtree, bottomRow) {\n  var results = [];\n  var branchingFactor = content._implicitTileset.branchingFactor;\n  for (var i = 0; i < bottomRow.length; i++) {\n    var leafTile = bottomRow[i];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(leafTile)) {\n      continue;\n    }\n\n    for (var j = 0; j < branchingFactor; j++) {\n      var index = i * branchingFactor + j;\n      if (subtree.childSubtreeIsAvailableAtIndex(index)) {\n        results.push({\n          tile: leafTile,\n          childIndex: j,\n        });\n      }\n    }\n  }\n  return results;\n}\n\n/**\n * Results of transcodeSubtreeTiles, containing the root tile of the\n * subtree and the bottom row of nodes for further processing.\n *\n * @typedef {Object} TranscodedSubtree\n * @property {Cesium3DTile} rootTile The transcoded root tile of the subtree\n * @property {Array<Cesium3DTile|undefined>} bottomRow The bottom row of transcoded tiles. This is helpful for processing child subtrees\n * @private\n */\n\n/**\n * Transcode the implicitly-defined tiles within this subtree and generate\n * explicit {@link Cesium3DTile} objects. This function only transcode tiles,\n * child subtrees are handled separately.\n *\n * @param {Implicit3DTileContent} content The implicit content\n * @param {ImplicitSubtree} subtree The subtree to get availability information\n * @param {Cesium3DTile} placeholderTile The placeholder tile, used for constructing the subtree root tile\n * @param {Number} childIndex The Morton index of the root tile relative to parentOfRootTile\n * @returns {TranscodedSubtree} The newly created subtree of tiles\n * @private\n */\nfunction transcodeSubtreeTiles(content, subtree, placeholderTile, childIndex) {\n  var rootBitIndex = 0;\n  var rootParentIsPlaceholder = true;\n  var rootTile = deriveChildTile(\n    content,\n    subtree,\n    placeholderTile,\n    childIndex,\n    rootBitIndex,\n    rootParentIsPlaceholder\n  );\n\n  // Sliding window over the levels of the tree.\n  // Each row is branchingFactor * length of previous row\n  // Tiles within a row are ordered by Morton index.\n  var parentRow = [rootTile];\n  var currentRow = [];\n\n  var implicitTileset = content._implicitTileset;\n  for (var level = 1; level < implicitTileset.subtreeLevels; level++) {\n    var levelOffset = subtree.getLevelOffset(level);\n    var numberOfChildren = implicitTileset.branchingFactor * parentRow.length;\n    for (\n      var childMortonIndex = 0;\n      childMortonIndex < numberOfChildren;\n      childMortonIndex++\n    ) {\n      var childBitIndex = levelOffset + childMortonIndex;\n\n      if (!subtree.tileIsAvailableAtIndex(childBitIndex)) {\n        currentRow.push(undefined);\n        continue;\n      }\n\n      var parentMortonIndex = subtree.getParentMortonIndex(childMortonIndex);\n      var parentTile = parentRow[parentMortonIndex];\n      var childChildIndex = childMortonIndex % implicitTileset.branchingFactor;\n      var childTile = deriveChildTile(\n        content,\n        subtree,\n        parentTile,\n        childChildIndex,\n        childBitIndex\n      );\n      parentTile.children.push(childTile);\n      currentRow.push(childTile);\n    }\n\n    parentRow = currentRow;\n    currentRow = [];\n  }\n\n  return {\n    rootTile: rootTile,\n    // At the end of the last loop, bottomRow was moved to parentRow\n    bottomRow: parentRow,\n  };\n}\n\n/**\n * Given a parent tile and information about which child to create, derive\n * the properties of the child tile implicitly.\n * <p>\n * This creates a real tile for rendering, not a placeholder tile like some of\n * the other methods of ImplicitTileset.\n * </p>\n *\n * @param {Implicit3DTileContent} implicitContent The implicit content\n * @param {ImplicitSubtree} subtree The subtree the child tile belongs to\n * @param {Cesium3DTile} parentTile The parent of the new child tile\n * @param {Number} childIndex The morton index of the child tile relative to its parent\n * @param {Number} childBitIndex The index of the child tile within the tile\'s availability information.\n * @param {Boolean} [parentIsPlaceholderTile=false] True if parentTile is a placeholder tile. This is true for the root of each subtree.\n * @returns {Cesium3DTile} The new child tile.\n * @private\n */\nfunction deriveChildTile(\n  implicitContent,\n  subtree,\n  parentTile,\n  childIndex,\n  childBitIndex,\n  parentIsPlaceholderTile\n) {\n  var implicitTileset = implicitContent._implicitTileset;\n  var implicitCoordinates;\n  if ((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(parentIsPlaceholderTile, false)) {\n    implicitCoordinates = parentTile.implicitCoordinates;\n  } else {\n    implicitCoordinates = parentTile.implicitCoordinates.getChildCoordinates(\n      childIndex\n    );\n  }\n\n  // Parse metadata and bounding volume semantics at the beginning\n  // as the bounding volumes are needed below.\n  var tileMetadata;\n  var tileBounds;\n  var contentBounds;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(subtree.metadataExtension)) {\n    var metadataTable = subtree.metadataTable;\n    tileMetadata = new _ImplicitTileMetadata_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n      class: metadataTable.class,\n      implicitCoordinates: implicitCoordinates,\n      implicitSubtree: subtree,\n    });\n\n    var boundingVolumeSemantics = (0,_parseBoundingVolumeSemantics_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(tileMetadata);\n    tileBounds = boundingVolumeSemantics.tile;\n    contentBounds = boundingVolumeSemantics.content;\n  }\n\n  var contentJsons = [];\n  for (var i = 0; i < implicitTileset.contentCount; i++) {\n    if (!subtree.contentIsAvailableAtIndex(childBitIndex, i)) {\n      continue;\n    }\n    var childContentTemplate = implicitTileset.contentUriTemplates[i];\n    var childContentUri = childContentTemplate.getDerivedResource({\n      templateValues: implicitCoordinates.getTemplateValues(),\n    }).url;\n    var contentJson = {\n      uri: childContentUri,\n    };\n\n    // content bounding volumes can only be specified via\n    // metadata semantics such as CONTENT_BOUNDING_BOX\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(contentBounds) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(contentBounds.boundingVolume)) {\n      contentJson.boundingVolume = contentBounds.boundingVolume;\n    }\n\n    // combine() is used to pass through any additional properties the\n    // user specified such as extras or extensions\n    contentJsons.push((0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(contentJson, implicitTileset.contentHeaders[i]));\n  }\n\n  var boundingVolume;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(tileBounds) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(tileBounds.boundingVolume)) {\n    boundingVolume = tileBounds.boundingVolume;\n  } else {\n    boundingVolume = deriveBoundingVolume(\n      implicitTileset,\n      implicitCoordinates,\n      childIndex,\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(parentIsPlaceholderTile, false),\n      parentTile\n    );\n\n    // The TILE_MINIMUM_HEIGHT and TILE_MAXIMUM_HEIGHT metadata semantics\n    // can be used to tighten the bounding volume\n    if (\n      (0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(boundingVolume, "3DTILES_bounding_volume_S2") &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(tileBounds)\n    ) {\n      updateS2CellHeights(\n        boundingVolume.extensions["3DTILES_bounding_volume_S2"],\n        tileBounds.minimumHeight,\n        tileBounds.maximumHeight\n      );\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(boundingVolume.region) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(tileBounds)) {\n      updateRegionHeights(\n        boundingVolume.region,\n        tileBounds.minimumHeight,\n        tileBounds.maximumHeight\n      );\n    }\n  }\n\n  var childGeometricError =\n    implicitTileset.geometricError / Math.pow(2, implicitCoordinates.level);\n\n  var tileJson = {\n    boundingVolume: boundingVolume,\n    geometricError: childGeometricError,\n    refine: implicitTileset.refine,\n  };\n\n  if (contentJsons.length === 1) {\n    tileJson.content = contentJsons[0];\n  } else if (contentJsons.length > 1) {\n    tileJson.extensions = {\n      "3DTILES_multiple_contents": {\n        content: contentJsons,\n      },\n    };\n  }\n\n  var deep = true;\n  var childTile = makeTile(\n    implicitContent,\n    implicitTileset.baseResource,\n    // combine() is used to pass through any additional properties the\n    // user specified such as extras or extensions\n    (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(tileJson, implicitTileset.tileHeader, deep),\n    parentTile\n  );\n  childTile.implicitCoordinates = implicitCoordinates;\n  childTile.implicitSubtree = subtree;\n  childTile.metadata = tileMetadata;\n\n  return childTile;\n}\n\n/**\n * For a derived bounding region, update the minimum and maximum height. This\n * is typically used to tighten a bounding volume using the\n * <code>TILE_MINIMUM_HEIGHT</code> and <code>TILE_MAXIMUM_HEIGHT</code>\n * semantics. Heights are only updated if the respective\n * minimumHeight/maximumHeight parameter is defined.\n *\n * @param {Array} region A 6-element array describing the bounding region\n * @param {Number} [minimumHeight] The new minimum height\n * @param {Number} [maximumHeight] The new maximum height\n * @private\n */\nfunction updateRegionHeights(region, minimumHeight, maximumHeight) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(minimumHeight)) {\n    region[4] = minimumHeight;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(maximumHeight)) {\n    region[5] = maximumHeight;\n  }\n}\n\n/**\n * For a derived bounding S2 cell, update the minimum and maximum height. This\n * is typically used to tighten a bounding volume using the\n * <code>TILE_MINIMUM_HEIGHT</code> and <code>TILE_MAXIMUM_HEIGHT</code>\n * semantics. Heights are only updated if the respective\n * minimumHeight/maximumHeight parameter is defined.\n *\n * @param {Array} region A 6-element array describing the bounding region\n * @param {Number} [minimumHeight] The new minimum height\n * @param {Number} [maximumHeight] The new maximum height\n * @private\n */\nfunction updateS2CellHeights(s2CellVolume, minimumHeight, maximumHeight) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(minimumHeight)) {\n    s2CellVolume.minimumHeight = minimumHeight;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(maximumHeight)) {\n    s2CellVolume.maximumHeight = maximumHeight;\n  }\n}\n\n/**\n * Given the coordinates of a tile, derive its bounding volume from the root.\n *\n * @param {ImplicitTileset} implicitTileset The implicit tileset struct which holds the root bounding volume\n * @param {ImplicitTileCoordinates} implicitCoordinates The coordinates of the child tile\n * @param {Number} childIndex The morton index of the child tile relative to its parent\n * @param {Boolean} parentIsPlaceholderTile True if parentTile is a placeholder tile. This is true for the root of each subtree.\n * @param {Cesium3DTile} parentTile The parent of the new child tile\n * @returns {Object} An object containing the JSON for a bounding volume\n * @private\n */\nfunction deriveBoundingVolume(\n  implicitTileset,\n  implicitCoordinates,\n  childIndex,\n  parentIsPlaceholderTile,\n  parentTile\n) {\n  var rootBoundingVolume = implicitTileset.boundingVolume;\n\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(rootBoundingVolume, "3DTILES_bounding_volume_S2")) {\n    return deriveBoundingVolumeS2(\n      parentIsPlaceholderTile,\n      parentTile,\n      childIndex,\n      implicitCoordinates.level,\n      implicitCoordinates.x,\n      implicitCoordinates.y,\n      implicitCoordinates.z\n    );\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(rootBoundingVolume.region)) {\n    var childRegion = deriveBoundingRegion(\n      rootBoundingVolume.region,\n      implicitCoordinates.level,\n      implicitCoordinates.x,\n      implicitCoordinates.y,\n      implicitCoordinates.z\n    );\n\n    return {\n      region: childRegion,\n    };\n  }\n\n  var childBox = deriveBoundingBox(\n    rootBoundingVolume.box,\n    implicitCoordinates.level,\n    implicitCoordinates.x,\n    implicitCoordinates.y,\n    implicitCoordinates.z\n  );\n\n  return {\n    box: childBox,\n  };\n}\n\n/**\n * Derive a bounding volume for a descendant tile (child, grandchild, etc.),\n * assuming a quadtree or octree implicit tiling scheme. The (level, x, y, [z])\n * coordinates are given to select the descendant tile and compute its position\n * and dimensions.\n * <p>\n * If z is present, octree subdivision is used. Otherwise, quadtree subdivision\n * is used. Quadtrees are always divided at the midpoint of the the horizontal\n * dimensions, i.e. (x, y), leaving the z axis unchanged.\n * </p>\n *\n * @param {Boolean} parentIsPlaceholderTile True if parentTile is a placeholder tile. This is true for the root of each subtree.\n * @param {Cesium3DTile} parentTile The parent of the new child tile\n * @param {Number} childIndex The morton index of the child tile relative to its parent\n * @param {Number} level The level of the descendant tile relative to the root implicit tile\n * @param {Number} x The x coordinate of the descendant tile\n * @param {Number} y The y coordinate of the descendant tile\n * @param {Number} [z] The z coordinate of the descendant tile (octree only)\n * @returns {Object} An object with the 3DTILES_bounding_volume_S2 extension.\n * @private\n */\nfunction deriveBoundingVolumeS2(\n  parentIsPlaceholderTile,\n  parentTile,\n  childIndex,\n  level,\n  x,\n  y,\n  z\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.bool */ .Z.typeOf.bool("parentIsPlaceholderTile", parentIsPlaceholderTile);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("parentTile", parentTile);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("childIndex", childIndex);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("level", level);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("x", x);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("y", y);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(z)) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("z", z);\n  }\n  //>>includeEnd(\'debug\');\n\n  var boundingVolumeS2 = parentTile._boundingVolume;\n\n  // Handle the placeholder tile case, where we just duplicate the placeholder\'s bounding volume.\n  if (parentIsPlaceholderTile) {\n    return {\n      extensions: {\n        "3DTILES_bounding_volume_S2": {\n          token: _Core_S2Cell_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].getTokenFromId */ .Z.getTokenFromId(boundingVolumeS2.s2Cell._cellId),\n          minimumHeight: boundingVolumeS2.minimumHeight,\n          maximumHeight: boundingVolumeS2.maximumHeight,\n        },\n      },\n    };\n  }\n\n  // Extract the first 3 face bits from the 64-bit S2 cell ID.\n  // eslint-disable-next-line\n  var face = Number(parentTile._boundingVolume.s2Cell._cellId >> BigInt(61));\n  // The Hilbert curve is rotated for the "odd" faces on the S2 Earthcube.\n  // See http://s2geometry.io/devguide/img/s2cell_global.jpg\n  var position =\n    face % 2 === 0\n      ? _Core_HilbertOrder_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].encode2D */ .Z.encode2D(level, x, y)\n      : _Core_HilbertOrder_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].encode2D */ .Z.encode2D(level, y, x);\n  // eslint-disable-next-line\n  var cell = _Core_S2Cell_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].fromFacePositionLevel */ .Z.fromFacePositionLevel(face, BigInt(position), level);\n\n  var minHeight, maxHeight;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(z)) {\n    var midpointHeight =\n      (boundingVolumeS2.maximumHeight + boundingVolumeS2.minimumHeight) / 2;\n    minHeight =\n      childIndex < 4 ? boundingVolumeS2.minimumHeight : midpointHeight;\n    maxHeight =\n      childIndex < 4 ? midpointHeight : boundingVolumeS2.maximumHeight;\n  } else {\n    minHeight = boundingVolumeS2.minimumHeight;\n    maxHeight = boundingVolumeS2.maximumHeight;\n  }\n\n  return {\n    extensions: {\n      "3DTILES_bounding_volume_S2": {\n        token: _Core_S2Cell_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].getTokenFromId */ .Z.getTokenFromId(cell._cellId),\n        minimumHeight: minHeight,\n        maximumHeight: maxHeight,\n      },\n    },\n  };\n}\n\nvar scratchScaleFactors = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchRootCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchHalfAxes = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\n/**\n * Derive a bounding volume for a descendant tile (child, grandchild, etc.),\n * assuming a quadtree or octree implicit tiling scheme. The (level, x, y, [z])\n * coordinates are given to select the descendant tile and compute its position\n * and dimensions.\n * <p>\n * If z is present, octree subdivision is used. Otherwise, quadtree subdivision\n * is used. Quadtrees are always divided at the midpoint of the the horizontal\n * dimensions, i.e. (x, y), leaving the z axis unchanged.\n * </p>\n * <p>\n * This computes the child volume directly from the root bounding volume rather\n * than recursively subdividing to minimize floating point error.\n * </p>\n *\n * @param {Number[]} rootBox An array of 12 numbers representing the bounding box of the root tile\n * @param {Number} level The level of the descendant tile relative to the root implicit tile\n * @param {Number} x The x coordinate of the descendant tile\n * @param {Number} y The y coordinate of the descendant tile\n * @param {Number} [z] The z coordinate of the descendant tile (octree only)\n * @returns {Number[]} An array of 12 numbers representing the bounding box of the descendant tile.\n * @private\n */\nfunction deriveBoundingBox(rootBox, level, x, y, z) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("rootBox", rootBox);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("level", level);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("x", x);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("y", y);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(z)) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("z", z);\n  }\n  //>>includeEnd(\'debug\');\n\n  if (level === 0) {\n    return rootBox;\n  }\n\n  var rootCenter = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].unpack */ .Z.unpack(rootBox, 0, scratchRootCenter);\n  var rootHalfAxes = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].unpack */ .Z.unpack(rootBox, 3, scratchHalfAxes);\n\n  var tileScale = Math.pow(2, -level);\n  var modelSpaceX = -1 + (2 * x + 1) * tileScale;\n  var modelSpaceY = -1 + (2 * y + 1) * tileScale;\n\n  var modelSpaceZ = 0;\n  var scaleFactors = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromElements */ .Z.fromElements(\n    tileScale,\n    tileScale,\n    1,\n    scratchScaleFactors\n  );\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(z)) {\n    modelSpaceZ = -1 + (2 * z + 1) * tileScale;\n    scaleFactors.z = tileScale;\n  }\n\n  var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromElements */ .Z.fromElements(\n    modelSpaceX,\n    modelSpaceY,\n    modelSpaceZ,\n    scratchCenter\n  );\n  center = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].multiplyByVector */ .Z.multiplyByVector(rootHalfAxes, center, scratchCenter);\n  center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(center, rootCenter, scratchCenter);\n\n  var halfAxes = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(rootHalfAxes);\n  halfAxes = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].multiplyByScale */ .Z.multiplyByScale(halfAxes, scaleFactors, halfAxes);\n\n  var childBox = new Array(12);\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].pack */ .Z.pack(center, childBox);\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].pack */ .Z.pack(halfAxes, childBox, 3);\n  return childBox;\n}\n\nvar scratchRectangle = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z();\n/**\n * Derive a bounding volume for a descendant tile (child, grandchild, etc.),\n * assuming a quadtree or octree implicit tiling scheme. The (level, x, y, [z])\n * coordinates are given to select the descendant tile and compute its position\n * and dimensions.\n * <p>\n * If z is present, octree subdivision is used. Otherwise, quadtree subdivision\n * is used. Quadtrees are always divided at the midpoint of the the horizontal\n * dimensions, i.e. (mid_longitude, mid_latitude), leaving the height values\n * unchanged.\n * </p>\n * <p>\n * This computes the child volume directly from the root bounding volume rather\n * than recursively subdividing to minimize floating point error.\n * </p>\n * @param {Number[]} rootRegion An array of 6 numbers representing the root implicit tile\n * @param {Number} level The level of the descendant tile relative to the root implicit tile\n * @param {Number} x The x coordinate of the descendant tile\n * @param {Number} y The x coordinate of the descendant tile\n * @param {Number} [z] The z coordinate of the descendant tile (octree only)\n * @returns {Number[]} An array of 6 numbers representing the bounding region of the descendant tile\n * @private\n */\nfunction deriveBoundingRegion(rootRegion, level, x, y, z) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("rootRegion", rootRegion);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("level", level);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("x", x);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("y", y);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(z)) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("z", z);\n  }\n  //>>includeEnd(\'debug\');\n\n  if (level === 0) {\n    return rootRegion.slice();\n  }\n\n  var rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].unpack */ .Z.unpack(rootRegion, 0, scratchRectangle);\n  var rootMinimumHeight = rootRegion[4];\n  var rootMaximumHeight = rootRegion[5];\n  var tileScale = Math.pow(2, -level);\n\n  var childWidth = tileScale * rectangle.width;\n  var west = _Core_Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].negativePiToPi */ .Z.negativePiToPi(rectangle.west + x * childWidth);\n  var east = _Core_Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].negativePiToPi */ .Z.negativePiToPi(west + childWidth);\n\n  var childHeight = tileScale * rectangle.height;\n  var south = _Core_Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].negativePiToPi */ .Z.negativePiToPi(rectangle.south + y * childHeight);\n  var north = _Core_Math_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].negativePiToPi */ .Z.negativePiToPi(south + childHeight);\n\n  // Height is only subdivided for octrees; It remains constant for quadtrees.\n  var minimumHeight = rootMinimumHeight;\n  var maximumHeight = rootMaximumHeight;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(z)) {\n    var childThickness = tileScale * (rootMaximumHeight - rootMinimumHeight);\n    minimumHeight += z * childThickness;\n    maximumHeight = minimumHeight + childThickness;\n  }\n\n  return [west, south, east, north, minimumHeight, maximumHeight];\n}\n\n/**\n * Create a placeholder 3D Tile whose content will be an Implicit3DTileContent\n * for lazy evaluation of a child subtree.\n *\n * @param {Implicit3DTileContent} content The content object.\n * @param {Cesium3DTile} parentTile The parent of the new child subtree.\n * @param {Number} childIndex The morton index of the child tile relative to its parent\n * @returns {Cesium3DTile} The new placeholder tile\n * @private\n */\nfunction makePlaceholderChildSubtree(content, parentTile, childIndex) {\n  var implicitTileset = content._implicitTileset;\n  var implicitCoordinates = parentTile.implicitCoordinates.getChildCoordinates(\n    childIndex\n  );\n\n  var childBoundingVolume = deriveBoundingVolume(\n    implicitTileset,\n    implicitCoordinates,\n    childIndex,\n    false,\n    parentTile\n  );\n  var childGeometricError =\n    implicitTileset.geometricError / Math.pow(2, implicitCoordinates.level);\n  var childContentUri = implicitTileset.subtreeUriTemplate.getDerivedResource({\n    templateValues: implicitCoordinates.getTemplateValues(),\n  }).url;\n  var tileJson = {\n    boundingVolume: childBoundingVolume,\n    geometricError: childGeometricError,\n    refine: implicitTileset.refine,\n    content: {\n      uri: childContentUri,\n    },\n  };\n\n  var tile = makeTile(\n    content,\n    implicitTileset.baseResource,\n    tileJson,\n    parentTile\n  );\n  tile.implicitTileset = implicitTileset;\n  tile.implicitCoordinates = implicitCoordinates;\n  return tile;\n}\n\n/**\n * Make a {@link Cesium3DTile}. This uses the content\'s tile\'s constructor instead\n * of importing Cesium3DTile. This is to avoid a circular dependency between\n * this file and Cesium3DTile.js\n * @param {Implicit3DTileContent} content The implicit content\n * @param {Resource} baseResource The base resource for the tileset\n * @param {Object} tileJson The JSON header for the tile\n * @param {Cesium3DTile} parentTile The parent of the new tile\n * @returns {Cesium3DTile} The newly created tile.\n * @private\n */\nfunction makeTile(content, baseResource, tileJson, parentTile) {\n  var Cesium3DTile = content._tile.constructor;\n  return new Cesium3DTile(content._tileset, baseResource, tileJson, parentTile);\n}\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Implicit3DTileContent</code>\n * always returns <code>false</code> since a tile of this type does not have any features.\n * @private\n */\nImplicit3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return false;\n};\n\n/**\n * Part of the {@link Cesium3DTileContent} interface.  <code>Implicit3DTileContent</code>\n * always returns <code>undefined</code> since a tile of this type does not have any features.\n * @private\n */\nImplicit3DTileContent.prototype.getFeature = function (batchId) {\n  return undefined;\n};\n\nImplicit3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {};\n\nImplicit3DTileContent.prototype.applyStyle = function (style) {};\n\nImplicit3DTileContent.prototype.update = function (tileset, frameState) {};\n\nImplicit3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nImplicit3DTileContent.prototype.destroy = function () {\n  this._implicitSubtree =\n    this._implicitSubtree && this._implicitSubtree.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this);\n};\n\n// Exposed for testing\nImplicit3DTileContent._deriveBoundingBox = deriveBoundingBox;\nImplicit3DTileContent._deriveBoundingRegion = deriveBoundingRegion;\nImplicit3DTileContent._deriveBoundingVolumeS2 = deriveBoundingVolumeS2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6652\n')},53474:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ImplicitAvailabilityBitstream; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9407);\n\n\n\n\n\n\n/**\n * An availability bitstream for use in an {@link ImplicitSubtree}. This handles\n * both Uint8Array bitstreams and constant values.\n *\n * @alias ImplicitAvailabilityBitstream\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Number} options.lengthBits The length of the bitstream in bits\n * @param {Boolean} [options.constant] A single boolean value indicating the value of all the bits in the bitstream if they are all the same\n * @param {Uint8Array} [options.bitstream] An array of bytes storing the bitstream in binary\n * @param {Number} [options.availableCount] A number indicating how many 1 bits are found in the bitstream\n * @param {Boolean} [options.computeAvailableCountEnabled=false] If true, and options.availableCount is undefined, the availableCount will be computed from the bitstream.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction ImplicitAvailabilityBitstream(options) {\n  var lengthBits = options.lengthBits;\n  var availableCount = options.availableCount;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.lengthBits", lengthBits);\n  //>>includeEnd(\'debug\');\n\n  var constant = options.constant;\n  var bitstream = options.bitstream;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(constant)) {\n    // if defined, constant must be 1 which means all tiles are available\n    availableCount = lengthBits;\n  } else {\n    var expectedLength = Math.ceil(lengthBits / 8);\n    if (bitstream.length !== expectedLength) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        "Availability bitstream must be exactly " +\n          expectedLength +\n          " bytes long to store " +\n          lengthBits +\n          " bits. Actual bitstream was " +\n          bitstream.length +\n          " bytes long."\n      );\n    }\n\n    // Only compute the available count if requested, as this involves looping\n    // over the bitstream.\n    var computeAvailableCountEnabled = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n      options.computeAvailableCountEnabled,\n      false\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(availableCount) && computeAvailableCountEnabled) {\n      availableCount = count1Bits(bitstream, lengthBits);\n    }\n  }\n\n  this._lengthBits = lengthBits;\n  this._availableCount = availableCount;\n  this._constant = constant;\n  this._bitstream = bitstream;\n}\n\n/**\n * Count the number of bits with value 1 in the bitstream. This is used for\n * computing availableCount if not precomputed\n *\n * @param {Uint8Array} bitstream The bitstream typed array\n * @param {Number} lengthBits How many bits are in the bitstream\n * @private\n */\nfunction count1Bits(bitstream, lengthBits) {\n  var count = 0;\n  for (var i = 0; i < lengthBits; i++) {\n    var byteIndex = i >> 3;\n    var bitIndex = i % 8;\n    count += (bitstream[byteIndex] >> bitIndex) & 1;\n  }\n  return count;\n}\n\nObject.defineProperties(ImplicitAvailabilityBitstream.prototype, {\n  /**\n   * The length of the bitstream in bits.\n   *\n   * @memberof ImplicitAvailabilityBitstream.prototype\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  lengthBits: {\n    get: function () {\n      return this._lengthBits;\n    },\n  },\n  /**\n   * The number of bits in the bitstream with value <code>1</code>.\n   *\n   * @memberof ImplicitAvailabilityBitstream.prototype\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  availableCount: {\n    get: function () {\n      return this._availableCount;\n    },\n  },\n});\n\n/**\n * Get a bit from the availability bitstream as a Boolean. If the bitstream\n * is a constant, the constant value is returned instead.\n *\n * @param {Number} index The integer index of the bit.\n * @returns {Boolean} The value of the bit\n * @private\n */\nImplicitAvailabilityBitstream.prototype.getBit = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (index < 0 || index >= this._lengthBits) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("Bit index out of bounds.");\n  }\n  //>>includeEnd(\'debug\');\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this._constant)) {\n    return this._constant;\n  }\n\n  // byteIndex is floor(index / 8)\n  var byteIndex = index >> 3;\n  var bitIndex = index % 8;\n\n  return ((this._bitstream[byteIndex] >> bitIndex) & 1) === 1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM0NzQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUM7QUFDSTtBQUNVO0FBQ0k7QUFDSjs7QUFFbkQ7QUFDQSw0Q0FBNEMsc0JBQXNCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixXQUFXLFlBQVk7QUFDdkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQSxFQUFFLDJGQUFtQjtBQUNyQjs7QUFFQTtBQUNBOztBQUVBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQkFBZ0Isc0VBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUMsMEVBQVk7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUyxxRUFBTztBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0VBQWM7QUFDNUI7QUFDQTs7QUFFQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9JbXBsaWNpdEF2YWlsYWJpbGl0eUJpdHN0cmVhbS5qcz81MTQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGVjayBmcm9tIFwiLi4vQ29yZS9DaGVjay5qc1wiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vQ29yZS9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuaW1wb3J0IFJ1bnRpbWVFcnJvciBmcm9tIFwiLi4vQ29yZS9SdW50aW1lRXJyb3IuanNcIjtcblxuLyoqXG4gKiBBbiBhdmFpbGFiaWxpdHkgYml0c3RyZWFtIGZvciB1c2UgaW4gYW4ge0BsaW5rIEltcGxpY2l0U3VidHJlZX0uIFRoaXMgaGFuZGxlc1xuICogYm90aCBVaW50OEFycmF5IGJpdHN0cmVhbXMgYW5kIGNvbnN0YW50IHZhbHVlcy5cbiAqXG4gKiBAYWxpYXMgSW1wbGljaXRBdmFpbGFiaWxpdHlCaXRzdHJlYW1cbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmxlbmd0aEJpdHMgVGhlIGxlbmd0aCBvZiB0aGUgYml0c3RyZWFtIGluIGJpdHNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuY29uc3RhbnRdIEEgc2luZ2xlIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB0aGUgdmFsdWUgb2YgYWxsIHRoZSBiaXRzIGluIHRoZSBiaXRzdHJlYW0gaWYgdGhleSBhcmUgYWxsIHRoZSBzYW1lXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IFtvcHRpb25zLmJpdHN0cmVhbV0gQW4gYXJyYXkgb2YgYnl0ZXMgc3RvcmluZyB0aGUgYml0c3RyZWFtIGluIGJpbmFyeVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmF2YWlsYWJsZUNvdW50XSBBIG51bWJlciBpbmRpY2F0aW5nIGhvdyBtYW55IDEgYml0cyBhcmUgZm91bmQgaW4gdGhlIGJpdHN0cmVhbVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jb21wdXRlQXZhaWxhYmxlQ291bnRFbmFibGVkPWZhbHNlXSBJZiB0cnVlLCBhbmQgb3B0aW9ucy5hdmFpbGFibGVDb3VudCBpcyB1bmRlZmluZWQsIHRoZSBhdmFpbGFibGVDb3VudCB3aWxsIGJlIGNvbXB1dGVkIGZyb20gdGhlIGJpdHN0cmVhbS5cbiAqIEBwcml2YXRlXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW1wbGljaXRBdmFpbGFiaWxpdHlCaXRzdHJlYW0ob3B0aW9ucykge1xuICB2YXIgbGVuZ3RoQml0cyA9IG9wdGlvbnMubGVuZ3RoQml0cztcbiAgdmFyIGF2YWlsYWJsZUNvdW50ID0gb3B0aW9ucy5hdmFpbGFibGVDb3VudDtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2YubnVtYmVyKFwib3B0aW9ucy5sZW5ndGhCaXRzXCIsIGxlbmd0aEJpdHMpO1xuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB2YXIgY29uc3RhbnQgPSBvcHRpb25zLmNvbnN0YW50O1xuICB2YXIgYml0c3RyZWFtID0gb3B0aW9ucy5iaXRzdHJlYW07XG5cbiAgaWYgKGRlZmluZWQoY29uc3RhbnQpKSB7XG4gICAgLy8gaWYgZGVmaW5lZCwgY29uc3RhbnQgbXVzdCBiZSAxIHdoaWNoIG1lYW5zIGFsbCB0aWxlcyBhcmUgYXZhaWxhYmxlXG4gICAgYXZhaWxhYmxlQ291bnQgPSBsZW5ndGhCaXRzO1xuICB9IGVsc2Uge1xuICAgIHZhciBleHBlY3RlZExlbmd0aCA9IE1hdGguY2VpbChsZW5ndGhCaXRzIC8gOCk7XG4gICAgaWYgKGJpdHN0cmVhbS5sZW5ndGggIT09IGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICAgICAgICBcIkF2YWlsYWJpbGl0eSBiaXRzdHJlYW0gbXVzdCBiZSBleGFjdGx5IFwiICtcbiAgICAgICAgICBleHBlY3RlZExlbmd0aCArXG4gICAgICAgICAgXCIgYnl0ZXMgbG9uZyB0byBzdG9yZSBcIiArXG4gICAgICAgICAgbGVuZ3RoQml0cyArXG4gICAgICAgICAgXCIgYml0cy4gQWN0dWFsIGJpdHN0cmVhbSB3YXMgXCIgK1xuICAgICAgICAgIGJpdHN0cmVhbS5sZW5ndGggK1xuICAgICAgICAgIFwiIGJ5dGVzIGxvbmcuXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gT25seSBjb21wdXRlIHRoZSBhdmFpbGFibGUgY291bnQgaWYgcmVxdWVzdGVkLCBhcyB0aGlzIGludm9sdmVzIGxvb3BpbmdcbiAgICAvLyBvdmVyIHRoZSBiaXRzdHJlYW0uXG4gICAgdmFyIGNvbXB1dGVBdmFpbGFibGVDb3VudEVuYWJsZWQgPSBkZWZhdWx0VmFsdWUoXG4gICAgICBvcHRpb25zLmNvbXB1dGVBdmFpbGFibGVDb3VudEVuYWJsZWQsXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgaWYgKCFkZWZpbmVkKGF2YWlsYWJsZUNvdW50KSAmJiBjb21wdXRlQXZhaWxhYmxlQ291bnRFbmFibGVkKSB7XG4gICAgICBhdmFpbGFibGVDb3VudCA9IGNvdW50MUJpdHMoYml0c3RyZWFtLCBsZW5ndGhCaXRzKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9sZW5ndGhCaXRzID0gbGVuZ3RoQml0cztcbiAgdGhpcy5fYXZhaWxhYmxlQ291bnQgPSBhdmFpbGFibGVDb3VudDtcbiAgdGhpcy5fY29uc3RhbnQgPSBjb25zdGFudDtcbiAgdGhpcy5fYml0c3RyZWFtID0gYml0c3RyZWFtO1xufVxuXG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgYml0cyB3aXRoIHZhbHVlIDEgaW4gdGhlIGJpdHN0cmVhbS4gVGhpcyBpcyB1c2VkIGZvclxuICogY29tcHV0aW5nIGF2YWlsYWJsZUNvdW50IGlmIG5vdCBwcmVjb21wdXRlZFxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYml0c3RyZWFtIFRoZSBiaXRzdHJlYW0gdHlwZWQgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGhCaXRzIEhvdyBtYW55IGJpdHMgYXJlIGluIHRoZSBiaXRzdHJlYW1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvdW50MUJpdHMoYml0c3RyZWFtLCBsZW5ndGhCaXRzKSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoQml0czsgaSsrKSB7XG4gICAgdmFyIGJ5dGVJbmRleCA9IGkgPj4gMztcbiAgICB2YXIgYml0SW5kZXggPSBpICUgODtcbiAgICBjb3VudCArPSAoYml0c3RyZWFtW2J5dGVJbmRleF0gPj4gYml0SW5kZXgpICYgMTtcbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEltcGxpY2l0QXZhaWxhYmlsaXR5Qml0c3RyZWFtLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgYml0c3RyZWFtIGluIGJpdHMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBJbXBsaWNpdEF2YWlsYWJpbGl0eUJpdHN0cmVhbS5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBsZW5ndGhCaXRzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoQml0cztcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBiaXRzIGluIHRoZSBiaXRzdHJlYW0gd2l0aCB2YWx1ZSA8Y29kZT4xPC9jb2RlPi5cbiAgICpcbiAgICogQG1lbWJlcm9mIEltcGxpY2l0QXZhaWxhYmlsaXR5Qml0c3RyZWFtLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF2YWlsYWJsZUNvdW50OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlQ291bnQ7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG4vKipcbiAqIEdldCBhIGJpdCBmcm9tIHRoZSBhdmFpbGFiaWxpdHkgYml0c3RyZWFtIGFzIGEgQm9vbGVhbi4gSWYgdGhlIGJpdHN0cmVhbVxuICogaXMgYSBjb25zdGFudCwgdGhlIGNvbnN0YW50IHZhbHVlIGlzIHJldHVybmVkIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFRoZSBpbnRlZ2VyIGluZGV4IG9mIHRoZSBiaXQuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVGhlIHZhbHVlIG9mIHRoZSBiaXRcbiAqIEBwcml2YXRlXG4gKi9cbkltcGxpY2l0QXZhaWxhYmlsaXR5Qml0c3RyZWFtLnByb3RvdHlwZS5nZXRCaXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9sZW5ndGhCaXRzKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwiQml0IGluZGV4IG91dCBvZiBib3VuZHMuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIGlmIChkZWZpbmVkKHRoaXMuX2NvbnN0YW50KSkge1xuICAgIHJldHVybiB0aGlzLl9jb25zdGFudDtcbiAgfVxuXG4gIC8vIGJ5dGVJbmRleCBpcyBmbG9vcihpbmRleCAvIDgpXG4gIHZhciBieXRlSW5kZXggPSBpbmRleCA+PiAzO1xuICB2YXIgYml0SW5kZXggPSBpbmRleCAlIDg7XG5cbiAgcmV0dXJuICgodGhpcy5fYml0c3RyZWFtW2J5dGVJbmRleF0gPj4gYml0SW5kZXgpICYgMSkgPT09IDE7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53474\n')},10149:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n/**\n * The subdivision scheme for an implicit tileset.\n *\n * @enum {String}\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nvar ImplicitSubdivisionScheme = {\n  /**\n   * A quadtree divides a parent tile into four children, split at the midpoint\n   * of the x and y dimensions of the bounding box\n   * @type {String}\n   * @constant\n   * @private\n   */\n  QUADTREE: "QUADTREE",\n  /**\n   * An octree divides a parent tile into eight children, split at the midpoint\n   * of the x, y, and z dimensions of the bounding box.\n   * @type {String}\n   * @constant\n   * @private\n   */\n  OCTREE: "OCTREE",\n};\n\n/**\n * Get the branching factor for the given subdivision scheme\n * @param {ImplicitSubdivisionScheme} subdivisionScheme The subdivision scheme\n * @returns {Number} The branching factor, either 4 for QUADTREE or 8 for OCTREE\n * @private\n */\nImplicitSubdivisionScheme.getBranchingFactor = function (subdivisionScheme) {\n  switch (subdivisionScheme) {\n    case ImplicitSubdivisionScheme.OCTREE:\n      return 8;\n    case ImplicitSubdivisionScheme.QUADTREE:\n      return 4;\n    //>>includeStart(\'debug\', pragmas.debug);\n    default:\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("subdivisionScheme is not a valid value.");\n    //>>includeEnd(\'debug\');\n  }\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(ImplicitSubdivisionScheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxNDkuanMiLCJtYXBwaW5ncyI6IjtBQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3RUFBYztBQUM5QjtBQUNBO0FBQ0E7O0FBRUEseURBQWUsd0NBQXdDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvSW1wbGljaXRTdWJkaXZpc2lvblNjaGVtZS5qcz82NGZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuXG4vKipcbiAqIFRoZSBzdWJkaXZpc2lvbiBzY2hlbWUgZm9yIGFuIGltcGxpY2l0IHRpbGVzZXQuXG4gKlxuICogQGVudW0ge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAqL1xudmFyIEltcGxpY2l0U3ViZGl2aXNpb25TY2hlbWUgPSB7XG4gIC8qKlxuICAgKiBBIHF1YWR0cmVlIGRpdmlkZXMgYSBwYXJlbnQgdGlsZSBpbnRvIGZvdXIgY2hpbGRyZW4sIHNwbGl0IGF0IHRoZSBtaWRwb2ludFxuICAgKiBvZiB0aGUgeCBhbmQgeSBkaW1lbnNpb25zIG9mIHRoZSBib3VuZGluZyBib3hcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQGNvbnN0YW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBRVUFEVFJFRTogXCJRVUFEVFJFRVwiLFxuICAvKipcbiAgICogQW4gb2N0cmVlIGRpdmlkZXMgYSBwYXJlbnQgdGlsZSBpbnRvIGVpZ2h0IGNoaWxkcmVuLCBzcGxpdCBhdCB0aGUgbWlkcG9pbnRcbiAgICogb2YgdGhlIHgsIHksIGFuZCB6IGRpbWVuc2lvbnMgb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQGNvbnN0YW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBPQ1RSRUU6IFwiT0NUUkVFXCIsXG59O1xuXG4vKipcbiAqIEdldCB0aGUgYnJhbmNoaW5nIGZhY3RvciBmb3IgdGhlIGdpdmVuIHN1YmRpdmlzaW9uIHNjaGVtZVxuICogQHBhcmFtIHtJbXBsaWNpdFN1YmRpdmlzaW9uU2NoZW1lfSBzdWJkaXZpc2lvblNjaGVtZSBUaGUgc3ViZGl2aXNpb24gc2NoZW1lXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYnJhbmNoaW5nIGZhY3RvciwgZWl0aGVyIDQgZm9yIFFVQURUUkVFIG9yIDggZm9yIE9DVFJFRVxuICogQHByaXZhdGVcbiAqL1xuSW1wbGljaXRTdWJkaXZpc2lvblNjaGVtZS5nZXRCcmFuY2hpbmdGYWN0b3IgPSBmdW5jdGlvbiAoc3ViZGl2aXNpb25TY2hlbWUpIHtcbiAgc3dpdGNoIChzdWJkaXZpc2lvblNjaGVtZSkge1xuICAgIGNhc2UgSW1wbGljaXRTdWJkaXZpc2lvblNjaGVtZS5PQ1RSRUU6XG4gICAgICByZXR1cm4gODtcbiAgICBjYXNlIEltcGxpY2l0U3ViZGl2aXNpb25TY2hlbWUuUVVBRFRSRUU6XG4gICAgICByZXR1cm4gNDtcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJzdWJkaXZpc2lvblNjaGVtZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS5cIik7XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoSW1wbGljaXRTdWJkaXZpc2lvblNjaGVtZSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10149\n')},61800:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ImplicitSubtree; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12540);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9407);\n/* harmony import */ var _hasExtension_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(81326);\n/* harmony import */ var _ImplicitAvailabilityBitstream_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53474);\n/* harmony import */ var _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(10149);\n/* harmony import */ var _MetadataTable_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14358);\n/* harmony import */ var _ResourceCache_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(38956);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(13222);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An object representing a single subtree in an implicit tileset\n * including availability.\n * <p>\n * Subtrees handle tile metadata from the <code>3DTILES_metadata</code> extension\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/extensions/3DTILES_metadata#implicit-tile-metadata|Implicit Tile Metadata in the 3DTILES_metadata specification}\n *\n * @alias ImplicitSubtree\n * @constructor\n *\n * @param {Resource} resource The resource for this subtree. This is used for fetching external buffers as needed.\n * @param {Uint8Array} subtreeView The contents of a subtree binary in a Uint8Array.\n * @param {ImplicitTileset} implicitTileset The implicit tileset. This includes information about the size of subtrees\n * @param {ImplicitTileCoordinates} implicitCoordinates The coordinates of the subtree\'s root tile.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction ImplicitSubtree(\n  resource,\n  subtreeView,\n  implicitTileset,\n  implicitCoordinates\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("resource", resource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("subtreeView", subtreeView);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("implicitTileset", implicitTileset);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("implicitCoordinates", implicitCoordinates);\n  //>>includeEnd(\'debug\');\n\n  this._resource = resource;\n  this._subtreeJson = undefined;\n  this._bufferLoader = undefined;\n  this._tileAvailability = undefined;\n  this._implicitCoordinates = implicitCoordinates;\n  this._contentAvailabilityBitstreams = [];\n  this._childSubtreeAvailability = undefined;\n  this._subtreeLevels = implicitTileset.subtreeLevels;\n  this._subdivisionScheme = implicitTileset.subdivisionScheme;\n  this._branchingFactor = implicitTileset.branchingFactor;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].defer */ .Z.defer();\n\n  // properties for 3DTILES_metadata\n  this._metadataTable = undefined;\n  this._metadataExtension = undefined;\n  // Map of availability bit index to entity ID\n  this._jumpBuffer = undefined;\n\n  initialize(this, subtreeView, implicitTileset);\n}\n\nObject.defineProperties(ImplicitSubtree.prototype, {\n  /**\n   * A promise that resolves once all necessary availability buffers\n   * are loaded.\n   *\n   * @type {Promise}\n   * @readonly\n   * @private\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * When the <code>3DTILES_metadata</code> extension is used, this property stores\n   * a {@link MetadataTable} instance\n   *\n   * @type {MetadataTable}\n   * @readonly\n   * @private\n   */\n  metadataTable: {\n    get: function () {\n      return this._metadataTable;\n    },\n  },\n\n  /**\n   * When the <code>3DTILES_metadata</code> extension is used, this property\n   * stores the JSON from the extension. This is used by {@link TileMetadata}\n   * to get the extras and extensions.\n   *\n   * @type {MetadataTable}\n   * @readonly\n   * @private\n   */\n  metadataExtension: {\n    get: function () {\n      return this._metadataExtension;\n    },\n  },\n\n  /**\n   * Gets the implicit tile coordinates for the root of the subtree.\n   *\n   * @type {ImplicitTileCoordinates}\n   * @readonly\n   * @private\n   */\n  implicitCoordinates: {\n    get: function () {\n      return this._implicitCoordinates;\n    },\n  },\n});\n\n/**\n * Check if a specific tile is available at an index of the tile availability bitstream\n *\n * @param {Number} index The index of the desired tile\n * @returns {Boolean} The value of the i-th bit\n * @private\n */\nImplicitSubtree.prototype.tileIsAvailableAtIndex = function (index) {\n  return this._tileAvailability.getBit(index);\n};\n\n/**\n * Check if a specific tile is available at an implicit tile coordinate\n *\n * @param {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a tile\n * @returns {Boolean} The value of the i-th bit\n * @private\n */\nImplicitSubtree.prototype.tileIsAvailableAtCoordinates = function (\n  implicitCoordinates\n) {\n  var index = this.getTileIndex(implicitCoordinates);\n  return this.tileIsAvailableAtIndex(index);\n};\n\n/**\n * Check if a specific tile\'s content is available at an index of the content availability bitstream\n *\n * @param {Number} index The index of the desired tile\n * @param {Number} [contentIndex=0] The index of the desired content when the <code>3DTILES_multiple_contents</code> extension is used.\n * @returns {Boolean} The value of the i-th bit\n * @private\n */\nImplicitSubtree.prototype.contentIsAvailableAtIndex = function (\n  index,\n  contentIndex\n) {\n  contentIndex = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(contentIndex, 0);\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    contentIndex < 0 ||\n    contentIndex >= this._contentAvailabilityBitstreams.length\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("contentIndex out of bounds.");\n  }\n  //>>includeEnd(\'debug\');\n\n  return this._contentAvailabilityBitstreams[contentIndex].getBit(index);\n};\n\n/**\n * Check if a specific tile\'s content is available at an implicit tile coordinate\n *\n * @param {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a tile\n * @param {Number} [contentIndex=0] The index of the desired content when the <code>3DTILES_multiple_contents</code> extension is used.\n * @returns {Boolean} The value of the i-th bit\n * @private\n */\nImplicitSubtree.prototype.contentIsAvailableAtCoordinates = function (\n  implicitCoordinates,\n  contentIndex\n) {\n  var index = this.getTileIndex(implicitCoordinates, contentIndex);\n  return this.contentIsAvailableAtIndex(index);\n};\n\n/**\n * Check if a child subtree is available at an index of the child subtree availability bitstream\n *\n * @param {Number} index The index of the desired child subtree\n * @returns {Boolean} The value of the i-th bit\n * @private\n */\nImplicitSubtree.prototype.childSubtreeIsAvailableAtIndex = function (index) {\n  return this._childSubtreeAvailability.getBit(index);\n};\n\n/**\n * Check if a specific child subtree is available at an implicit tile coordinate\n *\n * @param {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a child subtree\n * @returns {Boolean} The value of the i-th bit\n * @private\n */\nImplicitSubtree.prototype.childSubtreeIsAvailableAtCoordinates = function (\n  implicitCoordinates\n) {\n  var index = this.getChildSubtreeIndex(implicitCoordinates);\n  return this.childSubtreeIsAvailableAtIndex(index);\n};\n\n/**\n * Get the index of the first node at the given level within this subtree.\n * e.g. for a quadtree:\n * <ul>\n * <li>Level 0 starts at index 0</li>\n * <li>Level 1 starts at index 1</li>\n * <li>Level 2 starts at index 5</li>\n * </ul>\n *\n * @param {Number} level The 0-indexed level number relative to the root of the subtree\n * @returns {Number} The first index at the desired level\n * @private\n */\nImplicitSubtree.prototype.getLevelOffset = function (level) {\n  var branchingFactor = this._branchingFactor;\n  return (Math.pow(branchingFactor, level) - 1) / (branchingFactor - 1);\n};\n\n/**\n * Get the morton index of a tile\'s parent. This is equivalent to\n * chopping off the last 2 (quadtree) or 3 (octree) bits of the morton\n * index.\n *\n * @param {Number} childIndex The morton index of the child tile relative to its parent\n * @returns {Number} The index of the child\'s parent node\n * @private\n */\nImplicitSubtree.prototype.getParentMortonIndex = function (mortonIndex) {\n  var bitsPerLevel = 2;\n  if (this._subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].OCTREE */ .Z.OCTREE) {\n    bitsPerLevel = 3;\n  }\n\n  return mortonIndex >> bitsPerLevel;\n};\n\n/**\n * Parse all relevant information out of the subtree. This fetches any\n * external buffers that are used by the implicit tileset. When finished,\n * it resolves/rejects subtree.readyPromise.\n *\n * @param {ImplicitSubtree} subtree The subtree\n * @param {Uint8Array} subtreeView The contents of the subtree binary\n * @param {ImplicitTileset} implicitTileset The implicit tileset this subtree belongs to.\n * @private\n */\nfunction initialize(subtree, subtreeView, implicitTileset) {\n  var chunks = parseSubtreeChunks(subtreeView);\n  var subtreeJson = chunks.json;\n  subtree._subtreeJson = subtreeJson;\n\n  var metadataExtension;\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(subtreeJson, "3DTILES_metadata")) {\n    metadataExtension = subtreeJson.extensions["3DTILES_metadata"];\n  }\n  subtree._metadataExtension = metadataExtension;\n\n  // if no contentAvailability is specified, no tile in the subtree has\n  // content\n  var defaultContentAvailability = {\n    constant: 0,\n  };\n\n  // content availability is either in the subtree JSON or the multiple\n  // contents extension. Either way, put the results in this new array\n  // for consistent processing later\n  subtreeJson.contentAvailabilityHeaders = [];\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(subtreeJson, "3DTILES_multiple_contents")) {\n    subtreeJson.contentAvailabilityHeaders =\n      subtreeJson.extensions["3DTILES_multiple_contents"].contentAvailability;\n  } else {\n    subtreeJson.contentAvailabilityHeaders.push(\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(subtreeJson.contentAvailability, defaultContentAvailability)\n    );\n  }\n\n  var bufferHeaders = preprocessBuffers(subtreeJson.buffers);\n  var bufferViewHeaders = preprocessBufferViews(\n    subtreeJson.bufferViews,\n    bufferHeaders\n  );\n\n  // Buffers and buffer views are inactive until explicitly marked active.\n  // This way we can avoid fetching buffers that will not be used.\n  markActiveBufferViews(subtreeJson, bufferViewHeaders);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(metadataExtension)) {\n    markActiveMetadataBufferViews(metadataExtension, bufferViewHeaders);\n  }\n\n  requestActiveBuffers(subtree, bufferHeaders, chunks.binary)\n    .then(function (buffersU8) {\n      var bufferViewsU8 = parseActiveBufferViews(bufferViewHeaders, buffersU8);\n      parseAvailability(subtree, subtreeJson, implicitTileset, bufferViewsU8);\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(metadataExtension)) {\n        parseMetadataTable(subtree, implicitTileset, bufferViewsU8);\n        makeJumpBuffer(subtree);\n      }\n\n      subtree._readyPromise.resolve(subtree);\n    })\n    .otherwise(function (error) {\n      subtree._readyPromise.reject(error);\n    });\n}\n\n/**\n * A helper object for storing the two parts of the subtree binary\n *\n * @typedef {Object} SubtreeChunks\n * @property {Object} json The json chunk of the subtree\n * @property {Uint8Array} binary The binary chunk of the subtree. This represents the internal buffer.\n * @private\n */\n\n/**\n * Given the binary contents of a subtree, split into JSON and binary chunks\n *\n * @param {Uint8Array} subtreeView The subtree binary\n * @returns {SubtreeChunks} An object containing the JSON and binary chunks.\n * @private\n */\nfunction parseSubtreeChunks(subtreeView) {\n  // Parse the header\n  var littleEndian = true;\n  var subtreeReader = new DataView(subtreeView.buffer, subtreeView.byteOffset);\n  // Skip to the chunk lengths\n  var byteOffset = 8;\n\n  // Read the bottom 32 bits of the 64-bit byte length. This is ok for now because:\n  // 1) not all browsers have native 64-bit operations\n  // 2) the data is well under 4GB\n  var jsonByteLength = subtreeReader.getUint32(byteOffset, littleEndian);\n  byteOffset += 8;\n  var binaryByteLength = subtreeReader.getUint32(byteOffset, littleEndian);\n  byteOffset += 8;\n\n  var subtreeJson = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    subtreeView,\n    byteOffset,\n    jsonByteLength\n  );\n  byteOffset += jsonByteLength;\n  var subtreeBinary = subtreeView.subarray(\n    byteOffset,\n    byteOffset + binaryByteLength\n  );\n\n  return {\n    json: subtreeJson,\n    binary: subtreeBinary,\n  };\n}\n\n/**\n * A buffer header is the JSON header from the subtree JSON chunk plus\n * a couple extra boolean flags for easy reference.\n *\n * Buffers are assumed inactive until explicitly marked active. This is used\n * to avoid fetching unneeded buffers.\n *\n * @typedef {Object} BufferHeader\n * @property {Boolean} isExternal True if this is an external buffer\n * @property {Boolean} isActive Whether this buffer is currently used.\n * @property {String} [uri] The URI of the buffer (external buffers only)\n * @property {Number} byteLength The byte length of the buffer, including any padding contained within.\n * @private\n */\n\n/**\n * Iterate over the list of buffers from the subtree JSON and add the\n * isExternal and isActive fields for easier parsing later. This modifies\n * the objects in place.\n *\n * @param {Object[]} [bufferHeaders=[]] The JSON from subtreeJson.buffers.\n * @returns {BufferHeader[]} The same array of headers with additional fields.\n * @private\n */\nfunction preprocessBuffers(bufferHeaders) {\n  bufferHeaders = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(bufferHeaders) ? bufferHeaders : [];\n  for (var i = 0; i < bufferHeaders.length; i++) {\n    var bufferHeader = bufferHeaders[i];\n    bufferHeader.isExternal = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(bufferHeader.uri);\n    bufferHeader.isActive = false;\n  }\n\n  return bufferHeaders;\n}\n\n/**\n * A buffer header is the JSON header from the subtree JSON chunk plus\n * the isActive flag and a reference to the header for the underlying buffer\n *\n * @typedef {Object} BufferViewHeader\n * @property {BufferHeader} bufferHeader A reference to the header for the underlying buffer\n * @property {Boolean} isActive Whether this bufferView is currently used.\n * @property {Number} buffer The index of the underlying buffer.\n * @property {Number} byteOffset The start byte of the bufferView within the buffer.\n * @property {Number} byteLength The length of the bufferView. No padding is included in this length.\n * @private\n */\n\n/**\n * Iterate the list of buffer views from the subtree JSON and add the\n * isActive flag. Also save a reference to the bufferHeader\n *\n * @param {Object[]} [bufferViewHeaders=[]] The JSON from subtree.bufferViews\n * @param {BufferHeader[]} bufferHeaders The preprocessed buffer headers\n * @returns {BufferViewHeader[]} The same array of bufferView headers with additional fields\n * @private\n */\nfunction preprocessBufferViews(bufferViewHeaders, bufferHeaders) {\n  bufferViewHeaders = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(bufferViewHeaders) ? bufferViewHeaders : [];\n  for (var i = 0; i < bufferViewHeaders.length; i++) {\n    var bufferViewHeader = bufferViewHeaders[i];\n    var bufferHeader = bufferHeaders[bufferViewHeader.buffer];\n    bufferViewHeader.bufferHeader = bufferHeader;\n    bufferViewHeader.isActive = false;\n  }\n  return bufferViewHeaders;\n}\n\n/**\n * Determine which buffer views need to be loaded into memory. This includes:\n *\n * <ul>\n * <li>The tile availability bitstream (if a bufferView is defined)</li>\n * <li>The content availability bitstream(s) (if a bufferView is defined)</li>\n * <li>The child subtree availability bitstream (if a bufferView is defined)</li>\n * </ul>\n *\n * <p>\n * This function modifies the buffer view headers\' isActive flags in place.\n * </p>\n *\n * @param {Object[]} subtreeJson The JSON chunk from the subtree\n * @param {BufferViewHeader[]} bufferViewHeaders The preprocessed buffer view headers\n * @private\n */\nfunction markActiveBufferViews(subtreeJson, bufferViewHeaders) {\n  var header;\n  var tileAvailabilityHeader = subtreeJson.tileAvailability;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(tileAvailabilityHeader.bufferView)) {\n    header = bufferViewHeaders[tileAvailabilityHeader.bufferView];\n    header.isActive = true;\n    header.bufferHeader.isActive = true;\n  }\n\n  var contentAvailabilityHeaders = subtreeJson.contentAvailabilityHeaders;\n  for (var i = 0; i < contentAvailabilityHeaders.length; i++) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(contentAvailabilityHeaders[i].bufferView)) {\n      header = bufferViewHeaders[contentAvailabilityHeaders[i].bufferView];\n      header.isActive = true;\n      header.bufferHeader.isActive = true;\n    }\n  }\n\n  var childSubtreeAvailabilityHeader = subtreeJson.childSubtreeAvailability;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(childSubtreeAvailabilityHeader.bufferView)) {\n    header = bufferViewHeaders[childSubtreeAvailabilityHeader.bufferView];\n    header.isActive = true;\n    header.bufferHeader.isActive = true;\n  }\n}\n\n/**\n * For <code>3DTILES_metadata</code>, look over the tile metadata buffers\n * <p>\n * This always loads all of the metadata immediately. Future iterations may\n * allow filtering this to avoid downloading unneeded buffers.\n * </p>\n * @param {Object} metadataExtension The 3DTILES_metadata extension\n * @param {BufferViewHeader[]} bufferViewHeaders The preprocessed buffer view headers\n * @private\n */\nfunction markActiveMetadataBufferViews(metadataExtension, bufferViewHeaders) {\n  var properties = metadataExtension.properties;\n  var header;\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      var metadataHeader = properties[key];\n      header = bufferViewHeaders[metadataHeader.bufferView];\n      header.isActive = true;\n      header.bufferHeader.isActive = true;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(metadataHeader.stringOffsetBufferView)) {\n        header = bufferViewHeaders[metadataHeader.stringOffsetBufferView];\n        header.isActive = true;\n        header.bufferHeader.isActive = true;\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(metadataHeader.arrayOffsetBufferView)) {\n        header = bufferViewHeaders[metadataHeader.arrayOffsetBufferView];\n        header.isActive = true;\n        header.bufferHeader.isActive = true;\n      }\n    }\n  }\n}\n\n/**\n * Go through the list of buffers and gather all the active ones into a\n * a dictionary. Since external buffers are allowed, this sometimes involves\n * fetching separate binary files. Consequently, this method returns a promise.\n * <p>\n * The results are put into a dictionary object. The keys are indices of\n * buffers, and the values are Uint8Arrays of the contents. Only buffers\n * marked with the isActive flag are fetched.\n * </p>\n * <p>\n * The internal buffer (the subtree\'s binary chunk) is also stored in this\n * dictionary if it is marked active.\n * </p>\n * @param {ImplicitSubtree} subtree The subtree\n * @param {BufferHeader[]} bufferHeaders The preprocessed buffer headers\n * @param {Uint8Array} internalBuffer The binary chunk of the subtree file\n * @returns {Promise<Object>} A promise resolving to the dictionary of active buffers\n * @private\n */\nfunction requestActiveBuffers(subtree, bufferHeaders, internalBuffer) {\n  var promises = [];\n  for (var i = 0; i < bufferHeaders.length; i++) {\n    var bufferHeader = bufferHeaders[i];\n    if (!bufferHeader.isActive) {\n      promises.push(_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].resolve */ .Z.resolve(undefined));\n    } else if (bufferHeader.isExternal) {\n      var promise = requestExternalBuffer(subtree, bufferHeader);\n      promises.push(promise);\n    } else {\n      promises.push(_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].resolve */ .Z.resolve(internalBuffer));\n    }\n  }\n  return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].all */ .Z.all(promises).then(function (bufferResults) {\n    var buffersU8 = {};\n    for (var i = 0; i < bufferResults.length; i++) {\n      var result = bufferResults[i];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(result)) {\n        buffersU8[i] = result;\n      }\n    }\n    return buffersU8;\n  });\n}\n\nfunction requestExternalBuffer(subtree, bufferHeader) {\n  var baseResource = subtree._resource;\n  var bufferResource = baseResource.getDerivedResource({\n    url: bufferHeader.uri,\n  });\n\n  var bufferLoader = _ResourceCache_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].loadExternalBuffer */ .Z.loadExternalBuffer({\n    resource: bufferResource,\n  });\n  subtree._bufferLoader = bufferLoader;\n\n  return bufferLoader.promise.then(function (bufferLoader) {\n    return bufferLoader.typedArray;\n  });\n}\n\n/**\n * Go through the list of buffer views, and if they are marked as active,\n * extract a subarray from one of the active buffers.\n *\n * @param {BufferViewHeader[]} bufferViewHeaders\n * @param {Object} buffersU8 A dictionary of buffer index to a Uint8Array of its contents.\n * @returns {Object} A dictionary of buffer view index to a Uint8Array of its contents.\n * @private\n */\nfunction parseActiveBufferViews(bufferViewHeaders, buffersU8) {\n  var bufferViewsU8 = {};\n  for (var i = 0; i < bufferViewHeaders.length; i++) {\n    var bufferViewHeader = bufferViewHeaders[i];\n\n    if (!bufferViewHeader.isActive) {\n      continue;\n    }\n\n    var start = bufferViewHeader.byteOffset;\n    var end = start + bufferViewHeader.byteLength;\n    var buffer = buffersU8[bufferViewHeader.buffer];\n    var bufferView = buffer.subarray(start, end);\n    bufferViewsU8[i] = bufferView;\n  }\n  return bufferViewsU8;\n}\n\n/**\n * Parse the three availability bitstreams and store them in the subtree\n *\n * @param {ImplicitSubtree} subtree The subtree to modify\n * @param {Object} subtreeJson The subtree JSON\n * @param {ImplicitTileset} implicitTileset The implicit tileset this subtree belongs to\n * @param {Object} bufferViewsU8 A dictionary of buffer view index to a Uint8Array of its contents.\n * @private\n */\nfunction parseAvailability(\n  subtree,\n  subtreeJson,\n  implicitTileset,\n  bufferViewsU8\n) {\n  var branchingFactor = implicitTileset.branchingFactor;\n  var subtreeLevels = implicitTileset.subtreeLevels;\n  var tileAvailabilityBits =\n    (Math.pow(branchingFactor, subtreeLevels) - 1) / (branchingFactor - 1);\n  var childSubtreeBits = Math.pow(branchingFactor, subtreeLevels);\n\n  // availableCount is only needed for the metadata jump buffer, which\n  // corresponds to the tile availability bitstream.\n  var computeAvailableCountEnabled = (0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(\n    subtreeJson,\n    "3DTILES_metadata"\n  );\n  subtree._tileAvailability = parseAvailabilityBitstream(\n    subtreeJson.tileAvailability,\n    bufferViewsU8,\n    tileAvailabilityBits,\n    computeAvailableCountEnabled\n  );\n\n  for (var i = 0; i < subtreeJson.contentAvailabilityHeaders.length; i++) {\n    var bitstream = parseAvailabilityBitstream(\n      subtreeJson.contentAvailabilityHeaders[i],\n      bufferViewsU8,\n      // content availability has the same length as tile availability.\n      tileAvailabilityBits\n    );\n    subtree._contentAvailabilityBitstreams.push(bitstream);\n  }\n\n  subtree._childSubtreeAvailability = parseAvailabilityBitstream(\n    subtreeJson.childSubtreeAvailability,\n    bufferViewsU8,\n    childSubtreeBits\n  );\n}\n\n/**\n * Given the JSON describing an availability bitstream, turn it into an\n * in-memory representation using an {@link ImplicitAvailabilityBitstream}\n * object. This handles both constants and bitstreams from a bufferView.\n *\n * @param {Object} availabilityJson A JSON object representing the availability\n * @param {Object} bufferViewsU8 A dictionary of bufferView index to its Uint8Array contents.\n * @param {Number} lengthBits The length of the availability bitstream in bits\n * @param {Boolean} [computeAvailableCountEnabled] If true and availabilityJson.availableCount is undefined, the availableCount will be computed.\n * @returns {ImplicitAvailabilityBitstream} The parsed bitstream object\n * @private\n */\nfunction parseAvailabilityBitstream(\n  availabilityJson,\n  bufferViewsU8,\n  lengthBits,\n  computeAvailableCountEnabled\n) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(availabilityJson.constant)) {\n    return new _ImplicitAvailabilityBitstream_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n      constant: Boolean(availabilityJson.constant),\n      lengthBits: lengthBits,\n      availableCount: availabilityJson.availableCount,\n    });\n  }\n\n  var bufferView = bufferViewsU8[availabilityJson.bufferView];\n\n  return new _ImplicitAvailabilityBitstream_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n    bitstream: bufferView,\n    lengthBits: lengthBits,\n    availableCount: availabilityJson.availableCount,\n    computeAvailableCountEnabled: computeAvailableCountEnabled,\n  });\n}\n\n/**\n * Parse the 3DTILES_metadata table, storing a {@link MetadataTable} in the\n * subtree.\n *\n * @param {ImplicitSubtree} subtree The subtree\n * @param {ImplicitTileset} implicitTileset The implicit tileset this subtree belongs to.\n * @param {Object} bufferViewsU8 A dictionary of bufferView index to its Uint8Array contents.\n * @private\n */\nfunction parseMetadataTable(subtree, implicitTileset, bufferViewsU8) {\n  var metadataExtension = subtree._metadataExtension;\n  var tileCount = subtree._tileAvailability.availableCount;\n  var metadataClassName = metadataExtension.class;\n  var metadataSchema = implicitTileset.metadataSchema;\n  var metadataClass = metadataSchema.classes[metadataClassName];\n\n  subtree._metadataTable = new _MetadataTable_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n    class: metadataClass,\n    count: tileCount,\n    properties: metadataExtension.properties,\n    bufferViews: bufferViewsU8,\n  });\n}\n\n/**\n * Make a jump buffer, i.e. a map of tile bit index to the metadata entity ID.\n * This is stored in the subtree.\n * <p>\n * For unavailable tiles, the jump buffer entry will be uninitialized. Use\n * the tile availability to determine whether a jump buffer value is valid.\n * </p>\n *\n * @param {ImplicitSubtree} subtree The subtree\n * @private\n */\nfunction makeJumpBuffer(subtree) {\n  var tileAvailability = subtree._tileAvailability;\n  var entityId = 0;\n  var bufferLength = tileAvailability.lengthBits;\n  var availableCount = tileAvailability.availableCount;\n\n  var jumpBuffer;\n  if (availableCount < 256) {\n    jumpBuffer = new Uint8Array(bufferLength);\n  } else if (availableCount < 65536) {\n    jumpBuffer = new Uint16Array(bufferLength);\n  } else {\n    jumpBuffer = new Uint32Array(bufferLength);\n  }\n\n  for (var i = 0; i < tileAvailability.lengthBits; i++) {\n    if (tileAvailability.getBit(i)) {\n      jumpBuffer[i] = entityId;\n      entityId++;\n    }\n  }\n  subtree._jumpBuffer = jumpBuffer;\n}\n\n/**\n * Given the implicit tiling coordinates for a tile, get the index within the\n * subtree\'s tile availability bitstream.\n * @property {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a tile\n * @return {Number} The tile\'s index within the subtree.\n * @private\n */\nImplicitSubtree.prototype.getTileIndex = function (implicitCoordinates) {\n  var localLevel = implicitCoordinates.level - this._implicitCoordinates.level;\n  if (localLevel < 0 || this._subtreeLevels <= localLevel) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("level is out of bounds for this subtree");\n  }\n\n  var subtreeCoordinates = implicitCoordinates.getSubtreeCoordinates();\n  var offsetCoordinates = subtreeCoordinates.getOffsetCoordinates(\n    implicitCoordinates\n  );\n  var index = offsetCoordinates.tileIndex;\n  return index;\n};\n\n/**\n * Given the implicit tiling coordinates for a child subtree, get the index within the\n * subtree\'s child subtree availability bitstream.\n * @property {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a child subtree\n * @return {Number} The child subtree\'s index within the subtree\'s child subtree availability bitstream.\n * @private\n */\nImplicitSubtree.prototype.getChildSubtreeIndex = function (\n  implicitCoordinates\n) {\n  var localLevel = implicitCoordinates.level - this._implicitCoordinates.level;\n  if (localLevel !== this._implicitCoordinates.subtreeLevels) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("level is out of bounds for this subtree");\n  }\n\n  // Call getParentSubtreeCoordinates instead of getSubtreeCoordinates because the\n  // child subtree is by definition the root of its own subtree, so we need to find\n  // the parent subtree.\n  var parentSubtreeCoordinates = implicitCoordinates.getParentSubtreeCoordinates();\n  var offsetCoordinates = parentSubtreeCoordinates.getOffsetCoordinates(\n    implicitCoordinates\n  );\n  var index = offsetCoordinates.mortonIndex;\n  return index;\n};\n\n/**\n * Get the entity ID for a tile within this subtree.\n * @property {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a tile\n * @return {Number} The entity ID for this tile for accessing tile metadata, or <code>undefined</code> if not applicable.\n *\n * @private\n */\nImplicitSubtree.prototype.getEntityId = function (implicitCoordinates) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._metadataTable)) {\n    return undefined;\n  }\n\n  var tileIndex = this.getTileIndex(implicitCoordinates);\n  if (this._tileAvailability.getBit(tileIndex)) {\n    return this._jumpBuffer[tileIndex];\n  }\n\n  return undefined;\n};\n\n/**\n * @private\n */\nImplicitSubtree.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * @private\n */\nImplicitSubtree.prototype.destroy = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(this._bufferLoader)) {\n    _ResourceCache_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].unload */ .Z.unload(this._bufferLoader);\n  }\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61800\n')},75692:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ImplicitTileCoordinates; }\n/* harmony export */ });\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_MortonOrder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79585);\n/* harmony import */ var _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10149);\n\n\n\n\n\n\n/**\n * The coordinates for a tile in an implicit tileset. The coordinates\n * are (level, x, y) for quadtrees or (level, x, y, z) for octrees.\n * <p>\n * Level numbers are 0-indexed and typically start at the root of the implicit\n * tileset (the tile with the <code>3DTILES_implicit_tiling</code> extension).\n * This object can also represent the relative offset from one set of coordinates\n * to another. See {@link ImplicitTileCoordinates#getOffsetCoordinates}. The term\n * local coordinates refers to coordinates that are relative to the root of a\n * subtree and the term global coordinates refers to coordinates relative to the\n * root of an implicit tileset.\n * </p>\n * <p>\n * For box bounding volumes, x, y, z increase along the +x, +y, and +z\n * directions defined by the half axes.\n * </p>\n * <p>\n * For region bounding volumes, x increases in the +longitude direction, y\n * increases in the +latitude direction, and z increases in the +height\n * direction.\n * </p>\n * <p>\n * Care must be taken when converting between implicit coordinates and Morton\n * indices because there is a 16-bit limit on {@link MortonOrder#encode2D} and\n * a 10-bit limit on {@link MortonOrder#encode3D}. Typically these conversions\n * should be done on local coordinates, not global coordinates, and the maximum\n * number of levels in the subtree should be 15 for quadtree and 9 for octree (to\n * account for the extra level needed by child subtree coordinates).\n * </p>\n *\n * @alias ImplicitTileCoordinates\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {ImplicitSubdivisionScheme} options.subdivisionScheme Whether the coordinates are for a quadtree or octree\n * @param {Number} options.subtreeLevels The number of distinct levels within the coordinate\'s subtree\n * @param {Number} options.level The level of a tile relative to the tile with the extension\n * @param {Number} options.x The x coordinate of the tile\n * @param {Number} options.y The y coordinate of the tile\n * @param {Number} [options.z] The z coordinate of the tile. Only required when options.subdivisionScheme is ImplicitSubdivisionScheme.OCTREE\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction ImplicitTileCoordinates(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.string */ .Z.typeOf.string("options.subdivisionScheme", options.subdivisionScheme);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("options.subtreeLevels", options.subtreeLevels);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("options.level", options.level);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("options.x", options.x);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("options.y", options.y);\n  if (options.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("options.z", options.z);\n  }\n  // Check for values that are negative\n  if (options.level < 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("level must be non-negative");\n  }\n  if (options.x < 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("x must be non-negative");\n  }\n  if (options.y < 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("y must be non-negative");\n  }\n  if (options.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    if (options.z < 0) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("z must be non-negative");\n    }\n  }\n\n  // Check for values that are too large\n  var dimensionAtLevel = 1 << options.level;\n  if (options.x >= dimensionAtLevel) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("x is out of range");\n  }\n  if (options.y >= dimensionAtLevel) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("y is out of range");\n  }\n  if (options.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    if (options.z >= dimensionAtLevel) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("z is out of range");\n    }\n  }\n  //>>includeEnd(\'debug\');\n\n  /**\n   * Whether the tileset is a quadtree or octree\n   *\n   * @type {ImplicitSubdivisionScheme}\n   * @readonly\n   * @private\n   */\n  this.subdivisionScheme = options.subdivisionScheme;\n\n  /**\n   * The number of distinct levels within the coordinate\'s subtree\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.subtreeLevels = options.subtreeLevels;\n\n  /**\n   * Level of this tile, relative to the tile with the\n   * <code>3DTILES_implicit_tiling</code> extension. Level numbers start at 0.\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.level = options.level;\n\n  /**\n   * X coordinate of this tile\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.x = options.x;\n\n  /**\n   * Y coordinate of this tile\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.y = options.y;\n\n  /**\n   * Z coordinate of this tile. Only defined for octrees.\n   *\n   * @type {Number|undefined}\n   * @readonly\n   * @private\n   */\n  this.z = undefined;\n  if (options.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    this.z = options.z;\n  }\n}\n\nObject.defineProperties(ImplicitTileCoordinates.prototype, {\n  /**\n   * An index in the range of [0, branchingFactor) that indicates\n   * which child of the parent cell these coordinates correspond to.\n   * This can be viewed as a morton index within the parent tile.\n   * <p>\n   * This is the last 3 bits of the morton index of the tile, but it can\n   * be computed more directly by concatenating the bits [z0] y0 x0\n   * </p>\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  childIndex: {\n    get: function () {\n      var childIndex = 0;\n      childIndex |= this.x & 1;\n      childIndex |= (this.y & 1) << 1;\n      if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n        childIndex |= (this.z & 1) << 2;\n      }\n\n      return childIndex;\n    },\n  },\n\n  /**\n   * Get the Morton index for this tile within the current level by interleaving\n   * the bits of the x, y and z coordinates.\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  mortonIndex: {\n    get: function () {\n      if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n        return _Core_MortonOrder_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].encode3D */ .Z.encode3D(this.x, this.y, this.z);\n      }\n      return _Core_MortonOrder_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].encode2D */ .Z.encode2D(this.x, this.y);\n    },\n  },\n\n  /**\n   * Get the tile index by adding the Morton index to the level offset\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  tileIndex: {\n    get: function () {\n      var levelOffset =\n        this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE\n          ? // (8^N - 1) / (8-1)\n            ((1 << (3 * this.level)) - 1) / 7\n          : // (4^N - 1) / (4-1)\n            ((1 << (2 * this.level)) - 1) / 3;\n\n      var mortonIndex = this.mortonIndex;\n      return levelOffset + mortonIndex;\n    },\n  },\n});\n\n/**\n * Check that the two coordinates are compatible\n * @param {ImplicitTileCoordinates} a\n * @param {ImplicitTileCoordinates} b\n * @private\n */\nfunction checkMatchingSubtreeShape(a, b) {\n  if (a.subdivisionScheme !== b.subdivisionScheme) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("coordinates must have same subdivisionScheme");\n  }\n  if (a.subtreeLevels !== b.subtreeLevels) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("coordinates must have same subtreeLevels");\n  }\n}\n\n/**\n * Compute the coordinates of a tile deeper in the tree with a (level, x, y, [z]) relative offset.\n *\n * @param {ImplicitTileCoordinates} offsetCoordinates The offset from the ancestor\n * @returns {ImplicitTileCoordinates} The coordinates of the descendant\n * @private\n */\nImplicitTileCoordinates.prototype.getDescendantCoordinates = function (\n  offsetCoordinates\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("offsetCoordinates", offsetCoordinates);\n  checkMatchingSubtreeShape(this, offsetCoordinates);\n  //>>includeEnd(\'debug\');\n\n  var descendantLevel = this.level + offsetCoordinates.level;\n  var descendantX = (this.x << offsetCoordinates.level) + offsetCoordinates.x;\n  var descendantY = (this.y << offsetCoordinates.level) + offsetCoordinates.y;\n\n  if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    var descendantZ = (this.z << offsetCoordinates.level) + offsetCoordinates.z;\n\n    return new ImplicitTileCoordinates({\n      subdivisionScheme: this.subdivisionScheme,\n      subtreeLevels: this.subtreeLevels,\n      level: descendantLevel,\n      x: descendantX,\n      y: descendantY,\n      z: descendantZ,\n    });\n  }\n\n  // Quadtree\n  return new ImplicitTileCoordinates({\n    subdivisionScheme: this.subdivisionScheme,\n    subtreeLevels: this.subtreeLevels,\n    level: descendantLevel,\n    x: descendantX,\n    y: descendantY,\n  });\n};\n\n/**\n * Compute the coordinates of a tile higher up in the tree by going up a number of levels.\n *\n * @param {Number} offsetLevels The number of levels to go up in the tree\n * @returns {ImplicitTileCoordinates} The coordinates of the ancestor\n * @private\n */\nImplicitTileCoordinates.prototype.getAncestorCoordinates = function (\n  offsetLevels\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("offsetLevels", offsetLevels);\n  if (offsetLevels < 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("offsetLevels must be non-negative");\n  }\n  if (offsetLevels > this.level) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("ancestor cannot be above the tileset root");\n  }\n  //>>includeEnd(\'debug\');\n\n  var divisor = 1 << offsetLevels;\n  var ancestorLevel = this.level - offsetLevels;\n  var ancestorX = Math.floor(this.x / divisor);\n  var ancestorY = Math.floor(this.y / divisor);\n\n  if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    var ancestorZ = Math.floor(this.z / divisor);\n\n    return new ImplicitTileCoordinates({\n      subdivisionScheme: this.subdivisionScheme,\n      subtreeLevels: this.subtreeLevels,\n      level: ancestorLevel,\n      x: ancestorX,\n      y: ancestorY,\n      z: ancestorZ,\n    });\n  }\n\n  // Quadtree\n  return new ImplicitTileCoordinates({\n    subdivisionScheme: this.subdivisionScheme,\n    subtreeLevels: this.subtreeLevels,\n    level: ancestorLevel,\n    x: ancestorX,\n    y: ancestorY,\n  });\n};\n\n/**\n * Compute the (level, x, y, [z]) offset to a descendant\n *\n * @param {ImplicitTileCoordinates} descendantCoordinates The descendant coordinates\n * @returns {ImplicitTileCoordinates} The offset between the ancestor and the descendant\n */\nImplicitTileCoordinates.prototype.getOffsetCoordinates = function (\n  descendantCoordinates\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("descendantCoordinates", descendantCoordinates);\n  if (\n    !this.isEqual(descendantCoordinates) &&\n    !this.isAncestor(descendantCoordinates)\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("this is not an ancestor of descendant");\n  }\n  checkMatchingSubtreeShape(this, descendantCoordinates);\n  //>>includeEnd(\'debug\');\n\n  var offsetLevel = descendantCoordinates.level - this.level;\n  var dimensionAtOffsetLevel = 1 << offsetLevel;\n\n  var offsetX = descendantCoordinates.x % dimensionAtOffsetLevel;\n  var offsetY = descendantCoordinates.y % dimensionAtOffsetLevel;\n\n  if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    var offsetZ = descendantCoordinates.z % dimensionAtOffsetLevel;\n\n    return new ImplicitTileCoordinates({\n      subdivisionScheme: this.subdivisionScheme,\n      subtreeLevels: this.subtreeLevels,\n      level: offsetLevel,\n      x: offsetX,\n      y: offsetY,\n      z: offsetZ,\n    });\n  }\n\n  // Quadtree\n  return new ImplicitTileCoordinates({\n    subdivisionScheme: this.subdivisionScheme,\n    subtreeLevels: this.subtreeLevels,\n    level: offsetLevel,\n    x: offsetX,\n    y: offsetY,\n  });\n};\n\n/**\n * Given the morton index of the child, compute the coordinates of the child.\n * This is a special case of {@link ImplicitTileCoordinates#getDescendantCoordinates}.\n *\n * @param {Number} childIndex The morton index of the child tile relative to its parent\n * @returns {ImplicitTileCoordinates} The tile coordinates of the child\n * @private\n */\nImplicitTileCoordinates.prototype.getChildCoordinates = function (childIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("childIndex", childIndex);\n  var branchingFactor = _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].getBranchingFactor */ .Z.getBranchingFactor(\n    this.subdivisionScheme\n  );\n  if (childIndex < 0 || branchingFactor <= childIndex) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "childIndex must be at least 0 and less than " + branchingFactor\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var level = this.level + 1;\n  var x = 2 * this.x + (childIndex % 2);\n  var y = 2 * this.y + (Math.floor(childIndex / 2) % 2);\n\n  if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    var z = 2 * this.z + (Math.floor(childIndex / 4) % 2);\n    return new ImplicitTileCoordinates({\n      subdivisionScheme: this.subdivisionScheme,\n      subtreeLevels: this.subtreeLevels,\n      level: level,\n      x: x,\n      y: y,\n      z: z,\n    });\n  }\n\n  // Quadtree\n  return new ImplicitTileCoordinates({\n    subdivisionScheme: this.subdivisionScheme,\n    subtreeLevels: this.subtreeLevels,\n    level: level,\n    x: x,\n    y: y,\n  });\n};\n\n/**\n * Get the coordinates of the subtree that contains this tile. If the tile is\n * the root of the subtree, the root of the subtree is returned.\n *\n * @returns {ImplicitTileCoordinates} The subtree that contains this tile\n * @private\n */\nImplicitTileCoordinates.prototype.getSubtreeCoordinates = function () {\n  return this.getAncestorCoordinates(this.level % this.subtreeLevels);\n};\n\n/**\n * Get the coordinates of the parent subtree that contains this tile\n *\n * @returns {ImplicitTileCoordinates} The parent subtree that contains this tile\n * @private\n */\nImplicitTileCoordinates.prototype.getParentSubtreeCoordinates = function () {\n  return this.getAncestorCoordinates(\n    (this.level % this.subtreeLevels) + this.subtreeLevels\n  );\n};\n\n/**\n * Returns whether this tile is an ancestor of another tile\n *\n * @param {ImplicitTileCoordinates} descendantCoordinates the descendant coordinates\n * @returns {Boolean} <code>true</code> if this tile is an ancestor of the other tile\n * @private\n */\nImplicitTileCoordinates.prototype.isAncestor = function (\n  descendantCoordinates\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("descendantCoordinates", descendantCoordinates);\n  checkMatchingSubtreeShape(this, descendantCoordinates);\n  //>>includeEnd(\'debug\');\n\n  var levelDifference = descendantCoordinates.level - this.level;\n  if (levelDifference <= 0) {\n    return false;\n  }\n\n  var ancestorX = descendantCoordinates.x >> levelDifference;\n  var ancestorY = descendantCoordinates.y >> levelDifference;\n  var isAncestorX = this.x === ancestorX;\n  var isAncestorY = this.y === ancestorY;\n\n  if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    var ancestorZ = descendantCoordinates.z >> levelDifference;\n    var isAncestorZ = this.z === ancestorZ;\n    return isAncestorX && isAncestorY && isAncestorZ;\n  }\n\n  // Quadtree\n  return isAncestorX && isAncestorY;\n};\n\n/**\n * Returns whether the provided coordinates are equal to this coordinate\n *\n * @param {ImplicitTileCoordinates} otherCoordinates the other coordinates\n * @returns {Boolean} <code>true</code> if the coordinates are equal\n * @private\n */\nImplicitTileCoordinates.prototype.isEqual = function (otherCoordinates) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("otherCoordinates", otherCoordinates);\n  //>>includeEnd(\'debug\');\n\n  return (\n    this.subdivisionScheme === otherCoordinates.subdivisionScheme &&\n    this.subtreeLevels === otherCoordinates.subtreeLevels &&\n    this.level === otherCoordinates.level &&\n    this.x === otherCoordinates.x &&\n    this.y === otherCoordinates.y &&\n    (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE\n      ? this.z === otherCoordinates.z\n      : true)\n  );\n};\n\n/**\n * Returns whether this tile is the root of the implicit tileset\n *\n * @returns {Boolean} <code>true</code> if this tile is the root\n * @private\n */\nImplicitTileCoordinates.prototype.isImplicitTilesetRoot = function () {\n  return this.level === 0;\n};\n\n/**\n * Returns whether this tile is the root of the subtree\n *\n * @returns {Boolean} <code>true</code> if this tile is the root of the subtree\n * @private\n */\nImplicitTileCoordinates.prototype.isSubtreeRoot = function () {\n  return this.level % this.subtreeLevels === 0;\n};\n\n/**\n * Returns whether this tile is on the last row of tiles in the subtree\n *\n * @returns {Boolean} <code>true</code> if this tile is on the last row of tiles in the subtree\n * @private\n */\nImplicitTileCoordinates.prototype.isBottomOfSubtree = function () {\n  return this.level % this.subtreeLevels === this.subtreeLevels - 1;\n};\n\n/**\n * Get a dictionary of values for templating into an implicit template URI.\n *\n * @returns {Object} An object suitable for use with {@link Resource#getDerivedResource}\n * @private\n */\nImplicitTileCoordinates.prototype.getTemplateValues = function () {\n  var values = {\n    level: this.level,\n    x: this.x,\n    y: this.y,\n  };\n  if (this.subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    values.z = this.z;\n  }\n\n  return values;\n};\n\nvar scratchCoordinatesArray = [0, 0, 0];\n\n/**\n * Given a level number, morton index, and whether the tileset is an\n * octree/quadtree, compute the (level, x, y, [z]) coordinates\n *\n * @param {ImplicitSubdivisionScheme} subdivisionScheme Whether the coordinates are for a quadtree or octree\n * @param {Number} subtreeLevels The number of distinct levels within the coordinate\'s subtree\n * @param {Number} level The level of the tree\n * @param {Number} mortonIndex The morton index of the tile.\n * @returns {ImplicitTileCoordinates} The coordinates of the tile with the given Morton index\n * @private\n */\nImplicitTileCoordinates.fromMortonIndex = function (\n  subdivisionScheme,\n  subtreeLevels,\n  level,\n  mortonIndex\n) {\n  var coordinatesArray;\n  if (subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    coordinatesArray = _Core_MortonOrder_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].decode3D */ .Z.decode3D(\n      mortonIndex,\n      scratchCoordinatesArray\n    );\n    return new ImplicitTileCoordinates({\n      subdivisionScheme: subdivisionScheme,\n      subtreeLevels: subtreeLevels,\n      level: level,\n      x: coordinatesArray[0],\n      y: coordinatesArray[1],\n      z: coordinatesArray[2],\n    });\n  }\n\n  coordinatesArray = _Core_MortonOrder_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].decode2D */ .Z.decode2D(mortonIndex, scratchCoordinatesArray);\n  return new ImplicitTileCoordinates({\n    subdivisionScheme: subdivisionScheme,\n    subtreeLevels: subtreeLevels,\n    level: level,\n    x: coordinatesArray[0],\n    y: coordinatesArray[1],\n  });\n};\n\n/**\n * Given a tile index and whether the tileset is an octree/quadtree, compute\n * the (level, x, y, [z]) coordinates\n *\n * @param {ImplicitSubdivisionScheme} subdivisionScheme Whether the coordinates are for a quadtree or octree\n * @param {Number} subtreeLevels The number of distinct levels within the coordinate\'s subtree\n * @param {Number} tileIndex The tile\'s index\n * @returns {ImplicitTileCoordinates} The coordinates of the tile with the given tile index\n * @private\n */\nImplicitTileCoordinates.fromTileIndex = function (\n  subdivisionScheme,\n  subtreeLevels,\n  tileIndex\n) {\n  var level;\n  var levelOffset;\n  var mortonIndex;\n\n  if (subdivisionScheme === _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].OCTREE */ .Z.OCTREE) {\n    // Node count up to octree level: (8^L - 1) / (8-1)\n    // (8^L - 1) / (8-1) <= X < (8^(L+1) - 1) / (8-1)\n    // 8^L <= (7x + 1) < 8^(L+1)\n    // L <= log8(7x + 1) < L + 1\n    // L = floor(log8(7x + 1))\n    // L = floor(log2(7x + 1) / log2(8))\n    // L = floor(log2(7x + 1) / 3)\n    level = Math.floor(_Core_Math_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].log2 */ .Z.log2(7 * tileIndex + 1) / 3);\n    levelOffset = ((1 << (3 * level)) - 1) / 7;\n    mortonIndex = tileIndex - levelOffset;\n  } else {\n    // Node count up to quadtree level: (4^L - 1) / (4-1)\n    // (4^L - 1) / (4-1) <= X < (4^(L+1) - 1) / (4-1)\n    // 4^L <= (3x + 1) < 4^(L+1)\n    // L <= log4(3x + 1) < L + 1\n    // L = floor(log4(3x + 1))\n    // L = floor(log2(3x + 1) / log2(4))\n    // L = floor(log2(3x + 1) / 2)\n    level = Math.floor(_Core_Math_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].log2 */ .Z.log2(3 * tileIndex + 1) / 2);\n    levelOffset = ((1 << (2 * level)) - 1) / 3;\n    mortonIndex = tileIndex - levelOffset;\n  }\n\n  return ImplicitTileCoordinates.fromMortonIndex(\n    subdivisionScheme,\n    subtreeLevels,\n    level,\n    mortonIndex\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75692\n')},46433:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ImplicitTileMetadata; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n\n\n\n/**\n * Metadata about a 3D tile, from a <code>3DTILES_metadata</code> extension\n * within a subtree from the <code>3DTILES_implicit_tiling</code> extension\n * <p>\n * This class is used in place of a {@link TileMetadata} object, as implicit\n * tile metadata is stored in a {@link MetadataTable} rather than a JSON object.\n * </p>\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles\n * </p>\n *\n * @param {ImplicitSubtree} options.implicitSubtree The implicit subtree the tile belongs to. It is assumed that the subtree\'s readyPromise has already resolved.\n * @param {ImplicitTileCoordinates} options.implicitCoordinates Implicit tiling coordinates for the tile.\n * @param {MetadataClass} [options.class] The class that the tile metadata conforms to.\n *\n * @alias ImplicitTileMetadata\n * @constructor\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction ImplicitTileMetadata(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.implicitSubtree", options.implicitSubtree);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object(\n    "options.implicitCoordinates",\n    options.implicitCoordinates\n  );\n  //>>includeEnd(\'debug\');\n\n  this._class = options.class;\n\n  var subtree = options.implicitSubtree;\n  this._metadataTable = subtree.metadataTable;\n  this._entityId = subtree.getEntityId(options.implicitCoordinates);\n\n  var subtreeExtension = subtree.metadataExtension;\n  this._extensions = subtreeExtension.extensions;\n  this._extras = subtreeExtension.extras;\n}\n\nObject.defineProperties(ImplicitTileMetadata.prototype, {\n  /**\n   * The class that properties conform to.\n   *\n   * @memberof ImplicitTileMetadata.prototype\n   * @type {MetadataClass}\n   * @readonly\n   */\n  class: {\n    get: function () {\n      return this._class;\n    },\n  },\n\n  /**\n   * Extras in the JSON object.\n   *\n   * @memberof ImplicitTileMetadata.prototype\n   * @type {*}\n   * @readonly\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * Extensions in the JSON object.\n   *\n   * @memberof ImplicitTileMetadata.prototype\n   * @type {Object}\n   * @readonly\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/**\n * Returns whether the tile has this property.\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {Boolean} Whether the tile has this property.\n * @private\n */\nImplicitTileMetadata.prototype.hasProperty = function (propertyId) {\n  return this._metadataTable.hasProperty(propertyId);\n};\n\n/**\n * Returns whether the tile has a property with the given semantic.\n *\n * @param {String} semantic The case-sensitive semantic of the property.\n * @returns {Boolean} Whether the tile has a property with the given semantic.\n * @private\n */\nImplicitTileMetadata.prototype.hasPropertyBySemantic = function (semantic) {\n  return this._metadataTable.hasPropertyBySemantic(semantic);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {String[]} [results] An array into which to store the results.\n * @returns {String[]} The property IDs.\n * @private\n */\nImplicitTileMetadata.prototype.getPropertyIds = function (results) {\n  return this._metadataTable.getPropertyIds(results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n * <p>\n * If the property is normalized the normalized value is returned.\n * </p>\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.\n * @private\n */\nImplicitTileMetadata.prototype.getProperty = function (propertyId) {\n  return this._metadataTable.getProperty(this._entityId, propertyId);\n};\n\n/**\n * Sets the value of the property with the given ID.\n * <p>\n * If the property is normalized a normalized value must be provided to this function.\n * </p>\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {Boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitTileMetadata.prototype.setProperty = function (propertyId, value) {\n  return this._metadataTable.setProperty(this._entityId, propertyId, value);\n};\n\n/**\n * Returns a copy of the value of the property with the given semantic.\n *\n * @param {String} semantic The case-sensitive semantic of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.\n * @private\n */\nImplicitTileMetadata.prototype.getPropertyBySemantic = function (semantic) {\n  return this._metadataTable.getPropertyBySemantic(this._entityId, semantic);\n};\n\n/**\n * Sets the value of the property with the given semantic.\n *\n * @param {String} semantic The case-sensitive semantic of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {Boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n * @private\n */\nImplicitTileMetadata.prototype.setPropertyBySemantic = function (\n  semantic,\n  value\n) {\n  return this._metadataTable.setPropertyBySemantic(\n    this._entityId,\n    semantic,\n    value\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46433\n')},14255:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ImplicitTileset; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83856);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68985);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9407);\n/* harmony import */ var _hasExtension_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81326);\n/* harmony import */ var _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10149);\n\n\n\n\n\n\n\n\n/**\n * An ImplicitTileset is a simple struct that stores information about the\n * structure of a single implicit tileset. This includes template URIs for\n * locating resources, details from the implicit root tile (bounding volume,\n * geometricError, etc.), and details about the subtrees (e.g. subtreeLevels,\n * subdivisionScheme).\n *\n * @alias ImplicitTileset\n * @constructor\n *\n * @param {Resource} baseResource The base resource for the tileset\n * @param {Object} tileJson The JSON header of the tile with the 3DTILES_implicit_tiling extension.\n * @param {MetadataSchema} [metadataSchema] The metadata schema containing the implicit tile metadata class.\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction ImplicitTileset(\n  baseResource,\n  tileJson,\n  metadataSchema\n) {\n  var extension = tileJson.extensions["3DTILES_implicit_tiling"];\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object(\n    \'tileJson.extensions["3DTILES_implicit_tiling"]\',\n    extension\n  );\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The base resource for the tileset. This is stored here as it is needed\n   * later when expanding Implicit3DTileContents so tile URLs are relative\n   * to the tileset, not the subtree file.\n   *\n   * @type {Resource}\n   * @readonly\n   * @private\n   */\n  this.baseResource = baseResource;\n\n  /**\n   * The geometric error of the root tile\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.geometricError = tileJson.geometricError;\n\n  /**\n   * The metadata schema containing the implicit tile metadata class.\n   *\n   * @type {MetadataSchema|undefined}\n   * @readonly\n   * @private\n   */\n  this.metadataSchema = metadataSchema;\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(tileJson.boundingVolume.box) &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(tileJson.boundingVolume.region) &&\n    !(0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(tileJson.boundingVolume, "3DTILES_bounding_volume_S2")\n  ) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Only box, region and 3DTILES_bounding_volume_S2 are supported for implicit tiling"\n    );\n  }\n\n  /**\n   * The JSON representation of a bounding volume. This is either a box or a\n   * region.\n   *\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  this.boundingVolume = tileJson.boundingVolume;\n\n  /**\n   * The refine strategy as a string, either \'ADD\' or \'REPLACE\'\n   *\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  this.refine = tileJson.refine;\n\n  /**\n   * Template URI for the subtree resources, e.g.\n   * <code>https://example.com/{level}/{x}/{y}.subtree</code>\n   *\n   * @type {Resource}\n   * @readonly\n   * @private\n   */\n\n  this.subtreeUriTemplate = new _Core_Resource_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z({ url: extension.subtrees.uri });\n\n  /**\n   * Template URIs for locating content resources, e.g.\n   * <code>https://example.com/{level}/{x}/{y}.b3dm</code>.\n   * <p>\n   * This is an array to support <code>3DTILES_multiple_contents</code>\n   * </p>\n   *\n   * @type {Resource[]}\n   * @readonly\n   * @private\n   */\n  this.contentUriTemplates = [];\n\n  /**\n   * Store a copy of the content headers, so properties such as\n   * <code>extras</code> or <code>extensions</code> are preserved when\n   * {@link Cesium3DTile}s are created for each tile.\n   * <p>\n   * This is an array to support <code>3DTILES_multiple_contents</code>\n   * </p>\n   *\n   * @type {Object[]}\n   * @readonly\n   * @private\n   */\n  this.contentHeaders = [];\n\n  var contentHeaders = gatherContentHeaders(tileJson);\n  for (var i = 0; i < contentHeaders.length; i++) {\n    var contentHeader = contentHeaders[i];\n    this.contentHeaders.push((0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(contentHeader, true));\n    var contentResource = new _Core_Resource_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z({ url: contentHeader.uri });\n    this.contentUriTemplates.push(contentResource);\n  }\n\n  /**\n   * The maximum number of contents as well as content availability bitstreams.\n   * This is used for loop bounds when checking content availability.\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.contentCount = this.contentHeaders.length;\n\n  /**\n   * Stores a copy of the root implicit tile\'s JSON header. This is used\n   * as a template for creating {@link Cesium3DTile}s. The following properties\n   * are removed:\n   *\n   * <ul>\n   * <li><code>tile.extensions["3DTILES_implicit_tiling"]</code> to prevent infinite loops of implicit tiling</li>\n   * <li><code>tile.content</code> since this is handled separately</li>\n   * <li><code>tile.extensions["3DTILES_multiple_contents"]</code>, again\n   *  because contents are handled separately</li>\n   * </ul>\n   *\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  this.tileHeader = makeTileHeaderTemplate(tileJson);\n\n  /**\n   * The subdivision scheme for this implicit tileset; either OCTREE or QUADTREE\n   *\n   * @type {ImplicitSubdivisionScheme}\n   * @readonly\n   * @private\n   */\n  this.subdivisionScheme =\n    _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z[extension.subdivisionScheme];\n\n  /**\n   * The branching factor for this tileset. Either 4 for quadtrees or 8 for\n   * octrees.\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.branchingFactor = _ImplicitSubdivisionScheme_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].getBranchingFactor */ .Z.getBranchingFactor(\n    this.subdivisionScheme\n  );\n\n  /**\n   * How many distinct levels within each subtree. For example, a quadtree\n   * with subtreeLevels = 2 will have 5 nodes per quadtree (1 root + 4 children)\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.subtreeLevels = extension.subtreeLevels;\n\n  /**\n   * The deepest level of any available tile in the entire tileset.\n   *\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  this.maximumLevel = extension.maximumLevel;\n}\n\n/**\n * Gather JSON headers for all contents in the tile.\n * This handles both regular tiles and tiles with the\n * `3DTILES_multiple_contents` extension\n *\n * @param {Object} tileJson The JSON header of the tile with the 3DTILES_implicit_tiling extension.\n * @return {Object[]} An array of JSON headers for the contents of each tile\n * @private\n */\nfunction gatherContentHeaders(tileJson) {\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(tileJson, "3DTILES_multiple_contents")) {\n    return tileJson.extensions["3DTILES_multiple_contents"].content;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(tileJson.content)) {\n    return [tileJson.content];\n  }\n\n  return [];\n}\n\nfunction makeTileHeaderTemplate(tileJson) {\n  var template = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(tileJson, true);\n\n  // remove the implicit tiling extension to prevent infinite loops\n  delete template.extensions["3DTILES_implicit_tiling"];\n\n  // content is handled separately, so remove content-related properties\n  delete template.content;\n  delete template.extensions["3DTILES_multiple_contents"];\n\n  // if there are no other extensions, remove the extensions property to\n  // keep each tile simple\n  if (Object.keys(template.extensions).length === 0) {\n    delete template.extensions;\n  }\n\n  return template;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14255\n')},57325:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n\n\n/**\n * An enum describing the built-in instance attribute semantics.\n *\n * @enum {String}\n *\n * @private\n */\nvar InstanceAttributeSemantic = {\n  /**\n   * Per-instance translation.\n   *\n   * @type {String}\n   * @constant\n   */\n  TRANSLATION: "TRANSLATION",\n\n  /**\n   * Per-instance rotation.\n   *\n   * @type {String}\n   * @constant\n   */\n  ROTATION: "ROTATION",\n\n  /**\n   * Per-instance scale.\n   *\n   * @type {String}\n   * @constant\n   */\n  SCALE: "SCALE",\n\n  /**\n   * Per-instance feature ID.\n   *\n   * @type {String}\n   * @constant\n   */\n  FEATURE_ID: "FEATURE_ID",\n};\n\n/**\n * Gets the instance attribute semantic matching the glTF attribute semantic.\n *\n * @returns {InstanceAttributeSemantic} The instance attribute semantic, or undefined if there is no match.\n *\n * @private\n */\nInstanceAttributeSemantic.fromGltfSemantic = function (gltfSemantic) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("gltfSemantic", gltfSemantic);\n  //>>includeEnd(\'debug\')\n\n  var semantic = gltfSemantic;\n\n  // Strip the set index from the semantic\n  var setIndexRegex = /^(\\w+)_\\d+$/;\n  var setIndexMatch = setIndexRegex.exec(gltfSemantic);\n  if (setIndexMatch !== null) {\n    semantic = setIndexMatch[1];\n  }\n\n  switch (semantic) {\n    case "TRANSLATION":\n      return InstanceAttributeSemantic.TRANSLATION;\n    case "ROTATION":\n      return InstanceAttributeSemantic.ROTATION;\n    case "SCALE":\n      return InstanceAttributeSemantic.SCALE;\n    case "_FEATURE_ID":\n      return InstanceAttributeSemantic.FEATURE_ID;\n  }\n\n  return undefined;\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(InstanceAttributeSemantic));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTczMjUuanMiLCJtYXBwaW5ncyI6IjtBQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDJGQUFtQjtBQUNyQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5REFBZSx3Q0FBd0MsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9JbnN0YW5jZUF0dHJpYnV0ZVNlbWFudGljLmpzPzc5YzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoZWNrIGZyb20gXCIuLi9Db3JlL0NoZWNrLmpzXCI7XG5cbi8qKlxuICogQW4gZW51bSBkZXNjcmliaW5nIHRoZSBidWlsdC1pbiBpbnN0YW5jZSBhdHRyaWJ1dGUgc2VtYW50aWNzLlxuICpcbiAqIEBlbnVtIHtTdHJpbmd9XG4gKlxuICogQHByaXZhdGVcbiAqL1xudmFyIEluc3RhbmNlQXR0cmlidXRlU2VtYW50aWMgPSB7XG4gIC8qKlxuICAgKiBQZXItaW5zdGFuY2UgdHJhbnNsYXRpb24uXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgVFJBTlNMQVRJT046IFwiVFJBTlNMQVRJT05cIixcblxuICAvKipcbiAgICogUGVyLWluc3RhbmNlIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFJPVEFUSU9OOiBcIlJPVEFUSU9OXCIsXG5cbiAgLyoqXG4gICAqIFBlci1pbnN0YW5jZSBzY2FsZS5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBTQ0FMRTogXCJTQ0FMRVwiLFxuXG4gIC8qKlxuICAgKiBQZXItaW5zdGFuY2UgZmVhdHVyZSBJRC5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQGNvbnN0YW50XG4gICAqL1xuICBGRUFUVVJFX0lEOiBcIkZFQVRVUkVfSURcIixcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgaW5zdGFuY2UgYXR0cmlidXRlIHNlbWFudGljIG1hdGNoaW5nIHRoZSBnbFRGIGF0dHJpYnV0ZSBzZW1hbnRpYy5cbiAqXG4gKiBAcmV0dXJucyB7SW5zdGFuY2VBdHRyaWJ1dGVTZW1hbnRpY30gVGhlIGluc3RhbmNlIGF0dHJpYnV0ZSBzZW1hbnRpYywgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIG1hdGNoLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkluc3RhbmNlQXR0cmlidXRlU2VtYW50aWMuZnJvbUdsdGZTZW1hbnRpYyA9IGZ1bmN0aW9uIChnbHRmU2VtYW50aWMpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgQ2hlY2sudHlwZU9mLnN0cmluZyhcImdsdGZTZW1hbnRpY1wiLCBnbHRmU2VtYW50aWMpO1xuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKVxuXG4gIHZhciBzZW1hbnRpYyA9IGdsdGZTZW1hbnRpYztcblxuICAvLyBTdHJpcCB0aGUgc2V0IGluZGV4IGZyb20gdGhlIHNlbWFudGljXG4gIHZhciBzZXRJbmRleFJlZ2V4ID0gL14oXFx3KylfXFxkKyQvO1xuICB2YXIgc2V0SW5kZXhNYXRjaCA9IHNldEluZGV4UmVnZXguZXhlYyhnbHRmU2VtYW50aWMpO1xuICBpZiAoc2V0SW5kZXhNYXRjaCAhPT0gbnVsbCkge1xuICAgIHNlbWFudGljID0gc2V0SW5kZXhNYXRjaFsxXTtcbiAgfVxuXG4gIHN3aXRjaCAoc2VtYW50aWMpIHtcbiAgICBjYXNlIFwiVFJBTlNMQVRJT05cIjpcbiAgICAgIHJldHVybiBJbnN0YW5jZUF0dHJpYnV0ZVNlbWFudGljLlRSQU5TTEFUSU9OO1xuICAgIGNhc2UgXCJST1RBVElPTlwiOlxuICAgICAgcmV0dXJuIEluc3RhbmNlQXR0cmlidXRlU2VtYW50aWMuUk9UQVRJT047XG4gICAgY2FzZSBcIlNDQUxFXCI6XG4gICAgICByZXR1cm4gSW5zdGFuY2VBdHRyaWJ1dGVTZW1hbnRpYy5TQ0FMRTtcbiAgICBjYXNlIFwiX0ZFQVRVUkVfSURcIjpcbiAgICAgIHJldHVybiBJbnN0YW5jZUF0dHJpYnV0ZVNlbWFudGljLkZFQVRVUkVfSUQ7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShJbnN0YW5jZUF0dHJpYnV0ZVNlbWFudGljKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///57325\n')},83472:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52323);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(82982);\n/* harmony import */ var _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11954);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50491);\n/* harmony import */ var _Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12540);\n/* harmony import */ var _Core_getStringFromTypedArray_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(66659);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72248);\n/* harmony import */ var _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(87811);\n/* harmony import */ var _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82968);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(9407);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(95555);\n/* harmony import */ var _Core_TranslationRotationScale_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(72043);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(8379);\n/* harmony import */ var _Axis_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(66577);\n/* harmony import */ var _Cesium3DTileBatchTable_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(84020);\n/* harmony import */ var _Cesium3DTileFeature_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(52381);\n/* harmony import */ var _Cesium3DTileFeatureTable_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(79553);\n/* harmony import */ var _ModelInstanceCollection_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(41074);\n/* harmony import */ var _ModelAnimationLoop_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(61841);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/TileFormats/Instanced3DModel|Instanced 3D Model}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Instanced3DModel3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Instanced3DModel3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._modelInstanceCollection = undefined;\n  this._batchTable = undefined;\n  this._features = undefined;\n\n  this.featurePropertiesDirty = false;\n  this._groupMetadata = undefined;\n\n  initialize(this, arrayBuffer, byteOffset);\n}\n\n// This can be overridden for testing purposes\nInstanced3DModel3DTileContent._deprecationWarning = _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z;\n\nObject.defineProperties(Instanced3DModel3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return this._batchTable.featuresLength;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      var model = this._modelInstanceCollection._model;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(model)) {\n        return model.trianglesLength;\n      }\n      return 0;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      var model = this._modelInstanceCollection._model;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(model)) {\n        return model.geometryByteLength;\n      }\n      return 0;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      var model = this._modelInstanceCollection._model;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(model)) {\n        return model.texturesByteLength;\n      }\n      return 0;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return this._batchTable.memorySizeInBytes;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._modelInstanceCollection.readyPromise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    },\n  },\n\n  groupMetadata: {\n    get: function () {\n      return this._groupMetadata;\n    },\n    set: function (value) {\n      this._groupMetadata = value;\n    },\n  },\n});\n\nfunction getPickIdCallback(content) {\n  return function () {\n    return content._batchTable.getPickId();\n  };\n}\n\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nvar propertyScratch1 = new Array(4);\nvar propertyScratch2 = new Array(4);\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  var byteStart = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(byteOffset, 0);\n  byteOffset = byteStart;\n\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  var version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n      "Only Instanced 3D Model version 1 is supported. Version " +\n        version +\n        " is not."\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  var byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  if (featureTableJsonByteLength === 0) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n      "featureTableJsonByteLength is zero, the feature table must be defined."\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var gltfFormat = view.getUint32(byteOffset, true);\n  if (gltfFormat !== 1 && gltfFormat !== 0) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n      "Only glTF format 0 (uri) or 1 (embedded) are supported. Format " +\n        gltfFormat +\n        " is not."\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  var featureTableJson = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(\n    uint8Array,\n    byteOffset,\n    featureTableJsonByteLength\n  );\n  byteOffset += featureTableJsonByteLength;\n\n  var featureTableBinary = new Uint8Array(\n    arrayBuffer,\n    byteOffset,\n    featureTableBinaryByteLength\n  );\n  byteOffset += featureTableBinaryByteLength;\n\n  var featureTable = new _Cesium3DTileFeatureTable_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z(\n    featureTableJson,\n    featureTableBinary\n  );\n  var instancesLength = featureTable.getGlobalProperty("INSTANCES_LENGTH");\n  featureTable.featuresLength = instancesLength;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(instancesLength)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n      "Feature table global property: INSTANCES_LENGTH must be defined"\n    );\n  }\n\n  var batchTableJson;\n  var batchTableBinary;\n  if (batchTableJsonByteLength > 0) {\n    batchTableJson = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(\n      uint8Array,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(\n        arrayBuffer,\n        byteOffset,\n        batchTableBinaryByteLength\n      );\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  content._batchTable = new _Cesium3DTileBatchTable_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(\n    content,\n    instancesLength,\n    batchTableJson,\n    batchTableBinary\n  );\n\n  var gltfByteLength = byteStart + byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n      "glTF byte length is zero, i3dm must have a glTF to instance."\n    );\n  }\n\n  var gltfView;\n  if (byteOffset % 4 === 0) {\n    gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    Instanced3DModel3DTileContent._deprecationWarning(\n      "i3dm-glb-unaligned",\n      "The embedded glb is not aligned to a 4-byte boundary."\n    );\n    gltfView = new Uint8Array(\n      uint8Array.subarray(byteOffset, byteOffset + gltfByteLength)\n    );\n  }\n\n  var tileset = content._tileset;\n\n  // Create model instance collection\n  var collectionOptions = {\n    instances: new Array(instancesLength),\n    batchTable: content._batchTable,\n    cull: false, // Already culled by 3D Tiles\n    url: undefined,\n    requestType: _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].TILES3D */ .Z.TILES3D,\n    gltf: undefined,\n    basePath: undefined,\n    incrementallyLoadTextures: false,\n    upAxis: tileset._gltfUpAxis,\n    forwardAxis: _Axis_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].X */ .Z.X,\n    opaquePass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE, // Draw opaque portions during the 3D Tiles pass\n    pickIdLoaded: getPickIdCallback(content),\n    imageBasedLightingFactor: tileset.imageBasedLightingFactor,\n    lightColor: tileset.lightColor,\n    luminanceAtZenith: tileset.luminanceAtZenith,\n    sphericalHarmonicCoefficients: tileset.sphericalHarmonicCoefficients,\n    specularEnvironmentMaps: tileset.specularEnvironmentMaps,\n    backFaceCulling: tileset.backFaceCulling,\n    showOutline: tileset.showOutline,\n  };\n\n  if (gltfFormat === 0) {\n    var gltfUrl = (0,_Core_getStringFromTypedArray_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(gltfView);\n\n    // We need to remove padding from the end of the model URL in case this tile was part of a composite tile.\n    // This removes all white space and null characters from the end of the string.\n    gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, "");\n    collectionOptions.url = content._resource.getDerivedResource({\n      url: gltfUrl,\n    });\n  } else {\n    collectionOptions.gltf = gltfView;\n    collectionOptions.basePath = content._resource.clone();\n  }\n\n  var eastNorthUp = featureTable.getGlobalProperty("EAST_NORTH_UP");\n\n  var rtcCenter;\n  var rtcCenterArray = featureTable.getGlobalProperty(\n    "RTC_CENTER",\n    _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n    3\n  );\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(rtcCenterArray)) {\n    rtcCenter = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unpack */ .Z.unpack(rtcCenterArray);\n  }\n\n  var instances = collectionOptions.instances;\n  var instancePosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  var instancePositionArray = new Array(3);\n  var instanceNormalRight = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  var instanceNormalUp = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  var instanceNormalForward = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  var instanceRotation = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z();\n  var instanceQuaternion = new _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n  var instanceScale = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  var instanceTranslationRotationScale = new _Core_TranslationRotationScale_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\n  var instanceTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n  for (var i = 0; i < instancesLength; i++) {\n    // Get the instance position\n    var position = featureTable.getProperty(\n      "POSITION",\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n      3,\n      i,\n      propertyScratch1\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(position)) {\n      position = instancePositionArray;\n      var positionQuantized = featureTable.getProperty(\n        "POSITION_QUANTIZED",\n        _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n        3,\n        i,\n        propertyScratch1\n      );\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(positionQuantized)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n          "Either POSITION or POSITION_QUANTIZED must be defined for each instance."\n        );\n      }\n      var quantizedVolumeOffset = featureTable.getGlobalProperty(\n        "QUANTIZED_VOLUME_OFFSET",\n        _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n        3\n      );\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(quantizedVolumeOffset)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n          "Global property: QUANTIZED_VOLUME_OFFSET must be defined for quantized positions."\n        );\n      }\n      var quantizedVolumeScale = featureTable.getGlobalProperty(\n        "QUANTIZED_VOLUME_SCALE",\n        _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n        3\n      );\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(quantizedVolumeScale)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n          "Global property: QUANTIZED_VOLUME_SCALE must be defined for quantized positions."\n        );\n      }\n      for (var j = 0; j < 3; j++) {\n        position[j] =\n          (positionQuantized[j] / 65535.0) * quantizedVolumeScale[j] +\n          quantizedVolumeOffset[j];\n      }\n    }\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unpack */ .Z.unpack(position, 0, instancePosition);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(rtcCenter)) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(instancePosition, rtcCenter, instancePosition);\n    }\n    instanceTranslationRotationScale.translation = instancePosition;\n\n    // Get the instance rotation\n    var normalUp = featureTable.getProperty(\n      "NORMAL_UP",\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n      3,\n      i,\n      propertyScratch1\n    );\n    var normalRight = featureTable.getProperty(\n      "NORMAL_RIGHT",\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n      3,\n      i,\n      propertyScratch2\n    );\n    var hasCustomOrientation = false;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(normalUp)) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(normalRight)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n          "To define a custom orientation, both NORMAL_UP and NORMAL_RIGHT must be defined."\n        );\n      }\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unpack */ .Z.unpack(normalUp, 0, instanceNormalUp);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unpack */ .Z.unpack(normalRight, 0, instanceNormalRight);\n      hasCustomOrientation = true;\n    } else {\n      var octNormalUp = featureTable.getProperty(\n        "NORMAL_UP_OCT32P",\n        _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n        2,\n        i,\n        propertyScratch1\n      );\n      var octNormalRight = featureTable.getProperty(\n        "NORMAL_RIGHT_OCT32P",\n        _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n        2,\n        i,\n        propertyScratch2\n      );\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(octNormalUp)) {\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(octNormalRight)) {\n          throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n            "To define a custom orientation with oct-encoded vectors, both NORMAL_UP_OCT32P and NORMAL_RIGHT_OCT32P must be defined."\n          );\n        }\n        _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].octDecodeInRange */ .Z.octDecodeInRange(\n          octNormalUp[0],\n          octNormalUp[1],\n          65535,\n          instanceNormalUp\n        );\n        _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].octDecodeInRange */ .Z.octDecodeInRange(\n          octNormalRight[0],\n          octNormalRight[1],\n          65535,\n          instanceNormalRight\n        );\n        hasCustomOrientation = true;\n      } else if (eastNorthUp) {\n        _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n          instancePosition,\n          _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].WGS84 */ .Z.WGS84,\n          instanceTransform\n        );\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getMatrix3 */ .Z.getMatrix3(instanceTransform, instanceRotation);\n      } else {\n        _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(_Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].IDENTITY */ .Z.IDENTITY, instanceRotation);\n      }\n    }\n    if (hasCustomOrientation) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n        instanceNormalRight,\n        instanceNormalUp,\n        instanceNormalForward\n      );\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(instanceNormalForward, instanceNormalForward);\n      _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].setColumn */ .Z.setColumn(\n        instanceRotation,\n        0,\n        instanceNormalRight,\n        instanceRotation\n      );\n      _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].setColumn */ .Z.setColumn(\n        instanceRotation,\n        1,\n        instanceNormalUp,\n        instanceRotation\n      );\n      _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].setColumn */ .Z.setColumn(\n        instanceRotation,\n        2,\n        instanceNormalForward,\n        instanceRotation\n      );\n    }\n    _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].fromRotationMatrix */ .Z.fromRotationMatrix(instanceRotation, instanceQuaternion);\n    instanceTranslationRotationScale.rotation = instanceQuaternion;\n\n    // Get the instance scale\n    instanceScale = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(1.0, 1.0, 1.0, instanceScale);\n    var scale = featureTable.getProperty(\n      "SCALE",\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n      1,\n      i\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(scale)) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(instanceScale, scale, instanceScale);\n    }\n    var nonUniformScale = featureTable.getProperty(\n      "SCALE_NON_UNIFORM",\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n      3,\n      i,\n      propertyScratch1\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(nonUniformScale)) {\n      instanceScale.x *= nonUniformScale[0];\n      instanceScale.y *= nonUniformScale[1];\n      instanceScale.z *= nonUniformScale[2];\n    }\n    instanceTranslationRotationScale.scale = instanceScale;\n\n    // Get the batchId\n    var batchId = featureTable.getProperty(\n      "BATCH_ID",\n      _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n      1,\n      i\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(batchId)) {\n      // If BATCH_ID semantic is undefined, batchId is just the instance number\n      batchId = i;\n    }\n\n    // Create the model matrix and the instance\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].fromTranslationRotationScale */ .Z.fromTranslationRotationScale(\n      instanceTranslationRotationScale,\n      instanceTransform\n    );\n    var modelMatrix = instanceTransform.clone();\n    instances[i] = {\n      modelMatrix: modelMatrix,\n      batchId: batchId,\n    };\n  }\n\n  content._modelInstanceCollection = new _ModelInstanceCollection_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z(\n    collectionOptions\n  );\n  content._modelInstanceCollection.readyPromise.then(function (collection) {\n    collection.activeAnimations.addAll({\n      loop: _ModelAnimationLoop_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].REPEAT */ .Z.REPEAT,\n    });\n  });\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n    for (var i = 0; i < featuresLength; ++i) {\n      features[i] = new _Cesium3DTileFeature_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z(content, i);\n    }\n    content._features = features;\n  }\n}\n\nInstanced3DModel3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return this._batchTable.hasProperty(batchId, name);\n};\n\nInstanced3DModel3DTileContent.prototype.getFeature = function (batchId) {\n  var featuresLength = this.featuresLength;\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "batchId is required and between zero and featuresLength - 1 (" +\n        (featuresLength - 1) +\n        ")."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nInstanced3DModel3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {\n  color = enabled ? color : _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].WHITE */ .Z.WHITE;\n  this._batchTable.setAllColor(color);\n};\n\nInstanced3DModel3DTileContent.prototype.applyStyle = function (style) {\n  this._batchTable.applyStyle(style);\n};\n\nInstanced3DModel3DTileContent.prototype.update = function (\n  tileset,\n  frameState\n) {\n  var commandStart = frameState.commandList.length;\n\n  // In the PROCESSING state we may be calling update() to move forward\n  // the content\'s resource loading.  In the READY state, it will\n  // actually generate commands.\n  this._batchTable.update(tileset, frameState);\n  this._modelInstanceCollection.modelMatrix = this._tile.computedTransform;\n  this._modelInstanceCollection.shadows = this._tileset.shadows;\n  this._modelInstanceCollection.lightColor = this._tileset.lightColor;\n  this._modelInstanceCollection.luminanceAtZenith = this._tileset.luminanceAtZenith;\n  this._modelInstanceCollection.sphericalHarmonicCoefficients = this._tileset.sphericalHarmonicCoefficients;\n  this._modelInstanceCollection.specularEnvironmentMaps = this._tileset.specularEnvironmentMaps;\n  this._modelInstanceCollection.backFaceCulling = this._tileset.backFaceCulling;\n  this._modelInstanceCollection.debugWireframe = this._tileset.debugWireframe;\n\n  var model = this._modelInstanceCollection._model;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(model)) {\n    // Update for clipping planes\n    var tilesetClippingPlanes = this._tileset.clippingPlanes;\n    model.referenceMatrix = this._tileset.clippingPlanesOriginMatrix;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(tilesetClippingPlanes) && this._tile.clippingPlanesDirty) {\n      // Dereference the clipping planes from the model if they are irrelevant - saves on shading\n      // Link/Dereference directly to avoid ownership checks.\n      model._clippingPlanes =\n        tilesetClippingPlanes.enabled && this._tile._isClipped\n          ? tilesetClippingPlanes\n          : undefined;\n    }\n\n    // If the model references a different ClippingPlaneCollection due to the tileset\'s collection being replaced with a\n    // ClippingPlaneCollection that gives this tile the same clipping status, update the model to use the new ClippingPlaneCollection.\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(tilesetClippingPlanes) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(model._clippingPlanes) &&\n      model._clippingPlanes !== tilesetClippingPlanes\n    ) {\n      model._clippingPlanes = tilesetClippingPlanes;\n    }\n  }\n\n  this._modelInstanceCollection.update(frameState);\n\n  // If any commands were pushed, add derived commands\n  var commandEnd = frameState.commandList.length;\n  if (\n    commandStart < commandEnd &&\n    (frameState.passes.render || frameState.passes.pick)\n  ) {\n    this._batchTable.addDerivedCommands(frameState, commandStart, false);\n  }\n};\n\nInstanced3DModel3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nInstanced3DModel3DTileContent.prototype.destroy = function () {\n  this._modelInstanceCollection =\n    this._modelInstanceCollection && this._modelInstanceCollection.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Instanced3DModel3DTileContent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///83472\n')},94229:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86511);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2932);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(88453);\n/* harmony import */ var _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(7571);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(13633);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(87233);\n/* harmony import */ var _StencilFunction_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(77053);\n/* harmony import */ var _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(81255);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction InvertClassification() {\n  this.previousFramebuffer = undefined;\n  this._previousFramebuffer = undefined;\n\n  this._texture = undefined;\n  this._classifiedTexture = undefined;\n  this._depthStencilTexture = undefined;\n  this._fbo = undefined;\n  this._fboClassified = undefined;\n\n  this._rsUnclassified = undefined;\n  this._rsClassified = undefined;\n\n  this._unclassifiedCommand = undefined;\n  this._classifiedCommand = undefined;\n  this._translucentCommand = undefined;\n\n  this._clearColorCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n    color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n    owner: this,\n  });\n  this._clearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n    color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0,\n  });\n\n  var that = this;\n  this._uniformMap = {\n    colorTexture: function () {\n      return that._texture;\n    },\n    depthTexture: function () {\n      return that._depthStencilTexture;\n    },\n    classifiedTexture: function () {\n      return that._classifiedTexture;\n    },\n  };\n}\n\nObject.defineProperties(InvertClassification.prototype, {\n  unclassifiedCommand: {\n    get: function () {\n      return this._unclassifiedCommand;\n    },\n  },\n});\n\nInvertClassification.isTranslucencySupported = function (context) {\n  return context.depthTexture && context.fragmentDepth;\n};\n\nvar rsUnclassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].EQUAL */ .Z.EQUAL,\n    frontOperation: {\n      fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].KEEP */ .Z.KEEP,\n      zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].KEEP */ .Z.KEEP,\n      zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].KEEP */ .Z.KEEP,\n    },\n    backFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].NEVER */ .Z.NEVER,\n    reference: 0,\n    mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n  },\n  blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n};\n\nvar rsClassified = {\n  depthMask: false,\n  stencilTest: {\n    enabled: true,\n    frontFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].NOT_EQUAL */ .Z.NOT_EQUAL,\n    frontOperation: {\n      fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].KEEP */ .Z.KEEP,\n      zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].KEEP */ .Z.KEEP,\n      zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].KEEP */ .Z.KEEP,\n    },\n    backFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].NEVER */ .Z.NEVER,\n    reference: 0,\n    mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n  },\n  blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n};\n\n// Set the 3D Tiles bit when rendering back into the scene\'s framebuffer. This is only needed if\n// invert classification does not use the scene\'s depth-stencil texture, which is the case if the invert\n// classification color is translucent.\nvar rsDefault = {\n  depthMask: true,\n  depthTest: {\n    enabled: true,\n  },\n  stencilTest: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].setCesium3DTileBit */ .Z.setCesium3DTileBit(),\n  stencilMask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n  blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n};\n\nvar translucentFS =\n  "#extension GL_EXT_frag_depth : enable\\n" +\n  "uniform sampler2D colorTexture;\\n" +\n  "uniform sampler2D depthTexture;\\n" +\n  "uniform sampler2D classifiedTexture;\\n" +\n  "varying vec2 v_textureCoordinates;\\n" +\n  "void main()\\n" +\n  "{\\n" +\n  "    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n" +\n  "    if (color.a == 0.0)\\n" +\n  "    {\\n" +\n  "        discard;\\n" +\n  "    }\\n" +\n  "    bool isClassified = all(equal(texture2D(classifiedTexture, v_textureCoordinates), vec4(0.0)));\\n" +\n  "#ifdef UNCLASSIFIED\\n" +\n  "    vec4 highlightColor = czm_invertClassificationColor;\\n" +\n  "    if (isClassified)\\n" +\n  "    {\\n" +\n  "        discard;\\n" +\n  "    }\\n" +\n  "#else\\n" +\n  "    vec4 highlightColor = vec4(1.0);\\n" +\n  "    if (!isClassified)\\n" +\n  "    {\\n" +\n  "        discard;\\n" +\n  "    }\\n" +\n  "#endif\\n" +\n  "    gl_FragColor = color * highlightColor;\\n" +\n  "    gl_FragDepthEXT = texture2D(depthTexture, v_textureCoordinates).r;\\n" +\n  "}\\n";\n\nvar opaqueFS =\n  "uniform sampler2D colorTexture;\\n" +\n  "varying vec2 v_textureCoordinates;\\n" +\n  "void main()\\n" +\n  "{\\n" +\n  "    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n" +\n  "    if (color.a == 0.0)\\n" +\n  "    {\\n" +\n  "        discard;\\n" +\n  "    }\\n" +\n  "#ifdef UNCLASSIFIED\\n" +\n  "    gl_FragColor = color * czm_invertClassificationColor;\\n" +\n  "#else\\n" +\n  "    gl_FragColor = color;\\n" +\n  "#endif\\n" +\n  "}\\n";\n\nInvertClassification.prototype.update = function (context) {\n  var texture = this._texture;\n  var previousFramebufferChanged =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(texture) || this.previousFramebuffer !== this._previousFramebuffer;\n  this._previousFramebuffer = this.previousFramebuffer;\n\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  var textureChanged =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(texture) || texture.width !== width || texture.height !== height;\n  if (textureChanged || previousFramebufferChanged) {\n    this._texture = this._texture && this._texture.destroy();\n    this._classifiedTexture =\n      this._classifiedTexture && this._classifiedTexture.destroy();\n    this._depthStencilTexture =\n      this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n    this._texture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      context: context,\n      width: width,\n      height: height,\n      pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].RGBA */ .Z.RGBA,\n      pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      sampler: new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n        wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n        wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n        minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].LINEAR */ .Z.LINEAR,\n        magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].LINEAR */ .Z.LINEAR,\n      }),\n    });\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)) {\n      this._classifiedTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].RGBA */ .Z.RGBA,\n        pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n        sampler: new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n          wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n          minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].LINEAR */ .Z.LINEAR,\n          magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].LINEAR */ .Z.LINEAR,\n        }),\n      });\n      this._depthStencilTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        context: context,\n        width: width,\n        height: height,\n        pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].DEPTH_STENCIL */ .Z.DEPTH_STENCIL,\n        pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].UNSIGNED_INT_24_8 */ .Z.UNSIGNED_INT_24_8,\n      });\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._fbo) || textureChanged || previousFramebufferChanged) {\n    this._fbo = this._fbo && this._fbo.destroy();\n    this._fboClassified = this._fboClassified && this._fboClassified.destroy();\n\n    var depthStencilTexture;\n    var depthStencilRenderbuffer;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)) {\n      depthStencilTexture = this._previousFramebuffer.depthStencilTexture;\n      depthStencilRenderbuffer = this._previousFramebuffer\n        .depthStencilRenderbuffer;\n    } else {\n      depthStencilTexture = this._depthStencilTexture;\n    }\n\n    this._fbo = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      context: context,\n      colorTextures: [this._texture],\n      depthStencilTexture: depthStencilTexture,\n      depthStencilRenderbuffer: depthStencilRenderbuffer,\n      destroyAttachments: false,\n    });\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)) {\n      this._fboClassified = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n        context: context,\n        colorTextures: [this._classifiedTexture],\n        depthStencilTexture: depthStencilTexture,\n        destroyAttachments: false,\n      });\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._rsUnclassified)) {\n    this._rsUnclassified = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromCache */ .Z.fromCache(rsUnclassified);\n    this._rsClassified = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromCache */ .Z.fromCache(rsClassified);\n    this._rsDefault = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromCache */ .Z.fromCache(rsDefault);\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._unclassifiedCommand) || previousFramebufferChanged) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._unclassifiedCommand)) {\n      this._unclassifiedCommand.shaderProgram =\n        this._unclassifiedCommand.shaderProgram &&\n        this._unclassifiedCommand.shaderProgram.destroy();\n      this._classifiedCommand.shaderProgram =\n        this._classifiedCommand.shaderProgram &&\n        this._classifiedCommand.shaderProgram.destroy();\n    }\n\n    var fs = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer) ? opaqueFS : translucentFS;\n    var unclassifiedFSSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n      defines: ["UNCLASSIFIED"],\n      sources: [fs],\n    });\n    var classifiedFSSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n      sources: [fs],\n    });\n    this._unclassifiedCommand = context.createViewportQuadCommand(\n      unclassifiedFSSource,\n      {\n        renderState: (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)\n          ? this._rsUnclassified\n          : this._rsDefault,\n        uniformMap: this._uniformMap,\n        owner: this,\n      }\n    );\n    this._classifiedCommand = context.createViewportQuadCommand(\n      classifiedFSSource,\n      {\n        renderState: (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)\n          ? this._rsClassified\n          : this._rsDefault,\n        uniformMap: this._uniformMap,\n        owner: this,\n      }\n    );\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._translucentCommand)) {\n      this._translucentCommand.shaderProgram =\n        this._translucentCommand.shaderProgram &&\n        this._translucentCommand.shaderProgram.destroy();\n    }\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)) {\n      this._translucentCommand = context.createViewportQuadCommand(\n        _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z,\n        {\n          renderState: this._rsUnclassified,\n          uniformMap: this._uniformMap,\n          owner: this,\n        }\n      );\n    }\n  }\n};\n\nInvertClassification.prototype.clear = function (context, passState) {\n  var framebuffer = passState.framebuffer;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)) {\n    passState.framebuffer = this._fbo;\n    this._clearColorCommand.execute(context, passState);\n  } else {\n    passState.framebuffer = this._fbo;\n    this._clearCommand.execute(context, passState);\n    passState.framebuffer = this._fboClassified;\n    this._clearCommand.execute(context, passState);\n  }\n\n  passState.framebuffer = framebuffer;\n};\n\nInvertClassification.prototype.executeClassified = function (\n  context,\n  passState\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._previousFramebuffer)) {\n    var framebuffer = passState.framebuffer;\n\n    passState.framebuffer = this._fboClassified;\n    this._translucentCommand.execute(context, passState);\n\n    passState.framebuffer = framebuffer;\n  }\n  this._classifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.executeUnclassified = function (\n  context,\n  passState\n) {\n  this._unclassifiedCommand.execute(context, passState);\n};\n\nInvertClassification.prototype.isDestroyed = function () {\n  return false;\n};\n\nInvertClassification.prototype.destroy = function () {\n  this._fbo = this._fbo && this._fbo.destroy();\n  this._texture = this._texture && this._texture.destroy();\n  this._depthStencilTexture =\n    this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(this._unclassifiedCommand)) {\n    this._unclassifiedCommand.shaderProgram =\n      this._unclassifiedCommand.shaderProgram &&\n      this._unclassifiedCommand.shaderProgram.destroy();\n    this._classifiedCommand.shaderProgram =\n      this._classifiedCommand.shaderProgram &&\n      this._classifiedCommand.shaderProgram.destroy();\n  }\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (InvertClassification);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94229\n')},43234:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _Core_IonResource_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(48604);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9407);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(13222);\n/* harmony import */ var _ArcGisMapServerImageryProvider_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(37741);\n/* harmony import */ var _BingMapsImageryProvider_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(59692);\n/* harmony import */ var _TileMapServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(80360);\n/* harmony import */ var _GoogleEarthEnterpriseMapsProvider_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(75611);\n/* harmony import */ var _MapboxImageryProvider_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(65657);\n/* harmony import */ var _SingleTileImageryProvider_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(57018);\n/* harmony import */ var _UrlTemplateImageryProvider_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(24855);\n/* harmony import */ var _WebMapServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(85200);\n/* harmony import */ var _WebMapTileServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(15583);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createFactory(Type) {\n  return function (options) {\n    return new Type(options);\n  };\n}\n\n// These values are the list of supported external imagery\n// assets in the Cesium ion beta. They are subject to change.\nvar ImageryProviderMapping = {\n  ARCGIS_MAPSERVER: createFactory(_ArcGisMapServerImageryProvider_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z),\n  BING: createFactory(_BingMapsImageryProvider_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z),\n  GOOGLE_EARTH: createFactory(_GoogleEarthEnterpriseMapsProvider_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z),\n  MAPBOX: createFactory(_MapboxImageryProvider_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z),\n  SINGLE_TILE: createFactory(_SingleTileImageryProvider_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z),\n  TMS: createFactory(_TileMapServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z),\n  URL_TEMPLATE: createFactory(_UrlTemplateImageryProvider_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z),\n  WMS: createFactory(_WebMapServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z),\n  WMTS: createFactory(_WebMapTileServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z),\n};\n\n/**\n * @typedef {Object} IonImageryProvider.ConstructorOptions\n *\n * Initialization options for the TileMapServiceImageryProvider constructor\n *\n * @property {Number} assetId An ion imagery asset ID\n * @property {String} [accessToken=Ion.defaultAccessToken] The access token to use.\n * @property {String|Resource} [server=Ion.defaultServer] The resource to the Cesium ion API server.\n */\n\n/**\n * Provides tiled imagery using the Cesium ion REST API.\n *\n * @alias IonImageryProvider\n * @constructor\n *\n * @param {IonImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * viewer.imageryLayers.addImageryProvider(new Cesium.IonImageryProvider({ assetId : 23489024 }));\n */\nfunction IonImageryProvider(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var assetId = options.assetId;\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.assetId", assetId);\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  this._ready = false;\n  this._tileCredits = undefined;\n  this._errorEvent = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n  var that = this;\n  var endpointResource = _Core_IonResource_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"]._createEndpointResource */ .Z._createEndpointResource(assetId, options);\n\n  // A simple cache to avoid making repeated requests to ion for endpoints we\'ve\n  // already retrieved. This exists mainly to support Bing caching to reduce\n  // world imagery sessions, but provides a small boost of performance in general\n  // if constantly reloading assets\n  var cacheKey =\n    options.assetId.toString() + options.accessToken + options.server;\n  var promise = IonImageryProvider._endpointCache[cacheKey];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(promise)) {\n    promise = endpointResource.fetchJson();\n    IonImageryProvider._endpointCache[cacheKey] = promise;\n  }\n\n  this._readyPromise = promise.then(function (endpoint) {\n    if (endpoint.type !== "IMAGERY") {\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].reject */ .Z.reject(\n        new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n          "Cesium ion asset " + assetId + " is not an imagery asset."\n        )\n      );\n    }\n\n    var imageryProvider;\n    var externalType = endpoint.externalType;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(externalType)) {\n      imageryProvider = new _TileMapServiceImageryProvider_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        url: new _Core_IonResource_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(endpoint, endpointResource),\n      });\n    } else {\n      var factory = ImageryProviderMapping[externalType];\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(factory)) {\n        return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].reject */ .Z.reject(\n          new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n            "Unrecognized Cesium ion imagery type: " + externalType\n          )\n        );\n      }\n      imageryProvider = factory(endpoint.options);\n    }\n\n    that._tileCredits = _Core_IonResource_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].getCreditsFromEndpoint */ .Z.getCreditsFromEndpoint(\n      endpoint,\n      endpointResource\n    );\n\n    imageryProvider.errorEvent.addEventListener(function (tileProviderError) {\n      //Propagate the errorEvent but set the provider to this instance instead\n      //of the inner instance.\n      tileProviderError.provider = that;\n      that._errorEvent.raiseEvent(tileProviderError);\n    });\n\n    that._imageryProvider = imageryProvider;\n    return imageryProvider.readyPromise.then(function () {\n      that._ready = true;\n      return true;\n    });\n  });\n}\n\nObject.defineProperties(IonImageryProvider.prototype, {\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof IonImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof IonImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "tileHeight must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "tileWidth must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "tileHeight must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "maximumLevel must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof IonImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "minimumLevel must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "tilingScheme must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "tileDiscardPolicy must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof IonImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link IonImageryProvider#ready} returns true.\n   * @memberof IonImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "credit must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof IonImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n          "hasAlphaChannel must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._imageryProvider.hasAlphaChannel;\n    },\n\n    /**\n     * Gets the proxy used by this provider.\n     * @memberof IonImageryProvider.prototype\n     * @type {Proxy}\n     * @readonly\n     * @default undefined\n     */\n    proxy: {\n      get: function () {\n        return undefined;\n      },\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n * @function\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nIonImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._ready) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "getTileCredits must not be called before the imagery provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var innerCredits = this._imageryProvider.getTileCredits(x, y, level);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(innerCredits)) {\n    return this._tileCredits;\n  }\n\n  return this._tileCredits.concat(innerCredits);\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link IonImageryProvider#ready} returns true.\n * @function\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nIonImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._ready) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "requestImage must not be called before the imagery provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link IonImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nIonImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._ready) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "pickFeatures must not be called before the imagery provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n//exposed for testing\nIonImageryProvider._endpointCache = {};\n/* harmony default export */ __webpack_exports__["Z"] = (IonImageryProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43234\n')},40999:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('// Note, these values map directly to ion asset ids.\n\n/**\n * The types of imagery provided by {@link createWorldImagery}.\n *\n * @enum {Number}\n */\nvar IonWorldImageryStyle = {\n  /**\n   * Aerial imagery.\n   *\n   * @type {Number}\n   * @constant\n   */\n  AERIAL: 2,\n\n  /**\n   * Aerial imagery with a road overlay.\n   *\n   * @type {Number}\n   * @constant\n   */\n  AERIAL_WITH_LABELS: 3,\n\n  /**\n   * Roads without additional imagery.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ROAD: 4,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(IonWorldImageryStyle));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA5OTkuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxxQ0FBcUMseUJBQXlCO0FBQzlEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsbUNBQW1DLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvSW9uV29ybGRJbWFnZXJ5U3R5bGUuanM/Y2RkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3RlLCB0aGVzZSB2YWx1ZXMgbWFwIGRpcmVjdGx5IHRvIGlvbiBhc3NldCBpZHMuXG5cbi8qKlxuICogVGhlIHR5cGVzIG9mIGltYWdlcnkgcHJvdmlkZWQgYnkge0BsaW5rIGNyZWF0ZVdvcmxkSW1hZ2VyeX0uXG4gKlxuICogQGVudW0ge051bWJlcn1cbiAqL1xudmFyIElvbldvcmxkSW1hZ2VyeVN0eWxlID0ge1xuICAvKipcbiAgICogQWVyaWFsIGltYWdlcnkuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgQUVSSUFMOiAyLFxuXG4gIC8qKlxuICAgKiBBZXJpYWwgaW1hZ2VyeSB3aXRoIGEgcm9hZCBvdmVybGF5LlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIEFFUklBTF9XSVRIX0xBQkVMUzogMyxcblxuICAvKipcbiAgICogUm9hZHMgd2l0aG91dCBhZGRpdGlvbmFsIGltYWdlcnkuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgUk9BRDogNCxcbn07XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKElvbldvcmxkSW1hZ2VyeVN0eWxlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40999\n')},38347:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n/* harmony import */ var _Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59081);\n/* harmony import */ var _JobType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92454);\n\n\n\n\n\n/**\n *\n * @private\n * @constructor\n */\nfunction JobTypeBudget(total) {\n  /**\n   * Total budget, in milliseconds, allowed for one frame\n   */\n  this._total = total;\n\n  /**\n   * Time, in milliseconds, used so far during this frame\n   */\n  this.usedThisFrame = 0.0;\n\n  /**\n   * Time, in milliseconds, that other job types stole this frame\n   */\n  this.stolenFromMeThisFrame = 0.0;\n\n  /**\n   * Indicates if this job type was starved this frame, i.e., a job\n   * tried to run but didn\'t have budget\n   */\n  this.starvedThisFrame = false;\n\n  /**\n   * Indicates if this job was starved last frame.  This prevents it\n   * from being stolen from this frame.\n   */\n  this.starvedLastFrame = false;\n}\n\nObject.defineProperties(JobTypeBudget.prototype, {\n  total: {\n    get: function () {\n      return this._total;\n    },\n  },\n});\n\n/**\n * Engine for time slicing jobs during a frame to amortize work over multiple frames.  This supports:\n * <ul>\n *   <li>\n *     Separate budgets for different job types, e.g., texture, shader program, and buffer creation.  This\n *     allows all job types to make progress each frame.\n *   </li>\n *   <li>\n *     Stealing from other jobs type budgets if they were not exhausted in the previous frame.  This allows\n *     using the entire budget for all job types each frame even if, for example, all the jobs are the same type.\n *   </li>\n *   <li>\n *     Guaranteed progress on all job types each frame, even if it means exceeding the total budget for the frame.\n *     This prevents, for example, several expensive texture uploads over many frames from prevent a shader compile.\n *   </li>\n * </ul>\n *\n * @private\n */\nfunction JobScheduler(budgets) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(budgets) && budgets.length !== _JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].NUMBER_OF_JOB_TYPES */ .Z.NUMBER_OF_JOB_TYPES) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "A budget must be specified for each job type; budgets.length should equal JobType.NUMBER_OF_JOB_TYPES."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  // Total for defaults is half of of one frame at 10 fps\n  var jobBudgets = new Array(_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].NUMBER_OF_JOB_TYPES */ .Z.NUMBER_OF_JOB_TYPES);\n  jobBudgets[_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].TEXTURE */ .Z.TEXTURE] = new JobTypeBudget(\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(budgets) ? budgets[_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].TEXTURE */ .Z.TEXTURE] : 10.0\n  );\n  // On cache miss, this most likely only allows one shader compile per frame\n  jobBudgets[_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].PROGRAM */ .Z.PROGRAM] = new JobTypeBudget(\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(budgets) ? budgets[_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].PROGRAM */ .Z.PROGRAM] : 10.0\n  );\n  jobBudgets[_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BUFFER */ .Z.BUFFER] = new JobTypeBudget(\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(budgets) ? budgets[_JobType_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BUFFER */ .Z.BUFFER] : 30.0\n  );\n\n  var length = jobBudgets.length;\n  var i;\n\n  var totalBudget = 0.0;\n  for (i = 0; i < length; ++i) {\n    totalBudget += jobBudgets[i].total;\n  }\n\n  var executedThisFrame = new Array(length);\n  for (i = 0; i < length; ++i) {\n    executedThisFrame[i] = false;\n  }\n\n  this._totalBudget = totalBudget;\n  this._totalUsedThisFrame = 0.0;\n  this._budgets = jobBudgets;\n  this._executedThisFrame = executedThisFrame;\n}\n\n// For unit testing\nJobScheduler.getTimestamp = _Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z;\n\nObject.defineProperties(JobScheduler.prototype, {\n  totalBudget: {\n    get: function () {\n      return this._totalBudget;\n    },\n  },\n});\n\nJobScheduler.prototype.disableThisFrame = function () {\n  // Prevent jobs from running this frame\n  this._totalUsedThisFrame = this._totalBudget;\n};\n\nJobScheduler.prototype.resetBudgets = function () {\n  var budgets = this._budgets;\n  var length = budgets.length;\n  for (var i = 0; i < length; ++i) {\n    var budget = budgets[i];\n    budget.starvedLastFrame = budget.starvedThisFrame;\n    budget.starvedThisFrame = false;\n    budget.usedThisFrame = 0.0;\n    budget.stolenFromMeThisFrame = 0.0;\n  }\n  this._totalUsedThisFrame = 0.0;\n};\n\nJobScheduler.prototype.execute = function (job, jobType) {\n  var budgets = this._budgets;\n  var budget = budgets[jobType];\n\n  // This ensures each job type makes progress each frame by executing at least once\n  var progressThisFrame = this._executedThisFrame[jobType];\n\n  if (this._totalUsedThisFrame >= this._totalBudget && progressThisFrame) {\n    // No budget left this frame for jobs of any type\n    budget.starvedThisFrame = true;\n    return false;\n  }\n\n  var stolenBudget;\n\n  if (budget.usedThisFrame + budget.stolenFromMeThisFrame >= budget.total) {\n    // No budget remaining for jobs of this type. Try to steal from other job types.\n    var length = budgets.length;\n    var i;\n    for (i = 0; i < length; ++i) {\n      stolenBudget = budgets[i];\n\n      // Steal from this budget if it has time left and it wasn\'t starved last fame\n      if (\n        stolenBudget.usedThisFrame + stolenBudget.stolenFromMeThisFrame <\n          stolenBudget.total &&\n        !stolenBudget.starvedLastFrame\n      ) {\n        break;\n      }\n    }\n\n    if (i === length && progressThisFrame) {\n      // No other job types can give up their budget this frame, and\n      // this job type already progressed this frame\n      return false;\n    }\n\n    if (progressThisFrame) {\n      // It is considered "starved" even if it executes using stolen time so that\n      // next frame, no other job types can steal time from it.\n      budget.starvedThisFrame = true;\n    }\n  }\n\n  var startTime = JobScheduler.getTimestamp();\n  job.execute();\n  var duration = JobScheduler.getTimestamp() - startTime;\n\n  // Track both time remaining for this job type and all jobs\n  // so budget stealing does send us way over the total budget.\n  this._totalUsedThisFrame += duration;\n\n  if (stolenBudget) {\n    stolenBudget.stolenFromMeThisFrame += duration;\n  } else {\n    budget.usedThisFrame += duration;\n  }\n  this._executedThisFrame[jobType] = true;\n\n  return true;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (JobScheduler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzNDcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF5QztBQUNjO0FBQ0o7QUFDaEI7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0scUVBQU8sZ0NBQWdDLG9HQUEyQjtBQUN4RSxjQUFjLHdFQUFjO0FBQzVCLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsb0dBQTJCO0FBQ3hELGFBQWEsNEVBQWU7QUFDNUIsSUFBSSxxRUFBTyxvQkFBb0IsNEVBQWU7QUFDOUM7QUFDQTtBQUNBLGFBQWEsNEVBQWU7QUFDNUIsSUFBSSxxRUFBTyxvQkFBb0IsNEVBQWU7QUFDOUM7QUFDQSxhQUFhLDBFQUFjO0FBQzNCLElBQUkscUVBQU8sb0JBQW9CLDBFQUFjO0FBQzdDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTs7QUFFQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsc0VBQVk7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixZQUFZO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBZSxZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvSm9iU2NoZWR1bGVyLmpzPzQ5ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuLi9Db3JlL0RldmVsb3BlckVycm9yLmpzXCI7XG5pbXBvcnQgZ2V0VGltZXN0YW1wIGZyb20gXCIuLi9Db3JlL2dldFRpbWVzdGFtcC5qc1wiO1xuaW1wb3J0IEpvYlR5cGUgZnJvbSBcIi4vSm9iVHlwZS5qc1wiO1xuXG4vKipcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEpvYlR5cGVCdWRnZXQodG90YWwpIHtcbiAgLyoqXG4gICAqIFRvdGFsIGJ1ZGdldCwgaW4gbWlsbGlzZWNvbmRzLCBhbGxvd2VkIGZvciBvbmUgZnJhbWVcbiAgICovXG4gIHRoaXMuX3RvdGFsID0gdG90YWw7XG5cbiAgLyoqXG4gICAqIFRpbWUsIGluIG1pbGxpc2Vjb25kcywgdXNlZCBzbyBmYXIgZHVyaW5nIHRoaXMgZnJhbWVcbiAgICovXG4gIHRoaXMudXNlZFRoaXNGcmFtZSA9IDAuMDtcblxuICAvKipcbiAgICogVGltZSwgaW4gbWlsbGlzZWNvbmRzLCB0aGF0IG90aGVyIGpvYiB0eXBlcyBzdG9sZSB0aGlzIGZyYW1lXG4gICAqL1xuICB0aGlzLnN0b2xlbkZyb21NZVRoaXNGcmFtZSA9IDAuMDtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgam9iIHR5cGUgd2FzIHN0YXJ2ZWQgdGhpcyBmcmFtZSwgaS5lLiwgYSBqb2JcbiAgICogdHJpZWQgdG8gcnVuIGJ1dCBkaWRuJ3QgaGF2ZSBidWRnZXRcbiAgICovXG4gIHRoaXMuc3RhcnZlZFRoaXNGcmFtZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhpcyBqb2Igd2FzIHN0YXJ2ZWQgbGFzdCBmcmFtZS4gIFRoaXMgcHJldmVudHMgaXRcbiAgICogZnJvbSBiZWluZyBzdG9sZW4gZnJvbSB0aGlzIGZyYW1lLlxuICAgKi9cbiAgdGhpcy5zdGFydmVkTGFzdEZyYW1lID0gZmFsc2U7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEpvYlR5cGVCdWRnZXQucHJvdG90eXBlLCB7XG4gIHRvdGFsOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG90YWw7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG4vKipcbiAqIEVuZ2luZSBmb3IgdGltZSBzbGljaW5nIGpvYnMgZHVyaW5nIGEgZnJhbWUgdG8gYW1vcnRpemUgd29yayBvdmVyIG11bHRpcGxlIGZyYW1lcy4gIFRoaXMgc3VwcG9ydHM6XG4gKiA8dWw+XG4gKiAgIDxsaT5cbiAqICAgICBTZXBhcmF0ZSBidWRnZXRzIGZvciBkaWZmZXJlbnQgam9iIHR5cGVzLCBlLmcuLCB0ZXh0dXJlLCBzaGFkZXIgcHJvZ3JhbSwgYW5kIGJ1ZmZlciBjcmVhdGlvbi4gIFRoaXNcbiAqICAgICBhbGxvd3MgYWxsIGpvYiB0eXBlcyB0byBtYWtlIHByb2dyZXNzIGVhY2ggZnJhbWUuXG4gKiAgIDwvbGk+XG4gKiAgIDxsaT5cbiAqICAgICBTdGVhbGluZyBmcm9tIG90aGVyIGpvYnMgdHlwZSBidWRnZXRzIGlmIHRoZXkgd2VyZSBub3QgZXhoYXVzdGVkIGluIHRoZSBwcmV2aW91cyBmcmFtZS4gIFRoaXMgYWxsb3dzXG4gKiAgICAgdXNpbmcgdGhlIGVudGlyZSBidWRnZXQgZm9yIGFsbCBqb2IgdHlwZXMgZWFjaCBmcmFtZSBldmVuIGlmLCBmb3IgZXhhbXBsZSwgYWxsIHRoZSBqb2JzIGFyZSB0aGUgc2FtZSB0eXBlLlxuICogICA8L2xpPlxuICogICA8bGk+XG4gKiAgICAgR3VhcmFudGVlZCBwcm9ncmVzcyBvbiBhbGwgam9iIHR5cGVzIGVhY2ggZnJhbWUsIGV2ZW4gaWYgaXQgbWVhbnMgZXhjZWVkaW5nIHRoZSB0b3RhbCBidWRnZXQgZm9yIHRoZSBmcmFtZS5cbiAqICAgICBUaGlzIHByZXZlbnRzLCBmb3IgZXhhbXBsZSwgc2V2ZXJhbCBleHBlbnNpdmUgdGV4dHVyZSB1cGxvYWRzIG92ZXIgbWFueSBmcmFtZXMgZnJvbSBwcmV2ZW50IGEgc2hhZGVyIGNvbXBpbGUuXG4gKiAgIDwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEpvYlNjaGVkdWxlcihidWRnZXRzKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmIChkZWZpbmVkKGJ1ZGdldHMpICYmIGJ1ZGdldHMubGVuZ3RoICE9PSBKb2JUeXBlLk5VTUJFUl9PRl9KT0JfVFlQRVMpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICBcIkEgYnVkZ2V0IG11c3QgYmUgc3BlY2lmaWVkIGZvciBlYWNoIGpvYiB0eXBlOyBidWRnZXRzLmxlbmd0aCBzaG91bGQgZXF1YWwgSm9iVHlwZS5OVU1CRVJfT0ZfSk9CX1RZUEVTLlwiXG4gICAgKTtcbiAgfVxuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAvLyBUb3RhbCBmb3IgZGVmYXVsdHMgaXMgaGFsZiBvZiBvZiBvbmUgZnJhbWUgYXQgMTAgZnBzXG4gIHZhciBqb2JCdWRnZXRzID0gbmV3IEFycmF5KEpvYlR5cGUuTlVNQkVSX09GX0pPQl9UWVBFUyk7XG4gIGpvYkJ1ZGdldHNbSm9iVHlwZS5URVhUVVJFXSA9IG5ldyBKb2JUeXBlQnVkZ2V0KFxuICAgIGRlZmluZWQoYnVkZ2V0cykgPyBidWRnZXRzW0pvYlR5cGUuVEVYVFVSRV0gOiAxMC4wXG4gICk7XG4gIC8vIE9uIGNhY2hlIG1pc3MsIHRoaXMgbW9zdCBsaWtlbHkgb25seSBhbGxvd3Mgb25lIHNoYWRlciBjb21waWxlIHBlciBmcmFtZVxuICBqb2JCdWRnZXRzW0pvYlR5cGUuUFJPR1JBTV0gPSBuZXcgSm9iVHlwZUJ1ZGdldChcbiAgICBkZWZpbmVkKGJ1ZGdldHMpID8gYnVkZ2V0c1tKb2JUeXBlLlBST0dSQU1dIDogMTAuMFxuICApO1xuICBqb2JCdWRnZXRzW0pvYlR5cGUuQlVGRkVSXSA9IG5ldyBKb2JUeXBlQnVkZ2V0KFxuICAgIGRlZmluZWQoYnVkZ2V0cykgPyBidWRnZXRzW0pvYlR5cGUuQlVGRkVSXSA6IDMwLjBcbiAgKTtcblxuICB2YXIgbGVuZ3RoID0gam9iQnVkZ2V0cy5sZW5ndGg7XG4gIHZhciBpO1xuXG4gIHZhciB0b3RhbEJ1ZGdldCA9IDAuMDtcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdG90YWxCdWRnZXQgKz0gam9iQnVkZ2V0c1tpXS50b3RhbDtcbiAgfVxuXG4gIHZhciBleGVjdXRlZFRoaXNGcmFtZSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBleGVjdXRlZFRoaXNGcmFtZVtpXSA9IGZhbHNlO1xuICB9XG5cbiAgdGhpcy5fdG90YWxCdWRnZXQgPSB0b3RhbEJ1ZGdldDtcbiAgdGhpcy5fdG90YWxVc2VkVGhpc0ZyYW1lID0gMC4wO1xuICB0aGlzLl9idWRnZXRzID0gam9iQnVkZ2V0cztcbiAgdGhpcy5fZXhlY3V0ZWRUaGlzRnJhbWUgPSBleGVjdXRlZFRoaXNGcmFtZTtcbn1cblxuLy8gRm9yIHVuaXQgdGVzdGluZ1xuSm9iU2NoZWR1bGVyLmdldFRpbWVzdGFtcCA9IGdldFRpbWVzdGFtcDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoSm9iU2NoZWR1bGVyLnByb3RvdHlwZSwge1xuICB0b3RhbEJ1ZGdldDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RvdGFsQnVkZ2V0O1xuICAgIH0sXG4gIH0sXG59KTtcblxuSm9iU2NoZWR1bGVyLnByb3RvdHlwZS5kaXNhYmxlVGhpc0ZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBQcmV2ZW50IGpvYnMgZnJvbSBydW5uaW5nIHRoaXMgZnJhbWVcbiAgdGhpcy5fdG90YWxVc2VkVGhpc0ZyYW1lID0gdGhpcy5fdG90YWxCdWRnZXQ7XG59O1xuXG5Kb2JTY2hlZHVsZXIucHJvdG90eXBlLnJlc2V0QnVkZ2V0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJ1ZGdldHMgPSB0aGlzLl9idWRnZXRzO1xuICB2YXIgbGVuZ3RoID0gYnVkZ2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVkZ2V0ID0gYnVkZ2V0c1tpXTtcbiAgICBidWRnZXQuc3RhcnZlZExhc3RGcmFtZSA9IGJ1ZGdldC5zdGFydmVkVGhpc0ZyYW1lO1xuICAgIGJ1ZGdldC5zdGFydmVkVGhpc0ZyYW1lID0gZmFsc2U7XG4gICAgYnVkZ2V0LnVzZWRUaGlzRnJhbWUgPSAwLjA7XG4gICAgYnVkZ2V0LnN0b2xlbkZyb21NZVRoaXNGcmFtZSA9IDAuMDtcbiAgfVxuICB0aGlzLl90b3RhbFVzZWRUaGlzRnJhbWUgPSAwLjA7XG59O1xuXG5Kb2JTY2hlZHVsZXIucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoam9iLCBqb2JUeXBlKSB7XG4gIHZhciBidWRnZXRzID0gdGhpcy5fYnVkZ2V0cztcbiAgdmFyIGJ1ZGdldCA9IGJ1ZGdldHNbam9iVHlwZV07XG5cbiAgLy8gVGhpcyBlbnN1cmVzIGVhY2ggam9iIHR5cGUgbWFrZXMgcHJvZ3Jlc3MgZWFjaCBmcmFtZSBieSBleGVjdXRpbmcgYXQgbGVhc3Qgb25jZVxuICB2YXIgcHJvZ3Jlc3NUaGlzRnJhbWUgPSB0aGlzLl9leGVjdXRlZFRoaXNGcmFtZVtqb2JUeXBlXTtcblxuICBpZiAodGhpcy5fdG90YWxVc2VkVGhpc0ZyYW1lID49IHRoaXMuX3RvdGFsQnVkZ2V0ICYmIHByb2dyZXNzVGhpc0ZyYW1lKSB7XG4gICAgLy8gTm8gYnVkZ2V0IGxlZnQgdGhpcyBmcmFtZSBmb3Igam9icyBvZiBhbnkgdHlwZVxuICAgIGJ1ZGdldC5zdGFydmVkVGhpc0ZyYW1lID0gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgc3RvbGVuQnVkZ2V0O1xuXG4gIGlmIChidWRnZXQudXNlZFRoaXNGcmFtZSArIGJ1ZGdldC5zdG9sZW5Gcm9tTWVUaGlzRnJhbWUgPj0gYnVkZ2V0LnRvdGFsKSB7XG4gICAgLy8gTm8gYnVkZ2V0IHJlbWFpbmluZyBmb3Igam9icyBvZiB0aGlzIHR5cGUuIFRyeSB0byBzdGVhbCBmcm9tIG90aGVyIGpvYiB0eXBlcy5cbiAgICB2YXIgbGVuZ3RoID0gYnVkZ2V0cy5sZW5ndGg7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBzdG9sZW5CdWRnZXQgPSBidWRnZXRzW2ldO1xuXG4gICAgICAvLyBTdGVhbCBmcm9tIHRoaXMgYnVkZ2V0IGlmIGl0IGhhcyB0aW1lIGxlZnQgYW5kIGl0IHdhc24ndCBzdGFydmVkIGxhc3QgZmFtZVxuICAgICAgaWYgKFxuICAgICAgICBzdG9sZW5CdWRnZXQudXNlZFRoaXNGcmFtZSArIHN0b2xlbkJ1ZGdldC5zdG9sZW5Gcm9tTWVUaGlzRnJhbWUgPFxuICAgICAgICAgIHN0b2xlbkJ1ZGdldC50b3RhbCAmJlxuICAgICAgICAhc3RvbGVuQnVkZ2V0LnN0YXJ2ZWRMYXN0RnJhbWVcbiAgICAgICkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gbGVuZ3RoICYmIHByb2dyZXNzVGhpc0ZyYW1lKSB7XG4gICAgICAvLyBObyBvdGhlciBqb2IgdHlwZXMgY2FuIGdpdmUgdXAgdGhlaXIgYnVkZ2V0IHRoaXMgZnJhbWUsIGFuZFxuICAgICAgLy8gdGhpcyBqb2IgdHlwZSBhbHJlYWR5IHByb2dyZXNzZWQgdGhpcyBmcmFtZVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcm9ncmVzc1RoaXNGcmFtZSkge1xuICAgICAgLy8gSXQgaXMgY29uc2lkZXJlZCBcInN0YXJ2ZWRcIiBldmVuIGlmIGl0IGV4ZWN1dGVzIHVzaW5nIHN0b2xlbiB0aW1lIHNvIHRoYXRcbiAgICAgIC8vIG5leHQgZnJhbWUsIG5vIG90aGVyIGpvYiB0eXBlcyBjYW4gc3RlYWwgdGltZSBmcm9tIGl0LlxuICAgICAgYnVkZ2V0LnN0YXJ2ZWRUaGlzRnJhbWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdGFydFRpbWUgPSBKb2JTY2hlZHVsZXIuZ2V0VGltZXN0YW1wKCk7XG4gIGpvYi5leGVjdXRlKCk7XG4gIHZhciBkdXJhdGlvbiA9IEpvYlNjaGVkdWxlci5nZXRUaW1lc3RhbXAoKSAtIHN0YXJ0VGltZTtcblxuICAvLyBUcmFjayBib3RoIHRpbWUgcmVtYWluaW5nIGZvciB0aGlzIGpvYiB0eXBlIGFuZCBhbGwgam9ic1xuICAvLyBzbyBidWRnZXQgc3RlYWxpbmcgZG9lcyBzZW5kIHVzIHdheSBvdmVyIHRoZSB0b3RhbCBidWRnZXQuXG4gIHRoaXMuX3RvdGFsVXNlZFRoaXNGcmFtZSArPSBkdXJhdGlvbjtcblxuICBpZiAoc3RvbGVuQnVkZ2V0KSB7XG4gICAgc3RvbGVuQnVkZ2V0LnN0b2xlbkZyb21NZVRoaXNGcmFtZSArPSBkdXJhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBidWRnZXQudXNlZFRoaXNGcmFtZSArPSBkdXJhdGlvbjtcbiAgfVxuICB0aGlzLl9leGVjdXRlZFRoaXNGcmFtZVtqb2JUeXBlXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0IGRlZmF1bHQgSm9iU2NoZWR1bGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38347\n')},92454:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * @private\n */\nvar JobType = {\n  TEXTURE: 0,\n  PROGRAM: 1,\n  BUFFER: 2,\n  NUMBER_OF_JOB_TYPES: 3,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(JobType));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI0NTQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsc0JBQXNCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvSm9iVHlwZS5qcz8zYWUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xudmFyIEpvYlR5cGUgPSB7XG4gIFRFWFRVUkU6IDAsXG4gIFBST0dSQU06IDEsXG4gIEJVRkZFUjogMixcbiAgTlVNQkVSX09GX0pPQl9UWVBFUzogMyxcbn07XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKEpvYlR5cGUpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///92454\n')},88893:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ JsonMetadataTable; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83856);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(18349);\n\n\n\n\n\n\n/**\n * A table for storing free-form JSON metadata, as in the 3D Tiles batch table.\n *\n * @param {Object} options Object with the following properties:\n * @param {Number} options.count The number of entities in the table.\n * @param {Object.<String, Array>} options.properties The JSON representation of the metadata table. All the arrays must have exactly options.count elements.\n *\n * @alias JsonMetadataTable\n * @constructor\n * @private\n */\nfunction JsonMetadataTable(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("options.count", options.count, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.properties", options.properties);\n  //>>includeEnd(\'debug\');\n\n  this._count = options.count;\n  this._properties = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.properties, true);\n}\n\n/**\n * Returns whether the table has this property.\n *\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {Boolean} Whether the table has this property.\n * @private\n */\nJsonMetadataTable.prototype.hasProperty = function (propertyId) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].hasProperty */ .Z.hasProperty(propertyId, this._properties);\n};\n\n/**\n * Returns an array of property IDs.\n *\n * @param {String[]} [results] An array into which to store the results.\n * @returns {String[]} The property IDs.\n * @private\n */\nJsonMetadataTable.prototype.getPropertyIds = function (results) {\n  return _MetadataEntity_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].getPropertyIds */ .Z.getPropertyIds(this._properties, undefined, results);\n};\n\n/**\n * Returns a copy of the value of the property with the given ID.\n *\n * @param {Number} index The index of the entity.\n * @param {String} propertyId The case-sensitive ID of the property.\n * @returns {*} The value of the property or <code>undefined</code> if the entity does not have this property.\n *\n * @exception {DeveloperError} index is out of bounds\n * @private\n */\nJsonMetadataTable.prototype.getProperty = function (index, propertyId) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("index", index);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("propertyId", propertyId);\n\n  if (index < 0 || index >= this._count) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "index must be in the range [0, " + this._count + ")"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var property = this._properties[propertyId];\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(property)) {\n    return (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(property[index], true);\n  }\n\n  return undefined;\n};\n\n/**\n * Sets the value of the property with the given ID.\n *\n * @param {Number} index The index of the entity.\n * @param {String} propertyId The case-sensitive ID of the property.\n * @param {*} value The value of the property that will be copied.\n * @returns {Boolean} <code>true</code> if the property was set, <code>false</code> otherwise.\n *\n * @exception {DeveloperError} index is out of bounds\n * @private\n */\nJsonMetadataTable.prototype.setProperty = function (index, propertyId, value) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("index", index);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("propertyId", propertyId);\n\n  if (index < 0 || index >= this._count) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "index must be in the range [0, " + this._count + ")"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var property = this._properties[propertyId];\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(property)) {\n    property[index] = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(value, true);\n    return true;\n  }\n\n  return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODg4OTMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUM7QUFDQTtBQUNJO0FBQ2M7QUFDTjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLHdCQUF3QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBLEVBQUUsbUhBQStCO0FBQ2pDLEVBQUUsMkZBQW1CO0FBQ3JCOztBQUVBO0FBQ0EscUJBQXFCLG1FQUFLO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsU0FBUywyRkFBMEI7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlHQUE2QjtBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwyRkFBbUI7QUFDckIsRUFBRSwyRkFBbUI7O0FBRXJCO0FBQ0EsY0FBYyx3RUFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU0scUVBQU87QUFDYixXQUFXLG1FQUFLO0FBQ2hCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMkZBQW1CO0FBQ3JCLEVBQUUsMkZBQW1COztBQUVyQjtBQUNBLGNBQWMsd0VBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHFFQUFPO0FBQ2Isc0JBQXNCLG1FQUFLO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9Kc29uTWV0YWRhdGFUYWJsZS5qcz9lYzBlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGVjayBmcm9tIFwiLi4vQ29yZS9DaGVjay5qc1wiO1xuaW1wb3J0IGNsb25lIGZyb20gXCIuLi9Db3JlL2Nsb25lLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRGV2ZWxvcGVyRXJyb3IgZnJvbSBcIi4uL0NvcmUvRGV2ZWxvcGVyRXJyb3IuanNcIjtcbmltcG9ydCBNZXRhZGF0YUVudGl0eSBmcm9tIFwiLi9NZXRhZGF0YUVudGl0eS5qc1wiO1xuXG4vKipcbiAqIEEgdGFibGUgZm9yIHN0b3JpbmcgZnJlZS1mb3JtIEpTT04gbWV0YWRhdGEsIGFzIGluIHRoZSAzRCBUaWxlcyBiYXRjaCB0YWJsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jb3VudCBUaGUgbnVtYmVyIG9mIGVudGl0aWVzIGluIHRoZSB0YWJsZS5cbiAqIEBwYXJhbSB7T2JqZWN0LjxTdHJpbmcsIEFycmF5Pn0gb3B0aW9ucy5wcm9wZXJ0aWVzIFRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXRhZGF0YSB0YWJsZS4gQWxsIHRoZSBhcnJheXMgbXVzdCBoYXZlIGV4YWN0bHkgb3B0aW9ucy5jb3VudCBlbGVtZW50cy5cbiAqXG4gKiBAYWxpYXMgSnNvbk1ldGFkYXRhVGFibGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSnNvbk1ldGFkYXRhVGFibGUob3B0aW9ucykge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKFwib3B0aW9ucy5jb3VudFwiLCBvcHRpb25zLmNvdW50LCAwKTtcbiAgQ2hlY2sudHlwZU9mLm9iamVjdChcIm9wdGlvbnMucHJvcGVydGllc1wiLCBvcHRpb25zLnByb3BlcnRpZXMpO1xuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB0aGlzLl9jb3VudCA9IG9wdGlvbnMuY291bnQ7XG4gIHRoaXMuX3Byb3BlcnRpZXMgPSBjbG9uZShvcHRpb25zLnByb3BlcnRpZXMsIHRydWUpO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgdGFibGUgaGFzIHRoaXMgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5SWQgVGhlIGNhc2Utc2Vuc2l0aXZlIElEIG9mIHRoZSBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSB0YWJsZSBoYXMgdGhpcyBwcm9wZXJ0eS5cbiAqIEBwcml2YXRlXG4gKi9cbkpzb25NZXRhZGF0YVRhYmxlLnByb3RvdHlwZS5oYXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eUlkKSB7XG4gIHJldHVybiBNZXRhZGF0YUVudGl0eS5oYXNQcm9wZXJ0eShwcm9wZXJ0eUlkLCB0aGlzLl9wcm9wZXJ0aWVzKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBwcm9wZXJ0eSBJRHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmdbXX0gW3Jlc3VsdHNdIEFuIGFycmF5IGludG8gd2hpY2ggdG8gc3RvcmUgdGhlIHJlc3VsdHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nW119IFRoZSBwcm9wZXJ0eSBJRHMuXG4gKiBAcHJpdmF0ZVxuICovXG5Kc29uTWV0YWRhdGFUYWJsZS5wcm90b3R5cGUuZ2V0UHJvcGVydHlJZHMgPSBmdW5jdGlvbiAocmVzdWx0cykge1xuICByZXR1cm4gTWV0YWRhdGFFbnRpdHkuZ2V0UHJvcGVydHlJZHModGhpcy5fcHJvcGVydGllcywgdW5kZWZpbmVkLCByZXN1bHRzKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBJRC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBlbnRpdHkuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlJZCBUaGUgY2FzZS1zZW5zaXRpdmUgSUQgb2YgdGhlIHByb3BlcnR5LlxuICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgb3IgPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiBpZiB0aGUgZW50aXR5IGRvZXMgbm90IGhhdmUgdGhpcyBwcm9wZXJ0eS5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gaW5kZXggaXMgb3V0IG9mIGJvdW5kc1xuICogQHByaXZhdGVcbiAqL1xuSnNvbk1ldGFkYXRhVGFibGUucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24gKGluZGV4LCBwcm9wZXJ0eUlkKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIENoZWNrLnR5cGVPZi5udW1iZXIoXCJpbmRleFwiLCBpbmRleCk7XG4gIENoZWNrLnR5cGVPZi5zdHJpbmcoXCJwcm9wZXJ0eUlkXCIsIHByb3BlcnR5SWQpO1xuXG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5fY291bnQpIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICBcImluZGV4IG11c3QgYmUgaW4gdGhlIHJhbmdlIFswLCBcIiArIHRoaXMuX2NvdW50ICsgXCIpXCJcbiAgICApO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IHRoaXMuX3Byb3BlcnRpZXNbcHJvcGVydHlJZF07XG4gIGlmIChkZWZpbmVkKHByb3BlcnR5KSkge1xuICAgIHJldHVybiBjbG9uZShwcm9wZXJ0eVtpbmRleF0sIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIElELlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGVudGl0eS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eUlkIFRoZSBjYXNlLXNlbnNpdGl2ZSBJRCBvZiB0aGUgcHJvcGVydHkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgdGhhdCB3aWxsIGJlIGNvcGllZC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgcHJvcGVydHkgd2FzIHNldCwgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZS5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gaW5kZXggaXMgb3V0IG9mIGJvdW5kc1xuICogQHByaXZhdGVcbiAqL1xuSnNvbk1ldGFkYXRhVGFibGUucHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24gKGluZGV4LCBwcm9wZXJ0eUlkLCB2YWx1ZSkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2YubnVtYmVyKFwiaW5kZXhcIiwgaW5kZXgpO1xuICBDaGVjay50eXBlT2Yuc3RyaW5nKFwicHJvcGVydHlJZFwiLCBwcm9wZXJ0eUlkKTtcblxuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuX2NvdW50KSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgXCJpbmRleCBtdXN0IGJlIGluIHRoZSByYW5nZSBbMCwgXCIgKyB0aGlzLl9jb3VudCArIFwiKVwiXG4gICAgKTtcbiAgfVxuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB2YXIgcHJvcGVydHkgPSB0aGlzLl9wcm9wZXJ0aWVzW3Byb3BlcnR5SWRdO1xuICBpZiAoZGVmaW5lZChwcm9wZXJ0eSkpIHtcbiAgICBwcm9wZXJ0eVtpbmRleF0gPSBjbG9uZSh2YWx1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88893\n')}}]);