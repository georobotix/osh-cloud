"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[4693],{95757:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Describes how the map will operate in 2D.\n *\n * @enum {Number}\n */\nvar MapMode2D = {\n  /**\n   * The 2D map can be rotated about the z axis.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ROTATE: 0,\n\n  /**\n   * The 2D map can be scrolled infinitely in the horizontal direction.\n   *\n   * @type {Number}\n   * @constant\n   */\n  INFINITE_SCROLL: 1,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(MapMode2D));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU3NTcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLHdCQUF3QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL01hcE1vZGUyRC5qcz9lNjE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVzY3JpYmVzIGhvdyB0aGUgbWFwIHdpbGwgb3BlcmF0ZSBpbiAyRC5cbiAqXG4gKiBAZW51bSB7TnVtYmVyfVxuICovXG52YXIgTWFwTW9kZTJEID0ge1xuICAvKipcbiAgICogVGhlIDJEIG1hcCBjYW4gYmUgcm90YXRlZCBhYm91dCB0aGUgeiBheGlzLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIFJPVEFURTogMCxcblxuICAvKipcbiAgICogVGhlIDJEIG1hcCBjYW4gYmUgc2Nyb2xsZWQgaW5maW5pdGVseSBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgSU5GSU5JVEVfU0NST0xMOiAxLFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoTWFwTW9kZTJEKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///95757\n')},65657:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Credit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52975);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(68985);\n/* harmony import */ var _UrlTemplateImageryProvider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24855);\n\n\n\n\n\n\n\nvar trailingSlashRegex = /\\/$/;\nvar defaultCredit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n  \'&copy; <a href="https://www.mapbox.com/about/maps/">Mapbox</a> &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> <strong><a href="https://www.mapbox.com/map-feedback/">Improve this map</a></strong>\'\n);\n\n/**\n * @typedef {Object} MapboxImageryProvider.ConstructorOptions\n *\n * Initialization options for the MapboxImageryProvider constructor\n *\n * @property {String} [url=\'https://api.mapbox.com/v4/\'] The Mapbox server url.\n * @property {String} mapId The Mapbox Map ID.\n * @property {String} accessToken The public access token for the imagery.\n * @property {String} [format=\'png\'] The format of the image request.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * Provides tiled imagery hosted by Mapbox.\n *\n * @alias MapboxImageryProvider\n * @constructor\n *\n * @param {MapboxImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Mapbox tile provider\n * var mapbox = new Cesium.MapboxImageryProvider({\n *     mapId: \'mapbox.streets\',\n *     accessToken: \'thisIsMyAccessToken\'\n * });\n *\n * @see {@link https://www.mapbox.com/developers/api/maps/#tiles}\n * @see {@link https://www.mapbox.com/developers/api/#access-tokens}\n */\nfunction MapboxImageryProvider(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var mapId = options.mapId;\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(mapId)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.mapId is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var accessToken = options.accessToken;\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(accessToken)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.accessToken is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].createIfNeeded */ .Z.createIfNeeded(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.url, "https://{s}.tiles.mapbox.com/v4/")\n  );\n\n  this._mapId = mapId;\n  this._accessToken = accessToken;\n\n  var format = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.format, "png");\n  if (!/\\./.test(format)) {\n    format = "." + format;\n  }\n  this._format = format;\n\n  var templateUrl = resource.getUrlComponent();\n  if (!trailingSlashRegex.test(templateUrl)) {\n    templateUrl += "/";\n  }\n  templateUrl += mapId + "/{z}/{x}/{y}" + this._format;\n  resource.url = templateUrl;\n\n  resource.setQueryParameters({\n    access_token: accessToken,\n  });\n\n  var credit;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.credit)) {\n    credit = options.credit;\n    if (typeof credit === "string") {\n      credit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(credit);\n    }\n  } else {\n    credit = defaultCredit;\n  }\n\n  this._resource = resource;\n  this._imageryProvider = new _UrlTemplateImageryProvider_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    url: resource,\n    credit: credit,\n    ellipsoid: options.ellipsoid,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    rectangle: options.rectangle,\n  });\n}\n\nObject.defineProperties(MapboxImageryProvider.prototype, {\n  /**\n   * Gets the URL of the Mapbox server.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._imageryProvider.url;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._imageryProvider.ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._imageryProvider.readyPromise;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._imageryProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._imageryProvider.proxy;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nMapboxImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link MapboxImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nMapboxImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link MapboxImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nMapboxImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n// Exposed for tests\nMapboxImageryProvider._defaultCredit = defaultCredit;\n/* harmony default export */ __webpack_exports__["Z"] = (MapboxImageryProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65657\n')},9207:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Credit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52975);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(68985);\n/* harmony import */ var _UrlTemplateImageryProvider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24855);\n\n\n\n\n\n\n\nvar trailingSlashRegex = /\\/$/;\nvar defaultCredit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n  \'&copy; <a href="https://www.mapbox.com/about/maps/">Mapbox</a> &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> <strong><a href="https://www.mapbox.com/map-feedback/">Improve this map</a></strong>\'\n);\n\n/**\n * @typedef {Object} MapboxStyleImageryProvider.ConstructorOptions\n *\n * Initialization options for the MapboxStyleImageryProvider constructor\n *\n * @property {Resource|String} [url=\'https://api.mapbox.com/styles/v1/\'] The Mapbox server url.\n * @property {String} [username=\'mapbox\'] The username of the map account.\n * @property {String} styleId The Mapbox Style ID.\n * @property {String} accessToken The public access token for the imagery.\n * @property {Number} [tilesize=512] The size of the image tiles.\n * @property {Boolean} [scaleFactor] Determines if tiles are rendered at a @2x scale factor.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * Provides tiled imagery hosted by Mapbox.\n *\n * @alias MapboxStyleImageryProvider\n * @constructor\n *\n * @param {MapboxStyleImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Mapbox style provider\n * var mapbox = new Cesium.MapboxStyleImageryProvider({\n *     styleId: \'streets-v11\',\n *     accessToken: \'thisIsMyAccessToken\'\n * });\n *\n * @see {@link https://docs.mapbox.com/api/maps/#styles}\n * @see {@link https://docs.mapbox.com/api/#access-tokens-and-token-scopes}\n */\nfunction MapboxStyleImageryProvider(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var styleId = options.styleId;\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(styleId)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.styleId is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var accessToken = options.accessToken;\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(accessToken)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("options.accessToken is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].createIfNeeded */ .Z.createIfNeeded(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.url, "https://api.mapbox.com/styles/v1/")\n  );\n\n  this._styleId = styleId;\n  this._accessToken = accessToken;\n\n  var tilesize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.tilesize, 512);\n  this._tilesize = tilesize;\n\n  var username = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.username, "mapbox");\n  this._username = username;\n\n  var scaleFactor = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.scaleFactor) ? "@2x" : "";\n\n  var templateUrl = resource.getUrlComponent();\n  if (!trailingSlashRegex.test(templateUrl)) {\n    templateUrl += "/";\n  }\n  templateUrl +=\n    this._username +\n    "/" +\n    styleId +\n    "/tiles/" +\n    this._tilesize +\n    "/{z}/{x}/{y}" +\n    scaleFactor;\n  resource.url = templateUrl;\n\n  resource.setQueryParameters({\n    access_token: accessToken,\n  });\n\n  var credit;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.credit)) {\n    credit = options.credit;\n    if (typeof credit === "string") {\n      credit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(credit);\n    }\n  } else {\n    credit = defaultCredit;\n  }\n\n  this._resource = resource;\n  this._imageryProvider = new _UrlTemplateImageryProvider_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    url: resource,\n    credit: credit,\n    ellipsoid: options.ellipsoid,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    rectangle: options.rectangle,\n  });\n}\n\nObject.defineProperties(MapboxStyleImageryProvider.prototype, {\n  /**\n   * Gets the URL of the Mapbox server.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._imageryProvider.url;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._imageryProvider.ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._imageryProvider.readyPromise;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._imageryProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._imageryProvider.proxy;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof MapboxStyleImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nMapboxStyleImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nMapboxStyleImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link MapboxStyleImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nMapboxStyleImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n// Exposed for tests\nMapboxStyleImageryProvider._defaultCredit = defaultCredit;\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (MapboxStyleImageryProvider)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9207\n')},69592:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83856);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8182);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(39960);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(54973);\n/* harmony import */ var _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71171);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(72248);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68985);\n/* harmony import */ var _Renderer_CubeMap_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(51107);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(8743);\n/* harmony import */ var _Shaders_Materials_AspectRampMaterial_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(4635);\n/* harmony import */ var _Shaders_Materials_BumpMapMaterial_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(32824);\n/* harmony import */ var _Shaders_Materials_CheckerboardMaterial_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(12748);\n/* harmony import */ var _Shaders_Materials_DotMaterial_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(85805);\n/* harmony import */ var _Shaders_Materials_ElevationBandMaterial_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(43659);\n/* harmony import */ var _Shaders_Materials_ElevationContourMaterial_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(94678);\n/* harmony import */ var _Shaders_Materials_ElevationRampMaterial_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(44452);\n/* harmony import */ var _Shaders_Materials_FadeMaterial_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(65082);\n/* harmony import */ var _Shaders_Materials_GridMaterial_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(18595);\n/* harmony import */ var _Shaders_Materials_NormalMapMaterial_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(19431);\n/* harmony import */ var _Shaders_Materials_PolylineArrowMaterial_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(81699);\n/* harmony import */ var _Shaders_Materials_PolylineDashMaterial_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(24291);\n/* harmony import */ var _Shaders_Materials_PolylineGlowMaterial_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(20126);\n/* harmony import */ var _Shaders_Materials_PolylineOutlineMaterial_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(51650);\n/* harmony import */ var _Shaders_Materials_RimLightingMaterial_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(4164);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(87721);\n/* harmony import */ var _Shaders_Materials_SlopeRampMaterial_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(70778);\n/* harmony import */ var _Shaders_Materials_StripeMaterial_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(33931);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(80188);\n/* harmony import */ var _Shaders_Materials_Water_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(72866);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(13222);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A Material defines surface appearance through a combination of diffuse, specular,\n * normal, emission, and alpha components. These values are specified using a\n * JSON schema called Fabric which gets parsed and assembled into glsl shader code\n * behind-the-scenes. Check out the {@link https://github.com/CesiumGS/cesium/wiki/Fabric|wiki page}\n * for more details on Fabric.\n * <br /><br />\n * <style type="text/css">\n *  #materialDescriptions code {\n *      font-weight: normal;\n *      font-family: Consolas, \'Lucida Console\', Monaco, monospace;\n *      color: #A35A00;\n *  }\n *  #materialDescriptions ul, #materialDescriptions ul ul {\n *      list-style-type: none;\n *  }\n *  #materialDescriptions ul ul {\n *      margin-bottom: 10px;\n *  }\n *  #materialDescriptions ul ul li {\n *      font-weight: normal;\n *      color: #000000;\n *      text-indent: -2em;\n *      margin-left: 2em;\n *  }\n *  #materialDescriptions ul li {\n *      font-weight: bold;\n *      color: #0053CF;\n *  }\n * </style>\n *\n * Base material types and their uniforms:\n * <div id=\'materialDescriptions\'>\n * <ul>\n *  <li>Color</li>\n *  <ul>\n *      <li><code>color</code>:  rgba color object.</li>\n *  </ul>\n *  <li>Image</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>DiffuseMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>AlphaMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channel</code>:  One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>SpecularMap</li>\n *  <ul>\n *      <li><code>image</code>: path to image.</li>\n *      <li><code>channel</code>: One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>: Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>EmissionMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *  </ul>\n *  <li>BumpMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channel</code>:  One character string containing r, g, b, or a for selecting the desired image channel. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *      <li><code>strength</code>:  Bump strength value between 0.0 and 1.0 where 0.0 is small bumps and 1.0 is large bumps.</li>\n *  </ul>\n *  <li>NormalMap</li>\n *  <ul>\n *      <li><code>image</code>:  path to image.</li>\n *      <li><code>channels</code>:  Three character string containing any combination of r, g, b, and a for selecting the desired image channels. </li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of times to repeat the image.</li>\n *      <li><code>strength</code>:  Bump strength value between 0.0 and 1.0 where 0.0 is small bumps and 1.0 is large bumps.</li>\n *  </ul>\n *  <li>Grid</li>\n *  <ul>\n *      <li><code>color</code>:  rgba color object for the whole material.</li>\n *      <li><code>cellAlpha</code>: Alpha value for the cells between grid lines.  This will be combined with color.alpha.</li>\n *      <li><code>lineCount</code>:  Object with x and y values specifying the number of columns and rows respectively.</li>\n *      <li><code>lineThickness</code>:  Object with x and y values specifying the thickness of grid lines (in pixels where available).</li>\n *      <li><code>lineOffset</code>:  Object with x and y values specifying the offset of grid lines (range is 0 to 1).</li>\n *  </ul>\n *  <li>Stripe</li>\n *  <ul>\n *      <li><code>horizontal</code>:  Boolean that determines if the stripes are horizontal or vertical.</li>\n *      <li><code>evenColor</code>:  rgba color object for the stripe\'s first color.</li>\n *      <li><code>oddColor</code>:  rgba color object for the stripe\'s second color.</li>\n *      <li><code>offset</code>:  Number that controls at which point into the pattern to begin drawing; with 0.0 being the beginning of the even color, 1.0 the beginning of the odd color, 2.0 being the even color again, and any multiple or fractional values being in between.</li>\n *      <li><code>repeat</code>:  Number that controls the total number of stripes, half light and half dark.</li>\n *  </ul>\n *  <li>Checkerboard</li>\n *  <ul>\n *      <li><code>lightColor</code>:  rgba color object for the checkerboard\'s light alternating color.</li>\n *      <li><code>darkColor</code>: rgba color object for the checkerboard\'s dark alternating color.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of columns and rows respectively.</li>\n *  </ul>\n *  <li>Dot</li>\n *  <ul>\n *      <li><code>lightColor</code>:  rgba color object for the dot color.</li>\n *      <li><code>darkColor</code>:  rgba color object for the background color.</li>\n *      <li><code>repeat</code>:  Object with x and y values specifying the number of columns and rows of dots respectively.</li>\n *  </ul>\n *  <li>Water</li>\n *  <ul>\n *      <li><code>baseWaterColor</code>:  rgba color object base color of the water.</li>\n *      <li><code>blendColor</code>:  rgba color object used when blending from water to non-water areas.</li>\n *      <li><code>specularMap</code>:  Single channel texture used to indicate areas of water.</li>\n *      <li><code>normalMap</code>:  Normal map for water normal perturbation.</li>\n *      <li><code>frequency</code>:  Number that controls the number of waves.</li>\n *      <li><code>animationSpeed</code>:  Number that controls the animations speed of the water.</li>\n *      <li><code>amplitude</code>:  Number that controls the amplitude of water waves.</li>\n *      <li><code>specularIntensity</code>:  Number that controls the intensity of specular reflections.</li>\n *  </ul>\n *  <li>RimLighting</li>\n *  <ul>\n *      <li><code>color</code>:  diffuse color and alpha.</li>\n *      <li><code>rimColor</code>:  diffuse color and alpha of the rim.</li>\n *      <li><code>width</code>:  Number that determines the rim\'s width.</li>\n *  </ul>\n *  <li>Fade</li>\n *  <ul>\n *      <li><code>fadeInColor</code>: diffuse color and alpha at <code>time</code></li>\n *      <li><code>fadeOutColor</code>: diffuse color and alpha at <code>maximumDistance</code> from <code>time</code></li>\n *      <li><code>maximumDistance</code>: Number between 0.0 and 1.0 where the <code>fadeInColor</code> becomes the <code>fadeOutColor</code>. A value of 0.0 gives the entire material a color of <code>fadeOutColor</code> and a value of 1.0 gives the the entire material a color of <code>fadeInColor</code></li>\n *      <li><code>repeat</code>: true if the fade should wrap around the texture coodinates.</li>\n *      <li><code>fadeDirection</code>: Object with x and y values specifying if the fade should be in the x and y directions.</li>\n *      <li><code>time</code>: Object with x and y values between 0.0 and 1.0 of the <code>fadeInColor</code> position</li>\n *  </ul>\n *  <li>PolylineArrow</li>\n *  <ul>\n *      <li><code>color</code>: diffuse color and alpha.</li>\n *  </ul>\n *  <li>PolylineDash</li>\n *  <ul>\n *      <li><code>color</code>: color for the line.</li>\n *      <li><code>gapColor</code>: color for the gaps in the line.</li>\n *      <li><code>dashLength</code>: Dash length in pixels.</li>\n *      <li><code>dashPattern</code>: The 16 bit stipple pattern for the line..</li>\n *  </ul>\n *  <li>PolylineGlow</li>\n *  <ul>\n *      <li><code>color</code>: color and maximum alpha for the glow on the line.</li>\n *      <li><code>glowPower</code>: strength of the glow, as a percentage of the total line width (less than 1.0).</li>\n *      <li><code>taperPower</code>: strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.</li>\n *  </ul>\n *  <li>PolylineOutline</li>\n *  <ul>\n *      <li><code>color</code>: diffuse color and alpha for the interior of the line.</li>\n *      <li><code>outlineColor</code>: diffuse color and alpha for the outline.</li>\n *      <li><code>outlineWidth</code>: width of the outline in pixels.</li>\n *  </ul>\n *  <li>ElevationContour</li>\n *  <ul>\n *      <li><code>color</code>: color and alpha for the contour line.</li>\n *      <li><code>spacing</code>: spacing for contour lines in meters.</li>\n *      <li><code>width</code>: Number specifying the width of the grid lines in pixels.</li>\n *  </ul>\n *  <li>ElevationRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for coloring the terrain.</li>\n *      <li><code>minimumHeight</code>: minimum height for the ramp.</li>\n *      <li><code>maximumHeight</code>: maximum height for the ramp.</li>\n *  </ul>\n *  <li>SlopeRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for coloring the terrain by slope.</li>\n *  </ul>\n *  <li>AspectRamp</li>\n *  <ul>\n *      <li><code>image</code>: color ramp image to use for color the terrain by aspect.</li>\n *  </ul>\n *  <li>ElevationBand</li>\n *  <ul>\n *      <li><code>heights</code>: image of heights sorted from lowest to highest.</li>\n *      <li><code>colors</code>: image of colors at the corresponding heights.</li>\n * </ul>\n * </ul>\n * </ul>\n * </div>\n *\n * @alias Material\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.strict=false] Throws errors for issues that would normally be ignored, including unused uniforms or materials.\n * @param {Boolean|Function} [options.translucent=true] When <code>true</code> or a function that returns <code>true</code>, the geometry\n *                           with this material is expected to appear translucent.\n * @param {TextureMinificationFilter} [options.minificationFilter=TextureMinificationFilter.LINEAR] The {@link TextureMinificationFilter} to apply to this material\'s textures.\n * @param {TextureMagnificationFilter} [options.magnificationFilter=TextureMagnificationFilter.LINEAR] The {@link TextureMagnificationFilter} to apply to this material\'s textures.\n * @param {Object} options.fabric The fabric JSON used to generate the material.\n *\n * @constructor\n *\n * @exception {DeveloperError} fabric: uniform has invalid type.\n * @exception {DeveloperError} fabric: uniforms and materials cannot share the same property.\n * @exception {DeveloperError} fabric: cannot have source and components in the same section.\n * @exception {DeveloperError} fabric: property name is not valid. It should be \'type\', \'materials\', \'uniforms\', \'components\', or \'source\'.\n * @exception {DeveloperError} fabric: property name is not valid. It should be \'diffuse\', \'specular\', \'shininess\', \'normal\', \'emission\', or \'alpha\'.\n * @exception {DeveloperError} strict: shader source does not use string.\n * @exception {DeveloperError} strict: shader source does not use uniform.\n * @exception {DeveloperError} strict: shader source does not use material.\n *\n * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric wiki page} for a more detailed options of Fabric.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Materials Demo}\n *\n * @example\n * // Create a color material with fromType:\n * polygon.material = Cesium.Material.fromType(\'Color\');\n * polygon.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n *\n * // Create the default material:\n * polygon.material = new Cesium.Material();\n *\n * // Create a color material with full Fabric notation:\n * polygon.material = new Cesium.Material({\n *     fabric : {\n *         type : \'Color\',\n *         uniforms : {\n *             color : new Cesium.Color(1.0, 1.0, 0.0, 1.0)\n *         }\n *     }\n * });\n */\nfunction Material(options) {\n  /**\n   * The material type. Can be an existing type or a new type. If no type is specified in fabric, type is a GUID.\n   * @type {String}\n   * @default undefined\n   */\n  this.type = undefined;\n\n  /**\n   * The glsl shader source for this material.\n   * @type {String}\n   * @default undefined\n   */\n  this.shaderSource = undefined;\n\n  /**\n   * Maps sub-material names to Material objects.\n   * @type {Object}\n   * @default undefined\n   */\n  this.materials = undefined;\n\n  /**\n   * Maps uniform names to their values.\n   * @type {Object}\n   * @default undefined\n   */\n  this.uniforms = undefined;\n  this._uniforms = undefined;\n\n  /**\n   * When <code>true</code> or a function that returns <code>true</code>,\n   * the geometry is expected to appear translucent.\n   * @type {Boolean|Function}\n   * @default undefined\n   */\n  this.translucent = undefined;\n\n  this._minificationFilter = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.minificationFilter,\n    _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].LINEAR */ .Z.LINEAR\n  );\n  this._magnificationFilter = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.magnificationFilter,\n    _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].LINEAR */ .Z.LINEAR\n  );\n\n  this._strict = undefined;\n  this._template = undefined;\n  this._count = undefined;\n\n  this._texturePaths = {};\n  this._loadedImages = [];\n  this._loadedCubeMaps = [];\n\n  this._textures = {};\n\n  this._updateFunctions = [];\n\n  this._defaultTexture = undefined;\n\n  initializeMaterial(options, this);\n  Object.defineProperties(this, {\n    type: {\n      value: this.type,\n      writable: false,\n    },\n  });\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(Material._uniformList[this.type])) {\n    Material._uniformList[this.type] = Object.keys(this._uniforms);\n  }\n}\n\n// Cached list of combined uniform names indexed by type.\n// Used to get the list of uniforms in the same order.\nMaterial._uniformList = {};\n\n/**\n * Creates a new material using an existing material type.\n * <br /><br />\n * Shorthand for: new Material({fabric : {type : type}});\n *\n * @param {String} type The base material type.\n * @param {Object} [uniforms] Overrides for the default uniforms.\n * @returns {Material} New material object.\n *\n * @exception {DeveloperError} material with that type does not exist.\n *\n * @example\n * var material = Cesium.Material.fromType(\'Color\', {\n *     color : new Cesium.Color(1.0, 0.0, 0.0, 1.0)\n * });\n */\nMaterial.fromType = function (type, uniforms) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(Material._materialCache.getMaterial(type))) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "material with type \'" + type + "\' does not exist."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var material = new Material({\n    fabric: {\n      type: type,\n    },\n  });\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(uniforms)) {\n    for (var name in uniforms) {\n      if (uniforms.hasOwnProperty(name)) {\n        material.uniforms[name] = uniforms[name];\n      }\n    }\n  }\n\n  return material;\n};\n\n/**\n * Gets whether or not this material is translucent.\n * @returns {Boolean} <code>true</code> if this material is translucent, <code>false</code> otherwise.\n */\nMaterial.prototype.isTranslucent = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(this.translucent)) {\n    if (typeof this.translucent === "function") {\n      return this.translucent();\n    }\n\n    return this.translucent;\n  }\n\n  var translucent = true;\n  var funcs = this._translucentFunctions;\n  var length = funcs.length;\n  for (var i = 0; i < length; ++i) {\n    var func = funcs[i];\n    if (typeof func === "function") {\n      translucent = translucent && func();\n    } else {\n      translucent = translucent && func;\n    }\n\n    if (!translucent) {\n      break;\n    }\n  }\n  return translucent;\n};\n\n/**\n * @private\n */\nMaterial.prototype.update = function (context) {\n  this._defaultTexture = context.defaultTexture;\n\n  var i;\n  var uniformId;\n\n  var loadedImages = this._loadedImages;\n  var length = loadedImages.length;\n  for (i = 0; i < length; ++i) {\n    var loadedImage = loadedImages[i];\n    uniformId = loadedImage.id;\n    var image = loadedImage.image;\n\n    // Images transcoded from KTX2 can contain multiple mip levels:\n    // https://github.khronos.org/KTX-Specification/#_mip_level_array\n    var mipLevels;\n    if (Array.isArray(image)) {\n      // highest detail mip should be level 0\n      mipLevels = image.slice(1, image.length).map(function (mipLevel) {\n        return mipLevel.bufferView;\n      });\n      image = image[0];\n    }\n\n    var sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n      minificationFilter: this._minificationFilter,\n      magnificationFilter: this._magnificationFilter,\n    });\n\n    var texture;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(image.internalFormat)) {\n      texture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n        context: context,\n        pixelFormat: image.internalFormat,\n        width: image.width,\n        height: image.height,\n        source: {\n          arrayBufferView: image.bufferView,\n          mipLevels: mipLevels,\n        },\n        sampler: sampler,\n      });\n    } else {\n      texture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n        context: context,\n        source: image,\n        sampler: sampler,\n      });\n    }\n\n    // The material destroys its old texture only after the new one has been loaded.\n    // This will ensure a smooth swap of textures and prevent the default texture\n    // from appearing for a few frames.\n    var oldTexture = this._textures[uniformId];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(oldTexture) && oldTexture !== this._defaultTexture) {\n      oldTexture.destroy();\n    }\n\n    this._textures[uniformId] = texture;\n\n    var uniformDimensionsName = uniformId + "Dimensions";\n    if (this.uniforms.hasOwnProperty(uniformDimensionsName)) {\n      var uniformDimensions = this.uniforms[uniformDimensionsName];\n      uniformDimensions.x = texture._width;\n      uniformDimensions.y = texture._height;\n    }\n  }\n\n  loadedImages.length = 0;\n\n  var loadedCubeMaps = this._loadedCubeMaps;\n  length = loadedCubeMaps.length;\n\n  for (i = 0; i < length; ++i) {\n    var loadedCubeMap = loadedCubeMaps[i];\n    uniformId = loadedCubeMap.id;\n    var images = loadedCubeMap.images;\n\n    var cubeMap = new _Renderer_CubeMap_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n      context: context,\n      source: {\n        positiveX: images[0],\n        negativeX: images[1],\n        positiveY: images[2],\n        negativeY: images[3],\n        positiveZ: images[4],\n        negativeZ: images[5],\n      },\n      sampler: new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n        minificationFilter: this._minificationFilter,\n        magnificationFilter: this._magnificationFilter,\n      }),\n    });\n\n    this._textures[uniformId] = cubeMap;\n  }\n\n  loadedCubeMaps.length = 0;\n\n  var updateFunctions = this._updateFunctions;\n  length = updateFunctions.length;\n  for (i = 0; i < length; ++i) {\n    updateFunctions[i](this, context);\n  }\n\n  var subMaterials = this.materials;\n  for (var name in subMaterials) {\n    if (subMaterials.hasOwnProperty(name)) {\n      subMaterials[name].update(context);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see Material#destroy\n */\nMaterial.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * material = material && material.destroy();\n *\n * @see Material#isDestroyed\n */\nMaterial.prototype.destroy = function () {\n  var textures = this._textures;\n  for (var texture in textures) {\n    if (textures.hasOwnProperty(texture)) {\n      var instance = textures[texture];\n      if (instance !== this._defaultTexture) {\n        instance.destroy();\n      }\n    }\n  }\n\n  var materials = this.materials;\n  for (var material in materials) {\n    if (materials.hasOwnProperty(material)) {\n      materials[material].destroy();\n    }\n  }\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this);\n};\n\nfunction initializeMaterial(options, result) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  result._strict = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.strict, false);\n  result._count = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.count, 0);\n  result._template = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.fabric, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT)\n  );\n  result._template.uniforms = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result._template.uniforms, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT)\n  );\n  result._template.materials = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result._template.materials, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT)\n  );\n\n  result.type = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(result._template.type)\n    ? result._template.type\n    : (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)();\n\n  result.shaderSource = "";\n  result.materials = {};\n  result.uniforms = {};\n  result._uniforms = {};\n  result._translucentFunctions = [];\n\n  var translucent;\n\n  // If the cache contains this material type, build the material template off of the stored template.\n  var cachedMaterial = Material._materialCache.getMaterial(result.type);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(cachedMaterial)) {\n    var template = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(cachedMaterial.fabric, true);\n    result._template = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(result._template, template, true);\n    translucent = cachedMaterial.translucent;\n  }\n\n  // Make sure the template has no obvious errors. More error checking happens later.\n  checkForTemplateErrors(result);\n\n  // If the material has a new type, add it to the cache.\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(cachedMaterial)) {\n    Material._materialCache.addMaterial(result.type, result);\n  }\n\n  createMethodDefinition(result);\n  createUniforms(result);\n  createSubMaterials(result);\n\n  var defaultTranslucent =\n    result._translucentFunctions.length === 0 ? true : undefined;\n  translucent = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(translucent, defaultTranslucent);\n  translucent = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.translucent, translucent);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(translucent)) {\n    if (typeof translucent === "function") {\n      var wrappedTranslucent = function () {\n        return translucent(result);\n      };\n      result._translucentFunctions.push(wrappedTranslucent);\n    } else {\n      result._translucentFunctions.push(translucent);\n    }\n  }\n}\n\nfunction checkForValidProperties(object, properties, result, throwNotFound) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(object)) {\n    for (var property in object) {\n      if (object.hasOwnProperty(property)) {\n        var hasProperty = properties.indexOf(property) !== -1;\n        if (\n          (throwNotFound && !hasProperty) ||\n          (!throwNotFound && hasProperty)\n        ) {\n          result(property, properties);\n        }\n      }\n    }\n  }\n}\n\nfunction invalidNameError(property, properties) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  var errorString =\n    "fabric: property name \'" + property + "\' is not valid. It should be ";\n  for (var i = 0; i < properties.length; i++) {\n    var propertyName = "\'" + properties[i] + "\'";\n    errorString +=\n      i === properties.length - 1\n        ? "or " + propertyName + "."\n        : propertyName + ", ";\n  }\n  throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(errorString);\n  //>>includeEnd(\'debug\');\n}\n\nfunction duplicateNameError(property, properties) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  var errorString =\n    "fabric: uniforms and materials cannot share the same property \'" +\n    property +\n    "\'";\n  throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(errorString);\n  //>>includeEnd(\'debug\');\n}\n\nvar templateProperties = [\n  "type",\n  "materials",\n  "uniforms",\n  "components",\n  "source",\n];\nvar componentProperties = [\n  "diffuse",\n  "specular",\n  "shininess",\n  "normal",\n  "emission",\n  "alpha",\n];\n\nfunction checkForTemplateErrors(material) {\n  var template = material._template;\n  var uniforms = template.uniforms;\n  var materials = template.materials;\n  var components = template.components;\n\n  // Make sure source and components do not exist in the same template.\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(components) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(template.source)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "fabric: cannot have source and components in the same template."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  // Make sure all template and components properties are valid.\n  checkForValidProperties(template, templateProperties, invalidNameError, true);\n  checkForValidProperties(\n    components,\n    componentProperties,\n    invalidNameError,\n    true\n  );\n\n  // Make sure uniforms and materials do not share any of the same names.\n  var materialNames = [];\n  for (var property in materials) {\n    if (materials.hasOwnProperty(property)) {\n      materialNames.push(property);\n    }\n  }\n  checkForValidProperties(uniforms, materialNames, duplicateNameError, false);\n}\n\nfunction isMaterialFused(shaderComponent, material) {\n  var materials = material._template.materials;\n  for (var subMaterialId in materials) {\n    if (materials.hasOwnProperty(subMaterialId)) {\n      if (shaderComponent.indexOf(subMaterialId) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// Create the czm_getMaterial method body using source or components.\nfunction createMethodDefinition(material) {\n  var components = material._template.components;\n  var source = material._template.source;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(source)) {\n    material.shaderSource += source + "\\n";\n  } else {\n    material.shaderSource +=\n      "czm_material czm_getMaterial(czm_materialInput materialInput)\\n{\\n";\n    material.shaderSource +=\n      "czm_material material = czm_getDefaultMaterial(materialInput);\\n";\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(components)) {\n      var isMultiMaterial =\n        Object.keys(material._template.materials).length > 0;\n      for (var component in components) {\n        if (components.hasOwnProperty(component)) {\n          if (component === "diffuse" || component === "emission") {\n            var isFusion =\n              isMultiMaterial &&\n              isMaterialFused(components[component], material);\n            var componentSource = isFusion\n              ? components[component]\n              : "czm_gammaCorrect(" + components[component] + ")";\n            material.shaderSource +=\n              "material." + component + " = " + componentSource + "; \\n";\n          } else if (component === "alpha") {\n            material.shaderSource +=\n              "material.alpha = " + components.alpha + "; \\n";\n          } else {\n            material.shaderSource +=\n              "material." + component + " = " + components[component] + ";\\n";\n          }\n        }\n      }\n    }\n    material.shaderSource += "return material;\\n}\\n";\n  }\n}\n\nvar matrixMap = {\n  mat2: _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n  mat3: _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n  mat4: _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z,\n};\n\nvar ktx2Regex = /\\.ktx2$/i;\n\nfunction createTexture2DUpdateFunction(uniformId) {\n  var oldUniformValue;\n  return function (material, context) {\n    var uniforms = material.uniforms;\n    var uniformValue = uniforms[uniformId];\n    var uniformChanged = oldUniformValue !== uniformValue;\n    var uniformValueIsDefaultImage =\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(uniformValue) || uniformValue === Material.DefaultImageId;\n    oldUniformValue = uniformValue;\n\n    var texture = material._textures[uniformId];\n    var uniformDimensionsName;\n    var uniformDimensions;\n\n    if (uniformValue instanceof HTMLVideoElement) {\n      // HTMLVideoElement.readyState >=2 means we have enough data for the current frame.\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState\n      if (uniformValue.readyState >= 2) {\n        if (uniformChanged && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(texture)) {\n          if (texture !== context.defaultTexture) {\n            texture.destroy();\n          }\n          texture = undefined;\n        }\n\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(texture) || texture === context.defaultTexture) {\n          var sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n            minificationFilter: material._minificationFilter,\n            magnificationFilter: material._magnificationFilter,\n          });\n          texture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n            context: context,\n            source: uniformValue,\n            sampler: sampler,\n          });\n          material._textures[uniformId] = texture;\n          return;\n        }\n\n        texture.copyFrom({\n          source: uniformValue,\n        });\n      } else if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(texture)) {\n        material._textures[uniformId] = context.defaultTexture;\n      }\n      return;\n    }\n\n    if (uniformValue instanceof _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z && uniformValue !== texture) {\n      material._texturePaths[uniformId] = undefined;\n      var tmp = material._textures[uniformId];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(tmp) && tmp !== material._defaultTexture) {\n        tmp.destroy();\n      }\n      material._textures[uniformId] = uniformValue;\n\n      uniformDimensionsName = uniformId + "Dimensions";\n      if (uniforms.hasOwnProperty(uniformDimensionsName)) {\n        uniformDimensions = uniforms[uniformDimensionsName];\n        uniformDimensions.x = uniformValue._width;\n        uniformDimensions.y = uniformValue._height;\n      }\n\n      return;\n    }\n\n    if (uniformChanged && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(texture) && uniformValueIsDefaultImage) {\n      // If the newly-assigned texture is the default texture,\n      // we don\'t need to wait for a new image to load before destroying\n      // the old texture.\n      if (texture !== material._defaultTexture) {\n        texture.destroy();\n      }\n      texture = undefined;\n    }\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(texture)) {\n      material._texturePaths[uniformId] = undefined;\n      texture = material._textures[uniformId] = material._defaultTexture;\n\n      uniformDimensionsName = uniformId + "Dimensions";\n      if (uniforms.hasOwnProperty(uniformDimensionsName)) {\n        uniformDimensions = uniforms[uniformDimensionsName];\n        uniformDimensions.x = texture._width;\n        uniformDimensions.y = texture._height;\n      }\n    }\n\n    if (uniformValueIsDefaultImage) {\n      return;\n    }\n\n    // When using the entity layer, the Resource objects get recreated on getValue because\n    //  they are clonable. That\'s why we check the url property for Resources\n    //  because the instances aren\'t the same and we keep trying to load the same\n    //  image if it fails to load.\n    var isResource = uniformValue instanceof _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z;\n    if (\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(material._texturePaths[uniformId]) ||\n      (isResource &&\n        uniformValue.url !== material._texturePaths[uniformId].url) ||\n      (!isResource && uniformValue !== material._texturePaths[uniformId])\n    ) {\n      if (typeof uniformValue === "string" || isResource) {\n        var resource = isResource\n          ? uniformValue\n          : _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue);\n\n        var promise;\n        if (ktx2Regex.test(resource.url)) {\n          promise = (0,_Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(resource.url);\n        } else {\n          promise = resource.fetchImage();\n        }\n\n        promise\n          .then(function (image) {\n            material._loadedImages.push({\n              id: uniformId,\n              image: image,\n            });\n          })\n          .otherwise(function () {\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(texture) && texture !== material._defaultTexture) {\n              texture.destroy();\n            }\n            material._textures[uniformId] = material._defaultTexture;\n          });\n      } else if (\n        uniformValue instanceof HTMLCanvasElement ||\n        uniformValue instanceof HTMLImageElement\n      ) {\n        material._loadedImages.push({\n          id: uniformId,\n          image: uniformValue,\n        });\n      }\n\n      material._texturePaths[uniformId] = uniformValue;\n    }\n  };\n}\n\nfunction createCubeMapUpdateFunction(uniformId) {\n  return function (material, context) {\n    var uniformValue = material.uniforms[uniformId];\n\n    if (uniformValue instanceof _Renderer_CubeMap_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z) {\n      var tmp = material._textures[uniformId];\n      if (tmp !== material._defaultTexture) {\n        tmp.destroy();\n      }\n      material._texturePaths[uniformId] = undefined;\n      material._textures[uniformId] = uniformValue;\n      return;\n    }\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(material._textures[uniformId])) {\n      material._texturePaths[uniformId] = undefined;\n      material._textures[uniformId] = context.defaultCubeMap;\n    }\n\n    if (uniformValue === Material.DefaultCubeMapId) {\n      return;\n    }\n\n    var path =\n      uniformValue.positiveX +\n      uniformValue.negativeX +\n      uniformValue.positiveY +\n      uniformValue.negativeY +\n      uniformValue.positiveZ +\n      uniformValue.negativeZ;\n\n    if (path !== material._texturePaths[uniformId]) {\n      var promises = [\n        _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue.positiveX).fetchImage(),\n        _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue.negativeX).fetchImage(),\n        _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue.positiveY).fetchImage(),\n        _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue.negativeY).fetchImage(),\n        _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue.positiveZ).fetchImage(),\n        _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createIfNeeded */ .Z.createIfNeeded(uniformValue.negativeZ).fetchImage(),\n      ];\n\n      _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].all */ .Z.all(promises).then(function (images) {\n        material._loadedCubeMaps.push({\n          id: uniformId,\n          images: images,\n        });\n      });\n\n      material._texturePaths[uniformId] = path;\n    }\n  };\n}\n\nfunction createUniforms(material) {\n  var uniforms = material._template.uniforms;\n  for (var uniformId in uniforms) {\n    if (uniforms.hasOwnProperty(uniformId)) {\n      createUniform(material, uniformId);\n    }\n  }\n}\n\n// Writes uniform declarations to the shader file and connects uniform values with\n// corresponding material properties through the returnUniforms function.\nfunction createUniform(material, uniformId) {\n  var strict = material._strict;\n  var materialUniforms = material._template.uniforms;\n  var uniformValue = materialUniforms[uniformId];\n  var uniformType = getUniformType(uniformValue);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(uniformType)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "fabric: uniform \'" + uniformId + "\' has invalid type."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var replacedTokenCount;\n  if (uniformType === "channels") {\n    replacedTokenCount = replaceToken(material, uniformId, uniformValue, false);\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (replacedTokenCount === 0 && strict) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n        "strict: shader source does not use channels \'" + uniformId + "\'."\n      );\n    }\n    //>>includeEnd(\'debug\');\n  } else {\n    // Since webgl doesn\'t allow texture dimension queries in glsl, create a uniform to do it.\n    // Check if the shader source actually uses texture dimensions before creating the uniform.\n    if (uniformType === "sampler2D") {\n      var imageDimensionsUniformName = uniformId + "Dimensions";\n      if (getNumberOfTokens(material, imageDimensionsUniformName) > 0) {\n        materialUniforms[imageDimensionsUniformName] = {\n          type: "ivec3",\n          x: 1,\n          y: 1,\n        };\n        createUniform(material, imageDimensionsUniformName);\n      }\n    }\n\n    // Add uniform declaration to source code.\n    var uniformDeclarationRegex = new RegExp(\n      "uniform\\\\s+" + uniformType + "\\\\s+" + uniformId + "\\\\s*;"\n    );\n    if (!uniformDeclarationRegex.test(material.shaderSource)) {\n      var uniformDeclaration = "uniform " + uniformType + " " + uniformId + ";";\n      material.shaderSource = uniformDeclaration + material.shaderSource;\n    }\n\n    var newUniformId = uniformId + "_" + material._count++;\n    replacedTokenCount = replaceToken(material, uniformId, newUniformId);\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (replacedTokenCount === 1 && strict) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n        "strict: shader source does not use uniform \'" + uniformId + "\'."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    // Set uniform value\n    material.uniforms[uniformId] = uniformValue;\n\n    if (uniformType === "sampler2D") {\n      material._uniforms[newUniformId] = function () {\n        return material._textures[uniformId];\n      };\n      material._updateFunctions.push(createTexture2DUpdateFunction(uniformId));\n    } else if (uniformType === "samplerCube") {\n      material._uniforms[newUniformId] = function () {\n        return material._textures[uniformId];\n      };\n      material._updateFunctions.push(createCubeMapUpdateFunction(uniformId));\n    } else if (uniformType.indexOf("mat") !== -1) {\n      var scratchMatrix = new matrixMap[uniformType]();\n      material._uniforms[newUniformId] = function () {\n        return matrixMap[uniformType].fromColumnMajorArray(\n          material.uniforms[uniformId],\n          scratchMatrix\n        );\n      };\n    } else {\n      material._uniforms[newUniformId] = function () {\n        return material.uniforms[uniformId];\n      };\n    }\n  }\n}\n\n// Determines the uniform type based on the uniform in the template.\nfunction getUniformType(uniformValue) {\n  var uniformType = uniformValue.type;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(uniformType)) {\n    var type = typeof uniformValue;\n    if (type === "number") {\n      uniformType = "float";\n    } else if (type === "boolean") {\n      uniformType = "bool";\n    } else if (\n      type === "string" ||\n      uniformValue instanceof _Core_Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z ||\n      uniformValue instanceof HTMLCanvasElement ||\n      uniformValue instanceof HTMLImageElement\n    ) {\n      if (/^([rgba]){1,4}$/i.test(uniformValue)) {\n        uniformType = "channels";\n      } else if (uniformValue === Material.DefaultCubeMapId) {\n        uniformType = "samplerCube";\n      } else {\n        uniformType = "sampler2D";\n      }\n    } else if (type === "object") {\n      if (Array.isArray(uniformValue)) {\n        if (\n          uniformValue.length === 4 ||\n          uniformValue.length === 9 ||\n          uniformValue.length === 16\n        ) {\n          uniformType = "mat" + Math.sqrt(uniformValue.length);\n        }\n      } else {\n        var numAttributes = 0;\n        for (var attribute in uniformValue) {\n          if (uniformValue.hasOwnProperty(attribute)) {\n            numAttributes += 1;\n          }\n        }\n        if (numAttributes >= 2 && numAttributes <= 4) {\n          uniformType = "vec" + numAttributes;\n        } else if (numAttributes === 6) {\n          uniformType = "samplerCube";\n        }\n      }\n    }\n  }\n  return uniformType;\n}\n\n// Create all sub-materials by combining source and uniforms together.\nfunction createSubMaterials(material) {\n  var strict = material._strict;\n  var subMaterialTemplates = material._template.materials;\n  for (var subMaterialId in subMaterialTemplates) {\n    if (subMaterialTemplates.hasOwnProperty(subMaterialId)) {\n      // Construct the sub-material.\n      var subMaterial = new Material({\n        strict: strict,\n        fabric: subMaterialTemplates[subMaterialId],\n        count: material._count,\n      });\n\n      material._count = subMaterial._count;\n      material._uniforms = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(\n        material._uniforms,\n        subMaterial._uniforms,\n        true\n      );\n      material.materials[subMaterialId] = subMaterial;\n      material._translucentFunctions = material._translucentFunctions.concat(\n        subMaterial._translucentFunctions\n      );\n\n      // Make the material\'s czm_getMaterial unique by appending the sub-material type.\n      var originalMethodName = "czm_getMaterial";\n      var newMethodName = originalMethodName + "_" + material._count++;\n      replaceToken(subMaterial, originalMethodName, newMethodName);\n      material.shaderSource = subMaterial.shaderSource + material.shaderSource;\n\n      // Replace each material id with an czm_getMaterial method call.\n      var materialMethodCall = newMethodName + "(materialInput)";\n      var tokensReplacedCount = replaceToken(\n        material,\n        subMaterialId,\n        materialMethodCall\n      );\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (tokensReplacedCount === 0 && strict) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "strict: shader source does not use material \'" + subMaterialId + "\'."\n        );\n      }\n      //>>includeEnd(\'debug\');\n    }\n  }\n}\n\n// Used for searching or replacing a token in a material\'s shader source with something else.\n// If excludePeriod is true, do not accept tokens that are preceded by periods.\n// http://stackoverflow.com/questions/641407/javascript-negative-lookbehind-equivalent\nfunction replaceToken(material, token, newToken, excludePeriod) {\n  excludePeriod = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(excludePeriod, true);\n  var count = 0;\n  var suffixChars = "([\\\\w])?";\n  var prefixChars = "([\\\\w" + (excludePeriod ? "." : "") + "])?";\n  var regExp = new RegExp(prefixChars + token + suffixChars, "g");\n  material.shaderSource = material.shaderSource.replace(regExp, function (\n    $0,\n    $1,\n    $2\n  ) {\n    if ($1 || $2) {\n      return $0;\n    }\n    count += 1;\n    return newToken;\n  });\n  return count;\n}\n\nfunction getNumberOfTokens(material, token, excludePeriod) {\n  return replaceToken(material, token, token, excludePeriod);\n}\n\nMaterial._materialCache = {\n  _materials: {},\n  addMaterial: function (type, materialTemplate) {\n    this._materials[type] = materialTemplate;\n  },\n  getMaterial: function (type) {\n    return this._materials[type];\n  },\n};\n\n/**\n * Gets or sets the default texture uniform value.\n * @type {String}\n */\nMaterial.DefaultImageId = "czm_defaultImage";\n\n/**\n * Gets or sets the default cube map texture uniform value.\n * @type {String}\n */\nMaterial.DefaultCubeMapId = "czm_defaultCubeMap";\n\n/**\n * Gets the name of the color material.\n * @type {String}\n * @readonly\n */\nMaterial.ColorType = "Color";\nMaterial._materialCache.addMaterial(Material.ColorType, {\n  fabric: {\n    type: Material.ColorType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0, 0.0, 0.5),\n    },\n    components: {\n      diffuse: "color.rgb",\n      alpha: "color.a",\n    },\n  },\n  translucent: function (material) {\n    return material.uniforms.color.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the image material.\n * @type {String}\n * @readonly\n */\nMaterial.ImageType = "Image";\nMaterial._materialCache.addMaterial(Material.ImageType, {\n  fabric: {\n    type: Material.ImageType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0, 1.0),\n    },\n    components: {\n      diffuse:\n        "texture2D(image, fract(repeat * materialInput.st)).rgb * color.rgb",\n      alpha: "texture2D(image, fract(repeat * materialInput.st)).a * color.a",\n    },\n  },\n  translucent: function (material) {\n    return material.uniforms.color.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the diffuce map material.\n * @type {String}\n * @readonly\n */\nMaterial.DiffuseMapType = "DiffuseMap";\nMaterial._materialCache.addMaterial(Material.DiffuseMapType, {\n  fabric: {\n    type: Material.DiffuseMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: "rgb",\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n    },\n    components: {\n      diffuse: "texture2D(image, fract(repeat * materialInput.st)).channels",\n    },\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the alpha map material.\n * @type {String}\n * @readonly\n */\nMaterial.AlphaMapType = "AlphaMap";\nMaterial._materialCache.addMaterial(Material.AlphaMapType, {\n  fabric: {\n    type: Material.AlphaMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: "a",\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n    },\n    components: {\n      alpha: "texture2D(image, fract(repeat * materialInput.st)).channel",\n    },\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the specular map material.\n * @type {String}\n * @readonly\n */\nMaterial.SpecularMapType = "SpecularMap";\nMaterial._materialCache.addMaterial(Material.SpecularMapType, {\n  fabric: {\n    type: Material.SpecularMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: "r",\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n    },\n    components: {\n      specular: "texture2D(image, fract(repeat * materialInput.st)).channel",\n    },\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the emmision map material.\n * @type {String}\n * @readonly\n */\nMaterial.EmissionMapType = "EmissionMap";\nMaterial._materialCache.addMaterial(Material.EmissionMapType, {\n  fabric: {\n    type: Material.EmissionMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: "rgb",\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n    },\n    components: {\n      emission: "texture2D(image, fract(repeat * materialInput.st)).channels",\n    },\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the bump map material.\n * @type {String}\n * @readonly\n */\nMaterial.BumpMapType = "BumpMap";\nMaterial._materialCache.addMaterial(Material.BumpMapType, {\n  fabric: {\n    type: Material.BumpMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channel: "r",\n      strength: 0.8,\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n    },\n    source: _Shaders_Materials_BumpMapMaterial_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the normal map material.\n * @type {String}\n * @readonly\n */\nMaterial.NormalMapType = "NormalMap";\nMaterial._materialCache.addMaterial(Material.NormalMapType, {\n  fabric: {\n    type: Material.NormalMapType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      channels: "rgb",\n      strength: 0.8,\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n    },\n    source: _Shaders_Materials_NormalMapMaterial_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the grid material.\n * @type {String}\n * @readonly\n */\nMaterial.GridType = "Grid";\nMaterial._materialCache.addMaterial(Material.GridType, {\n  fabric: {\n    type: Material.GridType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 1.0, 0.0, 1.0),\n      cellAlpha: 0.1,\n      lineCount: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(8.0, 8.0),\n      lineThickness: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 1.0),\n      lineOffset: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.0, 0.0),\n    },\n    source: _Shaders_Materials_GridMaterial_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.cellAlpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the stripe material.\n * @type {String}\n * @readonly\n */\nMaterial.StripeType = "Stripe";\nMaterial._materialCache.addMaterial(Material.StripeType, {\n  fabric: {\n    type: Material.StripeType,\n    uniforms: {\n      horizontal: true,\n      evenColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0, 0.5),\n      oddColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 1.0, 0.5),\n      offset: 0.0,\n      repeat: 5.0,\n    },\n    source: _Shaders_Materials_StripeMaterial_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.evenColor.alpha < 1.0 || uniforms.oddColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the checkerboard material.\n * @type {String}\n * @readonly\n */\nMaterial.CheckerboardType = "Checkerboard";\nMaterial._materialCache.addMaterial(Material.CheckerboardType, {\n  fabric: {\n    type: Material.CheckerboardType,\n    uniforms: {\n      lightColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0, 0.5),\n      darkColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.5),\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(5.0, 5.0),\n    },\n    source: _Shaders_Materials_CheckerboardMaterial_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.lightColor.alpha < 1.0 || uniforms.darkColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the dot material.\n * @type {String}\n * @readonly\n */\nMaterial.DotType = "Dot";\nMaterial._materialCache.addMaterial(Material.DotType, {\n  fabric: {\n    type: Material.DotType,\n    uniforms: {\n      lightColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 0.0, 0.75),\n      darkColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 1.0, 1.0, 0.75),\n      repeat: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(5.0, 5.0),\n    },\n    source: _Shaders_Materials_DotMaterial_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.lightColor.alpha < 1.0 || uniforms.darkColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the water material.\n * @type {String}\n * @readonly\n */\nMaterial.WaterType = "Water";\nMaterial._materialCache.addMaterial(Material.WaterType, {\n  fabric: {\n    type: Material.WaterType,\n    uniforms: {\n      baseWaterColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.2, 0.3, 0.6, 1.0),\n      blendColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 1.0, 0.699, 1.0),\n      specularMap: Material.DefaultImageId,\n      normalMap: Material.DefaultImageId,\n      frequency: 10.0,\n      animationSpeed: 0.01,\n      amplitude: 1.0,\n      specularIntensity: 0.5,\n      fadeFactor: 1.0,\n    },\n    source: _Shaders_Materials_Water_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return (\n      uniforms.baseWaterColor.alpha < 1.0 || uniforms.blendColor.alpha < 1.0\n    );\n  },\n});\n\n/**\n * Gets the name of the rim lighting material.\n * @type {String}\n * @readonly\n */\nMaterial.RimLightingType = "RimLighting";\nMaterial._materialCache.addMaterial(Material.RimLightingType, {\n  fabric: {\n    type: Material.RimLightingType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0, 0.0, 0.7),\n      rimColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0, 0.4),\n      width: 0.3,\n    },\n    source: _Shaders_Materials_RimLightingMaterial_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.rimColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the fade material.\n * @type {String}\n * @readonly\n */\nMaterial.FadeType = "Fade";\nMaterial._materialCache.addMaterial(Material.FadeType, {\n  fabric: {\n    type: Material.FadeType,\n    uniforms: {\n      fadeInColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0, 0.0, 1.0),\n      fadeOutColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      maximumDistance: 0.5,\n      repeat: true,\n      fadeDirection: {\n        x: true,\n        y: true,\n      },\n      time: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.5, 0.5),\n    },\n    source: _Shaders_Materials_FadeMaterial_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return (\n      uniforms.fadeInColor.alpha < 1.0 || uniforms.fadeOutColor.alpha < 1.0\n    );\n  },\n});\n\n/**\n * Gets the name of the polyline arrow material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineArrowType = "PolylineArrow";\nMaterial._materialCache.addMaterial(Material.PolylineArrowType, {\n  fabric: {\n    type: Material.PolylineArrowType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0, 1.0),\n    },\n    source: _Shaders_Materials_PolylineArrowMaterial_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z,\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the polyline glow material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineDashType = "PolylineDash";\nMaterial._materialCache.addMaterial(Material.PolylineDashType, {\n  fabric: {\n    type: Material.PolylineDashType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0, 1.0, 1.0),\n      gapColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      dashLength: 16.0,\n      dashPattern: 255.0,\n    },\n    source: _Shaders_Materials_PolylineDashMaterial_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z,\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the polyline glow material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineGlowType = "PolylineGlow";\nMaterial._materialCache.addMaterial(Material.PolylineGlowType, {\n  fabric: {\n    type: Material.PolylineGlowType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.5, 1.0, 1.0),\n      glowPower: 0.25,\n      taperPower: 1.0,\n    },\n    source: _Shaders_Materials_PolylineGlowMaterial_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z,\n  },\n  translucent: true,\n});\n\n/**\n * Gets the name of the polyline outline material.\n * @type {String}\n * @readonly\n */\nMaterial.PolylineOutlineType = "PolylineOutline";\nMaterial._materialCache.addMaterial(Material.PolylineOutlineType, {\n  fabric: {\n    type: Material.PolylineOutlineType,\n    uniforms: {\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 1.0, 1.0, 1.0),\n      outlineColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0, 0.0, 1.0),\n      outlineWidth: 1.0,\n    },\n    source: _Shaders_Materials_PolylineOutlineMaterial_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z,\n  },\n  translucent: function (material) {\n    var uniforms = material.uniforms;\n    return uniforms.color.alpha < 1.0 || uniforms.outlineColor.alpha < 1.0;\n  },\n});\n\n/**\n * Gets the name of the elevation contour material.\n * @type {String}\n * @readonly\n */\nMaterial.ElevationContourType = "ElevationContour";\nMaterial._materialCache.addMaterial(Material.ElevationContourType, {\n  fabric: {\n    type: Material.ElevationContourType,\n    uniforms: {\n      spacing: 100.0,\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0, 0.0, 1.0),\n      width: 1.0,\n    },\n    source: _Shaders_Materials_ElevationContourMaterial_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the elevation contour material.\n * @type {String}\n * @readonly\n */\nMaterial.ElevationRampType = "ElevationRamp";\nMaterial._materialCache.addMaterial(Material.ElevationRampType, {\n  fabric: {\n    type: Material.ElevationRampType,\n    uniforms: {\n      image: Material.DefaultImageId,\n      minimumHeight: 0.0,\n      maximumHeight: 10000.0,\n    },\n    source: _Shaders_Materials_ElevationRampMaterial_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the slope ramp material.\n * @type {String}\n * @readonly\n */\nMaterial.SlopeRampMaterialType = "SlopeRamp";\nMaterial._materialCache.addMaterial(Material.SlopeRampMaterialType, {\n  fabric: {\n    type: Material.SlopeRampMaterialType,\n    uniforms: {\n      image: Material.DefaultImageId,\n    },\n    source: _Shaders_Materials_SlopeRampMaterial_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the aspect ramp material.\n * @type {String}\n * @readonly\n */\nMaterial.AspectRampMaterialType = "AspectRamp";\nMaterial._materialCache.addMaterial(Material.AspectRampMaterialType, {\n  fabric: {\n    type: Material.AspectRampMaterialType,\n    uniforms: {\n      image: Material.DefaultImageId,\n    },\n    source: _Shaders_Materials_AspectRampMaterial_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z,\n  },\n  translucent: false,\n});\n\n/**\n * Gets the name of the elevation band material.\n * @type {String}\n * @readonly\n */\nMaterial.ElevationBandType = "ElevationBand";\nMaterial._materialCache.addMaterial(Material.ElevationBandType, {\n  fabric: {\n    type: Material.ElevationBandType,\n    uniforms: {\n      heights: Material.DefaultImageId,\n      colors: Material.DefaultImageId,\n    },\n    source: _Shaders_Materials_ElevationBandMaterial_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z,\n  },\n  translucent: true,\n});\n\n/* harmony default export */ __webpack_exports__["Z"] = (Material);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///69592\n')},79158:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_VertexFormat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67252);\n/* harmony import */ var _Shaders_Appearances_AllMaterialAppearanceFS_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(76754);\n/* harmony import */ var _Shaders_Appearances_AllMaterialAppearanceVS_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(66433);\n/* harmony import */ var _Shaders_Appearances_BasicMaterialAppearanceFS_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(13366);\n/* harmony import */ var _Shaders_Appearances_BasicMaterialAppearanceVS_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26479);\n/* harmony import */ var _Shaders_Appearances_TexturedMaterialAppearanceFS_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(93774);\n/* harmony import */ var _Shaders_Appearances_TexturedMaterialAppearanceVS_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(80330);\n/* harmony import */ var _Appearance_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12804);\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(69592);\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n     * An appearance for arbitrary geometry (as opposed to {@link EllipsoidSurfaceAppearance}, for example)\n     * that supports shading with materials.\n     *\n     * @alias MaterialAppearance\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n     * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n     * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link MaterialAppearance#renderState} has alpha blending enabled.\n     * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link MaterialAppearance#renderState} has backface culling enabled.\n     * @param {MaterialAppearance.MaterialSupportType} [options.materialSupport=MaterialAppearance.MaterialSupport.TEXTURED] The type of materials that will be supported.\n     * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n     * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n     * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n     * @param {Object} [options.renderState] Optional render state to override the default render state.\n     *\n     * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Material Appearance Demo}\n     *\n     * @example\n     * var primitive = new Cesium.Primitive({\n     *   geometryInstances : new Cesium.GeometryInstance({\n     *     geometry : new Cesium.WallGeometry({\n            materialSupport :  Cesium.MaterialAppearance.MaterialSupport.BASIC.vertexFormat,\n     *       // ...\n     *     })\n     *   }),\n     *   appearance : new Cesium.MaterialAppearance({\n     *     material : Cesium.Material.fromType(\'Color\'),\n     *     faceForward : true\n     *   })\n     *\n     * });\n     */\nfunction MaterialAppearance(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var translucent = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.translucent, true);\n  var closed = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.closed, false);\n  var materialSupport = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.materialSupport,\n    MaterialAppearance.MaterialSupport.TEXTURED\n  );\n\n  /**\n   * The material used to determine the fragment color.  Unlike other {@link MaterialAppearance}\n   * properties, this is not read-only, so an appearance\'s material can change on the fly.\n   *\n   * @type Material\n   *\n   * @default {@link Material.ColorType}\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.material)\n    ? options.material\n    : _Material_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromType */ .Z.fromType(_Material_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ColorType */ .Z.ColorType);\n\n  /**\n   * When <code>true</code>, the geometry is expected to appear translucent.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.translucent = translucent;\n\n  this._vertexShaderSource = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.vertexShaderSource,\n    materialSupport.vertexShaderSource\n  );\n  this._fragmentShaderSource = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.fragmentShaderSource,\n    materialSupport.fragmentShaderSource\n  );\n  this._renderState = _Appearance_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].getDefaultRenderState */ .Z.getDefaultRenderState(\n    translucent,\n    closed,\n    options.renderState\n  );\n  this._closed = closed;\n\n  // Non-derived members\n\n  this._materialSupport = materialSupport;\n  this._vertexFormat = materialSupport.vertexFormat;\n  this._flat = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.flat, false);\n  this._faceForward = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.faceForward, !closed);\n}\n\nObject.defineProperties(MaterialAppearance.prototype, {\n  /**\n   * The GLSL source code for the vertex shader.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  vertexShaderSource: {\n    get: function () {\n      return this._vertexShaderSource;\n    },\n  },\n\n  /**\n   * The GLSL source code for the fragment shader.  The full fragment shader\n   * source is built procedurally taking into account {@link MaterialAppearance#material},\n   * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n   * Use {@link MaterialAppearance#getFragmentShaderSource} to get the full source.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  fragmentShaderSource: {\n    get: function () {\n      return this._fragmentShaderSource;\n    },\n  },\n\n  /**\n   * The WebGL fixed-function state to use when rendering the geometry.\n   * <p>\n   * The render state can be explicitly defined when constructing a {@link MaterialAppearance}\n   * instance, or it is set implicitly via {@link MaterialAppearance#translucent}\n   * and {@link MaterialAppearance#closed}.\n   * </p>\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the geometry is expected to be closed so\n   * {@link MaterialAppearance#renderState} has backface culling enabled.\n   * If the viewer enters the geometry, it will not be visible.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  closed: {\n    get: function () {\n      return this._closed;\n    },\n  },\n\n  /**\n   * The type of materials supported by this instance.  This impacts the required\n   * {@link VertexFormat} and the complexity of the vertex and fragment shaders.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {MaterialAppearance.MaterialSupportType}\n   * @readonly\n   *\n   * @default {@link MaterialAppearance.MaterialSupport.TEXTURED}\n   */\n  materialSupport: {\n    get: function () {\n      return this._materialSupport;\n    },\n  },\n\n  /**\n   * The {@link VertexFormat} that this appearance instance is compatible with.\n   * A geometry can have more vertex attributes and still be compatible - at a\n   * potential performance cost - but it can\'t have less.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type VertexFormat\n   * @readonly\n   *\n   * @default {@link MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat}\n   */\n  vertexFormat: {\n    get: function () {\n      return this._vertexFormat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, flat shading is used in the fragment shader,\n   * which means lighting is not taking into account.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  flat: {\n    get: function () {\n      return this._flat;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the fragment shader flips the surface normal\n   * as needed to ensure that the normal faces the viewer to avoid\n   * dark spots.  This is useful when both sides of a geometry should be\n   * shaded like {@link WallGeometry}.\n   *\n   * @memberof MaterialAppearance.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  faceForward: {\n    get: function () {\n      return this._faceForward;\n    },\n  },\n});\n\n/**\n * Procedurally creates the full GLSL fragment shader source.  For {@link MaterialAppearance},\n * this is derived from {@link MaterialAppearance#fragmentShaderSource}, {@link MaterialAppearance#material},\n * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n *\n * @function\n *\n * @returns {String} The full GLSL fragment shader source.\n */\nMaterialAppearance.prototype.getFragmentShaderSource =\n  _Appearance_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].prototype.getFragmentShaderSource */ .Z.prototype.getFragmentShaderSource;\n\n/**\n * Determines if the geometry is translucent based on {@link MaterialAppearance#translucent} and {@link Material#isTranslucent}.\n *\n * @function\n *\n * @returns {Boolean} <code>true</code> if the appearance is translucent.\n */\nMaterialAppearance.prototype.isTranslucent = _Appearance_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].prototype.isTranslucent */ .Z.prototype.isTranslucent;\n\n/**\n * Creates a render state.  This is not the final render state instance; instead,\n * it can contain a subset of render state properties identical to the render state\n * created in the context.\n *\n * @function\n *\n * @returns {Object} The render state.\n */\nMaterialAppearance.prototype.getRenderState =\n  _Appearance_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].prototype.getRenderState */ .Z.prototype.getRenderState;\n\n/**\n * @typedef MaterialAppearance.MaterialSupportType\n * @type {Object}\n * @property {VertexFormat} vertexFormat\n * @property {String} vertexShaderSource\n * @property {String} fragmentShaderSource\n */\n\n/**\n * Determines the type of {@link Material} that is supported by a\n * {@link MaterialAppearance} instance.  This is a trade-off between\n * flexibility (a wide array of materials) and memory/performance\n * (required vertex format and GLSL shader complexity.\n * @namespace\n */\nMaterialAppearance.MaterialSupport = {\n  /**\n   * Only basic materials, which require just <code>position</code> and\n   * <code>normal</code> vertex attributes, are supported.\n   *\n   * @type {MaterialAppearance.MaterialSupportType}\n   * @constant\n   */\n  BASIC: Object.freeze({\n    vertexFormat: _Core_VertexFormat_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].POSITION_AND_NORMAL */ .Z.POSITION_AND_NORMAL,\n    vertexShaderSource: _Shaders_Appearances_BasicMaterialAppearanceVS_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z,\n    fragmentShaderSource: _Shaders_Appearances_BasicMaterialAppearanceFS_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z,\n  }),\n  /**\n   * Materials with textures, which require <code>position</code>,\n   * <code>normal</code>, and <code>st</code> vertex attributes,\n   * are supported.  The vast majority of materials fall into this category.\n   *\n   * @type {MaterialAppearance.MaterialSupportType}\n   * @constant\n   */\n  TEXTURED: Object.freeze({\n    vertexFormat: _Core_VertexFormat_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].POSITION_NORMAL_AND_ST */ .Z.POSITION_NORMAL_AND_ST,\n    vertexShaderSource: _Shaders_Appearances_TexturedMaterialAppearanceVS_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z,\n    fragmentShaderSource: _Shaders_Appearances_TexturedMaterialAppearanceFS_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n  }),\n  /**\n   * All materials, including those that work in tangent space, are supported.\n   * This requires <code>position</code>, <code>normal</code>, <code>st</code>,\n   * <code>tangent</code>, and <code>bitangent</code> vertex attributes.\n   *\n   * @type {MaterialAppearance.MaterialSupportType}\n   * @constant\n   */\n  ALL: Object.freeze({\n    vertexFormat: _Core_VertexFormat_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ALL */ .Z.ALL,\n    vertexShaderSource: _Shaders_Appearances_AllMaterialAppearanceVS_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n    fragmentShaderSource: _Shaders_Appearances_AllMaterialAppearanceFS_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z,\n  }),\n};\n/* harmony default export */ __webpack_exports__["Z"] = (MaterialAppearance);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79158\n')}}]);