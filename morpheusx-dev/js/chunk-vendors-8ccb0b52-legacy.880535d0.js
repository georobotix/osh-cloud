"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[8440],{74333:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n\n/**\n * A model\'s material with modifiable parameters.  A glTF material\n * contains parameters defined by the material\'s technique with values\n * defined by the technique and potentially overridden by the material.\n * This class allows changing these values at runtime.\n * <p>\n * Use {@link Model#getMaterial} to create an instance.\n * </p>\n *\n * @alias ModelMaterial\n * @internalConstructor\n * @class\n *\n * @see Model#getMaterial\n */\nfunction ModelMaterial(model, material, id) {\n  this._name = material.name;\n  this._id = id;\n  this._uniformMap = model._uniformMaps[id];\n\n  this._technique = undefined;\n  this._program = undefined;\n  this._values = undefined;\n}\n\nObject.defineProperties(ModelMaterial.prototype, {\n  /**\n   * The value of the <code>name</code> property of this material.\n   *\n   * @memberof ModelMaterial.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The index of the material.\n   *\n   * @memberof ModelMaterial.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n});\n\n/**\n * Assigns a value to a material parameter.  The type for <code>value</code>\n * depends on the glTF type of the parameter.  It will be a floating-point\n * number, Cartesian, or matrix.\n *\n * @param {String} name The name of the parameter.\n * @param {*} [value] The value to assign to the parameter.\n *\n * @exception {DeveloperError} name must match a parameter name in the material\'s technique that is targetable and not optimized out.\n *\n * @example\n * material.setValue(\'diffuse\', new Cesium.Cartesian4(1.0, 0.0, 0.0, 1.0));  // vec4\n * material.setValue(\'shininess\', 256.0); // scalar\n */\nModelMaterial.prototype.setValue = function (name, value) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(name)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("name is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var uniformName = "u_" + name;\n  var v = this._uniformMap.values[uniformName];\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(v)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "name must match a parameter name in the material\'s technique that is targetable and not optimized out."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  v.value = v.clone(value, v.value);\n};\n\n/**\n * Returns the value of the parameter with the given <code>name</code>.  The type of the\n * returned object depends on the glTF type of the parameter.  It will be a floating-point\n * number, Cartesian, or matrix.\n *\n * @param {String} name The name of the parameter.\n * @returns {*} The value of the parameter or <code>undefined</code> if the parameter does not exist.\n */\nModelMaterial.prototype.getValue = function (name) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(name)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("name is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var uniformName = "u_" + name;\n  var v = this._uniformMap.values[uniformName];\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(v)) {\n    return undefined;\n  }\n\n  return v.value;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ModelMaterial);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQzMzMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBeUM7QUFDYzs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx5QkFBeUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxPQUFPLHFFQUFPO0FBQ2QsY0FBYyx3RUFBYztBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPLHFFQUFPO0FBQ2QsY0FBYyx3RUFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLE9BQU8scUVBQU87QUFDZCxjQUFjLHdFQUFjO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxPQUFPLHFFQUFPO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseURBQWUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL01vZGVsTWF0ZXJpYWwuanM/ODEzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRGV2ZWxvcGVyRXJyb3IgZnJvbSBcIi4uL0NvcmUvRGV2ZWxvcGVyRXJyb3IuanNcIjtcblxuLyoqXG4gKiBBIG1vZGVsJ3MgbWF0ZXJpYWwgd2l0aCBtb2RpZmlhYmxlIHBhcmFtZXRlcnMuICBBIGdsVEYgbWF0ZXJpYWxcbiAqIGNvbnRhaW5zIHBhcmFtZXRlcnMgZGVmaW5lZCBieSB0aGUgbWF0ZXJpYWwncyB0ZWNobmlxdWUgd2l0aCB2YWx1ZXNcbiAqIGRlZmluZWQgYnkgdGhlIHRlY2huaXF1ZSBhbmQgcG90ZW50aWFsbHkgb3ZlcnJpZGRlbiBieSB0aGUgbWF0ZXJpYWwuXG4gKiBUaGlzIGNsYXNzIGFsbG93cyBjaGFuZ2luZyB0aGVzZSB2YWx1ZXMgYXQgcnVudGltZS5cbiAqIDxwPlxuICogVXNlIHtAbGluayBNb2RlbCNnZXRNYXRlcmlhbH0gdG8gY3JlYXRlIGFuIGluc3RhbmNlLlxuICogPC9wPlxuICpcbiAqIEBhbGlhcyBNb2RlbE1hdGVyaWFsXG4gKiBAaW50ZXJuYWxDb25zdHJ1Y3RvclxuICogQGNsYXNzXG4gKlxuICogQHNlZSBNb2RlbCNnZXRNYXRlcmlhbFxuICovXG5mdW5jdGlvbiBNb2RlbE1hdGVyaWFsKG1vZGVsLCBtYXRlcmlhbCwgaWQpIHtcbiAgdGhpcy5fbmFtZSA9IG1hdGVyaWFsLm5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX3VuaWZvcm1NYXAgPSBtb2RlbC5fdW5pZm9ybU1hcHNbaWRdO1xuXG4gIHRoaXMuX3RlY2huaXF1ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJvZ3JhbSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fdmFsdWVzID0gdW5kZWZpbmVkO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhNb2RlbE1hdGVyaWFsLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSA8Y29kZT5uYW1lPC9jb2RlPiBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgTW9kZWxNYXRlcmlhbC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBuYW1lOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG1hdGVyaWFsLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgTW9kZWxNYXRlcmlhbC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBpZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH0sXG4gIH0sXG59KTtcblxuLyoqXG4gKiBBc3NpZ25zIGEgdmFsdWUgdG8gYSBtYXRlcmlhbCBwYXJhbWV0ZXIuICBUaGUgdHlwZSBmb3IgPGNvZGU+dmFsdWU8L2NvZGU+XG4gKiBkZXBlbmRzIG9uIHRoZSBnbFRGIHR5cGUgb2YgdGhlIHBhcmFtZXRlci4gIEl0IHdpbGwgYmUgYSBmbG9hdGluZy1wb2ludFxuICogbnVtYmVyLCBDYXJ0ZXNpYW4sIG9yIG1hdHJpeC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLlxuICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBhc3NpZ24gdG8gdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gbmFtZSBtdXN0IG1hdGNoIGEgcGFyYW1ldGVyIG5hbWUgaW4gdGhlIG1hdGVyaWFsJ3MgdGVjaG5pcXVlIHRoYXQgaXMgdGFyZ2V0YWJsZSBhbmQgbm90IG9wdGltaXplZCBvdXQuXG4gKlxuICogQGV4YW1wbGVcbiAqIG1hdGVyaWFsLnNldFZhbHVlKCdkaWZmdXNlJywgbmV3IENlc2l1bS5DYXJ0ZXNpYW40KDEuMCwgMC4wLCAwLjAsIDEuMCkpOyAgLy8gdmVjNFxuICogbWF0ZXJpYWwuc2V0VmFsdWUoJ3NoaW5pbmVzcycsIDI1Ni4wKTsgLy8gc2NhbGFyXG4gKi9cbk1vZGVsTWF0ZXJpYWwucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmICghZGVmaW5lZChuYW1lKSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcIm5hbWUgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciB1bmlmb3JtTmFtZSA9IFwidV9cIiArIG5hbWU7XG4gIHZhciB2ID0gdGhpcy5fdW5pZm9ybU1hcC52YWx1ZXNbdW5pZm9ybU5hbWVdO1xuXG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmICghZGVmaW5lZCh2KSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcbiAgICAgIFwibmFtZSBtdXN0IG1hdGNoIGEgcGFyYW1ldGVyIG5hbWUgaW4gdGhlIG1hdGVyaWFsJ3MgdGVjaG5pcXVlIHRoYXQgaXMgdGFyZ2V0YWJsZSBhbmQgbm90IG9wdGltaXplZCBvdXQuXCJcbiAgICApO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHYudmFsdWUgPSB2LmNsb25lKHZhbHVlLCB2LnZhbHVlKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlciB3aXRoIHRoZSBnaXZlbiA8Y29kZT5uYW1lPC9jb2RlPi4gIFRoZSB0eXBlIG9mIHRoZVxuICogcmV0dXJuZWQgb2JqZWN0IGRlcGVuZHMgb24gdGhlIGdsVEYgdHlwZSBvZiB0aGUgcGFyYW1ldGVyLiAgSXQgd2lsbCBiZSBhIGZsb2F0aW5nLXBvaW50XG4gKiBudW1iZXIsIENhcnRlc2lhbiwgb3IgbWF0cml4LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIgb3IgPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiBpZiB0aGUgcGFyYW1ldGVyIGRvZXMgbm90IGV4aXN0LlxuICovXG5Nb2RlbE1hdGVyaWFsLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmICghZGVmaW5lZChuYW1lKSkge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcIm5hbWUgaXMgcmVxdWlyZWQuXCIpO1xuICB9XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciB1bmlmb3JtTmFtZSA9IFwidV9cIiArIG5hbWU7XG4gIHZhciB2ID0gdGhpcy5fdW5pZm9ybU1hcC52YWx1ZXNbdW5pZm9ybU5hbWVdO1xuXG4gIGlmICghZGVmaW5lZCh2KSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gdi52YWx1ZTtcbn07XG5leHBvcnQgZGVmYXVsdCBNb2RlbE1hdGVyaWFsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74333\n')},55531:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * A model's mesh and its materials.\n * <p>\n * Use {@link Model#getMesh} to create an instance.\n * </p>\n *\n * @alias ModelMesh\n * @internalConstructor\n * @class\n *\n * @see Model#getMesh\n */\nfunction ModelMesh(mesh, runtimeMaterialsById, id) {\n  var materials = [];\n  var primitives = mesh.primitives;\n  var length = primitives.length;\n  for (var i = 0; i < length; ++i) {\n    var p = primitives[i];\n    materials[i] = runtimeMaterialsById[p.material];\n  }\n\n  this._name = mesh.name;\n  this._materials = materials;\n  this._id = id;\n}\n\nObject.defineProperties(ModelMesh.prototype, {\n  /**\n   * The value of the <code>name</code> property of this mesh.\n   *\n   * @memberof ModelMesh.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The index of the mesh.\n   *\n   * @memberof ModelMesh.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * An array of {@link ModelMaterial} instances indexed by the mesh's\n   * primitive indices.\n   *\n   * @memberof ModelMesh.prototype\n   *\n   * @type {ModelMaterial[]}\n   * @readonly\n   */\n  materials: {\n    get: function () {\n      return this._materials;\n    },\n  },\n});\n/* harmony default export */ __webpack_exports__[\"Z\"] = (ModelMesh);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU1MzEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxQkFBcUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7QUFDRCx5REFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvTW9kZWxNZXNoLmpzPzJhM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG1vZGVsJ3MgbWVzaCBhbmQgaXRzIG1hdGVyaWFscy5cbiAqIDxwPlxuICogVXNlIHtAbGluayBNb2RlbCNnZXRNZXNofSB0byBjcmVhdGUgYW4gaW5zdGFuY2UuXG4gKiA8L3A+XG4gKlxuICogQGFsaWFzIE1vZGVsTWVzaFxuICogQGludGVybmFsQ29uc3RydWN0b3JcbiAqIEBjbGFzc1xuICpcbiAqIEBzZWUgTW9kZWwjZ2V0TWVzaFxuICovXG5mdW5jdGlvbiBNb2RlbE1lc2gobWVzaCwgcnVudGltZU1hdGVyaWFsc0J5SWQsIGlkKSB7XG4gIHZhciBtYXRlcmlhbHMgPSBbXTtcbiAgdmFyIHByaW1pdGl2ZXMgPSBtZXNoLnByaW1pdGl2ZXM7XG4gIHZhciBsZW5ndGggPSBwcmltaXRpdmVzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwID0gcHJpbWl0aXZlc1tpXTtcbiAgICBtYXRlcmlhbHNbaV0gPSBydW50aW1lTWF0ZXJpYWxzQnlJZFtwLm1hdGVyaWFsXTtcbiAgfVxuXG4gIHRoaXMuX25hbWUgPSBtZXNoLm5hbWU7XG4gIHRoaXMuX21hdGVyaWFscyA9IG1hdGVyaWFscztcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTW9kZWxNZXNoLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSA8Y29kZT5uYW1lPC9jb2RlPiBwcm9wZXJ0eSBvZiB0aGlzIG1lc2guXG4gICAqXG4gICAqIEBtZW1iZXJvZiBNb2RlbE1lc2gucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbmFtZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBtZXNoLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgTW9kZWxNZXNoLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGlkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2Yge0BsaW5rIE1vZGVsTWF0ZXJpYWx9IGluc3RhbmNlcyBpbmRleGVkIGJ5IHRoZSBtZXNoJ3NcbiAgICogcHJpbWl0aXZlIGluZGljZXMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBNb2RlbE1lc2gucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtNb2RlbE1hdGVyaWFsW119XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbWF0ZXJpYWxzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWxzO1xuICAgIH0sXG4gIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IE1vZGVsTWVzaDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55531\n")},10531:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72248);\n\n\n/**\n * A model node with a transform for user-defined animations.  A glTF asset can\n * contain animations that target a node\'s transform.  This class allows\n * changing a node\'s transform externally so animation can be driven by another\n * source, not just an animation in the glTF asset.\n * <p>\n * Use {@link Model#getNode} to create an instance.\n * </p>\n *\n * @alias ModelNode\n * @internalConstructor\n * @class\n *\n * @example\n * var node = model.getNode(\'LOD3sp\');\n * node.matrix = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(5.0, 1.0, 1.0), node.matrix);\n *\n * @see Model#getNode\n */\nfunction ModelNode(model, node, runtimeNode, id, matrix) {\n  this._model = model;\n  this._runtimeNode = runtimeNode;\n  this._name = node.name;\n  this._id = id;\n\n  /**\n   * @private\n   */\n  this.useMatrix = false;\n\n  this._show = true;\n  this._matrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(matrix);\n  this._originalMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(matrix);\n}\n\nObject.defineProperties(ModelNode.prototype, {\n  /**\n   * The value of the <code>name</code> property of this node.\n   *\n   * @memberof ModelNode.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n\n  /**\n   * The index of the node.\n   *\n   * @memberof ModelNode.prototype\n   *\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Determines if this node and its children will be shown.\n   *\n   * @memberof ModelNode.prototype\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      if (this._show !== value) {\n        this._show = value;\n        this._model._perNodeShowDirty = true;\n      }\n    },\n  },\n\n  /**\n   * The node\'s 4x4 matrix transform from its local coordinates to\n   * its parent\'s.\n   * <p>\n   * For changes to take effect, this property must be assigned to;\n   * setting individual elements of the matrix will not work.\n   * </p>\n   *\n   * @memberof ModelNode.prototype\n   * @type {Matrix4}\n   */\n  matrix: {\n    get: function () {\n      return this._matrix;\n    },\n    set: function (value) {\n      this._matrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(value, this._matrix);\n      this.useMatrix = true;\n\n      var model = this._model;\n      model._cesiumAnimationsDirty = true;\n      this._runtimeNode.dirtyNumber = model._maxDirtyNumber;\n    },\n  },\n\n  /**\n   * Gets the node\'s original 4x4 matrix transform from its local coordinates to\n   * its parent\'s, without any node transformations or articulations applied.\n   *\n   * @memberof ModelNode.prototype\n   * @type {Matrix4}\n   */\n  originalMatrix: {\n    get: function () {\n      return this._originalMatrix;\n    },\n  },\n});\n\n/**\n * @private\n */\nModelNode.prototype.setMatrix = function (matrix) {\n  // Update matrix but do not set the dirty flag since this is used internally\n  // to keep the matrix in-sync during a glTF animation.\n  _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(matrix, this._matrix);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ModelNode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1MzEuanMiLCJtYXBwaW5ncyI6IjtBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxQkFBcUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQiw2RUFBYTtBQUM5Qix5QkFBeUIsNkVBQWE7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQiw2RUFBYTtBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsNkVBQWE7QUFDZjtBQUNBLHlEQUFlLFNBQVMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9Nb2RlbE5vZGUuanM/YjUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWF0cml4NCBmcm9tIFwiLi4vQ29yZS9NYXRyaXg0LmpzXCI7XG5cbi8qKlxuICogQSBtb2RlbCBub2RlIHdpdGggYSB0cmFuc2Zvcm0gZm9yIHVzZXItZGVmaW5lZCBhbmltYXRpb25zLiAgQSBnbFRGIGFzc2V0IGNhblxuICogY29udGFpbiBhbmltYXRpb25zIHRoYXQgdGFyZ2V0IGEgbm9kZSdzIHRyYW5zZm9ybS4gIFRoaXMgY2xhc3MgYWxsb3dzXG4gKiBjaGFuZ2luZyBhIG5vZGUncyB0cmFuc2Zvcm0gZXh0ZXJuYWxseSBzbyBhbmltYXRpb24gY2FuIGJlIGRyaXZlbiBieSBhbm90aGVyXG4gKiBzb3VyY2UsIG5vdCBqdXN0IGFuIGFuaW1hdGlvbiBpbiB0aGUgZ2xURiBhc3NldC5cbiAqIDxwPlxuICogVXNlIHtAbGluayBNb2RlbCNnZXROb2RlfSB0byBjcmVhdGUgYW4gaW5zdGFuY2UuXG4gKiA8L3A+XG4gKlxuICogQGFsaWFzIE1vZGVsTm9kZVxuICogQGludGVybmFsQ29uc3RydWN0b3JcbiAqIEBjbGFzc1xuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgbm9kZSA9IG1vZGVsLmdldE5vZGUoJ0xPRDNzcCcpO1xuICogbm9kZS5tYXRyaXggPSBDZXNpdW0uTWF0cml4NC5mcm9tU2NhbGUobmV3IENlc2l1bS5DYXJ0ZXNpYW4zKDUuMCwgMS4wLCAxLjApLCBub2RlLm1hdHJpeCk7XG4gKlxuICogQHNlZSBNb2RlbCNnZXROb2RlXG4gKi9cbmZ1bmN0aW9uIE1vZGVsTm9kZShtb2RlbCwgbm9kZSwgcnVudGltZU5vZGUsIGlkLCBtYXRyaXgpIHtcbiAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcbiAgdGhpcy5fcnVudGltZU5vZGUgPSBydW50aW1lTm9kZTtcbiAgdGhpcy5fbmFtZSA9IG5vZGUubmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudXNlTWF0cml4ID0gZmFsc2U7XG5cbiAgdGhpcy5fc2hvdyA9IHRydWU7XG4gIHRoaXMuX21hdHJpeCA9IE1hdHJpeDQuY2xvbmUobWF0cml4KTtcbiAgdGhpcy5fb3JpZ2luYWxNYXRyaXggPSBNYXRyaXg0LmNsb25lKG1hdHJpeCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1vZGVsTm9kZS5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgPGNvZGU+bmFtZTwvY29kZT4gcHJvcGVydHkgb2YgdGhpcyBub2RlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgTW9kZWxOb2RlLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG5hbWU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgbm9kZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIE1vZGVsTm9kZS5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBpZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4gd2lsbCBiZSBzaG93bi5cbiAgICpcbiAgICogQG1lbWJlcm9mIE1vZGVsTm9kZS5wcm90b3R5cGVcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHNob3c6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaG93O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9zaG93ICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9zaG93ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX21vZGVsLl9wZXJOb2RlU2hvd0RpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgbm9kZSdzIDR4NCBtYXRyaXggdHJhbnNmb3JtIGZyb20gaXRzIGxvY2FsIGNvb3JkaW5hdGVzIHRvXG4gICAqIGl0cyBwYXJlbnQncy5cbiAgICogPHA+XG4gICAqIEZvciBjaGFuZ2VzIHRvIHRha2UgZWZmZWN0LCB0aGlzIHByb3BlcnR5IG11c3QgYmUgYXNzaWduZWQgdG87XG4gICAqIHNldHRpbmcgaW5kaXZpZHVhbCBlbGVtZW50cyBvZiB0aGUgbWF0cml4IHdpbGwgbm90IHdvcmsuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIE1vZGVsTm9kZS5wcm90b3R5cGVcbiAgICogQHR5cGUge01hdHJpeDR9XG4gICAqL1xuICBtYXRyaXg6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXRyaXg7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdGhpcy5fbWF0cml4ID0gTWF0cml4NC5jbG9uZSh2YWx1ZSwgdGhpcy5fbWF0cml4KTtcbiAgICAgIHRoaXMudXNlTWF0cml4ID0gdHJ1ZTtcblxuICAgICAgdmFyIG1vZGVsID0gdGhpcy5fbW9kZWw7XG4gICAgICBtb2RlbC5fY2VzaXVtQW5pbWF0aW9uc0RpcnR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3J1bnRpbWVOb2RlLmRpcnR5TnVtYmVyID0gbW9kZWwuX21heERpcnR5TnVtYmVyO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG5vZGUncyBvcmlnaW5hbCA0eDQgbWF0cml4IHRyYW5zZm9ybSBmcm9tIGl0cyBsb2NhbCBjb29yZGluYXRlcyB0b1xuICAgKiBpdHMgcGFyZW50J3MsIHdpdGhvdXQgYW55IG5vZGUgdHJhbnNmb3JtYXRpb25zIG9yIGFydGljdWxhdGlvbnMgYXBwbGllZC5cbiAgICpcbiAgICogQG1lbWJlcm9mIE1vZGVsTm9kZS5wcm90b3R5cGVcbiAgICogQHR5cGUge01hdHJpeDR9XG4gICAqL1xuICBvcmlnaW5hbE1hdHJpeDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbmFsTWF0cml4O1xuICAgIH0sXG4gIH0sXG59KTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5Nb2RlbE5vZGUucHJvdG90eXBlLnNldE1hdHJpeCA9IGZ1bmN0aW9uIChtYXRyaXgpIHtcbiAgLy8gVXBkYXRlIG1hdHJpeCBidXQgZG8gbm90IHNldCB0aGUgZGlydHkgZmxhZyBzaW5jZSB0aGlzIGlzIHVzZWQgaW50ZXJuYWxseVxuICAvLyB0byBrZWVwIHRoZSBtYXRyaXggaW4tc3luYyBkdXJpbmcgYSBnbFRGIGFuaW1hdGlvbi5cbiAgTWF0cml4NC5jbG9uZShtYXRyaXgsIHRoaXMuX21hdHJpeCk7XG59O1xuZXhwb3J0IGRlZmF1bHQgTW9kZWxOb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10531\n')},32851:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82982);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(88453);\n/* harmony import */ var _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(56629);\n\n\n\n\n\n\n\n\n\n\n// glTF does not allow an index value of 65535 because this is the primitive\n// restart value in some APIs.\nvar MAX_GLTF_UINT16_INDEX = 65534;\n\n/**\n * Creates face outlines for glTF primitives with the `CESIUM_primitive_outline` extension.\n * @private\n */\nfunction ModelOutlineLoader() {}\n\n/**\n * Returns true if the model uses or requires CESIUM_primitive_outline.\n * @private\n */\nModelOutlineLoader.hasExtension = function (model) {\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(model.extensionsRequired.CESIUM_primitive_outline) ||\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(model.extensionsUsed.CESIUM_primitive_outline)\n  );\n};\n\n/**\n * Arranges to outline any primitives with the CESIUM_primitive_outline extension.\n * It is expected that all buffer data is loaded and available in\n * `extras._pipeline.source` before this function is called, and that vertex\n * and index WebGL buffers are not yet created.\n * @private\n */\nModelOutlineLoader.outlinePrimitives = function (model) {\n  if (!ModelOutlineLoader.hasExtension(model)) {\n    return;\n  }\n\n  var gltf = model.gltf;\n\n  // Assumption: A single bufferView contains a single zero-indexed range of vertices.\n  // No trickery with using large accessor byteOffsets to store multiple zero-based\n  // ranges of vertices in a single bufferView. Use separate bufferViews for that,\n  // you monster.\n  // Note that interleaved vertex attributes (e.g. position0, normal0, uv0,\n  // position1, normal1, uv1, ...) _are_ supported and should not be confused with\n  // the above.\n\n  var vertexNumberingScopes = [];\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].mesh */ .Z.mesh(gltf, function (mesh, meshId) {\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].meshPrimitive */ .Z.meshPrimitive(mesh, function (primitive, primitiveId) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(primitive.extensions)) {\n        return;\n      }\n\n      var outlineData = primitive.extensions.CESIUM_primitive_outline;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(outlineData)) {\n        return;\n      }\n\n      var vertexNumberingScope = getVertexNumberingScope(model, primitive);\n      if (vertexNumberingScope === undefined) {\n        return;\n      }\n\n      if (vertexNumberingScopes.indexOf(vertexNumberingScope) < 0) {\n        vertexNumberingScopes.push(vertexNumberingScope);\n      }\n\n      // Add the outline to this primitive\n      addOutline(\n        model,\n        meshId,\n        primitiveId,\n        outlineData.indices,\n        vertexNumberingScope\n      );\n    });\n  });\n\n  // Update all relevant bufferViews to include the duplicate vertices that are\n  // needed for outlining.\n  for (var i = 0; i < vertexNumberingScopes.length; ++i) {\n    updateBufferViewsWithNewVertices(\n      model,\n      vertexNumberingScopes[i].bufferViews\n    );\n  }\n\n  // Remove data not referenced by any bufferViews anymore.\n  compactBuffers(model);\n};\n\nModelOutlineLoader.createTexture = function (model, context) {\n  var cache = context.cache.modelOutliningCache;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(cache)) {\n    cache = context.cache.modelOutliningCache = {};\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(cache.outlineTexture)) {\n    return cache.outlineTexture;\n  }\n\n  var maxSize = Math.min(4096, _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].maximumTextureSize */ .Z.maximumTextureSize);\n\n  var size = maxSize;\n  var levelZero = createTexture(size);\n\n  var mipLevels = [];\n\n  while (size > 1) {\n    size >>= 1;\n    mipLevels.push(createTexture(size));\n  }\n\n  var texture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n    context: context,\n    source: {\n      arrayBufferView: levelZero,\n      mipLevels: mipLevels,\n    },\n    width: maxSize,\n    height: 1,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].LUMINANCE */ .Z.LUMINANCE,\n    sampler: new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z({\n      wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].LINEAR_MIPMAP_LINEAR */ .Z.LINEAR_MIPMAP_LINEAR,\n      magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].LINEAR */ .Z.LINEAR,\n    }),\n  });\n\n  cache.outlineTexture = texture;\n\n  return texture;\n};\n\nfunction addOutline(\n  model,\n  meshId,\n  primitiveId,\n  edgeIndicesAccessorId,\n  vertexNumberingScope\n) {\n  var vertexCopies = vertexNumberingScope.vertexCopies;\n  var extraVertices = vertexNumberingScope.extraVertices;\n  var outlineCoordinates = vertexNumberingScope.outlineCoordinates;\n\n  var gltf = model.gltf;\n  var mesh = gltf.meshes[meshId];\n  var primitive = mesh.primitives[primitiveId];\n  var accessors = gltf.accessors;\n  var bufferViews = gltf.bufferViews;\n\n  // Find the number of vertices in this primitive by looking at\n  // the first attribute. Others are required to be the same.\n  var numVertices;\n  for (var semantic in primitive.attributes) {\n    if (primitive.attributes.hasOwnProperty(semantic)) {\n      var attributeId = primitive.attributes[semantic];\n      var accessor = accessors[attributeId];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(accessor)) {\n        numVertices = accessor.count;\n        break;\n      }\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(numVertices)) {\n    return undefined;\n  }\n\n  var triangleIndexAccessorGltf = accessors[primitive.indices];\n  var triangleIndexBufferViewGltf =\n    bufferViews[triangleIndexAccessorGltf.bufferView];\n  var edgeIndexAccessorGltf = accessors[edgeIndicesAccessorId];\n  var edgeIndexBufferViewGltf = bufferViews[edgeIndexAccessorGltf.bufferView];\n\n  var loadResources = model._loadResources;\n  var triangleIndexBufferView = loadResources.getBuffer(\n    triangleIndexBufferViewGltf\n  );\n  var edgeIndexBufferView = loadResources.getBuffer(edgeIndexBufferViewGltf);\n\n  var triangleIndices =\n    triangleIndexAccessorGltf.componentType === 5123\n      ? new Uint16Array(\n          triangleIndexBufferView.buffer,\n          triangleIndexBufferView.byteOffset +\n            triangleIndexAccessorGltf.byteOffset,\n          triangleIndexAccessorGltf.count\n        )\n      : new Uint32Array(\n          triangleIndexBufferView.buffer,\n          triangleIndexBufferView.byteOffset +\n            triangleIndexAccessorGltf.byteOffset,\n          triangleIndexAccessorGltf.count\n        );\n  var edgeIndices =\n    edgeIndexAccessorGltf.componentType === 5123\n      ? new Uint16Array(\n          edgeIndexBufferView.buffer,\n          edgeIndexBufferView.byteOffset + edgeIndexAccessorGltf.byteOffset,\n          edgeIndexAccessorGltf.count\n        )\n      : new Uint32Array(\n          edgeIndexBufferView.buffer,\n          edgeIndexBufferView.byteOffset + edgeIndexAccessorGltf.byteOffset,\n          edgeIndexAccessorGltf.count\n        );\n\n  // Make a hash table for quick lookups of whether an edge exists between two\n  // vertices. The hash is a sparse array indexed by\n  //   `smallerVertexIndex * totalNumberOfVertices + biggerVertexIndex`\n  // A value of 1 indicates an edge exists between the two vertex indices; any\n  // other value indicates that it does not. We store the\n  // `edgeSmallMultipler` - that is, the number of vertices in the equation\n  // above - at index 0 for easy access to it later.\n\n  var edgeSmallMultiplier = numVertices;\n\n  var edges = [edgeSmallMultiplier];\n  var i;\n  for (i = 0; i < edgeIndices.length; i += 2) {\n    var a = edgeIndices[i];\n    var b = edgeIndices[i + 1];\n    var small = Math.min(a, b);\n    var big = Math.max(a, b);\n    edges[small * edgeSmallMultiplier + big] = 1;\n  }\n\n  // For each triangle, adjust vertex data so that the correct edges are outlined.\n  for (i = 0; i < triangleIndices.length; i += 3) {\n    var i0 = triangleIndices[i];\n    var i1 = triangleIndices[i + 1];\n    var i2 = triangleIndices[i + 2];\n\n    var all = false; // set this to true to draw a full wireframe.\n    var has01 = all || isHighlighted(edges, i0, i1);\n    var has12 = all || isHighlighted(edges, i1, i2);\n    var has20 = all || isHighlighted(edges, i2, i0);\n\n    var unmatchableVertexIndex = matchAndStoreCoordinates(\n      outlineCoordinates,\n      i0,\n      i1,\n      i2,\n      has01,\n      has12,\n      has20\n    );\n    while (unmatchableVertexIndex >= 0) {\n      // Copy the unmatchable index and try again.\n      var copy;\n      if (unmatchableVertexIndex === i0) {\n        copy = vertexCopies[i0];\n      } else if (unmatchableVertexIndex === i1) {\n        copy = vertexCopies[i1];\n      } else {\n        copy = vertexCopies[i2];\n      }\n\n      if (copy === undefined) {\n        copy = numVertices + extraVertices.length;\n\n        var original = unmatchableVertexIndex;\n        while (original >= numVertices) {\n          original = extraVertices[original - numVertices];\n        }\n        extraVertices.push(original);\n        vertexCopies[unmatchableVertexIndex] = copy;\n      }\n\n      if (\n        copy > MAX_GLTF_UINT16_INDEX &&\n        triangleIndices instanceof Uint16Array\n      ) {\n        // We outgrew a 16-bit index buffer, switch to 32-bit.\n        triangleIndices = new Uint32Array(triangleIndices);\n        triangleIndexAccessorGltf.componentType = 5125; // UNSIGNED_INT\n        triangleIndexBufferViewGltf.buffer =\n          gltf.buffers.push({\n            byteLength: triangleIndices.byteLength,\n            extras: {\n              _pipeline: {\n                source: triangleIndices.buffer,\n              },\n            },\n          }) - 1;\n        triangleIndexBufferViewGltf.byteLength = triangleIndices.byteLength;\n        triangleIndexBufferViewGltf.byteOffset = 0;\n        model._loadResources.buffers[\n          triangleIndexBufferViewGltf.buffer\n        ] = new Uint8Array(\n          triangleIndices.buffer,\n          0,\n          triangleIndices.byteLength\n        );\n\n        // The index componentType is also squirreled away in ModelLoadResources.\n        // Hackily update it, or else we\'ll end up creating the wrong type\n        // of index buffer later.\n        loadResources.indexBuffersToCreate._array.forEach(function (toCreate) {\n          if (toCreate.id === triangleIndexAccessorGltf.bufferView) {\n            toCreate.componentType = triangleIndexAccessorGltf.componentType;\n          }\n        });\n      }\n\n      if (unmatchableVertexIndex === i0) {\n        i0 = copy;\n        triangleIndices[i] = copy;\n      } else if (unmatchableVertexIndex === i1) {\n        i1 = copy;\n        triangleIndices[i + 1] = copy;\n      } else {\n        i2 = copy;\n        triangleIndices[i + 2] = copy;\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(triangleIndexAccessorGltf.max)) {\n        triangleIndexAccessorGltf.max[0] = Math.max(\n          triangleIndexAccessorGltf.max[0],\n          copy\n        );\n      }\n\n      unmatchableVertexIndex = matchAndStoreCoordinates(\n        outlineCoordinates,\n        i0,\n        i1,\n        i2,\n        has01,\n        has12,\n        has20\n      );\n    }\n  }\n}\n\n// Each vertex has three coordinates, a, b, and c.\n// a is the coordinate that applies to edge 2-0 for the vertex.\n// b is the coordinate that applies to edge 0-1 for the vertex.\n// c is the coordinate that applies to edge 1-2 for the vertex.\n\n// A single triangle with all edges highlighted:\n//\n//                 | a | b | c |\n//                 | 1 | 1 | 0 |\n//                       0\n//                      / \\\n//                     /   \\\n//           edge 0-1 /     \\ edge 2-0\n//                   /       \\\n//                  /         \\\n// | a | b | c |   1-----------2   | a | b | c |\n// | 0 | 1 | 1 |     edge 1-2      | 1 | 0 | 1 |\n//\n// There are 6 possible orderings of coordinates a, b, and c:\n// 0 - abc\n// 1 - acb\n// 2 - bac\n// 3 - bca\n// 4 - cab\n// 5 - cba\n\n// All vertices must use the _same ordering_ for the edges to be rendered\n// correctly. So we compute a bitmask for each vertex, where the bit at\n// each position indicates whether that ordering works (i.e. doesn\'t\n// conflict with already-assigned coordinates) for that vertex.\n\n// Then we can find an ordering that works for all three vertices with a\n// bitwise AND.\n\nfunction computeOrderMask(outlineCoordinates, vertexIndex, a, b, c) {\n  var startIndex = vertexIndex * 3;\n  var first = outlineCoordinates[startIndex];\n  var second = outlineCoordinates[startIndex + 1];\n  var third = outlineCoordinates[startIndex + 2];\n\n  if (first === undefined) {\n    // If one coordinate is undefined, they all are, and all orderings are fine.\n    return 63; // 0b111111;\n  }\n\n  return (\n    ((first === a && second === b && third === c) << 0) +\n    ((first === a && second === c && third === b) << 1) +\n    ((first === b && second === a && third === c) << 2) +\n    ((first === b && second === c && third === a) << 3) +\n    ((first === c && second === a && third === b) << 4) +\n    ((first === c && second === b && third === a) << 5)\n  );\n}\n\n// popcount for integers 0-63, inclusive.\n// i.e. how many 1s are in the binary representation of the integer.\nfunction popcount0to63(value) {\n  return (\n    (value & 1) +\n    ((value >> 1) & 1) +\n    ((value >> 2) & 1) +\n    ((value >> 3) & 1) +\n    ((value >> 4) & 1) +\n    ((value >> 5) & 1)\n  );\n}\n\nfunction matchAndStoreCoordinates(\n  outlineCoordinates,\n  i0,\n  i1,\n  i2,\n  has01,\n  has12,\n  has20\n) {\n  var a0 = has20 ? 1.0 : 0.0;\n  var b0 = has01 ? 1.0 : 0.0;\n  var c0 = 0.0;\n\n  var i0Mask = computeOrderMask(outlineCoordinates, i0, a0, b0, c0);\n  if (i0Mask === 0) {\n    return i0;\n  }\n\n  var a1 = 0.0;\n  var b1 = has01 ? 1.0 : 0.0;\n  var c1 = has12 ? 1.0 : 0.0;\n\n  var i1Mask = computeOrderMask(outlineCoordinates, i1, a1, b1, c1);\n  if (i1Mask === 0) {\n    return i1;\n  }\n\n  var a2 = has20 ? 1.0 : 0.0;\n  var b2 = 0.0;\n  var c2 = has12 ? 1.0 : 0.0;\n\n  var i2Mask = computeOrderMask(outlineCoordinates, i2, a2, b2, c2);\n  if (i2Mask === 0) {\n    return i2;\n  }\n\n  var workingOrders = i0Mask & i1Mask & i2Mask;\n\n  var a, b, c;\n\n  if (workingOrders & (1 << 0)) {\n    // 0 - abc\n    a = 0;\n    b = 1;\n    c = 2;\n  } else if (workingOrders & (1 << 1)) {\n    // 1 - acb\n    a = 0;\n    c = 1;\n    b = 2;\n  } else if (workingOrders & (1 << 2)) {\n    // 2 - bac\n    b = 0;\n    a = 1;\n    c = 2;\n  } else if (workingOrders & (1 << 3)) {\n    // 3 - bca\n    b = 0;\n    c = 1;\n    a = 2;\n  } else if (workingOrders & (1 << 4)) {\n    // 4 - cab\n    c = 0;\n    a = 1;\n    b = 2;\n  } else if (workingOrders & (1 << 5)) {\n    // 5 - cba\n    c = 0;\n    b = 1;\n    a = 2;\n  } else {\n    // No ordering works.\n    // Report the most constrained vertex as unmatched so we copy that one.\n    var i0Popcount = popcount0to63(i0Mask);\n    var i1Popcount = popcount0to63(i1Mask);\n    var i2Popcount = popcount0to63(i2Mask);\n    if (i0Popcount < i1Popcount && i0Popcount < i2Popcount) {\n      return i0;\n    } else if (i1Popcount < i2Popcount) {\n      return i1;\n    }\n    return i2;\n  }\n\n  var i0Start = i0 * 3;\n  outlineCoordinates[i0Start + a] = a0;\n  outlineCoordinates[i0Start + b] = b0;\n  outlineCoordinates[i0Start + c] = c0;\n\n  var i1Start = i1 * 3;\n  outlineCoordinates[i1Start + a] = a1;\n  outlineCoordinates[i1Start + b] = b1;\n  outlineCoordinates[i1Start + c] = c1;\n\n  var i2Start = i2 * 3;\n  outlineCoordinates[i2Start + a] = a2;\n  outlineCoordinates[i2Start + b] = b2;\n  outlineCoordinates[i2Start + c] = c2;\n\n  return -1;\n}\n\nfunction isHighlighted(edges, i0, i1) {\n  var edgeSmallMultiplier = edges[0];\n  var index = Math.min(i0, i1) * edgeSmallMultiplier + Math.max(i0, i1);\n\n  // If i0 and i1 are both 0, then our index will be 0 and we\'ll end up\n  // accessing the edgeSmallMultiplier that we\'ve sneakily squirreled away\n  // in index 0. But it makes no sense to have an edge between vertex 0 and\n  // itself, so for any edgeSmallMultiplier other than 1 we\'ll return the\n  // correct answer: false. If edgeSmallMultiplier is 1, that means there is\n  // only a single vertex, so no danger of forming a meaningful triangle\n  // with that.\n  return edges[index] === 1;\n}\n\nfunction createTexture(size) {\n  var texture = new Uint8Array(size);\n  texture[size - 1] = 192;\n  if (size === 8) {\n    texture[size - 1] = 96;\n  } else if (size === 4) {\n    texture[size - 1] = 48;\n  } else if (size === 2) {\n    texture[size - 1] = 24;\n  } else if (size === 1) {\n    texture[size - 1] = 12;\n  }\n  return texture;\n}\n\nfunction updateBufferViewsWithNewVertices(model, bufferViews) {\n  var gltf = model.gltf;\n  var loadResources = model._loadResources;\n\n  var i, j;\n  for (i = 0; i < bufferViews.length; ++i) {\n    var bufferView = bufferViews[i];\n    var vertexNumberingScope = bufferView.extras._pipeline.vertexNumberingScope;\n\n    // Let the temporary data be garbage collected.\n    bufferView.extras._pipeline.vertexNumberingScope = undefined;\n\n    var newVertices = vertexNumberingScope.extraVertices;\n\n    var sourceData = loadResources.getBuffer(bufferView);\n    var byteStride = bufferView.byteStride || 4;\n    var newVerticesLength = newVertices.length;\n    var destData = new Uint8Array(\n      sourceData.byteLength + newVerticesLength * byteStride\n    );\n\n    // Copy the original vertices\n    destData.set(sourceData);\n\n    // Copy the vertices added for outlining\n    for (j = 0; j < newVerticesLength; ++j) {\n      var sourceIndex = newVertices[j] * byteStride;\n      var destIndex = sourceData.length + j * byteStride;\n      for (var k = 0; k < byteStride; ++k) {\n        destData[destIndex + k] = destData[sourceIndex + k];\n      }\n    }\n\n    // This bufferView is an independent buffer now. Update the model accordingly.\n    bufferView.byteOffset = 0;\n    bufferView.byteLength = destData.byteLength;\n\n    var bufferId =\n      gltf.buffers.push({\n        byteLength: destData.byteLength,\n        extras: {\n          _pipeline: {\n            source: destData.buffer,\n          },\n        },\n      }) - 1;\n\n    bufferView.buffer = bufferId;\n    loadResources.buffers[bufferId] = destData;\n\n    // Update the accessors to reflect the added vertices.\n    var accessors = vertexNumberingScope.accessors;\n    for (j = 0; j < accessors.length; ++j) {\n      var accessorId = accessors[j];\n      gltf.accessors[accessorId].count += newVerticesLength;\n    }\n\n    if (!vertexNumberingScope.createdOutlines) {\n      // Create the buffers, views, and accessors for the outline texture coordinates.\n      var outlineCoordinates = vertexNumberingScope.outlineCoordinates;\n      var outlineCoordinateBuffer = new Float32Array(outlineCoordinates);\n      var bufferIndex =\n        model.gltf.buffers.push({\n          byteLength: outlineCoordinateBuffer.byteLength,\n          extras: {\n            _pipeline: {\n              source: outlineCoordinateBuffer.buffer,\n            },\n          },\n        }) - 1;\n      loadResources.buffers[bufferIndex] = new Uint8Array(\n        outlineCoordinateBuffer.buffer,\n        0,\n        outlineCoordinateBuffer.byteLength\n      );\n\n      var bufferViewIndex =\n        model.gltf.bufferViews.push({\n          buffer: bufferIndex,\n          byteLength: outlineCoordinateBuffer.byteLength,\n          byteOffset: 0,\n          byteStride: 3 * Float32Array.BYTES_PER_ELEMENT,\n          target: 34962,\n        }) - 1;\n\n      var accessorIndex =\n        model.gltf.accessors.push({\n          bufferView: bufferViewIndex,\n          byteOffset: 0,\n          componentType: 5126,\n          count: outlineCoordinateBuffer.length / 3,\n          type: "VEC3",\n          min: [0.0, 0.0, 0.0],\n          max: [1.0, 1.0, 1.0],\n        }) - 1;\n\n      var primitives = vertexNumberingScope.primitives;\n      for (j = 0; j < primitives.length; ++j) {\n        primitives[j].attributes._OUTLINE_COORDINATES = accessorIndex;\n      }\n\n      loadResources.vertexBuffersToCreate.enqueue(bufferViewIndex);\n\n      vertexNumberingScope.createdOutlines = true;\n    }\n  }\n}\n\nfunction compactBuffers(model) {\n  var gltf = model.gltf;\n  var loadResources = model._loadResources;\n\n  var i;\n  for (i = 0; i < gltf.buffers.length; ++i) {\n    var buffer = gltf.buffers[i];\n    var bufferViewsUsingThisBuffer = gltf.bufferViews.filter(\n      usesBuffer.bind(undefined, i)\n    );\n    var newLength = bufferViewsUsingThisBuffer.reduce(function (\n      previous,\n      current\n    ) {\n      return previous + current.byteLength;\n    },\n    0);\n    if (newLength === buffer.byteLength) {\n      continue;\n    }\n\n    var newBuffer = new Uint8Array(newLength);\n    var offset = 0;\n    for (var j = 0; j < bufferViewsUsingThisBuffer.length; ++j) {\n      var bufferView = bufferViewsUsingThisBuffer[j];\n      var sourceData = loadResources.getBuffer(bufferView);\n      newBuffer.set(sourceData, offset);\n\n      bufferView.byteOffset = offset;\n      offset += sourceData.byteLength;\n    }\n\n    loadResources.buffers[i] = newBuffer;\n    buffer.extras._pipeline.source = newBuffer.buffer;\n    buffer.byteLength = newLength;\n  }\n}\n\nfunction usesBuffer(bufferId, bufferView) {\n  return bufferView.buffer === bufferId;\n}\n\nfunction getVertexNumberingScope(model, primitive) {\n  var attributes = primitive.attributes;\n  if (attributes === undefined) {\n    return undefined;\n  }\n\n  var gltf = model.gltf;\n\n  var vertexNumberingScope;\n\n  // Initialize common details for all bufferViews used by this primitive\'s vertices.\n  // All bufferViews used by this primitive must use a common vertex numbering scheme.\n  for (var semantic in attributes) {\n    if (!attributes.hasOwnProperty(semantic)) {\n      continue;\n    }\n\n    var accessorId = attributes[semantic];\n    var accessor = gltf.accessors[accessorId];\n    var bufferViewId = accessor.bufferView;\n    var bufferView = gltf.bufferViews[bufferViewId];\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(bufferView.extras)) {\n      bufferView.extras = {};\n    }\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(bufferView.extras._pipeline)) {\n      bufferView.extras._pipeline = {};\n    }\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(bufferView.extras._pipeline.vertexNumberingScope)) {\n      bufferView.extras._pipeline.vertexNumberingScope = vertexNumberingScope || {\n        // Each element in this array is:\n        // a) undefined, if the vertex at this index has no copies\n        // b) the index of the copy.\n        vertexCopies: [],\n\n        // Extra vertices appended after the ones originally included in the model.\n        // Each element is the index of the vertex that this one is a copy of.\n        extraVertices: [],\n\n        // The texture coordinates used for outlining, three floats per vertex.\n        outlineCoordinates: [],\n\n        // The IDs of accessors that use this vertex numbering.\n        accessors: [],\n\n        // The IDs of bufferViews that use this vertex numbering.\n        bufferViews: [],\n\n        // The primitives that use this vertex numbering.\n        primitives: [],\n\n        // True if the buffer for the outlines has already been created.\n        createdOutlines: false,\n      };\n    } else if (\n      vertexNumberingScope !== undefined &&\n      bufferView.extras._pipeline.vertexNumberingScope !== vertexNumberingScope\n    ) {\n      // Conflicting vertex numbering, let\'s give up.\n      return undefined;\n    }\n\n    vertexNumberingScope = bufferView.extras._pipeline.vertexNumberingScope;\n\n    if (vertexNumberingScope.bufferViews.indexOf(bufferView) < 0) {\n      vertexNumberingScope.bufferViews.push(bufferView);\n    }\n\n    if (vertexNumberingScope.accessors.indexOf(accessorId) < 0) {\n      vertexNumberingScope.accessors.push(accessorId);\n    }\n  }\n\n  vertexNumberingScope.primitives.push(primitive);\n\n  return vertexNumberingScope;\n}\n\n/* harmony default export */ __webpack_exports__["Z"] = (ModelOutlineLoader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32851\n')},15322:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(83856);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(71171);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(72248);\n/* harmony import */ var _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(87811);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9407);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(52200);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53642);\n/* harmony import */ var _GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9919);\n/* harmony import */ var _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(56629);\n/* harmony import */ var _GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(29745);\n/* harmony import */ var _AttributeType_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(77072);\n/* harmony import */ var _Axis_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(66577);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nvar ModelUtility = {};\n\n/**\n * Updates the model\'s forward axis if the model is not a 2.0 model.\n *\n * @param {Object} model The model to update.\n */\nModelUtility.updateForwardAxis = function (model) {\n  var cachedSourceVersion = model.gltf.extras.sourceVersion;\n\n  if (\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(cachedSourceVersion) && cachedSourceVersion !== "2.0") ||\n    ModelUtility.getAssetVersion(model.gltf) !== "2.0"\n  ) {\n    model._gltfForwardAxis = _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].X */ .Z.X;\n  }\n};\n\n/**\n *  Gets the string representing the glTF asset version.\n *\n *  @param {Object} gltf A javascript object containing a glTF asset.\n *  @returns {String} The glTF asset version string.\n */\nModelUtility.getAssetVersion = function (gltf) {\n  // In glTF 1.0 it was valid to omit the version number.\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(gltf.asset) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(gltf.asset.version)) {\n    return "1.0";\n  }\n\n  return gltf.asset.version;\n};\n\n/**\n * Splits primitive materials with values incompatible for generating techniques.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @returns {Object} The glTF asset with modified materials.\n */\nModelUtility.splitIncompatibleMaterials = function (gltf) {\n  var accessors = gltf.accessors;\n  var materials = gltf.materials;\n  var primitiveInfoByMaterial = {};\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].mesh */ .Z.mesh(gltf, function (mesh) {\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].meshPrimitive */ .Z.meshPrimitive(mesh, function (primitive) {\n      var materialIndex = primitive.material;\n      var material = materials[materialIndex];\n\n      var jointAccessorId = primitive.attributes.JOINTS_0;\n      var componentType;\n      var accessorType;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(jointAccessorId)) {\n        var jointAccessor = accessors[jointAccessorId];\n        componentType = jointAccessor.componentType;\n        accessorType = jointAccessor.type;\n      }\n      var isSkinned = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(jointAccessorId) && accessorType === "VEC4";\n      var hasVertexColors = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.attributes.COLOR_0);\n      var hasMorphTargets = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.targets);\n      var hasNormals = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.attributes.NORMAL);\n      var hasTangents = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.attributes.TANGENT);\n      var hasTexCoords = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.attributes.TEXCOORD_0);\n      var hasTexCoord1 =\n        hasTexCoords && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.attributes.TEXCOORD_1);\n      var hasOutline =\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.extensions) &&\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitive.extensions.CESIUM_primitive_outline);\n\n      var primitiveInfo = primitiveInfoByMaterial[materialIndex];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(primitiveInfo)) {\n        primitiveInfoByMaterial[materialIndex] = {\n          skinning: {\n            skinned: isSkinned,\n            componentType: componentType,\n          },\n          hasVertexColors: hasVertexColors,\n          hasMorphTargets: hasMorphTargets,\n          hasNormals: hasNormals,\n          hasTangents: hasTangents,\n          hasTexCoords: hasTexCoords,\n          hasTexCoord1: hasTexCoord1,\n          hasOutline: hasOutline,\n        };\n      } else if (\n        primitiveInfo.skinning.skinned !== isSkinned ||\n        primitiveInfo.hasVertexColors !== hasVertexColors ||\n        primitiveInfo.hasMorphTargets !== hasMorphTargets ||\n        primitiveInfo.hasNormals !== hasNormals ||\n        primitiveInfo.hasTangents !== hasTangents ||\n        primitiveInfo.hasTexCoords !== hasTexCoords ||\n        primitiveInfo.hasTexCoord1 !== hasTexCoord1 ||\n        primitiveInfo.hasOutline !== hasOutline\n      ) {\n        // This primitive uses the same material as another one that either:\n        // * Isn\'t skinned\n        // * Uses a different type to store joints and weights\n        // * Doesn\'t have vertex colors, morph targets, normals, tangents, or texCoords\n        // * Doesn\'t have a CESIUM_primitive_outline extension.\n        var clonedMaterial = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(material, true);\n        // Split this off as a separate material\n        materialIndex = (0,_GltfPipeline_addToArray_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(materials, clonedMaterial);\n        primitive.material = materialIndex;\n        primitiveInfoByMaterial[materialIndex] = {\n          skinning: {\n            skinned: isSkinned,\n            componentType: componentType,\n          },\n          hasVertexColors: hasVertexColors,\n          hasMorphTargets: hasMorphTargets,\n          hasNormals: hasNormals,\n          hasTangents: hasTangents,\n          hasTexCoords: hasTexCoords,\n          hasTexCoord1: hasTexCoord1,\n          hasOutline: hasOutline,\n        };\n      }\n    });\n  });\n\n  return primitiveInfoByMaterial;\n};\n\nModelUtility.getShaderVariable = function (type) {\n  if (type === "SCALAR") {\n    return "float";\n  }\n  return type.toLowerCase();\n};\n\nModelUtility.ModelState = {\n  NEEDS_LOAD: 0,\n  LOADING: 1,\n  LOADED: 2, // Renderable, but textures can still be pending when incrementallyLoadTextures is true.\n  FAILED: 3,\n};\n\nModelUtility.getFailedLoadFunction = function (model, type, path) {\n  return function (error) {\n    model._state = ModelUtility.ModelState.FAILED;\n    var message = "Failed to load " + type + ": " + path;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(error)) {\n      message += "\\n" + error.message;\n    }\n    model._readyPromise.reject(new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(message));\n  };\n};\n\nModelUtility.parseBuffers = function (model, bufferLoad) {\n  var loadResources = model._loadResources;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].buffer */ .Z.buffer(model.gltf, function (buffer, bufferViewId) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(buffer.extras._pipeline.source)) {\n      loadResources.buffers[bufferViewId] = buffer.extras._pipeline.source;\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(bufferLoad)) {\n      var bufferResource = model._resource.getDerivedResource({\n        url: buffer.uri,\n      });\n      ++loadResources.pendingBufferLoads;\n      bufferResource\n        .fetchArrayBuffer()\n        .then(bufferLoad(model, bufferViewId))\n        .otherwise(\n          ModelUtility.getFailedLoadFunction(\n            model,\n            "buffer",\n            bufferResource.url\n          )\n        );\n    }\n  });\n};\n\nvar aMinScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar aMaxScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nModelUtility.computeBoundingSphere = function (model) {\n  var gltf = model.gltf;\n  var gltfNodes = gltf.nodes;\n  var gltfMeshes = gltf.meshes;\n  var rootNodes = gltf.scenes[gltf.scene].nodes;\n  var rootNodesLength = rootNodes.length;\n\n  var nodeStack = [];\n\n  var min = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n    Number.MAX_VALUE,\n    Number.MAX_VALUE,\n    Number.MAX_VALUE\n  );\n  var max = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n    -Number.MAX_VALUE,\n    -Number.MAX_VALUE,\n    -Number.MAX_VALUE\n  );\n\n  for (var i = 0; i < rootNodesLength; ++i) {\n    var n = gltfNodes[rootNodes[i]];\n    n._transformToRoot = ModelUtility.getTransform(n);\n    nodeStack.push(n);\n\n    while (nodeStack.length > 0) {\n      n = nodeStack.pop();\n      var transformToRoot = n._transformToRoot;\n\n      var meshId = n.mesh;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(meshId)) {\n        var mesh = gltfMeshes[meshId];\n        var primitives = mesh.primitives;\n        var primitivesLength = primitives.length;\n        for (var m = 0; m < primitivesLength; ++m) {\n          var positionAccessor = primitives[m].attributes.POSITION;\n          if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(positionAccessor)) {\n            var minMax = ModelUtility.getAccessorMinMax(gltf, positionAccessor);\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(minMax.min) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(minMax.max)) {\n              var aMin = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(minMax.min, 0, aMinScratch);\n              var aMax = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(minMax.max, 0, aMaxScratch);\n\n              _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(transformToRoot, aMin, aMin);\n              _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(transformToRoot, aMax, aMax);\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].minimumByComponent */ .Z.minimumByComponent(min, aMin, min);\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maximumByComponent */ .Z.maximumByComponent(max, aMax, max);\n            }\n          }\n        }\n      }\n\n      var children = n.children;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(children)) {\n        var childrenLength = children.length;\n        for (var k = 0; k < childrenLength; ++k) {\n          var child = gltfNodes[children[k]];\n          child._transformToRoot = ModelUtility.getTransform(child);\n          _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n            transformToRoot,\n            child._transformToRoot,\n            child._transformToRoot\n          );\n          nodeStack.push(child);\n        }\n      }\n      delete n._transformToRoot;\n    }\n  }\n\n  var boundingSphere = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromCornerPoints */ .Z.fromCornerPoints(min, max);\n  if (model._forwardAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].Z */ .Z.Z) {\n    // glTF 2.0 has a Z-forward convention that must be adapted here to X-forward.\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].transformWithoutScale */ .Z.transformWithoutScale(\n      boundingSphere,\n      _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].Z_UP_TO_X_UP */ .Z.Z_UP_TO_X_UP,\n      boundingSphere\n    );\n  }\n  if (model._upAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].Y */ .Z.Y) {\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].transformWithoutScale */ .Z.transformWithoutScale(\n      boundingSphere,\n      _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].Y_UP_TO_Z_UP */ .Z.Y_UP_TO_Z_UP,\n      boundingSphere\n    );\n  } else if (model._upAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].X */ .Z.X) {\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].transformWithoutScale */ .Z.transformWithoutScale(\n      boundingSphere,\n      _Axis_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].X_UP_TO_Z_UP */ .Z.X_UP_TO_Z_UP,\n      boundingSphere\n    );\n  }\n  return boundingSphere;\n};\n\nfunction techniqueAttributeForSemantic(technique, semantic) {\n  return _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].techniqueAttribute */ .Z.techniqueAttribute(technique, function (\n    attribute,\n    attributeName\n  ) {\n    if (attribute.semantic === semantic) {\n      return attributeName;\n    }\n  });\n}\n\nfunction ensureSemanticExistenceForPrimitive(gltf, primitive) {\n  var accessors = gltf.accessors;\n  var materials = gltf.materials;\n  var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n\n  var techniques = techniquesWebgl.techniques;\n  var programs = techniquesWebgl.programs;\n  var shaders = techniquesWebgl.shaders;\n  var targets = primitive.targets;\n\n  var attributes = primitive.attributes;\n  for (var target in targets) {\n    if (targets.hasOwnProperty(target)) {\n      var targetAttributes = targets[target];\n      for (var attribute in targetAttributes) {\n        if (attribute !== "extras") {\n          attributes[attribute + "_" + target] = targetAttributes[attribute];\n        }\n      }\n    }\n  }\n\n  var material = materials[primitive.material];\n  var technique =\n    techniques[material.extensions.KHR_techniques_webgl.technique];\n  var program = programs[technique.program];\n  var vertexShader = shaders[program.vertexShader];\n\n  for (var semantic in attributes) {\n    if (attributes.hasOwnProperty(semantic)) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(techniqueAttributeForSemantic(technique, semantic))) {\n        var accessorId = attributes[semantic];\n        var accessor = accessors[accessorId];\n        var lowerCase = semantic.toLowerCase();\n        if (lowerCase.charAt(0) === "_") {\n          lowerCase = lowerCase.slice(1);\n        }\n        var attributeName = "a_" + lowerCase;\n        technique.attributes[attributeName] = {\n          semantic: semantic,\n          type: accessor.componentType,\n        };\n        var pipelineExtras = vertexShader.extras._pipeline;\n        var shaderText = pipelineExtras.source;\n        shaderText =\n          "attribute " +\n          ModelUtility.getShaderVariable(accessor.type) +\n          " " +\n          attributeName +\n          ";\\n" +\n          shaderText;\n        pipelineExtras.source = shaderText;\n      }\n    }\n  }\n}\n\n/**\n * Ensures all attributes present on the primitive are present in the technique and\n * vertex shader.\n *\n * @param {Object} gltf A javascript object containing a glTF asset.\n * @returns {Object} The glTF asset, including any additional attributes.\n */\nModelUtility.ensureSemanticExistence = function (gltf) {\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].mesh */ .Z.mesh(gltf, function (mesh) {\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].meshPrimitive */ .Z.meshPrimitive(mesh, function (primitive) {\n      ensureSemanticExistenceForPrimitive(gltf, primitive);\n    });\n  });\n\n  return gltf;\n};\n\n/**\n * Creates attribute location for all attributes required by a technique.\n *\n * @param {Object} technique A glTF KHR_techniques_webgl technique object.\n * @param {Object} precreatedAttributes A dictionary object of pre-created attributes for which to also create locations.\n * @returns {Object} A dictionary object containing attribute names and their locations.\n */\nModelUtility.createAttributeLocations = function (\n  technique,\n  precreatedAttributes\n) {\n  var attributeLocations = {};\n  var hasIndex0 = false;\n  var i = 1;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].techniqueAttribute */ .Z.techniqueAttribute(technique, function (attribute, attributeName) {\n    // Set the position attribute to the 0th index. In some WebGL implementations the shader\n    // will not work correctly if the 0th attribute is not active. For example, some glTF models\n    // list the normal attribute first but derived shaders like the cast-shadows shader do not use\n    // the normal attribute.\n    if (/pos/i.test(attributeName) && !hasIndex0) {\n      attributeLocations[attributeName] = 0;\n      hasIndex0 = true;\n    } else {\n      attributeLocations[attributeName] = i++;\n    }\n  });\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(precreatedAttributes)) {\n    for (var attributeName in precreatedAttributes) {\n      if (precreatedAttributes.hasOwnProperty(attributeName)) {\n        attributeLocations[attributeName] = i++;\n      }\n    }\n  }\n\n  return attributeLocations;\n};\n\nModelUtility.getAccessorMinMax = function (gltf, accessorId) {\n  var accessor = gltf.accessors[accessorId];\n  var extensions = accessor.extensions;\n  var accessorMin = accessor.min;\n  var accessorMax = accessor.max;\n  // If this accessor is quantized, we should use the decoded min and max\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(extensions)) {\n    var quantizedAttributes = extensions.WEB3D_quantized_attributes;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantizedAttributes)) {\n      accessorMin = quantizedAttributes.decodedMin;\n      accessorMax = quantizedAttributes.decodedMax;\n    }\n  }\n  return {\n    min: accessorMin,\n    max: accessorMax,\n  };\n};\n\nfunction getTechniqueAttributeOrUniformFunction(\n  gltf,\n  technique,\n  semantic,\n  ignoreNodes\n) {\n  if ((0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(gltf, "KHR_techniques_webgl")) {\n    return function (attributeOrUniform, attributeOrUniformName) {\n      if (\n        attributeOrUniform.semantic === semantic &&\n        (!ignoreNodes || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(attributeOrUniform.node))\n      ) {\n        return attributeOrUniformName;\n      }\n    };\n  }\n\n  return function (parameterName, attributeOrUniformName) {\n    var attributeOrUniform = technique.parameters[parameterName];\n    if (\n      attributeOrUniform.semantic === semantic &&\n      (!ignoreNodes || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(attributeOrUniform.node))\n    ) {\n      return attributeOrUniformName;\n    }\n  };\n}\n\nModelUtility.getAttributeOrUniformBySemantic = function (\n  gltf,\n  semantic,\n  programId,\n  ignoreNodes\n) {\n  return _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].technique */ .Z.technique(gltf, function (technique) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(programId) && technique.program !== programId) {\n      return;\n    }\n\n    var value = _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].techniqueAttribute */ .Z.techniqueAttribute(\n      technique,\n      getTechniqueAttributeOrUniformFunction(\n        gltf,\n        technique,\n        semantic,\n        ignoreNodes\n      )\n    );\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(value)) {\n      return value;\n    }\n\n    return _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].techniqueUniform */ .Z.techniqueUniform(\n      technique,\n      getTechniqueAttributeOrUniformFunction(\n        gltf,\n        technique,\n        semantic,\n        ignoreNodes\n      )\n    );\n  });\n};\n\nModelUtility.getDiffuseAttributeOrUniform = function (gltf, programId) {\n  var diffuseUniformName = ModelUtility.getAttributeOrUniformBySemantic(\n    gltf,\n    "COLOR_0",\n    programId\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(diffuseUniformName)) {\n    diffuseUniformName = ModelUtility.getAttributeOrUniformBySemantic(\n      gltf,\n      "_3DTILESDIFFUSE",\n      programId\n    );\n  }\n  return diffuseUniformName;\n};\n\nvar nodeTranslationScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar nodeQuaternionScratch = new _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z();\nvar nodeScaleScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nModelUtility.getTransform = function (node, result) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(node.matrix)) {\n    return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromColumnMajorArray */ .Z.fromColumnMajorArray(node.matrix, result);\n  }\n\n  return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromTranslationQuaternionRotationScale */ .Z.fromTranslationQuaternionRotationScale(\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(node.translation, 0, nodeTranslationScratch),\n    _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].unpack */ .Z.unpack(node.rotation, 0, nodeQuaternionScratch),\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(node.scale, 0, nodeScaleScratch),\n    result\n  );\n};\n\nModelUtility.getUsedExtensions = function (gltf) {\n  var extensionsUsed = gltf.extensionsUsed;\n  var cachedExtensionsUsed = {};\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(extensionsUsed)) {\n    var extensionsUsedLength = extensionsUsed.length;\n    for (var i = 0; i < extensionsUsedLength; i++) {\n      var extension = extensionsUsed[i];\n      cachedExtensionsUsed[extension] = true;\n    }\n  }\n  return cachedExtensionsUsed;\n};\n\nModelUtility.getRequiredExtensions = function (gltf) {\n  var extensionsRequired = gltf.extensionsRequired;\n  var cachedExtensionsRequired = {};\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(extensionsRequired)) {\n    var extensionsRequiredLength = extensionsRequired.length;\n    for (var i = 0; i < extensionsRequiredLength; i++) {\n      var extension = extensionsRequired[i];\n      cachedExtensionsRequired[extension] = true;\n    }\n  }\n\n  return cachedExtensionsRequired;\n};\n\nModelUtility.supportedExtensions = {\n  AGI_articulations: true,\n  CESIUM_RTC: true,\n  EXT_texture_webp: true,\n  KHR_blend: true,\n  KHR_binary_glTF: true,\n  KHR_texture_basisu: true,\n  KHR_draco_mesh_compression: true,\n  KHR_materials_common: true,\n  KHR_techniques_webgl: true,\n  KHR_materials_unlit: true,\n  KHR_materials_pbrSpecularGlossiness: true,\n  KHR_texture_transform: true,\n  WEB3D_quantized_attributes: true,\n};\n\nModelUtility.checkSupportedExtensions = function (\n  extensionsRequired,\n  browserSupportsWebp\n) {\n  for (var extension in extensionsRequired) {\n    if (extensionsRequired.hasOwnProperty(extension)) {\n      if (!ModelUtility.supportedExtensions[extension]) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Unsupported glTF Extension: " + extension);\n      }\n\n      if (extension === "EXT_texture_webp" && browserSupportsWebp === false) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(\n          "Loaded model requires WebP but browser does not support it."\n        );\n      }\n    }\n  }\n};\n\nModelUtility.checkSupportedGlExtensions = function (extensionsUsed, context) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(extensionsUsed)) {\n    var glExtensionsUsedLength = extensionsUsed.length;\n    for (var i = 0; i < glExtensionsUsedLength; i++) {\n      var extension = extensionsUsed[i];\n      if (extension !== "OES_element_index_uint") {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("Unsupported WebGL Extension: " + extension);\n      } else if (!context.elementIndexUint) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(\n          "OES_element_index_uint WebGL extension is not enabled."\n        );\n      }\n    }\n  }\n};\n\nfunction replaceAllButFirstInString(string, find, replace) {\n  // Limit search to strings that are not a subset of other tokens.\n  find += "(?!\\\\w)";\n  find = new RegExp(find, "g");\n\n  var index = string.search(find);\n  return string.replace(find, function (match, offset) {\n    return index === offset ? match : replace;\n  });\n}\n\nfunction getQuantizedAttributes(gltf, accessorId) {\n  var accessor = gltf.accessors[accessorId];\n  var extensions = accessor.extensions;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(extensions)) {\n    return extensions.WEB3D_quantized_attributes;\n  }\n  return undefined;\n}\n\nfunction getAttributeVariableName(gltf, primitive, attributeSemantic) {\n  var materialId = primitive.material;\n  var material = gltf.materials[materialId];\n\n  if (\n    !(0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(gltf, "KHR_techniques_webgl") ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(material.extensions) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(material.extensions.KHR_techniques_webgl)\n  ) {\n    return;\n  }\n\n  var techniqueId = material.extensions.KHR_techniques_webgl.technique;\n  var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n  var technique = techniquesWebgl.techniques[techniqueId];\n  return _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].techniqueAttribute */ .Z.techniqueAttribute(technique, function (\n    attribute,\n    attributeName\n  ) {\n    var semantic = attribute.semantic;\n    if (semantic === attributeSemantic) {\n      return attributeName;\n    }\n  });\n}\n\nModelUtility.modifyShaderForDracoQuantizedAttributes = function (\n  gltf,\n  primitive,\n  shader,\n  decodedAttributes\n) {\n  var quantizedUniforms = {};\n  for (var attributeSemantic in decodedAttributes) {\n    if (decodedAttributes.hasOwnProperty(attributeSemantic)) {\n      var attribute = decodedAttributes[attributeSemantic];\n      var quantization = attribute.quantization;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantization)) {\n        continue;\n      }\n\n      var attributeVarName = getAttributeVariableName(\n        gltf,\n        primitive,\n        attributeSemantic\n      );\n\n      if (attributeSemantic.charAt(0) === "_") {\n        attributeSemantic = attributeSemantic.substring(1);\n      }\n      var decodeUniformVarName =\n        "gltf_u_dec_" + attributeSemantic.toLowerCase();\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantizedUniforms[decodeUniformVarName])) {\n        var newMain = "gltf_decoded_" + attributeSemantic;\n        var decodedAttributeVarName = attributeVarName.replace(\n          "a_",\n          "gltf_a_dec_"\n        );\n        var size = attribute.componentsPerAttribute;\n\n        // replace usages of the original attribute with the decoded version, but not the declaration\n        shader = replaceAllButFirstInString(\n          shader,\n          attributeVarName,\n          decodedAttributeVarName\n        );\n\n        // declare decoded attribute\n        var variableType;\n        if (quantization.octEncoded) {\n          variableType = "vec3";\n        } else if (size > 1) {\n          variableType = "vec" + size;\n        } else {\n          variableType = "float";\n        }\n        shader = variableType + " " + decodedAttributeVarName + ";\\n" + shader;\n\n        // The gltf 2.0 COLOR_0 vertex attribute can be VEC4 or VEC3\n        var vec3Color = size === 3 && attributeSemantic === "COLOR_0";\n        if (vec3Color) {\n          shader = replaceAllButFirstInString(\n            shader,\n            decodedAttributeVarName,\n            "vec4(" + decodedAttributeVarName + ", 1.0)"\n          );\n        }\n\n        // splice decode function into the shader\n        var decode = "";\n        if (quantization.octEncoded) {\n          var decodeUniformVarNameRangeConstant =\n            decodeUniformVarName + "_rangeConstant";\n          shader =\n            "uniform float " +\n            decodeUniformVarNameRangeConstant +\n            ";\\n" +\n            shader;\n          decode =\n            "\\n" +\n            "void main() {\\n" +\n            // Draco oct-encoding decodes to zxy order\n            "    " +\n            decodedAttributeVarName +\n            " = czm_octDecode(" +\n            attributeVarName +\n            ".xy, " +\n            decodeUniformVarNameRangeConstant +\n            ").zxy;\\n" +\n            "    " +\n            newMain +\n            "();\\n" +\n            "}\\n";\n        } else {\n          var decodeUniformVarNameNormConstant =\n            decodeUniformVarName + "_normConstant";\n          var decodeUniformVarNameMin = decodeUniformVarName + "_min";\n          shader =\n            "uniform float " +\n            decodeUniformVarNameNormConstant +\n            ";\\n" +\n            "uniform " +\n            variableType +\n            " " +\n            decodeUniformVarNameMin +\n            ";\\n" +\n            shader;\n          var attributeVarAccess = vec3Color ? ".xyz" : "";\n          decode =\n            "\\n" +\n            "void main() {\\n" +\n            "    " +\n            decodedAttributeVarName +\n            " = " +\n            decodeUniformVarNameMin +\n            " + " +\n            attributeVarName +\n            attributeVarAccess +\n            " * " +\n            decodeUniformVarNameNormConstant +\n            ";\\n" +\n            "    " +\n            newMain +\n            "();\\n" +\n            "}\\n";\n        }\n\n        shader = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].replaceMain */ .Z.replaceMain(shader, newMain);\n        shader += decode;\n      }\n    }\n  }\n  return {\n    shader: shader,\n  };\n};\n\nModelUtility.modifyShaderForQuantizedAttributes = function (\n  gltf,\n  primitive,\n  shader\n) {\n  var quantizedUniforms = {};\n  var attributes = primitive.attributes;\n  for (var attributeSemantic in attributes) {\n    if (attributes.hasOwnProperty(attributeSemantic)) {\n      var attributeVarName = getAttributeVariableName(\n        gltf,\n        primitive,\n        attributeSemantic\n      );\n      var accessorId = primitive.attributes[attributeSemantic];\n\n      if (attributeSemantic.charAt(0) === "_") {\n        attributeSemantic = attributeSemantic.substring(1);\n      }\n      var decodeUniformVarName =\n        "gltf_u_dec_" + attributeSemantic.toLowerCase();\n\n      var decodeUniformVarNameScale = decodeUniformVarName + "_scale";\n      var decodeUniformVarNameTranslate = decodeUniformVarName + "_translate";\n      if (\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantizedUniforms[decodeUniformVarName]) &&\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantizedUniforms[decodeUniformVarNameScale])\n      ) {\n        var quantizedAttributes = getQuantizedAttributes(gltf, accessorId);\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantizedAttributes)) {\n          var decodeMatrix = quantizedAttributes.decodeMatrix;\n          var newMain = "gltf_decoded_" + attributeSemantic;\n          var decodedAttributeVarName = attributeVarName.replace(\n            "a_",\n            "gltf_a_dec_"\n          );\n          var size = Math.floor(Math.sqrt(decodeMatrix.length));\n\n          // replace usages of the original attribute with the decoded version, but not the declaration\n          shader = replaceAllButFirstInString(\n            shader,\n            attributeVarName,\n            decodedAttributeVarName\n          );\n          // declare decoded attribute\n          var variableType;\n          if (size > 2) {\n            variableType = "vec" + (size - 1);\n          } else {\n            variableType = "float";\n          }\n          shader =\n            variableType + " " + decodedAttributeVarName + ";\\n" + shader;\n          // splice decode function into the shader - attributes are pre-multiplied with the decode matrix\n          // uniform in the shader (32-bit floating point)\n          var decode = "";\n          if (size === 5) {\n            // separate scale and translate since glsl doesn\'t have mat5\n            shader =\n              "uniform mat4 " + decodeUniformVarNameScale + ";\\n" + shader;\n            shader =\n              "uniform vec4 " + decodeUniformVarNameTranslate + ";\\n" + shader;\n            decode =\n              "\\n" +\n              "void main() {\\n" +\n              "    " +\n              decodedAttributeVarName +\n              " = " +\n              decodeUniformVarNameScale +\n              " * " +\n              attributeVarName +\n              " + " +\n              decodeUniformVarNameTranslate +\n              ";\\n" +\n              "    " +\n              newMain +\n              "();\\n" +\n              "}\\n";\n\n            quantizedUniforms[decodeUniformVarNameScale] = { mat: 4 };\n            quantizedUniforms[decodeUniformVarNameTranslate] = { vec: 4 };\n          } else {\n            shader =\n              "uniform mat" +\n              size +\n              " " +\n              decodeUniformVarName +\n              ";\\n" +\n              shader;\n            decode =\n              "\\n" +\n              "void main() {\\n" +\n              "    " +\n              decodedAttributeVarName +\n              " = " +\n              variableType +\n              "(" +\n              decodeUniformVarName +\n              " * vec" +\n              size +\n              "(" +\n              attributeVarName +\n              ",1.0));\\n" +\n              "    " +\n              newMain +\n              "();\\n" +\n              "}\\n";\n\n            quantizedUniforms[decodeUniformVarName] = { mat: size };\n          }\n          shader = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].replaceMain */ .Z.replaceMain(shader, newMain);\n          shader += decode;\n        }\n      }\n    }\n  }\n  return {\n    shader: shader,\n    uniforms: quantizedUniforms,\n  };\n};\n\nfunction getScalarUniformFunction(value) {\n  var that = {\n    value: value,\n    clone: function (source, result) {\n      return source;\n    },\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\nfunction getVec2UniformFunction(value) {\n  var that = {\n    value: _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromArray */ .Z.fromArray(value),\n    clone: _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone,\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\nfunction getVec3UniformFunction(value) {\n  var that = {\n    value: _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(value),\n    clone: _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone,\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\nfunction getVec4UniformFunction(value) {\n  var that = {\n    value: _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromArray */ .Z.fromArray(value),\n    clone: _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone,\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\nfunction getMat2UniformFunction(value) {\n  var that = {\n    value: _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].fromColumnMajorArray */ .Z.fromColumnMajorArray(value),\n    clone: _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clone */ .Z.clone,\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\nfunction getMat3UniformFunction(value) {\n  var that = {\n    value: _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromColumnMajorArray */ .Z.fromColumnMajorArray(value),\n    clone: _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone,\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\nfunction getMat4UniformFunction(value) {\n  var that = {\n    value: _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromColumnMajorArray */ .Z.fromColumnMajorArray(value),\n    clone: _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone,\n    func: function () {\n      return that.value;\n    },\n  };\n  return that;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction DelayLoadedTextureUniform(value, textures, defaultTexture) {\n  this._value = undefined;\n  this._textureId = value.index;\n  this._textures = textures;\n  this._defaultTexture = defaultTexture;\n}\n\nObject.defineProperties(DelayLoadedTextureUniform.prototype, {\n  value: {\n    get: function () {\n      // Use the default texture (1x1 white) until the model\'s texture is loaded\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(this._value)) {\n        var texture = this._textures[this._textureId];\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(texture)) {\n          this._value = texture;\n        } else {\n          return this._defaultTexture;\n        }\n      }\n\n      return this._value;\n    },\n    set: function (value) {\n      this._value = value;\n    },\n  },\n});\n\nDelayLoadedTextureUniform.prototype.clone = function (source) {\n  return source;\n};\n\nDelayLoadedTextureUniform.prototype.func = undefined;\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction getTextureUniformFunction(value, textures, defaultTexture) {\n  var uniform = new DelayLoadedTextureUniform(value, textures, defaultTexture);\n  // Define function here to access closure since \'this\' can\'t be\n  // used when the Renderer sets uniforms.\n  uniform.func = function () {\n    return uniform.value;\n  };\n  return uniform;\n}\n\nvar gltfUniformFunctions = {};\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT */ .Z.FLOAT] = getScalarUniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2] = getVec2UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3] = getVec3UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4] = getVec4UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INT */ .Z.INT] = getScalarUniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INT_VEC2 */ .Z.INT_VEC2] = getVec2UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INT_VEC3 */ .Z.INT_VEC3] = getVec3UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INT_VEC4 */ .Z.INT_VEC4] = getVec4UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].BOOL */ .Z.BOOL] = getScalarUniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].BOOL_VEC2 */ .Z.BOOL_VEC2] = getVec2UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].BOOL_VEC3 */ .Z.BOOL_VEC3] = getVec3UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].BOOL_VEC4 */ .Z.BOOL_VEC4] = getVec4UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT_MAT2 */ .Z.FLOAT_MAT2] = getMat2UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3] = getMat3UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4] = getMat4UniformFunction;\ngltfUniformFunctions[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D] = getTextureUniformFunction;\n// GLTF_SPEC: Support SAMPLER_CUBE. https://github.com/KhronosGroup/glTF/issues/40\n\nModelUtility.createUniformFunction = function (\n  type,\n  value,\n  textures,\n  defaultTexture\n) {\n  return gltfUniformFunctions[type](value, textures, defaultTexture);\n};\n\nfunction scaleFromMatrix5Array(matrix) {\n  return [\n    matrix[0],\n    matrix[1],\n    matrix[2],\n    matrix[3],\n    matrix[5],\n    matrix[6],\n    matrix[7],\n    matrix[8],\n    matrix[10],\n    matrix[11],\n    matrix[12],\n    matrix[13],\n    matrix[15],\n    matrix[16],\n    matrix[17],\n    matrix[18],\n  ];\n}\n\nfunction translateFromMatrix5Array(matrix) {\n  return [matrix[20], matrix[21], matrix[22], matrix[23]];\n}\n\nModelUtility.createUniformsForDracoQuantizedAttributes = function (\n  decodedAttributes\n) {\n  var uniformMap = {};\n  for (var attribute in decodedAttributes) {\n    if (decodedAttributes.hasOwnProperty(attribute)) {\n      var decodedData = decodedAttributes[attribute];\n      var quantization = decodedData.quantization;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantization)) {\n        continue;\n      }\n\n      if (attribute.charAt(0) === "_") {\n        attribute = attribute.substring(1);\n      }\n\n      var uniformVarName = "gltf_u_dec_" + attribute.toLowerCase();\n\n      if (quantization.octEncoded) {\n        var uniformVarNameRangeConstant = uniformVarName + "_rangeConstant";\n        var rangeConstant = (1 << quantization.quantizationBits) - 1.0;\n        uniformMap[uniformVarNameRangeConstant] = getScalarUniformFunction(\n          rangeConstant\n        ).func;\n        continue;\n      }\n\n      var uniformVarNameNormConstant = uniformVarName + "_normConstant";\n      var normConstant =\n        quantization.range / (1 << quantization.quantizationBits);\n      uniformMap[uniformVarNameNormConstant] = getScalarUniformFunction(\n        normConstant\n      ).func;\n\n      var uniformVarNameMin = uniformVarName + "_min";\n      switch (decodedData.componentsPerAttribute) {\n        case 1:\n          uniformMap[uniformVarNameMin] = getScalarUniformFunction(\n            quantization.minValues\n          ).func;\n          break;\n        case 2:\n          uniformMap[uniformVarNameMin] = getVec2UniformFunction(\n            quantization.minValues\n          ).func;\n          break;\n        case 3:\n          uniformMap[uniformVarNameMin] = getVec3UniformFunction(\n            quantization.minValues\n          ).func;\n          break;\n        case 4:\n          uniformMap[uniformVarNameMin] = getVec4UniformFunction(\n            quantization.minValues\n          ).func;\n          break;\n      }\n    }\n  }\n\n  return uniformMap;\n};\n\nModelUtility.createUniformsForQuantizedAttributes = function (\n  gltf,\n  primitive,\n  quantizedUniforms\n) {\n  var accessors = gltf.accessors;\n  var setUniforms = {};\n  var uniformMap = {};\n\n  var attributes = primitive.attributes;\n  for (var attribute in attributes) {\n    if (attributes.hasOwnProperty(attribute)) {\n      var accessorId = attributes[attribute];\n      var a = accessors[accessorId];\n      var extensions = a.extensions;\n\n      if (attribute.charAt(0) === "_") {\n        attribute = attribute.substring(1);\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(extensions)) {\n        var quantizedAttributes = extensions.WEB3D_quantized_attributes;\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(quantizedAttributes)) {\n          var decodeMatrix = quantizedAttributes.decodeMatrix;\n          var uniformVariable = "gltf_u_dec_" + attribute.toLowerCase();\n\n          switch (a.type) {\n            case _AttributeType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].SCALAR */ .Z.SCALAR:\n              uniformMap[uniformVariable] = getMat2UniformFunction(\n                decodeMatrix\n              ).func;\n              setUniforms[uniformVariable] = true;\n              break;\n            case _AttributeType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].VEC2 */ .Z.VEC2:\n              uniformMap[uniformVariable] = getMat3UniformFunction(\n                decodeMatrix\n              ).func;\n              setUniforms[uniformVariable] = true;\n              break;\n            case _AttributeType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].VEC3 */ .Z.VEC3:\n              uniformMap[uniformVariable] = getMat4UniformFunction(\n                decodeMatrix\n              ).func;\n              setUniforms[uniformVariable] = true;\n              break;\n            case _AttributeType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].VEC4 */ .Z.VEC4:\n              // VEC4 attributes are split into scale and translate because there is no mat5 in GLSL\n              var uniformVariableScale = uniformVariable + "_scale";\n              var uniformVariableTranslate = uniformVariable + "_translate";\n              uniformMap[uniformVariableScale] = getMat4UniformFunction(\n                scaleFromMatrix5Array(decodeMatrix)\n              ).func;\n              uniformMap[uniformVariableTranslate] = getVec4UniformFunction(\n                translateFromMatrix5Array(decodeMatrix)\n              ).func;\n              setUniforms[uniformVariableScale] = true;\n              setUniforms[uniformVariableTranslate] = true;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  // If there are any unset quantized uniforms in this program, they should be set to the identity\n  for (var quantizedUniform in quantizedUniforms) {\n    if (quantizedUniforms.hasOwnProperty(quantizedUniform)) {\n      if (!setUniforms[quantizedUniform]) {\n        var properties = quantizedUniforms[quantizedUniform];\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(properties.mat)) {\n          if (properties.mat === 2) {\n            uniformMap[quantizedUniform] = getMat2UniformFunction(\n              _Core_Matrix2_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].IDENTITY */ .Z.IDENTITY\n            ).func;\n          } else if (properties.mat === 3) {\n            uniformMap[quantizedUniform] = getMat3UniformFunction(\n              _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].IDENTITY */ .Z.IDENTITY\n            ).func;\n          } else if (properties.mat === 4) {\n            uniformMap[quantizedUniform] = getMat4UniformFunction(\n              _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].IDENTITY */ .Z.IDENTITY\n            ).func;\n          }\n        }\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(properties.vec)) {\n          if (properties.vec === 4) {\n            uniformMap[quantizedUniform] = getVec4UniformFunction([\n              0,\n              0,\n              0,\n              0,\n            ]).func;\n          }\n        }\n      }\n    }\n  }\n  return uniformMap;\n};\n\n// This doesn\'t support LOCAL, which we could add if it is ever used.\nvar scratchTranslationRtc = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar gltfSemanticUniforms = {\n  MODEL: function (uniformState, model) {\n    return function () {\n      return uniformState.model;\n    };\n  },\n  VIEW: function (uniformState, model) {\n    return function () {\n      return uniformState.view;\n    };\n  },\n  PROJECTION: function (uniformState, model) {\n    return function () {\n      return uniformState.projection;\n    };\n  },\n  MODELVIEW: function (uniformState, model) {\n    return function () {\n      return uniformState.modelView;\n    };\n  },\n  CESIUM_RTC_MODELVIEW: function (uniformState, model) {\n    // CESIUM_RTC extension\n    var mvRtc = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\n    return function () {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(model._rtcCenter)) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].getTranslation */ .Z.getTranslation(uniformState.model, scratchTranslationRtc);\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n          scratchTranslationRtc,\n          model._rtcCenter,\n          scratchTranslationRtc\n        );\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n          uniformState.view,\n          scratchTranslationRtc,\n          scratchTranslationRtc\n        );\n        return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].setTranslation */ .Z.setTranslation(\n          uniformState.modelView,\n          scratchTranslationRtc,\n          mvRtc\n        );\n      }\n      return uniformState.modelView;\n    };\n  },\n  MODELVIEWPROJECTION: function (uniformState, model) {\n    return function () {\n      return uniformState.modelViewProjection;\n    };\n  },\n  MODELINVERSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseModel;\n    };\n  },\n  VIEWINVERSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseView;\n    };\n  },\n  PROJECTIONINVERSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseProjection;\n    };\n  },\n  MODELVIEWINVERSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseModelView;\n    };\n  },\n  MODELVIEWPROJECTIONINVERSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseModelViewProjection;\n    };\n  },\n  MODELINVERSETRANSPOSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseTransposeModel;\n    };\n  },\n  MODELVIEWINVERSETRANSPOSE: function (uniformState, model) {\n    return function () {\n      return uniformState.normal;\n    };\n  },\n  VIEWPORT: function (uniformState, model) {\n    return function () {\n      return uniformState.viewportCartesian4;\n    };\n  },\n  // JOINTMATRIX created in createCommand()\n};\n\nModelUtility.getGltfSemanticUniforms = function () {\n  return gltfSemanticUniforms;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ModelUtility);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15322\n')}}]);