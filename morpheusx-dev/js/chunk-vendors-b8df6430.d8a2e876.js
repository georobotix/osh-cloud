"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[2257],{76754:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n    mat3 tangentToEyeMatrix = czm_tangentToEyeSpaceMatrix(v_normalEC, v_tangentEC, v_bitangentEC);\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = tangentToEyeMatrix;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY3NTQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwyQkFBMkI7QUFDMUMsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0Isa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QseUNBQXlDO0FBQ3pDLGtHQUFrRztBQUNsRztBQUNBLDBDQUEwQztBQUMxQztBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLHNDQUFzQztBQUN0QywwREFBMEQ7QUFDMUQsb0RBQW9EO0FBQ3BELDRCQUE0QjtBQUM1QiwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9BcHBlYXJhbmNlcy9BbGxNYXRlcmlhbEFwcGVhcmFuY2VGUy5qcz84MzRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgcmVidWlsdCBieSB0aGUgQ2VzaXVtIGJ1aWxkIHByb2Nlc3MuXG5leHBvcnQgZGVmYXVsdCBcInZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uRUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X25vcm1hbEVDO1xcblxcXG52YXJ5aW5nIHZlYzMgdl90YW5nZW50RUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X2JpdGFuZ2VudEVDO1xcblxcXG52YXJ5aW5nIHZlYzIgdl9zdDtcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIHZlYzMgcG9zaXRpb25Ub0V5ZUVDID0gLXZfcG9zaXRpb25FQztcXG5cXFxuICAgIG1hdDMgdGFuZ2VudFRvRXllTWF0cml4ID0gY3ptX3RhbmdlbnRUb0V5ZVNwYWNlTWF0cml4KHZfbm9ybWFsRUMsIHZfdGFuZ2VudEVDLCB2X2JpdGFuZ2VudEVDKTtcXG5cXFxuXFxuXFxcbiAgICB2ZWMzIG5vcm1hbEVDID0gbm9ybWFsaXplKHZfbm9ybWFsRUMpO1xcblxcXG4jaWZkZWYgRkFDRV9GT1JXQVJEXFxuXFxcbiAgICBub3JtYWxFQyA9IGZhY2Vmb3J3YXJkKG5vcm1hbEVDLCB2ZWMzKDAuMCwgMC4wLCAxLjApLCAtbm9ybWFsRUMpO1xcblxcXG4jZW5kaWZcXG5cXFxuXFxuXFxcbiAgICBjem1fbWF0ZXJpYWxJbnB1dCBtYXRlcmlhbElucHV0O1xcblxcXG4gICAgbWF0ZXJpYWxJbnB1dC5ub3JtYWxFQyA9IG5vcm1hbEVDO1xcblxcXG4gICAgbWF0ZXJpYWxJbnB1dC50YW5nZW50VG9FeWVNYXRyaXggPSB0YW5nZW50VG9FeWVNYXRyaXg7XFxuXFxcbiAgICBtYXRlcmlhbElucHV0LnBvc2l0aW9uVG9FeWVFQyA9IHBvc2l0aW9uVG9FeWVFQztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQuc3QgPSB2X3N0O1xcblxcXG4gICAgY3ptX21hdGVyaWFsIG1hdGVyaWFsID0gY3ptX2dldE1hdGVyaWFsKG1hdGVyaWFsSW5wdXQpO1xcblxcXG5cXG5cXFxuI2lmZGVmIEZMQVRcXG5cXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQobWF0ZXJpYWwuZGlmZnVzZSArIG1hdGVyaWFsLmVtaXNzaW9uLCBtYXRlcmlhbC5hbHBoYSk7XFxuXFxcbiNlbHNlXFxuXFxcbiAgICBnbF9GcmFnQ29sb3IgPSBjem1fcGhvbmcobm9ybWFsaXplKHBvc2l0aW9uVG9FeWVFQyksIG1hdGVyaWFsLCBjem1fbGlnaHREaXJlY3Rpb25FQyk7XFxuXFxcbiNlbmRpZlxcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76754\n')},66433:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec3 tangent;\\n\\\nattribute vec3 bitangent;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_tangentEC = czm_normal * tangent;                       // tangent in eye coordinates\\n\\\n    v_bitangentEC = czm_normal * bitangent;                   // bitangent in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY0MzMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIseUJBQXlCO0FBQ3pCLGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEI7QUFDQSwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0Isa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUNBQW1DO0FBQ25DO0FBQ0EsOERBQThEO0FBQzlELDhEQUE4RDtBQUM5RCw4REFBOEQ7QUFDOUQsOERBQThEO0FBQzlELGNBQWM7QUFDZDtBQUNBLDJEQUEyRDtBQUMzRCxDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvQXBwZWFyYW5jZXMvQWxsTWF0ZXJpYWxBcHBlYXJhbmNlVlMuanM/ZTFkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjNESGlnaDtcXG5cXFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb24zRExvdztcXG5cXFxuYXR0cmlidXRlIHZlYzMgbm9ybWFsO1xcblxcXG5hdHRyaWJ1dGUgdmVjMyB0YW5nZW50O1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBiaXRhbmdlbnQ7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMyIHN0O1xcblxcXG5hdHRyaWJ1dGUgZmxvYXQgYmF0Y2hJZDtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uRUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X25vcm1hbEVDO1xcblxcXG52YXJ5aW5nIHZlYzMgdl90YW5nZW50RUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X2JpdGFuZ2VudEVDO1xcblxcXG52YXJ5aW5nIHZlYzIgdl9zdDtcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIHZlYzQgcCA9IGN6bV9jb21wdXRlUG9zaXRpb24oKTtcXG5cXFxuXFxuXFxcbiAgICB2X3Bvc2l0aW9uRUMgPSAoY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWUgKiBwKS54eXo7ICAgICAgLy8gcG9zaXRpb24gaW4gZXllIGNvb3JkaW5hdGVzXFxuXFxcbiAgICB2X25vcm1hbEVDID0gY3ptX25vcm1hbCAqIG5vcm1hbDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9ybWFsIGluIGV5ZSBjb29yZGluYXRlc1xcblxcXG4gICAgdl90YW5nZW50RUMgPSBjem1fbm9ybWFsICogdGFuZ2VudDsgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhbmdlbnQgaW4gZXllIGNvb3JkaW5hdGVzXFxuXFxcbiAgICB2X2JpdGFuZ2VudEVDID0gY3ptX25vcm1hbCAqIGJpdGFuZ2VudDsgICAgICAgICAgICAgICAgICAgLy8gYml0YW5nZW50IGluIGV5ZSBjb29yZGluYXRlc1xcblxcXG4gICAgdl9zdCA9IHN0O1xcblxcXG5cXG5cXFxuICAgIGdsX1Bvc2l0aW9uID0gY3ptX21vZGVsVmlld1Byb2plY3Rpb25SZWxhdGl2ZVRvRXllICogcDtcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66433\n')},13366:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzNjYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwyQkFBMkI7QUFDMUMsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QseUNBQXlDO0FBQ3pDO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EscUVBQXFFO0FBQ3JFO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsc0NBQXNDO0FBQ3RDLG9EQUFvRDtBQUNwRCwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9BcHBlYXJhbmNlcy9CYXNpY01hdGVyaWFsQXBwZWFyYW5jZUZTLmpzP2MzMTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwidmFyeWluZyB2ZWMzIHZfcG9zaXRpb25FQztcXG5cXFxudmFyeWluZyB2ZWMzIHZfbm9ybWFsRUM7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICB2ZWMzIHBvc2l0aW9uVG9FeWVFQyA9IC12X3Bvc2l0aW9uRUM7XFxuXFxcblxcblxcXG4gICAgdmVjMyBub3JtYWxFQyA9IG5vcm1hbGl6ZSh2X25vcm1hbEVDKTtcXG5cXFxuI2lmZGVmIEZBQ0VfRk9SV0FSRFxcblxcXG4gICAgbm9ybWFsRUMgPSBmYWNlZm9yd2FyZChub3JtYWxFQywgdmVjMygwLjAsIDAuMCwgMS4wKSwgLW5vcm1hbEVDKTtcXG5cXFxuI2VuZGlmXFxuXFxcblxcblxcXG4gICAgY3ptX21hdGVyaWFsSW5wdXQgbWF0ZXJpYWxJbnB1dDtcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQubm9ybWFsRUMgPSBub3JtYWxFQztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQucG9zaXRpb25Ub0V5ZUVDID0gcG9zaXRpb25Ub0V5ZUVDO1xcblxcXG4gICAgY3ptX21hdGVyaWFsIG1hdGVyaWFsID0gY3ptX2dldE1hdGVyaWFsKG1hdGVyaWFsSW5wdXQpO1xcblxcXG5cXG5cXFxuI2lmZGVmIEZMQVRcXG5cXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQobWF0ZXJpYWwuZGlmZnVzZSArIG1hdGVyaWFsLmVtaXNzaW9uLCBtYXRlcmlhbC5hbHBoYSk7XFxuXFxcbiNlbHNlXFxuXFxcbiAgICBnbF9GcmFnQ29sb3IgPSBjem1fcGhvbmcobm9ybWFsaXplKHBvc2l0aW9uVG9FeWVFQyksIG1hdGVyaWFsLCBjem1fbGlnaHREaXJlY3Rpb25FQyk7XFxuXFxcbiNlbmRpZlxcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13366\n')},26479:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY0NzkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0Qix3QkFBd0I7QUFDeEI7QUFDQSwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUNBQW1DO0FBQ25DO0FBQ0EsOERBQThEO0FBQzlELDhEQUE4RDtBQUM5RDtBQUNBLDJEQUEyRDtBQUMzRCxDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvQXBwZWFyYW5jZXMvQmFzaWNNYXRlcmlhbEFwcGVhcmFuY2VWUy5qcz8wMzY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgcmVidWlsdCBieSB0aGUgQ2VzaXVtIGJ1aWxkIHByb2Nlc3MuXG5leHBvcnQgZGVmYXVsdCBcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RIaWdoO1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjNETG93O1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XFxuXFxcbmF0dHJpYnV0ZSBmbG9hdCBiYXRjaElkO1xcblxcXG5cXG5cXFxudmFyeWluZyB2ZWMzIHZfcG9zaXRpb25FQztcXG5cXFxudmFyeWluZyB2ZWMzIHZfbm9ybWFsRUM7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICB2ZWM0IHAgPSBjem1fY29tcHV0ZVBvc2l0aW9uKCk7XFxuXFxcblxcblxcXG4gICAgdl9wb3NpdGlvbkVDID0gKGN6bV9tb2RlbFZpZXdSZWxhdGl2ZVRvRXllICogcCkueHl6OyAgICAgIC8vIHBvc2l0aW9uIGluIGV5ZSBjb29yZGluYXRlc1xcblxcXG4gICAgdl9ub3JtYWxFQyA9IGN6bV9ub3JtYWwgKiBub3JtYWw7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbCBpbiBleWUgY29vcmRpbmF0ZXNcXG5cXFxuXFxuXFxcbiAgICBnbF9Qb3NpdGlvbiA9IGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uUmVsYXRpdmVUb0V5ZSAqIHA7XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26479\n')},63773:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    czm_materialInput materialInput;\\n\\\n\\n\\\n    vec3 normalEC = normalize(czm_normal3D * czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0)));\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    materialInput.s = v_st.s;\\n\\\n    materialInput.st = v_st;\\n\\\n    materialInput.str = vec3(v_st, 0.0);\\n\\\n\\n\\\n    // Convert tangent space material normal to eye space\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, materialInput.normalEC);\\n\\\n\\n\\\n    // Convert view vector to world space\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM3NzMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwyQkFBMkI7QUFDMUMsMEJBQTBCO0FBQzFCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsQ0FBQztBQUNELG9DQUFvQztBQUNwQztBQUNBLDRHQUE0RztBQUM1RztBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1Qix3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qyw2R0FBNkc7QUFDN0c7QUFDQTtBQUNBLHlDQUF5QztBQUN6QyxvREFBb0Q7QUFDcEQ7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBLHlGQUF5RjtBQUN6RjtBQUNBLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9BcHBlYXJhbmNlcy9FbGxpcHNvaWRTdXJmYWNlQXBwZWFyYW5jZUZTLmpzPzgxYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwidmFyeWluZyB2ZWMzIHZfcG9zaXRpb25NQztcXG5cXFxudmFyeWluZyB2ZWMzIHZfcG9zaXRpb25FQztcXG5cXFxudmFyeWluZyB2ZWMyIHZfc3Q7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICBjem1fbWF0ZXJpYWxJbnB1dCBtYXRlcmlhbElucHV0O1xcblxcXG5cXG5cXFxuICAgIHZlYzMgbm9ybWFsRUMgPSBub3JtYWxpemUoY3ptX25vcm1hbDNEICogY3ptX2dlb2RldGljU3VyZmFjZU5vcm1hbCh2X3Bvc2l0aW9uTUMsIHZlYzMoMC4wKSwgdmVjMygxLjApKSk7XFxuXFxcbiNpZmRlZiBGQUNFX0ZPUldBUkRcXG5cXFxuICAgIG5vcm1hbEVDID0gZmFjZWZvcndhcmQobm9ybWFsRUMsIHZlYzMoMC4wLCAwLjAsIDEuMCksIC1ub3JtYWxFQyk7XFxuXFxcbiNlbmRpZlxcblxcXG5cXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQucyA9IHZfc3QucztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQuc3QgPSB2X3N0O1xcblxcXG4gICAgbWF0ZXJpYWxJbnB1dC5zdHIgPSB2ZWMzKHZfc3QsIDAuMCk7XFxuXFxcblxcblxcXG4gICAgLy8gQ29udmVydCB0YW5nZW50IHNwYWNlIG1hdGVyaWFsIG5vcm1hbCB0byBleWUgc3BhY2VcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQubm9ybWFsRUMgPSBub3JtYWxFQztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQudGFuZ2VudFRvRXllTWF0cml4ID0gY3ptX2Vhc3ROb3J0aFVwVG9FeWVDb29yZGluYXRlcyh2X3Bvc2l0aW9uTUMsIG1hdGVyaWFsSW5wdXQubm9ybWFsRUMpO1xcblxcXG5cXG5cXFxuICAgIC8vIENvbnZlcnQgdmlldyB2ZWN0b3IgdG8gd29ybGQgc3BhY2VcXG5cXFxuICAgIHZlYzMgcG9zaXRpb25Ub0V5ZUVDID0gLXZfcG9zaXRpb25FQztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQucG9zaXRpb25Ub0V5ZUVDID0gcG9zaXRpb25Ub0V5ZUVDO1xcblxcXG5cXG5cXFxuICAgIGN6bV9tYXRlcmlhbCBtYXRlcmlhbCA9IGN6bV9nZXRNYXRlcmlhbChtYXRlcmlhbElucHV0KTtcXG5cXFxuXFxuXFxcbiNpZmRlZiBGTEFUXFxuXFxcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KG1hdGVyaWFsLmRpZmZ1c2UgKyBtYXRlcmlhbC5lbWlzc2lvbiwgbWF0ZXJpYWwuYWxwaGEpO1xcblxcXG4jZWxzZVxcblxcXG4gICAgZ2xfRnJhZ0NvbG9yID0gY3ptX3Bob25nKG5vcm1hbGl6ZShwb3NpdGlvblRvRXllRUMpLCBtYXRlcmlhbCwgY3ptX2xpZ2h0RGlyZWN0aW9uRUMpO1xcblxcXG4jZW5kaWZcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63773\n')},75350:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionMC = position3DHigh + position3DLow;           // position in model coordinates\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;     // position in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUzNTAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEI7QUFDQSwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsQ0FBQztBQUNELG1DQUFtQztBQUNuQztBQUNBLDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsY0FBYztBQUNkO0FBQ0EsMkRBQTJEO0FBQzNELENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9BcHBlYXJhbmNlcy9FbGxpcHNvaWRTdXJmYWNlQXBwZWFyYW5jZVZTLmpzP2M0ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwiYXR0cmlidXRlIHZlYzMgcG9zaXRpb24zREhpZ2g7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RMb3c7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMyIHN0O1xcblxcXG5hdHRyaWJ1dGUgZmxvYXQgYmF0Y2hJZDtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uTUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uRUM7XFxuXFxcbnZhcnlpbmcgdmVjMiB2X3N0O1xcblxcXG5cXG5cXFxudm9pZCBtYWluKClcXG5cXFxue1xcblxcXG4gICAgdmVjNCBwID0gY3ptX2NvbXB1dGVQb3NpdGlvbigpO1xcblxcXG5cXG5cXFxuICAgIHZfcG9zaXRpb25NQyA9IHBvc2l0aW9uM0RIaWdoICsgcG9zaXRpb24zRExvdzsgICAgICAgICAgIC8vIHBvc2l0aW9uIGluIG1vZGVsIGNvb3JkaW5hdGVzXFxuXFxcbiAgICB2X3Bvc2l0aW9uRUMgPSAoY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWUgKiBwKS54eXo7ICAgICAvLyBwb3NpdGlvbiBpbiBleWUgY29vcmRpbmF0ZXNcXG5cXFxuICAgIHZfc3QgPSBzdDtcXG5cXFxuXFxuXFxcbiAgICBnbF9Qb3NpdGlvbiA9IGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uUmVsYXRpdmVUb0V5ZSAqIHA7XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///75350\n')},26712:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    vec4 color = czm_gammaCorrect(v_color);\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY3MTIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwyQkFBMkI7QUFDMUMsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsQ0FBQztBQUNELHlDQUF5QztBQUN6QztBQUNBLDBDQUEwQztBQUMxQztBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0Esb0NBQW9DO0FBQ3BDLHNDQUFzQztBQUN0QyxvREFBb0Q7QUFDcEQsa0VBQWtFO0FBQ2xFLGlDQUFpQztBQUNqQyw2QkFBNkI7QUFDN0I7QUFDQSx5RkFBeUY7QUFDekYsQ0FBQztBQUNELENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TaGFkZXJzL0FwcGVhcmFuY2VzL1Blckluc3RhbmNlQ29sb3JBcHBlYXJhbmNlRlMuanM/YzNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJ2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbkVDO1xcblxcXG52YXJ5aW5nIHZlYzMgdl9ub3JtYWxFQztcXG5cXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICB2ZWMzIHBvc2l0aW9uVG9FeWVFQyA9IC12X3Bvc2l0aW9uRUM7XFxuXFxcblxcblxcXG4gICAgdmVjMyBub3JtYWxFQyA9IG5vcm1hbGl6ZSh2X25vcm1hbEVDKTtcXG5cXFxuI2lmZGVmIEZBQ0VfRk9SV0FSRFxcblxcXG4gICAgbm9ybWFsRUMgPSBmYWNlZm9yd2FyZChub3JtYWxFQywgdmVjMygwLjAsIDAuMCwgMS4wKSwgLW5vcm1hbEVDKTtcXG5cXFxuI2VuZGlmXFxuXFxcblxcblxcXG4gICAgdmVjNCBjb2xvciA9IGN6bV9nYW1tYUNvcnJlY3Qodl9jb2xvcik7XFxuXFxcblxcblxcXG4gICAgY3ptX21hdGVyaWFsSW5wdXQgbWF0ZXJpYWxJbnB1dDtcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQubm9ybWFsRUMgPSBub3JtYWxFQztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQucG9zaXRpb25Ub0V5ZUVDID0gcG9zaXRpb25Ub0V5ZUVDO1xcblxcXG4gICAgY3ptX21hdGVyaWFsIG1hdGVyaWFsID0gY3ptX2dldERlZmF1bHRNYXRlcmlhbChtYXRlcmlhbElucHV0KTtcXG5cXFxuICAgIG1hdGVyaWFsLmRpZmZ1c2UgPSBjb2xvci5yZ2I7XFxuXFxcbiAgICBtYXRlcmlhbC5hbHBoYSA9IGNvbG9yLmE7XFxuXFxcblxcblxcXG4gICAgZ2xfRnJhZ0NvbG9yID0gY3ptX3Bob25nKG5vcm1hbGl6ZShwb3NpdGlvblRvRXllRUMpLCBtYXRlcmlhbCwgY3ptX2xpZ2h0RGlyZWN0aW9uRUMpO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26712\n')},82926:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec4 color;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_color = color;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI5MjYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckIsd0JBQXdCO0FBQ3hCO0FBQ0EsMEJBQTBCO0FBQzFCLHdCQUF3QjtBQUN4QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBLENBQUM7QUFDRCxtQ0FBbUM7QUFDbkM7QUFDQSw4REFBOEQ7QUFDOUQsOERBQThEO0FBQzlELG9CQUFvQjtBQUNwQjtBQUNBLDJEQUEyRDtBQUMzRCxDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvQXBwZWFyYW5jZXMvUGVySW5zdGFuY2VDb2xvckFwcGVhcmFuY2VWUy5qcz84ZWRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgcmVidWlsdCBieSB0aGUgQ2VzaXVtIGJ1aWxkIHByb2Nlc3MuXG5leHBvcnQgZGVmYXVsdCBcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RIaWdoO1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjNETG93O1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XFxuXFxcbmF0dHJpYnV0ZSB2ZWM0IGNvbG9yO1xcblxcXG5hdHRyaWJ1dGUgZmxvYXQgYmF0Y2hJZDtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uRUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X25vcm1hbEVDO1xcblxcXG52YXJ5aW5nIHZlYzQgdl9jb2xvcjtcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIHZlYzQgcCA9IGN6bV9jb21wdXRlUG9zaXRpb24oKTtcXG5cXFxuXFxuXFxcbiAgICB2X3Bvc2l0aW9uRUMgPSAoY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWUgKiBwKS54eXo7ICAgICAgLy8gcG9zaXRpb24gaW4gZXllIGNvb3JkaW5hdGVzXFxuXFxcbiAgICB2X25vcm1hbEVDID0gY3ptX25vcm1hbCAqIG5vcm1hbDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9ybWFsIGluIGV5ZSBjb29yZGluYXRlc1xcblxcXG4gICAgdl9jb2xvciA9IGNvbG9yO1xcblxcXG5cXG5cXFxuICAgIGdsX1Bvc2l0aW9uID0gY3ptX21vZGVsVmlld1Byb2plY3Rpb25SZWxhdGl2ZVRvRXllICogcDtcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///82926\n')},76257:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = czm_gammaCorrect(v_color);\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYyNTcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSxzQkFBc0I7QUFDckM7QUFDQTtBQUNBLENBQUM7QUFDRCw2Q0FBNkM7QUFDN0MsQ0FBQztBQUNELENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TaGFkZXJzL0FwcGVhcmFuY2VzL1Blckluc3RhbmNlRmxhdENvbG9yQXBwZWFyYW5jZUZTLmpzPzdjNzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwidmFyeWluZyB2ZWM0IHZfY29sb3I7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICBnbF9GcmFnQ29sb3IgPSBjem1fZ2FtbWFDb3JyZWN0KHZfY29sb3IpO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76257\n')},32321:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec4 color;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_color = color;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIzMjEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLHFCQUFxQjtBQUNyQix3QkFBd0I7QUFDeEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLENBQUM7QUFDRCxtQ0FBbUM7QUFDbkM7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSwyREFBMkQ7QUFDM0QsQ0FBQztBQUNELENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TaGFkZXJzL0FwcGVhcmFuY2VzL1Blckluc3RhbmNlRmxhdENvbG9yQXBwZWFyYW5jZVZTLmpzPzRjOWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwiYXR0cmlidXRlIHZlYzMgcG9zaXRpb24zREhpZ2g7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RMb3c7XFxuXFxcbmF0dHJpYnV0ZSB2ZWM0IGNvbG9yO1xcblxcXG5hdHRyaWJ1dGUgZmxvYXQgYmF0Y2hJZDtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjNCB2X2NvbG9yO1xcblxcXG5cXG5cXFxudm9pZCBtYWluKClcXG5cXFxue1xcblxcXG4gICAgdmVjNCBwID0gY3ptX2NvbXB1dGVQb3NpdGlvbigpO1xcblxcXG5cXG5cXFxuICAgIHZfY29sb3IgPSBjb2xvcjtcXG5cXFxuXFxuXFxcbiAgICBnbF9Qb3NpdGlvbiA9IGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uUmVsYXRpdmVUb0V5ZSAqIHA7XFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32321\n')},12120:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 prevPosition3DHigh;\\n\\\nattribute vec3 prevPosition3DLow;\\n\\\nattribute vec3 nextPosition3DHigh;\\n\\\nattribute vec3 nextPosition3DLow;\\n\\\nattribute vec2 expandAndWidth;\\n\\\nattribute vec4 color;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float expandDir = expandAndWidth.x;\\n\\\n    float width = abs(expandAndWidth.y) + 0.5;\\n\\\n    bool usePrev = expandAndWidth.y < 0.0;\\n\\\n\\n\\\n    vec4 p = czm_computePosition();\\n\\\n    vec4 prev = czm_computePrevPosition();\\n\\\n    vec4 next = czm_computeNextPosition();\\n\\\n\\n\\\n    float angle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, angle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC;\\n\\\n\\n\\\n    v_color = color;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxMjAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLGtDQUFrQztBQUNsQyxpQ0FBaUM7QUFDakMsa0NBQWtDO0FBQ2xDLGlDQUFpQztBQUNqQyw4QkFBOEI7QUFDOUIscUJBQXFCO0FBQ3JCLHdCQUF3QjtBQUN4QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsQ0FBQztBQUNELHVDQUF1QztBQUN2Qyw4Q0FBOEM7QUFDOUMsMENBQTBDO0FBQzFDO0FBQ0EsbUNBQW1DO0FBQ25DLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUM7QUFDQSxnQkFBZ0I7QUFDaEIsb0dBQW9HO0FBQ3BHLHdEQUF3RDtBQUN4RDtBQUNBLG9CQUFvQjtBQUNwQixDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvQXBwZWFyYW5jZXMvUG9seWxpbmVDb2xvckFwcGVhcmFuY2VWUy5qcz82ZjQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgcmVidWlsdCBieSB0aGUgQ2VzaXVtIGJ1aWxkIHByb2Nlc3MuXG5leHBvcnQgZGVmYXVsdCBcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RIaWdoO1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjNETG93O1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBwcmV2UG9zaXRpb24zREhpZ2g7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIHByZXZQb3NpdGlvbjNETG93O1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBuZXh0UG9zaXRpb24zREhpZ2g7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIG5leHRQb3NpdGlvbjNETG93O1xcblxcXG5hdHRyaWJ1dGUgdmVjMiBleHBhbmRBbmRXaWR0aDtcXG5cXFxuYXR0cmlidXRlIHZlYzQgY29sb3I7XFxuXFxcbmF0dHJpYnV0ZSBmbG9hdCBiYXRjaElkO1xcblxcXG5cXG5cXFxudmFyeWluZyB2ZWM0IHZfY29sb3I7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICBmbG9hdCBleHBhbmREaXIgPSBleHBhbmRBbmRXaWR0aC54O1xcblxcXG4gICAgZmxvYXQgd2lkdGggPSBhYnMoZXhwYW5kQW5kV2lkdGgueSkgKyAwLjU7XFxuXFxcbiAgICBib29sIHVzZVByZXYgPSBleHBhbmRBbmRXaWR0aC55IDwgMC4wO1xcblxcXG5cXG5cXFxuICAgIHZlYzQgcCA9IGN6bV9jb21wdXRlUG9zaXRpb24oKTtcXG5cXFxuICAgIHZlYzQgcHJldiA9IGN6bV9jb21wdXRlUHJldlBvc2l0aW9uKCk7XFxuXFxcbiAgICB2ZWM0IG5leHQgPSBjem1fY29tcHV0ZU5leHRQb3NpdGlvbigpO1xcblxcXG5cXG5cXFxuICAgIGZsb2F0IGFuZ2xlO1xcblxcXG4gICAgdmVjNCBwb3NpdGlvbldDID0gZ2V0UG9seWxpbmVXaW5kb3dDb29yZGluYXRlcyhwLCBwcmV2LCBuZXh0LCBleHBhbmREaXIsIHdpZHRoLCB1c2VQcmV2LCBhbmdsZSk7XFxuXFxcbiAgICBnbF9Qb3NpdGlvbiA9IGN6bV92aWV3cG9ydE9ydGhvZ3JhcGhpYyAqIHBvc2l0aW9uV0M7XFxuXFxcblxcblxcXG4gICAgdl9jb2xvciA9IGNvbG9yO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12120\n')},93981:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 prevPosition3DHigh;\\n\\\nattribute vec3 prevPosition3DLow;\\n\\\nattribute vec3 nextPosition3DHigh;\\n\\\nattribute vec3 nextPosition3DLow;\\n\\\nattribute vec2 expandAndWidth;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying float v_width;\\n\\\nvarying vec2 v_st;\\n\\\nvarying float v_polylineAngle;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float expandDir = expandAndWidth.x;\\n\\\n    float width = abs(expandAndWidth.y) + 0.5;\\n\\\n    bool usePrev = expandAndWidth.y < 0.0;\\n\\\n\\n\\\n    vec4 p = czm_computePosition();\\n\\\n    vec4 prev = czm_computePrevPosition();\\n\\\n    vec4 next = czm_computeNextPosition();\\n\\\n\\n\\\n    float angle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, angle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC;\\n\\\n\\n\\\n    v_width = width;\\n\\\n    v_st.s = st.s;\\n\\\n    v_st.t = czm_writeNonPerspective(st.t, gl_Position.w);\\n\\\n    v_polylineAngle = angle;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM5ODEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLGtDQUFrQztBQUNsQyxpQ0FBaUM7QUFDakMsa0NBQWtDO0FBQ2xDLGlDQUFpQztBQUNqQyw4QkFBOEI7QUFDOUIsa0JBQWtCO0FBQ2xCLHdCQUF3QjtBQUN4QjtBQUNBLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEIsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUNBQXVDO0FBQ3ZDLDhDQUE4QztBQUM5QywwQ0FBMEM7QUFDMUM7QUFDQSxtQ0FBbUM7QUFDbkMsMENBQTBDO0FBQzFDLDBDQUEwQztBQUMxQztBQUNBLGdCQUFnQjtBQUNoQixvR0FBb0c7QUFDcEcsd0RBQXdEO0FBQ3hEO0FBQ0Esb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQiwwREFBMEQ7QUFDMUQsNEJBQTRCO0FBQzVCLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9BcHBlYXJhbmNlcy9Qb2x5bGluZU1hdGVyaWFsQXBwZWFyYW5jZVZTLmpzPzBmNzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSByZWJ1aWx0IGJ5IHRoZSBDZXNpdW0gYnVpbGQgcHJvY2Vzcy5cbmV4cG9ydCBkZWZhdWx0IFwiYXR0cmlidXRlIHZlYzMgcG9zaXRpb24zREhpZ2g7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RMb3c7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIHByZXZQb3NpdGlvbjNESGlnaDtcXG5cXFxuYXR0cmlidXRlIHZlYzMgcHJldlBvc2l0aW9uM0RMb3c7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMzIG5leHRQb3NpdGlvbjNESGlnaDtcXG5cXFxuYXR0cmlidXRlIHZlYzMgbmV4dFBvc2l0aW9uM0RMb3c7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMyIGV4cGFuZEFuZFdpZHRoO1xcblxcXG5hdHRyaWJ1dGUgdmVjMiBzdDtcXG5cXFxuYXR0cmlidXRlIGZsb2F0IGJhdGNoSWQ7XFxuXFxcblxcblxcXG52YXJ5aW5nIGZsb2F0IHZfd2lkdGg7XFxuXFxcbnZhcnlpbmcgdmVjMiB2X3N0O1xcblxcXG52YXJ5aW5nIGZsb2F0IHZfcG9seWxpbmVBbmdsZTtcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIGZsb2F0IGV4cGFuZERpciA9IGV4cGFuZEFuZFdpZHRoLng7XFxuXFxcbiAgICBmbG9hdCB3aWR0aCA9IGFicyhleHBhbmRBbmRXaWR0aC55KSArIDAuNTtcXG5cXFxuICAgIGJvb2wgdXNlUHJldiA9IGV4cGFuZEFuZFdpZHRoLnkgPCAwLjA7XFxuXFxcblxcblxcXG4gICAgdmVjNCBwID0gY3ptX2NvbXB1dGVQb3NpdGlvbigpO1xcblxcXG4gICAgdmVjNCBwcmV2ID0gY3ptX2NvbXB1dGVQcmV2UG9zaXRpb24oKTtcXG5cXFxuICAgIHZlYzQgbmV4dCA9IGN6bV9jb21wdXRlTmV4dFBvc2l0aW9uKCk7XFxuXFxcblxcblxcXG4gICAgZmxvYXQgYW5nbGU7XFxuXFxcbiAgICB2ZWM0IHBvc2l0aW9uV0MgPSBnZXRQb2x5bGluZVdpbmRvd0Nvb3JkaW5hdGVzKHAsIHByZXYsIG5leHQsIGV4cGFuZERpciwgd2lkdGgsIHVzZVByZXYsIGFuZ2xlKTtcXG5cXFxuICAgIGdsX1Bvc2l0aW9uID0gY3ptX3ZpZXdwb3J0T3J0aG9ncmFwaGljICogcG9zaXRpb25XQztcXG5cXFxuXFxuXFxcbiAgICB2X3dpZHRoID0gd2lkdGg7XFxuXFxcbiAgICB2X3N0LnMgPSBzdC5zO1xcblxcXG4gICAgdl9zdC50ID0gY3ptX3dyaXRlTm9uUGVyc3BlY3RpdmUoc3QudCwgZ2xfUG9zaXRpb24udyk7XFxuXFxcbiAgICB2X3BvbHlsaW5lQW5nbGUgPSBhbmdsZTtcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93981\n')},93774:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM3NzQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwyQkFBMkI7QUFDMUMsd0JBQXdCO0FBQ3hCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsQ0FBQztBQUNELHlDQUF5QztBQUN6QztBQUNBLDBDQUEwQztBQUMxQztBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLHNDQUFzQztBQUN0QyxvREFBb0Q7QUFDcEQsNEJBQTRCO0FBQzVCLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0EseUZBQXlGO0FBQ3pGO0FBQ0EsQ0FBQztBQUNELENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TaGFkZXJzL0FwcGVhcmFuY2VzL1RleHR1cmVkTWF0ZXJpYWxBcHBlYXJhbmNlRlMuanM/YmJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJ2YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbkVDO1xcblxcXG52YXJ5aW5nIHZlYzMgdl9ub3JtYWxFQztcXG5cXFxudmFyeWluZyB2ZWMyIHZfc3Q7XFxuXFxcblxcblxcXG52b2lkIG1haW4oKVxcblxcXG57XFxuXFxcbiAgICB2ZWMzIHBvc2l0aW9uVG9FeWVFQyA9IC12X3Bvc2l0aW9uRUM7XFxuXFxcblxcblxcXG4gICAgdmVjMyBub3JtYWxFQyA9IG5vcm1hbGl6ZSh2X25vcm1hbEVDKTtcXG5cXFxuI2lmZGVmIEZBQ0VfRk9SV0FSRFxcblxcXG4gICAgbm9ybWFsRUMgPSBmYWNlZm9yd2FyZChub3JtYWxFQywgdmVjMygwLjAsIDAuMCwgMS4wKSwgLW5vcm1hbEVDKTtcXG5cXFxuI2VuZGlmXFxuXFxcblxcblxcXG4gICAgY3ptX21hdGVyaWFsSW5wdXQgbWF0ZXJpYWxJbnB1dDtcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQubm9ybWFsRUMgPSBub3JtYWxFQztcXG5cXFxuICAgIG1hdGVyaWFsSW5wdXQucG9zaXRpb25Ub0V5ZUVDID0gcG9zaXRpb25Ub0V5ZUVDO1xcblxcXG4gICAgbWF0ZXJpYWxJbnB1dC5zdCA9IHZfc3Q7XFxuXFxcbiAgICBjem1fbWF0ZXJpYWwgbWF0ZXJpYWwgPSBjem1fZ2V0TWF0ZXJpYWwobWF0ZXJpYWxJbnB1dCk7XFxuXFxcblxcblxcXG4jaWZkZWYgRkxBVFxcblxcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChtYXRlcmlhbC5kaWZmdXNlICsgbWF0ZXJpYWwuZW1pc3Npb24sIG1hdGVyaWFsLmFscGhhKTtcXG5cXFxuI2Vsc2VcXG5cXFxuICAgIGdsX0ZyYWdDb2xvciA9IGN6bV9waG9uZyhub3JtYWxpemUocG9zaXRpb25Ub0V5ZUVDKSwgbWF0ZXJpYWwsIGN6bV9saWdodERpcmVjdGlvbkVDKTtcXG5cXFxuI2VuZGlmXFxuXFxcbn1cXG5cXFxuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93774\n')},80330:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAzMzAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSwrQkFBK0I7QUFDOUMsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEIsd0JBQXdCO0FBQ3hCO0FBQ0EsMEJBQTBCO0FBQzFCLHdCQUF3QjtBQUN4QixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLENBQUM7QUFDRCxtQ0FBbUM7QUFDbkM7QUFDQSw4REFBOEQ7QUFDOUQsOERBQThEO0FBQzlELGNBQWM7QUFDZDtBQUNBLDJEQUEyRDtBQUMzRCxDQUFDO0FBQ0QsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NoYWRlcnMvQXBwZWFyYW5jZXMvVGV4dHVyZWRNYXRlcmlhbEFwcGVhcmFuY2VWUy5qcz82MmM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgcmVidWlsdCBieSB0aGUgQ2VzaXVtIGJ1aWxkIHByb2Nlc3MuXG5leHBvcnQgZGVmYXVsdCBcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uM0RIaWdoO1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjNETG93O1xcblxcXG5hdHRyaWJ1dGUgdmVjMyBub3JtYWw7XFxuXFxcbmF0dHJpYnV0ZSB2ZWMyIHN0O1xcblxcXG5hdHRyaWJ1dGUgZmxvYXQgYmF0Y2hJZDtcXG5cXFxuXFxuXFxcbnZhcnlpbmcgdmVjMyB2X3Bvc2l0aW9uRUM7XFxuXFxcbnZhcnlpbmcgdmVjMyB2X25vcm1hbEVDO1xcblxcXG52YXJ5aW5nIHZlYzIgdl9zdDtcXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIHZlYzQgcCA9IGN6bV9jb21wdXRlUG9zaXRpb24oKTtcXG5cXFxuXFxuXFxcbiAgICB2X3Bvc2l0aW9uRUMgPSAoY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWUgKiBwKS54eXo7ICAgICAgLy8gcG9zaXRpb24gaW4gZXllIGNvb3JkaW5hdGVzXFxuXFxcbiAgICB2X25vcm1hbEVDID0gY3ptX25vcm1hbCAqIG5vcm1hbDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9ybWFsIGluIGV5ZSBjb29yZGluYXRlc1xcblxcXG4gICAgdl9zdCA9IHN0O1xcblxcXG5cXG5cXFxuICAgIGdsX1Bvc2l0aW9uID0gY3ptX21vZGVsVmlld1Byb2plY3Rpb25SZWxhdGl2ZVRvRXllICogcDtcXG5cXFxufVxcblxcXG5cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///80330\n')},39111:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("#ifdef GL_OES_standard_derivatives\\n\\\n#extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform sampler2D u_atlas;\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\nuniform vec4 u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;                  // the min and max x and y values for the texture coordinates\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;      // texture coordinate at the origin, billboard translate (used for label glyphs)\\n\\\nvarying vec4 v_compressed;                               // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nfloat getGlobeDepth(vec2 adjustedST, vec2 depthLookupST, bool applyTranslate, vec2 dimensions, vec2 imageSize)\\n\\\n{\\n\\\n    vec2 lookupVector = imageSize * (depthLookupST - adjustedST);\\n\\\n    lookupVector = v_rotationMatrix * lookupVector;\\n\\\n    vec2 labelOffset = (dimensions - imageSize) * (depthLookupST - vec2(0.0, v_originTextureCoordinateAndTranslate.y)); // aligns label glyph with bounding rectangle.  Will be zero for billboards because dimensions and imageSize will be equal\\n\\\n\\n\\\n    vec2 translation = v_originTextureCoordinateAndTranslate.zw;\\n\\\n\\n\\\n    if (applyTranslate)\\n\\\n    {\\n\\\n        // this is only needed for labels where the horizontal origin is not LEFT\\n\\\n        // it moves the label back to where the \\"origin\\" should be since all label glyphs are set to HorizontalOrigin.LEFT\\n\\\n        translation += (dimensions * v_originTextureCoordinateAndTranslate.xy * vec2(1.0, 0.0));\\n\\\n    }\\n\\\n\\n\\\n    vec2 st = ((lookupVector - translation + labelOffset) + gl_FragCoord.xy) / czm_viewport.zw;\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, st));\\n\\\n\\n\\\n    if (logDepthOrDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n\\n\\\n#ifdef SDF\\n\\\n\\n\\\n// Get the distance from the edge of a glyph at a given position sampling an SDF texture.\\n\\\nfloat getDistance(vec2 position)\\n\\\n{\\n\\\n    return texture2D(u_atlas, position).r;\\n\\\n}\\n\\\n\\n\\\n// Samples the sdf texture at the given position and produces a color based on the fill color and the outline.\\n\\\nvec4 getSDFColor(vec2 position, float outlineWidth, vec4 outlineColor, float smoothing)\\n\\\n{\\n\\\n    float distance = getDistance(position);\\n\\\n\\n\\\n    if (outlineWidth > 0.0)\\n\\\n    {\\n\\\n        // Don\'t get the outline edge exceed the SDF_EDGE\\n\\\n        float outlineEdge = clamp(SDF_EDGE - outlineWidth, 0.0, SDF_EDGE);\\n\\\n        float outlineFactor = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        vec4 sdfColor = mix(outlineColor, v_color, outlineFactor);\\n\\\n        float alpha = smoothstep(outlineEdge - smoothing, outlineEdge + smoothing, distance);\\n\\\n        return vec4(sdfColor.rgb, sdfColor.a * alpha);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float alpha = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        return vec4(v_color.rgb, v_color.a * alpha);\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(u_atlas, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    float outlineWidth = v_outlineWidth;\\n\\\n    vec4 outlineColor = v_outlineColor;\\n\\\n\\n\\\n    // Get the current distance\\n\\\n    float distance = getDistance(v_textureCoordinates);\\n\\\n\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    float smoothing = fwidth(distance);\\n\\\n    // Get an offset that is approximately half the distance to the neighbor pixels\\n\\\n    // 0.354 is approximately half of 1/sqrt(2)\\n\\\n    vec2 sampleOffset = 0.354 * vec2(dFdx(v_textureCoordinates) + dFdy(v_textureCoordinates));\\n\\\n\\n\\\n    // Sample the center point\\n\\\n    vec4 center = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Sample the 4 neighbors\\n\\\n    vec4 color1 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color2 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color3 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color4 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Equally weight the center sample and the 4 neighboring samples\\n\\\n    color = (center + color1 + color2 + color3 + color4)/5.0;\\n\\\n#else\\n\\\n    // Just do a single sample\\n\\\n    float smoothing = 1.0/32.0;\\n\\\n    color = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n#endif\\n\\\n\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n#else\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    color *= czm_gammaCorrect(v_color);\\n\\\n#endif\\n\\\n\\n\\\n// Fully transparent parts of the billboard are not pickable.\\n\\\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\\n\\\n    if (color.a < 0.005)   // matches 0/255 and 1/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n// The billboard is rendered twice. The opaque pass discards translucent fragments\\n\\\n// and the translucent pass discards opaque fragments.\\n\\\n#ifdef OPAQUE\\n\\\n    if (color.a < 0.995)   // matches < 254/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\n    color *= u_highlightColor;\\n\\\n#endif\\n\\\n    gl_FragColor = color;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float temp = v_compressed.y;\\n\\\n\\n\\\n    temp = temp * SHIFT_RIGHT1;\\n\\\n\\n\\\n    float temp2 = (temp - floor(temp)) * SHIFT_LEFT1;\\n\\\n    bool enableDepthTest = temp2 != 0.0;\\n\\\n    bool applyTranslate = floor(temp) != 0.0;\\n\\\n\\n\\\n    if (enableDepthTest) {\\n\\\n        temp = v_compressed.z;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 dimensions;\\n\\\n        dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        dimensions.x = floor(temp);\\n\\\n\\n\\\n        temp = v_compressed.w;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 imageSize;\\n\\\n        imageSize.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        imageSize.x = floor(temp);\\n\\\n\\n\\\n        vec2 adjustedST = v_textureCoordinates - v_textureCoordinateBounds.xy;\\n\\\n        adjustedST = adjustedST / vec2(v_textureCoordinateBounds.z - v_textureCoordinateBounds.x, v_textureCoordinateBounds.w - v_textureCoordinateBounds.y);\\n\\\n\\n\\\n        float epsilonEyeDepth = v_compressed.x + czm_epsilon1;\\n\\\n        float globeDepth1 = getGlobeDepth(adjustedST, v_originTextureCoordinateAndTranslate.xy, applyTranslate, dimensions, imageSize);\\n\\\n\\n\\\n        // negative values go into the screen\\n\\\n        if (globeDepth1 != 0.0 && globeDepth1 > epsilonEyeDepth)\\n\\\n        {\\n\\\n            float globeDepth2 = getGlobeDepth(adjustedST, vec2(0.0, 1.0), applyTranslate, dimensions, imageSize); // top left corner\\n\\\n            if (globeDepth2 != 0.0 && globeDepth2 > epsilonEyeDepth)\\n\\\n            {\\n\\\n                float globeDepth3 = getGlobeDepth(adjustedST, vec2(1.0, 1.0), applyTranslate, dimensions, imageSize); // top right corner\\n\\\n                if (globeDepth3 != 0.0 && globeDepth3 > epsilonEyeDepth)\\n\\\n                {\\n\\\n                    discard;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39111\n')},64059:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("#ifdef INSTANCED\\n\\\nattribute vec2 direction;\\n\\\n#endif\\n\\\nattribute vec4 positionHighAndScale;\\n\\\nattribute vec4 positionLowAndRotation;\\n\\\nattribute vec4 compressedAttribute0;                       // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates (texture offset)\\n\\\nattribute vec4 compressedAttribute1;                       // aligned axis, translucency by distance, image width\\n\\\nattribute vec4 compressedAttribute2;                       // label horizontal origin, image height, color, pick color, size in meters, valid aligned axis, 13 bits free\\n\\\nattribute vec4 eyeOffset;                                  // eye offset in meters, 4 bytes free (texture range)\\n\\\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\\n\\\nattribute vec4 pixelOffsetScaleByDistance;                 // near, nearScale, far, farScale\\n\\\nattribute vec4 compressedAttribute3;                       // distance display condition near, far, disableDepthTestDistance, dimensions\\n\\\nattribute vec2 sdf;                                        // sdf outline color (rgb) and width (w)\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\nattribute vec4 textureCoordinateBoundsOrLabelTranslate;    // the min and max x and y values for the texture coordinates\\n\\\n#endif\\n\\\n#ifdef VECTOR_TILE\\n\\\nattribute float a_batchId;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;\\n\\\nvarying vec4 v_compressed;                                 // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\nconst float UPPER_BOUND = 32768.0;\\n\\\n\\n\\\nconst float SHIFT_LEFT16 = 65536.0;\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT8 = 256.0;\\n\\\nconst float SHIFT_LEFT7 = 128.0;\\n\\\nconst float SHIFT_LEFT5 = 32.0;\\n\\\nconst float SHIFT_LEFT3 = 8.0;\\n\\\nconst float SHIFT_LEFT2 = 4.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\\n\\\nconst float SHIFT_RIGHT7 = 1.0 / 128.0;\\n\\\nconst float SHIFT_RIGHT5 = 1.0 / 32.0;\\n\\\nconst float SHIFT_RIGHT3 = 1.0 / 8.0;\\n\\\nconst float SHIFT_RIGHT2 = 1.0 / 4.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nvec4 addScreenSpaceOffset(vec4 positionEC, vec2 imageSize, float scale, vec2 direction, vec2 origin, vec2 translate, vec2 pixelOffset, vec3 alignedAxis, bool validAlignedAxis, float rotation, bool sizeInMeters, out mat2 rotationMatrix, out float mpp)\\n\\\n{\\n\\\n    // Note the halfSize cannot be computed in JavaScript because it is sent via\\n\\\n    // compressed vertex attributes that coerce it to an integer.\\n\\\n    vec2 halfSize = imageSize * scale * 0.5;\\n\\\n    halfSize *= ((direction * 2.0) - 1.0);\\n\\\n\\n\\\n    vec2 originTranslate = origin * abs(halfSize);\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    if (validAlignedAxis || rotation != 0.0)\\n\\\n    {\\n\\\n        float angle = rotation;\\n\\\n        if (validAlignedAxis)\\n\\\n        {\\n\\\n            vec4 projectedAlignedAxis = czm_modelViewProjection * vec4(alignedAxis, 0.0);\\n\\\n            angle += sign(-projectedAlignedAxis.x) * acos(sign(projectedAlignedAxis.y) * (projectedAlignedAxis.y * projectedAlignedAxis.y) /\\n\\\n                    (projectedAlignedAxis.x * projectedAlignedAxis.x + projectedAlignedAxis.y * projectedAlignedAxis.y));\\n\\\n        }\\n\\\n\\n\\\n        float cosTheta = cos(angle);\\n\\\n        float sinTheta = sin(angle);\\n\\\n        rotationMatrix = mat2(cosTheta, sinTheta, -sinTheta, cosTheta);\\n\\\n        halfSize = rotationMatrix * halfSize;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mpp = czm_metersPerPixel(positionEC);\\n\\\n    positionEC.xy += (originTranslate + halfSize) * czm_branchFreeTernary(sizeInMeters, 1.0, mpp);\\n\\\n    positionEC.xy += (translate + pixelOffset) * mpp;\\n\\\n\\n\\\n    return positionEC;\\n\\\n}\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nfloat getGlobeDepth(vec4 positionEC)\\n\\\n{\\n\\\n    vec4 posWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n\\n\\\n    float globeDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, posWC.xy / czm_viewport.zw));\\n\\\n\\n\\\n    if (globeDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(posWC.xy, globeDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Modifying this shader may also require modifications to Billboard._computeScreenSpacePosition\\n\\\n\\n\\\n    // unpack attributes\\n\\\n    vec3 positionHigh = positionHighAndScale.xyz;\\n\\\n    vec3 positionLow = positionLowAndRotation.xyz;\\n\\\n    float scale = positionHighAndScale.w;\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    float rotation = positionLowAndRotation.w;\\n\\\n#else\\n\\\n    float rotation = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n    float compressed = compressedAttribute0.x;\\n\\\n\\n\\\n    vec2 pixelOffset;\\n\\\n    pixelOffset.x = floor(compressed * SHIFT_RIGHT7);\\n\\\n    compressed -= pixelOffset.x * SHIFT_LEFT7;\\n\\\n    pixelOffset.x -= UPPER_BOUND;\\n\\\n\\n\\\n    vec2 origin;\\n\\\n    origin.x = floor(compressed * SHIFT_RIGHT5);\\n\\\n    compressed -= origin.x * SHIFT_LEFT5;\\n\\\n\\n\\\n    origin.y = floor(compressed * SHIFT_RIGHT3);\\n\\\n    compressed -= origin.y * SHIFT_LEFT3;\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    vec2 depthOrigin = origin.xy;\\n\\\n#endif\\n\\\n    origin -= vec2(1.0);\\n\\\n\\n\\\n    float show = floor(compressed * SHIFT_RIGHT2);\\n\\\n    compressed -= show * SHIFT_LEFT2;\\n\\\n\\n\\\n#ifdef INSTANCED\\n\\\n    vec2 textureCoordinatesBottomLeft = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n    vec2 textureCoordinatesRange = czm_decompressTextureCoordinates(eyeOffset.w);\\n\\\n    vec2 textureCoordinates = textureCoordinatesBottomLeft + direction * textureCoordinatesRange;\\n\\\n#else\\n\\\n    vec2 direction;\\n\\\n    direction.x = floor(compressed * SHIFT_RIGHT1);\\n\\\n    direction.y = compressed - direction.x * SHIFT_LEFT1;\\n\\\n\\n\\\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n#endif\\n\\\n\\n\\\n    float temp = compressedAttribute0.y  * SHIFT_RIGHT8;\\n\\\n    pixelOffset.y = -(floor(temp) - UPPER_BOUND);\\n\\\n\\n\\\n    vec2 translate;\\n\\\n    translate.y = (temp - floor(temp)) * SHIFT_LEFT16;\\n\\\n\\n\\\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\\n\\\n    translate.x = floor(temp) - UPPER_BOUND;\\n\\\n\\n\\\n    translate.y += (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    translate.y -= UPPER_BOUND;\\n\\\n\\n\\\n    temp = compressedAttribute1.x * SHIFT_RIGHT8;\\n\\\n    float temp2 = floor(compressedAttribute2.w * SHIFT_RIGHT2);\\n\\\n\\n\\\n    vec2 imageSize = vec2(floor(temp), temp2);\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float labelHorizontalOrigin = floor(compressedAttribute2.w - (temp2 * SHIFT_LEFT2));\\n\\\n    float applyTranslate = 0.0;\\n\\\n    if (labelHorizontalOrigin != 0.0) // is a billboard, so set apply translate to false\\n\\\n    {\\n\\\n        applyTranslate = 1.0;\\n\\\n        labelHorizontalOrigin -= 2.0;\\n\\\n        depthOrigin.x = labelHorizontalOrigin + 1.0;\\n\\\n    }\\n\\\n\\n\\\n    depthOrigin = vec2(1.0) - (depthOrigin * 0.5);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    vec4 translucencyByDistance;\\n\\\n    translucencyByDistance.x = compressedAttribute1.z;\\n\\\n    translucencyByDistance.z = compressedAttribute1.w;\\n\\\n\\n\\\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n\\n\\\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\\n\\\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\n    temp = compressedAttribute3.w;\\n\\\n    temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n    vec2 dimensions;\\n\\\n    dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n    dimensions.x = floor(temp);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ALIGNED_AXIS\\n\\\n    vec3 alignedAxis = czm_octDecode(floor(compressedAttribute1.y * SHIFT_RIGHT8));\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT5;\\n\\\n    bool validAlignedAxis = (temp - floor(temp)) * SHIFT_LEFT1 > 0.0;\\n\\\n#else\\n\\\n    vec3 alignedAxis = vec3(0.0);\\n\\\n    bool validAlignedAxis = false;\\n\\\n#endif\\n\\\n\\n\\\n    vec4 pickColor;\\n\\\n    vec4 color;\\n\\\n\\n\\\n    temp = compressedAttribute2.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    color.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT8;\\n\\\n    bool sizeInMeters = floor((temp - floor(temp)) * SHIFT_LEFT7) > 0.0;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n\\n\\\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor /= 255.0;\\n\\\n\\n\\\n    color.a = floor(temp);\\n\\\n    color /= 255.0;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n\\n\\\n#if defined(FRAGMENT_DEPTH_CHECK) || defined(VERTEX_DEPTH_CHECK)\\n\\\n    float eyeDepth = positionEC.z;\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = czm_eyeOffset(positionEC, eyeOffset.xyz);\\n\\\n    positionEC.xyz *= show;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(EYE_DISTANCE_PIXEL_OFFSET) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\\n\\\n    float lengthSq;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        // 2D camera distance is a special case\\n\\\n        // treat all billboards as flattened to the z=0.0 plane\\n\\\n        lengthSq = czm_eyeHeight2D.y;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_SCALING\\n\\\n    float distanceScale = czm_nearFarScalar(scaleByDistance, lengthSq);\\n\\\n    scale *= distanceScale;\\n\\\n    translate *= distanceScale;\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (scale == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    float translucency = 1.0;\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (translucency == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_PIXEL_OFFSET\\n\\\n    float pixelOffsetScale = czm_nearFarScalar(pixelOffsetScaleByDistance, lengthSq);\\n\\\n    pixelOffset *= pixelOffsetScale;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n    float nearSq = compressedAttribute3.x;\\n\\\n    float farSq = compressedAttribute3.y;\\n\\\n    if (lengthSq < nearSq || lengthSq > farSq)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mat2 rotationMatrix;\\n\\\n    float mpp;\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    float disableDepthTestDistance = compressedAttribute3.z;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nif (lengthSq < disableDepthTestDistance) {\\n\\\n    float depthsilon = 10.0;\\n\\\n\\n\\\n    vec2 labelTranslate = textureCoordinateBoundsOrLabelTranslate.xy;\\n\\\n    vec4 pEC1 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    float globeDepth1 = getGlobeDepth(pEC1);\\n\\\n\\n\\\n    if (globeDepth1 != 0.0 && pEC1.z + depthsilon < globeDepth1)\\n\\\n    {\\n\\\n        vec4 pEC2 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0, 1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n        float globeDepth2 = getGlobeDepth(pEC2);\\n\\\n\\n\\\n        if (globeDepth2 != 0.0 && pEC2.z + depthsilon < globeDepth2)\\n\\\n        {\\n\\\n            vec4 pEC3 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n            float globeDepth3 = getGlobeDepth(pEC3);\\n\\\n            if (globeDepth3 != 0.0 && pEC3.z + depthsilon < globeDepth3)\\n\\\n            {\\n\\\n                positionEC.xyz = vec3(0.0);\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = addScreenSpaceOffset(positionEC, imageSize, scale, direction, origin, translate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n    v_textureCoordinates = textureCoordinates;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_vertexLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\\n\\\n    }\\n\\\n\\n\\\n    if (disableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        // Don\'t try to \\"multiply both sides\\" by w.  Greater/less-than comparisons won\'t work for negative values of w.\\n\\\n        float zclip = gl_Position.z / gl_Position.w;\\n\\\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\\n\\\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\\n\\\n        {\\n\\\n            // Position z on the near plane.\\n\\\n            gl_Position.z = -gl_Position.w;\\n\\\n#ifdef LOG_DEPTH\\n\\\n            v_depthFromNearPlusOne = 1.0;\\n\\\n#endif\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    if (sizeInMeters) {\\n\\\n        translate /= mpp;\\n\\\n        dimensions /= mpp;\\n\\\n        imageSize /= mpp;\\n\\\n    }\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    v_rotationMatrix = rotationMatrix;\\n\\\n#else\\n\\\n    v_rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    float enableDepthCheck = 0.0;\\n\\\n    if (lengthSq < disableDepthTestDistance)\\n\\\n    {\\n\\\n        enableDepthCheck = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    float dw = floor(clamp(dimensions.x, 0.0, SHIFT_LEFT12));\\n\\\n    float dh = floor(clamp(dimensions.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    float iw = floor(clamp(imageSize.x, 0.0, SHIFT_LEFT12));\\n\\\n    float ih = floor(clamp(imageSize.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    v_compressed.x = eyeDepth;\\n\\\n    v_compressed.y = applyTranslate * SHIFT_LEFT1 + enableDepthCheck;\\n\\\n    v_compressed.z = dw * SHIFT_LEFT12 + dh;\\n\\\n    v_compressed.w = iw * SHIFT_LEFT12 + ih;\\n\\\n    v_originTextureCoordinateAndTranslate.xy = depthOrigin;\\n\\\n    v_originTextureCoordinateAndTranslate.zw = translate;\\n\\\n    v_textureCoordinateBounds = textureCoordinateBoundsOrLabelTranslate;\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    vec4 outlineColor;\\n\\\n    float outlineWidth;\\n\\\n\\n\\\n    temp = sdf.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.r = floor(temp);\\n\\\n\\n\\\n    temp = sdf.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    float temp3 = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineWidth = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.a = floor(temp);\\n\\\n    outlineColor /= 255.0;\\n\\\n\\n\\\n    v_outlineWidth = outlineWidth / 255.0;\\n\\\n    v_outlineColor = outlineColor;\\n\\\n    v_outlineColor.a *= translucency;\\n\\\n#endif\\n\\\n\\n\\\n    v_pickColor = pickColor;\\n\\\n\\n\\\n    v_color = color;\\n\\\n    v_color.a *= translucency;\\n\\\n\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///64059\n')},90398:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ __webpack_exports__["Z"] = ("varying vec2 v_textureCoordinates;\\n\\\nconst float M_PI = 3.141592653589793;\\n\\\n\\n\\\nfloat vdcRadicalInverse(int i)\\n\\\n{\\n\\\n    float r;\\n\\\n    float base = 2.0;\\n\\\n    float value = 0.0;\\n\\\n    float invBase = 1.0 / base;\\n\\\n    float invBi = invBase;\\n\\\n    for (int x = 0; x < 100; x++)\\n\\\n    {\\n\\\n        if (i <= 0)\\n\\\n        {\\n\\\n            break;\\n\\\n        }\\n\\\n        r = mod(float(i), base);\\n\\\n        value += r * invBi;\\n\\\n        invBi *= invBase;\\n\\\n        i = int(float(i) * invBase);\\n\\\n    }\\n\\\n    return value;\\n\\\n}\\n\\\n\\n\\\nvec2 hammersley2D(int i, int N)\\n\\\n{\\n\\\n    return vec2(float(i) / float(N), vdcRadicalInverse(i));\\n\\\n}\\n\\\n\\n\\\nvec3 importanceSampleGGX(vec2 xi, float roughness, vec3 N)\\n\\\n{\\n\\\n    float a = roughness * roughness;\\n\\\n    float phi = 2.0 * M_PI * xi.x;\\n\\\n    float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y));\\n\\\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\n\\\n    vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\\n\\\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\\n\\\n    vec3 tangentX = normalize(cross(upVector, N));\\n\\\n    vec3 tangentY = cross(N, tangentX);\\n\\\n    return tangentX * H.x + tangentY * H.y + N * H.z;\\n\\\n}\\n\\\n\\n\\\nfloat G1_Smith(float NdotV, float k)\\n\\\n{\\n\\\n    return NdotV / (NdotV * (1.0 - k) + k);\\n\\\n}\\n\\\n\\n\\\nfloat G_Smith(float roughness, float NdotV, float NdotL)\\n\\\n{\\n\\\n    float k = roughness * roughness / 2.0;\\n\\\n    return G1_Smith(NdotV, k) * G1_Smith(NdotL, k);\\n\\\n}\\n\\\n\\n\\\nvec2 integrateBrdf(float roughness, float NdotV)\\n\\\n{\\n\\\n    vec3 V = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);\\n\\\n    float A = 0.0;\\n\\\n    float B = 0.0;\\n\\\n    const int NumSamples = 1024;\\n\\\n    for (int i = 0; i < NumSamples; i++)\\n\\\n    {\\n\\\n        vec2 xi = hammersley2D(i, NumSamples);\\n\\\n        vec3 H = importanceSampleGGX(xi, roughness, vec3(0.0, 0.0, 1.0));\\n\\\n        vec3 L = 2.0 * dot(V, H) * H - V;\\n\\\n        float NdotL = clamp(L.z, 0.0, 1.0);\\n\\\n        float NdotH = clamp(H.z, 0.0, 1.0);\\n\\\n        float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\\n        if (NdotL > 0.0)\\n\\\n        {\\n\\\n            float G = G_Smith(roughness, NdotV, NdotL);\\n\\\n            float G_Vis = G * VdotH / (NdotH * NdotV);\\n\\\n            float Fc = pow(1.0 - VdotH, 5.0);\\n\\\n            A += (1.0 - Fc) * G_Vis;\\n\\\n            B += Fc * G_Vis;\\n\\\n        }\\n\\\n    }\\n\\\n    return vec2(A, B) / float(NumSamples);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = vec4(integrateBrdf(v_textureCoordinates.y, v_textureCoordinates.x), 0.0, 1.0);\\n\\\n}\\n\\\n");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAzOTguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx5REFBZSxtQ0FBbUM7QUFDbEQscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsWUFBWTtBQUNaLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsK0JBQStCO0FBQy9CLDBCQUEwQjtBQUMxQixvQkFBb0IsU0FBUztBQUM3QixLQUFLO0FBQ0w7QUFDQSxTQUFTO0FBQ1Qsa0JBQWtCO0FBQ2xCLFNBQVM7QUFDVCxnQ0FBZ0M7QUFDaEMsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6QixvQ0FBb0M7QUFDcEMsS0FBSztBQUNMLGlCQUFpQjtBQUNqQixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRCwyREFBMkQ7QUFDM0QsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDLGtDQUFrQztBQUNsQyx1RUFBdUU7QUFDdkUscURBQXFEO0FBQ3JELHNFQUFzRTtBQUN0RSxpRkFBaUY7QUFDakYsa0RBQWtEO0FBQ2xELHVDQUF1QztBQUN2QyxxREFBcUQ7QUFDckQsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMkNBQTJDO0FBQzNDLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNELDBDQUEwQztBQUMxQyxtREFBbUQ7QUFDbkQsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QseURBQXlEO0FBQ3pELGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsZ0NBQWdDO0FBQ2hDLG9CQUFvQixnQkFBZ0I7QUFDcEMsS0FBSztBQUNMLDhDQUE4QztBQUM5Qyx5RUFBeUU7QUFDekUseUNBQXlDO0FBQ3pDLDJDQUEyQztBQUMzQywyQ0FBMkM7QUFDM0MsaURBQWlEO0FBQ2pEO0FBQ0EsU0FBUztBQUNULHVEQUF1RDtBQUN2RCxzREFBc0Q7QUFDdEQsNkNBQTZDO0FBQzdDLG9DQUFvQztBQUNwQyw0QkFBNEI7QUFDNUIsU0FBUztBQUNULEtBQUs7QUFDTCwwQ0FBMEM7QUFDMUMsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUdBQWlHO0FBQ2pHLENBQUM7QUFDRCxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2hhZGVycy9CcmRmTHV0R2VuZXJhdG9yRlMuanM/MGE0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IHJlYnVpbHQgYnkgdGhlIENlc2l1bSBidWlsZCBwcm9jZXNzLlxuZXhwb3J0IGRlZmF1bHQgXCJ2YXJ5aW5nIHZlYzIgdl90ZXh0dXJlQ29vcmRpbmF0ZXM7XFxuXFxcbmNvbnN0IGZsb2F0IE1fUEkgPSAzLjE0MTU5MjY1MzU4OTc5MztcXG5cXFxuXFxuXFxcbmZsb2F0IHZkY1JhZGljYWxJbnZlcnNlKGludCBpKVxcblxcXG57XFxuXFxcbiAgICBmbG9hdCByO1xcblxcXG4gICAgZmxvYXQgYmFzZSA9IDIuMDtcXG5cXFxuICAgIGZsb2F0IHZhbHVlID0gMC4wO1xcblxcXG4gICAgZmxvYXQgaW52QmFzZSA9IDEuMCAvIGJhc2U7XFxuXFxcbiAgICBmbG9hdCBpbnZCaSA9IGludkJhc2U7XFxuXFxcbiAgICBmb3IgKGludCB4ID0gMDsgeCA8IDEwMDsgeCsrKVxcblxcXG4gICAge1xcblxcXG4gICAgICAgIGlmIChpIDw9IDApXFxuXFxcbiAgICAgICAge1xcblxcXG4gICAgICAgICAgICBicmVhaztcXG5cXFxuICAgICAgICB9XFxuXFxcbiAgICAgICAgciA9IG1vZChmbG9hdChpKSwgYmFzZSk7XFxuXFxcbiAgICAgICAgdmFsdWUgKz0gciAqIGludkJpO1xcblxcXG4gICAgICAgIGludkJpICo9IGludkJhc2U7XFxuXFxcbiAgICAgICAgaSA9IGludChmbG9hdChpKSAqIGludkJhc2UpO1xcblxcXG4gICAgfVxcblxcXG4gICAgcmV0dXJuIHZhbHVlO1xcblxcXG59XFxuXFxcblxcblxcXG52ZWMyIGhhbW1lcnNsZXkyRChpbnQgaSwgaW50IE4pXFxuXFxcbntcXG5cXFxuICAgIHJldHVybiB2ZWMyKGZsb2F0KGkpIC8gZmxvYXQoTiksIHZkY1JhZGljYWxJbnZlcnNlKGkpKTtcXG5cXFxufVxcblxcXG5cXG5cXFxudmVjMyBpbXBvcnRhbmNlU2FtcGxlR0dYKHZlYzIgeGksIGZsb2F0IHJvdWdobmVzcywgdmVjMyBOKVxcblxcXG57XFxuXFxcbiAgICBmbG9hdCBhID0gcm91Z2huZXNzICogcm91Z2huZXNzO1xcblxcXG4gICAgZmxvYXQgcGhpID0gMi4wICogTV9QSSAqIHhpLng7XFxuXFxcbiAgICBmbG9hdCBjb3NUaGV0YSA9IHNxcnQoKDEuMCAtIHhpLnkpIC8gKDEuMCArIChhICogYSAtIDEuMCkgKiB4aS55KSk7XFxuXFxcbiAgICBmbG9hdCBzaW5UaGV0YSA9IHNxcnQoMS4wIC0gY29zVGhldGEgKiBjb3NUaGV0YSk7XFxuXFxcbiAgICB2ZWMzIEggPSB2ZWMzKHNpblRoZXRhICogY29zKHBoaSksIHNpblRoZXRhICogc2luKHBoaSksIGNvc1RoZXRhKTtcXG5cXFxuICAgIHZlYzMgdXBWZWN0b3IgPSBhYnMoTi56KSA8IDAuOTk5ID8gdmVjMygwLjAsIDAuMCwgMS4wKSA6IHZlYzMoMS4wLCAwLjAsIDAuMCk7XFxuXFxcbiAgICB2ZWMzIHRhbmdlbnRYID0gbm9ybWFsaXplKGNyb3NzKHVwVmVjdG9yLCBOKSk7XFxuXFxcbiAgICB2ZWMzIHRhbmdlbnRZID0gY3Jvc3MoTiwgdGFuZ2VudFgpO1xcblxcXG4gICAgcmV0dXJuIHRhbmdlbnRYICogSC54ICsgdGFuZ2VudFkgKiBILnkgKyBOICogSC56O1xcblxcXG59XFxuXFxcblxcblxcXG5mbG9hdCBHMV9TbWl0aChmbG9hdCBOZG90ViwgZmxvYXQgaylcXG5cXFxue1xcblxcXG4gICAgcmV0dXJuIE5kb3RWIC8gKE5kb3RWICogKDEuMCAtIGspICsgayk7XFxuXFxcbn1cXG5cXFxuXFxuXFxcbmZsb2F0IEdfU21pdGgoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBOZG90ViwgZmxvYXQgTmRvdEwpXFxuXFxcbntcXG5cXFxuICAgIGZsb2F0IGsgPSByb3VnaG5lc3MgKiByb3VnaG5lc3MgLyAyLjA7XFxuXFxcbiAgICByZXR1cm4gRzFfU21pdGgoTmRvdFYsIGspICogRzFfU21pdGgoTmRvdEwsIGspO1xcblxcXG59XFxuXFxcblxcblxcXG52ZWMyIGludGVncmF0ZUJyZGYoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBOZG90VilcXG5cXFxue1xcblxcXG4gICAgdmVjMyBWID0gdmVjMyhzcXJ0KDEuMCAtIE5kb3RWICogTmRvdFYpLCAwLjAsIE5kb3RWKTtcXG5cXFxuICAgIGZsb2F0IEEgPSAwLjA7XFxuXFxcbiAgICBmbG9hdCBCID0gMC4wO1xcblxcXG4gICAgY29uc3QgaW50IE51bVNhbXBsZXMgPSAxMDI0O1xcblxcXG4gICAgZm9yIChpbnQgaSA9IDA7IGkgPCBOdW1TYW1wbGVzOyBpKyspXFxuXFxcbiAgICB7XFxuXFxcbiAgICAgICAgdmVjMiB4aSA9IGhhbW1lcnNsZXkyRChpLCBOdW1TYW1wbGVzKTtcXG5cXFxuICAgICAgICB2ZWMzIEggPSBpbXBvcnRhbmNlU2FtcGxlR0dYKHhpLCByb3VnaG5lc3MsIHZlYzMoMC4wLCAwLjAsIDEuMCkpO1xcblxcXG4gICAgICAgIHZlYzMgTCA9IDIuMCAqIGRvdChWLCBIKSAqIEggLSBWO1xcblxcXG4gICAgICAgIGZsb2F0IE5kb3RMID0gY2xhbXAoTC56LCAwLjAsIDEuMCk7XFxuXFxcbiAgICAgICAgZmxvYXQgTmRvdEggPSBjbGFtcChILnosIDAuMCwgMS4wKTtcXG5cXFxuICAgICAgICBmbG9hdCBWZG90SCA9IGNsYW1wKGRvdChWLCBIKSwgMC4wLCAxLjApO1xcblxcXG4gICAgICAgIGlmIChOZG90TCA+IDAuMClcXG5cXFxuICAgICAgICB7XFxuXFxcbiAgICAgICAgICAgIGZsb2F0IEcgPSBHX1NtaXRoKHJvdWdobmVzcywgTmRvdFYsIE5kb3RMKTtcXG5cXFxuICAgICAgICAgICAgZmxvYXQgR19WaXMgPSBHICogVmRvdEggLyAoTmRvdEggKiBOZG90Vik7XFxuXFxcbiAgICAgICAgICAgIGZsb2F0IEZjID0gcG93KDEuMCAtIFZkb3RILCA1LjApO1xcblxcXG4gICAgICAgICAgICBBICs9ICgxLjAgLSBGYykgKiBHX1ZpcztcXG5cXFxuICAgICAgICAgICAgQiArPSBGYyAqIEdfVmlzO1xcblxcXG4gICAgICAgIH1cXG5cXFxuICAgIH1cXG5cXFxuICAgIHJldHVybiB2ZWMyKEEsIEIpIC8gZmxvYXQoTnVtU2FtcGxlcyk7XFxuXFxcbn1cXG5cXFxuXFxuXFxcbnZvaWQgbWFpbigpXFxuXFxcbntcXG5cXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoaW50ZWdyYXRlQnJkZih2X3RleHR1cmVDb29yZGluYXRlcy55LCB2X3RleHR1cmVDb29yZGluYXRlcy54KSwgMC4wLCAxLjApO1xcblxcXG59XFxuXFxcblwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90398\n')},2303:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ CzmBuiltins; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/degreesPerRadian.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var degreesPerRadian = ("/**\\n\\\n * A built-in GLSL floating-point constant for converting radians to degrees.\\n\\\n *\\n\\\n * @alias czm_degreesPerRadian\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.DEGREES_PER_RADIAN\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_degreesPerRadian = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float deg = czm_degreesPerRadian * rad;\\n\\\n */\\n\\\nconst float czm_degreesPerRadian = 57.29577951308232;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/depthRange.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var depthRange = ("/**\\n\\\n * A built-in GLSL vec2 constant for defining the depth range.\\n\\\n * This is a workaround to a bug where IE11 does not implement gl_DepthRange.\\n\\\n *\\n\\\n * @alias czm_depthRange\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * float depthRangeNear = czm_depthRange.near;\\n\\\n * float depthRangeFar = czm_depthRange.far;\\n\\\n *\\n\\\n */\\n\\\nconst czm_depthRangeStruct czm_depthRange = czm_depthRangeStruct(0.0, 1.0);\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon1.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon1 = ("/**\\n\\\n * 0.1\\n\\\n *\\n\\\n * @name czm_epsilon1\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon1 = 0.1;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon2.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon2 = ("/**\\n\\\n * 0.01\\n\\\n *\\n\\\n * @name czm_epsilon2\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon2 = 0.01;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon3.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon3 = ("/**\\n\\\n * 0.001\\n\\\n *\\n\\\n * @name czm_epsilon3\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon3 = 0.001;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon4.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon4 = ("/**\\n\\\n * 0.0001\\n\\\n *\\n\\\n * @name czm_epsilon4\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon4 = 0.0001;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon5.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon5 = ("/**\\n\\\n * 0.00001\\n\\\n *\\n\\\n * @name czm_epsilon5\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon5 = 0.00001;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon6.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon6 = ("/**\\n\\\n * 0.000001\\n\\\n *\\n\\\n * @name czm_epsilon6\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon6 = 0.000001;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon7.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var epsilon7 = ("/**\\n\\\n * 0.0000001\\n\\\n *\\n\\\n * @name czm_epsilon7\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon7 = 0.0000001;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/infinity.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var infinity = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_infinity\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_infinity = 5906376272000.0;  // Distance from the Sun to Pluto in meters.  TODO: What is best given lowp, mediump, and highp?\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/oneOverPi.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var oneOverPi = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>1/pi</code>.\\n\\\n *\\n\\\n * @alias czm_oneOverPi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.ONE_OVER_PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_oneOverPi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 1.0 / czm_oneOverPi;\\n\\\n */\\n\\\nconst float czm_oneOverPi = 0.3183098861837907;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/oneOverTwoPi.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var oneOverTwoPi = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>1/2pi</code>.\\n\\\n *\\n\\\n * @alias czm_oneOverTwoPi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.ONE_OVER_TWO_PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_oneOverTwoPi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 2.0 * czm_oneOverTwoPi;\\n\\\n */\\n\\\nconst float czm_oneOverTwoPi = 0.15915494309189535;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passCesium3DTile.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passCesium3DTile = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE}\\n\\\n *\\n\\\n * @name czm_passCesium3DTile\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCesium3DTile = 4.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passCesium3DTileClassification.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passCesium3DTileClassification = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE_CLASSIFICATION}\\n\\\n *\\n\\\n * @name czm_passCesium3DTileClassification\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCesium3DTileClassification = 5.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passCesium3DTileClassificationIgnoreShow.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passCesium3DTileClassificationIgnoreShow = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW}\\n\\\n *\\n\\\n * @name czm_passCesium3DTileClassificationIgnoreShow\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCesium3DTileClassificationIgnoreShow = 6.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passClassification.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passClassification = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#CLASSIFICATION}\\n\\\n *\\n\\\n * @name czm_passClassification\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passClassification = 7.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passCompute.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passCompute = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#COMPUTE}\\n\\\n *\\n\\\n * @name czm_passCompute\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCompute = 1.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passEnvironment.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passEnvironment = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#ENVIRONMENT}\\n\\\n *\\n\\\n * @name czm_passEnvironment\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passEnvironment = 0.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passGlobe.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passGlobe = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#GLOBE}\\n\\\n *\\n\\\n * @name czm_passGlobe\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passGlobe = 2.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passOpaque.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passOpaque = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#OPAQUE}\\n\\\n *\\n\\\n * @name czm_passOpaque\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passOpaque = 7.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passOverlay.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passOverlay = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#OVERLAY}\\n\\\n *\\n\\\n * @name czm_passOverlay\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passOverlay = 9.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passTerrainClassification.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passTerrainClassification = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#TERRAIN_CLASSIFICATION}\\n\\\n *\\n\\\n * @name czm_passTerrainClassification\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passTerrainClassification = 3.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/passTranslucent.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var passTranslucent = ("/**\\n\\\n * The automatic GLSL constant for {@link Pass#TRANSLUCENT}\\n\\\n *\\n\\\n * @name czm_passTranslucent\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passTranslucent = 8.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/pi.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var pi = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>Math.PI</code>.\\n\\\n *\\n\\\n * @alias czm_pi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_pi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float twoPi = 2.0 * czm_pi;\\n\\\n */\\n\\\nconst float czm_pi = 3.141592653589793;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/piOverFour.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var piOverFour = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/4</code>.\\n\\\n *\\n\\\n * @alias czm_piOverFour\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_FOUR\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverFour = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 4.0 * czm_piOverFour;\\n\\\n */\\n\\\nconst float czm_piOverFour = 0.7853981633974483;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/piOverSix.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var piOverSix = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/6</code>.\\n\\\n *\\n\\\n * @alias czm_piOverSix\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_SIX\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverSix = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 6.0 * czm_piOverSix;\\n\\\n */\\n\\\nconst float czm_piOverSix = 0.5235987755982988;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/piOverThree.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var piOverThree = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/3</code>.\\n\\\n *\\n\\\n * @alias czm_piOverThree\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_THREE\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverThree = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 3.0 * czm_piOverThree;\\n\\\n */\\n\\\nconst float czm_piOverThree = 1.0471975511965976;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/piOverTwo.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var piOverTwo = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/2</code>.\\n\\\n *\\n\\\n * @alias czm_piOverTwo\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_TWO\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverTwo = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 2.0 * czm_piOverTwo;\\n\\\n */\\n\\\nconst float czm_piOverTwo = 1.5707963267948966;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/radiansPerDegree.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var radiansPerDegree = ("/**\\n\\\n * A built-in GLSL floating-point constant for converting degrees to radians.\\n\\\n *\\n\\\n * @alias czm_radiansPerDegree\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.RADIANS_PER_DEGREE\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_radiansPerDegree = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float rad = czm_radiansPerDegree * deg;\\n\\\n */\\n\\\nconst float czm_radiansPerDegree = 0.017453292519943295;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/sceneMode2D.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var sceneMode2D = ("/**\\n\\\n * The constant identifier for the 2D {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneMode2D\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneModeColumbusView\\n\\\n * @see czm_sceneMode3D\\n\\\n * @see czm_sceneModeMorphing\\n\\\n */\\n\\\nconst float czm_sceneMode2D = 2.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/sceneMode3D.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var sceneMode3D = ("/**\\n\\\n * The constant identifier for the 3D {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneMode3D\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneMode2D\\n\\\n * @see czm_sceneModeColumbusView\\n\\\n * @see czm_sceneModeMorphing\\n\\\n */\\n\\\nconst float czm_sceneMode3D = 3.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/sceneModeColumbusView.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var sceneModeColumbusView = ("/**\\n\\\n * The constant identifier for the Columbus View {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneModeColumbusView\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneMode2D\\n\\\n * @see czm_sceneMode3D\\n\\\n * @see czm_sceneModeMorphing\\n\\\n */\\n\\\nconst float czm_sceneModeColumbusView = 1.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/sceneModeMorphing.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var sceneModeMorphing = ("/**\\n\\\n * The constant identifier for the Morphing {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneModeMorphing\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneMode2D\\n\\\n * @see czm_sceneModeColumbusView\\n\\\n * @see czm_sceneMode3D\\n\\\n */\\n\\\nconst float czm_sceneModeMorphing = 0.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/solarRadius.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var solarRadius = ("/**\\n\\\n * A built-in GLSL floating-point constant for one solar radius.\\n\\\n *\\n\\\n * @alias czm_solarRadius\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.SOLAR_RADIUS\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_solarRadius = ...;\\n\\\n */\\n\\\nconst float czm_solarRadius = 695500000.0;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/threePiOver2.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var threePiOver2 = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>3pi/2</code>.\\n\\\n *\\n\\\n * @alias czm_threePiOver2\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.THREE_PI_OVER_TWO\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_threePiOver2 = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = (2.0 / 3.0) * czm_threePiOver2;\\n\\\n */\\n\\\nconst float czm_threePiOver2 = 4.71238898038469;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/twoPi.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var twoPi = ("/**\\n\\\n * A built-in GLSL floating-point constant for <code>2pi</code>.\\n\\\n *\\n\\\n * @alias czm_twoPi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.TWO_PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_twoPi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = czm_twoPi / 2.0;\\n\\\n */\\n\\\nconst float czm_twoPi = 6.283185307179586;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Constants/webMercatorMaxLatitude.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var webMercatorMaxLatitude = ("/**\\n\\\n * The maximum latitude, in radians, both North and South, supported by a Web Mercator\\n\\\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\\n\\\n * for any latitude up to (but not including) 90 degrees, but it makes sense\\n\\\n * to cut it off sooner because it grows exponentially with increasing latitude.\\n\\\n * The logic behind this particular cutoff value, which is the one used by\\n\\\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\\n\\\n * square.  That is, the rectangle is equal in the X and Y directions.\\n\\\n *\\n\\\n * The constant value is computed as follows:\\n\\\n *   czm_pi * 0.5 - (2.0 * atan(exp(-czm_pi)))\\n\\\n *\\n\\\n * @name czm_webMercatorMaxLatitude\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_webMercatorMaxLatitude = 1.4844222297453324;\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/depthRangeStruct.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var depthRangeStruct = ("/**\\n\\\n * @name czm_depthRangeStruct\\n\\\n * @glslStruct\\n\\\n */\\n\\\nstruct czm_depthRangeStruct\\n\\\n{\\n\\\n    float near;\\n\\\n    float far;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/material.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var material = ("/**\\n\\\n * Holds material information that can be used for lighting. Returned by all czm_getMaterial functions.\\n\\\n *\\n\\\n * @name czm_material\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {vec3} diffuse Incoming light that scatters evenly in all directions.\\n\\\n * @property {float} specular Intensity of incoming light reflecting in a single direction.\\n\\\n * @property {float} shininess The sharpness of the specular reflection.  Higher values create a smaller, more focused specular highlight.\\n\\\n * @property {vec3} normal Surface\'s normal in eye coordinates. It is used for effects such as normal mapping. The default is the surface\'s unmodified normal.\\n\\\n * @property {vec3} emission Light emitted by the material equally in all directions. The default is vec3(0.0), which emits no light.\\n\\\n * @property {float} alpha Alpha of this material. 0.0 is completely transparent; 1.0 is completely opaque.\\n\\\n */\\n\\\nstruct czm_material\\n\\\n{\\n\\\n    vec3 diffuse;\\n\\\n    float specular;\\n\\\n    float shininess;\\n\\\n    vec3 normal;\\n\\\n    vec3 emission;\\n\\\n    float alpha;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/materialInput.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var materialInput = ("/**\\n\\\n * Used as input to every material\'s czm_getMaterial function.\\n\\\n *\\n\\\n * @name czm_materialInput\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {float} s 1D texture coordinates.\\n\\\n * @property {vec2} st 2D texture coordinates.\\n\\\n * @property {vec3} str 3D texture coordinates.\\n\\\n * @property {vec3} normalEC Unperturbed surface normal in eye coordinates.\\n\\\n * @property {mat3} tangentToEyeMatrix Matrix for converting a tangent space normal to eye space.\\n\\\n * @property {vec3} positionToEyeEC Vector from the fragment to the eye in eye coordinates.  The magnitude is the distance in meters from the fragment to the eye.\\n\\\n * @property {float} height The height of the terrain in meters above or below the WGS84 ellipsoid.  Only available for globe materials.\\n\\\n * @property {float} slope The slope of the terrain in radians.  0 is flat; pi/2 is vertical.  Only available for globe materials.\\n\\\n * @property {float} aspect The aspect of the terrain in radians.  0 is East, pi/2 is North, pi is West, 3pi/2 is South.  Only available for globe materials.\\n\\\n */\\n\\\nstruct czm_materialInput\\n\\\n{\\n\\\n    float s;\\n\\\n    vec2 st;\\n\\\n    vec3 str;\\n\\\n    vec3 normalEC;\\n\\\n    mat3 tangentToEyeMatrix;\\n\\\n    vec3 positionToEyeEC;\\n\\\n    float height;\\n\\\n    float slope;\\n\\\n    float aspect;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/modelMaterial.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var modelMaterial = ("/**\\n\\\n * Struct for representing a material for a {@link ModelExperimental}. The model\\n\\\n * rendering pipeline will pass this struct between material, custom shaders,\\n\\\n * and lighting stages. This is not to be confused with {@link czm_material}\\n\\\n * which is used by the older Fabric materials system, although they are similar\\n\\\n *\\n\\\n * @name czm_modelMaterial\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {vec3} diffuse Incoming light that scatters evenly in all directions.\\n\\\n * @property {float} alpha Alpha of this material. 0.0 is completely transparent; 1.0 is completely opaque.\\n\\\n * @property {vec3} specular Color of reflected light at normal incidence in PBR materials. This is sometimes referred to as f0 in the literature.\\n\\\n * @property {float} roughness A number from 0.0 to 1.0 representing how rough the surface is. Values near 0.0 produce glossy surfaces, while values near 1.0 produce rough surfaces.\\n\\\n * @property {vec3} normal Surface\'s normal in eye coordinates. It is used for effects such as normal mapping. The default is the surface\'s unmodified normal.\\n\\\n * @property {float} occlusion Ambient occlusion recieved at this point on the material. 1.0 means fully lit, 0.0 means fully occluded.\\n\\\n * @property {vec3} emissive Light emitted by the material equally in all directions. The default is vec3(0.0), which emits no light.\\n\\\n */\\n\\\nstruct czm_modelMaterial {\\n\\\n    vec3 diffuse;\\n\\\n    float alpha;\\n\\\n    vec3 specular;\\n\\\n    float roughness;\\n\\\n    vec3 normal;\\n\\\n    float occlusion;\\n\\\n    vec3 emissive;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/pbrParameters.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var pbrParameters = ("/**\\n\\\n * Parameters for {@link czm_pbrLighting}\\n\\\n *\\n\\\n * @name czm_material\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {vec3} diffuseColor the diffuse color of the material for the lambert term of the rendering equation\\n\\\n * @property {float} roughness a value from 0.0 to 1.0 that indicates how rough the surface of the material is.\\n\\\n * @property {vec3} f0 The reflectance of the material at normal incidence\\n\\\n */\\n\\\nstruct czm_pbrParameters\\n\\\n{\\n\\\n    vec3 diffuseColor;\\n\\\n    float roughness;\\n\\\n    vec3 f0;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/ray.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var ray = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_ray\\n\\\n * @glslStruct\\n\\\n */\\n\\\nstruct czm_ray\\n\\\n{\\n\\\n    vec3 origin;\\n\\\n    vec3 direction;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/raySegment.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var raySegment = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_raySegment\\n\\\n * @glslStruct\\n\\\n */\\n\\\nstruct czm_raySegment\\n\\\n{\\n\\\n    float start;\\n\\\n    float stop;\\n\\\n};\\n\\\n\\n\\\n/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_emptyRaySegment\\n\\\n * @glslConstant \\n\\\n */\\n\\\nconst czm_raySegment czm_emptyRaySegment = czm_raySegment(-czm_infinity, -czm_infinity);\\n\\\n\\n\\\n/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_fullRaySegment\\n\\\n * @glslConstant \\n\\\n */\\n\\\nconst czm_raySegment czm_fullRaySegment = czm_raySegment(0.0, czm_infinity);\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Structs/shadowParameters.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var shadowParameters = ("struct czm_shadowParameters\\n\\\n{\\n\\\n#ifdef USE_CUBE_MAP_SHADOW\\n\\\n    vec3 texCoords;\\n\\\n#else\\n\\\n    vec2 texCoords;\\n\\\n#endif\\n\\\n\\n\\\n    float depthBias;\\n\\\n    float depth;\\n\\\n    float nDotL;\\n\\\n    vec2 texelStepSize;\\n\\\n    float normalShadingSmooth;\\n\\\n    float darkness;\\n\\\n};\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/HSBToRGB.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var HSBToRGB = ("/**\\n\\\n * Converts an HSB color (hue, saturation, brightness) to RGB\\n\\\n * HSB <-> RGB conversion with minimal branching: {@link http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl}\\n\\\n *\\n\\\n * @name czm_HSBToRGB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} hsb The color in HSB.\\n\\\n *\\n\\\n * @returns {vec3} The color in RGB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n * hsb.z *= 0.1;\\n\\\n * rgb = czm_HSBToRGB(hsb);\\n\\\n */\\n\\\n\\n\\\nconst vec4 K_HSB2RGB = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n\\\n\\n\\\nvec3 czm_HSBToRGB(vec3 hsb)\\n\\\n{\\n\\\n    vec3 p = abs(fract(hsb.xxx + K_HSB2RGB.xyz) * 6.0 - K_HSB2RGB.www);\\n\\\n    return hsb.z * mix(K_HSB2RGB.xxx, clamp(p - K_HSB2RGB.xxx, 0.0, 1.0), hsb.y);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/HSLToRGB.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var HSLToRGB = ("/**\\n\\\n * Converts an HSL color (hue, saturation, lightness) to RGB\\n\\\n * HSL <-> RGB conversion: {@link http://www.chilliant.com/rgb2hsv.html}\\n\\\n *\\n\\\n * @name czm_HSLToRGB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in HSL.\\n\\\n *\\n\\\n * @returns {vec3} The color in RGB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsl = czm_RGBToHSL(rgb);\\n\\\n * hsl.z *= 0.1;\\n\\\n * rgb = czm_HSLToRGB(hsl);\\n\\\n */\\n\\\n\\n\\\nvec3 hueToRGB(float hue)\\n\\\n{\\n\\\n    float r = abs(hue * 6.0 - 3.0) - 1.0;\\n\\\n    float g = 2.0 - abs(hue * 6.0 - 2.0);\\n\\\n    float b = 2.0 - abs(hue * 6.0 - 4.0);\\n\\\n    return clamp(vec3(r, g, b), 0.0, 1.0);\\n\\\n}\\n\\\n\\n\\\nvec3 czm_HSLToRGB(vec3 hsl)\\n\\\n{\\n\\\n    vec3 rgb = hueToRGB(hsl.x);\\n\\\n    float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;\\n\\\n    return (rgb - 0.5) * c + hsl.z;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/RGBToHSB.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var RGBToHSB = ("/**\\n\\\n * Converts an RGB color to HSB (hue, saturation, brightness)\\n\\\n * HSB <-> RGB conversion with minimal branching: {@link http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl}\\n\\\n *\\n\\\n * @name czm_RGBToHSB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in RGB.\\n\\\n *\\n\\\n * @returns {vec3} The color in HSB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n * hsb.z *= 0.1;\\n\\\n * rgb = czm_HSBToRGB(hsb);\\n\\\n */\\n\\\n\\n\\\nconst vec4 K_RGB2HSB = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n\\\n\\n\\\nvec3 czm_RGBToHSB(vec3 rgb)\\n\\\n{\\n\\\n    vec4 p = mix(vec4(rgb.bg, K_RGB2HSB.wz), vec4(rgb.gb, K_RGB2HSB.xy), step(rgb.b, rgb.g));\\n\\\n    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\\n\\\n\\n\\\n    float d = q.x - min(q.w, q.y);\\n\\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + czm_epsilon7)), d / (q.x + czm_epsilon7), q.x);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/RGBToHSL.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var RGBToHSL = ("/**\\n\\\n * Converts an RGB color to HSL (hue, saturation, lightness)\\n\\\n * HSL <-> RGB conversion: {@link http://www.chilliant.com/rgb2hsv.html}\\n\\\n *\\n\\\n * @name czm_RGBToHSL\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in RGB.\\n\\\n *\\n\\\n * @returns {vec3} The color in HSL.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsl = czm_RGBToHSL(rgb);\\n\\\n * hsl.z *= 0.1;\\n\\\n * rgb = czm_HSLToRGB(hsl);\\n\\\n */\\n\\\n \\n\\\nvec3 RGBtoHCV(vec3 rgb)\\n\\\n{\\n\\\n    // Based on work by Sam Hocevar and Emil Persson\\n\\\n    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1.0, 2.0 / 3.0) : vec4(rgb.gb, 0.0, -1.0 / 3.0);\\n\\\n    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);\\n\\\n    float c = q.x - min(q.w, q.y);\\n\\\n    float h = abs((q.w - q.y) / (6.0 * c + czm_epsilon7) + q.z);\\n\\\n    return vec3(h, c, q.x);\\n\\\n}\\n\\\n\\n\\\nvec3 czm_RGBToHSL(vec3 rgb)\\n\\\n{\\n\\\n    vec3 hcv = RGBtoHCV(rgb);\\n\\\n    float l = hcv.z - hcv.y * 0.5;\\n\\\n    float s = hcv.y / (1.0 - abs(l * 2.0 - 1.0) + czm_epsilon7);\\n\\\n    return vec3(hcv.x, s, l);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/RGBToXYZ.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var RGBToXYZ = ("/**\\n\\\n * Converts an RGB color to CIE Yxy.\\n\\\n * <p>The conversion is described in\\n\\\n * {@link http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering#Luminance_Transform|Luminance Transform}\\n\\\n * </p>\\n\\\n * \\n\\\n * @name czm_RGBToXYZ\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in RGB.\\n\\\n *\\n\\\n * @returns {vec3} The color in CIE Yxy.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 xyz = czm_RGBToXYZ(rgb);\\n\\\n * xyz.x = max(xyz.x - luminanceThreshold, 0.0);\\n\\\n * rgb = czm_XYZToRGB(xyz);\\n\\\n */\\n\\\nvec3 czm_RGBToXYZ(vec3 rgb)\\n\\\n{\\n\\\n    const mat3 RGB2XYZ = mat3(0.4124, 0.2126, 0.0193,\\n\\\n                              0.3576, 0.7152, 0.1192,\\n\\\n                              0.1805, 0.0722, 0.9505);\\n\\\n    vec3 xyz = RGB2XYZ * rgb;\\n\\\n    vec3 Yxy;\\n\\\n    Yxy.r = xyz.g;\\n\\\n    float temp = dot(vec3(1.0), xyz);\\n\\\n    Yxy.gb = xyz.rg / temp;\\n\\\n    return Yxy;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/XYZToRGB.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var XYZToRGB = ("/**\\n\\\n * Converts a CIE Yxy color to RGB.\\n\\\n * <p>The conversion is described in\\n\\\n * {@link http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering#Luminance_Transform|Luminance Transform}\\n\\\n * </p>\\n\\\n * \\n\\\n * @name czm_XYZToRGB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} Yxy The color in CIE Yxy.\\n\\\n *\\n\\\n * @returns {vec3} The color in RGB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 xyz = czm_RGBToXYZ(rgb);\\n\\\n * xyz.x = max(xyz.x - luminanceThreshold, 0.0);\\n\\\n * rgb = czm_XYZToRGB(xyz);\\n\\\n */\\n\\\nvec3 czm_XYZToRGB(vec3 Yxy)\\n\\\n{\\n\\\n    const mat3 XYZ2RGB = mat3( 3.2405, -0.9693,  0.0556,\\n\\\n                              -1.5371,  1.8760, -0.2040,\\n\\\n                              -0.4985,  0.0416,  1.0572);\\n\\\n    vec3 xyz;\\n\\\n    xyz.r = Yxy.r * Yxy.g / Yxy.b;\\n\\\n    xyz.g = Yxy.r;\\n\\\n    xyz.b = Yxy.r * (1.0 - Yxy.g - Yxy.b) / Yxy.b;\\n\\\n    \\n\\\n    return XYZ2RGB * xyz;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/acesTonemapping.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var acesTonemapping = ("// See:\\n\\\n//    https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\\n\\\n\\n\\\nvec3 czm_acesTonemapping(vec3 color) {\\n\\\n    float g = 0.985;\\n\\\n    float a = 0.065;\\n\\\n    float b = 0.0001;\\n\\\n    float c = 0.433;\\n\\\n    float d = 0.238;\\n\\\n\\n\\\n    color = (color * (color + a) - b) / (color * (g * color + c) + d);\\n\\\n\\n\\\n    color = clamp(color, 0.0, 1.0);\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/alphaWeight.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var alphaWeight = ("/**\\n\\\n * @private\\n\\\n */\\n\\\nfloat czm_alphaWeight(float a)\\n\\\n{\\n\\\n    float z = (gl_FragCoord.z - czm_viewportTransformation[3][2]) / czm_viewportTransformation[2][2];\\n\\\n\\n\\\n    // See Weighted Blended Order-Independent Transparency for examples of different weighting functions:\\n\\\n    // http://jcgt.org/published/0002/02/09/\\n\\\n    return pow(a + 0.01, 4.0) + max(1e-2, min(3.0 * 1e3, 0.003 / (1e-5 + pow(abs(z) / 200.0, 4.0))));\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/antialias.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var antialias = ("/**\\n\\\n * Procedural anti-aliasing by blurring two colors that meet at a sharp edge.\\n\\\n *\\n\\\n * @name czm_antialias\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} color1 The color on one side of the edge.\\n\\\n * @param {vec4} color2 The color on the other side of the edge.\\n\\\n * @param {vec4} currentcolor The current color, either <code>color1</code> or <code>color2</code>.\\n\\\n * @param {float} dist The distance to the edge in texture coordinates.\\n\\\n * @param {float} [fuzzFactor=0.1] Controls the blurriness between the two colors.\\n\\\n * @returns {vec4} The anti-aliased color.\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declarations\\n\\\n * vec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist, float fuzzFactor);\\n\\\n * vec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist);\\n\\\n *\\n\\\n * // get the color for a material that has a sharp edge at the line y = 0.5 in texture space\\n\\\n * float dist = abs(textureCoordinates.t - 0.5);\\n\\\n * vec4 currentColor = mix(bottomColor, topColor, step(0.5, textureCoordinates.t));\\n\\\n * vec4 color = czm_antialias(bottomColor, topColor, currentColor, dist, 0.1);\\n\\\n */\\n\\\nvec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist, float fuzzFactor)\\n\\\n{\\n\\\n    float val1 = clamp(dist / fuzzFactor, 0.0, 1.0);\\n\\\n    float val2 = clamp((dist - 0.5) / fuzzFactor, 0.0, 1.0);\\n\\\n    val1 = val1 * (1.0 - val2);\\n\\\n    val1 = val1 * val1 * (3.0 - (2.0 * val1));\\n\\\n    val1 = pow(val1, 0.5); //makes the transition nicer\\n\\\n    \\n\\\n    vec4 midColor = (color1 + color2) * 0.5;\\n\\\n    return mix(midColor, currentColor, val1);\\n\\\n}\\n\\\n\\n\\\nvec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist)\\n\\\n{\\n\\\n    return czm_antialias(color1, color2, currentColor, dist, 0.1);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/approximateSphericalCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var approximateSphericalCoordinates = ("/**\\n\\\n * Approximately computes spherical coordinates given a normal.\\n\\\n * Uses approximate inverse trigonometry for speed and consistency,\\n\\\n * since inverse trigonometry can differ from vendor-to-vendor and when compared with the CPU.\\n\\\n *\\n\\\n * @name czm_approximateSphericalCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} normal arbitrary-length normal.\\n\\\n *\\n\\\n * @returns {vec2} Approximate latitude and longitude spherical coordinates.\\n\\\n */\\n\\\nvec2 czm_approximateSphericalCoordinates(vec3 normal) {\\n\\\n    // Project into plane with vertical for latitude\\n\\\n    float latitudeApproximation = czm_fastApproximateAtan(sqrt(normal.x * normal.x + normal.y * normal.y), normal.z);\\n\\\n    float longitudeApproximation = czm_fastApproximateAtan(normal.x, normal.y);\\n\\\n    return vec2(latitudeApproximation, longitudeApproximation);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/backFacing.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var backFacing = ("/**\\n\\\n * Determines if the fragment is back facing\\n\\\n *\\n\\\n * @name czm_backFacing\\n\\\n * @glslFunction \\n\\\n * \\n\\\n * @returns {bool} <code>true</code> if the fragment is back facing; otherwise, <code>false</code>.\\n\\\n */\\n\\\nbool czm_backFacing()\\n\\\n{\\n\\\n    // !gl_FrontFacing doesn\'t work as expected on Mac/Intel so use the more verbose form instead. See https://github.com/CesiumGS/cesium/pull/8494.\\n\\\n    return gl_FrontFacing == false;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/branchFreeTernary.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var branchFreeTernary = ("/**\\n\\\n * Branchless ternary operator to be used when it\'s inexpensive to explicitly\\n\\\n * evaluate both possibilities for a float expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {float} a Value to return if the comparison is true.\\n\\\n * @param {float} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {float} equivalent of comparison ? a : b\\n\\\n */\\n\\\nfloat czm_branchFreeTernary(bool comparison, float a, float b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Branchless ternary operator to be used when it\'s inexpensive to explicitly\\n\\\n * evaluate both possibilities for a vec2 expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {vec2} a Value to return if the comparison is true.\\n\\\n * @param {vec2} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {vec2} equivalent of comparison ? a : b\\n\\\n */\\n\\\nvec2 czm_branchFreeTernary(bool comparison, vec2 a, vec2 b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Branchless ternary operator to be used when it\'s inexpensive to explicitly\\n\\\n * evaluate both possibilities for a vec3 expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {vec3} a Value to return if the comparison is true.\\n\\\n * @param {vec3} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {vec3} equivalent of comparison ? a : b\\n\\\n */\\n\\\nvec3 czm_branchFreeTernary(bool comparison, vec3 a, vec3 b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Branchless ternary operator to be used when it\'s inexpensive to explicitly\\n\\\n * evaluate both possibilities for a vec4 expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {vec3} a Value to return if the comparison is true.\\n\\\n * @param {vec3} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {vec3} equivalent of comparison ? a : b\\n\\\n */\\n\\\nvec4 czm_branchFreeTernary(bool comparison, vec4 a, vec4 b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeColor.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var cascadeColor = ("\\n\\\nvec4 czm_cascadeColor(vec4 weights)\\n\\\n{\\n\\\n    return vec4(1.0, 0.0, 0.0, 1.0) * weights.x +\\n\\\n           vec4(0.0, 1.0, 0.0, 1.0) * weights.y +\\n\\\n           vec4(0.0, 0.0, 1.0, 1.0) * weights.z +\\n\\\n           vec4(1.0, 0.0, 1.0, 1.0) * weights.w;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeDistance.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var cascadeDistance = ("\\n\\\nuniform vec4 shadowMap_cascadeDistances;\\n\\\n\\n\\\nfloat czm_cascadeDistance(vec4 weights)\\n\\\n{\\n\\\n    return dot(shadowMap_cascadeDistances, weights);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeMatrix.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var cascadeMatrix = ("\\n\\\nuniform mat4 shadowMap_cascadeMatrices[4];\\n\\\n\\n\\\nmat4 czm_cascadeMatrix(vec4 weights)\\n\\\n{\\n\\\n    return shadowMap_cascadeMatrices[0] * weights.x +\\n\\\n           shadowMap_cascadeMatrices[1] * weights.y +\\n\\\n           shadowMap_cascadeMatrices[2] * weights.z +\\n\\\n           shadowMap_cascadeMatrices[3] * weights.w;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeWeights.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var cascadeWeights = ("\\n\\\nuniform vec4 shadowMap_cascadeSplits[2];\\n\\\n\\n\\\nvec4 czm_cascadeWeights(float depthEye)\\n\\\n{\\n\\\n    // One component is set to 1.0 and all others set to 0.0.\\n\\\n    vec4 near = step(shadowMap_cascadeSplits[0], vec4(depthEye));\\n\\\n    vec4 far = step(depthEye, shadowMap_cascadeSplits[1]);\\n\\\n    return near * far;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/columbusViewMorph.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var columbusViewMorph = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_columbusViewMorph\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvec4 czm_columbusViewMorph(vec4 position2D, vec4 position3D, float time)\\n\\\n{\\n\\\n    // Just linear for now.\\n\\\n    vec3 p = mix(position2D.xyz, position3D.xyz, time);\\n\\\n    return vec4(p, 1.0);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/computePosition.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var computePosition = ("/**\\n\\\n * Returns a position in model coordinates relative to eye taking into\\n\\\n * account the current scene mode: 3D, 2D, or Columbus view.\\n\\\n * <p>\\n\\\n * This uses standard position attributes, <code>position3DHigh</code>, \\n\\\n * <code>position3DLow</code>, <code>position2DHigh</code>, and <code>position2DLow</code>, \\n\\\n * and should be used when writing a vertex shader for an {@link Appearance}.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_computePosition\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @returns {vec4} The position relative to eye.\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 p = czm_computePosition();\\n\\\n * v_positionEC = (czm_modelViewRelativeToEye * p).xyz;\\n\\\n * gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n *\\n\\\n * @see czm_translateRelativeToEye\\n\\\n */\\n\\\nvec4 czm_computePosition();\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/cosineAndSine.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var cosineAndSine = ("/**\\n\\\n * @private\\n\\\n */\\n\\\nvec2 cordic(float angle)\\n\\\n{\\n\\\n// Scale the vector by the appropriate factor for the 24 iterations to follow.\\n\\\n    vec2 vector = vec2(6.0725293500888267e-1, 0.0);\\n\\\n// Iteration 1\\n\\\n    float sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n //   float factor = sense * 1.0;  // 2^-0\\n\\\n    mat2 rotation = mat2(1.0, sense, -sense, 1.0);\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 7.8539816339744828e-1;  // atan(2^-0)\\n\\\n// Iteration 2\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    float factor = sense * 5.0e-1;  // 2^-1\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 4.6364760900080609e-1;  // atan(2^-1)\\n\\\n// Iteration 3\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 2.5e-1;  // 2^-2\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 2.4497866312686414e-1;  // atan(2^-2)\\n\\\n// Iteration 4\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.25e-1;  // 2^-3\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.2435499454676144e-1;  // atan(2^-3)\\n\\\n// Iteration 5\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 6.25e-2;  // 2^-4\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 6.2418809995957350e-2;  // atan(2^-4)\\n\\\n// Iteration 6\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.125e-2;  // 2^-5\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.1239833430268277e-2;  // atan(2^-5)\\n\\\n// Iteration 7\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.5625e-2;  // 2^-6\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.5623728620476831e-2;  // atan(2^-6)\\n\\\n// Iteration 8\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 7.8125e-3;  // 2^-7\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 7.8123410601011111e-3;  // atan(2^-7)\\n\\\n// Iteration 9\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.90625e-3;  // 2^-8\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.9062301319669718e-3;  // atan(2^-8)\\n\\\n// Iteration 10\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.953125e-3;  // 2^-9\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.9531225164788188e-3;  // atan(2^-9)\\n\\\n// Iteration 11\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 9.765625e-4;  // 2^-10\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 9.7656218955931946e-4;  // atan(2^-10)\\n\\\n// Iteration 12\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 4.8828125e-4;  // 2^-11\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 4.8828121119489829e-4;  // atan(2^-11)\\n\\\n// Iteration 13\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 2.44140625e-4;  // 2^-12\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 2.4414062014936177e-4;  // atan(2^-12)\\n\\\n// Iteration 14\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.220703125e-4;  // 2^-13\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.2207031189367021e-4;  // atan(2^-13)\\n\\\n// Iteration 15\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 6.103515625e-5;  // 2^-14\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 6.1035156174208773e-5;  // atan(2^-14)\\n\\\n// Iteration 16\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.0517578125e-5;  // 2^-15\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.0517578115526096e-5;  // atan(2^-15)\\n\\\n// Iteration 17\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.52587890625e-5;  // 2^-16\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.5258789061315762e-5;  // atan(2^-16)\\n\\\n// Iteration 18\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 7.62939453125e-6;  // 2^-17\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 7.6293945311019700e-6;  // atan(2^-17)\\n\\\n// Iteration 19\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.814697265625e-6;  // 2^-18\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.8146972656064961e-6;  // atan(2^-18)\\n\\\n// Iteration 20\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.9073486328125e-6;  // 2^-19\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.9073486328101870e-6;  // atan(2^-19)\\n\\\n// Iteration 21\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 9.5367431640625e-7;  // 2^-20\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 9.5367431640596084e-7;  // atan(2^-20)\\n\\\n// Iteration 22\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 4.76837158203125e-7;  // 2^-21\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 4.7683715820308884e-7;  // atan(2^-21)\\n\\\n// Iteration 23\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 2.384185791015625e-7;  // 2^-22\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 2.3841857910155797e-7;  // atan(2^-22)\\n\\\n// Iteration 24\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.1920928955078125e-7;  // 2^-23\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n//    angle -= sense * 1.1920928955078068e-7;  // atan(2^-23)\\n\\\n\\n\\\n    return vector;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes the cosine and sine of the provided angle using the CORDIC algorithm.\\n\\\n *\\n\\\n * @name czm_cosineAndSine\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} angle The angle in radians.\\n\\\n *\\n\\\n * @returns {vec2} The resulting cosine of the angle (as the x coordinate) and sine of the angle (as the y coordinate).\\n\\\n *\\n\\\n * @example\\n\\\n * vec2 v = czm_cosineAndSine(czm_piOverSix);\\n\\\n * float cosine = v.x;\\n\\\n * float sine = v.y;\\n\\\n */\\n\\\nvec2 czm_cosineAndSine(float angle)\\n\\\n{\\n\\\n    if (angle < -czm_piOverTwo || angle > czm_piOverTwo)\\n\\\n    {\\n\\\n        if (angle < 0.0)\\n\\\n        {\\n\\\n            return -cordic(angle + czm_pi);\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            return -cordic(angle - czm_pi);\\n\\\n        }\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        return cordic(angle);\\n\\\n    }\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/decompressTextureCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var decompressTextureCoordinates = ("/**\\n\\\n * Decompresses texture coordinates that were packed into a single float.\\n\\\n *\\n\\\n * @name czm_decompressTextureCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} encoded The compressed texture coordinates.\\n\\\n * @returns {vec2} The decompressed texture coordinates.\\n\\\n */\\n\\\n vec2 czm_decompressTextureCoordinates(float encoded)\\n\\\n {\\n\\\n    float temp = encoded / 4096.0;\\n\\\n    float xZeroTo4095 = floor(temp);\\n\\\n    float stx = xZeroTo4095 / 4095.0;\\n\\\n    float sty = (encoded - xZeroTo4095 * 4096.0) / 4095.0;\\n\\\n    return vec2(stx, sty);\\n\\\n }\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/defaultPbrMaterial.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var defaultPbrMaterial = ("/**\\n\\\n * Get default parameters for physically based rendering. These defaults\\n\\\n * describe a rough dielectric (non-metal) surface (e.g. rough plastic).\\n\\\n *\\n\\\n * @return {czm_pbrParameters} Default parameters for {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_defaultPbrMaterial()\\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n    results.diffuseColor = vec3(1.0);\\n\\\n    results.roughness = 1.0;\\n\\\n\\n\\\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\\n\\\n    results.f0 = REFLECTANCE_DIELECTRIC;\\n\\\n    return results;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/depthClamp.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var depthClamp = ("// emulated noperspective\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\nvarying float v_WindowZ;\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Emulates GL_DEPTH_CLAMP, which is not available in WebGL 1 or 2.\\n\\\n * GL_DEPTH_CLAMP clamps geometry that is outside the near and far planes, \\n\\\n * capping the shadow volume. More information here: \\n\\\n * https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_depth_clamp.txt.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is available we emulate GL_DEPTH_CLAMP by ensuring \\n\\\n * no geometry gets clipped by setting the clip space z value to 0.0 and then\\n\\\n * sending the unaltered screen space z value (using emulated noperspective\\n\\\n * interpolation) to the frag shader where it is clamped to [0,1] and then\\n\\\n * written with gl_FragDepth (see czm_writeDepthClamp). This technique is based on:\\n\\\n * https://stackoverflow.com/questions/5960757/how-to-emulate-gl-depth-clamp-nv.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is not available, which is the case on some mobile \\n\\\n * devices, we must attempt to fix this only in the vertex shader. \\n\\\n * The approach is to clamp the z value to the far plane, which closes the \\n\\\n * shadow volume but also distorts the geometry, so there can still be artifacts\\n\\\n * on frustum seams.\\n\\\n *\\n\\\n * @name czm_depthClamp\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} coords The vertex in clip coordinates.\\n\\\n * @returns {vec4} The modified vertex.\\n\\\n *\\n\\\n * @example\\n\\\n * gl_Position = czm_depthClamp(czm_modelViewProjection * vec4(position, 1.0));\\n\\\n *\\n\\\n * @see czm_writeDepthClamp\\n\\\n */\\n\\\nvec4 czm_depthClamp(vec4 coords)\\n\\\n{\\n\\\n#ifndef LOG_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    v_WindowZ = (0.5 * (coords.z / coords.w) + 0.5) * coords.w;\\n\\\n    coords.z = 0.0;\\n\\\n#else\\n\\\n    coords.z = min(coords.z, coords.w);\\n\\\n#endif\\n\\\n#endif\\n\\\n    return coords;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/eastNorthUpToEyeCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var eastNorthUpToEyeCoordinates = ("/**\\n\\\n * Computes a 3x3 rotation matrix that transforms vectors from an ellipsoid\'s east-north-up coordinate system \\n\\\n * to eye coordinates.  In east-north-up coordinates, x points east, y points north, and z points along the \\n\\\n * surface normal.  East-north-up can be used as an ellipsoid\'s tangent space for operations such as bump mapping.\\n\\\n * <br /><br />\\n\\\n * The ellipsoid is assumed to be centered at the model coordinate\'s origin.\\n\\\n *\\n\\\n * @name czm_eastNorthUpToEyeCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionMC The position on the ellipsoid in model coordinates.\\n\\\n * @param {vec3} normalEC The normalized ellipsoid surface normal, at <code>positionMC</code>, in eye coordinates.\\n\\\n *\\n\\\n * @returns {mat3} A 3x3 rotation matrix that transforms vectors from the east-north-up coordinate system to eye coordinates.\\n\\\n *\\n\\\n * @example\\n\\\n * // Transform a vector defined in the east-north-up coordinate \\n\\\n * // system, (0, 0, 1) which is the surface normal, to eye \\n\\\n * // coordinates.\\n\\\n * mat3 m = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n * vec3 normalEC = m * vec3(0.0, 0.0, 1.0);\\n\\\n */\\n\\\nmat3 czm_eastNorthUpToEyeCoordinates(vec3 positionMC, vec3 normalEC)\\n\\\n{\\n\\\n    vec3 tangentMC = normalize(vec3(-positionMC.y, positionMC.x, 0.0));  // normalized surface tangent in model coordinates\\n\\\n    vec3 tangentEC = normalize(czm_normal3D * tangentMC);                // normalized surface tangent in eye coordiantes\\n\\\n    vec3 bitangentEC = normalize(cross(normalEC, tangentEC));            // normalized surface bitangent in eye coordinates\\n\\\n\\n\\\n    return mat3(\\n\\\n        tangentEC.x,   tangentEC.y,   tangentEC.z,\\n\\\n        bitangentEC.x, bitangentEC.y, bitangentEC.z,\\n\\\n        normalEC.x,    normalEC.y,    normalEC.z);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/ellipsoidContainsPoint.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var ellipsoidContainsPoint = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_ellipsoidContainsPoint\\n\\\n * @glslFunction\\n\\\n *\\n\\\n */\\n\\\nbool czm_ellipsoidContainsPoint(vec3 ellipsoid_inverseRadii, vec3 point)\\n\\\n{\\n\\\n    vec3 scaled = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(point, 1.0)).xyz;\\n\\\n    return (dot(scaled, scaled) <= 1.0);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/ellipsoidWgs84TextureCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var ellipsoidWgs84TextureCoordinates = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_ellipsoidWgs84TextureCoordinates\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvec2 czm_ellipsoidWgs84TextureCoordinates(vec3 normal)\\n\\\n{\\n\\\n    return vec2(atan(normal.y, normal.x) * czm_oneOverTwoPi + 0.5, asin(normal.z) * czm_oneOverPi + 0.5);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/equalsEpsilon.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var equalsEpsilon = ("/**\\n\\\n * Compares <code>left</code> and <code>right</code> componentwise. Returns <code>true</code>\\n\\\n * if they are within <code>epsilon</code> and <code>false</code> otherwise. The inputs\\n\\\n * <code>left</code> and <code>right</code> can be <code>float</code>s, <code>vec2</code>s,\\n\\\n * <code>vec3</code>s, or <code>vec4</code>s.\\n\\\n *\\n\\\n * @name czm_equalsEpsilon\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {} left The first vector.\\n\\\n * @param {} right The second vector.\\n\\\n * @param {float} epsilon The epsilon to use for equality testing.\\n\\\n * @returns {bool} <code>true</code> if the components are within <code>epsilon</code> and <code>false</code> otherwise.\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declarations\\n\\\n * bool czm_equalsEpsilon(float left, float right, float epsilon);\\n\\\n * bool czm_equalsEpsilon(vec2 left, vec2 right, float epsilon);\\n\\\n * bool czm_equalsEpsilon(vec3 left, vec3 right, float epsilon);\\n\\\n * bool czm_equalsEpsilon(vec4 left, vec4 right, float epsilon);\\n\\\n */\\n\\\nbool czm_equalsEpsilon(vec4 left, vec4 right, float epsilon) {\\n\\\n    return all(lessThanEqual(abs(left - right), vec4(epsilon)));\\n\\\n}\\n\\\n\\n\\\nbool czm_equalsEpsilon(vec3 left, vec3 right, float epsilon) {\\n\\\n    return all(lessThanEqual(abs(left - right), vec3(epsilon)));\\n\\\n}\\n\\\n\\n\\\nbool czm_equalsEpsilon(vec2 left, vec2 right, float epsilon) {\\n\\\n    return all(lessThanEqual(abs(left - right), vec2(epsilon)));\\n\\\n}\\n\\\n\\n\\\nbool czm_equalsEpsilon(float left, float right, float epsilon) {\\n\\\n    return (abs(left - right) <= epsilon);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/eyeOffset.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var eyeOffset = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_eyeOffset\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} positionEC DOC_TBA.\\n\\\n * @param {vec3} eyeOffset DOC_TBA.\\n\\\n *\\n\\\n * @returns {vec4} DOC_TBA.\\n\\\n */\\n\\\nvec4 czm_eyeOffset(vec4 positionEC, vec3 eyeOffset)\\n\\\n{\\n\\\n    // This equation is approximate in x and y.\\n\\\n    vec4 p = positionEC;\\n\\\n    vec4 zEyeOffset = normalize(p) * eyeOffset.z;\\n\\\n    p.xy += eyeOffset.xy + zEyeOffset.xy;\\n\\\n    p.z += zEyeOffset.z;\\n\\\n    return p;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/eyeToWindowCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var eyeToWindowCoordinates = ("/**\\n\\\n * Transforms a position from eye to window coordinates.  The transformation\\n\\\n * from eye to clip coordinates is done using {@link czm_projection}.\\n\\\n * The transform from normalized device coordinates to window coordinates is\\n\\\n * done using {@link czm_viewportTransformation}, which assumes a depth range\\n\\\n * of <code>near = 0</code> and <code>far = 1</code>.\\n\\\n * <br /><br />\\n\\\n * This transform is useful when there is a need to manipulate window coordinates\\n\\\n * in a vertex shader as done by {@link BillboardCollection}.\\n\\\n *\\n\\\n * @name czm_eyeToWindowCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} position The position in eye coordinates to transform.\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in window coordinates.\\n\\\n *\\n\\\n * @see czm_modelToWindowCoordinates\\n\\\n * @see czm_projection\\n\\\n * @see czm_viewportTransformation\\n\\\n * @see BillboardCollection\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n */\\n\\\nvec4 czm_eyeToWindowCoordinates(vec4 positionEC)\\n\\\n{\\n\\\n    vec4 q = czm_projection * positionEC;                        // clip coordinates\\n\\\n    q.xyz /= q.w;                                                // normalized device coordinates\\n\\\n    q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // window coordinates\\n\\\n    return q;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/fastApproximateAtan.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var fastApproximateAtan = ("/**\\n\\\n * Approxiamtes atan over the range [0, 1]. Safe to flip output for negative input.\\n\\\n *\\n\\\n * Based on Michal Drobot\'s approximation from ShaderFastLibs, which in turn is based on\\n\\\n * \\"Efficient approximations for the arctangent function,\\" Rajan, S. Sichun Wang Inkol, R. Joyal, A., May 2006.\\n\\\n * Adapted from ShaderFastLibs under MIT License.\\n\\\n *\\n\\\n * Chosen for the following characteristics over range [0, 1]:\\n\\\n * - basically no error at 0 and 1, important for getting around range limit (naive atan2 via atan requires infinite range atan)\\n\\\n * - no visible artifacts from first-derivative discontinuities, unlike latitude via range-reduced sqrt asin approximations (at equator)\\n\\\n *\\n\\\n * The original code is x * (-0.1784 * abs(x) - 0.0663 * x * x + 1.0301);\\n\\\n * Removed the abs() in here because it isn\'t needed, the input range is guaranteed as [0, 1] by how we\'re approximating atan2.\\n\\\n *\\n\\\n * @name czm_fastApproximateAtan\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} x Value between 0 and 1 inclusive.\\n\\\n *\\n\\\n * @returns {float} Approximation of atan(x)\\n\\\n */\\n\\\nfloat czm_fastApproximateAtan(float x) {\\n\\\n    return x * (-0.1784 * x - 0.0663 * x * x + 1.0301);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Approximation of atan2.\\n\\\n *\\n\\\n * Range reduction math based on nvidia\'s cg reference implementation for atan2: http://developer.download.nvidia.com/cg/atan2.html\\n\\\n * However, we replaced their atan curve with Michael Drobot\'s (see above).\\n\\\n *\\n\\\n * @name czm_fastApproximateAtan\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} x Value between -1 and 1 inclusive.\\n\\\n * @param {float} y Value between -1 and 1 inclusive.\\n\\\n *\\n\\\n * @returns {float} Approximation of atan2(x, y)\\n\\\n */\\n\\\nfloat czm_fastApproximateAtan(float x, float y) {\\n\\\n    // atan approximations are usually only reliable over [-1, 1], or, in our case, [0, 1] due to modifications.\\n\\\n    // So range-reduce using abs and by flipping whether x or y is on top.\\n\\\n    float t = abs(x); // t used as swap and atan result.\\n\\\n    float opposite = abs(y);\\n\\\n    float adjacent = max(t, opposite);\\n\\\n    opposite = min(t, opposite);\\n\\\n\\n\\\n    t = czm_fastApproximateAtan(opposite / adjacent);\\n\\\n\\n\\\n    // Undo range reduction\\n\\\n    t = czm_branchFreeTernary(abs(y) > abs(x), czm_piOverTwo - t, t);\\n\\\n    t = czm_branchFreeTernary(x < 0.0, czm_pi - t, t);\\n\\\n    t = czm_branchFreeTernary(y < 0.0, -t, t);\\n\\\n    return t;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/fog.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var fog = ("/**\\n\\\n * Gets the color with fog at a distance from the camera.\\n\\\n *\\n\\\n * @name czm_fog\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} distanceToCamera The distance to the camera in meters.\\n\\\n * @param {vec3} color The original color.\\n\\\n * @param {vec3} fogColor The color of the fog.\\n\\\n *\\n\\\n * @returns {vec3} The color adjusted for fog at the distance from the camera.\\n\\\n */\\n\\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor)\\n\\\n{\\n\\\n    float scalar = distanceToCamera * czm_fogDensity;\\n\\\n    float fog = 1.0 - exp(-(scalar * scalar));\\n\\\n    return mix(color, fogColor, fog);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Gets the color with fog at a distance from the camera.\\n\\\n *\\n\\\n * @name czm_fog\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} distanceToCamera The distance to the camera in meters.\\n\\\n * @param {vec3} color The original color.\\n\\\n * @param {vec3} fogColor The color of the fog.\\n\\\n * @param {float} fogModifierConstant A constant to modify the appearance of fog.\\n\\\n *\\n\\\n * @returns {vec3} The color adjusted for fog at the distance from the camera.\\n\\\n */\\n\\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor, float fogModifierConstant)\\n\\\n{\\n\\\n    float scalar = distanceToCamera * czm_fogDensity;\\n\\\n    float fog = 1.0 - exp(-((fogModifierConstant * scalar + fogModifierConstant) * (scalar * (1.0 + fogModifierConstant))));\\n\\\n    return mix(color, fogColor, fog);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/gammaCorrect.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var gammaCorrect = ("/**\\n\\\n * Converts a color from RGB space to linear space.\\n\\\n *\\n\\\n * @name czm_gammaCorrect\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} color The color in RGB space.\\n\\\n * @returns {vec3} The color in linear space.\\n\\\n */\\n\\\nvec3 czm_gammaCorrect(vec3 color) {\\n\\\n#ifdef HDR\\n\\\n    color = pow(color, vec3(czm_gamma));\\n\\\n#endif\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_gammaCorrect(vec4 color) {\\n\\\n#ifdef HDR\\n\\\n    color.rgb = pow(color.rgb, vec3(czm_gamma));\\n\\\n#endif\\n\\\n    return color;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/geodeticSurfaceNormal.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var geodeticSurfaceNormal = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_geodeticSurfaceNormal\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionOnEllipsoid DOC_TBA\\n\\\n * @param {vec3} ellipsoidCenter DOC_TBA\\n\\\n * @param {vec3} oneOverEllipsoidRadiiSquared DOC_TBA\\n\\\n * \\n\\\n * @returns {vec3} DOC_TBA.\\n\\\n */\\n\\\nvec3 czm_geodeticSurfaceNormal(vec3 positionOnEllipsoid, vec3 ellipsoidCenter, vec3 oneOverEllipsoidRadiiSquared)\\n\\\n{\\n\\\n    return normalize((positionOnEllipsoid - ellipsoidCenter) * oneOverEllipsoidRadiiSquared);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/getDefaultMaterial.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var getDefaultMaterial = ("/**\\n\\\n * An czm_material with default values. Every material\'s czm_getMaterial\\n\\\n * should use this default material as a base for the material it returns.\\n\\\n * The default normal value is given by materialInput.normalEC.\\n\\\n *\\n\\\n * @name czm_getDefaultMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_materialInput} input The input used to construct the default material.\\n\\\n *\\n\\\n * @returns {czm_material} The default material.\\n\\\n *\\n\\\n * @see czm_materialInput\\n\\\n * @see czm_material\\n\\\n * @see czm_getMaterial\\n\\\n */\\n\\\nczm_material czm_getDefaultMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material;\\n\\\n    material.diffuse = vec3(0.0);\\n\\\n    material.specular = 0.0;\\n\\\n    material.shininess = 1.0;\\n\\\n    material.normal = materialInput.normalEC;\\n\\\n    material.emission = vec3(0.0);\\n\\\n    material.alpha = 1.0;\\n\\\n    return material;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/getLambertDiffuse.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var getLambertDiffuse = ("/**\\n\\\n * Calculates the intensity of diffusely reflected light.\\n\\\n *\\n\\\n * @name czm_getLambertDiffuse\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\\n\\\n * @param {vec3} normalEC The surface normal in eye coordinates.\\n\\\n *\\n\\\n * @returns {float} The intensity of the diffuse reflection.\\n\\\n *\\n\\\n * @see czm_phong\\n\\\n *\\n\\\n * @example\\n\\\n * float diffuseIntensity = czm_getLambertDiffuse(lightDirectionEC, normalEC);\\n\\\n * float specularIntensity = czm_getSpecular(lightDirectionEC, toEyeEC, normalEC, 200);\\n\\\n * vec3 color = (diffuseColor * diffuseIntensity) + (specularColor * specularIntensity);\\n\\\n */\\n\\\nfloat czm_getLambertDiffuse(vec3 lightDirectionEC, vec3 normalEC)\\n\\\n{\\n\\\n    return max(dot(lightDirectionEC, normalEC), 0.0);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/getSpecular.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var getSpecular = ("/**\\n\\\n * Calculates the specular intensity of reflected light.\\n\\\n *\\n\\\n * @name czm_getSpecular\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\\n\\\n * @param {vec3} toEyeEC Unit vector pointing to the eye position in eye coordinates.\\n\\\n * @param {vec3} normalEC The surface normal in eye coordinates.\\n\\\n * @param {float} shininess The sharpness of the specular reflection.  Higher values create a smaller, more focused specular highlight.\\n\\\n *\\n\\\n * @returns {float} The intensity of the specular highlight.\\n\\\n *\\n\\\n * @see czm_phong\\n\\\n *\\n\\\n * @example\\n\\\n * float diffuseIntensity = czm_getLambertDiffuse(lightDirectionEC, normalEC);\\n\\\n * float specularIntensity = czm_getSpecular(lightDirectionEC, toEyeEC, normalEC, 200);\\n\\\n * vec3 color = (diffuseColor * diffuseIntensity) + (specularColor * specularIntensity);\\n\\\n */\\n\\\nfloat czm_getSpecular(vec3 lightDirectionEC, vec3 toEyeEC, vec3 normalEC, float shininess)\\n\\\n{\\n\\\n    vec3 toReflectedLight = reflect(-lightDirectionEC, normalEC);\\n\\\n    float specular = max(dot(toReflectedLight, toEyeEC), 0.0);\\n\\\n\\n\\\n    // pow has undefined behavior if both parameters <= 0.\\n\\\n    // Prevent this by making sure shininess is at least czm_epsilon2.\\n\\\n    return pow(specular, max(shininess, czm_epsilon2));\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/getWaterNoise.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var getWaterNoise = ("/**\\n\\\n * @private\\n\\\n */\\n\\\nvec4 czm_getWaterNoise(sampler2D normalMap, vec2 uv, float time, float angleInRadians)\\n\\\n{\\n\\\n    float cosAngle = cos(angleInRadians);\\n\\\n    float sinAngle = sin(angleInRadians);\\n\\\n\\n\\\n    // time dependent sampling directions\\n\\\n    vec2 s0 = vec2(1.0/17.0, 0.0);\\n\\\n    vec2 s1 = vec2(-1.0/29.0, 0.0);\\n\\\n    vec2 s2 = vec2(1.0/101.0, 1.0/59.0);\\n\\\n    vec2 s3 = vec2(-1.0/109.0, -1.0/57.0);\\n\\\n\\n\\\n    // rotate sampling direction by specified angle\\n\\\n    s0 = vec2((cosAngle * s0.x) - (sinAngle * s0.y), (sinAngle * s0.x) + (cosAngle * s0.y));\\n\\\n    s1 = vec2((cosAngle * s1.x) - (sinAngle * s1.y), (sinAngle * s1.x) + (cosAngle * s1.y));\\n\\\n    s2 = vec2((cosAngle * s2.x) - (sinAngle * s2.y), (sinAngle * s2.x) + (cosAngle * s2.y));\\n\\\n    s3 = vec2((cosAngle * s3.x) - (sinAngle * s3.y), (sinAngle * s3.x) + (cosAngle * s3.y));\\n\\\n\\n\\\n    vec2 uv0 = (uv/103.0) + (time * s0);\\n\\\n    vec2 uv1 = uv/107.0 + (time * s1) + vec2(0.23);\\n\\\n    vec2 uv2 = uv/vec2(897.0, 983.0) + (time * s2) + vec2(0.51);\\n\\\n    vec2 uv3 = uv/vec2(991.0, 877.0) + (time * s3) + vec2(0.71);\\n\\\n\\n\\\n    uv0 = fract(uv0);\\n\\\n    uv1 = fract(uv1);\\n\\\n    uv2 = fract(uv2);\\n\\\n    uv3 = fract(uv3);\\n\\\n    vec4 noise = (texture2D(normalMap, uv0)) +\\n\\\n                 (texture2D(normalMap, uv1)) +\\n\\\n                 (texture2D(normalMap, uv2)) +\\n\\\n                 (texture2D(normalMap, uv3));\\n\\\n\\n\\\n    // average and scale to between -1 and 1\\n\\\n    return ((noise / 4.0) - 0.5) * 2.0;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/hue.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var hue = ("/**\\n\\\n * Adjusts the hue of a color.\\n\\\n * \\n\\\n * @name czm_hue\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color.\\n\\\n * @param {float} adjustment The amount to adjust the hue of the color in radians.\\n\\\n *\\n\\\n * @returns {float} The color with the hue adjusted.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 adjustHue = czm_hue(color, czm_pi); // The same as czm_hue(color, -czm_pi)\\n\\\n */\\n\\\nvec3 czm_hue(vec3 rgb, float adjustment)\\n\\\n{\\n\\\n    const mat3 toYIQ = mat3(0.299,     0.587,     0.114,\\n\\\n                            0.595716, -0.274453, -0.321263,\\n\\\n                            0.211456, -0.522591,  0.311135);\\n\\\n    const mat3 toRGB = mat3(1.0,  0.9563,  0.6210,\\n\\\n                            1.0, -0.2721, -0.6474,\\n\\\n                            1.0, -1.107,   1.7046);\\n\\\n    \\n\\\n    vec3 yiq = toYIQ * rgb;\\n\\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\n\\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\n\\\n    \\n\\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\n\\\n    return toRGB * color;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/inverseGamma.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var inverseGamma = ("/**\\n\\\n * Converts a color in linear space to RGB space.\\n\\\n *\\n\\\n * @name czm_inverseGamma\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} color The color in linear space.\\n\\\n * @returns {vec3} The color in RGB space.\\n\\\n */\\n\\\nvec3 czm_inverseGamma(vec3 color) {\\n\\\n    return pow(color, vec3(1.0 / czm_gamma));\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/isEmpty.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var isEmpty = ("/**\\n\\\n * Determines if a time interval is empty.\\n\\\n *\\n\\\n * @name czm_isEmpty\\n\\\n * @glslFunction \\n\\\n * \\n\\\n * @param {czm_raySegment} interval The interval to test.\\n\\\n * \\n\\\n * @returns {bool} <code>true</code> if the time interval is empty; otherwise, <code>false</code>.\\n\\\n *\\n\\\n * @example\\n\\\n * bool b0 = czm_isEmpty(czm_emptyRaySegment);      // true\\n\\\n * bool b1 = czm_isEmpty(czm_raySegment(0.0, 1.0)); // false\\n\\\n * bool b2 = czm_isEmpty(czm_raySegment(1.0, 1.0)); // false, contains 1.0.\\n\\\n */\\n\\\nbool czm_isEmpty(czm_raySegment interval)\\n\\\n{\\n\\\n    return (interval.stop < 0.0);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/isFull.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var isFull = ("/**\\n\\\n * Determines if a time interval is empty.\\n\\\n *\\n\\\n * @name czm_isFull\\n\\\n * @glslFunction \\n\\\n * \\n\\\n * @param {czm_raySegment} interval The interval to test.\\n\\\n * \\n\\\n * @returns {bool} <code>true</code> if the time interval is empty; otherwise, <code>false</code>.\\n\\\n *\\n\\\n * @example\\n\\\n * bool b0 = czm_isEmpty(czm_emptyRaySegment);      // true\\n\\\n * bool b1 = czm_isEmpty(czm_raySegment(0.0, 1.0)); // false\\n\\\n * bool b2 = czm_isEmpty(czm_raySegment(1.0, 1.0)); // false, contains 1.0.\\n\\\n */\\n\\\nbool czm_isFull(czm_raySegment interval)\\n\\\n{\\n\\\n    return (interval.start == 0.0 && interval.stop == czm_infinity);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/latitudeToWebMercatorFraction.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var latitudeToWebMercatorFraction = ("/**\\n\\\n * Computes the fraction of a Web Wercator rectangle at which a given geodetic latitude is located.\\n\\\n *\\n\\\n * @name czm_latitudeToWebMercatorFraction\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} latitude The geodetic latitude, in radians.\\n\\\n * @param {float} southMercatorY The Web Mercator coordinate of the southern boundary of the rectangle.\\n\\\n * @param {float} oneOverMercatorHeight The total height of the rectangle in Web Mercator coordinates.\\n\\\n *\\n\\\n * @returns {float} The fraction of the rectangle at which the latitude occurs.  If the latitude is the southern\\n\\\n *          boundary of the rectangle, the return value will be zero.  If it is the northern boundary, the return\\n\\\n *          value will be 1.0.  Latitudes in between are mapped according to the Web Mercator projection.\\n\\\n */ \\n\\\nfloat czm_latitudeToWebMercatorFraction(float latitude, float southMercatorY, float oneOverMercatorHeight)\\n\\\n{\\n\\\n    float sinLatitude = sin(latitude);\\n\\\n    float mercatorY = 0.5 * log((1.0 + sinLatitude) / (1.0 - sinLatitude));\\n\\\n    \\n\\\n    return (mercatorY - southMercatorY) * oneOverMercatorHeight;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/lineDistance.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var lineDistance = ("/**\\n\\\n * Computes distance from an point in 2D to a line in 2D.\\n\\\n *\\n\\\n * @name czm_lineDistance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * param {vec2} point1 A point along the line.\\n\\\n * param {vec2} point2 A point along the line.\\n\\\n * param {vec2} point A point that may or may not be on the line.\\n\\\n * returns {float} The distance from the point to the line.\\n\\\n */\\n\\\nfloat czm_lineDistance(vec2 point1, vec2 point2, vec2 point) {\\n\\\n    return abs((point2.y - point1.y) * point.x - (point2.x - point1.x) * point.y + point2.x * point1.y - point2.y * point1.x) / distance(point2, point1);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/luminance.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var luminance = ("/**\\n\\\n * Computes the luminance of a color. \\n\\\n *\\n\\\n * @name czm_luminance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} rgb The color.\\n\\\n * \\n\\\n * @returns {float} The luminance.\\n\\\n *\\n\\\n * @example\\n\\\n * float light = czm_luminance(vec3(0.0)); // 0.0\\n\\\n * float dark = czm_luminance(vec3(1.0));  // ~1.0 \\n\\\n */\\n\\\nfloat czm_luminance(vec3 rgb)\\n\\\n{\\n\\\n    // Algorithm from Chapter 10 of Graphics Shaders.\\n\\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\n\\\n    return dot(rgb, W);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/metersPerPixel.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var metersPerPixel = ("/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when passing in a custom pixel ratio. For example, passing in 1.0 will return meters per native device pixel.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n * @param {float} pixelRatio The scaling factor from pixel space to coordinate space\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC, float pixelRatio)\\n\\\n{\\n\\\n    float width = czm_viewport.z;\\n\\\n    float height = czm_viewport.w;\\n\\\n    float pixelWidth;\\n\\\n    float pixelHeight;\\n\\\n\\n\\\n    float top = czm_frustumPlanes.x;\\n\\\n    float bottom = czm_frustumPlanes.y;\\n\\\n    float left = czm_frustumPlanes.z;\\n\\\n    float right = czm_frustumPlanes.w;\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode2D || czm_orthographicIn3D == 1.0)\\n\\\n    {\\n\\\n        float frustumWidth = right - left;\\n\\\n        float frustumHeight = top - bottom;\\n\\\n        pixelWidth = frustumWidth / width;\\n\\\n        pixelHeight = frustumHeight / height;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float distanceToPixel = -positionEC.z;\\n\\\n        float inverseNear = 1.0 / czm_currentFrustum.x;\\n\\\n        float tanTheta = top * inverseNear;\\n\\\n        pixelHeight = 2.0 * distanceToPixel * tanTheta / height;\\n\\\n        tanTheta = right * inverseNear;\\n\\\n        pixelWidth = 2.0 * distanceToPixel * tanTheta / width;\\n\\\n    }\\n\\\n\\n\\\n    return max(pixelWidth, pixelHeight) * pixelRatio;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when scaling by pixel ratio.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC)\\n\\\n{\\n\\\n    return czm_metersPerPixel(positionEC, czm_pixelRatio);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/modelToWindowCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var modelToWindowCoordinates = ("/**\\n\\\n * Transforms a position from model to window coordinates.  The transformation\\n\\\n * from model to clip coordinates is done using {@link czm_modelViewProjection}.\\n\\\n * The transform from normalized device coordinates to window coordinates is\\n\\\n * done using {@link czm_viewportTransformation}, which assumes a depth range\\n\\\n * of <code>near = 0</code> and <code>far = 1</code>.\\n\\\n * <br /><br />\\n\\\n * This transform is useful when there is a need to manipulate window coordinates\\n\\\n * in a vertex shader as done by {@link BillboardCollection}.\\n\\\n * <br /><br />\\n\\\n * This function should not be confused with {@link czm_viewportOrthographic},\\n\\\n * which is an orthographic projection matrix that transforms from window \\n\\\n * coordinates to clip coordinates.\\n\\\n *\\n\\\n * @name czm_modelToWindowCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} position The position in model coordinates to transform.\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in window coordinates.\\n\\\n *\\n\\\n * @see czm_eyeToWindowCoordinates\\n\\\n * @see czm_modelViewProjection\\n\\\n * @see czm_viewportTransformation\\n\\\n * @see czm_viewportOrthographic\\n\\\n * @see BillboardCollection\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 positionWC = czm_modelToWindowCoordinates(positionMC);\\n\\\n */\\n\\\nvec4 czm_modelToWindowCoordinates(vec4 position)\\n\\\n{\\n\\\n    vec4 q = czm_modelViewProjection * position;                // clip coordinates\\n\\\n    q.xyz /= q.w;                                                // normalized device coordinates\\n\\\n    q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // window coordinates\\n\\\n    return q;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/multiplyWithColorBalance.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var multiplyWithColorBalance = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_multiplyWithColorBalance\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvec3 czm_multiplyWithColorBalance(vec3 left, vec3 right)\\n\\\n{\\n\\\n    // Algorithm from Chapter 10 of Graphics Shaders.\\n\\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\n\\\n    \\n\\\n    vec3 target = left * right;\\n\\\n    float leftLuminance = dot(left, W);\\n\\\n    float rightLuminance = dot(right, W);\\n\\\n    float targetLuminance = dot(target, W);\\n\\\n    \\n\\\n    return ((leftLuminance + rightLuminance) / (2.0 * targetLuminance)) * target;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/nearFarScalar.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var nearFarScalar = ("/**\\n\\\n * Computes a value that scales with distance.  The scaling is clamped at the near and\\n\\\n * far distances, and does not extrapolate.  This function works with the\\n\\\n * {@link NearFarScalar} JavaScript class.\\n\\\n *\\n\\\n * @name czm_nearFarScalar\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} nearFarScalar A vector with 4 components: Near distance (x), Near value (y), Far distance (z), Far value (w).\\n\\\n * @param {float} cameraDistSq The square of the current distance from the camera.\\n\\\n *\\n\\\n * @returns {float} The value at this distance.\\n\\\n */\\n\\\nfloat czm_nearFarScalar(vec4 nearFarScalar, float cameraDistSq)\\n\\\n{\\n\\\n    float valueAtMin = nearFarScalar.y;\\n\\\n    float valueAtMax = nearFarScalar.w;\\n\\\n    float nearDistanceSq = nearFarScalar.x * nearFarScalar.x;\\n\\\n    float farDistanceSq = nearFarScalar.z * nearFarScalar.z;\\n\\\n\\n\\\n    float t = (cameraDistSq - nearDistanceSq) / (farDistanceSq - nearDistanceSq);\\n\\\n\\n\\\n    t = pow(clamp(t, 0.0, 1.0), 0.2);\\n\\\n\\n\\\n    return mix(valueAtMin, valueAtMax, t);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/octDecode.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var octDecode = (" /**\\n\\\n  * Decodes a unit-length vector in \'oct\' encoding to a normalized 3-component Cartesian vector.\\n\\\n  * The \'oct\' encoding is described in \\"A Survey of Efficient Representations of Independent Unit Vectors\\",\\n\\\n  * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n  *\\n\\\n  * @name czm_octDecode\\n\\\n  * @param {vec2} encoded The oct-encoded, unit-length vector\\n\\\n  * @param {float} range The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\\n\\\n  * @returns {vec3} The decoded and normalized vector\\n\\\n  */\\n\\\n  vec3 czm_octDecode(vec2 encoded, float range)\\n\\\n  {\\n\\\n      if (encoded.x == 0.0 && encoded.y == 0.0) {\\n\\\n          return vec3(0.0, 0.0, 0.0);\\n\\\n      }\\n\\\n\\n\\\n     encoded = encoded / range * 2.0 - 1.0;\\n\\\n     vec3 v = vec3(encoded.x, encoded.y, 1.0 - abs(encoded.x) - abs(encoded.y));\\n\\\n     if (v.z < 0.0)\\n\\\n     {\\n\\\n         v.xy = (1.0 - abs(v.yx)) * czm_signNotZero(v.xy);\\n\\\n     }\\n\\\n\\n\\\n     return normalize(v);\\n\\\n  }\\n\\\n\\n\\\n/**\\n\\\n * Decodes a unit-length vector in \'oct\' encoding to a normalized 3-component Cartesian vector.\\n\\\n * The \'oct\' encoding is described in \\"A Survey of Efficient Representations of Independent Unit Vectors\\",\\n\\\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n *\\n\\\n * @name czm_octDecode\\n\\\n * @param {vec2} encoded The oct-encoded, unit-length vector\\n\\\n * @returns {vec3} The decoded and normalized vector\\n\\\n */\\n\\\n vec3 czm_octDecode(vec2 encoded)\\n\\\n {\\n\\\n    return czm_octDecode(encoded, 255.0);\\n\\\n }\\n\\\n\\n\\\n /**\\n\\\n * Decodes a unit-length vector in \'oct\' encoding packed into a floating-point number to a normalized 3-component Cartesian vector.\\n\\\n * The \'oct\' encoding is described in \\"A Survey of Efficient Representations of Independent Unit Vectors\\",\\n\\\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n *\\n\\\n * @name czm_octDecode\\n\\\n * @param {float} encoded The oct-encoded, unit-length vector\\n\\\n * @returns {vec3} The decoded and normalized vector\\n\\\n */\\n\\\n vec3 czm_octDecode(float encoded)\\n\\\n {\\n\\\n    float temp = encoded / 256.0;\\n\\\n    float x = floor(temp);\\n\\\n    float y = (temp - x) * 256.0;\\n\\\n    return czm_octDecode(vec2(x, y));\\n\\\n }\\n\\\n\\n\\\n/**\\n\\\n * Decodes three unit-length vectors in \'oct\' encoding packed into two floating-point numbers to normalized 3-component Cartesian vectors.\\n\\\n * The \'oct\' encoding is described in \\"A Survey of Efficient Representations of Independent Unit Vectors\\",\\n\\\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n *\\n\\\n * @name czm_octDecode\\n\\\n * @param {vec2} encoded The packed oct-encoded, unit-length vectors.\\n\\\n * @param {vec3} vector1 One decoded and normalized vector.\\n\\\n * @param {vec3} vector2 One decoded and normalized vector.\\n\\\n * @param {vec3} vector3 One decoded and normalized vector.\\n\\\n */\\n\\\n  void czm_octDecode(vec2 encoded, out vec3 vector1, out vec3 vector2, out vec3 vector3)\\n\\\n {\\n\\\n    float temp = encoded.x / 65536.0;\\n\\\n    float x = floor(temp);\\n\\\n    float encodedFloat1 = (temp - x) * 65536.0;\\n\\\n\\n\\\n    temp = encoded.y / 65536.0;\\n\\\n    float y = floor(temp);\\n\\\n    float encodedFloat2 = (temp - y) * 65536.0;\\n\\\n\\n\\\n    vector1 = czm_octDecode(encodedFloat1);\\n\\\n    vector2 = czm_octDecode(encodedFloat2);\\n\\\n    vector3 = czm_octDecode(vec2(x, y));\\n\\\n }\\n\\\n\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/packDepth.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var packDepth = ("/**\\n\\\n * Packs a depth value into a vec3 that can be represented by unsigned bytes.\\n\\\n *\\n\\\n * @name czm_packDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} depth The floating-point depth.\\n\\\n * @returns {vec3} The packed depth.\\n\\\n */\\n\\\nvec4 czm_packDepth(float depth)\\n\\\n{\\n\\\n    // See Aras Pranckevičius\' post Encoding Floats to RGBA\\n\\\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\\n\\\n    vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\\n\\\n    enc = fract(enc);\\n\\\n    enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\\n\\\n    return enc;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/pbrLighting.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var pbrLighting = ("vec3 lambertianDiffuse(vec3 diffuseColor)\\n\\\n{\\n\\\n    return diffuseColor / czm_pi;\\n\\\n}\\n\\\n\\n\\\nvec3 fresnelSchlick2(vec3 f0, vec3 f90, float VdotH)\\n\\\n{\\n\\\n    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\\n\\\n}\\n\\\n\\n\\\nfloat smithVisibilityG1(float NdotV, float roughness)\\n\\\n{\\n\\\n    // this is the k value for direct lighting.\\n\\\n    // for image based lighting it will be roughness^2 / 2\\n\\\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\\n\\\n    return NdotV / (NdotV * (1.0 - k) + k);\\n\\\n}\\n\\\n\\n\\\nfloat smithVisibilityGGX(float roughness, float NdotL, float NdotV)\\n\\\n{\\n\\\n    return (\\n\\\n        smithVisibilityG1(NdotL, roughness) *\\n\\\n        smithVisibilityG1(NdotV, roughness)\\n\\\n    );\\n\\\n}\\n\\\n\\n\\\nfloat GGX(float roughness, float NdotH)\\n\\\n{\\n\\\n    float roughnessSquared = roughness * roughness;\\n\\\n    float f = (NdotH * roughnessSquared - NdotH) * NdotH + 1.0;\\n\\\n    return roughnessSquared / (czm_pi * f * f);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Compute the diffuse and specular contributions using physically based\\n\\\n * rendering. This function only handles direct lighting.\\n\\\n * <p>\\n\\\n * This function only handles the lighting calculations. Metallic/roughness\\n\\\n * and specular/glossy must be handled separately. See {@czm_pbrMetallicRoughnessMaterial}, {@czm_pbrSpecularGlossinessMaterial} and {@czm_defaultPbrMaterial}\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_pbrlighting\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position of the fragment in eye coordinates\\n\\\n * @param {vec3} normalEC The surface normal in eye coordinates\\n\\\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\\n\\\n * @param {vec3} lightColorHdr radiance of the light source. This is a HDR value.\\n\\\n * @param {czm_pbrParameters} The computed PBR parameters.\\n\\\n * @return {vec3} The computed HDR color\\n\\\n *\\n\\\n * @example\\n\\\n * czm_pbrParameters pbrParameters = czm_pbrMetallicRoughnessMaterial(\\n\\\n *  baseColor,\\n\\\n *  metallic,\\n\\\n *  roughness\\n\\\n * );\\n\\\n * vec3 color = czm_pbrlighting(\\n\\\n *  positionEC,\\n\\\n *  normalEC,\\n\\\n *  lightDirectionEC,\\n\\\n *  lightColorHdr,\\n\\\n *  pbrParameters);\\n\\\n */\\n\\\nvec3 czm_pbrLighting(\\n\\\n    vec3 positionEC,\\n\\\n    vec3 normalEC,\\n\\\n    vec3 lightDirectionEC,\\n\\\n    vec3 lightColorHdr,\\n\\\n    czm_pbrParameters pbrParameters\\n\\\n)\\n\\\n{\\n\\\n    vec3 v = -normalize(positionEC);\\n\\\n    vec3 l = normalize(lightDirectionEC);\\n\\\n    vec3 h = normalize(v + l);\\n\\\n    vec3 n = normalEC;\\n\\\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n\\\n    float NdotV = abs(dot(n, v)) + 0.001;\\n\\\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n\\\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n\\\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n\\\n\\n\\\n    vec3 f0 = pbrParameters.f0;\\n\\\n    float reflectance = max(max(f0.r, f0.g), f0.b);\\n\\\n    vec3 f90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\\n\\\n    vec3 F = fresnelSchlick2(f0, f90, VdotH);\\n\\\n\\n\\\n    float alpha = pbrParameters.roughness;\\n\\\n    float G = smithVisibilityGGX(alpha, NdotL, NdotV);\\n\\\n    float D = GGX(alpha, NdotH);\\n\\\n    vec3 specularContribution = F * G * D / (4.0 * NdotL * NdotV);\\n\\\n\\n\\\n    vec3 diffuseColor = pbrParameters.diffuseColor;\\n\\\n    // F here represents the specular contribution\\n\\\n    vec3 diffuseContribution = (1.0 - F) * lambertianDiffuse(diffuseColor);\\n\\\n\\n\\\n    // Lo = (diffuse + specular) * Li * NdotL\\n\\\n    return (diffuseContribution + specularContribution) * NdotL * lightColorHdr;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var pbrMetallicRoughnessMaterial = ("/**\\n\\\n * Compute parameters for physically based rendering using the\\n\\\n * metallic/roughness workflow. All inputs are linear; sRGB texture values must\\n\\\n * be decoded beforehand\\n\\\n *\\n\\\n * @name czm_pbrMetallicRoughnessMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} baseColor For dielectrics, this is the base color. For metals, this is the f0 value (reflectance at normal incidence)\\n\\\n * @param {float} metallic 0.0 indicates dielectric. 1.0 indicates metal. Values in between are allowed (e.g. to model rust or dirt);\\n\\\n * @param {float} roughness A value between 0.0 and 1.0\\n\\\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_pbrMetallicRoughnessMaterial(\\n\\\n    vec3 baseColor,\\n\\\n    float metallic,\\n\\\n    float roughness\\n\\\n) \\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n\\n\\\n    // roughness is authored as perceptual roughness\\n\\\n    // square it to get material roughness\\n\\\n    roughness = clamp(roughness, 0.0, 1.0);\\n\\\n    results.roughness = roughness * roughness;\\n\\\n\\n\\\n    // dielectrics us f0 = 0.04, metals use albedo as f0\\n\\\n    metallic = clamp(metallic, 0.0, 1.0);\\n\\\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\\n\\\n    vec3 f0 = mix(REFLECTANCE_DIELECTRIC, baseColor, metallic);\\n\\\n    results.f0 = f0;\\n\\\n\\n\\\n    // diffuse only applies to dielectrics.\\n\\\n    results.diffuseColor = baseColor * (1.0 - f0) * (1.0 - metallic);\\n\\\n\\n\\\n    return results;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/pbrSpecularGlossinessMaterial.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var pbrSpecularGlossinessMaterial = ("/**\\n\\\n * Compute parameters for physically based rendering using the\\n\\\n * specular/glossy workflow. All inputs are linear; sRGB texture values must\\n\\\n * be decoded beforehand\\n\\\n *\\n\\\n * @name czm_pbrSpecularGlossinessMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} diffuse The diffuse color for dielectrics (non-metals)\\n\\\n * @param {vec3} specular The reflectance at normal incidence (f0)\\n\\\n * @param {float} glossiness A number from 0.0 to 1.0 indicating how smooth the surface is.\\n\\\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_pbrSpecularGlossinessMaterial(\\n\\\n    vec3 diffuse,\\n\\\n    vec3 specular,\\n\\\n    float glossiness\\n\\\n) \\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n\\n\\\n    // glossiness is the opposite of roughness, but easier for artists to use.\\n\\\n    float roughness = 1.0 - glossiness;\\n\\\n    results.roughness = roughness * roughness;\\n\\\n\\n\\\n    results.diffuseColor = diffuse * (1.0 - max(max(specular.r, specular.g), specular.b));\\n\\\n    results.f0 = specular;\\n\\\n\\n\\\n    return results;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/phong.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var phong = ("float czm_private_getLambertDiffuseOfMaterial(vec3 lightDirectionEC, czm_material material)\\n\\\n{\\n\\\n    return czm_getLambertDiffuse(lightDirectionEC, material.normal);\\n\\\n}\\n\\\n\\n\\\nfloat czm_private_getSpecularOfMaterial(vec3 lightDirectionEC, vec3 toEyeEC, czm_material material)\\n\\\n{\\n\\\n    return czm_getSpecular(lightDirectionEC, toEyeEC, material.normal, material.shininess);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes a color using the Phong lighting model.\\n\\\n *\\n\\\n * @name czm_phong\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} toEye A normalized vector from the fragment to the eye in eye coordinates.\\n\\\n * @param {czm_material} material The fragment\'s material.\\n\\\n *\\n\\\n * @returns {vec4} The computed color.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 positionToEyeEC = // ...\\n\\\n * czm_material material = // ...\\n\\\n * vec3 lightDirectionEC = // ...\\n\\\n * gl_FragColor = czm_phong(normalize(positionToEyeEC), material, lightDirectionEC);\\n\\\n *\\n\\\n * @see czm_getMaterial\\n\\\n */\\n\\\nvec4 czm_phong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    // Diffuse from directional light sources at eye (for top-down)\\n\\\n    float diffuse = czm_private_getLambertDiffuseOfMaterial(vec3(0.0, 0.0, 1.0), material);\\n\\\n    if (czm_sceneMode == czm_sceneMode3D) {\\n\\\n        // (and horizon views in 3D)\\n\\\n        diffuse += czm_private_getLambertDiffuseOfMaterial(vec3(0.0, 1.0, 0.0), material);\\n\\\n    }\\n\\\n\\n\\\n    float specular = czm_private_getSpecularOfMaterial(lightDirectionEC, toEye, material);\\n\\\n\\n\\\n    // Temporary workaround for adding ambient.\\n\\\n    vec3 materialDiffuse = material.diffuse * 0.5;\\n\\\n\\n\\\n    vec3 ambient = materialDiffuse;\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += materialDiffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n\\n\\\nvec4 czm_private_phong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    float diffuse = czm_private_getLambertDiffuseOfMaterial(lightDirectionEC, material);\\n\\\n    float specular = czm_private_getSpecularOfMaterial(lightDirectionEC, toEye, material);\\n\\\n\\n\\\n    vec3 ambient = vec3(0.0);\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += material.diffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/planeDistance.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var planeDistance = ("/**\\n\\\n * Computes distance from a point to a plane.\\n\\\n *\\n\\\n * @name czm_planeDistance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * param {vec4} plane A Plane in Hessian Normal Form. See Plane.js\\n\\\n * param {vec3} point A point in the same space as the plane.\\n\\\n * returns {float} The distance from the point to the plane.\\n\\\n */\\n\\\nfloat czm_planeDistance(vec4 plane, vec3 point) {\\n\\\n    return (dot(plane.xyz, point) + plane.w);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes distance from a point to a plane.\\n\\\n *\\n\\\n * @name czm_planeDistance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * param {vec3} planeNormal Normal for a plane in Hessian Normal Form. See Plane.js\\n\\\n * param {float} planeDistance Distance for a plane in Hessian Normal form. See Plane.js\\n\\\n * param {vec3} point A point in the same space as the plane.\\n\\\n * returns {float} The distance from the point to the plane.\\n\\\n */\\n\\\nfloat czm_planeDistance(vec3 planeNormal, float planeDistance, vec3 point) {\\n\\\n    return (dot(planeNormal, point) + planeDistance);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/pointAlongRay.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var pointAlongRay = ("/**\\n\\\n * Computes the point along a ray at the given time.  <code>time</code> can be positive, negative, or zero.\\n\\\n *\\n\\\n * @name czm_pointAlongRay\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} ray The ray to compute the point along.\\n\\\n * @param {float} time The time along the ray.\\n\\\n * \\n\\\n * @returns {vec3} The point along the ray at the given time.\\n\\\n * \\n\\\n * @example\\n\\\n * czm_ray ray = czm_ray(vec3(0.0), vec3(1.0, 0.0, 0.0)); // origin, direction\\n\\\n * vec3 v = czm_pointAlongRay(ray, 2.0); // (2.0, 0.0, 0.0)\\n\\\n */\\n\\\nvec3 czm_pointAlongRay(czm_ray ray, float time)\\n\\\n{\\n\\\n    return ray.origin + (time * ray.direction);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/rayEllipsoidIntersectionInterval.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var rayEllipsoidIntersectionInterval = ("/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_rayEllipsoidIntersectionInterval\\n\\\n * @glslFunction\\n\\\n */\\n\\\nczm_raySegment czm_rayEllipsoidIntersectionInterval(czm_ray ray, vec3 ellipsoid_center, vec3 ellipsoid_inverseRadii)\\n\\\n{\\n\\\n   // ray and ellipsoid center in eye coordinates.  radii in model coordinates.\\n\\\n    vec3 q = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ray.origin, 1.0)).xyz;\\n\\\n    vec3 w = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ray.direction, 0.0)).xyz;\\n\\\n\\n\\\n    q = q - ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ellipsoid_center, 1.0)).xyz;\\n\\\n\\n\\\n    float q2 = dot(q, q);\\n\\\n    float qw = dot(q, w);\\n\\\n\\n\\\n    if (q2 > 1.0) // Outside ellipsoid.\\n\\\n    {\\n\\\n        if (qw >= 0.0) // Looking outward or tangent (0 intersections).\\n\\\n        {\\n\\\n            return czm_emptyRaySegment;\\n\\\n        }\\n\\\n        else // qw < 0.0.\\n\\\n        {\\n\\\n            float qw2 = qw * qw;\\n\\\n            float difference = q2 - 1.0; // Positively valued.\\n\\\n            float w2 = dot(w, w);\\n\\\n            float product = w2 * difference;\\n\\\n\\n\\\n            if (qw2 < product) // Imaginary roots (0 intersections).\\n\\\n            {\\n\\\n                return czm_emptyRaySegment;\\n\\\n            }\\n\\\n            else if (qw2 > product) // Distinct roots (2 intersections).\\n\\\n            {\\n\\\n                float discriminant = qw * qw - product;\\n\\\n                float temp = -qw + sqrt(discriminant); // Avoid cancellation.\\n\\\n                float root0 = temp / w2;\\n\\\n                float root1 = difference / temp;\\n\\\n                if (root0 < root1)\\n\\\n                {\\n\\\n                    czm_raySegment i = czm_raySegment(root0, root1);\\n\\\n                    return i;\\n\\\n                }\\n\\\n                else\\n\\\n                {\\n\\\n                    czm_raySegment i = czm_raySegment(root1, root0);\\n\\\n                    return i;\\n\\\n                }\\n\\\n            }\\n\\\n            else // qw2 == product.  Repeated roots (2 intersections).\\n\\\n            {\\n\\\n                float root = sqrt(difference / w2);\\n\\\n                czm_raySegment i = czm_raySegment(root, root);\\n\\\n                return i;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    else if (q2 < 1.0) // Inside ellipsoid (2 intersections).\\n\\\n    {\\n\\\n        float difference = q2 - 1.0; // Negatively valued.\\n\\\n        float w2 = dot(w, w);\\n\\\n        float product = w2 * difference; // Negatively valued.\\n\\\n        float discriminant = qw * qw - product;\\n\\\n        float temp = -qw + sqrt(discriminant); // Positively valued.\\n\\\n        czm_raySegment i = czm_raySegment(0.0, temp / w2);\\n\\\n        return i;\\n\\\n    }\\n\\\n    else // q2 == 1.0. On ellipsoid.\\n\\\n    {\\n\\\n        if (qw < 0.0) // Looking inward.\\n\\\n        {\\n\\\n            float w2 = dot(w, w);\\n\\\n            czm_raySegment i = czm_raySegment(0.0, -qw / w2);\\n\\\n            return i;\\n\\\n        }\\n\\\n        else // qw >= 0.0.  Looking outward or tangent.\\n\\\n        {\\n\\\n            return czm_emptyRaySegment;\\n\\\n        }\\n\\\n    }\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/readDepth.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var readDepth = ("float czm_readDepth(sampler2D depthTexture, vec2 texCoords)\\n\\\n{\\n\\\n    return czm_reverseLogDepth(texture2D(depthTexture, texCoords).r);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/readNonPerspective.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var readNonPerspective = ("/**\\n\\\n * Reads a value previously transformed with {@link czm_writeNonPerspective}\\n\\\n * by dividing it by `w`, the value used in the perspective divide.\\n\\\n * This function is intended to be called in a fragment shader to access a\\n\\\n * `varying` that should not be subject to perspective interpolation.\\n\\\n * For example, screen-space texture coordinates. The value should have been\\n\\\n * previously written in the vertex shader with a call to\\n\\\n * {@link czm_writeNonPerspective}.\\n\\\n *\\n\\\n * @name czm_readNonPerspective\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float|vec2|vec3|vec4} value The non-perspective value to be read.\\n\\\n * @param {float} oneOverW One over the perspective divide value, `w`. Usually this is simply `gl_FragCoord.w`.\\n\\\n * @returns {float|vec2|vec3|vec4} The usable value.\\n\\\n */\\n\\\nfloat czm_readNonPerspective(float value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_readNonPerspective(vec2 value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_readNonPerspective(vec3 value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_readNonPerspective(vec4 value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/reverseLogDepth.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var reverseLogDepth = ("float czm_reverseLogDepth(float logZ)\\n\\\n{\\n\\\n#ifdef LOG_DEPTH\\n\\\n    float near = czm_currentFrustum.x;\\n\\\n    float far = czm_currentFrustum.y;\\n\\\n    float log2Depth = logZ * czm_log2FarDepthFromNearPlusOne;\\n\\\n    float depthFromNear = pow(2.0, log2Depth) - 1.0;\\n\\\n    return far * (1.0 - near / (depthFromNear + near)) / (far - near);\\n\\\n#endif\\n\\\n    return logZ;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/sampleOctahedralProjection.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var sampleOctahedralProjection = ("/**\\n\\\n * Samples the 4 neighboring pixels and return the weighted average.\\n\\\n *\\n\\\n * @private\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjectionWithFiltering(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod)\\n\\\n{\\n\\\n    direction /= dot(vec3(1.0), abs(direction));\\n\\\n    vec2 rev = abs(direction.zx) - vec2(1.0);\\n\\\n    vec2 neg = vec2(direction.x < 0.0 ? rev.x : -rev.x,\\n\\\n                    direction.z < 0.0 ? rev.y : -rev.y);\\n\\\n    vec2 uv = direction.y < 0.0 ? neg : direction.xz;\\n\\\n    vec2 coord = 0.5 * uv + vec2(0.5);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    if (lod > 0.0)\\n\\\n    {\\n\\\n        // Each subseqeuent mip level is half the size\\n\\\n        float scale = 1.0 / pow(2.0, lod);\\n\\\n        float offset = ((textureSize.y + 1.0) / textureSize.x);\\n\\\n\\n\\\n        coord.x *= offset;\\n\\\n        coord *= scale;\\n\\\n\\n\\\n        coord.x += offset + pixel.x;\\n\\\n        coord.y += (1.0 - (1.0 / pow(2.0, lod - 1.0))) + pixel.y * (lod - 1.0) * 2.0;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        coord.x *= (textureSize.y / textureSize.x);\\n\\\n    }\\n\\\n\\n\\\n    // Do bilinear filtering\\n\\\n    #ifndef OES_texture_float_linear\\n\\\n        vec3 color1 = texture2D(projectedMap, coord + vec2(0.0, pixel.y)).rgb;\\n\\\n        vec3 color2 = texture2D(projectedMap, coord + vec2(pixel.x, 0.0)).rgb;\\n\\\n        vec3 color3 = texture2D(projectedMap, coord + pixel).rgb;\\n\\\n        vec3 color4 = texture2D(projectedMap, coord).rgb;\\n\\\n\\n\\\n        vec2 texturePosition = coord * textureSize;\\n\\\n\\n\\\n        float fu = fract(texturePosition.x);\\n\\\n        float fv = fract(texturePosition.y);\\n\\\n\\n\\\n        vec3 average1 = mix(color4, color2, fu);\\n\\\n        vec3 average2 = mix(color1, color3, fu);\\n\\\n\\n\\\n        vec3 color = mix(average1, average2, fv);\\n\\\n    #else\\n\\\n        vec3 color = texture2D(projectedMap, coord).rgb;\\n\\\n    #endif\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\\n\\\n/**\\n\\\n * Samples from a cube map that has been projected using an octahedral projection from the given direction.\\n\\\n *\\n\\\n * @name czm_sampleOctahedralProjection\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {sampler2D} projectedMap The texture with the octahedral projected cube map.\\n\\\n * @param {vec2} textureSize The width and height dimensions in pixels of the projected map.\\n\\\n * @param {vec3} direction The normalized direction used to sample the cube map.\\n\\\n * @param {float} lod The level of detail to sample.\\n\\\n * @param {float} maxLod The maximum level of detail.\\n\\\n * @returns {vec3} The color of the cube map at the direction.\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjection(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod, float maxLod) {\\n\\\n    float currentLod = floor(lod + 0.5);\\n\\\n    float nextLod = min(currentLod + 1.0, maxLod);\\n\\\n\\n\\\n    vec3 colorCurrentLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, currentLod);\\n\\\n    vec3 colorNextLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, nextLod);\\n\\\n\\n\\\n    return mix(colorNextLod, colorCurrentLod, nextLod - lod);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/saturation.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var saturation = ("/**\\n\\\n * Adjusts the saturation of a color.\\n\\\n * \\n\\\n * @name czm_saturation\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color.\\n\\\n * @param {float} adjustment The amount to adjust the saturation of the color.\\n\\\n *\\n\\\n * @returns {float} The color with the saturation adjusted.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 greyScale = czm_saturation(color, 0.0);\\n\\\n * vec3 doubleSaturation = czm_saturation(color, 2.0);\\n\\\n */\\n\\\nvec3 czm_saturation(vec3 rgb, float adjustment)\\n\\\n{\\n\\\n    // Algorithm from Chapter 16 of OpenGL Shading Language\\n\\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\n\\\n    vec3 intensity = vec3(dot(rgb, W));\\n\\\n    return mix(intensity, rgb, adjustment);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/shadowDepthCompare.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var shadowDepthCompare = ("\\n\\\nfloat czm_sampleShadowMap(highp samplerCube shadowMap, vec3 d)\\n\\\n{\\n\\\n    return czm_unpackDepth(textureCube(shadowMap, d));\\n\\\n}\\n\\\n\\n\\\nfloat czm_sampleShadowMap(highp sampler2D shadowMap, vec2 uv)\\n\\\n{\\n\\\n#ifdef USE_SHADOW_DEPTH_TEXTURE\\n\\\n    return texture2D(shadowMap, uv).r;\\n\\\n#else\\n\\\n    return czm_unpackDepth(texture2D(shadowMap, uv));\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nfloat czm_shadowDepthCompare(samplerCube shadowMap, vec3 uv, float depth)\\n\\\n{\\n\\\n    return step(depth, czm_sampleShadowMap(shadowMap, uv));\\n\\\n}\\n\\\n\\n\\\nfloat czm_shadowDepthCompare(sampler2D shadowMap, vec2 uv, float depth)\\n\\\n{\\n\\\n    return step(depth, czm_sampleShadowMap(shadowMap, uv));\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/shadowVisibility.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var shadowVisibility = ("\\n\\\nfloat czm_private_shadowVisibility(float visibility, float nDotL, float normalShadingSmooth, float darkness)\\n\\\n{\\n\\\n#ifdef USE_NORMAL_SHADING\\n\\\n#ifdef USE_NORMAL_SHADING_SMOOTH\\n\\\n    float strength = clamp(nDotL / normalShadingSmooth, 0.0, 1.0);\\n\\\n#else\\n\\\n    float strength = step(0.0, nDotL);\\n\\\n#endif\\n\\\n    visibility *= strength;\\n\\\n#endif\\n\\\n\\n\\\n    visibility = max(visibility, darkness);\\n\\\n    return visibility;\\n\\\n}\\n\\\n\\n\\\n#ifdef USE_CUBE_MAP_SHADOW\\n\\\nfloat czm_shadowVisibility(samplerCube shadowMap, czm_shadowParameters shadowParameters)\\n\\\n{\\n\\\n    float depthBias = shadowParameters.depthBias;\\n\\\n    float depth = shadowParameters.depth;\\n\\\n    float nDotL = shadowParameters.nDotL;\\n\\\n    float normalShadingSmooth = shadowParameters.normalShadingSmooth;\\n\\\n    float darkness = shadowParameters.darkness;\\n\\\n    vec3 uvw = shadowParameters.texCoords;\\n\\\n\\n\\\n    depth -= depthBias;\\n\\\n    float visibility = czm_shadowDepthCompare(shadowMap, uvw, depth);\\n\\\n    return czm_private_shadowVisibility(visibility, nDotL, normalShadingSmooth, darkness);\\n\\\n}\\n\\\n#else\\n\\\nfloat czm_shadowVisibility(sampler2D shadowMap, czm_shadowParameters shadowParameters)\\n\\\n{\\n\\\n    float depthBias = shadowParameters.depthBias;\\n\\\n    float depth = shadowParameters.depth;\\n\\\n    float nDotL = shadowParameters.nDotL;\\n\\\n    float normalShadingSmooth = shadowParameters.normalShadingSmooth;\\n\\\n    float darkness = shadowParameters.darkness;\\n\\\n    vec2 uv = shadowParameters.texCoords;\\n\\\n\\n\\\n    depth -= depthBias;\\n\\\n#ifdef USE_SOFT_SHADOWS\\n\\\n    vec2 texelStepSize = shadowParameters.texelStepSize;\\n\\\n    float radius = 1.0;\\n\\\n    float dx0 = -texelStepSize.x * radius;\\n\\\n    float dy0 = -texelStepSize.y * radius;\\n\\\n    float dx1 = texelStepSize.x * radius;\\n\\\n    float dy1 = texelStepSize.y * radius;\\n\\\n    float visibility = (\\n\\\n        czm_shadowDepthCompare(shadowMap, uv, depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, dy0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(0.0, dy0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, dy0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, 0.0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, 0.0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, dy1), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(0.0, dy1), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, dy1), depth)\\n\\\n    ) * (1.0 / 9.0);\\n\\\n#else\\n\\\n    float visibility = czm_shadowDepthCompare(shadowMap, uv, depth);\\n\\\n#endif\\n\\\n\\n\\\n    return czm_private_shadowVisibility(visibility, nDotL, normalShadingSmooth, darkness);\\n\\\n}\\n\\\n#endif\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/signNotZero.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var signNotZero = ("/**\\n\\\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.  This is similar to the GLSL\\n\\\n * built-in function <code>sign</code> except that returns 1.0 instead of 0.0 when the input value is 0.0.\\n\\\n * \\n\\\n * @name czm_signNotZero\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {} value The value for which to determine the sign.\\n\\\n * @returns {} 1.0 if the value is positive or zero, -1.0 if the value is negative.\\n\\\n */\\n\\\nfloat czm_signNotZero(float value)\\n\\\n{\\n\\\n    return value >= 0.0 ? 1.0 : -1.0;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_signNotZero(vec2 value)\\n\\\n{\\n\\\n    return vec2(czm_signNotZero(value.x), czm_signNotZero(value.y));\\n\\\n}\\n\\\n\\n\\\nvec3 czm_signNotZero(vec3 value)\\n\\\n{\\n\\\n    return vec3(czm_signNotZero(value.x), czm_signNotZero(value.y), czm_signNotZero(value.z));\\n\\\n}\\n\\\n\\n\\\nvec4 czm_signNotZero(vec4 value)\\n\\\n{\\n\\\n    return vec4(czm_signNotZero(value.x), czm_signNotZero(value.y), czm_signNotZero(value.z), czm_signNotZero(value.w));\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/sphericalHarmonics.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var sphericalHarmonics = ("/**\\n\\\n * Computes a color from the third order spherical harmonic coefficients and a normalized direction vector.\\n\\\n * <p>\\n\\\n * The order of the coefficients is [L00, L1_1, L10, L11, L2_2, L2_1, L20, L21, L22].\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_sphericalHarmonics\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} normal The normalized direction.\\n\\\n * @param {vec3[9]} coefficients The third order spherical harmonic coefficients.\\n\\\n * @returns {vec3} The color at the direction.\\n\\\n *\\n\\\n * @see https://graphics.stanford.edu/papers/envmap/envmap.pdf\\n\\\n */\\n\\\nvec3 czm_sphericalHarmonics(vec3 normal, vec3 coefficients[9])\\n\\\n{\\n\\\n    vec3 L00 = coefficients[0];\\n\\\n    vec3 L1_1 = coefficients[1];\\n\\\n    vec3 L10 = coefficients[2];\\n\\\n    vec3 L11 = coefficients[3];\\n\\\n    vec3 L2_2 = coefficients[4];\\n\\\n    vec3 L2_1 = coefficients[5];\\n\\\n    vec3 L20 = coefficients[6];\\n\\\n    vec3 L21 = coefficients[7];\\n\\\n    vec3 L22 = coefficients[8];\\n\\\n\\n\\\n    float x = normal.x;\\n\\\n    float y = normal.y;\\n\\\n    float z = normal.z;\\n\\\n\\n\\\n    return\\n\\\n          L00\\n\\\n        + L1_1 * y\\n\\\n        + L10 * z\\n\\\n        + L11 * x\\n\\\n        + L2_2 * (y * x)\\n\\\n        + L2_1 * (y * z)\\n\\\n        + L20 * (3.0 * z * z - 1.0)\\n\\\n        + L21 * (z * x)\\n\\\n        + L22 * (x * x - y * y);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/tangentToEyeSpaceMatrix.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var tangentToEyeSpaceMatrix = ("/**\\n\\\n * Creates a matrix that transforms vectors from tangent space to eye space.\\n\\\n *\\n\\\n * @name czm_tangentToEyeSpaceMatrix\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} normalEC The normal vector in eye coordinates.\\n\\\n * @param {vec3} tangentEC The tangent vector in eye coordinates.\\n\\\n * @param {vec3} bitangentEC The bitangent vector in eye coordinates.\\n\\\n *\\n\\\n * @returns {mat3} The matrix that transforms from tangent space to eye space.\\n\\\n *\\n\\\n * @example\\n\\\n * mat3 tangentToEye = czm_tangentToEyeSpaceMatrix(normalEC, tangentEC, bitangentEC);\\n\\\n * vec3 normal = tangentToEye * texture2D(normalMap, st).xyz;\\n\\\n */\\n\\\nmat3 czm_tangentToEyeSpaceMatrix(vec3 normalEC, vec3 tangentEC, vec3 bitangentEC)\\n\\\n{\\n\\\n    vec3 normal = normalize(normalEC);\\n\\\n    vec3 tangent = normalize(tangentEC);\\n\\\n    vec3 bitangent = normalize(bitangentEC);\\n\\\n    return mat3(tangent.x  , tangent.y  , tangent.z,\\n\\\n                bitangent.x, bitangent.y, bitangent.z,\\n\\\n                normal.x   , normal.y   , normal.z);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/transformPlane.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var transformPlane = ("/**\\n\\\n * Transforms a plane.\\n\\\n * \\n\\\n * @name czm_transformPlane\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} plane The plane in Hessian Normal Form.\\n\\\n * @param {mat4} transform The inverse-transpose of a transformation matrix.\\n\\\n */\\n\\\nvec4 czm_transformPlane(vec4 plane, mat4 transform) {\\n\\\n    vec4 transformedPlane = transform * plane;\\n\\\n    // Convert the transformed plane to Hessian Normal Form\\n\\\n    float normalMagnitude = length(transformedPlane.xyz);\\n\\\n    return transformedPlane / normalMagnitude;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/translateRelativeToEye.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var translateRelativeToEye = ("/**\\n\\\n * Translates a position (or any <code>vec3</code>) that was encoded with {@link EncodedCartesian3},\\n\\\n * and then provided to the shader as separate <code>high</code> and <code>low</code> bits to\\n\\\n * be relative to the eye.  As shown in the example, the position can then be transformed in eye\\n\\\n * or clip coordinates using {@link czm_modelViewRelativeToEye} or {@link czm_modelViewProjectionRelativeToEye},\\n\\\n * respectively.\\n\\\n * <p>\\n\\\n * This technique, called GPU RTE, eliminates jittering artifacts when using large coordinates as\\n\\\n * described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_translateRelativeToEye\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} high The position\'s high bits.\\n\\\n * @param {vec3} low The position\'s low bits.\\n\\\n * @returns {vec3} The position translated to be relative to the camera\'s position.\\n\\\n *\\n\\\n * @example\\n\\\n * attribute vec3 positionHigh;\\n\\\n * attribute vec3 positionLow;\\n\\\n *\\n\\\n * void main()\\n\\\n * {\\n\\\n *   vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n *   gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n * }\\n\\\n *\\n\\\n * @see czm_modelViewRelativeToEye\\n\\\n * @see czm_modelViewProjectionRelativeToEye\\n\\\n * @see czm_computePosition\\n\\\n * @see EncodedCartesian3\\n\\\n */\\n\\\nvec4 czm_translateRelativeToEye(vec3 high, vec3 low)\\n\\\n{\\n\\\n    vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\\n\\\n    vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\\n\\\n\\n\\\n    return vec4(highDifference + lowDifference, 1.0);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/translucentPhong.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var translucentPhong = ("/**\\n\\\n * @private\\n\\\n */\\n\\\nvec4 czm_translucentPhong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    // Diffuse from directional light sources at eye (for top-down and horizon views)\\n\\\n    float diffuse = czm_getLambertDiffuse(vec3(0.0, 0.0, 1.0), material.normal);\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode3D) {\\n\\\n        // (and horizon views in 3D)\\n\\\n        diffuse += czm_getLambertDiffuse(vec3(0.0, 1.0, 0.0), material.normal);\\n\\\n    }\\n\\\n\\n\\\n    diffuse = clamp(diffuse, 0.0, 1.0);\\n\\\n\\n\\\n    float specular = czm_getSpecular(lightDirectionEC, toEye, material.normal, material.shininess);\\n\\\n\\n\\\n    // Temporary workaround for adding ambient.\\n\\\n    vec3 materialDiffuse = material.diffuse * 0.5;\\n\\\n\\n\\\n    vec3 ambient = materialDiffuse;\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += materialDiffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/transpose.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var transpose = ("/**\\n\\\n * Returns the transpose of the matrix.  The input <code>matrix</code> can be\\n\\\n * a <code>mat2</code>, <code>mat3</code>, or <code>mat4</code>.\\n\\\n *\\n\\\n * @name czm_transpose\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {} matrix The matrix to transpose.\\n\\\n *\\n\\\n * @returns {} The transposed matrix.\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declarations\\n\\\n * mat2 czm_transpose(mat2 matrix);\\n\\\n * mat3 czm_transpose(mat3 matrix);\\n\\\n * mat4 czm_transpose(mat4 matrix);\\n\\\n *\\n\\\n * // Transpose a 3x3 rotation matrix to find its inverse.\\n\\\n * mat3 eastNorthUpToEye = czm_eastNorthUpToEyeCoordinates(\\n\\\n *     positionMC, normalEC);\\n\\\n * mat3 eyeToEastNorthUp = czm_transpose(eastNorthUpToEye);\\n\\\n */\\n\\\nmat2 czm_transpose(mat2 matrix)\\n\\\n{\\n\\\n    return mat2(\\n\\\n        matrix[0][0], matrix[1][0],\\n\\\n        matrix[0][1], matrix[1][1]);\\n\\\n}\\n\\\n\\n\\\nmat3 czm_transpose(mat3 matrix)\\n\\\n{\\n\\\n    return mat3(\\n\\\n        matrix[0][0], matrix[1][0], matrix[2][0],\\n\\\n        matrix[0][1], matrix[1][1], matrix[2][1],\\n\\\n        matrix[0][2], matrix[1][2], matrix[2][2]);\\n\\\n}\\n\\\n\\n\\\nmat4 czm_transpose(mat4 matrix)\\n\\\n{\\n\\\n    return mat4(\\n\\\n        matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0],\\n\\\n        matrix[0][1], matrix[1][1], matrix[2][1], matrix[3][1],\\n\\\n        matrix[0][2], matrix[1][2], matrix[2][2], matrix[3][2],\\n\\\n        matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]);\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/unpackDepth.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var unpackDepth = ("/**\\n\\\n * Unpacks a vec4 depth value to a float in [0, 1) range.\\n\\\n *\\n\\\n * @name czm_unpackDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} packedDepth The packed depth.\\n\\\n *\\n\\\n * @returns {float} The floating-point depth in [0, 1) range.\\n\\\n */\\n\\\n float czm_unpackDepth(vec4 packedDepth)\\n\\\n {\\n\\\n    // See Aras Pranckevičius\' post Encoding Floats to RGBA\\n\\\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\\n\\\n    return dot(packedDepth, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\\n\\\n }\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/unpackFloat.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var unpackFloat = ("/**\\n\\\n * Unpack an IEEE 754 single-precision float that is packed as a little-endian unsigned normalized vec4.\\n\\\n *\\n\\\n * @name czm_unpackFloat\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} packedFloat The packed float.\\n\\\n *\\n\\\n * @returns {float} The floating-point depth in arbitrary range.\\n\\\n */\\n\\\nfloat czm_unpackFloat(vec4 packedFloat)\\n\\\n{\\n\\\n    // Convert to [0.0, 255.0] and round to integer\\n\\\n    packedFloat = floor(packedFloat * 255.0 + 0.5);\\n\\\n    float sign = 1.0 - step(128.0, packedFloat[3]) * 2.0;\\n\\\n    float exponent = 2.0 * mod(packedFloat[3], 128.0) + step(128.0, packedFloat[2]) - 127.0;    \\n\\\n    if (exponent == -127.0)\\n\\\n    {\\n\\\n        return 0.0;\\n\\\n    }\\n\\\n    float mantissa = mod(packedFloat[2], 128.0) * 65536.0 + packedFloat[1] * 256.0 + packedFloat[0] + float(0x800000);\\n\\\n    float result = sign * exp2(exponent - 23.0) * mantissa;\\n\\\n    return result;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/vertexLogDepth.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var vertexLogDepth = ("#ifdef LOG_DEPTH\\n\\\n// 1.0 at the near plane, increasing linearly from there.\\n\\\nvarying float v_depthFromNearPlusOne;\\n\\\n#ifdef SHADOW_MAP\\n\\\nvarying vec3 v_logPositionEC;\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nvec4 czm_updatePositionDepth(vec4 coords) {\\n\\\n#if defined(LOG_DEPTH)\\n\\\n\\n\\\n#ifdef SHADOW_MAP\\n\\\n    vec3 logPositionEC = (czm_inverseProjection * coords).xyz;\\n\\\n    v_logPositionEC = logPositionEC;\\n\\\n#endif\\n\\\n\\n\\\n    // With the very high far/near ratios used with the logarithmic depth\\n\\\n    // buffer, floating point rounding errors can cause linear depth values\\n\\\n    // to end up on the wrong side of the far plane, even for vertices that\\n\\\n    // are really nowhere near it. Since we always write a correct logarithmic\\n\\\n    // depth value in the fragment shader anyway, we just need to make sure\\n\\\n    // such errors don\'t cause the primitive to be clipped entirely before\\n\\\n    // we even get to the fragment shader.\\n\\\n    coords.z = clamp(coords.z / coords.w, -1.0, 1.0) * coords.w;\\n\\\n#endif\\n\\\n\\n\\\n    return coords;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Writes the logarithmic depth to gl_Position using the already computed gl_Position.\\n\\\n *\\n\\\n * @name czm_vertexLogDepth\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid czm_vertexLogDepth()\\n\\\n{\\n\\\n#ifdef LOG_DEPTH\\n\\\n    v_depthFromNearPlusOne = (gl_Position.w - czm_currentFrustum.x) + 1.0;\\n\\\n    gl_Position = czm_updatePositionDepth(gl_Position);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Writes the logarithmic depth to gl_Position using the provided clip coordinates.\\n\\\n * <p>\\n\\\n * An example use case for this function would be moving the vertex in window coordinates\\n\\\n * before converting back to clip coordinates. Use the original vertex clip coordinates.\\n\\\n * </p>\\n\\\n * @name czm_vertexLogDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} clipCoords The vertex in clip coordinates.\\n\\\n *\\n\\\n * @example\\n\\\n * czm_vertexLogDepth(czm_projection * vec4(positionEyeCoordinates, 1.0));\\n\\\n */\\n\\\nvoid czm_vertexLogDepth(vec4 clipCoords)\\n\\\n{\\n\\\n#ifdef LOG_DEPTH\\n\\\n    v_depthFromNearPlusOne = (clipCoords.w - czm_currentFrustum.x) + 1.0;\\n\\\n    czm_updatePositionDepth(clipCoords);\\n\\\n#endif\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/windowToEyeCoordinates.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var windowToEyeCoordinates = ("/**\\n\\\n * Transforms a position from window to eye coordinates.\\n\\\n * The transform from window to normalized device coordinates is done using components\\n\\\n * of (@link czm_viewport} and {@link czm_viewportTransformation} instead of calculating\\n\\\n * the inverse of <code>czm_viewportTransformation</code>. The transformation from\\n\\\n * normalized device coordinates to clip coordinates is done using <code>fragmentCoordinate.w</code>,\\n\\\n * which is expected to be the scalar used in the perspective divide. The transformation\\n\\\n * from clip to eye coordinates is done using {@link czm_inverseProjection}.\\n\\\n *\\n\\\n * @name czm_windowToEyeCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} fragmentCoordinate The position in window coordinates to transform.\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in eye coordinates.\\n\\\n *\\n\\\n * @see czm_modelToWindowCoordinates\\n\\\n * @see czm_eyeToWindowCoordinates\\n\\\n * @see czm_inverseProjection\\n\\\n * @see czm_viewport\\n\\\n * @see czm_viewportTransformation\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 positionEC = czm_windowToEyeCoordinates(gl_FragCoord);\\n\\\n */\\n\\\nvec4 czm_windowToEyeCoordinates(vec4 fragmentCoordinate)\\n\\\n{\\n\\\n    // Reconstruct NDC coordinates\\n\\\n    float x = 2.0 * (fragmentCoordinate.x - czm_viewport.x) / czm_viewport.z - 1.0;\\n\\\n    float y = 2.0 * (fragmentCoordinate.y - czm_viewport.y) / czm_viewport.w - 1.0;\\n\\\n    float z = (fragmentCoordinate.z - czm_viewportTransformation[3][2]) / czm_viewportTransformation[2][2];\\n\\\n    vec4 q = vec4(x, y, z, 1.0);\\n\\\n\\n\\\n    // Reverse the perspective division to obtain clip coordinates.\\n\\\n    q /= fragmentCoordinate.w;\\n\\\n\\n\\\n    // Reverse the projection transformation to obtain eye coordinates.\\n\\\n    if (!(czm_inverseProjection == mat4(0.0))) // IE and Edge sometimes do something weird with != between mat4s\\n\\\n    {\\n\\\n        q = czm_inverseProjection * q;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float top = czm_frustumPlanes.x;\\n\\\n        float bottom = czm_frustumPlanes.y;\\n\\\n        float left = czm_frustumPlanes.z;\\n\\\n        float right = czm_frustumPlanes.w;\\n\\\n\\n\\\n        float near = czm_currentFrustum.x;\\n\\\n        float far = czm_currentFrustum.y;\\n\\\n\\n\\\n        q.x = (q.x * (right - left) + left + right) * 0.5;\\n\\\n        q.y = (q.y * (top - bottom) + bottom + top) * 0.5;\\n\\\n        q.z = (q.z * (near - far) - near - far) * 0.5;\\n\\\n        q.w = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    return q;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Transforms a position given as window x/y and a depth or a log depth from window to eye coordinates.\\n\\\n * This function produces more accurate results for window positions with log depth than\\n\\\n * conventionally unpacking the log depth using czm_reverseLogDepth and using the standard version\\n\\\n * of czm_windowToEyeCoordinates.\\n\\\n *\\n\\\n * @name czm_windowToEyeCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec2} fragmentCoordinateXY The XY position in window coordinates to transform.\\n\\\n * @param {float} depthOrLogDepth A depth or log depth for the fragment.\\n\\\n *\\n\\\n * @see czm_modelToWindowCoordinates\\n\\\n * @see czm_eyeToWindowCoordinates\\n\\\n * @see czm_inverseProjection\\n\\\n * @see czm_viewport\\n\\\n * @see czm_viewportTransformation\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in eye coordinates.\\n\\\n */\\n\\\nvec4 czm_windowToEyeCoordinates(vec2 fragmentCoordinateXY, float depthOrLogDepth)\\n\\\n{\\n\\\n    // See reverseLogDepth.glsl. This is separate to re-use the pow.\\n\\\n#ifdef LOG_DEPTH\\n\\\n    float near = czm_currentFrustum.x;\\n\\\n    float far = czm_currentFrustum.y;\\n\\\n    float log2Depth = depthOrLogDepth * czm_log2FarDepthFromNearPlusOne;\\n\\\n    float depthFromNear = pow(2.0, log2Depth) - 1.0;\\n\\\n    float depthFromCamera = depthFromNear + near;\\n\\\n    vec4 windowCoord = vec4(fragmentCoordinateXY, far * (1.0 - near / depthFromCamera) / (far - near), 1.0);\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(windowCoord);\\n\\\n    eyeCoordinate.w = 1.0 / depthFromCamera; // Better precision\\n\\\n    return eyeCoordinate;\\n\\\n#else\\n\\\n    vec4 windowCoord = vec4(fragmentCoordinateXY, depthOrLogDepth, 1.0);\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(windowCoord);\\n\\\n#endif\\n\\\n    return eyeCoordinate;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/writeDepthClamp.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var writeDepthClamp = ("// emulated noperspective\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\nvarying float v_WindowZ;\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Emulates GL_DEPTH_CLAMP. Clamps a fragment to the near and far plane\\n\\\n * by writing the fragment\'s depth. See czm_depthClamp for more details.\\n\\\n * <p>\\n\\\n * The shader must enable the GL_EXT_frag_depth extension.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_writeDepthClamp\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @example\\n\\\n * gl_FragColor = color;\\n\\\n * czm_writeDepthClamp();\\n\\\n *\\n\\\n * @see czm_depthClamp\\n\\\n */\\n\\\nvoid czm_writeDepthClamp()\\n\\\n{\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\n    gl_FragDepthEXT = clamp(v_WindowZ * gl_FragCoord.w, 0.0, 1.0);\\n\\\n#endif\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/writeLogDepth.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var writeLogDepth = ("#ifdef LOG_DEPTH\\n\\\nvarying float v_depthFromNearPlusOne;\\n\\\n\\n\\\n#ifdef POLYGON_OFFSET\\n\\\nuniform vec2 u_polygonOffset;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Writes the fragment depth to the logarithmic depth buffer.\\n\\\n * <p>\\n\\\n * Use this when the vertex shader does not call {@link czm_vertexlogDepth}, for example, when\\n\\\n * ray-casting geometry using a full screen quad.\\n\\\n * </p>\\n\\\n * @name czm_writeLogDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} depth The depth coordinate, where 1.0 is on the near plane and\\n\\\n *                      depth increases in eye-space units from there\\n\\\n *\\n\\\n * @example\\n\\\n * czm_writeLogDepth((czm_projection * v_positionEyeCoordinates).w + 1.0);\\n\\\n */\\n\\\nvoid czm_writeLogDepth(float depth)\\n\\\n{\\n\\\n#if defined(GL_EXT_frag_depth) && defined(LOG_DEPTH)\\n\\\n    // Discard the vertex if it\'s not between the near and far planes.\\n\\\n    // We allow a bit of epsilon on the near plane comparison because a 1.0\\n\\\n    // from the vertex shader (indicating the vertex should be _on_ the near\\n\\\n    // plane) will not necessarily come here as exactly 1.0.\\n\\\n    if (depth <= 0.9999999 || depth > czm_farDepthFromNearPlusOne) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n#ifdef POLYGON_OFFSET\\n\\\n    // Polygon offset: m * factor + r * units\\n\\\n    float factor = u_polygonOffset[0];\\n\\\n    float units = u_polygonOffset[1];\\n\\\n\\n\\\n    // If we can\'t compute derivatives, just leave out the factor I guess?\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    // m = sqrt(dZdX^2 + dZdY^2);\\n\\\n    float x = dFdx(depth);\\n\\\n    float y = dFdy(depth);\\n\\\n    float m = sqrt(x * x + y * y);\\n\\\n\\n\\\n    // Apply the factor before computing the log depth.\\n\\\n    depth += m * factor;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragDepthEXT = log2(depth) * czm_oneOverLog2FarDepthFromNearPlusOne;\\n\\\n\\n\\\n#ifdef POLYGON_OFFSET\\n\\\n    // Apply the units after the log depth.\\n\\\n    gl_FragDepthEXT += czm_epsilon7 * units;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Writes the fragment depth to the logarithmic depth buffer.\\n\\\n * <p>\\n\\\n * Use this when the vertex shader calls {@link czm_vertexlogDepth}.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_writeLogDepth\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid czm_writeLogDepth() {\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(v_depthFromNearPlusOne);\\n\\\n#endif\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/Functions/writeNonPerspective.js\n//This file is automatically rebuilt by the Cesium build process.\n/* harmony default export */ var writeNonPerspective = ("/**\\n\\\n * Transforms a value for non-perspective interpolation by multiplying\\n\\\n * it by w, the value used in the perspective divide. This function is\\n\\\n * intended to be called in a vertex shader to compute the value of a\\n\\\n * `varying` that should not be subject to perspective interpolation.\\n\\\n * For example, screen-space texture coordinates. The fragment shader\\n\\\n * must call {@link czm_readNonPerspective} to retrieve the final\\n\\\n * non-perspective value.\\n\\\n *\\n\\\n * @name czm_writeNonPerspective\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float|vec2|vec3|vec4} value The value to be interpolated without accounting for perspective.\\n\\\n * @param {float} w The perspective divide value. Usually this is the computed `gl_Position.w`.\\n\\\n * @returns {float|vec2|vec3|vec4} The transformed value, intended to be stored in a `varying` and read in the\\n\\\n *          fragment shader with {@link czm_readNonPerspective}.\\n\\\n */\\n\\\nfloat czm_writeNonPerspective(float value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_writeNonPerspective(vec2 value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_writeNonPerspective(vec3 value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_writeNonPerspective(vec4 value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n");\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/Shaders/Builtin/CzmBuiltins.js\n//This file is automatically rebuilt by the Cesium build process.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var CzmBuiltins = ({\n    czm_degreesPerRadian : degreesPerRadian,\n    czm_depthRange : depthRange,\n    czm_epsilon1 : epsilon1,\n    czm_epsilon2 : epsilon2,\n    czm_epsilon3 : epsilon3,\n    czm_epsilon4 : epsilon4,\n    czm_epsilon5 : epsilon5,\n    czm_epsilon6 : epsilon6,\n    czm_epsilon7 : epsilon7,\n    czm_infinity : infinity,\n    czm_oneOverPi : oneOverPi,\n    czm_oneOverTwoPi : oneOverTwoPi,\n    czm_passCesium3DTile : passCesium3DTile,\n    czm_passCesium3DTileClassification : passCesium3DTileClassification,\n    czm_passCesium3DTileClassificationIgnoreShow : passCesium3DTileClassificationIgnoreShow,\n    czm_passClassification : passClassification,\n    czm_passCompute : passCompute,\n    czm_passEnvironment : passEnvironment,\n    czm_passGlobe : passGlobe,\n    czm_passOpaque : passOpaque,\n    czm_passOverlay : passOverlay,\n    czm_passTerrainClassification : passTerrainClassification,\n    czm_passTranslucent : passTranslucent,\n    czm_pi : pi,\n    czm_piOverFour : piOverFour,\n    czm_piOverSix : piOverSix,\n    czm_piOverThree : piOverThree,\n    czm_piOverTwo : piOverTwo,\n    czm_radiansPerDegree : radiansPerDegree,\n    czm_sceneMode2D : sceneMode2D,\n    czm_sceneMode3D : sceneMode3D,\n    czm_sceneModeColumbusView : sceneModeColumbusView,\n    czm_sceneModeMorphing : sceneModeMorphing,\n    czm_solarRadius : solarRadius,\n    czm_threePiOver2 : threePiOver2,\n    czm_twoPi : twoPi,\n    czm_webMercatorMaxLatitude : webMercatorMaxLatitude,\n    czm_depthRangeStruct : depthRangeStruct,\n    czm_material : material,\n    czm_materialInput : materialInput,\n    czm_modelMaterial : modelMaterial,\n    czm_pbrParameters : pbrParameters,\n    czm_ray : ray,\n    czm_raySegment : raySegment,\n    czm_shadowParameters : shadowParameters,\n    czm_HSBToRGB : HSBToRGB,\n    czm_HSLToRGB : HSLToRGB,\n    czm_RGBToHSB : RGBToHSB,\n    czm_RGBToHSL : RGBToHSL,\n    czm_RGBToXYZ : RGBToXYZ,\n    czm_XYZToRGB : XYZToRGB,\n    czm_acesTonemapping : acesTonemapping,\n    czm_alphaWeight : alphaWeight,\n    czm_antialias : antialias,\n    czm_approximateSphericalCoordinates : approximateSphericalCoordinates,\n    czm_backFacing : backFacing,\n    czm_branchFreeTernary : branchFreeTernary,\n    czm_cascadeColor : cascadeColor,\n    czm_cascadeDistance : cascadeDistance,\n    czm_cascadeMatrix : cascadeMatrix,\n    czm_cascadeWeights : cascadeWeights,\n    czm_columbusViewMorph : columbusViewMorph,\n    czm_computePosition : computePosition,\n    czm_cosineAndSine : cosineAndSine,\n    czm_decompressTextureCoordinates : decompressTextureCoordinates,\n    czm_defaultPbrMaterial : defaultPbrMaterial,\n    czm_depthClamp : depthClamp,\n    czm_eastNorthUpToEyeCoordinates : eastNorthUpToEyeCoordinates,\n    czm_ellipsoidContainsPoint : ellipsoidContainsPoint,\n    czm_ellipsoidWgs84TextureCoordinates : ellipsoidWgs84TextureCoordinates,\n    czm_equalsEpsilon : equalsEpsilon,\n    czm_eyeOffset : eyeOffset,\n    czm_eyeToWindowCoordinates : eyeToWindowCoordinates,\n    czm_fastApproximateAtan : fastApproximateAtan,\n    czm_fog : fog,\n    czm_gammaCorrect : gammaCorrect,\n    czm_geodeticSurfaceNormal : geodeticSurfaceNormal,\n    czm_getDefaultMaterial : getDefaultMaterial,\n    czm_getLambertDiffuse : getLambertDiffuse,\n    czm_getSpecular : getSpecular,\n    czm_getWaterNoise : getWaterNoise,\n    czm_hue : hue,\n    czm_inverseGamma : inverseGamma,\n    czm_isEmpty : isEmpty,\n    czm_isFull : isFull,\n    czm_latitudeToWebMercatorFraction : latitudeToWebMercatorFraction,\n    czm_lineDistance : lineDistance,\n    czm_luminance : luminance,\n    czm_metersPerPixel : metersPerPixel,\n    czm_modelToWindowCoordinates : modelToWindowCoordinates,\n    czm_multiplyWithColorBalance : multiplyWithColorBalance,\n    czm_nearFarScalar : nearFarScalar,\n    czm_octDecode : octDecode,\n    czm_packDepth : packDepth,\n    czm_pbrLighting : pbrLighting,\n    czm_pbrMetallicRoughnessMaterial : pbrMetallicRoughnessMaterial,\n    czm_pbrSpecularGlossinessMaterial : pbrSpecularGlossinessMaterial,\n    czm_phong : phong,\n    czm_planeDistance : planeDistance,\n    czm_pointAlongRay : pointAlongRay,\n    czm_rayEllipsoidIntersectionInterval : rayEllipsoidIntersectionInterval,\n    czm_readDepth : readDepth,\n    czm_readNonPerspective : readNonPerspective,\n    czm_reverseLogDepth : reverseLogDepth,\n    czm_sampleOctahedralProjection : sampleOctahedralProjection,\n    czm_saturation : saturation,\n    czm_shadowDepthCompare : shadowDepthCompare,\n    czm_shadowVisibility : shadowVisibility,\n    czm_signNotZero : signNotZero,\n    czm_sphericalHarmonics : sphericalHarmonics,\n    czm_tangentToEyeSpaceMatrix : tangentToEyeSpaceMatrix,\n    czm_transformPlane : transformPlane,\n    czm_translateRelativeToEye : translateRelativeToEye,\n    czm_translucentPhong : translucentPhong,\n    czm_transpose : transpose,\n    czm_unpackDepth : unpackDepth,\n    czm_unpackFloat : unpackFloat,\n    czm_vertexLogDepth : vertexLogDepth,\n    czm_windowToEyeCoordinates : windowToEyeCoordinates,\n    czm_writeDepthClamp : writeDepthClamp,\n    czm_writeLogDepth : writeLogDepth,\n    czm_writeNonPerspective : writeNonPerspective\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2303\n')}}]);