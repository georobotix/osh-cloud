"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[1686],{50147:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Df\": function() { return /* binding */ defaultFont; },\n/* harmony export */   \"He\": function() { return /* binding */ defaultLineDashOffset; },\n/* harmony export */   \"Kd\": function() { return /* binding */ measureAndCacheTextWidth; },\n/* harmony export */   \"PH\": function() { return /* binding */ defaultTextAlign; },\n/* harmony export */   \"Qx\": function() { return /* binding */ registerFont; },\n/* harmony export */   \"Tx\": function() { return /* binding */ defaultStrokeStyle; },\n/* harmony export */   \"V4\": function() { return /* binding */ defaultMiterLimit; },\n/* harmony export */   \"X9\": function() { return /* binding */ defaultLineDash; },\n/* harmony export */   \"Zw\": function() { return /* binding */ getTextDimensions; },\n/* harmony export */   \"_f\": function() { return /* binding */ drawImageOrLabel; },\n/* harmony export */   \"bL\": function() { return /* binding */ defaultFillStyle; },\n/* harmony export */   \"mb\": function() { return /* binding */ defaultLineCap; },\n/* harmony export */   \"oB\": function() { return /* binding */ defaultPadding; },\n/* harmony export */   \"rc\": function() { return /* binding */ defaultLineJoin; },\n/* harmony export */   \"ru\": function() { return /* binding */ defaultTextBaseline; },\n/* harmony export */   \"sG\": function() { return /* binding */ checkedFonts; },\n/* harmony export */   \"yC\": function() { return /* binding */ defaultLineWidth; }\n/* harmony export */ });\n/* unused harmony exports textHeights, measureTextHeight, measureTextWidth, rotateAtOffset */\n/* harmony import */ var _Object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72971);\n/* harmony import */ var _has_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40177);\n/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69374);\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(68326);\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10245);\n/**\n * @module ol/render/canvas\n */\n\n\n\n\n\n\n/**\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\n */\n\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\n */\n\n/**\n * @typedef Label\n * @property {number} width Width.\n * @property {number} height Height.\n * @property {Array<string|number>} contextInstructions ContextInstructions.\n */\n\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\n * @property {Array<number>} currentLineDash Current LineDash.\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\n * @property {number} [currentLineWidth] Current LineWidth.\n * @property {number} [currentMiterLimit] Current MiterLimit.\n * @property {number} [lastStroke] Last stroke.\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {CanvasLineCap} [lineCap] LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} [lineDashOffset] LineDashOffset.\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\n * @property {number} [lineWidth] LineWidth.\n * @property {number} [miterLimit] MiterLimit.\n */\n\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} lineWidth LineWidth.\n * @property {number} miterLimit MiterLimit.\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\n */\n\n/**\n * @typedef {Object} TextState\n * @property {string} font Font.\n * @property {CanvasTextAlign} [textAlign] TextAlign.\n * @property {number} [repeat] Repeat.\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\n * @property {number} [maxAngle] MaxAngle.\n * @property {boolean} [overflow] Overflow.\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\n * @property {import(\"../size.js\").Size} [scale] Scale.\n * @property {Array<number>} [padding] Padding.\n */\n\n/**\n * @typedef {Object} SerializableInstructions\n * @property {Array<*>} instructions The rendering instructions.\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\n * @property {Array<number>} coordinates The array of all coordinates.\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\n */\n\n/**\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\n */\n\n/**\n * @const\n * @type {string}\n */\nconst defaultFont = '10px sans-serif';\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nconst defaultFillStyle = '#000';\n\n/**\n * @const\n * @type {CanvasLineCap}\n */\nconst defaultLineCap = 'round';\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst defaultLineDash = [];\n\n/**\n * @const\n * @type {number}\n */\nconst defaultLineDashOffset = 0;\n\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nconst defaultLineJoin = 'round';\n\n/**\n * @const\n * @type {number}\n */\nconst defaultMiterLimit = 10;\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nconst defaultStrokeStyle = '#000';\n\n/**\n * @const\n * @type {CanvasTextAlign}\n */\nconst defaultTextAlign = 'center';\n\n/**\n * @const\n * @type {CanvasTextBaseline}\n */\nconst defaultTextBaseline = 'middle';\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst defaultPadding = [0, 0, 0, 0];\n\n/**\n * @const\n * @type {number}\n */\nconst defaultLineWidth = 1;\n\n/**\n * @type {BaseObject}\n */\nconst checkedFonts = new _Object_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z();\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet measureContext = null;\n\n/**\n * @type {string}\n */\nlet measureFont;\n\n/**\n * @type {!Object<string, number>}\n */\nconst textHeights = {};\n\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nconst registerFont = (function () {\n  const retries = 100;\n  const size = '32px ';\n  const referenceFonts = ['monospace', 'serif'];\n  const len = referenceFonts.length;\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  let interval, referenceWidth;\n\n  /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    let available = true;\n    for (let i = 0; i < len; ++i) {\n      const referenceFont = referenceFonts[i];\n      referenceWidth = measureTextWidth(\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\n        text\n      );\n      if (fontFamily != referenceFont) {\n        const width = measureTextWidth(\n          fontStyle +\n            ' ' +\n            fontWeight +\n            ' ' +\n            size +\n            fontFamily +\n            ',' +\n            referenceFont,\n          text\n        );\n        // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n        available = available && width != referenceWidth;\n      }\n    }\n    if (available) {\n      return true;\n    }\n    return false;\n  }\n\n  function check() {\n    let done = true;\n    const fonts = checkedFonts.getKeys();\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\n      const font = fonts[i];\n      if (checkedFonts.get(font) < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          (0,_obj_js__WEBPACK_IMPORTED_MODULE_1__/* .clear */ .Z)(textHeights);\n          // Make sure that loaded fonts are picked up by Safari\n          measureContext = null;\n          measureFont = undefined;\n          checkedFonts.set(font, retries);\n        } else {\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n          done = false;\n        }\n      }\n    }\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n\n  return function (fontSpec) {\n    const font = (0,_css_js__WEBPACK_IMPORTED_MODULE_2__/* .getFontParameters */ .p)(fontSpec);\n    if (!font) {\n      return;\n    }\n    const families = font.families;\n    for (let i = 0, ii = families.length; i < ii; ++i) {\n      const family = families[i];\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\n      if (checkedFonts.get(key) === undefined) {\n        checkedFonts.set(key, retries, true);\n        if (!isAvailable(font.style, font.weight, family)) {\n          checkedFonts.set(key, 0, true);\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n})();\n\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nconst measureTextHeight = (function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  let measureElement;\n  return function (fontSpec) {\n    let height = textHeights[fontSpec];\n    if (height == undefined) {\n      if (_has_js__WEBPACK_IMPORTED_MODULE_3__/* .WORKER_OFFSCREEN_CANVAS */ .Id) {\n        const font = (0,_css_js__WEBPACK_IMPORTED_MODULE_2__/* .getFontParameters */ .p)(fontSpec);\n        const metrics = measureText(fontSpec, 'Žg');\n        const lineHeight = isNaN(Number(font.lineHeight))\n          ? 1.2\n          : Number(font.lineHeight);\n        height =\n          lineHeight *\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n      } else {\n        if (!measureElement) {\n          measureElement = document.createElement('div');\n          measureElement.innerHTML = 'M';\n          measureElement.style.minHeight = '0';\n          measureElement.style.maxHeight = 'none';\n          measureElement.style.height = 'auto';\n          measureElement.style.padding = '0';\n          measureElement.style.border = 'none';\n          measureElement.style.position = 'absolute';\n          measureElement.style.display = 'block';\n          measureElement.style.left = '-99999px';\n        }\n        measureElement.style.font = fontSpec;\n        document.body.appendChild(measureElement);\n        height = measureElement.offsetHeight;\n        document.body.removeChild(measureElement);\n      }\n      textHeights[fontSpec] = height;\n    }\n    return height;\n  };\n})();\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */\nfunction measureText(font, text) {\n  if (!measureContext) {\n    measureContext = (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__/* .createCanvasContext2D */ .E4)(1, 1);\n  }\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text);\n}\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nfunction measureTextWidth(font, text) {\n  return measureText(font, text).width;\n}\n\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @return {number} The text width.\n */\nfunction measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  const width = text\n    .split('\\n')\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\n  cache[text] = width;\n  return width;\n}\n\n/**\n * @param {TextState} baseStyle Base style.\n * @param {Array<string>} chunks Text chunks to measure.\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\n */\nfunction getTextDimensions(baseStyle, chunks) {\n  const widths = [];\n  const heights = [];\n  const lineWidths = [];\n  let width = 0;\n  let lineWidth = 0;\n  let height = 0;\n  let lineHeight = 0;\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\n    const text = chunks[i];\n    if (text === '\\n' || i === ii) {\n      width = Math.max(width, lineWidth);\n      lineWidths.push(lineWidth);\n      lineWidth = 0;\n      height += lineHeight;\n      continue;\n    }\n    const font = chunks[i + 1] || baseStyle.font;\n    const currentWidth = measureTextWidth(font, text);\n    widths.push(currentWidth);\n    lineWidth += currentWidth;\n    const currentHeight = measureTextHeight(font);\n    heights.push(currentHeight);\n    lineHeight = Math.max(lineHeight, currentHeight);\n  }\n  return {width, height, widths, heights, lineWidths};\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nfunction rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {import(\"../size.js\").Size} scale Scale.\n */\nfunction drawImageOrLabel(\n  context,\n  transform,\n  opacity,\n  labelOrImage,\n  originX,\n  originY,\n  w,\n  h,\n  x,\n  y,\n  scale\n) {\n  context.save();\n\n  if (opacity !== 1) {\n    context.globalAlpha *= opacity;\n  }\n  if (transform) {\n    context.setTransform.apply(context, transform);\n  }\n\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n  } else if (scale[0] < 0 || scale[1] < 0) {\n    // flipped image\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      0,\n      0,\n      w,\n      h\n    );\n  } else {\n    // if image not flipped translate and scale can be avoided\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      x,\n      y,\n      w * scale[0],\n      h * scale[1]\n    );\n  }\n\n  context.restore();\n}\n\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n  const contextInstructions = label.contextInstructions;\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      context[contextInstructions[i]].apply(\n        context,\n        contextInstructions[i + 1]\n      );\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50147\n")},99557:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Instruction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(45707);\n/* harmony import */ var _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28716);\n/* harmony import */ var _VectorContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45624);\n/* harmony import */ var _colorlike_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96620);\n/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(28641);\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50147);\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(65537);\n/* harmony import */ var _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(89241);\n/**\n * @module ol/render/canvas/Builder\n */\n\n\n\n\n\n\n\n\n\nclass CanvasBuilder extends _VectorContext_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import("../../extent.js").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import("../../extent.js").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import("../../coordinate.js").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import("../canvas.js").FillStrokeState}\n     */\n    this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1\n      ? dashArray\n      : dashArray.map(function (dash) {\n          return dash * pixelRatio;\n        });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if ((0,_extent_js__WEBPACK_IMPORTED_MODULE_1__/* .containsCoordinate */ .b8)(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    closed,\n    skipFirst\n  ) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = (0,_extent_js__WEBPACK_IMPORTED_MODULE_1__/* .coordinateRelationship */ .pX)(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].INTERSECTING */ .Z.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        false,\n        false\n      );\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {\n    this.beginGeometry(geometry, feature);\n\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n\n    switch (type) {\n      case \'MultiPolygon\':\n        flatCoordinates =\n          /** @type {import("../../geom/MultiPolygon.js").default} */ (\n            geometry\n          ).getOrientedFlatCoordinates();\n        builderEndss = [];\n        const endss =\n          /** @type {import("../../geom/MultiPolygon.js").default} */ (\n            geometry\n          ).getEndss();\n        offset = 0;\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          const myEnds = [];\n          offset = this.drawCustomCoordinates_(\n            flatCoordinates,\n            offset,\n            endss[i],\n            stride,\n            myEnds\n          );\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          renderer,\n          _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateMultiCoordinatesArray */ .ug,\n        ]);\n        this.hitDetectionInstructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          hitDetectionRenderer || renderer,\n          _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateMultiCoordinatesArray */ .ug,\n        ]);\n        break;\n      case \'Polygon\':\n      case \'MultiLineString\':\n        builderEnds = [];\n        flatCoordinates =\n          type == \'Polygon\'\n            ? /** @type {import("../../geom/Polygon.js").default} */ (\n                geometry\n              ).getOrientedFlatCoordinates()\n            : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(\n          flatCoordinates,\n          0,\n          /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (\n            geometry\n          ).getEnds(),\n          stride,\n          builderEnds\n        );\n        this.instructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          renderer,\n          _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateCoordinatesArray */ .o1,\n        ]);\n        this.hitDetectionInstructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          hitDetectionRenderer || renderer,\n          _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateCoordinatesArray */ .o1,\n        ]);\n        break;\n      case \'LineString\':\n      case \'Circle\':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(\n          flatCoordinates,\n          0,\n          flatCoordinates.length,\n          stride,\n          false,\n          false\n        );\n        this.instructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateCoordinates */ .Ml,\n        ]);\n        this.hitDetectionInstructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateCoordinates */ .Ml,\n        ]);\n        break;\n      case \'MultiPoint\':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n\n        if (builderEnd > builderBegin) {\n          this.instructions.push([\n            _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            renderer,\n            _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateCoordinates */ .Ml,\n          ]);\n          this.hitDetectionInstructions.push([\n            _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            hitDetectionRenderer || renderer,\n            _geom_flat_inflate_js__WEBPACK_IMPORTED_MODULE_4__/* .inflateCoordinates */ .Ml,\n          ]);\n        }\n        break;\n      case \'Point\':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n\n        this.instructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n        ]);\n        this.hitDetectionInstructions.push([\n          _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].CUSTOM */ .ZP.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n        ]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  beginGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_ = [\n      _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].BEGIN_GEOMETRY */ .ZP.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [\n      _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].BEGIN_GEOMETRY */ .ZP.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates,\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import("./Instruction.js").default} */ (instruction[0]);\n      if (type == _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].END_GEOMETRY */ .ZP.END_GEOMETRY) {\n        begin = i;\n      } else if (type == _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].BEGIN_GEOMETRY */ .ZP.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        (0,_array_js__WEBPACK_IMPORTED_MODULE_5__/* .reverseSubArray */ .FZ)(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import("../../style/Fill.js").default} fillStyle Fill style.\n   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillStyle = (0,_colorlike_js__WEBPACK_IMPORTED_MODULE_6__/* .asColorLike */ .y)(\n        fillStyleColor ? fillStyleColor : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultFillStyle */ .bL\n      );\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = (0,_colorlike_js__WEBPACK_IMPORTED_MODULE_6__/* .asColorLike */ .y)(\n        strokeStyleColor ? strokeStyleColor : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultStrokeStyle */ .Tx\n      );\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap =\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultLineCap */ .mb;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash.slice()\n        : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultLineDash */ .X9;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset\n        ? strokeStyleLineDashOffset\n        : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultLineDashOffset */ .He;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin =\n        strokeStyleLineJoin !== undefined\n          ? strokeStyleLineJoin\n          : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultLineJoin */ .rc;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth =\n        strokeStyleWidth !== undefined ? strokeStyleWidth : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultLineWidth */ .yC;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit =\n        strokeStyleMiterLimit !== undefined\n          ? strokeStyleMiterLimit\n          : _canvas_js__WEBPACK_IMPORTED_MODULE_7__/* .defaultMiterLimit */ .V4;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import("../canvas.js").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [_Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].SET_FILL_STYLE */ .ZP.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== \'string\') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import("../canvas.js").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import("../canvas.js").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      _Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].SET_STROKE_STYLE */ .ZP.SET_STROKE_STYLE,\n      state.strokeStyle,\n      state.lineWidth * this.pixelRatio,\n      state.lineCap,\n      state.lineJoin,\n      state.miterLimit,\n      this.applyPixelRatio(state.lineDash),\n      state.lineDashOffset * this.pixelRatio,\n    ];\n  }\n\n  /**\n   * @param {import("../canvas.js").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== \'string\' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import("../canvas.js").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (\n      state.currentStrokeStyle != strokeStyle ||\n      state.currentLineCap != lineCap ||\n      (lineDash != state.currentLineDash &&\n        !(0,_array_js__WEBPACK_IMPORTED_MODULE_5__/* .equals */ .fS)(state.currentLineDash, lineDash)) ||\n      state.currentLineDashOffset != lineDashOffset ||\n      state.currentLineJoin != lineJoin ||\n      state.currentLineWidth != lineWidth ||\n      state.currentMiterLimit != miterLimit\n    ) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [_Instruction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].END_GEOMETRY */ .ZP.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import("../../extent.js").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = (0,_extent_js__WEBPACK_IMPORTED_MODULE_1__/* .clone */ .d9)(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\n        (0,_extent_js__WEBPACK_IMPORTED_MODULE_1__/* .buffer */ .f3)(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\n/* harmony default export */ __webpack_exports__["Z"] = (CanvasBuilder);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99557\n')},35570:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ canvas_BuilderGroup; }\n});\n\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/Builder.js\nvar Builder = __webpack_require__(99557);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/Instruction.js\nvar Instruction = __webpack_require__(45707);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/ImageBuilder.js\n/**\n * @module ol/render/canvas/ImageBuilder\n */\n\n\n\nclass CanvasImageBuilder extends Builder/* default */.Z {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.imagePixelRatio_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorY_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.height_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.opacity_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originY_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = undefined;\n\n    /**\n     * @private\n     * @type {import("../../size.js").Size|undefined}\n     */\n    this.scale_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = undefined;\n\n    /**\n     * @private\n     * @type {"declutter"|"obstacle"|"none"|undefined}\n     */\n    this.declutterMode_ = undefined;\n\n    /**\n     * Data shared with a text builder for combined decluttering.\n     * @private\n     * @type {import("../canvas.js").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  drawPoint(pointGeometry, feature) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(pointGeometry, feature);\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\n    const stride = pointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      Instruction/* default.DRAW_IMAGE */.ZP.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_ * this.imagePixelRatio_,\n      this.originY_ * this.imagePixelRatio_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      Instruction/* default.DRAW_IMAGE */.ZP.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      this.opacity_,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  drawMultiPoint(multiPointGeometry, feature) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(multiPointGeometry, feature);\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n    const stride = multiPointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      Instruction/* default.DRAW_IMAGE */.ZP.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_ * this.imagePixelRatio_,\n      this.originY_ * this.imagePixelRatio_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      Instruction/* default.DRAW_IMAGE */.ZP.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      this.opacity_,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    // FIXME this doesn\'t really protect us against further calls to draw*Geometry\n    this.anchorX_ = undefined;\n    this.anchorY_ = undefined;\n    this.hitDetectionImage_ = null;\n    this.image_ = null;\n    this.imagePixelRatio_ = undefined;\n    this.height_ = undefined;\n    this.scale_ = undefined;\n    this.opacity_ = undefined;\n    this.originX_ = undefined;\n    this.originY_ = undefined;\n    this.rotateWithView_ = undefined;\n    this.rotation_ = undefined;\n    this.width_ = undefined;\n    return super.finish();\n  }\n\n  /**\n   * @param {import("../../style/Image.js").default} imageStyle Image style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setImageStyle(imageStyle, sharedData) {\n    const anchor = imageStyle.getAnchor();\n    const size = imageStyle.getSize();\n    const origin = imageStyle.getOrigin();\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\n    this.anchorX_ = anchor[0];\n    this.anchorY_ = anchor[1];\n    this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\n    this.image_ = imageStyle.getImage(this.pixelRatio);\n    this.height_ = size[1];\n    this.opacity_ = imageStyle.getOpacity();\n    this.originX_ = origin[0];\n    this.originY_ = origin[1];\n    this.rotateWithView_ = imageStyle.getRotateWithView();\n    this.rotation_ = imageStyle.getRotation();\n    this.scale_ = imageStyle.getScaleArray();\n    this.width_ = size[0];\n    this.declutterMode_ = imageStyle.getDeclutterMode();\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\n/* harmony default export */ var ImageBuilder = (CanvasImageBuilder);\n\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas.js\nvar canvas = __webpack_require__(50147);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/LineStringBuilder.js\n/**\n * @module ol/render/canvas/LineStringBuilder\n */\n\n\n\n\nclass CanvasLineStringBuilder extends Builder/* default */.Z {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatLineCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      false,\n      false\n    );\n    const moveToLineToInstruction = [\n      Instruction/* default.MOVE_TO_LINE_TO */.ZP.MOVE_TO_LINE_TO,\n      myBegin,\n      myEnd,\n    ];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  }\n\n  /**\n   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  drawLineString(lineStringGeometry, feature) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature);\n    this.hitDetectionInstructions.push(\n      [\n        Instruction/* default.SET_STROKE_STYLE */.ZP.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        canvas/* defaultLineDash */.X9,\n        canvas/* defaultLineDashOffset */.He,\n      ],\n      Instruction/* beginPathInstruction */.$O\n    );\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    const stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride\n    );\n    this.hitDetectionInstructions.push(Instruction/* strokeInstruction */.Yc);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature);\n    this.hitDetectionInstructions.push(\n      [\n        Instruction/* default.SET_STROKE_STYLE */.ZP.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ],\n      Instruction/* beginPathInstruction */.$O\n    );\n    const ends = multiLineStringGeometry.getEnds();\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    const stride = multiLineStringGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinates_(\n        flatCoordinates,\n        offset,\n        /** @type {number} */ (ends[i]),\n        stride\n      );\n    }\n    this.hitDetectionInstructions.push(Instruction/* strokeInstruction */.Yc);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const state = this.state;\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(Instruction/* strokeInstruction */.Yc);\n    }\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    return super.finish();\n  }\n\n  /**\n   * @param {import("../canvas.js").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(Instruction/* strokeInstruction */.Yc);\n      state.lastStroke = this.coordinates.length;\n    }\n    state.lastStroke = 0;\n    super.applyStroke(state);\n    this.instructions.push(Instruction/* beginPathInstruction */.$O);\n  }\n}\n\n/* harmony default export */ var LineStringBuilder = (CanvasLineStringBuilder);\n\n// EXTERNAL MODULE: ./node_modules/ol/geom/flat/simplify.js\nvar simplify = __webpack_require__(80226);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/PolygonBuilder.js\n/**\n * @module ol/render/canvas/PolygonBuilder\n */\n\n\n\n\n\nclass CanvasPolygonBuilder extends Builder/* default */.Z {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\n    const state = this.state;\n    const fill = state.fillStyle !== undefined;\n    const stroke = state.strokeStyle !== undefined;\n    const numEnds = ends.length;\n    this.instructions.push(Instruction/* beginPathInstruction */.$O);\n    this.hitDetectionInstructions.push(Instruction/* beginPathInstruction */.$O);\n    for (let i = 0; i < numEnds; ++i) {\n      const end = ends[i];\n      const myBegin = this.coordinates.length;\n      const myEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        true,\n        !stroke\n      );\n      const moveToLineToInstruction = [\n        Instruction/* default.MOVE_TO_LINE_TO */.ZP.MOVE_TO_LINE_TO,\n        myBegin,\n        myEnd,\n      ];\n      this.instructions.push(moveToLineToInstruction);\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\n      if (stroke) {\n        // Performance optimization: only call closePath() when we have a stroke.\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n        this.instructions.push(Instruction/* closePathInstruction */.s3);\n        this.hitDetectionInstructions.push(Instruction/* closePathInstruction */.s3);\n      }\n      offset = end;\n    }\n    if (fill) {\n      this.instructions.push(Instruction/* fillInstruction */.gO);\n      this.hitDetectionInstructions.push(Instruction/* fillInstruction */.gO);\n    }\n    if (stroke) {\n      this.instructions.push(Instruction/* strokeInstruction */.Yc);\n      this.hitDetectionInstructions.push(Instruction/* strokeInstruction */.Yc);\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.\n   * @param {import("../../Feature.js").default} feature Feature.\n   */\n  drawCircle(circleGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(circleGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        Instruction/* default.SET_FILL_STYLE */.ZP.SET_FILL_STYLE,\n        canvas/* defaultFillStyle */.bL,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        Instruction/* default.SET_STROKE_STYLE */.ZP.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ]);\n    }\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\n    const stride = circleGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    this.appendFlatLineCoordinates(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      false,\n      false\n    );\n    const circleInstruction = [Instruction/* default.CIRCLE */.ZP.CIRCLE, myBegin];\n    this.instructions.push(Instruction/* beginPathInstruction */.$O, circleInstruction);\n    this.hitDetectionInstructions.push(Instruction/* beginPathInstruction */.$O, circleInstruction);\n    if (state.fillStyle !== undefined) {\n      this.instructions.push(Instruction/* fillInstruction */.gO);\n      this.hitDetectionInstructions.push(Instruction/* fillInstruction */.gO);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.instructions.push(Instruction/* strokeInstruction */.Yc);\n      this.hitDetectionInstructions.push(Instruction/* strokeInstruction */.Yc);\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  drawPolygon(polygonGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(polygonGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        Instruction/* default.SET_FILL_STYLE */.ZP.SET_FILL_STYLE,\n        canvas/* defaultFillStyle */.bL,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        Instruction/* default.SET_STROKE_STYLE */.ZP.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ]);\n    }\n    const ends = polygonGeometry.getEnds();\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n    const stride = polygonGeometry.getStride();\n    this.drawFlatCoordinatess_(\n      flatCoordinates,\n      0,\n      /** @type {Array<number>} */ (ends),\n      stride\n    );\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(multiPolygonGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        Instruction/* default.SET_FILL_STYLE */.ZP.SET_FILL_STYLE,\n        canvas/* defaultFillStyle */.bL,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        Instruction/* default.SET_STROKE_STYLE */.ZP.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ]);\n    }\n    const endss = multiPolygonGeometry.getEndss();\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n    const stride = multiPolygonGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinatess_(\n        flatCoordinates,\n        offset,\n        endss[i],\n        stride\n      );\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    // We want to preserve topology when drawing polygons.  Polygons are\n    // simplified using quantization and point elimination. However, we might\n    // have received a mix of quantized and non-quantized geometries, so ensure\n    // that all are quantized by quantizing all coordinates in the batch.\n    const tolerance = this.tolerance;\n    if (tolerance !== 0) {\n      const coordinates = this.coordinates;\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = (0,simplify/* snap */.uZ)(coordinates[i], tolerance);\n      }\n    }\n    return super.finish();\n  }\n\n  /**\n   * @private\n   */\n  setFillStrokeStyles_() {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    if (fillStyle !== undefined) {\n      this.updateFillStyle(state, this.createFill);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.updateStrokeStyle(state, this.applyStroke);\n    }\n  }\n}\n\n/* harmony default export */ var PolygonBuilder = (CanvasPolygonBuilder);\n\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/TextBuilder.js\nvar TextBuilder = __webpack_require__(27043);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/BuilderGroup.js\n/**\n * @module ol/render/canvas/BuilderGroup\n */\n\n\n\n\n\n\n\n/**\n * @type {Object<import("../canvas.js").BuilderType, typeof Builder>}\n */\nconst BATCH_CONSTRUCTORS = {\n  \'Circle\': PolygonBuilder,\n  \'Default\': Builder/* default */.Z,\n  \'Image\': ImageBuilder,\n  \'LineString\': LineStringBuilder,\n  \'Polygon\': PolygonBuilder,\n  \'Text\': TextBuilder/* default */.Z,\n};\n\nclass BuilderGroup {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import("../../extent.js").Extent} maxExtent Max extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tolerance_ = tolerance;\n\n    /**\n     * @private\n     * @type {import("../../extent.js").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import("../canvas.js").BuilderType, Builder>>}\n     */\n    this.buildersByZIndex_ = {};\n  }\n\n  /**\n   * @return {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Builder.js").SerializableInstructions>>} The serializable instructions\n   */\n  finish() {\n    const builderInstructions = {};\n    for (const zKey in this.buildersByZIndex_) {\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\n      const builders = this.buildersByZIndex_[zKey];\n      for (const builderKey in builders) {\n        const builderInstruction = builders[builderKey].finish();\n        builderInstructions[zKey][builderKey] = builderInstruction;\n      }\n    }\n    return builderInstructions;\n  }\n\n  /**\n   * @param {number|undefined} zIndex Z index.\n   * @param {import("../canvas.js").BuilderType} builderType Replay type.\n   * @return {import("../VectorContext.js").default} Replay.\n   */\n  getBuilder(zIndex, builderType) {\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : \'0\';\n    let replays = this.buildersByZIndex_[zIndexKey];\n    if (replays === undefined) {\n      replays = {};\n      this.buildersByZIndex_[zIndexKey] = replays;\n    }\n    let replay = replays[builderType];\n    if (replay === undefined) {\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\n      replay = new Constructor(\n        this.tolerance_,\n        this.maxExtent_,\n        this.resolution_,\n        this.pixelRatio_\n      );\n      replays[builderType] = replay;\n    }\n    return replay;\n  }\n}\n\n/* harmony default export */ var canvas_BuilderGroup = (BuilderGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35570\n')},15240:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ canvas_ExecutorGroup; }\n});\n\n// UNUSED EXPORTS: getPixelIndexArray\n\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/Instruction.js\nvar Instruction = __webpack_require__(45707);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/TextBuilder.js\nvar TextBuilder = __webpack_require__(27043);\n// EXTERNAL MODULE: ./node_modules/ol/transform.js\nvar ol_transform = __webpack_require__(6101);\n// EXTERNAL MODULE: ./node_modules/ol/extent.js\nvar extent = __webpack_require__(28641);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas.js\nvar render_canvas = __webpack_require__(50147);\n// EXTERNAL MODULE: ./node_modules/ol/geom/flat/textpath.js\nvar textpath = __webpack_require__(27396);\n// EXTERNAL MODULE: ./node_modules/ol/array.js\nvar array = __webpack_require__(65537);\n// EXTERNAL MODULE: ./node_modules/ol/geom/flat/length.js\nvar flat_length = __webpack_require__(27374);\n// EXTERNAL MODULE: ./node_modules/ol/geom/flat/transform.js\nvar flat_transform = __webpack_require__(76442);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/Executor.js\n/**\n * @module ol/render/canvas/Executor\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef {Object} BBox\n * @property {number} minX Minimal x.\n * @property {number} minY Minimal y.\n * @property {number} maxX Maximal x.\n * @property {number} maxY Maximal y\n * @property {*} value Value.\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {BBox} declutterBox DeclutterBox.\n * @property {import("../../transform.js").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default): T} FeatureCallback\n */\n\n/**\n * @type {import("../../extent.js").Extent}\n */\nconst tmpExtent = (0,extent/* createEmpty */.lJ)();\n\n/** @type {import("../../coordinate.js").Coordinate} */\nconst p1 = [];\n/** @type {import("../../coordinate.js").Coordinate} */\nconst p2 = [];\n/** @type {import("../../coordinate.js").Coordinate} */\nconst p3 = [];\n/** @type {import("../../coordinate.js").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {BBox} Declutter bbox.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\n\nconst rtlRegEx = new RegExp(\n  /* eslint-disable prettier/prettier */\n  \'[\' +\n    String.fromCharCode(0x00591) + \'-\' + String.fromCharCode(0x008ff) +\n    String.fromCharCode(0x0fb1d) + \'-\' + String.fromCharCode(0x0fdff) +\n    String.fromCharCode(0x0fe70) + \'-\' + String.fromCharCode(0x0fefc) +\n    String.fromCharCode(0x10800) + \'-\' + String.fromCharCode(0x10fff) +\n    String.fromCharCode(0x1e800) + \'-\' + String.fromCharCode(0x1efff) +\n  \']\'\n  /* eslint-enable prettier/prettier */\n);\n\n/**\n * @param {string} text Text.\n * @param {CanvasTextAlign} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if ((align === \'start\' || align === \'end\') && !rtlRegEx.test(text)) {\n    align = align === \'start\' ? \'left\' : \'right\';\n  }\n  return TextBuilder/* TEXT_ALIGN */.I[align];\n}\n\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push(\'\\n\', \'\');\n  }\n  acc.push(line, \'\');\n  return acc;\n}\n\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions\n   */\n  constructor(resolution, pixelRatio, overlaps, instructions) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import("../../transform.js").Transform}\n     */\n    this.renderedTransform_ = (0,ol_transform/* create */.Ue)();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import("../canvas.js").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import("../canvas.js").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import("../canvas.js").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import("../canvas.js").Label>}\n     */\n    this.labels_ = {};\n  }\n\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import("../canvas.js").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [\n      textState.scale[0] * pixelRatio,\n      textState.scale[1] * pixelRatio,\n    ];\n    const textIsArray = Array.isArray(text);\n    const align = textState.justify\n      ? TextBuilder/* TEXT_ALIGN */.I[textState.justify]\n      : horizontalTextAlign(\n          Array.isArray(text) ? text[0] : text,\n          textState.textAlign || render_canvas/* defaultTextAlign */.PH\n        );\n    const strokeWidth =\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    const chunks = textIsArray\n      ? text\n      : text.split(\'\\n\').reduce(createTextChunks, []);\n\n    const {width, height, widths, heights, lineWidths} = (0,render_canvas/* getTextDimensions */.Zw)(\n      textState,\n      chunks\n    );\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import("../canvas.js").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions,\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push(\'scale\', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push(\'strokeStyle\', strokeState.strokeStyle);\n      contextInstructions.push(\'lineWidth\', strokeWidth);\n      contextInstructions.push(\'lineCap\', strokeState.lineCap);\n      contextInstructions.push(\'lineJoin\', strokeState.lineJoin);\n      contextInstructions.push(\'miterLimit\', strokeState.miterLimit);\n      contextInstructions.push(\'setLineDash\', [strokeState.lineDash]);\n      contextInstructions.push(\'lineDashOffset\', strokeState.lineDashOffset);\n    }\n    if (fillKey) {\n      contextInstructions.push(\'fillStyle\', fillState.fillStyle);\n    }\n    contextInstructions.push(\'textBaseline\', \'middle\');\n    contextInstructions.push(\'textAlign\', \'center\');\n    const leftRight = 0.5 - align;\n    let x = align * renderWidth + leftRight * strokeWidth;\n    const strokeInstructions = [];\n    const fillInstructions = [];\n    let lineHeight = 0;\n    let lineOffset = 0;\n    let widthHeightIndex = 0;\n    let lineWidthIndex = 0;\n    let previousFont;\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\n      const text = chunks[i];\n      if (text === \'\\n\') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      const font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push(\'font\', font);\n        }\n        if (fillKey) {\n          fillInstructions.push(\'font\', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      const fillStrokeArgs = [\n        text,\n        x +\n          leftRight * widths[widthHeightIndex] +\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\n      ];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push(\'strokeText\', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push(\'fillText\', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.\n   * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.\n   * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.\n   * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(\n    context,\n    p1,\n    p2,\n    p3,\n    p4,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(\n        context,\n        /** @type {Array<*>} */ (strokeInstruction)\n      );\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import("../../size.js").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import("../../Feature.js").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(\n    sheetWidth,\n    sheetHeight,\n    centerX,\n    centerY,\n    width,\n    height,\n    anchorX,\n    anchorY,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    padding,\n    fillStroke,\n    feature\n  ) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n\n    let transform;\n    if (rotation !== 0) {\n      transform = (0,ol_transform/* compose */.qC)(\n        (0,ol_transform/* create */.Ue)(),\n        centerX,\n        centerY,\n        1,\n        1,\n        rotation,\n        -centerX,\n        -centerY\n      );\n\n      (0,ol_transform/* apply */.nn)(transform, p1);\n      (0,ol_transform/* apply */.nn)(transform, p2);\n      (0,ol_transform/* apply */.nn)(transform, p3);\n      (0,ol_transform/* apply */.nn)(transform, p4);\n      (0,extent/* createOrUpdate */.T9)(\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\n        tmpExtent\n      );\n    } else {\n      (0,extent/* createOrUpdate */.T9)(\n        Math.min(boxX, boxX + boxW),\n        Math.min(boxY, boxY + boxH),\n        Math.max(boxX, boxX + boxW),\n        Math.max(boxY, boxY + boxH),\n        tmpExtent\n      );\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature,\n      },\n      canvasTransform: transform,\n      scale: scale,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(\n    context,\n    contextScale,\n    imageOrLabel,\n    dimensions,\n    opacity,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n\n    const box = dimensions.declutterBox;\n    const canvas = context.canvas;\n    const strokePadding = strokeInstruction\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\n      : 0;\n    const intersects =\n      box.minX - strokePadding <= canvas.width / contextScale &&\n      box.maxX + strokePadding >= 0 &&\n      box.minY - strokePadding <= canvas.height / contextScale &&\n      box.maxY + strokePadding >= 0;\n\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(\n          context,\n          p1,\n          p2,\n          p3,\n          p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction)\n        );\n      }\n      (0,render_canvas/* drawImageOrLabel */._f)(\n        context,\n        dimensions.canvasTransform,\n        opacity,\n        imageOrLabel,\n        dimensions.originX,\n        dimensions.originY,\n        dimensions.drawImageW,\n        dimensions.drawImageH,\n        dimensions.drawImageX,\n        dimensions.drawImageY,\n        dimensions.scale\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    if (this.alignFill_) {\n      const origin = (0,ol_transform/* apply */.nn)(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context[\'strokeStyle\'] =\n      /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n  }\n\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(\n      Array.isArray(text) ? text[0] : text,\n      textState.textAlign || render_canvas/* defaultTextAlign */.PH\n    );\n    const baseline = TextBuilder/* TEXT_ALIGN */.I[textState.textBaseline || render_canvas/* defaultTextBaseline */.ru];\n    const strokeWidth =\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY =\n      (baseline * label.height) / pixelRatio +\n      2 * (0.5 - baseline) * strokeWidth;\n\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import("../../transform.js").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import("../../extent.js").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import("rbush").default} [declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(\n    context,\n    contextScale,\n    transform,\n    instructions,\n    snapToPixel,\n    featureCallback,\n    hitExtent,\n    declutterTree\n  ) {\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && (0,array/* equals */.fS)(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = (0,flat_transform/* transform2D */.vT)(\n        this.coordinates,\n        0,\n        this.coordinates.length,\n        2,\n        transform,\n        this.pixelCoordinates_\n      );\n      (0,ol_transform/* setFromArray */.lk)(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX,\n      anchorY,\n      prevX,\n      prevY,\n      roundX,\n      roundY,\n      image,\n      text,\n      textKey,\n      strokeKey,\n      fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    let lastFillInstruction = null;\n    let lastStrokeInstruction = null;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform =\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n\n    const state = /** @type {import("../../render.js").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation,\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize =\n      this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import("../../Feature.js").FeatureLike} */ feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import("./Instruction.js").default} */ (\n        instruction[0]\n      );\n      switch (type) {\n        case Instruction/* default.BEGIN_GEOMETRY */.ZP.BEGIN_GEOMETRY:\n          feature = /** @type {import("../../Feature.js").FeatureLike} */ (\n            instruction[1]\n          );\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (\n            hitExtent !== undefined &&\n            !(0,extent/* intersects */.kK)(hitExtent, currentGeometry.getExtent())\n          ) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case Instruction/* default.BEGIN_PATH */.ZP.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case Instruction/* default.CIRCLE */.ZP.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case Instruction/* default.CLOSE_PATH */.ZP.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case Instruction/* default.CUSTOM */.ZP.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry =\n            /** @type {import("../../geom/SimpleGeometry.js").default} */ (\n              instruction[3]\n            );\n          const renderer = instruction[4];\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case Instruction/* default.DRAW_IMAGE */.ZP.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image =\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\n              instruction[3]\n            );\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          let height = /** @type {number} */ (instruction[6]);\n          const opacity = /** @type {number} */ (instruction[7]);\n          const originX = /** @type {number} */ (instruction[8]);\n          const originY = /** @type {number} */ (instruction[9]);\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\n          let rotation = /** @type {number} */ (instruction[11]);\n          const scale = /** @type {import("../../size.js").Size} */ (\n            instruction[12]\n          );\n          let width = /** @type {number} */ (instruction[13]);\n          const declutterMode =\n            /** @type {"declutter"|"obstacle"|"none"|undefined} */ (\n              instruction[14]\n            );\n          const declutterImageWithText =\n            /** @type {import("../canvas.js").DeclutterImageWithText} */ (\n              instruction[15]\n            );\n\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */ (instruction[19]);\n            textKey = /** @type {string} */ (instruction[20]);\n            strokeKey = /** @type {string} */ (instruction[21]);\n            fillKey = /** @type {string} */ (instruction[22]);\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\n              text,\n              textKey,\n              strokeKey,\n              fillKey\n            );\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */ (instruction[23]);\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */ (instruction[24]);\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n\n          let geometryWidths;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */ (instruction[25]);\n          }\n\n          let padding, backgroundFill, backgroundStroke;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */ (instruction[16]);\n            backgroundFill = /** @type {boolean} */ (instruction[17]);\n            backgroundStroke = /** @type {boolean} */ (instruction[18]);\n          } else {\n            padding = render_canvas/* defaultPadding */.oB;\n            backgroundFill = false;\n            backgroundStroke = false;\n          }\n\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (\n              geometryWidths &&\n              geometryWidths[widthIndex++] < width / this.pixelRatio\n            ) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(\n              image.width,\n              image.height,\n              pixelCoordinates[d],\n              pixelCoordinates[d + 1],\n              width,\n              height,\n              anchorX,\n              anchorY,\n              originX,\n              originY,\n              rotation,\n              scale,\n              snapToPixel,\n              padding,\n              backgroundFill || backgroundStroke,\n              feature\n            );\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [\n              context,\n              contextScale,\n              image,\n              dimensions,\n              opacity,\n              backgroundFill\n                ? /** @type {Array<*>} */ (lastFillInstruction)\n                : null,\n              backgroundStroke\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\n                : null,\n            ];\n            if (declutterTree) {\n              if (declutterMode === \'none\') {\n                // not rendered in declutter group\n                continue;\n              } else if (declutterMode === \'obstacle\') {\n                // will always be drawn, thus no collision detection, but insert as obstacle\n                declutterTree.insert(dimensions.declutterBox);\n                continue;\n              } else {\n                let imageArgs;\n                let imageDeclutterBox;\n                if (declutterImageWithText) {\n                  const index = dd - d;\n                  if (!declutterImageWithText[index]) {\n                    // We now have the image for an image+text combination.\n                    declutterImageWithText[index] = args;\n                    // Don\'t render anything for now, wait for the text.\n                    continue;\n                  }\n                  imageArgs = declutterImageWithText[index];\n                  delete declutterImageWithText[index];\n                  imageDeclutterBox = getDeclutterBox(imageArgs);\n                  if (declutterTree.collides(imageDeclutterBox)) {\n                    continue;\n                  }\n                }\n                if (declutterTree.collides(dimensions.declutterBox)) {\n                  continue;\n                }\n                if (imageArgs) {\n                  // We now have image and text for an image+text combination.\n                  declutterTree.insert(imageDeclutterBox);\n                  // Render the image before we render the text.\n                  this.replayImageOrLabel_.apply(this, imageArgs);\n                }\n                declutterTree.insert(dimensions.declutterBox);\n              }\n            }\n            this.replayImageOrLabel_.apply(this, args);\n          }\n          ++i;\n          break;\n        case Instruction/* default.DRAW_CHARS */.ZP.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          const overflow = /** @type {number} */ (instruction[4]);\n          fillKey = /** @type {string} */ (instruction[5]);\n          const maxAngle = /** @type {number} */ (instruction[6]);\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\n          const offsetY = /** @type {number} */ (instruction[8]);\n          strokeKey = /** @type {string} */ (instruction[9]);\n          const strokeWidth = /** @type {number} */ (instruction[10]);\n          text = /** @type {string} */ (instruction[11]);\n          textKey = /** @type {string} */ (instruction[12]);\n          const pixelRatioScale = [\n            /** @type {number} */ (instruction[13]),\n            /** @type {number} */ (instruction[13]),\n          ];\n\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [\n            textState.scale[0] * measurePixelRatio,\n            textState.scale[1] * measurePixelRatio,\n          ];\n\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n\n          const pathLength = (0,flat_length/* lineStringLength */.W)(pixelCoordinates, begin, end, 2);\n          const textLength =\n            Math.abs(textScale[0]) *\n            (0,render_canvas/* measureAndCacheTextWidth */.Kd)(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM = (pathLength - textLength) * TextBuilder/* TEXT_ALIGN */.I[textAlign];\n            const parts = (0,textpath/* drawTextOnPath */.q)(\n              pixelCoordinates,\n              begin,\n              end,\n              2,\n              text,\n              startM,\n              maxAngle,\n              Math.abs(textScale[0]),\n              render_canvas/* measureAndCacheTextWidth */.Kd,\n              font,\n              cachedWidths,\n              viewRotationFromTransform ? 0 : this.viewRotation_\n            );\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, \'\', strokeKey);\n                  anchorX =\n                    /** @type {number} */ (part[2]) +\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY =\n                    baseline * label.height +\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\n                      textScale[0] -\n                    offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    render_canvas/* defaultPadding */.oB,\n                    false,\n                    feature\n                  );\n                  if (\n                    declutterTree &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, fillKey, \'\');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    render_canvas/* defaultPadding */.oB,\n                    false,\n                    feature\n                  );\n                  if (\n                    declutterTree &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (declutterTree) {\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case Instruction/* default.END_GEOMETRY */.ZP.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import("../../Feature.js").FeatureLike} */ (\n              instruction[1]\n            );\n            const result = featureCallback(feature, currentGeometry);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case Instruction/* default.FILL */.ZP.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case Instruction/* default.MOVE_TO_LINE_TO */.ZP.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = (x + 0.5) | 0;\n          roundY = (y + 0.5) | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case Instruction/* default.SET_FILL_STYLE */.ZP.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          context.fillStyle =\n            /** @type {import("../../colorlike.js").ColorLike} */ (\n              instruction[1]\n            );\n          ++i;\n          break;\n        case Instruction/* default.SET_STROKE_STYLE */.ZP.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case Instruction/* default.STROKE */.ZP.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default: // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import("../../transform.js").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import("rbush").default} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    declutterTree\n  ) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(\n      context,\n      contextScale,\n      transform,\n      this.instructions,\n      snapToPixel,\n      undefined,\n      undefined,\n      declutterTree\n    );\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../transform.js").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import("../../extent.js").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(\n    context,\n    transform,\n    viewRotation,\n    featureCallback,\n    hitExtent\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(\n      context,\n      1,\n      transform,\n      this.hitDetectionInstructions,\n      true,\n      featureCallback,\n      hitExtent\n    );\n  }\n}\n\n/* harmony default export */ var canvas_Executor = (Executor);\n\n// EXTERNAL MODULE: ./node_modules/ol/dom.js\nvar dom = __webpack_require__(68326);\n// EXTERNAL MODULE: ./node_modules/ol/obj.js\nvar obj = __webpack_require__(69374);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/ExecutorGroup.js\n/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\n\n\n\n\n\n\n\n\n/**\n * @const\n * @type {Array<import("../canvas.js").BuilderType>}\n */\nconst ORDER = [\'Polygon\', \'Circle\', \'LineString\', \'Image\', \'Text\', \'Default\'];\n\nclass ExecutorGroup {\n  /**\n   * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    renderBuffer\n  ) {\n    /**\n     * @private\n     * @type {import("../../extent.js").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Executor").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import("../../transform.js").Transform}\n     */\n    this.hitDetectionTransform_ = (0,ol_transform/* create */.Ue)();\n\n    this.createExecutors_(allInstructions);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../transform.js").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n  createExecutors_(allInstructions) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new canvas_Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import("../canvas.js").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.\n   * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = (0,ol_transform/* compose */.qC)(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1]\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = (0,dom/* createCanvasContext2D */.E4)(\n        contextSize,\n        contextSize,\n        undefined,\n        {willReadFrequently: true}\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import("../../extent.js").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = (0,extent/* createEmpty */.lJ)();\n      (0,extent/* extendCoordinate */.Wj)(hitExtent, coordinate);\n      (0,extent/* buffer */.f3)(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    let builderType;\n\n    /**\n     * @param {import("../../Feature.js").FeatureLike} feature Feature.\n     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            (builderType !== \'Image\' && builderType !== \'Text\') ||\n            declutteredFeatures.includes(feature)\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(array/* ascending */.j2);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import("../../transform.js").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    (0,flat_transform/* transform2D */.vT)(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return (0,obj/* isEmpty */.x)(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import("../../transform.js").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import("../canvas.js").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import("rbush").default} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    builderTypes,\n    declutterTree\n  ) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(array/* ascending */.j2);\n\n    // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    builderTypes = builderTypes ? builderTypes : ORDER;\n    let i, ii, j, jj, replays, replay;\n    if (declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        replay = replays[builderType];\n        if (replay !== undefined) {\n          replay.execute(\n            context,\n            contextScale,\n            transform,\n            viewRotation,\n            snapToPixel,\n            declutterTree\n          );\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nfunction getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\n/* harmony default export */ var canvas_ExecutorGroup = (ExecutorGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlEQUFlLGFBQWEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvb2wvcmVuZGVyL2NhbnZhcy9FeGVjdXRvci5qcz9kNGY1Iiwid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvb2wvcmVuZGVyL2NhbnZhcy9FeGVjdXRvckdyb3VwLmpzPzY3OTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL3JlbmRlci9jYW52YXMvRXhlY3V0b3JcbiAqL1xuaW1wb3J0IENhbnZhc0luc3RydWN0aW9uIGZyb20gJy4vSW5zdHJ1Y3Rpb24uanMnO1xuaW1wb3J0IHtURVhUX0FMSUdOfSBmcm9tICcuL1RleHRCdWlsZGVyLmpzJztcbmltcG9ydCB7XG4gIGFwcGx5IGFzIGFwcGx5VHJhbnNmb3JtLFxuICBjb21wb3NlIGFzIGNvbXBvc2VUcmFuc2Zvcm0sXG4gIGNyZWF0ZSBhcyBjcmVhdGVUcmFuc2Zvcm0sXG4gIHNldEZyb21BcnJheSBhcyB0cmFuc2Zvcm1TZXRGcm9tQXJyYXksXG59IGZyb20gJy4uLy4uL3RyYW5zZm9ybS5qcyc7XG5pbXBvcnQge2NyZWF0ZUVtcHR5LCBjcmVhdGVPclVwZGF0ZSwgaW50ZXJzZWN0c30gZnJvbSAnLi4vLi4vZXh0ZW50LmpzJztcbmltcG9ydCB7XG4gIGRlZmF1bHRQYWRkaW5nLFxuICBkZWZhdWx0VGV4dEFsaWduLFxuICBkZWZhdWx0VGV4dEJhc2VsaW5lLFxuICBkcmF3SW1hZ2VPckxhYmVsLFxuICBnZXRUZXh0RGltZW5zaW9ucyxcbiAgbWVhc3VyZUFuZENhY2hlVGV4dFdpZHRoLFxufSBmcm9tICcuLi9jYW52YXMuanMnO1xuaW1wb3J0IHtkcmF3VGV4dE9uUGF0aH0gZnJvbSAnLi4vLi4vZ2VvbS9mbGF0L3RleHRwYXRoLmpzJztcbmltcG9ydCB7ZXF1YWxzfSBmcm9tICcuLi8uLi9hcnJheS5qcyc7XG5pbXBvcnQge2xpbmVTdHJpbmdMZW5ndGh9IGZyb20gJy4uLy4uL2dlb20vZmxhdC9sZW5ndGguanMnO1xuaW1wb3J0IHt0cmFuc2Zvcm0yRH0gZnJvbSAnLi4vLi4vZ2VvbS9mbGF0L3RyYW5zZm9ybS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQkJveFxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pblggTWluaW1hbCB4LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pblkgTWluaW1hbCB5LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heFggTWF4aW1hbCB4LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heFkgTWF4aW1hbCB5XG4gKiBAcHJvcGVydHkgeyp9IHZhbHVlIFZhbHVlLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW1hZ2VPckxhYmVsRGltZW5zaW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGRyYXdJbWFnZVggRHJhd0ltYWdlWC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkcmF3SW1hZ2VZIERyYXdJbWFnZVkuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZHJhd0ltYWdlVyBEcmF3SW1hZ2VXLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRyYXdJbWFnZUggRHJhd0ltYWdlSC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvcmlnaW5YIE9yaWdpblguXG4gKiBAcHJvcGVydHkge251bWJlcn0gb3JpZ2luWSBPcmlnaW5ZLlxuICogQHByb3BlcnR5IHtBcnJheTxudW1iZXI+fSBzY2FsZSBTY2FsZS5cbiAqIEBwcm9wZXJ0eSB7QkJveH0gZGVjbHV0dGVyQm94IERlY2x1dHRlckJveC5cbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KFwiLi4vLi4vdHJhbnNmb3JtLmpzXCIpLlRyYW5zZm9ybX0gY2FudmFzVHJhbnNmb3JtIENhbnZhc1RyYW5zZm9ybS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7MDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCAxOiBudW1iZXIsIDI6IGltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5MYWJlbHxIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fEhUTUxWaWRlb0VsZW1lbnQsIDM6IEltYWdlT3JMYWJlbERpbWVuc2lvbnMsIDQ6IG51bWJlciwgNTogQXJyYXk8Kj4sIDY6IEFycmF5PCo+fX0gUmVwbGF5SW1hZ2VPckxhYmVsQXJnc1xuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEB0eXBlZGVmIHtmdW5jdGlvbihpbXBvcnQoXCIuLi8uLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlLCBpbXBvcnQoXCIuLi8uLi9nZW9tL1NpbXBsZUdlb21ldHJ5LmpzXCIpLmRlZmF1bHQpOiBUfSBGZWF0dXJlQ2FsbGJhY2tcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9leHRlbnQuanNcIikuRXh0ZW50fVxuICovXG5jb25zdCB0bXBFeHRlbnQgPSBjcmVhdGVFbXB0eSgpO1xuXG4vKiogQHR5cGUge2ltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gKi9cbmNvbnN0IHAxID0gW107XG4vKiogQHR5cGUge2ltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gKi9cbmNvbnN0IHAyID0gW107XG4vKiogQHR5cGUge2ltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gKi9cbmNvbnN0IHAzID0gW107XG4vKiogQHR5cGUge2ltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gKi9cbmNvbnN0IHA0ID0gW107XG5cbi8qKlxuICogQHBhcmFtIHtSZXBsYXlJbWFnZU9yTGFiZWxBcmdzfSByZXBsYXlJbWFnZU9yTGFiZWxBcmdzIEFyZ3VtZW50cyB0byByZXBsYXlJbWFnZU9yTGFiZWxcbiAqIEByZXR1cm4ge0JCb3h9IERlY2x1dHRlciBiYm94LlxuICovXG5mdW5jdGlvbiBnZXREZWNsdXR0ZXJCb3gocmVwbGF5SW1hZ2VPckxhYmVsQXJncykge1xuICByZXR1cm4gcmVwbGF5SW1hZ2VPckxhYmVsQXJnc1szXS5kZWNsdXR0ZXJCb3g7XG59XG5cbmNvbnN0IHJ0bFJlZ0V4ID0gbmV3IFJlZ0V4cChcbiAgLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIgKi9cbiAgJ1snICtcbiAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MDA1OTEpICsgJy0nICsgU3RyaW5nLmZyb21DaGFyQ29kZSgweDAwOGZmKSArXG4gICAgU3RyaW5nLmZyb21DaGFyQ29kZSgweDBmYjFkKSArICctJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwZmRmZikgK1xuICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwZmU3MCkgKyAnLScgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MGZlZmMpICtcbiAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MTA4MDApICsgJy0nICsgU3RyaW5nLmZyb21DaGFyQ29kZSgweDEwZmZmKSArXG4gICAgU3RyaW5nLmZyb21DaGFyQ29kZSgweDFlODAwKSArICctJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoMHgxZWZmZikgK1xuICAnXSdcbiAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciAqL1xuKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0LlxuICogQHBhcmFtIHtDYW52YXNUZXh0QWxpZ259IGFsaWduIEFsaWdubWVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGV4dCBhbGlnbm1lbnQuXG4gKi9cbmZ1bmN0aW9uIGhvcml6b250YWxUZXh0QWxpZ24odGV4dCwgYWxpZ24pIHtcbiAgaWYgKChhbGlnbiA9PT0gJ3N0YXJ0JyB8fCBhbGlnbiA9PT0gJ2VuZCcpICYmICFydGxSZWdFeC50ZXN0KHRleHQpKSB7XG4gICAgYWxpZ24gPSBhbGlnbiA9PT0gJ3N0YXJ0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIH1cbiAgcmV0dXJuIFRFWFRfQUxJR05bYWxpZ25dO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYWNjIEFjY3VtdWxhdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGxpbmUgTGluZSBvZiB0ZXh0LlxuICogQHBhcmFtIHtudW1iZXJ9IGkgSW5kZXhcbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZz59IEFjY3VtdWxhdG9yLlxuICovXG5mdW5jdGlvbiBjcmVhdGVUZXh0Q2h1bmtzKGFjYywgbGluZSwgaSkge1xuICBpZiAoaSA+IDApIHtcbiAgICBhY2MucHVzaCgnXFxuJywgJycpO1xuICB9XG4gIGFjYy5wdXNoKGxpbmUsICcnKTtcbiAgcmV0dXJuIGFjYztcbn1cblxuY2xhc3MgRXhlY3V0b3Ige1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJlc29sdXRpb24gUmVzb2x1dGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsUmF0aW8gUGl4ZWwgcmF0aW8uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3ZlcmxhcHMgVGhlIHJlcGxheSBjYW4gaGF2ZSBvdmVybGFwcGluZyBnZW9tZXRyaWVzLlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5TZXJpYWxpemFibGVJbnN0cnVjdGlvbnN9IGluc3RydWN0aW9ucyBUaGUgc2VyaWFsaXphYmxlIGluc3RydWN0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IocmVzb2x1dGlvbiwgcGl4ZWxSYXRpbywgb3ZlcmxhcHMsIGluc3RydWN0aW9ucykge1xuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm92ZXJsYXBzID0gb3ZlcmxhcHM7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuXG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBjb25zdFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5hbGlnbkZpbGxfO1xuXG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEB0eXBlIHtBcnJheTwqPn1cbiAgICAgKi9cbiAgICB0aGlzLmluc3RydWN0aW9ucyA9IGluc3RydWN0aW9ucy5pbnN0cnVjdGlvbnM7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge0FycmF5PG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5jb29yZGluYXRlcyA9IGluc3RydWN0aW9ucy5jb29yZGluYXRlcztcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLGltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZXxBcnJheTxpbXBvcnQoXCIuLi8uLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGU+fEFycmF5PEFycmF5PGltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZT4+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNvb3JkaW5hdGVDYWNoZV8gPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUgeyFpbXBvcnQoXCIuLi8uLi90cmFuc2Zvcm0uanNcIikuVHJhbnNmb3JtfVxuICAgICAqL1xuICAgIHRoaXMucmVuZGVyZWRUcmFuc2Zvcm1fID0gY3JlYXRlVHJhbnNmb3JtKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge0FycmF5PCo+fVxuICAgICAqL1xuICAgIHRoaXMuaGl0RGV0ZWN0aW9uSW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zLmhpdERldGVjdGlvbkluc3RydWN0aW9ucztcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0FycmF5PG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5waXhlbENvb3JkaW5hdGVzXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy52aWV3Um90YXRpb25fID0gMDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgaW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkZpbGxTdGF0ZT59XG4gICAgICovXG4gICAgdGhpcy5maWxsU3RhdGVzID0gaW5zdHJ1Y3Rpb25zLmZpbGxTdGF0ZXMgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIGltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5TdHJva2VTdGF0ZT59XG4gICAgICovXG4gICAgdGhpcy5zdHJva2VTdGF0ZXMgPSBpbnN0cnVjdGlvbnMuc3Ryb2tlU3RhdGVzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuVGV4dFN0YXRlPn1cbiAgICAgKi9cbiAgICB0aGlzLnRleHRTdGF0ZXMgPSBpbnN0cnVjdGlvbnMudGV4dFN0YXRlcyB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsIE9iamVjdDxzdHJpbmcsIG51bWJlcj4+fVxuICAgICAqL1xuICAgIHRoaXMud2lkdGhzXyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgaW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkxhYmVsPn1cbiAgICAgKi9cbiAgICB0aGlzLmxhYmVsc18gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSB0ZXh0IFRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0S2V5IFRleHQgc3R5bGUga2V5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsbEtleSBGaWxsIHN0eWxlIGtleS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cm9rZUtleSBTdHJva2Ugc3R5bGUga2V5LlxuICAgKiBAcmV0dXJuIHtpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuTGFiZWx9IExhYmVsLlxuICAgKi9cbiAgY3JlYXRlTGFiZWwodGV4dCwgdGV4dEtleSwgZmlsbEtleSwgc3Ryb2tlS2V5KSB7XG4gICAgY29uc3Qga2V5ID0gdGV4dCArIHRleHRLZXkgKyBmaWxsS2V5ICsgc3Ryb2tlS2V5O1xuICAgIGlmICh0aGlzLmxhYmVsc19ba2V5XSkge1xuICAgICAgcmV0dXJuIHRoaXMubGFiZWxzX1trZXldO1xuICAgIH1cbiAgICBjb25zdCBzdHJva2VTdGF0ZSA9IHN0cm9rZUtleSA/IHRoaXMuc3Ryb2tlU3RhdGVzW3N0cm9rZUtleV0gOiBudWxsO1xuICAgIGNvbnN0IGZpbGxTdGF0ZSA9IGZpbGxLZXkgPyB0aGlzLmZpbGxTdGF0ZXNbZmlsbEtleV0gOiBudWxsO1xuICAgIGNvbnN0IHRleHRTdGF0ZSA9IHRoaXMudGV4dFN0YXRlc1t0ZXh0S2V5XTtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gdGhpcy5waXhlbFJhdGlvO1xuICAgIGNvbnN0IHNjYWxlID0gW1xuICAgICAgdGV4dFN0YXRlLnNjYWxlWzBdICogcGl4ZWxSYXRpbyxcbiAgICAgIHRleHRTdGF0ZS5zY2FsZVsxXSAqIHBpeGVsUmF0aW8sXG4gICAgXTtcbiAgICBjb25zdCB0ZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGV4dCk7XG4gICAgY29uc3QgYWxpZ24gPSB0ZXh0U3RhdGUuanVzdGlmeVxuICAgICAgPyBURVhUX0FMSUdOW3RleHRTdGF0ZS5qdXN0aWZ5XVxuICAgICAgOiBob3Jpem9udGFsVGV4dEFsaWduKFxuICAgICAgICAgIEFycmF5LmlzQXJyYXkodGV4dCkgPyB0ZXh0WzBdIDogdGV4dCxcbiAgICAgICAgICB0ZXh0U3RhdGUudGV4dEFsaWduIHx8IGRlZmF1bHRUZXh0QWxpZ25cbiAgICAgICAgKTtcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9XG4gICAgICBzdHJva2VLZXkgJiYgc3Ryb2tlU3RhdGUubGluZVdpZHRoID8gc3Ryb2tlU3RhdGUubGluZVdpZHRoIDogMDtcblxuICAgIGNvbnN0IGNodW5rcyA9IHRleHRJc0FycmF5XG4gICAgICA/IHRleHRcbiAgICAgIDogdGV4dC5zcGxpdCgnXFxuJykucmVkdWNlKGNyZWF0ZVRleHRDaHVua3MsIFtdKTtcblxuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCB3aWR0aHMsIGhlaWdodHMsIGxpbmVXaWR0aHN9ID0gZ2V0VGV4dERpbWVuc2lvbnMoXG4gICAgICB0ZXh0U3RhdGUsXG4gICAgICBjaHVua3NcbiAgICApO1xuICAgIGNvbnN0IHJlbmRlcldpZHRoID0gd2lkdGggKyBzdHJva2VXaWR0aDtcbiAgICBjb25zdCBjb250ZXh0SW5zdHJ1Y3Rpb25zID0gW107XG4gICAgLy8gbWFrZSBjYW52YXMgMiBwaXhlbHMgd2lkZXIgdG8gYWNjb3VudCBmb3IgaXRhbGljIHRleHQgd2lkdGggbWVhc3VyZW1lbnQgZXJyb3JzXG4gICAgY29uc3QgdyA9IChyZW5kZXJXaWR0aCArIDIpICogc2NhbGVbMF07XG4gICAgY29uc3QgaCA9IChoZWlnaHQgKyBzdHJva2VXaWR0aCkgKiBzY2FsZVsxXTtcbiAgICAvKiogQHR5cGUge2ltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5MYWJlbH0gKi9cbiAgICBjb25zdCBsYWJlbCA9IHtcbiAgICAgIHdpZHRoOiB3IDwgMCA/IE1hdGguZmxvb3IodykgOiBNYXRoLmNlaWwodyksXG4gICAgICBoZWlnaHQ6IGggPCAwID8gTWF0aC5mbG9vcihoKSA6IE1hdGguY2VpbChoKSxcbiAgICAgIGNvbnRleHRJbnN0cnVjdGlvbnM6IGNvbnRleHRJbnN0cnVjdGlvbnMsXG4gICAgfTtcbiAgICBpZiAoc2NhbGVbMF0gIT0gMSB8fCBzY2FsZVsxXSAhPSAxKSB7XG4gICAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ3NjYWxlJywgc2NhbGUpO1xuICAgIH1cbiAgICBpZiAoc3Ryb2tlS2V5KSB7XG4gICAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ3N0cm9rZVN0eWxlJywgc3Ryb2tlU3RhdGUuc3Ryb2tlU3R5bGUpO1xuICAgICAgY29udGV4dEluc3RydWN0aW9ucy5wdXNoKCdsaW5lV2lkdGgnLCBzdHJva2VXaWR0aCk7XG4gICAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ2xpbmVDYXAnLCBzdHJva2VTdGF0ZS5saW5lQ2FwKTtcbiAgICAgIGNvbnRleHRJbnN0cnVjdGlvbnMucHVzaCgnbGluZUpvaW4nLCBzdHJva2VTdGF0ZS5saW5lSm9pbik7XG4gICAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ21pdGVyTGltaXQnLCBzdHJva2VTdGF0ZS5taXRlckxpbWl0KTtcbiAgICAgIGNvbnRleHRJbnN0cnVjdGlvbnMucHVzaCgnc2V0TGluZURhc2gnLCBbc3Ryb2tlU3RhdGUubGluZURhc2hdKTtcbiAgICAgIGNvbnRleHRJbnN0cnVjdGlvbnMucHVzaCgnbGluZURhc2hPZmZzZXQnLCBzdHJva2VTdGF0ZS5saW5lRGFzaE9mZnNldCk7XG4gICAgfVxuICAgIGlmIChmaWxsS2V5KSB7XG4gICAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ2ZpbGxTdHlsZScsIGZpbGxTdGF0ZS5maWxsU3R5bGUpO1xuICAgIH1cbiAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ3RleHRCYXNlbGluZScsICdtaWRkbGUnKTtcbiAgICBjb250ZXh0SW5zdHJ1Y3Rpb25zLnB1c2goJ3RleHRBbGlnbicsICdjZW50ZXInKTtcbiAgICBjb25zdCBsZWZ0UmlnaHQgPSAwLjUgLSBhbGlnbjtcbiAgICBsZXQgeCA9IGFsaWduICogcmVuZGVyV2lkdGggKyBsZWZ0UmlnaHQgKiBzdHJva2VXaWR0aDtcbiAgICBjb25zdCBzdHJva2VJbnN0cnVjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBmaWxsSW5zdHJ1Y3Rpb25zID0gW107XG4gICAgbGV0IGxpbmVIZWlnaHQgPSAwO1xuICAgIGxldCBsaW5lT2Zmc2V0ID0gMDtcbiAgICBsZXQgd2lkdGhIZWlnaHRJbmRleCA9IDA7XG4gICAgbGV0IGxpbmVXaWR0aEluZGV4ID0gMDtcbiAgICBsZXQgcHJldmlvdXNGb250O1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNodW5rcy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gY2h1bmtzW2ldO1xuICAgICAgaWYgKHRleHQgPT09ICdcXG4nKSB7XG4gICAgICAgIGxpbmVPZmZzZXQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgbGluZUhlaWdodCA9IDA7XG4gICAgICAgIHggPSBhbGlnbiAqIHJlbmRlcldpZHRoICsgbGVmdFJpZ2h0ICogc3Ryb2tlV2lkdGg7XG4gICAgICAgICsrbGluZVdpZHRoSW5kZXg7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgZm9udCA9IGNodW5rc1tpICsgMV0gfHwgdGV4dFN0YXRlLmZvbnQ7XG4gICAgICBpZiAoZm9udCAhPT0gcHJldmlvdXNGb250KSB7XG4gICAgICAgIGlmIChzdHJva2VLZXkpIHtcbiAgICAgICAgICBzdHJva2VJbnN0cnVjdGlvbnMucHVzaCgnZm9udCcsIGZvbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxsS2V5KSB7XG4gICAgICAgICAgZmlsbEluc3RydWN0aW9ucy5wdXNoKCdmb250JywgZm9udCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNGb250ID0gZm9udDtcbiAgICAgIH1cbiAgICAgIGxpbmVIZWlnaHQgPSBNYXRoLm1heChsaW5lSGVpZ2h0LCBoZWlnaHRzW3dpZHRoSGVpZ2h0SW5kZXhdKTtcbiAgICAgIGNvbnN0IGZpbGxTdHJva2VBcmdzID0gW1xuICAgICAgICB0ZXh0LFxuICAgICAgICB4ICtcbiAgICAgICAgICBsZWZ0UmlnaHQgKiB3aWR0aHNbd2lkdGhIZWlnaHRJbmRleF0gK1xuICAgICAgICAgIGFsaWduICogKHdpZHRoc1t3aWR0aEhlaWdodEluZGV4XSAtIGxpbmVXaWR0aHNbbGluZVdpZHRoSW5kZXhdKSxcbiAgICAgICAgMC41ICogKHN0cm9rZVdpZHRoICsgbGluZUhlaWdodCkgKyBsaW5lT2Zmc2V0LFxuICAgICAgXTtcbiAgICAgIHggKz0gd2lkdGhzW3dpZHRoSGVpZ2h0SW5kZXhdO1xuICAgICAgaWYgKHN0cm9rZUtleSkge1xuICAgICAgICBzdHJva2VJbnN0cnVjdGlvbnMucHVzaCgnc3Ryb2tlVGV4dCcsIGZpbGxTdHJva2VBcmdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWxsS2V5KSB7XG4gICAgICAgIGZpbGxJbnN0cnVjdGlvbnMucHVzaCgnZmlsbFRleHQnLCBmaWxsU3Ryb2tlQXJncyk7XG4gICAgICB9XG4gICAgICArK3dpZHRoSGVpZ2h0SW5kZXg7XG4gICAgfVxuICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGNvbnRleHRJbnN0cnVjdGlvbnMsIHN0cm9rZUluc3RydWN0aW9ucyk7XG4gICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY29udGV4dEluc3RydWN0aW9ucywgZmlsbEluc3RydWN0aW9ucyk7XG4gICAgdGhpcy5sYWJlbHNfW2tleV0gPSBsYWJlbDtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgQ29udGV4dC5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGV9IHAxIDFzdCBwb2ludCBvZiB0aGUgYmFja2dyb3VuZCBib3guXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfSBwMiAybmQgcG9pbnQgb2YgdGhlIGJhY2tncm91bmQgYm94LlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gcDMgM3JkIHBvaW50IG9mIHRoZSBiYWNrZ3JvdW5kIGJveC5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGV9IHA0IDR0aCBwb2ludCBvZiB0aGUgYmFja2dyb3VuZCBib3guXG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IGZpbGxJbnN0cnVjdGlvbiBGaWxsIGluc3RydWN0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBzdHJva2VJbnN0cnVjdGlvbiBTdHJva2UgaW5zdHJ1Y3Rpb24uXG4gICAqL1xuICByZXBsYXlUZXh0QmFja2dyb3VuZF8oXG4gICAgY29udGV4dCxcbiAgICBwMSxcbiAgICBwMixcbiAgICBwMyxcbiAgICBwNCxcbiAgICBmaWxsSW5zdHJ1Y3Rpb24sXG4gICAgc3Ryb2tlSW5zdHJ1Y3Rpb25cbiAgKSB7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0Lm1vdmVUby5hcHBseShjb250ZXh0LCBwMSk7XG4gICAgY29udGV4dC5saW5lVG8uYXBwbHkoY29udGV4dCwgcDIpO1xuICAgIGNvbnRleHQubGluZVRvLmFwcGx5KGNvbnRleHQsIHAzKTtcbiAgICBjb250ZXh0LmxpbmVUby5hcHBseShjb250ZXh0LCBwNCk7XG4gICAgY29udGV4dC5saW5lVG8uYXBwbHkoY29udGV4dCwgcDEpO1xuICAgIGlmIChmaWxsSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHRoaXMuYWxpZ25GaWxsXyA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGZpbGxJbnN0cnVjdGlvblsyXSk7XG4gICAgICB0aGlzLmZpbGxfKGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoc3Ryb2tlSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHRoaXMuc2V0U3Ryb2tlU3R5bGVfKFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICAvKiogQHR5cGUge0FycmF5PCo+fSAqLyAoc3Ryb2tlSW5zdHJ1Y3Rpb24pXG4gICAgICApO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNoZWV0V2lkdGggV2lkdGggb2YgdGhlIHNwcml0ZSBzaGVldC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNoZWV0SGVpZ2h0IEhlaWdodCBvZiB0aGUgc3ByaXRlIHNoZWV0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWCBYLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWSBZLlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5jaG9yWCBBbmNob3IgWC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuY2hvclkgQW5jaG9yIFkuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcmlnaW5YIE9yaWdpbiBYLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luWSBPcmlnaW4gWS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIFJvdGF0aW9uLlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL3NpemUuanNcIikuU2l6ZX0gc2NhbGUgU2NhbGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc25hcFRvUGl4ZWwgU25hcCB0byBwaXhlbC5cbiAgICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBwYWRkaW5nIFBhZGRpbmcuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsbFN0cm9rZSBCYWNrZ3JvdW5kIGZpbGwgb3Igc3Ryb2tlLlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAgICogQHJldHVybiB7SW1hZ2VPckxhYmVsRGltZW5zaW9uc30gRGltZW5zaW9ucyBmb3IgcG9zaXRpb25pbmcgYW5kIGRlY2x1dHRlcmluZyB0aGUgaW1hZ2Ugb3IgbGFiZWwuXG4gICAqL1xuICBjYWxjdWxhdGVJbWFnZU9yTGFiZWxEaW1lbnNpb25zXyhcbiAgICBzaGVldFdpZHRoLFxuICAgIHNoZWV0SGVpZ2h0LFxuICAgIGNlbnRlclgsXG4gICAgY2VudGVyWSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgYW5jaG9yWCxcbiAgICBhbmNob3JZLFxuICAgIG9yaWdpblgsXG4gICAgb3JpZ2luWSxcbiAgICByb3RhdGlvbixcbiAgICBzY2FsZSxcbiAgICBzbmFwVG9QaXhlbCxcbiAgICBwYWRkaW5nLFxuICAgIGZpbGxTdHJva2UsXG4gICAgZmVhdHVyZVxuICApIHtcbiAgICBhbmNob3JYICo9IHNjYWxlWzBdO1xuICAgIGFuY2hvclkgKj0gc2NhbGVbMV07XG4gICAgbGV0IHggPSBjZW50ZXJYIC0gYW5jaG9yWDtcbiAgICBsZXQgeSA9IGNlbnRlclkgLSBhbmNob3JZO1xuXG4gICAgY29uc3QgdyA9IHdpZHRoICsgb3JpZ2luWCA+IHNoZWV0V2lkdGggPyBzaGVldFdpZHRoIC0gb3JpZ2luWCA6IHdpZHRoO1xuICAgIGNvbnN0IGggPSBoZWlnaHQgKyBvcmlnaW5ZID4gc2hlZXRIZWlnaHQgPyBzaGVldEhlaWdodCAtIG9yaWdpblkgOiBoZWlnaHQ7XG4gICAgY29uc3QgYm94VyA9IHBhZGRpbmdbM10gKyB3ICogc2NhbGVbMF0gKyBwYWRkaW5nWzFdO1xuICAgIGNvbnN0IGJveEggPSBwYWRkaW5nWzBdICsgaCAqIHNjYWxlWzFdICsgcGFkZGluZ1syXTtcbiAgICBjb25zdCBib3hYID0geCAtIHBhZGRpbmdbM107XG4gICAgY29uc3QgYm94WSA9IHkgLSBwYWRkaW5nWzBdO1xuXG4gICAgaWYgKGZpbGxTdHJva2UgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgIHAxWzBdID0gYm94WDtcbiAgICAgIHA0WzBdID0gYm94WDtcbiAgICAgIHAxWzFdID0gYm94WTtcbiAgICAgIHAyWzFdID0gYm94WTtcbiAgICAgIHAyWzBdID0gYm94WCArIGJveFc7XG4gICAgICBwM1swXSA9IHAyWzBdO1xuICAgICAgcDNbMV0gPSBib3hZICsgYm94SDtcbiAgICAgIHA0WzFdID0gcDNbMV07XG4gICAgfVxuXG4gICAgbGV0IHRyYW5zZm9ybTtcbiAgICBpZiAocm90YXRpb24gIT09IDApIHtcbiAgICAgIHRyYW5zZm9ybSA9IGNvbXBvc2VUcmFuc2Zvcm0oXG4gICAgICAgIGNyZWF0ZVRyYW5zZm9ybSgpLFxuICAgICAgICBjZW50ZXJYLFxuICAgICAgICBjZW50ZXJZLFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICByb3RhdGlvbixcbiAgICAgICAgLWNlbnRlclgsXG4gICAgICAgIC1jZW50ZXJZXG4gICAgICApO1xuXG4gICAgICBhcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0sIHAxKTtcbiAgICAgIGFwcGx5VHJhbnNmb3JtKHRyYW5zZm9ybSwgcDIpO1xuICAgICAgYXBwbHlUcmFuc2Zvcm0odHJhbnNmb3JtLCBwMyk7XG4gICAgICBhcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0sIHA0KTtcbiAgICAgIGNyZWF0ZU9yVXBkYXRlKFxuICAgICAgICBNYXRoLm1pbihwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksXG4gICAgICAgIE1hdGgubWluKHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKSxcbiAgICAgICAgTWF0aC5tYXgocDFbMF0sIHAyWzBdLCBwM1swXSwgcDRbMF0pLFxuICAgICAgICBNYXRoLm1heChwMVsxXSwgcDJbMV0sIHAzWzFdLCBwNFsxXSksXG4gICAgICAgIHRtcEV4dGVudFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlT3JVcGRhdGUoXG4gICAgICAgIE1hdGgubWluKGJveFgsIGJveFggKyBib3hXKSxcbiAgICAgICAgTWF0aC5taW4oYm94WSwgYm94WSArIGJveEgpLFxuICAgICAgICBNYXRoLm1heChib3hYLCBib3hYICsgYm94VyksXG4gICAgICAgIE1hdGgubWF4KGJveFksIGJveFkgKyBib3hIKSxcbiAgICAgICAgdG1wRXh0ZW50XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoc25hcFRvUGl4ZWwpIHtcbiAgICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgICAgeSA9IE1hdGgucm91bmQoeSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBkcmF3SW1hZ2VYOiB4LFxuICAgICAgZHJhd0ltYWdlWTogeSxcbiAgICAgIGRyYXdJbWFnZVc6IHcsXG4gICAgICBkcmF3SW1hZ2VIOiBoLFxuICAgICAgb3JpZ2luWDogb3JpZ2luWCxcbiAgICAgIG9yaWdpblk6IG9yaWdpblksXG4gICAgICBkZWNsdXR0ZXJCb3g6IHtcbiAgICAgICAgbWluWDogdG1wRXh0ZW50WzBdLFxuICAgICAgICBtaW5ZOiB0bXBFeHRlbnRbMV0sXG4gICAgICAgIG1heFg6IHRtcEV4dGVudFsyXSxcbiAgICAgICAgbWF4WTogdG1wRXh0ZW50WzNdLFxuICAgICAgICB2YWx1ZTogZmVhdHVyZSxcbiAgICAgIH0sXG4gICAgICBjYW52YXNUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IENvbnRleHQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb250ZXh0U2NhbGUgU2NhbGUgb2YgdGhlIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkxhYmVsfEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudH0gaW1hZ2VPckxhYmVsIEltYWdlLlxuICAgKiBAcGFyYW0ge0ltYWdlT3JMYWJlbERpbWVuc2lvbnN9IGRpbWVuc2lvbnMgRGltZW5zaW9ucy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgT3BhY2l0eS5cbiAgICogQHBhcmFtIHtBcnJheTwqPn0gZmlsbEluc3RydWN0aW9uIEZpbGwgaW5zdHJ1Y3Rpb24uXG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IHN0cm9rZUluc3RydWN0aW9uIFN0cm9rZSBpbnN0cnVjdGlvbi5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGltYWdlIG9yIGxhYmVsIHdhcyByZW5kZXJlZC5cbiAgICovXG4gIHJlcGxheUltYWdlT3JMYWJlbF8oXG4gICAgY29udGV4dCxcbiAgICBjb250ZXh0U2NhbGUsXG4gICAgaW1hZ2VPckxhYmVsLFxuICAgIGRpbWVuc2lvbnMsXG4gICAgb3BhY2l0eSxcbiAgICBmaWxsSW5zdHJ1Y3Rpb24sXG4gICAgc3Ryb2tlSW5zdHJ1Y3Rpb25cbiAgKSB7XG4gICAgY29uc3QgZmlsbFN0cm9rZSA9ICEhKGZpbGxJbnN0cnVjdGlvbiB8fCBzdHJva2VJbnN0cnVjdGlvbik7XG5cbiAgICBjb25zdCBib3ggPSBkaW1lbnNpb25zLmRlY2x1dHRlckJveDtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICBjb25zdCBzdHJva2VQYWRkaW5nID0gc3Ryb2tlSW5zdHJ1Y3Rpb25cbiAgICAgID8gKHN0cm9rZUluc3RydWN0aW9uWzJdICogZGltZW5zaW9ucy5zY2FsZVswXSkgLyAyXG4gICAgICA6IDA7XG4gICAgY29uc3QgaW50ZXJzZWN0cyA9XG4gICAgICBib3gubWluWCAtIHN0cm9rZVBhZGRpbmcgPD0gY2FudmFzLndpZHRoIC8gY29udGV4dFNjYWxlICYmXG4gICAgICBib3gubWF4WCArIHN0cm9rZVBhZGRpbmcgPj0gMCAmJlxuICAgICAgYm94Lm1pblkgLSBzdHJva2VQYWRkaW5nIDw9IGNhbnZhcy5oZWlnaHQgLyBjb250ZXh0U2NhbGUgJiZcbiAgICAgIGJveC5tYXhZICsgc3Ryb2tlUGFkZGluZyA+PSAwO1xuXG4gICAgaWYgKGludGVyc2VjdHMpIHtcbiAgICAgIGlmIChmaWxsU3Ryb2tlKSB7XG4gICAgICAgIHRoaXMucmVwbGF5VGV4dEJhY2tncm91bmRfKFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgcDEsXG4gICAgICAgICAgcDIsXG4gICAgICAgICAgcDMsXG4gICAgICAgICAgcDQsXG4gICAgICAgICAgLyoqIEB0eXBlIHtBcnJheTwqPn0gKi8gKGZpbGxJbnN0cnVjdGlvbiksXG4gICAgICAgICAgLyoqIEB0eXBlIHtBcnJheTwqPn0gKi8gKHN0cm9rZUluc3RydWN0aW9uKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZHJhd0ltYWdlT3JMYWJlbChcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgZGltZW5zaW9ucy5jYW52YXNUcmFuc2Zvcm0sXG4gICAgICAgIG9wYWNpdHksXG4gICAgICAgIGltYWdlT3JMYWJlbCxcbiAgICAgICAgZGltZW5zaW9ucy5vcmlnaW5YLFxuICAgICAgICBkaW1lbnNpb25zLm9yaWdpblksXG4gICAgICAgIGRpbWVuc2lvbnMuZHJhd0ltYWdlVyxcbiAgICAgICAgZGltZW5zaW9ucy5kcmF3SW1hZ2VILFxuICAgICAgICBkaW1lbnNpb25zLmRyYXdJbWFnZVgsXG4gICAgICAgIGRpbWVuc2lvbnMuZHJhd0ltYWdlWSxcbiAgICAgICAgZGltZW5zaW9ucy5zY2FsZVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgQ29udGV4dC5cbiAgICovXG4gIGZpbGxfKGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy5hbGlnbkZpbGxfKSB7XG4gICAgICBjb25zdCBvcmlnaW4gPSBhcHBseVRyYW5zZm9ybSh0aGlzLnJlbmRlcmVkVHJhbnNmb3JtXywgWzAsIDBdKTtcbiAgICAgIGNvbnN0IHJlcGVhdFNpemUgPSA1MTIgKiB0aGlzLnBpeGVsUmF0aW87XG4gICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgIGNvbnRleHQudHJhbnNsYXRlKG9yaWdpblswXSAlIHJlcGVhdFNpemUsIG9yaWdpblsxXSAlIHJlcGVhdFNpemUpO1xuICAgICAgY29udGV4dC5yb3RhdGUodGhpcy52aWV3Um90YXRpb25fKTtcbiAgICB9XG4gICAgY29udGV4dC5maWxsKCk7XG4gICAgaWYgKHRoaXMuYWxpZ25GaWxsXykge1xuICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IENvbnRleHQuXG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IGluc3RydWN0aW9uIEluc3RydWN0aW9uLlxuICAgKi9cbiAgc2V0U3Ryb2tlU3R5bGVfKGNvbnRleHQsIGluc3RydWN0aW9uKSB7XG4gICAgY29udGV4dFsnc3Ryb2tlU3R5bGUnXSA9XG4gICAgICAvKiogQHR5cGUge2ltcG9ydChcIi4uLy4uL2NvbG9ybGlrZS5qc1wiKS5Db2xvckxpa2V9ICovIChpbnN0cnVjdGlvblsxXSk7XG4gICAgY29udGV4dC5saW5lV2lkdGggPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzJdKTtcbiAgICBjb250ZXh0LmxpbmVDYXAgPSAvKiogQHR5cGUge0NhbnZhc0xpbmVDYXB9ICovIChpbnN0cnVjdGlvblszXSk7XG4gICAgY29udGV4dC5saW5lSm9pbiA9IC8qKiBAdHlwZSB7Q2FudmFzTGluZUpvaW59ICovIChpbnN0cnVjdGlvbls0XSk7XG4gICAgY29udGV4dC5taXRlckxpbWl0ID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls1XSk7XG4gICAgY29udGV4dC5saW5lRGFzaE9mZnNldCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bN10pO1xuICAgIGNvbnRleHQuc2V0TGluZURhc2goLyoqIEB0eXBlIHtBcnJheTxudW1iZXI+fSAqLyAoaW5zdHJ1Y3Rpb25bNl0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSB0ZXh0IFRoZSB0ZXh0IHRvIGRyYXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0S2V5IFRoZSBrZXkgb2YgdGhlIHRleHQgc3RhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJva2VLZXkgVGhlIGtleSBmb3IgdGhlIHN0cm9rZSBzdGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGxLZXkgVGhlIGtleSBmb3IgdGhlIGZpbGwgc3RhdGUuXG4gICAqIEByZXR1cm4ge3tsYWJlbDogaW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkxhYmVsLCBhbmNob3JYOiBudW1iZXIsIGFuY2hvclk6IG51bWJlcn19IFRoZSB0ZXh0IGltYWdlIGFuZCBpdHMgYW5jaG9yLlxuICAgKi9cbiAgZHJhd0xhYmVsV2l0aFBvaW50UGxhY2VtZW50Xyh0ZXh0LCB0ZXh0S2V5LCBzdHJva2VLZXksIGZpbGxLZXkpIHtcbiAgICBjb25zdCB0ZXh0U3RhdGUgPSB0aGlzLnRleHRTdGF0ZXNbdGV4dEtleV07XG5cbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuY3JlYXRlTGFiZWwodGV4dCwgdGV4dEtleSwgZmlsbEtleSwgc3Ryb2tlS2V5KTtcblxuICAgIGNvbnN0IHN0cm9rZVN0YXRlID0gdGhpcy5zdHJva2VTdGF0ZXNbc3Ryb2tlS2V5XTtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gdGhpcy5waXhlbFJhdGlvO1xuICAgIGNvbnN0IGFsaWduID0gaG9yaXpvbnRhbFRleHRBbGlnbihcbiAgICAgIEFycmF5LmlzQXJyYXkodGV4dCkgPyB0ZXh0WzBdIDogdGV4dCxcbiAgICAgIHRleHRTdGF0ZS50ZXh0QWxpZ24gfHwgZGVmYXVsdFRleHRBbGlnblxuICAgICk7XG4gICAgY29uc3QgYmFzZWxpbmUgPSBURVhUX0FMSUdOW3RleHRTdGF0ZS50ZXh0QmFzZWxpbmUgfHwgZGVmYXVsdFRleHRCYXNlbGluZV07XG4gICAgY29uc3Qgc3Ryb2tlV2lkdGggPVxuICAgICAgc3Ryb2tlU3RhdGUgJiYgc3Ryb2tlU3RhdGUubGluZVdpZHRoID8gc3Ryb2tlU3RhdGUubGluZVdpZHRoIDogMDtcblxuICAgIC8vIFJlbW92ZSB0aGUgMiBwaXhlbHMgd2UgYWRkZWQgaW4gY3JlYXRlTGFiZWwoKSBmb3IgdGhlIGFuY2hvclxuICAgIGNvbnN0IHdpZHRoID0gbGFiZWwud2lkdGggLyBwaXhlbFJhdGlvIC0gMiAqIHRleHRTdGF0ZS5zY2FsZVswXTtcbiAgICBjb25zdCBhbmNob3JYID0gYWxpZ24gKiB3aWR0aCArIDIgKiAoMC41IC0gYWxpZ24pICogc3Ryb2tlV2lkdGg7XG4gICAgY29uc3QgYW5jaG9yWSA9XG4gICAgICAoYmFzZWxpbmUgKiBsYWJlbC5oZWlnaHQpIC8gcGl4ZWxSYXRpbyArXG4gICAgICAyICogKDAuNSAtIGJhc2VsaW5lKSAqIHN0cm9rZVdpZHRoO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGFuY2hvclg6IGFuY2hvclgsXG4gICAgICBhbmNob3JZOiBhbmNob3JZLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgQ29udGV4dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbnRleHRTY2FsZSBTY2FsZSBvZiB0aGUgY29udGV4dC5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi90cmFuc2Zvcm0uanNcIikuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gVHJhbnNmb3JtLlxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBpbnN0cnVjdGlvbnMgSW5zdHJ1Y3Rpb25zIGFycmF5LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNuYXBUb1BpeGVsIFNuYXAgcG9pbnQgc3ltYm9scyBhbmQgdGV4dCB0byBpbnRlZ2VyIHBpeGVscy5cbiAgICogQHBhcmFtIHtGZWF0dXJlQ2FsbGJhY2s8VD59IFtmZWF0dXJlQ2FsbGJhY2tdIEZlYXR1cmUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vZXh0ZW50LmpzXCIpLkV4dGVudH0gW2hpdEV4dGVudF0gT25seSBjaGVja1xuICAgKiAgICAgZmVhdHVyZXMgdGhhdCBpbnRlcnNlY3QgdGhpcyBleHRlbnQuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwicmJ1c2hcIikuZGVmYXVsdH0gW2RlY2x1dHRlclRyZWVdIERlY2x1dHRlciB0cmVlLlxuICAgKiBAcmV0dXJuIHtUfHVuZGVmaW5lZH0gQ2FsbGJhY2sgcmVzdWx0LlxuICAgKiBAdGVtcGxhdGUgVFxuICAgKi9cbiAgZXhlY3V0ZV8oXG4gICAgY29udGV4dCxcbiAgICBjb250ZXh0U2NhbGUsXG4gICAgdHJhbnNmb3JtLFxuICAgIGluc3RydWN0aW9ucyxcbiAgICBzbmFwVG9QaXhlbCxcbiAgICBmZWF0dXJlQ2FsbGJhY2ssXG4gICAgaGl0RXh0ZW50LFxuICAgIGRlY2x1dHRlclRyZWVcbiAgKSB7XG4gICAgLyoqIEB0eXBlIHtBcnJheTxudW1iZXI+fSAqL1xuICAgIGxldCBwaXhlbENvb3JkaW5hdGVzO1xuICAgIGlmICh0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfICYmIGVxdWFscyh0cmFuc2Zvcm0sIHRoaXMucmVuZGVyZWRUcmFuc2Zvcm1fKSkge1xuICAgICAgcGl4ZWxDb29yZGluYXRlcyA9IHRoaXMucGl4ZWxDb29yZGluYXRlc187XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5waXhlbENvb3JkaW5hdGVzXykge1xuICAgICAgICB0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfID0gW107XG4gICAgICB9XG4gICAgICBwaXhlbENvb3JkaW5hdGVzID0gdHJhbnNmb3JtMkQoXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZXMsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoLFxuICAgICAgICAyLFxuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIHRoaXMucGl4ZWxDb29yZGluYXRlc19cbiAgICAgICk7XG4gICAgICB0cmFuc2Zvcm1TZXRGcm9tQXJyYXkodGhpcy5yZW5kZXJlZFRyYW5zZm9ybV8sIHRyYW5zZm9ybSk7XG4gICAgfVxuICAgIGxldCBpID0gMDsgLy8gaW5zdHJ1Y3Rpb24gaW5kZXhcbiAgICBjb25zdCBpaSA9IGluc3RydWN0aW9ucy5sZW5ndGg7IC8vIGVuZCBvZiBpbnN0cnVjdGlvbnNcbiAgICBsZXQgZCA9IDA7IC8vIGRhdGEgaW5kZXhcbiAgICBsZXQgZGQ7IC8vIGVuZCBvZiBwZXItaW5zdHJ1Y3Rpb24gZGF0YVxuICAgIGxldCBhbmNob3JYLFxuICAgICAgYW5jaG9yWSxcbiAgICAgIHByZXZYLFxuICAgICAgcHJldlksXG4gICAgICByb3VuZFgsXG4gICAgICByb3VuZFksXG4gICAgICBpbWFnZSxcbiAgICAgIHRleHQsXG4gICAgICB0ZXh0S2V5LFxuICAgICAgc3Ryb2tlS2V5LFxuICAgICAgZmlsbEtleTtcbiAgICBsZXQgcGVuZGluZ0ZpbGwgPSAwO1xuICAgIGxldCBwZW5kaW5nU3Ryb2tlID0gMDtcbiAgICBsZXQgbGFzdEZpbGxJbnN0cnVjdGlvbiA9IG51bGw7XG4gICAgbGV0IGxhc3RTdHJva2VJbnN0cnVjdGlvbiA9IG51bGw7XG4gICAgY29uc3QgY29vcmRpbmF0ZUNhY2hlID0gdGhpcy5jb29yZGluYXRlQ2FjaGVfO1xuICAgIGNvbnN0IHZpZXdSb3RhdGlvbiA9IHRoaXMudmlld1JvdGF0aW9uXztcbiAgICBjb25zdCB2aWV3Um90YXRpb25Gcm9tVHJhbnNmb3JtID1cbiAgICAgIE1hdGgucm91bmQoTWF0aC5hdGFuMigtdHJhbnNmb3JtWzFdLCB0cmFuc2Zvcm1bMF0pICogMWUxMikgLyAxZTEyO1xuXG4gICAgY29uc3Qgc3RhdGUgPSAvKiogQHR5cGUge2ltcG9ydChcIi4uLy4uL3JlbmRlci5qc1wiKS5TdGF0ZX0gKi8gKHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBwaXhlbFJhdGlvOiB0aGlzLnBpeGVsUmF0aW8sXG4gICAgICByZXNvbHV0aW9uOiB0aGlzLnJlc29sdXRpb24sXG4gICAgICByb3RhdGlvbjogdmlld1JvdGF0aW9uLFxuICAgIH0pO1xuXG4gICAgLy8gV2hlbiB0aGUgYmF0Y2ggc2l6ZSBnZXRzIHRvbyBiaWcsIHBlcmZvcm1hbmNlIGRlY3JlYXNlcy4gMjAwIGlzIGEgZ29vZFxuICAgIC8vIGJhbGFuY2UgYmV0d2VlbiBiYXRjaCBzaXplIGFuZCBudW1iZXIgb2YgZmlsbC9zdHJva2UgaW5zdHJ1Y3Rpb25zLlxuICAgIGNvbnN0IGJhdGNoU2l6ZSA9XG4gICAgICB0aGlzLmluc3RydWN0aW9ucyAhPSBpbnN0cnVjdGlvbnMgfHwgdGhpcy5vdmVybGFwcyA/IDAgOiAyMDA7XG4gICAgbGV0IC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vRmVhdHVyZS5qc1wiKS5GZWF0dXJlTGlrZX0gKi8gZmVhdHVyZTtcbiAgICBsZXQgeCwgeSwgY3VycmVudEdlb21ldHJ5O1xuICAgIHdoaWxlIChpIDwgaWkpIHtcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xuICAgICAgY29uc3QgdHlwZSA9IC8qKiBAdHlwZSB7aW1wb3J0KFwiLi9JbnN0cnVjdGlvbi5qc1wiKS5kZWZhdWx0fSAqLyAoXG4gICAgICAgIGluc3RydWN0aW9uWzBdXG4gICAgICApO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgQ2FudmFzSW5zdHJ1Y3Rpb24uQkVHSU5fR0VPTUVUUlk6XG4gICAgICAgICAgZmVhdHVyZSA9IC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vRmVhdHVyZS5qc1wiKS5GZWF0dXJlTGlrZX0gKi8gKFxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bMV1cbiAgICAgICAgICApO1xuICAgICAgICAgIGN1cnJlbnRHZW9tZXRyeSA9IGluc3RydWN0aW9uWzNdO1xuICAgICAgICAgIGlmICghZmVhdHVyZS5nZXRHZW9tZXRyeSgpKSB7XG4gICAgICAgICAgICBpID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsyXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGhpdEV4dGVudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAhaW50ZXJzZWN0cyhoaXRFeHRlbnQsIGN1cnJlbnRHZW9tZXRyeS5nZXRFeHRlbnQoKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzJdKSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2FudmFzSW5zdHJ1Y3Rpb24uQkVHSU5fUEFUSDpcbiAgICAgICAgICBpZiAocGVuZGluZ0ZpbGwgPiBiYXRjaFNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbF8oY29udGV4dCk7XG4gICAgICAgICAgICBwZW5kaW5nRmlsbCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwZW5kaW5nU3Ryb2tlID4gYmF0Y2hTaXplKSB7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgICAgcGVuZGluZ1N0cm9rZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcGVuZGluZ0ZpbGwgJiYgIXBlbmRpbmdTdHJva2UpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBwcmV2WCA9IE5hTjtcbiAgICAgICAgICAgIHByZXZZID0gTmFOO1xuICAgICAgICAgIH1cbiAgICAgICAgICArK2k7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2FudmFzSW5zdHJ1Y3Rpb24uQ0lSQ0xFOlxuICAgICAgICAgIGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcbiAgICAgICAgICBjb25zdCB4MSA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XG4gICAgICAgICAgY29uc3QgeTEgPSBwaXhlbENvb3JkaW5hdGVzW2QgKyAxXTtcbiAgICAgICAgICBjb25zdCB4MiA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDJdO1xuICAgICAgICAgIGNvbnN0IHkyID0gcGl4ZWxDb29yZGluYXRlc1tkICsgM107XG4gICAgICAgICAgY29uc3QgZHggPSB4MiAtIHgxO1xuICAgICAgICAgIGNvbnN0IGR5ID0geTIgLSB5MTtcbiAgICAgICAgICBjb25zdCByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh4MSArIHIsIHkxKTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh4MSwgeTEsIHIsIDAsIDIgKiBNYXRoLlBJLCB0cnVlKTtcbiAgICAgICAgICArK2k7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2FudmFzSW5zdHJ1Y3Rpb24uQ0xPU0VfUEFUSDpcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICsraTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDYW52YXNJbnN0cnVjdGlvbi5DVVNUT006XG4gICAgICAgICAgZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xuICAgICAgICAgIGRkID0gaW5zdHJ1Y3Rpb25bMl07XG4gICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9nZW9tL1NpbXBsZUdlb21ldHJ5LmpzXCIpLmRlZmF1bHR9ICovIChcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bM11cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBpbnN0cnVjdGlvbls0XTtcbiAgICAgICAgICBjb25zdCBmbiA9IGluc3RydWN0aW9uLmxlbmd0aCA9PSA2ID8gaW5zdHJ1Y3Rpb25bNV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgc3RhdGUuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgICBzdGF0ZS5mZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICBpZiAoIShpIGluIGNvb3JkaW5hdGVDYWNoZSkpIHtcbiAgICAgICAgICAgIGNvb3JkaW5hdGVDYWNoZVtpXSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjb29yZHMgPSBjb29yZGluYXRlQ2FjaGVbaV07XG4gICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICBmbihwaXhlbENvb3JkaW5hdGVzLCBkLCBkZCwgMiwgY29vcmRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29vcmRzWzBdID0gcGl4ZWxDb29yZGluYXRlc1tkXTtcbiAgICAgICAgICAgIGNvb3Jkc1sxXSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xuICAgICAgICAgICAgY29vcmRzLmxlbmd0aCA9IDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbmRlcmVyKGNvb3Jkcywgc3RhdGUpO1xuICAgICAgICAgICsraTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDYW52YXNJbnN0cnVjdGlvbi5EUkFXX0lNQUdFOlxuICAgICAgICAgIGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcbiAgICAgICAgICBkZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMl0pO1xuICAgICAgICAgIGltYWdlID1cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudHxIVE1MSW1hZ2VFbGVtZW50fSAqLyAoXG4gICAgICAgICAgICAgIGluc3RydWN0aW9uWzNdXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gUmVtYWluaW5nIGFyZ3VtZW50cyBpbiBEUkFXX0lNQUdFIGFyZSBpbiBhbHBoYWJldGljYWwgb3JkZXJcbiAgICAgICAgICBhbmNob3JYID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls0XSk7XG4gICAgICAgICAgYW5jaG9yWSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bNV0pO1xuICAgICAgICAgIGxldCBoZWlnaHQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzZdKTtcbiAgICAgICAgICBjb25zdCBvcGFjaXR5ID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls3XSk7XG4gICAgICAgICAgY29uc3Qgb3JpZ2luWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bOF0pO1xuICAgICAgICAgIGNvbnN0IG9yaWdpblkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzldKTtcbiAgICAgICAgICBjb25zdCByb3RhdGVXaXRoVmlldyA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGluc3RydWN0aW9uWzEwXSk7XG4gICAgICAgICAgbGV0IHJvdGF0aW9uID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxMV0pO1xuICAgICAgICAgIGNvbnN0IHNjYWxlID0gLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9zaXplLmpzXCIpLlNpemV9ICovIChcbiAgICAgICAgICAgIGluc3RydWN0aW9uWzEyXVxuICAgICAgICAgICk7XG4gICAgICAgICAgbGV0IHdpZHRoID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxM10pO1xuICAgICAgICAgIGNvbnN0IGRlY2x1dHRlck1vZGUgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtcImRlY2x1dHRlclwifFwib2JzdGFjbGVcInxcIm5vbmVcInx1bmRlZmluZWR9ICovIChcbiAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bMTRdXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGRlY2x1dHRlckltYWdlV2l0aFRleHQgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuRGVjbHV0dGVySW1hZ2VXaXRoVGV4dH0gKi8gKFxuICAgICAgICAgICAgICBpbnN0cnVjdGlvblsxNV1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoIWltYWdlICYmIGluc3RydWN0aW9uLmxlbmd0aCA+PSAyMCkge1xuICAgICAgICAgICAgLy8gY3JlYXRlIGxhYmVsIGltYWdlc1xuICAgICAgICAgICAgdGV4dCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoaW5zdHJ1Y3Rpb25bMTldKTtcbiAgICAgICAgICAgIHRleHRLZXkgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzIwXSk7XG4gICAgICAgICAgICBzdHJva2VLZXkgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzIxXSk7XG4gICAgICAgICAgICBmaWxsS2V5ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChpbnN0cnVjdGlvblsyMl0pO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxXaXRoQW5jaG9yID0gdGhpcy5kcmF3TGFiZWxXaXRoUG9pbnRQbGFjZW1lbnRfKFxuICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICB0ZXh0S2V5LFxuICAgICAgICAgICAgICBzdHJva2VLZXksXG4gICAgICAgICAgICAgIGZpbGxLZXlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbWFnZSA9IGxhYmVsV2l0aEFuY2hvci5sYWJlbDtcbiAgICAgICAgICAgIGluc3RydWN0aW9uWzNdID0gaW1hZ2U7XG4gICAgICAgICAgICBjb25zdCB0ZXh0T2Zmc2V0WCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMjNdKTtcbiAgICAgICAgICAgIGFuY2hvclggPSAobGFiZWxXaXRoQW5jaG9yLmFuY2hvclggLSB0ZXh0T2Zmc2V0WCkgKiB0aGlzLnBpeGVsUmF0aW87XG4gICAgICAgICAgICBpbnN0cnVjdGlvbls0XSA9IGFuY2hvclg7XG4gICAgICAgICAgICBjb25zdCB0ZXh0T2Zmc2V0WSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMjRdKTtcbiAgICAgICAgICAgIGFuY2hvclkgPSAobGFiZWxXaXRoQW5jaG9yLmFuY2hvclkgLSB0ZXh0T2Zmc2V0WSkgKiB0aGlzLnBpeGVsUmF0aW87XG4gICAgICAgICAgICBpbnN0cnVjdGlvbls1XSA9IGFuY2hvclk7XG4gICAgICAgICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbls2XSA9IGhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICBpbnN0cnVjdGlvblsxM10gPSB3aWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgZ2VvbWV0cnlXaWR0aHM7XG4gICAgICAgICAgaWYgKGluc3RydWN0aW9uLmxlbmd0aCA+IDI1KSB7XG4gICAgICAgICAgICBnZW9tZXRyeVdpZHRocyA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMjVdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgcGFkZGluZywgYmFja2dyb3VuZEZpbGwsIGJhY2tncm91bmRTdHJva2U7XG4gICAgICAgICAgaWYgKGluc3RydWN0aW9uLmxlbmd0aCA+IDE3KSB7XG4gICAgICAgICAgICBwYWRkaW5nID0gLyoqIEB0eXBlIHtBcnJheTxudW1iZXI+fSAqLyAoaW5zdHJ1Y3Rpb25bMTZdKTtcbiAgICAgICAgICAgIGJhY2tncm91bmRGaWxsID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoaW5zdHJ1Y3Rpb25bMTddKTtcbiAgICAgICAgICAgIGJhY2tncm91bmRTdHJva2UgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChpbnN0cnVjdGlvblsxOF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWRkaW5nID0gZGVmYXVsdFBhZGRpbmc7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCA9IGZhbHNlO1xuICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZSA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyb3RhdGVXaXRoVmlldyAmJiB2aWV3Um90YXRpb25Gcm9tVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvLyBDYW52YXMgaXMgZXhwZWN0ZWQgdG8gYmUgcm90YXRlZCB0byByZXZlcnNlIHZpZXcgcm90YXRpb24uXG4gICAgICAgICAgICByb3RhdGlvbiArPSB2aWV3Um90YXRpb247XG4gICAgICAgICAgfSBlbHNlIGlmICghcm90YXRlV2l0aFZpZXcgJiYgIXZpZXdSb3RhdGlvbkZyb21UcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIC8vIENhbnZhcyBpcyBub3Qgcm90YXRlZCwgaW1hZ2VzIG5lZWQgdG8gYmUgcm90YXRlZCBiYWNrIHRvIGJlIG5vcnRoLXVwLlxuICAgICAgICAgICAgcm90YXRpb24gLT0gdmlld1JvdGF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgd2lkdGhJbmRleCA9IDA7XG4gICAgICAgICAgZm9yICg7IGQgPCBkZDsgZCArPSAyKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGdlb21ldHJ5V2lkdGhzICYmXG4gICAgICAgICAgICAgIGdlb21ldHJ5V2lkdGhzW3dpZHRoSW5kZXgrK10gPCB3aWR0aCAvIHRoaXMucGl4ZWxSYXRpb1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IHRoaXMuY2FsY3VsYXRlSW1hZ2VPckxhYmVsRGltZW5zaW9uc18oXG4gICAgICAgICAgICAgIGltYWdlLndpZHRoLFxuICAgICAgICAgICAgICBpbWFnZS5oZWlnaHQsXG4gICAgICAgICAgICAgIHBpeGVsQ29vcmRpbmF0ZXNbZF0sXG4gICAgICAgICAgICAgIHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdLFxuICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICBhbmNob3JYLFxuICAgICAgICAgICAgICBhbmNob3JZLFxuICAgICAgICAgICAgICBvcmlnaW5YLFxuICAgICAgICAgICAgICBvcmlnaW5ZLFxuICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICAgIHNuYXBUb1BpeGVsLFxuICAgICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCB8fCBiYWNrZ3JvdW5kU3Ryb2tlLFxuICAgICAgICAgICAgICBmZWF0dXJlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLyoqIEB0eXBlIHtSZXBsYXlJbWFnZU9yTGFiZWxBcmdzfSAqL1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IFtcbiAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgY29udGV4dFNjYWxlLFxuICAgICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgICAgZGltZW5zaW9ucyxcbiAgICAgICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZEZpbGxcbiAgICAgICAgICAgICAgICA/IC8qKiBAdHlwZSB7QXJyYXk8Kj59ICovIChsYXN0RmlsbEluc3RydWN0aW9uKVxuICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZVxuICAgICAgICAgICAgICAgID8gLyoqIEB0eXBlIHtBcnJheTwqPn0gKi8gKGxhc3RTdHJva2VJbnN0cnVjdGlvbilcbiAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKGRlY2x1dHRlclRyZWUpIHtcbiAgICAgICAgICAgICAgaWYgKGRlY2x1dHRlck1vZGUgPT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIC8vIG5vdCByZW5kZXJlZCBpbiBkZWNsdXR0ZXIgZ3JvdXBcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZWNsdXR0ZXJNb2RlID09PSAnb2JzdGFjbGUnKSB7XG4gICAgICAgICAgICAgICAgLy8gd2lsbCBhbHdheXMgYmUgZHJhd24sIHRodXMgbm8gY29sbGlzaW9uIGRldGVjdGlvbiwgYnV0IGluc2VydCBhcyBvYnN0YWNsZVxuICAgICAgICAgICAgICAgIGRlY2x1dHRlclRyZWUuaW5zZXJ0KGRpbWVuc2lvbnMuZGVjbHV0dGVyQm94KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgaW1hZ2VBcmdzO1xuICAgICAgICAgICAgICAgIGxldCBpbWFnZURlY2x1dHRlckJveDtcbiAgICAgICAgICAgICAgICBpZiAoZGVjbHV0dGVySW1hZ2VXaXRoVGV4dCkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBkZCAtIGQ7XG4gICAgICAgICAgICAgICAgICBpZiAoIWRlY2x1dHRlckltYWdlV2l0aFRleHRbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5vdyBoYXZlIHRoZSBpbWFnZSBmb3IgYW4gaW1hZ2UrdGV4dCBjb21iaW5hdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgZGVjbHV0dGVySW1hZ2VXaXRoVGV4dFtpbmRleF0gPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCByZW5kZXIgYW55dGhpbmcgZm9yIG5vdywgd2FpdCBmb3IgdGhlIHRleHQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaW1hZ2VBcmdzID0gZGVjbHV0dGVySW1hZ2VXaXRoVGV4dFtpbmRleF07XG4gICAgICAgICAgICAgICAgICBkZWxldGUgZGVjbHV0dGVySW1hZ2VXaXRoVGV4dFtpbmRleF07XG4gICAgICAgICAgICAgICAgICBpbWFnZURlY2x1dHRlckJveCA9IGdldERlY2x1dHRlckJveChpbWFnZUFyZ3MpO1xuICAgICAgICAgICAgICAgICAgaWYgKGRlY2x1dHRlclRyZWUuY29sbGlkZXMoaW1hZ2VEZWNsdXR0ZXJCb3gpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGVjbHV0dGVyVHJlZS5jb2xsaWRlcyhkaW1lbnNpb25zLmRlY2x1dHRlckJveCkpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VBcmdzKSB7XG4gICAgICAgICAgICAgICAgICAvLyBXZSBub3cgaGF2ZSBpbWFnZSBhbmQgdGV4dCBmb3IgYW4gaW1hZ2UrdGV4dCBjb21iaW5hdGlvbi5cbiAgICAgICAgICAgICAgICAgIGRlY2x1dHRlclRyZWUuaW5zZXJ0KGltYWdlRGVjbHV0dGVyQm94KTtcbiAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciB0aGUgaW1hZ2UgYmVmb3JlIHdlIHJlbmRlciB0aGUgdGV4dC5cbiAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGF5SW1hZ2VPckxhYmVsXy5hcHBseSh0aGlzLCBpbWFnZUFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWNsdXR0ZXJUcmVlLmluc2VydChkaW1lbnNpb25zLmRlY2x1dHRlckJveCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVwbGF5SW1hZ2VPckxhYmVsXy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgKytpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIENhbnZhc0luc3RydWN0aW9uLkRSQVdfQ0hBUlM6XG4gICAgICAgICAgY29uc3QgYmVnaW4gPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcbiAgICAgICAgICBjb25zdCBlbmQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzJdKTtcbiAgICAgICAgICBjb25zdCBiYXNlbGluZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bM10pO1xuICAgICAgICAgIGNvbnN0IG92ZXJmbG93ID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls0XSk7XG4gICAgICAgICAgZmlsbEtleSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoaW5zdHJ1Y3Rpb25bNV0pO1xuICAgICAgICAgIGNvbnN0IG1heEFuZ2xlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls2XSk7XG4gICAgICAgICAgY29uc3QgbWVhc3VyZVBpeGVsUmF0aW8gPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzddKTtcbiAgICAgICAgICBjb25zdCBvZmZzZXRZID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls4XSk7XG4gICAgICAgICAgc3Ryb2tlS2V5ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChpbnN0cnVjdGlvbls5XSk7XG4gICAgICAgICAgY29uc3Qgc3Ryb2tlV2lkdGggPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzEwXSk7XG4gICAgICAgICAgdGV4dCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoaW5zdHJ1Y3Rpb25bMTFdKTtcbiAgICAgICAgICB0ZXh0S2V5ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChpbnN0cnVjdGlvblsxMl0pO1xuICAgICAgICAgIGNvbnN0IHBpeGVsUmF0aW9TY2FsZSA9IFtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMTNdKSxcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMTNdKSxcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgY29uc3QgdGV4dFN0YXRlID0gdGhpcy50ZXh0U3RhdGVzW3RleHRLZXldO1xuICAgICAgICAgIGNvbnN0IGZvbnQgPSB0ZXh0U3RhdGUuZm9udDtcbiAgICAgICAgICBjb25zdCB0ZXh0U2NhbGUgPSBbXG4gICAgICAgICAgICB0ZXh0U3RhdGUuc2NhbGVbMF0gKiBtZWFzdXJlUGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIHRleHRTdGF0ZS5zY2FsZVsxXSAqIG1lYXN1cmVQaXhlbFJhdGlvLFxuICAgICAgICAgIF07XG5cbiAgICAgICAgICBsZXQgY2FjaGVkV2lkdGhzO1xuICAgICAgICAgIGlmIChmb250IGluIHRoaXMud2lkdGhzXykge1xuICAgICAgICAgICAgY2FjaGVkV2lkdGhzID0gdGhpcy53aWR0aHNfW2ZvbnRdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRXaWR0aHMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMud2lkdGhzX1tmb250XSA9IGNhY2hlZFdpZHRocztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwYXRoTGVuZ3RoID0gbGluZVN0cmluZ0xlbmd0aChwaXhlbENvb3JkaW5hdGVzLCBiZWdpbiwgZW5kLCAyKTtcbiAgICAgICAgICBjb25zdCB0ZXh0TGVuZ3RoID1cbiAgICAgICAgICAgIE1hdGguYWJzKHRleHRTY2FsZVswXSkgKlxuICAgICAgICAgICAgbWVhc3VyZUFuZENhY2hlVGV4dFdpZHRoKGZvbnQsIHRleHQsIGNhY2hlZFdpZHRocyk7XG4gICAgICAgICAgaWYgKG92ZXJmbG93IHx8IHRleHRMZW5ndGggPD0gcGF0aExlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dEFsaWduID0gdGhpcy50ZXh0U3RhdGVzW3RleHRLZXldLnRleHRBbGlnbjtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TSA9IChwYXRoTGVuZ3RoIC0gdGV4dExlbmd0aCkgKiBURVhUX0FMSUdOW3RleHRBbGlnbl07XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IGRyYXdUZXh0T25QYXRoKFxuICAgICAgICAgICAgICBwaXhlbENvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICBiZWdpbixcbiAgICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICBzdGFydE0sXG4gICAgICAgICAgICAgIG1heEFuZ2xlLFxuICAgICAgICAgICAgICBNYXRoLmFicyh0ZXh0U2NhbGVbMF0pLFxuICAgICAgICAgICAgICBtZWFzdXJlQW5kQ2FjaGVUZXh0V2lkdGgsXG4gICAgICAgICAgICAgIGZvbnQsXG4gICAgICAgICAgICAgIGNhY2hlZFdpZHRocyxcbiAgICAgICAgICAgICAgdmlld1JvdGF0aW9uRnJvbVRyYW5zZm9ybSA/IDAgOiB0aGlzLnZpZXdSb3RhdGlvbl9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBkcmF3Q2hhcnM6IGlmIChwYXJ0cykge1xuICAgICAgICAgICAgICAvKiogQHR5cGUge0FycmF5PFJlcGxheUltYWdlT3JMYWJlbEFyZ3M+fSAqL1xuICAgICAgICAgICAgICBjb25zdCByZXBsYXlJbWFnZU9yTGFiZWxBcmdzID0gW107XG4gICAgICAgICAgICAgIGxldCBjLCBjYywgY2hhcnMsIGxhYmVsLCBwYXJ0O1xuICAgICAgICAgICAgICBpZiAoc3Ryb2tlS2V5KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjID0gMCwgY2MgPSBwYXJ0cy5sZW5ndGg7IGMgPCBjYzsgKytjKSB7XG4gICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydHNbY107IC8vIHgsIHksIGFuY2hvclgsIHJvdGF0aW9uLCBjaHVua1xuICAgICAgICAgICAgICAgICAgY2hhcnMgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhcnRbNF0pO1xuICAgICAgICAgICAgICAgICAgbGFiZWwgPSB0aGlzLmNyZWF0ZUxhYmVsKGNoYXJzLCB0ZXh0S2V5LCAnJywgc3Ryb2tlS2V5KTtcbiAgICAgICAgICAgICAgICAgIGFuY2hvclggPVxuICAgICAgICAgICAgICAgICAgICAvKiogQHR5cGUge251bWJlcn0gKi8gKHBhcnRbMl0pICtcbiAgICAgICAgICAgICAgICAgICAgKHRleHRTY2FsZVswXSA8IDAgPyAtc3Ryb2tlV2lkdGggOiBzdHJva2VXaWR0aCk7XG4gICAgICAgICAgICAgICAgICBhbmNob3JZID1cbiAgICAgICAgICAgICAgICAgICAgYmFzZWxpbmUgKiBsYWJlbC5oZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICAoKDAuNSAtIGJhc2VsaW5lKSAqIDIgKiBzdHJva2VXaWR0aCAqIHRleHRTY2FsZVsxXSkgL1xuICAgICAgICAgICAgICAgICAgICAgIHRleHRTY2FsZVswXSAtXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5jYWxjdWxhdGVJbWFnZU9yTGFiZWxEaW1lbnNpb25zXyhcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcGFydFswXSxcbiAgICAgICAgICAgICAgICAgICAgcGFydFsxXSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCxcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yWSxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgcGFydFszXSxcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpb1NjYWxlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBkZWNsdXR0ZXJUcmVlICYmXG4gICAgICAgICAgICAgICAgICAgIGRlY2x1dHRlclRyZWUuY29sbGlkZXMoZGltZW5zaW9ucy5kZWNsdXR0ZXJCb3gpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZHJhd0NoYXJzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmVwbGF5SW1hZ2VPckxhYmVsQXJncy5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZmlsbEtleSkge1xuICAgICAgICAgICAgICAgIGZvciAoYyA9IDAsIGNjID0gcGFydHMubGVuZ3RoOyBjIDwgY2M7ICsrYykge1xuICAgICAgICAgICAgICAgICAgcGFydCA9IHBhcnRzW2NdOyAvLyB4LCB5LCBhbmNob3JYLCByb3RhdGlvbiwgY2h1bmtcbiAgICAgICAgICAgICAgICAgIGNoYXJzID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXJ0WzRdKTtcbiAgICAgICAgICAgICAgICAgIGxhYmVsID0gdGhpcy5jcmVhdGVMYWJlbChjaGFycywgdGV4dEtleSwgZmlsbEtleSwgJycpO1xuICAgICAgICAgICAgICAgICAgYW5jaG9yWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocGFydFsyXSk7XG4gICAgICAgICAgICAgICAgICBhbmNob3JZID0gYmFzZWxpbmUgKiBsYWJlbC5oZWlnaHQgLSBvZmZzZXRZO1xuICAgICAgICAgICAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IHRoaXMuY2FsY3VsYXRlSW1hZ2VPckxhYmVsRGltZW5zaW9uc18oXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRbMF0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnRbMV0sXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvclgsXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvclksXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRbM10sXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsUmF0aW9TY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgZGVjbHV0dGVyVHJlZSAmJlxuICAgICAgICAgICAgICAgICAgICBkZWNsdXR0ZXJUcmVlLmNvbGxpZGVzKGRpbWVuc2lvbnMuZGVjbHV0dGVyQm94KVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGRyYXdDaGFycztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJlcGxheUltYWdlT3JMYWJlbEFyZ3MucHVzaChbXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMsXG4gICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGRlY2x1dHRlclRyZWUpIHtcbiAgICAgICAgICAgICAgICBkZWNsdXR0ZXJUcmVlLmxvYWQocmVwbGF5SW1hZ2VPckxhYmVsQXJncy5tYXAoZ2V0RGVjbHV0dGVyQm94KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcmVwbGF5SW1hZ2VPckxhYmVsQXJncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXBsYXlJbWFnZU9yTGFiZWxfLmFwcGx5KHRoaXMsIHJlcGxheUltYWdlT3JMYWJlbEFyZ3NbaV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgICsraTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDYW52YXNJbnN0cnVjdGlvbi5FTkRfR0VPTUVUUlk6XG4gICAgICAgICAgaWYgKGZlYXR1cmVDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmZWF0dXJlID0gLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlfSAqLyAoXG4gICAgICAgICAgICAgIGluc3RydWN0aW9uWzFdXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZmVhdHVyZUNhbGxiYWNrKGZlYXR1cmUsIGN1cnJlbnRHZW9tZXRyeSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgICsraTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDYW52YXNJbnN0cnVjdGlvbi5GSUxMOlxuICAgICAgICAgIGlmIChiYXRjaFNpemUpIHtcbiAgICAgICAgICAgIHBlbmRpbmdGaWxsKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbF8oY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgICsraTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDYW52YXNJbnN0cnVjdGlvbi5NT1ZFX1RPX0xJTkVfVE86XG4gICAgICAgICAgZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xuICAgICAgICAgIGRkID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsyXSk7XG4gICAgICAgICAgeCA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XG4gICAgICAgICAgeSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xuICAgICAgICAgIHJvdW5kWCA9ICh4ICsgMC41KSB8IDA7XG4gICAgICAgICAgcm91bmRZID0gKHkgKyAwLjUpIHwgMDtcbiAgICAgICAgICBpZiAocm91bmRYICE9PSBwcmV2WCB8fCByb3VuZFkgIT09IHByZXZZKSB7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIHByZXZYID0gcm91bmRYO1xuICAgICAgICAgICAgcHJldlkgPSByb3VuZFk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoZCArPSAyOyBkIDwgZGQ7IGQgKz0gMikge1xuICAgICAgICAgICAgeCA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XG4gICAgICAgICAgICB5ID0gcGl4ZWxDb29yZGluYXRlc1tkICsgMV07XG4gICAgICAgICAgICByb3VuZFggPSAoeCArIDAuNSkgfCAwO1xuICAgICAgICAgICAgcm91bmRZID0gKHkgKyAwLjUpIHwgMDtcbiAgICAgICAgICAgIGlmIChkID09IGRkIC0gMiB8fCByb3VuZFggIT09IHByZXZYIHx8IHJvdW5kWSAhPT0gcHJldlkpIHtcbiAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgIHByZXZYID0gcm91bmRYO1xuICAgICAgICAgICAgICBwcmV2WSA9IHJvdW5kWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgKytpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIENhbnZhc0luc3RydWN0aW9uLlNFVF9GSUxMX1NUWUxFOlxuICAgICAgICAgIGxhc3RGaWxsSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcbiAgICAgICAgICB0aGlzLmFsaWduRmlsbF8gPSBpbnN0cnVjdGlvblsyXTtcblxuICAgICAgICAgIGlmIChwZW5kaW5nRmlsbCkge1xuICAgICAgICAgICAgdGhpcy5maWxsXyhjb250ZXh0KTtcbiAgICAgICAgICAgIHBlbmRpbmdGaWxsID0gMDtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nU3Ryb2tlKSB7XG4gICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgIHBlbmRpbmdTdHJva2UgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID1cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vY29sb3JsaWtlLmpzXCIpLkNvbG9yTGlrZX0gKi8gKFxuICAgICAgICAgICAgICBpbnN0cnVjdGlvblsxXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICArK2k7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2FudmFzSW5zdHJ1Y3Rpb24uU0VUX1NUUk9LRV9TVFlMRTpcbiAgICAgICAgICBsYXN0U3Ryb2tlSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcbiAgICAgICAgICBpZiAocGVuZGluZ1N0cm9rZSkge1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgIHBlbmRpbmdTdHJva2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFN0cm9rZVN0eWxlXyhjb250ZXh0LCAvKiogQHR5cGUge0FycmF5PCo+fSAqLyAoaW5zdHJ1Y3Rpb24pKTtcbiAgICAgICAgICArK2k7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ2FudmFzSW5zdHJ1Y3Rpb24uU1RST0tFOlxuICAgICAgICAgIGlmIChiYXRjaFNpemUpIHtcbiAgICAgICAgICAgIHBlbmRpbmdTdHJva2UrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgKytpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBjb25zdW1lIHRoZSBpbnN0cnVjdGlvbiBhbnl3YXksIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICArK2k7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwZW5kaW5nRmlsbCkge1xuICAgICAgdGhpcy5maWxsXyhjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKHBlbmRpbmdTdHJva2UpIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgQ29udGV4dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbnRleHRTY2FsZSBTY2FsZSBvZiB0aGUgY29udGV4dC5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi90cmFuc2Zvcm0uanNcIikuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gVHJhbnNmb3JtLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmlld1JvdGF0aW9uIFZpZXcgcm90YXRpb24uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc25hcFRvUGl4ZWwgU25hcCBwb2ludCBzeW1ib2xzIGFuZCB0ZXh0IHRvIGludGVnZXIgcGl4ZWxzLlxuICAgKiBAcGFyYW0ge2ltcG9ydChcInJidXNoXCIpLmRlZmF1bHR9IFtkZWNsdXR0ZXJUcmVlXSBEZWNsdXR0ZXIgdHJlZS5cbiAgICovXG4gIGV4ZWN1dGUoXG4gICAgY29udGV4dCxcbiAgICBjb250ZXh0U2NhbGUsXG4gICAgdHJhbnNmb3JtLFxuICAgIHZpZXdSb3RhdGlvbixcbiAgICBzbmFwVG9QaXhlbCxcbiAgICBkZWNsdXR0ZXJUcmVlXG4gICkge1xuICAgIHRoaXMudmlld1JvdGF0aW9uXyA9IHZpZXdSb3RhdGlvbjtcbiAgICB0aGlzLmV4ZWN1dGVfKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvbnRleHRTY2FsZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLFxuICAgICAgc25hcFRvUGl4ZWwsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBkZWNsdXR0ZXJUcmVlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCBDb250ZXh0LlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL3RyYW5zZm9ybS5qc1wiKS5UcmFuc2Zvcm19IHRyYW5zZm9ybSBUcmFuc2Zvcm0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2aWV3Um90YXRpb24gVmlldyByb3RhdGlvbi5cbiAgICogQHBhcmFtIHtGZWF0dXJlQ2FsbGJhY2s8VD59IFtmZWF0dXJlQ2FsbGJhY2tdIEZlYXR1cmUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vZXh0ZW50LmpzXCIpLkV4dGVudH0gW2hpdEV4dGVudF0gT25seSBjaGVja1xuICAgKiAgICAgZmVhdHVyZXMgdGhhdCBpbnRlcnNlY3QgdGhpcyBleHRlbnQuXG4gICAqIEByZXR1cm4ge1R8dW5kZWZpbmVkfSBDYWxsYmFjayByZXN1bHQuXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqL1xuICBleGVjdXRlSGl0RGV0ZWN0aW9uKFxuICAgIGNvbnRleHQsXG4gICAgdHJhbnNmb3JtLFxuICAgIHZpZXdSb3RhdGlvbixcbiAgICBmZWF0dXJlQ2FsbGJhY2ssXG4gICAgaGl0RXh0ZW50XG4gICkge1xuICAgIHRoaXMudmlld1JvdGF0aW9uXyA9IHZpZXdSb3RhdGlvbjtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlXyhcbiAgICAgIGNvbnRleHQsXG4gICAgICAxLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdGhpcy5oaXREZXRlY3Rpb25JbnN0cnVjdGlvbnMsXG4gICAgICB0cnVlLFxuICAgICAgZmVhdHVyZUNhbGxiYWNrLFxuICAgICAgaGl0RXh0ZW50XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFeGVjdXRvcjtcbiIsIi8qKlxuICogQG1vZHVsZSBvbC9yZW5kZXIvY2FudmFzL0V4ZWN1dG9yR3JvdXBcbiAqL1xuXG5pbXBvcnQgRXhlY3V0b3IgZnJvbSAnLi9FeGVjdXRvci5qcyc7XG5pbXBvcnQge2FzY2VuZGluZ30gZnJvbSAnLi4vLi4vYXJyYXkuanMnO1xuaW1wb3J0IHtidWZmZXIsIGNyZWF0ZUVtcHR5LCBleHRlbmRDb29yZGluYXRlfSBmcm9tICcuLi8uLi9leHRlbnQuanMnO1xuaW1wb3J0IHtcbiAgY29tcG9zZSBhcyBjb21wb3NlVHJhbnNmb3JtLFxuICBjcmVhdGUgYXMgY3JlYXRlVHJhbnNmb3JtLFxufSBmcm9tICcuLi8uLi90cmFuc2Zvcm0uanMnO1xuaW1wb3J0IHtjcmVhdGVDYW52YXNDb250ZXh0MkR9IGZyb20gJy4uLy4uL2RvbS5qcyc7XG5pbXBvcnQge2lzRW1wdHl9IGZyb20gJy4uLy4uL29iai5qcyc7XG5pbXBvcnQge3RyYW5zZm9ybTJEfSBmcm9tICcuLi8uLi9nZW9tL2ZsYXQvdHJhbnNmb3JtLmpzJztcblxuLyoqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtBcnJheTxpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuQnVpbGRlclR5cGU+fVxuICovXG5jb25zdCBPUkRFUiA9IFsnUG9seWdvbicsICdDaXJjbGUnLCAnTGluZVN0cmluZycsICdJbWFnZScsICdUZXh0JywgJ0RlZmF1bHQnXTtcblxuY2xhc3MgRXhlY3V0b3JHcm91cCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL2V4dGVudC5qc1wiKS5FeHRlbnR9IG1heEV4dGVudCBNYXggZXh0ZW50IGZvciBjbGlwcGluZy4gV2hlbiBhXG4gICAqIGBtYXhFeHRlbnRgIHdhcyBzZXQgb24gdGhlIEJ1aWxkZXIgZm9yIHRoaXMgZXhlY3V0b3IgZ3JvdXAsIHRoZSBzYW1lIGBtYXhFeHRlbnRgXG4gICAqIHNob3VsZCBiZSBzZXQgaGVyZSwgdW5sZXNzIHRoZSB0YXJnZXQgY29udGV4dCBkb2VzIG5vdCBleGNlZWQgdGhhdCBleHRlbnQgKHdoaWNoXG4gICAqIGNhbiBiZSB0aGUgY2FzZSB3aGVuIHJlbmRlcmluZyB0byB0aWxlcykuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uIFJlc29sdXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvIFBpeGVsIHJhdGlvLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJsYXBzIFRoZSBleGVjdXRvciBncm91cCBjYW4gaGF2ZSBvdmVybGFwcGluZyBnZW9tZXRyaWVzLlxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAhT2JqZWN0PGltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5CdWlsZGVyVHlwZSwgaW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLlNlcmlhbGl6YWJsZUluc3RydWN0aW9ucz4+fSBhbGxJbnN0cnVjdGlvbnNcbiAgICogVGhlIHNlcmlhbGl6YWJsZSBpbnN0cnVjdGlvbnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVuZGVyQnVmZmVyXSBPcHRpb25hbCByZW5kZXJpbmcgYnVmZmVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbWF4RXh0ZW50LFxuICAgIHJlc29sdXRpb24sXG4gICAgcGl4ZWxSYXRpbyxcbiAgICBvdmVybGFwcyxcbiAgICBhbGxJbnN0cnVjdGlvbnMsXG4gICAgcmVuZGVyQnVmZmVyXG4gICkge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2ltcG9ydChcIi4uLy4uL2V4dGVudC5qc1wiKS5FeHRlbnR9XG4gICAgICovXG4gICAgdGhpcy5tYXhFeHRlbnRfID0gbWF4RXh0ZW50O1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm92ZXJsYXBzXyA9IG92ZXJsYXBzO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucGl4ZWxSYXRpb18gPSBwaXhlbFJhdGlvO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x1dGlvbl8gPSByZXNvbHV0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlckJ1ZmZlcl8gPSByZW5kZXJCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgIU9iamVjdDxpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuQnVpbGRlclR5cGUsIGltcG9ydChcIi4vRXhlY3V0b3JcIikuZGVmYXVsdD4+fVxuICAgICAqL1xuICAgIHRoaXMuZXhlY3V0b3JzQnlaSW5kZXhfID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG4gICAgdGhpcy5oaXREZXRlY3Rpb25Db250ZXh0XyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi90cmFuc2Zvcm0uanNcIikuVHJhbnNmb3JtfVxuICAgICAqL1xuICAgIHRoaXMuaGl0RGV0ZWN0aW9uVHJhbnNmb3JtXyA9IGNyZWF0ZVRyYW5zZm9ybSgpO1xuXG4gICAgdGhpcy5jcmVhdGVFeGVjdXRvcnNfKGFsbEluc3RydWN0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgQ29udGV4dC5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi90cmFuc2Zvcm0uanNcIikuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gVHJhbnNmb3JtLlxuICAgKi9cbiAgY2xpcChjb250ZXh0LCB0cmFuc2Zvcm0pIHtcbiAgICBjb25zdCBmbGF0Q2xpcENvb3JkcyA9IHRoaXMuZ2V0Q2xpcENvb3Jkcyh0cmFuc2Zvcm0pO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5tb3ZlVG8oZmxhdENsaXBDb29yZHNbMF0sIGZsYXRDbGlwQ29vcmRzWzFdKTtcbiAgICBjb250ZXh0LmxpbmVUbyhmbGF0Q2xpcENvb3Jkc1syXSwgZmxhdENsaXBDb29yZHNbM10pO1xuICAgIGNvbnRleHQubGluZVRvKGZsYXRDbGlwQ29vcmRzWzRdLCBmbGF0Q2xpcENvb3Jkc1s1XSk7XG4gICAgY29udGV4dC5saW5lVG8oZmxhdENsaXBDb29yZHNbNl0sIGZsYXRDbGlwQ29vcmRzWzddKTtcbiAgICBjb250ZXh0LmNsaXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgZXhlY3V0b3JzIGFuZCBwb3B1bGF0ZSB0aGVtIHVzaW5nIHRoZSBwcm92aWRlZCBpbnN0cnVjdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICFPYmplY3Q8aW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkJ1aWxkZXJUeXBlLCBpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuU2VyaWFsaXphYmxlSW5zdHJ1Y3Rpb25zPj59IGFsbEluc3RydWN0aW9ucyBUaGUgc2VyaWFsaXphYmxlIGluc3RydWN0aW9uc1xuICAgKi9cbiAgY3JlYXRlRXhlY3V0b3JzXyhhbGxJbnN0cnVjdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IHpJbmRleCBpbiBhbGxJbnN0cnVjdGlvbnMpIHtcbiAgICAgIGxldCBleGVjdXRvcnMgPSB0aGlzLmV4ZWN1dG9yc0J5WkluZGV4X1t6SW5kZXhdO1xuICAgICAgaWYgKGV4ZWN1dG9ycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV4ZWN1dG9ycyA9IHt9O1xuICAgICAgICB0aGlzLmV4ZWN1dG9yc0J5WkluZGV4X1t6SW5kZXhdID0gZXhlY3V0b3JzO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb25CeVppbmRleCA9IGFsbEluc3RydWN0aW9uc1t6SW5kZXhdO1xuICAgICAgZm9yIChjb25zdCBidWlsZGVyVHlwZSBpbiBpbnN0cnVjdGlvbkJ5WmluZGV4KSB7XG4gICAgICAgIGNvbnN0IGluc3RydWN0aW9ucyA9IGluc3RydWN0aW9uQnlaaW5kZXhbYnVpbGRlclR5cGVdO1xuICAgICAgICBleGVjdXRvcnNbYnVpbGRlclR5cGVdID0gbmV3IEV4ZWN1dG9yKFxuICAgICAgICAgIHRoaXMucmVzb2x1dGlvbl8sXG4gICAgICAgICAgdGhpcy5waXhlbFJhdGlvXyxcbiAgICAgICAgICB0aGlzLm92ZXJsYXBzXyxcbiAgICAgICAgICBpbnN0cnVjdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuQnVpbGRlclR5cGU+fSBleGVjdXRvcnMgRXhlY3V0b3JzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBIYXMgZXhlY3V0b3JzIG9mIHRoZSBwcm92aWRlZCB0eXBlcy5cbiAgICovXG4gIGhhc0V4ZWN1dG9ycyhleGVjdXRvcnMpIHtcbiAgICBmb3IgKGNvbnN0IHpJbmRleCBpbiB0aGlzLmV4ZWN1dG9yc0J5WkluZGV4Xykge1xuICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IHRoaXMuZXhlY3V0b3JzQnlaSW5kZXhfW3pJbmRleF07XG4gICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBleGVjdXRvcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBpZiAoZXhlY3V0b3JzW2ldIGluIGNhbmRpZGF0ZXMpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGV9IGNvb3JkaW5hdGUgQ29vcmRpbmF0ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJlc29sdXRpb24gUmVzb2x1dGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIFJvdGF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGl0VG9sZXJhbmNlIEhpdCB0b2xlcmFuY2UgaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGltcG9ydChcIi4uLy4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2UsIGltcG9ydChcIi4uLy4uL2dlb20vU2ltcGxlR2VvbWV0cnkuanNcIikuZGVmYXVsdCwgbnVtYmVyKTogVH0gY2FsbGJhY2sgRmVhdHVyZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtBcnJheTxpbXBvcnQoXCIuLi8uLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlPn0gZGVjbHV0dGVyZWRGZWF0dXJlcyBEZWNsdXR0ZXJlZCBmZWF0dXJlcy5cbiAgICogQHJldHVybiB7VHx1bmRlZmluZWR9IENhbGxiYWNrIHJlc3VsdC5cbiAgICogQHRlbXBsYXRlIFRcbiAgICovXG4gIGZvckVhY2hGZWF0dXJlQXRDb29yZGluYXRlKFxuICAgIGNvb3JkaW5hdGUsXG4gICAgcmVzb2x1dGlvbixcbiAgICByb3RhdGlvbixcbiAgICBoaXRUb2xlcmFuY2UsXG4gICAgY2FsbGJhY2ssXG4gICAgZGVjbHV0dGVyZWRGZWF0dXJlc1xuICApIHtcbiAgICBoaXRUb2xlcmFuY2UgPSBNYXRoLnJvdW5kKGhpdFRvbGVyYW5jZSk7XG4gICAgY29uc3QgY29udGV4dFNpemUgPSBoaXRUb2xlcmFuY2UgKiAyICsgMTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBjb21wb3NlVHJhbnNmb3JtKFxuICAgICAgdGhpcy5oaXREZXRlY3Rpb25UcmFuc2Zvcm1fLFxuICAgICAgaGl0VG9sZXJhbmNlICsgMC41LFxuICAgICAgaGl0VG9sZXJhbmNlICsgMC41LFxuICAgICAgMSAvIHJlc29sdXRpb24sXG4gICAgICAtMSAvIHJlc29sdXRpb24sXG4gICAgICAtcm90YXRpb24sXG4gICAgICAtY29vcmRpbmF0ZVswXSxcbiAgICAgIC1jb29yZGluYXRlWzFdXG4gICAgKTtcblxuICAgIGNvbnN0IG5ld0NvbnRleHQgPSAhdGhpcy5oaXREZXRlY3Rpb25Db250ZXh0XztcbiAgICBpZiAobmV3Q29udGV4dCkge1xuICAgICAgdGhpcy5oaXREZXRlY3Rpb25Db250ZXh0XyA9IGNyZWF0ZUNhbnZhc0NvbnRleHQyRChcbiAgICAgICAgY29udGV4dFNpemUsXG4gICAgICAgIGNvbnRleHRTaXplLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHt3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWV9XG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5oaXREZXRlY3Rpb25Db250ZXh0XztcblxuICAgIGlmIChcbiAgICAgIGNvbnRleHQuY2FudmFzLndpZHRoICE9PSBjb250ZXh0U2l6ZSB8fFxuICAgICAgY29udGV4dC5jYW52YXMuaGVpZ2h0ICE9PSBjb250ZXh0U2l6ZVxuICAgICkge1xuICAgICAgY29udGV4dC5jYW52YXMud2lkdGggPSBjb250ZXh0U2l6ZTtcbiAgICAgIGNvbnRleHQuY2FudmFzLmhlaWdodCA9IGNvbnRleHRTaXplO1xuICAgIH0gZWxzZSBpZiAoIW5ld0NvbnRleHQpIHtcbiAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNvbnRleHRTaXplLCBjb250ZXh0U2l6ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2ltcG9ydChcIi4uLy4uL2V4dGVudC5qc1wiKS5FeHRlbnR9XG4gICAgICovXG4gICAgbGV0IGhpdEV4dGVudDtcbiAgICBpZiAodGhpcy5yZW5kZXJCdWZmZXJfICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhpdEV4dGVudCA9IGNyZWF0ZUVtcHR5KCk7XG4gICAgICBleHRlbmRDb29yZGluYXRlKGhpdEV4dGVudCwgY29vcmRpbmF0ZSk7XG4gICAgICBidWZmZXIoXG4gICAgICAgIGhpdEV4dGVudCxcbiAgICAgICAgcmVzb2x1dGlvbiAqICh0aGlzLnJlbmRlckJ1ZmZlcl8gKyBoaXRUb2xlcmFuY2UpLFxuICAgICAgICBoaXRFeHRlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXhlcyA9IGdldFBpeGVsSW5kZXhBcnJheShoaXRUb2xlcmFuY2UpO1xuXG4gICAgbGV0IGJ1aWxkZXJUeXBlO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlfSBmZWF0dXJlIEZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9nZW9tL1NpbXBsZUdlb21ldHJ5LmpzXCIpLmRlZmF1bHR9IGdlb21ldHJ5IEdlb21ldHJ5LlxuICAgICAqIEByZXR1cm4ge1R8dW5kZWZpbmVkfSBDYWxsYmFjayByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmVhdHVyZUNhbGxiYWNrKGZlYXR1cmUsIGdlb21ldHJ5KSB7XG4gICAgICBjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YShcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgY29udGV4dFNpemUsXG4gICAgICAgIGNvbnRleHRTaXplXG4gICAgICApLmRhdGE7XG4gICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBpbmRleGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGltYWdlRGF0YVtpbmRleGVzW2ldXSA+IDApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhZGVjbHV0dGVyZWRGZWF0dXJlcyB8fFxuICAgICAgICAgICAgKGJ1aWxkZXJUeXBlICE9PSAnSW1hZ2UnICYmIGJ1aWxkZXJUeXBlICE9PSAnVGV4dCcpIHx8XG4gICAgICAgICAgICBkZWNsdXR0ZXJlZEZlYXR1cmVzLmluY2x1ZGVzKGZlYXR1cmUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSAoaW5kZXhlc1tpXSAtIDMpIC8gNDtcbiAgICAgICAgICAgIGNvbnN0IHggPSBoaXRUb2xlcmFuY2UgLSAoaWR4ICUgY29udGV4dFNpemUpO1xuICAgICAgICAgICAgY29uc3QgeSA9IGhpdFRvbGVyYW5jZSAtICgoaWR4IC8gY29udGV4dFNpemUpIHwgMCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayhmZWF0dXJlLCBnZW9tZXRyeSwgeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNvbnRleHRTaXplLCBjb250ZXh0U2l6ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtBcnJheTxudW1iZXI+fSAqL1xuICAgIGNvbnN0IHpzID0gT2JqZWN0LmtleXModGhpcy5leGVjdXRvcnNCeVpJbmRleF8pLm1hcChOdW1iZXIpO1xuICAgIHpzLnNvcnQoYXNjZW5kaW5nKTtcblxuICAgIGxldCBpLCBqLCBleGVjdXRvcnMsIGV4ZWN1dG9yLCByZXN1bHQ7XG4gICAgZm9yIChpID0genMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGNvbnN0IHpJbmRleEtleSA9IHpzW2ldLnRvU3RyaW5nKCk7XG4gICAgICBleGVjdXRvcnMgPSB0aGlzLmV4ZWN1dG9yc0J5WkluZGV4X1t6SW5kZXhLZXldO1xuICAgICAgZm9yIChqID0gT1JERVIubGVuZ3RoIC0gMTsgaiA+PSAwOyAtLWopIHtcbiAgICAgICAgYnVpbGRlclR5cGUgPSBPUkRFUltqXTtcbiAgICAgICAgZXhlY3V0b3IgPSBleGVjdXRvcnNbYnVpbGRlclR5cGVdO1xuICAgICAgICBpZiAoZXhlY3V0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IGV4ZWN1dG9yLmV4ZWN1dGVIaXREZXRlY3Rpb24oXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICBmZWF0dXJlQ2FsbGJhY2ssXG4gICAgICAgICAgICBoaXRFeHRlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi90cmFuc2Zvcm0uanNcIikuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gVHJhbnNmb3JtLlxuICAgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fG51bGx9IENsaXAgY29vcmRpbmF0ZXMuXG4gICAqL1xuICBnZXRDbGlwQ29vcmRzKHRyYW5zZm9ybSkge1xuICAgIGNvbnN0IG1heEV4dGVudCA9IHRoaXMubWF4RXh0ZW50XztcbiAgICBpZiAoIW1heEV4dGVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG1pblggPSBtYXhFeHRlbnRbMF07XG4gICAgY29uc3QgbWluWSA9IG1heEV4dGVudFsxXTtcbiAgICBjb25zdCBtYXhYID0gbWF4RXh0ZW50WzJdO1xuICAgIGNvbnN0IG1heFkgPSBtYXhFeHRlbnRbM107XG4gICAgY29uc3QgZmxhdENsaXBDb29yZHMgPSBbbWluWCwgbWluWSwgbWluWCwgbWF4WSwgbWF4WCwgbWF4WSwgbWF4WCwgbWluWV07XG4gICAgdHJhbnNmb3JtMkQoZmxhdENsaXBDb29yZHMsIDAsIDgsIDIsIHRyYW5zZm9ybSwgZmxhdENsaXBDb29yZHMpO1xuICAgIHJldHVybiBmbGF0Q2xpcENvb3JkcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBJcyBlbXB0eS5cbiAgICovXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIGlzRW1wdHkodGhpcy5leGVjdXRvcnNCeVpJbmRleF8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IENvbnRleHQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb250ZXh0U2NhbGUgU2NhbGUgb2YgdGhlIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vdHJhbnNmb3JtLmpzXCIpLlRyYW5zZm9ybX0gdHJhbnNmb3JtIFRyYW5zZm9ybS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZpZXdSb3RhdGlvbiBWaWV3IHJvdGF0aW9uLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNuYXBUb1BpeGVsIFNuYXAgcG9pbnQgc3ltYm9scyBhbmQgdGVzdCB0byBpbnRlZ2VyIHBpeGVsLlxuICAgKiBAcGFyYW0ge0FycmF5PGltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5CdWlsZGVyVHlwZT59IFtidWlsZGVyVHlwZXNdIE9yZGVyZWQgcmVwbGF5IHR5cGVzIHRvIHJlcGxheS5cbiAgICogICAgIERlZmF1bHQgaXMge0BsaW5rIG1vZHVsZTpvbC9yZW5kZXIvcmVwbGF5fk9SREVSfVxuICAgKiBAcGFyYW0ge2ltcG9ydChcInJidXNoXCIpLmRlZmF1bHR9IFtkZWNsdXR0ZXJUcmVlXSBEZWNsdXR0ZXIgdHJlZS5cbiAgICovXG4gIGV4ZWN1dGUoXG4gICAgY29udGV4dCxcbiAgICBjb250ZXh0U2NhbGUsXG4gICAgdHJhbnNmb3JtLFxuICAgIHZpZXdSb3RhdGlvbixcbiAgICBzbmFwVG9QaXhlbCxcbiAgICBidWlsZGVyVHlwZXMsXG4gICAgZGVjbHV0dGVyVHJlZVxuICApIHtcbiAgICAvKiogQHR5cGUge0FycmF5PG51bWJlcj59ICovXG4gICAgY29uc3QgenMgPSBPYmplY3Qua2V5cyh0aGlzLmV4ZWN1dG9yc0J5WkluZGV4XykubWFwKE51bWJlcik7XG4gICAgenMuc29ydChhc2NlbmRpbmcpO1xuXG4gICAgLy8gc2V0dXAgY2xpcHBpbmcgc28gdGhhdCB0aGUgcGFydHMgb2Ygb3Zlci1zaW1wbGlmaWVkIGdlb21ldHJpZXMgYXJlIG5vdFxuICAgIC8vIHZpc2libGUgb3V0c2lkZSB0aGUgY3VycmVudCBleHRlbnQgd2hlbiBwYW5uaW5nXG4gICAgaWYgKHRoaXMubWF4RXh0ZW50Xykge1xuICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICB0aGlzLmNsaXAoY29udGV4dCwgdHJhbnNmb3JtKTtcbiAgICB9XG5cbiAgICBidWlsZGVyVHlwZXMgPSBidWlsZGVyVHlwZXMgPyBidWlsZGVyVHlwZXMgOiBPUkRFUjtcbiAgICBsZXQgaSwgaWksIGosIGpqLCByZXBsYXlzLCByZXBsYXk7XG4gICAgaWYgKGRlY2x1dHRlclRyZWUpIHtcbiAgICAgIHpzLnJldmVyc2UoKTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWkgPSB6cy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBjb25zdCB6SW5kZXhLZXkgPSB6c1tpXS50b1N0cmluZygpO1xuICAgICAgcmVwbGF5cyA9IHRoaXMuZXhlY3V0b3JzQnlaSW5kZXhfW3pJbmRleEtleV07XG4gICAgICBmb3IgKGogPSAwLCBqaiA9IGJ1aWxkZXJUeXBlcy5sZW5ndGg7IGogPCBqajsgKytqKSB7XG4gICAgICAgIGNvbnN0IGJ1aWxkZXJUeXBlID0gYnVpbGRlclR5cGVzW2pdO1xuICAgICAgICByZXBsYXkgPSByZXBsYXlzW2J1aWxkZXJUeXBlXTtcbiAgICAgICAgaWYgKHJlcGxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVwbGF5LmV4ZWN1dGUoXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgY29udGV4dFNjYWxlLFxuICAgICAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICAgICAgdmlld1JvdGF0aW9uLFxuICAgICAgICAgICAgc25hcFRvUGl4ZWwsXG4gICAgICAgICAgICBkZWNsdXR0ZXJUcmVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm1heEV4dGVudF8pIHtcbiAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2FjaGUgaXMgdXNlZCB0byBzdG9yZSBhcnJheXMgb2YgaW5kZXhlcyBmb3IgY2FsY3VsYXRlZCBwaXhlbCBjaXJjbGVzXG4gKiB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZS5cbiAqIEl0IGlzIGEgc3RhdGljIHByb3BlcnR5IHRvIGFsbG93IGVhY2ggUmVwbGF5Z3JvdXAgdG8gYWNjZXNzIGl0LlxuICogQHR5cGUge09iamVjdDxudW1iZXIsIEFycmF5PG51bWJlcj4+fVxuICovXG5jb25zdCBjaXJjbGVQaXhlbEluZGV4QXJyYXlDYWNoZSA9IHt9O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggaW5kZXhlcyBvZiBhbGwgcGl4ZWxzIHdpdGhpbiBhIGNpcmNsZSxcbiAqIG9yZGVyZWQgYnkgaG93IGNsb3NlIHRoZXkgYXJlIHRvIHRoZSBjZW50ZXIuXG4gKiBBIGNhY2hlIGlzIHVzZWQgdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIFJhZGl1cy5cbiAqIEByZXR1cm4ge0FycmF5PG51bWJlcj59IEFuIGFycmF5IHdpdGggaW5kZXhlcyB3aXRoaW4gYSBjaXJjbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQaXhlbEluZGV4QXJyYXkocmFkaXVzKSB7XG4gIGlmIChjaXJjbGVQaXhlbEluZGV4QXJyYXlDYWNoZVtyYWRpdXNdICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2lyY2xlUGl4ZWxJbmRleEFycmF5Q2FjaGVbcmFkaXVzXTtcbiAgfVxuXG4gIGNvbnN0IHNpemUgPSByYWRpdXMgKiAyICsgMTtcbiAgY29uc3QgbWF4RGlzdGFuY2VTcSA9IHJhZGl1cyAqIHJhZGl1cztcbiAgY29uc3QgZGlzdGFuY2VzID0gbmV3IEFycmF5KG1heERpc3RhbmNlU3EgKyAxKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcmFkaXVzOyArK2kpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8PSByYWRpdXM7ICsraikge1xuICAgICAgY29uc3QgZGlzdGFuY2VTcSA9IGkgKiBpICsgaiAqIGo7XG4gICAgICBpZiAoZGlzdGFuY2VTcSA+IG1heERpc3RhbmNlU3EpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZXQgZGlzdGFuY2UgPSBkaXN0YW5jZXNbZGlzdGFuY2VTcV07XG4gICAgICBpZiAoIWRpc3RhbmNlKSB7XG4gICAgICAgIGRpc3RhbmNlID0gW107XG4gICAgICAgIGRpc3RhbmNlc1tkaXN0YW5jZVNxXSA9IGRpc3RhbmNlO1xuICAgICAgfVxuICAgICAgZGlzdGFuY2UucHVzaCgoKHJhZGl1cyArIGkpICogc2l6ZSArIChyYWRpdXMgKyBqKSkgKiA0ICsgMyk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgZGlzdGFuY2UucHVzaCgoKHJhZGl1cyAtIGkpICogc2l6ZSArIChyYWRpdXMgKyBqKSkgKiA0ICsgMyk7XG4gICAgICB9XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgZGlzdGFuY2UucHVzaCgoKHJhZGl1cyArIGkpICogc2l6ZSArIChyYWRpdXMgLSBqKSkgKiA0ICsgMyk7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIGRpc3RhbmNlLnB1c2goKChyYWRpdXMgLSBpKSAqIHNpemUgKyAocmFkaXVzIC0gaikpICogNCArIDMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGl4ZWxJbmRleCA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaWkgPSBkaXN0YW5jZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgIGlmIChkaXN0YW5jZXNbaV0pIHtcbiAgICAgIHBpeGVsSW5kZXgucHVzaCguLi5kaXN0YW5jZXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIGNpcmNsZVBpeGVsSW5kZXhBcnJheUNhY2hlW3JhZGl1c10gPSBwaXhlbEluZGV4O1xuICByZXR1cm4gcGl4ZWxJbmRleDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhlY3V0b3JHcm91cDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15240\n')},45707:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "$O": function() { return /* binding */ beginPathInstruction; },\n/* harmony export */   "Yc": function() { return /* binding */ strokeInstruction; },\n/* harmony export */   "gO": function() { return /* binding */ fillInstruction; },\n/* harmony export */   "s3": function() { return /* binding */ closePathInstruction; }\n/* harmony export */ });\n/**\n * @module ol/render/canvas/Instruction\n */\n\n/**\n * @enum {number}\n */\nconst Instruction = {\n  BEGIN_GEOMETRY: 0,\n  BEGIN_PATH: 1,\n  CIRCLE: 2,\n  CLOSE_PATH: 3,\n  CUSTOM: 4,\n  DRAW_CHARS: 5,\n  DRAW_IMAGE: 6,\n  END_GEOMETRY: 7,\n  FILL: 8,\n  MOVE_TO_LINE_TO: 9,\n  SET_FILL_STYLE: 10,\n  SET_STROKE_STYLE: 11,\n  STROKE: 12,\n};\n\n/**\n * @type {Array<Instruction>}\n */\nconst fillInstruction = [Instruction.FILL];\n\n/**\n * @type {Array<Instruction>}\n */\nconst strokeInstruction = [Instruction.STROKE];\n\n/**\n * @type {Array<Instruction>}\n */\nconst beginPathInstruction = [Instruction.BEGIN_PATH];\n\n/**\n * @type {Array<Instruction>}\n */\nconst closePathInstruction = [Instruction.CLOSE_PATH];\n\n/* harmony default export */ __webpack_exports__["ZP"] = (Instruction);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3MDcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ087O0FBRVA7QUFDQSxVQUFVO0FBQ1Y7QUFDTzs7QUFFUDtBQUNBLFVBQVU7QUFDVjtBQUNPOztBQUVQO0FBQ0EsVUFBVTtBQUNWO0FBQ087O0FBRVAsMERBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9vbC9yZW5kZXIvY2FudmFzL0luc3RydWN0aW9uLmpzP2UyNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL3JlbmRlci9jYW52YXMvSW5zdHJ1Y3Rpb25cbiAqL1xuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmNvbnN0IEluc3RydWN0aW9uID0ge1xuICBCRUdJTl9HRU9NRVRSWTogMCxcbiAgQkVHSU5fUEFUSDogMSxcbiAgQ0lSQ0xFOiAyLFxuICBDTE9TRV9QQVRIOiAzLFxuICBDVVNUT006IDQsXG4gIERSQVdfQ0hBUlM6IDUsXG4gIERSQVdfSU1BR0U6IDYsXG4gIEVORF9HRU9NRVRSWTogNyxcbiAgRklMTDogOCxcbiAgTU9WRV9UT19MSU5FX1RPOiA5LFxuICBTRVRfRklMTF9TVFlMRTogMTAsXG4gIFNFVF9TVFJPS0VfU1RZTEU6IDExLFxuICBTVFJPS0U6IDEyLFxufTtcblxuLyoqXG4gKiBAdHlwZSB7QXJyYXk8SW5zdHJ1Y3Rpb24+fVxuICovXG5leHBvcnQgY29uc3QgZmlsbEluc3RydWN0aW9uID0gW0luc3RydWN0aW9uLkZJTExdO1xuXG4vKipcbiAqIEB0eXBlIHtBcnJheTxJbnN0cnVjdGlvbj59XG4gKi9cbmV4cG9ydCBjb25zdCBzdHJva2VJbnN0cnVjdGlvbiA9IFtJbnN0cnVjdGlvbi5TVFJPS0VdO1xuXG4vKipcbiAqIEB0eXBlIHtBcnJheTxJbnN0cnVjdGlvbj59XG4gKi9cbmV4cG9ydCBjb25zdCBiZWdpblBhdGhJbnN0cnVjdGlvbiA9IFtJbnN0cnVjdGlvbi5CRUdJTl9QQVRIXTtcblxuLyoqXG4gKiBAdHlwZSB7QXJyYXk8SW5zdHJ1Y3Rpb24+fVxuICovXG5leHBvcnQgY29uc3QgY2xvc2VQYXRoSW5zdHJ1Y3Rpb24gPSBbSW5zdHJ1Y3Rpb24uQ0xPU0VfUEFUSF07XG5cbmV4cG9ydCBkZWZhdWx0IEluc3RydWN0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45707\n')},27043:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"I\": function() { return /* binding */ TEXT_ALIGN; }\n/* harmony export */ });\n/* harmony import */ var _Builder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99557);\n/* harmony import */ var _Instruction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(45707);\n/* harmony import */ var _colorlike_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(96620);\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50147);\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(74187);\n/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(28641);\n/* harmony import */ var _geom_flat_linechunk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21842);\n/* harmony import */ var _geom_flat_straightchunk_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12365);\n/**\n * @module ol/render/canvas/TextBuilder\n */\n\n\n\n\n\n\n\n\n/**\n * @const\n * @enum {number}\n */\nconst TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends _Builder_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n\n    if (\n      textState.placement === 'line' &&\n      (geometryType == 'LineString' ||\n        geometryType == 'MultiLineString' ||\n        geometryType == 'Polygon' ||\n        geometryType == 'MultiPolygon')\n    ) {\n      if (!(0,_extent_js__WEBPACK_IMPORTED_MODULE_1__/* .intersects */ .kK)(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = (0,_geom_flat_linechunk_js__WEBPACK_IMPORTED_MODULE_2__/* .lineChunk */ .D)(\n            repeat * this.resolution,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride\n          );\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = (0,_geom_flat_straightchunk_js__WEBPACK_IMPORTED_MODULE_3__/* .matchingChunk */ ._)(\n              textState.maxAngle,\n              chunk,\n              0,\n              chunk.length,\n              2\n            );\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n              geometry\n            ).getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\n              geometry\n            ).getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints =\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (\n        geometryWidths &&\n        (end - begin) / 2 !== flatCoordinates.length / stride\n      ) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep =\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultPadding */ .oB &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        _Instruction_js__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"].DRAW_IMAGE */ .ZP.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        undefined,\n        this.declutterImageWithText_,\n        padding == _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultPadding */ .oB\n          ? _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultPadding */ .oB\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      this.hitDetectionInstructions.push([\n        _Instruction_js__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"].DRAW_IMAGE */ .ZP.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        undefined,\n        this.declutterImageWithText_,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultTextAlign */ .PH,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultTextBaseline */ .ru,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      _Instruction_js__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"].DRAW_CHARS */ .ZP.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n    ]);\n    this.hitDetectionInstructions.push([\n      _Instruction_js__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"].DRAW_CHARS */ .ZP.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      1,\n      offsetY,\n      strokeKey,\n      strokeWidth,\n      text,\n      textKey,\n      1 / pixelRatio,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = (0,_colorlike_js__WEBPACK_IMPORTED_MODULE_6__/* .asColorLike */ .y)(\n          textFillStyle.getColor() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultFillStyle */ .bL\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultLineCap */ .mb;\n        strokeState.lineDash = lineDash ? lineDash.slice() : _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultLineDash */ .X9;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultLineDashOffset */ .He : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultLineJoin */ .rc;\n        strokeState.lineWidth =\n          lineWidth === undefined ? _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultLineWidth */ .yC : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultMiterLimit */ .V4 : miterLimit;\n        strokeState.strokeStyle = (0,_colorlike_js__WEBPACK_IMPORTED_MODULE_6__/* .asColorLike */ .y)(\n          textStrokeStyle.getColor() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultStrokeStyle */ .Tx\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultFont */ .Df;\n      (0,_canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .registerFont */ .Qx)(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultTextBaseline */ .ru;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || _canvas_js__WEBPACK_IMPORTED_MODULE_4__/* .defaultPadding */ .oB;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : (0,_util_js__WEBPACK_IMPORTED_MODULE_7__/* .getUid */ .sq)(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.repeat || '?') +\n        (textState.justify || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ = fillState\n        ? typeof fillState.fillStyle == 'string'\n          ? fillState.fillStyle\n          : '|' + (0,_util_js__WEBPACK_IMPORTED_MODULE_7__/* .getUid */ .sq)(fillState.fillStyle)\n        : '';\n    }\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"Z\"] = (CanvasTextBuilder);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUN0RCxrQ0FBa0MsbUVBQVc7QUFDN0Msd0NBQXdDLG9FQUFrQjtBQUMxRDtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLDZEQUFXO0FBQ3JELE1BQU0sa0VBQVk7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHFFQUFtQjtBQUMxRDtBQUNBO0FBQ0Esb0RBQW9ELGdFQUFjO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMERBQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwREFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlEQUFlLGlCQUFpQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9vbC9yZW5kZXIvY2FudmFzL1RleHRCdWlsZGVyLmpzPzI5YTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL3JlbmRlci9jYW52YXMvVGV4dEJ1aWxkZXJcbiAqL1xuaW1wb3J0IENhbnZhc0J1aWxkZXIgZnJvbSAnLi9CdWlsZGVyLmpzJztcbmltcG9ydCBDYW52YXNJbnN0cnVjdGlvbiBmcm9tICcuL0luc3RydWN0aW9uLmpzJztcbmltcG9ydCB7YXNDb2xvckxpa2V9IGZyb20gJy4uLy4uL2NvbG9ybGlrZS5qcyc7XG5pbXBvcnQge1xuICBkZWZhdWx0RmlsbFN0eWxlLFxuICBkZWZhdWx0Rm9udCxcbiAgZGVmYXVsdExpbmVDYXAsXG4gIGRlZmF1bHRMaW5lRGFzaCxcbiAgZGVmYXVsdExpbmVEYXNoT2Zmc2V0LFxuICBkZWZhdWx0TGluZUpvaW4sXG4gIGRlZmF1bHRMaW5lV2lkdGgsXG4gIGRlZmF1bHRNaXRlckxpbWl0LFxuICBkZWZhdWx0UGFkZGluZyxcbiAgZGVmYXVsdFN0cm9rZVN0eWxlLFxuICBkZWZhdWx0VGV4dEFsaWduLFxuICBkZWZhdWx0VGV4dEJhc2VsaW5lLFxuICByZWdpc3RlckZvbnQsXG59IGZyb20gJy4uL2NhbnZhcy5qcyc7XG5pbXBvcnQge2dldFVpZH0gZnJvbSAnLi4vLi4vdXRpbC5qcyc7XG5pbXBvcnQge2ludGVyc2VjdHN9IGZyb20gJy4uLy4uL2V4dGVudC5qcyc7XG5pbXBvcnQge2xpbmVDaHVua30gZnJvbSAnLi4vLi4vZ2VvbS9mbGF0L2xpbmVjaHVuay5qcyc7XG5pbXBvcnQge21hdGNoaW5nQ2h1bmt9IGZyb20gJy4uLy4uL2dlb20vZmxhdC9zdHJhaWdodGNodW5rLmpzJztcbi8qKlxuICogQGNvbnN0XG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVF9BTElHTiA9IHtcbiAgJ2xlZnQnOiAwLFxuICAnZW5kJzogMCxcbiAgJ2NlbnRlcic6IDAuNSxcbiAgJ3JpZ2h0JzogMSxcbiAgJ3N0YXJ0JzogMSxcbiAgJ3RvcCc6IDAsXG4gICdtaWRkbGUnOiAwLjUsXG4gICdoYW5naW5nJzogMC4yLFxuICAnYWxwaGFiZXRpYyc6IDAuOCxcbiAgJ2lkZW9ncmFwaGljJzogMC44LFxuICAnYm90dG9tJzogMSxcbn07XG5cbmNsYXNzIENhbnZhc1RleHRCdWlsZGVyIGV4dGVuZHMgQ2FudmFzQnVpbGRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9sZXJhbmNlIFRvbGVyYW5jZS5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9leHRlbnQuanNcIikuRXh0ZW50fSBtYXhFeHRlbnQgTWF4aW11bSBleHRlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uIFJlc29sdXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvIFBpeGVsIHJhdGlvLlxuICAgKi9cbiAgY29uc3RydWN0b3IodG9sZXJhbmNlLCBtYXhFeHRlbnQsIHJlc29sdXRpb24sIHBpeGVsUmF0aW8pIHtcbiAgICBzdXBlcih0b2xlcmFuY2UsIG1heEV4dGVudCwgcmVzb2x1dGlvbiwgcGl4ZWxSYXRpbyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtBcnJheTxIVE1MQ2FudmFzRWxlbWVudD59XG4gICAgICovXG4gICAgdGhpcy5sYWJlbHNfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge3N0cmluZ3xBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMudGV4dF8gPSAnJztcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnRleHRPZmZzZXRYXyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy50ZXh0T2Zmc2V0WV8gPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy50ZXh0Um90YXRlV2l0aFZpZXdfID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudGV4dFJvdGF0aW9uXyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHs/aW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkZpbGxTdGF0ZX1cbiAgICAgKi9cbiAgICB0aGlzLnRleHRGaWxsU3RhdGVfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgaW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkZpbGxTdGF0ZT59XG4gICAgICovXG4gICAgdGhpcy5maWxsU3RhdGVzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHs/aW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLlN0cm9rZVN0YXRlfVxuICAgICAqL1xuICAgIHRoaXMudGV4dFN0cm9rZVN0YXRlXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIGltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5TdHJva2VTdGF0ZT59XG4gICAgICovXG4gICAgdGhpcy5zdHJva2VTdGF0ZXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2ltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5UZXh0U3RhdGV9XG4gICAgICovXG4gICAgdGhpcy50ZXh0U3RhdGVfID0gLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuVGV4dFN0YXRlfSAqLyAoe30pO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuVGV4dFN0YXRlPn1cbiAgICAgKi9cbiAgICB0aGlzLnRleHRTdGF0ZXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRleHRLZXlfID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5maWxsS2V5XyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3Ryb2tlS2V5XyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogRGF0YSBzaGFyZWQgd2l0aCBhbiBpbWFnZSBidWlsZGVyIGZvciBjb21iaW5lZCBkZWNsdXR0ZXJpbmcuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vY2FudmFzLmpzXCIpLkRlY2x1dHRlckltYWdlV2l0aFRleHR9XG4gICAgICovXG4gICAgdGhpcy5kZWNsdXR0ZXJJbWFnZVdpdGhUZXh0XyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtpbXBvcnQoXCIuLi9jYW52YXMuanNcIikuU2VyaWFsaXphYmxlSW5zdHJ1Y3Rpb25zfSB0aGUgc2VyaWFsaXphYmxlIGluc3RydWN0aW9ucy5cbiAgICovXG4gIGZpbmlzaCgpIHtcbiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBzdXBlci5maW5pc2goKTtcbiAgICBpbnN0cnVjdGlvbnMudGV4dFN0YXRlcyA9IHRoaXMudGV4dFN0YXRlcztcbiAgICBpbnN0cnVjdGlvbnMuZmlsbFN0YXRlcyA9IHRoaXMuZmlsbFN0YXRlcztcbiAgICBpbnN0cnVjdGlvbnMuc3Ryb2tlU3RhdGVzID0gdGhpcy5zdHJva2VTdGF0ZXM7XG4gICAgcmV0dXJuIGluc3RydWN0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL2dlb20vU2ltcGxlR2VvbWV0cnkuanNcIikuZGVmYXVsdHxpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHR9IGdlb21ldHJ5IEdlb21ldHJ5LlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAgICovXG4gIGRyYXdUZXh0KGdlb21ldHJ5LCBmZWF0dXJlKSB7XG4gICAgY29uc3QgZmlsbFN0YXRlID0gdGhpcy50ZXh0RmlsbFN0YXRlXztcbiAgICBjb25zdCBzdHJva2VTdGF0ZSA9IHRoaXMudGV4dFN0cm9rZVN0YXRlXztcbiAgICBjb25zdCB0ZXh0U3RhdGUgPSB0aGlzLnRleHRTdGF0ZV87XG4gICAgaWYgKHRoaXMudGV4dF8gPT09ICcnIHx8ICF0ZXh0U3RhdGUgfHwgKCFmaWxsU3RhdGUgJiYgIXN0cm9rZVN0YXRlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gdGhpcy5jb29yZGluYXRlcztcbiAgICBsZXQgYmVnaW4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG5cbiAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBnZW9tZXRyeS5nZXRUeXBlKCk7XG4gICAgbGV0IGZsYXRDb29yZGluYXRlcyA9IG51bGw7XG4gICAgbGV0IHN0cmlkZSA9IGdlb21ldHJ5LmdldFN0cmlkZSgpO1xuXG4gICAgaWYgKFxuICAgICAgdGV4dFN0YXRlLnBsYWNlbWVudCA9PT0gJ2xpbmUnICYmXG4gICAgICAoZ2VvbWV0cnlUeXBlID09ICdMaW5lU3RyaW5nJyB8fFxuICAgICAgICBnZW9tZXRyeVR5cGUgPT0gJ011bHRpTGluZVN0cmluZycgfHxcbiAgICAgICAgZ2VvbWV0cnlUeXBlID09ICdQb2x5Z29uJyB8fFxuICAgICAgICBnZW9tZXRyeVR5cGUgPT0gJ011bHRpUG9seWdvbicpXG4gICAgKSB7XG4gICAgICBpZiAoIWludGVyc2VjdHModGhpcy5nZXRCdWZmZXJlZE1heEV4dGVudCgpLCBnZW9tZXRyeS5nZXRFeHRlbnQoKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IGVuZHM7XG4gICAgICBmbGF0Q29vcmRpbmF0ZXMgPSBnZW9tZXRyeS5nZXRGbGF0Q29vcmRpbmF0ZXMoKTtcbiAgICAgIGlmIChnZW9tZXRyeVR5cGUgPT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgIGVuZHMgPSBbZmxhdENvb3JkaW5hdGVzLmxlbmd0aF07XG4gICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5VHlwZSA9PSAnTXVsdGlMaW5lU3RyaW5nJykge1xuICAgICAgICBlbmRzID0gLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9nZW9tL011bHRpTGluZVN0cmluZy5qc1wiKS5kZWZhdWx0fSAqLyAoXG4gICAgICAgICAgZ2VvbWV0cnlcbiAgICAgICAgKS5nZXRFbmRzKCk7XG4gICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5VHlwZSA9PSAnUG9seWdvbicpIHtcbiAgICAgICAgZW5kcyA9IC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vZ2VvbS9Qb2x5Z29uLmpzXCIpLmRlZmF1bHR9ICovIChnZW9tZXRyeSlcbiAgICAgICAgICAuZ2V0RW5kcygpXG4gICAgICAgICAgLnNsaWNlKDAsIDEpO1xuICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeVR5cGUgPT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgY29uc3QgZW5kc3MgPVxuICAgICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vZ2VvbS9NdWx0aVBvbHlnb24uanNcIikuZGVmYXVsdH0gKi8gKFxuICAgICAgICAgICAgZ2VvbWV0cnlcbiAgICAgICAgICApLmdldEVuZHNzKCk7XG4gICAgICAgIGVuZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZW5kc3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIGVuZHMucHVzaChlbmRzc1tpXVswXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYmVnaW5HZW9tZXRyeShnZW9tZXRyeSwgZmVhdHVyZSk7XG4gICAgICBjb25zdCByZXBlYXQgPSB0ZXh0U3RhdGUucmVwZWF0O1xuICAgICAgY29uc3QgdGV4dEFsaWduID0gcmVwZWF0ID8gdW5kZWZpbmVkIDogdGV4dFN0YXRlLnRleHRBbGlnbjtcbiAgICAgIC8vIE5vIGBqdXN0aWZ5YCBzdXBwb3J0IGZvciBsaW5lIHBsYWNlbWVudC5cbiAgICAgIGxldCBmbGF0T2Zmc2V0ID0gMDtcbiAgICAgIGZvciAobGV0IG8gPSAwLCBvbyA9IGVuZHMubGVuZ3RoOyBvIDwgb287ICsrbykge1xuICAgICAgICBsZXQgY2h1bmtzO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgY2h1bmtzID0gbGluZUNodW5rKFxuICAgICAgICAgICAgcmVwZWF0ICogdGhpcy5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgZmxhdENvb3JkaW5hdGVzLFxuICAgICAgICAgICAgZmxhdE9mZnNldCxcbiAgICAgICAgICAgIGVuZHNbb10sXG4gICAgICAgICAgICBzdHJpZGVcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNodW5rcyA9IFtmbGF0Q29vcmRpbmF0ZXMuc2xpY2UoZmxhdE9mZnNldCwgZW5kc1tvXSldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGMgPSAwLCBjYyA9IGNodW5rcy5sZW5ndGg7IGMgPCBjYzsgKytjKSB7XG4gICAgICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3NbY107XG4gICAgICAgICAgbGV0IGNodW5rQmVnaW4gPSAwO1xuICAgICAgICAgIGxldCBjaHVua0VuZCA9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICBpZiAodGV4dEFsaWduID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBtYXRjaGluZ0NodW5rKFxuICAgICAgICAgICAgICB0ZXh0U3RhdGUubWF4QW5nbGUsXG4gICAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICBjaHVuay5sZW5ndGgsXG4gICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjaHVua0JlZ2luID0gcmFuZ2VbMF07XG4gICAgICAgICAgICBjaHVua0VuZCA9IHJhbmdlWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGxldCBpID0gY2h1bmtCZWdpbjsgaSA8IGNodW5rRW5kOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjaHVua1tpXSwgY2h1bmtbaSArIDFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZW5kID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgICAgICAgIGZsYXRPZmZzZXQgPSBlbmRzW29dO1xuICAgICAgICAgIHRoaXMuZHJhd0NoYXJzXyhiZWdpbiwgZW5kKTtcbiAgICAgICAgICBiZWdpbiA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5lbmRHZW9tZXRyeShmZWF0dXJlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGdlb21ldHJ5V2lkdGhzID0gdGV4dFN0YXRlLm92ZXJmbG93ID8gbnVsbCA6IFtdO1xuICAgICAgc3dpdGNoIChnZW9tZXRyeVR5cGUpIHtcbiAgICAgICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICBjYXNlICdNdWx0aVBvaW50JzpcbiAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9nZW9tL011bHRpUG9pbnQuanNcIikuZGVmYXVsdH0gKi8gKFxuICAgICAgICAgICAgICBnZW9tZXRyeVxuICAgICAgICAgICAgKS5nZXRGbGF0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XG4gICAgICAgICAgZmxhdENvb3JkaW5hdGVzID1cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vZ2VvbS9MaW5lU3RyaW5nLmpzXCIpLmRlZmF1bHR9ICovIChcbiAgICAgICAgICAgICAgZ2VvbWV0cnlcbiAgICAgICAgICAgICkuZ2V0RmxhdE1pZHBvaW50KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NpcmNsZSc6XG4gICAgICAgICAgZmxhdENvb3JkaW5hdGVzID1cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vZ2VvbS9DaXJjbGUuanNcIikuZGVmYXVsdH0gKi8gKFxuICAgICAgICAgICAgICBnZW9tZXRyeVxuICAgICAgICAgICAgKS5nZXRDZW50ZXIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcbiAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9nZW9tL011bHRpTGluZVN0cmluZy5qc1wiKS5kZWZhdWx0fSAqLyAoXG4gICAgICAgICAgICAgIGdlb21ldHJ5XG4gICAgICAgICAgICApLmdldEZsYXRNaWRwb2ludHMoKTtcbiAgICAgICAgICBzdHJpZGUgPSAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9nZW9tL1BvbHlnb24uanNcIikuZGVmYXVsdH0gKi8gKFxuICAgICAgICAgICAgICBnZW9tZXRyeVxuICAgICAgICAgICAgKS5nZXRGbGF0SW50ZXJpb3JQb2ludCgpO1xuICAgICAgICAgIGlmICghdGV4dFN0YXRlLm92ZXJmbG93KSB7XG4gICAgICAgICAgICBnZW9tZXRyeVdpZHRocy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSAvIHRoaXMucmVzb2x1dGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmlkZSA9IDM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ011bHRpUG9seWdvbic6XG4gICAgICAgICAgY29uc3QgaW50ZXJpb3JQb2ludHMgPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9nZW9tL011bHRpUG9seWdvbi5qc1wiKS5kZWZhdWx0fSAqLyAoXG4gICAgICAgICAgICAgIGdlb21ldHJ5XG4gICAgICAgICAgICApLmdldEZsYXRJbnRlcmlvclBvaW50cygpO1xuICAgICAgICAgIGZsYXRDb29yZGluYXRlcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGludGVyaW9yUG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGlmICghdGV4dFN0YXRlLm92ZXJmbG93KSB7XG4gICAgICAgICAgICAgIGdlb21ldHJ5V2lkdGhzLnB1c2goaW50ZXJpb3JQb2ludHNbaSArIDJdIC8gdGhpcy5yZXNvbHV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZsYXRDb29yZGluYXRlcy5wdXNoKGludGVyaW9yUG9pbnRzW2ldLCBpbnRlcmlvclBvaW50c1tpICsgMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmxhdENvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHJpZGUgPSAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgICAgY29uc3QgZW5kID0gdGhpcy5hcHBlbmRGbGF0UG9pbnRDb29yZGluYXRlcyhmbGF0Q29vcmRpbmF0ZXMsIHN0cmlkZSk7XG4gICAgICBpZiAoZW5kID09PSBiZWdpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGdlb21ldHJ5V2lkdGhzICYmXG4gICAgICAgIChlbmQgLSBiZWdpbikgLyAyICE9PSBmbGF0Q29vcmRpbmF0ZXMubGVuZ3RoIC8gc3RyaWRlXG4gICAgICApIHtcbiAgICAgICAgbGV0IGJlZyA9IGJlZ2luIC8gMjtcbiAgICAgICAgZ2VvbWV0cnlXaWR0aHMgPSBnZW9tZXRyeVdpZHRocy5maWx0ZXIoKHcsIGkpID0+IHtcbiAgICAgICAgICBjb25zdCBrZWVwID1cbiAgICAgICAgICAgIGNvb3JkaW5hdGVzWyhiZWcgKyBpKSAqIDJdID09PSBmbGF0Q29vcmRpbmF0ZXNbaSAqIHN0cmlkZV0gJiZcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzWyhiZWcgKyBpKSAqIDIgKyAxXSA9PT0gZmxhdENvb3JkaW5hdGVzW2kgKiBzdHJpZGUgKyAxXTtcbiAgICAgICAgICBpZiAoIWtlZXApIHtcbiAgICAgICAgICAgIC0tYmVnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ga2VlcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2F2ZVRleHRTdGF0ZXNfKCk7XG5cbiAgICAgIGlmICh0ZXh0U3RhdGUuYmFja2dyb3VuZEZpbGwgfHwgdGV4dFN0YXRlLmJhY2tncm91bmRTdHJva2UpIHtcbiAgICAgICAgdGhpcy5zZXRGaWxsU3Ryb2tlU3R5bGUoXG4gICAgICAgICAgdGV4dFN0YXRlLmJhY2tncm91bmRGaWxsLFxuICAgICAgICAgIHRleHRTdGF0ZS5iYWNrZ3JvdW5kU3Ryb2tlXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0ZXh0U3RhdGUuYmFja2dyb3VuZEZpbGwpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUZpbGxTdHlsZSh0aGlzLnN0YXRlLCB0aGlzLmNyZWF0ZUZpbGwpO1xuICAgICAgICAgIHRoaXMuaGl0RGV0ZWN0aW9uSW5zdHJ1Y3Rpb25zLnB1c2godGhpcy5jcmVhdGVGaWxsKHRoaXMuc3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dFN0YXRlLmJhY2tncm91bmRTdHJva2UpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN0cm9rZVN0eWxlKHRoaXMuc3RhdGUsIHRoaXMuYXBwbHlTdHJva2UpO1xuICAgICAgICAgIHRoaXMuaGl0RGV0ZWN0aW9uSW5zdHJ1Y3Rpb25zLnB1c2godGhpcy5jcmVhdGVTdHJva2UodGhpcy5zdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYmVnaW5HZW9tZXRyeShnZW9tZXRyeSwgZmVhdHVyZSk7XG5cbiAgICAgIC8vIGFkanVzdCBwYWRkaW5nIGZvciBuZWdhdGl2ZSBzY2FsZVxuICAgICAgbGV0IHBhZGRpbmcgPSB0ZXh0U3RhdGUucGFkZGluZztcbiAgICAgIGlmIChcbiAgICAgICAgcGFkZGluZyAhPSBkZWZhdWx0UGFkZGluZyAmJlxuICAgICAgICAodGV4dFN0YXRlLnNjYWxlWzBdIDwgMCB8fCB0ZXh0U3RhdGUuc2NhbGVbMV0gPCAwKVxuICAgICAgKSB7XG4gICAgICAgIGxldCBwMCA9IHRleHRTdGF0ZS5wYWRkaW5nWzBdO1xuICAgICAgICBsZXQgcDEgPSB0ZXh0U3RhdGUucGFkZGluZ1sxXTtcbiAgICAgICAgbGV0IHAyID0gdGV4dFN0YXRlLnBhZGRpbmdbMl07XG4gICAgICAgIGxldCBwMyA9IHRleHRTdGF0ZS5wYWRkaW5nWzNdO1xuICAgICAgICBpZiAodGV4dFN0YXRlLnNjYWxlWzBdIDwgMCkge1xuICAgICAgICAgIHAxID0gLXAxO1xuICAgICAgICAgIHAzID0gLXAzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0U3RhdGUuc2NhbGVbMV0gPCAwKSB7XG4gICAgICAgICAgcDAgPSAtcDA7XG4gICAgICAgICAgcDIgPSAtcDI7XG4gICAgICAgIH1cbiAgICAgICAgcGFkZGluZyA9IFtwMCwgcDEsIHAyLCBwM107XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBpbWFnZSBpcyB1bmtub3duIGF0IHRoaXMgc3RhZ2Ugc28gd2UgcGFzcyBudWxsOyBpdCB3aWxsIGJlIGNvbXB1dGVkIGF0IHJlbmRlciB0aW1lLlxuICAgICAgLy8gRm9yIGNsYXJpdHksIHdlIHBhc3MgTmFOIGZvciBvZmZzZXRYLCBvZmZzZXRZLCB3aWR0aCBhbmQgaGVpZ2h0LCB3aGljaCB3aWxsIGJlIGNvbXB1dGVkIGF0XG4gICAgICAvLyByZW5kZXIgdGltZS5cbiAgICAgIGNvbnN0IHBpeGVsUmF0aW8gPSB0aGlzLnBpeGVsUmF0aW87XG4gICAgICB0aGlzLmluc3RydWN0aW9ucy5wdXNoKFtcbiAgICAgICAgQ2FudmFzSW5zdHJ1Y3Rpb24uRFJBV19JTUFHRSxcbiAgICAgICAgYmVnaW4sXG4gICAgICAgIGVuZCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgTmFOLFxuICAgICAgICBOYU4sXG4gICAgICAgIE5hTixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy50ZXh0Um90YXRlV2l0aFZpZXdfLFxuICAgICAgICB0aGlzLnRleHRSb3RhdGlvbl8sXG4gICAgICAgIFsxLCAxXSxcbiAgICAgICAgTmFOLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHRoaXMuZGVjbHV0dGVySW1hZ2VXaXRoVGV4dF8sXG4gICAgICAgIHBhZGRpbmcgPT0gZGVmYXVsdFBhZGRpbmdcbiAgICAgICAgICA/IGRlZmF1bHRQYWRkaW5nXG4gICAgICAgICAgOiBwYWRkaW5nLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICByZXR1cm4gcCAqIHBpeGVsUmF0aW87XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgISF0ZXh0U3RhdGUuYmFja2dyb3VuZEZpbGwsXG4gICAgICAgICEhdGV4dFN0YXRlLmJhY2tncm91bmRTdHJva2UsXG4gICAgICAgIHRoaXMudGV4dF8sXG4gICAgICAgIHRoaXMudGV4dEtleV8sXG4gICAgICAgIHRoaXMuc3Ryb2tlS2V5XyxcbiAgICAgICAgdGhpcy5maWxsS2V5XyxcbiAgICAgICAgdGhpcy50ZXh0T2Zmc2V0WF8sXG4gICAgICAgIHRoaXMudGV4dE9mZnNldFlfLFxuICAgICAgICBnZW9tZXRyeVdpZHRocyxcbiAgICAgIF0pO1xuICAgICAgY29uc3Qgc2NhbGUgPSAxIC8gcGl4ZWxSYXRpbztcbiAgICAgIHRoaXMuaGl0RGV0ZWN0aW9uSW5zdHJ1Y3Rpb25zLnB1c2goW1xuICAgICAgICBDYW52YXNJbnN0cnVjdGlvbi5EUkFXX0lNQUdFLFxuICAgICAgICBiZWdpbixcbiAgICAgICAgZW5kLFxuICAgICAgICBudWxsLFxuICAgICAgICBOYU4sXG4gICAgICAgIE5hTixcbiAgICAgICAgTmFOLFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLnRleHRSb3RhdGVXaXRoVmlld18sXG4gICAgICAgIHRoaXMudGV4dFJvdGF0aW9uXyxcbiAgICAgICAgW3NjYWxlLCBzY2FsZV0sXG4gICAgICAgIE5hTixcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB0aGlzLmRlY2x1dHRlckltYWdlV2l0aFRleHRfLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICAhIXRleHRTdGF0ZS5iYWNrZ3JvdW5kRmlsbCxcbiAgICAgICAgISF0ZXh0U3RhdGUuYmFja2dyb3VuZFN0cm9rZSxcbiAgICAgICAgdGhpcy50ZXh0XyxcbiAgICAgICAgdGhpcy50ZXh0S2V5XyxcbiAgICAgICAgdGhpcy5zdHJva2VLZXlfLFxuICAgICAgICB0aGlzLmZpbGxLZXlfLFxuICAgICAgICB0aGlzLnRleHRPZmZzZXRYXyxcbiAgICAgICAgdGhpcy50ZXh0T2Zmc2V0WV8sXG4gICAgICAgIGdlb21ldHJ5V2lkdGhzLFxuICAgICAgXSk7XG5cbiAgICAgIHRoaXMuZW5kR2VvbWV0cnkoZmVhdHVyZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzYXZlVGV4dFN0YXRlc18oKSB7XG4gICAgY29uc3Qgc3Ryb2tlU3RhdGUgPSB0aGlzLnRleHRTdHJva2VTdGF0ZV87XG4gICAgY29uc3QgdGV4dFN0YXRlID0gdGhpcy50ZXh0U3RhdGVfO1xuICAgIGNvbnN0IGZpbGxTdGF0ZSA9IHRoaXMudGV4dEZpbGxTdGF0ZV87XG5cbiAgICBjb25zdCBzdHJva2VLZXkgPSB0aGlzLnN0cm9rZUtleV87XG4gICAgaWYgKHN0cm9rZVN0YXRlKSB7XG4gICAgICBpZiAoIShzdHJva2VLZXkgaW4gdGhpcy5zdHJva2VTdGF0ZXMpKSB7XG4gICAgICAgIHRoaXMuc3Ryb2tlU3RhdGVzW3N0cm9rZUtleV0gPSB7XG4gICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0cm9rZVN0YXRlLnN0cm9rZVN0eWxlLFxuICAgICAgICAgIGxpbmVDYXA6IHN0cm9rZVN0YXRlLmxpbmVDYXAsXG4gICAgICAgICAgbGluZURhc2hPZmZzZXQ6IHN0cm9rZVN0YXRlLmxpbmVEYXNoT2Zmc2V0LFxuICAgICAgICAgIGxpbmVXaWR0aDogc3Ryb2tlU3RhdGUubGluZVdpZHRoLFxuICAgICAgICAgIGxpbmVKb2luOiBzdHJva2VTdGF0ZS5saW5lSm9pbixcbiAgICAgICAgICBtaXRlckxpbWl0OiBzdHJva2VTdGF0ZS5taXRlckxpbWl0LFxuICAgICAgICAgIGxpbmVEYXNoOiBzdHJva2VTdGF0ZS5saW5lRGFzaCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGV4dEtleSA9IHRoaXMudGV4dEtleV87XG4gICAgaWYgKCEodGV4dEtleSBpbiB0aGlzLnRleHRTdGF0ZXMpKSB7XG4gICAgICB0aGlzLnRleHRTdGF0ZXNbdGV4dEtleV0gPSB7XG4gICAgICAgIGZvbnQ6IHRleHRTdGF0ZS5mb250LFxuICAgICAgICB0ZXh0QWxpZ246IHRleHRTdGF0ZS50ZXh0QWxpZ24gfHwgZGVmYXVsdFRleHRBbGlnbixcbiAgICAgICAganVzdGlmeTogdGV4dFN0YXRlLmp1c3RpZnksXG4gICAgICAgIHRleHRCYXNlbGluZTogdGV4dFN0YXRlLnRleHRCYXNlbGluZSB8fCBkZWZhdWx0VGV4dEJhc2VsaW5lLFxuICAgICAgICBzY2FsZTogdGV4dFN0YXRlLnNjYWxlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgZmlsbEtleSA9IHRoaXMuZmlsbEtleV87XG4gICAgaWYgKGZpbGxTdGF0ZSkge1xuICAgICAgaWYgKCEoZmlsbEtleSBpbiB0aGlzLmZpbGxTdGF0ZXMpKSB7XG4gICAgICAgIHRoaXMuZmlsbFN0YXRlc1tmaWxsS2V5XSA9IHtcbiAgICAgICAgICBmaWxsU3R5bGU6IGZpbGxTdGF0ZS5maWxsU3R5bGUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpbiBCZWdpbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBFbmQuXG4gICAqL1xuICBkcmF3Q2hhcnNfKGJlZ2luLCBlbmQpIHtcbiAgICBjb25zdCBzdHJva2VTdGF0ZSA9IHRoaXMudGV4dFN0cm9rZVN0YXRlXztcbiAgICBjb25zdCB0ZXh0U3RhdGUgPSB0aGlzLnRleHRTdGF0ZV87XG5cbiAgICBjb25zdCBzdHJva2VLZXkgPSB0aGlzLnN0cm9rZUtleV87XG4gICAgY29uc3QgdGV4dEtleSA9IHRoaXMudGV4dEtleV87XG4gICAgY29uc3QgZmlsbEtleSA9IHRoaXMuZmlsbEtleV87XG4gICAgdGhpcy5zYXZlVGV4dFN0YXRlc18oKTtcblxuICAgIGNvbnN0IHBpeGVsUmF0aW8gPSB0aGlzLnBpeGVsUmF0aW87XG4gICAgY29uc3QgYmFzZWxpbmUgPSBURVhUX0FMSUdOW3RleHRTdGF0ZS50ZXh0QmFzZWxpbmVdO1xuXG4gICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMudGV4dE9mZnNldFlfICogcGl4ZWxSYXRpbztcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy50ZXh0XztcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IHN0cm9rZVN0YXRlXG4gICAgICA/IChzdHJva2VTdGF0ZS5saW5lV2lkdGggKiBNYXRoLmFicyh0ZXh0U3RhdGUuc2NhbGVbMF0pKSAvIDJcbiAgICAgIDogMDtcblxuICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLnB1c2goW1xuICAgICAgQ2FudmFzSW5zdHJ1Y3Rpb24uRFJBV19DSEFSUyxcbiAgICAgIGJlZ2luLFxuICAgICAgZW5kLFxuICAgICAgYmFzZWxpbmUsXG4gICAgICB0ZXh0U3RhdGUub3ZlcmZsb3csXG4gICAgICBmaWxsS2V5LFxuICAgICAgdGV4dFN0YXRlLm1heEFuZ2xlLFxuICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgIG9mZnNldFksXG4gICAgICBzdHJva2VLZXksXG4gICAgICBzdHJva2VXaWR0aCAqIHBpeGVsUmF0aW8sXG4gICAgICB0ZXh0LFxuICAgICAgdGV4dEtleSxcbiAgICAgIDEsXG4gICAgXSk7XG4gICAgdGhpcy5oaXREZXRlY3Rpb25JbnN0cnVjdGlvbnMucHVzaChbXG4gICAgICBDYW52YXNJbnN0cnVjdGlvbi5EUkFXX0NIQVJTLFxuICAgICAgYmVnaW4sXG4gICAgICBlbmQsXG4gICAgICBiYXNlbGluZSxcbiAgICAgIHRleHRTdGF0ZS5vdmVyZmxvdyxcbiAgICAgIGZpbGxLZXksXG4gICAgICB0ZXh0U3RhdGUubWF4QW5nbGUsXG4gICAgICAxLFxuICAgICAgb2Zmc2V0WSxcbiAgICAgIHN0cm9rZUtleSxcbiAgICAgIHN0cm9rZVdpZHRoLFxuICAgICAgdGV4dCxcbiAgICAgIHRleHRLZXksXG4gICAgICAxIC8gcGl4ZWxSYXRpbyxcbiAgICBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL3N0eWxlL1RleHQuanNcIikuZGVmYXVsdH0gdGV4dFN0eWxlIFRleHQgc3R5bGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbc2hhcmVkRGF0YV0gU2hhcmVkIGRhdGEuXG4gICAqL1xuICBzZXRUZXh0U3R5bGUodGV4dFN0eWxlLCBzaGFyZWREYXRhKSB7XG4gICAgbGV0IHRleHRTdGF0ZSwgZmlsbFN0YXRlLCBzdHJva2VTdGF0ZTtcbiAgICBpZiAoIXRleHRTdHlsZSkge1xuICAgICAgdGhpcy50ZXh0XyA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0ZXh0RmlsbFN0eWxlID0gdGV4dFN0eWxlLmdldEZpbGwoKTtcbiAgICAgIGlmICghdGV4dEZpbGxTdHlsZSkge1xuICAgICAgICBmaWxsU3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLnRleHRGaWxsU3RhdGVfID0gZmlsbFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsbFN0YXRlID0gdGhpcy50ZXh0RmlsbFN0YXRlXztcbiAgICAgICAgaWYgKCFmaWxsU3RhdGUpIHtcbiAgICAgICAgICBmaWxsU3RhdGUgPSAvKiogQHR5cGUge2ltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5GaWxsU3RhdGV9ICovICh7fSk7XG4gICAgICAgICAgdGhpcy50ZXh0RmlsbFN0YXRlXyA9IGZpbGxTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBmaWxsU3RhdGUuZmlsbFN0eWxlID0gYXNDb2xvckxpa2UoXG4gICAgICAgICAgdGV4dEZpbGxTdHlsZS5nZXRDb2xvcigpIHx8IGRlZmF1bHRGaWxsU3R5bGVcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGV4dFN0cm9rZVN0eWxlID0gdGV4dFN0eWxlLmdldFN0cm9rZSgpO1xuICAgICAgaWYgKCF0ZXh0U3Ryb2tlU3R5bGUpIHtcbiAgICAgICAgc3Ryb2tlU3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLnRleHRTdHJva2VTdGF0ZV8gPSBzdHJva2VTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cm9rZVN0YXRlID0gdGhpcy50ZXh0U3Ryb2tlU3RhdGVfO1xuICAgICAgICBpZiAoIXN0cm9rZVN0YXRlKSB7XG4gICAgICAgICAgc3Ryb2tlU3RhdGUgPSAvKiogQHR5cGUge2ltcG9ydChcIi4uL2NhbnZhcy5qc1wiKS5TdHJva2VTdGF0ZX0gKi8gKHt9KTtcbiAgICAgICAgICB0aGlzLnRleHRTdHJva2VTdGF0ZV8gPSBzdHJva2VTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lRGFzaCA9IHRleHRTdHJva2VTdHlsZS5nZXRMaW5lRGFzaCgpO1xuICAgICAgICBjb25zdCBsaW5lRGFzaE9mZnNldCA9IHRleHRTdHJva2VTdHlsZS5nZXRMaW5lRGFzaE9mZnNldCgpO1xuICAgICAgICBjb25zdCBsaW5lV2lkdGggPSB0ZXh0U3Ryb2tlU3R5bGUuZ2V0V2lkdGgoKTtcbiAgICAgICAgY29uc3QgbWl0ZXJMaW1pdCA9IHRleHRTdHJva2VTdHlsZS5nZXRNaXRlckxpbWl0KCk7XG4gICAgICAgIHN0cm9rZVN0YXRlLmxpbmVDYXAgPSB0ZXh0U3Ryb2tlU3R5bGUuZ2V0TGluZUNhcCgpIHx8IGRlZmF1bHRMaW5lQ2FwO1xuICAgICAgICBzdHJva2VTdGF0ZS5saW5lRGFzaCA9IGxpbmVEYXNoID8gbGluZURhc2guc2xpY2UoKSA6IGRlZmF1bHRMaW5lRGFzaDtcbiAgICAgICAgc3Ryb2tlU3RhdGUubGluZURhc2hPZmZzZXQgPVxuICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TGluZURhc2hPZmZzZXQgOiBsaW5lRGFzaE9mZnNldDtcbiAgICAgICAgc3Ryb2tlU3RhdGUubGluZUpvaW4gPSB0ZXh0U3Ryb2tlU3R5bGUuZ2V0TGluZUpvaW4oKSB8fCBkZWZhdWx0TGluZUpvaW47XG4gICAgICAgIHN0cm9rZVN0YXRlLmxpbmVXaWR0aCA9XG4gICAgICAgICAgbGluZVdpZHRoID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TGluZVdpZHRoIDogbGluZVdpZHRoO1xuICAgICAgICBzdHJva2VTdGF0ZS5taXRlckxpbWl0ID1cbiAgICAgICAgICBtaXRlckxpbWl0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWl0ZXJMaW1pdCA6IG1pdGVyTGltaXQ7XG4gICAgICAgIHN0cm9rZVN0YXRlLnN0cm9rZVN0eWxlID0gYXNDb2xvckxpa2UoXG4gICAgICAgICAgdGV4dFN0cm9rZVN0eWxlLmdldENvbG9yKCkgfHwgZGVmYXVsdFN0cm9rZVN0eWxlXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRleHRTdGF0ZSA9IHRoaXMudGV4dFN0YXRlXztcbiAgICAgIGNvbnN0IGZvbnQgPSB0ZXh0U3R5bGUuZ2V0Rm9udCgpIHx8IGRlZmF1bHRGb250O1xuICAgICAgcmVnaXN0ZXJGb250KGZvbnQpO1xuICAgICAgY29uc3QgdGV4dFNjYWxlID0gdGV4dFN0eWxlLmdldFNjYWxlQXJyYXkoKTtcbiAgICAgIHRleHRTdGF0ZS5vdmVyZmxvdyA9IHRleHRTdHlsZS5nZXRPdmVyZmxvdygpO1xuICAgICAgdGV4dFN0YXRlLmZvbnQgPSBmb250O1xuICAgICAgdGV4dFN0YXRlLm1heEFuZ2xlID0gdGV4dFN0eWxlLmdldE1heEFuZ2xlKCk7XG4gICAgICB0ZXh0U3RhdGUucGxhY2VtZW50ID0gdGV4dFN0eWxlLmdldFBsYWNlbWVudCgpO1xuICAgICAgdGV4dFN0YXRlLnRleHRBbGlnbiA9IHRleHRTdHlsZS5nZXRUZXh0QWxpZ24oKTtcbiAgICAgIHRleHRTdGF0ZS5yZXBlYXQgPSB0ZXh0U3R5bGUuZ2V0UmVwZWF0KCk7XG4gICAgICB0ZXh0U3RhdGUuanVzdGlmeSA9IHRleHRTdHlsZS5nZXRKdXN0aWZ5KCk7XG4gICAgICB0ZXh0U3RhdGUudGV4dEJhc2VsaW5lID1cbiAgICAgICAgdGV4dFN0eWxlLmdldFRleHRCYXNlbGluZSgpIHx8IGRlZmF1bHRUZXh0QmFzZWxpbmU7XG4gICAgICB0ZXh0U3RhdGUuYmFja2dyb3VuZEZpbGwgPSB0ZXh0U3R5bGUuZ2V0QmFja2dyb3VuZEZpbGwoKTtcbiAgICAgIHRleHRTdGF0ZS5iYWNrZ3JvdW5kU3Ryb2tlID0gdGV4dFN0eWxlLmdldEJhY2tncm91bmRTdHJva2UoKTtcbiAgICAgIHRleHRTdGF0ZS5wYWRkaW5nID0gdGV4dFN0eWxlLmdldFBhZGRpbmcoKSB8fCBkZWZhdWx0UGFkZGluZztcbiAgICAgIHRleHRTdGF0ZS5zY2FsZSA9IHRleHRTY2FsZSA9PT0gdW5kZWZpbmVkID8gWzEsIDFdIDogdGV4dFNjYWxlO1xuXG4gICAgICBjb25zdCB0ZXh0T2Zmc2V0WCA9IHRleHRTdHlsZS5nZXRPZmZzZXRYKCk7XG4gICAgICBjb25zdCB0ZXh0T2Zmc2V0WSA9IHRleHRTdHlsZS5nZXRPZmZzZXRZKCk7XG4gICAgICBjb25zdCB0ZXh0Um90YXRlV2l0aFZpZXcgPSB0ZXh0U3R5bGUuZ2V0Um90YXRlV2l0aFZpZXcoKTtcbiAgICAgIGNvbnN0IHRleHRSb3RhdGlvbiA9IHRleHRTdHlsZS5nZXRSb3RhdGlvbigpO1xuICAgICAgdGhpcy50ZXh0XyA9IHRleHRTdHlsZS5nZXRUZXh0KCkgfHwgJyc7XG4gICAgICB0aGlzLnRleHRPZmZzZXRYXyA9IHRleHRPZmZzZXRYID09PSB1bmRlZmluZWQgPyAwIDogdGV4dE9mZnNldFg7XG4gICAgICB0aGlzLnRleHRPZmZzZXRZXyA9IHRleHRPZmZzZXRZID09PSB1bmRlZmluZWQgPyAwIDogdGV4dE9mZnNldFk7XG4gICAgICB0aGlzLnRleHRSb3RhdGVXaXRoVmlld18gPVxuICAgICAgICB0ZXh0Um90YXRlV2l0aFZpZXcgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogdGV4dFJvdGF0ZVdpdGhWaWV3O1xuICAgICAgdGhpcy50ZXh0Um90YXRpb25fID0gdGV4dFJvdGF0aW9uID09PSB1bmRlZmluZWQgPyAwIDogdGV4dFJvdGF0aW9uO1xuXG4gICAgICB0aGlzLnN0cm9rZUtleV8gPSBzdHJva2VTdGF0ZVxuICAgICAgICA/ICh0eXBlb2Ygc3Ryb2tlU3RhdGUuc3Ryb2tlU3R5bGUgPT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gc3Ryb2tlU3RhdGUuc3Ryb2tlU3R5bGVcbiAgICAgICAgICAgIDogZ2V0VWlkKHN0cm9rZVN0YXRlLnN0cm9rZVN0eWxlKSkgK1xuICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVDYXAgK1xuICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVEYXNoT2Zmc2V0ICtcbiAgICAgICAgICAnfCcgK1xuICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVXaWR0aCArXG4gICAgICAgICAgc3Ryb2tlU3RhdGUubGluZUpvaW4gK1xuICAgICAgICAgIHN0cm9rZVN0YXRlLm1pdGVyTGltaXQgK1xuICAgICAgICAgICdbJyArXG4gICAgICAgICAgc3Ryb2tlU3RhdGUubGluZURhc2guam9pbigpICtcbiAgICAgICAgICAnXSdcbiAgICAgICAgOiAnJztcbiAgICAgIHRoaXMudGV4dEtleV8gPVxuICAgICAgICB0ZXh0U3RhdGUuZm9udCArXG4gICAgICAgIHRleHRTdGF0ZS5zY2FsZSArXG4gICAgICAgICh0ZXh0U3RhdGUudGV4dEFsaWduIHx8ICc/JykgK1xuICAgICAgICAodGV4dFN0YXRlLnJlcGVhdCB8fCAnPycpICtcbiAgICAgICAgKHRleHRTdGF0ZS5qdXN0aWZ5IHx8ICc/JykgK1xuICAgICAgICAodGV4dFN0YXRlLnRleHRCYXNlbGluZSB8fCAnPycpO1xuICAgICAgdGhpcy5maWxsS2V5XyA9IGZpbGxTdGF0ZVxuICAgICAgICA/IHR5cGVvZiBmaWxsU3RhdGUuZmlsbFN0eWxlID09ICdzdHJpbmcnXG4gICAgICAgICAgPyBmaWxsU3RhdGUuZmlsbFN0eWxlXG4gICAgICAgICAgOiAnfCcgKyBnZXRVaWQoZmlsbFN0YXRlLmZpbGxTdHlsZSlcbiAgICAgICAgOiAnJztcbiAgICB9XG4gICAgdGhpcy5kZWNsdXR0ZXJJbWFnZVdpdGhUZXh0XyA9IHNoYXJlZERhdGE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FudmFzVGV4dEJ1aWxkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27043\n")},12382:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "UN": function() { return /* binding */ HIT_DETECT_RESOLUTION; },\n  "TU": function() { return /* binding */ createHitDetectionImageData; },\n  "ix": function() { return /* binding */ hitDetect; }\n});\n\n// EXTERNAL MODULE: ./node_modules/ol/render/VectorContext.js\nvar VectorContext = __webpack_require__(45624);\n// EXTERNAL MODULE: ./node_modules/ol/colorlike.js\nvar colorlike = __webpack_require__(96620);\n// EXTERNAL MODULE: ./node_modules/ol/transform.js\nvar ol_transform = __webpack_require__(6101);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas.js\nvar canvas = __webpack_require__(50147);\n// EXTERNAL MODULE: ./node_modules/ol/array.js\nvar array = __webpack_require__(65537);\n// EXTERNAL MODULE: ./node_modules/ol/extent.js\nvar ol_extent = __webpack_require__(28641);\n// EXTERNAL MODULE: ./node_modules/ol/math.js\nvar math = __webpack_require__(33983);\n// EXTERNAL MODULE: ./node_modules/ol/geom/flat/transform.js\nvar transform = __webpack_require__(76442);\n// EXTERNAL MODULE: ./node_modules/ol/geom/SimpleGeometry.js + 1 modules\nvar SimpleGeometry = __webpack_require__(94477);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/Immediate.js\n/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nclass CanvasImmediateRenderer extends VectorContext/* default */.Z {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import("../../extent.js").Extent} extent Extent.\n   * @param {import("../../transform.js").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import("../../proj.js").TransformFunction} [userTransform] Transform from user to view projection.\n   */\n  constructor(\n    context,\n    pixelRatio,\n    extent,\n    transform,\n    viewRotation,\n    squaredTolerance,\n    userTransform\n  ) {\n    super();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import("../../extent.js").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import("../../transform.js").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.transformRotation_ = transform\n      ? (0,math/* toFixed */.FH)(Math.atan2(transform[1], transform[0]), 10)\n      : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.squaredTolerance_ = squaredTolerance;\n\n    /**\n     * @private\n     * @type {import("../../proj.js").TransformFunction}\n     */\n    this.userTransform_ = userTransform;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import("../../size.js").Size}\n     */\n    this.imageScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = \'\';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import("../../size.js").Size}\n     */\n    this.textScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import("../canvas.js").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import("../../transform.js").Transform}\n     */\n    this.tmpLocalTransform_ = (0,ol_transform/* create */.Ue)();\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    const pixelCoordinates = (0,transform/* transform2D */.vT)(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    let rotation = this.imageRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (\n        rotation !== 0 ||\n        this.imageScale_[0] != 1 ||\n        this.imageScale_[1] != 1\n      ) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        (0,ol_transform/* compose */.qC)(\n          localTransform,\n          centerX,\n          centerY,\n          1,\n          1,\n          rotation,\n          -centerX,\n          -centerY\n        );\n        context.setTransform.apply(context, localTransform);\n        context.translate(centerX, centerY);\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          -this.imageAnchorX_,\n          -this.imageAnchorY_,\n          this.imageWidth_,\n          this.imageHeight_\n        );\n        context.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          x,\n          y,\n          this.imageWidth_,\n          this.imageHeight_\n        );\n      }\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === \'\') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = (0,transform/* transform2D */.vT)(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    const context = this.context_;\n    let rotation = this.textRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (\n        rotation !== 0 ||\n        this.textScale_[0] != 1 ||\n        this.textScale_[1] != 1\n      ) {\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n        context.rotate(rotation);\n        context.translate(this.textOffsetX_, this.textOffsetY_);\n        context.scale(this.textScale_[0], this.textScale_[1]);\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, 0, 0);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, 0, 0);\n        }\n        context.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, x, y);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, x, y);\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = (0,transform/* transform2D */.vT)(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(\n        flatCoordinates,\n        offset,\n        ends[i],\n        stride,\n        true\n      );\n    }\n    return offset;\n  }\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import("../../geom/Circle.js").default} geometry Circle geometry.\n   * @api\n   */\n  drawCircle(geometry) {\n    if (!(0,ol_extent/* intersects */.kK)(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const pixelCoordinates = (0,SimpleGeometry/* transformGeom2D */.Kr)(\n        geometry,\n        this.transform_,\n        this.pixelCoordinates_\n      );\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0],\n        pixelCoordinates[1],\n        radius,\n        0,\n        2 * Math.PI\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== \'\') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import("../../style/Style.js").default} style The rendering style.\n   * @api\n   */\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n\n  /**\n   * @param {import("../../transform.js").Transform} transform Transform.\n   */\n  setTransform(transform) {\n    this.transform_ = transform;\n  }\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.\n   * @api\n   */\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n    switch (type) {\n      case \'Point\':\n        this.drawPoint(\n          /** @type {import("../../geom/Point.js").default} */ (geometry)\n        );\n        break;\n      case \'LineString\':\n        this.drawLineString(\n          /** @type {import("../../geom/LineString.js").default} */ (geometry)\n        );\n        break;\n      case \'Polygon\':\n        this.drawPolygon(\n          /** @type {import("../../geom/Polygon.js").default} */ (geometry)\n        );\n        break;\n      case \'MultiPoint\':\n        this.drawMultiPoint(\n          /** @type {import("../../geom/MultiPoint.js").default} */ (geometry)\n        );\n        break;\n      case \'MultiLineString\':\n        this.drawMultiLineString(\n          /** @type {import("../../geom/MultiLineString.js").default} */ (\n            geometry\n          )\n        );\n        break;\n      case \'MultiPolygon\':\n        this.drawMultiPolygon(\n          /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry)\n        );\n        break;\n      case \'GeometryCollection\':\n        this.drawGeometryCollection(\n          /** @type {import("../../geom/GeometryCollection.js").default} */ (\n            geometry\n          )\n        );\n        break;\n      case \'Circle\':\n        this.drawCircle(\n          /** @type {import("../../geom/Circle.js").default} */ (geometry)\n        );\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import("../../Feature.js").default} feature Feature.\n   * @param {import("../../style/Style.js").default} style Style.\n   * @api\n   */\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry || !(0,ol_extent/* intersects */.kK)(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.\n   */\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.\n   */\n  drawPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import("../../geom/Point.js").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== \'\') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.\n   */\n  drawMultiPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== \'\') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.\n   */\n  drawLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import("../../geom/LineString.js").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!(0,ol_extent/* intersects */.kK)(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        geometry.getStride(),\n        false\n      );\n      context.stroke();\n    }\n    if (this.text_ !== \'\') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.\n   */\n  drawMultiLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n        /** @type {import("../../geom/MultiLineString.js").default} */ (\n          geometry.simplifyTransformed(\n            this.squaredTolerance_,\n            this.userTransform_\n          )\n        );\n    }\n    const geometryExtent = geometry.getExtent();\n    if (!(0,ol_extent/* intersects */.kK)(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(\n          flatCoordinates,\n          offset,\n          ends[i],\n          stride,\n          false\n        );\n      }\n      context.stroke();\n    }\n    if (this.text_ !== \'\') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.\n   */\n  drawPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import("../../geom/Polygon.js").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!(0,ol_extent/* intersects */.kK)(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(\n        geometry.getOrientedFlatCoordinates(),\n        0,\n        /** @type {Array<number>} */ (geometry.getEnds()),\n        geometry.getStride()\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== \'\') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.\n   */\n  drawMultiPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!(0,ol_extent/* intersects */.kK)(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== \'\') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n\n  /**\n   * @param {import("../canvas.js").FillState} fillState Fill state.\n   * @private\n   */\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle,\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = fillState.fillStyle;\n        context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import("../canvas.js").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      context.setLineDash(strokeState.lineDash);\n      context.lineDashOffset = strokeState.lineDashOffset;\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle,\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = strokeState.lineCap;\n        context.lineCap = strokeState.lineCap;\n      }\n      if (!(0,array/* equals */.fS)(contextStrokeState.lineDash, strokeState.lineDash)) {\n        context.setLineDash(\n          (contextStrokeState.lineDash = strokeState.lineDash)\n        );\n      }\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = strokeState.lineJoin;\n        context.lineJoin = strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = strokeState.lineWidth;\n        context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = strokeState.miterLimit;\n        context.miterLimit = strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\n        context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import("../canvas.js").TextState} textState Text state.\n   * @private\n   */\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign\n      ? textState.textAlign\n      : canvas/* defaultTextAlign */.PH;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline,\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = textState.font;\n        context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = textAlign;\n        context.textAlign = textAlign;\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = textState.textBaseline;\n        context.textBaseline = textState.textBaseline;\n      }\n    }\n  }\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import("../../style/Fill.js").default} fillStyle Fill style.\n   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: (0,colorlike/* asColorLike */.y)(\n          fillStyleColor ? fillStyleColor : canvas/* defaultFillStyle */.bL\n        ),\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      const lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash\n        : canvas/* defaultLineDash */.X9;\n      this.strokeState_ = {\n        lineCap:\n          strokeStyleLineCap !== undefined\n            ? strokeStyleLineCap\n            : canvas/* defaultLineCap */.mb,\n        lineDash:\n          this.pixelRatio_ === 1\n            ? lineDash\n            : lineDash.map((n) => n * this.pixelRatio_),\n        lineDashOffset:\n          (strokeStyleLineDashOffset\n            ? strokeStyleLineDashOffset\n            : canvas/* defaultLineDashOffset */.He) * this.pixelRatio_,\n        lineJoin:\n          strokeStyleLineJoin !== undefined\n            ? strokeStyleLineJoin\n            : canvas/* defaultLineJoin */.rc,\n        lineWidth:\n          (strokeStyleWidth !== undefined\n            ? strokeStyleWidth\n            : canvas/* defaultLineWidth */.yC) * this.pixelRatio_,\n        miterLimit:\n          strokeStyleMiterLimit !== undefined\n            ? strokeStyleMiterLimit\n            : canvas/* defaultMiterLimit */.V4,\n        strokeStyle: (0,colorlike/* asColorLike */.y)(\n          strokeStyleColor ? strokeStyleColor : canvas/* defaultStrokeStyle */.Tx\n        ),\n      };\n    }\n  }\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import("../../style/Image.js").default} imageStyle Image style.\n   */\n  setImageStyle(imageStyle) {\n    let imageSize;\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n      this.image_ = null;\n      return;\n    }\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n    const imageAnchor = imageStyle.getAnchor();\n    const imageOrigin = imageStyle.getOrigin();\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    const imageScale = imageStyle.getScaleArray();\n    this.imageScale_ = [\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\n    ];\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\n  }\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import("../../style/Text.js").default} textStyle Text style.\n   */\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = \'\';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: (0,colorlike/* asColorLike */.y)(\n            textFillStyleColor ? textFillStyleColor : canvas/* defaultFillStyle */.bL\n          ),\n        };\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset =\n          textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap:\n            textStrokeStyleLineCap !== undefined\n              ? textStrokeStyleLineCap\n              : canvas/* defaultLineCap */.mb,\n          lineDash: textStrokeStyleLineDash\n            ? textStrokeStyleLineDash\n            : canvas/* defaultLineDash */.X9,\n          lineDashOffset: textStrokeStyleLineDashOffset\n            ? textStrokeStyleLineDashOffset\n            : canvas/* defaultLineDashOffset */.He,\n          lineJoin:\n            textStrokeStyleLineJoin !== undefined\n              ? textStrokeStyleLineJoin\n              : canvas/* defaultLineJoin */.rc,\n          lineWidth:\n            textStrokeStyleWidth !== undefined\n              ? textStrokeStyleWidth\n              : canvas/* defaultLineWidth */.yC,\n          miterLimit:\n            textStrokeStyleMiterLimit !== undefined\n              ? textStrokeStyleMiterLimit\n              : canvas/* defaultMiterLimit */.V4,\n          strokeStyle: (0,colorlike/* asColorLike */.y)(\n            textStrokeStyleColor ? textStrokeStyleColor : canvas/* defaultStrokeStyle */.Tx\n          ),\n        };\n      }\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScaleArray();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : canvas/* defaultFont */.Df,\n        textAlign:\n          textTextAlign !== undefined ? textTextAlign : canvas/* defaultTextAlign */.PH,\n        textBaseline:\n          textTextBaseline !== undefined\n            ? textTextBaseline\n            : canvas/* defaultTextBaseline */.ru,\n      };\n      this.text_ =\n        textText !== undefined\n          ? Array.isArray(textText)\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? \' \' : t), \'\')\n            : textText\n          : \'\';\n      this.textOffsetX_ =\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ =\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ =\n        textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = [\n        this.pixelRatio_ * textScale[0],\n        this.pixelRatio_ * textScale[1],\n      ];\n    }\n  }\n}\n\n/* harmony default export */ var Immediate = (CanvasImmediateRenderer);\n\n// EXTERNAL MODULE: ./node_modules/ol/style/Icon.js + 1 modules\nvar Icon = __webpack_require__(81332);\n// EXTERNAL MODULE: ./node_modules/ol/dom.js\nvar dom = __webpack_require__(68326);\n;// CONCATENATED MODULE: ./node_modules/ol/render/canvas/hitdetect.js\n/**\n * @module ol/render/canvas/hitdetect\n */\n\n\n\n\n\n\n\n\nconst HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import("../../size.js").Size} size Canvas size in css pixels.\n * @param {Array<import("../../transform.js").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import("../../Feature.js").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import("../../extent.js").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nfunction createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation\n) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = (0,dom/* createCanvasContext2D */.E4)(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new Immediate(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, \'#00000\');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !(0,ol_extent/* intersects */.kK)(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = (0,dom/* createCanvasContext2D */.E4)(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false}\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon/* default */.Z({\n            img: img,\n            imgSize: imgSize,\n            anchor: image.getAnchor(),\n            anchorXUnits: \'pixels\',\n            anchorYUnits: \'pixels\',\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          })\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType[\'Polygon\'] = [];\n        byGeometryType[\'Circle\'] = [];\n        byGeometryType[\'LineString\'] = [];\n        byGeometryType[\'Point\'] = [];\n      }\n      const type = geometry.getType();\n      if (type === \'GeometryCollection\') {\n        const geometries =\n          /** @type {import("../../geom/GeometryCollection.js").default} */ (\n            geometry\n          ).getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace(\'Multi\', \'\')].push(\n            geometry,\n            style\n          );\n        }\n      } else {\n        byGeometryType[type.replace(\'Multi\', \'\')].push(geometry, style);\n      }\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(array/* ascending */.j2);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import("../../Feature.js").FeatureLike} F\n */\nfunction hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas\' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      ((0,math/* clamp */.uZ)(x, 0, imageData.width - 1) +\n        (0,math/* clamp */.uZ)(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\n  return resultFeatures;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12382\n')}}]);