"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[8850],{87717:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(72000);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50491);\n/* harmony import */ var _Core_EllipsoidTerrainProvider_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(81176);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14459);\n/* harmony import */ var _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(67627);\n/* harmony import */ var _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(15720);\n/* harmony import */ var _Core_Ray_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(68457);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(96190);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(68985);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(8743);\n/* harmony import */ var _Shaders_GlobeFS_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(20909);\n/* harmony import */ var _Shaders_GlobeVS_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(15314);\n/* harmony import */ var _Shaders_GroundAtmosphere_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(62868);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(13222);\n/* harmony import */ var _GlobeSurfaceShaderSet_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(55188);\n/* harmony import */ var _GlobeSurfaceTileProvider_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(32110);\n/* harmony import */ var _GlobeTranslucency_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(90538);\n/* harmony import */ var _ImageryLayerCollection_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(59848);\n/* harmony import */ var _QuadtreePrimitive_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(9733);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(89917);\n/* harmony import */ var _ShadowMode_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(34125);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The globe rendered in the scene, including its terrain ({@link Globe#terrainProvider})\n * and imagery layers ({@link Globe#imageryLayers}).  Access the globe using {@link Scene#globe}.\n *\n * @alias Globe\n * @constructor\n *\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] Determines the size and shape of the\n * globe.\n */\nfunction Globe(ellipsoid) {\n  ellipsoid = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(ellipsoid, _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].WGS84 */ .Z.WGS84);\n  var terrainProvider = new _Core_EllipsoidTerrainProvider_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n    ellipsoid: ellipsoid,\n  });\n  var imageryLayerCollection = new _ImageryLayerCollection_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z();\n\n  this._ellipsoid = ellipsoid;\n  this._imageryLayerCollection = imageryLayerCollection;\n\n  this._surfaceShaderSet = new _GlobeSurfaceShaderSet_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\n  this._material = undefined;\n\n  this._surface = new _QuadtreePrimitive_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z({\n    tileProvider: new _GlobeSurfaceTileProvider_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z({\n      terrainProvider: terrainProvider,\n      imageryLayers: imageryLayerCollection,\n      surfaceShaderSet: this._surfaceShaderSet,\n    }),\n  });\n\n  this._terrainProvider = terrainProvider;\n  this._terrainProviderChanged = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\n  this._undergroundColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].BLACK */ .Z.BLACK);\n  this._undergroundColorAlphaByDistance = new _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n    ellipsoid.maximumRadius / 1000.0,\n    0.0,\n    ellipsoid.maximumRadius / 5.0,\n    1.0\n  );\n\n  this._translucency = new _GlobeTranslucency_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z();\n\n  makeShadersDirty(this);\n\n  /**\n   * Determines if the globe will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = true;\n\n  this._oceanNormalMapResourceDirty = true;\n  this._oceanNormalMapResource = new _Core_Resource_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n    url: (0,_Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)("Assets/Textures/waterNormalsSmall.jpg"),\n  });\n\n  /**\n   * The maximum screen-space error used to drive level-of-detail refinement.  Higher\n   * values will provide better performance but lower visual quality.\n   *\n   * @type {Number}\n   * @default 2\n   */\n  this.maximumScreenSpaceError = 2;\n\n  /**\n   * The size of the terrain tile cache, expressed as a number of tiles.  Any additional\n   * tiles beyond this number will be freed, as long as they aren\'t needed for rendering\n   * this frame.  A larger number will consume more memory but will show detail faster\n   * when, for example, zooming out and then back in.\n   *\n   * @type {Number}\n   * @default 100\n   */\n  this.tileCacheSize = 100;\n\n  /**\n   * Gets or sets the number of loading descendant tiles that is considered "too many".\n   * If a tile has too many loading descendants, that tile will be loaded and rendered before any of\n   * its descendants are loaded and rendered. This means more feedback for the user that something\n   * is happening at the cost of a longer overall load time. Setting this to 0 will cause each\n   * tile level to be loaded successively, significantly increasing load time. Setting it to a large\n   * number (e.g. 1000) will minimize the number of tiles that are loaded but tend to make\n   * detail appear all at once after a long wait.\n   * @type {Number}\n   * @default 20\n   */\n  this.loadingDescendantLimit = 20;\n\n  /**\n   * Gets or sets a value indicating whether the ancestors of rendered tiles should be preloaded.\n   * Setting this to true optimizes the zoom-out experience and provides more detail in\n   * newly-exposed areas when panning. The down side is that it requires loading more tiles.\n   * @type {Boolean}\n   * @default true\n   */\n  this.preloadAncestors = true;\n\n  /**\n   * Gets or sets a value indicating whether the siblings of rendered tiles should be preloaded.\n   * Setting this to true causes tiles with the same parent as a rendered tile to be loaded, even\n   * if they are culled. Setting this to true may provide a better panning experience at the\n   * cost of loading more tiles.\n   * @type {Boolean}\n   * @default false\n   */\n  this.preloadSiblings = false;\n\n  /**\n   * The color to use to highlight terrain fill tiles. If undefined, fill tiles are not\n   * highlighted at all. The alpha value is used to alpha blend with the tile\'s\n   * actual color. Because terrain fill tiles do not represent the actual terrain surface,\n   * it may be useful in some applications to indicate visually that they are not to be trusted.\n   * @type {Color}\n   * @default undefined\n   */\n  this.fillHighlightColor = undefined;\n\n  /**\n   * Enable lighting the globe with the scene\'s light source.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.enableLighting = false;\n\n  /**\n   * Enable dynamic lighting effects on atmosphere and fog. This only takes effect\n   * when <code>enableLighting</code> is <code>true</code>.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.dynamicAtmosphereLighting = true;\n\n  /**\n   * Whether dynamic atmosphere lighting uses the sun direction instead of the scene\'s\n   * light direction. This only takes effect when <code>enableLighting</code> and\n   * <code>dynamicAtmosphereLighting</code> are <code>true</code>.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.dynamicAtmosphereLightingFromSun = false;\n\n  /**\n   * Enable the ground atmosphere, which is drawn over the globe when viewed from a distance between <code>lightingFadeInDistance</code> and <code>lightingFadeOutDistance</code>.\n   *\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Ground%20Atmosphere.html|Ground atmosphere demo in Sandcastle}\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.showGroundAtmosphere = true;\n\n  /**\n   * The distance where everything becomes lit. This only takes effect\n   * when <code>enableLighting</code> or <code>showGroundAtmosphere</code> is <code>true</code>.\n   *\n   * @type {Number}\n   * @default 10000000.0\n   */\n  this.lightingFadeOutDistance = 1.0e7;\n\n  /**\n   * The distance where lighting resumes. This only takes effect\n   * when <code>enableLighting</code> or <code>showGroundAtmosphere</code> is <code>true</code>.\n   *\n   * @type {Number}\n   * @default 20000000.0\n   */\n  this.lightingFadeInDistance = 2.0e7;\n\n  /**\n   * The distance where the darkness of night from the ground atmosphere fades out to a lit ground atmosphere.\n   * This only takes effect when <code>showGroundAtmosphere</code>, <code>enableLighting</code>, and\n   * <code>dynamicAtmosphereLighting</code> are <code>true</code>.\n   *\n   * @type {Number}\n   * @default 10000000.0\n   */\n  this.nightFadeOutDistance = 1.0e7;\n\n  /**\n   * The distance where the darkness of night from the ground atmosphere fades in to an unlit ground atmosphere.\n   * This only takes effect when <code>showGroundAtmosphere</code>, <code>enableLighting</code>, and\n   * <code>dynamicAtmosphereLighting</code> are <code>true</code>.\n   *\n   * @type {Number}\n   * @default 50000000.0\n   */\n  this.nightFadeInDistance = 5.0e7;\n\n  /**\n   * True if an animated wave effect should be shown in areas of the globe\n   * covered by water; otherwise, false.  This property is ignored if the\n   * <code>terrainProvider</code> does not provide a water mask.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.showWaterEffect = true;\n\n  /**\n   * True if primitives such as billboards, polylines, labels, etc. should be depth-tested\n   * against the terrain surface, or false if such primitives should always be drawn on top\n   * of terrain unless they\'re on the opposite side of the globe.  The disadvantage of depth\n   * testing primitives against terrain is that slight numerical noise or terrain level-of-detail\n   * switched can sometimes make a primitive that should be on the surface disappear underneath it.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  this.depthTestAgainstTerrain = false;\n\n  /**\n   * Determines whether the globe casts or receives shadows from light sources. Setting the globe\n   * to cast shadows may impact performance since the terrain is rendered again from the light\'s perspective.\n   * Currently only terrain that is in view casts shadows. By default the globe does not cast shadows.\n   *\n   * @type {ShadowMode}\n   * @default ShadowMode.RECEIVE_ONLY\n   */\n  this.shadows = _ShadowMode_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].RECEIVE_ONLY */ .Z.RECEIVE_ONLY;\n\n  /**\n   * The hue shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A hue shift of 1.0 indicates a complete rotation of the hues available.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.atmosphereHueShift = 0.0;\n\n  /**\n   * The saturation shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A saturation shift of -1.0 is monochrome.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.atmosphereSaturationShift = 0.0;\n\n  /**\n   * The brightness shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n   * A brightness shift of -1.0 is complete darkness, which will let space show through.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.atmosphereBrightnessShift = 0.0;\n\n  /**\n   * A scalar used to exaggerate the terrain. Defaults to <code>1.0</code> (no exaggeration).\n   * A value of <code>2.0</code> scales the terrain by 2x.\n   * A value of <code>0.0</code> makes the terrain completely flat.\n   * Note that terrain exaggeration will not modify any other primitive as they are positioned relative to the ellipsoid.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.terrainExaggeration = 1.0;\n\n  /**\n   * The height from which terrain is exaggerated. Defaults to <code>0.0</code> (scaled relative to ellipsoid surface).\n   * Terrain that is above this height will scale upwards and terrain that is below this height will scale downwards.\n   * Note that terrain exaggeration will not modify any other primitive as they are positioned relative to the ellipsoid.\n   * If {@link Globe#terrainExaggeration} is <code>1.0</code> this value will have no effect.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.terrainExaggerationRelativeHeight = 0.0;\n\n  /**\n   * Whether to show terrain skirts. Terrain skirts are geometry extending downwards from a tile\'s edges used to hide seams between neighboring tiles.\n   * Skirts are always hidden when the camera is underground or translucency is enabled.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.showSkirts = true;\n\n  /**\n   * Whether to cull back-facing terrain. Back faces are not culled when the camera is underground or translucency is enabled.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.backFaceCulling = true;\n\n  this._oceanNormalMap = undefined;\n  this._zoomedOutOceanSpecularIntensity = undefined;\n}\n\nObject.defineProperties(Globe.prototype, {\n  /**\n   * Gets an ellipsoid describing the shape of this globe.\n   * @memberof Globe.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n  /**\n   * Gets the collection of image layers that will be rendered on this globe.\n   * @memberof Globe.prototype\n   * @type {ImageryLayerCollection}\n   */\n  imageryLayers: {\n    get: function () {\n      return this._imageryLayerCollection;\n    },\n  },\n  /**\n   * Gets an event that\'s raised when an imagery layer is added, shown, hidden, moved, or removed.\n   *\n   * @memberof Globe.prototype\n   * @type {Event}\n   * @readonly\n   */\n  imageryLayersUpdatedEvent: {\n    get: function () {\n      return this._surface.tileProvider.imageryLayersUpdatedEvent;\n    },\n  },\n  /**\n   * Returns <code>true</code> when the tile load queue is empty, <code>false</code> otherwise.  When the load queue is empty,\n   * all terrain and imagery for the current view have been loaded.\n   * @memberof Globe.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  tilesLoaded: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._surface)) {\n        return true;\n      }\n      return (\n        this._surface.tileProvider.ready &&\n        this._surface._tileLoadQueueHigh.length === 0 &&\n        this._surface._tileLoadQueueMedium.length === 0 &&\n        this._surface._tileLoadQueueLow.length === 0\n      );\n    },\n  },\n  /**\n   * Gets or sets the color of the globe when no imagery is available.\n   * @memberof Globe.prototype\n   * @type {Color}\n   */\n  baseColor: {\n    get: function () {\n      return this._surface.tileProvider.baseColor;\n    },\n    set: function (value) {\n      this._surface.tileProvider.baseColor = value;\n    },\n  },\n  /**\n   * A property specifying a {@link ClippingPlaneCollection} used to selectively disable rendering on the outside of each plane.\n   *\n   * @memberof Globe.prototype\n   * @type {ClippingPlaneCollection}\n   */\n  clippingPlanes: {\n    get: function () {\n      return this._surface.tileProvider.clippingPlanes;\n    },\n    set: function (value) {\n      this._surface.tileProvider.clippingPlanes = value;\n    },\n  },\n  /**\n   * A property specifying a {@link Rectangle} used to limit globe rendering to a cartographic area.\n   * Defaults to the maximum extent of cartographic coordinates.\n   *\n   * @memberof Globe.prototype\n   * @type {Rectangle}\n   * @default {@link Rectangle.MAX_VALUE}\n   */\n  cartographicLimitRectangle: {\n    get: function () {\n      return this._surface.tileProvider.cartographicLimitRectangle;\n    },\n    set: function (value) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(value)) {\n        value = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].clone */ .Z.clone(_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE);\n      }\n      this._surface.tileProvider.cartographicLimitRectangle = value;\n    },\n  },\n  /**\n   * The normal map to use for rendering waves in the ocean.  Setting this property will\n   * only have an effect if the configured terrain provider includes a water mask.\n   * @memberof Globe.prototype\n   * @type {String}\n   * @default buildModuleUrl(\'Assets/Textures/waterNormalsSmall.jpg\')\n   */\n  oceanNormalMapUrl: {\n    get: function () {\n      return this._oceanNormalMapResource.url;\n    },\n    set: function (value) {\n      this._oceanNormalMapResource.url = value;\n      this._oceanNormalMapResourceDirty = true;\n    },\n  },\n  /**\n   * The terrain provider providing surface geometry for this globe.\n   * @type {TerrainProvider}\n   *\n   * @memberof Globe.prototype\n   * @type {TerrainProvider}\n   *\n   */\n  terrainProvider: {\n    get: function () {\n      return this._terrainProvider;\n    },\n    set: function (value) {\n      if (value !== this._terrainProvider) {\n        this._terrainProvider = value;\n        this._terrainProviderChanged.raiseEvent(value);\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._material)) {\n          makeShadersDirty(this);\n        }\n      }\n    },\n  },\n  /**\n   * Gets an event that\'s raised when the terrain provider is changed\n   *\n   * @memberof Globe.prototype\n   * @type {Event}\n   * @readonly\n   */\n  terrainProviderChanged: {\n    get: function () {\n      return this._terrainProviderChanged;\n    },\n  },\n  /**\n   * Gets an event that\'s raised when the length of the tile load queue has changed since the last render frame.  When the load queue is empty,\n   * all terrain and imagery for the current view have been loaded.  The event passes the new length of the tile load queue.\n   *\n   * @memberof Globe.prototype\n   * @type {Event}\n   */\n  tileLoadProgressEvent: {\n    get: function () {\n      return this._surface.tileLoadProgressEvent;\n    },\n  },\n\n  /**\n   * Gets or sets the material appearance of the Globe.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * @memberof Globe.prototype\n   * @type {Material}\n   */\n  material: {\n    get: function () {\n      return this._material;\n    },\n    set: function (material) {\n      if (this._material !== material) {\n        this._material = material;\n        makeShadersDirty(this);\n      }\n    },\n  },\n\n  /**\n   * The color to render the back side of the globe when the camera is underground or the globe is translucent,\n   * blended with the globe color based on the camera\'s distance.\n   * <br /><br />\n   * To disable underground coloring, set <code>undergroundColor</code> to <code>undefined</code>.\n   *\n   * @memberof Globe.prototype\n   * @type {Color}\n   * @default {@link Color.BLACK}\n   *\n   * @see Globe#undergroundColorAlphaByDistance\n   */\n  undergroundColor: {\n    get: function () {\n      return this._undergroundColor;\n    },\n    set: function (value) {\n      this._undergroundColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(value, this._undergroundColor);\n    },\n  },\n\n  /**\n   * Gets or sets the near and far distance for blending {@link Globe#undergroundColor} with the globe color.\n   * The alpha will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the alpha remains clamped to the nearest bound. If undefined,\n   * the underground color will not be blended with the globe color.\n   * <br /> <br />\n   * When the camera is above the ellipsoid the distance is computed from the nearest\n   * point on the ellipsoid instead of the camera\'s position.\n   *\n   * @memberof Globe.prototype\n   * @type {NearFarScalar}\n   *\n   * @see Globe#undergroundColor\n   *\n   */\n  undergroundColorAlphaByDistance: {\n    get: function () {\n      return this._undergroundColorAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(value) && value.far < value.near) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n          "far distance must be greater than near distance."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      this._undergroundColorAlphaByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clone */ .Z.clone(\n        value,\n        this._undergroundColorAlphaByDistance\n      );\n    },\n  },\n\n  /**\n   * Properties for controlling globe translucency.\n   *\n   * @memberof Globe.prototype\n   * @type {GlobeTranslucency}\n   */\n  translucency: {\n    get: function () {\n      return this._translucency;\n    },\n  },\n});\n\nfunction makeShadersDirty(globe) {\n  var defines = [];\n\n  var requireNormals =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globe._material) &&\n    (globe._material.shaderSource.match(/slope/) ||\n      globe._material.shaderSource.match("normalEC"));\n\n  var fragmentSources = [_Shaders_GroundAtmosphere_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z];\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globe._material) &&\n    (!requireNormals || globe._terrainProvider.requestVertexNormals)\n  ) {\n    fragmentSources.push(globe._material.shaderSource);\n    defines.push("APPLY_MATERIAL");\n    globe._surface._tileProvider.materialUniformMap = globe._material._uniforms;\n  } else {\n    globe._surface._tileProvider.materialUniformMap = undefined;\n  }\n  fragmentSources.push(_Shaders_GlobeFS_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z);\n\n  globe._surfaceShaderSet.baseVertexShaderSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z({\n    sources: [_Shaders_GroundAtmosphere_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z, _Shaders_GlobeVS_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z],\n    defines: defines,\n  });\n\n  globe._surfaceShaderSet.baseFragmentShaderSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z({\n    sources: fragmentSources,\n    defines: defines,\n  });\n  globe._surfaceShaderSet.material = globe._material;\n}\n\nfunction createComparePickTileFunction(rayOrigin) {\n  return function (a, b) {\n    var aDist = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].distanceSquaredTo */ .Z.distanceSquaredTo(\n      a.pickBoundingSphere,\n      rayOrigin\n    );\n    var bDist = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].distanceSquaredTo */ .Z.distanceSquaredTo(\n      b.pickBoundingSphere,\n      rayOrigin\n    );\n\n    return aDist - bDist;\n  };\n}\n\nvar scratchArray = [];\nvar scratchSphereIntersectionResult = {\n  start: 0.0,\n  stop: 0.0,\n};\n\n/**\n * Find an intersection between a ray and the globe surface that was rendered. The ray must be given in world coordinates.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {Scene} scene The scene.\n * @param {Boolean} [cullBackFaces=true] Set to true to not pick back faces.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.  The returned position is in projected coordinates for 2D and Columbus View.\n *\n * @private\n */\nGlobe.prototype.pickWorldCoordinates = function (\n  ray,\n  scene,\n  cullBackFaces,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(ray)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("ray is required");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(scene)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("scene is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  cullBackFaces = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(cullBackFaces, true);\n\n  var mode = scene.mode;\n  var projection = scene.mapProjection;\n\n  var sphereIntersections = scratchArray;\n  sphereIntersections.length = 0;\n\n  var tilesToRender = this._surface._tilesToRender;\n  var length = tilesToRender.length;\n\n  var tile;\n  var i;\n\n  for (i = 0; i < length; ++i) {\n    tile = tilesToRender[i];\n    var surfaceTile = tile.data;\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(surfaceTile)) {\n      continue;\n    }\n\n    var boundingVolume = surfaceTile.pickBoundingSphere;\n    if (mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n      surfaceTile.pickBoundingSphere = boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRectangleWithHeights2D */ .Z.fromRectangleWithHeights2D(\n        tile.rectangle,\n        projection,\n        surfaceTile.tileBoundingRegion.minimumHeight,\n        surfaceTile.tileBoundingRegion.maximumHeight,\n        boundingVolume\n      );\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n        boundingVolume.center.z,\n        boundingVolume.center.x,\n        boundingVolume.center.y,\n        boundingVolume.center\n      );\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(surfaceTile.renderedMesh)) {\n      _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n        surfaceTile.tileBoundingRegion.boundingSphere,\n        boundingVolume\n      );\n    } else {\n      // So wait how did we render this thing then? It shouldn\'t be possible to get here.\n      continue;\n    }\n\n    var boundingSphereIntersection = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].raySphere */ .Z.raySphere(\n      ray,\n      boundingVolume,\n      scratchSphereIntersectionResult\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(boundingSphereIntersection)) {\n      sphereIntersections.push(surfaceTile);\n    }\n  }\n\n  sphereIntersections.sort(createComparePickTileFunction(ray.origin));\n\n  var intersection;\n  length = sphereIntersections.length;\n  for (i = 0; i < length; ++i) {\n    intersection = sphereIntersections[i].pick(\n      ray,\n      scene.mode,\n      scene.mapProjection,\n      cullBackFaces,\n      result\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n      break;\n    }\n  }\n\n  return intersection;\n};\n\nvar cartoScratch = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n/**\n * Find an intersection between a ray and the globe surface that was rendered. The ray must be given in world coordinates.\n *\n * @param {Ray} ray The ray to test for intersection.\n * @param {Scene} scene The scene.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.\n *\n * @example\n * // find intersection of ray through a pixel and the globe\n * var ray = viewer.camera.getPickRay(windowCoordinates);\n * var intersection = globe.pick(ray, scene);\n */\nGlobe.prototype.pick = function (ray, scene, result) {\n  result = this.pickWorldCoordinates(ray, scene, true, result);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(result) && scene.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    result = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(result.y, result.z, result.x, result);\n    var carto = scene.mapProjection.unproject(result, cartoScratch);\n    result = scene.globe.ellipsoid.cartographicToCartesian(carto, result);\n  }\n\n  return result;\n};\n\nvar scratchGetHeightCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchGetHeightIntersection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchGetHeightCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchGetHeightRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\nfunction tileIfContainsCartographic(tile, cartographic) {\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile) && _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].contains */ .Z.contains(tile.rectangle, cartographic)\n    ? tile\n    : undefined;\n}\n\n/**\n * Get the height of the surface at a given cartographic.\n *\n * @param {Cartographic} cartographic The cartographic for which to find the height.\n * @returns {Number|undefined} The height of the cartographic or undefined if it could not be found.\n */\nGlobe.prototype.getHeight = function (cartographic) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(cartographic)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z("cartographic is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  var levelZeroTiles = this._surface._levelZeroTiles;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(levelZeroTiles)) {\n    return;\n  }\n\n  var tile;\n  var i;\n\n  var length = levelZeroTiles.length;\n  for (i = 0; i < length; ++i) {\n    tile = levelZeroTiles[i];\n    if (_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].contains */ .Z.contains(tile.rectangle, cartographic)) {\n      break;\n    }\n  }\n\n  if (i >= length) {\n    return undefined;\n  }\n\n  var tileWithMesh = tile;\n\n  while ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile)) {\n    tile =\n      tileIfContainsCartographic(tile._southwestChild, cartographic) ||\n      tileIfContainsCartographic(tile._southeastChild, cartographic) ||\n      tileIfContainsCartographic(tile._northwestChild, cartographic) ||\n      tile._northeastChild;\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile.data) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile.data.renderedMesh)\n    ) {\n      tileWithMesh = tile;\n    }\n  }\n\n  tile = tileWithMesh;\n\n  // This tile was either rendered or culled.\n  // It is sometimes useful to get a height from a culled tile,\n  // e.g. when we\'re getting a height in order to place a billboard\n  // on terrain, and the camera is looking at that same billboard.\n  // The culled tile must have a valid mesh, though.\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile.data) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile.data.renderedMesh)\n  ) {\n    // Tile was not rendered (culled).\n    return undefined;\n  }\n\n  var projection = this._surface._tileProvider.tilingScheme.projection;\n  var ellipsoid = this._surface._tileProvider.tilingScheme.ellipsoid;\n\n  //cartesian has to be on the ellipsoid surface for `ellipsoid.geodeticSurfaceNormal`\n  var cartesian = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRadians */ .Z.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    0.0,\n    ellipsoid,\n    scratchGetHeightCartesian\n  );\n\n  var ray = scratchGetHeightRay;\n  var surfaceNormal = ellipsoid.geodeticSurfaceNormal(cartesian, ray.direction);\n\n  // Try to find the intersection point between the surface normal and z-axis.\n  // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n  var rayOrigin = ellipsoid.getSurfaceNormalIntersectionWithZAxis(\n    cartesian,\n    11500.0,\n    ray.origin\n  );\n\n  // Theoretically, not with Earth datums, the intersection point can be outside the ellipsoid\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(rayOrigin)) {\n    // intersection point is outside the ellipsoid, try other value\n    // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n    var minimumHeight;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tile.data.tileBoundingRegion)) {\n      minimumHeight = tile.data.tileBoundingRegion.minimumHeight;\n    }\n    var magnitude = Math.min((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(minimumHeight, 0.0), -11500.0);\n\n    // multiply by the *positive* value of the magnitude\n    var vectorToMinimumPoint = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      surfaceNormal,\n      Math.abs(magnitude) + 1,\n      scratchGetHeightIntersection\n    );\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].subtract */ .Z.subtract(cartesian, vectorToMinimumPoint, ray.origin);\n  }\n\n  var intersection = tile.data.pick(\n    ray,\n    undefined,\n    projection,\n    false,\n    scratchGetHeightIntersection\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n    return undefined;\n  }\n\n  return ellipsoid.cartesianToCartographic(\n    intersection,\n    scratchGetHeightCartographic\n  ).height;\n};\n\n/**\n * @private\n */\nGlobe.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  if (frameState.passes.render) {\n    this._surface.update(frameState);\n  }\n};\n\n/**\n * @private\n */\nGlobe.prototype.beginFrame = function (frameState) {\n  var surface = this._surface;\n  var tileProvider = surface.tileProvider;\n  var terrainProvider = this.terrainProvider;\n  var hasWaterMask =\n    this.showWaterEffect &&\n    terrainProvider.ready &&\n    terrainProvider.hasWaterMask;\n\n  if (hasWaterMask && this._oceanNormalMapResourceDirty) {\n    // url changed, load new normal map asynchronously\n    this._oceanNormalMapResourceDirty = false;\n    var oceanNormalMapResource = this._oceanNormalMapResource;\n    var oceanNormalMapUrl = oceanNormalMapResource.url;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(oceanNormalMapUrl)) {\n      var that = this;\n      (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(oceanNormalMapResource.fetchImage(), function (image) {\n        if (oceanNormalMapUrl !== that._oceanNormalMapResource.url) {\n          // url changed while we were loading\n          return;\n        }\n\n        that._oceanNormalMap =\n          that._oceanNormalMap && that._oceanNormalMap.destroy();\n        that._oceanNormalMap = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z({\n          context: frameState.context,\n          source: image,\n        });\n      });\n    } else {\n      this._oceanNormalMap =\n        this._oceanNormalMap && this._oceanNormalMap.destroy();\n    }\n  }\n\n  var pass = frameState.passes;\n  var mode = frameState.mode;\n\n  if (pass.render) {\n    if (this.showGroundAtmosphere) {\n      this._zoomedOutOceanSpecularIntensity = 0.4;\n    } else {\n      this._zoomedOutOceanSpecularIntensity = 0.5;\n    }\n\n    surface.maximumScreenSpaceError = this.maximumScreenSpaceError;\n    surface.tileCacheSize = this.tileCacheSize;\n    surface.loadingDescendantLimit = this.loadingDescendantLimit;\n    surface.preloadAncestors = this.preloadAncestors;\n    surface.preloadSiblings = this.preloadSiblings;\n\n    tileProvider.terrainProvider = this.terrainProvider;\n    tileProvider.lightingFadeOutDistance = this.lightingFadeOutDistance;\n    tileProvider.lightingFadeInDistance = this.lightingFadeInDistance;\n    tileProvider.nightFadeOutDistance = this.nightFadeOutDistance;\n    tileProvider.nightFadeInDistance = this.nightFadeInDistance;\n    tileProvider.zoomedOutOceanSpecularIntensity =\n      mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].SCENE3D */ .Z.SCENE3D ? this._zoomedOutOceanSpecularIntensity : 0.0;\n    tileProvider.hasWaterMask = hasWaterMask;\n    tileProvider.oceanNormalMap = this._oceanNormalMap;\n    tileProvider.enableLighting = this.enableLighting;\n    tileProvider.dynamicAtmosphereLighting = this.dynamicAtmosphereLighting;\n    tileProvider.dynamicAtmosphereLightingFromSun = this.dynamicAtmosphereLightingFromSun;\n    tileProvider.showGroundAtmosphere = this.showGroundAtmosphere;\n    tileProvider.shadows = this.shadows;\n    tileProvider.hueShift = this.atmosphereHueShift;\n    tileProvider.saturationShift = this.atmosphereSaturationShift;\n    tileProvider.brightnessShift = this.atmosphereBrightnessShift;\n    tileProvider.fillHighlightColor = this.fillHighlightColor;\n    tileProvider.showSkirts = this.showSkirts;\n    tileProvider.backFaceCulling = this.backFaceCulling;\n    tileProvider.undergroundColor = this._undergroundColor;\n    tileProvider.undergroundColorAlphaByDistance = this._undergroundColorAlphaByDistance;\n    surface.beginFrame(frameState);\n  }\n};\n\n/**\n * @private\n */\nGlobe.prototype.render = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._material)) {\n    this._material.update(frameState.context);\n  }\n\n  this._surface.render(frameState);\n};\n\n/**\n * @private\n */\nGlobe.prototype.endFrame = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  if (frameState.passes.render) {\n    this._surface.endFrame(frameState);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see Globe#destroy\n */\nGlobe.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * globe = globe && globe.destroy();\n *\n * @see Globe#isDestroyed\n */\nGlobe.prototype.destroy = function () {\n  this._surfaceShaderSet =\n    this._surfaceShaderSet && this._surfaceShaderSet.destroy();\n  this._surface = this._surface && this._surface.destroy();\n  this._oceanNormalMap = this._oceanNormalMap && this._oceanNormalMap.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Globe);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87717\n')},55977:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88108);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2932);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8743);\n/* harmony import */ var _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(7571);\n/* harmony import */ var _Shaders_PostProcessStages_PassThroughDepth_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(82239);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(13633);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(87233);\n/* harmony import */ var _StencilFunction_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(77053);\n/* harmony import */ var _StencilOperation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(81255);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction GlobeDepth() {\n  this._globeColorTexture = undefined;\n  this._primitiveColorTexture = undefined;\n  this._depthStencilTexture = undefined;\n  this._globeDepthTexture = undefined;\n  this._tempGlobeDepthTexture = undefined;\n  this._tempCopyDepthTexture = undefined;\n\n  this._globeColorFramebuffer = undefined;\n  this._primitiveColorFramebuffer = undefined;\n  this._copyDepthFramebuffer = undefined;\n  this._tempCopyDepthFramebuffer = undefined;\n  this._updateDepthFramebuffer = undefined;\n\n  this._clearGlobeColorCommand = undefined;\n  this._clearPrimitiveColorCommand = undefined;\n  this._copyColorCommand = undefined;\n  this._copyDepthCommand = undefined;\n  this._tempCopyDepthCommand = undefined;\n  this._updateDepthCommand = undefined;\n  this._mergeColorCommand = undefined;\n\n  this._viewport = new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._rs = undefined;\n  this._rsBlend = undefined;\n  this._rsUpdate = undefined;\n\n  this._useScissorTest = false;\n  this._scissorRectangle = undefined;\n\n  this._useLogDepth = undefined;\n  this._useHdr = undefined;\n  this._clearGlobeDepth = undefined;\n\n  this._debugGlobeDepthViewportCommand = undefined;\n}\n\nObject.defineProperties(GlobeDepth.prototype, {\n  framebuffer: {\n    get: function () {\n      return this._globeColorFramebuffer;\n    },\n  },\n  primitiveFramebuffer: {\n    get: function () {\n      return this._primitiveColorFramebuffer;\n    },\n  },\n});\n\nfunction executeDebugGlobeDepth(globeDepth, context, passState, useLogDepth) {\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._debugGlobeDepthViewportCommand) ||\n    useLogDepth !== globeDepth._useLogDepth\n  ) {\n    var fsSource =\n      "uniform highp sampler2D u_depthTexture;\\n" +\n      "varying vec2 v_textureCoordinates;\\n" +\n      "void main()\\n" +\n      "{\\n" +\n      "    float z_window = czm_unpackDepth(texture2D(u_depthTexture, v_textureCoordinates));\\n" +\n      "    z_window = czm_reverseLogDepth(z_window); \\n" +\n      "    float n_range = czm_depthRange.near;\\n" +\n      "    float f_range = czm_depthRange.far;\\n" +\n      "    float z_ndc = (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n" +\n      "    float scale = pow(z_ndc * 0.5 + 0.5, 8.0);\\n" +\n      "    gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), scale), 1.0);\\n" +\n      "}\\n";\n    var fs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n      defines: [useLogDepth ? "LOG_DEPTH" : ""],\n      sources: [fsSource],\n    });\n\n    globeDepth._debugGlobeDepthViewportCommand = context.createViewportQuadCommand(\n      fs,\n      {\n        uniformMap: {\n          u_depthTexture: function () {\n            return globeDepth._globeDepthTexture;\n          },\n        },\n        owner: globeDepth,\n      }\n    );\n\n    globeDepth._useLogDepth = useLogDepth;\n  }\n\n  globeDepth._debugGlobeDepthViewportCommand.execute(context, passState);\n}\n\nfunction destroyTextures(globeDepth) {\n  globeDepth._globeColorTexture =\n    globeDepth._globeColorTexture &&\n    !globeDepth._globeColorTexture.isDestroyed() &&\n    globeDepth._globeColorTexture.destroy();\n  globeDepth._depthStencilTexture =\n    globeDepth._depthStencilTexture &&\n    !globeDepth._depthStencilTexture.isDestroyed() &&\n    globeDepth._depthStencilTexture.destroy();\n  globeDepth._globeDepthTexture =\n    globeDepth._globeDepthTexture &&\n    !globeDepth._globeDepthTexture.isDestroyed() &&\n    globeDepth._globeDepthTexture.destroy();\n}\n\nfunction destroyFramebuffers(globeDepth) {\n  globeDepth._globeColorFramebuffer =\n    globeDepth._globeColorFramebuffer &&\n    !globeDepth._globeColorFramebuffer.isDestroyed() &&\n    globeDepth._globeColorFramebuffer.destroy();\n  globeDepth._copyDepthFramebuffer =\n    globeDepth._copyDepthFramebuffer &&\n    !globeDepth._copyDepthFramebuffer.isDestroyed() &&\n    globeDepth._copyDepthFramebuffer.destroy();\n}\n\nfunction destroyUpdateDepthResources(globeDepth) {\n  globeDepth._tempCopyDepthFramebuffer =\n    globeDepth._tempCopyDepthFramebuffer &&\n    !globeDepth._tempCopyDepthFramebuffer.isDestroyed() &&\n    globeDepth._tempCopyDepthFramebuffer.destroy();\n  globeDepth._updateDepthFramebuffer =\n    globeDepth._updateDepthFramebuffer &&\n    !globeDepth._updateDepthFramebuffer.isDestroyed() &&\n    globeDepth._updateDepthFramebuffer.destroy();\n  globeDepth._tempGlobeDepthTexture =\n    globeDepth._tempGlobeDepthTexture &&\n    !globeDepth._tempGlobeDepthTexture.isDestroyed() &&\n    globeDepth._tempGlobeDepthTexture.destroy();\n}\n\nfunction createUpdateDepthResources(\n  globeDepth,\n  context,\n  width,\n  height,\n  passState\n) {\n  globeDepth._tempGlobeDepthTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n  globeDepth._tempCopyDepthFramebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeDepth._tempGlobeDepthTexture],\n    destroyAttachments: false,\n  });\n  globeDepth._updateDepthFramebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeDepth._globeDepthTexture],\n    depthStencilTexture: passState.framebuffer.depthStencilTexture,\n    destroyAttachments: false,\n  });\n}\n\nfunction createTextures(globeDepth, context, width, height, hdr) {\n  var pixelDatatype = hdr\n    ? context.halfFloatingPointTexture\n      ? _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT\n      : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT\n    : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE;\n  globeDepth._globeColorTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: pixelDatatype,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n\n  globeDepth._depthStencilTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].DEPTH_STENCIL */ .Z.DEPTH_STENCIL,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_INT_24_8 */ .Z.UNSIGNED_INT_24_8,\n  });\n\n  globeDepth._globeDepthTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n}\n\nfunction createFramebuffers(globeDepth, context) {\n  globeDepth._globeColorFramebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeDepth._globeColorTexture],\n    depthStencilTexture: globeDepth._depthStencilTexture,\n    destroyAttachments: false,\n  });\n\n  globeDepth._copyDepthFramebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeDepth._globeDepthTexture],\n    destroyAttachments: false,\n  });\n}\n\nfunction createPrimitiveFramebuffer(globeDepth, context, width, height, hdr) {\n  var pixelDatatype = hdr\n    ? context.halfFloatingPointTexture\n      ? _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT\n      : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT\n    : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE;\n  globeDepth._primitiveColorTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: pixelDatatype,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n\n  globeDepth._primitiveColorFramebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeDepth._primitiveColorTexture],\n    depthStencilTexture: globeDepth._depthStencilTexture,\n    destroyAttachments: false,\n  });\n}\n\nfunction destroyPrimitiveFramebuffer(globeDepth) {\n  globeDepth._primitiveColorTexture =\n    globeDepth._primitiveColorTexture &&\n    !globeDepth._primitiveColorTexture.isDestroyed() &&\n    globeDepth._primitiveColorTexture.destroy();\n  globeDepth._primitiveColorFramebuffer =\n    globeDepth._primitiveColorFramebuffer &&\n    !globeDepth._primitiveColorFramebuffer.isDestroyed() &&\n    globeDepth._primitiveColorFramebuffer.destroy();\n}\n\nfunction updateFramebuffers(\n  globeDepth,\n  context,\n  width,\n  height,\n  hdr,\n  clearGlobeDepth\n) {\n  var colorTexture = globeDepth._globeColorTexture;\n  var textureChanged =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(colorTexture) ||\n    colorTexture.width !== width ||\n    colorTexture.height !== height ||\n    hdr !== globeDepth._useHdr;\n  if (textureChanged) {\n    destroyTextures(globeDepth);\n    destroyFramebuffers(globeDepth);\n    createTextures(globeDepth, context, width, height, hdr, clearGlobeDepth);\n    createFramebuffers(globeDepth, context, clearGlobeDepth);\n  }\n\n  if (textureChanged || clearGlobeDepth !== globeDepth._clearGlobeDepth) {\n    destroyPrimitiveFramebuffer(globeDepth);\n    if (clearGlobeDepth) {\n      createPrimitiveFramebuffer(globeDepth, context, width, height, hdr);\n    }\n  }\n}\n\nfunction updateCopyCommands(globeDepth, context, width, height, passState) {\n  globeDepth._viewport.width = width;\n  globeDepth._viewport.height = height;\n\n  var useScissorTest = !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(\n    globeDepth._viewport,\n    passState.viewport\n  );\n  var updateScissor = useScissorTest !== globeDepth._useScissorTest;\n  globeDepth._useScissorTest = useScissorTest;\n\n  if (\n    !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(globeDepth._scissorRectangle, passState.viewport)\n  ) {\n    globeDepth._scissorRectangle = _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n      passState.viewport,\n      globeDepth._scissorRectangle\n    );\n    updateScissor = true;\n  }\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._rs) ||\n    !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(globeDepth._viewport, globeDepth._rs.viewport) ||\n    updateScissor\n  ) {\n    globeDepth._rs = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCache */ .Z.fromCache({\n      viewport: globeDepth._viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle,\n      },\n    });\n    globeDepth._rsBlend = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCache */ .Z.fromCache({\n      viewport: globeDepth._viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle,\n      },\n      blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n    });\n\n    // Copy packed depth only if the 3D Tiles bit is set\n    globeDepth._rsUpdate = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCache */ .Z.fromCache({\n      viewport: globeDepth._viewport,\n      scissorTest: {\n        enabled: globeDepth._useScissorTest,\n        rectangle: globeDepth._scissorRectangle,\n      },\n      stencilTest: {\n        enabled: true,\n        frontFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].EQUAL */ .Z.EQUAL,\n        frontOperation: {\n          fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].KEEP */ .Z.KEEP,\n          zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].KEEP */ .Z.KEEP,\n          zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].KEEP */ .Z.KEEP,\n        },\n        backFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].NEVER */ .Z.NEVER,\n        reference: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n        mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n      },\n    });\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._copyDepthCommand)) {\n    globeDepth._copyDepthCommand = context.createViewportQuadCommand(\n      _Shaders_PostProcessStages_PassThroughDepth_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z,\n      {\n        uniformMap: {\n          u_depthTexture: function () {\n            return globeDepth._depthStencilTexture;\n          },\n        },\n        owner: globeDepth,\n      }\n    );\n  }\n\n  globeDepth._copyDepthCommand.framebuffer = globeDepth._copyDepthFramebuffer;\n  globeDepth._copyDepthCommand.renderState = globeDepth._rs;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._copyColorCommand)) {\n    globeDepth._copyColorCommand = context.createViewportQuadCommand(\n      _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z,\n      {\n        uniformMap: {\n          colorTexture: function () {\n            return globeDepth._globeColorTexture;\n          },\n        },\n        owner: globeDepth,\n      }\n    );\n  }\n\n  globeDepth._copyColorCommand.renderState = globeDepth._rs;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._tempCopyDepthCommand)) {\n    globeDepth._tempCopyDepthCommand = context.createViewportQuadCommand(\n      _Shaders_PostProcessStages_PassThroughDepth_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z,\n      {\n        uniformMap: {\n          u_depthTexture: function () {\n            return globeDepth._tempCopyDepthTexture;\n          },\n        },\n        owner: globeDepth,\n      }\n    );\n  }\n\n  globeDepth._tempCopyDepthCommand.framebuffer =\n    globeDepth._tempCopyDepthFramebuffer;\n  globeDepth._tempCopyDepthCommand.renderState = globeDepth._rs;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._updateDepthCommand)) {\n    globeDepth._updateDepthCommand = context.createViewportQuadCommand(\n      _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z,\n      {\n        uniformMap: {\n          colorTexture: function () {\n            return globeDepth._tempGlobeDepthTexture;\n          },\n        },\n        owner: globeDepth,\n      }\n    );\n  }\n\n  globeDepth._updateDepthCommand.framebuffer =\n    globeDepth._updateDepthFramebuffer;\n  globeDepth._updateDepthCommand.renderState = globeDepth._rsUpdate;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._clearGlobeColorCommand)) {\n    globeDepth._clearGlobeColorCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      stencil: 0.0,\n      owner: globeDepth,\n    });\n  }\n\n  globeDepth._clearGlobeColorCommand.framebuffer =\n    globeDepth._globeColorFramebuffer;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._clearPrimitiveColorCommand)) {\n    globeDepth._clearPrimitiveColorCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      stencil: 0.0,\n      owner: globeDepth,\n    });\n  }\n\n  globeDepth._clearPrimitiveColorCommand.framebuffer =\n    globeDepth._primitiveColorFramebuffer;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(globeDepth._mergeColorCommand)) {\n    globeDepth._mergeColorCommand = context.createViewportQuadCommand(\n      _Shaders_PostProcessStages_PassThrough_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z,\n      {\n        uniformMap: {\n          colorTexture: function () {\n            return globeDepth._primitiveColorTexture;\n          },\n        },\n        owner: globeDepth,\n      }\n    );\n  }\n\n  globeDepth._mergeColorCommand.framebuffer = globeDepth._globeColorFramebuffer;\n  globeDepth._mergeColorCommand.renderState = globeDepth._rsBlend;\n}\n\nGlobeDepth.prototype.executeDebugGlobeDepth = function (\n  context,\n  passState,\n  useLogDepth\n) {\n  executeDebugGlobeDepth(this, context, passState, useLogDepth);\n};\n\nGlobeDepth.prototype.update = function (\n  context,\n  passState,\n  viewport,\n  hdr,\n  clearGlobeDepth\n) {\n  var width = viewport.width;\n  var height = viewport.height;\n\n  updateFramebuffers(this, context, width, height, hdr, clearGlobeDepth);\n  updateCopyCommands(this, context, width, height, passState);\n  context.uniformState.globeDepthTexture = undefined;\n\n  this._useHdr = hdr;\n  this._clearGlobeDepth = clearGlobeDepth;\n};\n\nGlobeDepth.prototype.executeCopyDepth = function (context, passState) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._copyDepthCommand)) {\n    this._copyDepthCommand.execute(context, passState);\n    context.uniformState.globeDepthTexture = this._globeDepthTexture;\n  }\n};\n\nGlobeDepth.prototype.executeUpdateDepth = function (\n  context,\n  passState,\n  clearGlobeDepth\n) {\n  var depthTextureToCopy = passState.framebuffer.depthStencilTexture;\n  if (clearGlobeDepth || depthTextureToCopy !== this._depthStencilTexture) {\n    // First copy the depth to a temporary globe depth texture, then update the\n    // main globe depth texture where the stencil bit for 3D Tiles is set.\n    // This preserves the original globe depth except where 3D Tiles is rendered.\n    // The additional texture and framebuffer resources are created on demand.\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._updateDepthCommand)) {\n      if (\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._updateDepthFramebuffer) ||\n        this._updateDepthFramebuffer.depthStencilTexture !==\n          depthTextureToCopy ||\n        this._updateDepthFramebuffer.getColorTexture(0) !==\n          this._globeDepthTexture\n      ) {\n        var width = this._globeDepthTexture.width;\n        var height = this._globeDepthTexture.height;\n        destroyUpdateDepthResources(this);\n        createUpdateDepthResources(this, context, width, height, passState);\n        updateCopyCommands(this, context, width, height, passState);\n      }\n      this._tempCopyDepthTexture = depthTextureToCopy;\n      this._tempCopyDepthCommand.execute(context, passState);\n      this._updateDepthCommand.execute(context, passState);\n    }\n    return;\n  }\n\n  // Fast path - the depth texture can be copied normally.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._copyDepthCommand)) {\n    this._copyDepthCommand.execute(context, passState);\n  }\n};\n\nGlobeDepth.prototype.executeCopyColor = function (context, passState) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._copyColorCommand)) {\n    this._copyColorCommand.execute(context, passState);\n  }\n};\n\nGlobeDepth.prototype.executeMergeColor = function (context, passState) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._mergeColorCommand)) {\n    this._mergeColorCommand.execute(context, passState);\n  }\n};\n\nGlobeDepth.prototype.clear = function (context, passState, clearColor) {\n  var clear = this._clearGlobeColorCommand;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(clear)) {\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(clearColor, clear.color);\n    clear.execute(context, passState);\n  }\n  clear = this._clearPrimitiveColorCommand;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(clear) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._primitiveColorFramebuffer)) {\n    clear.execute(context, passState);\n  }\n};\n\nGlobeDepth.prototype.isDestroyed = function () {\n  return false;\n};\n\nGlobeDepth.prototype.destroy = function () {\n  destroyTextures(this);\n  destroyFramebuffers(this);\n  destroyPrimitiveFramebuffer(this);\n  destroyUpdateDepthResources(this);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._copyColorCommand)) {\n    this._copyColorCommand.shaderProgram = this._copyColorCommand.shaderProgram.destroy();\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._copyDepthCommand)) {\n    this._copyDepthCommand.shaderProgram = this._copyDepthCommand.shaderProgram.destroy();\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._tempCopyDepthCommand)) {\n    this._tempCopyDepthCommand.shaderProgram = this._tempCopyDepthCommand.shaderProgram.destroy();\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._updateDepthCommand)) {\n    this._updateDepthCommand.shaderProgram = this._updateDepthCommand.shaderProgram.destroy();\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._mergeColorCommand)) {\n    this._mergeColorCommand.shaderProgram = this._mergeColorCommand.shaderProgram.destroy();\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._debugGlobeDepthViewportCommand)) {\n    this._debugGlobeDepthViewportCommand.shaderProgram = this._debugGlobeDepthViewportCommand.shaderProgram.destroy();\n  }\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeDepth);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55977\n')},55188:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86511);\n/* harmony import */ var _Core_TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(735);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46588);\n/* harmony import */ var _getClippingFunction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84167);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(89917);\n\n\n\n\n\n\n\nfunction GlobeSurfaceShader(\n  numberOfDayTextures,\n  flags,\n  material,\n  shaderProgram,\n  clippingShaderState\n) {\n  this.numberOfDayTextures = numberOfDayTextures;\n  this.flags = flags;\n  this.material = material;\n  this.shaderProgram = shaderProgram;\n  this.clippingShaderState = clippingShaderState;\n}\n\n/**\n * Manages the shaders used to shade the surface of a {@link Globe}.\n *\n * @alias GlobeSurfaceShaderSet\n * @private\n */\nfunction GlobeSurfaceShaderSet() {\n  this.baseVertexShaderSource = undefined;\n  this.baseFragmentShaderSource = undefined;\n\n  this._shadersByTexturesFlags = [];\n\n  this.material = undefined;\n}\n\nfunction getPositionMode(sceneMode) {\n  var getPosition3DMode =\n    "vec4 getPosition(vec3 position, float height, vec2 textureCoordinates) { return getPosition3DMode(position, height, textureCoordinates); }";\n  var getPositionColumbusViewAnd2DMode =\n    "vec4 getPosition(vec3 position, float height, vec2 textureCoordinates) { return getPositionColumbusViewMode(position, height, textureCoordinates); }";\n  var getPositionMorphingMode =\n    "vec4 getPosition(vec3 position, float height, vec2 textureCoordinates) { return getPositionMorphingMode(position, height, textureCoordinates); }";\n\n  var positionMode;\n\n  switch (sceneMode) {\n    case _SceneMode_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].SCENE3D */ .Z.SCENE3D:\n      positionMode = getPosition3DMode;\n      break;\n    case _SceneMode_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].SCENE2D */ .Z.SCENE2D:\n    case _SceneMode_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW:\n      positionMode = getPositionColumbusViewAnd2DMode;\n      break;\n    case _SceneMode_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].MORPHING */ .Z.MORPHING:\n      positionMode = getPositionMorphingMode;\n      break;\n  }\n\n  return positionMode;\n}\n\nfunction get2DYPositionFraction(useWebMercatorProjection) {\n  var get2DYPositionFractionGeographicProjection =\n    "float get2DYPositionFraction(vec2 textureCoordinates) { return get2DGeographicYPositionFraction(textureCoordinates); }";\n  var get2DYPositionFractionMercatorProjection =\n    "float get2DYPositionFraction(vec2 textureCoordinates) { return get2DMercatorYPositionFraction(textureCoordinates); }";\n  return useWebMercatorProjection\n    ? get2DYPositionFractionMercatorProjection\n    : get2DYPositionFractionGeographicProjection;\n}\n\nGlobeSurfaceShaderSet.prototype.getShaderProgram = function (options) {\n  var frameState = options.frameState;\n  var surfaceTile = options.surfaceTile;\n  var numberOfDayTextures = options.numberOfDayTextures;\n  var applyBrightness = options.applyBrightness;\n  var applyContrast = options.applyContrast;\n  var applyHue = options.applyHue;\n  var applySaturation = options.applySaturation;\n  var applyGamma = options.applyGamma;\n  var applyAlpha = options.applyAlpha;\n  var applyDayNightAlpha = options.applyDayNightAlpha;\n  var applySplit = options.applySplit;\n  var showReflectiveOcean = options.showReflectiveOcean;\n  var showOceanWaves = options.showOceanWaves;\n  var enableLighting = options.enableLighting;\n  var dynamicAtmosphereLighting = options.dynamicAtmosphereLighting;\n  var dynamicAtmosphereLightingFromSun =\n    options.dynamicAtmosphereLightingFromSun;\n  var showGroundAtmosphere = options.showGroundAtmosphere;\n  var perFragmentGroundAtmosphere = options.perFragmentGroundAtmosphere;\n  var hasVertexNormals = options.hasVertexNormals;\n  var useWebMercatorProjection = options.useWebMercatorProjection;\n  var enableFog = options.enableFog;\n  var enableClippingPlanes = options.enableClippingPlanes;\n  var clippingPlanes = options.clippingPlanes;\n  var clippedByBoundaries = options.clippedByBoundaries;\n  var hasImageryLayerCutout = options.hasImageryLayerCutout;\n  var colorCorrect = options.colorCorrect;\n  var highlightFillTile = options.highlightFillTile;\n  var colorToAlpha = options.colorToAlpha;\n  var hasGeodeticSurfaceNormals = options.hasGeodeticSurfaceNormals;\n  var hasExaggeration = options.hasExaggeration;\n  var showUndergroundColor = options.showUndergroundColor;\n  var translucent = options.translucent;\n\n  var quantization = 0;\n  var quantizationDefine = "";\n\n  var mesh = surfaceTile.renderedMesh;\n  var terrainEncoding = mesh.encoding;\n  var quantizationMode = terrainEncoding.quantization;\n  if (quantizationMode === _Core_TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].BITS12 */ .Z.BITS12) {\n    quantization = 1;\n    quantizationDefine = "QUANTIZATION_BITS12";\n  }\n\n  var cartographicLimitRectangleFlag = 0;\n  var cartographicLimitRectangleDefine = "";\n  if (clippedByBoundaries) {\n    cartographicLimitRectangleFlag = 1;\n    cartographicLimitRectangleDefine = "TILE_LIMIT_RECTANGLE";\n  }\n\n  var imageryCutoutFlag = 0;\n  var imageryCutoutDefine = "";\n  if (hasImageryLayerCutout) {\n    imageryCutoutFlag = 1;\n    imageryCutoutDefine = "APPLY_IMAGERY_CUTOUT";\n  }\n\n  var sceneMode = frameState.mode;\n  var flags =\n    sceneMode |\n    (applyBrightness << 2) |\n    (applyContrast << 3) |\n    (applyHue << 4) |\n    (applySaturation << 5) |\n    (applyGamma << 6) |\n    (applyAlpha << 7) |\n    (showReflectiveOcean << 8) |\n    (showOceanWaves << 9) |\n    (enableLighting << 10) |\n    (dynamicAtmosphereLighting << 11) |\n    (dynamicAtmosphereLightingFromSun << 12) |\n    (showGroundAtmosphere << 13) |\n    (perFragmentGroundAtmosphere << 14) |\n    (hasVertexNormals << 15) |\n    (useWebMercatorProjection << 16) |\n    (enableFog << 17) |\n    (quantization << 18) |\n    (applySplit << 19) |\n    (enableClippingPlanes << 20) |\n    (cartographicLimitRectangleFlag << 21) |\n    (imageryCutoutFlag << 22) |\n    (colorCorrect << 23) |\n    (highlightFillTile << 24) |\n    (colorToAlpha << 25) |\n    (hasGeodeticSurfaceNormals << 26) |\n    (hasExaggeration << 27) |\n    (showUndergroundColor << 28) |\n    (translucent << 29) |\n    (applyDayNightAlpha << 30);\n\n  var currentClippingShaderState = 0;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.length > 0) {\n    currentClippingShaderState = enableClippingPlanes\n      ? clippingPlanes.clippingPlanesState\n      : 0;\n  }\n  var surfaceShader = surfaceTile.surfaceShader;\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(surfaceShader) &&\n    surfaceShader.numberOfDayTextures === numberOfDayTextures &&\n    surfaceShader.flags === flags &&\n    surfaceShader.material === this.material &&\n    surfaceShader.clippingShaderState === currentClippingShaderState\n  ) {\n    return surfaceShader.shaderProgram;\n  }\n\n  // New tile, or tile changed number of textures, flags, or clipping planes\n  var shadersByFlags = this._shadersByTexturesFlags[numberOfDayTextures];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(shadersByFlags)) {\n    shadersByFlags = this._shadersByTexturesFlags[numberOfDayTextures] = [];\n  }\n\n  surfaceShader = shadersByFlags[flags];\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(surfaceShader) ||\n    surfaceShader.material !== this.material ||\n    surfaceShader.clippingShaderState !== currentClippingShaderState\n  ) {\n    // Cache miss - we\'ve never seen this combination of numberOfDayTextures and flags before.\n    var vs = this.baseVertexShaderSource.clone();\n    var fs = this.baseFragmentShaderSource.clone();\n\n    if (currentClippingShaderState !== 0) {\n      fs.sources.unshift(\n        (0,_getClippingFunction_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(clippingPlanes, frameState.context)\n      ); // Need to go before GlobeFS\n    }\n\n    vs.defines.push(quantizationDefine);\n    fs.defines.push(\n      "TEXTURE_UNITS " + numberOfDayTextures,\n      cartographicLimitRectangleDefine,\n      imageryCutoutDefine\n    );\n\n    if (applyBrightness) {\n      fs.defines.push("APPLY_BRIGHTNESS");\n    }\n    if (applyContrast) {\n      fs.defines.push("APPLY_CONTRAST");\n    }\n    if (applyHue) {\n      fs.defines.push("APPLY_HUE");\n    }\n    if (applySaturation) {\n      fs.defines.push("APPLY_SATURATION");\n    }\n    if (applyGamma) {\n      fs.defines.push("APPLY_GAMMA");\n    }\n    if (applyAlpha) {\n      fs.defines.push("APPLY_ALPHA");\n    }\n    if (applyDayNightAlpha) {\n      fs.defines.push("APPLY_DAY_NIGHT_ALPHA");\n    }\n    if (showReflectiveOcean) {\n      fs.defines.push("SHOW_REFLECTIVE_OCEAN");\n      vs.defines.push("SHOW_REFLECTIVE_OCEAN");\n    }\n    if (showOceanWaves) {\n      fs.defines.push("SHOW_OCEAN_WAVES");\n    }\n    if (colorToAlpha) {\n      fs.defines.push("APPLY_COLOR_TO_ALPHA");\n    }\n    if (showUndergroundColor) {\n      vs.defines.push("UNDERGROUND_COLOR");\n      fs.defines.push("UNDERGROUND_COLOR");\n    }\n    if (translucent) {\n      vs.defines.push("TRANSLUCENT");\n      fs.defines.push("TRANSLUCENT");\n    }\n    if (enableLighting) {\n      if (hasVertexNormals) {\n        vs.defines.push("ENABLE_VERTEX_LIGHTING");\n        fs.defines.push("ENABLE_VERTEX_LIGHTING");\n      } else {\n        vs.defines.push("ENABLE_DAYNIGHT_SHADING");\n        fs.defines.push("ENABLE_DAYNIGHT_SHADING");\n      }\n    }\n\n    if (dynamicAtmosphereLighting) {\n      fs.defines.push("DYNAMIC_ATMOSPHERE_LIGHTING");\n      if (dynamicAtmosphereLightingFromSun) {\n        fs.defines.push("DYNAMIC_ATMOSPHERE_LIGHTING_FROM_SUN");\n      }\n    }\n\n    if (showGroundAtmosphere) {\n      vs.defines.push("GROUND_ATMOSPHERE");\n      fs.defines.push("GROUND_ATMOSPHERE");\n      if (perFragmentGroundAtmosphere) {\n        fs.defines.push("PER_FRAGMENT_GROUND_ATMOSPHERE");\n      }\n    }\n\n    vs.defines.push("INCLUDE_WEB_MERCATOR_Y");\n    fs.defines.push("INCLUDE_WEB_MERCATOR_Y");\n\n    if (enableFog) {\n      vs.defines.push("FOG");\n      fs.defines.push("FOG");\n    }\n\n    if (applySplit) {\n      fs.defines.push("APPLY_SPLIT");\n    }\n\n    if (enableClippingPlanes) {\n      fs.defines.push("ENABLE_CLIPPING_PLANES");\n    }\n\n    if (colorCorrect) {\n      fs.defines.push("COLOR_CORRECT");\n    }\n\n    if (highlightFillTile) {\n      fs.defines.push("HIGHLIGHT_FILL_TILE");\n    }\n\n    if (hasGeodeticSurfaceNormals) {\n      vs.defines.push("GEODETIC_SURFACE_NORMALS");\n    }\n\n    if (hasExaggeration) {\n      vs.defines.push("EXAGGERATION");\n    }\n\n    var computeDayColor =\n      "\\\n    vec4 computeDayColor(vec4 initialColor, vec3 textureCoordinates, float nightBlend)\\n\\\n    {\\n\\\n        vec4 color = initialColor;\\n";\n\n    if (hasImageryLayerCutout) {\n      computeDayColor +=\n        "\\\n        vec4 cutoutAndColorResult;\\n\\\n        bool texelUnclipped;\\n";\n    }\n\n    for (var i = 0; i < numberOfDayTextures; ++i) {\n      if (hasImageryLayerCutout) {\n        computeDayColor +=\n          "\\\n        cutoutAndColorResult = u_dayTextureCutoutRectangles[" +\n          i +\n          "];\\n\\\n        texelUnclipped = v_textureCoordinates.x < cutoutAndColorResult.x || cutoutAndColorResult.z < v_textureCoordinates.x || v_textureCoordinates.y < cutoutAndColorResult.y || cutoutAndColorResult.w < v_textureCoordinates.y;\\n\\\n        cutoutAndColorResult = sampleAndBlend(\\n";\n      } else {\n        computeDayColor += "\\\n        color = sampleAndBlend(\\n";\n      }\n      computeDayColor +=\n        "\\\n            color,\\n\\\n            u_dayTextures[" +\n        i +\n        "],\\n\\\n            u_dayTextureUseWebMercatorT[" +\n        i +\n        "] ? textureCoordinates.xz : textureCoordinates.xy,\\n\\\n            u_dayTextureTexCoordsRectangle[" +\n        i +\n        "],\\n\\\n            u_dayTextureTranslationAndScale[" +\n        i +\n        "],\\n\\\n            " +\n        (applyAlpha ? "u_dayTextureAlpha[" + i + "]" : "1.0") +\n        ",\\n\\\n            " +\n        (applyDayNightAlpha ? "u_dayTextureNightAlpha[" + i + "]" : "1.0") +\n        ",\\n" +\n        (applyDayNightAlpha ? "u_dayTextureDayAlpha[" + i + "]" : "1.0") +\n        ",\\n" +\n        (applyBrightness ? "u_dayTextureBrightness[" + i + "]" : "0.0") +\n        ",\\n\\\n            " +\n        (applyContrast ? "u_dayTextureContrast[" + i + "]" : "0.0") +\n        ",\\n\\\n            " +\n        (applyHue ? "u_dayTextureHue[" + i + "]" : "0.0") +\n        ",\\n\\\n            " +\n        (applySaturation ? "u_dayTextureSaturation[" + i + "]" : "0.0") +\n        ",\\n\\\n            " +\n        (applyGamma ? "u_dayTextureOneOverGamma[" + i + "]" : "0.0") +\n        ",\\n\\\n            " +\n        (applySplit ? "u_dayTextureSplit[" + i + "]" : "0.0") +\n        ",\\n\\\n            " +\n        (colorToAlpha ? "u_colorsToAlpha[" + i + "]" : "vec4(0.0)") +\n        ",\\n\\\n        nightBlend\\\n        );\\n";\n      if (hasImageryLayerCutout) {\n        computeDayColor +=\n          "\\\n        color = czm_branchFreeTernary(texelUnclipped, cutoutAndColorResult, color);\\n";\n      }\n    }\n\n    computeDayColor += "\\\n        return color;\\n\\\n    }";\n\n    fs.sources.push(computeDayColor);\n\n    vs.sources.push(getPositionMode(sceneMode));\n    vs.sources.push(get2DYPositionFraction(useWebMercatorProjection));\n\n    var shader = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCache */ .Z.fromCache({\n      context: frameState.context,\n      vertexShaderSource: vs,\n      fragmentShaderSource: fs,\n      attributeLocations: terrainEncoding.getAttributeLocations(),\n    });\n\n    surfaceShader = shadersByFlags[flags] = new GlobeSurfaceShader(\n      numberOfDayTextures,\n      flags,\n      this.material,\n      shader,\n      currentClippingShaderState\n    );\n  }\n\n  surfaceTile.surfaceShader = surfaceShader;\n  return surfaceShader.shaderProgram;\n};\n\nGlobeSurfaceShaderSet.prototype.destroy = function () {\n  var flags;\n  var shader;\n\n  var shadersByTexturesFlags = this._shadersByTexturesFlags;\n  for (var textureCount in shadersByTexturesFlags) {\n    if (shadersByTexturesFlags.hasOwnProperty(textureCount)) {\n      var shadersByFlags = shadersByTexturesFlags[textureCount];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(shadersByFlags)) {\n        continue;\n      }\n\n      for (flags in shadersByFlags) {\n        if (shadersByFlags.hasOwnProperty(flags)) {\n          shader = shadersByFlags[flags];\n          if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(shader)) {\n            shader.shaderProgram.destroy();\n          }\n        }\n      }\n    }\n  }\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeSurfaceShaderSet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55188\n')},14648:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51688);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(82982);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22832);\n/* harmony import */ var _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(67627);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38443);\n/* harmony import */ var _Core_Ray_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(68457);\n/* harmony import */ var _Core_Request_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(22426);\n/* harmony import */ var _Core_RequestState_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(6224);\n/* harmony import */ var _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(82968);\n/* harmony import */ var _Core_TerrainEncoding_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(41782);\n/* harmony import */ var _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9121);\n/* harmony import */ var _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(99095);\n/* harmony import */ var _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(58597);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(88453);\n/* harmony import */ var _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(18192);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(13222);\n/* harmony import */ var _ImageryState_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(73919);\n/* harmony import */ var _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(85828);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(89917);\n/* harmony import */ var _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(46547);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Contains additional information about a {@link QuadtreeTile} of the globe\'s surface, and\n * encapsulates state transition logic for loading tiles.\n *\n * @constructor\n * @alias GlobeSurfaceTile\n * @private\n */\nfunction GlobeSurfaceTile() {\n  /**\n   * The {@link TileImagery} attached to this tile.\n   * @type {TileImagery[]}\n   * @default []\n   */\n  this.imagery = [];\n\n  this.waterMaskTexture = undefined;\n  this.waterMaskTranslationAndScale = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 1.0, 1.0);\n\n  this.terrainData = undefined;\n  this.vertexArray = undefined;\n\n  /**\n   * A bounding region used to estimate distance to the tile. The horizontal bounds are always tight-fitting,\n   * but the `minimumHeight` and `maximumHeight` properties may be derived from the min/max of an ancestor tile\n   * and be quite loose-fitting and thus very poor for estimating distance.\n   * @type {TileBoundingRegion}\n   */\n  this.tileBoundingRegion = undefined;\n  this.occludeePointInScaledSpace = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this.boundingVolumeSourceTile = undefined;\n  this.boundingVolumeIsFromMesh = false;\n\n  this.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].UNLOADED */ .Z.UNLOADED;\n  this.mesh = undefined;\n  this.fill = undefined;\n\n  this.pickBoundingSphere = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n  this.surfaceShader = undefined;\n  this.isClipped = true;\n\n  this.clippedByBoundaries = false;\n}\n\nObject.defineProperties(GlobeSurfaceTile.prototype, {\n  /**\n   * Gets a value indicating whether or not this tile is eligible to be unloaded.\n   * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n   * such as a request for data, is in progress on it.  A tile will never be\n   * unloaded while it is needed for rendering, regardless of the value of this\n   * property.\n   * @memberof GlobeSurfaceTile.prototype\n   * @type {Boolean}\n   */\n  eligibleForUnloading: {\n    get: function () {\n      // Do not remove tiles that are transitioning or that have\n      // imagery that is transitioning.\n      var terrainState = this.terrainState;\n      var loadingIsTransitioning =\n        terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVING */ .Z.RECEIVING ||\n        terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSFORMING */ .Z.TRANSFORMING;\n\n      var shouldRemoveTile = !loadingIsTransitioning;\n\n      var imagery = this.imagery;\n      for (var i = 0, len = imagery.length; shouldRemoveTile && i < len; ++i) {\n        var tileImagery = imagery[i];\n        shouldRemoveTile =\n          !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(tileImagery.loadingImagery) ||\n          tileImagery.loadingImagery.state !== _ImageryState_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].TRANSITIONING */ .Z.TRANSITIONING;\n      }\n\n      return shouldRemoveTile;\n    },\n  },\n\n  /**\n   * Gets the {@link TerrainMesh} that is used for rendering this tile, if any.\n   * Returns the value of the {@link GlobeSurfaceTile#mesh} property if\n   * {@link GlobeSurfaceTile#vertexArray} is defined. Otherwise, It returns the\n   * {@link TerrainFillMesh#mesh} property of the {@link GlobeSurfaceTile#fill}.\n   * If there is no fill, it returns undefined.\n   *\n   * @memberof GlobeSurfaceTile.prototype\n   * @type {TerrainMesh}\n   */\n  renderedMesh: {\n    get: function () {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(this.vertexArray)) {\n        return this.mesh;\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(this.fill)) {\n        return this.fill.mesh;\n      }\n      return undefined;\n    },\n  },\n});\n\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nfunction getPosition(encoding, mode, projection, vertices, index, result) {\n  var position = encoding.getExaggeratedPosition(vertices, index, result);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(mode) && mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    var ellipsoid = projection.ellipsoid;\n    var positionCartographic = ellipsoid.cartesianToCartographic(\n      position,\n      scratchCartographic\n    );\n    position = projection.project(positionCartographic, result);\n    position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n      position.z,\n      position.x,\n      position.y,\n      result\n    );\n  }\n\n  return position;\n}\n\nvar scratchV0 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchV1 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchV2 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nGlobeSurfaceTile.prototype.pick = function (\n  ray,\n  mode,\n  projection,\n  cullBackFaces,\n  result\n) {\n  var mesh = this.renderedMesh;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(mesh)) {\n    return undefined;\n  }\n\n  var vertices = mesh.vertices;\n  var indices = mesh.indices;\n  var encoding = mesh.encoding;\n  var indicesLength = indices.length;\n\n  var minT = Number.MAX_VALUE;\n\n  for (var i = 0; i < indicesLength; i += 3) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n    var i2 = indices[i + 2];\n\n    var v0 = getPosition(encoding, mode, projection, vertices, i0, scratchV0);\n    var v1 = getPosition(encoding, mode, projection, vertices, i1, scratchV1);\n    var v2 = getPosition(encoding, mode, projection, vertices, i2, scratchV2);\n\n    var t = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].rayTriangleParametric */ .Z.rayTriangleParametric(\n      ray,\n      v0,\n      v1,\n      v2,\n      cullBackFaces\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(t) && t < minT && t >= 0.0) {\n      minT = t;\n    }\n  }\n\n  return minT !== Number.MAX_VALUE\n    ? _Core_Ray_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].getPoint */ .Z.getPoint(ray, minT, result)\n    : undefined;\n};\n\nGlobeSurfaceTile.prototype.freeResources = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(this.waterMaskTexture)) {\n    --this.waterMaskTexture.referenceCount;\n    if (this.waterMaskTexture.referenceCount === 0) {\n      this.waterMaskTexture.destroy();\n    }\n    this.waterMaskTexture = undefined;\n  }\n\n  this.terrainData = undefined;\n\n  this.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].UNLOADED */ .Z.UNLOADED;\n  this.mesh = undefined;\n  this.fill = this.fill && this.fill.destroy();\n\n  var imageryList = this.imagery;\n  for (var i = 0, len = imageryList.length; i < len; ++i) {\n    imageryList[i].freeResources();\n  }\n  this.imagery.length = 0;\n\n  this.freeVertexArray();\n};\n\nGlobeSurfaceTile.prototype.freeVertexArray = function () {\n  GlobeSurfaceTile._freeVertexArray(this.vertexArray);\n  this.vertexArray = undefined;\n  GlobeSurfaceTile._freeVertexArray(this.wireframeVertexArray);\n  this.wireframeVertexArray = undefined;\n};\n\nGlobeSurfaceTile.initialize = function (\n  tile,\n  terrainProvider,\n  imageryLayerCollection\n) {\n  var surfaceTile = tile.data;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(surfaceTile)) {\n    surfaceTile = tile.data = new GlobeSurfaceTile();\n  }\n\n  if (tile.state === _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].START */ .Z.START) {\n    prepareNewTile(tile, terrainProvider, imageryLayerCollection);\n    tile.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].LOADING */ .Z.LOADING;\n  }\n};\n\nGlobeSurfaceTile.processStateMachine = function (\n  tile,\n  frameState,\n  terrainProvider,\n  imageryLayerCollection,\n  quadtree,\n  vertexArraysToDestroy,\n  terrainOnly\n) {\n  GlobeSurfaceTile.initialize(tile, terrainProvider, imageryLayerCollection);\n\n  var surfaceTile = tile.data;\n\n  if (tile.state === _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].LOADING */ .Z.LOADING) {\n    processTerrainStateMachine(\n      tile,\n      frameState,\n      terrainProvider,\n      imageryLayerCollection,\n      quadtree,\n      vertexArraysToDestroy\n    );\n  }\n\n  // From here down we\'re loading imagery, not terrain. We don\'t want to load imagery until\n  // we\'re certain that the terrain tiles are actually visible, though. We\'ll load terrainOnly\n  // in these scenarios:\n  //   * our bounding volume isn\'t accurate so we\'re not certain this tile is really visible (see GlobeSurfaceTileProvider#loadTile).\n  //   * we want to upsample from this tile but don\'t plan to render it (see processTerrainStateMachine).\n  if (terrainOnly) {\n    return;\n  }\n\n  var wasAlreadyRenderable = tile.renderable;\n\n  // The terrain is renderable as soon as we have a valid vertex array.\n  tile.renderable = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(surfaceTile.vertexArray);\n\n  // But it\'s not done loading until it\'s in the READY state.\n  var isTerrainDoneLoading = surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].READY */ .Z.READY;\n\n  // If this tile\'s terrain and imagery are just upsampled from its parent, mark the tile as\n  // upsampled only.  We won\'t refine a tile if its four children are upsampled only.\n  tile.upsampledFromParent =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(surfaceTile.terrainData) &&\n    surfaceTile.terrainData.wasCreatedByUpsampling();\n\n  var isImageryDoneLoading = surfaceTile.processImagery(\n    tile,\n    terrainProvider,\n    frameState\n  );\n\n  if (isTerrainDoneLoading && isImageryDoneLoading) {\n    var callbacks = tile._loadedCallbacks;\n    var newCallbacks = {};\n    for (var layerId in callbacks) {\n      if (callbacks.hasOwnProperty(layerId)) {\n        if (!callbacks[layerId](tile)) {\n          newCallbacks[layerId] = callbacks[layerId];\n        }\n      }\n    }\n    tile._loadedCallbacks = newCallbacks;\n\n    tile.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].DONE */ .Z.DONE;\n  }\n\n  // Once a tile is renderable, it stays renderable, because doing otherwise would\n  // cause detail (or maybe even the entire globe) to vanish when adding a new\n  // imagery layer. `GlobeSurfaceTileProvider._onLayerAdded` sets renderable to\n  // false for all affected tiles that are not currently being rendered.\n  if (wasAlreadyRenderable) {\n    tile.renderable = true;\n  }\n};\n\nGlobeSurfaceTile.prototype.processImagery = function (\n  tile,\n  terrainProvider,\n  frameState,\n  skipLoading\n) {\n  var surfaceTile = tile.data;\n  var isUpsampledOnly = tile.upsampledFromParent;\n  var isAnyTileLoaded = false;\n  var isDoneLoading = true;\n\n  // Transition imagery states\n  var tileImageryCollection = surfaceTile.imagery;\n  var i, len;\n  for (i = 0, len = tileImageryCollection.length; i < len; ++i) {\n    var tileImagery = tileImageryCollection[i];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(tileImagery.loadingImagery)) {\n      isUpsampledOnly = false;\n      continue;\n    }\n\n    if (tileImagery.loadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].PLACEHOLDER */ .Z.PLACEHOLDER) {\n      var imageryLayer = tileImagery.loadingImagery.imageryLayer;\n      if (imageryLayer.imageryProvider.ready) {\n        // Remove the placeholder and add the actual skeletons (if any)\n        // at the same position.  Then continue the loop at the same index.\n        tileImagery.freeResources();\n        tileImageryCollection.splice(i, 1);\n        imageryLayer._createTileImagerySkeletons(tile, terrainProvider, i);\n        --i;\n        len = tileImageryCollection.length;\n        continue;\n      } else {\n        isUpsampledOnly = false;\n      }\n    }\n\n    var thisTileDoneLoading = tileImagery.processStateMachine(\n      tile,\n      frameState,\n      skipLoading\n    );\n    isDoneLoading = isDoneLoading && thisTileDoneLoading;\n\n    // The imagery is renderable as soon as we have any renderable imagery for this region.\n    isAnyTileLoaded =\n      isAnyTileLoaded ||\n      thisTileDoneLoading ||\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(tileImagery.readyImagery);\n\n    isUpsampledOnly =\n      isUpsampledOnly &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(tileImagery.loadingImagery) &&\n      (tileImagery.loadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].FAILED */ .Z.FAILED ||\n        tileImagery.loadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].INVALID */ .Z.INVALID);\n  }\n\n  tile.upsampledFromParent = isUpsampledOnly;\n\n  // Allow rendering if any available layers are loaded\n  tile.renderable = tile.renderable && (isAnyTileLoaded || isDoneLoading);\n\n  return isDoneLoading;\n};\n\nfunction toggleGeodeticSurfaceNormals(\n  surfaceTile,\n  enabled,\n  ellipsoid,\n  frameState\n) {\n  var renderedMesh = surfaceTile.renderedMesh;\n  var vertexBuffer = renderedMesh.vertices;\n  var encoding = renderedMesh.encoding;\n  var vertexCount = vertexBuffer.length / encoding.stride;\n\n  // Calculate the new stride and generate a new buffer\n  // Clone the other encoding, toggle geodetic surface normals, then clone again to get updated stride\n  var newEncoding = _Core_TerrainEncoding_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(encoding);\n  newEncoding.hasGeodeticSurfaceNormals = enabled;\n  newEncoding = _Core_TerrainEncoding_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(newEncoding);\n  var newStride = newEncoding.stride;\n  var newVertexBuffer = new Float32Array(vertexCount * newStride);\n\n  if (enabled) {\n    encoding.addGeodeticSurfaceNormals(\n      vertexBuffer,\n      newVertexBuffer,\n      ellipsoid\n    );\n  } else {\n    encoding.removeGeodeticSurfaceNormals(vertexBuffer, newVertexBuffer);\n  }\n\n  renderedMesh.vertices = newVertexBuffer;\n  renderedMesh.stride = newStride;\n\n  // delete the old vertex array (which deletes the vertex buffer attached to it), and create a new vertex array with the new vertex buffer\n  var isFill = renderedMesh !== surfaceTile.mesh;\n  if (isFill) {\n    GlobeSurfaceTile._freeVertexArray(surfaceTile.fill.vertexArray);\n    surfaceTile.fill.vertexArray = GlobeSurfaceTile._createVertexArrayForMesh(\n      frameState.context,\n      renderedMesh\n    );\n  } else {\n    GlobeSurfaceTile._freeVertexArray(surfaceTile.vertexArray);\n    surfaceTile.vertexArray = GlobeSurfaceTile._createVertexArrayForMesh(\n      frameState.context,\n      renderedMesh\n    );\n  }\n  GlobeSurfaceTile._freeVertexArray(surfaceTile.wireframeVertexArray);\n  surfaceTile.wireframeVertexArray = undefined;\n}\n\nGlobeSurfaceTile.prototype.addGeodeticSurfaceNormals = function (\n  ellipsoid,\n  frameState\n) {\n  toggleGeodeticSurfaceNormals(this, true, ellipsoid, frameState);\n};\n\nGlobeSurfaceTile.prototype.removeGeodeticSurfaceNormals = function (\n  frameState\n) {\n  toggleGeodeticSurfaceNormals(this, false, undefined, frameState);\n};\n\nGlobeSurfaceTile.prototype.updateExaggeration = function (\n  tile,\n  frameState,\n  quadtree\n) {\n  var surfaceTile = this;\n  var mesh = surfaceTile.renderedMesh;\n  if (mesh === undefined) {\n    return;\n  }\n\n  // Check the tile\'s terrain encoding to see if it has been exaggerated yet\n  var exaggeration = frameState.terrainExaggeration;\n  var exaggerationRelativeHeight = frameState.terrainExaggerationRelativeHeight;\n  var hasExaggerationScale = exaggeration !== 1.0;\n\n  var encoding = mesh.encoding;\n  var encodingExaggerationScaleChanged = encoding.exaggeration !== exaggeration;\n  var encodingRelativeHeightChanged =\n    encoding.exaggerationRelativeHeight !== exaggerationRelativeHeight;\n\n  if (encodingExaggerationScaleChanged || encodingRelativeHeightChanged) {\n    // Turning exaggeration scale on/off requires adding or removing geodetic surface normals\n    // Relative height only translates, so it has no effect on normals\n    if (encodingExaggerationScaleChanged) {\n      if (hasExaggerationScale && !encoding.hasGeodeticSurfaceNormals) {\n        var ellipsoid = tile.tilingScheme.ellipsoid;\n        surfaceTile.addGeodeticSurfaceNormals(ellipsoid, frameState);\n      } else if (!hasExaggerationScale && encoding.hasGeodeticSurfaceNormals) {\n        surfaceTile.removeGeodeticSurfaceNormals(frameState);\n      }\n    }\n\n    encoding.exaggeration = exaggeration;\n    encoding.exaggerationRelativeHeight = exaggerationRelativeHeight;\n\n    // Notify the quadtree that this tile\'s height has changed\n    if (quadtree !== undefined) {\n      quadtree._tileToUpdateHeights.push(tile);\n      var customData = tile.customData;\n      var customDataLength = customData.length;\n      for (var i = 0; i < customDataLength; i++) {\n        // Restart the level so that a height update is triggered\n        var data = customData[i];\n        data.level = -1;\n      }\n    }\n  }\n};\n\nfunction prepareNewTile(tile, terrainProvider, imageryLayerCollection) {\n  var available = terrainProvider.getTileDataAvailable(\n    tile.x,\n    tile.y,\n    tile.level\n  );\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(available) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(tile.parent)) {\n    // Provider doesn\'t know if this tile is available. Does the parent tile know?\n    var parent = tile.parent;\n    var parentSurfaceTile = parent.data;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(parentSurfaceTile) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(parentSurfaceTile.terrainData)) {\n      available = parentSurfaceTile.terrainData.isChildAvailable(\n        parent.x,\n        parent.y,\n        tile.x,\n        tile.y\n      );\n    }\n  }\n\n  if (available === false) {\n    // This tile is not available, so mark it failed so we start upsampling right away.\n    tile.data.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].FAILED */ .Z.FAILED;\n  }\n\n  // Map imagery tiles to this terrain tile\n  for (var i = 0, len = imageryLayerCollection.length; i < len; ++i) {\n    var layer = imageryLayerCollection.get(i);\n    if (layer.show) {\n      layer._createTileImagerySkeletons(tile, terrainProvider);\n    }\n  }\n}\n\nfunction processTerrainStateMachine(\n  tile,\n  frameState,\n  terrainProvider,\n  imageryLayerCollection,\n  quadtree,\n  vertexArraysToDestroy\n) {\n  var surfaceTile = tile.data;\n\n  // If this tile is FAILED, we\'ll need to upsample from the parent. If the parent isn\'t\n  // ready for that, let\'s push it along.\n  var parent = tile.parent;\n  if (\n    surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].FAILED */ .Z.FAILED &&\n    parent !== undefined\n  ) {\n    var parentReady =\n      parent.data !== undefined &&\n      parent.data.terrainData !== undefined &&\n      parent.data.terrainData.canUpsample !== false;\n    if (!parentReady) {\n      GlobeSurfaceTile.processStateMachine(\n        parent,\n        frameState,\n        terrainProvider,\n        imageryLayerCollection,\n        quadtree,\n        vertexArraysToDestroy,\n        true\n      );\n    }\n  }\n\n  if (surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].FAILED */ .Z.FAILED) {\n    upsample(\n      surfaceTile,\n      tile,\n      frameState,\n      terrainProvider,\n      tile.x,\n      tile.y,\n      tile.level\n    );\n  }\n\n  if (surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].UNLOADED */ .Z.UNLOADED) {\n    requestTileGeometry(\n      surfaceTile,\n      terrainProvider,\n      tile.x,\n      tile.y,\n      tile.level\n    );\n  }\n\n  if (surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVED */ .Z.RECEIVED) {\n    transform(\n      surfaceTile,\n      frameState,\n      terrainProvider,\n      tile.x,\n      tile.y,\n      tile.level\n    );\n  }\n\n  if (surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSFORMED */ .Z.TRANSFORMED) {\n    createResources(\n      surfaceTile,\n      frameState.context,\n      terrainProvider,\n      tile.x,\n      tile.y,\n      tile.level,\n      vertexArraysToDestroy\n    );\n\n    // Update the tile\'s exaggeration in case the globe\'s exaggeration changed while the tile was being processed\n    surfaceTile.updateExaggeration(tile, frameState, quadtree);\n  }\n\n  if (\n    surfaceTile.terrainState >= _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVED */ .Z.RECEIVED &&\n    surfaceTile.waterMaskTexture === undefined &&\n    terrainProvider.hasWaterMask\n  ) {\n    var terrainData = surfaceTile.terrainData;\n    if (terrainData.waterMask !== undefined) {\n      createWaterMaskTextureIfNeeded(frameState.context, surfaceTile);\n    } else {\n      var sourceTile = surfaceTile._findAncestorTileWithTerrainData(tile);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(sourceTile) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(sourceTile.data.waterMaskTexture)) {\n        surfaceTile.waterMaskTexture = sourceTile.data.waterMaskTexture;\n        ++surfaceTile.waterMaskTexture.referenceCount;\n        surfaceTile._computeWaterMaskTranslationAndScale(\n          tile,\n          sourceTile,\n          surfaceTile.waterMaskTranslationAndScale\n        );\n      }\n    }\n  }\n}\n\nfunction upsample(surfaceTile, tile, frameState, terrainProvider, x, y, level) {\n  var parent = tile.parent;\n  if (!parent) {\n    // Trying to upsample from a root tile. No can do. This tile is a failure.\n    tile.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].FAILED */ .Z.FAILED;\n    return;\n  }\n\n  var sourceData = parent.data.terrainData;\n  var sourceX = parent.x;\n  var sourceY = parent.y;\n  var sourceLevel = parent.level;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(sourceData)) {\n    // Parent is not available, so we can\'t upsample this tile yet.\n    return;\n  }\n\n  var terrainDataPromise = sourceData.upsample(\n    terrainProvider.tilingScheme,\n    sourceX,\n    sourceY,\n    sourceLevel,\n    x,\n    y,\n    level\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(terrainDataPromise)) {\n    // The upsample request has been deferred - try again later.\n    return;\n  }\n\n  surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVING */ .Z.RECEIVING;\n\n  (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(\n    terrainDataPromise,\n    function (terrainData) {\n      surfaceTile.terrainData = terrainData;\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVED */ .Z.RECEIVED;\n    },\n    function () {\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].FAILED */ .Z.FAILED;\n    }\n  );\n}\n\nfunction requestTileGeometry(surfaceTile, terrainProvider, x, y, level) {\n  function success(terrainData) {\n    surfaceTile.terrainData = terrainData;\n    surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVED */ .Z.RECEIVED;\n    surfaceTile.request = undefined;\n  }\n\n  function failure(error) {\n    if (surfaceTile.request.state === _Core_RequestState_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].CANCELLED */ .Z.CANCELLED) {\n      // Cancelled due to low priority - try again later.\n      surfaceTile.terrainData = undefined;\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].UNLOADED */ .Z.UNLOADED;\n      surfaceTile.request = undefined;\n      return;\n    }\n\n    // Initially assume failure.  handleError may retry, in which case the state will\n    // change to RECEIVING or UNLOADED.\n    surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].FAILED */ .Z.FAILED;\n    surfaceTile.request = undefined;\n\n    var message =\n      "Failed to obtain terrain tile X: " +\n      x +\n      " Y: " +\n      y +\n      " Level: " +\n      level +\n      \'. Error message: "\' +\n      error +\n      \'"\';\n    terrainProvider._requestError = _Core_TileProviderError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].handleError */ .Z.handleError(\n      terrainProvider._requestError,\n      terrainProvider,\n      terrainProvider.errorEvent,\n      message,\n      x,\n      y,\n      level,\n      doRequest\n    );\n  }\n\n  function doRequest() {\n    // Request the terrain from the terrain provider.\n    var request = new _Core_Request_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n      throttle: false,\n      throttleByServer: true,\n      type: _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].TERRAIN */ .Z.TERRAIN,\n    });\n    surfaceTile.request = request;\n\n    var requestPromise = terrainProvider.requestTileGeometry(\n      x,\n      y,\n      level,\n      request\n    );\n\n    // If the request method returns undefined (instead of a promise), the request\n    // has been deferred.\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(requestPromise)) {\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].RECEIVING */ .Z.RECEIVING;\n      (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(requestPromise, success, failure);\n    } else {\n      // Deferred - try again later.\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].UNLOADED */ .Z.UNLOADED;\n      surfaceTile.request = undefined;\n    }\n  }\n\n  doRequest();\n}\n\nvar scratchCreateMeshOptions = {\n  tilingScheme: undefined,\n  x: 0,\n  y: 0,\n  level: 0,\n  exaggeration: 1.0,\n  exaggerationRelativeHeight: 0.0,\n  throttle: true,\n};\n\nfunction transform(surfaceTile, frameState, terrainProvider, x, y, level) {\n  var tilingScheme = terrainProvider.tilingScheme;\n\n  var createMeshOptions = scratchCreateMeshOptions;\n  createMeshOptions.tilingScheme = tilingScheme;\n  createMeshOptions.x = x;\n  createMeshOptions.y = y;\n  createMeshOptions.level = level;\n  createMeshOptions.exaggeration = frameState.terrainExaggeration;\n  createMeshOptions.exaggerationRelativeHeight =\n    frameState.terrainExaggerationRelativeHeight;\n  createMeshOptions.throttle = true;\n\n  var terrainData = surfaceTile.terrainData;\n  var meshPromise = terrainData.createMesh(createMeshOptions);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(meshPromise)) {\n    // Postponed.\n    return;\n  }\n\n  surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSFORMING */ .Z.TRANSFORMING;\n\n  (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(\n    meshPromise,\n    function (mesh) {\n      surfaceTile.mesh = mesh;\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRANSFORMED */ .Z.TRANSFORMED;\n    },\n    function () {\n      surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].FAILED */ .Z.FAILED;\n    }\n  );\n}\n\nGlobeSurfaceTile._createVertexArrayForMesh = function (context, mesh) {\n  var typedArray = mesh.vertices;\n  var buffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n    context: context,\n    typedArray: typedArray,\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n  });\n  var attributes = mesh.encoding.getAttributes(buffer);\n\n  var indexBuffers = mesh.indices.indexBuffers || {};\n  var indexBuffer = indexBuffers[context.id];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(indexBuffer) || indexBuffer.isDestroyed()) {\n    var indices = mesh.indices;\n    indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n      context: context,\n      typedArray: indices,\n      usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n      indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromSizeInBytes */ .Z.fromSizeInBytes(indices.BYTES_PER_ELEMENT),\n    });\n    indexBuffer.vertexArrayDestroyable = false;\n    indexBuffer.referenceCount = 1;\n    indexBuffers[context.id] = indexBuffer;\n    mesh.indices.indexBuffers = indexBuffers;\n  } else {\n    ++indexBuffer.referenceCount;\n  }\n\n  return new _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z({\n    context: context,\n    attributes: attributes,\n    indexBuffer: indexBuffer,\n  });\n};\n\nGlobeSurfaceTile._freeVertexArray = function (vertexArray) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(vertexArray)) {\n    var indexBuffer = vertexArray.indexBuffer;\n\n    if (!vertexArray.isDestroyed()) {\n      vertexArray.destroy();\n    }\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(indexBuffer) &&\n      !indexBuffer.isDestroyed() &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(indexBuffer.referenceCount)\n    ) {\n      --indexBuffer.referenceCount;\n      if (indexBuffer.referenceCount === 0) {\n        indexBuffer.destroy();\n      }\n    }\n  }\n};\n\nfunction createResources(\n  surfaceTile,\n  context,\n  terrainProvider,\n  x,\n  y,\n  level,\n  vertexArraysToDestroy\n) {\n  surfaceTile.vertexArray = GlobeSurfaceTile._createVertexArrayForMesh(\n    context,\n    surfaceTile.mesh\n  );\n  surfaceTile.terrainState = _TerrainState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].READY */ .Z.READY;\n  surfaceTile.fill =\n    surfaceTile.fill && surfaceTile.fill.destroy(vertexArraysToDestroy);\n}\n\nfunction getContextWaterMaskData(context) {\n  var data = context.cache.tile_waterMaskData;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(data)) {\n    var allWaterTexture = _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].create */ .Z.create({\n      context: context,\n      pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].LUMINANCE */ .Z.LUMINANCE,\n      pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      source: {\n        arrayBufferView: new Uint8Array([255]),\n        width: 1,\n        height: 1,\n      },\n    });\n    allWaterTexture.referenceCount = 1;\n\n    var sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z({\n      wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].CLAMP_TO_EDGE */ .Z.CLAMP_TO_EDGE,\n      minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].LINEAR */ .Z.LINEAR,\n      magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].LINEAR */ .Z.LINEAR,\n    });\n\n    data = {\n      allWaterTexture: allWaterTexture,\n      sampler: sampler,\n      destroy: function () {\n        this.allWaterTexture.destroy();\n      },\n    };\n\n    context.cache.tile_waterMaskData = data;\n  }\n\n  return data;\n}\n\nfunction createWaterMaskTextureIfNeeded(context, surfaceTile) {\n  var waterMask = surfaceTile.terrainData.waterMask;\n  var waterMaskData = getContextWaterMaskData(context);\n  var texture;\n\n  var waterMaskLength = waterMask.length;\n  if (waterMaskLength === 1) {\n    // Length 1 means the tile is entirely land or entirely water.\n    // A value of 0 indicates entirely land, a value of 1 indicates entirely water.\n    if (waterMask[0] !== 0) {\n      texture = waterMaskData.allWaterTexture;\n    } else {\n      // Leave the texture undefined if the tile is entirely land.\n      return;\n    }\n  } else {\n    var textureSize = Math.sqrt(waterMaskLength);\n    texture = _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].create */ .Z.create({\n      context: context,\n      pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].LUMINANCE */ .Z.LUMINANCE,\n      pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n      source: {\n        width: textureSize,\n        height: textureSize,\n        arrayBufferView: waterMask,\n      },\n      sampler: waterMaskData.sampler,\n      flipY: false,\n    });\n\n    texture.referenceCount = 0;\n  }\n\n  ++texture.referenceCount;\n  surfaceTile.waterMaskTexture = texture;\n\n  _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n    0.0,\n    0.0,\n    1.0,\n    1.0,\n    surfaceTile.waterMaskTranslationAndScale\n  );\n}\n\nGlobeSurfaceTile.prototype._findAncestorTileWithTerrainData = function (tile) {\n  var sourceTile = tile.parent;\n\n  while (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(sourceTile) &&\n    (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(sourceTile.data) ||\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(sourceTile.data.terrainData) ||\n      sourceTile.data.terrainData.wasCreatedByUpsampling())\n  ) {\n    sourceTile = sourceTile.parent;\n  }\n\n  return sourceTile;\n};\n\nGlobeSurfaceTile.prototype._computeWaterMaskTranslationAndScale = function (\n  tile,\n  sourceTile,\n  result\n) {\n  var sourceTileRectangle = sourceTile.rectangle;\n  var tileRectangle = tile.rectangle;\n  var tileWidth = tileRectangle.width;\n  var tileHeight = tileRectangle.height;\n\n  var scaleX = tileWidth / sourceTileRectangle.width;\n  var scaleY = tileHeight / sourceTileRectangle.height;\n  result.x =\n    (scaleX * (tileRectangle.west - sourceTileRectangle.west)) / tileWidth;\n  result.y =\n    (scaleY * (tileRectangle.south - sourceTileRectangle.south)) / tileHeight;\n  result.z = scaleX;\n  result.w = scaleY;\n\n  return result;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeSurfaceTile);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2NDguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNSO0FBQ0E7QUFDSTtBQUNWO0FBQ1k7QUFDUTtBQUNaO0FBQ2hCO0FBQ1E7QUFDVTtBQUNGO0FBQ1E7QUFDSTtBQUNsQjtBQUNVO0FBQ0k7QUFDWjtBQUNBO0FBQ3NDO0FBQ0Y7QUFDNUI7QUFDQTtBQUNaO0FBQ0k7QUFDa0I7QUFDeEI7QUFDTTs7QUFFN0M7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG1CQUFtQjtBQUM3QixZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLG9FQUFVOztBQUVwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSx3Q0FBd0Msb0VBQVU7QUFDbEQ7QUFDQTs7QUFFQSxzQkFBc0Isb0ZBQXFCO0FBQzNDO0FBQ0E7O0FBRUEsZ0NBQWdDLHdFQUFjOztBQUU5QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzRkFBc0I7QUFDL0MseUJBQXlCLDRGQUF5Qjs7QUFFbEQ7O0FBRUE7QUFDQSw0Q0FBNEMsNkJBQTZCO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLHNFQUFPO0FBQ2xCLCtDQUErQyw4RkFBMEI7QUFDekU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDLCtCQUErQiw2QkFBNkI7QUFDNUQsTUFBTSxvQ0FBb0M7QUFDMUMsTUFBTSw0QkFBNEIsaUJBQWlCLDRCQUE0QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzRUFBTztBQUNqQjtBQUNBLFFBQVEsU0FBUyxzRUFBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQsOEJBQThCLHNFQUFZOztBQUUxQztBQUNBOztBQUVBLE1BQU0sc0VBQU8sbUJBQW1CLCtFQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhGQUF1QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0Isb0VBQVU7QUFDOUIsb0JBQW9CLG9FQUFVO0FBQzlCLG9CQUFvQixvRUFBVTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sc0VBQU87QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLHVIQUF1QztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNFQUFPO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSwrRUFBWTtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsTUFBTSxzRUFBTztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxzQkFBc0Isb0ZBQXFCO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsU0FBUztBQUNyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBTztBQUNkO0FBQ0E7O0FBRUEscUJBQXFCLHVGQUEyQjtBQUNoRDtBQUNBLGlCQUFpQiwyRkFBNkI7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQkFBcUIsMkZBQTZCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esb0JBQW9CLHNFQUFPOztBQUUzQjtBQUNBLDBEQUEwRCw4RUFBa0I7O0FBRTVFO0FBQ0E7QUFDQTtBQUNBLElBQUksc0VBQU87QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLHFGQUEwQjtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxTQUFTO0FBQzNEO0FBQ0EsU0FBUyxzRUFBTztBQUNoQjtBQUNBO0FBQ0E7O0FBRUEsNkNBQTZDLDBGQUF3QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxzRUFBTzs7QUFFYjtBQUNBO0FBQ0EsTUFBTSxzRUFBTztBQUNiLDRDQUE0QyxnRkFBbUI7QUFDL0QsNkNBQTZDLGtGQUFvQjtBQUNqRTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixzRkFBcUI7QUFDekM7QUFDQSxnQkFBZ0Isc0ZBQXFCO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxzRUFBTyxlQUFlLHNFQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0VBQU8sdUJBQXVCLHNFQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixnRkFBbUI7QUFDaEQ7O0FBRUE7QUFDQSx1REFBdUQsU0FBUztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGdGQUFtQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLGdGQUFtQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUMsb0ZBQXFCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLG9GQUFxQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLDBGQUF3QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLG9GQUFxQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxVQUFVLHNFQUFPLGdCQUFnQixzRUFBTztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHlGQUE0QjtBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sc0VBQU87QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBTztBQUNkO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsc0ZBQXNCOztBQUVuRCxFQUFFLHlFQUFJO0FBQ047QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG9GQUFxQjtBQUN0RCxLQUFLO0FBQ0w7QUFDQSxpQ0FBaUMsZ0ZBQW1CO0FBQ3BEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isb0ZBQXFCO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsMEZBQXNCO0FBQzVEO0FBQ0E7QUFDQSxpQ0FBaUMsb0ZBQXFCO0FBQ3REO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLGdGQUFtQjtBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvR0FBNkI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQixpRUFBTztBQUM3QjtBQUNBO0FBQ0EsWUFBWSxzRkFBbUI7QUFDL0IsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxzRUFBTztBQUNmLGlDQUFpQyxzRkFBc0I7QUFDdkQsTUFBTSx5RUFBSTtBQUNWLE1BQU07QUFDTjtBQUNBLGlDQUFpQyxvRkFBcUI7QUFDdEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsT0FBTyxzRUFBTztBQUNkO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsNEZBQXlCOztBQUV0RCxFQUFFLHlFQUFJO0FBQ047QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDBGQUF3QjtBQUN6RCxLQUFLO0FBQ0w7QUFDQSxpQ0FBaUMsZ0ZBQW1CO0FBQ3BEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSwyR0FBeUI7QUFDeEM7QUFDQTtBQUNBLFdBQVcsa0dBQXVCO0FBQ2xDLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsT0FBTyxzRUFBTztBQUNkO0FBQ0Esa0JBQWtCLHlHQUF3QjtBQUMxQztBQUNBO0FBQ0EsYUFBYSxrR0FBdUI7QUFDcEMscUJBQXFCLHVHQUE2QjtBQUNsRCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSxhQUFhLDBFQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLE1BQU0sc0VBQU87QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHNFQUFPO0FBQ2I7QUFDQSxNQUFNLHNFQUFPO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4RUFBa0I7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsT0FBTyxzRUFBTztBQUNkLDBCQUEwQixvRkFBYztBQUN4QztBQUNBLG1CQUFtQix5RkFBcUI7QUFDeEMscUJBQXFCLHdHQUEyQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUEsc0JBQXNCLHNFQUFPO0FBQzdCLGFBQWEsc0dBQXlCO0FBQ3RDLGFBQWEsc0dBQXlCO0FBQ3RDLDBCQUEwQixzR0FBZ0M7QUFDMUQsMkJBQTJCLHVHQUFpQztBQUM1RCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxjQUFjLG9GQUFjO0FBQzVCO0FBQ0EsbUJBQW1CLHlGQUFxQjtBQUN4QyxxQkFBcUIsd0dBQTJCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFLDhGQUF1QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxzRUFBTztBQUNYLE1BQU0sc0VBQU87QUFDYixPQUFPLHNFQUFPO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseURBQWUsZ0JBQWdCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvR2xvYmVTdXJmYWNlVGlsZS5qcz9iZGFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3VuZGluZ1NwaGVyZSBmcm9tIFwiLi4vQ29yZS9Cb3VuZGluZ1NwaGVyZS5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjQgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuNC5qc1wiO1xuaW1wb3J0IENhcnRvZ3JhcGhpYyBmcm9tIFwiLi4vQ29yZS9DYXJ0b2dyYXBoaWMuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBJbmRleERhdGF0eXBlIGZyb20gXCIuLi9Db3JlL0luZGV4RGF0YXR5cGUuanNcIjtcbmltcG9ydCBJbnRlcnNlY3Rpb25UZXN0cyBmcm9tIFwiLi4vQ29yZS9JbnRlcnNlY3Rpb25UZXN0cy5qc1wiO1xuaW1wb3J0IFBpeGVsRm9ybWF0IGZyb20gXCIuLi9Db3JlL1BpeGVsRm9ybWF0LmpzXCI7XG5pbXBvcnQgUmF5IGZyb20gXCIuLi9Db3JlL1JheS5qc1wiO1xuaW1wb3J0IFJlcXVlc3QgZnJvbSBcIi4uL0NvcmUvUmVxdWVzdC5qc1wiO1xuaW1wb3J0IFJlcXVlc3RTdGF0ZSBmcm9tIFwiLi4vQ29yZS9SZXF1ZXN0U3RhdGUuanNcIjtcbmltcG9ydCBSZXF1ZXN0VHlwZSBmcm9tIFwiLi4vQ29yZS9SZXF1ZXN0VHlwZS5qc1wiO1xuaW1wb3J0IFRlcnJhaW5FbmNvZGluZyBmcm9tIFwiLi4vQ29yZS9UZXJyYWluRW5jb2RpbmcuanNcIjtcbmltcG9ydCBUaWxlUHJvdmlkZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9UaWxlUHJvdmlkZXJFcnJvci5qc1wiO1xuaW1wb3J0IEJ1ZmZlciBmcm9tIFwiLi4vUmVuZGVyZXIvQnVmZmVyLmpzXCI7XG5pbXBvcnQgQnVmZmVyVXNhZ2UgZnJvbSBcIi4uL1JlbmRlcmVyL0J1ZmZlclVzYWdlLmpzXCI7XG5pbXBvcnQgUGl4ZWxEYXRhdHlwZSBmcm9tIFwiLi4vUmVuZGVyZXIvUGl4ZWxEYXRhdHlwZS5qc1wiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL1JlbmRlcmVyL1NhbXBsZXIuanNcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9SZW5kZXJlci9UZXh0dXJlLmpzXCI7XG5pbXBvcnQgVGV4dHVyZU1hZ25pZmljYXRpb25GaWx0ZXIgZnJvbSBcIi4uL1JlbmRlcmVyL1RleHR1cmVNYWduaWZpY2F0aW9uRmlsdGVyLmpzXCI7XG5pbXBvcnQgVGV4dHVyZU1pbmlmaWNhdGlvbkZpbHRlciBmcm9tIFwiLi4vUmVuZGVyZXIvVGV4dHVyZU1pbmlmaWNhdGlvbkZpbHRlci5qc1wiO1xuaW1wb3J0IFRleHR1cmVXcmFwIGZyb20gXCIuLi9SZW5kZXJlci9UZXh0dXJlV3JhcC5qc1wiO1xuaW1wb3J0IFZlcnRleEFycmF5IGZyb20gXCIuLi9SZW5kZXJlci9WZXJ0ZXhBcnJheS5qc1wiO1xuaW1wb3J0IHdoZW4gZnJvbSBcIi4uL1RoaXJkUGFydHkvd2hlbi5qc1wiO1xuaW1wb3J0IEltYWdlcnlTdGF0ZSBmcm9tIFwiLi9JbWFnZXJ5U3RhdGUuanNcIjtcbmltcG9ydCBRdWFkdHJlZVRpbGVMb2FkU3RhdGUgZnJvbSBcIi4vUXVhZHRyZWVUaWxlTG9hZFN0YXRlLmpzXCI7XG5pbXBvcnQgU2NlbmVNb2RlIGZyb20gXCIuL1NjZW5lTW9kZS5qc1wiO1xuaW1wb3J0IFRlcnJhaW5TdGF0ZSBmcm9tIFwiLi9UZXJyYWluU3RhdGUuanNcIjtcblxuLyoqXG4gKiBDb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGEge0BsaW5rIFF1YWR0cmVlVGlsZX0gb2YgdGhlIGdsb2JlJ3Mgc3VyZmFjZSwgYW5kXG4gKiBlbmNhcHN1bGF0ZXMgc3RhdGUgdHJhbnNpdGlvbiBsb2dpYyBmb3IgbG9hZGluZyB0aWxlcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhbGlhcyBHbG9iZVN1cmZhY2VUaWxlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBHbG9iZVN1cmZhY2VUaWxlKCkge1xuICAvKipcbiAgICogVGhlIHtAbGluayBUaWxlSW1hZ2VyeX0gYXR0YWNoZWQgdG8gdGhpcyB0aWxlLlxuICAgKiBAdHlwZSB7VGlsZUltYWdlcnlbXX1cbiAgICogQGRlZmF1bHQgW11cbiAgICovXG4gIHRoaXMuaW1hZ2VyeSA9IFtdO1xuXG4gIHRoaXMud2F0ZXJNYXNrVGV4dHVyZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy53YXRlck1hc2tUcmFuc2xhdGlvbkFuZFNjYWxlID0gbmV3IENhcnRlc2lhbjQoMC4wLCAwLjAsIDEuMCwgMS4wKTtcblxuICB0aGlzLnRlcnJhaW5EYXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLnZlcnRleEFycmF5ID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBBIGJvdW5kaW5nIHJlZ2lvbiB1c2VkIHRvIGVzdGltYXRlIGRpc3RhbmNlIHRvIHRoZSB0aWxlLiBUaGUgaG9yaXpvbnRhbCBib3VuZHMgYXJlIGFsd2F5cyB0aWdodC1maXR0aW5nLFxuICAgKiBidXQgdGhlIGBtaW5pbXVtSGVpZ2h0YCBhbmQgYG1heGltdW1IZWlnaHRgIHByb3BlcnRpZXMgbWF5IGJlIGRlcml2ZWQgZnJvbSB0aGUgbWluL21heCBvZiBhbiBhbmNlc3RvciB0aWxlXG4gICAqIGFuZCBiZSBxdWl0ZSBsb29zZS1maXR0aW5nIGFuZCB0aHVzIHZlcnkgcG9vciBmb3IgZXN0aW1hdGluZyBkaXN0YW5jZS5cbiAgICogQHR5cGUge1RpbGVCb3VuZGluZ1JlZ2lvbn1cbiAgICovXG4gIHRoaXMudGlsZUJvdW5kaW5nUmVnaW9uID0gdW5kZWZpbmVkO1xuICB0aGlzLm9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlID0gbmV3IENhcnRlc2lhbjMoKTtcbiAgdGhpcy5ib3VuZGluZ1ZvbHVtZVNvdXJjZVRpbGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuYm91bmRpbmdWb2x1bWVJc0Zyb21NZXNoID0gZmFsc2U7XG5cbiAgdGhpcy50ZXJyYWluU3RhdGUgPSBUZXJyYWluU3RhdGUuVU5MT0FERUQ7XG4gIHRoaXMubWVzaCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5maWxsID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucGlja0JvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7XG5cbiAgdGhpcy5zdXJmYWNlU2hhZGVyID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQ2xpcHBlZCA9IHRydWU7XG5cbiAgdGhpcy5jbGlwcGVkQnlCb3VuZGFyaWVzID0gZmFsc2U7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGlzIHRpbGUgaXMgZWxpZ2libGUgdG8gYmUgdW5sb2FkZWQuXG4gICAqIFR5cGljYWxseSwgYSB0aWxlIGlzIGluZWxpZ2libGUgdG8gYmUgdW5sb2FkZWQgd2hpbGUgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbixcbiAgICogc3VjaCBhcyBhIHJlcXVlc3QgZm9yIGRhdGEsIGlzIGluIHByb2dyZXNzIG9uIGl0LiAgQSB0aWxlIHdpbGwgbmV2ZXIgYmVcbiAgICogdW5sb2FkZWQgd2hpbGUgaXQgaXMgbmVlZGVkIGZvciByZW5kZXJpbmcsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIHRoaXNcbiAgICogcHJvcGVydHkuXG4gICAqIEBtZW1iZXJvZiBHbG9iZVN1cmZhY2VUaWxlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIGVsaWdpYmxlRm9yVW5sb2FkaW5nOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBEbyBub3QgcmVtb3ZlIHRpbGVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmcgb3IgdGhhdCBoYXZlXG4gICAgICAvLyBpbWFnZXJ5IHRoYXQgaXMgdHJhbnNpdGlvbmluZy5cbiAgICAgIHZhciB0ZXJyYWluU3RhdGUgPSB0aGlzLnRlcnJhaW5TdGF0ZTtcbiAgICAgIHZhciBsb2FkaW5nSXNUcmFuc2l0aW9uaW5nID1cbiAgICAgICAgdGVycmFpblN0YXRlID09PSBUZXJyYWluU3RhdGUuUkVDRUlWSU5HIHx8XG4gICAgICAgIHRlcnJhaW5TdGF0ZSA9PT0gVGVycmFpblN0YXRlLlRSQU5TRk9STUlORztcblxuICAgICAgdmFyIHNob3VsZFJlbW92ZVRpbGUgPSAhbG9hZGluZ0lzVHJhbnNpdGlvbmluZztcblxuICAgICAgdmFyIGltYWdlcnkgPSB0aGlzLmltYWdlcnk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW1hZ2VyeS5sZW5ndGg7IHNob3VsZFJlbW92ZVRpbGUgJiYgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHZhciB0aWxlSW1hZ2VyeSA9IGltYWdlcnlbaV07XG4gICAgICAgIHNob3VsZFJlbW92ZVRpbGUgPVxuICAgICAgICAgICFkZWZpbmVkKHRpbGVJbWFnZXJ5LmxvYWRpbmdJbWFnZXJ5KSB8fFxuICAgICAgICAgIHRpbGVJbWFnZXJ5LmxvYWRpbmdJbWFnZXJ5LnN0YXRlICE9PSBJbWFnZXJ5U3RhdGUuVFJBTlNJVElPTklORztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNob3VsZFJlbW92ZVRpbGU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUge0BsaW5rIFRlcnJhaW5NZXNofSB0aGF0IGlzIHVzZWQgZm9yIHJlbmRlcmluZyB0aGlzIHRpbGUsIGlmIGFueS5cbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHtAbGluayBHbG9iZVN1cmZhY2VUaWxlI21lc2h9IHByb3BlcnR5IGlmXG4gICAqIHtAbGluayBHbG9iZVN1cmZhY2VUaWxlI3ZlcnRleEFycmF5fSBpcyBkZWZpbmVkLiBPdGhlcndpc2UsIEl0IHJldHVybnMgdGhlXG4gICAqIHtAbGluayBUZXJyYWluRmlsbE1lc2gjbWVzaH0gcHJvcGVydHkgb2YgdGhlIHtAbGluayBHbG9iZVN1cmZhY2VUaWxlI2ZpbGx9LlxuICAgKiBJZiB0aGVyZSBpcyBubyBmaWxsLCBpdCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQG1lbWJlcm9mIEdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlXG4gICAqIEB0eXBlIHtUZXJyYWluTWVzaH1cbiAgICovXG4gIHJlbmRlcmVkTWVzaDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlZmluZWQodGhpcy52ZXJ0ZXhBcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaDtcbiAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZCh0aGlzLmZpbGwpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGwubWVzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG52YXIgc2NyYXRjaENhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWMoKTtcblxuZnVuY3Rpb24gZ2V0UG9zaXRpb24oZW5jb2RpbmcsIG1vZGUsIHByb2plY3Rpb24sIHZlcnRpY2VzLCBpbmRleCwgcmVzdWx0KSB7XG4gIHZhciBwb3NpdGlvbiA9IGVuY29kaW5nLmdldEV4YWdnZXJhdGVkUG9zaXRpb24odmVydGljZXMsIGluZGV4LCByZXN1bHQpO1xuXG4gIGlmIChkZWZpbmVkKG1vZGUpICYmIG1vZGUgIT09IFNjZW5lTW9kZS5TQ0VORTNEKSB7XG4gICAgdmFyIGVsbGlwc29pZCA9IHByb2plY3Rpb24uZWxsaXBzb2lkO1xuICAgIHZhciBwb3NpdGlvbkNhcnRvZ3JhcGhpYyA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY1xuICAgICk7XG4gICAgcG9zaXRpb24gPSBwcm9qZWN0aW9uLnByb2plY3QocG9zaXRpb25DYXJ0b2dyYXBoaWMsIHJlc3VsdCk7XG4gICAgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zLmZyb21FbGVtZW50cyhcbiAgICAgIHBvc2l0aW9uLnosXG4gICAgICBwb3NpdGlvbi54LFxuICAgICAgcG9zaXRpb24ueSxcbiAgICAgIHJlc3VsdFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb247XG59XG5cbnZhciBzY3JhdGNoVjAgPSBuZXcgQ2FydGVzaWFuMygpO1xudmFyIHNjcmF0Y2hWMSA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG52YXIgc2NyYXRjaFYyID0gbmV3IENhcnRlc2lhbjMoKTtcblxuR2xvYmVTdXJmYWNlVGlsZS5wcm90b3R5cGUucGljayA9IGZ1bmN0aW9uIChcbiAgcmF5LFxuICBtb2RlLFxuICBwcm9qZWN0aW9uLFxuICBjdWxsQmFja0ZhY2VzLFxuICByZXN1bHRcbikge1xuICB2YXIgbWVzaCA9IHRoaXMucmVuZGVyZWRNZXNoO1xuICBpZiAoIWRlZmluZWQobWVzaCkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHZlcnRpY2VzID0gbWVzaC52ZXJ0aWNlcztcbiAgdmFyIGluZGljZXMgPSBtZXNoLmluZGljZXM7XG4gIHZhciBlbmNvZGluZyA9IG1lc2guZW5jb2Rpbmc7XG4gIHZhciBpbmRpY2VzTGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7XG5cbiAgdmFyIG1pblQgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kaWNlc0xlbmd0aDsgaSArPSAzKSB7XG4gICAgdmFyIGkwID0gaW5kaWNlc1tpXTtcbiAgICB2YXIgaTEgPSBpbmRpY2VzW2kgKyAxXTtcbiAgICB2YXIgaTIgPSBpbmRpY2VzW2kgKyAyXTtcblxuICAgIHZhciB2MCA9IGdldFBvc2l0aW9uKGVuY29kaW5nLCBtb2RlLCBwcm9qZWN0aW9uLCB2ZXJ0aWNlcywgaTAsIHNjcmF0Y2hWMCk7XG4gICAgdmFyIHYxID0gZ2V0UG9zaXRpb24oZW5jb2RpbmcsIG1vZGUsIHByb2plY3Rpb24sIHZlcnRpY2VzLCBpMSwgc2NyYXRjaFYxKTtcbiAgICB2YXIgdjIgPSBnZXRQb3NpdGlvbihlbmNvZGluZywgbW9kZSwgcHJvamVjdGlvbiwgdmVydGljZXMsIGkyLCBzY3JhdGNoVjIpO1xuXG4gICAgdmFyIHQgPSBJbnRlcnNlY3Rpb25UZXN0cy5yYXlUcmlhbmdsZVBhcmFtZXRyaWMoXG4gICAgICByYXksXG4gICAgICB2MCxcbiAgICAgIHYxLFxuICAgICAgdjIsXG4gICAgICBjdWxsQmFja0ZhY2VzXG4gICAgKTtcbiAgICBpZiAoZGVmaW5lZCh0KSAmJiB0IDwgbWluVCAmJiB0ID49IDAuMCkge1xuICAgICAgbWluVCA9IHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pblQgIT09IE51bWJlci5NQVhfVkFMVUVcbiAgICA/IFJheS5nZXRQb2ludChyYXksIG1pblQsIHJlc3VsdClcbiAgICA6IHVuZGVmaW5lZDtcbn07XG5cbkdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlLmZyZWVSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChkZWZpbmVkKHRoaXMud2F0ZXJNYXNrVGV4dHVyZSkpIHtcbiAgICAtLXRoaXMud2F0ZXJNYXNrVGV4dHVyZS5yZWZlcmVuY2VDb3VudDtcbiAgICBpZiAodGhpcy53YXRlck1hc2tUZXh0dXJlLnJlZmVyZW5jZUNvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLndhdGVyTWFza1RleHR1cmUuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLndhdGVyTWFza1RleHR1cmUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB0aGlzLnRlcnJhaW5EYXRhID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMudGVycmFpblN0YXRlID0gVGVycmFpblN0YXRlLlVOTE9BREVEO1xuICB0aGlzLm1lc2ggPSB1bmRlZmluZWQ7XG4gIHRoaXMuZmlsbCA9IHRoaXMuZmlsbCAmJiB0aGlzLmZpbGwuZGVzdHJveSgpO1xuXG4gIHZhciBpbWFnZXJ5TGlzdCA9IHRoaXMuaW1hZ2VyeTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGltYWdlcnlMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaW1hZ2VyeUxpc3RbaV0uZnJlZVJlc291cmNlcygpO1xuICB9XG4gIHRoaXMuaW1hZ2VyeS5sZW5ndGggPSAwO1xuXG4gIHRoaXMuZnJlZVZlcnRleEFycmF5KCk7XG59O1xuXG5HbG9iZVN1cmZhY2VUaWxlLnByb3RvdHlwZS5mcmVlVmVydGV4QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIEdsb2JlU3VyZmFjZVRpbGUuX2ZyZWVWZXJ0ZXhBcnJheSh0aGlzLnZlcnRleEFycmF5KTtcbiAgdGhpcy52ZXJ0ZXhBcnJheSA9IHVuZGVmaW5lZDtcbiAgR2xvYmVTdXJmYWNlVGlsZS5fZnJlZVZlcnRleEFycmF5KHRoaXMud2lyZWZyYW1lVmVydGV4QXJyYXkpO1xuICB0aGlzLndpcmVmcmFtZVZlcnRleEFycmF5ID0gdW5kZWZpbmVkO1xufTtcblxuR2xvYmVTdXJmYWNlVGlsZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKFxuICB0aWxlLFxuICB0ZXJyYWluUHJvdmlkZXIsXG4gIGltYWdlcnlMYXllckNvbGxlY3Rpb25cbikge1xuICB2YXIgc3VyZmFjZVRpbGUgPSB0aWxlLmRhdGE7XG4gIGlmICghZGVmaW5lZChzdXJmYWNlVGlsZSkpIHtcbiAgICBzdXJmYWNlVGlsZSA9IHRpbGUuZGF0YSA9IG5ldyBHbG9iZVN1cmZhY2VUaWxlKCk7XG4gIH1cblxuICBpZiAodGlsZS5zdGF0ZSA9PT0gUXVhZHRyZWVUaWxlTG9hZFN0YXRlLlNUQVJUKSB7XG4gICAgcHJlcGFyZU5ld1RpbGUodGlsZSwgdGVycmFpblByb3ZpZGVyLCBpbWFnZXJ5TGF5ZXJDb2xsZWN0aW9uKTtcbiAgICB0aWxlLnN0YXRlID0gUXVhZHRyZWVUaWxlTG9hZFN0YXRlLkxPQURJTkc7XG4gIH1cbn07XG5cbkdsb2JlU3VyZmFjZVRpbGUucHJvY2Vzc1N0YXRlTWFjaGluZSA9IGZ1bmN0aW9uIChcbiAgdGlsZSxcbiAgZnJhbWVTdGF0ZSxcbiAgdGVycmFpblByb3ZpZGVyLFxuICBpbWFnZXJ5TGF5ZXJDb2xsZWN0aW9uLFxuICBxdWFkdHJlZSxcbiAgdmVydGV4QXJyYXlzVG9EZXN0cm95LFxuICB0ZXJyYWluT25seVxuKSB7XG4gIEdsb2JlU3VyZmFjZVRpbGUuaW5pdGlhbGl6ZSh0aWxlLCB0ZXJyYWluUHJvdmlkZXIsIGltYWdlcnlMYXllckNvbGxlY3Rpb24pO1xuXG4gIHZhciBzdXJmYWNlVGlsZSA9IHRpbGUuZGF0YTtcblxuICBpZiAodGlsZS5zdGF0ZSA9PT0gUXVhZHRyZWVUaWxlTG9hZFN0YXRlLkxPQURJTkcpIHtcbiAgICBwcm9jZXNzVGVycmFpblN0YXRlTWFjaGluZShcbiAgICAgIHRpbGUsXG4gICAgICBmcmFtZVN0YXRlLFxuICAgICAgdGVycmFpblByb3ZpZGVyLFxuICAgICAgaW1hZ2VyeUxheWVyQ29sbGVjdGlvbixcbiAgICAgIHF1YWR0cmVlLFxuICAgICAgdmVydGV4QXJyYXlzVG9EZXN0cm95XG4gICAgKTtcbiAgfVxuXG4gIC8vIEZyb20gaGVyZSBkb3duIHdlJ3JlIGxvYWRpbmcgaW1hZ2VyeSwgbm90IHRlcnJhaW4uIFdlIGRvbid0IHdhbnQgdG8gbG9hZCBpbWFnZXJ5IHVudGlsXG4gIC8vIHdlJ3JlIGNlcnRhaW4gdGhhdCB0aGUgdGVycmFpbiB0aWxlcyBhcmUgYWN0dWFsbHkgdmlzaWJsZSwgdGhvdWdoLiBXZSdsbCBsb2FkIHRlcnJhaW5Pbmx5XG4gIC8vIGluIHRoZXNlIHNjZW5hcmlvczpcbiAgLy8gICAqIG91ciBib3VuZGluZyB2b2x1bWUgaXNuJ3QgYWNjdXJhdGUgc28gd2UncmUgbm90IGNlcnRhaW4gdGhpcyB0aWxlIGlzIHJlYWxseSB2aXNpYmxlIChzZWUgR2xvYmVTdXJmYWNlVGlsZVByb3ZpZGVyI2xvYWRUaWxlKS5cbiAgLy8gICAqIHdlIHdhbnQgdG8gdXBzYW1wbGUgZnJvbSB0aGlzIHRpbGUgYnV0IGRvbid0IHBsYW4gdG8gcmVuZGVyIGl0IChzZWUgcHJvY2Vzc1RlcnJhaW5TdGF0ZU1hY2hpbmUpLlxuICBpZiAodGVycmFpbk9ubHkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgd2FzQWxyZWFkeVJlbmRlcmFibGUgPSB0aWxlLnJlbmRlcmFibGU7XG5cbiAgLy8gVGhlIHRlcnJhaW4gaXMgcmVuZGVyYWJsZSBhcyBzb29uIGFzIHdlIGhhdmUgYSB2YWxpZCB2ZXJ0ZXggYXJyYXkuXG4gIHRpbGUucmVuZGVyYWJsZSA9IGRlZmluZWQoc3VyZmFjZVRpbGUudmVydGV4QXJyYXkpO1xuXG4gIC8vIEJ1dCBpdCdzIG5vdCBkb25lIGxvYWRpbmcgdW50aWwgaXQncyBpbiB0aGUgUkVBRFkgc3RhdGUuXG4gIHZhciBpc1RlcnJhaW5Eb25lTG9hZGluZyA9IHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9PT0gVGVycmFpblN0YXRlLlJFQURZO1xuXG4gIC8vIElmIHRoaXMgdGlsZSdzIHRlcnJhaW4gYW5kIGltYWdlcnkgYXJlIGp1c3QgdXBzYW1wbGVkIGZyb20gaXRzIHBhcmVudCwgbWFyayB0aGUgdGlsZSBhc1xuICAvLyB1cHNhbXBsZWQgb25seS4gIFdlIHdvbid0IHJlZmluZSBhIHRpbGUgaWYgaXRzIGZvdXIgY2hpbGRyZW4gYXJlIHVwc2FtcGxlZCBvbmx5LlxuICB0aWxlLnVwc2FtcGxlZEZyb21QYXJlbnQgPVxuICAgIGRlZmluZWQoc3VyZmFjZVRpbGUudGVycmFpbkRhdGEpICYmXG4gICAgc3VyZmFjZVRpbGUudGVycmFpbkRhdGEud2FzQ3JlYXRlZEJ5VXBzYW1wbGluZygpO1xuXG4gIHZhciBpc0ltYWdlcnlEb25lTG9hZGluZyA9IHN1cmZhY2VUaWxlLnByb2Nlc3NJbWFnZXJ5KFxuICAgIHRpbGUsXG4gICAgdGVycmFpblByb3ZpZGVyLFxuICAgIGZyYW1lU3RhdGVcbiAgKTtcblxuICBpZiAoaXNUZXJyYWluRG9uZUxvYWRpbmcgJiYgaXNJbWFnZXJ5RG9uZUxvYWRpbmcpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gdGlsZS5fbG9hZGVkQ2FsbGJhY2tzO1xuICAgIHZhciBuZXdDYWxsYmFja3MgPSB7fTtcbiAgICBmb3IgKHZhciBsYXllcklkIGluIGNhbGxiYWNrcykge1xuICAgICAgaWYgKGNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICBpZiAoIWNhbGxiYWNrc1tsYXllcklkXSh0aWxlKSkge1xuICAgICAgICAgIG5ld0NhbGxiYWNrc1tsYXllcklkXSA9IGNhbGxiYWNrc1tsYXllcklkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aWxlLl9sb2FkZWRDYWxsYmFja3MgPSBuZXdDYWxsYmFja3M7XG5cbiAgICB0aWxlLnN0YXRlID0gUXVhZHRyZWVUaWxlTG9hZFN0YXRlLkRPTkU7XG4gIH1cblxuICAvLyBPbmNlIGEgdGlsZSBpcyByZW5kZXJhYmxlLCBpdCBzdGF5cyByZW5kZXJhYmxlLCBiZWNhdXNlIGRvaW5nIG90aGVyd2lzZSB3b3VsZFxuICAvLyBjYXVzZSBkZXRhaWwgKG9yIG1heWJlIGV2ZW4gdGhlIGVudGlyZSBnbG9iZSkgdG8gdmFuaXNoIHdoZW4gYWRkaW5nIGEgbmV3XG4gIC8vIGltYWdlcnkgbGF5ZXIuIGBHbG9iZVN1cmZhY2VUaWxlUHJvdmlkZXIuX29uTGF5ZXJBZGRlZGAgc2V0cyByZW5kZXJhYmxlIHRvXG4gIC8vIGZhbHNlIGZvciBhbGwgYWZmZWN0ZWQgdGlsZXMgdGhhdCBhcmUgbm90IGN1cnJlbnRseSBiZWluZyByZW5kZXJlZC5cbiAgaWYgKHdhc0FscmVhZHlSZW5kZXJhYmxlKSB7XG4gICAgdGlsZS5yZW5kZXJhYmxlID0gdHJ1ZTtcbiAgfVxufTtcblxuR2xvYmVTdXJmYWNlVGlsZS5wcm90b3R5cGUucHJvY2Vzc0ltYWdlcnkgPSBmdW5jdGlvbiAoXG4gIHRpbGUsXG4gIHRlcnJhaW5Qcm92aWRlcixcbiAgZnJhbWVTdGF0ZSxcbiAgc2tpcExvYWRpbmdcbikge1xuICB2YXIgc3VyZmFjZVRpbGUgPSB0aWxlLmRhdGE7XG4gIHZhciBpc1Vwc2FtcGxlZE9ubHkgPSB0aWxlLnVwc2FtcGxlZEZyb21QYXJlbnQ7XG4gIHZhciBpc0FueVRpbGVMb2FkZWQgPSBmYWxzZTtcbiAgdmFyIGlzRG9uZUxvYWRpbmcgPSB0cnVlO1xuXG4gIC8vIFRyYW5zaXRpb24gaW1hZ2VyeSBzdGF0ZXNcbiAgdmFyIHRpbGVJbWFnZXJ5Q29sbGVjdGlvbiA9IHN1cmZhY2VUaWxlLmltYWdlcnk7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IHRpbGVJbWFnZXJ5Q29sbGVjdGlvbi5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB0aWxlSW1hZ2VyeSA9IHRpbGVJbWFnZXJ5Q29sbGVjdGlvbltpXTtcbiAgICBpZiAoIWRlZmluZWQodGlsZUltYWdlcnkubG9hZGluZ0ltYWdlcnkpKSB7XG4gICAgICBpc1Vwc2FtcGxlZE9ubHkgPSBmYWxzZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0aWxlSW1hZ2VyeS5sb2FkaW5nSW1hZ2VyeS5zdGF0ZSA9PT0gSW1hZ2VyeVN0YXRlLlBMQUNFSE9MREVSKSB7XG4gICAgICB2YXIgaW1hZ2VyeUxheWVyID0gdGlsZUltYWdlcnkubG9hZGluZ0ltYWdlcnkuaW1hZ2VyeUxheWVyO1xuICAgICAgaWYgKGltYWdlcnlMYXllci5pbWFnZXJ5UHJvdmlkZXIucmVhZHkpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwbGFjZWhvbGRlciBhbmQgYWRkIHRoZSBhY3R1YWwgc2tlbGV0b25zIChpZiBhbnkpXG4gICAgICAgIC8vIGF0IHRoZSBzYW1lIHBvc2l0aW9uLiAgVGhlbiBjb250aW51ZSB0aGUgbG9vcCBhdCB0aGUgc2FtZSBpbmRleC5cbiAgICAgICAgdGlsZUltYWdlcnkuZnJlZVJlc291cmNlcygpO1xuICAgICAgICB0aWxlSW1hZ2VyeUNvbGxlY3Rpb24uc3BsaWNlKGksIDEpO1xuICAgICAgICBpbWFnZXJ5TGF5ZXIuX2NyZWF0ZVRpbGVJbWFnZXJ5U2tlbGV0b25zKHRpbGUsIHRlcnJhaW5Qcm92aWRlciwgaSk7XG4gICAgICAgIC0taTtcbiAgICAgICAgbGVuID0gdGlsZUltYWdlcnlDb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc1Vwc2FtcGxlZE9ubHkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdGhpc1RpbGVEb25lTG9hZGluZyA9IHRpbGVJbWFnZXJ5LnByb2Nlc3NTdGF0ZU1hY2hpbmUoXG4gICAgICB0aWxlLFxuICAgICAgZnJhbWVTdGF0ZSxcbiAgICAgIHNraXBMb2FkaW5nXG4gICAgKTtcbiAgICBpc0RvbmVMb2FkaW5nID0gaXNEb25lTG9hZGluZyAmJiB0aGlzVGlsZURvbmVMb2FkaW5nO1xuXG4gICAgLy8gVGhlIGltYWdlcnkgaXMgcmVuZGVyYWJsZSBhcyBzb29uIGFzIHdlIGhhdmUgYW55IHJlbmRlcmFibGUgaW1hZ2VyeSBmb3IgdGhpcyByZWdpb24uXG4gICAgaXNBbnlUaWxlTG9hZGVkID1cbiAgICAgIGlzQW55VGlsZUxvYWRlZCB8fFxuICAgICAgdGhpc1RpbGVEb25lTG9hZGluZyB8fFxuICAgICAgZGVmaW5lZCh0aWxlSW1hZ2VyeS5yZWFkeUltYWdlcnkpO1xuXG4gICAgaXNVcHNhbXBsZWRPbmx5ID1cbiAgICAgIGlzVXBzYW1wbGVkT25seSAmJlxuICAgICAgZGVmaW5lZCh0aWxlSW1hZ2VyeS5sb2FkaW5nSW1hZ2VyeSkgJiZcbiAgICAgICh0aWxlSW1hZ2VyeS5sb2FkaW5nSW1hZ2VyeS5zdGF0ZSA9PT0gSW1hZ2VyeVN0YXRlLkZBSUxFRCB8fFxuICAgICAgICB0aWxlSW1hZ2VyeS5sb2FkaW5nSW1hZ2VyeS5zdGF0ZSA9PT0gSW1hZ2VyeVN0YXRlLklOVkFMSUQpO1xuICB9XG5cbiAgdGlsZS51cHNhbXBsZWRGcm9tUGFyZW50ID0gaXNVcHNhbXBsZWRPbmx5O1xuXG4gIC8vIEFsbG93IHJlbmRlcmluZyBpZiBhbnkgYXZhaWxhYmxlIGxheWVycyBhcmUgbG9hZGVkXG4gIHRpbGUucmVuZGVyYWJsZSA9IHRpbGUucmVuZGVyYWJsZSAmJiAoaXNBbnlUaWxlTG9hZGVkIHx8IGlzRG9uZUxvYWRpbmcpO1xuXG4gIHJldHVybiBpc0RvbmVMb2FkaW5nO1xufTtcblxuZnVuY3Rpb24gdG9nZ2xlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyhcbiAgc3VyZmFjZVRpbGUsXG4gIGVuYWJsZWQsXG4gIGVsbGlwc29pZCxcbiAgZnJhbWVTdGF0ZVxuKSB7XG4gIHZhciByZW5kZXJlZE1lc2ggPSBzdXJmYWNlVGlsZS5yZW5kZXJlZE1lc2g7XG4gIHZhciB2ZXJ0ZXhCdWZmZXIgPSByZW5kZXJlZE1lc2gudmVydGljZXM7XG4gIHZhciBlbmNvZGluZyA9IHJlbmRlcmVkTWVzaC5lbmNvZGluZztcbiAgdmFyIHZlcnRleENvdW50ID0gdmVydGV4QnVmZmVyLmxlbmd0aCAvIGVuY29kaW5nLnN0cmlkZTtcblxuICAvLyBDYWxjdWxhdGUgdGhlIG5ldyBzdHJpZGUgYW5kIGdlbmVyYXRlIGEgbmV3IGJ1ZmZlclxuICAvLyBDbG9uZSB0aGUgb3RoZXIgZW5jb2RpbmcsIHRvZ2dsZSBnZW9kZXRpYyBzdXJmYWNlIG5vcm1hbHMsIHRoZW4gY2xvbmUgYWdhaW4gdG8gZ2V0IHVwZGF0ZWQgc3RyaWRlXG4gIHZhciBuZXdFbmNvZGluZyA9IFRlcnJhaW5FbmNvZGluZy5jbG9uZShlbmNvZGluZyk7XG4gIG5ld0VuY29kaW5nLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBlbmFibGVkO1xuICBuZXdFbmNvZGluZyA9IFRlcnJhaW5FbmNvZGluZy5jbG9uZShuZXdFbmNvZGluZyk7XG4gIHZhciBuZXdTdHJpZGUgPSBuZXdFbmNvZGluZy5zdHJpZGU7XG4gIHZhciBuZXdWZXJ0ZXhCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRleENvdW50ICogbmV3U3RyaWRlKTtcblxuICBpZiAoZW5hYmxlZCkge1xuICAgIGVuY29kaW5nLmFkZEdlb2RldGljU3VyZmFjZU5vcm1hbHMoXG4gICAgICB2ZXJ0ZXhCdWZmZXIsXG4gICAgICBuZXdWZXJ0ZXhCdWZmZXIsXG4gICAgICBlbGxpcHNvaWRcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGVuY29kaW5nLnJlbW92ZUdlb2RldGljU3VyZmFjZU5vcm1hbHModmVydGV4QnVmZmVyLCBuZXdWZXJ0ZXhCdWZmZXIpO1xuICB9XG5cbiAgcmVuZGVyZWRNZXNoLnZlcnRpY2VzID0gbmV3VmVydGV4QnVmZmVyO1xuICByZW5kZXJlZE1lc2guc3RyaWRlID0gbmV3U3RyaWRlO1xuXG4gIC8vIGRlbGV0ZSB0aGUgb2xkIHZlcnRleCBhcnJheSAod2hpY2ggZGVsZXRlcyB0aGUgdmVydGV4IGJ1ZmZlciBhdHRhY2hlZCB0byBpdCksIGFuZCBjcmVhdGUgYSBuZXcgdmVydGV4IGFycmF5IHdpdGggdGhlIG5ldyB2ZXJ0ZXggYnVmZmVyXG4gIHZhciBpc0ZpbGwgPSByZW5kZXJlZE1lc2ggIT09IHN1cmZhY2VUaWxlLm1lc2g7XG4gIGlmIChpc0ZpbGwpIHtcbiAgICBHbG9iZVN1cmZhY2VUaWxlLl9mcmVlVmVydGV4QXJyYXkoc3VyZmFjZVRpbGUuZmlsbC52ZXJ0ZXhBcnJheSk7XG4gICAgc3VyZmFjZVRpbGUuZmlsbC52ZXJ0ZXhBcnJheSA9IEdsb2JlU3VyZmFjZVRpbGUuX2NyZWF0ZVZlcnRleEFycmF5Rm9yTWVzaChcbiAgICAgIGZyYW1lU3RhdGUuY29udGV4dCxcbiAgICAgIHJlbmRlcmVkTWVzaFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgR2xvYmVTdXJmYWNlVGlsZS5fZnJlZVZlcnRleEFycmF5KHN1cmZhY2VUaWxlLnZlcnRleEFycmF5KTtcbiAgICBzdXJmYWNlVGlsZS52ZXJ0ZXhBcnJheSA9IEdsb2JlU3VyZmFjZVRpbGUuX2NyZWF0ZVZlcnRleEFycmF5Rm9yTWVzaChcbiAgICAgIGZyYW1lU3RhdGUuY29udGV4dCxcbiAgICAgIHJlbmRlcmVkTWVzaFxuICAgICk7XG4gIH1cbiAgR2xvYmVTdXJmYWNlVGlsZS5fZnJlZVZlcnRleEFycmF5KHN1cmZhY2VUaWxlLndpcmVmcmFtZVZlcnRleEFycmF5KTtcbiAgc3VyZmFjZVRpbGUud2lyZWZyYW1lVmVydGV4QXJyYXkgPSB1bmRlZmluZWQ7XG59XG5cbkdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlLmFkZEdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBmdW5jdGlvbiAoXG4gIGVsbGlwc29pZCxcbiAgZnJhbWVTdGF0ZVxuKSB7XG4gIHRvZ2dsZUdlb2RldGljU3VyZmFjZU5vcm1hbHModGhpcywgdHJ1ZSwgZWxsaXBzb2lkLCBmcmFtZVN0YXRlKTtcbn07XG5cbkdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlLnJlbW92ZUdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBmdW5jdGlvbiAoXG4gIGZyYW1lU3RhdGVcbikge1xuICB0b2dnbGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKHRoaXMsIGZhbHNlLCB1bmRlZmluZWQsIGZyYW1lU3RhdGUpO1xufTtcblxuR2xvYmVTdXJmYWNlVGlsZS5wcm90b3R5cGUudXBkYXRlRXhhZ2dlcmF0aW9uID0gZnVuY3Rpb24gKFxuICB0aWxlLFxuICBmcmFtZVN0YXRlLFxuICBxdWFkdHJlZVxuKSB7XG4gIHZhciBzdXJmYWNlVGlsZSA9IHRoaXM7XG4gIHZhciBtZXNoID0gc3VyZmFjZVRpbGUucmVuZGVyZWRNZXNoO1xuICBpZiAobWVzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ2hlY2sgdGhlIHRpbGUncyB0ZXJyYWluIGVuY29kaW5nIHRvIHNlZSBpZiBpdCBoYXMgYmVlbiBleGFnZ2VyYXRlZCB5ZXRcbiAgdmFyIGV4YWdnZXJhdGlvbiA9IGZyYW1lU3RhdGUudGVycmFpbkV4YWdnZXJhdGlvbjtcbiAgdmFyIGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0ID0gZnJhbWVTdGF0ZS50ZXJyYWluRXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQ7XG4gIHZhciBoYXNFeGFnZ2VyYXRpb25TY2FsZSA9IGV4YWdnZXJhdGlvbiAhPT0gMS4wO1xuXG4gIHZhciBlbmNvZGluZyA9IG1lc2guZW5jb2Rpbmc7XG4gIHZhciBlbmNvZGluZ0V4YWdnZXJhdGlvblNjYWxlQ2hhbmdlZCA9IGVuY29kaW5nLmV4YWdnZXJhdGlvbiAhPT0gZXhhZ2dlcmF0aW9uO1xuICB2YXIgZW5jb2RpbmdSZWxhdGl2ZUhlaWdodENoYW5nZWQgPVxuICAgIGVuY29kaW5nLmV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0ICE9PSBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodDtcblxuICBpZiAoZW5jb2RpbmdFeGFnZ2VyYXRpb25TY2FsZUNoYW5nZWQgfHwgZW5jb2RpbmdSZWxhdGl2ZUhlaWdodENoYW5nZWQpIHtcbiAgICAvLyBUdXJuaW5nIGV4YWdnZXJhdGlvbiBzY2FsZSBvbi9vZmYgcmVxdWlyZXMgYWRkaW5nIG9yIHJlbW92aW5nIGdlb2RldGljIHN1cmZhY2Ugbm9ybWFsc1xuICAgIC8vIFJlbGF0aXZlIGhlaWdodCBvbmx5IHRyYW5zbGF0ZXMsIHNvIGl0IGhhcyBubyBlZmZlY3Qgb24gbm9ybWFsc1xuICAgIGlmIChlbmNvZGluZ0V4YWdnZXJhdGlvblNjYWxlQ2hhbmdlZCkge1xuICAgICAgaWYgKGhhc0V4YWdnZXJhdGlvblNjYWxlICYmICFlbmNvZGluZy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7XG4gICAgICAgIHZhciBlbGxpcHNvaWQgPSB0aWxlLnRpbGluZ1NjaGVtZS5lbGxpcHNvaWQ7XG4gICAgICAgIHN1cmZhY2VUaWxlLmFkZEdlb2RldGljU3VyZmFjZU5vcm1hbHMoZWxsaXBzb2lkLCBmcmFtZVN0YXRlKTtcbiAgICAgIH0gZWxzZSBpZiAoIWhhc0V4YWdnZXJhdGlvblNjYWxlICYmIGVuY29kaW5nLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMpIHtcbiAgICAgICAgc3VyZmFjZVRpbGUucmVtb3ZlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyhmcmFtZVN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbmNvZGluZy5leGFnZ2VyYXRpb24gPSBleGFnZ2VyYXRpb247XG4gICAgZW5jb2RpbmcuZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQgPSBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodDtcblxuICAgIC8vIE5vdGlmeSB0aGUgcXVhZHRyZWUgdGhhdCB0aGlzIHRpbGUncyBoZWlnaHQgaGFzIGNoYW5nZWRcbiAgICBpZiAocXVhZHRyZWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcXVhZHRyZWUuX3RpbGVUb1VwZGF0ZUhlaWdodHMucHVzaCh0aWxlKTtcbiAgICAgIHZhciBjdXN0b21EYXRhID0gdGlsZS5jdXN0b21EYXRhO1xuICAgICAgdmFyIGN1c3RvbURhdGFMZW5ndGggPSBjdXN0b21EYXRhLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VzdG9tRGF0YUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIGxldmVsIHNvIHRoYXQgYSBoZWlnaHQgdXBkYXRlIGlzIHRyaWdnZXJlZFxuICAgICAgICB2YXIgZGF0YSA9IGN1c3RvbURhdGFbaV07XG4gICAgICAgIGRhdGEubGV2ZWwgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHByZXBhcmVOZXdUaWxlKHRpbGUsIHRlcnJhaW5Qcm92aWRlciwgaW1hZ2VyeUxheWVyQ29sbGVjdGlvbikge1xuICB2YXIgYXZhaWxhYmxlID0gdGVycmFpblByb3ZpZGVyLmdldFRpbGVEYXRhQXZhaWxhYmxlKFxuICAgIHRpbGUueCxcbiAgICB0aWxlLnksXG4gICAgdGlsZS5sZXZlbFxuICApO1xuXG4gIGlmICghZGVmaW5lZChhdmFpbGFibGUpICYmIGRlZmluZWQodGlsZS5wYXJlbnQpKSB7XG4gICAgLy8gUHJvdmlkZXIgZG9lc24ndCBrbm93IGlmIHRoaXMgdGlsZSBpcyBhdmFpbGFibGUuIERvZXMgdGhlIHBhcmVudCB0aWxlIGtub3c/XG4gICAgdmFyIHBhcmVudCA9IHRpbGUucGFyZW50O1xuICAgIHZhciBwYXJlbnRTdXJmYWNlVGlsZSA9IHBhcmVudC5kYXRhO1xuICAgIGlmIChkZWZpbmVkKHBhcmVudFN1cmZhY2VUaWxlKSAmJiBkZWZpbmVkKHBhcmVudFN1cmZhY2VUaWxlLnRlcnJhaW5EYXRhKSkge1xuICAgICAgYXZhaWxhYmxlID0gcGFyZW50U3VyZmFjZVRpbGUudGVycmFpbkRhdGEuaXNDaGlsZEF2YWlsYWJsZShcbiAgICAgICAgcGFyZW50LngsXG4gICAgICAgIHBhcmVudC55LFxuICAgICAgICB0aWxlLngsXG4gICAgICAgIHRpbGUueVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXZhaWxhYmxlID09PSBmYWxzZSkge1xuICAgIC8vIFRoaXMgdGlsZSBpcyBub3QgYXZhaWxhYmxlLCBzbyBtYXJrIGl0IGZhaWxlZCBzbyB3ZSBzdGFydCB1cHNhbXBsaW5nIHJpZ2h0IGF3YXkuXG4gICAgdGlsZS5kYXRhLnRlcnJhaW5TdGF0ZSA9IFRlcnJhaW5TdGF0ZS5GQUlMRUQ7XG4gIH1cblxuICAvLyBNYXAgaW1hZ2VyeSB0aWxlcyB0byB0aGlzIHRlcnJhaW4gdGlsZVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW1hZ2VyeUxheWVyQ29sbGVjdGlvbi5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBsYXllciA9IGltYWdlcnlMYXllckNvbGxlY3Rpb24uZ2V0KGkpO1xuICAgIGlmIChsYXllci5zaG93KSB7XG4gICAgICBsYXllci5fY3JlYXRlVGlsZUltYWdlcnlTa2VsZXRvbnModGlsZSwgdGVycmFpblByb3ZpZGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1RlcnJhaW5TdGF0ZU1hY2hpbmUoXG4gIHRpbGUsXG4gIGZyYW1lU3RhdGUsXG4gIHRlcnJhaW5Qcm92aWRlcixcbiAgaW1hZ2VyeUxheWVyQ29sbGVjdGlvbixcbiAgcXVhZHRyZWUsXG4gIHZlcnRleEFycmF5c1RvRGVzdHJveVxuKSB7XG4gIHZhciBzdXJmYWNlVGlsZSA9IHRpbGUuZGF0YTtcblxuICAvLyBJZiB0aGlzIHRpbGUgaXMgRkFJTEVELCB3ZSdsbCBuZWVkIHRvIHVwc2FtcGxlIGZyb20gdGhlIHBhcmVudC4gSWYgdGhlIHBhcmVudCBpc24ndFxuICAvLyByZWFkeSBmb3IgdGhhdCwgbGV0J3MgcHVzaCBpdCBhbG9uZy5cbiAgdmFyIHBhcmVudCA9IHRpbGUucGFyZW50O1xuICBpZiAoXG4gICAgc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID09PSBUZXJyYWluU3RhdGUuRkFJTEVEICYmXG4gICAgcGFyZW50ICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdmFyIHBhcmVudFJlYWR5ID1cbiAgICAgIHBhcmVudC5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHBhcmVudC5kYXRhLnRlcnJhaW5EYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHBhcmVudC5kYXRhLnRlcnJhaW5EYXRhLmNhblVwc2FtcGxlICE9PSBmYWxzZTtcbiAgICBpZiAoIXBhcmVudFJlYWR5KSB7XG4gICAgICBHbG9iZVN1cmZhY2VUaWxlLnByb2Nlc3NTdGF0ZU1hY2hpbmUoXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgZnJhbWVTdGF0ZSxcbiAgICAgICAgdGVycmFpblByb3ZpZGVyLFxuICAgICAgICBpbWFnZXJ5TGF5ZXJDb2xsZWN0aW9uLFxuICAgICAgICBxdWFkdHJlZSxcbiAgICAgICAgdmVydGV4QXJyYXlzVG9EZXN0cm95LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdXJmYWNlVGlsZS50ZXJyYWluU3RhdGUgPT09IFRlcnJhaW5TdGF0ZS5GQUlMRUQpIHtcbiAgICB1cHNhbXBsZShcbiAgICAgIHN1cmZhY2VUaWxlLFxuICAgICAgdGlsZSxcbiAgICAgIGZyYW1lU3RhdGUsXG4gICAgICB0ZXJyYWluUHJvdmlkZXIsXG4gICAgICB0aWxlLngsXG4gICAgICB0aWxlLnksXG4gICAgICB0aWxlLmxldmVsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChzdXJmYWNlVGlsZS50ZXJyYWluU3RhdGUgPT09IFRlcnJhaW5TdGF0ZS5VTkxPQURFRCkge1xuICAgIHJlcXVlc3RUaWxlR2VvbWV0cnkoXG4gICAgICBzdXJmYWNlVGlsZSxcbiAgICAgIHRlcnJhaW5Qcm92aWRlcixcbiAgICAgIHRpbGUueCxcbiAgICAgIHRpbGUueSxcbiAgICAgIHRpbGUubGV2ZWxcbiAgICApO1xuICB9XG5cbiAgaWYgKHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9PT0gVGVycmFpblN0YXRlLlJFQ0VJVkVEKSB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAgc3VyZmFjZVRpbGUsXG4gICAgICBmcmFtZVN0YXRlLFxuICAgICAgdGVycmFpblByb3ZpZGVyLFxuICAgICAgdGlsZS54LFxuICAgICAgdGlsZS55LFxuICAgICAgdGlsZS5sZXZlbFxuICAgICk7XG4gIH1cblxuICBpZiAoc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID09PSBUZXJyYWluU3RhdGUuVFJBTlNGT1JNRUQpIHtcbiAgICBjcmVhdGVSZXNvdXJjZXMoXG4gICAgICBzdXJmYWNlVGlsZSxcbiAgICAgIGZyYW1lU3RhdGUuY29udGV4dCxcbiAgICAgIHRlcnJhaW5Qcm92aWRlcixcbiAgICAgIHRpbGUueCxcbiAgICAgIHRpbGUueSxcbiAgICAgIHRpbGUubGV2ZWwsXG4gICAgICB2ZXJ0ZXhBcnJheXNUb0Rlc3Ryb3lcbiAgICApO1xuXG4gICAgLy8gVXBkYXRlIHRoZSB0aWxlJ3MgZXhhZ2dlcmF0aW9uIGluIGNhc2UgdGhlIGdsb2JlJ3MgZXhhZ2dlcmF0aW9uIGNoYW5nZWQgd2hpbGUgdGhlIHRpbGUgd2FzIGJlaW5nIHByb2Nlc3NlZFxuICAgIHN1cmZhY2VUaWxlLnVwZGF0ZUV4YWdnZXJhdGlvbih0aWxlLCBmcmFtZVN0YXRlLCBxdWFkdHJlZSk7XG4gIH1cblxuICBpZiAoXG4gICAgc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID49IFRlcnJhaW5TdGF0ZS5SRUNFSVZFRCAmJlxuICAgIHN1cmZhY2VUaWxlLndhdGVyTWFza1RleHR1cmUgPT09IHVuZGVmaW5lZCAmJlxuICAgIHRlcnJhaW5Qcm92aWRlci5oYXNXYXRlck1hc2tcbiAgKSB7XG4gICAgdmFyIHRlcnJhaW5EYXRhID0gc3VyZmFjZVRpbGUudGVycmFpbkRhdGE7XG4gICAgaWYgKHRlcnJhaW5EYXRhLndhdGVyTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjcmVhdGVXYXRlck1hc2tUZXh0dXJlSWZOZWVkZWQoZnJhbWVTdGF0ZS5jb250ZXh0LCBzdXJmYWNlVGlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzb3VyY2VUaWxlID0gc3VyZmFjZVRpbGUuX2ZpbmRBbmNlc3RvclRpbGVXaXRoVGVycmFpbkRhdGEodGlsZSk7XG4gICAgICBpZiAoZGVmaW5lZChzb3VyY2VUaWxlKSAmJiBkZWZpbmVkKHNvdXJjZVRpbGUuZGF0YS53YXRlck1hc2tUZXh0dXJlKSkge1xuICAgICAgICBzdXJmYWNlVGlsZS53YXRlck1hc2tUZXh0dXJlID0gc291cmNlVGlsZS5kYXRhLndhdGVyTWFza1RleHR1cmU7XG4gICAgICAgICsrc3VyZmFjZVRpbGUud2F0ZXJNYXNrVGV4dHVyZS5yZWZlcmVuY2VDb3VudDtcbiAgICAgICAgc3VyZmFjZVRpbGUuX2NvbXB1dGVXYXRlck1hc2tUcmFuc2xhdGlvbkFuZFNjYWxlKFxuICAgICAgICAgIHRpbGUsXG4gICAgICAgICAgc291cmNlVGlsZSxcbiAgICAgICAgICBzdXJmYWNlVGlsZS53YXRlck1hc2tUcmFuc2xhdGlvbkFuZFNjYWxlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwc2FtcGxlKHN1cmZhY2VUaWxlLCB0aWxlLCBmcmFtZVN0YXRlLCB0ZXJyYWluUHJvdmlkZXIsIHgsIHksIGxldmVsKSB7XG4gIHZhciBwYXJlbnQgPSB0aWxlLnBhcmVudDtcbiAgaWYgKCFwYXJlbnQpIHtcbiAgICAvLyBUcnlpbmcgdG8gdXBzYW1wbGUgZnJvbSBhIHJvb3QgdGlsZS4gTm8gY2FuIGRvLiBUaGlzIHRpbGUgaXMgYSBmYWlsdXJlLlxuICAgIHRpbGUuc3RhdGUgPSBRdWFkdHJlZVRpbGVMb2FkU3RhdGUuRkFJTEVEO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzb3VyY2VEYXRhID0gcGFyZW50LmRhdGEudGVycmFpbkRhdGE7XG4gIHZhciBzb3VyY2VYID0gcGFyZW50Lng7XG4gIHZhciBzb3VyY2VZID0gcGFyZW50Lnk7XG4gIHZhciBzb3VyY2VMZXZlbCA9IHBhcmVudC5sZXZlbDtcblxuICBpZiAoIWRlZmluZWQoc291cmNlRGF0YSkpIHtcbiAgICAvLyBQYXJlbnQgaXMgbm90IGF2YWlsYWJsZSwgc28gd2UgY2FuJ3QgdXBzYW1wbGUgdGhpcyB0aWxlIHlldC5cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdGVycmFpbkRhdGFQcm9taXNlID0gc291cmNlRGF0YS51cHNhbXBsZShcbiAgICB0ZXJyYWluUHJvdmlkZXIudGlsaW5nU2NoZW1lLFxuICAgIHNvdXJjZVgsXG4gICAgc291cmNlWSxcbiAgICBzb3VyY2VMZXZlbCxcbiAgICB4LFxuICAgIHksXG4gICAgbGV2ZWxcbiAgKTtcbiAgaWYgKCFkZWZpbmVkKHRlcnJhaW5EYXRhUHJvbWlzZSkpIHtcbiAgICAvLyBUaGUgdXBzYW1wbGUgcmVxdWVzdCBoYXMgYmVlbiBkZWZlcnJlZCAtIHRyeSBhZ2FpbiBsYXRlci5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdXJmYWNlVGlsZS50ZXJyYWluU3RhdGUgPSBUZXJyYWluU3RhdGUuUkVDRUlWSU5HO1xuXG4gIHdoZW4oXG4gICAgdGVycmFpbkRhdGFQcm9taXNlLFxuICAgIGZ1bmN0aW9uICh0ZXJyYWluRGF0YSkge1xuICAgICAgc3VyZmFjZVRpbGUudGVycmFpbkRhdGEgPSB0ZXJyYWluRGF0YTtcbiAgICAgIHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9IFRlcnJhaW5TdGF0ZS5SRUNFSVZFRDtcbiAgICB9LFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9IFRlcnJhaW5TdGF0ZS5GQUlMRUQ7XG4gICAgfVxuICApO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0VGlsZUdlb21ldHJ5KHN1cmZhY2VUaWxlLCB0ZXJyYWluUHJvdmlkZXIsIHgsIHksIGxldmVsKSB7XG4gIGZ1bmN0aW9uIHN1Y2Nlc3ModGVycmFpbkRhdGEpIHtcbiAgICBzdXJmYWNlVGlsZS50ZXJyYWluRGF0YSA9IHRlcnJhaW5EYXRhO1xuICAgIHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9IFRlcnJhaW5TdGF0ZS5SRUNFSVZFRDtcbiAgICBzdXJmYWNlVGlsZS5yZXF1ZXN0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmFpbHVyZShlcnJvcikge1xuICAgIGlmIChzdXJmYWNlVGlsZS5yZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGUuQ0FOQ0VMTEVEKSB7XG4gICAgICAvLyBDYW5jZWxsZWQgZHVlIHRvIGxvdyBwcmlvcml0eSAtIHRyeSBhZ2FpbiBsYXRlci5cbiAgICAgIHN1cmZhY2VUaWxlLnRlcnJhaW5EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID0gVGVycmFpblN0YXRlLlVOTE9BREVEO1xuICAgICAgc3VyZmFjZVRpbGUucmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsbHkgYXNzdW1lIGZhaWx1cmUuICBoYW5kbGVFcnJvciBtYXkgcmV0cnksIGluIHdoaWNoIGNhc2UgdGhlIHN0YXRlIHdpbGxcbiAgICAvLyBjaGFuZ2UgdG8gUkVDRUlWSU5HIG9yIFVOTE9BREVELlxuICAgIHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9IFRlcnJhaW5TdGF0ZS5GQUlMRUQ7XG4gICAgc3VyZmFjZVRpbGUucmVxdWVzdCA9IHVuZGVmaW5lZDtcblxuICAgIHZhciBtZXNzYWdlID1cbiAgICAgIFwiRmFpbGVkIHRvIG9idGFpbiB0ZXJyYWluIHRpbGUgWDogXCIgK1xuICAgICAgeCArXG4gICAgICBcIiBZOiBcIiArXG4gICAgICB5ICtcbiAgICAgIFwiIExldmVsOiBcIiArXG4gICAgICBsZXZlbCArXG4gICAgICAnLiBFcnJvciBtZXNzYWdlOiBcIicgK1xuICAgICAgZXJyb3IgK1xuICAgICAgJ1wiJztcbiAgICB0ZXJyYWluUHJvdmlkZXIuX3JlcXVlc3RFcnJvciA9IFRpbGVQcm92aWRlckVycm9yLmhhbmRsZUVycm9yKFxuICAgICAgdGVycmFpblByb3ZpZGVyLl9yZXF1ZXN0RXJyb3IsXG4gICAgICB0ZXJyYWluUHJvdmlkZXIsXG4gICAgICB0ZXJyYWluUHJvdmlkZXIuZXJyb3JFdmVudCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGxldmVsLFxuICAgICAgZG9SZXF1ZXN0XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvUmVxdWVzdCgpIHtcbiAgICAvLyBSZXF1ZXN0IHRoZSB0ZXJyYWluIGZyb20gdGhlIHRlcnJhaW4gcHJvdmlkZXIuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh7XG4gICAgICB0aHJvdHRsZTogZmFsc2UsXG4gICAgICB0aHJvdHRsZUJ5U2VydmVyOiB0cnVlLFxuICAgICAgdHlwZTogUmVxdWVzdFR5cGUuVEVSUkFJTixcbiAgICB9KTtcbiAgICBzdXJmYWNlVGlsZS5yZXF1ZXN0ID0gcmVxdWVzdDtcblxuICAgIHZhciByZXF1ZXN0UHJvbWlzZSA9IHRlcnJhaW5Qcm92aWRlci5yZXF1ZXN0VGlsZUdlb21ldHJ5KFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBsZXZlbCxcbiAgICAgIHJlcXVlc3RcbiAgICApO1xuXG4gICAgLy8gSWYgdGhlIHJlcXVlc3QgbWV0aG9kIHJldHVybnMgdW5kZWZpbmVkIChpbnN0ZWFkIG9mIGEgcHJvbWlzZSksIHRoZSByZXF1ZXN0XG4gICAgLy8gaGFzIGJlZW4gZGVmZXJyZWQuXG4gICAgaWYgKGRlZmluZWQocmVxdWVzdFByb21pc2UpKSB7XG4gICAgICBzdXJmYWNlVGlsZS50ZXJyYWluU3RhdGUgPSBUZXJyYWluU3RhdGUuUkVDRUlWSU5HO1xuICAgICAgd2hlbihyZXF1ZXN0UHJvbWlzZSwgc3VjY2VzcywgZmFpbHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZmVycmVkIC0gdHJ5IGFnYWluIGxhdGVyLlxuICAgICAgc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID0gVGVycmFpblN0YXRlLlVOTE9BREVEO1xuICAgICAgc3VyZmFjZVRpbGUucmVxdWVzdCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBkb1JlcXVlc3QoKTtcbn1cblxudmFyIHNjcmF0Y2hDcmVhdGVNZXNoT3B0aW9ucyA9IHtcbiAgdGlsaW5nU2NoZW1lOiB1bmRlZmluZWQsXG4gIHg6IDAsXG4gIHk6IDAsXG4gIGxldmVsOiAwLFxuICBleGFnZ2VyYXRpb246IDEuMCxcbiAgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQ6IDAuMCxcbiAgdGhyb3R0bGU6IHRydWUsXG59O1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0oc3VyZmFjZVRpbGUsIGZyYW1lU3RhdGUsIHRlcnJhaW5Qcm92aWRlciwgeCwgeSwgbGV2ZWwpIHtcbiAgdmFyIHRpbGluZ1NjaGVtZSA9IHRlcnJhaW5Qcm92aWRlci50aWxpbmdTY2hlbWU7XG5cbiAgdmFyIGNyZWF0ZU1lc2hPcHRpb25zID0gc2NyYXRjaENyZWF0ZU1lc2hPcHRpb25zO1xuICBjcmVhdGVNZXNoT3B0aW9ucy50aWxpbmdTY2hlbWUgPSB0aWxpbmdTY2hlbWU7XG4gIGNyZWF0ZU1lc2hPcHRpb25zLnggPSB4O1xuICBjcmVhdGVNZXNoT3B0aW9ucy55ID0geTtcbiAgY3JlYXRlTWVzaE9wdGlvbnMubGV2ZWwgPSBsZXZlbDtcbiAgY3JlYXRlTWVzaE9wdGlvbnMuZXhhZ2dlcmF0aW9uID0gZnJhbWVTdGF0ZS50ZXJyYWluRXhhZ2dlcmF0aW9uO1xuICBjcmVhdGVNZXNoT3B0aW9ucy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCA9XG4gICAgZnJhbWVTdGF0ZS50ZXJyYWluRXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQ7XG4gIGNyZWF0ZU1lc2hPcHRpb25zLnRocm90dGxlID0gdHJ1ZTtcblxuICB2YXIgdGVycmFpbkRhdGEgPSBzdXJmYWNlVGlsZS50ZXJyYWluRGF0YTtcbiAgdmFyIG1lc2hQcm9taXNlID0gdGVycmFpbkRhdGEuY3JlYXRlTWVzaChjcmVhdGVNZXNoT3B0aW9ucyk7XG5cbiAgaWYgKCFkZWZpbmVkKG1lc2hQcm9taXNlKSkge1xuICAgIC8vIFBvc3Rwb25lZC5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdXJmYWNlVGlsZS50ZXJyYWluU3RhdGUgPSBUZXJyYWluU3RhdGUuVFJBTlNGT1JNSU5HO1xuXG4gIHdoZW4oXG4gICAgbWVzaFByb21pc2UsXG4gICAgZnVuY3Rpb24gKG1lc2gpIHtcbiAgICAgIHN1cmZhY2VUaWxlLm1lc2ggPSBtZXNoO1xuICAgICAgc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID0gVGVycmFpblN0YXRlLlRSQU5TRk9STUVEO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgc3VyZmFjZVRpbGUudGVycmFpblN0YXRlID0gVGVycmFpblN0YXRlLkZBSUxFRDtcbiAgICB9XG4gICk7XG59XG5cbkdsb2JlU3VyZmFjZVRpbGUuX2NyZWF0ZVZlcnRleEFycmF5Rm9yTWVzaCA9IGZ1bmN0aW9uIChjb250ZXh0LCBtZXNoKSB7XG4gIHZhciB0eXBlZEFycmF5ID0gbWVzaC52ZXJ0aWNlcztcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5jcmVhdGVWZXJ0ZXhCdWZmZXIoe1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgdHlwZWRBcnJheTogdHlwZWRBcnJheSxcbiAgICB1c2FnZTogQnVmZmVyVXNhZ2UuU1RBVElDX0RSQVcsXG4gIH0pO1xuICB2YXIgYXR0cmlidXRlcyA9IG1lc2guZW5jb2RpbmcuZ2V0QXR0cmlidXRlcyhidWZmZXIpO1xuXG4gIHZhciBpbmRleEJ1ZmZlcnMgPSBtZXNoLmluZGljZXMuaW5kZXhCdWZmZXJzIHx8IHt9O1xuICB2YXIgaW5kZXhCdWZmZXIgPSBpbmRleEJ1ZmZlcnNbY29udGV4dC5pZF07XG4gIGlmICghZGVmaW5lZChpbmRleEJ1ZmZlcikgfHwgaW5kZXhCdWZmZXIuaXNEZXN0cm95ZWQoKSkge1xuICAgIHZhciBpbmRpY2VzID0gbWVzaC5pbmRpY2VzO1xuICAgIGluZGV4QnVmZmVyID0gQnVmZmVyLmNyZWF0ZUluZGV4QnVmZmVyKHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICB0eXBlZEFycmF5OiBpbmRpY2VzLFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLlNUQVRJQ19EUkFXLFxuICAgICAgaW5kZXhEYXRhdHlwZTogSW5kZXhEYXRhdHlwZS5mcm9tU2l6ZUluQnl0ZXMoaW5kaWNlcy5CWVRFU19QRVJfRUxFTUVOVCksXG4gICAgfSk7XG4gICAgaW5kZXhCdWZmZXIudmVydGV4QXJyYXlEZXN0cm95YWJsZSA9IGZhbHNlO1xuICAgIGluZGV4QnVmZmVyLnJlZmVyZW5jZUNvdW50ID0gMTtcbiAgICBpbmRleEJ1ZmZlcnNbY29udGV4dC5pZF0gPSBpbmRleEJ1ZmZlcjtcbiAgICBtZXNoLmluZGljZXMuaW5kZXhCdWZmZXJzID0gaW5kZXhCdWZmZXJzO1xuICB9IGVsc2Uge1xuICAgICsraW5kZXhCdWZmZXIucmVmZXJlbmNlQ291bnQ7XG4gIH1cblxuICByZXR1cm4gbmV3IFZlcnRleEFycmF5KHtcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgaW5kZXhCdWZmZXI6IGluZGV4QnVmZmVyLFxuICB9KTtcbn07XG5cbkdsb2JlU3VyZmFjZVRpbGUuX2ZyZWVWZXJ0ZXhBcnJheSA9IGZ1bmN0aW9uICh2ZXJ0ZXhBcnJheSkge1xuICBpZiAoZGVmaW5lZCh2ZXJ0ZXhBcnJheSkpIHtcbiAgICB2YXIgaW5kZXhCdWZmZXIgPSB2ZXJ0ZXhBcnJheS5pbmRleEJ1ZmZlcjtcblxuICAgIGlmICghdmVydGV4QXJyYXkuaXNEZXN0cm95ZWQoKSkge1xuICAgICAgdmVydGV4QXJyYXkuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGRlZmluZWQoaW5kZXhCdWZmZXIpICYmXG4gICAgICAhaW5kZXhCdWZmZXIuaXNEZXN0cm95ZWQoKSAmJlxuICAgICAgZGVmaW5lZChpbmRleEJ1ZmZlci5yZWZlcmVuY2VDb3VudClcbiAgICApIHtcbiAgICAgIC0taW5kZXhCdWZmZXIucmVmZXJlbmNlQ291bnQ7XG4gICAgICBpZiAoaW5kZXhCdWZmZXIucmVmZXJlbmNlQ291bnQgPT09IDApIHtcbiAgICAgICAgaW5kZXhCdWZmZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlUmVzb3VyY2VzKFxuICBzdXJmYWNlVGlsZSxcbiAgY29udGV4dCxcbiAgdGVycmFpblByb3ZpZGVyLFxuICB4LFxuICB5LFxuICBsZXZlbCxcbiAgdmVydGV4QXJyYXlzVG9EZXN0cm95XG4pIHtcbiAgc3VyZmFjZVRpbGUudmVydGV4QXJyYXkgPSBHbG9iZVN1cmZhY2VUaWxlLl9jcmVhdGVWZXJ0ZXhBcnJheUZvck1lc2goXG4gICAgY29udGV4dCxcbiAgICBzdXJmYWNlVGlsZS5tZXNoXG4gICk7XG4gIHN1cmZhY2VUaWxlLnRlcnJhaW5TdGF0ZSA9IFRlcnJhaW5TdGF0ZS5SRUFEWTtcbiAgc3VyZmFjZVRpbGUuZmlsbCA9XG4gICAgc3VyZmFjZVRpbGUuZmlsbCAmJiBzdXJmYWNlVGlsZS5maWxsLmRlc3Ryb3kodmVydGV4QXJyYXlzVG9EZXN0cm95KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dFdhdGVyTWFza0RhdGEoY29udGV4dCkge1xuICB2YXIgZGF0YSA9IGNvbnRleHQuY2FjaGUudGlsZV93YXRlck1hc2tEYXRhO1xuXG4gIGlmICghZGVmaW5lZChkYXRhKSkge1xuICAgIHZhciBhbGxXYXRlclRleHR1cmUgPSBUZXh0dXJlLmNyZWF0ZSh7XG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgcGl4ZWxGb3JtYXQ6IFBpeGVsRm9ybWF0LkxVTUlOQU5DRSxcbiAgICAgIHBpeGVsRGF0YXR5cGU6IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfQllURSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICBhcnJheUJ1ZmZlclZpZXc6IG5ldyBVaW50OEFycmF5KFsyNTVdKSxcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgYWxsV2F0ZXJUZXh0dXJlLnJlZmVyZW5jZUNvdW50ID0gMTtcblxuICAgIHZhciBzYW1wbGVyID0gbmV3IFNhbXBsZXIoe1xuICAgICAgd3JhcFM6IFRleHR1cmVXcmFwLkNMQU1QX1RPX0VER0UsXG4gICAgICB3cmFwVDogVGV4dHVyZVdyYXAuQ0xBTVBfVE9fRURHRSxcbiAgICAgIG1pbmlmaWNhdGlvbkZpbHRlcjogVGV4dHVyZU1pbmlmaWNhdGlvbkZpbHRlci5MSU5FQVIsXG4gICAgICBtYWduaWZpY2F0aW9uRmlsdGVyOiBUZXh0dXJlTWFnbmlmaWNhdGlvbkZpbHRlci5MSU5FQVIsXG4gICAgfSk7XG5cbiAgICBkYXRhID0ge1xuICAgICAgYWxsV2F0ZXJUZXh0dXJlOiBhbGxXYXRlclRleHR1cmUsXG4gICAgICBzYW1wbGVyOiBzYW1wbGVyLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFsbFdhdGVyVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb250ZXh0LmNhY2hlLnRpbGVfd2F0ZXJNYXNrRGF0YSA9IGRhdGE7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0ZXJNYXNrVGV4dHVyZUlmTmVlZGVkKGNvbnRleHQsIHN1cmZhY2VUaWxlKSB7XG4gIHZhciB3YXRlck1hc2sgPSBzdXJmYWNlVGlsZS50ZXJyYWluRGF0YS53YXRlck1hc2s7XG4gIHZhciB3YXRlck1hc2tEYXRhID0gZ2V0Q29udGV4dFdhdGVyTWFza0RhdGEoY29udGV4dCk7XG4gIHZhciB0ZXh0dXJlO1xuXG4gIHZhciB3YXRlck1hc2tMZW5ndGggPSB3YXRlck1hc2subGVuZ3RoO1xuICBpZiAod2F0ZXJNYXNrTGVuZ3RoID09PSAxKSB7XG4gICAgLy8gTGVuZ3RoIDEgbWVhbnMgdGhlIHRpbGUgaXMgZW50aXJlbHkgbGFuZCBvciBlbnRpcmVseSB3YXRlci5cbiAgICAvLyBBIHZhbHVlIG9mIDAgaW5kaWNhdGVzIGVudGlyZWx5IGxhbmQsIGEgdmFsdWUgb2YgMSBpbmRpY2F0ZXMgZW50aXJlbHkgd2F0ZXIuXG4gICAgaWYgKHdhdGVyTWFza1swXSAhPT0gMCkge1xuICAgICAgdGV4dHVyZSA9IHdhdGVyTWFza0RhdGEuYWxsV2F0ZXJUZXh0dXJlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMZWF2ZSB0aGUgdGV4dHVyZSB1bmRlZmluZWQgaWYgdGhlIHRpbGUgaXMgZW50aXJlbHkgbGFuZC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRleHR1cmVTaXplID0gTWF0aC5zcXJ0KHdhdGVyTWFza0xlbmd0aCk7XG4gICAgdGV4dHVyZSA9IFRleHR1cmUuY3JlYXRlKHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBwaXhlbEZvcm1hdDogUGl4ZWxGb3JtYXQuTFVNSU5BTkNFLFxuICAgICAgcGl4ZWxEYXRhdHlwZTogUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9CWVRFLFxuICAgICAgc291cmNlOiB7XG4gICAgICAgIHdpZHRoOiB0ZXh0dXJlU2l6ZSxcbiAgICAgICAgaGVpZ2h0OiB0ZXh0dXJlU2l6ZSxcbiAgICAgICAgYXJyYXlCdWZmZXJWaWV3OiB3YXRlck1hc2ssXG4gICAgICB9LFxuICAgICAgc2FtcGxlcjogd2F0ZXJNYXNrRGF0YS5zYW1wbGVyLFxuICAgICAgZmxpcFk6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgdGV4dHVyZS5yZWZlcmVuY2VDb3VudCA9IDA7XG4gIH1cblxuICArK3RleHR1cmUucmVmZXJlbmNlQ291bnQ7XG4gIHN1cmZhY2VUaWxlLndhdGVyTWFza1RleHR1cmUgPSB0ZXh0dXJlO1xuXG4gIENhcnRlc2lhbjQuZnJvbUVsZW1lbnRzKFxuICAgIDAuMCxcbiAgICAwLjAsXG4gICAgMS4wLFxuICAgIDEuMCxcbiAgICBzdXJmYWNlVGlsZS53YXRlck1hc2tUcmFuc2xhdGlvbkFuZFNjYWxlXG4gICk7XG59XG5cbkdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlLl9maW5kQW5jZXN0b3JUaWxlV2l0aFRlcnJhaW5EYXRhID0gZnVuY3Rpb24gKHRpbGUpIHtcbiAgdmFyIHNvdXJjZVRpbGUgPSB0aWxlLnBhcmVudDtcblxuICB3aGlsZSAoXG4gICAgZGVmaW5lZChzb3VyY2VUaWxlKSAmJlxuICAgICghZGVmaW5lZChzb3VyY2VUaWxlLmRhdGEpIHx8XG4gICAgICAhZGVmaW5lZChzb3VyY2VUaWxlLmRhdGEudGVycmFpbkRhdGEpIHx8XG4gICAgICBzb3VyY2VUaWxlLmRhdGEudGVycmFpbkRhdGEud2FzQ3JlYXRlZEJ5VXBzYW1wbGluZygpKVxuICApIHtcbiAgICBzb3VyY2VUaWxlID0gc291cmNlVGlsZS5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gc291cmNlVGlsZTtcbn07XG5cbkdsb2JlU3VyZmFjZVRpbGUucHJvdG90eXBlLl9jb21wdXRlV2F0ZXJNYXNrVHJhbnNsYXRpb25BbmRTY2FsZSA9IGZ1bmN0aW9uIChcbiAgdGlsZSxcbiAgc291cmNlVGlsZSxcbiAgcmVzdWx0XG4pIHtcbiAgdmFyIHNvdXJjZVRpbGVSZWN0YW5nbGUgPSBzb3VyY2VUaWxlLnJlY3RhbmdsZTtcbiAgdmFyIHRpbGVSZWN0YW5nbGUgPSB0aWxlLnJlY3RhbmdsZTtcbiAgdmFyIHRpbGVXaWR0aCA9IHRpbGVSZWN0YW5nbGUud2lkdGg7XG4gIHZhciB0aWxlSGVpZ2h0ID0gdGlsZVJlY3RhbmdsZS5oZWlnaHQ7XG5cbiAgdmFyIHNjYWxlWCA9IHRpbGVXaWR0aCAvIHNvdXJjZVRpbGVSZWN0YW5nbGUud2lkdGg7XG4gIHZhciBzY2FsZVkgPSB0aWxlSGVpZ2h0IC8gc291cmNlVGlsZVJlY3RhbmdsZS5oZWlnaHQ7XG4gIHJlc3VsdC54ID1cbiAgICAoc2NhbGVYICogKHRpbGVSZWN0YW5nbGUud2VzdCAtIHNvdXJjZVRpbGVSZWN0YW5nbGUud2VzdCkpIC8gdGlsZVdpZHRoO1xuICByZXN1bHQueSA9XG4gICAgKHNjYWxlWSAqICh0aWxlUmVjdGFuZ2xlLnNvdXRoIC0gc291cmNlVGlsZVJlY3RhbmdsZS5zb3V0aCkpIC8gdGlsZUhlaWdodDtcbiAgcmVzdWx0LnogPSBzY2FsZVg7XG4gIHJlc3VsdC53ID0gc2NhbGVZO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgR2xvYmVTdXJmYWNlVGlsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14648\n')},32110:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_BoxOutlineGeometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27495);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(51688);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(83856);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(59947);\n/* harmony import */ var _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(92062);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8182);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(14459);\n/* harmony import */ var _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(26865);\n/* harmony import */ var _Core_GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(57552);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(22832);\n/* harmony import */ var _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(84935);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(72248);\n/* harmony import */ var _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(15720);\n/* harmony import */ var _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(25405);\n/* harmony import */ var _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(91473);\n/* harmony import */ var _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(97264);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(96190);\n/* harmony import */ var _Core_SphereOutlineGeometry_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(38779);\n/* harmony import */ var _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(78257);\n/* harmony import */ var _Core_TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(735);\n/* harmony import */ var _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(54933);\n/* harmony import */ var _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(79962);\n/* harmony import */ var _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(99095);\n/* harmony import */ var _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(58597);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(60072);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(18192);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(13633);\n/* harmony import */ var _ClippingPlaneCollection_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(21809);\n/* harmony import */ var _DepthFunction_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(7976);\n/* harmony import */ var _GlobeSurfaceTile_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(14648);\n/* harmony import */ var _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(59379);\n/* harmony import */ var _ImageryState_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(73919);\n/* harmony import */ var _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(64060);\n/* harmony import */ var _Primitive_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(34380);\n/* harmony import */ var _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(85828);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(89917);\n/* harmony import */ var _ShadowMode_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(34125);\n/* harmony import */ var _TerrainFillMesh_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(11590);\n/* harmony import */ var _TerrainState_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(46547);\n/* harmony import */ var _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(17106);\n/* harmony import */ var _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(37728);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Provides quadtree tiles representing the surface of the globe.  This type is intended to be used\n * with {@link QuadtreePrimitive}.\n *\n * @alias GlobeSurfaceTileProvider\n * @constructor\n *\n * @param {TerrainProvider} options.terrainProvider The terrain provider that describes the surface geometry.\n * @param {ImageryLayerCollection} option.imageryLayers The collection of imagery layers describing the shading of the surface.\n * @param {GlobeSurfaceShaderSet} options.surfaceShaderSet The set of shaders used to render the surface.\n *\n * @private\n */\nfunction GlobeSurfaceTileProvider(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(options)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("options is required.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(options.terrainProvider)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("options.terrainProvider is required.");\n  } else if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(options.imageryLayers)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("options.imageryLayers is required.");\n  } else if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(options.surfaceShaderSet)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("options.surfaceShaderSet is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this.lightingFadeOutDistance = 6500000.0;\n  this.lightingFadeInDistance = 9000000.0;\n  this.hasWaterMask = false;\n  this.oceanNormalMap = undefined;\n  this.zoomedOutOceanSpecularIntensity = 0.5;\n  this.enableLighting = false;\n  this.dynamicAtmosphereLighting = false;\n  this.dynamicAtmosphereLightingFromSun = false;\n  this.showGroundAtmosphere = false;\n  this.shadows = _ShadowMode_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"].RECEIVE_ONLY */ .Z.RECEIVE_ONLY;\n\n  /**\n   * The color to use to highlight terrain fill tiles. If undefined, fill tiles are not\n   * highlighted at all. The alpha value is used to alpha blend with the tile\'s\n   * actual color. Because terrain fill tiles do not represent the actual terrain surface,\n   * it may be useful in some applications to indicate visually that they are not to be trusted.\n   * @type {Color}\n   * @default undefined\n   */\n  this.fillHighlightColor = undefined;\n\n  this.hueShift = 0.0;\n  this.saturationShift = 0.0;\n  this.brightnessShift = 0.0;\n\n  this.showSkirts = true;\n  this.backFaceCulling = true;\n  this.undergroundColor = undefined;\n  this.undergroundColorAlphaByDistance = undefined;\n\n  this.materialUniformMap = undefined;\n  this._materialUniformMap = undefined;\n\n  this._quadtree = undefined;\n  this._terrainProvider = options.terrainProvider;\n  this._imageryLayers = options.imageryLayers;\n  this._surfaceShaderSet = options.surfaceShaderSet;\n\n  this._renderState = undefined;\n  this._blendRenderState = undefined;\n  this._disableCullingRenderState = undefined;\n  this._disableCullingBlendRenderState = undefined;\n\n  this._errorEvent = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\n  this._imageryLayers.layerAdded.addEventListener(\n    GlobeSurfaceTileProvider.prototype._onLayerAdded,\n    this\n  );\n  this._imageryLayers.layerRemoved.addEventListener(\n    GlobeSurfaceTileProvider.prototype._onLayerRemoved,\n    this\n  );\n  this._imageryLayers.layerMoved.addEventListener(\n    GlobeSurfaceTileProvider.prototype._onLayerMoved,\n    this\n  );\n  this._imageryLayers.layerShownOrHidden.addEventListener(\n    GlobeSurfaceTileProvider.prototype._onLayerShownOrHidden,\n    this\n  );\n  this._imageryLayersUpdatedEvent = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\n  this._layerOrderChanged = false;\n\n  this._tilesToRenderByTextureCount = [];\n  this._drawCommands = [];\n  this._uniformMaps = [];\n  this._usedDrawCommands = 0;\n\n  this._vertexArraysToDestroy = [];\n\n  this._debug = {\n    wireframe: false,\n    boundingSphereTile: undefined,\n  };\n\n  this._baseColor = undefined;\n  this._firstPassInitialColor = undefined;\n  this.baseColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(0.0, 0.0, 0.5, 1.0);\n\n  /**\n   * A property specifying a {@link ClippingPlaneCollection} used to selectively disable rendering on the outside of each plane.\n   * @type {ClippingPlaneCollection}\n   * @private\n   */\n  this._clippingPlanes = undefined;\n\n  /**\n   * A property specifying a {@link Rectangle} used to selectively limit terrain and imagery rendering.\n   * @type {Rectangle}\n   */\n  this.cartographicLimitRectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE);\n\n  this._hasLoadedTilesThisFrame = false;\n  this._hasFillTilesThisFrame = false;\n\n  this._oldTerrainExaggeration = undefined;\n  this._oldTerrainExaggerationRelativeHeight = undefined;\n}\n\nObject.defineProperties(GlobeSurfaceTileProvider.prototype, {\n  /**\n   * Gets or sets the color of the globe when no imagery is available.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {Color}\n   */\n  baseColor: {\n    get: function () {\n      return this._baseColor;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(value)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("value is required.");\n      }\n      //>>includeEnd(\'debug\');\n\n      this._baseColor = value;\n      this._firstPassInitialColor = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromColor */ .Z.fromColor(\n        value,\n        this._firstPassInitialColor\n      );\n    },\n  },\n  /**\n   * Gets or sets the {@link QuadtreePrimitive} for which this provider is\n   * providing tiles.  This property may be undefined if the provider is not yet associated\n   * with a {@link QuadtreePrimitive}.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {QuadtreePrimitive}\n   */\n  quadtree: {\n    get: function () {\n      return this._quadtree;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(value)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("value is required.");\n      }\n      //>>includeEnd(\'debug\');\n\n      this._quadtree = value;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: function () {\n      return (\n        this._terrainProvider.ready &&\n        (this._imageryLayers.length === 0 ||\n          this._imageryLayers.get(0).imageryProvider.ready)\n      );\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This property should\n   * not be accessed before {@link GlobeSurfaceTileProvider#ready} returns true.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._terrainProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the geometry provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when an imagery layer is added, shown, hidden, moved, or removed.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {Event}\n   */\n  imageryLayersUpdatedEvent: {\n    get: function () {\n      return this._imageryLayersUpdatedEvent;\n    },\n  },\n\n  /**\n   * Gets or sets the terrain provider that describes the surface geometry.\n   * @memberof GlobeSurfaceTileProvider.prototype\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      return this._terrainProvider;\n    },\n    set: function (terrainProvider) {\n      if (this._terrainProvider === terrainProvider) {\n        return;\n      }\n\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(terrainProvider)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("terrainProvider is required.");\n      }\n      //>>includeEnd(\'debug\');\n\n      this._terrainProvider = terrainProvider;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(this._quadtree)) {\n        this._quadtree.invalidateAllTiles();\n      }\n    },\n  },\n  /**\n   * The {@link ClippingPlaneCollection} used to selectively disable rendering the tileset.\n   *\n   * @type {ClippingPlaneCollection}\n   *\n   * @private\n   */\n  clippingPlanes: {\n    get: function () {\n      return this._clippingPlanes;\n    },\n    set: function (value) {\n      _ClippingPlaneCollection_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].setOwner */ .Z.setOwner(value, this, "_clippingPlanes");\n    },\n  },\n});\n\nfunction sortTileImageryByLayerIndex(a, b) {\n  var aImagery = a.loadingImagery;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(aImagery)) {\n    aImagery = a.readyImagery;\n  }\n\n  var bImagery = b.loadingImagery;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(bImagery)) {\n    bImagery = b.readyImagery;\n  }\n\n  return aImagery.imageryLayer._layerIndex - bImagery.imageryLayer._layerIndex;\n}\n\n/**\n * Make updates to the tile provider that are not involved in rendering. Called before the render update cycle.\n */\nGlobeSurfaceTileProvider.prototype.update = function (frameState) {\n  // update collection: imagery indices, base layers, raise layer show/hide event\n  this._imageryLayers._update();\n};\n\nfunction updateCredits(surface, frameState) {\n  var creditDisplay = frameState.creditDisplay;\n  if (\n    surface._terrainProvider.ready &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surface._terrainProvider.credit)\n  ) {\n    creditDisplay.addCredit(surface._terrainProvider.credit);\n  }\n\n  var imageryLayers = surface._imageryLayers;\n  for (var i = 0, len = imageryLayers.length; i < len; ++i) {\n    var imageryProvider = imageryLayers.get(i).imageryProvider;\n    if (imageryProvider.ready && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imageryProvider.credit)) {\n      creditDisplay.addCredit(imageryProvider.credit);\n    }\n  }\n}\n\n/**\n * Called at the beginning of each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n * @param {FrameState} frameState The frame state.\n */\nGlobeSurfaceTileProvider.prototype.initialize = function (frameState) {\n  // update each layer for texture reprojection.\n  this._imageryLayers.queueReprojectionCommands(frameState);\n\n  if (this._layerOrderChanged) {\n    this._layerOrderChanged = false;\n\n    // Sort the TileImagery instances in each tile by the layer index.\n    this._quadtree.forEachLoadedTile(function (tile) {\n      tile.data.imagery.sort(sortTileImageryByLayerIndex);\n    });\n  }\n\n  // Add credits for terrain and imagery providers.\n  updateCredits(this, frameState);\n\n  var vertexArraysToDestroy = this._vertexArraysToDestroy;\n  var length = vertexArraysToDestroy.length;\n  for (var j = 0; j < length; ++j) {\n    _GlobeSurfaceTile_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"]._freeVertexArray */ .Z._freeVertexArray(vertexArraysToDestroy[j]);\n  }\n  vertexArraysToDestroy.length = 0;\n};\n\n/**\n * Called at the beginning of the update cycle for each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n * or any other functions.\n *\n * @param {FrameState} frameState The frame state.\n */\nGlobeSurfaceTileProvider.prototype.beginUpdate = function (frameState) {\n  var tilesToRenderByTextureCount = this._tilesToRenderByTextureCount;\n  for (var i = 0, len = tilesToRenderByTextureCount.length; i < len; ++i) {\n    var tiles = tilesToRenderByTextureCount[i];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tiles)) {\n      tiles.length = 0;\n    }\n  }\n  // update clipping planes\n  var clippingPlanes = this._clippingPlanes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled) {\n    clippingPlanes.update(frameState);\n  }\n  this._usedDrawCommands = 0;\n\n  this._hasLoadedTilesThisFrame = false;\n  this._hasFillTilesThisFrame = false;\n};\n\n/**\n * Called at the end of the update cycle for each render frame, after {@link QuadtreeTileProvider#showTileThisFrame}\n * and any other functions.\n *\n * @param {FrameState} frameState The frame state.\n */\nGlobeSurfaceTileProvider.prototype.endUpdate = function (frameState) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(this._renderState)) {\n    this._renderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache({\n      // Write color and depth\n      cull: {\n        enabled: true,\n      },\n      depthTest: {\n        enabled: true,\n        func: _DepthFunction_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"].LESS */ .Z.LESS,\n      },\n    });\n\n    this._blendRenderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache({\n      // Write color and depth\n      cull: {\n        enabled: true,\n      },\n      depthTest: {\n        enabled: true,\n        func: _DepthFunction_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"].LESS_OR_EQUAL */ .Z.LESS_OR_EQUAL,\n      },\n      blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n    });\n\n    var rs = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this._renderState, true);\n    rs.cull.enabled = false;\n    this._disableCullingRenderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache(rs);\n\n    rs = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(this._blendRenderState, true);\n    rs.cull.enabled = false;\n    this._disableCullingBlendRenderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache(rs);\n  }\n\n  // If this frame has a mix of loaded and fill tiles, we need to propagate\n  // loaded heights to the fill tiles.\n  if (this._hasFillTilesThisFrame && this._hasLoadedTilesThisFrame) {\n    _TerrainFillMesh_js__WEBPACK_IMPORTED_MODULE_48__/* ["default"].updateFillTiles */ .Z.updateFillTiles(\n      this,\n      this._quadtree._tilesToRender,\n      frameState,\n      this._vertexArraysToDestroy\n    );\n  }\n\n  // When terrain exaggeration changes, all of the loaded tiles need to generate\n  // geodetic surface normals so they can scale properly when rendered.\n  // When exaggeration is reset, geodetic surface normals are removed to decrease\n  // memory usage. Some tiles might have been constructed with the correct\n  // exaggeration already, so skip over them.\n\n  // If the geodetic surface normals can\'t be created because the tile doesn\'t\n  // have a mesh, keep checking until the tile does have a mesh. This can happen\n  // if the tile\'s mesh starts construction in a worker thread right before the\n  // exaggeration changes.\n\n  var quadtree = this.quadtree;\n  var exaggeration = frameState.terrainExaggeration;\n  var exaggerationRelativeHeight = frameState.terrainExaggerationRelativeHeight;\n  var exaggerationChanged =\n    this._oldTerrainExaggeration !== exaggeration ||\n    this._oldTerrainExaggerationRelativeHeight !== exaggerationRelativeHeight;\n\n  // Keep track of the next time there is a change in exaggeration\n  this._oldTerrainExaggeration = exaggeration;\n  this._oldTerrainExaggerationRelativeHeight = exaggerationRelativeHeight;\n\n  if (exaggerationChanged) {\n    quadtree.forEachLoadedTile(function (tile) {\n      var surfaceTile = tile.data;\n      surfaceTile.updateExaggeration(tile, frameState, quadtree);\n    });\n  }\n\n  // Add the tile render commands to the command list, sorted by texture count.\n  var tilesToRenderByTextureCount = this._tilesToRenderByTextureCount;\n  for (\n    var textureCountIndex = 0,\n      textureCountLength = tilesToRenderByTextureCount.length;\n    textureCountIndex < textureCountLength;\n    ++textureCountIndex\n  ) {\n    var tilesToRender = tilesToRenderByTextureCount[textureCountIndex];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tilesToRender)) {\n      continue;\n    }\n\n    for (\n      var tileIndex = 0, tileLength = tilesToRender.length;\n      tileIndex < tileLength;\n      ++tileIndex\n    ) {\n      var tile = tilesToRender[tileIndex];\n      var tileBoundingRegion = tile.data.tileBoundingRegion;\n      addDrawCommandsForTile(this, tile, frameState);\n      frameState.minimumTerrainHeight = Math.min(\n        frameState.minimumTerrainHeight,\n        tileBoundingRegion.minimumHeight\n      );\n    }\n  }\n};\n\nfunction pushCommand(command, frameState) {\n  var globeTranslucencyState = frameState.globeTranslucencyState;\n  if (globeTranslucencyState.translucent) {\n    var isBlendCommand = command.renderState.blending.enabled;\n    globeTranslucencyState.pushDerivedCommands(\n      command,\n      isBlendCommand,\n      frameState\n    );\n  } else {\n    frameState.commandList.push(command);\n  }\n}\n\n/**\n * Adds draw commands for tiles rendered in the previous frame for a pick pass.\n *\n * @param {FrameState} frameState The frame state.\n */\nGlobeSurfaceTileProvider.prototype.updateForPick = function (frameState) {\n  // Add the tile pick commands from the tiles drawn last frame.\n  var drawCommands = this._drawCommands;\n  for (var i = 0, length = this._usedDrawCommands; i < length; ++i) {\n    pushCommand(drawCommands[i], frameState);\n  }\n};\n\n/**\n * Cancels any imagery re-projections in the queue.\n */\nGlobeSurfaceTileProvider.prototype.cancelReprojections = function () {\n  this._imageryLayers.cancelReprojections();\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level, in meters.  This function should not be\n * called before {@link GlobeSurfaceTileProvider#ready} returns true.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error in meters.\n */\nGlobeSurfaceTileProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  return this._terrainProvider.getLevelMaximumGeometricError(level);\n};\n\n/**\n * Loads, or continues loading, a given tile.  This function will continue to be called\n * until {@link QuadtreeTile#state} is no longer {@link QuadtreeTileLoadState#LOADING}.  This function should\n * not be called before {@link GlobeSurfaceTileProvider#ready} returns true.\n *\n * @param {FrameState} frameState The frame state.\n * @param {QuadtreeTile} tile The tile to load.\n *\n * @exception {DeveloperError} <code>loadTile</code> must not be called before the tile provider is ready.\n */\nGlobeSurfaceTileProvider.prototype.loadTile = function (frameState, tile) {\n  // We don\'t want to load imagery until we\'re certain that the terrain tiles are actually visible.\n  // So if our bounding volume isn\'t accurate because it came from another tile, load terrain only\n  // initially. If we load some terrain and suddenly have a more accurate bounding volume and the\n  // tile is _still_ visible, give the tile a chance to load imagery immediately rather than\n  // waiting for next frame.\n\n  var surfaceTile = tile.data;\n  var terrainOnly = true;\n  var terrainStateBefore;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile)) {\n    terrainOnly =\n      surfaceTile.boundingVolumeSourceTile !== tile ||\n      tile._lastSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].CULLED_BUT_NEEDED */ .Z.CULLED_BUT_NEEDED;\n    terrainStateBefore = surfaceTile.terrainState;\n  }\n\n  _GlobeSurfaceTile_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].processStateMachine */ .Z.processStateMachine(\n    tile,\n    frameState,\n    this.terrainProvider,\n    this._imageryLayers,\n    this.quadtree,\n    this._vertexArraysToDestroy,\n    terrainOnly\n  );\n\n  surfaceTile = tile.data;\n  if (terrainOnly && terrainStateBefore !== tile.data.terrainState) {\n    // Terrain state changed. If:\n    // a) The tile is visible, and\n    // b) The bounding volume is accurate (updated as a side effect of computing visibility)\n    // Then we\'ll load imagery, too.\n    if (\n      this.computeTileVisibility(tile, frameState, this.quadtree.occluders) !==\n        _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE &&\n      surfaceTile.boundingVolumeSourceTile === tile\n    ) {\n      terrainOnly = false;\n      _GlobeSurfaceTile_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].processStateMachine */ .Z.processStateMachine(\n        tile,\n        frameState,\n        this.terrainProvider,\n        this._imageryLayers,\n        this.quadtree,\n        this._vertexArraysToDestroy,\n        terrainOnly\n      );\n    }\n  }\n};\n\nvar boundingSphereScratch = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar rectangleIntersectionScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\nvar splitCartographicLimitRectangleScratch = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\nvar rectangleCenterScratch = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n\n// cartographicLimitRectangle may span the IDL, but tiles never will.\nfunction clipRectangleAntimeridian(tileRectangle, cartographicLimitRectangle) {\n  if (cartographicLimitRectangle.west < cartographicLimitRectangle.east) {\n    return cartographicLimitRectangle;\n  }\n  var splitRectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(\n    cartographicLimitRectangle,\n    splitCartographicLimitRectangleScratch\n  );\n  var tileCenter = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].center */ .Z.center(tileRectangle, rectangleCenterScratch);\n  if (tileCenter.longitude > 0.0) {\n    splitRectangle.east = _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI */ .Z.PI;\n  } else {\n    splitRectangle.west = -_Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI */ .Z.PI;\n  }\n  return splitRectangle;\n}\n\nfunction isUndergroundVisible(tileProvider, frameState) {\n  if (frameState.cameraUnderground) {\n    return true;\n  }\n\n  if (frameState.globeTranslucencyState.translucent) {\n    return true;\n  }\n\n  if (tileProvider.backFaceCulling) {\n    return false;\n  }\n\n  var clippingPlanes = tileProvider._clippingPlanes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled) {\n    return true;\n  }\n\n  if (\n    !_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].equals */ .Z.equals(\n      tileProvider.cartographicLimitRectangle,\n      _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE\n    )\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Determines the visibility of a given tile.  The tile may be fully visible, partially visible, or not\n * visible at all.  Tiles that are renderable and are at least partially visible will be shown by a call\n * to {@link GlobeSurfaceTileProvider#showTileThisFrame}.\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information about the current frame.\n * @param {QuadtreeOccluders} occluders The objects that may occlude this tile.\n *\n * @returns {Visibility} Visibility.NONE if the tile is not visible,\n *                       Visibility.PARTIAL if the tile is partially visible, or\n *                       Visibility.FULL if the tile is fully visible.\n */\nGlobeSurfaceTileProvider.prototype.computeTileVisibility = function (\n  tile,\n  frameState,\n  occluders\n) {\n  var distance = this.computeDistanceToTile(tile, frameState);\n  tile._distance = distance;\n\n  var undergroundVisible = isUndergroundVisible(this, frameState);\n\n  if (frameState.fog.enabled && !undergroundVisible) {\n    if (_Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].fog */ .Z.fog(distance, frameState.fog.density) >= 1.0) {\n      // Tile is completely in fog so return that it is not visible.\n      return _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE;\n    }\n  }\n\n  var surfaceTile = tile.data;\n  var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n\n  if (surfaceTile.boundingVolumeSourceTile === undefined) {\n    // We have no idea where this tile is, so let\'s just call it partially visible.\n    return _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].PARTIAL */ .Z.PARTIAL;\n  }\n\n  var cullingVolume = frameState.cullingVolume;\n  var boundingVolume = tileBoundingRegion.boundingVolume;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(boundingVolume)) {\n    boundingVolume = tileBoundingRegion.boundingSphere;\n  }\n\n  // Check if the tile is outside the limit area in cartographic space\n  surfaceTile.clippedByBoundaries = false;\n  var clippedCartographicLimitRectangle = clipRectangleAntimeridian(\n    tile.rectangle,\n    this.cartographicLimitRectangle\n  );\n  var areaLimitIntersection = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].simpleIntersection */ .Z.simpleIntersection(\n    clippedCartographicLimitRectangle,\n    tile.rectangle,\n    rectangleIntersectionScratch\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(areaLimitIntersection)) {\n    return _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE;\n  }\n  if (!_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].equals */ .Z.equals(areaLimitIntersection, tile.rectangle)) {\n    surfaceTile.clippedByBoundaries = true;\n  }\n\n  if (frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    boundingVolume = boundingSphereScratch;\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRectangleWithHeights2D */ .Z.fromRectangleWithHeights2D(\n      tile.rectangle,\n      frameState.mapProjection,\n      tileBoundingRegion.minimumHeight,\n      tileBoundingRegion.maximumHeight,\n      boundingVolume\n    );\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromElements */ .Z.fromElements(\n      boundingVolume.center.z,\n      boundingVolume.center.x,\n      boundingVolume.center.y,\n      boundingVolume.center\n    );\n\n    if (\n      frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].MORPHING */ .Z.MORPHING &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.renderedMesh)\n    ) {\n      boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].union */ .Z.union(\n        tileBoundingRegion.boundingSphere,\n        boundingVolume,\n        boundingVolume\n      );\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(boundingVolume)) {\n    return _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].PARTIAL */ .Z.PARTIAL;\n  }\n\n  var clippingPlanes = this._clippingPlanes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled) {\n    var planeIntersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n      boundingVolume\n    );\n    tile.isClipped = planeIntersection !== _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].INSIDE */ .Z.INSIDE;\n    if (planeIntersection === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].OUTSIDE */ .Z.OUTSIDE) {\n      return _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE;\n    }\n  }\n\n  var visibility;\n  var intersection = cullingVolume.computeVisibility(boundingVolume);\n\n  if (intersection === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].OUTSIDE */ .Z.OUTSIDE) {\n    visibility = _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE;\n  } else if (intersection === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].INTERSECTING */ .Z.INTERSECTING) {\n    visibility = _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].PARTIAL */ .Z.PARTIAL;\n  } else if (intersection === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].INSIDE */ .Z.INSIDE) {\n    visibility = _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].FULL */ .Z.FULL;\n  }\n\n  if (visibility === _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE) {\n    return visibility;\n  }\n\n  var ortho3D =\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    frameState.camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z;\n  if (\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    !ortho3D &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(occluders) &&\n    !undergroundVisible\n  ) {\n    var occludeePointInScaledSpace = surfaceTile.occludeePointInScaledSpace;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(occludeePointInScaledSpace)) {\n      return visibility;\n    }\n\n    if (\n      occluders.ellipsoid.isScaledSpacePointVisiblePossiblyUnderEllipsoid(\n        occludeePointInScaledSpace,\n        tileBoundingRegion.minimumHeight\n      )\n    ) {\n      return visibility;\n    }\n\n    return _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].NONE */ .Z.NONE;\n  }\n\n  return visibility;\n};\n\n/**\n * Determines if the given tile can be refined\n * @param {QuadtreeTile} tile The tile to check.\n * @returns {boolean} True if the tile can be refined, false if it cannot.\n */\nGlobeSurfaceTileProvider.prototype.canRefine = function (tile) {\n  // Only allow refinement it we know whether or not the children of this tile exist.\n  // For a tileset with `availability`, we\'ll always be able to refine.\n  // We can ask for availability of _any_ child tile because we only need to confirm\n  // that we get a yes or no answer, it doesn\'t matter what the answer is.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tile.data.terrainData)) {\n    return true;\n  }\n  var childAvailable = this.terrainProvider.getTileDataAvailable(\n    tile.x * 2,\n    tile.y * 2,\n    tile.level + 1\n  );\n  return childAvailable !== undefined;\n};\n\nvar readyImageryScratch = [];\nvar canRenderTraversalStack = [];\n\n/**\n * Determines if the given not-fully-loaded tile can be rendered without losing detail that\n * was present last frame as a result of rendering descendant tiles. This method will only be\n * called if this tile\'s descendants were rendered last frame. If the tile is fully loaded,\n * it is assumed that this method will return true and it will not be called.\n * @param {QuadtreeTile} tile The tile to check.\n * @returns {boolean} True if the tile can be rendered without losing detail.\n */\nGlobeSurfaceTileProvider.prototype.canRenderWithoutLosingDetail = function (\n  tile,\n  frameState\n) {\n  var surfaceTile = tile.data;\n\n  var readyImagery = readyImageryScratch;\n  readyImagery.length = this._imageryLayers.length;\n\n  var terrainReady = false;\n  var initialImageryState = false;\n  var imagery;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile)) {\n    // We can render even with non-ready terrain as long as all our rendered descendants\n    // are missing terrain geometry too. i.e. if we rendered fills for more detailed tiles\n    // last frame, it\'s ok to render a fill for this tile this frame.\n    terrainReady = surfaceTile.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"].READY */ .Z.READY;\n\n    // Initially assume all imagery layers are ready, unless imagery hasn\'t been initialized at all.\n    initialImageryState = true;\n\n    imagery = surfaceTile.imagery;\n  }\n\n  var i;\n  var len;\n\n  for (i = 0, len = readyImagery.length; i < len; ++i) {\n    readyImagery[i] = initialImageryState;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imagery)) {\n    for (i = 0, len = imagery.length; i < len; ++i) {\n      var tileImagery = imagery[i];\n      var loadingImagery = tileImagery.loadingImagery;\n      var isReady =\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(loadingImagery) ||\n        loadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].FAILED */ .Z.FAILED ||\n        loadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].INVALID */ .Z.INVALID;\n      var layerIndex = (tileImagery.loadingImagery || tileImagery.readyImagery)\n        .imageryLayer._layerIndex;\n\n      // For a layer to be ready, all tiles belonging to that layer must be ready.\n      readyImagery[layerIndex] = isReady && readyImagery[layerIndex];\n    }\n  }\n\n  var lastFrame = this.quadtree._lastSelectionFrameNumber;\n\n  // Traverse the descendants looking for one with terrain or imagery that is not loaded on this tile.\n  var stack = canRenderTraversalStack;\n  stack.length = 0;\n  stack.push(\n    tile.southwestChild,\n    tile.southeastChild,\n    tile.northwestChild,\n    tile.northeastChild\n  );\n\n  while (stack.length > 0) {\n    var descendant = stack.pop();\n    var lastFrameSelectionResult =\n      descendant._lastSelectionResultFrame === lastFrame\n        ? descendant._lastSelectionResult\n        : _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].NONE */ .Z.NONE;\n\n    if (lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].RENDERED */ .Z.RENDERED) {\n      var descendantSurface = descendant.data;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(descendantSurface)) {\n        // Descendant has no data, so it can\'t block rendering.\n        continue;\n      }\n\n      if (\n        !terrainReady &&\n        descendant.data.terrainState === _TerrainState_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"].READY */ .Z.READY\n      ) {\n        // Rendered descendant has real terrain, but we don\'t. Rendering is blocked.\n        return false;\n      }\n\n      var descendantImagery = descendant.data.imagery;\n      for (i = 0, len = descendantImagery.length; i < len; ++i) {\n        var descendantTileImagery = descendantImagery[i];\n        var descendantLoadingImagery = descendantTileImagery.loadingImagery;\n        var descendantIsReady =\n          !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(descendantLoadingImagery) ||\n          descendantLoadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].FAILED */ .Z.FAILED ||\n          descendantLoadingImagery.state === _ImageryState_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].INVALID */ .Z.INVALID;\n        var descendantLayerIndex = (\n          descendantTileImagery.loadingImagery ||\n          descendantTileImagery.readyImagery\n        ).imageryLayer._layerIndex;\n\n        // If this imagery tile of a descendant is ready but the layer isn\'t ready in this tile,\n        // then rendering is blocked.\n        if (descendantIsReady && !readyImagery[descendantLayerIndex]) {\n          return false;\n        }\n      }\n    } else if (lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].REFINED */ .Z.REFINED) {\n      stack.push(\n        descendant.southwestChild,\n        descendant.southeastChild,\n        descendant.northwestChild,\n        descendant.northeastChild\n      );\n    }\n  }\n\n  return true;\n};\n\nvar tileDirectionScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n/**\n * Determines the priority for loading this tile. Lower priority values load sooner.\n * @param {QuadtreeTile} tile The tile.\n * @param {FrameState} frameState The frame state.\n * @returns {Number} The load priority value.\n */\nGlobeSurfaceTileProvider.prototype.computeTileLoadPriority = function (\n  tile,\n  frameState\n) {\n  var surfaceTile = tile.data;\n  if (surfaceTile === undefined) {\n    return 0.0;\n  }\n\n  var obb = surfaceTile.tileBoundingRegion.boundingVolume;\n  if (obb === undefined) {\n    return 0.0;\n  }\n\n  var cameraPosition = frameState.camera.positionWC;\n  var cameraDirection = frameState.camera.directionWC;\n  var tileDirection = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].subtract */ .Z.subtract(\n    obb.center,\n    cameraPosition,\n    tileDirectionScratch\n  );\n  var magnitude = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].magnitude */ .Z.magnitude(tileDirection);\n  if (magnitude < _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON5 */ .Z.EPSILON5) {\n    return 0.0;\n  }\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].divideByScalar */ .Z.divideByScalar(tileDirection, magnitude, tileDirection);\n  return (\n    (1.0 - _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].dot */ .Z.dot(tileDirection, cameraDirection)) * tile._distance\n  );\n};\n\nvar modifiedModelViewScratch = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\nvar modifiedModelViewProjectionScratch = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\nvar tileRectangleScratch = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar localizedCartographicLimitRectangleScratch = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar localizedTranslucencyRectangleScratch = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar rtcScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar centerEyeScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar southwestScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar northeastScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n/**\n * Shows a specified tile in this frame.  The provider can cause the tile to be shown by adding\n * render commands to the commandList, or use any other method as appropriate.  The tile is not\n * expected to be visible next frame as well, unless this method is called next frame, too.\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information of the current rendering frame.\n */\nGlobeSurfaceTileProvider.prototype.showTileThisFrame = function (\n  tile,\n  frameState\n) {\n  var readyTextureCount = 0;\n  var tileImageryCollection = tile.data.imagery;\n  for (var i = 0, len = tileImageryCollection.length; i < len; ++i) {\n    var tileImagery = tileImageryCollection[i];\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileImagery.readyImagery) &&\n      tileImagery.readyImagery.imageryLayer.alpha !== 0.0\n    ) {\n      ++readyTextureCount;\n    }\n  }\n\n  var tileSet = this._tilesToRenderByTextureCount[readyTextureCount];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileSet)) {\n    tileSet = [];\n    this._tilesToRenderByTextureCount[readyTextureCount] = tileSet;\n  }\n\n  tileSet.push(tile);\n\n  var surfaceTile = tile.data;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.vertexArray)) {\n    this._hasFillTilesThisFrame = true;\n  } else {\n    this._hasLoadedTilesThisFrame = true;\n  }\n\n  var debug = this._debug;\n  ++debug.tilesRendered;\n  debug.texturesRendered += readyTextureCount;\n};\n\nvar cornerPositionsScratch = [\n  new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n  new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n  new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n  new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n];\n\nfunction computeOccludeePoint(\n  tileProvider,\n  center,\n  rectangle,\n  minimumHeight,\n  maximumHeight,\n  result\n) {\n  var ellipsoidalOccluder = tileProvider.quadtree._occluders.ellipsoid;\n  var ellipsoid = ellipsoidalOccluder.ellipsoid;\n\n  var cornerPositions = cornerPositionsScratch;\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.west,\n    rectangle.south,\n    maximumHeight,\n    ellipsoid,\n    cornerPositions[0]\n  );\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.east,\n    rectangle.south,\n    maximumHeight,\n    ellipsoid,\n    cornerPositions[1]\n  );\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.west,\n    rectangle.north,\n    maximumHeight,\n    ellipsoid,\n    cornerPositions[2]\n  );\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.east,\n    rectangle.north,\n    maximumHeight,\n    ellipsoid,\n    cornerPositions[3]\n  );\n\n  return ellipsoidalOccluder.computeHorizonCullingPointPossiblyUnderEllipsoid(\n    center,\n    cornerPositions,\n    minimumHeight,\n    result\n  );\n}\n\n/**\n * Gets the distance from the camera to the closest point on the tile.  This is used for level-of-detail selection.\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information of the current rendering frame.\n *\n * @returns {Number} The distance from the camera to the closest point on the tile, in meters.\n */\nGlobeSurfaceTileProvider.prototype.computeDistanceToTile = function (\n  tile,\n  frameState\n) {\n  // The distance should be:\n  // 1. the actual distance to the tight-fitting bounding volume, or\n  // 2. a distance that is equal to or greater than the actual distance to the tight-fitting bounding volume.\n  //\n  // When we don\'t know the min/max heights for a tile, but we do know the min/max of an ancestor tile, we can\n  // build a tight-fitting bounding volume horizontally, but not vertically. The min/max heights from the\n  // ancestor will likely form a volume that is much bigger than it needs to be. This means that the volume may\n  // be deemed to be much closer to the camera than it really is, causing us to select tiles that are too detailed.\n  // Loading too-detailed tiles is super expensive, so we don\'t want to do that. We don\'t know where the child\n  // tile really lies within the parent range of heights, but we _do_ know the child tile can\'t be any closer than\n  // the ancestor height surface (min or max) that is _farthest away_ from the camera. So if we compute distance\n  // based on that conservative metric, we may end up loading tiles that are not detailed enough, but that\'s much\n  // better (faster) than loading tiles that are too detailed.\n\n  updateTileBoundingRegion(tile, this, frameState);\n\n  var surfaceTile = tile.data;\n  var boundingVolumeSourceTile = surfaceTile.boundingVolumeSourceTile;\n  if (boundingVolumeSourceTile === undefined) {\n    // Can\'t find any min/max heights anywhere? Ok, let\'s just say the\n    // tile is really far away so we\'ll load and render it rather than\n    // refining.\n    return 9999999999.0;\n  }\n\n  var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n  var min = tileBoundingRegion.minimumHeight;\n  var max = tileBoundingRegion.maximumHeight;\n\n  if (surfaceTile.boundingVolumeSourceTile !== tile) {\n    var cameraHeight = frameState.camera.positionCartographic.height;\n    var distanceToMin = Math.abs(cameraHeight - min);\n    var distanceToMax = Math.abs(cameraHeight - max);\n    if (distanceToMin > distanceToMax) {\n      tileBoundingRegion.minimumHeight = min;\n      tileBoundingRegion.maximumHeight = min;\n    } else {\n      tileBoundingRegion.minimumHeight = max;\n      tileBoundingRegion.maximumHeight = max;\n    }\n  }\n\n  var result = tileBoundingRegion.distanceToCamera(frameState);\n\n  tileBoundingRegion.minimumHeight = min;\n  tileBoundingRegion.maximumHeight = max;\n\n  return result;\n};\n\nfunction updateTileBoundingRegion(tile, tileProvider, frameState) {\n  var surfaceTile = tile.data;\n  if (surfaceTile === undefined) {\n    surfaceTile = tile.data = new _GlobeSurfaceTile_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z();\n  }\n\n  var ellipsoid = tile.tilingScheme.ellipsoid;\n  if (surfaceTile.tileBoundingRegion === undefined) {\n    surfaceTile.tileBoundingRegion = new _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"] */ .Z({\n      computeBoundingVolumes: false,\n      rectangle: tile.rectangle,\n      ellipsoid: ellipsoid,\n      minimumHeight: 0.0,\n      maximumHeight: 0.0,\n    });\n  }\n\n  var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n  var oldMinimumHeight = tileBoundingRegion.minimumHeight;\n  var oldMaximumHeight = tileBoundingRegion.maximumHeight;\n  var hasBoundingVolumesFromMesh = false;\n  var sourceTile = tile;\n\n  // Get min and max heights from the mesh.\n  // If the mesh is not available, get them from the terrain data.\n  // If the terrain data is not available either, get them from an ancestor.\n  // If none of the ancestors are available, then there are no min and max heights for this tile at this time.\n  var mesh = surfaceTile.mesh;\n  var terrainData = surfaceTile.terrainData;\n  if (\n    mesh !== undefined &&\n    mesh.minimumHeight !== undefined &&\n    mesh.maximumHeight !== undefined\n  ) {\n    tileBoundingRegion.minimumHeight = mesh.minimumHeight;\n    tileBoundingRegion.maximumHeight = mesh.maximumHeight;\n    hasBoundingVolumesFromMesh = true;\n  } else if (\n    terrainData !== undefined &&\n    terrainData._minimumHeight !== undefined &&\n    terrainData._maximumHeight !== undefined\n  ) {\n    tileBoundingRegion.minimumHeight = terrainData._minimumHeight;\n    tileBoundingRegion.maximumHeight = terrainData._maximumHeight;\n  } else {\n    // No accurate min/max heights available, so we\'re stuck with min/max heights from an ancestor tile.\n    tileBoundingRegion.minimumHeight = Number.NaN;\n    tileBoundingRegion.maximumHeight = Number.NaN;\n\n    var ancestorTile = tile.parent;\n    while (ancestorTile !== undefined) {\n      var ancestorSurfaceTile = ancestorTile.data;\n      if (ancestorSurfaceTile !== undefined) {\n        var ancestorMesh = ancestorSurfaceTile.mesh;\n        var ancestorTerrainData = ancestorSurfaceTile.terrainData;\n        if (\n          ancestorMesh !== undefined &&\n          ancestorMesh.minimumHeight !== undefined &&\n          ancestorMesh.maximumHeight !== undefined\n        ) {\n          tileBoundingRegion.minimumHeight = ancestorMesh.minimumHeight;\n          tileBoundingRegion.maximumHeight = ancestorMesh.maximumHeight;\n          break;\n        } else if (\n          ancestorTerrainData !== undefined &&\n          ancestorTerrainData._minimumHeight !== undefined &&\n          ancestorTerrainData._maximumHeight !== undefined\n        ) {\n          tileBoundingRegion.minimumHeight = ancestorTerrainData._minimumHeight;\n          tileBoundingRegion.maximumHeight = ancestorTerrainData._maximumHeight;\n          break;\n        }\n      }\n      ancestorTile = ancestorTile.parent;\n    }\n    sourceTile = ancestorTile;\n  }\n\n  // Update bounding regions from the min and max heights\n  if (sourceTile !== undefined) {\n    var exaggeration = frameState.terrainExaggeration;\n    var exaggerationRelativeHeight =\n      frameState.terrainExaggerationRelativeHeight;\n    var hasExaggeration = exaggeration !== 1.0;\n    if (hasExaggeration) {\n      hasBoundingVolumesFromMesh = false;\n      tileBoundingRegion.minimumHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].getHeight */ .Z.getHeight(\n        tileBoundingRegion.minimumHeight,\n        exaggeration,\n        exaggerationRelativeHeight\n      );\n      tileBoundingRegion.maximumHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].getHeight */ .Z.getHeight(\n        tileBoundingRegion.maximumHeight,\n        exaggeration,\n        exaggerationRelativeHeight\n      );\n    }\n\n    if (hasBoundingVolumesFromMesh) {\n      if (!surfaceTile.boundingVolumeIsFromMesh) {\n        tileBoundingRegion._orientedBoundingBox = _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].clone */ .Z.clone(\n          mesh.orientedBoundingBox,\n          tileBoundingRegion._orientedBoundingBox\n        );\n        tileBoundingRegion._boundingSphere = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n          mesh.boundingSphere3D,\n          tileBoundingRegion._boundingSphere\n        );\n        surfaceTile.occludeePointInScaledSpace = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(\n          mesh.occludeePointInScaledSpace,\n          surfaceTile.occludeePointInScaledSpace\n        );\n\n        // If the occludee point is not defined, fallback to calculating it from the OBB\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.occludeePointInScaledSpace)) {\n          surfaceTile.occludeePointInScaledSpace = computeOccludeePoint(\n            tileProvider,\n            tileBoundingRegion._orientedBoundingBox.center,\n            tile.rectangle,\n            tileBoundingRegion.minimumHeight,\n            tileBoundingRegion.maximumHeight,\n            surfaceTile.occludeePointInScaledSpace\n          );\n        }\n      }\n    } else {\n      var needsBounds =\n        tileBoundingRegion._orientedBoundingBox === undefined ||\n        tileBoundingRegion._boundingSphere === undefined;\n      var heightChanged =\n        tileBoundingRegion.minimumHeight !== oldMinimumHeight ||\n        tileBoundingRegion.maximumHeight !== oldMaximumHeight;\n      if (heightChanged || needsBounds) {\n        // Bounding volumes need to be recomputed in some circumstances\n        tileBoundingRegion.computeBoundingVolumes(ellipsoid);\n        surfaceTile.occludeePointInScaledSpace = computeOccludeePoint(\n          tileProvider,\n          tileBoundingRegion._orientedBoundingBox.center,\n          tile.rectangle,\n          tileBoundingRegion.minimumHeight,\n          tileBoundingRegion.maximumHeight,\n          surfaceTile.occludeePointInScaledSpace\n        );\n      }\n    }\n    surfaceTile.boundingVolumeSourceTile = sourceTile;\n    surfaceTile.boundingVolumeIsFromMesh = hasBoundingVolumesFromMesh;\n  } else {\n    surfaceTile.boundingVolumeSourceTile = undefined;\n    surfaceTile.boundingVolumeIsFromMesh = false;\n  }\n}\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see GlobeSurfaceTileProvider#destroy\n */\nGlobeSurfaceTileProvider.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * provider = provider && provider();\n *\n * @see GlobeSurfaceTileProvider#isDestroyed\n */\nGlobeSurfaceTileProvider.prototype.destroy = function () {\n  this._tileProvider = this._tileProvider && this._tileProvider.destroy();\n  this._clippingPlanes = this._clippingPlanes && this._clippingPlanes.destroy();\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(this);\n};\n\nfunction getTileReadyCallback(tileImageriesToFree, layer, terrainProvider) {\n  return function (tile) {\n    var tileImagery;\n    var imagery;\n    var startIndex = -1;\n    var tileImageryCollection = tile.data.imagery;\n    var length = tileImageryCollection.length;\n    var i;\n    for (i = 0; i < length; ++i) {\n      tileImagery = tileImageryCollection[i];\n      imagery = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n        tileImagery.readyImagery,\n        tileImagery.loadingImagery\n      );\n      if (imagery.imageryLayer === layer) {\n        startIndex = i;\n        break;\n      }\n    }\n\n    if (startIndex !== -1) {\n      var endIndex = startIndex + tileImageriesToFree;\n      tileImagery = tileImageryCollection[endIndex];\n      imagery = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileImagery)\n        ? (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(tileImagery.readyImagery, tileImagery.loadingImagery)\n        : undefined;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imagery) || imagery.imageryLayer !== layer) {\n        // Return false to keep the callback if we have to wait on the skeletons\n        // Return true to remove the callback if something went wrong\n        return !layer._createTileImagerySkeletons(\n          tile,\n          terrainProvider,\n          endIndex\n        );\n      }\n\n      for (i = startIndex; i < endIndex; ++i) {\n        tileImageryCollection[i].freeResources();\n      }\n\n      tileImageryCollection.splice(startIndex, tileImageriesToFree);\n    }\n\n    return true; // Everything is done, so remove the callback\n  };\n}\n\nGlobeSurfaceTileProvider.prototype._onLayerAdded = function (layer, index) {\n  if (layer.show) {\n    var terrainProvider = this._terrainProvider;\n\n    var that = this;\n    var imageryProvider = layer.imageryProvider;\n    var tileImageryUpdatedEvent = this._imageryLayersUpdatedEvent;\n    imageryProvider._reload = function () {\n      // Clear the layer\'s cache\n      layer._imageryCache = {};\n\n      that._quadtree.forEachLoadedTile(function (tile) {\n        // If this layer is still waiting to for the loaded callback, just return\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tile._loadedCallbacks[layer._layerIndex])) {\n          return;\n        }\n\n        var i;\n\n        // Figure out how many TileImageries we will need to remove and where to insert new ones\n        var tileImageryCollection = tile.data.imagery;\n        var length = tileImageryCollection.length;\n        var startIndex = -1;\n        var tileImageriesToFree = 0;\n        for (i = 0; i < length; ++i) {\n          var tileImagery = tileImageryCollection[i];\n          var imagery = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n            tileImagery.readyImagery,\n            tileImagery.loadingImagery\n          );\n          if (imagery.imageryLayer === layer) {\n            if (startIndex === -1) {\n              startIndex = i;\n            }\n\n            ++tileImageriesToFree;\n          } else if (startIndex !== -1) {\n            // iterated past the section of TileImageries belonging to this layer, no need to continue.\n            break;\n          }\n        }\n\n        if (startIndex === -1) {\n          return;\n        }\n\n        // Insert immediately after existing TileImageries\n        var insertionPoint = startIndex + tileImageriesToFree;\n\n        // Create new TileImageries for all loaded tiles\n        if (\n          layer._createTileImagerySkeletons(\n            tile,\n            terrainProvider,\n            insertionPoint\n          )\n        ) {\n          // Add callback to remove old TileImageries when the new TileImageries are ready\n          tile._loadedCallbacks[layer._layerIndex] = getTileReadyCallback(\n            tileImageriesToFree,\n            layer,\n            terrainProvider\n          );\n\n          tile.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].LOADING */ .Z.LOADING;\n        }\n      });\n    };\n\n    // create TileImageries for this layer for all previously loaded tiles\n    this._quadtree.forEachLoadedTile(function (tile) {\n      if (layer._createTileImagerySkeletons(tile, terrainProvider)) {\n        tile.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].LOADING */ .Z.LOADING;\n\n        // Tiles that are not currently being rendered need to load the new layer before they\'re renderable.\n        // We don\'t mark the rendered tiles non-renderable, though, because that would make the globe disappear.\n        if (\n          tile.level !== 0 &&\n          (tile._lastSelectionResultFrame !==\n            that.quadtree._lastSelectionFrameNumber ||\n            tile._lastSelectionResult !== _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].RENDERED */ .Z.RENDERED)\n        ) {\n          tile.renderable = false;\n        }\n      }\n    });\n\n    this._layerOrderChanged = true;\n    tileImageryUpdatedEvent.raiseEvent();\n  }\n};\n\nGlobeSurfaceTileProvider.prototype._onLayerRemoved = function (layer, index) {\n  // destroy TileImagerys for this layer for all previously loaded tiles\n  this._quadtree.forEachLoadedTile(function (tile) {\n    var tileImageryCollection = tile.data.imagery;\n\n    var startIndex = -1;\n    var numDestroyed = 0;\n    for (var i = 0, len = tileImageryCollection.length; i < len; ++i) {\n      var tileImagery = tileImageryCollection[i];\n      var imagery = tileImagery.loadingImagery;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imagery)) {\n        imagery = tileImagery.readyImagery;\n      }\n      if (imagery.imageryLayer === layer) {\n        if (startIndex === -1) {\n          startIndex = i;\n        }\n\n        tileImagery.freeResources();\n        ++numDestroyed;\n      } else if (startIndex !== -1) {\n        // iterated past the section of TileImagerys belonging to this layer, no need to continue.\n        break;\n      }\n    }\n\n    if (startIndex !== -1) {\n      tileImageryCollection.splice(startIndex, numDestroyed);\n    }\n  });\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(layer.imageryProvider)) {\n    layer.imageryProvider._reload = undefined;\n  }\n\n  this._imageryLayersUpdatedEvent.raiseEvent();\n};\n\nGlobeSurfaceTileProvider.prototype._onLayerMoved = function (\n  layer,\n  newIndex,\n  oldIndex\n) {\n  this._layerOrderChanged = true;\n  this._imageryLayersUpdatedEvent.raiseEvent();\n};\n\nGlobeSurfaceTileProvider.prototype._onLayerShownOrHidden = function (\n  layer,\n  index,\n  show\n) {\n  if (show) {\n    this._onLayerAdded(layer, index);\n  } else {\n    this._onLayerRemoved(layer, index);\n  }\n};\n\nvar scratchClippingPlanesMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\nvar scratchInverseTransposeClippingPlanesMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\nfunction createTileUniformMap(frameState, globeSurfaceTileProvider) {\n  var uniformMap = {\n    u_initialColor: function () {\n      return this.properties.initialColor;\n    },\n    u_fillHighlightColor: function () {\n      return this.properties.fillHighlightColor;\n    },\n    u_zoomedOutOceanSpecularIntensity: function () {\n      return this.properties.zoomedOutOceanSpecularIntensity;\n    },\n    u_oceanNormalMap: function () {\n      return this.properties.oceanNormalMap;\n    },\n    u_lightingFadeDistance: function () {\n      return this.properties.lightingFadeDistance;\n    },\n    u_nightFadeDistance: function () {\n      return this.properties.nightFadeDistance;\n    },\n    u_center3D: function () {\n      return this.properties.center3D;\n    },\n    u_terrainExaggerationAndRelativeHeight: function () {\n      return this.properties.terrainExaggerationAndRelativeHeight;\n    },\n    u_tileRectangle: function () {\n      return this.properties.tileRectangle;\n    },\n    u_modifiedModelView: function () {\n      var viewMatrix = frameState.context.uniformState.view;\n      var centerEye = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n        viewMatrix,\n        this.properties.rtc,\n        centerEyeScratch\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].setTranslation */ .Z.setTranslation(viewMatrix, centerEye, modifiedModelViewScratch);\n      return modifiedModelViewScratch;\n    },\n    u_modifiedModelViewProjection: function () {\n      var viewMatrix = frameState.context.uniformState.view;\n      var projectionMatrix = frameState.context.uniformState.projection;\n      var centerEye = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n        viewMatrix,\n        this.properties.rtc,\n        centerEyeScratch\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].setTranslation */ .Z.setTranslation(\n        viewMatrix,\n        centerEye,\n        modifiedModelViewProjectionScratch\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].multiply */ .Z.multiply(\n        projectionMatrix,\n        modifiedModelViewProjectionScratch,\n        modifiedModelViewProjectionScratch\n      );\n      return modifiedModelViewProjectionScratch;\n    },\n    u_dayTextures: function () {\n      return this.properties.dayTextures;\n    },\n    u_dayTextureTranslationAndScale: function () {\n      return this.properties.dayTextureTranslationAndScale;\n    },\n    u_dayTextureTexCoordsRectangle: function () {\n      return this.properties.dayTextureTexCoordsRectangle;\n    },\n    u_dayTextureUseWebMercatorT: function () {\n      return this.properties.dayTextureUseWebMercatorT;\n    },\n    u_dayTextureAlpha: function () {\n      return this.properties.dayTextureAlpha;\n    },\n    u_dayTextureNightAlpha: function () {\n      return this.properties.dayTextureNightAlpha;\n    },\n    u_dayTextureDayAlpha: function () {\n      return this.properties.dayTextureDayAlpha;\n    },\n    u_dayTextureBrightness: function () {\n      return this.properties.dayTextureBrightness;\n    },\n    u_dayTextureContrast: function () {\n      return this.properties.dayTextureContrast;\n    },\n    u_dayTextureHue: function () {\n      return this.properties.dayTextureHue;\n    },\n    u_dayTextureSaturation: function () {\n      return this.properties.dayTextureSaturation;\n    },\n    u_dayTextureOneOverGamma: function () {\n      return this.properties.dayTextureOneOverGamma;\n    },\n    u_dayIntensity: function () {\n      return this.properties.dayIntensity;\n    },\n    u_southAndNorthLatitude: function () {\n      return this.properties.southAndNorthLatitude;\n    },\n    u_southMercatorYAndOneOverHeight: function () {\n      return this.properties.southMercatorYAndOneOverHeight;\n    },\n    u_waterMask: function () {\n      return this.properties.waterMask;\n    },\n    u_waterMaskTranslationAndScale: function () {\n      return this.properties.waterMaskTranslationAndScale;\n    },\n    u_minMaxHeight: function () {\n      return this.properties.minMaxHeight;\n    },\n    u_scaleAndBias: function () {\n      return this.properties.scaleAndBias;\n    },\n    u_dayTextureSplit: function () {\n      return this.properties.dayTextureSplit;\n    },\n    u_dayTextureCutoutRectangles: function () {\n      return this.properties.dayTextureCutoutRectangles;\n    },\n    u_clippingPlanes: function () {\n      var clippingPlanes = globeSurfaceTileProvider._clippingPlanes;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes.texture)) {\n        // Check in case clippingPlanes hasn\'t been updated yet.\n        return clippingPlanes.texture;\n      }\n      return frameState.context.defaultTexture;\n    },\n    u_cartographicLimitRectangle: function () {\n      return this.properties.localizedCartographicLimitRectangle;\n    },\n    u_clippingPlanesMatrix: function () {\n      var clippingPlanes = globeSurfaceTileProvider._clippingPlanes;\n      var transform = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes)\n        ? _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].multiply */ .Z.multiply(\n            frameState.context.uniformState.view,\n            clippingPlanes.modelMatrix,\n            scratchClippingPlanesMatrix\n          )\n        : _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].IDENTITY */ .Z.IDENTITY;\n\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].inverseTranspose */ .Z.inverseTranspose(\n        transform,\n        scratchInverseTransposeClippingPlanesMatrix\n      );\n    },\n    u_clippingPlanesEdgeStyle: function () {\n      var style = this.properties.clippingPlanesEdgeColor;\n      style.alpha = this.properties.clippingPlanesEdgeWidth;\n      return style;\n    },\n    u_minimumBrightness: function () {\n      return frameState.fog.minimumBrightness;\n    },\n    u_hsbShift: function () {\n      return this.properties.hsbShift;\n    },\n    u_colorsToAlpha: function () {\n      return this.properties.colorsToAlpha;\n    },\n    u_frontFaceAlphaByDistance: function () {\n      return this.properties.frontFaceAlphaByDistance;\n    },\n    u_backFaceAlphaByDistance: function () {\n      return this.properties.backFaceAlphaByDistance;\n    },\n    u_translucencyRectangle: function () {\n      return this.properties.localizedTranslucencyRectangle;\n    },\n    u_undergroundColor: function () {\n      return this.properties.undergroundColor;\n    },\n    u_undergroundColorAlphaByDistance: function () {\n      return this.properties.undergroundColorAlphaByDistance;\n    },\n\n    // make a separate object so that changes to the properties are seen on\n    // derived commands that combine another uniform map with this one.\n    properties: {\n      initialColor: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(0.0, 0.0, 0.5, 1.0),\n      fillHighlightColor: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      zoomedOutOceanSpecularIntensity: 0.5,\n      oceanNormalMap: undefined,\n      lightingFadeDistance: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(6500000.0, 9000000.0),\n      nightFadeDistance: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(10000000.0, 40000000.0),\n      hsbShift: new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n\n      center3D: undefined,\n      rtc: new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(),\n      modifiedModelView: new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(),\n      tileRectangle: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n\n      terrainExaggerationAndRelativeHeight: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(1.0, 0.0),\n\n      dayTextures: [],\n      dayTextureTranslationAndScale: [],\n      dayTextureTexCoordsRectangle: [],\n      dayTextureUseWebMercatorT: [],\n      dayTextureAlpha: [],\n      dayTextureNightAlpha: [],\n      dayTextureDayAlpha: [],\n      dayTextureBrightness: [],\n      dayTextureContrast: [],\n      dayTextureHue: [],\n      dayTextureSaturation: [],\n      dayTextureOneOverGamma: [],\n      dayTextureSplit: [],\n      dayTextureCutoutRectangles: [],\n      dayIntensity: 0.0,\n      colorsToAlpha: [],\n\n      southAndNorthLatitude: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n      southMercatorYAndOneOverHeight: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n\n      waterMask: undefined,\n      waterMaskTranslationAndScale: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n\n      minMaxHeight: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(),\n      scaleAndBias: new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(),\n      clippingPlanesEdgeColor: _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].WHITE */ .Z.WHITE),\n      clippingPlanesEdgeWidth: 0.0,\n\n      localizedCartographicLimitRectangle: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n\n      frontFaceAlphaByDistance: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n      backFaceAlphaByDistance: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n      localizedTranslucencyRectangle: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n      undergroundColor: _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].TRANSPARENT */ .Z.TRANSPARENT),\n      undergroundColorAlphaByDistance: new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n    },\n  };\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(globeSurfaceTileProvider.materialUniformMap)) {\n    return (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(uniformMap, globeSurfaceTileProvider.materialUniformMap);\n  }\n\n  return uniformMap;\n}\n\nfunction createWireframeVertexArrayIfNecessary(context, provider, tile) {\n  var surfaceTile = tile.data;\n\n  var mesh;\n  var vertexArray;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.vertexArray)) {\n    mesh = surfaceTile.mesh;\n    vertexArray = surfaceTile.vertexArray;\n  } else if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.fill) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.fill.vertexArray)\n  ) {\n    mesh = surfaceTile.fill.mesh;\n    vertexArray = surfaceTile.fill.vertexArray;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(mesh) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(vertexArray)) {\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.wireframeVertexArray)) {\n    if (surfaceTile.wireframeVertexArray.mesh === mesh) {\n      return;\n    }\n\n    surfaceTile.wireframeVertexArray.destroy();\n    surfaceTile.wireframeVertexArray = undefined;\n  }\n\n  surfaceTile.wireframeVertexArray = createWireframeVertexArray(\n    context,\n    vertexArray,\n    mesh\n  );\n  surfaceTile.wireframeVertexArray.mesh = mesh;\n}\n\n/**\n * Creates a vertex array for wireframe rendering of a terrain tile.\n *\n * @private\n *\n * @param {Context} context The context in which to create the vertex array.\n * @param {VertexArray} vertexArray The existing, non-wireframe vertex array.  The new vertex array\n *                      will share vertex buffers with this existing one.\n * @param {TerrainMesh} terrainMesh The terrain mesh containing non-wireframe indices.\n * @returns {VertexArray} The vertex array for wireframe rendering.\n */\nfunction createWireframeVertexArray(context, vertexArray, terrainMesh) {\n  var indices = terrainMesh.indices;\n\n  var geometry = {\n    indices: indices,\n    primitiveType: _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n  };\n\n  _Core_GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].toWireframe */ .Z.toWireframe(geometry);\n\n  var wireframeIndices = geometry.indices;\n  var wireframeIndexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: wireframeIndices,\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].fromSizeInBytes */ .Z.fromSizeInBytes(\n      wireframeIndices.BYTES_PER_ELEMENT\n    ),\n  });\n  return new _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z({\n    context: context,\n    attributes: vertexArray._attributes,\n    indexBuffer: wireframeIndexBuffer,\n  });\n}\n\nvar getDebugOrientedBoundingBox;\nvar getDebugBoundingSphere;\nvar debugDestroyPrimitive;\n\n(function () {\n  var instanceOBB = new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n    geometry: _Core_BoxOutlineGeometry_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromDimensions */ .Z.fromDimensions({\n      dimensions: new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(2.0, 2.0, 2.0),\n    }),\n  });\n  var instanceSphere = new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n    geometry: new _Core_SphereOutlineGeometry_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z({ radius: 1.0 }),\n  });\n  var modelMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\n  var previousVolume;\n  var primitive;\n\n  function createDebugPrimitive(instance) {\n    return new _Primitive_js__WEBPACK_IMPORTED_MODULE_44__/* ["default"] */ .Z({\n      geometryInstances: instance,\n      appearance: new _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"] */ .Z({\n        translucent: false,\n        flat: true,\n      }),\n      asynchronous: false,\n    });\n  }\n\n  getDebugOrientedBoundingBox = function (obb, color) {\n    if (obb === previousVolume) {\n      return primitive;\n    }\n    debugDestroyPrimitive();\n\n    previousVolume = obb;\n    modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n      obb.halfAxes,\n      obb.center,\n      modelMatrix\n    );\n\n    instanceOBB.modelMatrix = modelMatrix;\n    instanceOBB.attributes.color = _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromColor */ .Z.fromColor(\n      color\n    );\n\n    primitive = createDebugPrimitive(instanceOBB);\n    return primitive;\n  };\n\n  getDebugBoundingSphere = function (sphere, color) {\n    if (sphere === previousVolume) {\n      return primitive;\n    }\n    debugDestroyPrimitive();\n\n    previousVolume = sphere;\n    modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].fromTranslation */ .Z.fromTranslation(sphere.center, modelMatrix);\n    modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].multiplyByUniformScale */ .Z.multiplyByUniformScale(\n      modelMatrix,\n      sphere.radius,\n      modelMatrix\n    );\n\n    instanceSphere.modelMatrix = modelMatrix;\n    instanceSphere.attributes.color = _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromColor */ .Z.fromColor(\n      color\n    );\n\n    primitive = createDebugPrimitive(instanceSphere);\n    return primitive;\n  };\n\n  debugDestroyPrimitive = function () {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(primitive)) {\n      primitive.destroy();\n      primitive = undefined;\n      previousVolume = undefined;\n    }\n  };\n})();\n\nvar otherPassesInitialColor = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0);\nvar surfaceShaderSetOptionsScratch = {\n  frameState: undefined,\n  surfaceTile: undefined,\n  numberOfDayTextures: undefined,\n  applyBrightness: undefined,\n  applyContrast: undefined,\n  applyHue: undefined,\n  applySaturation: undefined,\n  applyGamma: undefined,\n  applyAlpha: undefined,\n  applyDayNightAlpha: undefined,\n  applySplit: undefined,\n  showReflectiveOcean: undefined,\n  showOceanWaves: undefined,\n  enableLighting: undefined,\n  dynamicAtmosphereLighting: undefined,\n  dynamicAtmosphereLightingFromSun: undefined,\n  showGroundAtmosphere: undefined,\n  perFragmentGroundAtmosphere: undefined,\n  hasVertexNormals: undefined,\n  useWebMercatorProjection: undefined,\n  enableFog: undefined,\n  enableClippingPlanes: undefined,\n  clippingPlanes: undefined,\n  clippedByBoundaries: undefined,\n  hasImageryLayerCutout: undefined,\n  colorCorrect: undefined,\n  colorToAlpha: undefined,\n  hasGeodeticSurfaceNormals: undefined,\n  hasExaggeration: undefined,\n};\n\nvar defaultUndergroundColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].TRANSPARENT */ .Z.TRANSPARENT;\nvar defaultundergroundColorAlphaByDistance = new _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z();\n\nfunction addDrawCommandsForTile(tileProvider, tile, frameState) {\n  var surfaceTile = tile.data;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.vertexArray)) {\n    if (surfaceTile.fill === undefined) {\n      // No fill was created for this tile, probably because this tile is not connected to\n      // any renderable tiles. So create a simple tile in the middle of the tile\'s possible\n      // height range.\n      surfaceTile.fill = new _TerrainFillMesh_js__WEBPACK_IMPORTED_MODULE_48__/* ["default"] */ .Z(tile);\n    }\n    surfaceTile.fill.update(tileProvider, frameState);\n  }\n\n  var creditDisplay = frameState.creditDisplay;\n\n  var terrainData = surfaceTile.terrainData;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(terrainData) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(terrainData.credits)) {\n    var tileCredits = terrainData.credits;\n    for (\n      var tileCreditIndex = 0, tileCreditLength = tileCredits.length;\n      tileCreditIndex < tileCreditLength;\n      ++tileCreditIndex\n    ) {\n      creditDisplay.addCredit(tileCredits[tileCreditIndex]);\n    }\n  }\n\n  var maxTextures = _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].maximumTextureImageUnits */ .Z.maximumTextureImageUnits;\n\n  var waterMaskTexture = surfaceTile.waterMaskTexture;\n  var waterMaskTranslationAndScale = surfaceTile.waterMaskTranslationAndScale;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(waterMaskTexture) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.fill)) {\n    waterMaskTexture = surfaceTile.fill.waterMaskTexture;\n    waterMaskTranslationAndScale =\n      surfaceTile.fill.waterMaskTranslationAndScale;\n  }\n\n  var cameraUnderground = frameState.cameraUnderground;\n\n  var globeTranslucencyState = frameState.globeTranslucencyState;\n  var translucent = globeTranslucencyState.translucent;\n  var frontFaceAlphaByDistance =\n    globeTranslucencyState.frontFaceAlphaByDistance;\n  var backFaceAlphaByDistance = globeTranslucencyState.backFaceAlphaByDistance;\n  var translucencyRectangle = globeTranslucencyState.rectangle;\n\n  var undergroundColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    tileProvider.undergroundColor,\n    defaultUndergroundColor\n  );\n  var undergroundColorAlphaByDistance = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    tileProvider.undergroundColorAlphaByDistance,\n    defaultundergroundColorAlphaByDistance\n  );\n  var showUndergroundColor =\n    isUndergroundVisible(tileProvider, frameState) &&\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    undergroundColor.alpha > 0.0 &&\n    (undergroundColorAlphaByDistance.nearValue > 0.0 ||\n      undergroundColorAlphaByDistance.farValue > 0.0);\n\n  var showReflectiveOcean =\n    tileProvider.hasWaterMask && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(waterMaskTexture);\n  var oceanNormalMap = tileProvider.oceanNormalMap;\n  var showOceanWaves = showReflectiveOcean && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(oceanNormalMap);\n  var hasVertexNormals =\n    tileProvider.terrainProvider.ready &&\n    tileProvider.terrainProvider.hasVertexNormals;\n  var enableFog = frameState.fog.enabled && !cameraUnderground;\n  var showGroundAtmosphere =\n    tileProvider.showGroundAtmosphere && frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D;\n  var castShadows =\n    _ShadowMode_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"].castShadows */ .Z.castShadows(tileProvider.shadows) && !translucent;\n  var receiveShadows =\n    _ShadowMode_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"].receiveShadows */ .Z.receiveShadows(tileProvider.shadows) && !translucent;\n\n  var hueShift = tileProvider.hueShift;\n  var saturationShift = tileProvider.saturationShift;\n  var brightnessShift = tileProvider.brightnessShift;\n\n  var colorCorrect = !(\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(hueShift, 0.0, _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7) &&\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(saturationShift, 0.0, _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7) &&\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(brightnessShift, 0.0, _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7)\n  );\n\n  var perFragmentGroundAtmosphere = false;\n  if (showGroundAtmosphere) {\n    var cameraDistance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].magnitude */ .Z.magnitude(frameState.camera.positionWC);\n    var fadeOutDistance = tileProvider.nightFadeOutDistance;\n    perFragmentGroundAtmosphere = cameraDistance > fadeOutDistance;\n  }\n\n  if (showReflectiveOcean) {\n    --maxTextures;\n  }\n  if (showOceanWaves) {\n    --maxTextures;\n  }\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(frameState.shadowState) &&\n    frameState.shadowState.shadowsEnabled\n  ) {\n    --maxTextures;\n  }\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileProvider.clippingPlanes) &&\n    tileProvider.clippingPlanes.enabled\n  ) {\n    --maxTextures;\n  }\n\n  maxTextures -= globeTranslucencyState.numberOfTextureUniforms;\n\n  var mesh = surfaceTile.renderedMesh;\n  var rtc = mesh.center;\n  var encoding = mesh.encoding;\n  var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n\n  var exaggeration = frameState.terrainExaggeration;\n  var exaggerationRelativeHeight = frameState.terrainExaggerationRelativeHeight;\n  var hasExaggeration = exaggeration !== 1.0;\n  var hasGeodeticSurfaceNormals = encoding.hasGeodeticSurfaceNormals;\n\n  // Not used in 3D.\n  var tileRectangle = tileRectangleScratch;\n\n  // Only used for Mercator projections.\n  var southLatitude = 0.0;\n  var northLatitude = 0.0;\n  var southMercatorY = 0.0;\n  var oneOverMercatorHeight = 0.0;\n\n  var useWebMercatorProjection = false;\n\n  if (frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    var projection = frameState.mapProjection;\n    var southwest = projection.project(\n      _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].southwest */ .Z.southwest(tile.rectangle),\n      southwestScratch\n    );\n    var northeast = projection.project(\n      _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].northeast */ .Z.northeast(tile.rectangle),\n      northeastScratch\n    );\n\n    tileRectangle.x = southwest.x;\n    tileRectangle.y = southwest.y;\n    tileRectangle.z = northeast.x;\n    tileRectangle.w = northeast.y;\n\n    // In 2D and Columbus View, use the center of the tile for RTC rendering.\n    if (frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].MORPHING */ .Z.MORPHING) {\n      rtc = rtcScratch;\n      rtc.x = 0.0;\n      rtc.y = (tileRectangle.z + tileRectangle.x) * 0.5;\n      rtc.z = (tileRectangle.w + tileRectangle.y) * 0.5;\n      tileRectangle.x -= rtc.y;\n      tileRectangle.y -= rtc.z;\n      tileRectangle.z -= rtc.y;\n      tileRectangle.w -= rtc.z;\n    }\n\n    if (\n      frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n      encoding.quantization === _Core_TerrainQuantization_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].BITS12 */ .Z.BITS12\n    ) {\n      // In 2D, the texture coordinates of the tile are interpolated over the rectangle to get the position in the vertex shader.\n      // When the texture coordinates are quantized, error is introduced. This can be seen through the 1px wide cracking\n      // between the quantized tiles in 2D. To compensate for the error, move the expand the rectangle in each direction by\n      // half the error amount.\n      var epsilon = (1.0 / (Math.pow(2.0, 12.0) - 1.0)) * 0.5;\n      var widthEpsilon = (tileRectangle.z - tileRectangle.x) * epsilon;\n      var heightEpsilon = (tileRectangle.w - tileRectangle.y) * epsilon;\n      tileRectangle.x -= widthEpsilon;\n      tileRectangle.y -= heightEpsilon;\n      tileRectangle.z += widthEpsilon;\n      tileRectangle.w += heightEpsilon;\n    }\n\n    if (projection instanceof _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z) {\n      southLatitude = tile.rectangle.south;\n      northLatitude = tile.rectangle.north;\n\n      southMercatorY = _Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].geodeticLatitudeToMercatorAngle */ .Z.geodeticLatitudeToMercatorAngle(\n        southLatitude\n      );\n\n      oneOverMercatorHeight =\n        1.0 /\n        (_Core_WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].geodeticLatitudeToMercatorAngle */ .Z.geodeticLatitudeToMercatorAngle(northLatitude) -\n          southMercatorY);\n\n      useWebMercatorProjection = true;\n    }\n  }\n\n  var surfaceShaderSetOptions = surfaceShaderSetOptionsScratch;\n  surfaceShaderSetOptions.frameState = frameState;\n  surfaceShaderSetOptions.surfaceTile = surfaceTile;\n  surfaceShaderSetOptions.showReflectiveOcean = showReflectiveOcean;\n  surfaceShaderSetOptions.showOceanWaves = showOceanWaves;\n  surfaceShaderSetOptions.enableLighting = tileProvider.enableLighting;\n  surfaceShaderSetOptions.dynamicAtmosphereLighting =\n    tileProvider.dynamicAtmosphereLighting;\n  surfaceShaderSetOptions.dynamicAtmosphereLightingFromSun =\n    tileProvider.dynamicAtmosphereLightingFromSun;\n  surfaceShaderSetOptions.showGroundAtmosphere = showGroundAtmosphere;\n  surfaceShaderSetOptions.perFragmentGroundAtmosphere = perFragmentGroundAtmosphere;\n  surfaceShaderSetOptions.hasVertexNormals = hasVertexNormals;\n  surfaceShaderSetOptions.useWebMercatorProjection = useWebMercatorProjection;\n  surfaceShaderSetOptions.clippedByBoundaries = surfaceTile.clippedByBoundaries;\n  surfaceShaderSetOptions.hasGeodeticSurfaceNormals = hasGeodeticSurfaceNormals;\n  surfaceShaderSetOptions.hasExaggeration = hasExaggeration;\n\n  var tileImageryCollection = surfaceTile.imagery;\n  var imageryIndex = 0;\n  var imageryLen = tileImageryCollection.length;\n\n  var showSkirts =\n    tileProvider.showSkirts && !cameraUnderground && !translucent;\n  var backFaceCulling =\n    tileProvider.backFaceCulling && !cameraUnderground && !translucent;\n  var firstPassRenderState = backFaceCulling\n    ? tileProvider._renderState\n    : tileProvider._disableCullingRenderState;\n  var otherPassesRenderState = backFaceCulling\n    ? tileProvider._blendRenderState\n    : tileProvider._disableCullingBlendRenderState;\n  var renderState = firstPassRenderState;\n\n  var initialColor = tileProvider._firstPassInitialColor;\n\n  var context = frameState.context;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileProvider._debug.boundingSphereTile)) {\n    debugDestroyPrimitive();\n  }\n\n  var materialUniformMapChanged =\n    tileProvider._materialUniformMap !== tileProvider.materialUniformMap;\n  if (materialUniformMapChanged) {\n    tileProvider._materialUniformMap = tileProvider.materialUniformMap;\n    var drawCommandsLength = tileProvider._drawCommands.length;\n    for (var i = 0; i < drawCommandsLength; ++i) {\n      tileProvider._uniformMaps[i] = createTileUniformMap(\n        frameState,\n        tileProvider\n      );\n    }\n  }\n\n  do {\n    var numberOfDayTextures = 0;\n\n    var command;\n    var uniformMap;\n\n    if (tileProvider._drawCommands.length <= tileProvider._usedDrawCommands) {\n      command = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z();\n      command.owner = tile;\n      command.cull = false;\n      command.boundingVolume = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n      command.orientedBoundingBox = undefined;\n\n      uniformMap = createTileUniformMap(frameState, tileProvider);\n\n      tileProvider._drawCommands.push(command);\n      tileProvider._uniformMaps.push(uniformMap);\n    } else {\n      command = tileProvider._drawCommands[tileProvider._usedDrawCommands];\n      uniformMap = tileProvider._uniformMaps[tileProvider._usedDrawCommands];\n    }\n\n    command.owner = tile;\n\n    ++tileProvider._usedDrawCommands;\n\n    if (tile === tileProvider._debug.boundingSphereTile) {\n      var obb = tileBoundingRegion.boundingVolume;\n      var boundingSphere = tileBoundingRegion.boundingSphere;\n      // If a debug primitive already exists for this tile, it will not be\n      // re-created, to avoid allocation every frame. If it were possible\n      // to have more than one selected tile, this would have to change.\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(obb)) {\n        getDebugOrientedBoundingBox(obb, _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RED */ .Z.RED).update(frameState);\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(boundingSphere)) {\n        getDebugBoundingSphere(boundingSphere, _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RED */ .Z.RED).update(frameState);\n      }\n    }\n\n    var uniformMapProperties = uniformMap.properties;\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(initialColor, uniformMapProperties.initialColor);\n    uniformMapProperties.oceanNormalMap = oceanNormalMap;\n    uniformMapProperties.lightingFadeDistance.x =\n      tileProvider.lightingFadeOutDistance;\n    uniformMapProperties.lightingFadeDistance.y =\n      tileProvider.lightingFadeInDistance;\n    uniformMapProperties.nightFadeDistance.x =\n      tileProvider.nightFadeOutDistance;\n    uniformMapProperties.nightFadeDistance.y = tileProvider.nightFadeInDistance;\n    uniformMapProperties.zoomedOutOceanSpecularIntensity =\n      tileProvider.zoomedOutOceanSpecularIntensity;\n\n    var frontFaceAlphaByDistanceFinal = cameraUnderground\n      ? backFaceAlphaByDistance\n      : frontFaceAlphaByDistance;\n    var backFaceAlphaByDistanceFinal = cameraUnderground\n      ? frontFaceAlphaByDistance\n      : backFaceAlphaByDistance;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(frontFaceAlphaByDistanceFinal)) {\n      _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromElements */ .Z.fromElements(\n        frontFaceAlphaByDistanceFinal.near,\n        frontFaceAlphaByDistanceFinal.nearValue,\n        frontFaceAlphaByDistanceFinal.far,\n        frontFaceAlphaByDistanceFinal.farValue,\n        uniformMapProperties.frontFaceAlphaByDistance\n      );\n      _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromElements */ .Z.fromElements(\n        backFaceAlphaByDistanceFinal.near,\n        backFaceAlphaByDistanceFinal.nearValue,\n        backFaceAlphaByDistanceFinal.far,\n        backFaceAlphaByDistanceFinal.farValue,\n        uniformMapProperties.backFaceAlphaByDistance\n      );\n    }\n\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromElements */ .Z.fromElements(\n      undergroundColorAlphaByDistance.near,\n      undergroundColorAlphaByDistance.nearValue,\n      undergroundColorAlphaByDistance.far,\n      undergroundColorAlphaByDistance.farValue,\n      uniformMapProperties.undergroundColorAlphaByDistance\n    );\n    _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(undergroundColor, uniformMapProperties.undergroundColor);\n\n    var highlightFillTile =\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.vertexArray) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileProvider.fillHighlightColor) &&\n      tileProvider.fillHighlightColor.alpha > 0.0;\n    if (highlightFillTile) {\n      _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(\n        tileProvider.fillHighlightColor,\n        uniformMapProperties.fillHighlightColor\n      );\n    }\n\n    uniformMapProperties.terrainExaggerationAndRelativeHeight.x = exaggeration;\n    uniformMapProperties.terrainExaggerationAndRelativeHeight.y = exaggerationRelativeHeight;\n\n    uniformMapProperties.center3D = mesh.center;\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(rtc, uniformMapProperties.rtc);\n\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(tileRectangle, uniformMapProperties.tileRectangle);\n    uniformMapProperties.southAndNorthLatitude.x = southLatitude;\n    uniformMapProperties.southAndNorthLatitude.y = northLatitude;\n    uniformMapProperties.southMercatorYAndOneOverHeight.x = southMercatorY;\n    uniformMapProperties.southMercatorYAndOneOverHeight.y = oneOverMercatorHeight;\n\n    // Convert tile limiter rectangle from cartographic to texture space using the tileRectangle.\n    var localizedCartographicLimitRectangle = localizedCartographicLimitRectangleScratch;\n    var cartographicLimitRectangle = clipRectangleAntimeridian(\n      tile.rectangle,\n      tileProvider.cartographicLimitRectangle\n    );\n\n    var localizedTranslucencyRectangle = localizedTranslucencyRectangleScratch;\n    var clippedTranslucencyRectangle = clipRectangleAntimeridian(\n      tile.rectangle,\n      translucencyRectangle\n    );\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromElements */ .Z.fromElements(\n      hueShift,\n      saturationShift,\n      brightnessShift,\n      uniformMapProperties.hsbShift\n    );\n\n    var cartographicTileRectangle = tile.rectangle;\n    var inverseTileWidth = 1.0 / cartographicTileRectangle.width;\n    var inverseTileHeight = 1.0 / cartographicTileRectangle.height;\n    localizedCartographicLimitRectangle.x =\n      (cartographicLimitRectangle.west - cartographicTileRectangle.west) *\n      inverseTileWidth;\n    localizedCartographicLimitRectangle.y =\n      (cartographicLimitRectangle.south - cartographicTileRectangle.south) *\n      inverseTileHeight;\n    localizedCartographicLimitRectangle.z =\n      (cartographicLimitRectangle.east - cartographicTileRectangle.west) *\n      inverseTileWidth;\n    localizedCartographicLimitRectangle.w =\n      (cartographicLimitRectangle.north - cartographicTileRectangle.south) *\n      inverseTileHeight;\n\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(\n      localizedCartographicLimitRectangle,\n      uniformMapProperties.localizedCartographicLimitRectangle\n    );\n\n    localizedTranslucencyRectangle.x =\n      (clippedTranslucencyRectangle.west - cartographicTileRectangle.west) *\n      inverseTileWidth;\n    localizedTranslucencyRectangle.y =\n      (clippedTranslucencyRectangle.south - cartographicTileRectangle.south) *\n      inverseTileHeight;\n    localizedTranslucencyRectangle.z =\n      (clippedTranslucencyRectangle.east - cartographicTileRectangle.west) *\n      inverseTileWidth;\n    localizedTranslucencyRectangle.w =\n      (clippedTranslucencyRectangle.north - cartographicTileRectangle.south) *\n      inverseTileHeight;\n\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(\n      localizedTranslucencyRectangle,\n      uniformMapProperties.localizedTranslucencyRectangle\n    );\n\n    // For performance, use fog in the shader only when the tile is in fog.\n    var applyFog =\n      enableFog &&\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].fog */ .Z.fog(tile._distance, frameState.fog.density) >\n        _Core_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON3 */ .Z.EPSILON3;\n    colorCorrect = colorCorrect && (applyFog || showGroundAtmosphere);\n\n    var applyBrightness = false;\n    var applyContrast = false;\n    var applyHue = false;\n    var applySaturation = false;\n    var applyGamma = false;\n    var applyAlpha = false;\n    var applyDayNightAlpha = false;\n    var applySplit = false;\n    var applyCutout = false;\n    var applyColorToAlpha = false;\n\n    while (numberOfDayTextures < maxTextures && imageryIndex < imageryLen) {\n      var tileImagery = tileImageryCollection[imageryIndex];\n      var imagery = tileImagery.readyImagery;\n      ++imageryIndex;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imagery) || imagery.imageryLayer.alpha === 0.0) {\n        continue;\n      }\n\n      var texture = tileImagery.useWebMercatorT\n        ? imagery.textureWebMercator\n        : imagery.texture;\n\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(texture)) {\n        // Our "ready" texture isn\'t actually ready.  This should never happen.\n        //\n        // Side note: It IS possible for it to not be in the READY ImageryState, though.\n        // This can happen when a single imagery tile is shared by two terrain tiles (common)\n        // and one of them (A) needs a geographic version of the tile because it is near the poles,\n        // and the other (B) does not.  B can and will transition the imagery tile to the READY state\n        // without reprojecting to geographic.  Then, later, A will deem that same tile not-ready-yet\n        // because it only has the Web Mercator texture, and flip it back to the TRANSITIONING state.\n        // The imagery tile won\'t be in the READY state anymore, but it\'s still READY enough for B\'s\n        // purposes.\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("readyImagery is not actually ready!");\n      }\n      //>>includeEnd(\'debug\');\n\n      var imageryLayer = imagery.imageryLayer;\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(tileImagery.textureTranslationAndScale)) {\n        tileImagery.textureTranslationAndScale = imageryLayer._calculateTextureTranslationAndScale(\n          tile,\n          tileImagery\n        );\n      }\n\n      uniformMapProperties.dayTextures[numberOfDayTextures] = texture;\n      uniformMapProperties.dayTextureTranslationAndScale[numberOfDayTextures] =\n        tileImagery.textureTranslationAndScale;\n      uniformMapProperties.dayTextureTexCoordsRectangle[numberOfDayTextures] =\n        tileImagery.textureCoordinateRectangle;\n      uniformMapProperties.dayTextureUseWebMercatorT[numberOfDayTextures] =\n        tileImagery.useWebMercatorT;\n\n      uniformMapProperties.dayTextureAlpha[numberOfDayTextures] =\n        imageryLayer.alpha;\n      applyAlpha =\n        applyAlpha ||\n        uniformMapProperties.dayTextureAlpha[numberOfDayTextures] !== 1.0;\n\n      uniformMapProperties.dayTextureNightAlpha[numberOfDayTextures] =\n        imageryLayer.nightAlpha;\n      applyDayNightAlpha =\n        applyDayNightAlpha ||\n        uniformMapProperties.dayTextureNightAlpha[numberOfDayTextures] !== 1.0;\n\n      uniformMapProperties.dayTextureDayAlpha[numberOfDayTextures] =\n        imageryLayer.dayAlpha;\n      applyDayNightAlpha =\n        applyDayNightAlpha ||\n        uniformMapProperties.dayTextureDayAlpha[numberOfDayTextures] !== 1.0;\n\n      uniformMapProperties.dayTextureBrightness[numberOfDayTextures] =\n        imageryLayer.brightness;\n      applyBrightness =\n        applyBrightness ||\n        uniformMapProperties.dayTextureBrightness[numberOfDayTextures] !==\n          _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].DEFAULT_BRIGHTNESS */ .Z.DEFAULT_BRIGHTNESS;\n\n      uniformMapProperties.dayTextureContrast[numberOfDayTextures] =\n        imageryLayer.contrast;\n      applyContrast =\n        applyContrast ||\n        uniformMapProperties.dayTextureContrast[numberOfDayTextures] !==\n          _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].DEFAULT_CONTRAST */ .Z.DEFAULT_CONTRAST;\n\n      uniformMapProperties.dayTextureHue[numberOfDayTextures] =\n        imageryLayer.hue;\n      applyHue =\n        applyHue ||\n        uniformMapProperties.dayTextureHue[numberOfDayTextures] !==\n          _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].DEFAULT_HUE */ .Z.DEFAULT_HUE;\n\n      uniformMapProperties.dayTextureSaturation[numberOfDayTextures] =\n        imageryLayer.saturation;\n      applySaturation =\n        applySaturation ||\n        uniformMapProperties.dayTextureSaturation[numberOfDayTextures] !==\n          _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].DEFAULT_SATURATION */ .Z.DEFAULT_SATURATION;\n\n      uniformMapProperties.dayTextureOneOverGamma[numberOfDayTextures] =\n        1.0 / imageryLayer.gamma;\n      applyGamma =\n        applyGamma ||\n        uniformMapProperties.dayTextureOneOverGamma[numberOfDayTextures] !==\n          1.0 / _ImageryLayer_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].DEFAULT_GAMMA */ .Z.DEFAULT_GAMMA;\n\n      uniformMapProperties.dayTextureSplit[numberOfDayTextures] =\n        imageryLayer.splitDirection;\n      applySplit =\n        applySplit ||\n        uniformMapProperties.dayTextureSplit[numberOfDayTextures] !== 0.0;\n\n      // Update cutout rectangle\n      var dayTextureCutoutRectangle =\n        uniformMapProperties.dayTextureCutoutRectangles[numberOfDayTextures];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(dayTextureCutoutRectangle)) {\n        dayTextureCutoutRectangle = uniformMapProperties.dayTextureCutoutRectangles[\n          numberOfDayTextures\n        ] = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n      }\n\n      _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(_Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].ZERO */ .Z.ZERO, dayTextureCutoutRectangle);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imageryLayer.cutoutRectangle)) {\n        var cutoutRectangle = clipRectangleAntimeridian(\n          cartographicTileRectangle,\n          imageryLayer.cutoutRectangle\n        );\n        var intersection = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].simpleIntersection */ .Z.simpleIntersection(\n          cutoutRectangle,\n          cartographicTileRectangle,\n          rectangleIntersectionScratch\n        );\n        applyCutout = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(intersection) || applyCutout;\n\n        dayTextureCutoutRectangle.x =\n          (cutoutRectangle.west - cartographicTileRectangle.west) *\n          inverseTileWidth;\n        dayTextureCutoutRectangle.y =\n          (cutoutRectangle.south - cartographicTileRectangle.south) *\n          inverseTileHeight;\n        dayTextureCutoutRectangle.z =\n          (cutoutRectangle.east - cartographicTileRectangle.west) *\n          inverseTileWidth;\n        dayTextureCutoutRectangle.w =\n          (cutoutRectangle.north - cartographicTileRectangle.south) *\n          inverseTileHeight;\n      }\n\n      // Update color to alpha\n      var colorToAlpha =\n        uniformMapProperties.colorsToAlpha[numberOfDayTextures];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(colorToAlpha)) {\n        colorToAlpha = uniformMapProperties.colorsToAlpha[\n          numberOfDayTextures\n        ] = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n      }\n\n      var hasColorToAlpha =\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imageryLayer.colorToAlpha) &&\n        imageryLayer.colorToAlphaThreshold > 0.0;\n      applyColorToAlpha = applyColorToAlpha || hasColorToAlpha;\n\n      if (hasColorToAlpha) {\n        var color = imageryLayer.colorToAlpha;\n        colorToAlpha.x = color.red;\n        colorToAlpha.y = color.green;\n        colorToAlpha.z = color.blue;\n        colorToAlpha.w = imageryLayer.colorToAlphaThreshold;\n      } else {\n        colorToAlpha.w = -1.0;\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(imagery.credits)) {\n        var credits = imagery.credits;\n        for (\n          var creditIndex = 0, creditLength = credits.length;\n          creditIndex < creditLength;\n          ++creditIndex\n        ) {\n          creditDisplay.addCredit(credits[creditIndex]);\n        }\n      }\n\n      ++numberOfDayTextures;\n    }\n\n    // trim texture array to the used length so we don\'t end up using old textures\n    // which might get destroyed eventually\n    uniformMapProperties.dayTextures.length = numberOfDayTextures;\n    uniformMapProperties.waterMask = waterMaskTexture;\n    _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(\n      waterMaskTranslationAndScale,\n      uniformMapProperties.waterMaskTranslationAndScale\n    );\n\n    uniformMapProperties.minMaxHeight.x = encoding.minimumHeight;\n    uniformMapProperties.minMaxHeight.y = encoding.maximumHeight;\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].clone */ .Z.clone(encoding.matrix, uniformMapProperties.scaleAndBias);\n\n    // update clipping planes\n    var clippingPlanes = tileProvider._clippingPlanes;\n    var clippingPlanesEnabled =\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled && tile.isClipped;\n    if (clippingPlanesEnabled) {\n      uniformMapProperties.clippingPlanesEdgeColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(\n        clippingPlanes.edgeColor,\n        uniformMapProperties.clippingPlanesEdgeColor\n      );\n      uniformMapProperties.clippingPlanesEdgeWidth = clippingPlanes.edgeWidth;\n    }\n\n    surfaceShaderSetOptions.numberOfDayTextures = numberOfDayTextures;\n    surfaceShaderSetOptions.applyBrightness = applyBrightness;\n    surfaceShaderSetOptions.applyContrast = applyContrast;\n    surfaceShaderSetOptions.applyHue = applyHue;\n    surfaceShaderSetOptions.applySaturation = applySaturation;\n    surfaceShaderSetOptions.applyGamma = applyGamma;\n    surfaceShaderSetOptions.applyAlpha = applyAlpha;\n    surfaceShaderSetOptions.applyDayNightAlpha = applyDayNightAlpha;\n    surfaceShaderSetOptions.applySplit = applySplit;\n    surfaceShaderSetOptions.enableFog = applyFog;\n    surfaceShaderSetOptions.enableClippingPlanes = clippingPlanesEnabled;\n    surfaceShaderSetOptions.clippingPlanes = clippingPlanes;\n    surfaceShaderSetOptions.hasImageryLayerCutout = applyCutout;\n    surfaceShaderSetOptions.colorCorrect = colorCorrect;\n    surfaceShaderSetOptions.highlightFillTile = highlightFillTile;\n    surfaceShaderSetOptions.colorToAlpha = applyColorToAlpha;\n    surfaceShaderSetOptions.showUndergroundColor = showUndergroundColor;\n    surfaceShaderSetOptions.translucent = translucent;\n\n    var count = surfaceTile.renderedMesh.indices.length;\n    if (!showSkirts) {\n      count = surfaceTile.renderedMesh.indexCountWithoutSkirts;\n    }\n\n    command.shaderProgram = tileProvider._surfaceShaderSet.getShaderProgram(\n      surfaceShaderSetOptions\n    );\n    command.castShadows = castShadows;\n    command.receiveShadows = receiveShadows;\n    command.renderState = renderState;\n    command.primitiveType = _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].TRIANGLES */ .Z.TRIANGLES;\n    command.vertexArray =\n      surfaceTile.vertexArray || surfaceTile.fill.vertexArray;\n    command.count = count;\n    command.uniformMap = uniformMap;\n    command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE;\n\n    if (tileProvider._debug.wireframe) {\n      createWireframeVertexArrayIfNecessary(context, tileProvider, tile);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z)(surfaceTile.wireframeVertexArray)) {\n        command.vertexArray = surfaceTile.wireframeVertexArray;\n        command.primitiveType = _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].LINES */ .Z.LINES;\n        command.count = count * 2;\n      }\n    }\n\n    var boundingVolume = command.boundingVolume;\n    var orientedBoundingBox = command.orientedBoundingBox;\n\n    if (frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n      _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRectangleWithHeights2D */ .Z.fromRectangleWithHeights2D(\n        tile.rectangle,\n        frameState.mapProjection,\n        tileBoundingRegion.minimumHeight,\n        tileBoundingRegion.maximumHeight,\n        boundingVolume\n      );\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromElements */ .Z.fromElements(\n        boundingVolume.center.z,\n        boundingVolume.center.x,\n        boundingVolume.center.y,\n        boundingVolume.center\n      );\n\n      if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"].MORPHING */ .Z.MORPHING) {\n        boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].union */ .Z.union(\n          tileBoundingRegion.boundingSphere,\n          boundingVolume,\n          boundingVolume\n        );\n      }\n    } else {\n      command.boundingVolume = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n        tileBoundingRegion.boundingSphere,\n        boundingVolume\n      );\n      command.orientedBoundingBox = _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].clone */ .Z.clone(\n        tileBoundingRegion.boundingVolume,\n        orientedBoundingBox\n      );\n    }\n\n    command.dirty = true;\n\n    if (translucent) {\n      globeTranslucencyState.updateDerivedCommands(command, frameState);\n    }\n\n    pushCommand(command, frameState);\n\n    renderState = otherPassesRenderState;\n    initialColor = otherPassesInitialColor;\n  } while (imageryIndex < imageryLen);\n}\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeSurfaceTileProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32110\n')},90538:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n/* harmony import */ var _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15720);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96190);\n\n\n\n\n\n\n/**\n * Properties for controlling globe translucency.\n *\n * @alias GlobeTranslucency\n * @constructor\n */\nfunction GlobeTranslucency() {\n  this._enabled = false;\n  this._frontFaceAlpha = 1.0;\n  this._frontFaceAlphaByDistance = undefined;\n  this._backFaceAlpha = 1.0;\n  this._backFaceAlphaByDistance = undefined;\n  this._rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE);\n}\n\nObject.defineProperties(GlobeTranslucency.prototype, {\n  /**\n   * When true, the globe is rendered as a translucent surface.\n   * <br /><br />\n   * The alpha is computed by blending {@link Globe#material}, {@link Globe#imageryLayers},\n   * and {@link Globe#baseColor}, all of which may contain translucency, and then multiplying by\n   * {@link GlobeTranslucency#frontFaceAlpha} and {@link GlobeTranslucency#frontFaceAlphaByDistance} for front faces and\n   * {@link GlobeTranslucency#backFaceAlpha} and {@link GlobeTranslucency#backFaceAlphaByDistance} for back faces.\n   * When the camera is underground back faces and front faces are swapped, i.e. back-facing geometry\n   * is considered front facing.\n   * <br /><br />\n   * Translucency is disabled by default.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   * @see GlobeTranslucency#frontFaceAlpha\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   * @see GlobeTranslucency#backFaceAlpha\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.bool */ .Z.typeOf.bool("enabled", value);\n      //>>includeEnd(\'debug\');\n      this._enabled = value;\n    },\n  },\n\n  /**\n   * A constant translucency to apply to front faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   *\n   * @example\n   * // Set front face translucency to 0.5.\n   * globe.translucency.frontFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  frontFaceAlpha: {\n    get: function () {\n      return this._frontFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("frontFaceAlpha", value, 0.0);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals("frontFaceAlpha", value, 1.0);\n      //>>includeEnd(\'debug\');\n      this._frontFaceAlpha = value;\n    },\n  },\n  /**\n   * Gets or sets near and far translucency properties of front faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * frontFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set front face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable front face translucency by distance\n   * globe.translucency.frontFaceAlphaByDistance = undefined;\n   */\n  frontFaceAlphaByDistance: {\n    get: function () {\n      return this._frontFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value) && value.far < value.near) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n          "far distance must be greater than near distance."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      this._frontFaceAlphaByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n        value,\n        this._frontFaceAlphaByDistance\n      );\n    },\n  },\n\n  /**\n   * A constant translucency to apply to back faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   *\n   * @example\n   * // Set back face translucency to 0.5.\n   * globe.translucency.backFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  backFaceAlpha: {\n    get: function () {\n      return this._backFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("backFaceAlpha", value, 0.0);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals("backFaceAlpha", value, 1.0);\n      //>>includeEnd(\'debug\');\n      this._backFaceAlpha = value;\n    },\n  },\n  /**\n   * Gets or sets near and far translucency properties of back faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * backFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set back face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.backFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable back face translucency by distance\n   * globe.translucency.backFaceAlphaByDistance = undefined;\n   */\n  backFaceAlphaByDistance: {\n    get: function () {\n      return this._backFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value) && value.far < value.near) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n          "far distance must be greater than near distance."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      this._backFaceAlphaByDistance = _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(\n        value,\n        this._backFaceAlphaByDistance\n      );\n    },\n  },\n\n  /**\n   * A property specifying a {@link Rectangle} used to limit translucency to a cartographic area.\n   * Defaults to the maximum extent of cartographic coordinates.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Rectangle}\n   * @default {@link Rectangle.MAX_VALUE}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n    set: function (value) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value)) {\n        value = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE);\n      }\n      _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(value, this._rectangle);\n    },\n  },\n});\n\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeTranslucency);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90538\n')},55606:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88108);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2932);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Renderbuffer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(17941);\n/* harmony import */ var _Renderer_RenderbufferFormat_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(89032);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8743);\n/* harmony import */ var _Shaders_PostProcessStages_PassThroughDepth_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82239);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction GlobeTranslucencyFramebuffer() {\n  this._colorTexture = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n  this._framebuffer = undefined;\n\n  this._packedDepthTexture = undefined;\n  this._packedDepthFramebuffer = undefined;\n\n  this._renderState = undefined;\n\n  this._packedDepthCommand = undefined;\n  this._clearCommand = undefined;\n\n  this._viewport = new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._useScissorTest = false;\n  this._scissorRectangle = undefined;\n  this._useHdr = undefined;\n}\n\nObject.defineProperties(GlobeTranslucencyFramebuffer.prototype, {\n  classificationTexture: {\n    get: function () {\n      return this._colorTexture;\n    },\n  },\n  classificationFramebuffer: {\n    get: function () {\n      return this._framebuffer;\n    },\n  },\n});\n\nfunction destroyResources(globeTranslucency) {\n  globeTranslucency._colorTexture =\n    globeTranslucency._colorTexture &&\n    !globeTranslucency._colorTexture.isDestroyed() &&\n    globeTranslucency._colorTexture.destroy();\n  globeTranslucency._depthStencilTexture =\n    globeTranslucency._depthStencilTexture &&\n    !globeTranslucency._depthStencilTexture.isDestroyed() &&\n    globeTranslucency._depthStencilTexture.destroy();\n  globeTranslucency._depthStencilRenderbuffer =\n    globeTranslucency._depthStencilRenderbuffer &&\n    !globeTranslucency._depthStencilRenderbuffer.isDestroyed() &&\n    globeTranslucency._depthStencilRenderbuffer.destroy();\n  globeTranslucency._framebuffer =\n    globeTranslucency._framebuffer &&\n    !globeTranslucency._framebuffer.isDestroyed() &&\n    globeTranslucency._framebuffer.destroy();\n  globeTranslucency._packedDepthTexture =\n    globeTranslucency._packedDepthTexture &&\n    !globeTranslucency._packedDepthTexture.isDestroyed() &&\n    globeTranslucency._packedDepthTexture.destroy();\n  globeTranslucency._packedDepthFramebuffer =\n    globeTranslucency._packedDepthFramebuffer &&\n    !globeTranslucency._packedDepthFramebuffer.isDestroyed() &&\n    globeTranslucency._packedDepthFramebuffer.destroy();\n}\n\nfunction createResources(globeTranslucency, context, width, height, hdr) {\n  var pixelDatatype = hdr\n    ? context.halfFloatingPointTexture\n      ? _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT\n      : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT\n    : _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE;\n  globeTranslucency._colorTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: pixelDatatype,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n\n  if (context.depthTexture) {\n    globeTranslucency._depthStencilTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n      context: context,\n      width: width,\n      height: height,\n      pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].DEPTH_STENCIL */ .Z.DEPTH_STENCIL,\n      pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_INT_24_8 */ .Z.UNSIGNED_INT_24_8,\n    });\n  } else {\n    globeTranslucency._depthStencilRenderbuffer = new _Renderer_Renderbuffer_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      context: context,\n      width: width,\n      height: height,\n      format: _Renderer_RenderbufferFormat_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].DEPTH_STENCIL */ .Z.DEPTH_STENCIL,\n    });\n  }\n\n  globeTranslucency._framebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeTranslucency._colorTexture],\n    depthStencilTexture: globeTranslucency._depthStencilTexture,\n    depthStencilRenderbuffer: globeTranslucency._depthStencilRenderbuffer,\n    destroyAttachments: false,\n  });\n\n  globeTranslucency._packedDepthTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    context: context,\n    width: width,\n    height: height,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n    sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NEAREST */ .Z.NEAREST,\n  });\n\n  globeTranslucency._packedDepthFramebuffer = new _Renderer_Framebuffer_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [globeTranslucency._packedDepthTexture],\n    destroyAttachments: false,\n  });\n}\n\nfunction updateResources(globeTranslucency, context, width, height, hdr) {\n  var colorTexture = globeTranslucency._colorTexture;\n  var textureChanged =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(colorTexture) ||\n    colorTexture.width !== width ||\n    colorTexture.height !== height ||\n    hdr !== globeTranslucency._useHdr;\n  if (textureChanged) {\n    destroyResources(globeTranslucency);\n    createResources(globeTranslucency, context, width, height, hdr);\n  }\n}\n\nfunction updateCommands(globeTranslucency, context, width, height, passState) {\n  globeTranslucency._viewport.width = width;\n  globeTranslucency._viewport.height = height;\n\n  var useScissorTest = !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(\n    globeTranslucency._viewport,\n    passState.viewport\n  );\n  var updateScissor = useScissorTest !== globeTranslucency._useScissorTest;\n  globeTranslucency._useScissorTest = useScissorTest;\n\n  if (\n    !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(\n      globeTranslucency._scissorRectangle,\n      passState.viewport\n    )\n  ) {\n    globeTranslucency._scissorRectangle = _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n      passState.viewport,\n      globeTranslucency._scissorRectangle\n    );\n    updateScissor = true;\n  }\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(globeTranslucency._renderState) ||\n    !_Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(\n      globeTranslucency._viewport,\n      globeTranslucency._renderState.viewport\n    ) ||\n    updateScissor\n  ) {\n    globeTranslucency._renderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].fromCache */ .Z.fromCache({\n      viewport: globeTranslucency._viewport,\n      scissorTest: {\n        enabled: globeTranslucency._useScissorTest,\n        rectangle: globeTranslucency._scissorRectangle,\n      },\n    });\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(globeTranslucency._packedDepthCommand)) {\n    globeTranslucency._packedDepthCommand = context.createViewportQuadCommand(\n      _Shaders_PostProcessStages_PassThroughDepth_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z,\n      {\n        uniformMap: {\n          u_depthTexture: function () {\n            return globeTranslucency._depthStencilTexture;\n          },\n        },\n        owner: globeTranslucency,\n      }\n    );\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(globeTranslucency._clearCommand)) {\n    globeTranslucency._clearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n      color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n      depth: 1.0,\n      stencil: 0.0,\n      owner: globeTranslucency,\n    });\n  }\n\n  globeTranslucency._packedDepthCommand.framebuffer =\n    globeTranslucency._packedDepthFramebuffer;\n  globeTranslucency._packedDepthCommand.renderState =\n    globeTranslucency._renderState;\n  globeTranslucency._clearCommand.framebuffer = globeTranslucency._framebuffer;\n  globeTranslucency._clearCommand.renderState = globeTranslucency._renderState;\n}\n\nGlobeTranslucencyFramebuffer.prototype.updateAndClear = function (\n  hdr,\n  viewport,\n  context,\n  passState\n) {\n  var width = viewport.width;\n  var height = viewport.height;\n\n  updateResources(this, context, width, height, hdr);\n  updateCommands(this, context, width, height, passState);\n\n  this._useHdr = hdr;\n};\n\nGlobeTranslucencyFramebuffer.prototype.clearClassification = function (\n  context,\n  passState\n) {\n  this._clearCommand.execute(context, passState);\n};\n\nGlobeTranslucencyFramebuffer.prototype.packDepth = function (\n  context,\n  passState\n) {\n  this._packedDepthCommand.execute(context, passState);\n  return this._packedDepthTexture;\n};\n\nGlobeTranslucencyFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nGlobeTranslucencyFramebuffer.prototype.destroy = function () {\n  destroyResources(this);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeTranslucencyFramebuffer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55606\n')},85985:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8182);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(82982);\n/* harmony import */ var _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15720);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96190);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(60072);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(53642);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(13633);\n/* harmony import */ var _CullFace_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(71593);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(89917);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DerivedCommandType = {\n  OPAQUE_FRONT_FACE: 0,\n  OPAQUE_BACK_FACE: 1,\n  DEPTH_ONLY_FRONT_FACE: 2,\n  DEPTH_ONLY_BACK_FACE: 3,\n  DEPTH_ONLY_FRONT_AND_BACK_FACE: 4,\n  TRANSLUCENT_FRONT_FACE: 5,\n  TRANSLUCENT_BACK_FACE: 6,\n  TRANSLUCENT_FRONT_FACE_MANUAL_DEPTH_TEST: 7,\n  TRANSLUCENT_BACK_FACE_MANUAL_DEPTH_TEST: 8,\n  PICK_FRONT_FACE: 9,\n  PICK_BACK_FACE: 10,\n  DERIVED_COMMANDS_MAXIMUM_LENGTH: 11,\n};\n\nvar derivedCommandsMaximumLength =\n  DerivedCommandType.DERIVED_COMMANDS_MAXIMUM_LENGTH;\n\nvar DerivedCommandNames = [\n  "opaqueFrontFaceCommand",\n  "opaqueBackFaceCommand",\n  "depthOnlyFrontFaceCommand",\n  "depthOnlyBackFaceCommand",\n  "depthOnlyFrontAndBackFaceCommand",\n  "translucentFrontFaceCommand",\n  "translucentBackFaceCommand",\n  "translucentFrontFaceManualDepthTestCommand",\n  "translucentBackFaceManualDepthTestCommand",\n  "pickFrontFaceCommand",\n  "pickBackFaceCommand",\n];\n\n/**\n * @private\n */\nfunction GlobeTranslucencyState() {\n  this._frontFaceAlphaByDistance = new _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 1.0, 0.0, 1.0);\n  this._backFaceAlphaByDistance = new _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 1.0, 0.0, 1.0);\n\n  this._frontFaceTranslucent = false;\n  this._backFaceTranslucent = false;\n  this._requiresManualDepthTest = false;\n  this._sunVisibleThroughGlobe = false;\n  this._environmentVisible = false;\n  this._useDepthPlane = false;\n  this._numberOfTextureUniforms = 0;\n  this._globeTranslucencyFramebuffer = undefined;\n  this._rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].MAX_VALUE */ .Z.MAX_VALUE);\n\n  this._derivedCommandKey = 0;\n  this._derivedCommandsDirty = false;\n  this._derivedCommandPacks = undefined;\n\n  this._derivedCommandTypes = new Array(derivedCommandsMaximumLength);\n  this._derivedBlendCommandTypes = new Array(derivedCommandsMaximumLength);\n  this._derivedPickCommandTypes = new Array(derivedCommandsMaximumLength);\n  this._derivedCommandTypesToUpdate = new Array(derivedCommandsMaximumLength);\n\n  this._derivedCommandsLength = 0;\n  this._derivedBlendCommandsLength = 0;\n  this._derivedPickCommandsLength = 0;\n  this._derivedCommandsToUpdateLength = 0;\n}\n\nObject.defineProperties(GlobeTranslucencyState.prototype, {\n  frontFaceAlphaByDistance: {\n    get: function () {\n      return this._frontFaceAlphaByDistance;\n    },\n  },\n  backFaceAlphaByDistance: {\n    get: function () {\n      return this._backFaceAlphaByDistance;\n    },\n  },\n  translucent: {\n    get: function () {\n      return this._frontFaceTranslucent;\n    },\n  },\n  sunVisibleThroughGlobe: {\n    get: function () {\n      return this._sunVisibleThroughGlobe;\n    },\n  },\n  environmentVisible: {\n    get: function () {\n      return this._environmentVisible;\n    },\n  },\n  useDepthPlane: {\n    get: function () {\n      return this._useDepthPlane;\n    },\n  },\n  numberOfTextureUniforms: {\n    get: function () {\n      return this._numberOfTextureUniforms;\n    },\n  },\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n});\n\nGlobeTranslucencyState.prototype.update = function (scene) {\n  var globe = scene.globe;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(globe) || !globe.show) {\n    this._frontFaceTranslucent = false;\n    this._backFaceTranslucent = false;\n    this._sunVisibleThroughGlobe = true;\n    this._environmentVisible = true;\n    this._useDepthPlane = false;\n    return;\n  }\n\n  this._frontFaceAlphaByDistance = updateAlphaByDistance(\n    globe.translucency.enabled,\n    globe.translucency.frontFaceAlpha,\n    globe.translucency.frontFaceAlphaByDistance,\n    this._frontFaceAlphaByDistance\n  );\n  this._backFaceAlphaByDistance = updateAlphaByDistance(\n    globe.translucency.enabled,\n    globe.translucency.backFaceAlpha,\n    globe.translucency.backFaceAlphaByDistance,\n    this._backFaceAlphaByDistance\n  );\n\n  this._frontFaceTranslucent = isFaceTranslucent(\n    globe.translucency.enabled,\n    this._frontFaceAlphaByDistance,\n    globe\n  );\n  this._backFaceTranslucent = isFaceTranslucent(\n    globe.translucency.enabled,\n    this._backFaceAlphaByDistance,\n    globe\n  );\n\n  this._requiresManualDepthTest = requiresManualDepthTest(this, scene, globe);\n\n  this._sunVisibleThroughGlobe = isSunVisibleThroughGlobe(this, scene);\n  this._environmentVisible = isEnvironmentVisible(this, scene);\n  this._useDepthPlane = useDepthPlane(this, scene);\n  this._numberOfTextureUniforms = getNumberOfTextureUniforms(this);\n\n  this._rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(\n    globe.translucency.rectangle,\n    this._rectangle\n  );\n\n  gatherDerivedCommandRequirements(this, scene);\n};\n\nfunction updateAlphaByDistance(enabled, alpha, alphaByDistance, result) {\n  if (!enabled) {\n    result.nearValue = 1.0;\n    result.farValue = 1.0;\n    return result;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(alphaByDistance)) {\n    result.nearValue = alpha;\n    result.farValue = alpha;\n    return result;\n  }\n\n  _Core_NearFarScalar_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(alphaByDistance, result);\n  result.nearValue *= alpha;\n  result.farValue *= alpha;\n  return result;\n}\n\nfunction isFaceTranslucent(translucencyEnabled, alphaByDistance, globe) {\n  return (\n    translucencyEnabled &&\n    (globe.baseColor.alpha < 1.0 ||\n      alphaByDistance.nearValue < 1.0 ||\n      alphaByDistance.farValue < 1.0)\n  );\n}\n\nfunction isSunVisibleThroughGlobe(state, scene) {\n  // The sun is visible through the globe if the front and back faces are translucent when above ground\n  // or if front faces are translucent when below ground\n  var frontTranslucent = state._frontFaceTranslucent;\n  var backTranslucent = state._backFaceTranslucent;\n  return frontTranslucent && (scene.cameraUnderground || backTranslucent);\n}\n\nfunction isEnvironmentVisible(state, scene) {\n  // The environment is visible if the camera is above ground or underground with translucency\n  return !scene.cameraUnderground || state._frontFaceTranslucent;\n}\n\nfunction useDepthPlane(state, scene) {\n  // Use the depth plane when the camera is above ground and the globe is opaque\n  return !scene.cameraUnderground && !state._frontFaceTranslucent;\n}\n\nfunction requiresManualDepthTest(state, scene, globe) {\n  return (\n    state._frontFaceTranslucent &&\n    !state._backFaceTranslucent &&\n    !globe.depthTestAgainstTerrain &&\n    scene.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n    scene.context.depthTexture\n  );\n}\n\nfunction getNumberOfTextureUniforms(state) {\n  var numberOfTextureUniforms = 0;\n\n  if (state._frontFaceTranslucent) {\n    ++numberOfTextureUniforms; // classification texture\n  }\n\n  if (state._requiresManualDepthTest) {\n    ++numberOfTextureUniforms; // czm_globeDepthTexture for manual depth testing\n  }\n\n  return numberOfTextureUniforms;\n}\n\nfunction gatherDerivedCommandRequirements(state, scene) {\n  state._derivedCommandsLength = getDerivedCommandTypes(\n    state,\n    scene,\n    false,\n    false,\n    state._derivedCommandTypes\n  );\n\n  state._derivedBlendCommandsLength = getDerivedCommandTypes(\n    state,\n    scene,\n    true,\n    false,\n    state._derivedBlendCommandTypes\n  );\n\n  state._derivedPickCommandsLength = getDerivedCommandTypes(\n    state,\n    scene,\n    false,\n    true,\n    state._derivedPickCommandTypes\n  );\n\n  var i;\n\n  var derivedCommandKey = 0;\n  for (i = 0; i < state._derivedCommandsLength; ++i) {\n    derivedCommandKey |= 1 << state._derivedCommandTypes[i];\n  }\n  for (i = 0; i < state._derivedBlendCommandsLength; ++i) {\n    derivedCommandKey |= 1 << state._derivedBlendCommandTypes[i];\n  }\n  for (i = 0; i < state._derivedPickCommandsLength; ++i) {\n    derivedCommandKey |= 1 << state._derivedPickCommandTypes[i];\n  }\n\n  var derivedCommandsToUpdateLength = 0;\n  for (i = 0; i < derivedCommandsMaximumLength; ++i) {\n    if ((derivedCommandKey & (1 << i)) > 0) {\n      state._derivedCommandTypesToUpdate[derivedCommandsToUpdateLength++] = i;\n    }\n  }\n  state._derivedCommandsToUpdateLength = derivedCommandsToUpdateLength;\n\n  var derivedCommandsDirty = derivedCommandKey !== state._derivedCommandKey;\n  state._derivedCommandKey = derivedCommandKey;\n  state._derivedCommandsDirty = derivedCommandsDirty;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(state._derivedCommandPacks) && state._frontFaceTranslucent) {\n    state._derivedCommandPacks = createDerivedCommandPacks();\n  }\n}\n\nfunction getDerivedCommandTypes(\n  state,\n  scene,\n  isBlendCommand,\n  isPickCommand,\n  types\n) {\n  var length = 0;\n\n  var frontTranslucent = state._frontFaceTranslucent;\n  var backTranslucent = state._backFaceTranslucent;\n\n  if (!frontTranslucent) {\n    // Don\'t use derived commands if the globe is opaque\n    return length;\n  }\n\n  var cameraUnderground = scene.cameraUnderground;\n  var requiresManualDepthTest = state._requiresManualDepthTest;\n\n  var translucentFrontFaceCommandType = isPickCommand\n    ? DerivedCommandType.PICK_FRONT_FACE\n    : requiresManualDepthTest\n    ? DerivedCommandType.TRANSLUCENT_FRONT_FACE_MANUAL_DEPTH_TEST\n    : DerivedCommandType.TRANSLUCENT_FRONT_FACE;\n\n  var translucentBackFaceCommandType = isPickCommand\n    ? DerivedCommandType.PICK_BACK_FACE\n    : requiresManualDepthTest\n    ? DerivedCommandType.TRANSLUCENT_BACK_FACE_MANUAL_DEPTH_TEST\n    : DerivedCommandType.TRANSLUCENT_BACK_FACE;\n\n  if (scene.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n    types[length++] = DerivedCommandType.DEPTH_ONLY_FRONT_FACE;\n    types[length++] = translucentFrontFaceCommandType;\n    return length;\n  }\n\n  if (backTranslucent) {\n    // Push depth-only command for classification. Blend commands do not need to write depth.\n    // Push translucent commands for front and back faces.\n    if (!isBlendCommand) {\n      types[length++] = DerivedCommandType.DEPTH_ONLY_FRONT_AND_BACK_FACE;\n    }\n    if (cameraUnderground) {\n      types[length++] = translucentFrontFaceCommandType;\n      types[length++] = translucentBackFaceCommandType;\n    } else {\n      types[length++] = translucentBackFaceCommandType;\n      types[length++] = translucentFrontFaceCommandType;\n    }\n  } else {\n    // Push opaque command for the face that appears in back.\n    // Push depth-only command and translucent command for the face that appears in front.\n    // eslint-disable-next-line no-lonely-if\n    if (cameraUnderground) {\n      if (!isBlendCommand) {\n        types[length++] = DerivedCommandType.DEPTH_ONLY_BACK_FACE;\n      }\n      types[length++] = DerivedCommandType.OPAQUE_FRONT_FACE;\n      types[length++] = translucentBackFaceCommandType;\n    } else {\n      if (!isBlendCommand) {\n        types[length++] = DerivedCommandType.DEPTH_ONLY_FRONT_FACE;\n      }\n      types[length++] = DerivedCommandType.OPAQUE_BACK_FACE;\n      types[length++] = translucentFrontFaceCommandType;\n    }\n  }\n\n  return length;\n}\n\nfunction removeDefine(defines, defineToRemove) {\n  var index = defines.indexOf(defineToRemove);\n  if (index > -1) {\n    defines.splice(index, 1);\n  }\n}\n\nfunction hasDefine(defines, define) {\n  return defines.indexOf(define) > -1;\n}\n\nfunction getOpaqueFrontFaceShaderProgram(vs, fs) {\n  removeDefine(vs.defines, "TRANSLUCENT");\n  removeDefine(fs.defines, "TRANSLUCENT");\n}\n\nfunction getOpaqueBackFaceShaderProgram(vs, fs) {\n  removeDefine(vs.defines, "GROUND_ATMOSPHERE");\n  removeDefine(fs.defines, "GROUND_ATMOSPHERE");\n  removeDefine(vs.defines, "FOG");\n  removeDefine(fs.defines, "FOG");\n  removeDefine(vs.defines, "TRANSLUCENT");\n  removeDefine(fs.defines, "TRANSLUCENT");\n}\n\nfunction getDepthOnlyShaderProgram(vs, fs) {\n  if (\n    hasDefine(fs.defines, "TILE_LIMIT_RECTANGLE") ||\n    hasDefine(fs.defines, "ENABLE_CLIPPING_PLANES")\n  ) {\n    // Need to execute the full shader if discard is called\n    return;\n  }\n\n  var depthOnlyShader =\n    "void main() \\n" + "{ \\n" + "    gl_FragColor = vec4(1.0); \\n" + "} \\n";\n\n  fs.sources = [depthOnlyShader];\n}\n\nfunction getTranslucentShaderProgram(vs, fs) {\n  var sources = fs.sources;\n  var length = sources.length;\n  for (var i = 0; i < length; ++i) {\n    sources[i] = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].replaceMain */ .Z.replaceMain(\n      sources[i],\n      "czm_globe_translucency_main"\n    );\n  }\n\n  var globeTranslucencyMain =\n    "\\n\\n" +\n    "uniform sampler2D u_classificationTexture; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    vec2 st = gl_FragCoord.xy / czm_viewport.zw; \\n" +\n    "#ifdef MANUAL_DEPTH_TEST \\n" +\n    "    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, st)); \\n" +\n    "    if (logDepthOrDepth != 0.0) \\n" +\n    "    { \\n" +\n    "        vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth); \\n" +\n    "        float depthEC = eyeCoordinate.z / eyeCoordinate.w; \\n" +\n    "        if (v_positionEC.z < depthEC) \\n" +\n    "        { \\n" +\n    "            discard; \\n" +\n    "        } \\n" +\n    "    } \\n" +\n    "#endif \\n" +\n    "    czm_globe_translucency_main(); \\n" +\n    "    vec4 classificationColor = texture2D(u_classificationTexture, st); \\n" +\n    "    if (classificationColor.a > 0.0) \\n" +\n    "    { \\n" +\n    "        // Reverse premultiplication process to get the correct composited result of the classification primitives \\n" +\n    "        classificationColor.rgb /= classificationColor.a; \\n" +\n    "    } \\n" +\n    "    gl_FragColor = classificationColor * vec4(classificationColor.aaa, 1.0) + gl_FragColor * (1.0 - classificationColor.a); \\n" +\n    "} \\n";\n\n  sources.push(globeTranslucencyMain);\n}\n\nfunction getTranslucentBackFaceShaderProgram(vs, fs) {\n  getTranslucentShaderProgram(vs, fs);\n  removeDefine(vs.defines, "GROUND_ATMOSPHERE");\n  removeDefine(fs.defines, "GROUND_ATMOSPHERE");\n  removeDefine(vs.defines, "FOG");\n  removeDefine(fs.defines, "FOG");\n}\n\nfunction getTranslucentFrontFaceManualDepthTestShaderProgram(vs, fs) {\n  getTranslucentShaderProgram(vs, fs);\n  vs.defines.push("GENERATE_POSITION");\n  fs.defines.push("MANUAL_DEPTH_TEST");\n}\n\nfunction getTranslucentBackFaceManualDepthTestShaderProgram(vs, fs) {\n  getTranslucentBackFaceShaderProgram(vs, fs);\n  vs.defines.push("GENERATE_POSITION");\n  fs.defines.push("MANUAL_DEPTH_TEST");\n}\n\nfunction getPickShaderProgram(vs, fs) {\n  var pickShader =\n    "uniform sampler2D u_classificationTexture; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    vec2 st = gl_FragCoord.xy / czm_viewport.zw; \\n" +\n    "    vec4 pickColor = texture2D(u_classificationTexture, st); \\n" +\n    "    if (pickColor == vec4(0.0)) \\n" +\n    "    { \\n" +\n    "        discard; \\n" +\n    "    } \\n" +\n    "    gl_FragColor = pickColor; \\n" +\n    "} \\n";\n\n  fs.sources = [pickShader];\n}\n\nfunction getDerivedShaderProgram(\n  context,\n  shaderProgram,\n  derivedShaderProgram,\n  shaderProgramDirty,\n  getShaderProgramFunction,\n  cacheName\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(getShaderProgramFunction)) {\n    return shaderProgram;\n  }\n\n  if (!shaderProgramDirty && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(derivedShaderProgram)) {\n    return derivedShaderProgram;\n  }\n\n  var shader = context.shaderCache.getDerivedShaderProgram(\n    shaderProgram,\n    cacheName\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(shader)) {\n    var attributeLocations = shaderProgram._attributeLocations;\n    var vs = shaderProgram.vertexShaderSource.clone();\n    var fs = shaderProgram.fragmentShaderSource.clone();\n    vs.defines = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(vs.defines) ? vs.defines.slice(0) : [];\n    fs.defines = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(fs.defines) ? fs.defines.slice(0) : [];\n\n    getShaderProgramFunction(vs, fs);\n\n    shader = context.shaderCache.createDerivedShaderProgram(\n      shaderProgram,\n      cacheName,\n      {\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      }\n    );\n  }\n\n  return shader;\n}\n\nfunction getOpaqueFrontFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].BACK */ .Z.BACK;\n  renderState.cull.enabled = true;\n}\n\nfunction getOpaqueBackFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FRONT */ .Z.FRONT;\n  renderState.cull.enabled = true;\n}\n\nfunction getDepthOnlyFrontFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].BACK */ .Z.BACK;\n  renderState.cull.enabled = true;\n  renderState.colorMask = {\n    red: false,\n    green: false,\n    blue: false,\n    alpha: false,\n  };\n}\n\nfunction getDepthOnlyBackFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FRONT */ .Z.FRONT;\n  renderState.cull.enabled = true;\n  renderState.colorMask = {\n    red: false,\n    green: false,\n    blue: false,\n    alpha: false,\n  };\n}\n\nfunction getDepthOnlyFrontAndBackFaceRenderState(renderState) {\n  renderState.cull.enabled = false;\n  renderState.colorMask = {\n    red: false,\n    green: false,\n    blue: false,\n    alpha: false,\n  };\n}\n\nfunction getTranslucentFrontFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].BACK */ .Z.BACK;\n  renderState.cull.enabled = true;\n  renderState.depthMask = false;\n  renderState.blending = _BlendingState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND;\n}\n\nfunction getTranslucentBackFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FRONT */ .Z.FRONT;\n  renderState.cull.enabled = true;\n  renderState.depthMask = false;\n  renderState.blending = _BlendingState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND;\n}\n\nfunction getPickFrontFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].BACK */ .Z.BACK;\n  renderState.cull.enabled = true;\n  renderState.blending.enabled = false;\n}\n\nfunction getPickBackFaceRenderState(renderState) {\n  renderState.cull.face = _CullFace_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FRONT */ .Z.FRONT;\n  renderState.cull.enabled = true;\n  renderState.blending.enabled = false;\n}\n\nfunction getDerivedRenderState(\n  renderState,\n  derivedRenderState,\n  renderStateDirty,\n  getRenderStateFunction,\n  cache\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(getRenderStateFunction)) {\n    return renderState;\n  }\n\n  if (!renderStateDirty && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(derivedRenderState)) {\n    return derivedRenderState;\n  }\n\n  var cachedRenderState = cache[renderState.id];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(cachedRenderState)) {\n    var rs = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].getState */ .Z.getState(renderState);\n    getRenderStateFunction(rs);\n    cachedRenderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fromCache */ .Z.fromCache(rs);\n    cache[renderState.id] = cachedRenderState;\n  }\n\n  return cachedRenderState;\n}\n\nfunction getTranslucencyUniformMap(state) {\n  return {\n    u_classificationTexture: function () {\n      return state._globeTranslucencyFramebuffer.classificationTexture;\n    },\n  };\n}\n\nfunction getDerivedUniformMap(\n  state,\n  uniformMap,\n  derivedUniformMap,\n  uniformMapDirty,\n  getDerivedUniformMapFunction\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(getDerivedUniformMapFunction)) {\n    return uniformMap;\n  }\n\n  if (!uniformMapDirty && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(derivedUniformMap)) {\n    return derivedUniformMap;\n  }\n\n  return (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(uniformMap, getDerivedUniformMapFunction(state), false);\n}\n\nfunction DerivedCommandPack(options) {\n  this.pass = options.pass;\n  this.pickOnly = options.pickOnly;\n  this.getShaderProgramFunction = options.getShaderProgramFunction;\n  this.getRenderStateFunction = options.getRenderStateFunction;\n  this.getUniformMapFunction = options.getUniformMapFunction;\n  this.renderStateCache = {};\n}\n\nfunction createDerivedCommandPacks() {\n  return [\n    // opaqueFrontFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE,\n      pickOnly: false,\n      getShaderProgramFunction: getOpaqueFrontFaceShaderProgram,\n      getRenderStateFunction: getOpaqueFrontFaceRenderState,\n      getUniformMapFunction: undefined,\n    }),\n    // opaqueBackFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE,\n      pickOnly: false,\n      getShaderProgramFunction: getOpaqueBackFaceShaderProgram,\n      getRenderStateFunction: getOpaqueBackFaceRenderState,\n      getUniformMapFunction: undefined,\n    }),\n    // depthOnlyFrontFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE,\n      pickOnly: false,\n      getShaderProgramFunction: getDepthOnlyShaderProgram,\n      getRenderStateFunction: getDepthOnlyFrontFaceRenderState,\n      getUniformMapFunction: undefined,\n    }),\n    // depthOnlyBackFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE,\n      pickOnly: false,\n      getShaderProgramFunction: getDepthOnlyShaderProgram,\n      getRenderStateFunction: getDepthOnlyBackFaceRenderState,\n      getUniformMapFunction: undefined,\n    }),\n    // depthOnlyFrontAndBackFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE,\n      pickOnly: false,\n      getShaderProgramFunction: getDepthOnlyShaderProgram,\n      getRenderStateFunction: getDepthOnlyFrontAndBackFaceRenderState,\n      getUniformMapFunction: undefined,\n    }),\n    // translucentFrontFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT,\n      pickOnly: false,\n      getShaderProgramFunction: getTranslucentShaderProgram,\n      getRenderStateFunction: getTranslucentFrontFaceRenderState,\n      getUniformMapFunction: getTranslucencyUniformMap,\n    }),\n    // translucentBackFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT,\n      pickOnly: false,\n      getShaderProgramFunction: getTranslucentBackFaceShaderProgram,\n      getRenderStateFunction: getTranslucentBackFaceRenderState,\n      getUniformMapFunction: getTranslucencyUniformMap,\n    }),\n    // translucentFrontFaceManualDepthTestCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT,\n      pickOnly: false,\n      getShaderProgramFunction: getTranslucentFrontFaceManualDepthTestShaderProgram,\n      getRenderStateFunction: getTranslucentFrontFaceRenderState,\n      getUniformMapFunction: getTranslucencyUniformMap,\n    }),\n    // translucentBackFaceManualDepthTestCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT,\n      pickOnly: false,\n      getShaderProgramFunction: getTranslucentBackFaceManualDepthTestShaderProgram,\n      getRenderStateFunction: getTranslucentBackFaceRenderState,\n      getUniformMapFunction: getTranslucencyUniformMap,\n    }),\n    // pickFrontFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT,\n      pickOnly: true,\n      getShaderProgramFunction: getPickShaderProgram,\n      getRenderStateFunction: getPickFrontFaceRenderState,\n      getUniformMapFunction: getTranslucencyUniformMap,\n    }),\n    // pickBackFaceCommand\n    new DerivedCommandPack({\n      pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT,\n      pickOnly: true,\n      getShaderProgramFunction: getPickShaderProgram,\n      getRenderStateFunction: getPickBackFaceRenderState,\n      getUniformMapFunction: getTranslucencyUniformMap,\n    }),\n  ];\n}\n\nvar derivedCommandNames = new Array(derivedCommandsMaximumLength);\nvar derivedCommandPacks = new Array(derivedCommandsMaximumLength);\n\nGlobeTranslucencyState.prototype.updateDerivedCommands = function (\n  command,\n  frameState\n) {\n  var derivedCommandTypes = this._derivedCommandTypesToUpdate;\n  var derivedCommandsLength = this._derivedCommandsToUpdateLength;\n\n  if (derivedCommandsLength === 0) {\n    return;\n  }\n\n  for (var i = 0; i < derivedCommandsLength; ++i) {\n    derivedCommandPacks[i] = this._derivedCommandPacks[derivedCommandTypes[i]];\n    derivedCommandNames[i] = DerivedCommandNames[derivedCommandTypes[i]];\n  }\n\n  updateDerivedCommands(\n    this,\n    command,\n    derivedCommandsLength,\n    derivedCommandTypes,\n    derivedCommandNames,\n    derivedCommandPacks,\n    frameState\n  );\n};\n\nfunction updateDerivedCommands(\n  state,\n  command,\n  derivedCommandsLength,\n  derivedCommandTypes,\n  derivedCommandNames,\n  derivedCommandPacks,\n  frameState\n) {\n  var derivedCommandsObject = command.derivedCommands.globeTranslucency;\n  var derivedCommandsDirty = state._derivedCommandsDirty;\n\n  if (\n    command.dirty ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(derivedCommandsObject) ||\n    derivedCommandsDirty\n  ) {\n    command.dirty = false;\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(derivedCommandsObject)) {\n      derivedCommandsObject = {};\n      command.derivedCommands.globeTranslucency = derivedCommandsObject;\n    }\n\n    var frameNumber = frameState.frameNumber;\n\n    var uniformMapDirtyFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n      derivedCommandsObject.uniformMapDirtyFrame,\n      0\n    );\n    var shaderProgramDirtyFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n      derivedCommandsObject.shaderProgramDirtyFrame,\n      0\n    );\n    var renderStateDirtyFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n      derivedCommandsObject.renderStateDirtyFrame,\n      0\n    );\n\n    var uniformMapDirty =\n      derivedCommandsObject.uniformMap !== command.uniformMap;\n\n    var shaderProgramDirty =\n      derivedCommandsObject.shaderProgramId !== command.shaderProgram.id;\n\n    var renderStateDirty =\n      derivedCommandsObject.renderStateId !== command.renderState.id;\n\n    if (uniformMapDirty) {\n      derivedCommandsObject.uniformMapDirtyFrame = frameNumber;\n    }\n    if (shaderProgramDirty) {\n      derivedCommandsObject.shaderProgramDirtyFrame = frameNumber;\n    }\n    if (renderStateDirty) {\n      derivedCommandsObject.renderStateDirtyFrame = frameNumber;\n    }\n\n    derivedCommandsObject.uniformMap = command.uniformMap;\n    derivedCommandsObject.shaderProgramId = command.shaderProgram.id;\n    derivedCommandsObject.renderStateId = command.renderState.id;\n\n    for (var i = 0; i < derivedCommandsLength; ++i) {\n      var derivedCommandPack = derivedCommandPacks[i];\n      var derivedCommandType = derivedCommandTypes[i];\n      var derivedCommandName = derivedCommandNames[i];\n      var derivedCommand = derivedCommandsObject[derivedCommandName];\n\n      var derivedUniformMap;\n      var derivedShaderProgram;\n      var derivedRenderState;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(derivedCommand)) {\n        derivedUniformMap = derivedCommand.uniformMap;\n        derivedShaderProgram = derivedCommand.shaderProgram;\n        derivedRenderState = derivedCommand.renderState;\n      } else {\n        derivedUniformMap = undefined;\n        derivedShaderProgram = undefined;\n        derivedRenderState = undefined;\n      }\n\n      derivedCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].shallowClone */ .Z.shallowClone(command, derivedCommand);\n      derivedCommandsObject[derivedCommandName] = derivedCommand;\n\n      var derivedUniformMapDirtyFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n        derivedCommand.derivedCommands.uniformMapDirtyFrame,\n        0\n      );\n      var derivedShaderProgramDirtyFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n        derivedCommand.derivedCommands.shaderProgramDirtyFrame,\n        0\n      );\n      var derivedRenderStateDirtyFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n        derivedCommand.derivedCommands.renderStateDirtyFrame,\n        0\n      );\n\n      var derivedUniformMapDirty =\n        uniformMapDirty || derivedUniformMapDirtyFrame < uniformMapDirtyFrame;\n      var derivedShaderProgramDirty =\n        shaderProgramDirty ||\n        derivedShaderProgramDirtyFrame < shaderProgramDirtyFrame;\n      var derivedRenderStateDirty =\n        renderStateDirty ||\n        derivedRenderStateDirtyFrame < renderStateDirtyFrame;\n\n      if (derivedUniformMapDirty) {\n        derivedCommand.derivedCommands.uniformMapDirtyFrame = frameNumber;\n      }\n      if (derivedShaderProgramDirty) {\n        derivedCommand.derivedCommands.shaderProgramDirtyFrame = frameNumber;\n      }\n      if (derivedRenderStateDirty) {\n        derivedCommand.derivedCommands.renderStateDirtyFrame = frameNumber;\n      }\n\n      derivedCommand.derivedCommands.type = derivedCommandType;\n      derivedCommand.pass = derivedCommandPack.pass;\n      derivedCommand.pickOnly = derivedCommandPack.pickOnly;\n      derivedCommand.uniformMap = getDerivedUniformMap(\n        state,\n        command.uniformMap,\n        derivedUniformMap,\n        derivedUniformMapDirty,\n        derivedCommandPack.getUniformMapFunction\n      );\n      derivedCommand.shaderProgram = getDerivedShaderProgram(\n        frameState.context,\n        command.shaderProgram,\n        derivedShaderProgram,\n        derivedShaderProgramDirty,\n        derivedCommandPack.getShaderProgramFunction,\n        derivedCommandName\n      );\n      derivedCommand.renderState = getDerivedRenderState(\n        command.renderState,\n        derivedRenderState,\n        derivedRenderStateDirty,\n        derivedCommandPack.getRenderStateFunction,\n        derivedCommandPack.renderStateCache\n      );\n    }\n  }\n}\n\nGlobeTranslucencyState.prototype.pushDerivedCommands = function (\n  command,\n  isBlendCommand,\n  frameState\n) {\n  var picking = frameState.passes.pick;\n  if (picking && isBlendCommand) {\n    // No need to push blend commands in the pick pass\n    return;\n  }\n\n  var derivedCommandTypes = this._derivedCommandTypes;\n  var derivedCommandsLength = this._derivedCommandsLength;\n\n  if (picking) {\n    derivedCommandTypes = this._derivedPickCommandTypes;\n    derivedCommandsLength = this._derivedPickCommandsLength;\n  } else if (isBlendCommand) {\n    derivedCommandTypes = this._derivedBlendCommandTypes;\n    derivedCommandsLength = this._derivedBlendCommandsLength;\n  }\n\n  if (derivedCommandsLength === 0) {\n    // No derived commands to push so just push the globe command\n    frameState.commandList.push(command);\n    return;\n  }\n\n  // Push derived commands\n  var derivedCommands = command.derivedCommands.globeTranslucency;\n  for (var i = 0; i < derivedCommandsLength; ++i) {\n    var derivedCommandName = DerivedCommandNames[derivedCommandTypes[i]];\n    frameState.commandList.push(derivedCommands[derivedCommandName]);\n  }\n};\n\nfunction executeCommandsMatchingType(\n  commands,\n  commandsLength,\n  executeCommandFunction,\n  scene,\n  context,\n  passState,\n  types\n) {\n  for (var i = 0; i < commandsLength; ++i) {\n    var command = commands[i];\n    var type = command.derivedCommands.type;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(types) || types.indexOf(type) > -1) {\n      executeCommandFunction(command, scene, context, passState);\n    }\n  }\n}\n\nfunction executeCommands(\n  commands,\n  commandsLength,\n  executeCommandFunction,\n  scene,\n  context,\n  passState\n) {\n  for (var i = 0; i < commandsLength; ++i) {\n    executeCommandFunction(commands[i], scene, context, passState);\n  }\n}\n\nvar opaqueTypes = [\n  DerivedCommandType.OPAQUE_FRONT_FACE,\n  DerivedCommandType.OPAQUE_BACK_FACE,\n];\nvar depthOnlyTypes = [\n  DerivedCommandType.DEPTH_ONLY_FRONT_FACE,\n  DerivedCommandType.DEPTH_ONLY_BACK_FACE,\n  DerivedCommandType.DEPTH_ONLY_FRONT_AND_BACK_FACE,\n];\n\nGlobeTranslucencyState.prototype.executeGlobeCommands = function (\n  frustumCommands,\n  executeCommandFunction,\n  globeTranslucencyFramebuffer,\n  scene,\n  passState\n) {\n  var context = scene.context;\n  var globeCommands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE];\n  var globeCommandsLength = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE];\n\n  if (globeCommandsLength === 0) {\n    return;\n  }\n\n  this._globeTranslucencyFramebuffer = globeTranslucencyFramebuffer;\n  globeTranslucencyFramebuffer.clearClassification(context, passState);\n\n  // Render opaque commands like normal\n  executeCommandsMatchingType(\n    globeCommands,\n    globeCommandsLength,\n    executeCommandFunction,\n    scene,\n    context,\n    passState,\n    opaqueTypes\n  );\n};\n\nGlobeTranslucencyState.prototype.executeGlobeClassificationCommands = function (\n  frustumCommands,\n  executeCommandFunction,\n  globeTranslucencyFramebuffer,\n  scene,\n  passState\n) {\n  var context = scene.context;\n  var globeCommands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE];\n  var globeCommandsLength = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].GLOBE */ .Z.GLOBE];\n  var classificationCommands =\n    frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION];\n  var classificationCommandsLength =\n    frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION];\n\n  if (globeCommandsLength === 0 || classificationCommandsLength === 0) {\n    return;\n  }\n\n  var frontTranslucent = this._frontFaceTranslucent;\n  var backTranslucent = this._backFaceTranslucent;\n\n  if (!frontTranslucent || !backTranslucent) {\n    // Render classification on opaque faces like normal\n    executeCommands(\n      classificationCommands,\n      classificationCommandsLength,\n      executeCommandFunction,\n      scene,\n      context,\n      passState\n    );\n  }\n\n  if (!frontTranslucent && !backTranslucent) {\n    // No translucent commands to render. Skip translucent classification.\n    return;\n  }\n\n  this._globeTranslucencyFramebuffer = globeTranslucencyFramebuffer;\n\n  var originalGlobeDepthTexture = context.uniformState.globeDepthTexture;\n  var originalFramebuffer = passState.framebuffer;\n\n  // Render to internal framebuffer and get the first depth peel\n  passState.framebuffer =\n    globeTranslucencyFramebuffer.classificationFramebuffer;\n\n  executeCommandsMatchingType(\n    globeCommands,\n    globeCommandsLength,\n    executeCommandFunction,\n    scene,\n    context,\n    passState,\n    depthOnlyTypes\n  );\n\n  if (context.depthTexture) {\n    // Pack depth into separate texture for ground polylines and textured ground primitives\n    var packedDepthTexture = globeTranslucencyFramebuffer.packDepth(\n      context,\n      passState\n    );\n    context.uniformState.globeDepthTexture = packedDepthTexture;\n  }\n\n  // Render classification on translucent faces\n  executeCommands(\n    classificationCommands,\n    classificationCommandsLength,\n    executeCommandFunction,\n    scene,\n    context,\n    passState\n  );\n\n  // Unset temporary state\n  context.uniformState.globeDepthTexture = originalGlobeDepthTexture;\n  passState.framebuffer = originalFramebuffer;\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (GlobeTranslucencyState);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85985\n')}}]);