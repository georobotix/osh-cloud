"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[7678],{36255:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"D0\": function() { return /* binding */ isAsyncIterable; },\n/* harmony export */   \"Ew\": function() { return /* binding */ isResponse; },\n/* harmony export */   \"Kn\": function() { return /* binding */ isObject; },\n/* harmony export */   \"Lj\": function() { return /* binding */ isBlob; },\n/* harmony export */   \"Os\": function() { return /* binding */ isReadableStream; },\n/* harmony export */   \"Ss\": function() { return /* binding */ isPureObject; },\n/* harmony export */   \"TW\": function() { return /* binding */ isIterable; },\n/* harmony export */   \"zH\": function() { return /* binding */ isBuffer; }\n/* harmony export */ });\n/* unused harmony exports isPromise, isIterator, isFile, isWritableDOMStream, isReadableDOMStream, isWritableNodeStream, isReadableNodeStream, isWritableStream */\n\n\nconst isBoolean = x => typeof x === 'boolean';\nconst isFunction = x => typeof x === 'function';\nconst isObject = x => x !== null && typeof x === 'object';\nconst isPureObject = x => isObject(x) && x.constructor === {}.constructor;\nconst isPromise = x => isObject(x) && isFunction(x.then);\nconst isIterable = x => x && typeof x[Symbol.iterator] === 'function';\nconst isAsyncIterable = x => x && typeof x[Symbol.asyncIterator] === 'function';\nconst isIterator = x => x && isFunction(x.next);\nconst isResponse = x => typeof Response !== 'undefined' && x instanceof Response || x && x.arrayBuffer && x.text && x.json;\nconst isFile = x => typeof File !== 'undefined' && x instanceof File;\nconst isBlob = x => typeof Blob !== 'undefined' && x instanceof Blob;\n\nconst isBuffer = x => x && typeof x === 'object' && x.isBuffer;\nconst isWritableDOMStream = x => isObject(x) && isFunction(x.abort) && isFunction(x.getWriter);\nconst isReadableDOMStream = x => typeof ReadableStream !== 'undefined' && x instanceof ReadableStream || isObject(x) && isFunction(x.tee) && isFunction(x.cancel) && isFunction(x.getReader);\n\nconst isWritableNodeStream = x => isObject(x) && isFunction(x.end) && isFunction(x.write) && isBoolean(x.writable);\nconst isReadableNodeStream = x => isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);\nconst isReadableStream = x => isReadableDOMStream(x) || isReadableNodeStream(x);\nconst isWritableStream = x => isWritableDOMStream(x) || isWritableNodeStream(x);\n//# sourceMappingURL=is-type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYyNTUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDTztBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGxvYWRlcnMuZ2wvY29yZS9kaXN0L2VzbS9qYXZhc2NyaXB0LXV0aWxzL2lzLXR5cGUuanM/NzM4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuY29uc3QgaXNCb29sZWFuID0geCA9PiB0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nO1xuY29uc3QgaXNGdW5jdGlvbiA9IHggPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSB4ID0+IHggIT09IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnO1xuZXhwb3J0IGNvbnN0IGlzUHVyZU9iamVjdCA9IHggPT4gaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0ge30uY29uc3RydWN0b3I7XG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0geCA9PiBpc09iamVjdCh4KSAmJiBpc0Z1bmN0aW9uKHgudGhlbik7XG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZSA9IHggPT4geCAmJiB0eXBlb2YgeFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xuZXhwb3J0IGNvbnN0IGlzQXN5bmNJdGVyYWJsZSA9IHggPT4geCAmJiB0eXBlb2YgeFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG5leHBvcnQgY29uc3QgaXNJdGVyYXRvciA9IHggPT4geCAmJiBpc0Z1bmN0aW9uKHgubmV4dCk7XG5leHBvcnQgY29uc3QgaXNSZXNwb25zZSA9IHggPT4gdHlwZW9mIFJlc3BvbnNlICE9PSAndW5kZWZpbmVkJyAmJiB4IGluc3RhbmNlb2YgUmVzcG9uc2UgfHwgeCAmJiB4LmFycmF5QnVmZmVyICYmIHgudGV4dCAmJiB4Lmpzb247XG5leHBvcnQgY29uc3QgaXNGaWxlID0geCA9PiB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEZpbGU7XG5leHBvcnQgY29uc3QgaXNCbG9iID0geCA9PiB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEJsb2I7XG5cbmV4cG9ydCBjb25zdCBpc0J1ZmZlciA9IHggPT4geCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeC5pc0J1ZmZlcjtcbmV4cG9ydCBjb25zdCBpc1dyaXRhYmxlRE9NU3RyZWFtID0geCA9PiBpc09iamVjdCh4KSAmJiBpc0Z1bmN0aW9uKHguYWJvcnQpICYmIGlzRnVuY3Rpb24oeC5nZXRXcml0ZXIpO1xuZXhwb3J0IGNvbnN0IGlzUmVhZGFibGVET01TdHJlYW0gPSB4ID0+IHR5cGVvZiBSZWFkYWJsZVN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtIHx8IGlzT2JqZWN0KHgpICYmIGlzRnVuY3Rpb24oeC50ZWUpICYmIGlzRnVuY3Rpb24oeC5jYW5jZWwpICYmIGlzRnVuY3Rpb24oeC5nZXRSZWFkZXIpO1xuXG5leHBvcnQgY29uc3QgaXNXcml0YWJsZU5vZGVTdHJlYW0gPSB4ID0+IGlzT2JqZWN0KHgpICYmIGlzRnVuY3Rpb24oeC5lbmQpICYmIGlzRnVuY3Rpb24oeC53cml0ZSkgJiYgaXNCb29sZWFuKHgud3JpdGFibGUpO1xuZXhwb3J0IGNvbnN0IGlzUmVhZGFibGVOb2RlU3RyZWFtID0geCA9PiBpc09iamVjdCh4KSAmJiBpc0Z1bmN0aW9uKHgucmVhZCkgJiYgaXNGdW5jdGlvbih4LnBpcGUpICYmIGlzQm9vbGVhbih4LnJlYWRhYmxlKTtcbmV4cG9ydCBjb25zdCBpc1JlYWRhYmxlU3RyZWFtID0geCA9PiBpc1JlYWRhYmxlRE9NU3RyZWFtKHgpIHx8IGlzUmVhZGFibGVOb2RlU3RyZWFtKHgpO1xuZXhwb3J0IGNvbnN0IGlzV3JpdGFibGVTdHJlYW0gPSB4ID0+IGlzV3JpdGFibGVET01TdHJlYW0oeCkgfHwgaXNXcml0YWJsZU5vZGVTdHJlYW0oeCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy10eXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36255\n")},44534:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"z\": function() { return /* binding */ load; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/javascript-utils/is-type.js\nvar is_type = __webpack_require__(36255);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/normalize-loader.js\nvar normalize_loader = __webpack_require__(52033);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/option-utils.js + 4 modules\nvar option_utils = __webpack_require__(99597);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/assert.js\nvar assert = __webpack_require__(96040);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/version.js\n\n\nconst DEFAULT_VERSION = 'beta';\nconst VERSION =  true ? \"3.3.1\" : 0;\nif (false) {}\n//# sourceMappingURL=version.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-api/validate-worker-version.js\n\n\n\nfunction validateWorkerVersion(worker) {\n  let coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VERSION;\n  (0,assert/* assert */.h)(worker, 'no worker provided');\n  const workerVersion = worker.version;\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n//# sourceMappingURL=validate-worker-version.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/globals.js\nvar globals = __webpack_require__(96013);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/node/worker_threads-browser.js\n\nclass worker_threads_browser_Worker {\n  terminate() {}\n}\n\n\nconst parentPort = null;\n//# sourceMappingURL=worker_threads-browser.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-utils/get-loadable-worker-url.js\n\nconst workerURLCache = new Map();\n\nfunction getLoadableWorkerURL(props) {\n  (0,assert/* assert */.h)(props.source && !props.url || !props.source && props.url);\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n  (0,assert/* assert */.h)(workerURL);\n  return workerURL;\n}\n\nfunction getLoadableWorkerURLFromURL(url) {\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\nfunction getLoadableWorkerURLFromSource(workerSource) {\n  const blob = new Blob([workerSource], {\n    type: 'application/javascript'\n  });\n  return URL.createObjectURL(blob);\n}\n\nfunction buildScriptSource(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n  throw error;\\n}\");\n}\n//# sourceMappingURL=get-loadable-worker-url.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-utils/get-transfer-list.js\n\n\nfunction getTransferList(object) {\n  let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let transfers = arguments.length > 2 ? arguments[2] : undefined;\n  const transfersSet = transfers || new Set();\n  if (!object) {\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n\nfunction getTransferListForWriter(object) {\n  if (object === null) {\n    return {};\n  }\n  const clone = Object.assign({}, object);\n  Object.keys(clone).forEach(key => {\n    if (typeof object[key] === 'object' && !ArrayBuffer.isView(object[key]) && !(object[key] instanceof Array)) {\n      clone[key] = getTransferListForWriter(object[key]);\n    } else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) {\n      clone[key] = {};\n    } else {\n      clone[key] = object[key];\n    }\n  });\n  return clone;\n}\n//# sourceMappingURL=get-transfer-list.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-thread.js\n\n\n\n\n\n\n\nconst NOOP = () => {};\nclass WorkerThread {\n  static isSupported() {\n    return typeof Worker !== 'undefined' && globals/* isBrowser */.jU || typeof worker_threads_browser_Worker !== 'undefined' && !globals/* isBrowser */.jU;\n  }\n  constructor(props) {\n    (0,defineProperty/* default */.Z)(this, \"name\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"source\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"url\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"terminated\", false);\n    (0,defineProperty/* default */.Z)(this, \"worker\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"onMessage\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"onError\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"_loadableURL\", '');\n    const {\n      name,\n      source,\n      url\n    } = props;\n    (0,assert/* assert */.h)(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = error => console.log(error);\n\n    this.worker = globals/* isBrowser */.jU ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n\n  destroy() {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate();\n    this.terminated = true;\n  }\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  postMessage(data, transferList) {\n    transferList = transferList || getTransferList(data);\n    this.worker.postMessage(data, transferList);\n  }\n\n  _getErrorFromErrorEvent(event) {\n    let message = 'Failed to load ';\n    message += \"worker \".concat(this.name, \" from \").concat(this.url, \". \");\n    if (event.message) {\n      message += \"\".concat(event.message, \" in \");\n    }\n    if (event.lineno) {\n      message += \":\".concat(event.lineno, \":\").concat(event.colno);\n    }\n    return new Error(message);\n  }\n\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({\n      source: this.source,\n      url: this.url\n    });\n    const worker = new Worker(this._loadableURL, {\n      name: this.name\n    });\n    worker.onmessage = event => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    worker.onerror = error => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    worker.onmessageerror = event => console.error(event);\n\n    return worker;\n  }\n\n  _createNodeWorker() {\n    let worker;\n    if (this.url) {\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : \"./\".concat(this.url);\n      worker = new worker_threads_browser_Worker(url, {\n        eval: false\n      });\n    } else if (this.source) {\n      worker = new worker_threads_browser_Worker(this.source, {\n        eval: true\n      });\n    } else {\n      throw new Error('no worker');\n    }\n    worker.on('message', data => {\n      this.onMessage(data);\n    });\n    worker.on('error', error => {\n      this.onError(error);\n    });\n    worker.on('exit', code => {\n    });\n    return worker;\n  }\n}\n//# sourceMappingURL=worker-thread.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-job.js\n\n\n\nclass WorkerJob {\n\n  constructor(jobName, workerThread) {\n    (0,defineProperty/* default */.Z)(this, \"name\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"workerThread\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"isRunning\", true);\n    (0,defineProperty/* default */.Z)(this, \"result\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"_resolve\", () => {});\n    (0,defineProperty/* default */.Z)(this, \"_reject\", () => {});\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  postMessage(type, payload) {\n    this.workerThread.postMessage({\n      source: 'loaders.gl',\n      type,\n      payload\n    });\n  }\n\n  done(value) {\n    (0,assert/* assert */.h)(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  error(error) {\n    (0,assert/* assert */.h)(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n//# sourceMappingURL=worker-job.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-pool.js\n\n\n\n\n\nclass WorkerPool {\n\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n\n  constructor(props) {\n    (0,defineProperty/* default */.Z)(this, \"name\", 'unnamed');\n    (0,defineProperty/* default */.Z)(this, \"source\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"url\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"maxConcurrency\", 1);\n    (0,defineProperty/* default */.Z)(this, \"maxMobileConcurrency\", 1);\n    (0,defineProperty/* default */.Z)(this, \"onDebug\", () => {});\n    (0,defineProperty/* default */.Z)(this, \"reuseWorkers\", true);\n    (0,defineProperty/* default */.Z)(this, \"props\", {});\n    (0,defineProperty/* default */.Z)(this, \"jobQueue\", []);\n    (0,defineProperty/* default */.Z)(this, \"idleQueue\", []);\n    (0,defineProperty/* default */.Z)(this, \"count\", 0);\n    (0,defineProperty/* default */.Z)(this, \"isDestroyed\", false);\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  destroy() {\n    this.idleQueue.forEach(worker => worker.destroy());\n    this.isDestroyed = true;\n  }\n  setProps(props) {\n    this.props = {\n      ...this.props,\n      ...props\n    };\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n  async startJob(name) {\n    let onMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (job, type, data) => job.done(data);\n    let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (job, error) => job.error(error);\n    const startPromise = new Promise(onStart => {\n      this.jobQueue.push({\n        name,\n        onMessage,\n        onError,\n        onStart\n      });\n      return this;\n    });\n    this._startQueuedJob();\n    return await startPromise;\n  }\n\n  async _startQueuedJob() {\n    if (!this.jobQueue.length) {\n      return;\n    }\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      workerThread.onMessage = data => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = error => queuedJob.onError(job, error);\n\n      queuedJob.onStart(job);\n\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  returnWorkerToQueue(worker) {\n    const shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n    if (!this.isDestroyed) {\n      this._startQueuedJob();\n    }\n  }\n\n  _getAvailableWorker() {\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = \"\".concat(this.name.toLowerCase(), \" (#\").concat(this.count, \" of \").concat(this.maxConcurrency, \")\");\n      return new WorkerThread({\n        name,\n        source: this.source,\n        url: this.url\n      });\n    }\n\n    return null;\n  }\n  _getMaxConcurrency() {\n    return globals/* isMobile */.tq ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n//# sourceMappingURL=worker-pool.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-farm.js\n\n\n\n\nconst DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\nclass WorkerFarm {\n\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n\n  static getWorkerFarm() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  constructor(props) {\n    (0,defineProperty/* default */.Z)(this, \"props\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"workerPools\", new Map());\n    this.props = {\n      ...DEFAULT_PROPS\n    };\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  destroy() {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map();\n  }\n\n  setProps(props) {\n    this.props = {\n      ...this.props,\n      ...props\n    };\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  getWorkerPool(options) {\n    const {\n      name,\n      source,\n      url\n    } = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n(0,defineProperty/* default */.Z)(WorkerFarm, \"_workerFarm\", void 0);\n//# sourceMappingURL=worker-farm.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-api/get-worker-url.js\n\n\n\n\nconst NPM_TAG = 'latest';\nconst get_worker_url_VERSION = (/* unused pure expression or super */ null && ( true ? \"3.3.1\" : 0));\n\nfunction getWorkerName(worker) {\n  const warning = worker.version !== get_worker_url_VERSION ? \" (worker-utils@\".concat(get_worker_url_VERSION, \")\") : '';\n  return \"\".concat(worker.name, \"@\").concat(worker.version).concat(warning);\n}\n\nfunction getWorkerURL(worker) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const workerOptions = options[worker.id] || {};\n  const workerFile = \"\".concat(worker.id, \"-worker.js\");\n  let url = workerOptions.workerUrl;\n\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n\n  if (options._workerType === 'test') {\n    url = \"modules/\".concat(worker.module, \"/dist/\").concat(workerFile);\n  }\n\n  if (!url) {\n    let version = worker.version;\n    if (version === 'latest') {\n      version = NPM_TAG;\n    }\n    const versionTag = version ? \"@\".concat(version) : '';\n    url = \"https://unpkg.com/@loaders.gl/\".concat(worker.module).concat(versionTag, \"/dist/\").concat(workerFile);\n  }\n  (0,assert/* assert */.h)(url);\n\n  return url;\n}\n//# sourceMappingURL=get-worker-url.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/worker-loader-utils/parse-with-worker.js\n\n\n\nfunction canParseWithWorker(loader, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  if (!globals/* isBrowser */.jU && !(options !== null && options !== void 0 && options._nodeWorkers)) {\n    return false;\n  }\n  return loader.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\n\nasync function parseWithWorker(loader, data, options, context, parseOnMainThread) {\n  const name = loader.id;\n  const url = getWorkerURL(loader, options);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({\n    name,\n    url\n  });\n\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n  const job = await workerPool.startJob('process-on-worker',\n  onMessage.bind(null, parseOnMainThread));\n\n  job.postMessage('process', {\n    input: data,\n    options,\n    context\n  });\n  const result = await job.result;\n  return await result.result;\n}\n\nasync function onMessage(parseOnMainThread, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n      break;\n    default:\n      console.warn(\"parse-with-worker unknown message \".concat(type));\n  }\n}\n//# sourceMappingURL=parse-with-worker.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/array-buffer-utils.js\nvar array_buffer_utils = __webpack_require__(74609);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/iterators/async-iteration.js\n\n\nasync function forEach(iterator, visitor) {\n  while (true) {\n    const {\n      done,\n      value\n    } = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\nasync function concatenateArrayBuffersAsync(asyncIterator) {\n  const arrayBuffers = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return (0,array_buffer_utils/* concatenateArrayBuffers */.JY)(...arrayBuffers);\n}\nasync function concatenateStringsAsync(asyncIterator) {\n  const strings = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n//# sourceMappingURL=async-iteration.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-string-iterator.js\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\nfunction* makeStringIterator(string, options) {\n  const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    yield textEncoder.encode(chunk);\n  }\n}\n//# sourceMappingURL=make-string-iterator.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-array-buffer-iterator.js\nconst make_array_buffer_iterator_DEFAULT_CHUNK_SIZE = 256 * 1024;\n\nfunction* makeArrayBufferIterator(arrayBuffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    chunkSize = make_array_buffer_iterator_DEFAULT_CHUNK_SIZE\n  } = options;\n  let byteOffset = 0;\n  while (byteOffset < arrayBuffer.byteLength) {\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n//# sourceMappingURL=make-array-buffer-iterator.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-blob-iterator.js\nconst make_blob_iterator_DEFAULT_CHUNK_SIZE = 1024 * 1024;\n\nasync function* makeBlobIterator(blob, options) {\n  const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || make_blob_iterator_DEFAULT_CHUNK_SIZE;\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n    offset = end;\n    yield chunk;\n  }\n}\n//# sourceMappingURL=make-blob-iterator.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/globals.js\nvar env_utils_globals = __webpack_require__(84959);\n// EXTERNAL MODULE: ../node/buffer (ignored)\nvar buffer_ignored_ = __webpack_require__(9521);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/memory-conversion-utils.js\n\n\n\n\nfunction isBuffer(value) {\n  return value && typeof value === 'object' && value.isBuffer;\n}\n\nfunction toBuffer(data) {\n  return node.toBuffer ? node.toBuffer(data) : data;\n}\n\nfunction toArrayBuffer(data) {\n  if (isBuffer(data)) {\n    return buffer_ignored_.toArrayBuffer(data);\n  }\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n      return data.buffer;\n    }\n    return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n  }\n  if (typeof data === 'string') {\n    const text = data;\n    const uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  if (data && typeof data === 'object' && data._toArrayBuffer) {\n    return data._toArrayBuffer();\n  }\n  throw new Error('toArrayBuffer');\n}\n//# sourceMappingURL=memory-conversion-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-stream-iterator.js\n\nfunction makeStreamIterator(stream, options) {\n  return env_utils_globals/* isBrowser */.jU ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);\n}\n\nasync function* makeBrowserStreamIterator(stream, options) {\n\n  const reader = stream.getReader();\n  let nextBatchPromise;\n  try {\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n      if (options !== null && options !== void 0 && options._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n      const {\n        done,\n        value\n      } = await currentBatchPromise;\n      if (done) {\n        return;\n      }\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    reader.releaseLock();\n  }\n}\n\nasync function* makeNodeStreamIterator(stream, options) {\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk);\n  }\n}\n//# sourceMappingURL=make-stream-iterator.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/iterators/make-iterator/make-iterator.js\n\n\n\n\n\n\nfunction make_iterator_makeIterator(data, options) {\n  if (typeof data === 'string') {\n    return makeStringIterator(data, options);\n  }\n  if (data instanceof ArrayBuffer) {\n    return makeArrayBufferIterator(data, options);\n  }\n  if ((0,is_type/* isBlob */.Lj)(data)) {\n    return makeBlobIterator(data, options);\n  }\n  if ((0,is_type/* isReadableStream */.Os)(data)) {\n    return makeStreamIterator(data, options);\n  }\n  if ((0,is_type/* isResponse */.Ew)(data)) {\n    const response = data;\n    return makeStreamIterator(response.body, options);\n  }\n  throw new Error('makeIterator');\n}\n//# sourceMappingURL=make-iterator.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/utils/response-utils.js\nvar response_utils = __webpack_require__(17927);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/get-data.js\n\n\n\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\nfunction getArrayBufferOrStringFromDataSync(data, loader, options) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n  if ((0,is_type/* isBuffer */.zH)(data)) {\n    data = data.buffer;\n  }\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n    let arrayBuffer = data.buffer;\n\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n  throw new Error(ERR_DATA);\n}\n\nasync function getArrayBufferOrStringFromData(data, loader, options) {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader, options);\n  }\n\n  if ((0,is_type/* isBlob */.Lj)(data)) {\n    data = await (0,response_utils/* makeResponse */.L1)(data);\n  }\n  if ((0,is_type/* isResponse */.Ew)(data)) {\n    const response = data;\n    await (0,response_utils/* checkResponse */.mm)(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n  if ((0,is_type/* isReadableStream */.Os)(data)) {\n    data = make_iterator_makeIterator(data, options);\n  }\n  if ((0,is_type/* isIterable */.TW)(data) || (0,is_type/* isAsyncIterable */.D0)(data)) {\n    return concatenateArrayBuffersAsync(data);\n  }\n  throw new Error(ERR_DATA);\n}\nasync function getAsyncIterableFromData(data, options) {\n  if (isIterator(data)) {\n    return data;\n  }\n  if (isResponse(data)) {\n    const response = data;\n    await checkResponse(response);\n    const body = await response.body;\n    return makeIterator(body, options);\n  }\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data, options);\n  }\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n  return getIterableFromData(data);\n}\nasync function getReadableStream(data) {\n  if (isReadableStream(data)) {\n    return data;\n  }\n  if (isResponse(data)) {\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  return response.body;\n}\n\nfunction getIterableFromData(data) {\n  if (ArrayBuffer.isView(data)) {\n    return function* oneChunk() {\n      yield data.buffer;\n    }();\n  }\n  if (data instanceof ArrayBuffer) {\n    return function* oneChunk() {\n      yield data;\n    }();\n  }\n  if (isIterator(data)) {\n    return data;\n  }\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n  throw new Error(ERR_DATA);\n}\n//# sourceMappingURL=get-data.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/loader-context.js\n\n\nfunction getLoaderContext(context, options) {\n  let previousContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (previousContext) {\n    return previousContext;\n  }\n  const resolvedContext = {\n    fetch: (0,option_utils/* getFetchFunction */.bV)(options, context),\n    ...context\n  };\n\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n  return resolvedContext;\n}\n\nfunction getLoadersFromContext(loaders, context) {\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n//# sourceMappingURL=loader-context.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/utils/resource-utils.js + 1 modules\nvar resource_utils = __webpack_require__(74642);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/path-utils/path.js\n\n\nfunction filename(url) {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';\n}\n\nfunction dirname(url) {\n  const slashIndex = url && url.lastIndexOf('/');\n  return slashIndex >= 0 ? url.substr(0, slashIndex) : '';\n}\n\nfunction join() {\n  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {\n    parts[_key] = arguments[_key];\n  }\n  const separator = '/';\n  parts = parts.map((part, index) => {\n    if (index) {\n      part = part.replace(new RegExp(\"^\".concat(separator)), '');\n    }\n    if (index !== parts.length - 1) {\n      part = part.replace(new RegExp(\"\".concat(separator, \"$\")), '');\n    }\n    return part;\n  });\n  return parts.join(separator);\n}\n//# sourceMappingURL=path.js.map\n// EXTERNAL MODULE: ./node_modules/@probe.gl/log/dist/esm/log.js + 8 modules\nvar log = __webpack_require__(56426);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/utils/log.js\n\n\nconst log_log = new log/* Log */.Z({\n  id: 'loaders.gl'\n});\n//# sourceMappingURL=log.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/api/register-loaders.js\nvar register_loaders = __webpack_require__(6228);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/api/select-loader.js\n\n\n\n\n\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\nasync function selectLoader(data) {\n  let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  let loader = selectLoaderSync(data, loaders, {\n    ...options,\n    nothrow: true\n  }, context);\n  if (loader) {\n    return loader;\n  }\n\n  if ((0,is_type/* isBlob */.Lj)(data)) {\n    data = await data.slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  if (!loader && !(options !== null && options !== void 0 && options.nothrow)) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n  return loader;\n}\n\nfunction selectLoaderSync(data) {\n  let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  if (loaders && !Array.isArray(loaders)) {\n    return (0,normalize_loader/* normalizeLoader */.T)(loaders);\n  }\n\n  let candidateLoaders = [];\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  if (!(options !== null && options !== void 0 && options.ignoreRegisteredLoaders)) {\n    candidateLoaders.push(...(0,register_loaders/* getRegisteredLoaders */.kO)());\n  }\n\n  normalizeLoaders(candidateLoaders);\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  if (!loader && !(options !== null && options !== void 0 && options.nothrow)) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n  return loader;\n}\n\nfunction selectLoaderInternal(data, loaders, options, context) {\n  const {\n    url,\n    type\n  } = (0,resource_utils/* getResourceUrlAndType */.l)(data);\n  const testUrl = url || (context === null || context === void 0 ? void 0 : context.url);\n  let loader = null;\n  let reason = '';\n\n  if (options !== null && options !== void 0 && options.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.mimeType);\n    reason = \"match forced by supplied MIME type \".concat(options === null || options === void 0 ? void 0 : options.mimeType);\n  }\n\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  reason = reason || (loader ? \"matched url \".concat(testUrl) : '');\n\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  reason = reason || (loader ? \"matched MIME type \".concat(type) : '');\n\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  reason = reason || (loader ? \"matched initial data \".concat(getFirstCharacters(data)) : '');\n\n  loader = loader || findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.fallbackMimeType);\n  reason = reason || (loader ? \"matched fallback MIME type \".concat(type) : '');\n  if (reason) {\n    var _loader;\n    log_log.log(1, \"selectLoader selected \".concat((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.name, \": \").concat(reason, \".\"));\n  }\n  return loader;\n}\n\nfunction validHTTPResponse(data) {\n  if (data instanceof Response) {\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getNoValidLoaderMessage(data) {\n  const {\n    url,\n    type\n  } = (0,resource_utils/* getResourceUrlAndType */.l)(data);\n  let message = 'No valid loader found (';\n  message += url ? \"\".concat(filename(url), \", \") : 'no url provided, ';\n  message += \"MIME type: \".concat(type ? \"\\\"\".concat(type, \"\\\"\") : 'not provided', \", \");\n  const firstCharacters = data ? getFirstCharacters(data) : '';\n  message += firstCharacters ? \" first bytes: \\\"\".concat(firstCharacters, \"\\\"\") : 'first bytes: not available';\n  message += ')';\n  return message;\n}\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    (0,normalize_loader/* normalizeLoader */.T)(loader);\n  }\n}\n\nfunction findLoaderByUrl(loaders, url) {\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    if (mimeType === \"application/x.\".concat(loader.id)) {\n      return loader;\n    }\n  }\n  return null;\n}\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n  }\n\n  return null;\n}\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => data.startsWith(test));\n}\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => testBinary(data, byteOffset, loader, test));\n}\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return (0,array_buffer_utils/* compareArrayBuffers */.Xq)(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n    case 'string':\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n    default:\n      return false;\n  }\n}\nfunction getFirstCharacters(data) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n//# sourceMappingURL=select-loader.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/api/parse.js\n\n\n\n\n\n\n\n\n\n\nasync function parse(data, loaders, options, context) {\n  (0,assert/* assert */.h)(!context || typeof context === 'object');\n\n  if (loaders && !Array.isArray(loaders) && !(0,normalize_loader/* isLoaderObject */.C)(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n  data = await data;\n  options = options || {};\n\n  const {\n    url\n  } = (0,resource_utils/* getResourceUrlAndType */.l)(data);\n\n  const typedLoaders = loaders;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  const loader = await selectLoader(data, candidateLoaders, options);\n  if (!loader) {\n    return null;\n  }\n\n  options = (0,option_utils/* normalizeOptions */.GR)(options, loader, candidateLoaders, url);\n\n  context = getLoaderContext({\n    url,\n    parse,\n    loaders: candidateLoaders\n  }, options, context);\n  return await parseWithLoader(loader, data, options, context);\n}\n\nasync function parseWithLoader(loader, data, options, context) {\n  validateWorkerVersion(loader);\n  if ((0,is_type/* isResponse */.Ew)(data)) {\n    const response = data;\n    const {\n      ok,\n      redirected,\n      status,\n      statusText,\n      type,\n      url\n    } = response;\n    const headers = Object.fromEntries(response.headers.entries());\n    context.response = {\n      headers,\n      ok,\n      redirected,\n      status,\n      statusText,\n      type,\n      url\n    };\n  }\n  data = await getArrayBufferOrStringFromData(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (canParseWithWorker(loader, options)) {\n    return await parseWithWorker(loader, data, options, context, parse);\n  }\n\n  if (loader.parseText && typeof data === 'string') {\n    return await loader.parseText(data, options, context, loader);\n  }\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  (0,assert/* assert */.h)(!loader.parseSync);\n\n  throw new Error(\"\".concat(loader.id, \" loader - no parser found and worker is disabled\"));\n}\n//# sourceMappingURL=parse.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/api/load.js\n\n\n\n\n\nasync function load(url, loaders, options, context) {\n  if (!Array.isArray(loaders) && !(0,normalize_loader/* isLoaderObject */.C)(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n\n  const fetch = (0,option_utils/* getFetchFunction */.bV)(options);\n\n  let data = url;\n  if (typeof url === 'string') {\n    data = await fetch(url);\n  }\n\n  if ((0,is_type/* isBlob */.Lj)(url)) {\n    data = await fetch(url);\n  }\n\n  return await parse(data, loaders, options);\n}\n//# sourceMappingURL=load.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44534\n")},6228:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "fh": function() { return /* binding */ registerLoaders; },\n/* harmony export */   "kO": function() { return /* binding */ getRegisteredLoaders; }\n/* harmony export */ });\n/* unused harmony export _unregisterLoaders */\n/* harmony import */ var _loader_utils_normalize_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52033);\n/* harmony import */ var _loader_utils_option_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99597);\n\n\n\nconst getGlobalLoaderRegistry = () => {\n  const state = (0,_loader_utils_option_utils__WEBPACK_IMPORTED_MODULE_0__/* .getGlobalLoaderState */ .rx)();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nfunction registerLoaders(loaders) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  for (const loader of loaders) {\n    const normalizedLoader = (0,_loader_utils_normalize_loader__WEBPACK_IMPORTED_MODULE_1__/* .normalizeLoader */ .T)(loader);\n    if (!loaderRegistry.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\nfunction getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\n\nfunction _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n//# sourceMappingURL=register-loaders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIyOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1FO0FBQ0M7O0FBRXBFO0FBQ0EsZ0JBQWdCLDBGQUFvQjtBQUNwQztBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0ZBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbG9hZGVycy5nbC9jb3JlL2Rpc3QvZXNtL2xpYi9hcGkvcmVnaXN0ZXItbG9hZGVycy5qcz8zZTg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5vcm1hbGl6ZUxvYWRlciB9IGZyb20gJy4uL2xvYWRlci11dGlscy9ub3JtYWxpemUtbG9hZGVyJztcbmltcG9ydCB7IGdldEdsb2JhbExvYWRlclN0YXRlIH0gZnJvbSAnLi4vbG9hZGVyLXV0aWxzL29wdGlvbi11dGlscyc7XG5cbmNvbnN0IGdldEdsb2JhbExvYWRlclJlZ2lzdHJ5ID0gKCkgPT4ge1xuICBjb25zdCBzdGF0ZSA9IGdldEdsb2JhbExvYWRlclN0YXRlKCk7XG4gIHN0YXRlLmxvYWRlclJlZ2lzdHJ5ID0gc3RhdGUubG9hZGVyUmVnaXN0cnkgfHwgW107XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJSZWdpc3RyeTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckxvYWRlcnMobG9hZGVycykge1xuICBjb25zdCBsb2FkZXJSZWdpc3RyeSA9IGdldEdsb2JhbExvYWRlclJlZ2lzdHJ5KCk7XG4gIGxvYWRlcnMgPSBBcnJheS5pc0FycmF5KGxvYWRlcnMpID8gbG9hZGVycyA6IFtsb2FkZXJzXTtcbiAgZm9yIChjb25zdCBsb2FkZXIgb2YgbG9hZGVycykge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRMb2FkZXIgPSBub3JtYWxpemVMb2FkZXIobG9hZGVyKTtcbiAgICBpZiAoIWxvYWRlclJlZ2lzdHJ5LmZpbmQocmVnaXN0ZXJlZExvYWRlciA9PiBub3JtYWxpemVkTG9hZGVyID09PSByZWdpc3RlcmVkTG9hZGVyKSkge1xuICAgICAgbG9hZGVyUmVnaXN0cnkudW5zaGlmdChub3JtYWxpemVkTG9hZGVyKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkTG9hZGVycygpIHtcbiAgcmV0dXJuIGdldEdsb2JhbExvYWRlclJlZ2lzdHJ5KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfdW5yZWdpc3RlckxvYWRlcnMoKSB7XG4gIGNvbnN0IHN0YXRlID0gZ2V0R2xvYmFsTG9hZGVyU3RhdGUoKTtcbiAgc3RhdGUubG9hZGVyUmVnaXN0cnkgPSBbXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZ2lzdGVyLWxvYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6228\n')},52033:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"C\": function() { return /* binding */ isLoaderObject; },\n/* harmony export */   \"T\": function() { return /* binding */ normalizeLoader; }\n/* harmony export */ });\n/* harmony import */ var _loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16269);\n\nfunction isLoaderObject(loader) {\n  var _loader;\n  if (!loader) {\n    return false;\n  }\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n  const hasExtensions = Array.isArray((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.extensions);\n\n  return hasExtensions;\n}\nfunction normalizeLoader(loader) {\n  var _loader2, _loader3;\n  (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__/* .assert */ .h)(loader, 'null loader');\n  (0,_loaders_gl_loader_utils__WEBPACK_IMPORTED_MODULE_0__/* .assert */ .h)(isLoaderObject(loader), 'invalid loader');\n\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {\n        ...loader.options,\n        ...options\n      }\n    };\n  }\n\n  if ((_loader2 = loader) !== null && _loader2 !== void 0 && _loader2.parseTextSync || (_loader3 = loader) !== null && _loader3 !== void 0 && _loader3.parseText) {\n    loader.text = true;\n  }\n  if (!loader.text) {\n    loader.binary = true;\n  }\n  return loader;\n}\n//# sourceMappingURL=normalize-loader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIwMzMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDM0M7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsRUFBRSx5RUFBTTtBQUNSLEVBQUUseUVBQU07O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGxvYWRlcnMuZ2wvY29yZS9kaXN0L2VzbS9saWIvbG9hZGVyLXV0aWxzL25vcm1hbGl6ZS1sb2FkZXIuanM/ZGNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdAbG9hZGVycy5nbC9sb2FkZXItdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG9hZGVyT2JqZWN0KGxvYWRlcikge1xuICB2YXIgX2xvYWRlcjtcbiAgaWYgKCFsb2FkZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkobG9hZGVyKSkge1xuICAgIGxvYWRlciA9IGxvYWRlclswXTtcbiAgfVxuICBjb25zdCBoYXNFeHRlbnNpb25zID0gQXJyYXkuaXNBcnJheSgoX2xvYWRlciA9IGxvYWRlcikgPT09IG51bGwgfHwgX2xvYWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2xvYWRlci5leHRlbnNpb25zKTtcblxuICByZXR1cm4gaGFzRXh0ZW5zaW9ucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVMb2FkZXIobG9hZGVyKSB7XG4gIHZhciBfbG9hZGVyMiwgX2xvYWRlcjM7XG4gIGFzc2VydChsb2FkZXIsICdudWxsIGxvYWRlcicpO1xuICBhc3NlcnQoaXNMb2FkZXJPYmplY3QobG9hZGVyKSwgJ2ludmFsaWQgbG9hZGVyJyk7XG5cbiAgbGV0IG9wdGlvbnM7XG4gIGlmIChBcnJheS5pc0FycmF5KGxvYWRlcikpIHtcbiAgICBvcHRpb25zID0gbG9hZGVyWzFdO1xuICAgIGxvYWRlciA9IGxvYWRlclswXTtcbiAgICBsb2FkZXIgPSB7XG4gICAgICAuLi5sb2FkZXIsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIC4uLmxvYWRlci5vcHRpb25zLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmICgoX2xvYWRlcjIgPSBsb2FkZXIpICE9PSBudWxsICYmIF9sb2FkZXIyICE9PSB2b2lkIDAgJiYgX2xvYWRlcjIucGFyc2VUZXh0U3luYyB8fCAoX2xvYWRlcjMgPSBsb2FkZXIpICE9PSBudWxsICYmIF9sb2FkZXIzICE9PSB2b2lkIDAgJiYgX2xvYWRlcjMucGFyc2VUZXh0KSB7XG4gICAgbG9hZGVyLnRleHQgPSB0cnVlO1xuICB9XG4gIGlmICghbG9hZGVyLnRleHQpIHtcbiAgICBsb2FkZXIuYmluYXJ5ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbG9hZGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplLWxvYWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52033\n")},99597:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"bV\": function() { return /* binding */ getFetchFunction; },\n  \"rx\": function() { return /* binding */ getGlobalLoaderState; },\n  \"GR\": function() { return /* binding */ normalizeOptions; }\n});\n\n// UNUSED EXPORTS: getGlobalLoaderOptions, setGlobalOptions\n\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/javascript-utils/is-type.js\nvar is_type = __webpack_require__(36255);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/path-utils/file-aliases.js\n\n\nlet pathPrefix = '';\nconst fileAliases = {};\n\nfunction setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\nfunction getPathPrefix() {\n  return pathPrefix;\n}\n\nfunction addAliases(aliases) {\n  Object.assign(fileAliases, aliases);\n}\n\nfunction resolvePath(filename) {\n  for (const alias in fileAliases) {\n    if (filename.startsWith(alias)) {\n      const replacement = fileAliases[alias];\n      filename = filename.replace(alias, replacement);\n    }\n  }\n  if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n    filename = \"\".concat(pathPrefix).concat(filename);\n  }\n  return filename;\n}\n//# sourceMappingURL=file-aliases.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/utils/response-utils.js\nvar response_utils = __webpack_require__(17927);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/fetch/fetch-file.js\n\n\n\nasync function fetchFile(url, options) {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n    let fetchOptions = options;\n    if (options !== null && options !== void 0 && options.fetch && typeof (options === null || options === void 0 ? void 0 : options.fetch) !== 'function') {\n      fetchOptions = options.fetch;\n    }\n    return await fetch(url, fetchOptions);\n  }\n  return await (0,response_utils/* makeResponse */.L1)(url);\n}\n//# sourceMappingURL=fetch-file.js.map\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n// EXTERNAL MODULE: ./node_modules/@probe.gl/log/dist/esm/log.js + 8 modules\nvar log = __webpack_require__(56426);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/loggers.js\n\n\nconst probeLog = new log/* Log */.Z({\n  id: 'loaders.gl'\n});\n\nclass NullLog {\n  log() {\n    return () => {};\n  }\n  info() {\n    return () => {};\n  }\n  warn() {\n    return () => {};\n  }\n  error() {\n    return () => {};\n  }\n}\n\nclass ConsoleLog {\n  constructor() {\n    (0,defineProperty/* default */.Z)(this, \"console\", void 0);\n    this.console = console;\n  }\n\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return this.console.log.bind(this.console, ...args);\n  }\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this.console.info.bind(this.console, ...args);\n  }\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return this.console.warn.bind(this.console, ...args);\n  }\n  error() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return this.console.error.bind(this.console, ...args);\n  }\n}\n//# sourceMappingURL=loggers.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/globals.js\nvar globals = __webpack_require__(84959);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/option-defaults.js\n\n\nconst DEFAULT_LOADER_OPTIONS = {\n  fetch: null,\n  mimeType: undefined,\n  nothrow: false,\n  log: new ConsoleLog(),\n\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true,\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: globals/* isBrowser */.jU,\n  _nodeWorkers: false,\n  _workerType: '',\n\n  limit: 0,\n  _limitMB: 0,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  metadata: false,\n  transforms: []\n};\nconst REMOVED_LOADER_OPTIONS = {\n  throws: 'nothrow',\n  dataType: '(no longer used)',\n  uri: 'baseUri',\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};\n//# sourceMappingURL=option-defaults.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/loader-utils/option-utils.js\n\n\n\n\n\nfunction getGlobalLoaderState() {\n  globalThis.loaders = globalThis.loaders || {};\n  const {\n    loaders\n  } = globalThis;\n\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\nconst getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  state.globalOptions = state.globalOptions || {\n    ...DEFAULT_LOADER_OPTIONS\n  };\n  return state.globalOptions;\n};\n\nfunction setGlobalOptions(options) {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\nfunction normalizeOptions(options, loader, loaders, url) {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\nfunction getFetchFunction(options, context) {\n  const globalOptions = getGlobalLoaderOptions();\n  const fetchOptions = options || globalOptions;\n\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  if ((0,is_type/* isObject */.Kn)(fetchOptions.fetch)) {\n    return url => fetchFile(url, fetchOptions);\n  }\n\n  if (context !== null && context !== void 0 && context.fetch) {\n    return context === null || context === void 0 ? void 0 : context.fetch;\n  }\n\n  return fetchFile;\n}\n\nfunction validateOptions(options, loaders) {\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n  for (const loader of loaders) {\n    const idOptions = options && options[loader.id] || {};\n\n    const loaderOptions = loader.options && loader.options[loader.id] || {};\n    const deprecatedOptions = loader.deprecatedOptions && loader.deprecatedOptions[loader.id] || {};\n\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\nfunction validateOptionsObject(options, id, defaultOptions, deprecatedOptions, loaders) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? \"\".concat(id, \".\") : '';\n  for (const key in options) {\n    const isSubOptions = !id && (0,is_type/* isObject */.Kn)(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      if (key in deprecatedOptions) {\n        probeLog.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' no longer supported, use '\").concat(deprecatedOptions[key], \"'\"))();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' not recognized. \").concat(suggestion))();\n      }\n    }\n  }\n}\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n      }\n    }\n  }\n  return bestSuggestion;\n}\nfunction normalizeOptionsInternal(loader, options, url) {\n  const loaderDefaultOptions = loader.options || {};\n  const mergedOptions = {\n    ...loaderDefaultOptions\n  };\n  addUrlOptions(mergedOptions, url);\n\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n  return mergedOptions;\n}\n\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    if (key in options) {\n      const value = options[key];\n      if ((0,is_type/* isPureObject */.Ss)(value) && (0,is_type/* isPureObject */.Ss)(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n  }\n}\n\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n//# sourceMappingURL=option-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99597\n")},74642:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"C\": function() { return /* binding */ getResourceContentLength; },\n  \"l\": function() { return /* binding */ getResourceUrlAndType; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/core/dist/esm/javascript-utils/is-type.js\nvar is_type = __webpack_require__(36255);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/utils/mime-type-utils.js\n\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\nfunction parseMIMEType(mimeString) {\n  const matches = MIME_TYPE_PATTERN.exec(mimeString);\n  if (matches) {\n    return matches[1];\n  }\n  return mimeString;\n}\n\nfunction parseMIMETypeFromURL(url) {\n  const matches = DATA_URL_PATTERN.exec(url);\n  if (matches) {\n    return matches[1];\n  }\n  return '';\n}\n//# sourceMappingURL=mime-type-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/core/dist/esm/lib/utils/resource-utils.js\n\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\nfunction getResourceUrlAndType(resource) {\n  if ((0,is_type/* isResponse */.Ew)(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  if ((0,is_type/* isBlob */.Lj)(resource)) {\n    return {\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n  if (typeof resource === 'string') {\n    return {\n      url: stripQueryString(resource),\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  return {\n    url: '',\n    type: ''\n  };\n}\n\nfunction getResourceContentLength(resource) {\n  if ((0,is_type/* isResponse */.Ew)(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if ((0,is_type/* isBlob */.Lj)(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n//# sourceMappingURL=resource-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ2NDIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUEscURBQXFEO0FBQ3JEOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkM7O0FDcEJvRTtBQUNJO0FBQ3hFOztBQUVPO0FBQ1AsTUFBTSw4QkFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksYUFBYSx1QkFBdUIsb0JBQW9CO0FBQ3BFO0FBQ0E7O0FBRUEsTUFBTSwwQkFBTTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCxNQUFNLDhCQUFVO0FBQ2hCO0FBQ0E7QUFDQSxNQUFNLDBCQUFNO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGxvYWRlcnMuZ2wvY29yZS9kaXN0L2VzbS9saWIvdXRpbHMvbWltZS10eXBlLXV0aWxzLmpzP2E1ZTgiLCJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbG9hZGVycy5nbC9jb3JlL2Rpc3QvZXNtL2xpYi91dGlscy9yZXNvdXJjZS11dGlscy5qcz9kZDBhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5jb25zdCBEQVRBX1VSTF9QQVRURVJOID0gL15kYXRhOihbLVxcdy5dK1xcL1stXFx3LitdKykoO3wsKS87XG5jb25zdCBNSU1FX1RZUEVfUEFUVEVSTiA9IC9eKFstXFx3Ll0rXFwvWy1cXHcuK10rKS87XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1JTUVUeXBlKG1pbWVTdHJpbmcpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IE1JTUVfVFlQRV9QQVRURVJOLmV4ZWMobWltZVN0cmluZyk7XG4gIGlmIChtYXRjaGVzKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNbMV07XG4gIH1cbiAgcmV0dXJuIG1pbWVTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1JTUVUeXBlRnJvbVVSTCh1cmwpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IERBVEFfVVJMX1BBVFRFUk4uZXhlYyh1cmwpO1xuICBpZiAobWF0Y2hlcykge1xuICAgIHJldHVybiBtYXRjaGVzWzFdO1xuICB9XG4gIHJldHVybiAnJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbWUtdHlwZS11dGlscy5qcy5tYXAiLCJpbXBvcnQgeyBpc1Jlc3BvbnNlLCBpc0Jsb2IgfSBmcm9tICcuLi8uLi9qYXZhc2NyaXB0LXV0aWxzL2lzLXR5cGUnO1xuaW1wb3J0IHsgcGFyc2VNSU1FVHlwZSwgcGFyc2VNSU1FVHlwZUZyb21VUkwgfSBmcm9tICcuL21pbWUtdHlwZS11dGlscyc7XG5jb25zdCBRVUVSWV9TVFJJTkdfUEFUVEVSTiA9IC9cXD8uKi87XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXNvdXJjZVVybEFuZFR5cGUocmVzb3VyY2UpIHtcbiAgaWYgKGlzUmVzcG9uc2UocmVzb3VyY2UpKSB7XG4gICAgY29uc3QgdXJsID0gc3RyaXBRdWVyeVN0cmluZyhyZXNvdXJjZS51cmwgfHwgJycpO1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlSGVhZGVyID0gcmVzb3VyY2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpIHx8ICcnO1xuICAgIHJldHVybiB7XG4gICAgICB1cmwsXG4gICAgICB0eXBlOiBwYXJzZU1JTUVUeXBlKGNvbnRlbnRUeXBlSGVhZGVyKSB8fCBwYXJzZU1JTUVUeXBlRnJvbVVSTCh1cmwpXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc0Jsb2IocmVzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogc3RyaXBRdWVyeVN0cmluZyhyZXNvdXJjZS5uYW1lIHx8ICcnKSxcbiAgICAgIHR5cGU6IHJlc291cmNlLnR5cGUgfHwgJydcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgcmVzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogc3RyaXBRdWVyeVN0cmluZyhyZXNvdXJjZSksXG4gICAgICB0eXBlOiBwYXJzZU1JTUVUeXBlRnJvbVVSTChyZXNvdXJjZSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB1cmw6ICcnLFxuICAgIHR5cGU6ICcnXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXNvdXJjZUNvbnRlbnRMZW5ndGgocmVzb3VyY2UpIHtcbiAgaWYgKGlzUmVzcG9uc2UocmVzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHJlc291cmNlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gfHwgLTE7XG4gIH1cbiAgaWYgKGlzQmxvYihyZXNvdXJjZSkpIHtcbiAgICByZXR1cm4gcmVzb3VyY2Uuc2l6ZTtcbiAgfVxuICBpZiAodHlwZW9mIHJlc291cmNlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiByZXNvdXJjZS5sZW5ndGg7XG4gIH1cbiAgaWYgKHJlc291cmNlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gcmVzb3VyY2UuYnl0ZUxlbmd0aDtcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHJlc291cmNlKSkge1xuICAgIHJldHVybiByZXNvdXJjZS5ieXRlTGVuZ3RoO1xuICB9XG4gIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwUXVlcnlTdHJpbmcodXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShRVUVSWV9TVFJJTkdfUEFUVEVSTiwgJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb3VyY2UtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74642\n")},17927:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "L1": function() { return /* binding */ makeResponse; },\n/* harmony export */   "mm": function() { return /* binding */ checkResponse; }\n/* harmony export */ });\n/* unused harmony export checkResponseSync */\n/* harmony import */ var _javascript_utils_is_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36255);\n/* harmony import */ var _resource_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74642);\n\n\n\nasync function makeResponse(resource) {\n  if ((0,_javascript_utils_is_type__WEBPACK_IMPORTED_MODULE_0__/* .isResponse */ .Ew)(resource)) {\n    return resource;\n  }\n\n  const headers = {};\n  const contentLength = (0,_resource_utils__WEBPACK_IMPORTED_MODULE_1__/* .getResourceContentLength */ .C)(resource);\n  if (contentLength >= 0) {\n    headers[\'content-length\'] = String(contentLength);\n  }\n\n  const {\n    url,\n    type\n  } = (0,_resource_utils__WEBPACK_IMPORTED_MODULE_1__/* .getResourceUrlAndType */ .l)(resource);\n  if (type) {\n    headers[\'content-type\'] = type;\n  }\n\n  const initialDataUrl = await getInitialDataUrl(resource);\n  if (initialDataUrl) {\n    headers[\'x-first-bytes\'] = initialDataUrl;\n  }\n\n  if (typeof resource === \'string\') {\n    resource = new TextEncoder().encode(resource);\n  }\n\n  const response = new Response(resource, {\n    headers\n  });\n  Object.defineProperty(response, \'url\', {\n    value: url\n  });\n  return response;\n}\n\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const message = await getResponseError(response);\n    throw new Error(message);\n  }\n}\n\nfunction checkResponseSync(response) {\n  if (!response.ok) {\n    let message = "".concat(response.status, " ").concat(response.statusText);\n    message = message.length > 60 ? "".concat(message.slice(0, 60), "...") : message;\n    throw new Error(message);\n  }\n}\n\nasync function getResponseError(response) {\n  let message = "Failed to fetch resource ".concat(response.url, " (").concat(response.status, "): ");\n  try {\n    const contentType = response.headers.get(\'Content-Type\');\n    let text = response.statusText;\n    if (contentType.includes(\'application/json\')) {\n      text += " ".concat(await response.text());\n    }\n    message += text;\n    message = message.length > 60 ? "".concat(message.slice(0, 60), "...") : message;\n  } catch (error) {\n  }\n  return message;\n}\nasync function getInitialDataUrl(resource) {\n  const INITIAL_DATA_LENGTH = 5;\n  if (typeof resource === \'string\') {\n    return "data:,".concat(resource.slice(0, INITIAL_DATA_LENGTH));\n  }\n  if (resource instanceof Blob) {\n    const blobSlice = resource.slice(0, 5);\n    return await new Promise(resolve => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        var _event$target;\n        return resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n      };\n      reader.readAsDataURL(blobSlice);\n    });\n  }\n  if (resource instanceof ArrayBuffer) {\n    const slice = resource.slice(0, INITIAL_DATA_LENGTH);\n    const base64 = arrayBufferToBase64(slice);\n    return "data:base64,".concat(base64);\n  }\n  return null;\n}\n\nfunction arrayBufferToBase64(buffer) {\n  let binary = \'\';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n//# sourceMappingURL=response-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5MjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0RDtBQUN1Qjs7QUFFNUU7QUFDUCxNQUFNLCtFQUFVO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0Isa0ZBQXdCO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLEVBQUUsK0VBQXFCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0Bsb2FkZXJzLmdsL2NvcmUvZGlzdC9lc20vbGliL3V0aWxzL3Jlc3BvbnNlLXV0aWxzLmpzPzg0ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNSZXNwb25zZSB9IGZyb20gJy4uLy4uL2phdmFzY3JpcHQtdXRpbHMvaXMtdHlwZSc7XG5pbXBvcnQgeyBnZXRSZXNvdXJjZUNvbnRlbnRMZW5ndGgsIGdldFJlc291cmNlVXJsQW5kVHlwZSB9IGZyb20gJy4vcmVzb3VyY2UtdXRpbHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFrZVJlc3BvbnNlKHJlc291cmNlKSB7XG4gIGlmIChpc1Jlc3BvbnNlKHJlc291cmNlKSkge1xuICAgIHJldHVybiByZXNvdXJjZTtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgY29uc3QgY29udGVudExlbmd0aCA9IGdldFJlc291cmNlQ29udGVudExlbmd0aChyZXNvdXJjZSk7XG4gIGlmIChjb250ZW50TGVuZ3RoID49IDApIHtcbiAgICBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gU3RyaW5nKGNvbnRlbnRMZW5ndGgpO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIHVybCxcbiAgICB0eXBlXG4gIH0gPSBnZXRSZXNvdXJjZVVybEFuZFR5cGUocmVzb3VyY2UpO1xuICBpZiAodHlwZSkge1xuICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gdHlwZTtcbiAgfVxuXG4gIGNvbnN0IGluaXRpYWxEYXRhVXJsID0gYXdhaXQgZ2V0SW5pdGlhbERhdGFVcmwocmVzb3VyY2UpO1xuICBpZiAoaW5pdGlhbERhdGFVcmwpIHtcbiAgICBoZWFkZXJzWyd4LWZpcnN0LWJ5dGVzJ10gPSBpbml0aWFsRGF0YVVybDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzb3VyY2UgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocmVzb3VyY2UpO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UocmVzb3VyY2UsIHtcbiAgICBoZWFkZXJzXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsICd1cmwnLCB7XG4gICAgdmFsdWU6IHVybFxuICB9KTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tSZXNwb25zZShyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IGdldFJlc3BvbnNlRXJyb3IocmVzcG9uc2UpO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZXNwb25zZVN5bmMocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGxldCBtZXNzYWdlID0gXCJcIi5jb25jYXQocmVzcG9uc2Uuc3RhdHVzLCBcIiBcIikuY29uY2F0KHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDYwID8gXCJcIi5jb25jYXQobWVzc2FnZS5zbGljZSgwLCA2MCksIFwiLi4uXCIpIDogbWVzc2FnZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVzcG9uc2VFcnJvcihyZXNwb25zZSkge1xuICBsZXQgbWVzc2FnZSA9IFwiRmFpbGVkIHRvIGZldGNoIHJlc291cmNlIFwiLmNvbmNhdChyZXNwb25zZS51cmwsIFwiIChcIikuY29uY2F0KHJlc3BvbnNlLnN0YXR1cywgXCIpOiBcIik7XG4gIHRyeSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJyk7XG4gICAgbGV0IHRleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICB0ZXh0ICs9IFwiIFwiLmNvbmNhdChhd2FpdCByZXNwb25zZS50ZXh0KCkpO1xuICAgIH1cbiAgICBtZXNzYWdlICs9IHRleHQ7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gNjAgPyBcIlwiLmNvbmNhdChtZXNzYWdlLnNsaWNlKDAsIDYwKSwgXCIuLi5cIikgOiBtZXNzYWdlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICB9XG4gIHJldHVybiBtZXNzYWdlO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0SW5pdGlhbERhdGFVcmwocmVzb3VyY2UpIHtcbiAgY29uc3QgSU5JVElBTF9EQVRBX0xFTkdUSCA9IDU7XG4gIGlmICh0eXBlb2YgcmVzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFwiZGF0YTosXCIuY29uY2F0KHJlc291cmNlLnNsaWNlKDAsIElOSVRJQUxfREFUQV9MRU5HVEgpKTtcbiAgfVxuICBpZiAocmVzb3VyY2UgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgY29uc3QgYmxvYlNsaWNlID0gcmVzb3VyY2Uuc2xpY2UoMCwgNSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBldmVudCA9PiB7XG4gICAgICAgIHZhciBfZXZlbnQkdGFyZ2V0O1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9ldmVudCR0YXJnZXQgPSBldmVudC50YXJnZXQpID09PSBudWxsIHx8IF9ldmVudCR0YXJnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ldmVudCR0YXJnZXQucmVzdWx0KTtcbiAgICAgIH07XG4gICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iU2xpY2UpO1xuICAgIH0pO1xuICB9XG4gIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgY29uc3Qgc2xpY2UgPSByZXNvdXJjZS5zbGljZSgwLCBJTklUSUFMX0RBVEFfTEVOR1RIKTtcbiAgICBjb25zdCBiYXNlNjQgPSBhcnJheUJ1ZmZlclRvQmFzZTY0KHNsaWNlKTtcbiAgICByZXR1cm4gXCJkYXRhOmJhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0Jhc2U2NChidWZmZXIpIHtcbiAgbGV0IGJpbmFyeSA9ICcnO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICB9XG4gIHJldHVybiBidG9hKGJpbmFyeSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZS11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17927\n')},52462:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"E\": function() { return /* binding */ GLTFLoader; }\n});\n\n// UNUSED EXPORTS: parse\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/EXT_meshopt_compression.js\nvar EXT_meshopt_compression_namespaceObject = {};\n__webpack_require__.r(EXT_meshopt_compression_namespaceObject);\n__webpack_require__.d(EXT_meshopt_compression_namespaceObject, {\n  \"decode\": function() { return EXT_meshopt_compression_decode; },\n  \"name\": function() { return EXT_meshopt_compression_name; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/EXT_texture_webp.js\nvar EXT_texture_webp_namespaceObject = {};\n__webpack_require__.r(EXT_texture_webp_namespaceObject);\n__webpack_require__.d(EXT_texture_webp_namespaceObject, {\n  \"name\": function() { return EXT_texture_webp_name; },\n  \"preprocess\": function() { return preprocess; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_texture_basisu.js\nvar KHR_texture_basisu_namespaceObject = {};\n__webpack_require__.r(KHR_texture_basisu_namespaceObject);\n__webpack_require__.d(KHR_texture_basisu_namespaceObject, {\n  \"name\": function() { return KHR_texture_basisu_name; },\n  \"preprocess\": function() { return KHR_texture_basisu_preprocess; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_draco_mesh_compression.js\nvar KHR_draco_mesh_compression_namespaceObject = {};\n__webpack_require__.r(KHR_draco_mesh_compression_namespaceObject);\n__webpack_require__.d(KHR_draco_mesh_compression_namespaceObject, {\n  \"decode\": function() { return KHR_draco_mesh_compression_decode; },\n  \"encode\": function() { return encode; },\n  \"name\": function() { return KHR_draco_mesh_compression_name; },\n  \"preprocess\": function() { return KHR_draco_mesh_compression_preprocess; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_texture_transform.js\nvar KHR_texture_transform_namespaceObject = {};\n__webpack_require__.r(KHR_texture_transform_namespaceObject);\n__webpack_require__.d(KHR_texture_transform_namespaceObject, {\n  \"decode\": function() { return KHR_texture_transform_decode; },\n  \"name\": function() { return KHR_texture_transform_name; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/KHR_lights_punctual.js\nvar KHR_lights_punctual_namespaceObject = {};\n__webpack_require__.r(KHR_lights_punctual_namespaceObject);\n__webpack_require__.d(KHR_lights_punctual_namespaceObject, {\n  \"decode\": function() { return KHR_lights_punctual_decode; },\n  \"encode\": function() { return KHR_lights_punctual_encode; },\n  \"name\": function() { return KHR_lights_punctual_name; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/KHR_materials_unlit.js\nvar KHR_materials_unlit_namespaceObject = {};\n__webpack_require__.r(KHR_materials_unlit_namespaceObject);\n__webpack_require__.d(KHR_materials_unlit_namespaceObject, {\n  \"decode\": function() { return KHR_materials_unlit_decode; },\n  \"encode\": function() { return KHR_materials_unlit_encode; },\n  \"name\": function() { return KHR_materials_unlit_name; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/KHR_techniques_webgl.js\nvar KHR_techniques_webgl_namespaceObject = {};\n__webpack_require__.r(KHR_techniques_webgl_namespaceObject);\n__webpack_require__.d(KHR_techniques_webgl_namespaceObject, {\n  \"decode\": function() { return KHR_techniques_webgl_decode; },\n  \"encode\": function() { return KHR_techniques_webgl_encode; },\n  \"name\": function() { return KHR_techniques_webgl_name; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/EXT_feature_metadata.js\nvar EXT_feature_metadata_namespaceObject = {};\n__webpack_require__.r(EXT_feature_metadata_namespaceObject);\n__webpack_require__.d(EXT_feature_metadata_namespaceObject, {\n  \"decode\": function() { return EXT_feature_metadata_decode; },\n  \"name\": function() { return EXT_feature_metadata_name; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/utils/version.js\n\nconst VERSION =  true ? \"3.3.1\" : 0;\n//# sourceMappingURL=version.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/globals.js\nvar globals = __webpack_require__(96013);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/lib/utils/version.js\n\nconst version_VERSION =  true ? \"3.3.1\" : 0;\n//# sourceMappingURL=version.js.map\n// EXTERNAL MODULE: ../node/require-utils.node (ignored)\nvar require_utils_ignored_ = __webpack_require__(49125);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/env-utils/assert.js\nvar assert = __webpack_require__(96040);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/worker-utils/dist/esm/lib/library-utils/library-utils.js\n\n\n\n\n\n\nconst LATEST = 'latest';\nconst library_utils_VERSION =  true ? \"3.3.1\" : 0;\nconst loadLibraryPromises = {};\n\nasync function library_utils_loadLibrary(libraryUrl) {\n  let moduleName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  loadLibraryPromises[libraryUrl] =\n  loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\nfunction getLibraryUrl(library, moduleName, options) {\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  if (!globals/* isBrowser */.jU) {\n    return \"modules/\".concat(moduleName, \"/dist/libs/\").concat(library);\n  }\n\n  if (options.CDN) {\n    (0,assert/* assert */.h)(options.CDN.startsWith('http'));\n    return \"\".concat(options.CDN, \"/\").concat(moduleName, \"@\").concat(library_utils_VERSION, \"/dist/libs/\").concat(library);\n  }\n\n  if (globals/* isWorker */.hJ) {\n    return \"../src/libs/\".concat(library);\n  }\n  return \"modules/\".concat(moduleName, \"/src/libs/\").concat(library);\n}\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n  if (!globals/* isBrowser */.jU) {\n    try {\n      return require_utils_ignored_ && require_utils_ignored_.requireFromFile && (await require_utils_ignored_.requireFromFile(libraryUrl));\n    } catch {\n      return null;\n    }\n  }\n  if (globals/* isWorker */.hJ) {\n    return importScripts(libraryUrl);\n  }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!globals/* isBrowser */.jU) {\n    return require_utils_ignored_.requireFromString && require_utils_ignored_.requireFromString(scriptSource, id);\n  }\n  if (globals/* isWorker */.hJ) {\n    eval.call(globals/* global */.CO, scriptSource);\n    return null;\n  }\n  const script = document.createElement('script');\n  script.id = id;\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n//# sourceMappingURL=library-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/lib/parsers/basis-module-loader.js\n\nconst basis_module_loader_VERSION =  true ? \"3.3.1\" : 0;\n\n\nconst BASIS_CDN_ENCODER_WASM = \"https://unpkg.com/@loaders.gl/textures@\".concat(basis_module_loader_VERSION, \"/dist/libs/basis_encoder.wasm\");\nconst BASIS_CDN_ENCODER_JS = \"https://unpkg.com/@loaders.gl/textures@\".concat(basis_module_loader_VERSION, \"/dist/libs/basis_encoder.js\");\nlet loadBasisTranscoderPromise;\n\nasync function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n  [BASIS, wasmBinary] = await Promise.all([await library_utils_loadLibrary('basis_transcoder.js', 'textures', options), await library_utils_loadLibrary('basis_transcoder.wasm', 'textures', options)]);\n\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    BasisModule(options).then(module => {\n      const {\n        BasisFile,\n        initializeBasis\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile\n      });\n    });\n  });\n}\nlet loadBasisEncoderPromise;\n\nasync function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([await library_utils_loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options), await library_utils_loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)]);\n\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    BasisEncoderModule(options).then(module => {\n      const {\n        BasisFile,\n        KTX2File,\n        initializeBasis,\n        BasisEncoder\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile,\n        KTX2File,\n        BasisEncoder\n      });\n    });\n  });\n}\n//# sourceMappingURL=basis-module-loader.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/lib/gl-extensions.js\n\nconst GL_EXTENSIONS_CONSTANTS = {\n\n  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,\n  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,\n  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,\n  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,\n\n  COMPRESSED_R11_EAC: 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC: 0x9273,\n  COMPRESSED_RGB8_ETC2: 0x9274,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,\n  COMPRESSED_SRGB8_ETC2: 0x9276,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,\n\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,\n\n  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,\n\n  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c93,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,\n\n  COMPRESSED_RGBA_ASTC_4X4_KHR: 0x93b0,\n  COMPRESSED_RGBA_ASTC_5X4_KHR: 0x93b1,\n  COMPRESSED_RGBA_ASTC_5X5_KHR: 0x93b2,\n  COMPRESSED_RGBA_ASTC_6X5_KHR: 0x93b3,\n  COMPRESSED_RGBA_ASTC_6X6_KHR: 0x93b4,\n  COMPRESSED_RGBA_ASTC_8X5_KHR: 0x93b5,\n  COMPRESSED_RGBA_ASTC_8X6_KHR: 0x93b6,\n  COMPRESSED_RGBA_ASTC_8X8_KHR: 0x93b7,\n  COMPRESSED_RGBA_ASTC_10X5_KHR: 0x93b8,\n  COMPRESSED_RGBA_ASTC_10X6_KHR: 0x93b9,\n  COMPRESSED_RGBA_ASTC_10X8_KHR: 0x93ba,\n  COMPRESSED_RGBA_ASTC_10X10_KHR: 0x93bb,\n  COMPRESSED_RGBA_ASTC_12X10_KHR: 0x93bc,\n  COMPRESSED_RGBA_ASTC_12X12_KHR: 0x93bd,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR: 0x93d0,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR: 0x93d1,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR: 0x93d2,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR: 0x93d3,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR: 0x93d4,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR: 0x93d5,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR: 0x93d6,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR: 0x93d7,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR: 0x93d8,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR: 0x93d9,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR: 0x93da,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR: 0x93db,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR: 0x93dc,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR: 0x93dd,\n\n  COMPRESSED_RED_RGTC1_EXT: 0x8dbb,\n  COMPRESSED_SIGNED_RED_RGTC1_EXT: 0x8dbc,\n  COMPRESSED_RED_GREEN_RGTC2_EXT: 0x8dbd,\n  COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 0x8dbe,\n\n  COMPRESSED_SRGB_S3TC_DXT1_EXT: 0x8c4c,\n  COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 0x8c4d,\n  COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 0x8c4e,\n  COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 0x8c4f\n};\n//# sourceMappingURL=gl-extensions.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/lib/utils/texture-formats.js\nconst BROWSER_PREFIXES = ['', 'WEBKIT_', 'MOZ_'];\nconst WEBGL_EXTENSIONS = {\n  WEBGL_compressed_texture_s3tc: 'dxt',\n  WEBGL_compressed_texture_s3tc_srgb: 'dxt-srgb',\n  WEBGL_compressed_texture_etc1: 'etc1',\n  WEBGL_compressed_texture_etc: 'etc2',\n  WEBGL_compressed_texture_pvrtc: 'pvrtc',\n  WEBGL_compressed_texture_atc: 'atc',\n  WEBGL_compressed_texture_astc: 'astc',\n  EXT_texture_compression_rgtc: 'rgtc'\n};\n\nlet formats = null;\n\nfunction getSupportedGPUTextureFormats(gl) {\n  if (!formats) {\n    gl = gl || getWebGLContext() || undefined;\n    formats = new Set();\n    for (const prefix of BROWSER_PREFIXES) {\n      for (const extension in WEBGL_EXTENSIONS) {\n        if (gl && gl.getExtension(\"\".concat(prefix).concat(extension))) {\n          const gpuTextureFormat = WEBGL_EXTENSIONS[extension];\n          formats.add(gpuTextureFormat);\n        }\n      }\n    }\n  }\n  return formats;\n}\n\nfunction getWebGLContext() {\n  try {\n    const canvas = document.createElement('canvas');\n    return canvas.getContext('webgl');\n  } catch (error) {\n    return null;\n  }\n}\n//# sourceMappingURL=texture-formats.js.map\n// EXTERNAL MODULE: ./node_modules/ktx-parse/dist/ktx-parse.modern.js\nvar ktx_parse_modern = __webpack_require__(31029);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/lib/parsers/parse-ktx.js\n\n\n\nconst KTX2_ID = [\n0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\n\nfunction isKTX(data) {\n  const id = new Uint8Array(data);\n  const notKTX = id.byteLength < KTX2_ID.length || id[0] !== KTX2_ID[0] ||\n  id[1] !== KTX2_ID[1] ||\n  id[2] !== KTX2_ID[2] ||\n  id[3] !== KTX2_ID[3] ||\n  id[4] !== KTX2_ID[4] ||\n  id[5] !== KTX2_ID[5] ||\n  id[6] !== KTX2_ID[6] ||\n  id[7] !== KTX2_ID[7] ||\n  id[8] !== KTX2_ID[8] ||\n  id[9] !== KTX2_ID[9] ||\n  id[10] !== KTX2_ID[10] ||\n  id[11] !== KTX2_ID[11];\n\n  return !notKTX;\n}\nfunction parseKTX(arrayBuffer) {\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const ktx = read(uint8Array);\n  const mipMapLevels = Math.max(1, ktx.levels.length);\n  const width = ktx.pixelWidth;\n  const height = ktx.pixelHeight;\n  const internalFormat = mapVkFormatToWebGL(ktx.vkFormat);\n  return extractMipmapImages(ktx.levels, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction: level => level.uncompressedByteLength,\n    internalFormat\n  });\n}\n//# sourceMappingURL=parse-ktx.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/lib/parsers/parse-basis.js\n\n\n\n\n\n\nconst OutputFormat = {\n  etc1: {\n    basisFormat: 0,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL\n  },\n  etc2: {\n    basisFormat: 1,\n    compressed: true\n  },\n  bc1: {\n    basisFormat: 2,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT\n  },\n  bc3: {\n    basisFormat: 3,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n  },\n  bc4: {\n    basisFormat: 4,\n    compressed: true\n  },\n  bc5: {\n    basisFormat: 5,\n    compressed: true\n  },\n  'bc7-m6-opaque-only': {\n    basisFormat: 6,\n    compressed: true\n  },\n  'bc7-m5': {\n    basisFormat: 7,\n    compressed: true\n  },\n  'pvrtc1-4-rgb': {\n    basisFormat: 8,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n  },\n  'pvrtc1-4-rgba': {\n    basisFormat: 9,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n  },\n  'astc-4x4': {\n    basisFormat: 10,\n    compressed: true,\n    format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR\n  },\n  'atc-rgb': {\n    basisFormat: 11,\n    compressed: true\n  },\n  'atc-rgba-interpolated-alpha': {\n    basisFormat: 12,\n    compressed: true\n  },\n  rgba32: {\n    basisFormat: 13,\n    compressed: false\n  },\n  rgb565: {\n    basisFormat: 14,\n    compressed: false\n  },\n  bgr565: {\n    basisFormat: 15,\n    compressed: false\n  },\n  rgba4444: {\n    basisFormat: 16,\n    compressed: false\n  }\n};\n\nasync function parseBasis(data, options) {\n  if (options.basis.containerFormat === 'auto') {\n    if (isKTX(data)) {\n      const fileConstructors = await loadBasisEncoderModule(options);\n      return parseKTX2File(fileConstructors.KTX2File, data, options);\n    }\n    const {\n      BasisFile\n    } = await loadBasisTrascoderModule(options);\n    return parseBasisFile(BasisFile, data, options);\n  }\n  switch (options.basis.module) {\n    case 'encoder':\n      const fileConstructors = await loadBasisEncoderModule(options);\n      switch (options.basis.containerFormat) {\n        case 'ktx2':\n          return parseKTX2File(fileConstructors.KTX2File, data, options);\n        case 'basis':\n        default:\n          return parseBasisFile(fileConstructors.BasisFile, data, options);\n      }\n    case 'transcoder':\n    default:\n      const {\n        BasisFile\n      } = await loadBasisTrascoderModule(options);\n      return parseBasisFile(BasisFile, data, options);\n  }\n}\n\nfunction parseBasisFile(BasisFile, data, options) {\n  const basisFile = new BasisFile(new Uint8Array(data));\n  try {\n    if (!basisFile.startTranscoding()) {\n      throw new Error('Failed to start basis transcoding');\n    }\n    const imageCount = basisFile.getNumImages();\n    const images = [];\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels = [];\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n      images.push(levels);\n    }\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n\n  const hasAlpha = basisFile.getHasAlpha();\n\n  const {\n    compressed,\n    format,\n    basisFormat\n  } = getBasisOptions(options, hasAlpha);\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    throw new Error('failed to start Basis transcoding');\n  }\n  return {\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    format,\n    hasAlpha\n  };\n}\n\nfunction parseKTX2File(KTX2File, data, options) {\n  const ktx2File = new KTX2File(new Uint8Array(data));\n  try {\n    if (!ktx2File.startTranscoding()) {\n      throw new Error('failed to start KTX2 transcoding');\n    }\n    const levelsCount = ktx2File.getLevels();\n    const levels = [];\n    for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n      levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));\n      break;\n    }\n\n    return [levels];\n  } finally {\n    ktx2File.close();\n    ktx2File.delete();\n  }\n}\n\nfunction transcodeKTX2Image(ktx2File, levelIndex, options) {\n  const {\n    alphaFlag,\n    height,\n    width\n  } = ktx2File.getImageLevelInfo(levelIndex, 0, 0);\n\n  const {\n    compressed,\n    format,\n    basisFormat\n  } = getBasisOptions(options, alphaFlag);\n  const decodedSize = ktx2File.getImageTranscodedSizeInBytes(levelIndex, 0, 0, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n  if (!ktx2File.transcodeImage(decodedData, levelIndex, 0, 0, basisFormat, 0, -1, -1)) {\n    throw new Error('Failed to transcode KTX2 image');\n  }\n  return {\n    width,\n    height,\n    data: decodedData,\n    compressed,\n    levelSize: decodedSize,\n    hasAlpha: alphaFlag,\n    format\n  };\n}\n\nfunction getBasisOptions(options, hasAlpha) {\n  let format = options && options.basis && options.basis.format;\n  if (format === 'auto') {\n    format = selectSupportedBasisFormat();\n  }\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\nfunction selectSupportedBasisFormat() {\n  const supportedFormats = getSupportedGPUTextureFormats();\n  if (supportedFormats.has('astc')) {\n    return 'astc-4x4';\n  } else if (supportedFormats.has('dxt')) {\n    return {\n      alpha: 'bc3',\n      noAlpha: 'bc1'\n    };\n  } else if (supportedFormats.has('pvrtc')) {\n    return {\n      alpha: 'pvrtc1-4-rgba',\n      noAlpha: 'pvrtc1-4-rgb'\n    };\n  } else if (supportedFormats.has('etc1')) {\n    return 'etc1';\n  } else if (supportedFormats.has('etc2')) {\n    return 'etc2';\n  }\n  return 'rgb565';\n}\n//# sourceMappingURL=parse-basis.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/textures/dist/esm/basis-loader.js\n\n\n\n\nconst BasisWorkerLoader = {\n  name: 'Basis',\n  id: globals/* isBrowser */.jU ? 'basis' : 'basis-nodejs',\n  module: 'textures',\n  version: version_VERSION,\n  worker: true,\n  extensions: ['basis', 'ktx2'],\n  mimeTypes: ['application/octet-stream', 'image/ktx2'],\n  tests: ['sB'],\n  binary: true,\n  options: {\n    basis: {\n      format: 'auto',\n      libraryPath: 'libs/',\n      containerFormat: 'auto',\n      module: 'transcoder'\n    }\n  }\n};\n\nconst BasisLoader = {\n  ...BasisWorkerLoader,\n  parse: parseBasis\n};\n\nconst _TypecheckBasisWorkerLoader = (/* unused pure expression or super */ null && (BasisWorkerLoader));\nconst _TypecheckBasisLoader = (/* unused pure expression or super */ null && (BasisLoader));\n//# sourceMappingURL=basis-loader.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/images/dist/esm/image-loader.js + 8 modules\nvar image_loader = __webpack_require__(54022);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/get-first-characters.js\n\n\nfunction getFirstCharacters(data) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n//# sourceMappingURL=get-first-characters.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/parser-utils/parse-json.js\n\n\nfunction parseJSON(string) {\n  try {\n    return JSON.parse(string);\n  } catch (_) {\n    throw new Error(\"Failed to parse JSON from data starting with \\\"\".concat(getFirstCharacters(string), \"\\\"\"));\n  }\n}\n//# sourceMappingURL=parse-json.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/array-buffer-utils.js\nvar array_buffer_utils = __webpack_require__(74609);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/utils/assert.js\n\nfunction assert_assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'assert failed: gltf');\n  }\n}\n//# sourceMappingURL=assert.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/gltf-utils/resolve-url.js\n\nfunction resolveUrl(url, options) {\n  const absolute = url.startsWith('data:') || url.startsWith('http:') || url.startsWith('https:');\n  if (absolute) {\n    return url;\n  }\n  const baseUrl = options.baseUri || options.uri;\n  if (!baseUrl) {\n    throw new Error(\"'baseUri' must be provided to resolve relative url \".concat(url));\n  }\n  return baseUrl.substr(0, baseUrl.lastIndexOf('/') + 1) + url;\n}\n//# sourceMappingURL=resolve-url.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/gltf-utils/get-typed-array.js\n\n\n\nfunction getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n  const bufferView = json.bufferViews[bufferViewIndex];\n  assert_assert(bufferView);\n\n  const bufferIndex = bufferView.buffer;\n  const binChunk = buffers[bufferIndex];\n  assert_assert(binChunk);\n  const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n  return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\n\nfunction getTypedArrayForImageData(json, buffers, imageIndex) {\n  const image = json.images[imageIndex];\n  const bufferViewIndex = json.bufferViews[image.bufferView];\n  return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}\n//# sourceMappingURL=get-typed-array.js.map\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(82482);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/category-api/binary-image-api.js\nvar binary_image_api = __webpack_require__(39105);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/assert.js\nvar env_utils_assert = __webpack_require__(16269);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/binary-utils/memory-copy-utils.js\n\n\nfunction padToNBytes(byteLength, padding) {\n  (0,env_utils_assert/* assert */.h)(byteLength >= 0);\n  (0,env_utils_assert/* assert */.h)(padding > 0);\n  return byteLength + (padding - 1) & ~(padding - 1);\n}\n\nfunction copyArrayBuffer(targetBuffer, sourceBuffer, byteOffset) {\n  let byteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : sourceBuffer.byteLength;\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\nfunction copyToArray(source, target, targetOffset) {\n  let sourceArray;\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    sourceArray = new Uint8Array(source.buffer || source.arrayBuffer, srcByteOffset, srcByteLength);\n  }\n\n  target.set(sourceArray, targetOffset);\n  return targetOffset + padToNBytes(sourceArray.byteLength, 4);\n}\n//# sourceMappingURL=memory-copy-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/gltf-utils/gltf-utils.js\n\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\nconst ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT = [[Int8Array, 5120], [Uint8Array, 5121], [Int16Array, 5122], [Uint16Array, 5123], [Uint32Array, 5125], [Float32Array, 5126], [Float64Array, 5130]];\nconst ARRAY_TO_COMPONENT_TYPE = new Map(ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT);\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\nfunction getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\nfunction getComponentTypeFromArray(typedArray) {\n  const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n  return componentType;\n}\nfunction getAccessorArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert_assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {\n    ArrayType,\n    length,\n    byteLength\n  };\n}\n//# sourceMappingURL=gltf-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/api/gltf-scenegraph.js\n\n\n\n\n\nconst DEFAULT_GLTF_JSON = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\nclass GLTFScenegraph {\n\n  constructor(gltf) {\n    (0,defineProperty/* default */.Z)(this, \"gltf\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"sourceBuffers\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"byteLength\", void 0);\n    this.gltf = gltf || {\n      json: {\n        ...DEFAULT_GLTF_JSON\n      },\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  get json() {\n    return this.gltf.json;\n  }\n  getApplicationData(key) {\n    const data = this.json[key];\n    return data;\n  }\n  getExtraData(key) {\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n  getRemovedExtensions() {\n    return this.json.extensionsRemoved || [];\n  }\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n  getObject(array, index) {\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n    }\n\n    return object;\n  }\n\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const bufferIndex = bufferView.buffer;\n\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert_assert(binChunk);\n\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const {\n      ArrayType,\n      length\n    } = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n  addObjectExtension(object, extensionName, data) {\n    object.extensions = object.extensions || {};\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n  }\n\n  removeObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  addExtension(extensionName) {\n    let extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert_assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  addRequiredExtension(extensionName) {\n    let extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert_assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  removeExtension(extensionName) {\n    if (!this.getExtension(extensionName)) {\n      return;\n    }\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n    if (!Array.isArray(this.json.extensionsRemoved)) {\n      this.json.extensionsRemoved = [];\n    }\n    const extensionsRemoved = this.json.extensionsRemoved;\n    if (!extensionsRemoved.includes(extensionName)) {\n      extensionsRemoved.push(extensionName);\n    }\n  }\n\n  setDefaultScene(sceneIndex) {\n    this.json.scene = sceneIndex;\n  }\n\n  addScene(scene) {\n    const {\n      nodeIndices\n    } = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({\n      nodes: nodeIndices\n    });\n    return this.json.scenes.length - 1;\n  }\n\n  addNode(node) {\n    const {\n      meshIndex,\n      matrix\n    } = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {\n      mesh: meshIndex\n    };\n    if (matrix) {\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  addMesh(mesh) {\n    const {\n      attributes,\n      indices,\n      material,\n      mode = 4\n    } = mesh;\n    const accessors = this._addAttributes(attributes);\n    const glTFMesh = {\n      primitives: [{\n        attributes: accessors,\n        mode\n      }]\n    };\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n    if (Number.isFinite(material)) {\n      glTFMesh.primitives[0].material = material;\n    }\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n    const glTFMesh = {\n      primitives: [{\n        attributes: accessorIndices,\n        mode: 0\n      }]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addImage(imageData, mimeTypeOpt) {\n    const metadata = (0,binary_image_api/* getBinaryImageMetadata */.I)(imageData);\n    const mimeType = mimeTypeOpt || (metadata === null || metadata === void 0 ? void 0 : metadata.mimeType);\n    const bufferViewIndex = this.addBufferView(imageData);\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert_assert(Number.isFinite(byteLength));\n\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n    const glTFBufferView = {\n      buffer: 0,\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count,\n      max: accessor.max,\n      min: accessor.min\n    };\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  addBinaryBuffer(sourceBuffer) {\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      size: 3\n    };\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    let minMax = {\n      min: accessor.min,\n      max: accessor.max\n    };\n    if (!minMax.min || !minMax.max) {\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  addTexture(texture) {\n    const {\n      imageIndex\n    } = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  addMaterial(pbrMaterialInfo) {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  createBinaryChunk() {\n    var _this$json, _this$json$buffers;\n    this.gltf.buffers = [];\n\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    if ((_this$json = this.json) !== null && _this$json !== void 0 && (_this$json$buffers = _this$json.buffers) !== null && _this$json$buffers !== void 0 && _this$json$buffers[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{\n        byteLength: totalByteLength\n      }];\n    }\n\n    this.gltf.binary = arrayBuffer;\n\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  _addAttributes() {\n    let attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {\n      size: 1\n    });\n  }\n\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  _getAccessorMinMax(buffer, size) {\n    const result = {\n      min: null,\n      max: null\n    };\n    if (buffer.length < size) {\n      return result;\n    }\n    result.min = [];\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      result.min.push(value);\n      result.max.push(value);\n    }\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        result.min[0 + componentIndex] = Math.min(\n        result.min[0 + componentIndex], buffer[index + componentIndex]);\n        result.max[0 + componentIndex] = Math.max(\n        result.max[0 + componentIndex], buffer[index + componentIndex]);\n      }\n    }\n    return result;\n  }\n}\n//# sourceMappingURL=gltf-scenegraph.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/meshopt/meshopt-decoder.js\n\n\nconst isWebAssemblySupported = typeof WebAssembly !== 'object';\n\nconst wasm_base = 'B9h9z9tFBBBF8fL9gBB9gLaaaaaFa9gEaaaB9gFaFa9gEaaaFaEMcBFFFGGGEIIILF9wFFFLEFBFKNFaFCx/IFMO/LFVK9tv9t9vq95GBt9f9f939h9z9t9f9j9h9s9s9f9jW9vq9zBBp9tv9z9o9v9wW9f9kv9j9v9kv9WvqWv94h919m9mvqBF8Z9tv9z9o9v9wW9f9kv9j9v9kv9J9u9kv94h919m9mvqBGy9tv9z9o9v9wW9f9kv9j9v9kv9J9u9kv949TvZ91v9u9jvBEn9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9P9jWBIi9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9R919hWBLn9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9F949wBKI9z9iqlBOc+x8ycGBM/qQFTa8jUUUUBCU/EBlHL8kUUUUBC9+RKGXAGCFJAI9LQBCaRKAE2BBC+gF9HQBALAEAIJHOAGlAGTkUUUBRNCUoBAG9uC/wgBZHKCUGAKCUG9JyRVAECFJRICBRcGXEXAcAF9PQFAVAFAclAcAVJAF9JyRMGXGXAG9FQBAMCbJHKC9wZRSAKCIrCEJCGrRQANCUGJRfCBRbAIRTEXGXAOATlAQ9PQBCBRISEMATAQJRIGXAS9FQBCBRtCBREEXGXAOAIlCi9PQBCBRISLMANCU/CBJAEJRKGXGXGXGXGXATAECKrJ2BBAtCKZrCEZfIBFGEBMAKhB83EBAKCNJhB83EBSEMAKAI2BIAI2BBHmCKrHYAYCE6HYy86BBAKCFJAICIJAYJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCGJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCEJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCIJAYAmJHY2BBAI2BFHmCKrHPAPCE6HPy86BBAKCLJAYAPJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCKJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCOJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCNJAYAmJHY2BBAI2BGHmCKrHPAPCE6HPy86BBAKCVJAYAPJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCcJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCMJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCSJAYAmJHm2BBAI2BEHICKrHYAYCE6HYy86BBAKCQJAmAYJHm2BBAICIrCEZHYAYCE6HYy86BBAKCfJAmAYJHm2BBAICGrCEZHYAYCE6HYy86BBAKCbJAmAYJHK2BBAICEZHIAICE6HIy86BBAKAIJRISGMAKAI2BNAI2BBHmCIrHYAYCb6HYy86BBAKCFJAICNJAYJHY2BBAmCbZHmAmCb6Hmy86BBAKCGJAYAmJHm2BBAI2BFHYCIrHPAPCb6HPy86BBAKCEJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCIJAmAYJHm2BBAI2BGHYCIrHPAPCb6HPy86BBAKCLJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCKJAmAYJHm2BBAI2BEHYCIrHPAPCb6HPy86BBAKCOJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCNJAmAYJHm2BBAI2BIHYCIrHPAPCb6HPy86BBAKCVJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCcJAmAYJHm2BBAI2BLHYCIrHPAPCb6HPy86BBAKCMJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCSJAmAYJHm2BBAI2BKHYCIrHPAPCb6HPy86BBAKCQJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCfJAmAYJHm2BBAI2BOHICIrHYAYCb6HYy86BBAKCbJAmAYJHK2BBAICbZHIAICb6HIy86BBAKAIJRISFMAKAI8pBB83BBAKCNJAICNJ8pBB83BBAICTJRIMAtCGJRtAECTJHEAS9JQBMMGXAIQBCBRISEMGXAM9FQBANAbJ2BBRtCBRKAfREEXAEANCU/CBJAKJ2BBHTCFrCBATCFZl9zAtJHt86BBAEAGJREAKCFJHKAM9HQBMMAfCFJRfAIRTAbCFJHbAG9HQBMMABAcAG9sJANCUGJAMAG9sTkUUUBpANANCUGJAMCaJAG9sJAGTkUUUBpMAMCBAIyAcJRcAIQBMC9+RKSFMCBC99AOAIlAGCAAGCA9Ly6yRKMALCU/EBJ8kUUUUBAKM+OmFTa8jUUUUBCoFlHL8kUUUUBC9+RKGXAFCE9uHOCtJAI9LQBCaRKAE2BBHNC/wFZC/gF9HQBANCbZHVCF9LQBALCoBJCgFCUFT+JUUUBpALC84Jha83EBALC8wJha83EBALC8oJha83EBALCAJha83EBALCiJha83EBALCTJha83EBALha83ENALha83EBAEAIJC9wJRcAECFJHNAOJRMGXAF9FQBCQCbAVCF6yRSABRECBRVCBRQCBRfCBRICBRKEXGXAMAcuQBC9+RKSEMGXGXAN2BBHOC/vF9LQBALCoBJAOCIrCa9zAKJCbZCEWJHb8oGIRTAb8oGBRtGXAOCbZHbAS9PQBALAOCa9zAIJCbZCGWJ8oGBAVAbyROAb9FRbGXGXAGCG9HQBABAt87FBABCIJAO87FBABCGJAT87FBSFMAEAtjGBAECNJAOjGBAECIJATjGBMAVAbJRVALCoBJAKCEWJHmAOjGBAmATjGIALAICGWJAOjGBALCoBJAKCFJCbZHKCEWJHTAtjGBATAOjGIAIAbJRIAKCFJRKSGMGXGXAbCb6QBAQAbJAbC989zJCFJRQSFMAM1BBHbCgFZROGXGXAbCa9MQBAMCFJRMSFMAM1BFHbCgBZCOWAOCgBZqROGXAbCa9MQBAMCGJRMSFMAM1BGHbCgBZCfWAOqROGXAbCa9MQBAMCEJRMSFMAM1BEHbCgBZCdWAOqROGXAbCa9MQBAMCIJRMSFMAM2BIC8cWAOqROAMCLJRMMAOCFrCBAOCFZl9zAQJRQMGXGXAGCG9HQBABAt87FBABCIJAQ87FBABCGJAT87FBSFMAEAtjGBAECNJAQjGBAECIJATjGBMALCoBJAKCEWJHOAQjGBAOATjGIALAICGWJAQjGBALCoBJAKCFJCbZHKCEWJHOAtjGBAOAQjGIAICFJRIAKCFJRKSFMGXAOCDF9LQBALAIAcAOCbZJ2BBHbCIrHTlCbZCGWJ8oGBAVCFJHtATyROALAIAblCbZCGWJ8oGBAtAT9FHmJHtAbCbZHTyRbAT9FRTGXGXAGCG9HQBABAV87FBABCIJAb87FBABCGJAO87FBSFMAEAVjGBAECNJAbjGBAECIJAOjGBMALAICGWJAVjGBALCoBJAKCEWJHYAOjGBAYAVjGIALAICFJHICbZCGWJAOjGBALCoBJAKCFJCbZCEWJHYAbjGBAYAOjGIALAIAmJCbZHICGWJAbjGBALCoBJAKCGJCbZHKCEWJHOAVjGBAOAbjGIAKCFJRKAIATJRIAtATJRVSFMAVCBAM2BBHYyHTAOC/+F6HPJROAYCbZRtGXGXAYCIrHmQBAOCFJRbSFMAORbALAIAmlCbZCGWJ8oGBROMGXGXAtQBAbCFJRVSFMAbRVALAIAYlCbZCGWJ8oGBRbMGXGXAP9FQBAMCFJRYSFMAM1BFHYCgFZRTGXGXAYCa9MQBAMCGJRYSFMAM1BGHYCgBZCOWATCgBZqRTGXAYCa9MQBAMCEJRYSFMAM1BEHYCgBZCfWATqRTGXAYCa9MQBAMCIJRYSFMAM1BIHYCgBZCdWATqRTGXAYCa9MQBAMCLJRYSFMAMCKJRYAM2BLC8cWATqRTMATCFrCBATCFZl9zAQJHQRTMGXGXAmCb6QBAYRPSFMAY1BBHMCgFZROGXGXAMCa9MQBAYCFJRPSFMAY1BFHMCgBZCOWAOCgBZqROGXAMCa9MQBAYCGJRPSFMAY1BGHMCgBZCfWAOqROGXAMCa9MQBAYCEJRPSFMAY1BEHMCgBZCdWAOqROGXAMCa9MQBAYCIJRPSFMAYCLJRPAY2BIC8cWAOqROMAOCFrCBAOCFZl9zAQJHQROMGXGXAtCb6QBAPRMSFMAP1BBHMCgFZRbGXGXAMCa9MQBAPCFJRMSFMAP1BFHMCgBZCOWAbCgBZqRbGXAMCa9MQBAPCGJRMSFMAP1BGHMCgBZCfWAbqRbGXAMCa9MQBAPCEJRMSFMAP1BEHMCgBZCdWAbqRbGXAMCa9MQBAPCIJRMSFMAPCLJRMAP2BIC8cWAbqRbMAbCFrCBAbCFZl9zAQJHQRbMGXGXAGCG9HQBABAT87FBABCIJAb87FBABCGJAO87FBSFMAEATjGBAECNJAbjGBAECIJAOjGBMALCoBJAKCEWJHYAOjGBAYATjGIALAICGWJATjGBALCoBJAKCFJCbZCEWJHYAbjGBAYAOjGIALAICFJHICbZCGWJAOjGBALCoBJAKCGJCbZCEWJHOATjGBAOAbjGIALAIAm9FAmCb6qJHICbZCGWJAbjGBAIAt9FAtCb6qJRIAKCEJRKMANCFJRNABCKJRBAECSJREAKCbZRKAICbZRIAfCEJHfAF9JQBMMCBC99AMAc6yRKMALCoFJ8kUUUUBAKM/tIFGa8jUUUUBCTlRLC9+RKGXAFCLJAI9LQBCaRKAE2BBC/+FZC/QF9HQBALhB83ENAECFJRKAEAIJC98JREGXAF9FQBGXAGCG6QBEXGXAKAE9JQBC9+bMAK1BBHGCgFZRIGXGXAGCa9MQBAKCFJRKSFMAK1BFHGCgBZCOWAICgBZqRIGXAGCa9MQBAKCGJRKSFMAK1BGHGCgBZCfWAIqRIGXAGCa9MQBAKCEJRKSFMAK1BEHGCgBZCdWAIqRIGXAGCa9MQBAKCIJRKSFMAK2BIC8cWAIqRIAKCLJRKMALCNJAICFZCGWqHGAICGrCBAICFrCFZl9zAG8oGBJHIjGBABAIjGBABCIJRBAFCaJHFQBSGMMEXGXAKAE9JQBC9+bMAK1BBHGCgFZRIGXGXAGCa9MQBAKCFJRKSFMAK1BFHGCgBZCOWAICgBZqRIGXAGCa9MQBAKCGJRKSFMAK1BGHGCgBZCfWAIqRIGXAGCa9MQBAKCEJRKSFMAK1BEHGCgBZCdWAIqRIGXAGCa9MQBAKCIJRKSFMAK2BIC8cWAIqRIAKCLJRKMABAICGrCBAICFrCFZl9zALCNJAICFZCGWqHI8oGBJHG87FBAIAGjGBABCGJRBAFCaJHFQBMMCBC99AKAE6yRKMAKM+lLKFaF99GaG99FaG99GXGXAGCI9HQBAF9FQFEXGXGX9DBBB8/9DBBB+/ABCGJHG1BB+yAB1BBHE+yHI+L+TABCFJHL1BBHK+yHO+L+THN9DBBBB9gHVyAN9DBB/+hANAN+U9DBBBBANAVyHcAc+MHMAECa3yAI+SHIAI+UAcAMAKCa3yAO+SHcAc+U+S+S+R+VHO+U+SHN+L9DBBB9P9d9FQBAN+oRESFMCUUUU94REMAGAE86BBGXGX9DBBB8/9DBBB+/Ac9DBBBB9gyAcAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMALAG86BBGXGX9DBBB8/9DBBB+/AI9DBBBB9gyAIAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMABAG86BBABCIJRBAFCaJHFQBSGMMAF9FQBEXGXGX9DBBB8/9DBBB+/ABCIJHG8uFB+yAB8uFBHE+yHI+L+TABCGJHL8uFBHK+yHO+L+THN9DBBBB9gHVyAN9DB/+g6ANAN+U9DBBBBANAVyHcAc+MHMAECa3yAI+SHIAI+UAcAMAKCa3yAO+SHcAc+U+S+S+R+VHO+U+SHN+L9DBBB9P9d9FQBAN+oRESFMCUUUU94REMAGAE87FBGXGX9DBBB8/9DBBB+/Ac9DBBBB9gyAcAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMALAG87FBGXGX9DBBB8/9DBBB+/AI9DBBBB9gyAIAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMABAG87FBABCNJRBAFCaJHFQBMMM/SEIEaE99EaF99GXAF9FQBCBREABRIEXGXGX9D/zI818/AICKJ8uFBHLCEq+y+VHKAI8uFB+y+UHO9DB/+g6+U9DBBB8/9DBBB+/AO9DBBBB9gy+SHN+L9DBBB9P9d9FQBAN+oRVSFMCUUUU94RVMAICIJ8uFBRcAICGJ8uFBRMABALCFJCEZAEqCFWJAV87FBGXGXAKAM+y+UHN9DB/+g6+U9DBBB8/9DBBB+/AN9DBBBB9gy+SHS+L9DBBB9P9d9FQBAS+oRMSFMCUUUU94RMMABALCGJCEZAEqCFWJAM87FBGXGXAKAc+y+UHK9DB/+g6+U9DBBB8/9DBBB+/AK9DBBBB9gy+SHS+L9DBBB9P9d9FQBAS+oRcSFMCUUUU94RcMABALCaJCEZAEqCFWJAc87FBGXGX9DBBU8/AOAO+U+TANAN+U+TAKAK+U+THO9DBBBBAO9DBBBB9gy+R9DB/+g6+U9DBBB8/+SHO+L9DBBB9P9d9FQBAO+oRcSFMCUUUU94RcMABALCEZAEqCFWJAc87FBAICNJRIAECIJREAFCaJHFQBMMM9JBGXAGCGrAF9sHF9FQBEXABAB8oGBHGCNWCN91+yAGCi91CnWCUUU/8EJ+++U84GBABCIJRBAFCaJHFQBMMM9TFEaCBCB8oGUkUUBHFABCEJC98ZJHBjGUkUUBGXGXAB8/BCTWHGuQBCaREABAGlCggEJCTrXBCa6QFMAFREMAEM/lFFFaGXGXAFABqCEZ9FQBABRESFMGXGXAGCT9PQBABRESFMABREEXAEAF8oGBjGBAECIJAFCIJ8oGBjGBAECNJAFCNJ8oGBjGBAECSJAFCSJ8oGBjGBAECTJREAFCTJRFAGC9wJHGCb9LQBMMAGCI9JQBEXAEAF8oGBjGBAFCIJRFAECIJREAGC98JHGCE9LQBMMGXAG9FQBEXAEAF2BB86BBAECFJREAFCFJRFAGCaJHGQBMMABMoFFGaGXGXABCEZ9FQBABRESFMAFCgFZC+BwsN9sRIGXGXAGCT9PQBABRESFMABREEXAEAIjGBAECSJAIjGBAECNJAIjGBAECIJAIjGBAECTJREAGC9wJHGCb9LQBMMAGCI9JQBEXAEAIjGBAECIJREAGC98JHGCE9LQBMMGXAG9FQBEXAEAF86BBAECFJREAGCaJHGQBMMABMMMFBCUNMIT9kBB';\nconst wasm_simd = '';\n\nconst detector = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 3, 2, 0, 0, 5, 3, 1, 0, 1, 12, 1, 0, 10, 22, 2, 12, 0, 65, 0, 65, 0, 65, 0, 252, 10, 0, 0, 11, 7, 0, 65, 0, 253, 15, 26, 11]);\n\nconst wasmpack = new Uint8Array([32, 0, 65, 253, 3, 1, 2, 34, 4, 106, 6, 5, 11, 8, 7, 20, 13, 33, 12, 16, 128, 9, 116, 64, 19, 113, 127, 15, 10, 21, 22, 14, 255, 66, 24, 54, 136, 107, 18, 23, 192, 26, 114, 118, 132, 17, 77, 101, 130, 144, 27, 87, 131, 44, 45, 74, 156, 154, 70, 167]);\nconst FILTERS = {\n  0: '',\n  1: 'meshopt_decodeFilterOct',\n  2: 'meshopt_decodeFilterQuat',\n  3: 'meshopt_decodeFilterExp',\n  NONE: '',\n  OCTAHEDRAL: 'meshopt_decodeFilterOct',\n  QUATERNION: 'meshopt_decodeFilterQuat',\n  EXPONENTIAL: 'meshopt_decodeFilterExp'\n};\nconst DECODERS = {\n  0: 'meshopt_decodeVertexBuffer',\n  1: 'meshopt_decodeIndexBuffer',\n  2: 'meshopt_decodeIndexSequence',\n  ATTRIBUTES: 'meshopt_decodeVertexBuffer',\n  TRIANGLES: 'meshopt_decodeIndexBuffer',\n  INDICES: 'meshopt_decodeIndexSequence'\n};\nfunction isMeshoptSupported() {\n  return isWebAssemblySupported;\n}\nasync function meshoptDecodeVertexBuffer(target, count, size, source) {\n  let filter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NONE';\n  const instance = await loadWasmInstance();\n  decode(instance, instance.exports.meshopt_decodeVertexBuffer, target, count, size, source, instance.exports[FILTERS[filter]]);\n}\nasync function meshoptDecodeIndexBuffer(target, count, size, source) {\n  const instance = await loadWasmInstance();\n  decode(instance, instance.exports.meshopt_decodeIndexBuffer, target, count, size, source);\n}\nasync function meshoptDecodeIndexSequence(target, count, size, source) {\n  const instance = await loadWasmInstance();\n  decode(instance, instance.exports.meshopt_decodeIndexSequence, target, count, size, source);\n}\n\nasync function meshoptDecodeGltfBuffer(target, count, size, source, mode) {\n  let filter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NONE';\n  const instance = await loadWasmInstance();\n  decode(instance, instance.exports[DECODERS[mode]], target, count, size, source, instance.exports[FILTERS[filter || 'NONE']]);\n}\nlet wasmPromise;\nasync function loadWasmInstance() {\n  if (!wasmPromise) {\n    wasmPromise = loadWasmModule();\n  }\n  return wasmPromise;\n}\nasync function loadWasmModule() {\n  let wasm = wasm_base;\n  if (WebAssembly.validate(detector)) {\n    wasm = wasm_simd;\n\n    console.log('Warning: meshopt_decoder is using experimental SIMD support');\n  }\n  const result = await WebAssembly.instantiate(unpack(wasm), {});\n  await result.instance.exports.__wasm_call_ctors();\n  return result.instance;\n}\nfunction unpack(data) {\n  const result = new Uint8Array(data.length);\n  for (let i = 0; i < data.length; ++i) {\n    const ch = data.charCodeAt(i);\n    result[i] = ch > 96 ? ch - 71 : ch > 64 ? ch - 65 : ch > 47 ? ch + 4 : ch > 46 ? 63 : 62;\n  }\n  let write = 0;\n  for (let i = 0; i < data.length; ++i) {\n    result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];\n  }\n  return result.buffer.slice(0, write);\n}\n\nfunction decode(instance, fun, target, count, size, source, filter) {\n  const sbrk = instance.exports.sbrk;\n  const count4 = count + 3 & ~3;\n  const tp = sbrk(count4 * size);\n  const sp = sbrk(source.length);\n  const heap = new Uint8Array(instance.exports.memory.buffer);\n  heap.set(source, sp);\n  const res = fun(tp, count, size, sp, source.length);\n  if (res === 0 && filter) {\n    filter(tp, count4, size);\n  }\n  target.set(heap.subarray(tp, tp + count * size));\n  sbrk(tp - sbrk(0));\n  if (res !== 0) {\n    throw new Error(\"Malformed buffer data: \".concat(res));\n  }\n}\n//# sourceMappingURL=meshopt-decoder.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/EXT_meshopt_compression.js\n\n\n\n\n\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\n\nconst EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\nconst EXT_meshopt_compression_name = EXT_MESHOPT_COMPRESSION;\nasync function EXT_meshopt_compression_decode(gltfData, options) {\n  var _options$gltf;\n  const scenegraph = new GLTFScenegraph(gltfData);\n  if (!(options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes)) {\n    return;\n  }\n  const promises = [];\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));\n  }\n\n  await Promise.all(promises);\n\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\nasync function decodeMeshoptBufferView(scenegraph, bufferView) {\n  const meshoptExtension = scenegraph.getObjectExtension(bufferView, EXT_MESHOPT_COMPRESSION);\n  if (meshoptExtension) {\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE',\n      buffer: bufferIndex\n    } = meshoptExtension;\n    const buffer = scenegraph.gltf.buffers[bufferIndex];\n    const source = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);\n    const result = new Uint8Array(scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer, bufferView.byteOffset, bufferView.byteLength);\n    await meshoptDecodeGltfBuffer(result, count, byteStride, source, mode, filter);\n    return result;\n  }\n  return null;\n}\n//# sourceMappingURL=EXT_meshopt_compression.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/globals.js\nvar env_utils_globals = __webpack_require__(84959);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/category-api/image-format.js\n\n\nconst NODE_FORMAT_SUPPORT = ['image/png', 'image/jpeg', 'image/gif'];\n\nconst mimeTypeSupported = {};\n\nfunction _isImageFormatSupported(mimeType) {\n  if (mimeTypeSupported[mimeType] === undefined) {\n    mimeTypeSupported[mimeType] = checkFormatSupport(mimeType);\n  }\n  return mimeTypeSupported[mimeType];\n}\n\nfunction checkFormatSupport(mimeType) {\n  switch (mimeType) {\n    case 'image/webp':\n      return checkWebPSupport();\n    case 'image/svg':\n      return env_utils_globals/* isBrowser */.jU;\n    default:\n      if (!env_utils_globals/* isBrowser */.jU) {\n        const {\n          _parseImageNode\n        } = globalThis;\n        return Boolean(_parseImageNode) && NODE_FORMAT_SUPPORT.includes(mimeType);\n      }\n      return true;\n  }\n}\n\nfunction checkWebPSupport() {\n  if (!env_utils_globals/* isBrowser */.jU) {\n    return false;\n  }\n  try {\n    const element = document.createElement('canvas');\n    return element.toDataURL('image/webp').indexOf('data:image/webp') === 0;\n  } catch {\n    return false;\n  }\n}\n//# sourceMappingURL=image-format.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/EXT_texture_webp.js\n\n\n\n\nconst EXT_TEXTURE_WEBP = 'EXT_texture_webp';\n\nconst EXT_texture_webp_name = EXT_TEXTURE_WEBP;\n\nfunction preprocess(gltfData, options) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n  if (!_isImageFormatSupported('image/webp')) {\n    if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n      throw new Error(\"gltf: Required extension \".concat(EXT_TEXTURE_WEBP, \" not supported by browser\"));\n    }\n    return;\n  }\n  const {\n    json\n  } = scenegraph;\n  for (const texture of json.textures || []) {\n    const extension = scenegraph.getObjectExtension(texture, EXT_TEXTURE_WEBP);\n    if (extension) {\n      texture.source = extension.source;\n    }\n    scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n  }\n\n  scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}\n//# sourceMappingURL=EXT_texture_webp.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_texture_basisu.js\n\n\n\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\n\nconst KHR_texture_basisu_name = KHR_TEXTURE_BASISU;\n\nfunction KHR_texture_basisu_preprocess(gltfData, options) {\n  const scene = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = scene;\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);\n    if (extension) {\n      texture.source = extension.source;\n    }\n    scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n  }\n\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}\n//# sourceMappingURL=KHR_texture_basisu.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/draco/dist/esm/lib/utils/version.js\n\nconst utils_version_VERSION =  true ? \"3.3.1\" : 0;\n//# sourceMappingURL=version.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/draco/dist/esm/draco-loader.js\n\n\nconst DEFAULT_DRACO_OPTIONS = {\n  draco: {\n    decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js',\n    libraryPath: 'libs/',\n    extraAttributes: {},\n    attributeNameEntry: undefined\n  }\n};\n\nconst DracoLoader = {\n  name: 'Draco',\n  id: globals/* isBrowser */.jU ? 'draco' : 'draco-nodejs',\n  module: 'draco',\n  shapes: ['mesh'],\n  version: utils_version_VERSION,\n  worker: true,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: DEFAULT_DRACO_OPTIONS\n};\nconst _TypecheckDracoLoader = (/* unused pure expression or super */ null && (DracoLoader));\n//# sourceMappingURL=draco-loader.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/category/mesh/mesh-utils.js\n\n\nfunction getMeshSize(attributes) {\n  let size = 0;\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    if (ArrayBuffer.isView(attribute)) {\n      size += attribute.byteLength * attribute.BYTES_PER_ELEMENT;\n    }\n  }\n  return size;\n}\n\nfunction getMeshBoundingBox(attributes) {\n  let minX = Infinity;\n  let minY = Infinity;\n  let minZ = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let maxZ = -Infinity;\n  const positions = attributes.POSITION ? attributes.POSITION.value : [];\n  const len = positions && positions.length;\n  for (let i = 0; i < len; i += 3) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const z = positions[i + 2];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    minZ = z < minZ ? z : minZ;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    maxZ = z > maxZ ? z : maxZ;\n  }\n  return [[minX, minY, minZ], [maxX, maxY, maxZ]];\n}\n//# sourceMappingURL=mesh-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/lib/schema/impl/field.js\n\nclass Field {\n  constructor(name, type) {\n    let nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n    (0,defineProperty/* default */.Z)(this, \"name\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"type\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"nullable\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"metadata\", void 0);\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n  get typeId() {\n    return this.type && this.type.typeId;\n  }\n  clone() {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n  compareTo(other) {\n    return this.name === other.name && this.type === other.type && this.nullable === other.nullable && this.metadata === other.metadata;\n  }\n  toString() {\n    return \"\".concat(this.type).concat(this.nullable ? ', nullable' : '').concat(this.metadata ? \", metadata: \".concat(this.metadata) : '');\n  }\n}\n//# sourceMappingURL=field.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/lib/schema/impl/enum.js\n\n\nlet enum_Type;\n(function (Type) {\n  Type[Type[\"NONE\"] = 0] = \"NONE\";\n  Type[Type[\"Null\"] = 1] = \"Null\";\n  Type[Type[\"Int\"] = 2] = \"Int\";\n  Type[Type[\"Float\"] = 3] = \"Float\";\n  Type[Type[\"Binary\"] = 4] = \"Binary\";\n  Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n  Type[Type[\"Bool\"] = 6] = \"Bool\";\n  Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n  Type[Type[\"Date\"] = 8] = \"Date\";\n  Type[Type[\"Time\"] = 9] = \"Time\";\n  Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n  Type[Type[\"Interval\"] = 11] = \"Interval\";\n  Type[Type[\"List\"] = 12] = \"List\";\n  Type[Type[\"Struct\"] = 13] = \"Struct\";\n  Type[Type[\"Union\"] = 14] = \"Union\";\n  Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n  Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n  Type[Type[\"Map\"] = 17] = \"Map\";\n  Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n  Type[Type[\"Int8\"] = -2] = \"Int8\";\n  Type[Type[\"Int16\"] = -3] = \"Int16\";\n  Type[Type[\"Int32\"] = -4] = \"Int32\";\n  Type[Type[\"Int64\"] = -5] = \"Int64\";\n  Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n  Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n  Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n  Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n  Type[Type[\"Float16\"] = -10] = \"Float16\";\n  Type[Type[\"Float32\"] = -11] = \"Float32\";\n  Type[Type[\"Float64\"] = -12] = \"Float64\";\n  Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n  Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n  Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n  Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n  Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n  Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n  Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n  Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n  Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n  Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n  Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n  Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n  Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n  Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})(enum_Type || (enum_Type = {}));\n//# sourceMappingURL=enum.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/lib/schema/impl/type.js\n\nlet _Symbol$toStringTag, _Symbol$toStringTag2, _Symbol$toStringTag3, _Symbol$toStringTag4, _Symbol$toStringTag5, _Symbol$toStringTag6, _Symbol$toStringTag7, _Symbol$toStringTag8;\n\n\n\nclass DataType {\n  static isNull(x) {\n    return x && x.typeId === enum_Type.Null;\n  }\n  static isInt(x) {\n    return x && x.typeId === enum_Type.Int;\n  }\n  static isFloat(x) {\n    return x && x.typeId === enum_Type.Float;\n  }\n  static isBinary(x) {\n    return x && x.typeId === enum_Type.Binary;\n  }\n  static isUtf8(x) {\n    return x && x.typeId === enum_Type.Utf8;\n  }\n  static isBool(x) {\n    return x && x.typeId === enum_Type.Bool;\n  }\n  static isDecimal(x) {\n    return x && x.typeId === enum_Type.Decimal;\n  }\n  static isDate(x) {\n    return x && x.typeId === enum_Type.Date;\n  }\n  static isTime(x) {\n    return x && x.typeId === enum_Type.Time;\n  }\n  static isTimestamp(x) {\n    return x && x.typeId === enum_Type.Timestamp;\n  }\n  static isInterval(x) {\n    return x && x.typeId === enum_Type.Interval;\n  }\n  static isList(x) {\n    return x && x.typeId === enum_Type.List;\n  }\n  static isStruct(x) {\n    return x && x.typeId === enum_Type.Struct;\n  }\n  static isUnion(x) {\n    return x && x.typeId === enum_Type.Union;\n  }\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === enum_Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x) {\n    return x && x.typeId === enum_Type.FixedSizeList;\n  }\n  static isMap(x) {\n    return x && x.typeId === enum_Type.Map;\n  }\n  static isDictionary(x) {\n    return x && x.typeId === enum_Type.Dictionary;\n  }\n  get typeId() {\n    return enum_Type.NONE;\n  }\n\n  compareTo(other) {\n    return this === other;\n  }\n}\n\nclass Null extends (/* unused pure expression or super */ null && (DataType)) {\n  get typeId() {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Null';\n  }\n  toString() {\n    return 'Null';\n  }\n}\n\nclass Bool extends (/* unused pure expression or super */ null && (DataType)) {\n  get typeId() {\n    return Type.Bool;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Bool';\n  }\n  toString() {\n    return 'Bool';\n  }\n}\n\n_Symbol$toStringTag = Symbol.toStringTag;\n\nclass Int extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n    (0,defineProperty/* default */.Z)(this, \"isSigned\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"bitWidth\", void 0);\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return enum_Type.Int;\n  }\n  get [_Symbol$toStringTag]() {\n    return 'Int';\n  }\n  toString() {\n    return \"\".concat(this.isSigned ? 'I' : 'Ui', \"nt\").concat(this.bitWidth);\n  }\n}\nclass Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nclass Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nclass Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nclass Int64 extends (/* unused pure expression or super */ null && (Int)) {\n  constructor() {\n    super(true, 64);\n  }\n}\nclass Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nclass Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nclass Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nclass Uint64 extends (/* unused pure expression or super */ null && (Int)) {\n  constructor() {\n    super(false, 64);\n  }\n}\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n_Symbol$toStringTag2 = Symbol.toStringTag;\nclass Float extends DataType {\n  constructor(precision) {\n    super();\n    (0,defineProperty/* default */.Z)(this, \"precision\", void 0);\n    this.precision = precision;\n  }\n  get typeId() {\n    return enum_Type.Float;\n  }\n  get [_Symbol$toStringTag2]() {\n    return 'Float';\n  }\n  toString() {\n    return \"Float\".concat(this.precision);\n  }\n}\nclass Float16 extends (/* unused pure expression or super */ null && (Float)) {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nclass Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nclass Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\nclass Binary extends (/* unused pure expression or super */ null && (DataType)) {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\nclass Utf8 extends (/* unused pure expression or super */ null && (DataType)) {\n  get typeId() {\n    return Type.Utf8;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Utf8';\n  }\n  toString() {\n    return 'Utf8';\n  }\n}\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n_Symbol$toStringTag3 = Symbol.toStringTag;\nclass type_Date extends (/* unused pure expression or super */ null && (DataType)) {\n  constructor(unit) {\n    super();\n    _defineProperty(this, \"unit\", void 0);\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Date;\n  }\n  get [_Symbol$toStringTag3]() {\n    return 'Date';\n  }\n  toString() {\n    return \"Date\".concat((this.unit + 1) * 32, \"<\").concat(DateUnit[this.unit], \">\");\n  }\n}\nclass DateDay extends (/* unused pure expression or super */ null && (type_Date)) {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nclass DateMillisecond extends (/* unused pure expression or super */ null && (type_Date)) {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n_Symbol$toStringTag4 = Symbol.toStringTag;\nclass Time extends (/* unused pure expression or super */ null && (DataType)) {\n  constructor(unit, bitWidth) {\n    super();\n    _defineProperty(this, \"unit\", void 0);\n    _defineProperty(this, \"bitWidth\", void 0);\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Time;\n  }\n  toString() {\n    return \"Time\".concat(this.bitWidth, \"<\").concat(TimeUnit[this.unit], \">\");\n  }\n  get [_Symbol$toStringTag4]() {\n    return 'Time';\n  }\n}\n\nclass TimeSecond extends (/* unused pure expression or super */ null && (Time)) {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nclass TimeMillisecond extends (/* unused pure expression or super */ null && (Time)) {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n_Symbol$toStringTag5 = Symbol.toStringTag;\n\nclass Timestamp extends (/* unused pure expression or super */ null && (DataType)) {\n  constructor(unit) {\n    let timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n    _defineProperty(this, \"unit\", void 0);\n    _defineProperty(this, \"timezone\", void 0);\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId() {\n    return Type.Timestamp;\n  }\n  get [_Symbol$toStringTag5]() {\n    return 'Timestamp';\n  }\n  toString() {\n    return \"Timestamp<\".concat(TimeUnit[this.unit]).concat(this.timezone ? \", \".concat(this.timezone) : '', \">\");\n  }\n}\nclass TimestampSecond extends (/* unused pure expression or super */ null && (Timestamp)) {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nclass TimestampMillisecond extends (/* unused pure expression or super */ null && (Timestamp)) {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nclass TimestampMicrosecond extends (/* unused pure expression or super */ null && (Timestamp)) {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nclass TimestampNanosecond extends (/* unused pure expression or super */ null && (Timestamp)) {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n_Symbol$toStringTag6 = Symbol.toStringTag;\nclass Interval extends (/* unused pure expression or super */ null && (DataType)) {\n  constructor(unit) {\n    super();\n    _defineProperty(this, \"unit\", void 0);\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Interval;\n  }\n  get [_Symbol$toStringTag6]() {\n    return 'Interval';\n  }\n  toString() {\n    return \"Interval<\".concat(IntervalUnit[this.unit], \">\");\n  }\n}\nclass IntervalDayTime extends (/* unused pure expression or super */ null && (Interval)) {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nclass IntervalYearMonth extends (/* unused pure expression or super */ null && (Interval)) {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n_Symbol$toStringTag7 = Symbol.toStringTag;\nclass FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n    (0,defineProperty/* default */.Z)(this, \"listSize\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"children\", void 0);\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId() {\n    return enum_Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get [_Symbol$toStringTag7]() {\n    return 'FixedSizeList';\n  }\n  toString() {\n    return \"FixedSizeList[\".concat(this.listSize, \"]<\").concat(this.valueType, \">\");\n  }\n}\n_Symbol$toStringTag8 = Symbol.toStringTag;\nclass Struct extends (/* unused pure expression or super */ null && (DataType)) {\n  constructor(children) {\n    super();\n    _defineProperty(this, \"children\", void 0);\n    this.children = children;\n  }\n  get typeId() {\n    return Type.Struct;\n  }\n  toString() {\n    return \"Struct<{\".concat(this.children.map(f => \"\".concat(f.name, \":\").concat(f.type)).join(', '), \"}>\");\n  }\n  get [_Symbol$toStringTag8]() {\n    return 'Struct';\n  }\n}\n//# sourceMappingURL=type.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/lib/arrow/arrow-like-type-utils.js\n\nfunction getArrowTypeFromTypedArray(array) {\n  switch (array.constructor) {\n    case Int8Array:\n      return new Int8();\n    case Uint8Array:\n      return new Uint8();\n    case Int16Array:\n      return new Int16();\n    case Uint16Array:\n      return new Uint16();\n    case Int32Array:\n      return new Int32();\n    case Uint32Array:\n      return new Uint32();\n    case Float32Array:\n      return new Float32();\n    case Float64Array:\n      return new Float64();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n//# sourceMappingURL=arrow-like-type-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/category/mesh/deduce-mesh-schema.js\n\n\n\nfunction deduceMeshSchema(attributes, metadata) {\n  const fields = deduceMeshFields(attributes);\n  return new Schema(fields, metadata);\n}\n\nfunction deduceMeshField(attributeName, attribute, optionalMetadata) {\n  const type = getArrowTypeFromTypedArray(attribute.value);\n  const metadata = optionalMetadata ? optionalMetadata : makeMeshAttributeMetadata(attribute);\n  const field = new Field(attributeName, new FixedSizeList(attribute.size, new Field('value', type)), false, metadata);\n  return field;\n}\n\nfunction deduceMeshFields(attributes) {\n  const fields = [];\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    fields.push(deduceMeshField(attributeName, attribute));\n  }\n  return fields;\n}\n\nfunction makeMeshAttributeMetadata(attribute) {\n  const result = new Map();\n  if ('byteOffset' in attribute) {\n    result.set('byteOffset', attribute.byteOffset.toString(10));\n  }\n  if ('byteStride' in attribute) {\n    result.set('byteStride', attribute.byteStride.toString(10));\n  }\n  if ('normalized' in attribute) {\n    result.set('normalized', attribute.normalized.toString());\n  }\n  return result;\n}\n//# sourceMappingURL=deduce-mesh-schema.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/lib/utils/assert.js\n\nfunction utils_assert_assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'loader assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/schema/dist/esm/lib/schema/impl/schema.js\n\n\nclass schema_Schema {\n\n  constructor(fields, metadata) {\n    (0,defineProperty/* default */.Z)(this, \"fields\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"metadata\", void 0);\n    utils_assert_assert(Array.isArray(fields));\n    checkNames(fields);\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  compareTo(other) {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  select() {\n    const nameMap = Object.create(null);\n    for (var _len = arguments.length, columnNames = new Array(_len), _key = 0; _key < _len; _key++) {\n      columnNames[_key] = arguments[_key];\n    }\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter(field => nameMap[field.name]);\n    return new schema_Schema(selectedFields, this.metadata);\n  }\n  selectAt() {\n    for (var _len2 = arguments.length, columnIndices = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      columnIndices[_key2] = arguments[_key2];\n    }\n    const selectedFields = columnIndices.map(index => this.fields[index]).filter(Boolean);\n    return new schema_Schema(selectedFields, this.metadata);\n  }\n  assign(schemaOrFields) {\n    let fields;\n    let metadata = this.metadata;\n    if (schemaOrFields instanceof schema_Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    const fieldMap = Object.create(null);\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n    const mergedFields = Object.values(fieldMap);\n    return new schema_Schema(mergedFields, metadata);\n  }\n}\n\nfunction checkNames(fields) {\n  const usedNames = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\nfunction mergeMaps(m1, m2) {\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n//# sourceMappingURL=schema.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/draco/dist/esm/lib/utils/get-draco-schema.js\n\n\nfunction getDracoSchema(attributes, loaderData, indices) {\n  const metadataMap = makeMetadata(loaderData.metadata);\n  const fields = [];\n  const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const field = getArrowFieldFromAttribute(attributeName, attribute, namedLoaderDataAttributes[attributeName]);\n    fields.push(field);\n  }\n  if (indices) {\n    const indicesField = getArrowFieldFromAttribute('indices', indices);\n    fields.push(indicesField);\n  }\n  return new schema_Schema(fields, metadataMap);\n}\nfunction transformAttributesLoaderData(loaderData) {\n  const result = {};\n  for (const key in loaderData) {\n    const dracoAttribute = loaderData[key];\n    result[dracoAttribute.name || 'undefined'] = dracoAttribute;\n  }\n  return result;\n}\nfunction getArrowFieldFromAttribute(attributeName, attribute, loaderData) {\n  const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;\n  const field = deduceMeshField(attributeName, attribute, metadataMap);\n  return field;\n}\nfunction makeMetadata(metadata) {\n  const metadataMap = new Map();\n  for (const key in metadata) {\n    metadataMap.set(\"\".concat(key, \".string\"), JSON.stringify(metadata[key]));\n  }\n  return metadataMap;\n}\n//# sourceMappingURL=get-draco-schema.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/draco/dist/esm/lib/draco-parser.js\n\n\n\n\n\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\nconst INDEX_ITEM_SIZE = 4;\nclass DracoParser {\n  constructor(draco) {\n    (0,defineProperty/* default */.Z)(this, \"draco\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"decoder\", void 0);\n    (0,defineProperty/* default */.Z)(this, \"metadataQuerier\", void 0);\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  destroy() {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  parseSync(arrayBuffer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n    this._disableAttributeTransforms(options);\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry = geometry_type === this.draco.TRIANGULAR_MESH ? new this.draco.Mesh() : new this.draco.PointCloud();\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n          break;\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = \"DRACO decompression failed: \".concat(dracoStatus.error_msg());\n        throw new Error(message);\n      }\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n      const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n      const data = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  _getDracoLoaderData(dracoGeometry, geometry_type, options) {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  _getDracoAttributes(dracoGeometry, options) {\n    const dracoAttributes = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n        metadata\n      };\n\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n    return dracoAttributes;\n  }\n\n  _getMeshData(dracoGeometry, loaderData, options) {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4,\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5,\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    return {\n      topology: 'point-list',\n      mode: 0,\n      attributes\n    };\n  }\n  _getMeshAttributes(loaderData, dracoGeometry, options) {\n    const attributes = {};\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {\n        value,\n        size\n      } = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n    return attributes;\n  }\n\n  _getTriangleListIndices(dracoGeometry) {\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  _getTriangleStripIndices(dracoGeometry) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  _getAttributeValues(dracoGeometry, attribute) {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n    let value;\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, dracoAttribute, dataType, byteLength, ptr);\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n    return {\n      value,\n      size: numComponents\n    };\n  }\n\n  _deduceAttributeName(attribute, options) {\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(options.extraAttributes || {})) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    return \"CUSTOM_ATTRIBUTE_\".concat(uniqueId);\n  }\n\n  _getTopLevelMetadata(dracoGeometry) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  _getAttributeMetadata(dracoGeometry, attributeId) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  _getDracoMetadata(dracoMetadata) {\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  _getDracoMetadataField(dracoMetadata, entryName) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  _disableAttributeTransforms(options) {\n    const {\n      quantizedAttributes = [],\n      octahedronAttributes = []\n    } = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  _getQuantizationTransform(dracoAttribute, options) {\n    const {\n      quantizedAttributes = []\n    } = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map(type => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map(i => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n  _getOctahedronTransform(dracoAttribute, options) {\n    const {\n      octahedronAttributes = []\n    } = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes.map(type => this.decoder[type]).includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n}\n\nfunction getDracoDataType(draco, attributeType) {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\nfunction getInt32Array(dracoArray) {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\nfunction getUint32Array(dracoArray) {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n//# sourceMappingURL=draco-parser.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/draco/dist/esm/lib/draco-module-loader.js\n\n\n\nconst DRACO_DECODER_VERSION = '1.5.5';\nconst DRACO_ENCODER_VERSION = '1.4.1';\nconst STATIC_DECODER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_DECODER_VERSION);\nconst DRACO_JS_DECODER_URL = \"\".concat(STATIC_DECODER_URL, \"/draco_decoder.js\");\nconst DRACO_WASM_WRAPPER_URL = \"\".concat(STATIC_DECODER_URL, \"/draco_wasm_wrapper.js\");\nconst DRACO_WASM_DECODER_URL = \"\".concat(STATIC_DECODER_URL, \"/draco_decoder.wasm\");\nconst DRACO_ENCODER_URL = \"https://raw.githubusercontent.com/google/draco/\".concat(DRACO_ENCODER_VERSION, \"/javascript/draco_encoder.js\");\nlet loadDecoderPromise;\nlet loadEncoderPromise;\nasync function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.draco3d) {\n    loadDecoderPromise = loadDecoderPromise || modules.draco3d.createDecoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\nasync function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  if (modules.draco3d) {\n    loadEncoderPromise = loadEncoderPromise || modules.draco3d.createEncoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await library_utils_loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([await library_utils_loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options), await library_utils_loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)]);\n  }\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: draco => resolve({\n        draco\n      })\n    });\n  });\n}\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({\n        draco\n      })\n    });\n  });\n}\n//# sourceMappingURL=draco-module-loader.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/draco/dist/esm/index.js\n\n\n\n\n\n\n\n\nconst DracoWriterWorker = {\n  id: globals/* isBrowser */.jU ? 'draco-writer' : 'draco-writer-nodejs',\n  name: 'Draco compressed geometry writer',\n  module: 'draco',\n  version: utils_version_VERSION,\n  worker: true,\n  options: {\n    draco: {},\n    source: null\n  }\n};\n\n\n\nconst esm_DracoLoader = {\n  ...DracoLoader,\n  parse\n};\nasync function parse(arrayBuffer, options) {\n  const {\n    draco\n  } = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options === null || options === void 0 ? void 0 : options.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\nconst esm_TypecheckDracoLoader = (/* unused pure expression or super */ null && (esm_DracoLoader));\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/gltf-utils/gltf-attribute-utils.js\n\n\n\n\nfunction getGLTFAccessors(attributes) {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\nfunction getGLTFAccessor(attribute) {\n  const {\n    buffer,\n    size,\n    count\n  } = getAccessorData(attribute);\n  const glTFAccessor = {\n    value: buffer,\n    size,\n\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n  return glTFAccessor;\n}\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n  return {\n    buffer,\n    size,\n    count\n  };\n}\n\nfunction toTypedArray(array, ArrayType) {\n  let convertTypedArrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n//# sourceMappingURL=gltf-attribute-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_draco_mesh_compression.js\n\n\n\n\n\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\nconst KHR_draco_mesh_compression_name = KHR_DRACO_MESH_COMPRESSION;\nfunction KHR_draco_mesh_compression_preprocess(gltfData, options, context) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n    }\n  }\n}\nasync function KHR_draco_mesh_compression_decode(gltfData, options, context) {\n  var _options$gltf;\n  if (!(options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes)) {\n    return;\n  }\n  const scenegraph = new GLTFScenegraph(gltfData);\n  const promises = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  await Promise.all(promises);\n\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\nfunction encode(gltfData) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const scenegraph = new GLTFScenegraph(gltfData);\n  for (const mesh of scenegraph.json.meshes || []) {\n    compressMesh(mesh, options);\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\nasync function decompressPrimitive(scenegraph, primitive, options, context) {\n  const dracoExtension = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n  if (!dracoExtension) {\n    return;\n  }\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  const bufferCopy = (0,array_buffer_utils/* sliceArrayBuffer */.qv)(buffer.buffer, buffer.byteOffset);\n\n  const {\n    parse\n  } = context;\n  const dracoOptions = {\n    ...options\n  };\n\n  delete dracoOptions['3d-tiles'];\n  const decodedData = await parse(bufferCopy, esm_DracoLoader, dracoOptions, context);\n  const decodedAttributes = getGLTFAccessors(decodedData.attributes);\n\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor !== null && accessor !== void 0 && accessor.min && accessor !== null && accessor !== void 0 && accessor.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  checkPrimitive(primitive);\n}\n\nfunction compressMesh(attributes, indices) {\n  var _context$parseSync;\n  let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  let options = arguments.length > 3 ? arguments[3] : undefined;\n  let context = arguments.length > 4 ? arguments[4] : undefined;\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  const compressedData = options.DracoWriter.encodeSync({\n    attributes\n  });\n\n  const decodedData = context === null || context === void 0 ? void 0 : (_context$parseSync = context.parseSync) === null || _context$parseSync === void 0 ? void 0 : _context$parseSync.call(context, {\n    attributes\n  });\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n  const bufferViewIndex = options.addBufferView(compressedData);\n  const glTFMesh = {\n    primitives: [{\n      attributes: fauxAccessors,\n      mode,\n      extensions: {\n        [KHR_DRACO_MESH_COMPRESSION]: {\n          bufferView: bufferViewIndex,\n          attributes: fauxAccessors\n        }\n      }\n    }]\n  };\n\n  return glTFMesh;\n}\n\nfunction checkPrimitive(primitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n//# sourceMappingURL=KHR_draco_mesh_compression.js.map\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/vector3.js\nvar vector3 = __webpack_require__(43855);\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/matrix3.js\nvar matrix3 = __webpack_require__(80540);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/gltf-utils/gltf-constants.js\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst BYTES = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\nfunction getGLEnumFromSamplerParameter(parameter) {\n  const GL_TEXTURE_MAG_FILTER = 0x2800;\n  const GL_TEXTURE_MIN_FILTER = 0x2801;\n  const GL_TEXTURE_WRAP_S = 0x2802;\n  const GL_TEXTURE_WRAP_T = 0x2803;\n  const PARAMETER_MAP = {\n    magFilter: GL_TEXTURE_MAG_FILTER,\n    minFilter: GL_TEXTURE_MIN_FILTER,\n    wrapS: GL_TEXTURE_WRAP_S,\n    wrapT: GL_TEXTURE_WRAP_T\n  };\n  return PARAMETER_MAP[parameter];\n}\n//# sourceMappingURL=gltf-constants.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_texture_transform.js\n\n\n\n\n\n\n\nconst EXT_MESHOPT_TRANSFORM = 'KHR_texture_transform';\nconst KHR_texture_transform_name = EXT_MESHOPT_TRANSFORM;\nconst scratchVector = new vector3/* default */.Z();\nconst scratchRotationMatrix = new matrix3/* default */.Z();\nconst scratchScaleMatrix = new matrix3/* default */.Z();\n\nasync function KHR_texture_transform_decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const extension = gltfScenegraph.getExtension(EXT_MESHOPT_TRANSFORM);\n  if (!extension) {\n    return;\n  }\n  const materials = gltfData.json.materials || [];\n  for (let i = 0; i < materials.length; i++) {\n    transformTexCoords(i, gltfData);\n  }\n}\n\nfunction transformTexCoords(materialIndex, gltfData) {\n  var _gltfData$json$materi, _material$pbrMetallic, _material$pbrMetallic2;\n  const processedTexCoords = [];\n  const material = (_gltfData$json$materi = gltfData.json.materials) === null || _gltfData$json$materi === void 0 ? void 0 : _gltfData$json$materi[materialIndex];\n  const baseColorTexture = material === null || material === void 0 ? void 0 : (_material$pbrMetallic = material.pbrMetallicRoughness) === null || _material$pbrMetallic === void 0 ? void 0 : _material$pbrMetallic.baseColorTexture;\n  if (baseColorTexture) {\n    transformPrimitives(gltfData, materialIndex, baseColorTexture, processedTexCoords);\n  }\n  const emisiveTexture = material === null || material === void 0 ? void 0 : material.emissiveTexture;\n  if (emisiveTexture) {\n    transformPrimitives(gltfData, materialIndex, emisiveTexture, processedTexCoords);\n  }\n  const normalTexture = material === null || material === void 0 ? void 0 : material.normalTexture;\n  if (normalTexture) {\n    transformPrimitives(gltfData, materialIndex, normalTexture, processedTexCoords);\n  }\n  const occlusionTexture = material === null || material === void 0 ? void 0 : material.occlusionTexture;\n  if (occlusionTexture) {\n    transformPrimitives(gltfData, materialIndex, occlusionTexture, processedTexCoords);\n  }\n  const metallicRoughnessTexture = material === null || material === void 0 ? void 0 : (_material$pbrMetallic2 = material.pbrMetallicRoughness) === null || _material$pbrMetallic2 === void 0 ? void 0 : _material$pbrMetallic2.metallicRoughnessTexture;\n  if (metallicRoughnessTexture) {\n    transformPrimitives(gltfData, materialIndex, metallicRoughnessTexture, processedTexCoords);\n  }\n}\n\nfunction transformPrimitives(gltfData, materialIndex, texture, processedTexCoords) {\n  const transformParameters = getTransformParameters(texture, processedTexCoords);\n  if (!transformParameters) {\n    return;\n  }\n  const meshes = gltfData.json.meshes || [];\n  for (const mesh of meshes) {\n    for (const primitive of mesh.primitives) {\n      const material = primitive.material;\n      if (Number.isFinite(material) && materialIndex === material) {\n        transformPrimitive(gltfData, primitive, transformParameters);\n      }\n    }\n  }\n}\n\nfunction getTransformParameters(texture, processedTexCoords) {\n  var _texture$extensions;\n  const textureInfo = (_texture$extensions = texture.extensions) === null || _texture$extensions === void 0 ? void 0 : _texture$extensions[EXT_MESHOPT_TRANSFORM];\n  const {\n    texCoord: originalTexCoord = 0\n  } = texture;\n  const {\n    texCoord = originalTexCoord\n  } = textureInfo;\n  const isProcessed = processedTexCoords.findIndex(_ref => {\n    let [original, newTexCoord] = _ref;\n    return original === originalTexCoord && newTexCoord === texCoord;\n  }) !== -1;\n  if (!isProcessed) {\n    const matrix = makeTransformationMatrix(textureInfo);\n    if (originalTexCoord !== texCoord) {\n      texture.texCoord = texCoord;\n    }\n    processedTexCoords.push([originalTexCoord, texCoord]);\n    return {\n      originalTexCoord,\n      texCoord,\n      matrix\n    };\n  }\n  return null;\n}\n\nfunction transformPrimitive(gltfData, primitive, transformParameters) {\n  const {\n    originalTexCoord,\n    texCoord,\n    matrix\n  } = transformParameters;\n  const texCoordAccessor = primitive.attributes[\"TEXCOORD_\".concat(originalTexCoord)];\n  if (Number.isFinite(texCoordAccessor)) {\n    var _gltfData$json$access;\n    const accessor = (_gltfData$json$access = gltfData.json.accessors) === null || _gltfData$json$access === void 0 ? void 0 : _gltfData$json$access[texCoordAccessor];\n    if (accessor && accessor.bufferView) {\n      var _gltfData$json$buffer;\n      const bufferView = (_gltfData$json$buffer = gltfData.json.bufferViews) === null || _gltfData$json$buffer === void 0 ? void 0 : _gltfData$json$buffer[accessor.bufferView];\n      if (bufferView) {\n        const {\n          arrayBuffer,\n          byteOffset: bufferByteOffset\n        } = gltfData.buffers[bufferView.buffer];\n        const byteOffset = (bufferByteOffset || 0) + (accessor.byteOffset || 0) + (bufferView.byteOffset || 0);\n        const {\n          ArrayType,\n          length\n        } = getAccessorArrayTypeAndLength(accessor, bufferView);\n        const bytes = BYTES[accessor.componentType];\n        const components = COMPONENTS[accessor.type];\n        const elementAddressScale = bufferView.byteStride || bytes * components;\n        const result = new Float32Array(length);\n        for (let i = 0; i < accessor.count; i++) {\n          const uv = new ArrayType(arrayBuffer, byteOffset + i * elementAddressScale, 2);\n          scratchVector.set(uv[0], uv[1], 1);\n          scratchVector.transformByMatrix3(matrix);\n          result.set([scratchVector[0], scratchVector[1]], i * components);\n        }\n        if (originalTexCoord === texCoord) {\n          updateGltf(accessor, bufferView, gltfData.buffers, result);\n        } else {\n          createAttribute(texCoord, accessor, primitive, gltfData, result);\n        }\n      }\n    }\n  }\n}\n\nfunction updateGltf(accessor, bufferView, buffers, newTexCoordArray) {\n  accessor.componentType = 5126;\n  buffers.push({\n    arrayBuffer: newTexCoordArray.buffer,\n    byteOffset: 0,\n    byteLength: newTexCoordArray.buffer.byteLength\n  });\n  bufferView.buffer = buffers.length - 1;\n  bufferView.byteLength = newTexCoordArray.buffer.byteLength;\n  bufferView.byteOffset = 0;\n  delete bufferView.byteStride;\n}\n\nfunction createAttribute(newTexCoord, originalAccessor, primitive, gltfData, newTexCoordArray) {\n  gltfData.buffers.push({\n    arrayBuffer: newTexCoordArray.buffer,\n    byteOffset: 0,\n    byteLength: newTexCoordArray.buffer.byteLength\n  });\n  const bufferViews = gltfData.json.bufferViews;\n  if (!bufferViews) {\n    return;\n  }\n  bufferViews.push({\n    buffer: gltfData.buffers.length - 1,\n    byteLength: newTexCoordArray.buffer.byteLength,\n    byteOffset: 0\n  });\n  const accessors = gltfData.json.accessors;\n  if (!accessors) {\n    return;\n  }\n  accessors.push({\n    bufferView: (bufferViews === null || bufferViews === void 0 ? void 0 : bufferViews.length) - 1,\n    byteOffset: 0,\n    componentType: 5126,\n    count: originalAccessor.count,\n    type: 'VEC2'\n  });\n  primitive.attributes[\"TEXCOORD_\".concat(newTexCoord)] = accessors.length - 1;\n}\n\nfunction makeTransformationMatrix(extensionData) {\n  const {\n    offset = [0, 0],\n    rotation = 0,\n    scale = [1, 1]\n  } = extensionData;\n  const translationMatirx = new matrix3/* default */.Z().set(1, 0, 0, 0, 1, 0, offset[0], offset[1], 1);\n  const rotationMatirx = scratchRotationMatrix.set(Math.cos(rotation), Math.sin(rotation), 0, -Math.sin(rotation), Math.cos(rotation), 0, 0, 0, 1);\n  const scaleMatrix = scratchScaleMatrix.set(scale[0], 0, 0, 0, scale[1], 0, 0, 0, 1);\n  return translationMatirx.multiplyRight(rotationMatirx).multiplyRight(scaleMatrix);\n}\n//# sourceMappingURL=KHR_texture_transform.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/KHR_lights_punctual.js\n\n\n\n\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nconst KHR_lights_punctual_name = KHR_LIGHTS_PUNCTUAL;\nasync function KHR_lights_punctual_decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\nasync function KHR_lights_punctual_encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert_assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  if (gltfScenegraph.json.lights) {\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    delete gltfScenegraph.json.lights;\n  }\n}\n//# sourceMappingURL=KHR_lights_punctual.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/KHR_materials_unlit.js\n\n\n\nconst KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';\nconst KHR_materials_unlit_name = KHR_MATERIALS_UNLIT;\nasync function KHR_materials_unlit_decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n}\nfunction KHR_materials_unlit_encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials || []) {\n      if (material.unlit) {\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n//# sourceMappingURL=KHR_materials_unlit.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/KHR_techniques_webgl.js\n\n\n\nconst KHR_TECHNIQUES_WEBGL = 'KHR_techniques_webgl';\nconst KHR_techniques_webgl_name = KHR_TECHNIQUES_WEBGL;\nasync function KHR_techniques_webgl_decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n  const extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n  if (extension) {\n    const techniques = resolveTechniques(extension, gltfScenegraph);\n    for (const material of json.materials || []) {\n      const materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      if (materialExtension) {\n        material.technique = Object.assign({}, materialExtension,\n        techniques[materialExtension.technique]);\n        material.technique.values = resolveValues(material.technique, gltfScenegraph);\n      }\n      gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n    }\n\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\nasync function KHR_techniques_webgl_encode(gltfData, options) {\n}\nfunction resolveTechniques(techniquesExtension,\ngltfScenegraph) {\n  const {\n    programs = [],\n    shaders = [],\n    techniques = []\n  } = techniquesExtension;\n  const textDecoder = new TextDecoder();\n  shaders.forEach(shader => {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(gltfScenegraph.getTypedArrayForBufferView(shader.bufferView));\n    } else {\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n  programs.forEach(program => {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n  techniques.forEach(technique => {\n    technique.program = programs[technique.program];\n  });\n  return techniques;\n}\nfunction resolveValues(technique, gltfScenegraph) {\n  const values = Object.assign({}, technique.values);\n\n  Object.keys(technique.uniforms || {}).forEach(uniform => {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n\n  Object.keys(values).forEach(uniform => {\n    if (typeof values[uniform] === 'object' && values[uniform].index !== undefined) {\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n  return values;\n}\n//# sourceMappingURL=KHR_techniques_webgl.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/deprecated/EXT_feature_metadata.js\n\n\n\nconst EXT_FEATURE_METADATA = 'EXT_feature_metadata';\nconst EXT_feature_metadata_name = EXT_FEATURE_METADATA;\nasync function EXT_feature_metadata_decode(gltfData) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n  decodeExtFeatureMetadata(scenegraph);\n}\n\nfunction decodeExtFeatureMetadata(scenegraph) {\n  var _extension$schema;\n  const extension = scenegraph.getExtension(EXT_FEATURE_METADATA);\n  const schemaClasses = extension === null || extension === void 0 ? void 0 : (_extension$schema = extension.schema) === null || _extension$schema === void 0 ? void 0 : _extension$schema.classes;\n  const featureTables = extension === null || extension === void 0 ? void 0 : extension.featureTables;\n  const featureTextures = extension === null || extension === void 0 ? void 0 : extension.featureTextures;\n  if (featureTextures) {\n    console.warn('featureTextures is not yet supported in the \"EXT_feature_metadata\" extension.');\n  }\n  if (schemaClasses && featureTables) {\n    for (const schemaName in schemaClasses) {\n      const schemaClass = schemaClasses[schemaName];\n      const featureTable = findFeatureTableByName(featureTables, schemaName);\n      if (featureTable) {\n        handleFeatureTableProperties(scenegraph, featureTable, schemaClass);\n      }\n    }\n  }\n}\n\nfunction handleFeatureTableProperties(scenegraph, featureTable, schemaClass) {\n  for (const propertyName in schemaClass.properties) {\n    var _featureTable$propert;\n    const schemaProperty = schemaClass.properties[propertyName];\n    const featureTableProperty = featureTable === null || featureTable === void 0 ? void 0 : (_featureTable$propert = featureTable.properties) === null || _featureTable$propert === void 0 ? void 0 : _featureTable$propert[propertyName];\n    const numberOfFeatures = featureTable.count;\n    if (featureTableProperty) {\n      const data = getPropertyDataFromBinarySource(scenegraph, schemaProperty, numberOfFeatures, featureTableProperty);\n      featureTableProperty.data = data;\n    }\n  }\n}\n\nfunction getPropertyDataFromBinarySource(scenegraph, schemaProperty, numberOfFeatures, featureTableProperty) {\n  const bufferView = featureTableProperty.bufferView;\n  let data = scenegraph.getTypedArrayForBufferView(bufferView);\n  switch (schemaProperty.type) {\n    case 'STRING':\n      {\n        const stringOffsetBufferView = featureTableProperty.stringOffsetBufferView;\n        const offsetsData = scenegraph.getTypedArrayForBufferView(stringOffsetBufferView);\n        data = getStringAttributes(data, offsetsData, numberOfFeatures);\n        break;\n      }\n    default:\n  }\n  return data;\n}\n\nfunction findFeatureTableByName(featureTables, schemaClassName) {\n  for (const featureTableName in featureTables) {\n    const featureTable = featureTables[featureTableName];\n    if (featureTable.class === schemaClassName) {\n      return featureTable;\n    }\n  }\n  return null;\n}\n\nfunction getStringAttributes(data, offsetsData, stringsCount) {\n  const stringsArray = [];\n  const textDecoder = new TextDecoder('utf8');\n  let stringOffset = 0;\n  const bytesPerStringSize = 4;\n  for (let index = 0; index < stringsCount; index++) {\n    const stringByteSize = offsetsData[(index + 1) * bytesPerStringSize] - offsetsData[index * bytesPerStringSize];\n    const stringData = data.subarray(stringOffset, stringByteSize + stringOffset);\n    const stringAttribute = textDecoder.decode(stringData);\n    stringsArray.push(stringAttribute);\n    stringOffset += stringByteSize;\n  }\n  return stringsArray;\n}\n//# sourceMappingURL=EXT_feature_metadata.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/api/gltf-extensions.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst EXTENSIONS = [\n\nEXT_meshopt_compression_namespaceObject, EXT_texture_webp_namespaceObject,\nKHR_texture_basisu_namespaceObject, KHR_draco_mesh_compression_namespaceObject, KHR_lights_punctual_namespaceObject, KHR_materials_unlit_namespaceObject, KHR_techniques_webgl_namespaceObject, KHR_texture_transform_namespaceObject, EXT_feature_metadata_namespaceObject];\n\nfunction preprocessExtensions(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  const extensions = EXTENSIONS.filter(extension => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    var _extension$preprocess;\n    (_extension$preprocess = extension.preprocess) === null || _extension$preprocess === void 0 ? void 0 : _extension$preprocess.call(extension, gltf, options, context);\n  }\n}\n\nasync function decodeExtensions(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  const extensions = EXTENSIONS.filter(extension => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    var _extension$decode;\n    await ((_extension$decode = extension.decode) === null || _extension$decode === void 0 ? void 0 : _extension$decode.call(extension, gltf, options, context));\n  }\n}\nfunction useExtension(extensionName, options) {\n  var _options$gltf;\n  const excludes = (options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.excludeExtensions) || {};\n  const exclude = extensionName in excludes && !excludes[extensionName];\n  return !exclude;\n}\n//# sourceMappingURL=gltf-extensions.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/extensions/KHR_binary_gltf.js\n\n\n\nconst KHR_BINARY_GLTF = 'KHR_binary_glTF';\n\nconst KHR_binary_gltf_name = (/* unused pure expression or super */ null && (KHR_BINARY_GLTF));\nfunction KHR_binary_gltf_preprocess(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  for (const image of json.images || []) {\n    const extension = gltfScenegraph.getObjectExtension(image, KHR_BINARY_GLTF);\n    if (extension) {\n      Object.assign(image, extension);\n    }\n    gltfScenegraph.removeObjectExtension(image, KHR_BINARY_GLTF);\n  }\n\n  if (json.buffers && json.buffers[0]) {\n    delete json.buffers[0].uri;\n  }\n\n  gltfScenegraph.removeExtension(KHR_BINARY_GLTF);\n}\n//# sourceMappingURL=KHR_binary_gltf.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/api/normalize-gltf-v1.js\n\n\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\nclass GLTFV1Normalizer {\n  constructor() {\n    (0,defineProperty/* default */.Z)(this, \"idToIndexMap\", {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    });\n    (0,defineProperty/* default */.Z)(this, \"json\", void 0);\n  }\n\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    switch (json.asset && json.asset.version) {\n      case '2.0':\n        return;\n\n      case undefined:\n      case '1.0':\n        break;\n      default:\n        console.warn(\"glTF: Unknown version \".concat(json.asset.version));\n        return;\n    }\n    if (!options.normalize) {\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n    this._addAsset(json);\n\n    this._convertTopLevelObjectsToArrays(json);\n\n    KHR_binary_gltf_preprocess(gltf);\n\n    this._convertObjectIdsToArrayIndices(json);\n    this._updateObjects(json);\n    this._updateMaterial(json);\n  }\n\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n  _convertTopLevelObjectsToArrays(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    json[mapName] = [];\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id;\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {\n        attributes,\n        indices,\n        material\n      } = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map(child => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map(mesh => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map(node => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(\"gltf v1: json doesn't contain attribute \".concat(topLevelArrayName));\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(\"gltf v1: failed to resolve \".concat(key, \" with id \").concat(id));\n      }\n      return index;\n    }\n    return id;\n  }\n\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      delete buffer.type;\n    }\n  }\n\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      var _material$values, _material$values2, _material$values3;\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n      const textureId = ((_material$values = material.values) === null || _material$values === void 0 ? void 0 : _material$values.tex) || ((_material$values2 = material.values) === null || _material$values2 === void 0 ? void 0 : _material$values2.texture2d_0) || ((_material$values3 = material.values) === null || _material$values3 === void 0 ? void 0 : _material$values3.diffuseTex);\n      const textureIndex = json.textures.findIndex(texture => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {\n          index: textureIndex\n        };\n      }\n    }\n  }\n}\nfunction normalizeGLTFV1(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n//# sourceMappingURL=normalize-gltf-v1.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/api/post-process-gltf.js\n\n\n\n\nconst post_process_gltf_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst post_process_gltf_BYTES = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nconst GL_SAMPLER = {\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\nfunction post_process_gltf_getBytesFromComponentType(componentType) {\n  return post_process_gltf_BYTES[componentType];\n}\nfunction post_process_gltf_getSizeFromAccessorType(type) {\n  return post_process_gltf_COMPONENTS[type];\n}\nclass GLTFPostProcessor {\n  constructor() {\n    (0,defineProperty/* default */.Z)(this, \"baseUri\", '');\n    (0,defineProperty/* default */.Z)(this, \"json\", {});\n    (0,defineProperty/* default */.Z)(this, \"buffers\", []);\n    (0,defineProperty/* default */.Z)(this, \"images\", []);\n  }\n  postProcess(gltf) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      json,\n      buffers = [],\n      images = [],\n      baseUri = ''\n    } = gltf;\n    assert_assert(json);\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n    this._resolveTree(this.json, options);\n    return this.json;\n  }\n\n  _resolveTree(json) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n  getCamera(index) {\n    return null;\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n  getImage(index) {\n    return this._get('images', index);\n  }\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n  _get(array, index) {\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n    }\n\n    return object;\n  }\n\n  _resolveScene(scene, index) {\n    scene.id = scene.id || \"scene-\".concat(index);\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n    return scene;\n  }\n  _resolveNode(node, index) {\n    node.id = node.id || \"node-\".concat(index);\n    if (node.children) {\n      node.children = node.children.map(child => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce((accum, meshIndex) => {\n        const mesh = this.getMesh(meshIndex);\n        accum.id = mesh.id;\n        accum.primitives = accum.primitives.concat(mesh.primitives);\n        return accum;\n      }, {\n        primitives: []\n      });\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n  _resolveSkin(skin, index) {\n    skin.id = skin.id || \"skin-\".concat(index);\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n  _resolveMesh(mesh, index) {\n    mesh.id = mesh.id || \"mesh-\".concat(index);\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map(primitive => {\n        primitive = {\n          ...primitive\n        };\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n  _resolveMaterial(material, index) {\n    material.id = material.id || \"material-\".concat(index);\n    if (material.normalTexture) {\n      material.normalTexture = {\n        ...material.normalTexture\n      };\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {\n        ...material.occlustionTexture\n      };\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {\n        ...material.emmisiveTexture\n      };\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {\n        ...material.pbrMetallicRoughness\n      };\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {\n          ...mr.baseColorTexture\n        };\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {\n          ...mr.metallicRoughnessTexture\n        };\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n  _resolveAccessor(accessor, index) {\n    accessor.id = accessor.id || \"accessor-\".concat(index);\n    if (accessor.bufferView !== undefined) {\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    accessor.bytesPerComponent = post_process_gltf_getBytesFromComponentType(accessor.componentType);\n    accessor.components = post_process_gltf_getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {\n        ArrayType,\n        byteLength\n      } = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset = (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(buffer, byteOffset, accessor.bufferView.byteStride, accessor.bytesPerElement, accessor.count);\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n    return accessor;\n  }\n\n  _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count) {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)), i * bytesPerElement);\n    }\n    return result.buffer;\n  }\n  _resolveTexture(texture, index) {\n    texture.id = texture.id || \"texture-\".concat(index);\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n  _resolveSampler(sampler, index) {\n    sampler.id = sampler.id || \"sampler-\".concat(index);\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n  _resolveImage(image, index) {\n    image.id = image.id || \"image-\".concat(index);\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n    return image;\n  }\n  _resolveBufferView(bufferView, index) {\n    const bufferIndex = bufferView.buffer;\n    const result = {\n      id: \"bufferView-\".concat(index),\n      ...bufferView,\n      buffer: this.buffers[bufferIndex]\n    };\n\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n    result.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return result;\n  }\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || \"camera-\".concat(index);\n    if (camera.perspective) {\n    }\n    if (camera.orthographic) {\n    }\n    return camera;\n  }\n}\nfunction postProcessGLTF(gltf, options) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n//# sourceMappingURL=post-process-gltf.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/parsers/parse-glb.js\n\n\n\nconst MAGIC_glTF = 0x676c5446;\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\nconst GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0;\nconst GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1;\n\nconst GLB_V1_CONTENT_FORMAT_JSON = 0x0;\nconst LE = true;\n\nfunction parse_glb_getMagicString(dataView) {\n  let byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return \"\".concat(String.fromCharCode(dataView.getUint8(byteOffset + 0))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 1))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 2))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 3)));\n}\n\nfunction parse_glb_isGLB(arrayBuffer) {\n  let byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const dataView = new DataView(arrayBuffer);\n  const {\n    magic = MAGIC_glTF\n  } = options;\n  const magic1 = dataView.getUint32(byteOffset, false);\n  return magic1 === magic || magic1 === MAGIC_glTF;\n}\nfunction parseGLBSync(glb, arrayBuffer) {\n  let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const dataView = new DataView(arrayBuffer);\n\n  const type = parse_glb_getMagicString(dataView, byteOffset + 0);\n  const version = dataView.getUint32(byteOffset + 4, LE);\n  const byteLength = dataView.getUint32(byteOffset + 8, LE);\n\n  Object.assign(glb, {\n    header: {\n      byteOffset,\n      byteLength,\n      hasBinChunk: false\n    },\n    type,\n    version,\n    json: {},\n    binChunks: []\n  });\n  byteOffset += GLB_FILE_HEADER_SIZE;\n  switch (glb.version) {\n    case 1:\n      return parseGLBV1(glb, dataView, byteOffset);\n    case 2:\n      return parseGLBV2(glb, dataView, byteOffset, options = {});\n    default:\n      throw new Error(\"Invalid GLB version \".concat(glb.version, \". Only supports v1 and v2.\"));\n  }\n}\nfunction parseGLBV1(glb, dataView, byteOffset) {\n  (0,env_utils_assert/* assert */.h)(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n\n  const contentLength = dataView.getUint32(byteOffset + 0, LE);\n  const contentFormat = dataView.getUint32(byteOffset + 4, LE);\n  byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n  (0,env_utils_assert/* assert */.h)(contentFormat === GLB_V1_CONTENT_FORMAT_JSON);\n  parseJSONChunk(glb, dataView, byteOffset, contentLength);\n  byteOffset += contentLength;\n  byteOffset += parseBINChunk(glb, dataView, byteOffset, glb.header.byteLength);\n  return byteOffset;\n}\nfunction parseGLBV2(glb, dataView, byteOffset, options) {\n  (0,env_utils_assert/* assert */.h)(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n  parseGLBChunksSync(glb, dataView, byteOffset, options);\n  return byteOffset + glb.header.byteLength;\n}\nfunction parseGLBChunksSync(glb, dataView, byteOffset, options) {\n  while (byteOffset + 8 <= glb.header.byteLength) {\n    const chunkLength = dataView.getUint32(byteOffset + 0, LE);\n    const chunkFormat = dataView.getUint32(byteOffset + 4, LE);\n    byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n    switch (chunkFormat) {\n      case GLB_CHUNK_TYPE_JSON:\n        parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n      case GLB_CHUNK_TYPE_BIN:\n        parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n\n      case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        }\n        break;\n      case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        }\n        break;\n      default:\n        break;\n    }\n    byteOffset += padToNBytes(chunkLength, 4);\n  }\n  return byteOffset;\n}\n\nfunction parseJSONChunk(glb, dataView, byteOffset, chunkLength) {\n  const jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);\n\n  const textDecoder = new TextDecoder('utf8');\n  const jsonText = textDecoder.decode(jsonChunk);\n\n  glb.json = JSON.parse(jsonText);\n  return padToNBytes(chunkLength, 4);\n}\n\nfunction parseBINChunk(glb, dataView, byteOffset, chunkLength) {\n  glb.header.hasBinChunk = true;\n  glb.binChunks.push({\n    byteOffset,\n    byteLength: chunkLength,\n    arrayBuffer: dataView.buffer\n  });\n\n  return padToNBytes(chunkLength, 4);\n}\n//# sourceMappingURL=parse-glb.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/lib/parsers/parse-gltf.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction isGLTF(arrayBuffer, options) {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\nasync function parseGLTF(gltf, arrayBufferOrString) {\n  var _options$gltf, _options$gltf2, _options$gltf3, _options$gltf4;\n  let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let options = arguments.length > 3 ? arguments[3] : undefined;\n  let context = arguments.length > 4 ? arguments[4] : undefined;\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n  normalizeGLTFV1(gltf, {\n    normalize: options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.normalize\n  });\n  preprocessExtensions(gltf, options, context);\n  const promises = [];\n\n  if (options !== null && options !== void 0 && (_options$gltf2 = options.gltf) !== null && _options$gltf2 !== void 0 && _options$gltf2.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n  if (options !== null && options !== void 0 && (_options$gltf3 = options.gltf) !== null && _options$gltf3 !== void 0 && _options$gltf3.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  await Promise.all(promises);\n\n  return options !== null && options !== void 0 && (_options$gltf4 = options.gltf) !== null && _options$gltf4 !== void 0 && _options$gltf4.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  if (data instanceof ArrayBuffer && !parse_glb_isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n  if (typeof data === 'string') {\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    const glb = {};\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n    assert_assert(glb.type === 'glTF', \"Invalid GLB magic string \".concat(glb.type));\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert_assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {\n      binChunks\n    } = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n  }\n\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\nasync function loadBuffers(gltf, options, context) {\n  const buffers = gltf.json.buffers || [];\n  for (let i = 0; i < buffers.length; ++i) {\n    const buffer = buffers[i];\n    if (buffer.uri) {\n      var _context$fetch, _response$arrayBuffer;\n      const {\n        fetch\n      } = context;\n      assert_assert(fetch);\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await (context === null || context === void 0 ? void 0 : (_context$fetch = context.fetch) === null || _context$fetch === void 0 ? void 0 : _context$fetch.call(context, uri));\n      const arrayBuffer = await (response === null || response === void 0 ? void 0 : (_response$arrayBuffer = response.arrayBuffer) === null || _response$arrayBuffer === void 0 ? void 0 : _response$arrayBuffer.call(response));\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n      delete buffer.uri;\n    } else if (gltf.buffers[i] === null) {\n      gltf.buffers[i] = {\n        arrayBuffer: new ArrayBuffer(buffer.byteLength),\n        byteOffset: 0,\n        byteLength: buffer.byteLength\n      };\n    }\n  }\n}\n\nasync function loadImages(gltf, options, context) {\n  const imageIndices = getReferencesImageIndices(gltf);\n  const images = gltf.json.images || [];\n  const promises = [];\n  for (const imageIndex of imageIndices) {\n    promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n  }\n  return await Promise.all(promises);\n}\n\nfunction getReferencesImageIndices(gltf) {\n  const imageIndices = new Set();\n  const textures = gltf.json.textures || [];\n  for (const texture of textures) {\n    if (texture.source !== undefined) {\n      imageIndices.add(texture.source);\n    }\n  }\n  return Array.from(imageIndices).sort();\n}\n\nasync function loadImage(gltf, image, index, options, context) {\n  const {\n    fetch,\n    parse\n  } = context;\n  let arrayBuffer;\n  if (image.uri && !image.hasOwnProperty('bufferView')) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n    image.bufferView = {\n      data: arrayBuffer\n    };\n  }\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = (0,array_buffer_utils/* sliceArrayBuffer */.qv)(array.buffer, array.byteOffset, array.byteLength);\n  }\n  assert_assert(arrayBuffer, 'glTF image has no data');\n\n  let parsedImage = await parse(arrayBuffer, [image_loader/* ImageLoader */.S, BasisLoader], {\n    mimeType: image.mimeType,\n    basis: options.basis || {\n      format: selectSupportedBasisFormat()\n    }\n  }, context);\n  if (parsedImage && parsedImage[0]) {\n    parsedImage = {\n      compressed: true,\n      mipmaps: false,\n      width: parsedImage[0].width,\n      height: parsedImage[0].height,\n      data: parsedImage[0]\n    };\n  }\n\n  gltf.images = gltf.images || [];\n  gltf.images[index] = parsedImage;\n}\n//# sourceMappingURL=parse-gltf.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/gltf/dist/esm/gltf-loader.js\n\n\nconst GLTFLoader = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse: gltf_loader_parse,\n  options: {\n    gltf: {\n      normalize: true,\n      loadBuffers: true,\n      loadImages: true,\n      decompressMeshes: true,\n      postProcess: true\n    },\n\n    log: console\n  },\n\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\nasync function gltf_loader_parse(arrayBuffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  options = {\n    ...GLTFLoader.options,\n    ...options\n  };\n  options.gltf = {\n    ...GLTFLoader.options.gltf,\n    ...options.gltf\n  };\n  const {\n    byteOffset = 0\n  } = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n//# sourceMappingURL=gltf-loader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52462\n")},54022:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"S\": function() { return /* binding */ ImageLoader; }\n});\n\n// UNUSED EXPORTS: _typecheckImageLoader\n\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/utils/version.js\n\nconst VERSION =  true ? \"3.3.1\" : 0;\n//# sourceMappingURL=version.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/assert.js\nvar assert = __webpack_require__(16269);\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/loader-utils/dist/esm/lib/env-utils/globals.js\nvar globals = __webpack_require__(84959);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/category-api/image-type.js\n\nconst {\n  _parseImageNode\n} = globalThis;\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined';\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nconst DATA_SUPPORTED = globals/* isBrowser */.jU ? true : NODE_IMAGE_SUPPORTED;\n\nfunction isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'image':\n      return IMAGE_SUPPORTED;\n    case 'data':\n      return DATA_SUPPORTED;\n    default:\n      throw new Error(\"@loaders.gl/images: image \".concat(type, \" not supported in this environment\"));\n  }\n}\n\nfunction getDefaultImageType() {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  throw new Error('Install \\'@loaders.gl/polyfills\\' to parse images under Node.js');\n}\n//# sourceMappingURL=image-type.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/category-api/parsed-image-api.js\nfunction isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\nfunction deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n  }\n}\n\nfunction getImageType(image) {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\nfunction getImageSize(image) {\n  return getImageData(image);\n}\nfunction getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n    case 'image':\n    case 'imagebitmap':\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      if (!context) {\n        throw new Error('getImageData');\n      }\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      return context.getImageData(0, 0, image.width, image.height);\n    default:\n      throw new Error('getImageData');\n  }\n}\n\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}\n//# sourceMappingURL=parsed-image-api.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/parsers/svg-utils.js\n\n\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\nfunction isSVG(url) {\n  return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));\n}\nfunction getBlobOrSVGDataUrl(arrayBuffer, url) {\n  if (isSVG(url)) {\n    const textDecoder = new TextDecoder();\n    let xmlText = textDecoder.decode(arrayBuffer);\n    try {\n      if (typeof unescape === 'function' && typeof encodeURIComponent === 'function') {\n        xmlText = unescape(encodeURIComponent(xmlText));\n      }\n    } catch (error) {\n      throw new Error(error.message);\n    }\n    const src = \"data:image/svg+xml;base64,\".concat(btoa(xmlText));\n    return src;\n  }\n  return getBlob(arrayBuffer, url);\n}\nfunction getBlob(arrayBuffer, url) {\n  if (isSVG(url)) {\n    throw new Error('SVG cannot be parsed directly to imagebitmap');\n  }\n  return new Blob([new Uint8Array(arrayBuffer)]);\n}\n//# sourceMappingURL=svg-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-image.js\n\n\nasync function parseToImage(arrayBuffer, options, url) {\n\n  const blobOrDataUrl = getBlobOrSVGDataUrl(arrayBuffer, url);\n  const URL = self.URL || self.webkitURL;\n  const objectUrl = typeof blobOrDataUrl !== 'string' && URL.createObjectURL(blobOrDataUrl);\n  try {\n    return await loadToImage(objectUrl || blobOrDataUrl, options);\n  } finally {\n    if (objectUrl) {\n      URL.revokeObjectURL(objectUrl);\n    }\n  }\n}\nasync function loadToImage(url, options) {\n  const image = new Image();\n  image.src = url;\n\n  if (options.image && options.image.decode && image.decode) {\n    await image.decode();\n    return image;\n  }\n\n  return await new Promise((resolve, reject) => {\n    try {\n      image.onload = () => resolve(image);\n      image.onerror = err => reject(new Error(\"Could not load image \".concat(url, \": \").concat(err)));\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n//# sourceMappingURL=parse-to-image.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-image-bitmap.js\n\n\nconst EMPTY_OBJECT = {};\nlet imagebitmapOptionsSupported = true;\n\nasync function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  if (isSVG(url)) {\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    blob = getBlob(arrayBuffer, url);\n  }\n  const imagebitmapOptions = options && options.imagebitmap;\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\nasync function safeCreateImageBitmap(blob) {\n  let imagebitmapOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n  if (imagebitmapOptions) {\n    try {\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error);\n      imagebitmapOptionsSupported = false;\n    }\n  }\n  return await createImageBitmap(blob);\n}\nfunction isEmptyObject(object) {\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n//# sourceMappingURL=parse-to-image-bitmap.js.map\n// EXTERNAL MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/category-api/binary-image-api.js\nvar binary_image_api = __webpack_require__(39105);\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-to-node-image.js\n\n\n\nasync function parseToNodeImage(arrayBuffer, options) {\n  const {\n    mimeType\n  } = (0,binary_image_api/* getBinaryImageMetadata */.I)(arrayBuffer) || {};\n\n  const _parseImageNode = globalThis._parseImageNode;\n  (0,assert/* assert */.h)(_parseImageNode);\n\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n//# sourceMappingURL=parse-to-node-image.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/lib/parsers/parse-image.js\n\n\n\n\n\n\n\nasync function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  const imageType = imageOptions.type || 'auto';\n  const {\n    url\n  } = context || {};\n\n  const loadType = getLoadableImageType(imageType);\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      (0,assert/* assert */.h)(false);\n  }\n\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n  return image;\n}\n\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n//# sourceMappingURL=parse-image.js.map\n;// CONCATENATED MODULE: ./node_modules/@loaders.gl/images/dist/esm/image-loader.js\n\n\n\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/vnd.microsoft.icon', 'image/svg+xml'];\nconst DEFAULT_IMAGE_LOADER_OPTIONS = {\n  image: {\n    type: 'auto',\n    decode: true\n  }\n};\n\nconst ImageLoader = {\n  id: 'image',\n  module: 'images',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  tests: [arrayBuffer => Boolean((0,binary_image_api/* getBinaryImageMetadata */.I)(new DataView(arrayBuffer)))],\n  options: DEFAULT_IMAGE_LOADER_OPTIONS\n};\nconst _typecheckImageLoader = (/* unused pure expression or super */ null && (ImageLoader));\n//# sourceMappingURL=image-loader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54022\n")},39105:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"I\": function() { return /* binding */ getBinaryImageMetadata; }\n/* harmony export */ });\n/* unused harmony export getBmpMetadata */\n\n\nconst BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\nfunction getBinaryImageMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  return getPngMetadata(dataView) || getJpegMetadata(dataView) || getGifMetadata(dataView) || getBmpMetadata(dataView);\n}\n\nfunction getPngMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n  if (!isPng) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/png',\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\nfunction getGifMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n  if (!isGif) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/gif',\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\nfunction getBmpMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isBmp = dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 0x424d && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;\n  if (!isBmp) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/bmp',\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\nfunction getJpegMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isJpeg = dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 && dataView.getUint8(2) === 0xff;\n  if (!isJpeg) {\n    return null;\n  }\n  const {\n    tableMarkers,\n    sofMarkers\n  } = getJpegMarkers();\n\n  let i = 2;\n  while (i + 9 < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    if (sofMarkers.has(marker)) {\n      return {\n        mimeType: 'image/jpeg',\n        height: dataView.getUint16(i + 5, BIG_ENDIAN),\n        width: dataView.getUint16(i + 7, BIG_ENDIAN)\n      };\n    }\n\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n  return null;\n}\nfunction getJpegMarkers() {\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  const sofMarkers = new Set([0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce, 0xffcf, 0xffde]);\n  return {\n    tableMarkers,\n    sofMarkers\n  };\n}\n\nfunction toDataView(data) {\n  if (data instanceof DataView) {\n    return data;\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer);\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data);\n  }\n  throw new Error('toDataView');\n}\n//# sourceMappingURL=binary-image-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkxMDUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsWUFBWTtBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0Bsb2FkZXJzLmdsL2ltYWdlcy9kaXN0L2VzbS9saWIvY2F0ZWdvcnktYXBpL2JpbmFyeS1pbWFnZS1hcGkuanM/MzBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuY29uc3QgQklHX0VORElBTiA9IGZhbHNlO1xuY29uc3QgTElUVExFX0VORElBTiA9IHRydWU7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaW5hcnlJbWFnZU1ldGFkYXRhKGJpbmFyeURhdGEpIHtcbiAgY29uc3QgZGF0YVZpZXcgPSB0b0RhdGFWaWV3KGJpbmFyeURhdGEpO1xuICByZXR1cm4gZ2V0UG5nTWV0YWRhdGEoZGF0YVZpZXcpIHx8IGdldEpwZWdNZXRhZGF0YShkYXRhVmlldykgfHwgZ2V0R2lmTWV0YWRhdGEoZGF0YVZpZXcpIHx8IGdldEJtcE1ldGFkYXRhKGRhdGFWaWV3KTtcbn1cblxuZnVuY3Rpb24gZ2V0UG5nTWV0YWRhdGEoYmluYXJ5RGF0YSkge1xuICBjb25zdCBkYXRhVmlldyA9IHRvRGF0YVZpZXcoYmluYXJ5RGF0YSk7XG4gIGNvbnN0IGlzUG5nID0gZGF0YVZpZXcuYnl0ZUxlbmd0aCA+PSAyNCAmJiBkYXRhVmlldy5nZXRVaW50MzIoMCwgQklHX0VORElBTikgPT09IDB4ODk1MDRlNDc7XG4gIGlmICghaXNQbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWltZVR5cGU6ICdpbWFnZS9wbmcnLFxuICAgIHdpZHRoOiBkYXRhVmlldy5nZXRVaW50MzIoMTYsIEJJR19FTkRJQU4pLFxuICAgIGhlaWdodDogZGF0YVZpZXcuZ2V0VWludDMyKDIwLCBCSUdfRU5ESUFOKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRHaWZNZXRhZGF0YShiaW5hcnlEYXRhKSB7XG4gIGNvbnN0IGRhdGFWaWV3ID0gdG9EYXRhVmlldyhiaW5hcnlEYXRhKTtcbiAgY29uc3QgaXNHaWYgPSBkYXRhVmlldy5ieXRlTGVuZ3RoID49IDEwICYmIGRhdGFWaWV3LmdldFVpbnQzMigwLCBCSUdfRU5ESUFOKSA9PT0gMHg0NzQ5NDYzODtcbiAgaWYgKCFpc0dpZikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtaW1lVHlwZTogJ2ltYWdlL2dpZicsXG4gICAgd2lkdGg6IGRhdGFWaWV3LmdldFVpbnQxNig2LCBMSVRUTEVfRU5ESUFOKSxcbiAgICBoZWlnaHQ6IGRhdGFWaWV3LmdldFVpbnQxNig4LCBMSVRUTEVfRU5ESUFOKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm1wTWV0YWRhdGEoYmluYXJ5RGF0YSkge1xuICBjb25zdCBkYXRhVmlldyA9IHRvRGF0YVZpZXcoYmluYXJ5RGF0YSk7XG4gIGNvbnN0IGlzQm1wID0gZGF0YVZpZXcuYnl0ZUxlbmd0aCA+PSAxNCAmJiBkYXRhVmlldy5nZXRVaW50MTYoMCwgQklHX0VORElBTikgPT09IDB4NDI0ZCAmJiBkYXRhVmlldy5nZXRVaW50MzIoMiwgTElUVExFX0VORElBTikgPT09IGRhdGFWaWV3LmJ5dGVMZW5ndGg7XG4gIGlmICghaXNCbXApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWltZVR5cGU6ICdpbWFnZS9ibXAnLFxuICAgIHdpZHRoOiBkYXRhVmlldy5nZXRVaW50MzIoMTgsIExJVFRMRV9FTkRJQU4pLFxuICAgIGhlaWdodDogZGF0YVZpZXcuZ2V0VWludDMyKDIyLCBMSVRUTEVfRU5ESUFOKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRKcGVnTWV0YWRhdGEoYmluYXJ5RGF0YSkge1xuICBjb25zdCBkYXRhVmlldyA9IHRvRGF0YVZpZXcoYmluYXJ5RGF0YSk7XG4gIGNvbnN0IGlzSnBlZyA9IGRhdGFWaWV3LmJ5dGVMZW5ndGggPj0gMyAmJiBkYXRhVmlldy5nZXRVaW50MTYoMCwgQklHX0VORElBTikgPT09IDB4ZmZkOCAmJiBkYXRhVmlldy5nZXRVaW50OCgyKSA9PT0gMHhmZjtcbiAgaWYgKCFpc0pwZWcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB7XG4gICAgdGFibGVNYXJrZXJzLFxuICAgIHNvZk1hcmtlcnNcbiAgfSA9IGdldEpwZWdNYXJrZXJzKCk7XG5cbiAgbGV0IGkgPSAyO1xuICB3aGlsZSAoaSArIDkgPCBkYXRhVmlldy5ieXRlTGVuZ3RoKSB7XG4gICAgY29uc3QgbWFya2VyID0gZGF0YVZpZXcuZ2V0VWludDE2KGksIEJJR19FTkRJQU4pO1xuXG4gICAgaWYgKHNvZk1hcmtlcnMuaGFzKG1hcmtlcikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1pbWVUeXBlOiAnaW1hZ2UvanBlZycsXG4gICAgICAgIGhlaWdodDogZGF0YVZpZXcuZ2V0VWludDE2KGkgKyA1LCBCSUdfRU5ESUFOKSxcbiAgICAgICAgd2lkdGg6IGRhdGFWaWV3LmdldFVpbnQxNihpICsgNywgQklHX0VORElBTilcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCF0YWJsZU1hcmtlcnMuaGFzKG1hcmtlcikpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGkgKz0gMjtcbiAgICBpICs9IGRhdGFWaWV3LmdldFVpbnQxNihpLCBCSUdfRU5ESUFOKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEpwZWdNYXJrZXJzKCkge1xuICBjb25zdCB0YWJsZU1hcmtlcnMgPSBuZXcgU2V0KFsweGZmZGIsIDB4ZmZjNCwgMHhmZmNjLCAweGZmZGQsIDB4ZmZmZV0pO1xuICBmb3IgKGxldCBpID0gMHhmZmUwOyBpIDwgMHhmZmYwOyArK2kpIHtcbiAgICB0YWJsZU1hcmtlcnMuYWRkKGkpO1xuICB9XG5cbiAgY29uc3Qgc29mTWFya2VycyA9IG5ldyBTZXQoWzB4ZmZjMCwgMHhmZmMxLCAweGZmYzIsIDB4ZmZjMywgMHhmZmM1LCAweGZmYzYsIDB4ZmZjNywgMHhmZmM5LCAweGZmY2EsIDB4ZmZjYiwgMHhmZmNkLCAweGZmY2UsIDB4ZmZjZiwgMHhmZmRlXSk7XG4gIHJldHVybiB7XG4gICAgdGFibGVNYXJrZXJzLFxuICAgIHNvZk1hcmtlcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9EYXRhVmlldyhkYXRhKSB7XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlcik7XG4gIH1cblxuICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVmlldyhkYXRhKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3RvRGF0YVZpZXcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmFyeS1pbWFnZS1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39105\n")},74609:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "JY": function() { return /* binding */ concatenateArrayBuffers; },\n/* harmony export */   "Xq": function() { return /* binding */ compareArrayBuffers; },\n/* harmony export */   "qv": function() { return /* binding */ sliceArrayBuffer; }\n/* harmony export */ });\n/* unused harmony export concatenateTypedArrays */\n\nfunction compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {\n  byteLength = byteLength || arrayBuffer1.byteLength;\n  if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) {\n    return false;\n  }\n  const array1 = new Uint8Array(arrayBuffer1);\n  const array2 = new Uint8Array(arrayBuffer2);\n  for (let i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction concatenateArrayBuffers() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  const sourceArrays = sources.map(source2 => source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2);\n\n  const byteLength = sourceArrays.reduce((length, typedArray) => length + typedArray.byteLength, 0);\n\n  const result = new Uint8Array(byteLength);\n\n  let offset = 0;\n  for (const sourceArray of sourceArrays) {\n    result.set(sourceArray, offset);\n    offset += sourceArray.byteLength;\n  }\n\n  return result.buffer;\n}\n\nfunction concatenateTypedArrays() {\n  for (var _len2 = arguments.length, typedArrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    typedArrays[_key2] = arguments[_key2];\n  }\n  const arrays = typedArrays;\n  const TypedArrayConstructor = arrays && arrays.length > 1 && arrays[0].constructor || null;\n  if (!TypedArrayConstructor) {\n    throw new Error(\'"concatenateTypedArrays" - incorrect quantity of arguments or arguments have incompatible data types\');\n  }\n  const sumLength = arrays.reduce((acc, value) => acc + value.length, 0);\n  const result = new TypedArrayConstructor(sumLength);\n  let offset = 0;\n  for (const array of arrays) {\n    result.set(array, offset);\n    offset += array.length;\n  }\n  return result;\n}\n\nfunction sliceArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  const subArray = byteLength !== undefined ? new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + byteLength) : new Uint8Array(arrayBuffer).subarray(byteOffset);\n  const arrayCopy = new Uint8Array(subArray);\n  return arrayCopy.buffer;\n}\n//# sourceMappingURL=array-buffer-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ2MDkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCx5RUFBeUUsYUFBYTtBQUN0RjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVPO0FBQ1AsZ0ZBQWdGLGVBQWU7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbG9hZGVycy5nbC9sb2FkZXItdXRpbHMvZGlzdC9lc20vbGliL2JpbmFyeS11dGlscy9hcnJheS1idWZmZXItdXRpbHMuanM/MTNkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlQXJyYXlCdWZmZXJzKGFycmF5QnVmZmVyMSwgYXJyYXlCdWZmZXIyLCBieXRlTGVuZ3RoKSB7XG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHx8IGFycmF5QnVmZmVyMS5ieXRlTGVuZ3RoO1xuICBpZiAoYXJyYXlCdWZmZXIxLmJ5dGVMZW5ndGggPCBieXRlTGVuZ3RoIHx8IGFycmF5QnVmZmVyMi5ieXRlTGVuZ3RoIDwgYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBhcnJheTEgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcjEpO1xuICBjb25zdCBhcnJheTIgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcjIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5MS5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJheTFbaV0gIT09IGFycmF5MltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdGVuYXRlQXJyYXlCdWZmZXJzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc291cmNlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzb3VyY2VzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIGNvbnN0IHNvdXJjZUFycmF5cyA9IHNvdXJjZXMubWFwKHNvdXJjZTIgPT4gc291cmNlMiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoc291cmNlMikgOiBzb3VyY2UyKTtcblxuICBjb25zdCBieXRlTGVuZ3RoID0gc291cmNlQXJyYXlzLnJlZHVjZSgobGVuZ3RoLCB0eXBlZEFycmF5KSA9PiBsZW5ndGggKyB0eXBlZEFycmF5LmJ5dGVMZW5ndGgsIDApO1xuXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpO1xuXG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IHNvdXJjZUFycmF5IG9mIHNvdXJjZUFycmF5cykge1xuICAgIHJlc3VsdC5zZXQoc291cmNlQXJyYXksIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHNvdXJjZUFycmF5LmJ5dGVMZW5ndGg7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdGVuYXRlVHlwZWRBcnJheXMoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgdHlwZWRBcnJheXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICB0eXBlZEFycmF5c1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG4gIGNvbnN0IGFycmF5cyA9IHR5cGVkQXJyYXlzO1xuICBjb25zdCBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBhcnJheXMgJiYgYXJyYXlzLmxlbmd0aCA+IDEgJiYgYXJyYXlzWzBdLmNvbnN0cnVjdG9yIHx8IG51bGw7XG4gIGlmICghVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcImNvbmNhdGVuYXRlVHlwZWRBcnJheXNcIiAtIGluY29ycmVjdCBxdWFudGl0eSBvZiBhcmd1bWVudHMgb3IgYXJndW1lbnRzIGhhdmUgaW5jb21wYXRpYmxlIGRhdGEgdHlwZXMnKTtcbiAgfVxuICBjb25zdCBzdW1MZW5ndGggPSBhcnJheXMucmVkdWNlKChhY2MsIHZhbHVlKSA9PiBhY2MgKyB2YWx1ZS5sZW5ndGgsIDApO1xuICBjb25zdCByZXN1bHQgPSBuZXcgVHlwZWRBcnJheUNvbnN0cnVjdG9yKHN1bUxlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IGFycmF5IG9mIGFycmF5cykge1xuICAgIHJlc3VsdC5zZXQoYXJyYXksIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGFycmF5Lmxlbmd0aDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2xpY2VBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICBjb25zdCBzdWJBcnJheSA9IGJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZCA/IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKS5zdWJhcnJheShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgYnl0ZUxlbmd0aCkgOiBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikuc3ViYXJyYXkoYnl0ZU9mZnNldCk7XG4gIGNvbnN0IGFycmF5Q29weSA9IG5ldyBVaW50OEFycmF5KHN1YkFycmF5KTtcbiAgcmV0dXJuIGFycmF5Q29weS5idWZmZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS1idWZmZXItdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74609\n')},16269:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"h\": function() { return /* binding */ assert; }\n/* harmony export */ });\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'loader assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyNjkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGxvYWRlcnMuZ2wvbG9hZGVyLXV0aWxzL2Rpc3QvZXNtL2xpYi9lbnYtdXRpbHMvYXNzZXJ0LmpzPzFhMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdsb2FkZXIgYXNzZXJ0aW9uIGZhaWxlZC4nKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16269\n")},84959:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"jU\": function() { return /* binding */ isBrowser; }\n/* harmony export */ });\n/* unused harmony exports self, window, global, document, isWorker, nodeVersion */\n\n\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g,\n  document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\n\n\nconst isBrowser =\nBoolean(typeof process !== 'object' || String(process) !== '[object process]' || process.browser);\n\nconst isWorker = typeof importScripts === 'function';\n\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\nconst nodeVersion = matches && parseFloat(matches[1]) || 0;\n//# sourceMappingURL=globals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ5NTkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFCQUFNLG9CQUFvQixxQkFBTTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDc0Y7O0FBRS9FO0FBQ1A7O0FBRU87O0FBRVA7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbG9hZGVycy5nbC9sb2FkZXItdXRpbHMvZGlzdC9lc20vbGliL2Vudi11dGlscy9nbG9iYWxzLmpzPzliNDEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmNvbnN0IGdsb2JhbHMgPSB7XG4gIHNlbGY6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLFxuICB3aW5kb3c6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdyxcbiAgZ2xvYmFsOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwsXG4gIGRvY3VtZW50OiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50XG59O1xuY29uc3Qgc2VsZl8gPSBnbG9iYWxzLnNlbGYgfHwgZ2xvYmFscy53aW5kb3cgfHwgZ2xvYmFscy5nbG9iYWwgfHwge307XG5jb25zdCB3aW5kb3dfID0gZ2xvYmFscy53aW5kb3cgfHwgZ2xvYmFscy5zZWxmIHx8IGdsb2JhbHMuZ2xvYmFsIHx8IHt9O1xuY29uc3QgZ2xvYmFsXyA9IGdsb2JhbHMuZ2xvYmFsIHx8IGdsb2JhbHMuc2VsZiB8fCBnbG9iYWxzLndpbmRvdyB8fCB7fTtcbmNvbnN0IGRvY3VtZW50XyA9IGdsb2JhbHMuZG9jdW1lbnQgfHwge307XG5leHBvcnQgeyBzZWxmXyBhcyBzZWxmLCB3aW5kb3dfIGFzIHdpbmRvdywgZ2xvYmFsXyBhcyBnbG9iYWwsIGRvY3VtZW50XyBhcyBkb2N1bWVudCB9O1xuXG5leHBvcnQgY29uc3QgaXNCcm93c2VyID1cbkJvb2xlYW4odHlwZW9mIHByb2Nlc3MgIT09ICdvYmplY3QnIHx8IFN0cmluZyhwcm9jZXNzKSAhPT0gJ1tvYmplY3QgcHJvY2Vzc10nIHx8IHByb2Nlc3MuYnJvd3Nlcik7XG5cbmV4cG9ydCBjb25zdCBpc1dvcmtlciA9IHR5cGVvZiBpbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nO1xuXG5jb25zdCBtYXRjaGVzID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbiAmJiAvdihbMC05XSopLy5leGVjKHByb2Nlc3MudmVyc2lvbik7XG5leHBvcnQgY29uc3Qgbm9kZVZlcnNpb24gPSBtYXRjaGVzICYmIHBhcnNlRmxvYXQobWF0Y2hlc1sxXSkgfHwgMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84959\n")},78634:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ RequestScheduler; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82482);\n/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23881);\n\n\nconst STAT_QUEUED_REQUESTS = \'Queued Requests\';\nconst STAT_ACTIVE_REQUESTS = \'Active Requests\';\nconst STAT_CANCELLED_REQUESTS = \'Cancelled Requests\';\nconst STAT_QUEUED_REQUESTS_EVER = \'Queued Requests Ever\';\nconst STAT_ACTIVE_REQUESTS_EVER = \'Active Requests Ever\';\nconst DEFAULT_PROPS = {\n  id: \'request-scheduler\',\n  throttleRequests: true,\n  maxRequests: 6\n};\n\nclass RequestScheduler {\n\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "props", void 0);\n    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "stats", void 0);\n    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "activeRequestCount", 0);\n    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "requestQueue", []);\n    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "requestMap", new Map());\n    (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "deferredUpdate", null);\n    this.props = {\n      ...DEFAULT_PROPS,\n      ...props\n    };\n\n    this.stats = new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z({\n      id: this.props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  scheduleRequest(handle) {\n    let getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => 0;\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({\n        done: () => {}\n      });\n    }\n\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle);\n    }\n    const request = {\n      handle,\n      priority: 0,\n      getPriority\n    };\n    const promise = new Promise(resolve => {\n      request.resolve = resolve;\n      return request;\n    });\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  _issueRequest(request) {\n    const {\n      handle,\n      resolve\n    } = request;\n    let isDone = false;\n    const done = () => {\n      if (!isDone) {\n        isDone = true;\n\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        this._issueNewRequests();\n      }\n    };\n\n    this.activeRequestCount++;\n    return resolve ? resolve({\n      done\n    }) : Promise.resolve({\n      done\n    });\n  }\n\n  _issueNewRequests() {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  _issueNewRequestsAsync() {\n    this.deferredUpdate = null;\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n    if (freeSlots === 0) {\n      return;\n    }\n    this._updateAllRequests();\n\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request);\n      }\n    }\n\n  }\n\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle);\n\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n//# sourceMappingURL=request-scheduler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg2MzQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0U7QUFDaEM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7O0FBRWY7QUFDQTtBQUNBLElBQUksOEZBQWU7QUFDbkIsSUFBSSw4RkFBZTtBQUNuQixJQUFJLDhGQUFlO0FBQ25CLElBQUksOEZBQWU7QUFDbkIsSUFBSSw4RkFBZTtBQUNuQixJQUFJLDhGQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixnRUFBSztBQUMxQjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsZUFBZTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbG9hZGVycy5nbC9sb2FkZXItdXRpbHMvZGlzdC9lc20vbGliL3JlcXVlc3QtdXRpbHMvcmVxdWVzdC1zY2hlZHVsZXIuanM/MzYyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IHsgU3RhdHMgfSBmcm9tICdAcHJvYmUuZ2wvc3RhdHMnO1xuY29uc3QgU1RBVF9RVUVVRURfUkVRVUVTVFMgPSAnUXVldWVkIFJlcXVlc3RzJztcbmNvbnN0IFNUQVRfQUNUSVZFX1JFUVVFU1RTID0gJ0FjdGl2ZSBSZXF1ZXN0cyc7XG5jb25zdCBTVEFUX0NBTkNFTExFRF9SRVFVRVNUUyA9ICdDYW5jZWxsZWQgUmVxdWVzdHMnO1xuY29uc3QgU1RBVF9RVUVVRURfUkVRVUVTVFNfRVZFUiA9ICdRdWV1ZWQgUmVxdWVzdHMgRXZlcic7XG5jb25zdCBTVEFUX0FDVElWRV9SRVFVRVNUU19FVkVSID0gJ0FjdGl2ZSBSZXF1ZXN0cyBFdmVyJztcbmNvbnN0IERFRkFVTFRfUFJPUFMgPSB7XG4gIGlkOiAncmVxdWVzdC1zY2hlZHVsZXInLFxuICB0aHJvdHRsZVJlcXVlc3RzOiB0cnVlLFxuICBtYXhSZXF1ZXN0czogNlxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdFNjaGVkdWxlciB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcm9wc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0YXRzXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYWN0aXZlUmVxdWVzdENvdW50XCIsIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlcXVlc3RRdWV1ZVwiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicmVxdWVzdE1hcFwiLCBuZXcgTWFwKCkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRlZmVycmVkVXBkYXRlXCIsIG51bGwpO1xuICAgIHRoaXMucHJvcHMgPSB7XG4gICAgICAuLi5ERUZBVUxUX1BST1BTLFxuICAgICAgLi4ucHJvcHNcbiAgICB9O1xuXG4gICAgdGhpcy5zdGF0cyA9IG5ldyBTdGF0cyh7XG4gICAgICBpZDogdGhpcy5wcm9wcy5pZFxuICAgIH0pO1xuICAgIHRoaXMuc3RhdHMuZ2V0KFNUQVRfUVVFVUVEX1JFUVVFU1RTKTtcbiAgICB0aGlzLnN0YXRzLmdldChTVEFUX0FDVElWRV9SRVFVRVNUUyk7XG4gICAgdGhpcy5zdGF0cy5nZXQoU1RBVF9DQU5DRUxMRURfUkVRVUVTVFMpO1xuICAgIHRoaXMuc3RhdHMuZ2V0KFNUQVRfUVVFVUVEX1JFUVVFU1RTX0VWRVIpO1xuICAgIHRoaXMuc3RhdHMuZ2V0KFNUQVRfQUNUSVZFX1JFUVVFU1RTX0VWRVIpO1xuICB9XG5cbiAgc2NoZWR1bGVSZXF1ZXN0KGhhbmRsZSkge1xuICAgIGxldCBnZXRQcmlvcml0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogKCkgPT4gMDtcbiAgICBpZiAoIXRoaXMucHJvcHMudGhyb3R0bGVSZXF1ZXN0cykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGRvbmU6ICgpID0+IHt9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0TWFwLmhhcyhoYW5kbGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0TWFwLmdldChoYW5kbGUpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgaGFuZGxlLFxuICAgICAgcHJpb3JpdHk6IDAsXG4gICAgICBnZXRQcmlvcml0eVxuICAgIH07XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgcmVxdWVzdC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0pO1xuICAgIHRoaXMucmVxdWVzdFF1ZXVlLnB1c2gocmVxdWVzdCk7XG4gICAgdGhpcy5yZXF1ZXN0TWFwLnNldChoYW5kbGUsIHByb21pc2UpO1xuICAgIHRoaXMuX2lzc3VlTmV3UmVxdWVzdHMoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIF9pc3N1ZVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhhbmRsZSxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gcmVxdWVzdDtcbiAgICBsZXQgaXNEb25lID0gZmFsc2U7XG4gICAgY29uc3QgZG9uZSA9ICgpID0+IHtcbiAgICAgIGlmICghaXNEb25lKSB7XG4gICAgICAgIGlzRG9uZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0TWFwLmRlbGV0ZShoYW5kbGUpO1xuICAgICAgICB0aGlzLmFjdGl2ZVJlcXVlc3RDb3VudC0tO1xuICAgICAgICB0aGlzLl9pc3N1ZU5ld1JlcXVlc3RzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuYWN0aXZlUmVxdWVzdENvdW50Kys7XG4gICAgcmV0dXJuIHJlc29sdmUgPyByZXNvbHZlKHtcbiAgICAgIGRvbmVcbiAgICB9KSA6IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICBkb25lXG4gICAgfSk7XG4gIH1cblxuICBfaXNzdWVOZXdSZXF1ZXN0cygpIHtcbiAgICBpZiAoIXRoaXMuZGVmZXJyZWRVcGRhdGUpIHtcbiAgICAgIHRoaXMuZGVmZXJyZWRVcGRhdGUgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2lzc3VlTmV3UmVxdWVzdHNBc3luYygpLCAwKTtcbiAgICB9XG4gIH1cblxuICBfaXNzdWVOZXdSZXF1ZXN0c0FzeW5jKCkge1xuICAgIHRoaXMuZGVmZXJyZWRVcGRhdGUgPSBudWxsO1xuICAgIGNvbnN0IGZyZWVTbG90cyA9IE1hdGgubWF4KHRoaXMucHJvcHMubWF4UmVxdWVzdHMgLSB0aGlzLmFjdGl2ZVJlcXVlc3RDb3VudCwgMCk7XG4gICAgaWYgKGZyZWVTbG90cyA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVBbGxSZXF1ZXN0cygpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmVlU2xvdHM7ICsraSkge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMucmVxdWVzdFF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICB0aGlzLl9pc3N1ZVJlcXVlc3QocmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICBfdXBkYXRlQWxsUmVxdWVzdHMoKSB7XG4gICAgY29uc3QgcmVxdWVzdFF1ZXVlID0gdGhpcy5yZXF1ZXN0UXVldWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXF1ZXN0UXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0UXVldWVbaV07XG4gICAgICBpZiAoIXRoaXMuX3VwZGF0ZVJlcXVlc3QocmVxdWVzdCkpIHtcbiAgICAgICAgcmVxdWVzdFF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0TWFwLmRlbGV0ZShyZXF1ZXN0LmhhbmRsZSk7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0UXVldWUuc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpO1xuICB9XG5cbiAgX3VwZGF0ZVJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJlcXVlc3QucHJpb3JpdHkgPSByZXF1ZXN0LmdldFByaW9yaXR5KHJlcXVlc3QuaGFuZGxlKTtcblxuICAgIGlmIChyZXF1ZXN0LnByaW9yaXR5IDwgMCkge1xuICAgICAgcmVxdWVzdC5yZXNvbHZlKG51bGwpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1zY2hlZHVsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///78634\n')},96040:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"h\": function() { return /* binding */ assert; }\n/* harmony export */ });\n\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'loaders.gl assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYwNDAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0Bsb2FkZXJzLmdsL3dvcmtlci11dGlscy9kaXN0L2VzbS9saWIvZW52LXV0aWxzL2Fzc2VydC5qcz82NGFhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdsb2FkZXJzLmdsIGFzc2VydGlvbiBmYWlsZWQuJyk7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///96040\n")},96013:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CO\": function() { return /* binding */ global_; },\n/* harmony export */   \"hJ\": function() { return /* binding */ isWorker; },\n/* harmony export */   \"jU\": function() { return /* binding */ isBrowser; },\n/* harmony export */   \"tq\": function() { return /* binding */ isMobile; }\n/* harmony export */ });\n/* unused harmony exports self, window, document, nodeVersion */\n\n\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g,\n  document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\n\n\nconst isBrowser =\ntypeof process !== 'object' || String(process) !== '[object process]' || process.browser;\n\nconst isWorker = typeof importScripts === 'function';\n\nconst isMobile = typeof window !== 'undefined' && typeof window.orientation !== 'undefined';\n\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n\nconst nodeVersion = matches && parseFloat(matches[1]) || 0;\n//# sourceMappingURL=globals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYwMTMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFCQUFNLG9CQUFvQixxQkFBTTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDc0Y7O0FBRS9FO0FBQ1A7O0FBRU87O0FBRUE7O0FBRVA7O0FBRU87QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGxvYWRlcnMuZ2wvd29ya2VyLXV0aWxzL2Rpc3QvZXNtL2xpYi9lbnYtdXRpbHMvZ2xvYmFscy5qcz9mODhlIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5jb25zdCBnbG9iYWxzID0ge1xuICBzZWxmOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZixcbiAgd2luZG93OiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3csXG4gIGdsb2JhbDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLFxuICBkb2N1bWVudDogdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudFxufTtcbmNvbnN0IHNlbGZfID0gZ2xvYmFscy5zZWxmIHx8IGdsb2JhbHMud2luZG93IHx8IGdsb2JhbHMuZ2xvYmFsIHx8IHt9O1xuY29uc3Qgd2luZG93XyA9IGdsb2JhbHMud2luZG93IHx8IGdsb2JhbHMuc2VsZiB8fCBnbG9iYWxzLmdsb2JhbCB8fCB7fTtcbmNvbnN0IGdsb2JhbF8gPSBnbG9iYWxzLmdsb2JhbCB8fCBnbG9iYWxzLnNlbGYgfHwgZ2xvYmFscy53aW5kb3cgfHwge307XG5jb25zdCBkb2N1bWVudF8gPSBnbG9iYWxzLmRvY3VtZW50IHx8IHt9O1xuZXhwb3J0IHsgc2VsZl8gYXMgc2VsZiwgd2luZG93XyBhcyB3aW5kb3csIGdsb2JhbF8gYXMgZ2xvYmFsLCBkb2N1bWVudF8gYXMgZG9jdW1lbnQgfTtcblxuZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9XG50eXBlb2YgcHJvY2VzcyAhPT0gJ29iamVjdCcgfHwgU3RyaW5nKHByb2Nlc3MpICE9PSAnW29iamVjdCBwcm9jZXNzXScgfHwgcHJvY2Vzcy5icm93c2VyO1xuXG5leHBvcnQgY29uc3QgaXNXb3JrZXIgPSB0eXBlb2YgaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJztcblxuZXhwb3J0IGNvbnN0IGlzTW9iaWxlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5vcmllbnRhdGlvbiAhPT0gJ3VuZGVmaW5lZCc7XG5cbmNvbnN0IG1hdGNoZXMgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9uICYmIC92KFswLTldKikvLmV4ZWMocHJvY2Vzcy52ZXJzaW9uKTtcblxuZXhwb3J0IGNvbnN0IG5vZGVWZXJzaW9uID0gbWF0Y2hlcyAmJiBwYXJzZUZsb2F0KG1hdGNoZXNbMV0pIHx8IDA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///96013\n")}}]);