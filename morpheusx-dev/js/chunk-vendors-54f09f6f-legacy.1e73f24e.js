"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[8214],{14072:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ Accessor; }\n/* harmony export */ });\n/* unused harmony export DEFAULT_ACCESSOR_VALUES */\n/* harmony import */ var _webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9335);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22525);\n/* harmony import */ var _utils_check_props__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82610);\n\n\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\nclass Accessor {\n  static getBytesPerElement(accessor) {\n    const ArrayType = (0,_webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_0__/* .getTypedArrayFromGLType */ .vN)(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_1__/* .assert */ .h)(accessor.size);\n    const ArrayType = (0,_webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_0__/* .getTypedArrayFromGLType */ .vN)(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  static resolve() {\n    for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n      accessors[_key] = arguments[_key];\n    }\n\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]);\n  }\n\n  constructor() {\n    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      accessors[_key2] = arguments[_key2];\n    }\n\n    accessors.forEach(accessor => this._assign(accessor));\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  _assign() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = (0,_utils_check_props__WEBPACK_IMPORTED_MODULE_2__/* .checkProps */ .k)('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      if (props.type === 5124 || props.type === 5125) {\n        this.integer = true;\n      }\n    }\n\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n\n}\n\n//# sourceMappingURL=accessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwNzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNsQztBQUNTO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQSxzQkFBc0IsaUdBQXVCO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLDhEQUFNO0FBQ1Ysc0JBQXNCLGlHQUF1QjtBQUM3QztBQUNBOztBQUVBO0FBQ0EsNkVBQTZFLGFBQWE7QUFDMUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0ZBQWdGLGVBQWU7QUFDL0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksdUVBQVU7O0FBRXRCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ21DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS9jbGFzc2VzL2FjY2Vzc29yLmpzPzkzZWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VHlwZWRBcnJheUZyb21HTFR5cGUgfSBmcm9tICcuLi93ZWJnbC11dGlscy90eXBlZC1hcnJheS11dGlscyc7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi91dGlscy9hc3NlcnQnO1xuaW1wb3J0IHsgY2hlY2tQcm9wcyB9IGZyb20gJy4uL3V0aWxzL2NoZWNrLXByb3BzJztcbmNvbnN0IERFRkFVTFRfQUNDRVNTT1JfVkFMVUVTID0ge1xuICBvZmZzZXQ6IDAsXG4gIHN0cmlkZTogMCxcbiAgdHlwZTogNTEyNixcbiAgc2l6ZTogMSxcbiAgZGl2aXNvcjogMCxcbiAgbm9ybWFsaXplZDogZmFsc2UsXG4gIGludGVnZXI6IGZhbHNlXG59O1xuY29uc3QgUFJPUF9DSEVDS1MgPSB7XG4gIGRlcHJlY2F0ZWRQcm9wczoge1xuICAgIGluc3RhbmNlZDogJ2Rpdmlzb3InLFxuICAgIGlzSW5zdGFuY2VkOiAnZGl2aXNvcidcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY2Vzc29yIHtcbiAgc3RhdGljIGdldEJ5dGVzUGVyRWxlbWVudChhY2Nlc3Nvcikge1xuICAgIGNvbnN0IEFycmF5VHlwZSA9IGdldFR5cGVkQXJyYXlGcm9tR0xUeXBlKGFjY2Vzc29yLnR5cGUgfHwgNTEyNik7XG4gICAgcmV0dXJuIEFycmF5VHlwZS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRCeXRlc1BlclZlcnRleChhY2Nlc3Nvcikge1xuICAgIGFzc2VydChhY2Nlc3Nvci5zaXplKTtcbiAgICBjb25zdCBBcnJheVR5cGUgPSBnZXRUeXBlZEFycmF5RnJvbUdMVHlwZShhY2Nlc3Nvci50eXBlIHx8IDUxMjYpO1xuICAgIHJldHVybiBBcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQgKiBhY2Nlc3Nvci5zaXplO1xuICB9XG5cbiAgc3RhdGljIHJlc29sdmUoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFjY2Vzc29ycyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFjY2Vzc29yc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKC4uLltERUZBVUxUX0FDQ0VTU09SX1ZBTFVFUywgLi4uYWNjZXNzb3JzXSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFjY2Vzc29ycyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYWNjZXNzb3JzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgYWNjZXNzb3JzLmZvckVhY2goYWNjZXNzb3IgPT4gdGhpcy5fYXNzaWduKGFjY2Vzc29yKSk7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgfVxuXG4gIGdldCBCWVRFU19QRVJfRUxFTUVOVCgpIHtcbiAgICByZXR1cm4gQWNjZXNzb3IuZ2V0Qnl0ZXNQZXJFbGVtZW50KHRoaXMpO1xuICB9XG5cbiAgZ2V0IEJZVEVTX1BFUl9WRVJURVgoKSB7XG4gICAgcmV0dXJuIEFjY2Vzc29yLmdldEJ5dGVzUGVyVmVydGV4KHRoaXMpO1xuICB9XG5cbiAgX2Fzc2lnbigpIHtcbiAgICBsZXQgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHByb3BzID0gY2hlY2tQcm9wcygnQWNjZXNzb3InLCBwcm9wcywgUFJPUF9DSEVDS1MpO1xuXG4gICAgaWYgKHByb3BzLnR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50eXBlID0gcHJvcHMudHlwZTtcblxuICAgICAgaWYgKHByb3BzLnR5cGUgPT09IDUxMjQgfHwgcHJvcHMudHlwZSA9PT0gNTEyNSkge1xuICAgICAgICB0aGlzLmludGVnZXIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IHByb3BzLnNpemU7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9mZnNldCA9IHByb3BzLm9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuc3RyaWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc3RyaWRlID0gcHJvcHMuc3RyaWRlO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5ub3JtYWxpemVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubm9ybWFsaXplZCA9IHByb3BzLm5vcm1hbGl6ZWQ7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmludGVnZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pbnRlZ2VyID0gcHJvcHMuaW50ZWdlcjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZGl2aXNvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmRpdmlzb3IgPSBwcm9wcy5kaXZpc29yO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5idWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5idWZmZXIgPSBwcm9wcy5idWZmZXI7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuaW5kZXggPT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLmluZGV4ID0gcHJvcHMuaW5kZXggPyAxIDogMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBwcm9wcy5pbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvcHMuaW5zdGFuY2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZGl2aXNvciA9IHByb3BzLmluc3RhbmNlZCA/IDEgOiAwO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5pc0luc3RhbmNlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmRpdmlzb3IgPSBwcm9wcy5pc0luc3RhbmNlZCA/IDEgOiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cbmV4cG9ydCB7IERFRkFVTFRfQUNDRVNTT1JfVkFMVUVTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14072\n")},53478:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ Buffer; }\n/* harmony export */ });\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87577);\n/* harmony import */ var _accessor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14072);\n/* harmony import */ var _webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9335);\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22525);\n/* harmony import */ var _utils_check_props__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82610);\n\n\n\n\n\n\nconst DEBUG_DATA_LENGTH = 10;\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  deprecatedProps: DEPRECATED_PROPS\n};\nconst PROP_CHECKS_SET_PROPS = {\n  removedProps: DEPRECATED_PROPS\n};\nclass Buffer extends _resource__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z {\n  get [Symbol.toStringTag]() {\n    return 'Buffer';\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, props);\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    this.target = props.target || (this.gl.webgl2 ? 36662 : 34962);\n    this.initialize(props);\n    Object.seal(this);\n  }\n\n  getElementCount() {\n    let accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n    return Math.round(this.byteLength / _accessor__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"].getBytesPerElement */ .Z.getBytesPerElement(accessor));\n  }\n\n  getVertexCount() {\n    let accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n    return Math.round(this.byteLength / _accessor__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"].getBytesPerVertex */ .Z.getBytesPerVertex(accessor));\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (ArrayBuffer.isView(props)) {\n      props = {\n        data: props\n      };\n    }\n\n    if (Number.isFinite(props)) {\n      props = {\n        byteLength: props\n      };\n    }\n\n    props = (0,_utils_check_props__WEBPACK_IMPORTED_MODULE_3__/* .checkProps */ .k)('Buffer', props, PROP_CHECKS_INITIALIZE);\n    this.usage = props.usage || 35044;\n    this.debugData = null;\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = (0,_utils_check_props__WEBPACK_IMPORTED_MODULE_3__/* .checkProps */ .k)('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  setAccessor(accessor) {\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n    this.accessor = new _accessor__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(accessor);\n    return this;\n  }\n\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n\n      return true;\n    }\n\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  subData(props) {\n    if (ArrayBuffer.isView(props)) {\n      props = {\n        data: props\n      };\n    }\n\n    const {\n      data,\n      offset = 0,\n      srcOffset = 0\n    } = props;\n    const byteLength = props.byteLength || props.length;\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(data);\n    const target = this.gl.webgl2 ? 36663 : this.target;\n    this.gl.bindBuffer(target, this.handle);\n\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n\n    this.gl.bindBuffer(target, null);\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  copyData(_ref) {\n    let {\n      sourceBuffer,\n      readOffset = 0,\n      writeOffset = 0,\n      size\n    } = _ref;\n    const {\n      gl\n    } = this;\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(gl);\n    gl.bindBuffer(36662, sourceBuffer.handle);\n    gl.bindBuffer(36663, this.handle);\n    gl.copyBufferSubData(36662, 36663, readOffset, writeOffset, size);\n    gl.bindBuffer(36662, null);\n    gl.bindBuffer(36663, null);\n    this.debugData = null;\n    return this;\n  }\n\n  getData() {\n    let {\n      dstData = null,\n      srcByteOffset = 0,\n      dstOffset = 0,\n      length = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n    const ArrayType = (0,_webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_5__/* .getTypedArrayFromGLType */ .vN)(this.accessor.type || 5126, {\n      clamped: false\n    });\n\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n    let dstAvailableElementCount;\n    let dstElementCount;\n\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n    this.gl.bindBuffer(36662, this.handle);\n    this.gl.getBufferSubData(36662, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(36662, null);\n    return dstData;\n  }\n\n  bind() {\n    let {\n      target = this.target,\n      index = this.accessor && this.accessor.index,\n      offset = 0,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (target === 35345 || target === 35982) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(offset === 0);\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind() {\n    let {\n      target = this.target,\n      index = this.accessor && this.accessor.index\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const isIndexedBuffer = target === 35345 || target === 35982;\n\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n\n    return this;\n  }\n\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({\n        length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)\n      });\n      return {\n        data: this.debugData,\n        changed: true\n      };\n    }\n\n    return {\n      data: this.debugData,\n      changed: false\n    };\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  _setData(data) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let byteLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.byteLength + offset;\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    const type = (0,_webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_5__/* .getGLTypeFromTypedArray */ .O)(data);\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(type);\n    this.setAccessor(new _accessor__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(this.accessor, {\n      type\n    }));\n    return this;\n  }\n\n  _setByteLength(byteLength) {\n    let usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    let data = byteLength;\n\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  _getTarget() {\n    return this.gl.webgl2 ? 36663 : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = (0,_webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_5__/* .getTypedArrayFromGLType */ .vN)(this.accessor.type || 5126, {\n      clamped: false\n    });\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new _accessor__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(this.accessor, {\n        type: (0,_webgl_utils_typed_array_utils__WEBPACK_IMPORTED_MODULE_5__/* .getGLTypeFromTypedArray */ .O)(data)\n      }));\n    }\n  }\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  get type() {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  setByteLength(byteLength) {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  updateAccessor(opts) {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new _accessor__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(this.accessor, opts);\n    return this;\n  }\n\n}\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM0NzguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQ0E7QUFDa0U7QUFDeEM7QUFDbkI7QUFDUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxxQkFBcUIsMERBQVE7QUFDNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxnR0FBMkI7QUFDbkU7O0FBRUE7QUFDQTtBQUNBLHdDQUF3Qyw4RkFBMEI7QUFDbEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSx1RUFBVTtBQUN0QjtBQUNBO0FBQ0EscUNBQXFDOztBQUVyQztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVksdUVBQVU7O0FBRXRCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0Esd0JBQXdCLDBEQUFRO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxJQUFJLDhEQUFNO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBLE1BQU0sK0VBQW1CO0FBQ3pCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUksK0VBQW1CO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUksK0VBQW1CO0FBQ3ZCLHNCQUFzQixpR0FBdUI7QUFDN0M7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDhEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLFFBQVEsOERBQU07QUFDZDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUksOERBQU07O0FBRVY7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlCQUFpQixnR0FBdUI7QUFDeEMsSUFBSSw4REFBTTtBQUNWLHlCQUF5QiwwREFBUTtBQUNqQztBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDhEQUFNOztBQUVWOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsaUdBQXVCO0FBQzdDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLDBEQUFRO0FBQ25DLGNBQWMsZ0dBQXVCO0FBQ3JDLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxpRkFBYztBQUNsQjtBQUNBOztBQUVBO0FBQ0EsSUFBSSxpRkFBYztBQUNsQjtBQUNBOztBQUVBO0FBQ0EsSUFBSSxpRkFBYztBQUNsQjtBQUNBOztBQUVBO0FBQ0EsSUFBSSxpRkFBYztBQUNsQix3QkFBd0IsMERBQVE7QUFDaEM7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS9jbGFzc2VzL2J1ZmZlci5qcz82MzA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXNvdXJjZSBmcm9tICcuL3Jlc291cmNlJztcbmltcG9ydCBBY2Nlc3NvciBmcm9tICcuL2FjY2Vzc29yJztcbmltcG9ydCB7IGdldEdMVHlwZUZyb21UeXBlZEFycmF5LCBnZXRUeXBlZEFycmF5RnJvbUdMVHlwZSB9IGZyb20gJy4uL3dlYmdsLXV0aWxzL3R5cGVkLWFycmF5LXV0aWxzJztcbmltcG9ydCB7IGFzc2VydFdlYkdMMkNvbnRleHQsIGxvZyB9IGZyb20gJ0BsdW1hLmdsL2dsdG9vbHMnO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbHMvYXNzZXJ0JztcbmltcG9ydCB7IGNoZWNrUHJvcHMgfSBmcm9tICcuLi91dGlscy9jaGVjay1wcm9wcyc7XG5jb25zdCBERUJVR19EQVRBX0xFTkdUSCA9IDEwO1xuY29uc3QgREVQUkVDQVRFRF9QUk9QUyA9IHtcbiAgb2Zmc2V0OiAnYWNjZXNzb3Iub2Zmc2V0JyxcbiAgc3RyaWRlOiAnYWNjZXNzb3Iuc3RyaWRlJyxcbiAgdHlwZTogJ2FjY2Vzc29yLnR5cGUnLFxuICBzaXplOiAnYWNjZXNzb3Iuc2l6ZScsXG4gIGRpdmlzb3I6ICdhY2Nlc3Nvci5kaXZpc29yJyxcbiAgbm9ybWFsaXplZDogJ2FjY2Vzc29yLm5vcm1hbGl6ZWQnLFxuICBpbnRlZ2VyOiAnYWNjZXNzb3IuaW50ZWdlcicsXG4gIGluc3RhbmNlZDogJ2FjY2Vzc29yLmRpdmlzb3InLFxuICBpc0luc3RhbmNlZDogJ2FjY2Vzc29yLmRpdmlzb3InXG59O1xuY29uc3QgUFJPUF9DSEVDS1NfSU5JVElBTElaRSA9IHtcbiAgcmVtb3ZlZFByb3BzOiB7fSxcbiAgcmVwbGFjZWRQcm9wczoge1xuICAgIGJ5dGVzOiAnYnl0ZUxlbmd0aCdcbiAgfSxcbiAgZGVwcmVjYXRlZFByb3BzOiBERVBSRUNBVEVEX1BST1BTXG59O1xuY29uc3QgUFJPUF9DSEVDS1NfU0VUX1BST1BTID0ge1xuICByZW1vdmVkUHJvcHM6IERFUFJFQ0FURURfUFJPUFNcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWZmZXIgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0J1ZmZlcic7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihnbCkge1xuICAgIGxldCBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgc3VwZXIoZ2wsIHByb3BzKTtcbiAgICB0aGlzLnN0dWJSZW1vdmVkTWV0aG9kcygnQnVmZmVyJywgJ3Y2LjAnLCBbJ2xheW91dCcsICdzZXRMYXlvdXQnLCAnZ2V0SW5kZXhlZFBhcmFtZXRlciddKTtcbiAgICB0aGlzLnRhcmdldCA9IHByb3BzLnRhcmdldCB8fCAodGhpcy5nbC53ZWJnbDIgPyAzNjY2MiA6IDM0OTYyKTtcbiAgICB0aGlzLmluaXRpYWxpemUocHJvcHMpO1xuICAgIE9iamVjdC5zZWFsKHRoaXMpO1xuICB9XG5cbiAgZ2V0RWxlbWVudENvdW50KCkge1xuICAgIGxldCBhY2Nlc3NvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5hY2Nlc3NvcjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmJ5dGVMZW5ndGggLyBBY2Nlc3Nvci5nZXRCeXRlc1BlckVsZW1lbnQoYWNjZXNzb3IpKTtcbiAgfVxuXG4gIGdldFZlcnRleENvdW50KCkge1xuICAgIGxldCBhY2Nlc3NvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5hY2Nlc3NvcjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmJ5dGVMZW5ndGggLyBBY2Nlc3Nvci5nZXRCeXRlc1BlclZlcnRleChhY2Nlc3NvcikpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBsZXQgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhwcm9wcykpIHtcbiAgICAgIHByb3BzID0ge1xuICAgICAgICBkYXRhOiBwcm9wc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHByb3BzKSkge1xuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIGJ5dGVMZW5ndGg6IHByb3BzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzID0gY2hlY2tQcm9wcygnQnVmZmVyJywgcHJvcHMsIFBST1BfQ0hFQ0tTX0lOSVRJQUxJWkUpO1xuICAgIHRoaXMudXNhZ2UgPSBwcm9wcy51c2FnZSB8fCAzNTA0NDtcbiAgICB0aGlzLmRlYnVnRGF0YSA9IG51bGw7XG4gICAgdGhpcy5zZXRBY2Nlc3NvcihPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgcHJvcHMuYWNjZXNzb3IpKTtcblxuICAgIGlmIChwcm9wcy5kYXRhKSB7XG4gICAgICB0aGlzLl9zZXREYXRhKHByb3BzLmRhdGEsIHByb3BzLm9mZnNldCwgcHJvcHMuYnl0ZUxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NldEJ5dGVMZW5ndGgocHJvcHMuYnl0ZUxlbmd0aCB8fCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNldFByb3BzKHByb3BzKSB7XG4gICAgcHJvcHMgPSBjaGVja1Byb3BzKCdCdWZmZXInLCBwcm9wcywgUFJPUF9DSEVDS1NfU0VUX1BST1BTKTtcblxuICAgIGlmICgnYWNjZXNzb3InIGluIHByb3BzKSB7XG4gICAgICB0aGlzLnNldEFjY2Vzc29yKHByb3BzLmFjY2Vzc29yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNldEFjY2Vzc29yKGFjY2Vzc29yKSB7XG4gICAgYWNjZXNzb3IgPSBPYmplY3QuYXNzaWduKHt9LCBhY2Nlc3Nvcik7XG4gICAgZGVsZXRlIGFjY2Vzc29yLmJ1ZmZlcjtcbiAgICB0aGlzLmFjY2Vzc29yID0gbmV3IEFjY2Vzc29yKGFjY2Vzc29yKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlYWxsb2NhdGUoYnl0ZUxlbmd0aCkge1xuICAgIGlmIChieXRlTGVuZ3RoID4gdGhpcy5ieXRlTGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zZXRCeXRlTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmJ5dGVzVXNlZCA9IGJ5dGVMZW5ndGg7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2V0RGF0YShwcm9wcykge1xuICAgIHJldHVybiB0aGlzLmluaXRpYWxpemUocHJvcHMpO1xuICB9XG5cbiAgc3ViRGF0YShwcm9wcykge1xuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcocHJvcHMpKSB7XG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgZGF0YTogcHJvcHNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIG9mZnNldCA9IDAsXG4gICAgICBzcmNPZmZzZXQgPSAwXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IGJ5dGVMZW5ndGggPSBwcm9wcy5ieXRlTGVuZ3RoIHx8IHByb3BzLmxlbmd0aDtcbiAgICBhc3NlcnQoZGF0YSk7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5nbC53ZWJnbDIgPyAzNjY2MyA6IHRoaXMudGFyZ2V0O1xuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0YXJnZXQsIHRoaXMuaGFuZGxlKTtcblxuICAgIGlmIChzcmNPZmZzZXQgIT09IDAgfHwgYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhc3NlcnRXZWJHTDJDb250ZXh0KHRoaXMuZ2wpO1xuICAgICAgdGhpcy5nbC5idWZmZXJTdWJEYXRhKHRoaXMudGFyZ2V0LCBvZmZzZXQsIGRhdGEsIHNyY09mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyU3ViRGF0YSh0YXJnZXQsIG9mZnNldCwgZGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRhcmdldCwgbnVsbCk7XG4gICAgdGhpcy5kZWJ1Z0RhdGEgPSBudWxsO1xuXG4gICAgdGhpcy5faW5mZXJUeXBlKGRhdGEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb3B5RGF0YShfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNvdXJjZUJ1ZmZlcixcbiAgICAgIHJlYWRPZmZzZXQgPSAwLFxuICAgICAgd3JpdGVPZmZzZXQgPSAwLFxuICAgICAgc2l6ZVxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGdsXG4gICAgfSA9IHRoaXM7XG4gICAgYXNzZXJ0V2ViR0wyQ29udGV4dChnbCk7XG4gICAgZ2wuYmluZEJ1ZmZlcigzNjY2Miwgc291cmNlQnVmZmVyLmhhbmRsZSk7XG4gICAgZ2wuYmluZEJ1ZmZlcigzNjY2MywgdGhpcy5oYW5kbGUpO1xuICAgIGdsLmNvcHlCdWZmZXJTdWJEYXRhKDM2NjYyLCAzNjY2MywgcmVhZE9mZnNldCwgd3JpdGVPZmZzZXQsIHNpemUpO1xuICAgIGdsLmJpbmRCdWZmZXIoMzY2NjIsIG51bGwpO1xuICAgIGdsLmJpbmRCdWZmZXIoMzY2NjMsIG51bGwpO1xuICAgIHRoaXMuZGVidWdEYXRhID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldERhdGEoKSB7XG4gICAgbGV0IHtcbiAgICAgIGRzdERhdGEgPSBudWxsLFxuICAgICAgc3JjQnl0ZU9mZnNldCA9IDAsXG4gICAgICBkc3RPZmZzZXQgPSAwLFxuICAgICAgbGVuZ3RoID0gMFxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGFzc2VydFdlYkdMMkNvbnRleHQodGhpcy5nbCk7XG4gICAgY29uc3QgQXJyYXlUeXBlID0gZ2V0VHlwZWRBcnJheUZyb21HTFR5cGUodGhpcy5hY2Nlc3Nvci50eXBlIHx8IDUxMjYsIHtcbiAgICAgIGNsYW1wZWQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBjb25zdCBzb3VyY2VBdmFpbGFibGVFbGVtZW50Q291bnQgPSB0aGlzLl9nZXRBdmFpbGFibGVFbGVtZW50Q291bnQoc3JjQnl0ZU9mZnNldCk7XG5cbiAgICBjb25zdCBkc3RFbGVtZW50T2Zmc2V0ID0gZHN0T2Zmc2V0O1xuICAgIGxldCBkc3RBdmFpbGFibGVFbGVtZW50Q291bnQ7XG4gICAgbGV0IGRzdEVsZW1lbnRDb3VudDtcblxuICAgIGlmIChkc3REYXRhKSB7XG4gICAgICBkc3RFbGVtZW50Q291bnQgPSBkc3REYXRhLmxlbmd0aDtcbiAgICAgIGRzdEF2YWlsYWJsZUVsZW1lbnRDb3VudCA9IGRzdEVsZW1lbnRDb3VudCAtIGRzdEVsZW1lbnRPZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdEF2YWlsYWJsZUVsZW1lbnRDb3VudCA9IE1hdGgubWluKHNvdXJjZUF2YWlsYWJsZUVsZW1lbnRDb3VudCwgbGVuZ3RoIHx8IHNvdXJjZUF2YWlsYWJsZUVsZW1lbnRDb3VudCk7XG4gICAgICBkc3RFbGVtZW50Q291bnQgPSBkc3RFbGVtZW50T2Zmc2V0ICsgZHN0QXZhaWxhYmxlRWxlbWVudENvdW50O1xuICAgIH1cblxuICAgIGNvbnN0IGNvcHlFbGVtZW50Q291bnQgPSBNYXRoLm1pbihzb3VyY2VBdmFpbGFibGVFbGVtZW50Q291bnQsIGRzdEF2YWlsYWJsZUVsZW1lbnRDb3VudCk7XG4gICAgbGVuZ3RoID0gbGVuZ3RoIHx8IGNvcHlFbGVtZW50Q291bnQ7XG4gICAgYXNzZXJ0KGxlbmd0aCA8PSBjb3B5RWxlbWVudENvdW50KTtcbiAgICBkc3REYXRhID0gZHN0RGF0YSB8fCBuZXcgQXJyYXlUeXBlKGRzdEVsZW1lbnRDb3VudCk7XG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKDM2NjYyLCB0aGlzLmhhbmRsZSk7XG4gICAgdGhpcy5nbC5nZXRCdWZmZXJTdWJEYXRhKDM2NjYyLCBzcmNCeXRlT2Zmc2V0LCBkc3REYXRhLCBkc3RPZmZzZXQsIGxlbmd0aCk7XG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKDM2NjYyLCBudWxsKTtcbiAgICByZXR1cm4gZHN0RGF0YTtcbiAgfVxuXG4gIGJpbmQoKSB7XG4gICAgbGV0IHtcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgaW5kZXggPSB0aGlzLmFjY2Vzc29yICYmIHRoaXMuYWNjZXNzb3IuaW5kZXgsXG4gICAgICBvZmZzZXQgPSAwLFxuICAgICAgc2l6ZVxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgaWYgKHRhcmdldCA9PT0gMzUzNDUgfHwgdGFyZ2V0ID09PSAzNTk4Mikge1xuICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXJSYW5nZSh0YXJnZXQsIGluZGV4LCB0aGlzLmhhbmRsZSwgb2Zmc2V0LCBzaXplKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2VydChvZmZzZXQgPT09IDApO1xuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXJCYXNlKHRhcmdldCwgaW5kZXgsIHRoaXMuaGFuZGxlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRhcmdldCwgdGhpcy5oYW5kbGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGxldCB7XG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIGluZGV4ID0gdGhpcy5hY2Nlc3NvciAmJiB0aGlzLmFjY2Vzc29yLmluZGV4XG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgY29uc3QgaXNJbmRleGVkQnVmZmVyID0gdGFyZ2V0ID09PSAzNTM0NSB8fCB0YXJnZXQgPT09IDM1OTgyO1xuXG4gICAgaWYgKGlzSW5kZXhlZEJ1ZmZlcikge1xuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyQmFzZSh0YXJnZXQsIGluZGV4LCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRhcmdldCwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXREZWJ1Z0RhdGEoKSB7XG4gICAgaWYgKCF0aGlzLmRlYnVnRGF0YSkge1xuICAgICAgdGhpcy5kZWJ1Z0RhdGEgPSB0aGlzLmdldERhdGEoe1xuICAgICAgICBsZW5ndGg6IE1hdGgubWluKERFQlVHX0RBVEFfTEVOR1RILCB0aGlzLmJ5dGVMZW5ndGgpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IHRoaXMuZGVidWdEYXRhLFxuICAgICAgICBjaGFuZ2VkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiB0aGlzLmRlYnVnRGF0YSxcbiAgICAgIGNoYW5nZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGludmFsaWRhdGVEZWJ1Z0RhdGEoKSB7XG4gICAgdGhpcy5kZWJ1Z0RhdGEgPSBudWxsO1xuICB9XG5cbiAgX3NldERhdGEoZGF0YSkge1xuICAgIGxldCBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgbGV0IGJ5dGVMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRhdGEuYnl0ZUxlbmd0aCArIG9mZnNldDtcbiAgICBhc3NlcnQoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKTtcblxuICAgIHRoaXMuX3RyYWNrRGVhbGxvY2F0ZWRNZW1vcnkoKTtcblxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX2dldFRhcmdldCgpO1xuXG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRhcmdldCwgdGhpcy5oYW5kbGUpO1xuICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0YXJnZXQsIGJ5dGVMZW5ndGgsIHRoaXMudXNhZ2UpO1xuICAgIHRoaXMuZ2wuYnVmZmVyU3ViRGF0YSh0YXJnZXQsIG9mZnNldCwgZGF0YSk7XG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRhcmdldCwgbnVsbCk7XG4gICAgdGhpcy5kZWJ1Z0RhdGEgPSBkYXRhLnNsaWNlKDAsIERFQlVHX0RBVEFfTEVOR1RIKTtcbiAgICB0aGlzLmJ5dGVzVXNlZCA9IGJ5dGVMZW5ndGg7XG5cbiAgICB0aGlzLl90cmFja0FsbG9jYXRlZE1lbW9yeShieXRlTGVuZ3RoKTtcblxuICAgIGNvbnN0IHR5cGUgPSBnZXRHTFR5cGVGcm9tVHlwZWRBcnJheShkYXRhKTtcbiAgICBhc3NlcnQodHlwZSk7XG4gICAgdGhpcy5zZXRBY2Nlc3NvcihuZXcgQWNjZXNzb3IodGhpcy5hY2Nlc3Nvciwge1xuICAgICAgdHlwZVxuICAgIH0pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIF9zZXRCeXRlTGVuZ3RoKGJ5dGVMZW5ndGgpIHtcbiAgICBsZXQgdXNhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudXNhZ2U7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPj0gMCk7XG5cbiAgICB0aGlzLl90cmFja0RlYWxsb2NhdGVkTWVtb3J5KCk7XG5cbiAgICBsZXQgZGF0YSA9IGJ5dGVMZW5ndGg7XG5cbiAgICBpZiAoYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMCk7XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5fZ2V0VGFyZ2V0KCk7XG5cbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGFyZ2V0LCB0aGlzLmhhbmRsZSk7XG4gICAgdGhpcy5nbC5idWZmZXJEYXRhKHRhcmdldCwgZGF0YSwgdXNhZ2UpO1xuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0YXJnZXQsIG51bGwpO1xuICAgIHRoaXMudXNhZ2UgPSB1c2FnZTtcbiAgICB0aGlzLmRlYnVnRGF0YSA9IG51bGw7XG4gICAgdGhpcy5ieXRlc1VzZWQgPSBieXRlTGVuZ3RoO1xuXG4gICAgdGhpcy5fdHJhY2tBbGxvY2F0ZWRNZW1vcnkoYnl0ZUxlbmd0aCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIF9nZXRUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2wud2ViZ2wyID8gMzY2NjMgOiB0aGlzLnRhcmdldDtcbiAgfVxuXG4gIF9nZXRBdmFpbGFibGVFbGVtZW50Q291bnQoc3JjQnl0ZU9mZnNldCkge1xuICAgIGNvbnN0IEFycmF5VHlwZSA9IGdldFR5cGVkQXJyYXlGcm9tR0xUeXBlKHRoaXMuYWNjZXNzb3IudHlwZSB8fCA1MTI2LCB7XG4gICAgICBjbGFtcGVkOiBmYWxzZVxuICAgIH0pO1xuICAgIGNvbnN0IHNvdXJjZUVsZW1lbnRPZmZzZXQgPSBzcmNCeXRlT2Zmc2V0IC8gQXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRDb3VudCgpIC0gc291cmNlRWxlbWVudE9mZnNldDtcbiAgfVxuXG4gIF9pbmZlclR5cGUoZGF0YSkge1xuICAgIGlmICghdGhpcy5hY2Nlc3Nvci50eXBlKSB7XG4gICAgICB0aGlzLnNldEFjY2Vzc29yKG5ldyBBY2Nlc3Nvcih0aGlzLmFjY2Vzc29yLCB7XG4gICAgICAgIHR5cGU6IGdldEdMVHlwZUZyb21UeXBlZEFycmF5KGRhdGEpXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZUhhbmRsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgfVxuXG4gIF9kZWxldGVIYW5kbGUoKSB7XG4gICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5oYW5kbGUpO1xuXG4gICAgdGhpcy5fdHJhY2tEZWFsbG9jYXRlZE1lbW9yeSgpO1xuICB9XG5cbiAgX2dldFBhcmFtZXRlcihwbmFtZSkge1xuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLnRhcmdldCwgdGhpcy5oYW5kbGUpO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nbC5nZXRCdWZmZXJQYXJhbWV0ZXIodGhpcy50YXJnZXQsIHBuYW1lKTtcbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy50YXJnZXQsIG51bGwpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIGxvZy5kZXByZWNhdGVkKCdCdWZmZXIudHlwZScsICdCdWZmZXIuYWNjZXNzb3IudHlwZScpKCk7XG4gICAgcmV0dXJuIHRoaXMuYWNjZXNzb3IudHlwZTtcbiAgfVxuXG4gIGdldCBieXRlcygpIHtcbiAgICBsb2cuZGVwcmVjYXRlZCgnQnVmZmVyLmJ5dGVzJywgJ0J1ZmZlci5ieXRlTGVuZ3RoJykoKTtcbiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgc2V0Qnl0ZUxlbmd0aChieXRlTGVuZ3RoKSB7XG4gICAgbG9nLmRlcHJlY2F0ZWQoJ3NldEJ5dGVMZW5ndGgnLCAncmVhbGxvY2F0ZScpKCk7XG4gICAgcmV0dXJuIHRoaXMucmVhbGxvY2F0ZShieXRlTGVuZ3RoKTtcbiAgfVxuXG4gIHVwZGF0ZUFjY2Vzc29yKG9wdHMpIHtcbiAgICBsb2cuZGVwcmVjYXRlZCgndXBkYXRlQWNjZXNzb3IoLi4uKScsICdzZXRBY2Nlc3NvcihuZXcgQWNjZXNzb3IoYnVmZmVyLmFjY2Vzc29yLCAuLi4pJykoKTtcbiAgICB0aGlzLmFjY2Vzc29yID0gbmV3IEFjY2Vzc29yKHRoaXMuYWNjZXNzb3IsIG9wdHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53478\n")},26047:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "$": function() { return /* binding */ clearBuffer; },\n/* harmony export */   "Z": function() { return /* binding */ clear; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22525);\n\n\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\nconst ERR_ARGUMENTS = \'clear: bad arguments\';\nfunction clear(gl) {\n  let {\n    framebuffer = null,\n    color = null,\n    depth = null,\n    stencil = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_1__/* .assert */ .h)(clearFlags !== 0, ERR_ARGUMENTS);\n  (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .withParameters */ .s8)(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\nfunction clearBuffer(gl) {\n  let {\n    framebuffer = null,\n    buffer = GL_COLOR,\n    drawBuffer = 0,\n    value = [0, 0, 0, 0]\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(gl);\n  (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .withParameters */ .s8)(gl, {\n    framebuffer\n  }, () => {\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        (0,_utils_assert__WEBPACK_IMPORTED_MODULE_1__/* .assert */ .h)(false, ERR_ARGUMENTS);\n    }\n  });\n}\n//# sourceMappingURL=clear.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYwNDcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVFO0FBQzlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsOERBQU07QUFDUixFQUFFLDBFQUFjO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUUsK0VBQW1CO0FBQ3JCLEVBQUUsMEVBQWM7QUFDaEI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSw4REFBTTtBQUNkO0FBQ0EsR0FBRztBQUNIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3dlYmdsL2Rpc3QvZXNtL2NsYXNzZXMvY2xlYXIuanM/Y2ZjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRXZWJHTDJDb250ZXh0LCB3aXRoUGFyYW1ldGVycyB9IGZyb20gJ0BsdW1hLmdsL2dsdG9vbHMnO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbHMvYXNzZXJ0JztcbmNvbnN0IEdMX0RFUFRIX0JVRkZFUl9CSVQgPSAweDAwMDAwMTAwO1xuY29uc3QgR0xfU1RFTkNJTF9CVUZGRVJfQklUID0gMHgwMDAwMDQwMDtcbmNvbnN0IEdMX0NPTE9SX0JVRkZFUl9CSVQgPSAweDAwMDA0MDAwO1xuY29uc3QgR0xfQ09MT1IgPSAweDE4MDA7XG5jb25zdCBHTF9ERVBUSCA9IDB4MTgwMTtcbmNvbnN0IEdMX1NURU5DSUwgPSAweDE4MDI7XG5jb25zdCBHTF9ERVBUSF9TVEVOQ0lMID0gMHg4NGY5O1xuY29uc3QgRVJSX0FSR1VNRU5UUyA9ICdjbGVhcjogYmFkIGFyZ3VtZW50cyc7XG5leHBvcnQgZnVuY3Rpb24gY2xlYXIoZ2wpIHtcbiAgbGV0IHtcbiAgICBmcmFtZWJ1ZmZlciA9IG51bGwsXG4gICAgY29sb3IgPSBudWxsLFxuICAgIGRlcHRoID0gbnVsbCxcbiAgICBzdGVuY2lsID0gbnVsbFxuICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgY29uc3QgcGFyYW1ldGVycyA9IHt9O1xuXG4gIGlmIChmcmFtZWJ1ZmZlcikge1xuICAgIHBhcmFtZXRlcnMuZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlcjtcbiAgfVxuXG4gIGxldCBjbGVhckZsYWdzID0gMDtcblxuICBpZiAoY29sb3IpIHtcbiAgICBjbGVhckZsYWdzIHw9IEdMX0NPTE9SX0JVRkZFUl9CSVQ7XG5cbiAgICBpZiAoY29sb3IgIT09IHRydWUpIHtcbiAgICAgIHBhcmFtZXRlcnMuY2xlYXJDb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZXB0aCkge1xuICAgIGNsZWFyRmxhZ3MgfD0gR0xfREVQVEhfQlVGRkVSX0JJVDtcblxuICAgIGlmIChkZXB0aCAhPT0gdHJ1ZSkge1xuICAgICAgcGFyYW1ldGVycy5jbGVhckRlcHRoID0gZGVwdGg7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0ZW5jaWwpIHtcbiAgICBjbGVhckZsYWdzIHw9IEdMX1NURU5DSUxfQlVGRkVSX0JJVDtcblxuICAgIGlmIChkZXB0aCAhPT0gdHJ1ZSkge1xuICAgICAgcGFyYW1ldGVycy5jbGVhclN0ZW5jaWwgPSBkZXB0aDtcbiAgICB9XG4gIH1cblxuICBhc3NlcnQoY2xlYXJGbGFncyAhPT0gMCwgRVJSX0FSR1VNRU5UUyk7XG4gIHdpdGhQYXJhbWV0ZXJzKGdsLCBwYXJhbWV0ZXJzLCAoKSA9PiB7XG4gICAgZ2wuY2xlYXIoY2xlYXJGbGFncyk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQnVmZmVyKGdsKSB7XG4gIGxldCB7XG4gICAgZnJhbWVidWZmZXIgPSBudWxsLFxuICAgIGJ1ZmZlciA9IEdMX0NPTE9SLFxuICAgIGRyYXdCdWZmZXIgPSAwLFxuICAgIHZhbHVlID0gWzAsIDAsIDAsIDBdXG4gIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBhc3NlcnRXZWJHTDJDb250ZXh0KGdsKTtcbiAgd2l0aFBhcmFtZXRlcnMoZ2wsIHtcbiAgICBmcmFtZWJ1ZmZlclxuICB9LCAoKSA9PiB7XG4gICAgc3dpdGNoIChidWZmZXIpIHtcbiAgICAgIGNhc2UgR0xfQ09MT1I6XG4gICAgICAgIHN3aXRjaCAodmFsdWUuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIEludDMyQXJyYXk6XG4gICAgICAgICAgICBnbC5jbGVhckJ1ZmZlcml2KGJ1ZmZlciwgZHJhd0J1ZmZlciwgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFVpbnQzMkFycmF5OlxuICAgICAgICAgICAgZ2wuY2xlYXJCdWZmZXJ1aXYoYnVmZmVyLCBkcmF3QnVmZmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgRmxvYXQzMkFycmF5OlxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBnbC5jbGVhckJ1ZmZlcmZ2KGJ1ZmZlciwgZHJhd0J1ZmZlciwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgR0xfREVQVEg6XG4gICAgICAgIGdsLmNsZWFyQnVmZmVyZnYoR0xfREVQVEgsIDAsIFt2YWx1ZV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBHTF9TVEVOQ0lMOlxuICAgICAgICBnbC5jbGVhckJ1ZmZlcml2KEdMX1NURU5DSUwsIDAsIFt2YWx1ZV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBHTF9ERVBUSF9TVEVOQ0lMOlxuICAgICAgICBjb25zdCBbZGVwdGgsIHN0ZW5jaWxdID0gdmFsdWU7XG4gICAgICAgIGdsLmNsZWFyQnVmZmVyZmkoR0xfREVQVEhfU1RFTkNJTCwgMCwgZGVwdGgsIHN0ZW5jaWwpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBFUlJfQVJHVU1FTlRTKTtcbiAgICB9XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xlYXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26047\n')},81913:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Km\": function() { return /* binding */ copyToDataUrl; },\n  \"Lv\": function() { return /* binding */ copyToTexture; },\n  \"z6\": function() { return /* binding */ readPixelsToArray; }\n});\n\n// UNUSED EXPORTS: blit, copyToImage, readPixelsToBuffer\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/framebuffer.js\nvar framebuffer = __webpack_require__(53849);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture.js\nvar classes_texture = __webpack_require__(35008);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/typed-array-utils.js\nvar typed_array_utils = __webpack_require__(9335);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar utils_assert = __webpack_require__(22525);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/format-utils.js\n\nfunction format_utils_glFormatToComponents(format) {\n  switch (format) {\n    case 6406:\n    case 33326:\n    case 6403:\n      return 1;\n\n    case 33328:\n    case 33319:\n      return 2;\n\n    case 6407:\n    case 34837:\n      return 3;\n\n    case 6408:\n    case 34836:\n      return 4;\n\n    default:\n      (0,utils_assert/* assert */.h)(false);\n      return 0;\n  }\n}\nfunction format_utils_glTypeToBytes(type) {\n  switch (type) {\n    case 5121:\n      return 1;\n\n    case 33635:\n    case 32819:\n    case 32820:\n      return 2;\n\n    case 5126:\n      return 4;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\n//# sourceMappingURL=format-utils.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/texture-utils.js + 2 modules\nvar texture_utils = __webpack_require__(73462);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/copy-and-blit.js\n\n\n\n\n\n\n\n\n\nfunction readPixelsToArray(source) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = 6408\n  } = options;\n  let {\n    sourceAttachment = 36064,\n    target = null,\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = options;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  (0,utils_assert/* assert */.h)(framebuffer);\n  const {\n    gl,\n    handle,\n    attachments\n  } = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  if (sourceAttachment === 36064 && handle === null) {\n    sourceAttachment = 1028;\n  }\n\n  (0,utils_assert/* assert */.h)(attachments[sourceAttachment]);\n  sourceType = sourceType || attachments[sourceAttachment].type;\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n  sourceType = sourceType || (0,typed_array_utils/* getGLTypeFromTypedArray */.O)(target);\n  const prevHandle = gl.bindFramebuffer(36160, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(36160, prevHandle || null);\n\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\nfunction readPixelsToBuffer(source, _ref) {\n  let {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = 6408,\n    target = null,\n    targetByteOffset = 0,\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = _ref;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n  const gl2 = assertWebGL2Context(framebuffer.gl);\n  sourceType = sourceType || (target ? target.type : 5121);\n\n  if (!target) {\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl2, {\n      byteLength,\n      accessor: {\n        type: sourceType,\n        size: components\n      }\n    });\n  }\n\n  target.bind({\n    target: 35051\n  });\n  withParameters(gl2, {\n    framebuffer\n  }, () => {\n    gl2.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, targetByteOffset);\n  });\n  target.unbind({\n    target: 35051\n  });\n\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\nfunction copyToDataUrl(source) {\n  let {\n    sourceAttachment = 36064,\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let data = readPixelsToArray(source, {\n    sourceAttachment\n  });\n  let {\n    width,\n    height\n  } = source;\n\n  while (height > targetMaxHeight) {\n    ({\n      data,\n      width,\n      height\n    } = (0,typed_array_utils/* scalePixels */.KS)({\n      data,\n      width,\n      height\n    }));\n  }\n\n  (0,typed_array_utils/* flipRows */.c$)({\n    data,\n    width,\n    height\n  });\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n}\nfunction copyToImage(source) {\n  let {\n    sourceAttachment = 36064,\n    targetImage = null\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const dataUrl = copyToDataUrl(source, {\n    sourceAttachment\n  });\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\nfunction copyToTexture(source, target) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    targetMipmaplevel = 0,\n    targetInternalFormat = 6408\n  } = options;\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width,\n    height\n  } = options;\n  const {\n    framebuffer,\n    deleteFramebuffer\n  } = getFramebuffer(source);\n  (0,utils_assert/* assert */.h)(framebuffer);\n  const {\n    gl,\n    handle\n  } = framebuffer;\n  const isSubCopy = typeof targetX !== 'undefined' || typeof targetY !== 'undefined' || typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(36160, handle);\n  (0,utils_assert/* assert */.h)(target);\n  let texture = null;\n\n  if (target instanceof classes_texture/* default */.Z) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(target, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0);\n  } else {\n    switch (target) {\n      case 3553:\n      case 34067:\n        gl.copyTexSubImage2D(target, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);\n        break;\n\n      case 35866:\n      case 32879:\n        const gl2 = (0,esm/* assertWebGL2Context */.KQ)(gl);\n        gl2.copyTexSubImage3D(target, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);\n        break;\n\n      default:\n    }\n  }\n\n  if (texture) {\n    texture.unbind();\n  }\n\n  gl.bindFramebuffer(36160, prevHandle || null);\n\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return texture;\n}\nfunction blit(source, target) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sourceX0 = 0,\n    sourceY0 = 0,\n    targetX0 = 0,\n    targetY0 = 0,\n    color = true,\n    depth = false,\n    stencil = false,\n    filter = 9728\n  } = options;\n  let {\n    sourceX1,\n    sourceY1,\n    targetX1,\n    targetY1,\n    sourceAttachment = 36064,\n    mask = 0\n  } = options;\n  const {\n    framebuffer: srcFramebuffer,\n    deleteFramebuffer: deleteSrcFramebuffer\n  } = getFramebuffer(source);\n  const {\n    framebuffer: dstFramebuffer,\n    deleteFramebuffer: deleteDstFramebuffer\n  } = getFramebuffer(target);\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {\n    gl,\n    handle,\n    width,\n    height,\n    readBuffer\n  } = dstFramebuffer;\n  const gl2 = assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === 36064) {\n    sourceAttachment = 1028;\n  }\n\n  if (color) {\n    mask |= 16384;\n  }\n\n  if (depth) {\n    mask |= 256;\n  }\n\n  if (stencil) {\n    mask |= 1024;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    if (mask & (256 | 1024)) {\n      mask = 16384;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n\n  assert(mask);\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n  const prevDrawHandle = gl.bindFramebuffer(36009, handle);\n  const prevReadHandle = gl.bindFramebuffer(36008, srcFramebuffer.handle);\n  gl2.readBuffer(sourceAttachment);\n  gl2.blitFramebuffer(sourceX0, sourceY0, sourceX1, sourceY1, targetX0, targetY0, targetX1, targetY1, mask, filter);\n  gl2.readBuffer(readBuffer);\n  gl2.bindFramebuffer(36008, prevReadHandle || null);\n  gl2.bindFramebuffer(36009, prevDrawHandle || null);\n\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof framebuffer/* default */.Z)) {\n    return {\n      framebuffer: (0,texture_utils/* toFramebuffer */.Y)(source),\n      deleteFramebuffer: true\n    };\n  }\n\n  return {\n    framebuffer: source,\n    deleteFramebuffer: false\n  };\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n\n  type = type || 5121;\n  const ArrayType = (0,typed_array_utils/* getTypedArrayFromGLType */.vN)(type, {\n    clamped: false\n  });\n  const components = format_utils_glFormatToComponents(format);\n  return new ArrayType(width * height * components);\n}\n//# sourceMappingURL=copy-and-blit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81913\n")},53849:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ Framebuffer; }\n/* harmony export */ });\n/* unused harmony export FRAMEBUFFER_ATTACHMENT_PARAMETERS */\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87577);\n/* harmony import */ var _texture_2d__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(51621);\n/* harmony import */ var _renderbuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94041);\n/* harmony import */ var _clear__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26047);\n/* harmony import */ var _copy_and_blit_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81913);\n/* harmony import */ var _features__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(44211);\n/* harmony import */ var _webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79579);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22525);\n\n\n\n\n\n\n\n\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\nclass Framebuffer extends _resource__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z {\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n\n  static isSupported(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      colorBufferFloat,\n      colorBufferHalfFloat\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float') || gl.getExtension('OES_texture_float'));\n    }\n\n    if (colorBufferHalfFloat) {\n      supported = supported && Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('EXT_color_buffer_half_float'));\n    }\n\n    return supported;\n  }\n\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n      id: 'default-framebuffer',\n      handle: null,\n      attachments: {}\n    });\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = 36064;\n    this.drawBuffers = [36064];\n    this.ownResources = [];\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[36064] || null;\n  }\n\n  get texture() {\n    return this.attachments[36064] || null;\n  }\n\n  get depth() {\n    return this.attachments[36096] || this.attachments[33306] || null;\n  }\n\n  get stencil() {\n    return this.attachments[36128] || this.attachments[33306] || null;\n  }\n\n  initialize(_ref) {\n    let {\n      width = 1,\n      height = 1,\n      attachments = null,\n      color = true,\n      depth = true,\n      stencil = false,\n      check = true,\n      readBuffer = undefined,\n      drawBuffers = undefined\n    } = _ref;\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(width >= 0 && height >= 0, 'Width and height need to be integers');\n    this.width = width;\n    this.height = height;\n\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({\n          width,\n          height\n        });\n      }\n    } else {\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({\n      clearAttachments: true,\n      attachments,\n      readBuffer,\n      drawBuffers\n    });\n\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n\n    super.delete();\n    return this;\n  }\n\n  update(_ref2) {\n    let {\n      attachments = {},\n      readBuffer,\n      drawBuffers,\n      clearAttachments = false,\n      resizeAttachments = true\n    } = _ref2;\n    this.attach(attachments, {\n      clearAttachments,\n      resizeAttachments\n    });\n    const {\n      gl\n    } = this;\n    const prevHandle = gl.bindFramebuffer(36160, this.handle);\n\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n\n    gl.bindFramebuffer(36160, prevHandle || null);\n    return this;\n  }\n\n  resize() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let {\n      width,\n      height\n    } = options;\n\n    if (this.handle === null) {\n      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.log */ .cM.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height))();\n    }\n\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({\n        width,\n        height\n      });\n    }\n\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  attach(attachments) {\n    let {\n      clearAttachments = false,\n      resizeAttachments = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const newAttachments = {};\n\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    Object.assign(newAttachments, attachments);\n    const prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n    for (const key in newAttachments) {\n      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(key !== undefined, 'Misspelled framebuffer binding point?');\n      const attachment = Number(key);\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof _renderbuffer__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z) {\n        this._attachRenderbuffer({\n          attachment,\n          renderbuffer: object\n        });\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n\n        this._attachTexture({\n          attachment,\n          texture,\n          layer,\n          level\n        });\n      } else {\n        this._attachTexture({\n          attachment,\n          texture: object,\n          layer: 0,\n          level: 0\n        });\n      }\n\n      if (resizeAttachments && object) {\n        object.resize({\n          width: this.width,\n          height: this.height\n        });\n      }\n    }\n\n    this.gl.bindFramebuffer(36160, prevHandle || null);\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {\n      gl\n    } = this;\n    const status = this.getStatus();\n\n    if (status !== 36053) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n\n    return this;\n  }\n\n  getStatus() {\n    const {\n      gl\n    } = this;\n    const prevHandle = gl.bindFramebuffer(36160, this.handle);\n    const status = gl.checkFramebufferStatus(36160);\n    gl.bindFramebuffer(36160, prevHandle || null);\n    return status;\n  }\n\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      color,\n      depth,\n      stencil,\n      drawBuffers = []\n    } = options;\n    const prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n    if (color || depth || stencil) {\n      (0,_clear__WEBPACK_IMPORTED_MODULE_4__/* .clear */ .Z)(this.gl, {\n        color,\n        depth,\n        stencil\n      });\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      (0,_clear__WEBPACK_IMPORTED_MODULE_4__/* .clearBuffer */ .$)(this.gl, {\n        drawBuffer,\n        value\n      });\n    });\n    this.gl.bindFramebuffer(36160, prevHandle || null);\n    return this;\n  }\n\n  readPixels() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();\n    return null;\n  }\n\n  readPixelsToBuffer() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();\n    return null;\n  }\n\n  copyToDataUrl() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();\n    return null;\n  }\n\n  copyToImage() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  copyToTexture() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n    return null;\n  }\n\n  blit() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  invalidate(_ref3) {\n    let {\n      attachments = [],\n      x = 0,\n      y = 0,\n      width,\n      height\n    } = _ref3;\n    const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n    const prevHandle = gl2.bindFramebuffer(36008, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(36008, attachments);\n    } else {\n      gl2.invalidateFramebuffer(36008, attachments, x, y, width, height);\n    }\n\n    gl2.bindFramebuffer(36008, prevHandle);\n    return this;\n  }\n\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n\n    if (value === null) {\n      this.gl.bindFramebuffer(36160, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n      this.gl.bindFramebuffer(36160, null);\n    }\n\n    if (keys && value > 1000) {\n      value = (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_5__/* .getKey */ .km)(this.gl, value);\n    }\n\n    return value;\n  }\n\n  getAttachmentParameters() {\n    let attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n    let keys = arguments.length > 1 ? arguments[1] : undefined;\n    let parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n    const values = {};\n\n    for (const pname of parameters) {\n      const key = keys ? (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_5__/* .getKey */ .km)(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n\n    return values;\n  }\n\n  getParameters() {\n    let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const attachments = Object.keys(this.attachments);\n    const parameters = {};\n\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_5__/* .getKey */ .km)(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n\n    return parameters;\n  }\n\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open((0,_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_6__/* .copyToDataUrl */ .Km)(this), 'luma-debug-texture');\n    }\n\n    return this;\n  }\n\n  log() {\n    let logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    if (logLevel > _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.level */ .cM.level || typeof window === 'undefined') {\n      return this;\n    }\n\n    message = message || \"Framebuffer \".concat(this.id);\n    const image = (0,_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_6__/* .copyToDataUrl */ .Km)(this, {\n      targetMaxHeight: 100\n    });\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.image */ .cM.image({\n      logLevel,\n      message,\n      image\n    }, message)();\n    return this;\n  }\n\n  bind() {\n    let {\n      target = 36160\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind() {\n    let {\n      target = 36160\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[36064] = new _texture_2d__WEBPACK_IMPORTED_MODULE_7__/* [\"default\"] */ .Z(this.gl, {\n        id: \"\".concat(this.id, \"-color0\"),\n        pixels: null,\n        format: 6408,\n        type: 5121,\n        width,\n        height,\n        mipmaps: false,\n        parameters: {\n          [10241]: 9729,\n          [10240]: 9729,\n          [10242]: 33071,\n          [10243]: 33071\n        }\n      });\n      this.ownResources.push(defaultAttachments[36064]);\n    }\n\n    if (depth && stencil) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[33306] = new _renderbuffer__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z(this.gl, {\n        id: \"\".concat(this.id, \"-depth-stencil\"),\n        format: 35056,\n        width,\n        height: 111\n      });\n      this.ownResources.push(defaultAttachments[33306]);\n    } else if (depth) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[36096] = new _renderbuffer__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z(this.gl, {\n        id: \"\".concat(this.id, \"-depth\"),\n        format: 33189,\n        width,\n        height\n      });\n      this.ownResources.push(defaultAttachments[36096]);\n    } else if (stencil) {\n      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n\n    if (!oldAttachment) {\n      return;\n    }\n\n    if (oldAttachment instanceof _renderbuffer__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z) {\n      this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n    } else {\n      this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);\n    }\n\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer(_ref4) {\n    let {\n      attachment = 36064,\n      renderbuffer\n    } = _ref4;\n    const {\n      gl\n    } = this;\n    gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  _attachTexture(_ref5) {\n    let {\n      attachment = 36064,\n      texture,\n      layer,\n      level\n    } = _ref5;\n    const {\n      gl\n    } = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case 35866:\n      case 32879:\n        const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(gl);\n        gl2.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n        break;\n\n      case 34067:\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n        break;\n\n      case 3553:\n        gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n        break;\n\n      default:\n        (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  _setReadBuffer(readBuffer) {\n    const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .getWebGL2Context */ .vd)(this.gl);\n\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n    }\n\n    this.readBuffer = readBuffer;\n  }\n\n  _setDrawBuffers(drawBuffers) {\n    const {\n      gl\n    } = this;\n    const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(gl);\n\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n\n    this.drawBuffers = drawBuffers;\n  }\n\n  _getAttachmentParameterFallback(pname) {\n    const caps = (0,_features__WEBPACK_IMPORTED_MODULE_8__/* .getFeatures */ .N$)(this.gl);\n\n    switch (pname) {\n      case 36052:\n        return !caps.WEBGL2 ? 0 : null;\n\n      case 33298:\n      case 33299:\n      case 33300:\n      case 33301:\n      case 33302:\n      case 33303:\n        return !caps.WEBGL2 ? 8 : null;\n\n      case 33297:\n        return !caps.WEBGL2 ? 5125 : null;\n\n      case 33296:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? 9729 : null;\n\n      default:\n        return null;\n    }\n  }\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(36160, handle);\n  }\n\n}\n\nfunction mapIndexToCubeMapFace(layer) {\n  return layer < 34069 ? layer + 34069 : layer;\n}\n\nfunction _getFrameBufferStatus(status) {\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\n\nconst FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, 36048, 33296, 33298, 33299, 33300, 33301, 33302, 33303];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n//# sourceMappingURL=framebuffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53849\n")},75433:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ Program; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/resource.js\nvar resource = __webpack_require__(87577);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture.js\nvar texture = __webpack_require__(35008);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/framebuffer.js\nvar framebuffer = __webpack_require__(53849);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/renderbuffer.js + 1 modules\nvar renderbuffer = __webpack_require__(94041);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar assert = __webpack_require__(22525);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/uniforms.js\n\n\n\n\n\nconst UNIFORM_SETTERS = {\n  [5126]: getArraySetter.bind(null, 'uniform1fv', toFloatArray, 1, setVectorUniform),\n  [35664]: getArraySetter.bind(null, 'uniform2fv', toFloatArray, 2, setVectorUniform),\n  [35665]: getArraySetter.bind(null, 'uniform3fv', toFloatArray, 3, setVectorUniform),\n  [35666]: getArraySetter.bind(null, 'uniform4fv', toFloatArray, 4, setVectorUniform),\n  [5124]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [35667]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [35668]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [35669]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n  [35670]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [35671]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [35672]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [35673]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n  [35674]: getArraySetter.bind(null, 'uniformMatrix2fv', toFloatArray, 4, setMatrixUniform),\n  [35675]: getArraySetter.bind(null, 'uniformMatrix3fv', toFloatArray, 9, setMatrixUniform),\n  [35676]: getArraySetter.bind(null, 'uniformMatrix4fv', toFloatArray, 16, setMatrixUniform),\n  [35678]: getSamplerSetter,\n  [35680]: getSamplerSetter,\n  [5125]: getArraySetter.bind(null, 'uniform1uiv', toUIntArray, 1, setVectorUniform),\n  [36294]: getArraySetter.bind(null, 'uniform2uiv', toUIntArray, 2, setVectorUniform),\n  [36295]: getArraySetter.bind(null, 'uniform3uiv', toUIntArray, 3, setVectorUniform),\n  [36296]: getArraySetter.bind(null, 'uniform4uiv', toUIntArray, 4, setVectorUniform),\n  [35685]: getArraySetter.bind(null, 'uniformMatrix2x3fv', toFloatArray, 6, setMatrixUniform),\n  [35686]: getArraySetter.bind(null, 'uniformMatrix2x4fv', toFloatArray, 8, setMatrixUniform),\n  [35687]: getArraySetter.bind(null, 'uniformMatrix3x2fv', toFloatArray, 6, setMatrixUniform),\n  [35688]: getArraySetter.bind(null, 'uniformMatrix3x4fv', toFloatArray, 12, setMatrixUniform),\n  [35689]: getArraySetter.bind(null, 'uniformMatrix4x2fv', toFloatArray, 8, setMatrixUniform),\n  [35690]: getArraySetter.bind(null, 'uniformMatrix4x3fv', toFloatArray, 12, setMatrixUniform),\n  [35678]: getSamplerSetter,\n  [35680]: getSamplerSetter,\n  [35679]: getSamplerSetter,\n  [35682]: getSamplerSetter,\n  [36289]: getSamplerSetter,\n  [36292]: getSamplerSetter,\n  [36293]: getSamplerSetter,\n  [36298]: getSamplerSetter,\n  [36299]: getSamplerSetter,\n  [36300]: getSamplerSetter,\n  [36303]: getSamplerSetter,\n  [36306]: getSamplerSetter,\n  [36307]: getSamplerSetter,\n  [36308]: getSamplerSetter,\n  [36311]: getSamplerSetter\n};\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\nconst array1 = [0];\n\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n\n  const length = value.length;\n\n  if (length % uniformLength) {\n    esm/* log.warn */.cM.warn(\"Uniform size should be multiples of \".concat(uniformLength), value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n\n  let result = cache[length];\n\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n}\n\nfunction getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n\n  if (!setter) {\n    throw new Error(\"Unknown GLSL uniform type \".concat(info.type));\n  }\n\n  return setter().bind(null, gl, location);\n}\nfunction parseUniformName(name) {\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n\n  if (!matches || matches.length < 2) {\n    throw new Error(\"Failed to parse GLSL uniform name \".concat(name));\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n}\nfunction checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n\n    if (shouldCheck && !checkUniformValue(value)) {\n      source = source ? \"\".concat(source, \" \") : '';\n      console.error(\"\".concat(source, \" Bad uniform \").concat(uniformName), value);\n      throw new Error(\"\".concat(source, \" Bad uniform \").concat(uniformName));\n    }\n  }\n\n  return true;\n}\n\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof texture/* default */.Z) {\n    return true;\n  } else if (value instanceof renderbuffer/* default */.Z) {\n    return true;\n  } else if (value instanceof framebuffer/* default */.Z) {\n    return Boolean(value.texture);\n  }\n\n  return false;\n}\n\nfunction copyUniform(uniforms, key, value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    if (uniforms[key]) {\n      const dest = uniforms[key];\n\n      for (let i = 0, len = value.length; i < len; ++i) {\n        dest[i] = value[i];\n      }\n    } else {\n      uniforms[key] = value.slice();\n    }\n  } else {\n    uniforms[key] = value;\n  }\n}\n\nfunction checkUniformArray(value) {\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getSamplerSetter() {\n  let cache = null;\n  return (gl, location, value) => {\n    const update = cache !== value;\n\n    if (update) {\n      gl.uniform1i(location, value);\n      cache = value;\n    }\n\n    return update;\n  };\n}\n\nfunction getArraySetter(functionName, toArray, size, uniformSetter) {\n  let cache = null;\n  let cacheLength = null;\n  return (gl, location, value) => {\n    const arrayValue = toArray(value, size);\n    const length = arrayValue.length;\n    let update = false;\n\n    if (cache === null) {\n      cache = new Float32Array(length);\n      cacheLength = length;\n      update = true;\n    } else {\n      (0,assert/* assert */.h)(cacheLength === length, 'Uniform length cannot change.');\n\n      for (let i = 0; i < length; ++i) {\n        if (arrayValue[i] !== cache[i]) {\n          update = true;\n          break;\n        }\n      }\n    }\n\n    if (update) {\n      uniformSetter(gl, functionName, location, arrayValue);\n      cache.set(arrayValue);\n    }\n\n    return update;\n  };\n}\n\nfunction setVectorUniform(gl, functionName, location, value) {\n  gl[functionName](location, value);\n}\n\nfunction setMatrixUniform(gl, functionName, location, value) {\n  gl[functionName](location, false, value);\n}\n//# sourceMappingURL=uniforms.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/glsl-utils/get-shader-name.js\nfunction getShaderName(shader) {\n  let defaultName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unnamed';\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n//# sourceMappingURL=get-shader-name.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/glsl-utils/get-shader-type-name.js\nconst GL_FRAGMENT_SHADER = 0x8b30;\nconst GL_VERTEX_SHADER = 0x8b31;\nfunction getShaderTypeName(type) {\n  switch (type) {\n    case GL_FRAGMENT_SHADER:\n      return 'fragment';\n\n    case GL_VERTEX_SHADER:\n      return 'vertex';\n\n    default:\n      return 'unknown type';\n  }\n}\n//# sourceMappingURL=get-shader-type-name.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/glsl-utils/format-glsl-error.js\n\n\nfunction formatGLSLCompilerError(errLog, src, shaderType) {\n  const {\n    shaderName,\n    errors,\n    warnings\n  } = parseGLSLCompilerError(errLog, src, shaderType);\n  return \"GLSL compilation error in \".concat(shaderName, \"\\n\\n\").concat(errors, \"\\n\").concat(warnings);\n}\nfunction parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = \"\".concat(getShaderTypeName(shaderType), \" shader \").concat(name);\n\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n\n    if (errorString.length <= 1) {\n      continue;\n    }\n\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n\n    if (isNaN(line)) {\n      throw new Error(\"GLSL compilation error in \".concat(shaderDescription, \": \").concat(errLog));\n    }\n\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  const lines = addLineNumbers(src);\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\nfunction formatErrors(errors, lines) {\n  let message = '';\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n\n    message += \"\".concat(line, \"\\n\");\n\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(\"^^^ \".concat(type, \": \").concat(err, \"\\n\\n\"), column);\n    }\n  }\n\n  return message;\n}\n\nfunction addLineNumbers(string) {\n  let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ': ';\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = String(i + start);\n    const digits = lineNumber.length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\nfunction padLeft(string, digits) {\n  let result = '';\n\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n\n  return \"\".concat(result).concat(string);\n}\n//# sourceMappingURL=format-glsl-error.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/utils.js\nvar utils = __webpack_require__(74538);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/shader.js\n\n\n\n\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\nclass Shader extends resource/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'Shader';\n  }\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case 35633:\n        return 'vertex-shader';\n\n      case 35632:\n        return 'fragment-shader';\n\n      default:\n        (0,assert/* assert */.h)(false);\n        return 'unknown';\n    }\n  }\n\n  constructor(gl, props) {\n    (0,esm/* assertWebGLContext */.JD)(gl);\n    (0,assert/* assert */.h)(typeof props.source === 'string', ERR_SOURCE);\n    const id = getShaderName(props.source, null) || props.id || (0,utils/* uid */.hQ)(\"unnamed \".concat(Shader.getTypeName(props.shaderType)));\n    super(gl, {\n      id\n    });\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n    this.initialize(props);\n  }\n\n  initialize(_ref) {\n    let {\n      source\n    } = _ref;\n    const shaderName = getShaderName(source, null);\n\n    if (shaderName) {\n      this.id = (0,utils/* uid */.hQ)(shaderName);\n    }\n\n    this._compile(source);\n  }\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return \"\".concat(Shader.getTypeName(this.shaderType), \":\").concat(this.id);\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  _compile() {\n    let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.source;\n\n    if (!source.startsWith('#version ')) {\n      source = \"#version 100\\n\".concat(source);\n    }\n\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n    const compileStatus = this.getParameter(35713);\n\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {\n        shaderName,\n        errors,\n        warnings\n      } = parseGLSLCompilerError(infoLog, this.source, this.shaderType, this.id);\n      esm/* log.error */.cM.error(\"GLSL compilation errors in \".concat(shaderName, \"\\n\").concat(errors))();\n      esm/* log.warn */.cM.warn(\"GLSL compilation warnings in \".concat(shaderName, \"\\n\").concat(warnings))();\n      throw new Error(\"GLSL compilation errors in \".concat(shaderName));\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(35663),\n      source: this.getSource()\n    };\n  }\n\n}\nclass VertexShader extends Shader {\n  get [Symbol.toStringTag]() {\n    return 'VertexShader';\n  }\n\n  constructor(gl, props) {\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n\n    super(gl, Object.assign({}, props, {\n      shaderType: 35633\n    }));\n  }\n\n  _createHandle() {\n    return this.gl.createShader(35633);\n  }\n\n}\nclass FragmentShader extends Shader {\n  get [Symbol.toStringTag]() {\n    return 'FragmentShader';\n  }\n\n  constructor(gl, props) {\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n\n    super(gl, Object.assign({}, props, {\n      shaderType: 35632\n    }));\n  }\n\n  _createHandle() {\n    return this.gl.createShader(35632);\n  }\n\n}\n//# sourceMappingURL=shader.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/accessor.js\nvar classes_accessor = __webpack_require__(14072);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/attribute-utils.js\nvar attribute_utils = __webpack_require__(38522);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/program-configuration.js\n\n\n\nclass ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n\n    this._readAttributesFromProgram(program);\n\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  _readAttributesFromProgram(program) {\n    const {\n      gl\n    } = program;\n    const count = gl.getProgramParameter(program.handle, 35721);\n\n    for (let index = 0; index < count; index++) {\n      const {\n        name,\n        type,\n        size\n      } = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _readVaryingsFromProgram(program) {\n    const {\n      gl\n    } = program;\n\n    if (!(0,esm/* isWebGL2 */.D0)(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, 35971);\n\n    for (let location = 0; location < count; location++) {\n      const {\n        name,\n        type,\n        size\n      } = gl.getTransformFeedbackVarying(program.handle, location);\n\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {\n      type,\n      components\n    } = (0,attribute_utils/* decomposeCompositeGLType */.hJ)(compositeType);\n    const accessor = {\n      type,\n      size: size * components\n    };\n\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {\n      location,\n      name,\n      accessor: new classes_accessor/* default */.Z(accessor)\n    };\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo;\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo;\n  }\n\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {\n      type,\n      components\n    } = (0,attribute_utils/* decomposeCompositeGLType */.hJ)(compositeType);\n    const accessor = new classes_accessor/* default */.Z({\n      type,\n      size: size * components\n    });\n    const varying = {\n      location,\n      name,\n      accessor\n    };\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying;\n  }\n\n}\n//# sourceMappingURL=program-configuration.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/constants-to-keys.js\nvar constants_to_keys = __webpack_require__(79579);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/program.js\n\n\n\n\n\n\n\n\n\n\n\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\nconst V6_DEPRECATED_METHODS = ['setVertexArray', 'setAttributes', 'setBuffers', 'unsetBuffers', 'use', 'getUniformCount', 'getUniformInfo', 'getUniformLocation', 'getUniformValue', 'getVarying', 'getFragDataLocation', 'getAttachedShaders', 'getAttributeCount', 'getAttributeLocation', 'getAttributeInfo'];\nclass Program extends resource/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'Program';\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, props);\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n    this._isCached = false;\n    this.initialize(props);\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      hash,\n      vs,\n      fs,\n      varyings,\n      bufferMode = GL_SEPARATE_ATTRIBS\n    } = props;\n    this.hash = hash || '';\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, {\n      id: \"\".concat(props.id, \"-vs\"),\n      source: vs\n    }) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, {\n      id: \"\".concat(props.id, \"-fs\"),\n      source: fs\n    }) : fs;\n    (0,assert/* assert */.h)(this.vs instanceof VertexShader);\n    (0,assert/* assert */.h)(this.fs instanceof FragmentShader);\n    this.uniforms = {};\n    this._textureUniforms = {};\n\n    if (varyings && varyings.length > 0) {\n      (0,esm/* assertWebGL2Context */.KQ)(this.gl);\n      this.varyings = varyings;\n      this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n\n    this._readUniformLocationsFromLinkedProgram();\n\n    this.configuration = new ProgramConfiguration(this);\n    return this.setProps(props);\n  }\n\n  delete() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this._isCached) {\n      return this;\n    }\n\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    return this;\n  }\n\n  draw(_ref) {\n    let {\n      logPriority,\n      drawMode = 4,\n      vertexCount,\n      offset = 0,\n      start,\n      end,\n      isIndexed = false,\n      indexType = 5123,\n      instanceCount = 0,\n      isInstanced = instanceCount > 0,\n      vertexArray = null,\n      transformFeedback,\n      framebuffer,\n      parameters = {},\n      uniforms,\n      samplers\n    } = _ref;\n\n    if (uniforms || samplers) {\n      esm/* log.deprecated */.cM.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (esm/* log.priority */.cM.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message = \"mode=\".concat((0,constants_to_keys/* getKey */.km)(this.gl, drawMode), \" verts=\").concat(vertexCount, \" \") + \"instances=\".concat(instanceCount, \" indexType=\").concat((0,constants_to_keys/* getKey */.km)(this.gl, indexType), \" \") + \"isInstanced=\".concat(isInstanced, \" isIndexed=\").concat(isIndexed, \" \") + \"Framebuffer=\".concat(fb);\n      esm/* log.log */.cM.log(logPriority, message)();\n    }\n\n    (0,assert/* assert */.h)(vertexArray);\n    this.gl.useProgram(this.handle);\n\n    if (!this._areTexturesRenderable() || vertexCount === 0 || isInstanced && instanceCount === 0) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {\n          framebuffer\n        });\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = (0,attribute_utils/* getPrimitiveDrawMode */.$Z)(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      (0,esm/* withParameters */.s8)(this.gl, parameters, () => {\n        if (isIndexed && isInstanced) {\n          this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && (0,esm/* isWebGL2 */.D0)(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n    return true;\n  }\n\n  setUniforms() {\n    let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (esm/* log.priority */.cM.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof framebuffer/* default */.Z) {\n          value = value.texture;\n        }\n\n        if (value instanceof texture/* default */.Z) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            const texture = value;\n            const {\n              textureIndex\n            } = uniformSetter;\n            texture.bind(textureIndex);\n            value = textureIndex;\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      texture.update();\n      texturesRenderable = texturesRenderable && texture.loaded;\n    }\n\n    return texturesRenderable;\n  }\n\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, 35663);\n\n      switch (type) {\n        case 35633:\n          opts.vs = new VertexShader({\n            handle: shaderHandle\n          });\n          break;\n\n        case 35632:\n          opts.fs = new FragmentShader({\n            handle: shaderHandle\n          });\n          break;\n\n        default:\n      }\n    }\n\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n\n      this.id = (0,utils/* uid */.hQ)(programName);\n    }\n  }\n\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? \"\".concat(programName, \"-program\") : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {\n      gl\n    } = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    esm/* log.time */.cM.time(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n    gl.linkProgram(this.handle);\n    esm/* log.timeEnd */.cM.timeEnd(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n\n    if (gl.debug || esm/* log.level */.cM.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, 35714);\n\n      if (!linked) {\n        throw new Error(\"Error linking: \".concat(gl.getProgramInfoLog(this.handle)));\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, 35715);\n\n      if (!validated) {\n        throw new Error(\"Error validating: \".concat(gl.getProgramInfoLog(this.handle)));\n      }\n    }\n  }\n\n  _readUniformLocationsFromLinkedProgram() {\n    const {\n      gl\n    } = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(35718);\n\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {\n        name\n      } = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info);\n\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, \"\".concat(name, \"[\").concat(l, \"]\"));\n          this._uniformSetters[\"\".concat(name, \"[\").concat(l, \"]\")] = getUniformSetter(gl, location, info);\n        }\n      }\n    }\n\n    this._textureIndexCounter = 0;\n  }\n\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  getUniformBlockIndex(blockName) {\n    return this.gl2.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n\n}\n//# sourceMappingURL=program.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75433\n")},14178:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ Query; }\n/* harmony export */ });\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87577);\n/* harmony import */ var _features__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(44211);\n/* harmony import */ var _features__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6948);\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22525);\n\n\n\n\nconst GL_QUERY_RESULT = 0x8866;\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867;\nconst GL_TIME_ELAPSED_EXT = 0x88bf;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88;\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f;\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a;\nclass Query extends _resource__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z {\n  get [Symbol.toStringTag]() {\n    return 'Query';\n  }\n\n  static isSupported(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const webgl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(gl);\n    const hasTimerQuery = (0,_features__WEBPACK_IMPORTED_MODULE_2__/* .hasFeatures */ .ag)(gl, _features__WEBPACK_IMPORTED_MODULE_3__/* .FEATURES.TIMER_QUERY */ .h.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n\n        default:\n          (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(false);\n      }\n    }\n\n    return supported;\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n    Object.seal(this);\n  }\n\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  beginOcclusionQuery() {\n    let {\n      conservative = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  begin(target) {\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl2.beginQuery(this.target, this.handle);\n    return this;\n  }\n\n  end() {\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl2.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n\n    return this;\n  }\n\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n\n    return resultAvailable;\n  }\n\n  isTimerDisjoint() {\n    return this.gl2.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  getResult() {\n    return this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  createPoll() {\n    let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;\n\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl2.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl2.deleteQuery(this.handle);\n  }\n\n}\n//# sourceMappingURL=query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxNzguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0M7QUFDa0I7QUFDUjtBQUNIO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2Usb0JBQW9CLDBEQUFRO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9FQUFRO0FBQzNCLDBCQUEwQixnRUFBVyxLQUFLLGdGQUFvQjtBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsOERBQU07QUFDaEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS9jbGFzc2VzL3F1ZXJ5LmpzPzBmYmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlc291cmNlIGZyb20gJy4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgRkVBVFVSRVMsIGhhc0ZlYXR1cmVzIH0gZnJvbSAnLi4vZmVhdHVyZXMnO1xuaW1wb3J0IHsgaXNXZWJHTDIgfSBmcm9tICdAbHVtYS5nbC9nbHRvb2xzJztcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4uL3V0aWxzL2Fzc2VydCc7XG5jb25zdCBHTF9RVUVSWV9SRVNVTFQgPSAweDg4NjY7XG5jb25zdCBHTF9RVUVSWV9SRVNVTFRfQVZBSUxBQkxFID0gMHg4ODY3O1xuY29uc3QgR0xfVElNRV9FTEFQU0VEX0VYVCA9IDB4ODhiZjtcbmNvbnN0IEdMX0dQVV9ESVNKT0lOVF9FWFQgPSAweDhmYmI7XG5jb25zdCBHTF9UUkFOU0ZPUk1fRkVFREJBQ0tfUFJJTUlUSVZFU19XUklUVEVOID0gMHg4Yzg4O1xuY29uc3QgR0xfQU5ZX1NBTVBMRVNfUEFTU0VEID0gMHg4YzJmO1xuY29uc3QgR0xfQU5ZX1NBTVBMRVNfUEFTU0VEX0NPTlNFUlZBVElWRSA9IDB4OGQ2YTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXJ5IGV4dGVuZHMgUmVzb3VyY2Uge1xuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdRdWVyeSc7XG4gIH1cblxuICBzdGF0aWMgaXNTdXBwb3J0ZWQoZ2wpIHtcbiAgICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gICAgY29uc3Qgd2ViZ2wyID0gaXNXZWJHTDIoZ2wpO1xuICAgIGNvbnN0IGhhc1RpbWVyUXVlcnkgPSBoYXNGZWF0dXJlcyhnbCwgRkVBVFVSRVMuVElNRVJfUVVFUlkpO1xuICAgIGxldCBzdXBwb3J0ZWQgPSB3ZWJnbDIgfHwgaGFzVGltZXJRdWVyeTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIG9wdHMpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3F1ZXJpZXMnOlxuICAgICAgICAgIHN1cHBvcnRlZCA9IHN1cHBvcnRlZCAmJiB3ZWJnbDI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndGltZXJzJzpcbiAgICAgICAgICBzdXBwb3J0ZWQgPSBzdXBwb3J0ZWQgJiYgaGFzVGltZXJRdWVyeTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGdsKSB7XG4gICAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN1cGVyKGdsLCBvcHRzKTtcbiAgICB0aGlzLnRhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fcXVlcnlQZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcG9sbGluZ1Byb21pc2UgPSBudWxsO1xuICAgIE9iamVjdC5zZWFsKHRoaXMpO1xuICB9XG5cbiAgYmVnaW5UaW1lRWxhcHNlZFF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luKEdMX1RJTUVfRUxBUFNFRF9FWFQpO1xuICB9XG5cbiAgYmVnaW5PY2NsdXNpb25RdWVyeSgpIHtcbiAgICBsZXQge1xuICAgICAgY29uc2VydmF0aXZlID0gZmFsc2VcbiAgICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5iZWdpbihjb25zZXJ2YXRpdmUgPyBHTF9BTllfU0FNUExFU19QQVNTRURfQ09OU0VSVkFUSVZFIDogR0xfQU5ZX1NBTVBMRVNfUEFTU0VEKTtcbiAgfVxuXG4gIGJlZ2luVHJhbnNmb3JtRmVlZGJhY2tRdWVyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpbihHTF9UUkFOU0ZPUk1fRkVFREJBQ0tfUFJJTUlUSVZFU19XUklUVEVOKTtcbiAgfVxuXG4gIGJlZ2luKHRhcmdldCkge1xuICAgIGlmICh0aGlzLl9xdWVyeVBlbmRpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuZ2wyLmJlZ2luUXVlcnkodGhpcy50YXJnZXQsIHRoaXMuaGFuZGxlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGVuZCgpIHtcbiAgICBpZiAodGhpcy5fcXVlcnlQZW5kaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgIHRoaXMuZ2wyLmVuZFF1ZXJ5KHRoaXMudGFyZ2V0KTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3F1ZXJ5UGVuZGluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpc1Jlc3VsdEF2YWlsYWJsZSgpIHtcbiAgICBpZiAoIXRoaXMuX3F1ZXJ5UGVuZGluZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdEF2YWlsYWJsZSA9IHRoaXMuZ2wyLmdldFF1ZXJ5UGFyYW1ldGVyKHRoaXMuaGFuZGxlLCBHTF9RVUVSWV9SRVNVTFRfQVZBSUxBQkxFKTtcblxuICAgIGlmIChyZXN1bHRBdmFpbGFibGUpIHtcbiAgICAgIHRoaXMuX3F1ZXJ5UGVuZGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRBdmFpbGFibGU7XG4gIH1cblxuICBpc1RpbWVyRGlzam9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2wyLmdldFBhcmFtZXRlcihHTF9HUFVfRElTSk9JTlRfRVhUKTtcbiAgfVxuXG4gIGdldFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nbDIuZ2V0UXVlcnlQYXJhbWV0ZXIodGhpcy5oYW5kbGUsIEdMX1FVRVJZX1JFU1VMVCk7XG4gIH1cblxuICBnZXRUaW1lck1pbGxpc2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXN1bHQoKSAvIDFlNjtcbiAgfVxuXG4gIGNyZWF0ZVBvbGwoKSB7XG4gICAgbGV0IGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgICBpZiAodGhpcy5fcG9sbGluZ1Byb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wb2xsaW5nUHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgdGhpcy5fcG9sbGluZ1Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBwb2xsID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1Jlc3VsdEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgcmVzb2x2ZSh0aGlzLmdldFJlc3VsdCgpKTtcbiAgICAgICAgICB0aGlzLl9wb2xsaW5nUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoY291bnRlcisrID4gbGltaXQpIHtcbiAgICAgICAgICByZWplY3QoJ1RpbWVkIG91dCcpO1xuICAgICAgICAgIHRoaXMuX3BvbGxpbmdQcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocG9sbCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShwb2xsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fcG9sbGluZ1Byb21pc2U7XG4gIH1cblxuICBfY3JlYXRlSGFuZGxlKCkge1xuICAgIHJldHVybiBRdWVyeS5pc1N1cHBvcnRlZCh0aGlzLmdsKSA/IHRoaXMuZ2wyLmNyZWF0ZVF1ZXJ5KCkgOiBudWxsO1xuICB9XG5cbiAgX2RlbGV0ZUhhbmRsZSgpIHtcbiAgICB0aGlzLmdsMi5kZWxldGVRdWVyeSh0aGlzLmhhbmRsZSk7XG4gIH1cblxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14178\n")},94041:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ Renderbuffer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/resource.js\nvar resource = __webpack_require__(87577);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/renderbuffer-formats.js\nconst EXT_FLOAT_WEBGL2 = 'EXT_color_buffer_float';\n/* harmony default export */ var renderbuffer_formats = ({\n  [33189]: {\n    bpp: 2\n  },\n  [33190]: {\n    gl2: true,\n    bpp: 3\n  },\n  [36012]: {\n    gl2: true,\n    bpp: 4\n  },\n  [36168]: {\n    bpp: 1\n  },\n  [34041]: {\n    bpp: 4\n  },\n  [35056]: {\n    gl2: true,\n    bpp: 4\n  },\n  [36013]: {\n    gl2: true,\n    bpp: 5\n  },\n  [32854]: {\n    bpp: 2\n  },\n  [36194]: {\n    bpp: 2\n  },\n  [32855]: {\n    bpp: 2\n  },\n  [33321]: {\n    gl2: true,\n    bpp: 1\n  },\n  [33330]: {\n    gl2: true,\n    bpp: 1\n  },\n  [33329]: {\n    gl2: true,\n    bpp: 1\n  },\n  [33332]: {\n    gl2: true,\n    bpp: 2\n  },\n  [33331]: {\n    gl2: true,\n    bpp: 2\n  },\n  [33334]: {\n    gl2: true,\n    bpp: 4\n  },\n  [33333]: {\n    gl2: true,\n    bpp: 4\n  },\n  [33323]: {\n    gl2: true,\n    bpp: 2\n  },\n  [33336]: {\n    gl2: true,\n    bpp: 2\n  },\n  [33335]: {\n    gl2: true,\n    bpp: 2\n  },\n  [33338]: {\n    gl2: true,\n    bpp: 4\n  },\n  [33337]: {\n    gl2: true,\n    bpp: 4\n  },\n  [33340]: {\n    gl2: true,\n    bpp: 8\n  },\n  [33339]: {\n    gl2: true,\n    bpp: 8\n  },\n  [32849]: {\n    gl2: true,\n    bpp: 3\n  },\n  [32856]: {\n    gl2: true,\n    bpp: 4\n  },\n  [32857]: {\n    gl2: true,\n    bpp: 4\n  },\n  [36220]: {\n    gl2: true,\n    bpp: 4\n  },\n  [36238]: {\n    gl2: true,\n    bpp: 4\n  },\n  [36975]: {\n    gl2: true,\n    bpp: 4\n  },\n  [36214]: {\n    gl2: true,\n    bpp: 8\n  },\n  [36232]: {\n    gl2: true,\n    bpp: 8\n  },\n  [36226]: {\n    gl2: true,\n    bpp: 16\n  },\n  [36208]: {\n    gl2: true,\n    bpp: 16\n  },\n  [33325]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 2\n  },\n  [33327]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 4\n  },\n  [34842]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 8\n  },\n  [33326]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 4\n  },\n  [33328]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 8\n  },\n  [34836]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 16\n  },\n  [35898]: {\n    gl2: EXT_FLOAT_WEBGL2,\n    bpp: 4\n  }\n});\n//# sourceMappingURL=renderbuffer-formats.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar assert = __webpack_require__(22525);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/renderbuffer.js\n\n\n\n\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n\n  if (!info) {\n    return false;\n  }\n\n  const value = (0,esm/* isWebGL2 */.D0)(gl) ? info.gl2 || info.gl1 : info.gl1;\n\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n\n  return value;\n}\n\nclass Renderbuffer extends resource/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'Renderbuffer';\n  }\n\n  static isSupported(gl) {\n    let {\n      format\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      format: null\n    };\n    return !format || isFormatSupported(gl, format, renderbuffer_formats);\n  }\n\n  static getSamplesForFormat(gl, _ref) {\n    let {\n      format\n    } = _ref;\n    return gl.getInternalformatParameter(36161, format, 32937);\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  initialize(_ref2) {\n    let {\n      format,\n      width = 1,\n      height = 1,\n      samples = 0\n    } = _ref2;\n    (0,assert/* assert */.h)(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(36161, this.handle);\n\n    if (samples !== 0 && (0,esm/* isWebGL2 */.D0)(this.gl)) {\n      this.gl.renderbufferStorageMultisample(36161, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(36161, format, width, height);\n    }\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(this.width * this.height * (this.samples || 1) * renderbuffer_formats[this.format].bpp);\n\n    return this;\n  }\n\n  resize(_ref3) {\n    let {\n      width,\n      height\n    } = _ref3;\n\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        samples: this.samples\n      });\n    }\n\n    return this;\n  }\n\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(36161, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(36164);\n    this.width = this.getParameter(36162);\n    this.height = this.getParameter(36163);\n    this.samples = this.getParameter(36011);\n  }\n\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(36161, this.handle);\n    const value = this.gl.getRenderbufferParameter(36161, pname);\n    return value;\n  }\n\n}\n//# sourceMappingURL=renderbuffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQwNDEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQSx5REFBZTtBQUNmO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGdEOzs7Ozs7QUNqS2tDO0FBQ3dCO0FBQ2Q7QUFDSDs7QUFFekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLHdCQUFROztBQUV4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFZSwyQkFBMkIsdUJBQVE7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0Esb0RBQW9ELG9CQUFvQjtBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUksd0JBQU07O0FBRVY7O0FBRUE7O0FBRUEseUJBQXlCLHdCQUFRO0FBQ2pDO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0ZBQWdGLG9CQUFvQjs7QUFFcEc7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vY2xhc3Nlcy9yZW5kZXJidWZmZXItZm9ybWF0cy5qcz85NGQ2Iiwid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vY2xhc3Nlcy9yZW5kZXJidWZmZXIuanM/NmI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFWFRfRkxPQVRfV0VCR0wyID0gJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBbMzMxODldOiB7XG4gICAgYnBwOiAyXG4gIH0sXG4gIFszMzE5MF06IHtcbiAgICBnbDI6IHRydWUsXG4gICAgYnBwOiAzXG4gIH0sXG4gIFszNjAxMl06IHtcbiAgICBnbDI6IHRydWUsXG4gICAgYnBwOiA0XG4gIH0sXG4gIFszNjE2OF06IHtcbiAgICBicHA6IDFcbiAgfSxcbiAgWzM0MDQxXToge1xuICAgIGJwcDogNFxuICB9LFxuICBbMzUwNTZdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzYwMTNdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNVxuICB9LFxuICBbMzI4NTRdOiB7XG4gICAgYnBwOiAyXG4gIH0sXG4gIFszNjE5NF06IHtcbiAgICBicHA6IDJcbiAgfSxcbiAgWzMyODU1XToge1xuICAgIGJwcDogMlxuICB9LFxuICBbMzMzMjFdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMVxuICB9LFxuICBbMzMzMzBdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMVxuICB9LFxuICBbMzMzMjldOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMVxuICB9LFxuICBbMzMzMzJdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMlxuICB9LFxuICBbMzMzMzFdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMlxuICB9LFxuICBbMzMzMzRdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzMzMzNdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzMzMjNdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMlxuICB9LFxuICBbMzMzMzZdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMlxuICB9LFxuICBbMzMzMzVdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMlxuICB9LFxuICBbMzMzMzhdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzMzMzddOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzMzNDBdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogOFxuICB9LFxuICBbMzMzMzldOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogOFxuICB9LFxuICBbMzI4NDldOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogM1xuICB9LFxuICBbMzI4NTZdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzI4NTddOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzYyMjBdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzYyMzhdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzY5NzVdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogNFxuICB9LFxuICBbMzYyMTRdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogOFxuICB9LFxuICBbMzYyMzJdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogOFxuICB9LFxuICBbMzYyMjZdOiB7XG4gICAgZ2wyOiB0cnVlLFxuICAgIGJwcDogMTZcbiAgfSxcbiAgWzM2MjA4XToge1xuICAgIGdsMjogdHJ1ZSxcbiAgICBicHA6IDE2XG4gIH0sXG4gIFszMzMyNV06IHtcbiAgICBnbDI6IEVYVF9GTE9BVF9XRUJHTDIsXG4gICAgYnBwOiAyXG4gIH0sXG4gIFszMzMyN106IHtcbiAgICBnbDI6IEVYVF9GTE9BVF9XRUJHTDIsXG4gICAgYnBwOiA0XG4gIH0sXG4gIFszNDg0Ml06IHtcbiAgICBnbDI6IEVYVF9GTE9BVF9XRUJHTDIsXG4gICAgYnBwOiA4XG4gIH0sXG4gIFszMzMyNl06IHtcbiAgICBnbDI6IEVYVF9GTE9BVF9XRUJHTDIsXG4gICAgYnBwOiA0XG4gIH0sXG4gIFszMzMyOF06IHtcbiAgICBnbDI6IEVYVF9GTE9BVF9XRUJHTDIsXG4gICAgYnBwOiA4XG4gIH0sXG4gIFszNDgzNl06IHtcbiAgICBnbDI6IEVYVF9GTE9BVF9XRUJHTDIsXG4gICAgYnBwOiAxNlxuICB9LFxuICBbMzU4OThdOiB7XG4gICAgZ2wyOiBFWFRfRkxPQVRfV0VCR0wyLFxuICAgIGJwcDogNFxuICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyYnVmZmVyLWZvcm1hdHMuanMubWFwIiwiaW1wb3J0IFJlc291cmNlIGZyb20gJy4vcmVzb3VyY2UnO1xuaW1wb3J0IFJFTkRFUkJVRkZFUl9GT1JNQVRTIGZyb20gJy4vcmVuZGVyYnVmZmVyLWZvcm1hdHMnO1xuaW1wb3J0IHsgaXNXZWJHTDIgfSBmcm9tICdAbHVtYS5nbC9nbHRvb2xzJztcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4uL3V0aWxzL2Fzc2VydCc7XG5cbmZ1bmN0aW9uIGlzRm9ybWF0U3VwcG9ydGVkKGdsLCBmb3JtYXQsIGZvcm1hdHMpIHtcbiAgY29uc3QgaW5mbyA9IGZvcm1hdHNbZm9ybWF0XTtcblxuICBpZiAoIWluZm8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB2YWx1ZSA9IGlzV2ViR0wyKGdsKSA/IGluZm8uZ2wyIHx8IGluZm8uZ2wxIDogaW5mby5nbDE7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZ2wuZ2V0RXh0ZW5zaW9uKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyYnVmZmVyIGV4dGVuZHMgUmVzb3VyY2Uge1xuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdSZW5kZXJidWZmZXInO1xuICB9XG5cbiAgc3RhdGljIGlzU3VwcG9ydGVkKGdsKSB7XG4gICAgbGV0IHtcbiAgICAgIGZvcm1hdFxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIGZvcm1hdDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuICFmb3JtYXQgfHwgaXNGb3JtYXRTdXBwb3J0ZWQoZ2wsIGZvcm1hdCwgUkVOREVSQlVGRkVSX0ZPUk1BVFMpO1xuICB9XG5cbiAgc3RhdGljIGdldFNhbXBsZXNGb3JGb3JtYXQoZ2wsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybWF0XG4gICAgfSA9IF9yZWY7XG4gICAgcmV0dXJuIGdsLmdldEludGVybmFsZm9ybWF0UGFyYW1ldGVyKDM2MTYxLCBmb3JtYXQsIDMyOTM3KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGdsKSB7XG4gICAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN1cGVyKGdsLCBvcHRzKTtcbiAgICB0aGlzLmluaXRpYWxpemUob3B0cyk7XG4gICAgT2JqZWN0LnNlYWwodGhpcyk7XG4gIH1cblxuICBpbml0aWFsaXplKF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIGZvcm1hdCxcbiAgICAgIHdpZHRoID0gMSxcbiAgICAgIGhlaWdodCA9IDEsXG4gICAgICBzYW1wbGVzID0gMFxuICAgIH0gPSBfcmVmMjtcbiAgICBhc3NlcnQoZm9ybWF0LCAnTmVlZHMgZm9ybWF0Jyk7XG5cbiAgICB0aGlzLl90cmFja0RlYWxsb2NhdGVkTWVtb3J5KCk7XG5cbiAgICB0aGlzLmdsLmJpbmRSZW5kZXJidWZmZXIoMzYxNjEsIHRoaXMuaGFuZGxlKTtcblxuICAgIGlmIChzYW1wbGVzICE9PSAwICYmIGlzV2ViR0wyKHRoaXMuZ2wpKSB7XG4gICAgICB0aGlzLmdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSgzNjE2MSwgc2FtcGxlcywgZm9ybWF0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nbC5yZW5kZXJidWZmZXJTdG9yYWdlKDM2MTYxLCBmb3JtYXQsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLnNhbXBsZXMgPSBzYW1wbGVzO1xuXG4gICAgdGhpcy5fdHJhY2tBbGxvY2F0ZWRNZW1vcnkodGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0ICogKHRoaXMuc2FtcGxlcyB8fCAxKSAqIFJFTkRFUkJVRkZFUl9GT1JNQVRTW3RoaXMuZm9ybWF0XS5icHApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXNpemUoX3JlZjMpIHtcbiAgICBsZXQge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHRcbiAgICB9ID0gX3JlZjM7XG5cbiAgICBpZiAod2lkdGggIT09IHRoaXMud2lkdGggfHwgaGVpZ2h0ICE9PSB0aGlzLmhlaWdodCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZSh7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgIHNhbXBsZXM6IHRoaXMuc2FtcGxlc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBfY3JlYXRlSGFuZGxlKCkge1xuICAgIHJldHVybiB0aGlzLmdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICB9XG5cbiAgX2RlbGV0ZUhhbmRsZSgpIHtcbiAgICB0aGlzLmdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLmhhbmRsZSk7XG5cbiAgICB0aGlzLl90cmFja0RlYWxsb2NhdGVkTWVtb3J5KCk7XG4gIH1cblxuICBfYmluZEhhbmRsZShoYW5kbGUpIHtcbiAgICB0aGlzLmdsLmJpbmRSZW5kZXJidWZmZXIoMzYxNjEsIGhhbmRsZSk7XG4gIH1cblxuICBfc3luY0hhbmRsZShoYW5kbGUpIHtcbiAgICB0aGlzLmZvcm1hdCA9IHRoaXMuZ2V0UGFyYW1ldGVyKDM2MTY0KTtcbiAgICB0aGlzLndpZHRoID0gdGhpcy5nZXRQYXJhbWV0ZXIoMzYxNjIpO1xuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5nZXRQYXJhbWV0ZXIoMzYxNjMpO1xuICAgIHRoaXMuc2FtcGxlcyA9IHRoaXMuZ2V0UGFyYW1ldGVyKDM2MDExKTtcbiAgfVxuXG4gIF9nZXRQYXJhbWV0ZXIocG5hbWUpIHtcbiAgICB0aGlzLmdsLmJpbmRSZW5kZXJidWZmZXIoMzYxNjEsIHRoaXMuaGFuZGxlKTtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2wuZ2V0UmVuZGVyYnVmZmVyUGFyYW1ldGVyKDM2MTYxLCBwbmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlcmJ1ZmZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94041\n")},87577:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ Resource; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(49835);\n/* harmony import */ var _webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79579);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22525);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74538);\n/* harmony import */ var _utils_stub_methods__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37469);\n\n\n\n\n\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\nclass Resource {\n  get [Symbol.toStringTag]() {\n    return 'Resource';\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGLContext */ .JD)(gl);\n    const {\n      id,\n      userData = {}\n    } = opts;\n    this.gl = gl;\n    this.gl2 = gl;\n    this.id = id || (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .hQ)(this[Symbol.toStringTag]);\n    this.userData = userData;\n    this._bound = false;\n    this._handle = opts.handle;\n\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return \"\".concat(this[Symbol.toStringTag] || this.constructor.name, \"(\").concat(this.id, \")\");\n  }\n\n  get handle() {\n    return this._handle;\n  }\n\n  delete() {\n    let {\n      deleteChildren = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const children = this._handle && this._deleteHandle(this._handle);\n\n    if (this._handle) {\n      this._removeStats();\n    }\n\n    this._handle = null;\n\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => child.delete());\n    }\n\n    return this;\n  }\n\n  bind() {\n    let funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;\n\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n\n      this._bound = true;\n      value = funcOrHandle();\n      this._bound = false;\n\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  getParameter(pname) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    pname = (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_2__/* .getKeyValue */ .sF)(this.gl, pname);\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(pname);\n    const parameters = this.constructor.PARAMETERS || {};\n    const parameter = parameters[pname];\n\n    if (parameter) {\n      const isWebgl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(this.gl);\n      const parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    return this._getParameter(pname, opts);\n  }\n\n  getParameters() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      parameters,\n      keys\n    } = options;\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n    const isWebgl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(this.gl);\n    const values = {};\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n      const parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_2__/* .getKey */ .km)(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, options);\n\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_2__/* .getKey */ .km)(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  setParameter(pname, value) {\n    pname = (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_2__/* .getKeyValue */ .sF)(this.gl, pname);\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(pname);\n    const parameters = this.constructor.PARAMETERS || {};\n    const parameter = parameters[pname];\n\n    if (parameter) {\n      const isWebgl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(this.gl);\n      const parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      if (parameter.type === 'GLenum') {\n        value = (0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_2__/* .getKeyValue */ .sF)(value);\n      }\n    }\n\n    this._setParameter(pname, value);\n\n    return this;\n  }\n\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n\n    return this;\n  }\n\n  stubRemovedMethods(className, version, methodNames) {\n    return (0,_utils_stub_methods__WEBPACK_IMPORTED_MODULE_4__/* .stubRemovedMethods */ .F)(this, className, version, methodNames);\n  }\n\n  initialize(opts) {}\n\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this[Symbol.toStringTag];\n    const stats = _init__WEBPACK_IMPORTED_MODULE_5__/* .lumaStats.get */ .lR.get('Resource Counts');\n    stats.get('Resources Created').incrementCount();\n    stats.get(\"\".concat(name, \"s Created\")).incrementCount();\n    stats.get(\"\".concat(name, \"s Active\")).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this[Symbol.toStringTag];\n    const stats = _init__WEBPACK_IMPORTED_MODULE_5__/* .lumaStats.get */ .lR.get('Resource Counts');\n    stats.get(\"\".concat(name, \"s Active\")).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];\n\n    this._trackAllocatedMemoryForContext(bytes, name);\n\n    this._trackAllocatedMemoryForContext(bytes, name, this.gl.canvas && this.gl.canvas.id);\n\n    this.byteLength = bytes;\n  }\n\n  _trackAllocatedMemoryForContext(bytes) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];\n    let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    const stats = _init__WEBPACK_IMPORTED_MODULE_5__/* .lumaStats.get */ .lR.get(\"Memory Usage\".concat(id));\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(\"\".concat(name, \" Memory\")).addCount(bytes);\n  }\n\n  _trackDeallocatedMemory() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];\n\n    this._trackDeallocatedMemoryForContext(name);\n\n    this._trackDeallocatedMemoryForContext(name, this.gl.canvas && this.gl.canvas.id);\n\n    this.byteLength = 0;\n  }\n\n  _trackDeallocatedMemoryForContext() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    const stats = _init__WEBPACK_IMPORTED_MODULE_5__/* .lumaStats.get */ .lR.get(\"Memory Usage\".concat(id));\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(\"\".concat(name, \" Memory\")).subtractCount(this.byteLength);\n  }\n\n}\n//# sourceMappingURL=resource.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87577\n")},51621:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ Texture2D; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture.js\nvar texture = __webpack_require__(35008);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar utils_assert = __webpack_require__(22525);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/load-file.js\n\nlet pathPrefix = '';\nfunction setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\nfunction loadFile(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\nfunction loadImage(url, opts) {\n  (0,utils_assert/* assert */.h)(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n\n      image.onload = () => resolve(image);\n\n      image.onerror = () => reject(new Error(\"Could not load image \".concat(url, \".\")));\n\n      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n//# sourceMappingURL=load-file.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-2d.js\n\n\n\nclass Texture2D extends texture/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'Texture2D';\n  }\n\n  static isSupported(gl, opts) {\n    return texture/* default.isSupported */.Z.isSupported(gl, opts);\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,esm/* assertWebGLContext */.JD)(gl);\n\n    if (props instanceof Promise || typeof props === 'string') {\n      props = {\n        data: props\n      };\n    }\n\n    if (typeof props.data === 'string') {\n      props = Object.assign({}, props, {\n        data: loadImage(props.data)\n      });\n    }\n\n    super(gl, Object.assign({}, props, {\n      target: 3553\n    }));\n    this.initialize(props);\n    Object.seal(this);\n  }\n\n}\n//# sourceMappingURL=texture-2d.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE2MjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF5QztBQUN6QztBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxFQUFFLDhCQUFNO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUM7O0FDOUJzRDtBQUN0QjtBQUNlO0FBQ2hDLHdCQUF3QixzQkFBTztBQUM5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLDhDQUFtQjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0EsSUFBSSxrQ0FBa0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEI7QUFDOUIsY0FBYyxTQUFTO0FBQ3ZCLE9BQU87QUFDUDs7QUFFQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3dlYmdsL2Rpc3QvZXNtL3V0aWxzL2xvYWQtZmlsZS5qcz8zOWJjIiwid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vY2xhc3Nlcy90ZXh0dXJlLTJkLmpzPzdiOTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbHMvYXNzZXJ0JztcbmxldCBwYXRoUHJlZml4ID0gJyc7XG5leHBvcnQgZnVuY3Rpb24gc2V0UGF0aFByZWZpeChwcmVmaXgpIHtcbiAgcGF0aFByZWZpeCA9IHByZWZpeDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRmlsZSh1cmwpIHtcbiAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBhc3NlcnQodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpO1xuICB1cmwgPSBwYXRoUHJlZml4ICsgdXJsO1xuICBjb25zdCBkYXRhVHlwZSA9IG9wdGlvbnMuZGF0YVR5cGUgfHwgJ3RleHQnO1xuICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHJlcyA9PiByZXNbZGF0YVR5cGVdKCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbWFnZSh1cmwsIG9wdHMpIHtcbiAgYXNzZXJ0KHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKTtcbiAgdXJsID0gcGF0aFByZWZpeCArIHVybDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWFnZSk7XG5cbiAgICAgIGltYWdlLm9uZXJyb3IgPSAoKSA9PiByZWplY3QobmV3IEVycm9yKFwiQ291bGQgbm90IGxvYWQgaW1hZ2UgXCIuY29uY2F0KHVybCwgXCIuXCIpKSk7XG5cbiAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gb3B0cyAmJiBvcHRzLmNyb3NzT3JpZ2luIHx8ICdhbm9ueW1vdXMnO1xuICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkLWZpbGUuanMubWFwIiwiaW1wb3J0IHsgYXNzZXJ0V2ViR0xDb250ZXh0IH0gZnJvbSAnQGx1bWEuZ2wvZ2x0b29scyc7XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL3RleHR1cmUnO1xuaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSAnLi4vdXRpbHMvbG9hZC1maWxlJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHR1cmUyRCBleHRlbmRzIFRleHR1cmUge1xuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdUZXh0dXJlMkQnO1xuICB9XG5cbiAgc3RhdGljIGlzU3VwcG9ydGVkKGdsLCBvcHRzKSB7XG4gICAgcmV0dXJuIFRleHR1cmUuaXNTdXBwb3J0ZWQoZ2wsIG9wdHMpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZ2wpIHtcbiAgICBsZXQgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGFzc2VydFdlYkdMQ29udGV4dChnbCk7XG5cbiAgICBpZiAocHJvcHMgaW5zdGFuY2VvZiBQcm9taXNlIHx8IHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHByb3BzID0ge1xuICAgICAgICBkYXRhOiBwcm9wc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByb3BzLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgIGRhdGE6IGxvYWRJbWFnZShwcm9wcy5kYXRhKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3VwZXIoZ2wsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICB0YXJnZXQ6IDM1NTNcbiAgICB9KSk7XG4gICAgdGhpcy5pbml0aWFsaXplKHByb3BzKTtcbiAgICBPYmplY3Quc2VhbCh0aGlzKTtcbiAgfVxuXG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0dXJlLTJkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51621\n")},33889:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "C": function() { return /* binding */ DATA_FORMAT_CHANNELS; },\n/* harmony export */   "KR": function() { return /* binding */ isLinearFilteringSupported; },\n/* harmony export */   "ae": function() { return /* binding */ TEXTURE_FORMATS; },\n/* harmony export */   "br": function() { return /* binding */ isFormatSupported; },\n/* harmony export */   "pH": function() { return /* binding */ TYPE_SIZES; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n\nconst TEXTURE_FORMATS = {\n  [6407]: {\n    dataFormat: 6407,\n    types: [5121, 33635]\n  },\n  [6408]: {\n    dataFormat: 6408,\n    types: [5121, 32819, 32820]\n  },\n  [6406]: {\n    dataFormat: 6406,\n    types: [5121]\n  },\n  [6409]: {\n    dataFormat: 6409,\n    types: [5121]\n  },\n  [6410]: {\n    dataFormat: 6410,\n    types: [5121]\n  },\n  [33326]: {\n    dataFormat: 6403,\n    types: [5126],\n    gl2: true\n  },\n  [33328]: {\n    dataFormat: 33319,\n    types: [5126],\n    gl2: true\n  },\n  [34837]: {\n    dataFormat: 6407,\n    types: [5126],\n    gl2: true\n  },\n  [34836]: {\n    dataFormat: 6408,\n    types: [5126],\n    gl2: true\n  }\n};\nconst DATA_FORMAT_CHANNELS = {\n  [6403]: 1,\n  [36244]: 1,\n  [33319]: 2,\n  [33320]: 2,\n  [6407]: 3,\n  [36248]: 3,\n  [6408]: 4,\n  [36249]: 4,\n  [6402]: 1,\n  [34041]: 1,\n  [6406]: 1,\n  [6409]: 1,\n  [6410]: 2\n};\nconst TYPE_SIZES = {\n  [5126]: 4,\n  [5125]: 4,\n  [5124]: 4,\n  [5123]: 2,\n  [5122]: 2,\n  [5131]: 2,\n  [5120]: 1,\n  [5121]: 1\n};\nfunction isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n\n  if (!info) {\n    return false;\n  }\n\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    return true;\n  }\n\n  const value = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === \'string\' ? gl.getExtension(value) : value;\n}\nfunction isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n\n  switch (info && info.types[0]) {\n    case 5126:\n      return gl.getExtension(\'OES_texture_float_linear\');\n\n    case 5131:\n      return gl.getExtension(\'OES_texture_half_float_linear\');\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=texture-formats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM4ODkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDckM7QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixvRUFBUTtBQUN4QjtBQUNBO0FBQ087QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS9jbGFzc2VzL3RleHR1cmUtZm9ybWF0cy5qcz83NmI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzV2ViR0wyIH0gZnJvbSAnQGx1bWEuZ2wvZ2x0b29scyc7XG5leHBvcnQgY29uc3QgVEVYVFVSRV9GT1JNQVRTID0ge1xuICBbNjQwN106IHtcbiAgICBkYXRhRm9ybWF0OiA2NDA3LFxuICAgIHR5cGVzOiBbNTEyMSwgMzM2MzVdXG4gIH0sXG4gIFs2NDA4XToge1xuICAgIGRhdGFGb3JtYXQ6IDY0MDgsXG4gICAgdHlwZXM6IFs1MTIxLCAzMjgxOSwgMzI4MjBdXG4gIH0sXG4gIFs2NDA2XToge1xuICAgIGRhdGFGb3JtYXQ6IDY0MDYsXG4gICAgdHlwZXM6IFs1MTIxXVxuICB9LFxuICBbNjQwOV06IHtcbiAgICBkYXRhRm9ybWF0OiA2NDA5LFxuICAgIHR5cGVzOiBbNTEyMV1cbiAgfSxcbiAgWzY0MTBdOiB7XG4gICAgZGF0YUZvcm1hdDogNjQxMCxcbiAgICB0eXBlczogWzUxMjFdXG4gIH0sXG4gIFszMzMyNl06IHtcbiAgICBkYXRhRm9ybWF0OiA2NDAzLFxuICAgIHR5cGVzOiBbNTEyNl0sXG4gICAgZ2wyOiB0cnVlXG4gIH0sXG4gIFszMzMyOF06IHtcbiAgICBkYXRhRm9ybWF0OiAzMzMxOSxcbiAgICB0eXBlczogWzUxMjZdLFxuICAgIGdsMjogdHJ1ZVxuICB9LFxuICBbMzQ4MzddOiB7XG4gICAgZGF0YUZvcm1hdDogNjQwNyxcbiAgICB0eXBlczogWzUxMjZdLFxuICAgIGdsMjogdHJ1ZVxuICB9LFxuICBbMzQ4MzZdOiB7XG4gICAgZGF0YUZvcm1hdDogNjQwOCxcbiAgICB0eXBlczogWzUxMjZdLFxuICAgIGdsMjogdHJ1ZVxuICB9XG59O1xuZXhwb3J0IGNvbnN0IERBVEFfRk9STUFUX0NIQU5ORUxTID0ge1xuICBbNjQwM106IDEsXG4gIFszNjI0NF06IDEsXG4gIFszMzMxOV06IDIsXG4gIFszMzMyMF06IDIsXG4gIFs2NDA3XTogMyxcbiAgWzM2MjQ4XTogMyxcbiAgWzY0MDhdOiA0LFxuICBbMzYyNDldOiA0LFxuICBbNjQwMl06IDEsXG4gIFszNDA0MV06IDEsXG4gIFs2NDA2XTogMSxcbiAgWzY0MDldOiAxLFxuICBbNjQxMF06IDJcbn07XG5leHBvcnQgY29uc3QgVFlQRV9TSVpFUyA9IHtcbiAgWzUxMjZdOiA0LFxuICBbNTEyNV06IDQsXG4gIFs1MTI0XTogNCxcbiAgWzUxMjNdOiAyLFxuICBbNTEyMl06IDIsXG4gIFs1MTMxXTogMixcbiAgWzUxMjBdOiAxLFxuICBbNTEyMV06IDFcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtYXRTdXBwb3J0ZWQoZ2wsIGZvcm1hdCkge1xuICBjb25zdCBpbmZvID0gVEVYVFVSRV9GT1JNQVRTW2Zvcm1hdF07XG5cbiAgaWYgKCFpbmZvKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGluZm8uZ2wxID09PSB1bmRlZmluZWQgJiYgaW5mby5nbDIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgdmFsdWUgPSBpc1dlYkdMMihnbCkgPyBpbmZvLmdsMiB8fCBpbmZvLmdsMSA6IGluZm8uZ2wxO1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IGdsLmdldEV4dGVuc2lvbih2YWx1ZSkgOiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xpbmVhckZpbHRlcmluZ1N1cHBvcnRlZChnbCwgZm9ybWF0KSB7XG4gIGNvbnN0IGluZm8gPSBURVhUVVJFX0ZPUk1BVFNbZm9ybWF0XTtcblxuICBzd2l0Y2ggKGluZm8gJiYgaW5mby50eXBlc1swXSkge1xuICAgIGNhc2UgNTEyNjpcbiAgICAgIHJldHVybiBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuXG4gICAgY2FzZSA1MTMxOlxuICAgICAgcmV0dXJuIGdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dHVyZS1mb3JtYXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33889\n')},35008:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ Texture; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87577);\n/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53478);\n/* harmony import */ var _texture_formats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33889);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22525);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(74538);\n\n\n\n\n\n\nconst NPOT_MIN_FILTERS = [9729, 9728];\n\nconst WebGLBuffer = globalThis.WebGLBuffer || function WebGLBuffer() {};\n\nclass Texture extends _resource__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z {\n  get [Symbol.toStringTag]() {\n    return 'Texture';\n  }\n\n  static isSupported(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      format,\n      linearFiltering\n    } = opts;\n    let supported = true;\n\n    if (format) {\n      supported = supported && (0,_texture_formats__WEBPACK_IMPORTED_MODULE_2__/* .isFormatSupported */ .br)(gl, format);\n      supported = supported && (!linearFiltering || (0,_texture_formats__WEBPACK_IMPORTED_MODULE_2__/* .isLinearFilteringSupported */ .KR)(gl, format));\n    }\n\n    return supported;\n  }\n\n  constructor(gl, props) {\n    const {\n      id = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__/* .uid */ .hQ)('texture'),\n      handle,\n      target\n    } = props;\n    super(gl, {\n      id,\n      handle\n    });\n    this.target = target;\n    this.textureUnit = undefined;\n    this.loaded = false;\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return \"Texture(\".concat(this.id, \",\").concat(this.width, \"x\").concat(this.height, \")\");\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData => this.initialize(Object.assign({}, props, {\n        pixels: resolvedImageData,\n        data: resolvedImageData\n      })));\n      return this;\n    }\n\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null;\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = 6408,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    if (!data) {\n      data = pixels;\n    }\n\n    let {\n      width,\n      height,\n      dataFormat,\n      type,\n      compressed = false,\n      mipmaps = true\n    } = props;\n    const {\n      depth = 0\n    } = props;\n    ({\n      width,\n      height,\n      compressed,\n      dataFormat,\n      type\n    } = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(33984 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.warn */ .cM.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    this.setParameters(parameters);\n\n    if (recreate) {\n      this.data = data;\n    }\n\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {\n        video,\n        parameters,\n        lastTime\n      } = this._video;\n\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  resize(_ref) {\n    let {\n      height,\n      width,\n      mipmaps = false\n    } = _ref;\n\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n\n    return this;\n  }\n\n  generateMipmap() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this._isNPOT()) {\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.warn */ .cM.warn(\"texture: \".concat(this, \" is Non-Power-Of-Two, disabling mipmaping\"))();\n      return this;\n    }\n\n    this.mipmaps = true;\n    this.gl.bindTexture(this.target, this.handle);\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .withParameters */ .s8)(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    if (!data) {\n      data = pixels;\n    }\n\n    ({\n      type,\n      dataFormat,\n      compressed,\n      width,\n      height\n    } = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n    const {\n      gl\n    } = this;\n    gl.bindTexture(this.target, this.handle);\n    let dataType = null;\n    ({\n      data,\n      dataType\n    } = this._getDataType({\n      data,\n      compressed\n    }));\n    let gl2;\n    let compressedTextureSize = 0;\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .withParameters */ .s8)(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n\n        case 'typed-array':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n          break;\n\n        case 'buffer':\n          gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(gl);\n          gl2.bindBuffer(35052, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(35052, null);\n          break;\n\n        case 'browser-object':\n          if ((0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n\n          break;\n\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, border, levelData.data);\n            compressedTextureSize += levelData.levelSize;\n          }\n\n          break;\n\n        default:\n          (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(false, 'Unknown image data type');\n      }\n    });\n\n    if (dataType === 'compressed') {\n      this._trackAllocatedMemory(compressedTextureSize, 'Texture');\n    } else if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      const channels = _texture_formats__WEBPACK_IMPORTED_MODULE_2__/* .DATA_FORMAT_CHANNELS */ .C[this.dataFormat] || 4;\n      const channelSize = _texture_formats__WEBPACK_IMPORTED_MODULE_2__/* .TYPE_SIZES */ .pH[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n    return this;\n  }\n\n  setSubImageData(_ref2) {\n    let {\n      target = this.target,\n      pixels = null,\n      data = null,\n      x = 0,\n      y = 0,\n      width = this.width,\n      height = this.height,\n      level = 0,\n      format = this.format,\n      type = this.type,\n      dataFormat = this.dataFormat,\n      compressed = false,\n      offset = 0,\n      border = this.border,\n      parameters = {}\n    } = _ref2;\n    ({\n      type,\n      dataFormat,\n      compressed,\n      width,\n      height\n    } = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    if (!data) {\n      data = pixels;\n    }\n\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    if (data instanceof _buffer__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .withParameters */ .s8)(this.gl, parameters, () => {\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n        gl2.bindBuffer(35052, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(35052, null);\n      } else if ((0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(this.gl)) {\n        const gl2 = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n    this.gl.bindTexture(this.target, null);\n  }\n\n  copyFramebuffer() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.error */ .cM.error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(34016) - 33984;\n  }\n\n  bind() {\n    let textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n    const {\n      gl\n    } = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(33984 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    let textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;\n    const {\n      gl\n    } = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(33984 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  _getDataType(_ref3) {\n    let {\n      data,\n      compressed = false\n    } = _ref3;\n\n    if (compressed) {\n      return {\n        data,\n        dataType: 'compressed'\n      };\n    }\n\n    if (data === null) {\n      return {\n        data,\n        dataType: 'null'\n      };\n    }\n\n    if (ArrayBuffer.isView(data)) {\n      return {\n        data,\n        dataType: 'typed-array'\n      };\n    }\n\n    if (data instanceof _buffer__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .Z) {\n      return {\n        data: data.handle,\n        dataType: 'buffer'\n      };\n    }\n\n    if (data instanceof WebGLBuffer) {\n      return {\n        data,\n        dataType: 'buffer'\n      };\n    }\n\n    return {\n      data,\n      dataType: 'browser-object'\n    };\n  }\n\n  _deduceParameters(opts) {\n    const {\n      format,\n      data\n    } = opts;\n    let {\n      width,\n      height,\n      dataFormat,\n      type,\n      compressed\n    } = opts;\n    const textureFormat = _texture_formats__WEBPACK_IMPORTED_MODULE_2__/* .TEXTURE_FORMATS */ .ae[format];\n    dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;\n    type = type || textureFormat && textureFormat.types[0];\n    compressed = compressed || textureFormat && textureFormat.compressed;\n    ({\n      width,\n      height\n    } = this._deduceImageSize(data, width, height));\n    return {\n      dataFormat,\n      type,\n      compressed,\n      width,\n      height,\n      format,\n      data\n    };\n  }\n\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {\n        width: data.width,\n        height: data.height\n      };\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {\n        width: data.naturalWidth,\n        height: data.naturalHeight\n      };\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {\n        width: data.width,\n        height: data.height\n      };\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {\n        width: data.width,\n        height: data.height\n      };\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {\n        width: data.videoWidth,\n        height: data.videoHeight\n      };\n    } else if (!data) {\n      size = {\n        width: width >= 0 ? width : 1,\n        height: height >= 0 ? height : 1\n      };\n    } else {\n      size = {\n        width,\n        height\n      };\n    }\n\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(size, 'Could not deduced texture size');\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n    return size;\n  }\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case 4096:\n        return this.width;\n\n      case 4097:\n        return this.height;\n\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n    param = this._getNPOTParam(pname, param);\n\n    switch (pname) {\n      case 33082:\n      case 33083:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case 4096:\n      case 4097:\n        (0,_utils_assert__WEBPACK_IMPORTED_MODULE_4__/* .assert */ .h)(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if ((0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(this.gl)) {\n      return false;\n    }\n\n    if (!this.width || !this.height) {\n      return false;\n    }\n\n    return !(0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__/* .isPowerOfTwo */ .wt)(this.width) || !(0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__/* .isPowerOfTwo */ .wt)(this.height);\n  }\n\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case 10241:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            param = 9729;\n          }\n\n          break;\n\n        case 10242:\n        case 10243:\n          if (param !== 33071) {\n            param = 33071;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return param;\n  }\n\n}\n//# sourceMappingURL=texture.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35008\n")},51053:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ TransformFeedback; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87577);\n/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53478);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(74538);\n\n\n\n\nclass TransformFeedback extends _resource__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z {\n  get [Symbol.toStringTag]() {\n    return 'TransformFeedback';\n  }\n\n  static isSupported(gl) {\n    return (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(gl);\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .assertWebGL2Context */ .KQ)(gl);\n    super(gl, props);\n    this.initialize(props);\n    this.stubRemovedMethods('TransformFeedback', 'v6.0', ['pause', 'resume']);\n    Object.seal(this);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.buffers = {};\n    this.unused = {};\n    this.configuration = null;\n    this.bindOnUse = true;\n\n    if (!(0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__/* .isObjectEmpty */ .nK)(this.buffers)) {\n      this.bind(() => this._unbindBuffers());\n    }\n\n    this.setProps(props);\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n\n    if ('buffers' in props) {\n      this.setBuffers(props.buffers);\n    }\n  }\n\n  setBuffers() {\n    let buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.bind(() => {\n      for (const bufferName in buffers) {\n        this.setBuffer(bufferName, buffers[bufferName]);\n      }\n    });\n    return this;\n  }\n\n  setBuffer(locationOrName, bufferOrParams) {\n    const location = this._getVaryingIndex(locationOrName);\n\n    const {\n      buffer,\n      byteSize,\n      byteOffset\n    } = this._getBufferParams(bufferOrParams);\n\n    if (location < 0) {\n      this.unused[locationOrName] = buffer;\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.warn */ .cM.warn(\"\".concat(this.id, \" unused varying buffer \").concat(locationOrName))();\n      return this;\n    }\n\n    this.buffers[location] = bufferOrParams;\n\n    if (!this.bindOnUse) {\n      this._bindBuffer(location, buffer, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  begin() {\n    let primitiveMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.gl.bindTransformFeedback(36386, this.handle);\n\n    this._bindBuffers();\n\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  end() {\n    this.gl.endTransformFeedback();\n\n    this._unbindBuffers();\n\n    this.gl.bindTransformFeedback(36386, null);\n    return this;\n  }\n\n  _getBufferParams(bufferOrParams) {\n    let byteOffset;\n    let byteSize;\n    let buffer;\n\n    if (bufferOrParams instanceof _buffer__WEBPACK_IMPORTED_MODULE_3__/* [\"default\"] */ .Z === false) {\n      buffer = bufferOrParams.buffer;\n      byteSize = bufferOrParams.byteSize;\n      byteOffset = bufferOrParams.byteOffset;\n    } else {\n      buffer = bufferOrParams;\n    }\n\n    if (byteOffset !== undefined || byteSize !== undefined) {\n      byteOffset = byteOffset || 0;\n      byteSize = byteSize || buffer.byteLength - byteOffset;\n    }\n\n    return {\n      buffer,\n      byteOffset,\n      byteSize\n    };\n  }\n\n  _getVaryingInfo(locationOrName) {\n    return this.configuration && this.configuration.getVaryingInfo(locationOrName);\n  }\n\n  _getVaryingIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getVaryingInfo(locationOrName).location;\n    }\n\n    const location = Number(locationOrName);\n    return Number.isFinite(location) ? location : -1;\n  }\n\n  _bindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        const {\n          buffer,\n          byteSize,\n          byteOffset\n        } = this._getBufferParams(this.buffers[bufferIndex]);\n\n        this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);\n      }\n    }\n  }\n\n  _unbindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        this._bindBuffer(bufferIndex, null);\n      }\n    }\n  }\n\n  _bindBuffer(index, buffer) {\n    let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let byteSize = arguments.length > 3 ? arguments[3] : undefined;\n    const handle = buffer && buffer.handle;\n\n    if (!handle || byteSize === undefined) {\n      this.gl.bindBufferBase(35982, index, handle);\n    } else {\n      this.gl.bindBufferRange(35982, index, handle, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindTransformFeedback(36386, this.handle);\n  }\n\n}\n//# sourceMappingURL=transform-feedback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51053\n")},55045:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ VertexArray; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/accessor.js\nvar classes_accessor = __webpack_require__(14072);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/buffer.js\nvar classes_buffer = __webpack_require__(53478);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/resource.js\nvar resource = __webpack_require__(87577);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/array-utils-flat.js\nlet arrayBuffer = null;\nfunction getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n\n  return arrayBuffer;\n}\nfunction getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length);\n}\nfunction fillArray(_ref) {\n  let {\n    target,\n    source,\n    start = 0,\n    count = 1\n  } = _ref;\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n//# sourceMappingURL=array-utils-flat.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar assert = __webpack_require__(22525);\n// EXTERNAL MODULE: ./node_modules/@probe.gl/env/dist/esm/lib/get-browser.js\nvar get_browser = __webpack_require__(3485);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/vertex-array-object.js\n\n\n\n\n\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\nclass VertexArrayObject extends resource/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'VertexArrayObject';\n  }\n\n  static isSupported(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.constantAttributeZero) {\n      return (0,esm/* isWebGL2 */.D0)(gl) || (0,get_browser/* default */.Z)() === 'Chrome';\n    }\n\n    return true;\n  }\n\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n        handle: null,\n        isDefaultArray: true\n      });\n    }\n\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n\n        break;\n\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n\n        break;\n\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n\n        break;\n\n      default:\n        (0,assert/* assert */.h)(false);\n    }\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    super(gl, Object.assign({}, opts, {\n      id\n    }));\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n    this.gl2 = gl;\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    return this;\n  }\n\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,assert/* assert */.h)(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);\n    this.bind(() => {\n      this.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n    });\n    return this;\n  }\n\n  setBuffer(location, buffer, accessor) {\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {\n      size,\n      type,\n      stride,\n      offset,\n      normalized,\n      integer,\n      divisor\n    } = accessor;\n    const {\n      gl,\n      gl2\n    } = this;\n    location = Number(location);\n    this.bind(() => {\n      gl.bindBuffer(34962, buffer.handle);\n\n      if (integer) {\n        (0,assert/* assert */.h)((0,esm/* isWebGL2 */.D0)(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n    });\n    return this;\n  }\n\n  enable(location) {\n    let enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const disablingAttributeZero = !enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    });\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(() => enable ? this.gl.enableVertexAttribArray(location) : this.gl.disableVertexAttribArray(location));\n    }\n\n    return this;\n  }\n\n  getConstantBuffer(elementCount, value) {\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n    let updateNeeded = !this.buffer;\n    this.buffer = this.buffer || new classes_buffer/* default */.Z(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n    updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({\n        target: typedArray,\n        source: constantValue,\n        start: 0,\n        count: length\n      });\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n\n      default:\n        (0,assert/* assert */.h)(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    (0,assert/* assert */.h)((0,esm/* isWebGL2 */.D0)(gl));\n\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n\n      default:\n        (0,assert/* assert */.h)(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    (0,assert/* assert */.h)((0,esm/* isWebGL2 */.D0)(gl));\n\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n\n      default:\n        (0,assert/* assert */.h)(false);\n    }\n  }\n\n  _createHandle() {\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    return [this.elements];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  _getParameter(pname, _ref) {\n    let {\n      location\n    } = _ref;\n    (0,assert/* assert */.h)(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case 34373:\n          return this.gl.getVertexAttribOffset(location, pname);\n\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n}\n//# sourceMappingURL=vertex-array-object.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/stub-methods.js\nvar stub_methods = __webpack_require__(37469);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/vertex-array.js\n\n\n\n\n\n\nconst ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\nconst DEPRECATIONS_V6 = ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable'];\nclass VertexArray {\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null;\n    this.attributes = {};\n    this.vertexArrayObject = new VertexArrayObject(gl);\n    (0,stub_methods/* stubRemovedMethods */.F)(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  reset() {\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {\n      MAX_ATTRIBUTES\n    } = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n    this.drawParams = null;\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n\n    return this;\n  }\n\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    this.drawParams = this.drawParams || this._updateDrawParams();\n    return this.drawParams;\n  }\n\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n\n        this._setAttribute(locationOrName, value);\n      }\n\n      this.gl.bindBuffer(34962, null);\n    });\n    return this;\n  }\n\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.elements = elementBuffer;\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    return this;\n  }\n\n  setBuffer(locationOrName, buffer) {\n    let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {\n      location,\n      accessor\n    } = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor);\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  setConstant(locationOrName, arrayValue) {\n    let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    const {\n      location,\n      accessor\n    } = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({\n      size: arrayValue.length\n    }, appAccessor));\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      this.buffer = this.buffer || new classes_buffer/* default */.Z(this.gl, {\n        accessor: {\n          size: 4\n        }\n      });\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof classes_buffer/* default */.Z) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(34962, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n\n        if (buffer instanceof classes_buffer/* default */.Z) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n    this.vertexArrayObject.bind(() => {\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n    return value;\n  }\n\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {\n      location,\n      name\n    } = this._getAttributeIndex(locationOrName);\n\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      esm/* log.once */.cM.once(3, () => \"unused value \".concat(locationOrName, \" in \").concat(this.id))();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = classes_accessor/* default.resolve */.Z.resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);\n    const {\n      size,\n      type\n    } = accessor;\n    (0,assert/* assert */.h)(Number.isFinite(size) && Number.isFinite(type));\n    return {\n      location,\n      accessor\n    };\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n\n    if (Number.isFinite(location)) {\n      return {\n        location\n      };\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {\n      location: -1\n    };\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof classes_buffer/* default */.Z) {\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof classes_buffer/* default */.Z) {\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof classes_buffer/* default */.Z) {\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  _setConstantAttributes(vertexCount, instanceCount) {\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    })) {\n      this._setConstantAttribute(0, constant);\n\n      return;\n    }\n\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    const {\n      divisor\n    } = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof classes_buffer/* default */.Z) {\n      const buffer = value;\n\n      if (isInstanced) {\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  setElements() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    esm/* log.deprecated */.cM.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n\n}\n//# sourceMappingURL=vertex-array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55045\n")},3124:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "n": function() { return /* binding */ getDebugTableForProgramConfiguration; }\n/* harmony export */ });\n/* harmony import */ var _webgl_utils_attribute_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38522);\n\nfunction getDebugTableForProgramConfiguration(config) {\n  const table = {};\n  const header = "Accessors for ".concat(config.id);\n\n  for (const attributeInfo of config.attributeInfos) {\n    if (attributeInfo) {\n      const glslDeclaration = getGLSLDeclaration(attributeInfo);\n      table["in ".concat(glslDeclaration)] = {\n        [header]: JSON.stringify(attributeInfo.accessor)\n      };\n    }\n  }\n\n  for (const varyingInfo of config.varyingInfos) {\n    if (varyingInfo) {\n      const glslDeclaration = getGLSLDeclaration(varyingInfo);\n      table["out ".concat(glslDeclaration)] = {\n        [header]: JSON.stringify(varyingInfo.accessor)\n      };\n    }\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  const {\n    type,\n    size\n  } = attributeInfo.accessor;\n  const typeAndName = (0,_webgl_utils_attribute_utils__WEBPACK_IMPORTED_MODULE_0__/* .getCompositeGLType */ .jG)(type, size);\n\n  if (typeAndName) {\n    return "".concat(typeAndName.name, " ").concat(attributeInfo.name);\n  }\n\n  return attributeInfo.name;\n}\n//# sourceMappingURL=debug-program-configuration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEyNC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQW9FO0FBQzdEO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixzQkFBc0IsMEZBQWtCOztBQUV4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS9kZWJ1Zy9kZWJ1Zy1wcm9ncmFtLWNvbmZpZ3VyYXRpb24uanM/ZDMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDb21wb3NpdGVHTFR5cGUgfSBmcm9tICcuLi93ZWJnbC11dGlscy9hdHRyaWJ1dGUtdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlYnVnVGFibGVGb3JQcm9ncmFtQ29uZmlndXJhdGlvbihjb25maWcpIHtcbiAgY29uc3QgdGFibGUgPSB7fTtcbiAgY29uc3QgaGVhZGVyID0gXCJBY2Nlc3NvcnMgZm9yIFwiLmNvbmNhdChjb25maWcuaWQpO1xuXG4gIGZvciAoY29uc3QgYXR0cmlidXRlSW5mbyBvZiBjb25maWcuYXR0cmlidXRlSW5mb3MpIHtcbiAgICBpZiAoYXR0cmlidXRlSW5mbykge1xuICAgICAgY29uc3QgZ2xzbERlY2xhcmF0aW9uID0gZ2V0R0xTTERlY2xhcmF0aW9uKGF0dHJpYnV0ZUluZm8pO1xuICAgICAgdGFibGVbXCJpbiBcIi5jb25jYXQoZ2xzbERlY2xhcmF0aW9uKV0gPSB7XG4gICAgICAgIFtoZWFkZXJdOiBKU09OLnN0cmluZ2lmeShhdHRyaWJ1dGVJbmZvLmFjY2Vzc29yKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHZhcnlpbmdJbmZvIG9mIGNvbmZpZy52YXJ5aW5nSW5mb3MpIHtcbiAgICBpZiAodmFyeWluZ0luZm8pIHtcbiAgICAgIGNvbnN0IGdsc2xEZWNsYXJhdGlvbiA9IGdldEdMU0xEZWNsYXJhdGlvbih2YXJ5aW5nSW5mbyk7XG4gICAgICB0YWJsZVtcIm91dCBcIi5jb25jYXQoZ2xzbERlY2xhcmF0aW9uKV0gPSB7XG4gICAgICAgIFtoZWFkZXJdOiBKU09OLnN0cmluZ2lmeSh2YXJ5aW5nSW5mby5hY2Nlc3NvcilcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuXG5mdW5jdGlvbiBnZXRHTFNMRGVjbGFyYXRpb24oYXR0cmlidXRlSW5mbykge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBzaXplXG4gIH0gPSBhdHRyaWJ1dGVJbmZvLmFjY2Vzc29yO1xuICBjb25zdCB0eXBlQW5kTmFtZSA9IGdldENvbXBvc2l0ZUdMVHlwZSh0eXBlLCBzaXplKTtcblxuICBpZiAodHlwZUFuZE5hbWUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQodHlwZUFuZE5hbWUubmFtZSwgXCIgXCIpLmNvbmNhdChhdHRyaWJ1dGVJbmZvLm5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIGF0dHJpYnV0ZUluZm8ubmFtZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLXByb2dyYW0tY29uZmlndXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3124\n')},49258:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"d\": function() { return /* binding */ getDebugTableForUniforms; }\n/* harmony export */ });\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22525);\n/* harmony import */ var _utils_format_value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(89561);\n\n\nfunction getDebugTableForUniforms(_ref) {\n  let {\n    header = 'Uniforms',\n    program,\n    uniforms,\n    undefinedOnly = false\n  } = _ref;\n  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__/* .assert */ .h)(program);\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';\n  const uniformLocations = program._uniformSetters;\n  const table = {};\n  const uniformNames = Object.keys(uniformLocations).sort();\n  let count = 0;\n\n  for (const uniformName of uniformNames) {\n    if (!uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({\n        table,\n        header,\n        uniforms,\n        uniformName,\n        undefinedOnly\n      })) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({\n        table,\n        header,\n        uniforms,\n        uniformName,\n        undefinedOnly\n      })) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({\n        table,\n        header,\n        uniforms,\n        uniformName,\n        undefinedOnly\n      })) {\n        count++;\n      }\n    }\n  }\n\n  let unusedCount = 0;\n  const unusedTable = {};\n\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: \"NOT USED: \".concat(uniform),\n          [header]: (0,_utils_format_value__WEBPACK_IMPORTED_MODULE_1__/* .formatValue */ .B)(uniform)\n        };\n      }\n    }\n  }\n\n  return {\n    table,\n    count,\n    unusedTable,\n    unusedCount\n  };\n}\n\nfunction addUniformToTable(_ref2) {\n  let {\n    table,\n    header,\n    uniforms,\n    uniformName,\n    undefinedOnly\n  } = _ref2;\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      [header]: isDefined ? (0,_utils_format_value__WEBPACK_IMPORTED_MODULE_1__/* .formatValue */ .B)(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n//# sourceMappingURL=debug-uniforms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkyNTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDVztBQUM3QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osRUFBRSw4REFBTTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5RUFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIseUVBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vZGVidWcvZGVidWctdW5pZm9ybXMuanM/MGE0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi91dGlscy9hc3NlcnQnO1xuaW1wb3J0IHsgZm9ybWF0VmFsdWUgfSBmcm9tICcuLi91dGlscy9mb3JtYXQtdmFsdWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlYnVnVGFibGVGb3JVbmlmb3JtcyhfcmVmKSB7XG4gIGxldCB7XG4gICAgaGVhZGVyID0gJ1VuaWZvcm1zJyxcbiAgICBwcm9ncmFtLFxuICAgIHVuaWZvcm1zLFxuICAgIHVuZGVmaW5lZE9ubHkgPSBmYWxzZVxuICB9ID0gX3JlZjtcbiAgYXNzZXJ0KHByb2dyYW0pO1xuICBjb25zdCBTSEFERVJfTU9EVUxFX1VOSUZPUk1fUkVHRVhQID0gJy4qXy4qJztcbiAgY29uc3QgUFJPSkVDVF9NT0RVTEVfVU5JRk9STV9SRUdFWFAgPSAnLipNYXRyaXgnO1xuICBjb25zdCB1bmlmb3JtTG9jYXRpb25zID0gcHJvZ3JhbS5fdW5pZm9ybVNldHRlcnM7XG4gIGNvbnN0IHRhYmxlID0ge307XG4gIGNvbnN0IHVuaWZvcm1OYW1lcyA9IE9iamVjdC5rZXlzKHVuaWZvcm1Mb2NhdGlvbnMpLnNvcnQoKTtcbiAgbGV0IGNvdW50ID0gMDtcblxuICBmb3IgKGNvbnN0IHVuaWZvcm1OYW1lIG9mIHVuaWZvcm1OYW1lcykge1xuICAgIGlmICghdW5pZm9ybU5hbWUubWF0Y2goU0hBREVSX01PRFVMRV9VTklGT1JNX1JFR0VYUCkgJiYgIXVuaWZvcm1OYW1lLm1hdGNoKFBST0pFQ1RfTU9EVUxFX1VOSUZPUk1fUkVHRVhQKSkge1xuICAgICAgaWYgKGFkZFVuaWZvcm1Ub1RhYmxlKHtcbiAgICAgICAgdGFibGUsXG4gICAgICAgIGhlYWRlcixcbiAgICAgICAgdW5pZm9ybXMsXG4gICAgICAgIHVuaWZvcm1OYW1lLFxuICAgICAgICB1bmRlZmluZWRPbmx5XG4gICAgICB9KSkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgdW5pZm9ybU5hbWUgb2YgdW5pZm9ybU5hbWVzKSB7XG4gICAgaWYgKHVuaWZvcm1OYW1lLm1hdGNoKFBST0pFQ1RfTU9EVUxFX1VOSUZPUk1fUkVHRVhQKSkge1xuICAgICAgaWYgKGFkZFVuaWZvcm1Ub1RhYmxlKHtcbiAgICAgICAgdGFibGUsXG4gICAgICAgIGhlYWRlcixcbiAgICAgICAgdW5pZm9ybXMsXG4gICAgICAgIHVuaWZvcm1OYW1lLFxuICAgICAgICB1bmRlZmluZWRPbmx5XG4gICAgICB9KSkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgdW5pZm9ybU5hbWUgb2YgdW5pZm9ybU5hbWVzKSB7XG4gICAgaWYgKCF0YWJsZVt1bmlmb3JtTmFtZV0pIHtcbiAgICAgIGlmIChhZGRVbmlmb3JtVG9UYWJsZSh7XG4gICAgICAgIHRhYmxlLFxuICAgICAgICBoZWFkZXIsXG4gICAgICAgIHVuaWZvcm1zLFxuICAgICAgICB1bmlmb3JtTmFtZSxcbiAgICAgICAgdW5kZWZpbmVkT25seVxuICAgICAgfSkpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgdW51c2VkQ291bnQgPSAwO1xuICBjb25zdCB1bnVzZWRUYWJsZSA9IHt9O1xuXG4gIGlmICghdW5kZWZpbmVkT25seSkge1xuICAgIGZvciAoY29uc3QgdW5pZm9ybU5hbWUgaW4gdW5pZm9ybXMpIHtcbiAgICAgIGNvbnN0IHVuaWZvcm0gPSB1bmlmb3Jtc1t1bmlmb3JtTmFtZV07XG5cbiAgICAgIGlmICghdGFibGVbdW5pZm9ybU5hbWVdKSB7XG4gICAgICAgIHVudXNlZENvdW50Kys7XG4gICAgICAgIHVudXNlZFRhYmxlW3VuaWZvcm1OYW1lXSA9IHtcbiAgICAgICAgICBUeXBlOiBcIk5PVCBVU0VEOiBcIi5jb25jYXQodW5pZm9ybSksXG4gICAgICAgICAgW2hlYWRlcl06IGZvcm1hdFZhbHVlKHVuaWZvcm0pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWJsZSxcbiAgICBjb3VudCxcbiAgICB1bnVzZWRUYWJsZSxcbiAgICB1bnVzZWRDb3VudFxuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRVbmlmb3JtVG9UYWJsZShfcmVmMikge1xuICBsZXQge1xuICAgIHRhYmxlLFxuICAgIGhlYWRlcixcbiAgICB1bmlmb3JtcyxcbiAgICB1bmlmb3JtTmFtZSxcbiAgICB1bmRlZmluZWRPbmx5XG4gIH0gPSBfcmVmMjtcbiAgY29uc3QgdmFsdWUgPSB1bmlmb3Jtc1t1bmlmb3JtTmFtZV07XG4gIGNvbnN0IGlzRGVmaW5lZCA9IGlzVW5pZm9ybURlZmluZWQodmFsdWUpO1xuXG4gIGlmICghdW5kZWZpbmVkT25seSB8fCAhaXNEZWZpbmVkKSB7XG4gICAgdGFibGVbdW5pZm9ybU5hbWVdID0ge1xuICAgICAgW2hlYWRlcl06IGlzRGVmaW5lZCA/IGZvcm1hdFZhbHVlKHZhbHVlKSA6ICdOL0EnLFxuICAgICAgJ1VuaWZvcm0gVHlwZSc6IGlzRGVmaW5lZCA/IHZhbHVlIDogJ05PVCBQUk9WSURFRCdcbiAgICB9O1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1VuaWZvcm1EZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctdW5pZm9ybXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49258\n")},61713:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "L": function() { return /* binding */ getDebugTableForVertexArray; }\n/* harmony export */ });\n/* harmony import */ var _classes_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53478);\n/* harmony import */ var _webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79579);\n/* harmony import */ var _webgl_utils_attribute_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38522);\n/* harmony import */ var _utils_format_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89561);\n\n\n\n\nfunction getDebugTableForVertexArray(_ref) {\n  let {\n    vertexArray,\n    header = \'Attributes\'\n  } = _ref;\n\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  const table = {};\n\n  if (vertexArray.elements) {\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  const attributes = vertexArray.values;\n\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n\n    if (info) {\n      let rowHeader = "".concat(attributeLocation, ": ").concat(info.name);\n      const accessor = vertexArray.accessors[info.location];\n\n      if (accessor) {\n        rowHeader = "".concat(attributeLocation, ": ").concat(getGLSLDeclaration(info.name, accessor));\n      }\n\n      table[rowHeader] = getDebugTableRow(vertexArray, attributes[attributeLocation], accessor, header);\n    }\n  }\n\n  return table;\n}\n\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  const {\n    gl\n  } = vertexArray;\n\n  if (!attribute) {\n    return {\n      [header]: \'null\',\n      \'Format \': \'N/A\'\n    };\n  }\n\n  let type = \'NOT PROVIDED\';\n  let size = 1;\n  let verts = 0;\n  let bytes = 0;\n  let isInteger;\n  let marker;\n  let value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n    type = String(type).replace(\'Array\', \'\');\n    isInteger = type.indexOf(\'nt\') !== -1;\n  }\n\n  if (attribute instanceof _classes_buffer__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z) {\n    const buffer = attribute;\n    const {\n      data,\n      changed\n    } = buffer.getDebugData();\n    marker = changed ? \'*\' : \'\';\n    value = data;\n    bytes = buffer.byteLength;\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n    let format;\n\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = "".concat(instanced ? \'I \' : \'P \', " ").concat(verts, " (x").concat(size, "=").concat(bytes, " bytes ").concat((0,_webgl_utils_constants_to_keys__WEBPACK_IMPORTED_MODULE_1__/* .getKey */ .km)(gl, type), ")");\n    } else {\n      isInteger = true;\n      format = "".concat(bytes, " bytes");\n    }\n\n    return {\n      [header]: "".concat(marker).concat((0,_utils_format_value__WEBPACK_IMPORTED_MODULE_2__/* .formatValue */ .B)(value, {\n        size,\n        isInteger\n      })),\n      \'Format \': format\n    };\n  }\n\n  value = attribute;\n  size = attribute.length;\n  type = String(attribute.constructor.name).replace(\'Array\', \'\');\n  isInteger = type.indexOf(\'nt\') !== -1;\n  return {\n    [header]: "".concat((0,_utils_format_value__WEBPACK_IMPORTED_MODULE_2__/* .formatValue */ .B)(value, {\n      size,\n      isInteger\n    }), " (constant)"),\n    \'Format \': "".concat(size, "x").concat(type, " (constant)")\n  };\n}\n\nfunction getGLSLDeclaration(name, accessor) {\n  const {\n    type,\n    size\n  } = accessor;\n  const typeAndName = (0,_webgl_utils_attribute_utils__WEBPACK_IMPORTED_MODULE_3__/* .getCompositeGLType */ .jG)(type, size);\n  return typeAndName ? "".concat(name, " (").concat(typeAndName.name, ")") : name;\n}\n//# sourceMappingURL=debug-vertex-array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE3MTMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNtQjtBQUNVO0FBQ2hCO0FBQzdDO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLGdFQUFNO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhIQUE4SCxnRkFBTTtBQUNwSSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLHlFQUFXO0FBQ3BEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUVBQVc7QUFDbkM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osc0JBQXNCLDBGQUFrQjtBQUN4QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3dlYmdsL2Rpc3QvZXNtL2RlYnVnL2RlYnVnLXZlcnRleC1hcnJheS5qcz83Yjk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCdWZmZXIgZnJvbSAnLi4vY2xhc3Nlcy9idWZmZXInO1xuaW1wb3J0IHsgZ2V0S2V5IH0gZnJvbSAnLi4vd2ViZ2wtdXRpbHMvY29uc3RhbnRzLXRvLWtleXMnO1xuaW1wb3J0IHsgZ2V0Q29tcG9zaXRlR0xUeXBlIH0gZnJvbSAnLi4vd2ViZ2wtdXRpbHMvYXR0cmlidXRlLXV0aWxzJztcbmltcG9ydCB7IGZvcm1hdFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvZm9ybWF0LXZhbHVlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWJ1Z1RhYmxlRm9yVmVydGV4QXJyYXkoX3JlZikge1xuICBsZXQge1xuICAgIHZlcnRleEFycmF5LFxuICAgIGhlYWRlciA9ICdBdHRyaWJ1dGVzJ1xuICB9ID0gX3JlZjtcblxuICBpZiAoIXZlcnRleEFycmF5LmNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCB0YWJsZSA9IHt9O1xuXG4gIGlmICh2ZXJ0ZXhBcnJheS5lbGVtZW50cykge1xuICAgIHRhYmxlLkVMRU1FTlRfQVJSQVlfQlVGRkVSID0gZ2V0RGVidWdUYWJsZVJvdyh2ZXJ0ZXhBcnJheSwgdmVydGV4QXJyYXkuZWxlbWVudHMsIG51bGwsIGhlYWRlcik7XG4gIH1cblxuICBjb25zdCBhdHRyaWJ1dGVzID0gdmVydGV4QXJyYXkudmFsdWVzO1xuXG4gIGZvciAoY29uc3QgYXR0cmlidXRlTG9jYXRpb24gaW4gYXR0cmlidXRlcykge1xuICAgIGNvbnN0IGluZm8gPSB2ZXJ0ZXhBcnJheS5fZ2V0QXR0cmlidXRlSW5mbyhhdHRyaWJ1dGVMb2NhdGlvbik7XG5cbiAgICBpZiAoaW5mbykge1xuICAgICAgbGV0IHJvd0hlYWRlciA9IFwiXCIuY29uY2F0KGF0dHJpYnV0ZUxvY2F0aW9uLCBcIjogXCIpLmNvbmNhdChpbmZvLm5hbWUpO1xuICAgICAgY29uc3QgYWNjZXNzb3IgPSB2ZXJ0ZXhBcnJheS5hY2Nlc3NvcnNbaW5mby5sb2NhdGlvbl07XG5cbiAgICAgIGlmIChhY2Nlc3Nvcikge1xuICAgICAgICByb3dIZWFkZXIgPSBcIlwiLmNvbmNhdChhdHRyaWJ1dGVMb2NhdGlvbiwgXCI6IFwiKS5jb25jYXQoZ2V0R0xTTERlY2xhcmF0aW9uKGluZm8ubmFtZSwgYWNjZXNzb3IpKTtcbiAgICAgIH1cblxuICAgICAgdGFibGVbcm93SGVhZGVyXSA9IGdldERlYnVnVGFibGVSb3codmVydGV4QXJyYXksIGF0dHJpYnV0ZXNbYXR0cmlidXRlTG9jYXRpb25dLCBhY2Nlc3NvciwgaGVhZGVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG5cbmZ1bmN0aW9uIGdldERlYnVnVGFibGVSb3codmVydGV4QXJyYXksIGF0dHJpYnV0ZSwgYWNjZXNzb3IsIGhlYWRlcikge1xuICBjb25zdCB7XG4gICAgZ2xcbiAgfSA9IHZlcnRleEFycmF5O1xuXG4gIGlmICghYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtoZWFkZXJdOiAnbnVsbCcsXG4gICAgICAnRm9ybWF0ICc6ICdOL0EnXG4gICAgfTtcbiAgfVxuXG4gIGxldCB0eXBlID0gJ05PVCBQUk9WSURFRCc7XG4gIGxldCBzaXplID0gMTtcbiAgbGV0IHZlcnRzID0gMDtcbiAgbGV0IGJ5dGVzID0gMDtcbiAgbGV0IGlzSW50ZWdlcjtcbiAgbGV0IG1hcmtlcjtcbiAgbGV0IHZhbHVlO1xuXG4gIGlmIChhY2Nlc3Nvcikge1xuICAgIHR5cGUgPSBhY2Nlc3Nvci50eXBlO1xuICAgIHNpemUgPSBhY2Nlc3Nvci5zaXplO1xuICAgIHR5cGUgPSBTdHJpbmcodHlwZSkucmVwbGFjZSgnQXJyYXknLCAnJyk7XG4gICAgaXNJbnRlZ2VyID0gdHlwZS5pbmRleE9mKCdudCcpICE9PSAtMTtcbiAgfVxuXG4gIGlmIChhdHRyaWJ1dGUgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICBjb25zdCBidWZmZXIgPSBhdHRyaWJ1dGU7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIGNoYW5nZWRcbiAgICB9ID0gYnVmZmVyLmdldERlYnVnRGF0YSgpO1xuICAgIG1hcmtlciA9IGNoYW5nZWQgPyAnKicgOiAnJztcbiAgICB2YWx1ZSA9IGRhdGE7XG4gICAgYnl0ZXMgPSBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgICB2ZXJ0cyA9IGJ5dGVzIC8gZGF0YS5CWVRFU19QRVJfRUxFTUVOVCAvIHNpemU7XG4gICAgbGV0IGZvcm1hdDtcblxuICAgIGlmIChhY2Nlc3Nvcikge1xuICAgICAgY29uc3QgaW5zdGFuY2VkID0gYWNjZXNzb3IuZGl2aXNvciA+IDA7XG4gICAgICBmb3JtYXQgPSBcIlwiLmNvbmNhdChpbnN0YW5jZWQgPyAnSSAnIDogJ1AgJywgXCIgXCIpLmNvbmNhdCh2ZXJ0cywgXCIgKHhcIikuY29uY2F0KHNpemUsIFwiPVwiKS5jb25jYXQoYnl0ZXMsIFwiIGJ5dGVzIFwiKS5jb25jYXQoZ2V0S2V5KGdsLCB0eXBlKSwgXCIpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0ludGVnZXIgPSB0cnVlO1xuICAgICAgZm9ybWF0ID0gXCJcIi5jb25jYXQoYnl0ZXMsIFwiIGJ5dGVzXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBbaGVhZGVyXTogXCJcIi5jb25jYXQobWFya2VyKS5jb25jYXQoZm9ybWF0VmFsdWUodmFsdWUsIHtcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgaXNJbnRlZ2VyXG4gICAgICB9KSksXG4gICAgICAnRm9ybWF0ICc6IGZvcm1hdFxuICAgIH07XG4gIH1cblxuICB2YWx1ZSA9IGF0dHJpYnV0ZTtcbiAgc2l6ZSA9IGF0dHJpYnV0ZS5sZW5ndGg7XG4gIHR5cGUgPSBTdHJpbmcoYXR0cmlidXRlLmNvbnN0cnVjdG9yLm5hbWUpLnJlcGxhY2UoJ0FycmF5JywgJycpO1xuICBpc0ludGVnZXIgPSB0eXBlLmluZGV4T2YoJ250JykgIT09IC0xO1xuICByZXR1cm4ge1xuICAgIFtoZWFkZXJdOiBcIlwiLmNvbmNhdChmb3JtYXRWYWx1ZSh2YWx1ZSwge1xuICAgICAgc2l6ZSxcbiAgICAgIGlzSW50ZWdlclxuICAgIH0pLCBcIiAoY29uc3RhbnQpXCIpLFxuICAgICdGb3JtYXQgJzogXCJcIi5jb25jYXQoc2l6ZSwgXCJ4XCIpLmNvbmNhdCh0eXBlLCBcIiAoY29uc3RhbnQpXCIpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEdMU0xEZWNsYXJhdGlvbihuYW1lLCBhY2Nlc3Nvcikge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBzaXplXG4gIH0gPSBhY2Nlc3NvcjtcbiAgY29uc3QgdHlwZUFuZE5hbWUgPSBnZXRDb21wb3NpdGVHTFR5cGUodHlwZSwgc2l6ZSk7XG4gIHJldHVybiB0eXBlQW5kTmFtZSA/IFwiXCIuY29uY2F0KG5hbWUsIFwiIChcIikuY29uY2F0KHR5cGVBbmROYW1lLm5hbWUsIFwiKVwiKSA6IG5hbWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy12ZXJ0ZXgtYXJyYXkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///61713\n')},44211:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "N$": function() { return /* binding */ getFeatures; },\n/* harmony export */   "U6": function() { return /* binding */ hasFeature; },\n/* harmony export */   "ag": function() { return /* binding */ hasFeatures; }\n/* harmony export */ });\n/* harmony import */ var _webgl_features_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6948);\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22525);\n\n\n\nconst LOG_UNSUPPORTED_FEATURE = 2;\nfunction hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\nfunction hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\nfunction getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n\n  for (const cap in _webgl_features_table__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z) {\n    if (gl.luma.caps[cap] === undefined) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n\n  return gl.luma.caps;\n}\n\nfunction isFeatureSupported(gl, cap) {\n  gl.luma = gl.luma || {};\n  gl.luma.caps = gl.luma.caps || {};\n\n  if (gl.luma.caps[cap] === undefined) {\n    gl.luma.caps[cap] = queryFeature(gl, cap);\n  }\n\n  if (!gl.luma.caps[cap]) {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.log */ .cM.log(LOG_UNSUPPORTED_FEATURE, "Feature: ".concat(cap, " not supported"))();\n  }\n\n  return gl.luma.caps[cap];\n}\n\nfunction queryFeature(gl, cap) {\n  const feature = _webgl_features_table__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z[cap];\n  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(feature, cap);\n  let isSupported;\n  const featureDefinition = (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL2 */ .D0)(gl) ? feature[1] || feature[0] : feature[0];\n\n  if (typeof featureDefinition === \'function\') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === \'string\') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === \'boolean\') {\n    isSupported = featureDefinition;\n  } else {\n    (0,_utils_assert__WEBPACK_IMPORTED_MODULE_2__/* .assert */ .h)(false);\n  }\n\n  return isSupported;\n}\n//# sourceMappingURL=features.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQyMTEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFDSDtBQUNSO0FBQ3pDO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDTztBQUNQO0FBQ0E7O0FBRUEsb0JBQW9CLHNFQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksbUVBQU87QUFDWDs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHNFQUFjO0FBQ2hDLEVBQUUsOERBQU07QUFDUjtBQUNBLDRCQUE0QixvRUFBUTs7QUFFcEM7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0osSUFBSSw4REFBTTtBQUNWOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vZmVhdHVyZXMvZmVhdHVyZXMuanM/NjEwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV0VCR0xfRkVBVFVSRVMgZnJvbSAnLi93ZWJnbC1mZWF0dXJlcy10YWJsZSc7XG5pbXBvcnQgeyBpc1dlYkdMMiwgbG9nIH0gZnJvbSAnQGx1bWEuZ2wvZ2x0b29scyc7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi91dGlscy9hc3NlcnQnO1xuY29uc3QgTE9HX1VOU1VQUE9SVEVEX0ZFQVRVUkUgPSAyO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0ZlYXR1cmUoZ2wsIGZlYXR1cmUpIHtcbiAgcmV0dXJuIGhhc0ZlYXR1cmVzKGdsLCBmZWF0dXJlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNGZWF0dXJlcyhnbCwgZmVhdHVyZXMpIHtcbiAgZmVhdHVyZXMgPSBBcnJheS5pc0FycmF5KGZlYXR1cmVzKSA/IGZlYXR1cmVzIDogW2ZlYXR1cmVzXTtcbiAgcmV0dXJuIGZlYXR1cmVzLmV2ZXJ5KGZlYXR1cmUgPT4ge1xuICAgIHJldHVybiBpc0ZlYXR1cmVTdXBwb3J0ZWQoZ2wsIGZlYXR1cmUpO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRGZWF0dXJlcyhnbCkge1xuICBnbC5sdW1hID0gZ2wubHVtYSB8fCB7fTtcbiAgZ2wubHVtYS5jYXBzID0gZ2wubHVtYS5jYXBzIHx8IHt9O1xuXG4gIGZvciAoY29uc3QgY2FwIGluIFdFQkdMX0ZFQVRVUkVTKSB7XG4gICAgaWYgKGdsLmx1bWEuY2Fwc1tjYXBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGdsLmx1bWEuY2Fwc1tjYXBdID0gaXNGZWF0dXJlU3VwcG9ydGVkKGdsLCBjYXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnbC5sdW1hLmNhcHM7XG59XG5cbmZ1bmN0aW9uIGlzRmVhdHVyZVN1cHBvcnRlZChnbCwgY2FwKSB7XG4gIGdsLmx1bWEgPSBnbC5sdW1hIHx8IHt9O1xuICBnbC5sdW1hLmNhcHMgPSBnbC5sdW1hLmNhcHMgfHwge307XG5cbiAgaWYgKGdsLmx1bWEuY2Fwc1tjYXBdID09PSB1bmRlZmluZWQpIHtcbiAgICBnbC5sdW1hLmNhcHNbY2FwXSA9IHF1ZXJ5RmVhdHVyZShnbCwgY2FwKTtcbiAgfVxuXG4gIGlmICghZ2wubHVtYS5jYXBzW2NhcF0pIHtcbiAgICBsb2cubG9nKExPR19VTlNVUFBPUlRFRF9GRUFUVVJFLCBcIkZlYXR1cmU6IFwiLmNvbmNhdChjYXAsIFwiIG5vdCBzdXBwb3J0ZWRcIikpKCk7XG4gIH1cblxuICByZXR1cm4gZ2wubHVtYS5jYXBzW2NhcF07XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5RmVhdHVyZShnbCwgY2FwKSB7XG4gIGNvbnN0IGZlYXR1cmUgPSBXRUJHTF9GRUFUVVJFU1tjYXBdO1xuICBhc3NlcnQoZmVhdHVyZSwgY2FwKTtcbiAgbGV0IGlzU3VwcG9ydGVkO1xuICBjb25zdCBmZWF0dXJlRGVmaW5pdGlvbiA9IGlzV2ViR0wyKGdsKSA/IGZlYXR1cmVbMV0gfHwgZmVhdHVyZVswXSA6IGZlYXR1cmVbMF07XG5cbiAgaWYgKHR5cGVvZiBmZWF0dXJlRGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlzU3VwcG9ydGVkID0gZmVhdHVyZURlZmluaXRpb24oZ2wpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZURlZmluaXRpb24pKSB7XG4gICAgaXNTdXBwb3J0ZWQgPSB0cnVlO1xuXG4gICAgZm9yIChjb25zdCBleHRlbnNpb24gb2YgZmVhdHVyZURlZmluaXRpb24pIHtcbiAgICAgIGlzU3VwcG9ydGVkID0gaXNTdXBwb3J0ZWQgJiYgQm9vbGVhbihnbC5nZXRFeHRlbnNpb24oZXh0ZW5zaW9uKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBmZWF0dXJlRGVmaW5pdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBpc1N1cHBvcnRlZCA9IEJvb2xlYW4oZ2wuZ2V0RXh0ZW5zaW9uKGZlYXR1cmVEZWZpbml0aW9uKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGZlYXR1cmVEZWZpbml0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICBpc1N1cHBvcnRlZCA9IGZlYXR1cmVEZWZpbml0aW9uO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydChmYWxzZSk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWF0dXJlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44211\n')},6948:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"h\": function() { return /* binding */ FEATURES; }\n/* harmony export */ });\n/* harmony import */ var _classes_framebuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53849);\n/* harmony import */ var _classes_texture_2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51621);\n\n\nconst FEATURES = {\n  WEBGL2: 'WEBGL2',\n  VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',\n  TIMER_QUERY: 'TIMER_QUERY',\n  INSTANCED_RENDERING: 'INSTANCED_RENDERING',\n  MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',\n  ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',\n  BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',\n  FLOAT_BLEND: 'FLOAT_BLEND',\n  COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',\n  TEXTURE_DEPTH: 'TEXTURE_DEPTH',\n  TEXTURE_FLOAT: 'TEXTURE_FLOAT',\n  TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',\n  TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',\n  TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',\n  COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',\n  COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',\n  COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',\n  GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',\n  GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',\n  GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',\n  GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'\n};\n\nfunction checkFloat32ColorAttachment(gl) {\n  const testTexture = new _classes_texture_2d__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z(gl, {\n    format: 6408,\n    type: 5126,\n    dataFormat: 6408\n  });\n  const testFb = new _classes_framebuffer__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z(gl, {\n    id: \"test-framebuffer\",\n    check: false,\n    attachments: {\n      [36064]: testTexture\n    }\n  });\n  const status = testFb.getStatus();\n  testTexture.delete();\n  testFb.delete();\n  return status === 36053;\n}\n\n/* harmony default export */ __webpack_exports__[\"Z\"] = ({\n  [FEATURES.WEBGL2]: [false, true],\n  [FEATURES.VERTEX_ARRAY_OBJECT]: ['OES_vertex_array_object', true],\n  [FEATURES.TIMER_QUERY]: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  [FEATURES.INSTANCED_RENDERING]: ['ANGLE_instanced_arrays', true],\n  [FEATURES.MULTIPLE_RENDER_TARGETS]: ['WEBGL_draw_buffers', true],\n  [FEATURES.ELEMENT_INDEX_UINT32]: ['OES_element_index_uint', true],\n  [FEATURES.BLEND_EQUATION_MINMAX]: ['EXT_blend_minmax', true],\n  [FEATURES.FLOAT_BLEND]: ['EXT_float_blend'],\n  [FEATURES.COLOR_ENCODING_SRGB]: ['EXT_sRGB', true],\n  [FEATURES.TEXTURE_DEPTH]: ['WEBGL_depth_texture', true],\n  [FEATURES.TEXTURE_FLOAT]: ['OES_texture_float', true],\n  [FEATURES.TEXTURE_HALF_FLOAT]: ['OES_texture_half_float', true],\n  [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: ['OES_texture_float_linear'],\n  [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: ['OES_texture_half_float_linear'],\n  [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: ['EXT_texture_filter_anisotropic'],\n  [FEATURES.COLOR_ATTACHMENT_RGBA32F]: [checkFloat32ColorAttachment, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_FLOAT]: [false, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: ['EXT_color_buffer_half_float'],\n  [FEATURES.GLSL_FRAG_DATA]: ['WEBGL_draw_buffers', true],\n  [FEATURES.GLSL_FRAG_DEPTH]: ['EXT_frag_depth', true],\n  [FEATURES.GLSL_DERIVATIVES]: ['OES_standard_derivatives', true],\n  [FEATURES.GLSL_TEXTURE_LOD]: ['EXT_shader_texture_lod', true]\n});\n//# sourceMappingURL=webgl-features-table.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk0OC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUNIO0FBQ3ZDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQixvRUFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gscUJBQXFCLHFFQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5REFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3dlYmdsL2Rpc3QvZXNtL2ZlYXR1cmVzL3dlYmdsLWZlYXR1cmVzLXRhYmxlLmpzPzA2Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZyYW1lYnVmZmVyIGZyb20gJy4uL2NsYXNzZXMvZnJhbWVidWZmZXInO1xuaW1wb3J0IFRleHR1cmUyRCBmcm9tICcuLi9jbGFzc2VzL3RleHR1cmUtMmQnO1xuZXhwb3J0IGNvbnN0IEZFQVRVUkVTID0ge1xuICBXRUJHTDI6ICdXRUJHTDInLFxuICBWRVJURVhfQVJSQVlfT0JKRUNUOiAnVkVSVEVYX0FSUkFZX09CSkVDVCcsXG4gIFRJTUVSX1FVRVJZOiAnVElNRVJfUVVFUlknLFxuICBJTlNUQU5DRURfUkVOREVSSU5HOiAnSU5TVEFOQ0VEX1JFTkRFUklORycsXG4gIE1VTFRJUExFX1JFTkRFUl9UQVJHRVRTOiAnTVVMVElQTEVfUkVOREVSX1RBUkdFVFMnLFxuICBFTEVNRU5UX0lOREVYX1VJTlQzMjogJ0VMRU1FTlRfSU5ERVhfVUlOVDMyJyxcbiAgQkxFTkRfRVFVQVRJT05fTUlOTUFYOiAnQkxFTkRfRVFVQVRJT05fTUlOTUFYJyxcbiAgRkxPQVRfQkxFTkQ6ICdGTE9BVF9CTEVORCcsXG4gIENPTE9SX0VOQ09ESU5HX1NSR0I6ICdDT0xPUl9FTkNPRElOR19TUkdCJyxcbiAgVEVYVFVSRV9ERVBUSDogJ1RFWFRVUkVfREVQVEgnLFxuICBURVhUVVJFX0ZMT0FUOiAnVEVYVFVSRV9GTE9BVCcsXG4gIFRFWFRVUkVfSEFMRl9GTE9BVDogJ1RFWFRVUkVfSEFMRl9GTE9BVCcsXG4gIFRFWFRVUkVfRklMVEVSX0xJTkVBUl9GTE9BVDogJ1RFWFRVUkVfRklMVEVSX0xJTkVBUl9GTE9BVCcsXG4gIFRFWFRVUkVfRklMVEVSX0xJTkVBUl9IQUxGX0ZMT0FUOiAnVEVYVFVSRV9GSUxURVJfTElORUFSX0hBTEZfRkxPQVQnLFxuICBURVhUVVJFX0ZJTFRFUl9BTklTT1RST1BJQzogJ1RFWFRVUkVfRklMVEVSX0FOSVNPVFJPUElDJyxcbiAgQ09MT1JfQVRUQUNITUVOVF9SR0JBMzJGOiAnQ09MT1JfQVRUQUNITUVOVF9SR0JBMzJGJyxcbiAgQ09MT1JfQVRUQUNITUVOVF9GTE9BVDogJ0NPTE9SX0FUVEFDSE1FTlRfRkxPQVQnLFxuICBDT0xPUl9BVFRBQ0hNRU5UX0hBTEZfRkxPQVQ6ICdDT0xPUl9BVFRBQ0hNRU5UX0hBTEZfRkxPQVQnLFxuICBHTFNMX0ZSQUdfREFUQTogJ0dMU0xfRlJBR19EQVRBJyxcbiAgR0xTTF9GUkFHX0RFUFRIOiAnR0xTTF9GUkFHX0RFUFRIJyxcbiAgR0xTTF9ERVJJVkFUSVZFUzogJ0dMU0xfREVSSVZBVElWRVMnLFxuICBHTFNMX1RFWFRVUkVfTE9EOiAnR0xTTF9URVhUVVJFX0xPRCdcbn07XG5cbmZ1bmN0aW9uIGNoZWNrRmxvYXQzMkNvbG9yQXR0YWNobWVudChnbCkge1xuICBjb25zdCB0ZXN0VGV4dHVyZSA9IG5ldyBUZXh0dXJlMkQoZ2wsIHtcbiAgICBmb3JtYXQ6IDY0MDgsXG4gICAgdHlwZTogNTEyNixcbiAgICBkYXRhRm9ybWF0OiA2NDA4XG4gIH0pO1xuICBjb25zdCB0ZXN0RmIgPSBuZXcgRnJhbWVidWZmZXIoZ2wsIHtcbiAgICBpZDogXCJ0ZXN0LWZyYW1lYnVmZmVyXCIsXG4gICAgY2hlY2s6IGZhbHNlLFxuICAgIGF0dGFjaG1lbnRzOiB7XG4gICAgICBbMzYwNjRdOiB0ZXN0VGV4dHVyZVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHN0YXR1cyA9IHRlc3RGYi5nZXRTdGF0dXMoKTtcbiAgdGVzdFRleHR1cmUuZGVsZXRlKCk7XG4gIHRlc3RGYi5kZWxldGUoKTtcbiAgcmV0dXJuIHN0YXR1cyA9PT0gMzYwNTM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgW0ZFQVRVUkVTLldFQkdMMl06IFtmYWxzZSwgdHJ1ZV0sXG4gIFtGRUFUVVJFUy5WRVJURVhfQVJSQVlfT0JKRUNUXTogWydPRVNfdmVydGV4X2FycmF5X29iamVjdCcsIHRydWVdLFxuICBbRkVBVFVSRVMuVElNRVJfUVVFUlldOiBbJ0VYVF9kaXNqb2ludF90aW1lcl9xdWVyeScsICdFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyJ10sXG4gIFtGRUFUVVJFUy5JTlNUQU5DRURfUkVOREVSSU5HXTogWydBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJywgdHJ1ZV0sXG4gIFtGRUFUVVJFUy5NVUxUSVBMRV9SRU5ERVJfVEFSR0VUU106IFsnV0VCR0xfZHJhd19idWZmZXJzJywgdHJ1ZV0sXG4gIFtGRUFUVVJFUy5FTEVNRU5UX0lOREVYX1VJTlQzMl06IFsnT0VTX2VsZW1lbnRfaW5kZXhfdWludCcsIHRydWVdLFxuICBbRkVBVFVSRVMuQkxFTkRfRVFVQVRJT05fTUlOTUFYXTogWydFWFRfYmxlbmRfbWlubWF4JywgdHJ1ZV0sXG4gIFtGRUFUVVJFUy5GTE9BVF9CTEVORF06IFsnRVhUX2Zsb2F0X2JsZW5kJ10sXG4gIFtGRUFUVVJFUy5DT0xPUl9FTkNPRElOR19TUkdCXTogWydFWFRfc1JHQicsIHRydWVdLFxuICBbRkVBVFVSRVMuVEVYVFVSRV9ERVBUSF06IFsnV0VCR0xfZGVwdGhfdGV4dHVyZScsIHRydWVdLFxuICBbRkVBVFVSRVMuVEVYVFVSRV9GTE9BVF06IFsnT0VTX3RleHR1cmVfZmxvYXQnLCB0cnVlXSxcbiAgW0ZFQVRVUkVTLlRFWFRVUkVfSEFMRl9GTE9BVF06IFsnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcsIHRydWVdLFxuICBbRkVBVFVSRVMuVEVYVFVSRV9GSUxURVJfTElORUFSX0ZMT0FUXTogWydPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInXSxcbiAgW0ZFQVRVUkVTLlRFWFRVUkVfRklMVEVSX0xJTkVBUl9IQUxGX0ZMT0FUXTogWydPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhciddLFxuICBbRkVBVFVSRVMuVEVYVFVSRV9GSUxURVJfQU5JU09UUk9QSUNdOiBbJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyddLFxuICBbRkVBVFVSRVMuQ09MT1JfQVRUQUNITUVOVF9SR0JBMzJGXTogW2NoZWNrRmxvYXQzMkNvbG9yQXR0YWNobWVudCwgJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnXSxcbiAgW0ZFQVRVUkVTLkNPTE9SX0FUVEFDSE1FTlRfRkxPQVRdOiBbZmFsc2UsICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0J10sXG4gIFtGRUFUVVJFUy5DT0xPUl9BVFRBQ0hNRU5UX0hBTEZfRkxPQVRdOiBbJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCddLFxuICBbRkVBVFVSRVMuR0xTTF9GUkFHX0RBVEFdOiBbJ1dFQkdMX2RyYXdfYnVmZmVycycsIHRydWVdLFxuICBbRkVBVFVSRVMuR0xTTF9GUkFHX0RFUFRIXTogWydFWFRfZnJhZ19kZXB0aCcsIHRydWVdLFxuICBbRkVBVFVSRVMuR0xTTF9ERVJJVkFUSVZFU106IFsnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJywgdHJ1ZV0sXG4gIFtGRUFUVVJFUy5HTFNMX1RFWFRVUkVfTE9EXTogWydFWFRfc2hhZGVyX3RleHR1cmVfbG9kJywgdHJ1ZV1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJnbC1mZWF0dXJlcy10YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6948\n")},27588:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ getShaderVersion; }\n/* harmony export */ });\nfunction getShaderVersion(source) {\n  let version = 100;\n  const words = source.match(/[^\\s]+/g);\n\n  if (words.length >= 2 && words[0] === '#version') {\n    const v = parseInt(words[1], 10);\n\n    if (Number.isFinite(v)) {\n      version = v;\n    }\n  }\n\n  return version;\n}\n//# sourceMappingURL=get-shader-version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc1ODguanMiLCJtYXBwaW5ncyI6Ijs7O0FBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS9nbHNsLXV0aWxzL2dldC1zaGFkZXItdmVyc2lvbi5qcz80M2NmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNoYWRlclZlcnNpb24oc291cmNlKSB7XG4gIGxldCB2ZXJzaW9uID0gMTAwO1xuICBjb25zdCB3b3JkcyA9IHNvdXJjZS5tYXRjaCgvW15cXHNdKy9nKTtcblxuICBpZiAod29yZHMubGVuZ3RoID49IDIgJiYgd29yZHNbMF0gPT09ICcjdmVyc2lvbicpIHtcbiAgICBjb25zdCB2ID0gcGFyc2VJbnQod29yZHNbMV0sIDEwKTtcblxuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUodikpIHtcbiAgICAgIHZlcnNpb24gPSB2O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LXNoYWRlci12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27588\n")},49835:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "lR": function() { return /* binding */ lumaStats; }\n/* harmony export */ });\n/* unused harmony export StatsManager */\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50009);\n/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93370);\n\n\n\nconst VERSION =  true ? "8.5.19" : 0;\nconst STARTUP_MESSAGE = \'set luma.log.level=1 (or higher) to trace rendering\';\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_1__/* .Stats */ .jk({\n        id: name\n      }));\n    }\n\n    return this.stats.get(name);\n  }\n\n}\nconst lumaStats = new StatsManager();\n\nif (globalThis.luma && globalThis.luma.VERSION !== VERSION) {\n  throw new Error("luma.gl - multiple VERSIONs detected: ".concat(globalThis.luma.VERSION, " vs ").concat(VERSION));\n}\n\nif (!globalThis.luma) {\n  if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)()) {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.log */ .cM.log(1, "luma.gl ".concat(VERSION, " - ").concat(STARTUP_MESSAGE))();\n  }\n\n  globalThis.luma = globalThis.luma || {\n    VERSION,\n    version: VERSION,\n    log: _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log */ .cM,\n    stats: lumaStats,\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\n\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (globalThis.luma);\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk4MzUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNDO0FBQ0U7QUFDMUMsZ0JBQWdCLEtBQStCLGNBQWMsQ0FBcUI7QUFDbEY7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLDREQUFLO0FBQ3BDO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLGtFQUFTO0FBQ2YsSUFBSSxtRUFBTztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVxQjtBQUNyQixzRUFBZSxlQUFlLEVBQUM7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3dlYmdsL2Rpc3QvZXNtL2luaXQuanM/NWVhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICdAbHVtYS5nbC9nbHRvb2xzJztcbmltcG9ydCB7IFN0YXRzIH0gZnJvbSAnQHByb2JlLmdsL3N0YXRzJztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJ0Bwcm9iZS5nbC9lbnYnO1xuY29uc3QgVkVSU0lPTiA9IHR5cGVvZiBcIjguNS4xOVwiICE9PSAndW5kZWZpbmVkJyA/IFwiOC41LjE5XCIgOiAndW50cmFuc3BpbGVkIHNvdXJjZSc7XG5jb25zdCBTVEFSVFVQX01FU1NBR0UgPSAnc2V0IGx1bWEubG9nLmxldmVsPTEgKG9yIGhpZ2hlcikgdG8gdHJhY2UgcmVuZGVyaW5nJztcbmV4cG9ydCBjbGFzcyBTdGF0c01hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXRzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgZ2V0KG5hbWUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdHMuaGFzKG5hbWUpKSB7XG4gICAgICB0aGlzLnN0YXRzLnNldChuYW1lLCBuZXcgU3RhdHMoe1xuICAgICAgICBpZDogbmFtZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YXRzLmdldChuYW1lKTtcbiAgfVxuXG59XG5jb25zdCBsdW1hU3RhdHMgPSBuZXcgU3RhdHNNYW5hZ2VyKCk7XG5cbmlmIChnbG9iYWxUaGlzLmx1bWEgJiYgZ2xvYmFsVGhpcy5sdW1hLlZFUlNJT04gIT09IFZFUlNJT04pIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwibHVtYS5nbCAtIG11bHRpcGxlIFZFUlNJT05zIGRldGVjdGVkOiBcIi5jb25jYXQoZ2xvYmFsVGhpcy5sdW1hLlZFUlNJT04sIFwiIHZzIFwiKS5jb25jYXQoVkVSU0lPTikpO1xufVxuXG5pZiAoIWdsb2JhbFRoaXMubHVtYSkge1xuICBpZiAoaXNCcm93c2VyKCkpIHtcbiAgICBsb2cubG9nKDEsIFwibHVtYS5nbCBcIi5jb25jYXQoVkVSU0lPTiwgXCIgLSBcIikuY29uY2F0KFNUQVJUVVBfTUVTU0FHRSkpKCk7XG4gIH1cblxuICBnbG9iYWxUaGlzLmx1bWEgPSBnbG9iYWxUaGlzLmx1bWEgfHwge1xuICAgIFZFUlNJT04sXG4gICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICBsb2csXG4gICAgc3RhdHM6IGx1bWFTdGF0cyxcbiAgICBnbG9iYWxzOiB7XG4gICAgICBtb2R1bGVzOiB7fSxcbiAgICAgIG5vZGVJTzoge31cbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IGx1bWFTdGF0cyB9O1xuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsVGhpcy5sdW1hO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49835\n')},22525:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"h\": function() { return /* binding */ assert; }\n/* harmony export */ });\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI1MjUuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS91dGlscy9hc3NlcnQuanM/NGIxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdsdW1hLmdsOiBhc3NlcnRpb24gZmFpbGVkLicpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22525\n")},82610:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "k": function() { return /* binding */ checkProps; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n\nfunction checkProps(className, props, propChecks) {\n  const {\n    removedProps = {},\n    deprecatedProps = {},\n    replacedProps = {}\n  } = propChecks;\n\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? "".concat(className, ".").concat(removedProps[propName]) : \'N/A\';\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.removed */ .cM.removed("".concat(className, ".").concat(propName), replacement)();\n    }\n  }\n\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated("".concat(className, ".").concat(propName), "".concat(className, ".").concat(replacementProp))();\n    }\n  }\n\n  let newProps = null;\n\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated("".concat(className, ".").concat(propName), "".concat(className, ".").concat(replacementProp))();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n//# sourceMappingURL=check-props.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI2MTAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF1QztBQUNoQztBQUNQO0FBQ0EscUJBQXFCO0FBQ3JCLHdCQUF3QjtBQUN4QjtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDJFQUFXO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTSxpRkFBYztBQUNwQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU0saUZBQWM7QUFDcEIsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vdXRpbHMvY2hlY2stcHJvcHMuanM/MzczNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICdAbHVtYS5nbC9nbHRvb2xzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1Byb3BzKGNsYXNzTmFtZSwgcHJvcHMsIHByb3BDaGVja3MpIHtcbiAgY29uc3Qge1xuICAgIHJlbW92ZWRQcm9wcyA9IHt9LFxuICAgIGRlcHJlY2F0ZWRQcm9wcyA9IHt9LFxuICAgIHJlcGxhY2VkUHJvcHMgPSB7fVxuICB9ID0gcHJvcENoZWNrcztcblxuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHJlbW92ZWRQcm9wcykge1xuICAgIGlmIChwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgY29uc3QgcmVwbGFjZW1lbnRQcm9wID0gcmVtb3ZlZFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnRQcm9wID8gXCJcIi5jb25jYXQoY2xhc3NOYW1lLCBcIi5cIikuY29uY2F0KHJlbW92ZWRQcm9wc1twcm9wTmFtZV0pIDogJ04vQSc7XG4gICAgICBsb2cucmVtb3ZlZChcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiLlwiKS5jb25jYXQocHJvcE5hbWUpLCByZXBsYWNlbWVudCkoKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIGRlcHJlY2F0ZWRQcm9wcykge1xuICAgIGlmIChwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgY29uc3QgcmVwbGFjZW1lbnRQcm9wID0gZGVwcmVjYXRlZFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGxvZy5kZXByZWNhdGVkKFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIuXCIpLmNvbmNhdChwcm9wTmFtZSksIFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIuXCIpLmNvbmNhdChyZXBsYWNlbWVudFByb3ApKSgpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBuZXdQcm9wcyA9IG51bGw7XG5cbiAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiByZXBsYWNlZFByb3BzKSB7XG4gICAgaWYgKHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICBjb25zdCByZXBsYWNlbWVudFByb3AgPSByZXBsYWNlZFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGxvZy5kZXByZWNhdGVkKFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIuXCIpLmNvbmNhdChwcm9wTmFtZSksIFwiXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIuXCIpLmNvbmNhdChyZXBsYWNlbWVudFByb3ApKSgpO1xuICAgICAgbmV3UHJvcHMgPSBuZXdQcm9wcyB8fCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcyk7XG4gICAgICBuZXdQcm9wc1tyZXBsYWNlbWVudFByb3BdID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgZGVsZXRlIG5ld1Byb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHMgfHwgcHJvcHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVjay1wcm9wcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///82610\n')},89561:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B\": function() { return /* binding */ formatValue; }\n/* harmony export */ });\nfunction formatArrayValue(v, opts) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = opts;\n  let string = '[';\n\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += \",\".concat(i % size === 0 ? ' ' : '');\n    }\n\n    string += formatValue(v[i], opts);\n  }\n\n  const terminator = v.length > maxElts ? '...' : ']';\n  return \"\".concat(string).concat(terminator);\n}\n\nfunction formatValue(v) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = opts;\n\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n//# sourceMappingURL=format-value.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODk1NjEuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUEsa0JBQWtCLDZCQUE2QjtBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS91dGlscy9mb3JtYXQtdmFsdWUuanM/M2Y5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBmb3JtYXRBcnJheVZhbHVlKHYsIG9wdHMpIHtcbiAgY29uc3Qge1xuICAgIG1heEVsdHMgPSAxNixcbiAgICBzaXplID0gMVxuICB9ID0gb3B0cztcbiAgbGV0IHN0cmluZyA9ICdbJztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHYubGVuZ3RoICYmIGkgPCBtYXhFbHRzOyArK2kpIHtcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgIHN0cmluZyArPSBcIixcIi5jb25jYXQoaSAlIHNpemUgPT09IDAgPyAnICcgOiAnJyk7XG4gICAgfVxuXG4gICAgc3RyaW5nICs9IGZvcm1hdFZhbHVlKHZbaV0sIG9wdHMpO1xuICB9XG5cbiAgY29uc3QgdGVybWluYXRvciA9IHYubGVuZ3RoID4gbWF4RWx0cyA/ICcuLi4nIDogJ10nO1xuICByZXR1cm4gXCJcIi5jb25jYXQoc3RyaW5nKS5jb25jYXQodGVybWluYXRvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2KSB7XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgY29uc3QgRVBTSUxPTiA9IDFlLTE2O1xuICBjb25zdCB7XG4gICAgaXNJbnRlZ2VyID0gZmFsc2VcbiAgfSA9IG9wdHM7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodikgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KHYpKSB7XG4gICAgcmV0dXJuIGZvcm1hdEFycmF5VmFsdWUodiwgb3B0cyk7XG4gIH1cblxuICBpZiAoIU51bWJlci5pc0Zpbml0ZSh2KSkge1xuICAgIHJldHVybiBTdHJpbmcodik7XG4gIH1cblxuICBpZiAoTWF0aC5hYnModikgPCBFUFNJTE9OKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlciA/ICcwJyA6ICcwLic7XG4gIH1cblxuICBpZiAoaXNJbnRlZ2VyKSB7XG4gICAgcmV0dXJuIHYudG9GaXhlZCgwKTtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyh2KSA+IDEwMCAmJiBNYXRoLmFicyh2KSA8IDEwMDAwKSB7XG4gICAgcmV0dXJuIHYudG9GaXhlZCgwKTtcbiAgfVxuXG4gIGNvbnN0IHN0cmluZyA9IHYudG9QcmVjaXNpb24oMik7XG4gIGNvbnN0IGRlY2ltYWwgPSBzdHJpbmcuaW5kZXhPZignLjAnKTtcbiAgcmV0dXJuIGRlY2ltYWwgPT09IHN0cmluZy5sZW5ndGggLSAyID8gc3RyaW5nLnNsaWNlKDAsIC0xKSA6IHN0cmluZztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC12YWx1ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///89561\n")},37469:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "F": function() { return /* binding */ stubRemovedMethods; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n\nfunction stubRemovedMethods(instance, className, version, methodNames) {\n  const upgradeMessage = "See luma.gl ".concat(version, " Upgrade Guide at https://luma.gl/docs/upgrade-guide");\n  const prototype = Object.getPrototypeOf(instance);\n  methodNames.forEach(methodName => {\n    if (prototype.methodName) {\n      return;\n    }\n\n    prototype[methodName] = () => {\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.removed */ .cM.removed("Calling removed method ".concat(className, ".").concat(methodName, ": "), upgradeMessage)();\n      throw new Error(methodName);\n    };\n  });\n}\n//# sourceMappingURL=stub-methods.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0NjkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF1QztBQUNoQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU0sMkVBQVc7QUFDakI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS91dGlscy9zdHViLW1ldGhvZHMuanM/MzNmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICdAbHVtYS5nbC9nbHRvb2xzJztcbmV4cG9ydCBmdW5jdGlvbiBzdHViUmVtb3ZlZE1ldGhvZHMoaW5zdGFuY2UsIGNsYXNzTmFtZSwgdmVyc2lvbiwgbWV0aG9kTmFtZXMpIHtcbiAgY29uc3QgdXBncmFkZU1lc3NhZ2UgPSBcIlNlZSBsdW1hLmdsIFwiLmNvbmNhdCh2ZXJzaW9uLCBcIiBVcGdyYWRlIEd1aWRlIGF0IGh0dHBzOi8vbHVtYS5nbC9kb2NzL3VwZ3JhZGUtZ3VpZGVcIik7XG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0YW5jZSk7XG4gIG1ldGhvZE5hbWVzLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgaWYgKHByb3RvdHlwZS5tZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvdG90eXBlW21ldGhvZE5hbWVdID0gKCkgPT4ge1xuICAgICAgbG9nLnJlbW92ZWQoXCJDYWxsaW5nIHJlbW92ZWQgbWV0aG9kIFwiLmNvbmNhdChjbGFzc05hbWUsIFwiLlwiKS5jb25jYXQobWV0aG9kTmFtZSwgXCI6IFwiKSwgdXBncmFkZU1lc3NhZ2UpKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kTmFtZSk7XG4gICAgfTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHViLW1ldGhvZHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37469\n')},74538:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "hQ": function() { return /* binding */ uid; },\n/* harmony export */   "nK": function() { return /* binding */ isObjectEmpty; },\n/* harmony export */   "wt": function() { return /* binding */ isPowerOfTwo; }\n/* harmony export */ });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22525);\n\nconst uidCounters = {};\nfunction uid() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'id\';\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return "".concat(id, "-").concat(count);\n}\nfunction isPowerOfTwo(n) {\n  (0,_assert__WEBPACK_IMPORTED_MODULE_0__/* .assert */ .h)(typeof n === \'number\', \'Input must be a number\');\n  return n && (n & n - 1) === 0;\n}\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n\n  return isEmpty;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ1MzguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ2xDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxFQUFFLHdEQUFNO0FBQ1I7QUFDQTtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS91dGlscy91dGlscy5qcz8zNWFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vYXNzZXJ0JztcbmNvbnN0IHVpZENvdW50ZXJzID0ge307XG5leHBvcnQgZnVuY3Rpb24gdWlkKCkge1xuICBsZXQgaWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdpZCc7XG4gIHVpZENvdW50ZXJzW2lkXSA9IHVpZENvdW50ZXJzW2lkXSB8fCAxO1xuICBjb25zdCBjb3VudCA9IHVpZENvdW50ZXJzW2lkXSsrO1xuICByZXR1cm4gXCJcIi5jb25jYXQoaWQsIFwiLVwiKS5jb25jYXQoY291bnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUG93ZXJPZlR3byhuKSB7XG4gIGFzc2VydCh0eXBlb2YgbiA9PT0gJ251bWJlcicsICdJbnB1dCBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gIHJldHVybiBuICYmIChuICYgbiAtIDEpID09PSAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIGxldCBpc0VtcHR5ID0gdHJ1ZTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpc0VtcHR5ID0gZmFsc2U7XG4gICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gaXNFbXB0eTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///74538\n')},38522:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$Z\": function() { return /* binding */ getPrimitiveDrawMode; },\n/* harmony export */   \"hJ\": function() { return /* binding */ decomposeCompositeGLType; },\n/* harmony export */   \"jG\": function() { return /* binding */ getCompositeGLType; }\n/* harmony export */ });\n/* unused harmony exports getPrimitiveCount, getVertexCount */\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22525);\n\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'],\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'],\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'],\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'],\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'],\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'],\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'],\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'],\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3']\n};\nfunction getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n\n    case GL_LINES:\n      return GL_LINES;\n\n    case GL_LINE_STRIP:\n      return GL_LINES;\n\n    case GL_LINE_LOOP:\n      return GL_LINES;\n\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n\n    default:\n      (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__/* .assert */ .h)(false);\n      return 0;\n  }\n}\nfunction getPrimitiveCount(_ref) {\n  let {\n    drawMode,\n    vertexCount\n  } = _ref;\n\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n\n    case GL_LINES:\n      return vertexCount / 2;\n\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nfunction getVertexCount(_ref2) {\n  let {\n    drawMode,\n    vertexCount\n  } = _ref2;\n  const primitiveCount = getPrimitiveCount({\n    drawMode,\n    vertexCount\n  });\n\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n\n    case GL_LINES:\n      return primitiveCount * 2;\n\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nfunction decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n\n  if (!typeAndSize) {\n    return null;\n  }\n\n  const [type, components] = typeAndSize;\n  return {\n    type,\n    components\n  };\n}\nfunction getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n\n    if (compType === type && compComponents === components) {\n      return {\n        glType,\n        name\n      };\n    }\n  }\n\n  return null;\n}\n//# sourceMappingURL=attribute-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg1MjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE1BQU0sOERBQU07QUFDWjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vd2ViZ2wtdXRpbHMvYXR0cmlidXRlLXV0aWxzLmpzPzVmNjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbHMvYXNzZXJ0JztcbmNvbnN0IEdMX0JZVEUgPSAweDE0MDA7XG5jb25zdCBHTF9VTlNJR05FRF9CWVRFID0gMHgxNDAxO1xuY29uc3QgR0xfU0hPUlQgPSAweDE0MDI7XG5jb25zdCBHTF9VTlNJR05FRF9TSE9SVCA9IDB4MTQwMztcbmNvbnN0IEdMX1BPSU5UUyA9IDB4MDtcbmNvbnN0IEdMX0xJTkVTID0gMHgxO1xuY29uc3QgR0xfTElORV9MT09QID0gMHgyO1xuY29uc3QgR0xfTElORV9TVFJJUCA9IDB4MztcbmNvbnN0IEdMX1RSSUFOR0xFUyA9IDB4NDtcbmNvbnN0IEdMX1RSSUFOR0xFX1NUUklQID0gMHg1O1xuY29uc3QgR0xfVFJJQU5HTEVfRkFOID0gMHg2O1xuY29uc3QgR0xfRkxPQVQgPSAweDE0MDY7XG5jb25zdCBHTF9GTE9BVF9WRUMyID0gMHg4YjUwO1xuY29uc3QgR0xfRkxPQVRfVkVDMyA9IDB4OGI1MTtcbmNvbnN0IEdMX0ZMT0FUX1ZFQzQgPSAweDhiNTI7XG5jb25zdCBHTF9JTlQgPSAweDE0MDQ7XG5jb25zdCBHTF9JTlRfVkVDMiA9IDB4OGI1MztcbmNvbnN0IEdMX0lOVF9WRUMzID0gMHg4YjU0O1xuY29uc3QgR0xfSU5UX1ZFQzQgPSAweDhiNTU7XG5jb25zdCBHTF9VTlNJR05FRF9JTlQgPSAweDE0MDU7XG5jb25zdCBHTF9VTlNJR05FRF9JTlRfVkVDMiA9IDB4OGRjNjtcbmNvbnN0IEdMX1VOU0lHTkVEX0lOVF9WRUMzID0gMHg4ZGM3O1xuY29uc3QgR0xfVU5TSUdORURfSU5UX1ZFQzQgPSAweDhkYzg7XG5jb25zdCBHTF9CT09MID0gMHg4YjU2O1xuY29uc3QgR0xfQk9PTF9WRUMyID0gMHg4YjU3O1xuY29uc3QgR0xfQk9PTF9WRUMzID0gMHg4YjU4O1xuY29uc3QgR0xfQk9PTF9WRUM0ID0gMHg4YjU5O1xuY29uc3QgR0xfRkxPQVRfTUFUMiA9IDB4OGI1YTtcbmNvbnN0IEdMX0ZMT0FUX01BVDMgPSAweDhiNWI7XG5jb25zdCBHTF9GTE9BVF9NQVQ0ID0gMHg4YjVjO1xuY29uc3QgR0xfRkxPQVRfTUFUMngzID0gMHg4YjY1O1xuY29uc3QgR0xfRkxPQVRfTUFUMng0ID0gMHg4YjY2O1xuY29uc3QgR0xfRkxPQVRfTUFUM3gyID0gMHg4YjY3O1xuY29uc3QgR0xfRkxPQVRfTUFUM3g0ID0gMHg4YjY4O1xuY29uc3QgR0xfRkxPQVRfTUFUNHgyID0gMHg4YjY5O1xuY29uc3QgR0xfRkxPQVRfTUFUNHgzID0gMHg4YjZhO1xuY29uc3QgQ09NUE9TSVRFX0dMX1RZUEVTID0ge1xuICBbR0xfRkxPQVRdOiBbR0xfRkxPQVQsIDEsICdmbG9hdCddLFxuICBbR0xfRkxPQVRfVkVDMl06IFtHTF9GTE9BVCwgMiwgJ3ZlYzInXSxcbiAgW0dMX0ZMT0FUX1ZFQzNdOiBbR0xfRkxPQVQsIDMsICd2ZWMzJ10sXG4gIFtHTF9GTE9BVF9WRUM0XTogW0dMX0ZMT0FULCA0LCAndmVjNCddLFxuICBbR0xfSU5UXTogW0dMX0lOVCwgMSwgJ2ludCddLFxuICBbR0xfSU5UX1ZFQzJdOiBbR0xfSU5ULCAyLCAnaXZlYzInXSxcbiAgW0dMX0lOVF9WRUMzXTogW0dMX0lOVCwgMywgJ2l2ZWMzJ10sXG4gIFtHTF9JTlRfVkVDNF06IFtHTF9JTlQsIDQsICdpdmVjNCddLFxuICBbR0xfVU5TSUdORURfSU5UXTogW0dMX1VOU0lHTkVEX0lOVCwgMSwgJ3VpbnQnXSxcbiAgW0dMX1VOU0lHTkVEX0lOVF9WRUMyXTogW0dMX1VOU0lHTkVEX0lOVCwgMiwgJ3V2ZWMyJ10sXG4gIFtHTF9VTlNJR05FRF9JTlRfVkVDM106IFtHTF9VTlNJR05FRF9JTlQsIDMsICd1dmVjMyddLFxuICBbR0xfVU5TSUdORURfSU5UX1ZFQzRdOiBbR0xfVU5TSUdORURfSU5ULCA0LCAndXZlYzQnXSxcbiAgW0dMX0JPT0xdOiBbR0xfRkxPQVQsIDEsICdib29sJ10sXG4gIFtHTF9CT09MX1ZFQzJdOiBbR0xfRkxPQVQsIDIsICdidmVjMiddLFxuICBbR0xfQk9PTF9WRUMzXTogW0dMX0ZMT0FULCAzLCAnYnZlYzMnXSxcbiAgW0dMX0JPT0xfVkVDNF06IFtHTF9GTE9BVCwgNCwgJ2J2ZWM0J10sXG4gIFtHTF9GTE9BVF9NQVQyXTogW0dMX0ZMT0FULCA4LCAnbWF0MiddLFxuICBbR0xfRkxPQVRfTUFUMngzXTogW0dMX0ZMT0FULCA4LCAnbWF0MngzJ10sXG4gIFtHTF9GTE9BVF9NQVQyeDRdOiBbR0xfRkxPQVQsIDgsICdtYXQyeDQnXSxcbiAgW0dMX0ZMT0FUX01BVDNdOiBbR0xfRkxPQVQsIDEyLCAnbWF0MyddLFxuICBbR0xfRkxPQVRfTUFUM3gyXTogW0dMX0ZMT0FULCAxMiwgJ21hdDN4MiddLFxuICBbR0xfRkxPQVRfTUFUM3g0XTogW0dMX0ZMT0FULCAxMiwgJ21hdDN4NCddLFxuICBbR0xfRkxPQVRfTUFUNF06IFtHTF9GTE9BVCwgMTYsICdtYXQ0J10sXG4gIFtHTF9GTE9BVF9NQVQ0eDJdOiBbR0xfRkxPQVQsIDE2LCAnbWF0NHgyJ10sXG4gIFtHTF9GTE9BVF9NQVQ0eDNdOiBbR0xfRkxPQVQsIDE2LCAnbWF0NHgzJ11cbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpbWl0aXZlRHJhd01vZGUoZHJhd01vZGUpIHtcbiAgc3dpdGNoIChkcmF3TW9kZSkge1xuICAgIGNhc2UgR0xfUE9JTlRTOlxuICAgICAgcmV0dXJuIEdMX1BPSU5UUztcblxuICAgIGNhc2UgR0xfTElORVM6XG4gICAgICByZXR1cm4gR0xfTElORVM7XG5cbiAgICBjYXNlIEdMX0xJTkVfU1RSSVA6XG4gICAgICByZXR1cm4gR0xfTElORVM7XG5cbiAgICBjYXNlIEdMX0xJTkVfTE9PUDpcbiAgICAgIHJldHVybiBHTF9MSU5FUztcblxuICAgIGNhc2UgR0xfVFJJQU5HTEVTOlxuICAgICAgcmV0dXJuIEdMX1RSSUFOR0xFUztcblxuICAgIGNhc2UgR0xfVFJJQU5HTEVfU1RSSVA6XG4gICAgICByZXR1cm4gR0xfVFJJQU5HTEVTO1xuXG4gICAgY2FzZSBHTF9UUklBTkdMRV9GQU46XG4gICAgICByZXR1cm4gR0xfVFJJQU5HTEVTO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFByaW1pdGl2ZUNvdW50KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBkcmF3TW9kZSxcbiAgICB2ZXJ0ZXhDb3VudFxuICB9ID0gX3JlZjtcblxuICBzd2l0Y2ggKGRyYXdNb2RlKSB7XG4gICAgY2FzZSBHTF9QT0lOVFM6XG4gICAgY2FzZSBHTF9MSU5FX0xPT1A6XG4gICAgICByZXR1cm4gdmVydGV4Q291bnQ7XG5cbiAgICBjYXNlIEdMX0xJTkVTOlxuICAgICAgcmV0dXJuIHZlcnRleENvdW50IC8gMjtcblxuICAgIGNhc2UgR0xfTElORV9TVFJJUDpcbiAgICAgIHJldHVybiB2ZXJ0ZXhDb3VudCAtIDE7XG5cbiAgICBjYXNlIEdMX1RSSUFOR0xFUzpcbiAgICAgIHJldHVybiB2ZXJ0ZXhDb3VudCAvIDM7XG5cbiAgICBjYXNlIEdMX1RSSUFOR0xFX1NUUklQOlxuICAgIGNhc2UgR0xfVFJJQU5HTEVfRkFOOlxuICAgICAgcmV0dXJuIHZlcnRleENvdW50IC0gMjtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBhc3NlcnQoZmFsc2UpO1xuICAgICAgcmV0dXJuIDA7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWZXJ0ZXhDb3VudChfcmVmMikge1xuICBsZXQge1xuICAgIGRyYXdNb2RlLFxuICAgIHZlcnRleENvdW50XG4gIH0gPSBfcmVmMjtcbiAgY29uc3QgcHJpbWl0aXZlQ291bnQgPSBnZXRQcmltaXRpdmVDb3VudCh7XG4gICAgZHJhd01vZGUsXG4gICAgdmVydGV4Q291bnRcbiAgfSk7XG5cbiAgc3dpdGNoIChnZXRQcmltaXRpdmVEcmF3TW9kZShkcmF3TW9kZSkpIHtcbiAgICBjYXNlIEdMX1BPSU5UUzpcbiAgICAgIHJldHVybiBwcmltaXRpdmVDb3VudDtcblxuICAgIGNhc2UgR0xfTElORVM6XG4gICAgICByZXR1cm4gcHJpbWl0aXZlQ291bnQgKiAyO1xuXG4gICAgY2FzZSBHTF9UUklBTkdMRVM6XG4gICAgICByZXR1cm4gcHJpbWl0aXZlQ291bnQgKiAzO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbXBvc2l0ZUdMVHlwZShjb21wb3NpdGVHTFR5cGUpIHtcbiAgY29uc3QgdHlwZUFuZFNpemUgPSBDT01QT1NJVEVfR0xfVFlQRVNbY29tcG9zaXRlR0xUeXBlXTtcblxuICBpZiAoIXR5cGVBbmRTaXplKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBbdHlwZSwgY29tcG9uZW50c10gPSB0eXBlQW5kU2l6ZTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIGNvbXBvbmVudHNcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb3NpdGVHTFR5cGUodHlwZSwgY29tcG9uZW50cykge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEdMX0JZVEU6XG4gICAgY2FzZSBHTF9VTlNJR05FRF9CWVRFOlxuICAgIGNhc2UgR0xfU0hPUlQ6XG4gICAgY2FzZSBHTF9VTlNJR05FRF9TSE9SVDpcbiAgICAgIHR5cGUgPSBHTF9GTE9BVDtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgfVxuXG4gIGZvciAoY29uc3QgZ2xUeXBlIGluIENPTVBPU0lURV9HTF9UWVBFUykge1xuICAgIGNvbnN0IFtjb21wVHlwZSwgY29tcENvbXBvbmVudHMsIG5hbWVdID0gQ09NUE9TSVRFX0dMX1RZUEVTW2dsVHlwZV07XG5cbiAgICBpZiAoY29tcFR5cGUgPT09IHR5cGUgJiYgY29tcENvbXBvbmVudHMgPT09IGNvbXBvbmVudHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdsVHlwZSxcbiAgICAgICAgbmFtZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF0dHJpYnV0ZS11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38522\n")},79579:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "km": function() { return /* binding */ getKey; },\n/* harmony export */   "sF": function() { return /* binding */ getKeyValue; }\n/* harmony export */ });\n/* unused harmony export getKeyType */\n/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22525);\n\nfunction getKeyValue(gl, name) {\n  if (typeof name !== \'string\') {\n    return name;\n  }\n\n  const number = Number(name);\n\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  name = name.replace(/^.*\\./, \'\');\n  const value = gl[name];\n  (0,_utils_assert__WEBPACK_IMPORTED_MODULE_0__/* .assert */ .h)(value !== undefined, "Accessing undefined constant GL.".concat(name));\n  return value;\n}\nfunction getKey(gl, value) {\n  value = Number(value);\n\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return "GL.".concat(key);\n    }\n  }\n\n  return String(value);\n}\nfunction getKeyType(gl, value) {\n  assert(value !== undefined, \'undefined key\');\n  value = Number(value);\n\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return "GL.".concat(key);\n    }\n  }\n\n  return String(value);\n}\n//# sourceMappingURL=constants-to-keys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1NzkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2xDO0FBQ1A7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRSw4REFBTTtBQUNSO0FBQ0E7QUFDTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvd2ViZ2wvZGlzdC9lc20vd2ViZ2wtdXRpbHMvY29uc3RhbnRzLXRvLWtleXMuanM/ZTExYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi91dGlscy9hc3NlcnQnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEtleVZhbHVlKGdsLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuXG4gIGNvbnN0IG51bWJlciA9IE51bWJlcihuYW1lKTtcblxuICBpZiAoIWlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvXi4qXFwuLywgJycpO1xuICBjb25zdCB2YWx1ZSA9IGdsW25hbWVdO1xuICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJBY2Nlc3NpbmcgdW5kZWZpbmVkIGNvbnN0YW50IEdMLlwiLmNvbmNhdChuYW1lKSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXkoZ2wsIHZhbHVlKSB7XG4gIHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBnbCkge1xuICAgIGlmIChnbFtrZXldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIFwiR0wuXCIuY29uY2F0KGtleSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5VHlwZShnbCwgdmFsdWUpIHtcbiAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQsICd1bmRlZmluZWQga2V5Jyk7XG4gIHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBnbCkge1xuICAgIGlmIChnbFtrZXldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIFwiR0wuXCIuY29uY2F0KGtleSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMtdG8ta2V5cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///79579\n')},37178:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"U\": function() { return /* binding */ requestAnimationFrame; },\n/* harmony export */   \"W\": function() { return /* binding */ cancelAnimationFrame; }\n/* harmony export */ });\nfunction requestAnimationFrame(callback) {\n  return typeof window !== 'undefined' && window.requestAnimationFrame ? window.requestAnimationFrame(callback) : setTimeout(callback, 1000 / 60);\n}\nfunction cancelAnimationFrame(timerId) {\n  return typeof window !== 'undefined' && window.cancelAnimationFrame ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);\n}\n//# sourceMappingURL=request-animation-frame.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcxNzguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS93ZWJnbC11dGlscy9yZXF1ZXN0LWFuaW1hdGlvbi1mcmFtZS5qcz80ODY4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSA6IHNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uRnJhbWUodGltZXJJZCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID8gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVySWQpIDogY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1hbmltYXRpb24tZnJhbWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37178\n")},73462:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"h\": function() { return /* binding */ cloneTextureFrom; },\n  \"Y\": function() { return /* binding */ toFramebuffer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-2d.js + 1 modules\nvar texture_2d = __webpack_require__(51621);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture.js\nvar texture = __webpack_require__(35008);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-cube.js\n\n\nconst FACES = [34069, 34070, 34071, 34072, 34073, 34074];\nclass TextureCube extends texture/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'TextureCube';\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,esm/* assertWebGLContext */.JD)(gl);\n    super(gl, Object.assign({}, props, {\n      target: 34067\n    }));\n    this.initialize(props);\n    Object.seal(this);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      mipmaps = true,\n      parameters = {}\n    } = props;\n    this.opts = props;\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage(_ref) {\n    let {\n      face,\n      data,\n      x = 0,\n      y = 0,\n      mipmapLevel = 0\n    } = _ref;\n    return this._subImage({\n      target: face,\n      data,\n      x,\n      y,\n      mipmapLevel\n    });\n  }\n\n  async setCubeMapImageData(_ref2) {\n    let {\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = 6408,\n      type = 5121\n    } = _ref2;\n    const {\n      gl\n    } = this;\n    const imageDataMap = pixels || data;\n    const resolvedFaces = await Promise.all(FACES.map(face => {\n      const facePixels = imageDataMap[face];\n      return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n    }));\n    this.bind();\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        esm/* log.warn */.cM.warn(\"\".concat(this.id, \" has mipmap and multiple LODs.\"))();\n      }\n\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n    this.unbind();\n  }\n\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = 6408,\n      type = 5121\n    } = options;\n    const {\n      gl\n    } = this;\n    const imageData = pixels || data;\n    this.bind();\n\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData => this.setImageDataForFace(Object.assign({}, options, {\n        face,\n        data: resolvedImageData,\n        pixels: resolvedImageData\n      })));\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n\n}\nTextureCube.FACES = FACES;\n//# sourceMappingURL=texture-cube.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-formats.js\nvar texture_formats = __webpack_require__(33889);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/buffer.js\nvar buffer = __webpack_require__(53478);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-3d.js\n\n\n\n\nclass Texture3D extends texture/* default */.Z {\n  get [Symbol.toStringTag]() {\n    return 'Texture3D';\n  }\n\n  static isSupported(gl) {\n    return (0,esm/* isWebGL2 */.D0)(gl);\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0,esm/* assertWebGL2Context */.KQ)(gl);\n    props = Object.assign({\n      depth: 1\n    }, props, {\n      target: 32879,\n      unpackFlipY: false\n    });\n    super(gl, props);\n    this.initialize(props);\n    Object.seal(this);\n  }\n\n  setImageData(_ref) {\n    let {\n      level = 0,\n      dataFormat = 6408,\n      width,\n      height,\n      depth = 1,\n      border = 0,\n      format,\n      type = 5121,\n      offset = 0,\n      data,\n      parameters = {}\n    } = _ref;\n\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n    (0,esm/* withParameters */.s8)(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, border, format, type, data);\n      }\n\n      if (data instanceof buffer/* default */.Z) {\n        this.gl.bindBuffer(35052, data.handle);\n        this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, border, format, type, offset);\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      const channels = texture_formats/* DATA_FORMAT_CHANNELS */.C[this.dataFormat] || 4;\n      const channelSize = texture_formats/* TYPE_SIZES */.pH[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * this.depth * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n    return this;\n  }\n\n}\n//# sourceMappingURL=texture-3d.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/framebuffer.js\nvar classes_framebuffer = __webpack_require__(53849);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar assert = __webpack_require__(22525);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/texture-utils.js\n\n\n\n\n\nfunction cloneTextureFrom(refTexture, overrides) {\n  (0,assert/* assert */.h)(refTexture instanceof texture_2d/* default */.Z || refTexture instanceof TextureCube || refTexture instanceof Texture3D);\n  const TextureType = refTexture.constructor;\n  const {\n    gl,\n    width,\n    height,\n    format,\n    type,\n    dataFormat,\n    border,\n    mipmaps\n  } = refTexture;\n  const textureOptions = Object.assign({\n    width,\n    height,\n    format,\n    type,\n    dataFormat,\n    border,\n    mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\nfunction toFramebuffer(texture, opts) {\n  const {\n    gl,\n    width,\n    height,\n    id\n  } = texture;\n  const framebuffer = new classes_framebuffer/* default */.Z(gl, Object.assign({}, opts, {\n    id: \"framebuffer-for-\".concat(id),\n    width,\n    height,\n    attachments: {\n      [36064]: texture\n    }\n  }));\n  return framebuffer;\n}\n//# sourceMappingURL=texture-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///73462\n")},9335:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "KS": function() { return /* binding */ scalePixels; },\n/* harmony export */   "O": function() { return /* binding */ getGLTypeFromTypedArray; },\n/* harmony export */   "c$": function() { return /* binding */ flipRows; },\n/* harmony export */   "vN": function() { return /* binding */ getTypedArrayFromGLType; }\n/* harmony export */ });\nconst ERR_TYPE_DEDUCTION = \'Failed to deduce GL constant from typed array\';\nfunction getGLTypeFromTypedArray(arrayOrType) {\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n\n  switch (type) {\n    case Float32Array:\n      return 5126;\n\n    case Uint16Array:\n      return 5123;\n\n    case Uint32Array:\n      return 5125;\n\n    case Uint8Array:\n      return 5121;\n\n    case Uint8ClampedArray:\n      return 5121;\n\n    case Int8Array:\n      return 5120;\n\n    case Int16Array:\n      return 5122;\n\n    case Int32Array:\n      return 5124;\n\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\nfunction getTypedArrayFromGLType(glType) {\n  let {\n    clamped = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (glType) {\n    case 5126:\n      return Float32Array;\n\n    case 5123:\n    case 33635:\n    case 32819:\n    case 32820:\n      return Uint16Array;\n\n    case 5125:\n      return Uint32Array;\n\n    case 5121:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n\n    case 5120:\n      return Int8Array;\n\n    case 5122:\n      return Int16Array;\n\n    case 5124:\n      return Int32Array;\n\n    default:\n      throw new Error(\'Failed to deduce typed array type from GL constant\');\n  }\n}\nfunction flipRows(_ref) {\n  let {\n    data,\n    width,\n    height,\n    bytesPerPixel = 4,\n    temp\n  } = _ref;\n  const bytesPerRow = width * bytesPerPixel;\n  temp = temp || new Uint8Array(bytesPerRow);\n\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    data.set(temp, bottomOffset);\n  }\n}\nfunction scalePixels(_ref2) {\n  let {\n    data,\n    width,\n    height\n  } = _ref2;\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n\n  return {\n    data: newData,\n    width: newWidth,\n    height: newHeight\n  };\n}\n//# sourceMappingURL=typed-array-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMzNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixlQUFlO0FBQ2pDLG9CQUFvQixjQUFjO0FBQ2xDLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC93ZWJnbC9kaXN0L2VzbS93ZWJnbC11dGlscy90eXBlZC1hcnJheS11dGlscy5qcz9mNjcyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEVSUl9UWVBFX0RFRFVDVElPTiA9ICdGYWlsZWQgdG8gZGVkdWNlIEdMIGNvbnN0YW50IGZyb20gdHlwZWQgYXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdMVHlwZUZyb21UeXBlZEFycmF5KGFycmF5T3JUeXBlKSB7XG4gIGNvbnN0IHR5cGUgPSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYXlPclR5cGUpID8gYXJyYXlPclR5cGUuY29uc3RydWN0b3IgOiBhcnJheU9yVHlwZTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEZsb2F0MzJBcnJheTpcbiAgICAgIHJldHVybiA1MTI2O1xuXG4gICAgY2FzZSBVaW50MTZBcnJheTpcbiAgICAgIHJldHVybiA1MTIzO1xuXG4gICAgY2FzZSBVaW50MzJBcnJheTpcbiAgICAgIHJldHVybiA1MTI1O1xuXG4gICAgY2FzZSBVaW50OEFycmF5OlxuICAgICAgcmV0dXJuIDUxMjE7XG5cbiAgICBjYXNlIFVpbnQ4Q2xhbXBlZEFycmF5OlxuICAgICAgcmV0dXJuIDUxMjE7XG5cbiAgICBjYXNlIEludDhBcnJheTpcbiAgICAgIHJldHVybiA1MTIwO1xuXG4gICAgY2FzZSBJbnQxNkFycmF5OlxuICAgICAgcmV0dXJuIDUxMjI7XG5cbiAgICBjYXNlIEludDMyQXJyYXk6XG4gICAgICByZXR1cm4gNTEyNDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoRVJSX1RZUEVfREVEVUNUSU9OKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVkQXJyYXlGcm9tR0xUeXBlKGdsVHlwZSkge1xuICBsZXQge1xuICAgIGNsYW1wZWQgPSB0cnVlXG4gIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHN3aXRjaCAoZ2xUeXBlKSB7XG4gICAgY2FzZSA1MTI2OlxuICAgICAgcmV0dXJuIEZsb2F0MzJBcnJheTtcblxuICAgIGNhc2UgNTEyMzpcbiAgICBjYXNlIDMzNjM1OlxuICAgIGNhc2UgMzI4MTk6XG4gICAgY2FzZSAzMjgyMDpcbiAgICAgIHJldHVybiBVaW50MTZBcnJheTtcblxuICAgIGNhc2UgNTEyNTpcbiAgICAgIHJldHVybiBVaW50MzJBcnJheTtcblxuICAgIGNhc2UgNTEyMTpcbiAgICAgIHJldHVybiBjbGFtcGVkID8gVWludDhDbGFtcGVkQXJyYXkgOiBVaW50OEFycmF5O1xuXG4gICAgY2FzZSA1MTIwOlxuICAgICAgcmV0dXJuIEludDhBcnJheTtcblxuICAgIGNhc2UgNTEyMjpcbiAgICAgIHJldHVybiBJbnQxNkFycmF5O1xuXG4gICAgY2FzZSA1MTI0OlxuICAgICAgcmV0dXJuIEludDMyQXJyYXk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZGVkdWNlIHR5cGVkIGFycmF5IHR5cGUgZnJvbSBHTCBjb25zdGFudCcpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmxpcFJvd3MoX3JlZikge1xuICBsZXQge1xuICAgIGRhdGEsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGJ5dGVzUGVyUGl4ZWwgPSA0LFxuICAgIHRlbXBcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IGJ5dGVzUGVyUm93ID0gd2lkdGggKiBieXRlc1BlclBpeGVsO1xuICB0ZW1wID0gdGVtcCB8fCBuZXcgVWludDhBcnJheShieXRlc1BlclJvdyk7XG5cbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQgLyAyOyArK3kpIHtcbiAgICBjb25zdCB0b3BPZmZzZXQgPSB5ICogYnl0ZXNQZXJSb3c7XG4gICAgY29uc3QgYm90dG9tT2Zmc2V0ID0gKGhlaWdodCAtIHkgLSAxKSAqIGJ5dGVzUGVyUm93O1xuICAgIHRlbXAuc2V0KGRhdGEuc3ViYXJyYXkodG9wT2Zmc2V0LCB0b3BPZmZzZXQgKyBieXRlc1BlclJvdykpO1xuICAgIGRhdGEuY29weVdpdGhpbih0b3BPZmZzZXQsIGJvdHRvbU9mZnNldCwgYm90dG9tT2Zmc2V0ICsgYnl0ZXNQZXJSb3cpO1xuICAgIGRhdGEuc2V0KHRlbXAsIGJvdHRvbU9mZnNldCk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVBpeGVscyhfcmVmMikge1xuICBsZXQge1xuICAgIGRhdGEsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH0gPSBfcmVmMjtcbiAgY29uc3QgbmV3V2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoIC8gMik7XG4gIGNvbnN0IG5ld0hlaWdodCA9IE1hdGgucm91bmQoaGVpZ2h0IC8gMik7XG4gIGNvbnN0IG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShuZXdXaWR0aCAqIG5ld0hlaWdodCAqIDQpO1xuXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgbmV3SGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IG5ld1dpZHRoOyB4KyspIHtcbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgNDsgYysrKSB7XG4gICAgICAgIG5ld0RhdGFbKHkgKiBuZXdXaWR0aCArIHgpICogNCArIGNdID0gZGF0YVsoeSAqIDIgKiB3aWR0aCArIHggKiAyKSAqIDQgKyBjXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGE6IG5ld0RhdGEsXG4gICAgd2lkdGg6IG5ld1dpZHRoLFxuICAgIGhlaWdodDogbmV3SGVpZ2h0XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlZC1hcnJheS11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9335\n')},39875:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ TinySDF; }\n/* harmony export */ });\nconst INF = 1e20;\n\nclass TinySDF {\n    constructor({\n        fontSize = 24,\n        buffer = 3,\n        radius = 8,\n        cutoff = 0.25,\n        fontFamily = 'sans-serif',\n        fontWeight = 'normal',\n        fontStyle = 'normal'\n    } = {}) {\n        this.buffer = buffer;\n        this.cutoff = cutoff;\n        this.radius = radius;\n\n        // make the canvas size big enough to both have the specified buffer around the glyph\n        // for \"halo\", and account for some glyphs possibly being larger than their font size\n        const size = this.size = fontSize + buffer * 4;\n\n        const canvas = this._createCanvas(size);\n        const ctx = this.ctx = canvas.getContext('2d', {willReadFrequently: true});\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        ctx.textBaseline = 'alphabetic';\n        ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment\n        ctx.fillStyle = 'black';\n\n        // temporary arrays for the distance transform\n        this.gridOuter = new Float64Array(size * size);\n        this.gridInner = new Float64Array(size * size);\n        this.f = new Float64Array(size);\n        this.z = new Float64Array(size + 1);\n        this.v = new Uint16Array(size);\n    }\n\n    _createCanvas(size) {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvas.height = size;\n        return canvas;\n    }\n\n    draw(char) {\n        const {\n            width: glyphAdvance,\n            actualBoundingBoxAscent,\n            actualBoundingBoxDescent,\n            actualBoundingBoxLeft,\n            actualBoundingBoxRight\n        } = this.ctx.measureText(char);\n\n        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop\n        // The remainder is implicitly encoded in the rasterization\n        const glyphTop = Math.ceil(actualBoundingBoxAscent);\n        const glyphLeft = 0;\n\n        // If the glyph overflows the canvas size, it will be clipped at the bottom/right\n        const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));\n        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));\n\n        const width = glyphWidth + 2 * this.buffer;\n        const height = glyphHeight + 2 * this.buffer;\n\n        const len = Math.max(width * height, 0);\n        const data = new Uint8ClampedArray(len);\n        const glyph = {data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance};\n        if (glyphWidth === 0 || glyphHeight === 0) return glyph;\n\n        const {ctx, buffer, gridInner, gridOuter} = this;\n        ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);\n        ctx.fillText(char, buffer, buffer + glyphTop);\n        const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);\n\n        // Initialize grids outside the glyph range to alpha 0\n        gridOuter.fill(INF, 0, len);\n        gridInner.fill(0, 0, len);\n\n        for (let y = 0; y < glyphHeight; y++) {\n            for (let x = 0; x < glyphWidth; x++) {\n                const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value\n                if (a === 0) continue; // empty pixels\n\n                const j = (y + buffer) * width + x + buffer;\n\n                if (a === 1) { // fully drawn pixels\n                    gridOuter[j] = 0;\n                    gridInner[j] = INF;\n\n                } else { // aliased pixels\n                    const d = 0.5 - a;\n                    gridOuter[j] = d > 0 ? d * d : 0;\n                    gridInner[j] = d < 0 ? d * d : 0;\n                }\n            }\n        }\n\n        edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);\n        edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);\n\n        for (let i = 0; i < len; i++) {\n            const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);\n            data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));\n        }\n\n        return glyph;\n    }\n}\n\n// 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\nfunction edt(data, x0, y0, width, height, gridSize, f, v, z) {\n    for (let x = x0; x < x0 + width; x++) edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);\n    for (let y = y0; y < y0 + height; y++) edt1d(data, y * gridSize + x0, 1, width, f, v, z);\n}\n\n// 1D squared distance transform\nfunction edt1d(grid, offset, stride, length, f, v, z) {\n    v[0] = 0;\n    z[0] = -INF;\n    z[1] = INF;\n    f[0] = grid[offset];\n\n    for (let q = 1, k = 0, s = 0; q < length; q++) {\n        f[q] = grid[offset + q * stride];\n        const q2 = q * q;\n        do {\n            const r = v[k];\n            s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;\n        } while (s <= z[k] && --k > -1);\n\n        k++;\n        v[k] = q;\n        z[k] = s;\n        z[k + 1] = INF;\n    }\n\n    for (let q = 0, k = 0; q < length; q++) {\n        while (z[k + 1] < q) k++;\n        const r = v[k];\n        const qr = q - r;\n        grid[offset + q * stride] = f[r] + qr * qr;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39875\n")}}]);