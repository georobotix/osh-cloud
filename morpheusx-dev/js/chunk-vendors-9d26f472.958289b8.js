"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[1731],{53773:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(72000);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50491);\n/* harmony import */ var _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(71351);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96190);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(68985);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar scratchDiagonalCartesianNE = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchDiagonalCartesianSW = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchDiagonalCartographic = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar scratchCenterCartesian = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchSurfaceCartesian = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nvar scratchBoundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar tilingScheme = new _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z();\nvar scratchCorners = [\n  new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n  new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n  new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n  new _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(),\n];\nvar scratchTileXY = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\n/**\n * A collection of functions for approximating terrain height\n * @private\n */\nvar ApproximateTerrainHeights = {};\n\n/**\n * Initializes the minimum and maximum terrain heights\n * @return {Promise<void>}\n */\nApproximateTerrainHeights.initialize = function () {\n  var initPromise = ApproximateTerrainHeights._initPromise;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(initPromise)) {\n    return initPromise;\n  }\n\n  initPromise = _Resource_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].fetchJson */ .Z.fetchJson(\n    (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)("Assets/approximateTerrainHeights.json")\n  ).then(function (json) {\n    ApproximateTerrainHeights._terrainHeights = json;\n  });\n  ApproximateTerrainHeights._initPromise = initPromise;\n\n  return initPromise;\n};\n\n/**\n * Computes the minimum and maximum terrain heights for a given rectangle\n * @param {Rectangle} rectangle The bounding rectangle\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid\n * @return {{minimumTerrainHeight: Number, maximumTerrainHeight: Number}}\n */\nApproximateTerrainHeights.getMinimumMaximumHeights = function (\n  rectangle,\n  ellipsoid\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("rectangle", rectangle);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(ApproximateTerrainHeights._terrainHeights)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function"\n    );\n  }\n  //>>includeEnd(\'debug\');\n  ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].WGS84 */ .Z.WGS84);\n\n  var xyLevel = getTileXYLevel(rectangle);\n\n  // Get the terrain min/max for that tile\n  var minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;\n  var maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(xyLevel)) {\n    var key = xyLevel.level + "-" + xyLevel.x + "-" + xyLevel.y;\n    var heights = ApproximateTerrainHeights._terrainHeights[key];\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(heights)) {\n      minTerrainHeight = heights[0];\n      maxTerrainHeight = heights[1];\n    }\n\n    // Compute min by taking the center of the NE->SW diagonal and finding distance to the surface\n    ellipsoid.cartographicToCartesian(\n      _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].northeast */ .Z.northeast(rectangle, scratchDiagonalCartographic),\n      scratchDiagonalCartesianNE\n    );\n    ellipsoid.cartographicToCartesian(\n      _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].southwest */ .Z.southwest(rectangle, scratchDiagonalCartographic),\n      scratchDiagonalCartesianSW\n    );\n\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].midpoint */ .Z.midpoint(\n      scratchDiagonalCartesianSW,\n      scratchDiagonalCartesianNE,\n      scratchCenterCartesian\n    );\n    var surfacePosition = ellipsoid.scaleToGeodeticSurface(\n      scratchCenterCartesian,\n      scratchSurfaceCartesian\n    );\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(surfacePosition)) {\n      var distance = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].distance */ .Z.distance(\n        scratchCenterCartesian,\n        surfacePosition\n      );\n      minTerrainHeight = Math.min(minTerrainHeight, -distance);\n    } else {\n      minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;\n    }\n  }\n\n  minTerrainHeight = Math.max(\n    ApproximateTerrainHeights._defaultMinTerrainHeight,\n    minTerrainHeight\n  );\n\n  return {\n    minimumTerrainHeight: minTerrainHeight,\n    maximumTerrainHeight: maxTerrainHeight,\n  };\n};\n\n/**\n * Computes the bounding sphere based on the tile heights in the rectangle\n * @param {Rectangle} rectangle The bounding rectangle\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid\n * @return {BoundingSphere} The result bounding sphere\n */\nApproximateTerrainHeights.getBoundingSphere = function (rectangle, ellipsoid) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].defined */ .Z.defined("rectangle", rectangle);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(ApproximateTerrainHeights._terrainHeights)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      "You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function"\n    );\n  }\n  //>>includeEnd(\'debug\');\n  ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].WGS84 */ .Z.WGS84);\n\n  var xyLevel = getTileXYLevel(rectangle);\n\n  // Get the terrain max for that tile\n  var maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(xyLevel)) {\n    var key = xyLevel.level + "-" + xyLevel.x + "-" + xyLevel.y;\n    var heights = ApproximateTerrainHeights._terrainHeights[key];\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(heights)) {\n      maxTerrainHeight = heights[1];\n    }\n  }\n\n  var result = _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRectangle3D */ .Z.fromRectangle3D(rectangle, ellipsoid, 0.0);\n  _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRectangle3D */ .Z.fromRectangle3D(\n    rectangle,\n    ellipsoid,\n    maxTerrainHeight,\n    scratchBoundingSphere\n  );\n\n  return _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].union */ .Z.union(result, scratchBoundingSphere, result);\n};\n\nfunction getTileXYLevel(rectangle) {\n  _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.east,\n    rectangle.north,\n    0.0,\n    scratchCorners[0]\n  );\n  _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.west,\n    rectangle.north,\n    0.0,\n    scratchCorners[1]\n  );\n  _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.east,\n    rectangle.south,\n    0.0,\n    scratchCorners[2]\n  );\n  _Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].fromRadians */ .Z.fromRadians(\n    rectangle.west,\n    rectangle.south,\n    0.0,\n    scratchCorners[3]\n  );\n\n  // Determine which tile the bounding rectangle is in\n  var lastLevelX = 0,\n    lastLevelY = 0;\n  var currentX = 0,\n    currentY = 0;\n  var maxLevel = ApproximateTerrainHeights._terrainHeightsMaxLevel;\n  var i;\n  for (i = 0; i <= maxLevel; ++i) {\n    var failed = false;\n    for (var j = 0; j < 4; ++j) {\n      var corner = scratchCorners[j];\n      tilingScheme.positionToTileXY(corner, i, scratchTileXY);\n      if (j === 0) {\n        currentX = scratchTileXY.x;\n        currentY = scratchTileXY.y;\n      } else if (currentX !== scratchTileXY.x || currentY !== scratchTileXY.y) {\n        failed = true;\n        break;\n      }\n    }\n\n    if (failed) {\n      break;\n    }\n\n    lastLevelX = currentX;\n    lastLevelY = currentY;\n  }\n\n  if (i === 0) {\n    return undefined;\n  }\n\n  return {\n    x: lastLevelX,\n    y: lastLevelY,\n    level: i > maxLevel ? maxLevel : i - 1,\n  };\n}\n\nApproximateTerrainHeights._terrainHeightsMaxLevel = 6;\nApproximateTerrainHeights._defaultMaxTerrainHeight = 9000.0;\nApproximateTerrainHeights._defaultMinTerrainHeight = -100000.0;\nApproximateTerrainHeights._terrainHeights = undefined;\nApproximateTerrainHeights._initPromise = undefined;\n\nObject.defineProperties(ApproximateTerrainHeights, {\n  /**\n   * Determines if the terrain heights are initialized and ready to use. To initialize the terrain heights,\n   * call {@link ApproximateTerrainHeights#initialize} and wait for the returned promise to resolve.\n   * @type {Boolean}\n   * @readonly\n   * @memberof ApproximateTerrainHeights\n   */\n  initialized: {\n    get: function () {\n      return (0,_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(ApproximateTerrainHeights._terrainHeights);\n    },\n  },\n});\n/* harmony default export */ __webpack_exports__["Z"] = (ApproximateTerrainHeights);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53773\n')},52890:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Credit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52975);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50491);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14459);\n/* harmony import */ var _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(71351);\n/* harmony import */ var _HeightmapEncoding_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(25489);\n/* harmony import */ var _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(57134);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96190);\n/* harmony import */ var _Request_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22426);\n/* harmony import */ var _RequestState_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(6224);\n/* harmony import */ var _RequestType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82968);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(68985);\n/* harmony import */ var _RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(9407);\n/* harmony import */ var _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(1497);\n/* harmony import */ var _TileAvailability_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(25707);\n/* harmony import */ var _TileProviderError_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(9121);\n/* harmony import */ var _WebMercatorTilingScheme_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(42423);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ALL_CHILDREN = 15;\n\n/**\n * A {@link TerrainProvider} that produces terrain geometry by tessellating height maps\n * retrieved from Elevation Tiles of an an ArcGIS ImageService.\n *\n * @alias ArcGISTiledElevationTerrainProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} options.url The URL of the ArcGIS ImageServer service.\n * @param {String} [options.token] The authorization token to use to connect to the service.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme\'s ellipsoid is used instead.\n *                    If neither parameter is specified, the WGS84 ellipsoid is used.\n *\n * @example\n * var terrainProvider = new Cesium.ArcGISTiledElevationTerrainProvider({\n *   url : \'https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\',\n *   token : \'KED1aF_I4UzXOHy3BnhwyBHU4l5oY6rO6walkmHoYqGp4XyIWUd5YZUC1ZrLAzvV40pR6gBXQayh0eFA8m6vPg..\'\n * });\n * viewer.terrainProvider = terrainProvider;\n *\n *  @see TerrainProvider\n */\nfunction ArcGISTiledElevationTerrainProvider(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(options) || !(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(options.url)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z("options.url is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._resource = undefined;\n  this._credit = undefined;\n  this._tilingScheme = undefined;\n  this._levelZeroMaximumGeometricError = undefined;\n  this._maxLevel = undefined;\n  this._terrainDataStructure = undefined;\n  this._ready = false;\n  this._width = undefined;\n  this._height = undefined;\n  this._encoding = undefined;\n  var token = options.token;\n\n  this._hasAvailability = false;\n  this._tilesAvailable = undefined;\n  this._tilesAvailablityLoaded = undefined;\n  this._availableCache = {};\n\n  var that = this;\n  var ellipsoid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(options.ellipsoid, _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].WGS84 */ .Z.WGS84);\n  this._readyPromise = (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.url)\n    .then(function (url) {\n      var resource = _Resource_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].createIfNeeded */ .Z.createIfNeeded(url);\n      resource.appendForwardSlash();\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(token)) {\n        resource = resource.getDerivedResource({\n          queryParameters: {\n            token: token,\n          },\n        });\n      }\n      that._resource = resource;\n\n      var metadataResource = resource.getDerivedResource({\n        queryParameters: {\n          f: "pjson",\n        },\n      });\n\n      return metadataResource.fetchJson();\n    })\n    .then(function (metadata) {\n      var copyrightText = metadata.copyrightText;\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(copyrightText)) {\n        that._credit = new _Credit_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(copyrightText);\n      }\n\n      var spatialReference = metadata.spatialReference;\n      var wkid = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(\n        spatialReference.latestWkid,\n        spatialReference.wkid\n      );\n      var extent = metadata.extent;\n      var tilingSchemeOptions = {\n        ellipsoid: ellipsoid,\n      };\n      if (wkid === 4326) {\n        tilingSchemeOptions.rectangle = _Rectangle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromDegrees */ .Z.fromDegrees(\n          extent.xmin,\n          extent.ymin,\n          extent.xmax,\n          extent.ymax\n        );\n        that._tilingScheme = new _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(tilingSchemeOptions);\n      } else if (wkid === 3857) {\n        tilingSchemeOptions.rectangleSouthwestInMeters = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n          extent.xmin,\n          extent.ymin\n        );\n        tilingSchemeOptions.rectangleNortheastInMeters = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(\n          extent.xmax,\n          extent.ymax\n        );\n        that._tilingScheme = new _WebMercatorTilingScheme_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(tilingSchemeOptions);\n      } else {\n        return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z("Invalid spatial reference"));\n      }\n\n      var tileInfo = metadata.tileInfo;\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(tileInfo)) {\n        return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z("tileInfo is required"));\n      }\n\n      that._width = tileInfo.rows + 1;\n      that._height = tileInfo.cols + 1;\n      that._encoding =\n        tileInfo.format === "LERC"\n          ? _HeightmapEncoding_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].LERC */ .Z.LERC\n          : _HeightmapEncoding_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NONE */ .Z.NONE;\n      that._lodCount = tileInfo.lods.length - 1;\n\n      var hasAvailability = (that._hasAvailability =\n        metadata.capabilities.indexOf("Tilemap") !== -1);\n      if (hasAvailability) {\n        that._tilesAvailable = new _TileAvailability_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(\n          that._tilingScheme,\n          that._lodCount\n        );\n        that._tilesAvailable.addAvailableTileRange(\n          0,\n          0,\n          0,\n          that._tilingScheme.getNumberOfXTilesAtLevel(0),\n          that._tilingScheme.getNumberOfYTilesAtLevel(0)\n        );\n        that._tilesAvailablityLoaded = new _TileAvailability_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(\n          that._tilingScheme,\n          that._lodCount\n        );\n      }\n\n      that._levelZeroMaximumGeometricError = _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].getEstimatedLevelZeroGeometricErrorForAHeightmap */ .Z.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n        that._tilingScheme.ellipsoid,\n        that._width,\n        that._tilingScheme.getNumberOfXTilesAtLevel(0)\n      );\n\n      if (metadata.bandCount > 1) {\n        console.log(\n          "ArcGISTiledElevationTerrainProvider: Terrain data has more than 1 band. Using the first one."\n        );\n      }\n\n      that._terrainDataStructure = {\n        elementMultiplier: 1.0,\n        lowestEncodedHeight: metadata.minValues[0],\n        highestEncodedHeight: metadata.maxValues[0],\n      };\n\n      that._ready = true;\n\n      return true;\n    })\n    .otherwise(function (error) {\n      var message =\n        "An error occurred while accessing " + that._resource.url + ".";\n      _TileProviderError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].handleError */ .Z.handleError(undefined, that, that._errorEvent, message);\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(error);\n    });\n\n  this._errorEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n}\n\nObject.defineProperties(ArcGISTiledElevationTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n          "credit must not be called before ready returns true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n          "tilingScheme must not be called before ready returns true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n          "availability must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._tilesAvailable;\n    },\n  },\n});\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link ArcGISTiledElevationTerrainProvider#ready} returns true.  The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nArcGISTiledElevationTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart(\'debug\', pragmas.debug)\n  if (!this._ready) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "requestTileGeometry must not be called before the terrain provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var tileResource = this._resource.getDerivedResource({\n    url: "tile/" + level + "/" + y + "/" + x,\n    request: request,\n  });\n\n  var hasAvailability = this._hasAvailability;\n  var availabilityPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve(true);\n  var availabilityRequest;\n  if (\n    hasAvailability &&\n    !(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(isTileAvailable(this, level + 1, x * 2, y * 2))\n  ) {\n    // We need to load child availability\n    var availabilityResult = requestAvailability(this, level + 1, x * 2, y * 2);\n\n    availabilityPromise = availabilityResult.promise;\n    availabilityRequest = availabilityResult.request;\n  }\n\n  var promise = tileResource.fetchArrayBuffer();\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(promise) || !(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(availabilityPromise)) {\n    return undefined;\n  }\n\n  var that = this;\n  var tilesAvailable = this._tilesAvailable;\n  return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].join */ .Z.join(promise, availabilityPromise)\n    .then(function (result) {\n      return new _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        buffer: result[0],\n        width: that._width,\n        height: that._height,\n        childTileMask: hasAvailability\n          ? tilesAvailable.computeChildMaskForTile(level, x, y)\n          : ALL_CHILDREN,\n        structure: that._terrainDataStructure,\n        encoding: that._encoding,\n      });\n    })\n    .otherwise(function (error) {\n      if (\n        (0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(availabilityRequest) &&\n        availabilityRequest.state === _RequestState_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CANCELLED */ .Z.CANCELLED\n      ) {\n        request.cancel();\n\n        // Don\'t reject the promise till the request is actually cancelled\n        // Otherwise it will think the request failed, but it didn\'t.\n        return request.deferred.promise.always(function () {\n          request.state = _RequestState_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].CANCELLED */ .Z.CANCELLED;\n          return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(error);\n        });\n      }\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(error);\n    });\n};\n\nfunction isTileAvailable(that, level, x, y) {\n  if (!that._hasAvailability) {\n    return undefined;\n  }\n\n  var tilesAvailablityLoaded = that._tilesAvailablityLoaded;\n  var tilesAvailable = that._tilesAvailable;\n\n  if (level > that._lodCount) {\n    return false;\n  }\n\n  // Check if tiles are known to be available\n  if (tilesAvailable.isTileAvailable(level, x, y)) {\n    return true;\n  }\n\n  // or to not be available\n  if (tilesAvailablityLoaded.isTileAvailable(level, x, y)) {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nArcGISTiledElevationTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this.ready) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "getLevelMaximumGeometricError must not be called before ready returns true."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nArcGISTiledElevationTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level\n) {\n  if (!this._hasAvailability) {\n    return undefined;\n  }\n\n  var result = isTileAvailable(this, level, x, y);\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(result)) {\n    return result;\n  }\n\n  requestAvailability(this, level, x, y);\n\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nArcGISTiledElevationTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\nfunction findRange(origin, width, height, data) {\n  var endCol = width - 1;\n  var endRow = height - 1;\n\n  var value = data[origin.y * width + origin.x];\n  var endingIndices = [];\n  var range = {\n    startX: origin.x,\n    startY: origin.y,\n    endX: 0,\n    endY: 0,\n  };\n\n  var corner = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(origin.x + 1, origin.y + 1);\n  var doneX = false;\n  var doneY = false;\n  while (!(doneX && doneY)) {\n    // We want to use the original value when checking Y,\n    //  so get it before it possibly gets incremented\n    var endX = corner.x;\n\n    // If we no longer move in the Y direction we need to check the corner tile in X pass\n    var endY = doneY ? corner.y + 1 : corner.y;\n\n    // Check X range\n    if (!doneX) {\n      for (var y = origin.y; y < endY; ++y) {\n        if (data[y * width + corner.x] !== value) {\n          doneX = true;\n          break;\n        }\n      }\n\n      if (doneX) {\n        endingIndices.push(new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(corner.x, origin.y));\n\n        // Use the last good column so we can continue with Y\n        --corner.x;\n        --endX;\n        range.endX = corner.x;\n      } else if (corner.x === endCol) {\n        range.endX = corner.x;\n        doneX = true;\n      } else {\n        ++corner.x;\n      }\n    }\n\n    // Check Y range - The corner tile is checked here\n    if (!doneY) {\n      var col = corner.y * width;\n      for (var x = origin.x; x <= endX; ++x) {\n        if (data[col + x] !== value) {\n          doneY = true;\n          break;\n        }\n      }\n\n      if (doneY) {\n        endingIndices.push(new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(origin.x, corner.y));\n\n        // Use the last good row so we can continue with X\n        --corner.y;\n        range.endY = corner.y;\n      } else if (corner.y === endRow) {\n        range.endY = corner.y;\n        doneY = true;\n      } else {\n        ++corner.y;\n      }\n    }\n  }\n\n  return {\n    endingIndices: endingIndices,\n    range: range,\n    value: value,\n  };\n}\n\nfunction computeAvailability(x, y, width, height, data) {\n  var ranges = [];\n\n  var singleValue = data.every(function (val) {\n    return val === data[0];\n  });\n  if (singleValue) {\n    if (data[0] === 1) {\n      ranges.push({\n        startX: x,\n        startY: y,\n        endX: x + width - 1,\n        endY: y + height - 1,\n      });\n    }\n\n    return ranges;\n  }\n\n  var positions = [new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(0, 0)];\n  while (positions.length > 0) {\n    var origin = positions.pop();\n    var result = findRange(origin, width, height, data);\n\n    if (result.value === 1) {\n      // Convert range into the array into global tile coordinates\n      var range = result.range;\n      range.startX += x;\n      range.endX += x;\n      range.startY += y;\n      range.endY += y;\n      ranges.push(range);\n    }\n\n    var endingIndices = result.endingIndices;\n    if (endingIndices.length > 0) {\n      positions = positions.concat(endingIndices);\n    }\n  }\n\n  return ranges;\n}\n\nfunction requestAvailability(that, level, x, y) {\n  if (!that._hasAvailability) {\n    return {};\n  }\n\n  // Fetch 128x128 availability list, so we make the minimum amount of requests\n  var xOffset = Math.floor(x / 128) * 128;\n  var yOffset = Math.floor(y / 128) * 128;\n\n  var dim = Math.min(1 << level, 128);\n  var url =\n    "tilemap/" + level + "/" + yOffset + "/" + xOffset + "/" + dim + "/" + dim;\n\n  var availableCache = that._availableCache;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(availableCache[url])) {\n    return availableCache[url];\n  }\n\n  var request = new _Request_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    throttle: false,\n    throttleByServer: true,\n    type: _RequestType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TERRAIN */ .Z.TERRAIN,\n  });\n\n  var tilemapResource = that._resource.getDerivedResource({\n    url: url,\n    request: request,\n  });\n\n  var promise = tilemapResource.fetchJson();\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(promise)) {\n    return {};\n  }\n\n  promise = promise.then(function (result) {\n    var available = computeAvailability(\n      xOffset,\n      yOffset,\n      dim,\n      dim,\n      result.data\n    );\n\n    // Mark whole area as having availability loaded\n    that._tilesAvailablityLoaded.addAvailableTileRange(\n      level,\n      xOffset,\n      yOffset,\n      xOffset + dim,\n      yOffset + dim\n    );\n\n    var tilesAvailable = that._tilesAvailable;\n    for (var i = 0; i < available.length; ++i) {\n      var range = available[i];\n      tilesAvailable.addAvailableTileRange(\n        level,\n        range.startX,\n        range.startY,\n        range.endX,\n        range.endY\n      );\n    }\n\n    // Conveniently return availability of original tile\n    return isTileAvailable(that, level, x, y);\n  });\n\n  availableCache[url] = {\n    promise: promise,\n    request: request,\n  };\n\n  promise = promise.always(function (result) {\n    delete availableCache[url];\n\n    return result;\n  });\n\n  return {\n    promise: promise,\n    request: request,\n  };\n}\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (ArcGISTiledElevationTerrainProvider)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52890\n')}}]);