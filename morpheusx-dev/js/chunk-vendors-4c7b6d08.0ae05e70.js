"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[345],{60838:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99417);\n\n\n\n\n\n\n/**\n * A 2D Cartesian point.\n * @alias Cartesian2\n * @constructor\n *\n * @param {Number} [x=0.0] The X component.\n * @param {Number} [y=0.0] The Y component.\n *\n * @see Cartesian3\n * @see Cartesian4\n * @see Packable\n */\nfunction Cartesian2(x, y) {\n  /**\n   * The X component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(x, 0.0);\n\n  /**\n   * The Y component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(y, 0.0);\n}\n\n/**\n * Creates a Cartesian2 instance from x and y coordinates.\n *\n * @param {Number} x The x coordinate.\n * @param {Number} y The y coordinate.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.fromElements = function (x, y, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian2(x, y);\n  }\n\n  result.x = x;\n  result.y = y;\n  return result;\n};\n\n/**\n * Duplicates a Cartesian2 instance.\n *\n * @param {Cartesian2} cartesian The Cartesian to duplicate.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided. (Returns undefined if cartesian is undefined)\n */\nCartesian2.clone = function (cartesian, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(cartesian)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian2(cartesian.x, cartesian.y);\n  }\n\n  result.x = cartesian.x;\n  result.y = cartesian.y;\n  return result;\n};\n\n/**\n * Creates a Cartesian2 instance from an existing Cartesian3.  This simply takes the\n * x and y properties of the Cartesian3 and drops z.\n * @function\n *\n * @param {Cartesian3} cartesian The Cartesian3 instance to create a Cartesian2 instance from.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.fromCartesian3 = Cartesian2.clone;\n\n/**\n * Creates a Cartesian2 instance from an existing Cartesian4.  This simply takes the\n * x and y properties of the Cartesian4 and drops z and w.\n * @function\n *\n * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian2 instance from.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.fromCartesian4 = Cartesian2.clone;\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCartesian2.packedLength = 2;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Cartesian2} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCartesian2.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex] = value.y;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Cartesian2} [result] The object into which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(startingIndex, 0);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Cartesian2();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex];\n  return result;\n};\n\n/**\n     * Flattens an array of Cartesian2s into and array of components.\n     *\n     * @param {Cartesian2[]} array The array of cartesians to pack.\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 2 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 2) elements.\n\n     * @returns {Number[]} The packed array.\n     */\nCartesian2.packArray = function (array, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  var length = array.length;\n  var resultLength = length * 2;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "If result is a typed array, it must have exactly array.length * 2 elements"\n    );\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    Cartesian2.pack(array[i], result, i * 2);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of cartesian components into and array of Cartesian2s.\n *\n * @param {Number[]} array The array of components to unpack.\n * @param {Cartesian2[]} [result] The array onto which to store the result.\n * @returns {Cartesian2[]} The unpacked array.\n */\nCartesian2.unpackArray = function (array, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("array.length", array.length, 2);\n  if (array.length % 2 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("array length must be a multiple of 2.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = array.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 2);\n  } else {\n    result.length = length / 2;\n  }\n\n  for (var i = 0; i < length; i += 2) {\n    var index = i / 2;\n    result[index] = Cartesian2.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Creates a Cartesian2 from two consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose two consecutive elements correspond to the x and y components, respectively.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n *\n * @example\n * // Create a Cartesian2 with (1.0, 2.0)\n * var v = [1.0, 2.0];\n * var p = Cesium.Cartesian2.fromArray(v);\n *\n * // Create a Cartesian2 with (1.0, 2.0) using an offset into an array\n * var v2 = [0.0, 0.0, 1.0, 2.0];\n * var p2 = Cesium.Cartesian2.fromArray(v2, 2);\n */\nCartesian2.fromArray = Cartesian2.unpack;\n\n/**\n * Computes the value of the maximum component for the supplied Cartesian.\n *\n * @param {Cartesian2} cartesian The cartesian to use.\n * @returns {Number} The value of the maximum component.\n */\nCartesian2.maximumComponent = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return Math.max(cartesian.x, cartesian.y);\n};\n\n/**\n * Computes the value of the minimum component for the supplied Cartesian.\n *\n * @param {Cartesian2} cartesian The cartesian to use.\n * @returns {Number} The value of the minimum component.\n */\nCartesian2.minimumComponent = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return Math.min(cartesian.x, cartesian.y);\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\n *\n * @param {Cartesian2} first A cartesian to compare.\n * @param {Cartesian2} second A cartesian to compare.\n * @param {Cartesian2} result The object into which to store the result.\n * @returns {Cartesian2} A cartesian with the minimum components.\n */\nCartesian2.minimumByComponent = function (first, second, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("first", first);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("second", second);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.min(first.x, second.x);\n  result.y = Math.min(first.y, second.y);\n\n  return result;\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\n *\n * @param {Cartesian2} first A cartesian to compare.\n * @param {Cartesian2} second A cartesian to compare.\n * @param {Cartesian2} result The object into which to store the result.\n * @returns {Cartesian2} A cartesian with the maximum components.\n */\nCartesian2.maximumByComponent = function (first, second, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("first", first);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("second", second);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.max(first.x, second.x);\n  result.y = Math.max(first.y, second.y);\n  return result;\n};\n\n/**\n * Computes the provided Cartesian\'s squared magnitude.\n *\n * @param {Cartesian2} cartesian The Cartesian instance whose squared magnitude is to be computed.\n * @returns {Number} The squared magnitude.\n */\nCartesian2.magnitudeSquared = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return cartesian.x * cartesian.x + cartesian.y * cartesian.y;\n};\n\n/**\n * Computes the Cartesian\'s magnitude (length).\n *\n * @param {Cartesian2} cartesian The Cartesian instance whose magnitude is to be computed.\n * @returns {Number} The magnitude.\n */\nCartesian2.magnitude = function (cartesian) {\n  return Math.sqrt(Cartesian2.magnitudeSquared(cartesian));\n};\n\nvar distanceScratch = new Cartesian2();\n\n/**\n * Computes the distance between two points.\n *\n * @param {Cartesian2} left The first point to compute the distance from.\n * @param {Cartesian2} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 1.0\n * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(2.0, 0.0));\n */\nCartesian2.distance = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian2.subtract(left, right, distanceScratch);\n  return Cartesian2.magnitude(distanceScratch);\n};\n\n/**\n * Computes the squared distance between two points.  Comparing squared distances\n * using this function is more efficient than comparing distances using {@link Cartesian2#distance}.\n *\n * @param {Cartesian2} left The first point to compute the distance from.\n * @param {Cartesian2} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 4.0, not 2.0\n * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(3.0, 0.0));\n */\nCartesian2.distanceSquared = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian2.subtract(left, right, distanceScratch);\n  return Cartesian2.magnitudeSquared(distanceScratch);\n};\n\n/**\n * Computes the normalized form of the supplied Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian to be normalized.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.normalize = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var magnitude = Cartesian2.magnitude(cartesian);\n\n  result.x = cartesian.x / magnitude;\n  result.y = cartesian.y / magnitude;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (isNaN(result.x) || isNaN(result.y)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("normalized result is not a number");\n  }\n  //>>includeEnd(\'debug\');\n\n  return result;\n};\n\n/**\n * Computes the dot (scalar) product of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @returns {Number} The dot product.\n */\nCartesian2.dot = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  return left.x * right.x + left.y * right.y;\n};\n\n/**\n * Computes the magnitude of the cross product that would result from implicitly setting the Z coordinate of the input vectors to 0\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @returns {Number} The cross product.\n */\nCartesian2.cross = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  return left.x * right.y - left.y * right.x;\n};\n\n/**\n * Computes the componentwise product of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.multiplyComponents = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x * right.x;\n  result.y = left.y * right.y;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.divideComponents = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x / right.x;\n  result.y = left.y / right.y;\n  return result;\n};\n\n/**\n * Computes the componentwise sum of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.add = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x + right.x;\n  result.y = left.y + right.y;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.subtract = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x - right.x;\n  result.y = left.y - right.y;\n  return result;\n};\n\n/**\n * Multiplies the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian2} cartesian The Cartesian to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.multiplyByScalar = function (cartesian, scalar, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("scalar", scalar);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = cartesian.x * scalar;\n  result.y = cartesian.y * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian2} cartesian The Cartesian to be divided.\n * @param {Number} scalar The scalar to divide by.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.divideByScalar = function (cartesian, scalar, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("scalar", scalar);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = cartesian.x / scalar;\n  result.y = cartesian.y / scalar;\n  return result;\n};\n\n/**\n * Negates the provided Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian to be negated.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.negate = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = -cartesian.x;\n  result.y = -cartesian.y;\n  return result;\n};\n\n/**\n * Computes the absolute value of the provided Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian whose absolute value is to be computed.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.abs = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.abs(cartesian.x);\n  result.y = Math.abs(cartesian.y);\n  return result;\n};\n\nvar lerpScratch = new Cartesian2();\n/**\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\n *\n * @param {Cartesian2} start The value corresponding to t at 0.0.\n * @param {Cartesian2} end The value corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.lerp = function (start, end, t, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("start", start);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("end", end);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("t", t);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  Cartesian2.multiplyByScalar(end, t, lerpScratch);\n  result = Cartesian2.multiplyByScalar(start, 1.0 - t, result);\n  return Cartesian2.add(lerpScratch, result, result);\n};\n\nvar angleBetweenScratch = new Cartesian2();\nvar angleBetweenScratch2 = new Cartesian2();\n/**\n * Returns the angle, in radians, between the provided Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @returns {Number} The angle between the Cartesians.\n */\nCartesian2.angleBetween = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian2.normalize(left, angleBetweenScratch);\n  Cartesian2.normalize(right, angleBetweenScratch2);\n  return _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].acosClamped */ .Z.acosClamped(\n    Cartesian2.dot(angleBetweenScratch, angleBetweenScratch2)\n  );\n};\n\nvar mostOrthogonalAxisScratch = new Cartesian2();\n/**\n * Returns the axis that is most orthogonal to the provided Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian on which to find the most orthogonal axis.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The most orthogonal axis.\n */\nCartesian2.mostOrthogonalAxis = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var f = Cartesian2.normalize(cartesian, mostOrthogonalAxisScratch);\n  Cartesian2.abs(f, f);\n\n  if (f.x <= f.y) {\n    result = Cartesian2.clone(Cartesian2.UNIT_X, result);\n  } else {\n    result = Cartesian2.clone(Cartesian2.UNIT_Y, result);\n  }\n\n  return result;\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian2} [left] The first Cartesian.\n * @param {Cartesian2} [right] The second Cartesian.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartesian2.equals = function (left, right) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      left.x === right.x &&\n      left.y === right.y)\n  );\n};\n\n/**\n * @private\n */\nCartesian2.equalsArray = function (cartesian, array, offset) {\n  return cartesian.x === array[offset] && cartesian.y === array[offset + 1];\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian2} [left] The first Cartesian.\n * @param {Cartesian2} [right] The second Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian2.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.x,\n        right.x,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.y,\n        right.y,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * An immutable Cartesian2 instance initialized to (0.0, 0.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.ZERO = Object.freeze(new Cartesian2(0.0, 0.0));\n\n/**\n * An immutable Cartesian2 instance initialized to (1.0, 1.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.ONE = Object.freeze(new Cartesian2(1.0, 1.0));\n\n/**\n * An immutable Cartesian2 instance initialized to (1.0, 0.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.UNIT_X = Object.freeze(new Cartesian2(1.0, 0.0));\n\n/**\n * An immutable Cartesian2 instance initialized to (0.0, 1.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.UNIT_Y = Object.freeze(new Cartesian2(0.0, 1.0));\n\n/**\n * Duplicates this Cartesian2 instance.\n *\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.prototype.clone = function (result) {\n  return Cartesian2.clone(this, result);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian2} [right] The right hand side Cartesian.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nCartesian2.prototype.equals = function (right) {\n  return Cartesian2.equals(this, right);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian2} [right] The right hand side Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian2.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return Cartesian2.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this Cartesian in the format \'(x, y)\'.\n *\n * @returns {String} A string representing the provided Cartesian in the format \'(x, y)\'.\n */\nCartesian2.prototype.toString = function () {\n  return "(" + this.x + ", " + this.y + ")";\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cartesian2);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60838\n')},60216:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99417);\n\n\n\n\n\n\n/**\n * A 3D Cartesian point.\n * @alias Cartesian3\n * @constructor\n *\n * @param {Number} [x=0.0] The X component.\n * @param {Number} [y=0.0] The Y component.\n * @param {Number} [z=0.0] The Z component.\n *\n * @see Cartesian2\n * @see Cartesian4\n * @see Packable\n */\nfunction Cartesian3(x, y, z) {\n  /**\n   * The X component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(x, 0.0);\n\n  /**\n   * The Y component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(y, 0.0);\n\n  /**\n   * The Z component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.z = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(z, 0.0);\n}\n\n/**\n * Converts the provided Spherical into Cartesian3 coordinates.\n *\n * @param {Spherical} spherical The Spherical to be converted to Cartesian3.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.fromSpherical = function (spherical, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("spherical", spherical);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Cartesian3();\n  }\n\n  var clock = spherical.clock;\n  var cone = spherical.cone;\n  var magnitude = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(spherical.magnitude, 1.0);\n  var radial = magnitude * Math.sin(cone);\n  result.x = radial * Math.cos(clock);\n  result.y = radial * Math.sin(clock);\n  result.z = magnitude * Math.cos(cone);\n  return result;\n};\n\n/**\n * Creates a Cartesian3 instance from x, y and z coordinates.\n *\n * @param {Number} x The x coordinate.\n * @param {Number} y The y coordinate.\n * @param {Number} z The z coordinate.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.fromElements = function (x, y, z, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Duplicates a Cartesian3 instance.\n *\n * @param {Cartesian3} cartesian The Cartesian to duplicate.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. (Returns undefined if cartesian is undefined)\n */\nCartesian3.clone = function (cartesian, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(cartesian)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);\n  }\n\n  result.x = cartesian.x;\n  result.y = cartesian.y;\n  result.z = cartesian.z;\n  return result;\n};\n\n/**\n * Creates a Cartesian3 instance from an existing Cartesian4.  This simply takes the\n * x, y, and z properties of the Cartesian4 and drops w.\n * @function\n *\n * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian3 instance from.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.fromCartesian4 = Cartesian3.clone;\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCartesian3.packedLength = 3;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Cartesian3} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCartesian3.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex++] = value.y;\n  array[startingIndex] = value.z;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Cartesian3} [result] The object into which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(startingIndex, 0);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Cartesian3();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex++];\n  result.z = array[startingIndex];\n  return result;\n};\n\n/**\n * Flattens an array of Cartesian3s into an array of components.\n *\n * @param {Cartesian3[]} array The array of cartesians to pack.\n * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 3 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 3) elements.\n * @returns {Number[]} The packed array.\n */\nCartesian3.packArray = function (array, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  var length = array.length;\n  var resultLength = length * 3;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "If result is a typed array, it must have exactly array.length * 3 elements"\n    );\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    Cartesian3.pack(array[i], result, i * 3);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of cartesian components into an array of Cartesian3s.\n *\n * @param {Number[]} array The array of components to unpack.\n * @param {Cartesian3[]} [result] The array onto which to store the result.\n * @returns {Cartesian3[]} The unpacked array.\n */\nCartesian3.unpackArray = function (array, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("array.length", array.length, 3);\n  if (array.length % 3 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("array length must be a multiple of 3.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = array.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 3);\n  } else {\n    result.length = length / 3;\n  }\n\n  for (var i = 0; i < length; i += 3) {\n    var index = i / 3;\n    result[index] = Cartesian3.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Creates a Cartesian3 from three consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose three consecutive elements correspond to the x, y, and z components, respectively.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n *\n * @example\n * // Create a Cartesian3 with (1.0, 2.0, 3.0)\n * var v = [1.0, 2.0, 3.0];\n * var p = Cesium.Cartesian3.fromArray(v);\n *\n * // Create a Cartesian3 with (1.0, 2.0, 3.0) using an offset into an array\n * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0];\n * var p2 = Cesium.Cartesian3.fromArray(v2, 2);\n */\nCartesian3.fromArray = Cartesian3.unpack;\n\n/**\n * Computes the value of the maximum component for the supplied Cartesian.\n *\n * @param {Cartesian3} cartesian The cartesian to use.\n * @returns {Number} The value of the maximum component.\n */\nCartesian3.maximumComponent = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return Math.max(cartesian.x, cartesian.y, cartesian.z);\n};\n\n/**\n * Computes the value of the minimum component for the supplied Cartesian.\n *\n * @param {Cartesian3} cartesian The cartesian to use.\n * @returns {Number} The value of the minimum component.\n */\nCartesian3.minimumComponent = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return Math.min(cartesian.x, cartesian.y, cartesian.z);\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\n *\n * @param {Cartesian3} first A cartesian to compare.\n * @param {Cartesian3} second A cartesian to compare.\n * @param {Cartesian3} result The object into which to store the result.\n * @returns {Cartesian3} A cartesian with the minimum components.\n */\nCartesian3.minimumByComponent = function (first, second, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("first", first);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("second", second);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.min(first.x, second.x);\n  result.y = Math.min(first.y, second.y);\n  result.z = Math.min(first.z, second.z);\n\n  return result;\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\n *\n * @param {Cartesian3} first A cartesian to compare.\n * @param {Cartesian3} second A cartesian to compare.\n * @param {Cartesian3} result The object into which to store the result.\n * @returns {Cartesian3} A cartesian with the maximum components.\n */\nCartesian3.maximumByComponent = function (first, second, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("first", first);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("second", second);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.max(first.x, second.x);\n  result.y = Math.max(first.y, second.y);\n  result.z = Math.max(first.z, second.z);\n  return result;\n};\n\n/**\n * Computes the provided Cartesian\'s squared magnitude.\n *\n * @param {Cartesian3} cartesian The Cartesian instance whose squared magnitude is to be computed.\n * @returns {Number} The squared magnitude.\n */\nCartesian3.magnitudeSquared = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return (\n    cartesian.x * cartesian.x +\n    cartesian.y * cartesian.y +\n    cartesian.z * cartesian.z\n  );\n};\n\n/**\n * Computes the Cartesian\'s magnitude (length).\n *\n * @param {Cartesian3} cartesian The Cartesian instance whose magnitude is to be computed.\n * @returns {Number} The magnitude.\n */\nCartesian3.magnitude = function (cartesian) {\n  return Math.sqrt(Cartesian3.magnitudeSquared(cartesian));\n};\n\nvar distanceScratch = new Cartesian3();\n\n/**\n * Computes the distance between two points.\n *\n * @param {Cartesian3} left The first point to compute the distance from.\n * @param {Cartesian3} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 1.0\n * var d = Cesium.Cartesian3.distance(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(2.0, 0.0, 0.0));\n */\nCartesian3.distance = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian3.subtract(left, right, distanceScratch);\n  return Cartesian3.magnitude(distanceScratch);\n};\n\n/**\n * Computes the squared distance between two points.  Comparing squared distances\n * using this function is more efficient than comparing distances using {@link Cartesian3#distance}.\n *\n * @param {Cartesian3} left The first point to compute the distance from.\n * @param {Cartesian3} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 4.0, not 2.0\n * var d = Cesium.Cartesian3.distanceSquared(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(3.0, 0.0, 0.0));\n */\nCartesian3.distanceSquared = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian3.subtract(left, right, distanceScratch);\n  return Cartesian3.magnitudeSquared(distanceScratch);\n};\n\n/**\n * Computes the normalized form of the supplied Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian to be normalized.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.normalize = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var magnitude = Cartesian3.magnitude(cartesian);\n\n  result.x = cartesian.x / magnitude;\n  result.y = cartesian.y / magnitude;\n  result.z = cartesian.z / magnitude;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("normalized result is not a number");\n  }\n  //>>includeEnd(\'debug\');\n\n  return result;\n};\n\n/**\n * Computes the dot (scalar) product of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @returns {Number} The dot product.\n */\nCartesian3.dot = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  return left.x * right.x + left.y * right.y + left.z * right.z;\n};\n\n/**\n * Computes the componentwise product of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.multiplyComponents = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x * right.x;\n  result.y = left.y * right.y;\n  result.z = left.z * right.z;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.divideComponents = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x / right.x;\n  result.y = left.y / right.y;\n  result.z = left.z / right.z;\n  return result;\n};\n\n/**\n * Computes the componentwise sum of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.add = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x + right.x;\n  result.y = left.y + right.y;\n  result.z = left.z + right.z;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.subtract = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x - right.x;\n  result.y = left.y - right.y;\n  result.z = left.z - right.z;\n  return result;\n};\n\n/**\n * Multiplies the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian3} cartesian The Cartesian to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.multiplyByScalar = function (cartesian, scalar, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("scalar", scalar);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = cartesian.x * scalar;\n  result.y = cartesian.y * scalar;\n  result.z = cartesian.z * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian3} cartesian The Cartesian to be divided.\n * @param {Number} scalar The scalar to divide by.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.divideByScalar = function (cartesian, scalar, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("scalar", scalar);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = cartesian.x / scalar;\n  result.y = cartesian.y / scalar;\n  result.z = cartesian.z / scalar;\n  return result;\n};\n\n/**\n * Negates the provided Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian to be negated.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.negate = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = -cartesian.x;\n  result.y = -cartesian.y;\n  result.z = -cartesian.z;\n  return result;\n};\n\n/**\n * Computes the absolute value of the provided Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian whose absolute value is to be computed.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.abs = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.abs(cartesian.x);\n  result.y = Math.abs(cartesian.y);\n  result.z = Math.abs(cartesian.z);\n  return result;\n};\n\nvar lerpScratch = new Cartesian3();\n/**\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\n *\n * @param {Cartesian3} start The value corresponding to t at 0.0.\n * @param {Cartesian3} end The value corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.lerp = function (start, end, t, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("start", start);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("end", end);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("t", t);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  Cartesian3.multiplyByScalar(end, t, lerpScratch);\n  result = Cartesian3.multiplyByScalar(start, 1.0 - t, result);\n  return Cartesian3.add(lerpScratch, result, result);\n};\n\nvar angleBetweenScratch = new Cartesian3();\nvar angleBetweenScratch2 = new Cartesian3();\n/**\n * Returns the angle, in radians, between the provided Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @returns {Number} The angle between the Cartesians.\n */\nCartesian3.angleBetween = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian3.normalize(left, angleBetweenScratch);\n  Cartesian3.normalize(right, angleBetweenScratch2);\n  var cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);\n  var sine = Cartesian3.magnitude(\n    Cartesian3.cross(\n      angleBetweenScratch,\n      angleBetweenScratch2,\n      angleBetweenScratch\n    )\n  );\n  return Math.atan2(sine, cosine);\n};\n\nvar mostOrthogonalAxisScratch = new Cartesian3();\n/**\n * Returns the axis that is most orthogonal to the provided Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian on which to find the most orthogonal axis.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The most orthogonal axis.\n */\nCartesian3.mostOrthogonalAxis = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var f = Cartesian3.normalize(cartesian, mostOrthogonalAxisScratch);\n  Cartesian3.abs(f, f);\n\n  if (f.x <= f.y) {\n    if (f.x <= f.z) {\n      result = Cartesian3.clone(Cartesian3.UNIT_X, result);\n    } else {\n      result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n  } else if (f.y <= f.z) {\n    result = Cartesian3.clone(Cartesian3.UNIT_Y, result);\n  } else {\n    result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\n  }\n\n  return result;\n};\n\n/**\n * Projects vector a onto vector b\n * @param {Cartesian3} a The vector that needs projecting\n * @param {Cartesian3} b The vector to project onto\n * @param {Cartesian3} result The result cartesian\n * @returns {Cartesian3} The modified result parameter\n */\nCartesian3.projectVector = function (a, b, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("a", a);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("b", b);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("result", result);\n  //>>includeEnd(\'debug\');\n\n  var scalar = Cartesian3.dot(a, b) / Cartesian3.dot(b, b);\n  return Cartesian3.multiplyByScalar(b, scalar, result);\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian3} [left] The first Cartesian.\n * @param {Cartesian3} [right] The second Cartesian.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartesian3.equals = function (left, right) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      left.x === right.x &&\n      left.y === right.y &&\n      left.z === right.z)\n  );\n};\n\n/**\n * @private\n */\nCartesian3.equalsArray = function (cartesian, array, offset) {\n  return (\n    cartesian.x === array[offset] &&\n    cartesian.y === array[offset + 1] &&\n    cartesian.z === array[offset + 2]\n  );\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian3} [left] The first Cartesian.\n * @param {Cartesian3} [right] The second Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian3.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.x,\n        right.x,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.y,\n        right.y,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.z,\n        right.z,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * Computes the cross (outer) product of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The cross product.\n */\nCartesian3.cross = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var leftX = left.x;\n  var leftY = left.y;\n  var leftZ = left.z;\n  var rightX = right.x;\n  var rightY = right.y;\n  var rightZ = right.z;\n\n  var x = leftY * rightZ - leftZ * rightY;\n  var y = leftZ * rightX - leftX * rightZ;\n  var z = leftX * rightY - leftY * rightX;\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the midpoint between the right and left Cartesian.\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The midpoint.\n */\nCartesian3.midpoint = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = (left.x + right.x) * 0.5;\n  result.y = (left.y + right.y) * 0.5;\n  result.z = (left.z + right.z) * 0.5;\n\n  return result;\n};\n\n/**\n * Returns a Cartesian3 position from longitude and latitude values given in degrees.\n *\n * @param {Number} longitude The longitude, in degrees\n * @param {Number} latitude The latitude, in degrees\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The position\n *\n * @example\n * var position = Cesium.Cartesian3.fromDegrees(-115.0, 37.0);\n */\nCartesian3.fromDegrees = function (\n  longitude,\n  latitude,\n  height,\n  ellipsoid,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("longitude", longitude);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("latitude", latitude);\n  //>>includeEnd(\'debug\');\n\n  longitude = _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toRadians */ .Z.toRadians(longitude);\n  latitude = _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toRadians */ .Z.toRadians(latitude);\n  return Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result);\n};\n\nvar scratchN = new Cartesian3();\nvar scratchK = new Cartesian3();\nvar wgs84RadiiSquared = new Cartesian3(\n  6378137.0 * 6378137.0,\n  6378137.0 * 6378137.0,\n  6356752.3142451793 * 6356752.3142451793\n);\n\n/**\n * Returns a Cartesian3 position from longitude and latitude values given in radians.\n *\n * @param {Number} longitude The longitude, in radians\n * @param {Number} latitude The latitude, in radians\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The position\n *\n * @example\n * var position = Cesium.Cartesian3.fromRadians(-2.007, 0.645);\n */\nCartesian3.fromRadians = function (\n  longitude,\n  latitude,\n  height,\n  ellipsoid,\n  result\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("longitude", longitude);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("latitude", latitude);\n  //>>includeEnd(\'debug\');\n\n  height = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(height, 0.0);\n  var radiiSquared = (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(ellipsoid)\n    ? ellipsoid.radiiSquared\n    : wgs84RadiiSquared;\n\n  var cosLatitude = Math.cos(latitude);\n  scratchN.x = cosLatitude * Math.cos(longitude);\n  scratchN.y = cosLatitude * Math.sin(longitude);\n  scratchN.z = Math.sin(latitude);\n  scratchN = Cartesian3.normalize(scratchN, scratchN);\n\n  Cartesian3.multiplyComponents(radiiSquared, scratchN, scratchK);\n  var gamma = Math.sqrt(Cartesian3.dot(scratchN, scratchK));\n  scratchK = Cartesian3.divideByScalar(scratchK, gamma, scratchK);\n  scratchN = Cartesian3.multiplyByScalar(scratchN, height, scratchN);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Cartesian3();\n  }\n  return Cartesian3.add(scratchK, scratchN, result);\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in degrees.\n *\n * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * var positions = Cesium.Cartesian3.fromDegreesArray([-115.0, 37.0, -107.0, 33.0]);\n */\nCartesian3.fromDegreesArray = function (coordinates, ellipsoid, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("coordinates", coordinates);\n  if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "the number of coordinates must be a multiple of 2 and at least 2"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = coordinates.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 2);\n  } else {\n    result.length = length / 2;\n  }\n\n  for (var i = 0; i < length; i += 2) {\n    var longitude = coordinates[i];\n    var latitude = coordinates[i + 1];\n    var index = i / 2;\n    result[index] = Cartesian3.fromDegrees(\n      longitude,\n      latitude,\n      0,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in radians.\n *\n * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * var positions = Cesium.Cartesian3.fromRadiansArray([-2.007, 0.645, -1.867, .575]);\n */\nCartesian3.fromRadiansArray = function (coordinates, ellipsoid, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("coordinates", coordinates);\n  if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "the number of coordinates must be a multiple of 2 and at least 2"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = coordinates.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 2);\n  } else {\n    result.length = length / 2;\n  }\n\n  for (var i = 0; i < length; i += 2) {\n    var longitude = coordinates[i];\n    var latitude = coordinates[i + 1];\n    var index = i / 2;\n    result[index] = Cartesian3.fromRadians(\n      longitude,\n      latitude,\n      0,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in degrees.\n *\n * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * var positions = Cesium.Cartesian3.fromDegreesArrayHeights([-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]);\n */\nCartesian3.fromDegreesArrayHeights = function (coordinates, ellipsoid, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("coordinates", coordinates);\n  if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "the number of coordinates must be a multiple of 3 and at least 3"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = coordinates.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 3);\n  } else {\n    result.length = length / 3;\n  }\n\n  for (var i = 0; i < length; i += 3) {\n    var longitude = coordinates[i];\n    var latitude = coordinates[i + 1];\n    var height = coordinates[i + 2];\n    var index = i / 3;\n    result[index] = Cartesian3.fromDegrees(\n      longitude,\n      latitude,\n      height,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in radians.\n *\n * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * var positions = Cesium.Cartesian3.fromRadiansArrayHeights([-2.007, 0.645, 100000.0, -1.867, .575, 150000.0]);\n */\nCartesian3.fromRadiansArrayHeights = function (coordinates, ellipsoid, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("coordinates", coordinates);\n  if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "the number of coordinates must be a multiple of 3 and at least 3"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = coordinates.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 3);\n  } else {\n    result.length = length / 3;\n  }\n\n  for (var i = 0; i < length; i += 3) {\n    var longitude = coordinates[i];\n    var latitude = coordinates[i + 1];\n    var height = coordinates[i + 2];\n    var index = i / 3;\n    result[index] = Cartesian3.fromRadians(\n      longitude,\n      latitude,\n      height,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * An immutable Cartesian3 instance initialized to (0.0, 0.0, 0.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.ZERO = Object.freeze(new Cartesian3(0.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (1.0, 1.0, 1.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.ONE = Object.freeze(new Cartesian3(1.0, 1.0, 1.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (1.0, 0.0, 0.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.UNIT_X = Object.freeze(new Cartesian3(1.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (0.0, 1.0, 0.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.UNIT_Y = Object.freeze(new Cartesian3(0.0, 1.0, 0.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (0.0, 0.0, 1.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.UNIT_Z = Object.freeze(new Cartesian3(0.0, 0.0, 1.0));\n\n/**\n * Duplicates this Cartesian3 instance.\n *\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.prototype.clone = function (result) {\n  return Cartesian3.clone(this, result);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian3} [right] The right hand side Cartesian.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nCartesian3.prototype.equals = function (right) {\n  return Cartesian3.equals(this, right);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian3} [right] The right hand side Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian3.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return Cartesian3.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this Cartesian in the format \'(x, y, z)\'.\n *\n * @returns {String} A string representing this Cartesian in the format \'(x, y, z)\'.\n */\nCartesian3.prototype.toString = function () {\n  return "(" + this.x + ", " + this.y + ", " + this.z + ")";\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cartesian3);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60216\n')},63367:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99417);\n\n\n\n\n\n\n/**\n * A 4D Cartesian point.\n * @alias Cartesian4\n * @constructor\n *\n * @param {Number} [x=0.0] The X component.\n * @param {Number} [y=0.0] The Y component.\n * @param {Number} [z=0.0] The Z component.\n * @param {Number} [w=0.0] The W component.\n *\n * @see Cartesian2\n * @see Cartesian3\n * @see Packable\n */\nfunction Cartesian4(x, y, z, w) {\n  /**\n   * The X component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(x, 0.0);\n\n  /**\n   * The Y component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(y, 0.0);\n\n  /**\n   * The Z component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.z = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(z, 0.0);\n\n  /**\n   * The W component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.w = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(w, 0.0);\n}\n\n/**\n * Creates a Cartesian4 instance from x, y, z and w coordinates.\n *\n * @param {Number} x The x coordinate.\n * @param {Number} y The y coordinate.\n * @param {Number} z The z coordinate.\n * @param {Number} w The w coordinate.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.fromElements = function (x, y, z, w, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian4(x, y, z, w);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Creates a Cartesian4 instance from a {@link Color}. <code>red</code>, <code>green</code>, <code>blue</code>,\n * and <code>alpha</code> map to <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>, respectively.\n *\n * @param {Color} color The source color.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.fromColor = function (color, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("color", color);\n  //>>includeEnd(\'debug\');\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian4(color.red, color.green, color.blue, color.alpha);\n  }\n\n  result.x = color.red;\n  result.y = color.green;\n  result.z = color.blue;\n  result.w = color.alpha;\n  return result;\n};\n\n/**\n * Duplicates a Cartesian4 instance.\n *\n * @param {Cartesian4} cartesian The Cartesian to duplicate.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided. (Returns undefined if cartesian is undefined)\n */\nCartesian4.clone = function (cartesian, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(cartesian)) {\n    return undefined;\n  }\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    return new Cartesian4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n\n  result.x = cartesian.x;\n  result.y = cartesian.y;\n  result.z = cartesian.z;\n  result.w = cartesian.w;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCartesian4.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Cartesian4} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCartesian4.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex++] = value.y;\n  array[startingIndex++] = value.z;\n  array[startingIndex] = value.w;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Cartesian4} [result] The object into which to store the result.\n * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  startingIndex = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(startingIndex, 0);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Cartesian4();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex++];\n  result.z = array[startingIndex++];\n  result.w = array[startingIndex];\n  return result;\n};\n\n/**\n     * Flattens an array of Cartesian4s into and array of components.\n     *\n     * @param {Cartesian4[]} array The array of cartesians to pack.\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 4 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 4) elements.\n\n     * @returns {Number[]} The packed array.\n     */\nCartesian4.packArray = function (array, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  var length = array.length;\n  var resultLength = length * 4;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "If result is a typed array, it must have exactly array.length * 4 elements"\n    );\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    Cartesian4.pack(array[i], result, i * 4);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of cartesian components into and array of Cartesian4s.\n *\n * @param {Number[]} array The array of components to unpack.\n * @param {Cartesian4[]} [result] The array onto which to store the result.\n * @returns {Cartesian4[]} The unpacked array.\n */\nCartesian4.unpackArray = function (array, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("array", array);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("array.length", array.length, 4);\n  if (array.length % 4 !== 0) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("array length must be a multiple of 4.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var length = array.length;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Array(length / 4);\n  } else {\n    result.length = length / 4;\n  }\n\n  for (var i = 0; i < length; i += 4) {\n    var index = i / 4;\n    result[index] = Cartesian4.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Creates a Cartesian4 from four consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose four consecutive elements correspond to the x, y, z, and w components, respectively.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\n *\n * @example\n * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0)\n * var v = [1.0, 2.0, 3.0, 4.0];\n * var p = Cesium.Cartesian4.fromArray(v);\n *\n * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0) using an offset into an array\n * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0, 4.0];\n * var p2 = Cesium.Cartesian4.fromArray(v2, 2);\n */\nCartesian4.fromArray = Cartesian4.unpack;\n\n/**\n * Computes the value of the maximum component for the supplied Cartesian.\n *\n * @param {Cartesian4} cartesian The cartesian to use.\n * @returns {Number} The value of the maximum component.\n */\nCartesian4.maximumComponent = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n};\n\n/**\n * Computes the value of the minimum component for the supplied Cartesian.\n *\n * @param {Cartesian4} cartesian The cartesian to use.\n * @returns {Number} The value of the minimum component.\n */\nCartesian4.minimumComponent = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\n *\n * @param {Cartesian4} first A cartesian to compare.\n * @param {Cartesian4} second A cartesian to compare.\n * @param {Cartesian4} result The object into which to store the result.\n * @returns {Cartesian4} A cartesian with the minimum components.\n */\nCartesian4.minimumByComponent = function (first, second, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("first", first);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("second", second);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.min(first.x, second.x);\n  result.y = Math.min(first.y, second.y);\n  result.z = Math.min(first.z, second.z);\n  result.w = Math.min(first.w, second.w);\n\n  return result;\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\n *\n * @param {Cartesian4} first A cartesian to compare.\n * @param {Cartesian4} second A cartesian to compare.\n * @param {Cartesian4} result The object into which to store the result.\n * @returns {Cartesian4} A cartesian with the maximum components.\n */\nCartesian4.maximumByComponent = function (first, second, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("first", first);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("second", second);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.max(first.x, second.x);\n  result.y = Math.max(first.y, second.y);\n  result.z = Math.max(first.z, second.z);\n  result.w = Math.max(first.w, second.w);\n\n  return result;\n};\n\n/**\n * Computes the provided Cartesian\'s squared magnitude.\n *\n * @param {Cartesian4} cartesian The Cartesian instance whose squared magnitude is to be computed.\n * @returns {Number} The squared magnitude.\n */\nCartesian4.magnitudeSquared = function (cartesian) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  //>>includeEnd(\'debug\');\n\n  return (\n    cartesian.x * cartesian.x +\n    cartesian.y * cartesian.y +\n    cartesian.z * cartesian.z +\n    cartesian.w * cartesian.w\n  );\n};\n\n/**\n * Computes the Cartesian\'s magnitude (length).\n *\n * @param {Cartesian4} cartesian The Cartesian instance whose magnitude is to be computed.\n * @returns {Number} The magnitude.\n */\nCartesian4.magnitude = function (cartesian) {\n  return Math.sqrt(Cartesian4.magnitudeSquared(cartesian));\n};\n\nvar distanceScratch = new Cartesian4();\n\n/**\n * Computes the 4-space distance between two points.\n *\n * @param {Cartesian4} left The first point to compute the distance from.\n * @param {Cartesian4} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 1.0\n * var d = Cesium.Cartesian4.distance(\n *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\n *   new Cesium.Cartesian4(2.0, 0.0, 0.0, 0.0));\n */\nCartesian4.distance = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian4.subtract(left, right, distanceScratch);\n  return Cartesian4.magnitude(distanceScratch);\n};\n\n/**\n * Computes the squared distance between two points.  Comparing squared distances\n * using this function is more efficient than comparing distances using {@link Cartesian4#distance}.\n *\n * @param {Cartesian4} left The first point to compute the distance from.\n * @param {Cartesian4} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 4.0, not 2.0\n * var d = Cesium.Cartesian4.distance(\n *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\n *   new Cesium.Cartesian4(3.0, 0.0, 0.0, 0.0));\n */\nCartesian4.distanceSquared = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  Cartesian4.subtract(left, right, distanceScratch);\n  return Cartesian4.magnitudeSquared(distanceScratch);\n};\n\n/**\n * Computes the normalized form of the supplied Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian to be normalized.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.normalize = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var magnitude = Cartesian4.magnitude(cartesian);\n\n  result.x = cartesian.x / magnitude;\n  result.y = cartesian.y / magnitude;\n  result.z = cartesian.z / magnitude;\n  result.w = cartesian.w / magnitude;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    isNaN(result.x) ||\n    isNaN(result.y) ||\n    isNaN(result.z) ||\n    isNaN(result.w)\n  ) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("normalized result is not a number");\n  }\n  //>>includeEnd(\'debug\');\n\n  return result;\n};\n\n/**\n * Computes the dot (scalar) product of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @returns {Number} The dot product.\n */\nCartesian4.dot = function (left, right) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  //>>includeEnd(\'debug\');\n\n  return (\n    left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w\n  );\n};\n\n/**\n * Computes the componentwise product of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.multiplyComponents = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x * right.x;\n  result.y = left.y * right.y;\n  result.z = left.z * right.z;\n  result.w = left.w * right.w;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.divideComponents = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x / right.x;\n  result.y = left.y / right.y;\n  result.z = left.z / right.z;\n  result.w = left.w / right.w;\n  return result;\n};\n\n/**\n * Computes the componentwise sum of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.add = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x + right.x;\n  result.y = left.y + right.y;\n  result.z = left.z + right.z;\n  result.w = left.w + right.w;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.subtract = function (left, right, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("left", left);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("right", right);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = left.x - right.x;\n  result.y = left.y - right.y;\n  result.z = left.z - right.z;\n  result.w = left.w - right.w;\n  return result;\n};\n\n/**\n * Multiplies the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian4} cartesian The Cartesian to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.multiplyByScalar = function (cartesian, scalar, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("scalar", scalar);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = cartesian.x * scalar;\n  result.y = cartesian.y * scalar;\n  result.z = cartesian.z * scalar;\n  result.w = cartesian.w * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian4} cartesian The Cartesian to be divided.\n * @param {Number} scalar The scalar to divide by.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.divideByScalar = function (cartesian, scalar, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("scalar", scalar);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = cartesian.x / scalar;\n  result.y = cartesian.y / scalar;\n  result.z = cartesian.z / scalar;\n  result.w = cartesian.w / scalar;\n  return result;\n};\n\n/**\n * Negates the provided Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian to be negated.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.negate = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = -cartesian.x;\n  result.y = -cartesian.y;\n  result.z = -cartesian.z;\n  result.w = -cartesian.w;\n  return result;\n};\n\n/**\n * Computes the absolute value of the provided Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian whose absolute value is to be computed.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.abs = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  result.x = Math.abs(cartesian.x);\n  result.y = Math.abs(cartesian.y);\n  result.z = Math.abs(cartesian.z);\n  result.w = Math.abs(cartesian.w);\n  return result;\n};\n\nvar lerpScratch = new Cartesian4();\n/**\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\n *\n * @param {Cartesian4} start The value corresponding to t at 0.0.\n * @param {Cartesian4}end The value corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.lerp = function (start, end, t, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("start", start);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("end", end);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("t", t);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  Cartesian4.multiplyByScalar(end, t, lerpScratch);\n  result = Cartesian4.multiplyByScalar(start, 1.0 - t, result);\n  return Cartesian4.add(lerpScratch, result, result);\n};\n\nvar mostOrthogonalAxisScratch = new Cartesian4();\n/**\n * Returns the axis that is most orthogonal to the provided Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian on which to find the most orthogonal axis.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The most orthogonal axis.\n */\nCartesian4.mostOrthogonalAxis = function (cartesian, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("cartesian", cartesian);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var f = Cartesian4.normalize(cartesian, mostOrthogonalAxisScratch);\n  Cartesian4.abs(f, f);\n\n  if (f.x <= f.y) {\n    if (f.x <= f.z) {\n      if (f.x <= f.w) {\n        result = Cartesian4.clone(Cartesian4.UNIT_X, result);\n      } else {\n        result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n      }\n    } else if (f.z <= f.w) {\n      result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\n    } else {\n      result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n    }\n  } else if (f.y <= f.z) {\n    if (f.y <= f.w) {\n      result = Cartesian4.clone(Cartesian4.UNIT_Y, result);\n    } else {\n      result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n    }\n  } else if (f.z <= f.w) {\n    result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\n  } else {\n    result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n  }\n\n  return result;\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian4} [left] The first Cartesian.\n * @param {Cartesian4} [right] The second Cartesian.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartesian4.equals = function (left, right) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      left.x === right.x &&\n      left.y === right.y &&\n      left.z === right.z &&\n      left.w === right.w)\n  );\n};\n\n/**\n * @private\n */\nCartesian4.equalsArray = function (cartesian, array, offset) {\n  return (\n    cartesian.x === array[offset] &&\n    cartesian.y === array[offset + 1] &&\n    cartesian.z === array[offset + 2] &&\n    cartesian.w === array[offset + 3]\n  );\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian4} [left] The first Cartesian.\n * @param {Cartesian4} [right] The second Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian4.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(right) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.x,\n        right.x,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.y,\n        right.y,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.z,\n        right.z,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.w,\n        right.w,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.ZERO = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (1.0, 1.0, 1.0, 1.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.ONE = Object.freeze(new Cartesian4(1.0, 1.0, 1.0, 1.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (1.0, 0.0, 0.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_X = Object.freeze(new Cartesian4(1.0, 0.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 1.0, 0.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_Y = Object.freeze(new Cartesian4(0.0, 1.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 0.0, 1.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_Z = Object.freeze(new Cartesian4(0.0, 0.0, 1.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 1.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_W = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 1.0));\n\n/**\n * Duplicates this Cartesian4 instance.\n *\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.prototype.clone = function (result) {\n  return Cartesian4.clone(this, result);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian4} [right] The right hand side Cartesian.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nCartesian4.prototype.equals = function (right) {\n  return Cartesian4.equals(this, right);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian4} [right] The right hand side Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian4.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return Cartesian4.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this Cartesian in the format \'(x, y, z, w)\'.\n *\n * @returns {String} A string representing the provided Cartesian in the format \'(x, y, z, w)\'.\n */\nCartesian4.prototype.toString = function () {\n  return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";\n};\n\n// scratchU8Array and scratchF32Array are views into the same buffer\nvar scratchF32Array = new Float32Array(1);\nvar scratchU8Array = new Uint8Array(scratchF32Array.buffer);\n\nvar testU32 = new Uint32Array([0x11223344]);\nvar testU8 = new Uint8Array(testU32.buffer);\nvar littleEndian = testU8[0] === 0x44;\n\n/**\n * Packs an arbitrary floating point value to 4 values representable using uint8.\n *\n * @param {Number} value A floating point number.\n * @param {Cartesian4} [result] The Cartesian4 that will contain the packed float.\n * @returns {Cartesian4} A Cartesian4 representing the float packed to values in x, y, z, and w.\n */\nCartesian4.packFloat = function (value, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n    result = new Cartesian4();\n  }\n\n  // scratchU8Array and scratchF32Array are views into the same buffer\n  scratchF32Array[0] = value;\n\n  if (littleEndian) {\n    result.x = scratchU8Array[0];\n    result.y = scratchU8Array[1];\n    result.z = scratchU8Array[2];\n    result.w = scratchU8Array[3];\n  } else {\n    // convert from big-endian to little-endian\n    result.x = scratchU8Array[3];\n    result.y = scratchU8Array[2];\n    result.z = scratchU8Array[1];\n    result.w = scratchU8Array[0];\n  }\n  return result;\n};\n\n/**\n * Unpacks a float packed using Cartesian4.packFloat.\n *\n * @param {Cartesian4} packedFloat A Cartesian4 containing a float packed to 4 values representable using uint8.\n * @returns {Number} The unpacked float.\n * @private\n */\nCartesian4.unpackFloat = function (packedFloat) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("packedFloat", packedFloat);\n  //>>includeEnd(\'debug\');\n\n  // scratchU8Array and scratchF32Array are views into the same buffer\n  if (littleEndian) {\n    scratchU8Array[0] = packedFloat.x;\n    scratchU8Array[1] = packedFloat.y;\n    scratchU8Array[2] = packedFloat.z;\n    scratchU8Array[3] = packedFloat.w;\n  } else {\n    // convert from little-endian to big-endian\n    scratchU8Array[0] = packedFloat.w;\n    scratchU8Array[1] = packedFloat.z;\n    scratchU8Array[2] = packedFloat.y;\n    scratchU8Array[3] = packedFloat.x;\n  }\n  return scratchF32Array[0];\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cartesian4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63367\n')},51688:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99417);\n/* harmony import */ var _scaleToGeodeticSurface_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(97);\n\n\n\n\n\n\n\n/**\n * A position defined by longitude, latitude, and height.\n * @alias Cartographic\n * @constructor\n *\n * @param {Number} [longitude=0.0] The longitude, in radians.\n * @param {Number} [latitude=0.0] The latitude, in radians.\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n *\n * @see Ellipsoid\n */\nfunction Cartographic(longitude, latitude, height) {\n  /**\n   * The longitude, in radians.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.longitude = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(longitude, 0.0);\n\n  /**\n   * The latitude, in radians.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.latitude = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(latitude, 0.0);\n\n  /**\n   * The height, in meters, above the ellipsoid.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.height = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(height, 0.0);\n}\n\n/**\n * Creates a new Cartographic instance from longitude and latitude\n * specified in radians.\n *\n * @param {Number} longitude The longitude, in radians.\n * @param {Number} latitude The latitude, in radians.\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\n */\nCartographic.fromRadians = function (longitude, latitude, height, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("longitude", longitude);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("latitude", latitude);\n  //>>includeEnd(\'debug\');\n\n  height = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(height, 0.0);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\n/**\n * Creates a new Cartographic instance from longitude and latitude\n * specified in degrees.  The values in the resulting object will\n * be in radians.\n *\n * @param {Number} longitude The longitude, in degrees.\n * @param {Number} latitude The latitude, in degrees.\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\n */\nCartographic.fromDegrees = function (longitude, latitude, height, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("longitude", longitude);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("latitude", latitude);\n  //>>includeEnd(\'debug\');\n  longitude = _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toRadians */ .Z.toRadians(longitude);\n  latitude = _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toRadians */ .Z.toRadians(latitude);\n\n  return Cartographic.fromRadians(longitude, latitude, height, result);\n};\n\nvar cartesianToCartographicN = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar cartesianToCartographicP = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar cartesianToCartographicH = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar wgs84OneOverRadii = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n  1.0 / 6378137.0,\n  1.0 / 6378137.0,\n  1.0 / 6356752.3142451793\n);\nvar wgs84OneOverRadiiSquared = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n  1.0 / (6378137.0 * 6378137.0),\n  1.0 / (6378137.0 * 6378137.0),\n  1.0 / (6356752.3142451793 * 6356752.3142451793)\n);\nvar wgs84CenterToleranceSquared = _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].EPSILON1 */ .Z.EPSILON1;\n\n/**\n * Creates a new Cartographic instance from a Cartesian position. The values in the\n * resulting object will be in radians.\n *\n * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\n */\nCartographic.fromCartesian = function (cartesian, ellipsoid, result) {\n  var oneOverRadii = (0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(ellipsoid)\n    ? ellipsoid.oneOverRadii\n    : wgs84OneOverRadii;\n  var oneOverRadiiSquared = (0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(ellipsoid)\n    ? ellipsoid.oneOverRadiiSquared\n    : wgs84OneOverRadiiSquared;\n  var centerToleranceSquared = (0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(ellipsoid)\n    ? ellipsoid._centerToleranceSquared\n    : wgs84CenterToleranceSquared;\n\n  //`cartesian is required.` is thrown from scaleToGeodeticSurface\n  var p = (0,_scaleToGeodeticSurface_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    cartesian,\n    oneOverRadii,\n    oneOverRadiiSquared,\n    centerToleranceSquared,\n    cartesianToCartographicP\n  );\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(p)) {\n    return undefined;\n  }\n\n  var n = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyComponents */ .Z.multiplyComponents(\n    p,\n    oneOverRadiiSquared,\n    cartesianToCartographicN\n  );\n  n = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(n, n);\n\n  var h = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(cartesian, p, cartesianToCartographicH);\n\n  var longitude = Math.atan2(n.y, n.x);\n  var latitude = Math.asin(n.z);\n  var height =\n    _Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].sign */ .Z.sign(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].dot */ .Z.dot(h, cartesian)) * _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].magnitude */ .Z.magnitude(h);\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\n/**\n * Creates a new Cartesian3 instance from a Cartographic input. The values in the inputted\n * object should be in radians.\n *\n * @param {Cartographic} cartographic Input to be converted into a Cartesian3 output.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The position\n */\nCartographic.toCartesian = function (cartographic, ellipsoid, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("cartographic", cartographic);\n  //>>includeEnd(\'debug\');\n\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRadians */ .Z.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    cartographic.height,\n    ellipsoid,\n    result\n  );\n};\n\n/**\n * Duplicates a Cartographic instance.\n *\n * @param {Cartographic} cartographic The cartographic to duplicate.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided. (Returns undefined if cartographic is undefined)\n */\nCartographic.clone = function (cartographic, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(cartographic)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(result)) {\n    return new Cartographic(\n      cartographic.longitude,\n      cartographic.latitude,\n      cartographic.height\n    );\n  }\n  result.longitude = cartographic.longitude;\n  result.latitude = cartographic.latitude;\n  result.height = cartographic.height;\n  return result;\n};\n\n/**\n * Compares the provided cartographics componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartographic} [left] The first cartographic.\n * @param {Cartographic} [right] The second cartographic.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartographic.equals = function (left, right) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(right) &&\n      left.longitude === right.longitude &&\n      left.latitude === right.latitude &&\n      left.height === right.height)\n  );\n};\n\n/**\n * Compares the provided cartographics componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Cartographic} [left] The first cartographic.\n * @param {Cartographic} [right] The second cartographic.\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartographic.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(epsilon, 0);\n\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(right) &&\n      Math.abs(left.longitude - right.longitude) <= epsilon &&\n      Math.abs(left.latitude - right.latitude) <= epsilon &&\n      Math.abs(left.height - right.height) <= epsilon)\n  );\n};\n\n/**\n * An immutable Cartographic instance initialized to (0.0, 0.0, 0.0).\n *\n * @type {Cartographic}\n * @constant\n */\nCartographic.ZERO = Object.freeze(new Cartographic(0.0, 0.0, 0.0));\n\n/**\n * Duplicates this instance.\n *\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\n */\nCartographic.prototype.clone = function (result) {\n  return Cartographic.clone(this, result);\n};\n\n/**\n * Compares the provided against this cartographic componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartographic} [right] The second cartographic.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartographic.prototype.equals = function (right) {\n  return Cartographic.equals(this, right);\n};\n\n/**\n * Compares the provided against this cartographic componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Cartographic} [right] The second cartographic.\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartographic.prototype.equalsEpsilon = function (right, epsilon) {\n  return Cartographic.equalsEpsilon(this, right, epsilon);\n};\n\n/**\n * Creates a string representing this cartographic in the format \'(longitude, latitude, height)\'.\n *\n * @returns {String} A string representing the provided cartographic in the format \'(longitude, latitude, height)\'.\n */\nCartographic.prototype.toString = function () {\n  return "(" + this.longitude + ", " + this.latitude + ", " + this.height + ")";\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cartographic);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51688\n')},13129:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n\n\n\n\n/**\n * Geocodes queries containing longitude and latitude coordinates and an optional height.\n * Query format: `longitude latitude (height)` with longitude/latitude in degrees and height in meters.\n *\n * @alias CartographicGeocoderService\n * @constructor\n */\nfunction CartographicGeocoderService() {}\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nCartographicGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.string */ .Z.typeOf.string("query", query);\n  //>>includeEnd(\'debug\');\n\n  var splitQuery = query.match(/[^\\s,\\n]+/g);\n  if (splitQuery.length === 2 || splitQuery.length === 3) {\n    var longitude = +splitQuery[0];\n    var latitude = +splitQuery[1];\n    var height = splitQuery.length === 3 ? +splitQuery[2] : 300.0;\n\n    if (isNaN(longitude) && isNaN(latitude)) {\n      var coordTest = /^(\\d+.?\\d*)([nsew])/i;\n      for (var i = 0; i < splitQuery.length; ++i) {\n        var splitCoord = splitQuery[i].match(coordTest);\n        if (coordTest.test(splitQuery[i]) && splitCoord.length === 3) {\n          if (/^[ns]/i.test(splitCoord[2])) {\n            latitude = /^[n]/i.test(splitCoord[2])\n              ? +splitCoord[1]\n              : -splitCoord[1];\n          } else if (/^[ew]/i.test(splitCoord[2])) {\n            longitude = /^[e]/i.test(splitCoord[2])\n              ? +splitCoord[1]\n              : -splitCoord[1];\n          }\n        }\n      }\n    }\n\n    if (!isNaN(longitude) && !isNaN(latitude) && !isNaN(height)) {\n      var result = {\n        displayName: query,\n        destination: _Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromDegrees */ .Z.fromDegrees(longitude, latitude, height),\n      };\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve([result]);\n    }\n  }\n  return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve([]);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (CartographicGeocoderService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxMjkuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXlDO0FBQ0E7QUFDVjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEVBQUUsc0ZBQW1CO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1RkFBc0I7QUFDM0M7QUFDQSxhQUFhLG9GQUFZO0FBQ3pCO0FBQ0E7QUFDQSxTQUFTLG9GQUFZO0FBQ3JCO0FBQ0EseURBQWUsMkJBQTJCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9DYXJ0b2dyYXBoaWNHZW9jb2RlclNlcnZpY2UuanM/NDM2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2hlbiBmcm9tIFwiLi4vVGhpcmRQYXJ0eS93aGVuLmpzXCI7XG5pbXBvcnQgQ2FydGVzaWFuMyBmcm9tIFwiLi9DYXJ0ZXNpYW4zLmpzXCI7XG5pbXBvcnQgQ2hlY2sgZnJvbSBcIi4vQ2hlY2suanNcIjtcblxuLyoqXG4gKiBHZW9jb2RlcyBxdWVyaWVzIGNvbnRhaW5pbmcgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBjb29yZGluYXRlcyBhbmQgYW4gb3B0aW9uYWwgaGVpZ2h0LlxuICogUXVlcnkgZm9ybWF0OiBgbG9uZ2l0dWRlIGxhdGl0dWRlIChoZWlnaHQpYCB3aXRoIGxvbmdpdHVkZS9sYXRpdHVkZSBpbiBkZWdyZWVzIGFuZCBoZWlnaHQgaW4gbWV0ZXJzLlxuICpcbiAqIEBhbGlhcyBDYXJ0b2dyYXBoaWNHZW9jb2RlclNlcnZpY2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDYXJ0b2dyYXBoaWNHZW9jb2RlclNlcnZpY2UoKSB7fVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgdG8gYmUgc2VudCB0byB0aGUgZ2VvY29kZXIgc2VydmljZVxuICogQHJldHVybnMge1Byb21pc2U8R2VvY29kZXJTZXJ2aWNlLlJlc3VsdFtdPn1cbiAqL1xuQ2FydG9ncmFwaGljR2VvY29kZXJTZXJ2aWNlLnByb3RvdHlwZS5nZW9jb2RlID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIENoZWNrLnR5cGVPZi5zdHJpbmcoXCJxdWVyeVwiLCBxdWVyeSk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBzcGxpdFF1ZXJ5ID0gcXVlcnkubWF0Y2goL1teXFxzLFxcbl0rL2cpO1xuICBpZiAoc3BsaXRRdWVyeS5sZW5ndGggPT09IDIgfHwgc3BsaXRRdWVyeS5sZW5ndGggPT09IDMpIHtcbiAgICB2YXIgbG9uZ2l0dWRlID0gK3NwbGl0UXVlcnlbMF07XG4gICAgdmFyIGxhdGl0dWRlID0gK3NwbGl0UXVlcnlbMV07XG4gICAgdmFyIGhlaWdodCA9IHNwbGl0UXVlcnkubGVuZ3RoID09PSAzID8gK3NwbGl0UXVlcnlbMl0gOiAzMDAuMDtcblxuICAgIGlmIChpc05hTihsb25naXR1ZGUpICYmIGlzTmFOKGxhdGl0dWRlKSkge1xuICAgICAgdmFyIGNvb3JkVGVzdCA9IC9eKFxcZCsuP1xcZCopKFtuc2V3XSkvaTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BsaXRRdWVyeS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgc3BsaXRDb29yZCA9IHNwbGl0UXVlcnlbaV0ubWF0Y2goY29vcmRUZXN0KTtcbiAgICAgICAgaWYgKGNvb3JkVGVzdC50ZXN0KHNwbGl0UXVlcnlbaV0pICYmIHNwbGl0Q29vcmQubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgaWYgKC9eW25zXS9pLnRlc3Qoc3BsaXRDb29yZFsyXSkpIHtcbiAgICAgICAgICAgIGxhdGl0dWRlID0gL15bbl0vaS50ZXN0KHNwbGl0Q29vcmRbMl0pXG4gICAgICAgICAgICAgID8gK3NwbGl0Q29vcmRbMV1cbiAgICAgICAgICAgICAgOiAtc3BsaXRDb29yZFsxXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eW2V3XS9pLnRlc3Qoc3BsaXRDb29yZFsyXSkpIHtcbiAgICAgICAgICAgIGxvbmdpdHVkZSA9IC9eW2VdL2kudGVzdChzcGxpdENvb3JkWzJdKVxuICAgICAgICAgICAgICA/ICtzcGxpdENvb3JkWzFdXG4gICAgICAgICAgICAgIDogLXNwbGl0Q29vcmRbMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpc05hTihsb25naXR1ZGUpICYmICFpc05hTihsYXRpdHVkZSkgJiYgIWlzTmFOKGhlaWdodCkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGRpc3BsYXlOYW1lOiBxdWVyeSxcbiAgICAgICAgZGVzdGluYXRpb246IENhcnRlc2lhbjMuZnJvbURlZ3JlZXMobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0KSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gd2hlbi5yZXNvbHZlKFtyZXN1bHRdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdoZW4ucmVzb2x2ZShbXSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgQ2FydG9ncmFwaGljR2VvY29kZXJTZXJ2aWNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13129\n')},9887:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Cartesian4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63367);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _HermiteSpline_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41399);\n/* harmony import */ var _Matrix4_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(72248);\n/* harmony import */ var _Spline_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(84543);\n\n\n\n\n\n\n\n\n\nvar scratchTimeVec = new _Cartesian4_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchTemp0 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchTemp1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction createEvaluateFunction(spline) {\n  var points = spline.points;\n  var times = spline.times;\n\n  if (points.length < 3) {\n    var t0 = times[0];\n    var invSpan = 1.0 / (times[1] - t0);\n\n    var p0 = points[0];\n    var p1 = points[1];\n\n    return function (time, result) {\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n        result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n      }\n      var u = (time - t0) * invSpan;\n      return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lerp */ .Z.lerp(p0, p1, u, result);\n    };\n  }\n\n  return function (time, result) {\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(result)) {\n      result = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n    }\n    var i = (spline._lastTimeIndex = spline.findTimeInterval(\n      time,\n      spline._lastTimeIndex\n    ));\n    var u = (time - times[i]) / (times[i + 1] - times[i]);\n\n    var timeVec = scratchTimeVec;\n    timeVec.z = u;\n    timeVec.y = u * u;\n    timeVec.x = timeVec.y * u;\n    timeVec.w = 1.0;\n\n    var p0;\n    var p1;\n    var p2;\n    var p3;\n    var coefs;\n\n    if (i === 0) {\n      p0 = points[0];\n      p1 = points[1];\n      p2 = spline.firstTangent;\n\n      p3 = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(points[2], p0, scratchTemp0);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(p3, 0.5, p3);\n\n      coefs = _Matrix4_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n        _HermiteSpline_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].hermiteCoefficientMatrix */ .Z.hermiteCoefficientMatrix,\n        timeVec,\n        timeVec\n      );\n    } else if (i === points.length - 2) {\n      p0 = points[i];\n      p1 = points[i + 1];\n      p3 = spline.lastTangent;\n\n      p2 = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(p1, points[i - 1], scratchTemp0);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(p2, 0.5, p2);\n\n      coefs = _Matrix4_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n        _HermiteSpline_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].hermiteCoefficientMatrix */ .Z.hermiteCoefficientMatrix,\n        timeVec,\n        timeVec\n      );\n    } else {\n      p0 = points[i - 1];\n      p1 = points[i];\n      p2 = points[i + 1];\n      p3 = points[i + 2];\n      coefs = _Matrix4_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n        CatmullRomSpline.catmullRomCoefficientMatrix,\n        timeVec,\n        timeVec\n      );\n    }\n    result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(p0, coefs.x, result);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(p1, coefs.y, scratchTemp1);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(result, scratchTemp1, result);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(p2, coefs.z, scratchTemp1);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(result, scratchTemp1, result);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(p3, coefs.w, scratchTemp1);\n    return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(result, scratchTemp1, result);\n  };\n}\n\nvar firstTangentScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar lastTangentScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n/**\n * A Catmull-Rom spline is a cubic spline where the tangent at control points,\n * except the first and last, are computed using the previous and next control points.\n * Catmull-Rom splines are in the class C<sup>1</sup>.\n *\n * @alias CatmullRomSpline\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Number[]} options.times An array of strictly increasing, unit-less, floating-point times at each point.\n *                The values are in no way connected to the clock time. They are the parameterization for the curve.\n * @param {Cartesian3[]} options.points The array of {@link Cartesian3} control points.\n * @param {Cartesian3} [options.firstTangent] The tangent of the curve at the first control point.\n *                     If the tangent is not given, it will be estimated.\n * @param {Cartesian3} [options.lastTangent] The tangent of the curve at the last control point.\n *                     If the tangent is not given, it will be estimated.\n *\n * @exception {DeveloperError} points.length must be greater than or equal to 2.\n * @exception {DeveloperError} times.length must be equal to points.length.\n *\n *\n * @example\n * // spline above the earth from Philadelphia to Los Angeles\n * var spline = new Cesium.CatmullRomSpline({\n *     times : [ 0.0, 1.5, 3.0, 4.5, 6.0 ],\n *     points : [\n *         new Cesium.Cartesian3(1235398.0, -4810983.0, 4146266.0),\n *         new Cesium.Cartesian3(1372574.0, -5345182.0, 4606657.0),\n *         new Cesium.Cartesian3(-757983.0, -5542796.0, 4514323.0),\n *         new Cesium.Cartesian3(-2821260.0, -5248423.0, 4021290.0),\n *         new Cesium.Cartesian3(-2539788.0, -4724797.0, 3620093.0)\n *     ]\n * });\n *\n * var p0 = spline.evaluate(times[i]);         // equal to positions[i]\n * var p1 = spline.evaluate(times[i] + delta); // interpolated value when delta < times[i + 1] - times[i]\n *\n * @see HermiteSpline\n * @see LinearSpline\n * @see QuaternionSpline\n * @see WeightSpline\n */\nfunction CatmullRomSpline(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var points = options.points;\n  var times = options.times;\n  var firstTangent = options.firstTangent;\n  var lastTangent = options.lastTangent;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("points", points);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("times", times);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("points.length", points.length, 2);\n  _Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].typeOf.number.equals */ .Z.typeOf.number.equals(\n    "times.length",\n    "points.length",\n    times.length,\n    points.length\n  );\n  //>>includeEnd(\'debug\');\n\n  if (points.length > 2) {\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(firstTangent)) {\n      firstTangent = firstTangentScratch;\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(points[1], 2.0, firstTangent);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(firstTangent, points[2], firstTangent);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(firstTangent, points[0], firstTangent);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(firstTangent, 0.5, firstTangent);\n    }\n\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(lastTangent)) {\n      var n = points.length - 1;\n      lastTangent = lastTangentScratch;\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(points[n - 1], 2.0, lastTangent);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(points[n], lastTangent, lastTangent);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(lastTangent, points[n - 2], lastTangent);\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(lastTangent, 0.5, lastTangent);\n    }\n  }\n\n  this._times = times;\n  this._points = points;\n  this._firstTangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(firstTangent);\n  this._lastTangent = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(lastTangent);\n\n  this._evaluateFunction = createEvaluateFunction(this);\n  this._lastTimeIndex = 0;\n}\n\nObject.defineProperties(CatmullRomSpline.prototype, {\n  /**\n   * An array of times for the control points.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Number[]}\n   * @readonly\n   */\n  times: {\n    get: function () {\n      return this._times;\n    },\n  },\n\n  /**\n   * An array of {@link Cartesian3} control points.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Cartesian3[]}\n   * @readonly\n   */\n  points: {\n    get: function () {\n      return this._points;\n    },\n  },\n\n  /**\n   * The tangent at the first control point.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Cartesian3}\n   * @readonly\n   */\n  firstTangent: {\n    get: function () {\n      return this._firstTangent;\n    },\n  },\n\n  /**\n   * The tangent at the last control point.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Cartesian3}\n   * @readonly\n   */\n  lastTangent: {\n    get: function () {\n      return this._lastTangent;\n    },\n  },\n});\n\n/**\n * @private\n */\nCatmullRomSpline.catmullRomCoefficientMatrix = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n  -0.5,\n  1.0,\n  -0.5,\n  0.0,\n  1.5,\n  -2.5,\n  0.0,\n  1.0,\n  -1.5,\n  2.0,\n  0.5,\n  0.0,\n  0.5,\n  -0.5,\n  0.0,\n  0.0\n);\n\n/**\n * Finds an index <code>i</code> in <code>times</code> such that the parameter\n * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n * @function\n *\n * @param {Number} time The time.\n * @returns {Number} The index for the element at the start of the interval.\n *\n * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n *                             in the array <code>times</code>.\n */\nCatmullRomSpline.prototype.findTimeInterval = _Spline_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].prototype.findTimeInterval */ .Z.prototype.findTimeInterval;\n\n/**\n * Wraps the given time to the period covered by the spline.\n * @function\n *\n * @param {Number} time The time.\n * @return {Number} The time, wrapped around to the updated animation.\n */\nCatmullRomSpline.prototype.wrapTime = _Spline_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].prototype.wrapTime */ .Z.prototype.wrapTime;\n\n/**\n * Clamps the given time to the period covered by the spline.\n * @function\n *\n * @param {Number} time The time.\n * @return {Number} The time, clamped to the animation period.\n */\nCatmullRomSpline.prototype.clampTime = _Spline_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].prototype.clampTime */ .Z.prototype.clampTime;\n\n/**\n * Evaluates the curve at a given time.\n *\n * @param {Number} time The time at which to evaluate the curve.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new instance of the point on the curve at the given time.\n *\n * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n *                             in the array <code>times</code>.\n */\nCatmullRomSpline.prototype.evaluate = function (time, result) {\n  return this._evaluateFunction(time, result);\n};\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (CatmullRomSpline)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9887\n')},65987:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52323);\n/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Credit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52975);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14459);\n/* harmony import */ var _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(71351);\n/* harmony import */ var _WebMercatorTilingScheme_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(42423);\n/* harmony import */ var _getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(12540);\n/* harmony import */ var _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(57134);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(22832);\n/* harmony import */ var _OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(25405);\n/* harmony import */ var _QuantizedMeshTerrainData_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(38036);\n/* harmony import */ var _Request_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(22426);\n/* harmony import */ var _RequestType_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(82968);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(68985);\n/* harmony import */ var _RuntimeError_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(9407);\n/* harmony import */ var _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(1497);\n/* harmony import */ var _TileAvailability_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(25707);\n/* harmony import */ var _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(9121);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction LayerInformation(layer) {\n  this.resource = layer.resource;\n  this.version = layer.version;\n  this.isHeightmap = layer.isHeightmap;\n  this.tileUrlTemplates = layer.tileUrlTemplates;\n  this.availability = layer.availability;\n  this.hasVertexNormals = layer.hasVertexNormals;\n  this.hasWaterMask = layer.hasWaterMask;\n  this.hasMetadata = layer.hasMetadata;\n  this.availabilityLevels = layer.availabilityLevels;\n  this.availabilityTilesLoaded = layer.availabilityTilesLoaded;\n  this.littleEndianExtensionSize = layer.littleEndianExtensionSize;\n  this.availabilityPromiseCache = {};\n}\n\n/**\n * A {@link TerrainProvider} that accesses terrain data in a Cesium terrain format.\n *\n * @alias CesiumTerrainProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} options.url The URL of the Cesium terrain server.\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server, in the form of per vertex normals if available.\n * @param {Boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server,  if available.\n * @param {Boolean} [options.requestMetadata=true] Flag that indicates if the client should request per tile metadata from the server, if available.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n *\n * @example\n * // Create Arctic DEM terrain with normals.\n * var viewer = new Cesium.Viewer(\'cesiumContainer\', {\n *     terrainProvider : new Cesium.CesiumTerrainProvider({\n *         url : Cesium.IonResource.fromAssetId(3956),\n *         requestVertexNormals : true\n *     })\n * });\n *\n * @see createWorldTerrain\n * @see TerrainProvider\n */\nfunction CesiumTerrainProvider(options) {\n  //>>includeStart(\'debug\', pragmas.debug)\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(options) || !(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(options.url)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("options.url is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._heightmapWidth = 65;\n  this._heightmapStructure = undefined;\n  this._hasWaterMask = false;\n  this._hasVertexNormals = false;\n  this._ellipsoid = options.ellipsoid;\n\n  /**\n   * Boolean flag that indicates if the client should request vertex normals from the server.\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  this._requestVertexNormals = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n    options.requestVertexNormals,\n    false\n  );\n\n  /**\n   * Boolean flag that indicates if the client should request tile watermasks from the server.\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  this._requestWaterMask = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.requestWaterMask, false);\n\n  /**\n   * Boolean flag that indicates if the client should request tile metadata from the server.\n   * @type {Boolean}\n   * @default true\n   * @private\n   */\n  this._requestMetadata = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.requestMetadata, true);\n\n  this._errorEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\n\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new _Credit_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(credit);\n  }\n  this._credit = credit;\n\n  this._availability = undefined;\n\n  var deferred = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defer */ .Z.defer();\n  this._ready = false;\n  this._readyPromise = deferred;\n  this._tileCredits = undefined;\n\n  var that = this;\n  var lastResource;\n  var layerJsonResource;\n  var metadataError;\n\n  var layers = (this._layers = []);\n  var attribution = "";\n  var overallAvailability = [];\n  var overallMaxZoom = 0;\n  (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.url)\n    .then(function (url) {\n      var resource = _Resource_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].createIfNeeded */ .Z.createIfNeeded(url);\n      resource.appendForwardSlash();\n      lastResource = resource;\n      layerJsonResource = lastResource.getDerivedResource({\n        url: "layer.json",\n      });\n\n      // ion resources have a credits property we can use for additional attribution.\n      that._tileCredits = resource.credits;\n\n      requestLayerJson();\n    })\n    .otherwise(function (e) {\n      deferred.reject(e);\n    });\n\n  function parseMetadataSuccess(data) {\n    var message;\n\n    if (!data.format) {\n      message = "The tile format is not specified in the layer.json file.";\n      metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].handleError */ .Z.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    if (!data.tiles || data.tiles.length === 0) {\n      message = "The layer.json file does not specify any tile URL templates.";\n      metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].handleError */ .Z.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    var hasVertexNormals = false;\n    var hasWaterMask = false;\n    var hasMetadata = false;\n    var littleEndianExtensionSize = true;\n    var isHeightmap = false;\n    if (data.format === "heightmap-1.0") {\n      isHeightmap = true;\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(that._heightmapStructure)) {\n        that._heightmapStructure = {\n          heightScale: 1.0 / 5.0,\n          heightOffset: -1000.0,\n          elementsPerHeight: 1,\n          stride: 1,\n          elementMultiplier: 256.0,\n          isBigEndian: false,\n          lowestEncodedHeight: 0,\n          highestEncodedHeight: 256 * 256 - 1,\n        };\n      }\n      hasWaterMask = true;\n      that._requestWaterMask = true;\n    } else if (data.format.indexOf("quantized-mesh-1.") !== 0) {\n      message =\n        \'The tile format "\' + data.format + \'" is invalid or not supported.\';\n      metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].handleError */ .Z.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    var tileUrlTemplates = data.tiles;\n\n    var maxZoom = data.maxzoom;\n    overallMaxZoom = Math.max(overallMaxZoom, maxZoom);\n    // Keeps track of which of the availablity containing tiles have been loaded\n\n    if (!data.projection || data.projection === "EPSG:4326") {\n      that._tilingScheme = new _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n        numberOfLevelZeroTilesX: 2,\n        numberOfLevelZeroTilesY: 1,\n        ellipsoid: that._ellipsoid,\n      });\n    } else if (data.projection === "EPSG:3857") {\n      that._tilingScheme = new _WebMercatorTilingScheme_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        numberOfLevelZeroTilesX: 1,\n        numberOfLevelZeroTilesY: 1,\n        ellipsoid: that._ellipsoid,\n      });\n    } else {\n      message =\n        \'The projection "\' + data.projection + \'" is invalid or not supported.\';\n      metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].handleError */ .Z.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    that._levelZeroMaximumGeometricError = _TerrainProvider_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].getEstimatedLevelZeroGeometricErrorForAHeightmap */ .Z.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n      that._tilingScheme.ellipsoid,\n      that._heightmapWidth,\n      that._tilingScheme.getNumberOfXTilesAtLevel(0)\n    );\n    if (!data.scheme || data.scheme === "tms" || data.scheme === "slippyMap") {\n      that._scheme = data.scheme;\n    } else {\n      message = \'The scheme "\' + data.scheme + \'" is invalid or not supported.\';\n      metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].handleError */ .Z.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    var availabilityTilesLoaded;\n\n    // The vertex normals defined in the \'octvertexnormals\' extension is identical to the original\n    // contents of the original \'vertexnormals\' extension.  \'vertexnormals\' extension is now\n    // deprecated, as the extensionLength for this extension was incorrectly using big endian.\n    // We maintain backwards compatibility with the legacy \'vertexnormal\' implementation\n    // by setting the _littleEndianExtensionSize to false. Always prefer \'octvertexnormals\'\n    // over \'vertexnormals\' if both extensions are supported by the server.\n    if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(data.extensions) &&\n      data.extensions.indexOf("octvertexnormals") !== -1\n    ) {\n      hasVertexNormals = true;\n    } else if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(data.extensions) &&\n      data.extensions.indexOf("vertexnormals") !== -1\n    ) {\n      hasVertexNormals = true;\n      littleEndianExtensionSize = false;\n    }\n    if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(data.extensions) &&\n      data.extensions.indexOf("watermask") !== -1\n    ) {\n      hasWaterMask = true;\n    }\n    if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(data.extensions) &&\n      data.extensions.indexOf("metadata") !== -1\n    ) {\n      hasMetadata = true;\n    }\n\n    var availabilityLevels = data.metadataAvailability;\n    var availableTiles = data.available;\n    var availability;\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(availableTiles) && !(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(availabilityLevels)) {\n      availability = new _TileAvailability_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(\n        that._tilingScheme,\n        availableTiles.length\n      );\n      for (var level = 0; level < availableTiles.length; ++level) {\n        var rangesAtLevel = availableTiles[level];\n        var yTiles = that._tilingScheme.getNumberOfYTilesAtLevel(level);\n        if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(overallAvailability[level])) {\n          overallAvailability[level] = [];\n        }\n\n        for (\n          var rangeIndex = 0;\n          rangeIndex < rangesAtLevel.length;\n          ++rangeIndex\n        ) {\n          var range = rangesAtLevel[rangeIndex];\n          var yStart = yTiles - range.endY - 1;\n          var yEnd = yTiles - range.startY - 1;\n          overallAvailability[level].push([\n            range.startX,\n            yStart,\n            range.endX,\n            yEnd,\n          ]);\n          availability.addAvailableTileRange(\n            level,\n            range.startX,\n            yStart,\n            range.endX,\n            yEnd\n          );\n        }\n      }\n    } else if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(availabilityLevels)) {\n      availabilityTilesLoaded = new _TileAvailability_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(\n        that._tilingScheme,\n        maxZoom\n      );\n      availability = new _TileAvailability_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(that._tilingScheme, maxZoom);\n      overallAvailability[0] = [[0, 0, 1, 0]];\n      availability.addAvailableTileRange(0, 0, 0, 1, 0);\n    }\n\n    that._hasWaterMask = that._hasWaterMask || hasWaterMask;\n    that._hasVertexNormals = that._hasVertexNormals || hasVertexNormals;\n    that._hasMetadata = that._hasMetadata || hasMetadata;\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(data.attribution)) {\n      if (attribution.length > 0) {\n        attribution += " ";\n      }\n      attribution += data.attribution;\n    }\n\n    layers.push(\n      new LayerInformation({\n        resource: lastResource,\n        version: data.version,\n        isHeightmap: isHeightmap,\n        tileUrlTemplates: tileUrlTemplates,\n        availability: availability,\n        hasVertexNormals: hasVertexNormals,\n        hasWaterMask: hasWaterMask,\n        hasMetadata: hasMetadata,\n        availabilityLevels: availabilityLevels,\n        availabilityTilesLoaded: availabilityTilesLoaded,\n        littleEndianExtensionSize: littleEndianExtensionSize,\n      })\n    );\n\n    var parentUrl = data.parentUrl;\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(parentUrl)) {\n      if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(availability)) {\n        console.log(\n          "A layer.json can\'t have a parentUrl if it does\'t have an available array."\n        );\n        return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve();\n      }\n      lastResource = lastResource.getDerivedResource({\n        url: parentUrl,\n      });\n      lastResource.appendForwardSlash(); // Terrain always expects a directory\n      layerJsonResource = lastResource.getDerivedResource({\n        url: "layer.json",\n      });\n      var parentMetadata = layerJsonResource.fetchJson();\n      return (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(parentMetadata, parseMetadataSuccess, parseMetadataFailure);\n    }\n\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve();\n  }\n\n  function parseMetadataFailure(data) {\n    var message =\n      "An error occurred while accessing " + layerJsonResource.url + ".";\n    metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].handleError */ .Z.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestLayerJson\n    );\n  }\n\n  function metadataSuccess(data) {\n    parseMetadataSuccess(data).then(function () {\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(metadataError)) {\n        return;\n      }\n\n      var length = overallAvailability.length;\n      if (length > 0) {\n        var availability = (that._availability = new _TileAvailability_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(\n          that._tilingScheme,\n          overallMaxZoom\n        ));\n        for (var level = 0; level < length; ++level) {\n          var levelRanges = overallAvailability[level];\n          for (var i = 0; i < levelRanges.length; ++i) {\n            var range = levelRanges[i];\n            availability.addAvailableTileRange(\n              level,\n              range[0],\n              range[1],\n              range[2],\n              range[3]\n            );\n          }\n        }\n      }\n\n      if (attribution.length > 0) {\n        var layerJsonCredit = new _Credit_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(attribution);\n\n        if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(that._tileCredits)) {\n          that._tileCredits.push(layerJsonCredit);\n        } else {\n          that._tileCredits = [layerJsonCredit];\n        }\n      }\n\n      that._ready = true;\n      that._readyPromise.resolve(true);\n    });\n  }\n\n  function metadataFailure(data) {\n    // If the metadata is not found, assume this is a pre-metadata heightmap tileset.\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(data) && data.statusCode === 404) {\n      metadataSuccess({\n        tilejson: "2.1.0",\n        format: "heightmap-1.0",\n        version: "1.0.0",\n        scheme: "tms",\n        tiles: ["{z}/{x}/{y}.terrain?v={version}"],\n      });\n      return;\n    }\n    parseMetadataFailure(data);\n  }\n\n  function requestLayerJson() {\n    (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(layerJsonResource.fetchJson())\n      .then(metadataSuccess)\n      .otherwise(metadataFailure);\n  }\n}\n\n/**\n * When using the Quantized-Mesh format, a tile may be returned that includes additional extensions, such as PerVertexNormals, watermask, etc.\n * This enumeration defines the unique identifiers for each type of extension data that has been appended to the standard mesh data.\n *\n * @namespace QuantizedMeshExtensionIds\n * @see CesiumTerrainProvider\n * @private\n */\nvar QuantizedMeshExtensionIds = {\n  /**\n   * Oct-Encoded Per-Vertex Normals are included as an extension to the tile mesh\n   *\n   * @type {Number}\n   * @constant\n   * @default 1\n   */\n  OCT_VERTEX_NORMALS: 1,\n  /**\n   * A watermask is included as an extension to the tile mesh\n   *\n   * @type {Number}\n   * @constant\n   * @default 2\n   */\n  WATER_MASK: 2,\n  /**\n   * A json object contain metadata about the tile\n   *\n   * @type {Number}\n   * @constant\n   * @default 4\n   */\n  METADATA: 4,\n};\n\nfunction getRequestHeader(extensionsList) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(extensionsList) || extensionsList.length === 0) {\n    return {\n      Accept:\n        "application/vnd.quantized-mesh,application/octet-stream;q=0.9,*/*;q=0.01",\n    };\n  }\n  var extensions = extensionsList.join("-");\n  return {\n    Accept:\n      "application/vnd.quantized-mesh;extensions=" +\n      extensions +\n      ",application/octet-stream;q=0.9,*/*;q=0.01",\n  };\n}\n\nfunction createHeightmapTerrainData(provider, buffer, level, x, y) {\n  var heightBuffer = new Uint16Array(\n    buffer,\n    0,\n    provider._heightmapWidth * provider._heightmapWidth\n  );\n  return new _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    buffer: heightBuffer,\n    childTileMask: new Uint8Array(buffer, heightBuffer.byteLength, 1)[0],\n    waterMask: new Uint8Array(\n      buffer,\n      heightBuffer.byteLength + 1,\n      buffer.byteLength - heightBuffer.byteLength - 1\n    ),\n    width: provider._heightmapWidth,\n    height: provider._heightmapWidth,\n    structure: provider._heightmapStructure,\n    credits: provider._tileCredits,\n  });\n}\n\nfunction createQuantizedMeshTerrainData(provider, buffer, level, x, y, layer) {\n  var littleEndianExtensionSize = layer.littleEndianExtensionSize;\n  var pos = 0;\n  var cartesian3Elements = 3;\n  var boundingSphereElements = cartesian3Elements + 1;\n  var cartesian3Length = Float64Array.BYTES_PER_ELEMENT * cartesian3Elements;\n  var boundingSphereLength =\n    Float64Array.BYTES_PER_ELEMENT * boundingSphereElements;\n  var encodedVertexElements = 3;\n  var encodedVertexLength =\n    Uint16Array.BYTES_PER_ELEMENT * encodedVertexElements;\n  var triangleElements = 3;\n  var bytesPerIndex = Uint16Array.BYTES_PER_ELEMENT;\n  var triangleLength = bytesPerIndex * triangleElements;\n\n  var view = new DataView(buffer);\n  var center = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n    view.getFloat64(pos, true),\n    view.getFloat64(pos + 8, true),\n    view.getFloat64(pos + 16, true)\n  );\n  pos += cartesian3Length;\n\n  var minimumHeight = view.getFloat32(pos, true);\n  pos += Float32Array.BYTES_PER_ELEMENT;\n  var maximumHeight = view.getFloat32(pos, true);\n  pos += Float32Array.BYTES_PER_ELEMENT;\n\n  var boundingSphere = new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n    new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      view.getFloat64(pos, true),\n      view.getFloat64(pos + 8, true),\n      view.getFloat64(pos + 16, true)\n    ),\n    view.getFloat64(pos + cartesian3Length, true)\n  );\n  pos += boundingSphereLength;\n\n  var horizonOcclusionPoint = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n    view.getFloat64(pos, true),\n    view.getFloat64(pos + 8, true),\n    view.getFloat64(pos + 16, true)\n  );\n  pos += cartesian3Length;\n\n  var vertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  var encodedVertexBuffer = new Uint16Array(buffer, pos, vertexCount * 3);\n  pos += vertexCount * encodedVertexLength;\n\n  if (vertexCount > 64 * 1024) {\n    // More than 64k vertices, so indices are 32-bit.\n    bytesPerIndex = Uint32Array.BYTES_PER_ELEMENT;\n    triangleLength = bytesPerIndex * triangleElements;\n  }\n\n  // Decode the vertex buffer.\n  var uBuffer = encodedVertexBuffer.subarray(0, vertexCount);\n  var vBuffer = encodedVertexBuffer.subarray(vertexCount, 2 * vertexCount);\n  var heightBuffer = encodedVertexBuffer.subarray(\n    vertexCount * 2,\n    3 * vertexCount\n  );\n\n  _AttributeCompression_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].zigZagDeltaDecode */ .Z.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\n\n  // skip over any additional padding that was added for 2/4 byte alignment\n  if (pos % bytesPerIndex !== 0) {\n    pos += bytesPerIndex - (pos % bytesPerIndex);\n  }\n\n  var triangleCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  var indices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArrayFromArrayBuffer */ .Z.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    triangleCount * triangleElements\n  );\n  pos += triangleCount * triangleLength;\n\n  // High water mark decoding based on decompressIndices_ in webgl-loader\'s loader.js.\n  // https://code.google.com/p/webgl-loader/source/browse/trunk/samples/loader.js?r=99#55\n  // Copyright 2012 Google Inc., Apache 2.0 license.\n  var highest = 0;\n  var length = indices.length;\n  for (var i = 0; i < length; ++i) {\n    var code = indices[i];\n    indices[i] = highest - code;\n    if (code === 0) {\n      ++highest;\n    }\n  }\n\n  var westVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  var westIndices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArrayFromArrayBuffer */ .Z.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    westVertexCount\n  );\n  pos += westVertexCount * bytesPerIndex;\n\n  var southVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  var southIndices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArrayFromArrayBuffer */ .Z.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    southVertexCount\n  );\n  pos += southVertexCount * bytesPerIndex;\n\n  var eastVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  var eastIndices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArrayFromArrayBuffer */ .Z.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    eastVertexCount\n  );\n  pos += eastVertexCount * bytesPerIndex;\n\n  var northVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  var northIndices = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createTypedArrayFromArrayBuffer */ .Z.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    northVertexCount\n  );\n  pos += northVertexCount * bytesPerIndex;\n\n  var encodedNormalBuffer;\n  var waterMaskBuffer;\n  while (pos < view.byteLength) {\n    var extensionId = view.getUint8(pos, true);\n    pos += Uint8Array.BYTES_PER_ELEMENT;\n    var extensionLength = view.getUint32(pos, littleEndianExtensionSize);\n    pos += Uint32Array.BYTES_PER_ELEMENT;\n\n    if (\n      extensionId === QuantizedMeshExtensionIds.OCT_VERTEX_NORMALS &&\n      provider._requestVertexNormals\n    ) {\n      encodedNormalBuffer = new Uint8Array(buffer, pos, vertexCount * 2);\n    } else if (\n      extensionId === QuantizedMeshExtensionIds.WATER_MASK &&\n      provider._requestWaterMask\n    ) {\n      waterMaskBuffer = new Uint8Array(buffer, pos, extensionLength);\n    } else if (\n      extensionId === QuantizedMeshExtensionIds.METADATA &&\n      provider._requestMetadata\n    ) {\n      var stringLength = view.getUint32(pos, true);\n      if (stringLength > 0) {\n        var metadata = (0,_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n          new Uint8Array(buffer),\n          pos + Uint32Array.BYTES_PER_ELEMENT,\n          stringLength\n        );\n        var availableTiles = metadata.available;\n        if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(availableTiles)) {\n          for (var offset = 0; offset < availableTiles.length; ++offset) {\n            var availableLevel = level + offset + 1;\n            var rangesAtLevel = availableTiles[offset];\n            var yTiles = provider._tilingScheme.getNumberOfYTilesAtLevel(\n              availableLevel\n            );\n\n            for (\n              var rangeIndex = 0;\n              rangeIndex < rangesAtLevel.length;\n              ++rangeIndex\n            ) {\n              var range = rangesAtLevel[rangeIndex];\n              var yStart = yTiles - range.endY - 1;\n              var yEnd = yTiles - range.startY - 1;\n              provider.availability.addAvailableTileRange(\n                availableLevel,\n                range.startX,\n                yStart,\n                range.endX,\n                yEnd\n              );\n              layer.availability.addAvailableTileRange(\n                availableLevel,\n                range.startX,\n                yStart,\n                range.endX,\n                yEnd\n              );\n            }\n          }\n        }\n      }\n      layer.availabilityTilesLoaded.addAvailableTileRange(level, x, y, x, y);\n    }\n    pos += extensionLength;\n  }\n\n  var skirtHeight = provider.getLevelMaximumGeometricError(level) * 5.0;\n\n  // The skirt is not included in the OBB computation. If this ever\n  // causes any rendering artifacts (cracks), they are expected to be\n  // minor and in the corners of the screen. It\'s possible that this\n  // might need to be changed - just change to `minimumHeight - skirtHeight`\n  // A similar change might also be needed in `upsampleQuantizedTerrainMesh.js`.\n  var rectangle = provider._tilingScheme.tileXYToRectangle(x, y, level);\n  var orientedBoundingBox = _OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].fromRectangle */ .Z.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    provider._tilingScheme.ellipsoid\n  );\n\n  return new _QuantizedMeshTerrainData_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z({\n    center: center,\n    minimumHeight: minimumHeight,\n    maximumHeight: maximumHeight,\n    boundingSphere: boundingSphere,\n    orientedBoundingBox: orientedBoundingBox,\n    horizonOcclusionPoint: horizonOcclusionPoint,\n    quantizedVertices: encodedVertexBuffer,\n    encodedNormals: encodedNormalBuffer,\n    indices: indices,\n    westIndices: westIndices,\n    southIndices: southIndices,\n    eastIndices: eastIndices,\n    northIndices: northIndices,\n    westSkirtHeight: skirtHeight,\n    southSkirtHeight: skirtHeight,\n    eastSkirtHeight: skirtHeight,\n    northSkirtHeight: skirtHeight,\n    childTileMask: provider.availability.computeChildMaskForTile(level, x, y),\n    waterMask: waterMaskBuffer,\n    credits: provider._tileCredits,\n  });\n}\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link CesiumTerrainProvider#ready} returns true.  The result must include terrain data and\n * may optionally include a water mask and an indication of which child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n *\n * @exception {DeveloperError} This function must not be called before {@link CesiumTerrainProvider#ready}\n *            returns true.\n */\nCesiumTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart(\'debug\', pragmas.debug)\n  if (!this._ready) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "requestTileGeometry must not be called before the terrain provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var layers = this._layers;\n  var layerToUse;\n  var layerCount = layers.length;\n\n  if (layerCount === 1) {\n    // Optimized path for single layers\n    layerToUse = layers[0];\n  } else {\n    for (var i = 0; i < layerCount; ++i) {\n      var layer = layers[i];\n      if (\n        !(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(layer.availability) ||\n        layer.availability.isTileAvailable(level, x, y)\n      ) {\n        layerToUse = layer;\n        break;\n      }\n    }\n  }\n\n  return requestTileGeometry(this, x, y, level, layerToUse, request);\n};\n\nfunction requestTileGeometry(provider, x, y, level, layerToUse, request) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(layerToUse)) {\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z("Terrain tile doesn\'t exist"));\n  }\n\n  var urlTemplates = layerToUse.tileUrlTemplates;\n  if (urlTemplates.length === 0) {\n    return undefined;\n  }\n\n  // The TileMapService scheme counts from the bottom left\n  var terrainY;\n  if (!provider._scheme || provider._scheme === "tms") {\n    var yTiles = provider._tilingScheme.getNumberOfYTilesAtLevel(level);\n    terrainY = yTiles - y - 1;\n  } else {\n    terrainY = y;\n  }\n\n  var extensionList = [];\n  if (provider._requestVertexNormals && layerToUse.hasVertexNormals) {\n    extensionList.push(\n      layerToUse.littleEndianExtensionSize\n        ? "octvertexnormals"\n        : "vertexnormals"\n    );\n  }\n  if (provider._requestWaterMask && layerToUse.hasWaterMask) {\n    extensionList.push("watermask");\n  }\n  if (provider._requestMetadata && layerToUse.hasMetadata) {\n    extensionList.push("metadata");\n  }\n\n  var headers;\n  var query;\n  var url = urlTemplates[(x + terrainY + level) % urlTemplates.length];\n\n  var resource = layerToUse.resource;\n  if (\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(resource._ionEndpoint) &&\n    !(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(resource._ionEndpoint.externalType)\n  ) {\n    // ion uses query paremeters to request extensions\n    if (extensionList.length !== 0) {\n      query = { extensions: extensionList.join("-") };\n    }\n    headers = getRequestHeader(undefined);\n  } else {\n    //All other terrain servers\n    headers = getRequestHeader(extensionList);\n  }\n\n  var promise = resource\n    .getDerivedResource({\n      url: url,\n      templateValues: {\n        version: layerToUse.version,\n        z: level,\n        x: x,\n        y: terrainY,\n      },\n      queryParameters: query,\n      headers: headers,\n      request: request,\n    })\n    .fetchArrayBuffer();\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(promise)) {\n    return undefined;\n  }\n\n  return promise.then(function (buffer) {\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(provider._heightmapStructure)) {\n      return createHeightmapTerrainData(provider, buffer, level, x, y);\n    }\n    return createQuantizedMeshTerrainData(\n      provider,\n      buffer,\n      level,\n      x,\n      y,\n      layerToUse\n    );\n  });\n}\n\nObject.defineProperties(CesiumTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "credit must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "tilingScheme must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @exception {DeveloperError} This property must not be called before {@link CesiumTerrainProvider#ready}\n   */\n  hasWaterMask: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "hasWaterMask must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._hasWaterMask && this._requestWaterMask;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @exception {DeveloperError} This property must not be called before {@link CesiumTerrainProvider#ready}\n   */\n  hasVertexNormals: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "hasVertexNormals must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      // returns true if we can request vertex normals from the server\n      return this._hasVertexNormals && this._requestVertexNormals;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include metadata.\n   * This function should not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @exception {DeveloperError} This property must not be called before {@link CesiumTerrainProvider#ready}\n   */\n  hasMetadata: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "hasMetadata must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      // returns true if we can request metadata from the server\n      return this._hasMetadata && this._requestMetadata;\n    },\n  },\n\n  /**\n   * Boolean flag that indicates if the client should request vertex normals from the server.\n   * Vertex normals data is appended to the standard tile mesh data only if the client requests the vertex normals and\n   * if the server provides vertex normals.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  requestVertexNormals: {\n    get: function () {\n      return this._requestVertexNormals;\n    },\n  },\n\n  /**\n   * Boolean flag that indicates if the client should request a watermask from the server.\n   * Watermask data is appended to the standard tile mesh data only if the client requests the watermask and\n   * if the server provides a watermask.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  requestWaterMask: {\n    get: function () {\n      return this._requestWaterMask;\n    },\n  },\n\n  /**\n   * Boolean flag that indicates if the client should request metadata from the server.\n   * Metadata is appended to the standard tile mesh data only if the client requests the metadata and\n   * if the server provides a metadata.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  requestMetadata: {\n    get: function () {\n      return this._requestMetadata;\n    },\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link CesiumTerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available. Note that this reflects tiles that are known to be available currently.\n   * Additional tiles may be discovered to be available in the future, e.g. if availability information\n   * exists deeper in the tree rather than it all being discoverable at the root. However, a tile that\n   * is available now will not become unavailable in the future.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug)\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n          "availability must not be called before the terrain provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      return this._availability;\n    },\n  },\n});\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nCesiumTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported or availability is unknown, otherwise true or false.\n */\nCesiumTerrainProvider.prototype.getTileDataAvailable = function (x, y, level) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._availability)) {\n    return undefined;\n  }\n  if (level > this._availability._maximumLevel) {\n    return false;\n  }\n\n  if (this._availability.isTileAvailable(level, x, y)) {\n    // If the tile is listed as available, then we are done\n    return true;\n  }\n  if (!this._hasMetadata) {\n    // If we don\'t have any layers with the metadata extension then we don\'t have this tile\n    return false;\n  }\n\n  var layers = this._layers;\n  var count = layers.length;\n  for (var i = 0; i < count; ++i) {\n    var layerResult = checkLayer(this, x, y, level, layers[i], i === 0);\n    if (layerResult.result) {\n      // There is a layer that may or may not have the tile\n      return undefined;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nCesiumTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  if (\n    !(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._availability) ||\n    level > this._availability._maximumLevel ||\n    this._availability.isTileAvailable(level, x, y) ||\n    !this._hasMetadata\n  ) {\n    // We know the tile is either available or not available so nothing to wait on\n    return undefined;\n  }\n\n  var layers = this._layers;\n  var count = layers.length;\n  for (var i = 0; i < count; ++i) {\n    var layerResult = checkLayer(this, x, y, level, layers[i], i === 0);\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(layerResult.promise)) {\n      return layerResult.promise;\n    }\n  }\n};\n\nfunction getAvailabilityTile(layer, x, y, level) {\n  if (level === 0) {\n    return;\n  }\n\n  var availabilityLevels = layer.availabilityLevels;\n  var parentLevel =\n    level % availabilityLevels === 0\n      ? level - availabilityLevels\n      : ((level / availabilityLevels) | 0) * availabilityLevels;\n  var divisor = 1 << (level - parentLevel);\n  var parentX = (x / divisor) | 0;\n  var parentY = (y / divisor) | 0;\n\n  return {\n    level: parentLevel,\n    x: parentX,\n    y: parentY,\n  };\n}\n\nfunction checkLayer(provider, x, y, level, layer, topLayer) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(layer.availabilityLevels)) {\n    // It\'s definitely not in this layer\n    return {\n      result: false,\n    };\n  }\n\n  var cacheKey;\n  var deleteFromCache = function () {\n    delete layer.availabilityPromiseCache[cacheKey];\n  };\n  var availabilityTilesLoaded = layer.availabilityTilesLoaded;\n  var availability = layer.availability;\n\n  var tile = getAvailabilityTile(layer, x, y, level);\n  while ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(tile)) {\n    if (\n      availability.isTileAvailable(tile.level, tile.x, tile.y) &&\n      !availabilityTilesLoaded.isTileAvailable(tile.level, tile.x, tile.y)\n    ) {\n      var requestPromise;\n      if (!topLayer) {\n        cacheKey = tile.level + "-" + tile.x + "-" + tile.y;\n        requestPromise = layer.availabilityPromiseCache[cacheKey];\n        if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(requestPromise)) {\n          // For cutout terrain, if this isn\'t the top layer the availability tiles\n          //  may never get loaded, so request it here.\n          var request = new _Request_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n            throttle: false,\n            throttleByServer: true,\n            type: _RequestType_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].TERRAIN */ .Z.TERRAIN,\n          });\n          requestPromise = requestTileGeometry(\n            provider,\n            tile.x,\n            tile.y,\n            tile.level,\n            layer,\n            request\n          );\n          if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(requestPromise)) {\n            layer.availabilityPromiseCache[cacheKey] = requestPromise;\n            requestPromise.then(deleteFromCache);\n          }\n        }\n      }\n\n      // The availability tile is available, but not loaded, so there\n      //  is still a chance that it may become available at some point\n      return {\n        result: true,\n        promise: requestPromise,\n      };\n    }\n\n    tile = getAvailabilityTile(layer, tile.x, tile.y, tile.level);\n  }\n\n  return {\n    result: false,\n  };\n}\n\n// Used for testing\nCesiumTerrainProvider._getAvailabilityTile = getAvailabilityTile;\n/* harmony default export */ __webpack_exports__["Z"] = (CesiumTerrainProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65987\n')}}]);