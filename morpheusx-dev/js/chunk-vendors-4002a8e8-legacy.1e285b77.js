"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[6568],{4157:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_ArcType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11491);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(39960);\n/* harmony import */ var _Core_Credit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52975);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14459);\n/* harmony import */ var _Core_getFilenameFromUri_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8962);\n/* harmony import */ var _Core_PinBuilder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(78318);\n/* harmony import */ var _Core_PolygonHierarchy_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(78757);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(68985);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9407);\n/* harmony import */ var _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(4260);\n/* harmony import */ var _Scene_VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(60473);\n/* harmony import */ var _ThirdParty_topojson_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(92564);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(13222);\n/* harmony import */ var _BillboardGraphics_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(44011);\n/* harmony import */ var _CallbackProperty_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(11249);\n/* harmony import */ var _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(20174);\n/* harmony import */ var _ConstantPositionProperty_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(19069);\n/* harmony import */ var _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(612);\n/* harmony import */ var _DataSource_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(70265);\n/* harmony import */ var _EntityCluster_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(47890);\n/* harmony import */ var _EntityCollection_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(69516);\n/* harmony import */ var _PolygonGraphics_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(3081);\n/* harmony import */ var _PolylineGraphics_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(42956);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction defaultCrsFunction(coordinates) {\n  return _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromDegrees */ .Z.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);\n}\n\nvar crsNames = {\n  "urn:ogc:def:crs:OGC:1.3:CRS84": defaultCrsFunction,\n  "EPSG:4326": defaultCrsFunction,\n  "urn:ogc:def:crs:EPSG::4326": defaultCrsFunction,\n};\n\nvar crsLinkHrefs = {};\nvar crsLinkTypes = {};\nvar defaultMarkerSize = 48;\nvar defaultMarkerSymbol;\nvar defaultMarkerColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ROYALBLUE */ .Z.ROYALBLUE;\nvar defaultStroke = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].YELLOW */ .Z.YELLOW;\nvar defaultStrokeWidth = 2;\nvar defaultFill = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromBytes */ .Z.fromBytes(255, 255, 0, 100);\nvar defaultClampToGround = false;\n\nvar sizes = {\n  small: 24,\n  medium: 48,\n  large: 64,\n};\n\nvar simpleStyleIdentifiers = [\n  "title",\n  "description", //\n  "marker-size",\n  "marker-symbol",\n  "marker-color",\n  "stroke", //\n  "stroke-opacity",\n  "stroke-width",\n  "fill",\n  "fill-opacity",\n];\n\nfunction defaultDescribe(properties, nameProperty) {\n  var html = "";\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n      var value = properties[key];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(value)) {\n        if (typeof value === "object") {\n          html +=\n            "<tr><th>" +\n            key +\n            "</th><td>" +\n            defaultDescribe(value) +\n            "</td></tr>";\n        } else {\n          html += "<tr><th>" + key + "</th><td>" + value + "</td></tr>";\n        }\n      }\n    }\n  }\n\n  if (html.length > 0) {\n    html =\n      \'<table class="cesium-infoBox-defaultTable"><tbody>\' +\n      html +\n      "</tbody></table>";\n  }\n\n  return html;\n}\n\nfunction createDescriptionCallback(describe, properties, nameProperty) {\n  var description;\n  return function (time, result) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(description)) {\n      description = describe(properties, nameProperty);\n    }\n    return description;\n  };\n}\n\nfunction defaultDescribeProperty(properties, nameProperty) {\n  return new _CallbackProperty_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z(\n    createDescriptionCallback(defaultDescribe, properties, nameProperty),\n    true\n  );\n}\n\n//GeoJSON specifies only the Feature object has a usable id property\n//But since "multi" geometries create multiple entity,\n//we can\'t use it for them either.\nfunction createObject(geoJson, entityCollection, describe) {\n  var id = geoJson.id;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(id) || geoJson.type !== "Feature") {\n    id = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)();\n  } else {\n    var i = 2;\n    var finalId = id;\n    while ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(entityCollection.getById(finalId))) {\n      finalId = id + "_" + i;\n      i++;\n    }\n    id = finalId;\n  }\n\n  var entity = entityCollection.getOrCreateEntity(id);\n  var properties = geoJson.properties;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(properties)) {\n    entity.properties = properties;\n\n    var nameProperty;\n\n    //Check for the simplestyle specified name first.\n    var name = properties.title;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(name)) {\n      entity.name = name;\n      nameProperty = "title";\n    } else {\n      //Else, find the name by selecting an appropriate property.\n      //The name will be obtained based on this order:\n      //1) The first case-insensitive property with the name \'title\',\n      //2) The first case-insensitive property with the name \'name\',\n      //3) The first property containing the word \'title\'.\n      //4) The first property containing the word \'name\',\n      var namePropertyPrecedence = Number.MAX_VALUE;\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          var lowerKey = key.toLowerCase();\n\n          if (namePropertyPrecedence > 1 && lowerKey === "title") {\n            namePropertyPrecedence = 1;\n            nameProperty = key;\n            break;\n          } else if (namePropertyPrecedence > 2 && lowerKey === "name") {\n            namePropertyPrecedence = 2;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 3 && /title/i.test(key)) {\n            namePropertyPrecedence = 3;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 4 && /name/i.test(key)) {\n            namePropertyPrecedence = 4;\n            nameProperty = key;\n          }\n        }\n      }\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(nameProperty)) {\n        entity.name = properties[nameProperty];\n      }\n    }\n\n    var description = properties.description;\n    if (description !== null) {\n      entity.description = !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(description)\n        ? describe(properties, nameProperty)\n        : new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(description);\n    }\n  }\n  return entity;\n}\n\nfunction coordinatesArrayToCartesianArray(coordinates, crsFunction) {\n  var positions = new Array(coordinates.length);\n  for (var i = 0; i < coordinates.length; i++) {\n    positions[i] = crsFunction(coordinates[i]);\n  }\n  return positions;\n}\n\nvar geoJsonObjectTypes = {\n  Feature: processFeature,\n  FeatureCollection: processFeatureCollection,\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\nvar geometryTypes = {\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\n// GeoJSON processing functions\nfunction processFeature(dataSource, feature, notUsed, crsFunction, options) {\n  if (feature.geometry === null) {\n    //Null geometry is allowed, so just create an empty entity instance for it.\n    createObject(feature, dataSource._entityCollection, options.describe);\n    return;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(feature.geometry)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("feature.geometry is required.");\n  }\n\n  var geometryType = feature.geometry.type;\n  var geometryHandler = geometryTypes[geometryType];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(geometryHandler)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("Unknown geometry type: " + geometryType);\n  }\n  geometryHandler(dataSource, feature, feature.geometry, crsFunction, options);\n}\n\nfunction processFeatureCollection(\n  dataSource,\n  featureCollection,\n  notUsed,\n  crsFunction,\n  options\n) {\n  var features = featureCollection.features;\n  for (var i = 0, len = features.length; i < len; i++) {\n    processFeature(dataSource, features[i], undefined, crsFunction, options);\n  }\n}\n\nfunction processGeometryCollection(\n  dataSource,\n  geoJson,\n  geometryCollection,\n  crsFunction,\n  options\n) {\n  var geometries = geometryCollection.geometries;\n  for (var i = 0, len = geometries.length; i < len; i++) {\n    var geometry = geometries[i];\n    var geometryType = geometry.type;\n    var geometryHandler = geometryTypes[geometryType];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(geometryHandler)) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("Unknown geometry type: " + geometryType);\n    }\n    geometryHandler(dataSource, geoJson, geometry, crsFunction, options);\n  }\n}\n\nfunction createPoint(dataSource, geoJson, crsFunction, coordinates, options) {\n  var symbol = options.markerSymbol;\n  var color = options.markerColor;\n  var size = options.markerSize;\n\n  var properties = geoJson.properties;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(properties)) {\n    var cssColor = properties["marker-color"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(cssColor)) {\n      color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCssColorString */ .Z.fromCssColorString(cssColor);\n    }\n\n    size = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(sizes[properties["marker-size"]], size);\n    var markerSymbol = properties["marker-symbol"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(markerSymbol)) {\n      symbol = markerSymbol;\n    }\n  }\n\n  var canvasOrPromise;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(symbol)) {\n    if (symbol.length === 1) {\n      canvasOrPromise = dataSource._pinBuilder.fromText(\n        symbol.toUpperCase(),\n        color,\n        size\n      );\n    } else {\n      canvasOrPromise = dataSource._pinBuilder.fromMakiIconId(\n        symbol,\n        color,\n        size\n      );\n    }\n  } else {\n    canvasOrPromise = dataSource._pinBuilder.fromColor(color, size);\n  }\n\n  var billboard = new _BillboardGraphics_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z();\n  billboard.verticalOrigin = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(_Scene_VerticalOrigin_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].BOTTOM */ .Z.BOTTOM);\n\n  // Clamp to ground if there isn\'t a height specified\n  if (coordinates.length === 2 && options.clampToGround) {\n    billboard.heightReference = _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].CLAMP_TO_GROUND */ .Z.CLAMP_TO_GROUND;\n  }\n\n  var entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.billboard = billboard;\n  entity.position = new _ConstantPositionProperty_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z(crsFunction(coordinates));\n\n  var promise = (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(canvasOrPromise)\n    .then(function (image) {\n      billboard.image = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(image);\n    })\n    .otherwise(function () {\n      billboard.image = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(\n        dataSource._pinBuilder.fromColor(color, size)\n      );\n    });\n\n  dataSource._promises.push(promise);\n}\n\nfunction processPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  createPoint(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPoint(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  var coordinates = geometry.coordinates;\n  for (var i = 0; i < coordinates.length; i++) {\n    createPoint(dataSource, geoJson, crsFunction, coordinates[i], options);\n  }\n}\n\nfunction createLineString(\n  dataSource,\n  geoJson,\n  crsFunction,\n  coordinates,\n  options\n) {\n  var material = options.strokeMaterialProperty;\n  var widthProperty = options.strokeWidthProperty;\n\n  var properties = geoJson.properties;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(properties)) {\n    var width = properties["stroke-width"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(width)) {\n      widthProperty = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(width);\n    }\n\n    var color;\n    var stroke = properties.stroke;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(stroke)) {\n      color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCssColorString */ .Z.fromCssColorString(stroke);\n    }\n    var opacity = properties["stroke-opacity"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(opacity) && opacity !== 1.0) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(color)) {\n        color = material.color.clone();\n      }\n      color.alpha = opacity;\n    }\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(color)) {\n      material = new _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(color);\n    }\n  }\n\n  var entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  var polylineGraphics = new _PolylineGraphics_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n  entity.polyline = polylineGraphics;\n\n  polylineGraphics.clampToGround = options.clampToGround;\n  polylineGraphics.material = material;\n  polylineGraphics.width = widthProperty;\n  polylineGraphics.positions = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(\n    coordinatesArrayToCartesianArray(coordinates, crsFunction)\n  );\n  polylineGraphics.arcType = _Core_ArcType_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].RHUMB */ .Z.RHUMB;\n}\n\nfunction processLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  createLineString(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  var lineStrings = geometry.coordinates;\n  for (var i = 0; i < lineStrings.length; i++) {\n    createLineString(dataSource, geoJson, crsFunction, lineStrings[i], options);\n  }\n}\n\nfunction createPolygon(dataSource, geoJson, crsFunction, coordinates, options) {\n  if (coordinates.length === 0 || coordinates[0].length === 0) {\n    return;\n  }\n\n  var outlineColorProperty = options.strokeMaterialProperty.color;\n  var material = options.fillMaterialProperty;\n  var widthProperty = options.strokeWidthProperty;\n\n  var properties = geoJson.properties;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(properties)) {\n    var width = properties["stroke-width"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(width)) {\n      widthProperty = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(width);\n    }\n\n    var color;\n    var stroke = properties.stroke;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(stroke)) {\n      color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCssColorString */ .Z.fromCssColorString(stroke);\n    }\n    var opacity = properties["stroke-opacity"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(opacity) && opacity !== 1.0) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(color)) {\n        color = options.strokeMaterialProperty.color.clone();\n      }\n      color.alpha = opacity;\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(color)) {\n      outlineColorProperty = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(color);\n    }\n\n    var fillColor;\n    var fill = properties.fill;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(fill)) {\n      fillColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromCssColorString */ .Z.fromCssColorString(fill);\n      fillColor.alpha = material.color.alpha;\n    }\n    opacity = properties["fill-opacity"];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(opacity) && opacity !== material.color.alpha) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(fillColor)) {\n        fillColor = material.color.clone();\n      }\n      fillColor.alpha = opacity;\n    }\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(fillColor)) {\n      material = new _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(fillColor);\n    }\n  }\n\n  var polygon = new _PolygonGraphics_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z();\n  polygon.outline = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(true);\n  polygon.outlineColor = outlineColorProperty;\n  polygon.outlineWidth = widthProperty;\n  polygon.material = material;\n  polygon.arcType = _Core_ArcType_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].RHUMB */ .Z.RHUMB;\n\n  var holes = [];\n  for (var i = 1, len = coordinates.length; i < len; i++) {\n    holes.push(\n      new _Core_PolygonHierarchy_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z(\n        coordinatesArrayToCartesianArray(coordinates[i], crsFunction)\n      )\n    );\n  }\n\n  var positions = coordinates[0];\n  polygon.hierarchy = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(\n    new _Core_PolygonHierarchy_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z(\n      coordinatesArrayToCartesianArray(positions, crsFunction),\n      holes\n    )\n  );\n  if (positions[0].length > 2) {\n    polygon.perPositionHeight = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(true);\n  } else if (!options.clampToGround) {\n    polygon.height = 0;\n  }\n\n  var entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.polygon = polygon;\n}\n\nfunction processPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  createPolygon(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiPolygon(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  var polygons = geometry.coordinates;\n  for (var i = 0; i < polygons.length; i++) {\n    createPolygon(dataSource, geoJson, crsFunction, polygons[i], options);\n  }\n}\n\nfunction processTopology(dataSource, geoJson, geometry, crsFunction, options) {\n  for (var property in geometry.objects) {\n    if (geometry.objects.hasOwnProperty(property)) {\n      var feature = _ThirdParty_topojson_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].feature */ .Z.feature(geometry, geometry.objects[property]);\n      var typeHandler = geoJsonObjectTypes[feature.type];\n      typeHandler(dataSource, feature, feature, crsFunction, options);\n    }\n  }\n}\n\n/**\n * @typedef {Object} GeoJsonDataSource.LoadOptions\n *\n * Initialization options for the `load` method.\n *\n * @property {String} [sourceUri] Overrides the url to use for resolving relative links.\n * @property {Number} [markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @property {String} [markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @property {Color} [markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @property {Color} [stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @property {Number} [strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @property {Color} [fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @property {Boolean} [clampToGround=GeoJsonDataSource.clampToGround] true if we want the geometry features (polygons or linestrings) clamped to the ground.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * A {@link DataSource} which processes both\n * {@link http://www.geojson.org/|GeoJSON} and {@link https://github.com/mbostock/topojson|TopoJSON} data.\n * {@link https://github.com/mapbox/simplestyle-spec|simplestyle-spec} properties will also be used if they\n * are present.\n *\n * @alias GeoJsonDataSource\n * @constructor\n *\n * @param {String} [name] The name of this data source.  If undefined, a name will be taken from\n *                        the name of the GeoJSON file.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20and%20TopoJSON.html|Cesium Sandcastle GeoJSON and TopoJSON Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20simplestyle.html|Cesium Sandcastle GeoJSON simplestyle Demo}\n *\n * @example\n * var viewer = new Cesium.Viewer(\'cesiumContainer\');\n * viewer.dataSources.add(Cesium.GeoJsonDataSource.load(\'../../SampleData/ne_10m_us_states.topojson\', {\n *   stroke: Cesium.Color.HOTPINK,\n *   fill: Cesium.Color.PINK,\n *   strokeWidth: 3,\n *   markerSymbol: \'?\'\n * }));\n */\nfunction GeoJsonDataSource(name) {\n  this._name = name;\n  this._changed = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n  this._error = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n  this._isLoading = false;\n  this._loading = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n  this._entityCollection = new _EntityCollection_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z(this);\n  this._promises = [];\n  this._pinBuilder = new _Core_PinBuilder_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z();\n  this._entityCluster = new _EntityCluster_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided GeoJSON or TopoJSON data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} A promise that will resolve when the data is loaded.\n */\nGeoJsonDataSource.load = function (data, options) {\n  return new GeoJsonDataSource().load(data, options);\n};\n\nObject.defineProperties(GeoJsonDataSource, {\n  /**\n   * Gets or sets the default size of the map pin created for each point, in pixels.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 48\n   */\n  markerSize: {\n    get: function () {\n      return defaultMarkerSize;\n    },\n    set: function (value) {\n      defaultMarkerSize = value;\n    },\n  },\n  /**\n   * Gets or sets the default symbol of the map pin created for each point.\n   * This can be any valid {@link http://mapbox.com/maki/|Maki} identifier, any single character,\n   * or blank if no symbol is to be used.\n   * @memberof GeoJsonDataSource\n   * @type {String}\n   */\n  markerSymbol: {\n    get: function () {\n      return defaultMarkerSymbol;\n    },\n    set: function (value) {\n      defaultMarkerSymbol = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of the map pin created for each point.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.ROYALBLUE\n   */\n  markerColor: {\n    get: function () {\n      return defaultMarkerColor;\n    },\n    set: function (value) {\n      defaultMarkerColor = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.BLACK\n   */\n  stroke: {\n    get: function () {\n      return defaultStroke;\n    },\n    set: function (value) {\n      defaultStroke = value;\n    },\n  },\n  /**\n   * Gets or sets the default width of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 2.0\n   */\n  strokeWidth: {\n    get: function () {\n      return defaultStrokeWidth;\n    },\n    set: function (value) {\n      defaultStrokeWidth = value;\n    },\n  },\n  /**\n   * Gets or sets default color for polygon interiors.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.YELLOW\n   */\n  fill: {\n    get: function () {\n      return defaultFill;\n    },\n    set: function (value) {\n      defaultFill = value;\n    },\n  },\n  /**\n   * Gets or sets default of whether to clamp to the ground.\n   * @memberof GeoJsonDataSource\n   * @type {Boolean}\n   * @default false\n   */\n  clampToGround: {\n    get: function () {\n      return defaultClampToGround;\n    },\n    set: function (value) {\n      defaultClampToGround = value;\n    },\n  },\n\n  /**\n   * Gets an object that maps the name of a crs to a callback function which takes a GeoJSON coordinate\n   * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of GeoJSON which\n   * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,\n   * for example \'EPSG:4326\'.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsNames: {\n    get: function () {\n      return crsNames;\n    },\n  },\n\n  /**\n   * Gets an object that maps the href property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming\n   * the link has a type specified.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkHrefs: {\n    get: function () {\n      return crsLinkHrefs;\n    },\n  },\n\n  /**\n   * Gets an object that maps the type property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in <code>crsLinkHrefs</code> take precedence over this object.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkTypes: {\n    get: function () {\n      return crsLinkTypes;\n    },\n  },\n});\n\nObject.defineProperties(GeoJsonDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * This DataSource only defines static data, therefore this property is always undefined.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    value: undefined,\n    writable: false,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(value)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("value must be defined.");\n      }\n      //>>includeEnd(\'debug\');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {Object} [options] An object with the following properties:\n * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\n * @param {GeoJsonDataSource.describe} [options.describe=GeoJsonDataSource.defaultDescribeProperty] A function which returns a Property object (or just a string),\n *                                                                                which converts the properties into an html description.\n * @param {Number} [options.markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @param {String} [options.markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @param {Color} [options.markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @param {Color} [options.stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @param {Number} [options.strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @param {Color} [options.fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @param {Boolean} [options.clampToGround=GeoJsonDataSource.clampToGround] true if we want the features clamped to the ground.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.load = function (data, options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(data)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z("data is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  _DataSource_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].setLoading */ .Z.setLoading(this, true);\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  // User specified credit\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(credit);\n  }\n  this._credit = credit;\n\n  var promise = data;\n  var sourceUri = options.sourceUri;\n  if (typeof data === "string" || data instanceof _Core_Resource_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z) {\n    data = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].createIfNeeded */ .Z.createIfNeeded(data);\n    promise = data.fetchJson();\n    sourceUri = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(sourceUri, data.getUrlComponent());\n\n    // Add resource credits to our list of credits to display\n    var resourceCredits = this._resourceCredits;\n    var credits = data.credits;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(credits)) {\n      var length = credits.length;\n      for (var i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  options = {\n    describe: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.describe, defaultDescribeProperty),\n    markerSize: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.markerSize, defaultMarkerSize),\n    markerSymbol: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.markerSymbol, defaultMarkerSymbol),\n    markerColor: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.markerColor, defaultMarkerColor),\n    strokeWidthProperty: new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z(\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.strokeWidth, defaultStrokeWidth)\n    ),\n    strokeMaterialProperty: new _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.stroke, defaultStroke)\n    ),\n    fillMaterialProperty: new _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z(\n      (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.fill, defaultFill)\n    ),\n    clampToGround: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.clampToGround, defaultClampToGround),\n  };\n\n  var that = this;\n  return (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(promise, function (geoJson) {\n    return load(that, geoJson, options, sourceUri);\n  }).otherwise(function (error) {\n    _DataSource_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].setLoading */ .Z.setLoading(that, false);\n    that._error.raiseEvent(that, error);\n    console.log(error);\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].reject */ .Z.reject(error);\n  });\n};\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nGeoJsonDataSource.prototype.update = function (time) {\n  return true;\n};\n\nfunction load(that, geoJson, options, sourceUri) {\n  var name;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(sourceUri)) {\n    name = (0,_Core_getFilenameFromUri_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(sourceUri);\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(name) && that._name !== name) {\n    that._name = name;\n    that._changed.raiseEvent(that);\n  }\n\n  var typeHandler = geoJsonObjectTypes[geoJson.type];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(typeHandler)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("Unsupported GeoJSON object type: " + geoJson.type);\n  }\n\n  //Check for a Coordinate Reference System.\n  var crs = geoJson.crs;\n  var crsFunction = crs !== null ? defaultCrsFunction : null;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(crs)) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(crs.properties)) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("crs.properties is undefined.");\n    }\n\n    var properties = crs.properties;\n    if (crs.type === "name") {\n      crsFunction = crsNames[properties.name];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(crsFunction)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("Unknown crs name: " + properties.name);\n      }\n    } else if (crs.type === "link") {\n      var handler = crsLinkHrefs[properties.href];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(handler)) {\n        handler = crsLinkTypes[properties.type];\n      }\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(handler)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "Unable to resolve crs link: " + JSON.stringify(properties)\n        );\n      }\n\n      crsFunction = handler(properties);\n    } else if (crs.type === "EPSG") {\n      crsFunction = crsNames["EPSG:" + properties.code];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z)(crsFunction)) {\n        throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("Unknown crs EPSG code: " + properties.code);\n      }\n    } else {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z("Unknown crs type: " + crs.type);\n    }\n  }\n\n  return (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(crsFunction, function (crsFunction) {\n    that._entityCollection.removeAll();\n\n    // null is a valid value for the crs, but means the entire load process becomes a no-op\n    // because we can\'t assume anything about the coordinates.\n    if (crsFunction !== null) {\n      typeHandler(that, geoJson, geoJson, crsFunction, options);\n    }\n\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].all */ .Z.all(that._promises, function () {\n      that._promises.length = 0;\n      _DataSource_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].setLoading */ .Z.setLoading(that, false);\n      return that;\n    });\n  });\n}\n\n/**\n * This callback is displayed as part of the GeoJsonDataSource class.\n * @callback GeoJsonDataSource.describe\n * @param {Object} properties The properties of the feature.\n * @param {String} nameProperty The property key that Cesium estimates to have the name of the feature.\n */\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (GeoJsonDataSource)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE1Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQ007QUFDVjtBQUNVO0FBQ1I7QUFDWTtBQUNWO0FBQ2M7QUFDbEI7QUFDMEI7QUFDaEI7QUFDWTtBQUNoQjtBQUNRO0FBQ087QUFDRjtBQUNQO0FBQ1I7QUFDYztBQUNGO0FBQ1U7QUFDTTtBQUNoQjtBQUNaO0FBQ007QUFDTTtBQUNGO0FBQ0U7O0FBRXJEO0FBQ0EsU0FBUyw0RkFBc0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtRkFBZTtBQUN4QyxvQkFBb0IsNkVBQVk7QUFDaEM7QUFDQSxrQkFBa0IsbUZBQWU7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0VBQU87QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHNFQUFPO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLHNFQUFnQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBTztBQUNkLFNBQVMseUVBQVU7QUFDbkIsSUFBSTtBQUNKO0FBQ0E7QUFDQSxXQUFXLHNFQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0sc0VBQU87QUFDYjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxzRUFBTztBQUNmO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNFQUFPO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCLHNFQUFPO0FBQ25DO0FBQ0EsY0FBYyxzRUFBZ0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sc0VBQU87QUFDZCxjQUFjLHVFQUFZO0FBQzFCOztBQUVBO0FBQ0E7QUFDQSxPQUFPLHNFQUFPO0FBQ2QsY0FBYyx1RUFBWTtBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxTQUFTO0FBQ2xEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsU0FBUyxzRUFBTztBQUNoQixnQkFBZ0IsdUVBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHNFQUFPO0FBQ2I7QUFDQSxRQUFRLHNFQUFPO0FBQ2YsY0FBYyxxR0FBd0I7QUFDdEM7O0FBRUEsV0FBVywwRUFBWTtBQUN2QjtBQUNBLFFBQVEsc0VBQU87QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHNFQUFPO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLHNCQUFzQix1RUFBaUI7QUFDdkMsaUNBQWlDLHNFQUFnQixDQUFDLHdGQUFxQjs7QUFFdkU7QUFDQTtBQUNBLGdDQUFnQywyR0FBK0I7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDhFQUF3Qjs7QUFFaEQsZ0JBQWdCLHlFQUFJO0FBQ3BCO0FBQ0EsNEJBQTRCLHNFQUFnQjtBQUM1QyxLQUFLO0FBQ0w7QUFDQSw0QkFBNEIsc0VBQWdCO0FBQzVDO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHNFQUFPO0FBQ2I7QUFDQSxRQUFRLHNFQUFPO0FBQ2YsMEJBQTBCLHNFQUFnQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxzRUFBTztBQUNmLGNBQWMscUdBQXdCO0FBQ3RDO0FBQ0E7QUFDQSxRQUFRLHNFQUFPO0FBQ2YsV0FBVyxzRUFBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0VBQU87QUFDZixxQkFBcUIsMkVBQXFCO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixzRUFBZ0I7QUFDN0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHNFQUFnQjtBQUNuRDtBQUNBO0FBQ0EsNkJBQTZCLDZFQUFhO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSxzRUFBTztBQUNiO0FBQ0EsUUFBUSxzRUFBTztBQUNmLDBCQUEwQixzRUFBZ0I7QUFDMUM7O0FBRUE7QUFDQTtBQUNBLFFBQVEsc0VBQU87QUFDZixjQUFjLHFHQUF3QjtBQUN0QztBQUNBO0FBQ0EsUUFBUSxzRUFBTztBQUNmLFdBQVcsc0VBQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxzRUFBTztBQUNmLGlDQUFpQyxzRUFBZ0I7QUFDakQ7O0FBRUE7QUFDQTtBQUNBLFFBQVEsc0VBQU87QUFDZixrQkFBa0IscUdBQXdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0VBQU87QUFDZixXQUFXLHNFQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzRUFBTztBQUNmLHFCQUFxQiwyRUFBcUI7QUFDMUM7QUFDQTs7QUFFQSxvQkFBb0IscUVBQWU7QUFDbkMsd0JBQXdCLHNFQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkVBQWE7O0FBRWpDO0FBQ0EsNENBQTRDLFNBQVM7QUFDckQ7QUFDQSxVQUFVLDJFQUFnQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQixzRUFBZ0I7QUFDMUMsUUFBUSwyRUFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxzRUFBZ0I7QUFDcEQsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseUZBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsU0FBUztBQUN2QixjQUFjLGVBQWU7QUFDN0I7O0FBRUE7QUFDQSxNQUFNLGtCQUFrQjtBQUN4QixJQUFJLHVDQUF1QyxLQUFLLHFEQUFxRDtBQUNyRyxJQUFJLG1FQUFtRTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtEQUFLO0FBQzNCLG9CQUFvQiwrREFBSztBQUN6QjtBQUNBLHNCQUFzQiwrREFBSztBQUMzQiwrQkFBK0Isc0VBQWdCO0FBQy9DO0FBQ0EseUJBQXlCLG9FQUFVO0FBQ25DLDRCQUE0QixtRUFBYTtBQUN6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVywrQkFBK0I7QUFDMUM7QUFDQSxhQUFhLDZCQUE2QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSw0QkFBNEIsb0NBQW9DO0FBQ2hFO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDZCQUE2QixjQUFjO0FBQzNDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFdBQVcsc0VBQU87QUFDbEIsa0JBQWtCLHdFQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxlQUFlO0FBQzFCO0FBQ0EsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBTztBQUNkLGNBQWMsd0VBQWM7QUFDNUI7QUFDQTs7QUFFQSxFQUFFLHNGQUFxQjtBQUN2QixZQUFZLDBFQUFZLFVBQVUsZ0dBQXlCOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0VBQU07QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtELGtFQUFRO0FBQzFELFdBQVcsZ0dBQXVCO0FBQ2xDO0FBQ0EsZ0JBQWdCLDBFQUFZOztBQUU1QjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNFQUFPO0FBQ2Y7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsMEVBQVk7QUFDMUIsZ0JBQWdCLDBFQUFZO0FBQzVCLGtCQUFrQiwwRUFBWTtBQUM5QixpQkFBaUIsMEVBQVk7QUFDN0IsNkJBQTZCLHNFQUFnQjtBQUM3QyxNQUFNLDBFQUFZO0FBQ2xCO0FBQ0EsZ0NBQWdDLDJFQUFxQjtBQUNyRCxNQUFNLDBFQUFZO0FBQ2xCO0FBQ0EsOEJBQThCLDJFQUFxQjtBQUNuRCxNQUFNLDBFQUFZO0FBQ2xCO0FBQ0EsbUJBQW1CLDBFQUFZO0FBQy9COztBQUVBO0FBQ0EsU0FBUyx5RUFBSTtBQUNiO0FBQ0EsR0FBRztBQUNILElBQUksc0ZBQXFCO0FBQ3pCO0FBQ0E7QUFDQSxXQUFXLG1GQUFXO0FBQ3RCLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx5QkFBeUI7QUFDdEU7QUFDQSxXQUFXLFlBQVk7QUFDdkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNLHNFQUFPO0FBQ2IsV0FBVyxnRkFBa0I7QUFDN0I7O0FBRUEsTUFBTSxzRUFBTztBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU8sc0VBQU87QUFDZCxjQUFjLHVFQUFZO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLHNFQUFPO0FBQ2IsU0FBUyxzRUFBTztBQUNoQixnQkFBZ0IsdUVBQVk7QUFDNUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzRUFBTztBQUNsQixrQkFBa0IsdUVBQVk7QUFDOUI7QUFDQSxNQUFNO0FBQ047QUFDQSxXQUFXLHNFQUFPO0FBQ2xCO0FBQ0E7O0FBRUEsV0FBVyxzRUFBTztBQUNsQixrQkFBa0IsdUVBQVk7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsV0FBVyxzRUFBTztBQUNsQixrQkFBa0IsdUVBQVk7QUFDOUI7QUFDQSxNQUFNO0FBQ04sZ0JBQWdCLHVFQUFZO0FBQzVCO0FBQ0E7O0FBRUEsU0FBUyx5RUFBSTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyw2RUFBUTtBQUNuQjtBQUNBLE1BQU0sc0ZBQXFCO0FBQzNCO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0Esc0VBQWUsaUVBQWlCLElBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvRGF0YVNvdXJjZXMvR2VvSnNvbkRhdGFTb3VyY2UuanM/MzY5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXJjVHlwZSBmcm9tIFwiLi4vQ29yZS9BcmNUeXBlLmpzXCI7XG5pbXBvcnQgQ2FydGVzaWFuMyBmcm9tIFwiLi4vQ29yZS9DYXJ0ZXNpYW4zLmpzXCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL0NvcmUvQ29sb3IuanNcIjtcbmltcG9ydCBjcmVhdGVHdWlkIGZyb20gXCIuLi9Db3JlL2NyZWF0ZUd1aWQuanNcIjtcbmltcG9ydCBDcmVkaXQgZnJvbSBcIi4uL0NvcmUvQ3JlZGl0LmpzXCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi9Db3JlL2RlZmF1bHRWYWx1ZS5qc1wiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuLi9Db3JlL0RldmVsb3BlckVycm9yLmpzXCI7XG5pbXBvcnQgRXZlbnQgZnJvbSBcIi4uL0NvcmUvRXZlbnQuanNcIjtcbmltcG9ydCBnZXRGaWxlbmFtZUZyb21VcmkgZnJvbSBcIi4uL0NvcmUvZ2V0RmlsZW5hbWVGcm9tVXJpLmpzXCI7XG5pbXBvcnQgUGluQnVpbGRlciBmcm9tIFwiLi4vQ29yZS9QaW5CdWlsZGVyLmpzXCI7XG5pbXBvcnQgUG9seWdvbkhpZXJhcmNoeSBmcm9tIFwiLi4vQ29yZS9Qb2x5Z29uSGllcmFyY2h5LmpzXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4uL0NvcmUvUmVzb3VyY2UuanNcIjtcbmltcG9ydCBSdW50aW1lRXJyb3IgZnJvbSBcIi4uL0NvcmUvUnVudGltZUVycm9yLmpzXCI7XG5pbXBvcnQgSGVpZ2h0UmVmZXJlbmNlIGZyb20gXCIuLi9TY2VuZS9IZWlnaHRSZWZlcmVuY2UuanNcIjtcbmltcG9ydCBWZXJ0aWNhbE9yaWdpbiBmcm9tIFwiLi4vU2NlbmUvVmVydGljYWxPcmlnaW4uanNcIjtcbmltcG9ydCB0b3BvanNvbiBmcm9tIFwiLi4vVGhpcmRQYXJ0eS90b3BvanNvbi5qc1wiO1xuaW1wb3J0IHdoZW4gZnJvbSBcIi4uL1RoaXJkUGFydHkvd2hlbi5qc1wiO1xuaW1wb3J0IEJpbGxib2FyZEdyYXBoaWNzIGZyb20gXCIuL0JpbGxib2FyZEdyYXBoaWNzLmpzXCI7XG5pbXBvcnQgQ2FsbGJhY2tQcm9wZXJ0eSBmcm9tIFwiLi9DYWxsYmFja1Byb3BlcnR5LmpzXCI7XG5pbXBvcnQgQ29sb3JNYXRlcmlhbFByb3BlcnR5IGZyb20gXCIuL0NvbG9yTWF0ZXJpYWxQcm9wZXJ0eS5qc1wiO1xuaW1wb3J0IENvbnN0YW50UG9zaXRpb25Qcm9wZXJ0eSBmcm9tIFwiLi9Db25zdGFudFBvc2l0aW9uUHJvcGVydHkuanNcIjtcbmltcG9ydCBDb25zdGFudFByb3BlcnR5IGZyb20gXCIuL0NvbnN0YW50UHJvcGVydHkuanNcIjtcbmltcG9ydCBEYXRhU291cmNlIGZyb20gXCIuL0RhdGFTb3VyY2UuanNcIjtcbmltcG9ydCBFbnRpdHlDbHVzdGVyIGZyb20gXCIuL0VudGl0eUNsdXN0ZXIuanNcIjtcbmltcG9ydCBFbnRpdHlDb2xsZWN0aW9uIGZyb20gXCIuL0VudGl0eUNvbGxlY3Rpb24uanNcIjtcbmltcG9ydCBQb2x5Z29uR3JhcGhpY3MgZnJvbSBcIi4vUG9seWdvbkdyYXBoaWNzLmpzXCI7XG5pbXBvcnQgUG9seWxpbmVHcmFwaGljcyBmcm9tIFwiLi9Qb2x5bGluZUdyYXBoaWNzLmpzXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRDcnNGdW5jdGlvbihjb29yZGluYXRlcykge1xuICByZXR1cm4gQ2FydGVzaWFuMy5mcm9tRGVncmVlcyhjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIGNvb3JkaW5hdGVzWzJdKTtcbn1cblxudmFyIGNyc05hbWVzID0ge1xuICBcInVybjpvZ2M6ZGVmOmNyczpPR0M6MS4zOkNSUzg0XCI6IGRlZmF1bHRDcnNGdW5jdGlvbixcbiAgXCJFUFNHOjQzMjZcIjogZGVmYXVsdENyc0Z1bmN0aW9uLFxuICBcInVybjpvZ2M6ZGVmOmNyczpFUFNHOjo0MzI2XCI6IGRlZmF1bHRDcnNGdW5jdGlvbixcbn07XG5cbnZhciBjcnNMaW5rSHJlZnMgPSB7fTtcbnZhciBjcnNMaW5rVHlwZXMgPSB7fTtcbnZhciBkZWZhdWx0TWFya2VyU2l6ZSA9IDQ4O1xudmFyIGRlZmF1bHRNYXJrZXJTeW1ib2w7XG52YXIgZGVmYXVsdE1hcmtlckNvbG9yID0gQ29sb3IuUk9ZQUxCTFVFO1xudmFyIGRlZmF1bHRTdHJva2UgPSBDb2xvci5ZRUxMT1c7XG52YXIgZGVmYXVsdFN0cm9rZVdpZHRoID0gMjtcbnZhciBkZWZhdWx0RmlsbCA9IENvbG9yLmZyb21CeXRlcygyNTUsIDI1NSwgMCwgMTAwKTtcbnZhciBkZWZhdWx0Q2xhbXBUb0dyb3VuZCA9IGZhbHNlO1xuXG52YXIgc2l6ZXMgPSB7XG4gIHNtYWxsOiAyNCxcbiAgbWVkaXVtOiA0OCxcbiAgbGFyZ2U6IDY0LFxufTtcblxudmFyIHNpbXBsZVN0eWxlSWRlbnRpZmllcnMgPSBbXG4gIFwidGl0bGVcIixcbiAgXCJkZXNjcmlwdGlvblwiLCAvL1xuICBcIm1hcmtlci1zaXplXCIsXG4gIFwibWFya2VyLXN5bWJvbFwiLFxuICBcIm1hcmtlci1jb2xvclwiLFxuICBcInN0cm9rZVwiLCAvL1xuICBcInN0cm9rZS1vcGFjaXR5XCIsXG4gIFwic3Ryb2tlLXdpZHRoXCIsXG4gIFwiZmlsbFwiLFxuICBcImZpbGwtb3BhY2l0eVwiLFxuXTtcblxuZnVuY3Rpb24gZGVmYXVsdERlc2NyaWJlKHByb3BlcnRpZXMsIG5hbWVQcm9wZXJ0eSkge1xuICB2YXIgaHRtbCA9IFwiXCI7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKGtleSA9PT0gbmFtZVByb3BlcnR5IHx8IHNpbXBsZVN0eWxlSWRlbnRpZmllcnMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgaHRtbCArPVxuICAgICAgICAgICAgXCI8dHI+PHRoPlwiICtcbiAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICBcIjwvdGg+PHRkPlwiICtcbiAgICAgICAgICAgIGRlZmF1bHREZXNjcmliZSh2YWx1ZSkgK1xuICAgICAgICAgICAgXCI8L3RkPjwvdHI+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaHRtbCArPSBcIjx0cj48dGg+XCIgKyBrZXkgKyBcIjwvdGg+PHRkPlwiICsgdmFsdWUgKyBcIjwvdGQ+PC90cj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChodG1sLmxlbmd0aCA+IDApIHtcbiAgICBodG1sID1cbiAgICAgICc8dGFibGUgY2xhc3M9XCJjZXNpdW0taW5mb0JveC1kZWZhdWx0VGFibGVcIj48dGJvZHk+JyArXG4gICAgICBodG1sICtcbiAgICAgIFwiPC90Ym9keT48L3RhYmxlPlwiO1xuICB9XG5cbiAgcmV0dXJuIGh0bWw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0aW9uQ2FsbGJhY2soZGVzY3JpYmUsIHByb3BlcnRpZXMsIG5hbWVQcm9wZXJ0eSkge1xuICB2YXIgZGVzY3JpcHRpb247XG4gIHJldHVybiBmdW5jdGlvbiAodGltZSwgcmVzdWx0KSB7XG4gICAgaWYgKCFkZWZpbmVkKGRlc2NyaXB0aW9uKSkge1xuICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmliZShwcm9wZXJ0aWVzLCBuYW1lUHJvcGVydHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHREZXNjcmliZVByb3BlcnR5KHByb3BlcnRpZXMsIG5hbWVQcm9wZXJ0eSkge1xuICByZXR1cm4gbmV3IENhbGxiYWNrUHJvcGVydHkoXG4gICAgY3JlYXRlRGVzY3JpcHRpb25DYWxsYmFjayhkZWZhdWx0RGVzY3JpYmUsIHByb3BlcnRpZXMsIG5hbWVQcm9wZXJ0eSksXG4gICAgdHJ1ZVxuICApO1xufVxuXG4vL0dlb0pTT04gc3BlY2lmaWVzIG9ubHkgdGhlIEZlYXR1cmUgb2JqZWN0IGhhcyBhIHVzYWJsZSBpZCBwcm9wZXJ0eVxuLy9CdXQgc2luY2UgXCJtdWx0aVwiIGdlb21ldHJpZXMgY3JlYXRlIG11bHRpcGxlIGVudGl0eSxcbi8vd2UgY2FuJ3QgdXNlIGl0IGZvciB0aGVtIGVpdGhlci5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdChnZW9Kc29uLCBlbnRpdHlDb2xsZWN0aW9uLCBkZXNjcmliZSkge1xuICB2YXIgaWQgPSBnZW9Kc29uLmlkO1xuICBpZiAoIWRlZmluZWQoaWQpIHx8IGdlb0pzb24udHlwZSAhPT0gXCJGZWF0dXJlXCIpIHtcbiAgICBpZCA9IGNyZWF0ZUd1aWQoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaSA9IDI7XG4gICAgdmFyIGZpbmFsSWQgPSBpZDtcbiAgICB3aGlsZSAoZGVmaW5lZChlbnRpdHlDb2xsZWN0aW9uLmdldEJ5SWQoZmluYWxJZCkpKSB7XG4gICAgICBmaW5hbElkID0gaWQgKyBcIl9cIiArIGk7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGlkID0gZmluYWxJZDtcbiAgfVxuXG4gIHZhciBlbnRpdHkgPSBlbnRpdHlDb2xsZWN0aW9uLmdldE9yQ3JlYXRlRW50aXR5KGlkKTtcbiAgdmFyIHByb3BlcnRpZXMgPSBnZW9Kc29uLnByb3BlcnRpZXM7XG4gIGlmIChkZWZpbmVkKHByb3BlcnRpZXMpKSB7XG4gICAgZW50aXR5LnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuXG4gICAgdmFyIG5hbWVQcm9wZXJ0eTtcblxuICAgIC8vQ2hlY2sgZm9yIHRoZSBzaW1wbGVzdHlsZSBzcGVjaWZpZWQgbmFtZSBmaXJzdC5cbiAgICB2YXIgbmFtZSA9IHByb3BlcnRpZXMudGl0bGU7XG4gICAgaWYgKGRlZmluZWQobmFtZSkpIHtcbiAgICAgIGVudGl0eS5uYW1lID0gbmFtZTtcbiAgICAgIG5hbWVQcm9wZXJ0eSA9IFwidGl0bGVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9FbHNlLCBmaW5kIHRoZSBuYW1lIGJ5IHNlbGVjdGluZyBhbiBhcHByb3ByaWF0ZSBwcm9wZXJ0eS5cbiAgICAgIC8vVGhlIG5hbWUgd2lsbCBiZSBvYnRhaW5lZCBiYXNlZCBvbiB0aGlzIG9yZGVyOlxuICAgICAgLy8xKSBUaGUgZmlyc3QgY2FzZS1pbnNlbnNpdGl2ZSBwcm9wZXJ0eSB3aXRoIHRoZSBuYW1lICd0aXRsZScsXG4gICAgICAvLzIpIFRoZSBmaXJzdCBjYXNlLWluc2Vuc2l0aXZlIHByb3BlcnR5IHdpdGggdGhlIG5hbWUgJ25hbWUnLFxuICAgICAgLy8zKSBUaGUgZmlyc3QgcHJvcGVydHkgY29udGFpbmluZyB0aGUgd29yZCAndGl0bGUnLlxuICAgICAgLy80KSBUaGUgZmlyc3QgcHJvcGVydHkgY29udGFpbmluZyB0aGUgd29yZCAnbmFtZScsXG4gICAgICB2YXIgbmFtZVByb3BlcnR5UHJlY2VkZW5jZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByb3BlcnRpZXNba2V5XSkge1xuICAgICAgICAgIHZhciBsb3dlcktleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgaWYgKG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPiAxICYmIGxvd2VyS2V5ID09PSBcInRpdGxlXCIpIHtcbiAgICAgICAgICAgIG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPSAxO1xuICAgICAgICAgICAgbmFtZVByb3BlcnR5ID0ga2V5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChuYW1lUHJvcGVydHlQcmVjZWRlbmNlID4gMiAmJiBsb3dlcktleSA9PT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICAgIG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPSAyO1xuICAgICAgICAgICAgbmFtZVByb3BlcnR5ID0ga2V5O1xuICAgICAgICAgIH0gZWxzZSBpZiAobmFtZVByb3BlcnR5UHJlY2VkZW5jZSA+IDMgJiYgL3RpdGxlL2kudGVzdChrZXkpKSB7XG4gICAgICAgICAgICBuYW1lUHJvcGVydHlQcmVjZWRlbmNlID0gMztcbiAgICAgICAgICAgIG5hbWVQcm9wZXJ0eSA9IGtleTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVQcm9wZXJ0eVByZWNlZGVuY2UgPiA0ICYmIC9uYW1lL2kudGVzdChrZXkpKSB7XG4gICAgICAgICAgICBuYW1lUHJvcGVydHlQcmVjZWRlbmNlID0gNDtcbiAgICAgICAgICAgIG5hbWVQcm9wZXJ0eSA9IGtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkKG5hbWVQcm9wZXJ0eSkpIHtcbiAgICAgICAgZW50aXR5Lm5hbWUgPSBwcm9wZXJ0aWVzW25hbWVQcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlc2NyaXB0aW9uID0gcHJvcGVydGllcy5kZXNjcmlwdGlvbjtcbiAgICBpZiAoZGVzY3JpcHRpb24gIT09IG51bGwpIHtcbiAgICAgIGVudGl0eS5kZXNjcmlwdGlvbiA9ICFkZWZpbmVkKGRlc2NyaXB0aW9uKVxuICAgICAgICA/IGRlc2NyaWJlKHByb3BlcnRpZXMsIG5hbWVQcm9wZXJ0eSlcbiAgICAgICAgOiBuZXcgQ29uc3RhbnRQcm9wZXJ0eShkZXNjcmlwdGlvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbnRpdHk7XG59XG5cbmZ1bmN0aW9uIGNvb3JkaW5hdGVzQXJyYXlUb0NhcnRlc2lhbkFycmF5KGNvb3JkaW5hdGVzLCBjcnNGdW5jdGlvbikge1xuICB2YXIgcG9zaXRpb25zID0gbmV3IEFycmF5KGNvb3JkaW5hdGVzLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBwb3NpdGlvbnNbaV0gPSBjcnNGdW5jdGlvbihjb29yZGluYXRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIHBvc2l0aW9ucztcbn1cblxudmFyIGdlb0pzb25PYmplY3RUeXBlcyA9IHtcbiAgRmVhdHVyZTogcHJvY2Vzc0ZlYXR1cmUsXG4gIEZlYXR1cmVDb2xsZWN0aW9uOiBwcm9jZXNzRmVhdHVyZUNvbGxlY3Rpb24sXG4gIEdlb21ldHJ5Q29sbGVjdGlvbjogcHJvY2Vzc0dlb21ldHJ5Q29sbGVjdGlvbixcbiAgTGluZVN0cmluZzogcHJvY2Vzc0xpbmVTdHJpbmcsXG4gIE11bHRpTGluZVN0cmluZzogcHJvY2Vzc011bHRpTGluZVN0cmluZyxcbiAgTXVsdGlQb2ludDogcHJvY2Vzc011bHRpUG9pbnQsXG4gIE11bHRpUG9seWdvbjogcHJvY2Vzc011bHRpUG9seWdvbixcbiAgUG9pbnQ6IHByb2Nlc3NQb2ludCxcbiAgUG9seWdvbjogcHJvY2Vzc1BvbHlnb24sXG4gIFRvcG9sb2d5OiBwcm9jZXNzVG9wb2xvZ3ksXG59O1xuXG52YXIgZ2VvbWV0cnlUeXBlcyA9IHtcbiAgR2VvbWV0cnlDb2xsZWN0aW9uOiBwcm9jZXNzR2VvbWV0cnlDb2xsZWN0aW9uLFxuICBMaW5lU3RyaW5nOiBwcm9jZXNzTGluZVN0cmluZyxcbiAgTXVsdGlMaW5lU3RyaW5nOiBwcm9jZXNzTXVsdGlMaW5lU3RyaW5nLFxuICBNdWx0aVBvaW50OiBwcm9jZXNzTXVsdGlQb2ludCxcbiAgTXVsdGlQb2x5Z29uOiBwcm9jZXNzTXVsdGlQb2x5Z29uLFxuICBQb2ludDogcHJvY2Vzc1BvaW50LFxuICBQb2x5Z29uOiBwcm9jZXNzUG9seWdvbixcbiAgVG9wb2xvZ3k6IHByb2Nlc3NUb3BvbG9neSxcbn07XG5cbi8vIEdlb0pTT04gcHJvY2Vzc2luZyBmdW5jdGlvbnNcbmZ1bmN0aW9uIHByb2Nlc3NGZWF0dXJlKGRhdGFTb3VyY2UsIGZlYXR1cmUsIG5vdFVzZWQsIGNyc0Z1bmN0aW9uLCBvcHRpb25zKSB7XG4gIGlmIChmZWF0dXJlLmdlb21ldHJ5ID09PSBudWxsKSB7XG4gICAgLy9OdWxsIGdlb21ldHJ5IGlzIGFsbG93ZWQsIHNvIGp1c3QgY3JlYXRlIGFuIGVtcHR5IGVudGl0eSBpbnN0YW5jZSBmb3IgaXQuXG4gICAgY3JlYXRlT2JqZWN0KGZlYXR1cmUsIGRhdGFTb3VyY2UuX2VudGl0eUNvbGxlY3Rpb24sIG9wdGlvbnMuZGVzY3JpYmUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghZGVmaW5lZChmZWF0dXJlLmdlb21ldHJ5KSkge1xuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXCJmZWF0dXJlLmdlb21ldHJ5IGlzIHJlcXVpcmVkLlwiKTtcbiAgfVxuXG4gIHZhciBnZW9tZXRyeVR5cGUgPSBmZWF0dXJlLmdlb21ldHJ5LnR5cGU7XG4gIHZhciBnZW9tZXRyeUhhbmRsZXIgPSBnZW9tZXRyeVR5cGVzW2dlb21ldHJ5VHlwZV07XG4gIGlmICghZGVmaW5lZChnZW9tZXRyeUhhbmRsZXIpKSB7XG4gICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcihcIlVua25vd24gZ2VvbWV0cnkgdHlwZTogXCIgKyBnZW9tZXRyeVR5cGUpO1xuICB9XG4gIGdlb21ldHJ5SGFuZGxlcihkYXRhU291cmNlLCBmZWF0dXJlLCBmZWF0dXJlLmdlb21ldHJ5LCBjcnNGdW5jdGlvbiwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGZWF0dXJlQ29sbGVjdGlvbihcbiAgZGF0YVNvdXJjZSxcbiAgZmVhdHVyZUNvbGxlY3Rpb24sXG4gIG5vdFVzZWQsXG4gIGNyc0Z1bmN0aW9uLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGZlYXR1cmVzID0gZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXM7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmZWF0dXJlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHByb2Nlc3NGZWF0dXJlKGRhdGFTb3VyY2UsIGZlYXR1cmVzW2ldLCB1bmRlZmluZWQsIGNyc0Z1bmN0aW9uLCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzR2VvbWV0cnlDb2xsZWN0aW9uKFxuICBkYXRhU291cmNlLFxuICBnZW9Kc29uLFxuICBnZW9tZXRyeUNvbGxlY3Rpb24sXG4gIGNyc0Z1bmN0aW9uLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGdlb21ldHJpZXMgPSBnZW9tZXRyeUNvbGxlY3Rpb24uZ2VvbWV0cmllcztcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGdlb21ldHJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzW2ldO1xuICAgIHZhciBnZW9tZXRyeVR5cGUgPSBnZW9tZXRyeS50eXBlO1xuICAgIHZhciBnZW9tZXRyeUhhbmRsZXIgPSBnZW9tZXRyeVR5cGVzW2dlb21ldHJ5VHlwZV07XG4gICAgaWYgKCFkZWZpbmVkKGdlb21ldHJ5SGFuZGxlcikpIHtcbiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXCJVbmtub3duIGdlb21ldHJ5IHR5cGU6IFwiICsgZ2VvbWV0cnlUeXBlKTtcbiAgICB9XG4gICAgZ2VvbWV0cnlIYW5kbGVyKGRhdGFTb3VyY2UsIGdlb0pzb24sIGdlb21ldHJ5LCBjcnNGdW5jdGlvbiwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9pbnQoZGF0YVNvdXJjZSwgZ2VvSnNvbiwgY3JzRnVuY3Rpb24sIGNvb3JkaW5hdGVzLCBvcHRpb25zKSB7XG4gIHZhciBzeW1ib2wgPSBvcHRpb25zLm1hcmtlclN5bWJvbDtcbiAgdmFyIGNvbG9yID0gb3B0aW9ucy5tYXJrZXJDb2xvcjtcbiAgdmFyIHNpemUgPSBvcHRpb25zLm1hcmtlclNpemU7XG5cbiAgdmFyIHByb3BlcnRpZXMgPSBnZW9Kc29uLnByb3BlcnRpZXM7XG4gIGlmIChkZWZpbmVkKHByb3BlcnRpZXMpKSB7XG4gICAgdmFyIGNzc0NvbG9yID0gcHJvcGVydGllc1tcIm1hcmtlci1jb2xvclwiXTtcbiAgICBpZiAoZGVmaW5lZChjc3NDb2xvcikpIHtcbiAgICAgIGNvbG9yID0gQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKGNzc0NvbG9yKTtcbiAgICB9XG5cbiAgICBzaXplID0gZGVmYXVsdFZhbHVlKHNpemVzW3Byb3BlcnRpZXNbXCJtYXJrZXItc2l6ZVwiXV0sIHNpemUpO1xuICAgIHZhciBtYXJrZXJTeW1ib2wgPSBwcm9wZXJ0aWVzW1wibWFya2VyLXN5bWJvbFwiXTtcbiAgICBpZiAoZGVmaW5lZChtYXJrZXJTeW1ib2wpKSB7XG4gICAgICBzeW1ib2wgPSBtYXJrZXJTeW1ib2w7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNhbnZhc09yUHJvbWlzZTtcbiAgaWYgKGRlZmluZWQoc3ltYm9sKSkge1xuICAgIGlmIChzeW1ib2wubGVuZ3RoID09PSAxKSB7XG4gICAgICBjYW52YXNPclByb21pc2UgPSBkYXRhU291cmNlLl9waW5CdWlsZGVyLmZyb21UZXh0KFxuICAgICAgICBzeW1ib2wudG9VcHBlckNhc2UoKSxcbiAgICAgICAgY29sb3IsXG4gICAgICAgIHNpemVcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbnZhc09yUHJvbWlzZSA9IGRhdGFTb3VyY2UuX3BpbkJ1aWxkZXIuZnJvbU1ha2lJY29uSWQoXG4gICAgICAgIHN5bWJvbCxcbiAgICAgICAgY29sb3IsXG4gICAgICAgIHNpemVcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNhbnZhc09yUHJvbWlzZSA9IGRhdGFTb3VyY2UuX3BpbkJ1aWxkZXIuZnJvbUNvbG9yKGNvbG9yLCBzaXplKTtcbiAgfVxuXG4gIHZhciBiaWxsYm9hcmQgPSBuZXcgQmlsbGJvYXJkR3JhcGhpY3MoKTtcbiAgYmlsbGJvYXJkLnZlcnRpY2FsT3JpZ2luID0gbmV3IENvbnN0YW50UHJvcGVydHkoVmVydGljYWxPcmlnaW4uQk9UVE9NKTtcblxuICAvLyBDbGFtcCB0byBncm91bmQgaWYgdGhlcmUgaXNuJ3QgYSBoZWlnaHQgc3BlY2lmaWVkXG4gIGlmIChjb29yZGluYXRlcy5sZW5ndGggPT09IDIgJiYgb3B0aW9ucy5jbGFtcFRvR3JvdW5kKSB7XG4gICAgYmlsbGJvYXJkLmhlaWdodFJlZmVyZW5jZSA9IEhlaWdodFJlZmVyZW5jZS5DTEFNUF9UT19HUk9VTkQ7XG4gIH1cblxuICB2YXIgZW50aXR5ID0gY3JlYXRlT2JqZWN0KFxuICAgIGdlb0pzb24sXG4gICAgZGF0YVNvdXJjZS5fZW50aXR5Q29sbGVjdGlvbixcbiAgICBvcHRpb25zLmRlc2NyaWJlXG4gICk7XG4gIGVudGl0eS5iaWxsYm9hcmQgPSBiaWxsYm9hcmQ7XG4gIGVudGl0eS5wb3NpdGlvbiA9IG5ldyBDb25zdGFudFBvc2l0aW9uUHJvcGVydHkoY3JzRnVuY3Rpb24oY29vcmRpbmF0ZXMpKTtcblxuICB2YXIgcHJvbWlzZSA9IHdoZW4oY2FudmFzT3JQcm9taXNlKVxuICAgIC50aGVuKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgYmlsbGJvYXJkLmltYWdlID0gbmV3IENvbnN0YW50UHJvcGVydHkoaW1hZ2UpO1xuICAgIH0pXG4gICAgLm90aGVyd2lzZShmdW5jdGlvbiAoKSB7XG4gICAgICBiaWxsYm9hcmQuaW1hZ2UgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShcbiAgICAgICAgZGF0YVNvdXJjZS5fcGluQnVpbGRlci5mcm9tQ29sb3IoY29sb3IsIHNpemUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIGRhdGFTb3VyY2UuX3Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQb2ludChkYXRhU291cmNlLCBnZW9Kc29uLCBnZW9tZXRyeSwgY3JzRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgY3JlYXRlUG9pbnQoZGF0YVNvdXJjZSwgZ2VvSnNvbiwgY3JzRnVuY3Rpb24sIGdlb21ldHJ5LmNvb3JkaW5hdGVzLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc011bHRpUG9pbnQoXG4gIGRhdGFTb3VyY2UsXG4gIGdlb0pzb24sXG4gIGdlb21ldHJ5LFxuICBjcnNGdW5jdGlvbixcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlUG9pbnQoZGF0YVNvdXJjZSwgZ2VvSnNvbiwgY3JzRnVuY3Rpb24sIGNvb3JkaW5hdGVzW2ldLCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5lU3RyaW5nKFxuICBkYXRhU291cmNlLFxuICBnZW9Kc29uLFxuICBjcnNGdW5jdGlvbixcbiAgY29vcmRpbmF0ZXMsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgbWF0ZXJpYWwgPSBvcHRpb25zLnN0cm9rZU1hdGVyaWFsUHJvcGVydHk7XG4gIHZhciB3aWR0aFByb3BlcnR5ID0gb3B0aW9ucy5zdHJva2VXaWR0aFByb3BlcnR5O1xuXG4gIHZhciBwcm9wZXJ0aWVzID0gZ2VvSnNvbi5wcm9wZXJ0aWVzO1xuICBpZiAoZGVmaW5lZChwcm9wZXJ0aWVzKSkge1xuICAgIHZhciB3aWR0aCA9IHByb3BlcnRpZXNbXCJzdHJva2Utd2lkdGhcIl07XG4gICAgaWYgKGRlZmluZWQod2lkdGgpKSB7XG4gICAgICB3aWR0aFByb3BlcnR5ID0gbmV3IENvbnN0YW50UHJvcGVydHkod2lkdGgpO1xuICAgIH1cblxuICAgIHZhciBjb2xvcjtcbiAgICB2YXIgc3Ryb2tlID0gcHJvcGVydGllcy5zdHJva2U7XG4gICAgaWYgKGRlZmluZWQoc3Ryb2tlKSkge1xuICAgICAgY29sb3IgPSBDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoc3Ryb2tlKTtcbiAgICB9XG4gICAgdmFyIG9wYWNpdHkgPSBwcm9wZXJ0aWVzW1wic3Ryb2tlLW9wYWNpdHlcIl07XG4gICAgaWYgKGRlZmluZWQob3BhY2l0eSkgJiYgb3BhY2l0eSAhPT0gMS4wKSB7XG4gICAgICBpZiAoIWRlZmluZWQoY29sb3IpKSB7XG4gICAgICAgIGNvbG9yID0gbWF0ZXJpYWwuY29sb3IuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIGNvbG9yLmFscGhhID0gb3BhY2l0eTtcbiAgICB9XG4gICAgaWYgKGRlZmluZWQoY29sb3IpKSB7XG4gICAgICBtYXRlcmlhbCA9IG5ldyBDb2xvck1hdGVyaWFsUHJvcGVydHkoY29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBlbnRpdHkgPSBjcmVhdGVPYmplY3QoXG4gICAgZ2VvSnNvbixcbiAgICBkYXRhU291cmNlLl9lbnRpdHlDb2xsZWN0aW9uLFxuICAgIG9wdGlvbnMuZGVzY3JpYmVcbiAgKTtcbiAgdmFyIHBvbHlsaW5lR3JhcGhpY3MgPSBuZXcgUG9seWxpbmVHcmFwaGljcygpO1xuICBlbnRpdHkucG9seWxpbmUgPSBwb2x5bGluZUdyYXBoaWNzO1xuXG4gIHBvbHlsaW5lR3JhcGhpY3MuY2xhbXBUb0dyb3VuZCA9IG9wdGlvbnMuY2xhbXBUb0dyb3VuZDtcbiAgcG9seWxpbmVHcmFwaGljcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICBwb2x5bGluZUdyYXBoaWNzLndpZHRoID0gd2lkdGhQcm9wZXJ0eTtcbiAgcG9seWxpbmVHcmFwaGljcy5wb3NpdGlvbnMgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShcbiAgICBjb29yZGluYXRlc0FycmF5VG9DYXJ0ZXNpYW5BcnJheShjb29yZGluYXRlcywgY3JzRnVuY3Rpb24pXG4gICk7XG4gIHBvbHlsaW5lR3JhcGhpY3MuYXJjVHlwZSA9IEFyY1R5cGUuUkhVTUI7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NMaW5lU3RyaW5nKFxuICBkYXRhU291cmNlLFxuICBnZW9Kc29uLFxuICBnZW9tZXRyeSxcbiAgY3JzRnVuY3Rpb24sXG4gIG9wdGlvbnNcbikge1xuICBjcmVhdGVMaW5lU3RyaW5nKFxuICAgIGRhdGFTb3VyY2UsXG4gICAgZ2VvSnNvbixcbiAgICBjcnNGdW5jdGlvbixcbiAgICBnZW9tZXRyeS5jb29yZGluYXRlcyxcbiAgICBvcHRpb25zXG4gICk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NNdWx0aUxpbmVTdHJpbmcoXG4gIGRhdGFTb3VyY2UsXG4gIGdlb0pzb24sXG4gIGdlb21ldHJ5LFxuICBjcnNGdW5jdGlvbixcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBsaW5lU3RyaW5ncyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVTdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlTGluZVN0cmluZyhkYXRhU291cmNlLCBnZW9Kc29uLCBjcnNGdW5jdGlvbiwgbGluZVN0cmluZ3NbaV0sIG9wdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvbHlnb24oZGF0YVNvdXJjZSwgZ2VvSnNvbiwgY3JzRnVuY3Rpb24sIGNvb3JkaW5hdGVzLCBvcHRpb25zKSB7XG4gIGlmIChjb29yZGluYXRlcy5sZW5ndGggPT09IDAgfHwgY29vcmRpbmF0ZXNbMF0ubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG91dGxpbmVDb2xvclByb3BlcnR5ID0gb3B0aW9ucy5zdHJva2VNYXRlcmlhbFByb3BlcnR5LmNvbG9yO1xuICB2YXIgbWF0ZXJpYWwgPSBvcHRpb25zLmZpbGxNYXRlcmlhbFByb3BlcnR5O1xuICB2YXIgd2lkdGhQcm9wZXJ0eSA9IG9wdGlvbnMuc3Ryb2tlV2lkdGhQcm9wZXJ0eTtcblxuICB2YXIgcHJvcGVydGllcyA9IGdlb0pzb24ucHJvcGVydGllcztcbiAgaWYgKGRlZmluZWQocHJvcGVydGllcykpIHtcbiAgICB2YXIgd2lkdGggPSBwcm9wZXJ0aWVzW1wic3Ryb2tlLXdpZHRoXCJdO1xuICAgIGlmIChkZWZpbmVkKHdpZHRoKSkge1xuICAgICAgd2lkdGhQcm9wZXJ0eSA9IG5ldyBDb25zdGFudFByb3BlcnR5KHdpZHRoKTtcbiAgICB9XG5cbiAgICB2YXIgY29sb3I7XG4gICAgdmFyIHN0cm9rZSA9IHByb3BlcnRpZXMuc3Ryb2tlO1xuICAgIGlmIChkZWZpbmVkKHN0cm9rZSkpIHtcbiAgICAgIGNvbG9yID0gQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKHN0cm9rZSk7XG4gICAgfVxuICAgIHZhciBvcGFjaXR5ID0gcHJvcGVydGllc1tcInN0cm9rZS1vcGFjaXR5XCJdO1xuICAgIGlmIChkZWZpbmVkKG9wYWNpdHkpICYmIG9wYWNpdHkgIT09IDEuMCkge1xuICAgICAgaWYgKCFkZWZpbmVkKGNvbG9yKSkge1xuICAgICAgICBjb2xvciA9IG9wdGlvbnMuc3Ryb2tlTWF0ZXJpYWxQcm9wZXJ0eS5jb2xvci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgY29sb3IuYWxwaGEgPSBvcGFjaXR5O1xuICAgIH1cblxuICAgIGlmIChkZWZpbmVkKGNvbG9yKSkge1xuICAgICAgb3V0bGluZUNvbG9yUHJvcGVydHkgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShjb2xvcik7XG4gICAgfVxuXG4gICAgdmFyIGZpbGxDb2xvcjtcbiAgICB2YXIgZmlsbCA9IHByb3BlcnRpZXMuZmlsbDtcbiAgICBpZiAoZGVmaW5lZChmaWxsKSkge1xuICAgICAgZmlsbENvbG9yID0gQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKGZpbGwpO1xuICAgICAgZmlsbENvbG9yLmFscGhhID0gbWF0ZXJpYWwuY29sb3IuYWxwaGE7XG4gICAgfVxuICAgIG9wYWNpdHkgPSBwcm9wZXJ0aWVzW1wiZmlsbC1vcGFjaXR5XCJdO1xuICAgIGlmIChkZWZpbmVkKG9wYWNpdHkpICYmIG9wYWNpdHkgIT09IG1hdGVyaWFsLmNvbG9yLmFscGhhKSB7XG4gICAgICBpZiAoIWRlZmluZWQoZmlsbENvbG9yKSkge1xuICAgICAgICBmaWxsQ29sb3IgPSBtYXRlcmlhbC5jb2xvci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgZmlsbENvbG9yLmFscGhhID0gb3BhY2l0eTtcbiAgICB9XG4gICAgaWYgKGRlZmluZWQoZmlsbENvbG9yKSkge1xuICAgICAgbWF0ZXJpYWwgPSBuZXcgQ29sb3JNYXRlcmlhbFByb3BlcnR5KGZpbGxDb2xvcik7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBvbHlnb24gPSBuZXcgUG9seWdvbkdyYXBoaWNzKCk7XG4gIHBvbHlnb24ub3V0bGluZSA9IG5ldyBDb25zdGFudFByb3BlcnR5KHRydWUpO1xuICBwb2x5Z29uLm91dGxpbmVDb2xvciA9IG91dGxpbmVDb2xvclByb3BlcnR5O1xuICBwb2x5Z29uLm91dGxpbmVXaWR0aCA9IHdpZHRoUHJvcGVydHk7XG4gIHBvbHlnb24ubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgcG9seWdvbi5hcmNUeXBlID0gQXJjVHlwZS5SSFVNQjtcblxuICB2YXIgaG9sZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaG9sZXMucHVzaChcbiAgICAgIG5ldyBQb2x5Z29uSGllcmFyY2h5KFxuICAgICAgICBjb29yZGluYXRlc0FycmF5VG9DYXJ0ZXNpYW5BcnJheShjb29yZGluYXRlc1tpXSwgY3JzRnVuY3Rpb24pXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHZhciBwb3NpdGlvbnMgPSBjb29yZGluYXRlc1swXTtcbiAgcG9seWdvbi5oaWVyYXJjaHkgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShcbiAgICBuZXcgUG9seWdvbkhpZXJhcmNoeShcbiAgICAgIGNvb3JkaW5hdGVzQXJyYXlUb0NhcnRlc2lhbkFycmF5KHBvc2l0aW9ucywgY3JzRnVuY3Rpb24pLFxuICAgICAgaG9sZXNcbiAgICApXG4gICk7XG4gIGlmIChwb3NpdGlvbnNbMF0ubGVuZ3RoID4gMikge1xuICAgIHBvbHlnb24ucGVyUG9zaXRpb25IZWlnaHQgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eSh0cnVlKTtcbiAgfSBlbHNlIGlmICghb3B0aW9ucy5jbGFtcFRvR3JvdW5kKSB7XG4gICAgcG9seWdvbi5oZWlnaHQgPSAwO1xuICB9XG5cbiAgdmFyIGVudGl0eSA9IGNyZWF0ZU9iamVjdChcbiAgICBnZW9Kc29uLFxuICAgIGRhdGFTb3VyY2UuX2VudGl0eUNvbGxlY3Rpb24sXG4gICAgb3B0aW9ucy5kZXNjcmliZVxuICApO1xuICBlbnRpdHkucG9seWdvbiA9IHBvbHlnb247XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQb2x5Z29uKGRhdGFTb3VyY2UsIGdlb0pzb24sIGdlb21ldHJ5LCBjcnNGdW5jdGlvbiwgb3B0aW9ucykge1xuICBjcmVhdGVQb2x5Z29uKFxuICAgIGRhdGFTb3VyY2UsXG4gICAgZ2VvSnNvbixcbiAgICBjcnNGdW5jdGlvbixcbiAgICBnZW9tZXRyeS5jb29yZGluYXRlcyxcbiAgICBvcHRpb25zXG4gICk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NNdWx0aVBvbHlnb24oXG4gIGRhdGFTb3VyY2UsXG4gIGdlb0pzb24sXG4gIGdlb21ldHJ5LFxuICBjcnNGdW5jdGlvbixcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBwb2x5Z29ucyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlUG9seWdvbihkYXRhU291cmNlLCBnZW9Kc29uLCBjcnNGdW5jdGlvbiwgcG9seWdvbnNbaV0sIG9wdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NUb3BvbG9neShkYXRhU291cmNlLCBnZW9Kc29uLCBnZW9tZXRyeSwgY3JzRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gZ2VvbWV0cnkub2JqZWN0cykge1xuICAgIGlmIChnZW9tZXRyeS5vYmplY3RzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgdmFyIGZlYXR1cmUgPSB0b3BvanNvbi5mZWF0dXJlKGdlb21ldHJ5LCBnZW9tZXRyeS5vYmplY3RzW3Byb3BlcnR5XSk7XG4gICAgICB2YXIgdHlwZUhhbmRsZXIgPSBnZW9Kc29uT2JqZWN0VHlwZXNbZmVhdHVyZS50eXBlXTtcbiAgICAgIHR5cGVIYW5kbGVyKGRhdGFTb3VyY2UsIGZlYXR1cmUsIGZlYXR1cmUsIGNyc0Z1bmN0aW9uLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBHZW9Kc29uRGF0YVNvdXJjZS5Mb2FkT3B0aW9uc1xuICpcbiAqIEluaXRpYWxpemF0aW9uIG9wdGlvbnMgZm9yIHRoZSBgbG9hZGAgbWV0aG9kLlxuICpcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbc291cmNlVXJpXSBPdmVycmlkZXMgdGhlIHVybCB0byB1c2UgZm9yIHJlc29sdmluZyByZWxhdGl2ZSBsaW5rcy5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWFya2VyU2l6ZT1HZW9Kc29uRGF0YVNvdXJjZS5tYXJrZXJTaXplXSBUaGUgZGVmYXVsdCBzaXplIG9mIHRoZSBtYXAgcGluIGNyZWF0ZWQgZm9yIGVhY2ggcG9pbnQsIGluIHBpeGVscy5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbbWFya2VyU3ltYm9sPUdlb0pzb25EYXRhU291cmNlLm1hcmtlclN5bWJvbF0gVGhlIGRlZmF1bHQgc3ltYm9sIG9mIHRoZSBtYXAgcGluIGNyZWF0ZWQgZm9yIGVhY2ggcG9pbnQuXG4gKiBAcHJvcGVydHkge0NvbG9yfSBbbWFya2VyQ29sb3I9R2VvSnNvbkRhdGFTb3VyY2UubWFya2VyQ29sb3JdIFRoZSBkZWZhdWx0IGNvbG9yIG9mIHRoZSBtYXAgcGluIGNyZWF0ZWQgZm9yIGVhY2ggcG9pbnQuXG4gKiBAcHJvcGVydHkge0NvbG9yfSBbc3Ryb2tlPUdlb0pzb25EYXRhU291cmNlLnN0cm9rZV0gVGhlIGRlZmF1bHQgY29sb3Igb2YgcG9seWxpbmVzIGFuZCBwb2x5Z29uIG91dGxpbmVzLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzdHJva2VXaWR0aD1HZW9Kc29uRGF0YVNvdXJjZS5zdHJva2VXaWR0aF0gVGhlIGRlZmF1bHQgd2lkdGggb2YgcG9seWxpbmVzIGFuZCBwb2x5Z29uIG91dGxpbmVzLlxuICogQHByb3BlcnR5IHtDb2xvcn0gW2ZpbGw9R2VvSnNvbkRhdGFTb3VyY2UuZmlsbF0gVGhlIGRlZmF1bHQgY29sb3IgZm9yIHBvbHlnb24gaW50ZXJpb3JzLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbY2xhbXBUb0dyb3VuZD1HZW9Kc29uRGF0YVNvdXJjZS5jbGFtcFRvR3JvdW5kXSB0cnVlIGlmIHdlIHdhbnQgdGhlIGdlb21ldHJ5IGZlYXR1cmVzIChwb2x5Z29ucyBvciBsaW5lc3RyaW5ncykgY2xhbXBlZCB0byB0aGUgZ3JvdW5kLlxuICogQHByb3BlcnR5IHtDcmVkaXR8U3RyaW5nfSBbY3JlZGl0XSBBIGNyZWRpdCBmb3IgdGhlIGRhdGEgc291cmNlLCB3aGljaCBpcyBkaXNwbGF5ZWQgb24gdGhlIGNhbnZhcy5cbiAqL1xuXG4vKipcbiAqIEEge0BsaW5rIERhdGFTb3VyY2V9IHdoaWNoIHByb2Nlc3NlcyBib3RoXG4gKiB7QGxpbmsgaHR0cDovL3d3dy5nZW9qc29uLm9yZy98R2VvSlNPTn0gYW5kIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbWJvc3RvY2svdG9wb2pzb258VG9wb0pTT059IGRhdGEuXG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9zaW1wbGVzdHlsZS1zcGVjfHNpbXBsZXN0eWxlLXNwZWN9IHByb3BlcnRpZXMgd2lsbCBhbHNvIGJlIHVzZWQgaWYgdGhleVxuICogYXJlIHByZXNlbnQuXG4gKlxuICogQGFsaWFzIEdlb0pzb25EYXRhU291cmNlXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdIFRoZSBuYW1lIG9mIHRoaXMgZGF0YSBzb3VyY2UuICBJZiB1bmRlZmluZWQsIGEgbmFtZSB3aWxsIGJlIHRha2VuIGZyb21cbiAqICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgb2YgdGhlIEdlb0pTT04gZmlsZS5cbiAqXG4gKiBAZGVtbyB7QGxpbmsgaHR0cHM6Ly9zYW5kY2FzdGxlLmNlc2l1bS5jb20vaW5kZXguaHRtbD9zcmM9R2VvSlNPTiUyMGFuZCUyMFRvcG9KU09OLmh0bWx8Q2VzaXVtIFNhbmRjYXN0bGUgR2VvSlNPTiBhbmQgVG9wb0pTT04gRGVtb31cbiAqIEBkZW1vIHtAbGluayBodHRwczovL3NhbmRjYXN0bGUuY2VzaXVtLmNvbS9pbmRleC5odG1sP3NyYz1HZW9KU09OJTIwc2ltcGxlc3R5bGUuaHRtbHxDZXNpdW0gU2FuZGNhc3RsZSBHZW9KU09OIHNpbXBsZXN0eWxlIERlbW99XG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciB2aWV3ZXIgPSBuZXcgQ2VzaXVtLlZpZXdlcignY2VzaXVtQ29udGFpbmVyJyk7XG4gKiB2aWV3ZXIuZGF0YVNvdXJjZXMuYWRkKENlc2l1bS5HZW9Kc29uRGF0YVNvdXJjZS5sb2FkKCcuLi8uLi9TYW1wbGVEYXRhL25lXzEwbV91c19zdGF0ZXMudG9wb2pzb24nLCB7XG4gKiAgIHN0cm9rZTogQ2VzaXVtLkNvbG9yLkhPVFBJTkssXG4gKiAgIGZpbGw6IENlc2l1bS5Db2xvci5QSU5LLFxuICogICBzdHJva2VXaWR0aDogMyxcbiAqICAgbWFya2VyU3ltYm9sOiAnPydcbiAqIH0pKTtcbiAqL1xuZnVuY3Rpb24gR2VvSnNvbkRhdGFTb3VyY2UobmFtZSkge1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5fY2hhbmdlZCA9IG5ldyBFdmVudCgpO1xuICB0aGlzLl9lcnJvciA9IG5ldyBFdmVudCgpO1xuICB0aGlzLl9pc0xvYWRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fbG9hZGluZyA9IG5ldyBFdmVudCgpO1xuICB0aGlzLl9lbnRpdHlDb2xsZWN0aW9uID0gbmV3IEVudGl0eUNvbGxlY3Rpb24odGhpcyk7XG4gIHRoaXMuX3Byb21pc2VzID0gW107XG4gIHRoaXMuX3BpbkJ1aWxkZXIgPSBuZXcgUGluQnVpbGRlcigpO1xuICB0aGlzLl9lbnRpdHlDbHVzdGVyID0gbmV3IEVudGl0eUNsdXN0ZXIoKTtcbiAgdGhpcy5fY3JlZGl0ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yZXNvdXJjZUNyZWRpdHMgPSBbXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUHJvbWlzZSB0byBhIG5ldyBpbnN0YW5jZSBsb2FkZWQgd2l0aCB0aGUgcHJvdmlkZWQgR2VvSlNPTiBvciBUb3BvSlNPTiBkYXRhLlxuICpcbiAqIEBwYXJhbSB7UmVzb3VyY2V8U3RyaW5nfE9iamVjdH0gZGF0YSBBIHVybCwgR2VvSlNPTiBvYmplY3QsIG9yIFRvcG9KU09OIG9iamVjdCB0byBiZSBsb2FkZWQuXG4gKiBAcGFyYW0ge0dlb0pzb25EYXRhU291cmNlLkxvYWRPcHRpb25zfSBbb3B0aW9uc10gQW4gb2JqZWN0IHNwZWNpZnlpbmcgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gKlxuICogQHJldHVybnMge1Byb21pc2UuPEdlb0pzb25EYXRhU291cmNlPn0gQSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gdGhlIGRhdGEgaXMgbG9hZGVkLlxuICovXG5HZW9Kc29uRGF0YVNvdXJjZS5sb2FkID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBHZW9Kc29uRGF0YVNvdXJjZSgpLmxvYWQoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhHZW9Kc29uRGF0YVNvdXJjZSwge1xuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBkZWZhdWx0IHNpemUgb2YgdGhlIG1hcCBwaW4gY3JlYXRlZCBmb3IgZWFjaCBwb2ludCwgaW4gcGl4ZWxzLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2VcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgNDhcbiAgICovXG4gIG1hcmtlclNpemU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TWFya2VyU2l6ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBkZWZhdWx0TWFya2VyU2l6ZSA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGRlZmF1bHQgc3ltYm9sIG9mIHRoZSBtYXAgcGluIGNyZWF0ZWQgZm9yIGVhY2ggcG9pbnQuXG4gICAqIFRoaXMgY2FuIGJlIGFueSB2YWxpZCB7QGxpbmsgaHR0cDovL21hcGJveC5jb20vbWFraS98TWFraX0gaWRlbnRpZmllciwgYW55IHNpbmdsZSBjaGFyYWN0ZXIsXG4gICAqIG9yIGJsYW5rIGlmIG5vIHN5bWJvbCBpcyB0byBiZSB1c2VkLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2VcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIG1hcmtlclN5bWJvbDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRNYXJrZXJTeW1ib2w7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgZGVmYXVsdE1hcmtlclN5bWJvbCA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGRlZmF1bHQgY29sb3Igb2YgdGhlIG1hcCBwaW4gY3JlYXRlZCBmb3IgZWFjaCBwb2ludC5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlXG4gICAqIEB0eXBlIHtDb2xvcn1cbiAgICogQGRlZmF1bHQgQ29sb3IuUk9ZQUxCTFVFXG4gICAqL1xuICBtYXJrZXJDb2xvcjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRNYXJrZXJDb2xvcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBkZWZhdWx0TWFya2VyQ29sb3IgPSB2YWx1ZTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBkZWZhdWx0IGNvbG9yIG9mIHBvbHlsaW5lcyBhbmQgcG9seWdvbiBvdXRsaW5lcy5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlXG4gICAqIEB0eXBlIHtDb2xvcn1cbiAgICogQGRlZmF1bHQgQ29sb3IuQkxBQ0tcbiAgICovXG4gIHN0cm9rZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRTdHJva2U7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgZGVmYXVsdFN0cm9rZSA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGRlZmF1bHQgd2lkdGggb2YgcG9seWxpbmVzIGFuZCBwb2x5Z29uIG91dGxpbmVzLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2VcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMi4wXG4gICAqL1xuICBzdHJva2VXaWR0aDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRTdHJva2VXaWR0aDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBkZWZhdWx0U3Ryb2tlV2lkdGggPSB2YWx1ZTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGRlZmF1bHQgY29sb3IgZm9yIHBvbHlnb24gaW50ZXJpb3JzLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2VcbiAgICogQHR5cGUge0NvbG9yfVxuICAgKiBAZGVmYXVsdCBDb2xvci5ZRUxMT1dcbiAgICovXG4gIGZpbGw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0RmlsbDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBkZWZhdWx0RmlsbCA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgZGVmYXVsdCBvZiB3aGV0aGVyIHRvIGNsYW1wIHRvIHRoZSBncm91bmQuXG4gICAqIEBtZW1iZXJvZiBHZW9Kc29uRGF0YVNvdXJjZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNsYW1wVG9Hcm91bmQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0Q2xhbXBUb0dyb3VuZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBkZWZhdWx0Q2xhbXBUb0dyb3VuZCA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgbmFtZSBvZiBhIGNycyB0byBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgR2VvSlNPTiBjb29yZGluYXRlXG4gICAqIGFuZCB0cmFuc2Zvcm1zIGl0IGludG8gYSBXR1M4NCBFYXJ0aC1maXhlZCBDYXJ0ZXNpYW4uICBPbGRlciB2ZXJzaW9ucyBvZiBHZW9KU09OIHdoaWNoXG4gICAqIHN1cHBvcnRlZCB0aGUgRVBTRyB0eXBlIGNhbiBiZSBhZGRlZCB0byB0aGlzIGxpc3QgYXMgd2VsbCwgYnkgc3BlY2lmeWluZyB0aGUgY29tcGxldGUgRVBTRyBuYW1lLFxuICAgKiBmb3IgZXhhbXBsZSAnRVBTRzo0MzI2Jy5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBjcnNOYW1lczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNyc05hbWVzO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhIGNycyBsaW5rIHRvIGEgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICogd2hpY2ggdGFrZXMgdGhlIGNycyBwcm9wZXJ0aWVzIG9iamVjdCBhbmQgcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlc1xuICAgKiB0byBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBHZW9KU09OIGNvb3JkaW5hdGUgYW5kIHRyYW5zZm9ybXMgaXQgaW50byBhIFdHUzg0IEVhcnRoLWZpeGVkIENhcnRlc2lhbi5cbiAgICogSXRlbXMgaW4gdGhpcyBvYmplY3QgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhvc2UgZGVmaW5lZCBpbiA8Y29kZT5jcnNMaW5rSHJlZnM8L2NvZGU+LCBhc3N1bWluZ1xuICAgKiB0aGUgbGluayBoYXMgYSB0eXBlIHNwZWNpZmllZC5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBjcnNMaW5rSHJlZnM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjcnNMaW5rSHJlZnM7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSB0eXBlIHByb3BlcnR5IG9mIGEgY3JzIGxpbmsgdG8gYSBjYWxsYmFjayBmdW5jdGlvblxuICAgKiB3aGljaCB0YWtlcyB0aGUgY3JzIHByb3BlcnRpZXMgb2JqZWN0IGFuZCByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzXG4gICAqIHRvIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIEdlb0pTT04gY29vcmRpbmF0ZSBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGEgV0dTODQgRWFydGgtZml4ZWQgQ2FydGVzaWFuLlxuICAgKiBJdGVtcyBpbiA8Y29kZT5jcnNMaW5rSHJlZnM8L2NvZGU+IHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgb2JqZWN0LlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2VcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGNyc0xpbmtUeXBlczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNyc0xpbmtUeXBlcztcbiAgICB9LFxuICB9LFxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGEgaHVtYW4tcmVhZGFibGUgbmFtZSBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgbmFtZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuX25hbWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fY2hhbmdlZC5yYWlzZUV2ZW50KHRoaXMpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBUaGlzIERhdGFTb3VyY2Ugb25seSBkZWZpbmVzIHN0YXRpYyBkYXRhLCB0aGVyZWZvcmUgdGhpcyBwcm9wZXJ0eSBpcyBhbHdheXMgdW5kZWZpbmVkLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtEYXRhU291cmNlQ2xvY2t9XG4gICAqL1xuICBjbG9jazoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICB9LFxuICAvKipcbiAgICogR2V0cyB0aGUgY29sbGVjdGlvbiBvZiB7QGxpbmsgRW50aXR5fSBpbnN0YW5jZXMuXG4gICAqIEBtZW1iZXJvZiBHZW9Kc29uRGF0YVNvdXJjZS5wcm90b3R5cGVcbiAgICogQHR5cGUge0VudGl0eUNvbGxlY3Rpb259XG4gICAqL1xuICBlbnRpdGllczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2VudGl0eUNvbGxlY3Rpb247XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIGlmIHRoZSBkYXRhIHNvdXJjZSBpcyBjdXJyZW50bHkgbG9hZGluZyBkYXRhLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgaXNMb2FkaW5nOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNMb2FkaW5nO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIGFuIGV2ZW50IHRoYXQgd2lsbCBiZSByYWlzZWQgd2hlbiB0aGUgdW5kZXJseWluZyBkYXRhIGNoYW5nZXMuXG4gICAqIEBtZW1iZXJvZiBHZW9Kc29uRGF0YVNvdXJjZS5wcm90b3R5cGVcbiAgICogQHR5cGUge0V2ZW50fVxuICAgKi9cbiAgY2hhbmdlZEV2ZW50OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hhbmdlZDtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBhbiBldmVudCB0aGF0IHdpbGwgYmUgcmFpc2VkIGlmIGFuIGVycm9yIGlzIGVuY291bnRlcmVkIGR1cmluZyBwcm9jZXNzaW5nLlxuICAgKiBAbWVtYmVyb2YgR2VvSnNvbkRhdGFTb3VyY2UucHJvdG90eXBlXG4gICAqIEB0eXBlIHtFdmVudH1cbiAgICovXG4gIGVycm9yRXZlbnQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBhbiBldmVudCB0aGF0IHdpbGwgYmUgcmFpc2VkIHdoZW4gdGhlIGRhdGEgc291cmNlIGVpdGhlciBzdGFydHMgb3Igc3RvcHMgbG9hZGluZy5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7RXZlbnR9XG4gICAqL1xuICBsb2FkaW5nRXZlbnQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkaW5nO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoaXMgZGF0YSBzb3VyY2Ugc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIHNob3c6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbnRpdHlDb2xsZWN0aW9uLnNob3c7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdGhpcy5fZW50aXR5Q29sbGVjdGlvbi5zaG93ID0gdmFsdWU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBjbHVzdGVyaW5nIG9wdGlvbnMgZm9yIHRoaXMgZGF0YSBzb3VyY2UuIFRoaXMgb2JqZWN0IGNhbiBiZSBzaGFyZWQgYmV0d2VlbiBtdWx0aXBsZSBkYXRhIHNvdXJjZXMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBHZW9Kc29uRGF0YVNvdXJjZS5wcm90b3R5cGVcbiAgICogQHR5cGUge0VudGl0eUNsdXN0ZXJ9XG4gICAqL1xuICBjbHVzdGVyaW5nOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZW50aXR5Q2x1c3RlcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXCJ2YWx1ZSBtdXN0IGJlIGRlZmluZWQuXCIpO1xuICAgICAgfVxuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgICB0aGlzLl9lbnRpdHlDbHVzdGVyID0gdmFsdWU7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEdldHMgdGhlIGNyZWRpdCB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGZvciB0aGUgZGF0YSBzb3VyY2VcbiAgICogQG1lbWJlcm9mIEdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7Q3JlZGl0fVxuICAgKi9cbiAgY3JlZGl0OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY3JlZGl0O1xuICAgIH0sXG4gIH0sXG59KTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBsb2FkcyB0aGUgcHJvdmlkZWQgR2VvSlNPTiBvciBUb3BvSlNPTiBkYXRhLCByZXBsYWNpbmcgYW55IGV4aXN0aW5nIGRhdGEuXG4gKlxuICogQHBhcmFtIHtSZXNvdXJjZXxTdHJpbmd8T2JqZWN0fSBkYXRhIEEgdXJsLCBHZW9KU09OIG9iamVjdCwgb3IgVG9wb0pTT04gb2JqZWN0IHRvIGJlIGxvYWRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVyaV0gT3ZlcnJpZGVzIHRoZSB1cmwgdG8gdXNlIGZvciByZXNvbHZpbmcgcmVsYXRpdmUgbGlua3MuXG4gKiBAcGFyYW0ge0dlb0pzb25EYXRhU291cmNlLmRlc2NyaWJlfSBbb3B0aW9ucy5kZXNjcmliZT1HZW9Kc29uRGF0YVNvdXJjZS5kZWZhdWx0RGVzY3JpYmVQcm9wZXJ0eV0gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgUHJvcGVydHkgb2JqZWN0IChvciBqdXN0IGEgc3RyaW5nKSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBjb252ZXJ0cyB0aGUgcHJvcGVydGllcyBpbnRvIGFuIGh0bWwgZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWFya2VyU2l6ZT1HZW9Kc29uRGF0YVNvdXJjZS5tYXJrZXJTaXplXSBUaGUgZGVmYXVsdCBzaXplIG9mIHRoZSBtYXAgcGluIGNyZWF0ZWQgZm9yIGVhY2ggcG9pbnQsIGluIHBpeGVscy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5tYXJrZXJTeW1ib2w9R2VvSnNvbkRhdGFTb3VyY2UubWFya2VyU3ltYm9sXSBUaGUgZGVmYXVsdCBzeW1ib2wgb2YgdGhlIG1hcCBwaW4gY3JlYXRlZCBmb3IgZWFjaCBwb2ludC5cbiAqIEBwYXJhbSB7Q29sb3J9IFtvcHRpb25zLm1hcmtlckNvbG9yPUdlb0pzb25EYXRhU291cmNlLm1hcmtlckNvbG9yXSBUaGUgZGVmYXVsdCBjb2xvciBvZiB0aGUgbWFwIHBpbiBjcmVhdGVkIGZvciBlYWNoIHBvaW50LlxuICogQHBhcmFtIHtDb2xvcn0gW29wdGlvbnMuc3Ryb2tlPUdlb0pzb25EYXRhU291cmNlLnN0cm9rZV0gVGhlIGRlZmF1bHQgY29sb3Igb2YgcG9seWxpbmVzIGFuZCBwb2x5Z29uIG91dGxpbmVzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnN0cm9rZVdpZHRoPUdlb0pzb25EYXRhU291cmNlLnN0cm9rZVdpZHRoXSBUaGUgZGVmYXVsdCB3aWR0aCBvZiBwb2x5bGluZXMgYW5kIHBvbHlnb24gb3V0bGluZXMuXG4gKiBAcGFyYW0ge0NvbG9yfSBbb3B0aW9ucy5maWxsPUdlb0pzb25EYXRhU291cmNlLmZpbGxdIFRoZSBkZWZhdWx0IGNvbG9yIGZvciBwb2x5Z29uIGludGVyaW9ycy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuY2xhbXBUb0dyb3VuZD1HZW9Kc29uRGF0YVNvdXJjZS5jbGFtcFRvR3JvdW5kXSB0cnVlIGlmIHdlIHdhbnQgdGhlIGZlYXR1cmVzIGNsYW1wZWQgdG8gdGhlIGdyb3VuZC5cbiAqIEBwYXJhbSB7Q3JlZGl0fFN0cmluZ30gW29wdGlvbnMuY3JlZGl0XSBBIGNyZWRpdCBmb3IgdGhlIGRhdGEgc291cmNlLCB3aGljaCBpcyBkaXNwbGF5ZWQgb24gdGhlIGNhbnZhcy5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48R2VvSnNvbkRhdGFTb3VyY2U+fSBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB0aGUgR2VvSlNPTiBpcyBsb2FkZWQuXG4gKi9cbkdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgaWYgKCFkZWZpbmVkKGRhdGEpKSB7XG4gICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFwiZGF0YSBpcyByZXF1aXJlZC5cIik7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgRGF0YVNvdXJjZS5zZXRMb2FkaW5nKHRoaXMsIHRydWUpO1xuICBvcHRpb25zID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMsIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QpO1xuXG4gIC8vIFVzZXIgc3BlY2lmaWVkIGNyZWRpdFxuICB2YXIgY3JlZGl0ID0gb3B0aW9ucy5jcmVkaXQ7XG4gIGlmICh0eXBlb2YgY3JlZGl0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgY3JlZGl0ID0gbmV3IENyZWRpdChjcmVkaXQpO1xuICB9XG4gIHRoaXMuX2NyZWRpdCA9IGNyZWRpdDtcblxuICB2YXIgcHJvbWlzZSA9IGRhdGE7XG4gIHZhciBzb3VyY2VVcmkgPSBvcHRpb25zLnNvdXJjZVVyaTtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiIHx8IGRhdGEgaW5zdGFuY2VvZiBSZXNvdXJjZSkge1xuICAgIGRhdGEgPSBSZXNvdXJjZS5jcmVhdGVJZk5lZWRlZChkYXRhKTtcbiAgICBwcm9taXNlID0gZGF0YS5mZXRjaEpzb24oKTtcbiAgICBzb3VyY2VVcmkgPSBkZWZhdWx0VmFsdWUoc291cmNlVXJpLCBkYXRhLmdldFVybENvbXBvbmVudCgpKTtcblxuICAgIC8vIEFkZCByZXNvdXJjZSBjcmVkaXRzIHRvIG91ciBsaXN0IG9mIGNyZWRpdHMgdG8gZGlzcGxheVxuICAgIHZhciByZXNvdXJjZUNyZWRpdHMgPSB0aGlzLl9yZXNvdXJjZUNyZWRpdHM7XG4gICAgdmFyIGNyZWRpdHMgPSBkYXRhLmNyZWRpdHM7XG4gICAgaWYgKGRlZmluZWQoY3JlZGl0cykpIHtcbiAgICAgIHZhciBsZW5ndGggPSBjcmVkaXRzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzb3VyY2VDcmVkaXRzLnB1c2goY3JlZGl0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb3B0aW9ucyA9IHtcbiAgICBkZXNjcmliZTogZGVmYXVsdFZhbHVlKG9wdGlvbnMuZGVzY3JpYmUsIGRlZmF1bHREZXNjcmliZVByb3BlcnR5KSxcbiAgICBtYXJrZXJTaXplOiBkZWZhdWx0VmFsdWUob3B0aW9ucy5tYXJrZXJTaXplLCBkZWZhdWx0TWFya2VyU2l6ZSksXG4gICAgbWFya2VyU3ltYm9sOiBkZWZhdWx0VmFsdWUob3B0aW9ucy5tYXJrZXJTeW1ib2wsIGRlZmF1bHRNYXJrZXJTeW1ib2wpLFxuICAgIG1hcmtlckNvbG9yOiBkZWZhdWx0VmFsdWUob3B0aW9ucy5tYXJrZXJDb2xvciwgZGVmYXVsdE1hcmtlckNvbG9yKSxcbiAgICBzdHJva2VXaWR0aFByb3BlcnR5OiBuZXcgQ29uc3RhbnRQcm9wZXJ0eShcbiAgICAgIGRlZmF1bHRWYWx1ZShvcHRpb25zLnN0cm9rZVdpZHRoLCBkZWZhdWx0U3Ryb2tlV2lkdGgpXG4gICAgKSxcbiAgICBzdHJva2VNYXRlcmlhbFByb3BlcnR5OiBuZXcgQ29sb3JNYXRlcmlhbFByb3BlcnR5KFxuICAgICAgZGVmYXVsdFZhbHVlKG9wdGlvbnMuc3Ryb2tlLCBkZWZhdWx0U3Ryb2tlKVxuICAgICksXG4gICAgZmlsbE1hdGVyaWFsUHJvcGVydHk6IG5ldyBDb2xvck1hdGVyaWFsUHJvcGVydHkoXG4gICAgICBkZWZhdWx0VmFsdWUob3B0aW9ucy5maWxsLCBkZWZhdWx0RmlsbClcbiAgICApLFxuICAgIGNsYW1wVG9Hcm91bmQ6IGRlZmF1bHRWYWx1ZShvcHRpb25zLmNsYW1wVG9Hcm91bmQsIGRlZmF1bHRDbGFtcFRvR3JvdW5kKSxcbiAgfTtcblxuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHJldHVybiB3aGVuKHByb21pc2UsIGZ1bmN0aW9uIChnZW9Kc29uKSB7XG4gICAgcmV0dXJuIGxvYWQodGhhdCwgZ2VvSnNvbiwgb3B0aW9ucywgc291cmNlVXJpKTtcbiAgfSkub3RoZXJ3aXNlKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIERhdGFTb3VyY2Uuc2V0TG9hZGluZyh0aGF0LCBmYWxzZSk7XG4gICAgdGhhdC5fZXJyb3IucmFpc2VFdmVudCh0aGF0LCBlcnJvcik7XG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIHJldHVybiB3aGVuLnJlamVjdChlcnJvcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBkYXRhIHNvdXJjZSB0byB0aGUgcHJvdmlkZWQgdGltZS4gIFRoaXMgZnVuY3Rpb24gaXMgb3B0aW9uYWwgYW5kXG4gKiBpcyBub3QgcmVxdWlyZWQgdG8gYmUgaW1wbGVtZW50ZWQuICBJdCBpcyBwcm92aWRlZCBmb3IgZGF0YSBzb3VyY2VzIHdoaWNoXG4gKiByZXRyaWV2ZSBkYXRhIGJhc2VkIG9uIHRoZSBjdXJyZW50IGFuaW1hdGlvbiB0aW1lIG9yIHNjZW5lIHN0YXRlLlxuICogSWYgaW1wbGVtZW50ZWQsIHVwZGF0ZSB3aWxsIGJlIGNhbGxlZCBieSB7QGxpbmsgRGF0YVNvdXJjZURpc3BsYXl9IG9uY2UgYSBmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge0p1bGlhbkRhdGV9IHRpbWUgVGhlIHNpbXVsYXRpb24gdGltZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoaXMgZGF0YSBzb3VyY2UgaXMgcmVhZHkgdG8gYmUgZGlzcGxheWVkIGF0IHRoZSBwcm92aWRlZCB0aW1lLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkdlb0pzb25EYXRhU291cmNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGltZSkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGxvYWQodGhhdCwgZ2VvSnNvbiwgb3B0aW9ucywgc291cmNlVXJpKSB7XG4gIHZhciBuYW1lO1xuICBpZiAoZGVmaW5lZChzb3VyY2VVcmkpKSB7XG4gICAgbmFtZSA9IGdldEZpbGVuYW1lRnJvbVVyaShzb3VyY2VVcmkpO1xuICB9XG5cbiAgaWYgKGRlZmluZWQobmFtZSkgJiYgdGhhdC5fbmFtZSAhPT0gbmFtZSkge1xuICAgIHRoYXQuX25hbWUgPSBuYW1lO1xuICAgIHRoYXQuX2NoYW5nZWQucmFpc2VFdmVudCh0aGF0KTtcbiAgfVxuXG4gIHZhciB0eXBlSGFuZGxlciA9IGdlb0pzb25PYmplY3RUeXBlc1tnZW9Kc29uLnR5cGVdO1xuICBpZiAoIWRlZmluZWQodHlwZUhhbmRsZXIpKSB7XG4gICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcihcIlVuc3VwcG9ydGVkIEdlb0pTT04gb2JqZWN0IHR5cGU6IFwiICsgZ2VvSnNvbi50eXBlKTtcbiAgfVxuXG4gIC8vQ2hlY2sgZm9yIGEgQ29vcmRpbmF0ZSBSZWZlcmVuY2UgU3lzdGVtLlxuICB2YXIgY3JzID0gZ2VvSnNvbi5jcnM7XG4gIHZhciBjcnNGdW5jdGlvbiA9IGNycyAhPT0gbnVsbCA/IGRlZmF1bHRDcnNGdW5jdGlvbiA6IG51bGw7XG5cbiAgaWYgKGRlZmluZWQoY3JzKSkge1xuICAgIGlmICghZGVmaW5lZChjcnMucHJvcGVydGllcykpIHtcbiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXCJjcnMucHJvcGVydGllcyBpcyB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0aWVzID0gY3JzLnByb3BlcnRpZXM7XG4gICAgaWYgKGNycy50eXBlID09PSBcIm5hbWVcIikge1xuICAgICAgY3JzRnVuY3Rpb24gPSBjcnNOYW1lc1twcm9wZXJ0aWVzLm5hbWVdO1xuICAgICAgaWYgKCFkZWZpbmVkKGNyc0Z1bmN0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFwiVW5rbm93biBjcnMgbmFtZTogXCIgKyBwcm9wZXJ0aWVzLm5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3JzLnR5cGUgPT09IFwibGlua1wiKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IGNyc0xpbmtIcmVmc1twcm9wZXJ0aWVzLmhyZWZdO1xuICAgICAgaWYgKCFkZWZpbmVkKGhhbmRsZXIpKSB7XG4gICAgICAgIGhhbmRsZXIgPSBjcnNMaW5rVHlwZXNbcHJvcGVydGllcy50eXBlXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkZWZpbmVkKGhhbmRsZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgICAgICAgXCJVbmFibGUgdG8gcmVzb2x2ZSBjcnMgbGluazogXCIgKyBKU09OLnN0cmluZ2lmeShwcm9wZXJ0aWVzKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjcnNGdW5jdGlvbiA9IGhhbmRsZXIocHJvcGVydGllcyk7XG4gICAgfSBlbHNlIGlmIChjcnMudHlwZSA9PT0gXCJFUFNHXCIpIHtcbiAgICAgIGNyc0Z1bmN0aW9uID0gY3JzTmFtZXNbXCJFUFNHOlwiICsgcHJvcGVydGllcy5jb2RlXTtcbiAgICAgIGlmICghZGVmaW5lZChjcnNGdW5jdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcihcIlVua25vd24gY3JzIEVQU0cgY29kZTogXCIgKyBwcm9wZXJ0aWVzLmNvZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFwiVW5rbm93biBjcnMgdHlwZTogXCIgKyBjcnMudHlwZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHdoZW4oY3JzRnVuY3Rpb24sIGZ1bmN0aW9uIChjcnNGdW5jdGlvbikge1xuICAgIHRoYXQuX2VudGl0eUNvbGxlY3Rpb24ucmVtb3ZlQWxsKCk7XG5cbiAgICAvLyBudWxsIGlzIGEgdmFsaWQgdmFsdWUgZm9yIHRoZSBjcnMsIGJ1dCBtZWFucyB0aGUgZW50aXJlIGxvYWQgcHJvY2VzcyBiZWNvbWVzIGEgbm8tb3BcbiAgICAvLyBiZWNhdXNlIHdlIGNhbid0IGFzc3VtZSBhbnl0aGluZyBhYm91dCB0aGUgY29vcmRpbmF0ZXMuXG4gICAgaWYgKGNyc0Z1bmN0aW9uICE9PSBudWxsKSB7XG4gICAgICB0eXBlSGFuZGxlcih0aGF0LCBnZW9Kc29uLCBnZW9Kc29uLCBjcnNGdW5jdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdoZW4uYWxsKHRoYXQuX3Byb21pc2VzLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0Ll9wcm9taXNlcy5sZW5ndGggPSAwO1xuICAgICAgRGF0YVNvdXJjZS5zZXRMb2FkaW5nKHRoYXQsIGZhbHNlKTtcbiAgICAgIHJldHVybiB0aGF0O1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaGlzIGNhbGxiYWNrIGlzIGRpc3BsYXllZCBhcyBwYXJ0IG9mIHRoZSBHZW9Kc29uRGF0YVNvdXJjZSBjbGFzcy5cbiAqIEBjYWxsYmFjayBHZW9Kc29uRGF0YVNvdXJjZS5kZXNjcmliZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgb2YgdGhlIGZlYXR1cmUuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVByb3BlcnR5IFRoZSBwcm9wZXJ0eSBrZXkgdGhhdCBDZXNpdW0gZXN0aW1hdGVzIHRvIGhhdmUgdGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IEdlb0pzb25EYXRhU291cmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4157\n')},17045:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(47861);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14459);\n/* harmony import */ var _Core_Iso8601_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(22841);\n/* harmony import */ var _Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(27671);\n/* harmony import */ var _Scene_ClassificationType_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(73001);\n/* harmony import */ var _Scene_ShadowMode_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(34125);\n/* harmony import */ var _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(20174);\n/* harmony import */ var _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(612);\n/* harmony import */ var _Entity_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(11895);\n/* harmony import */ var _Property_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(40112);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultMaterial = new _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(_Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE);\nvar defaultShow = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(true);\nvar defaultFill = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(true);\nvar defaultOutline = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(false);\nvar defaultOutlineColor = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(_Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].BLACK */ .Z.BLACK);\nvar defaultShadows = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(_Scene_ShadowMode_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].DISABLED */ .Z.DISABLED);\nvar defaultDistanceDisplayCondition = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n  new _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z()\n);\nvar defaultClassificationType = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(_Scene_ClassificationType_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].BOTH */ .Z.BOTH);\n\n/**\n * An abstract class for updating geometry entities.\n * @alias GeometryUpdater\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {Object} options.geometryOptions Options for the geometry\n * @param {String} options.geometryPropertyName The geometry property name\n * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GeometryUpdater(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.entity", options.entity);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.scene", options.scene);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.geometryOptions", options.geometryOptions);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.geometryPropertyName", options.geometryPropertyName);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.observedPropertyNames", options.observedPropertyNames);\n  //>>includeEnd(\'debug\');\n\n  var entity = options.entity;\n  var geometryPropertyName = options.geometryPropertyName;\n\n  this._entity = entity;\n  this._scene = options.scene;\n  this._fillEnabled = false;\n  this._isClosed = false;\n  this._onTerrain = false;\n  this._dynamic = false;\n  this._outlineEnabled = false;\n  this._geometryChanged = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._showOutlineProperty = undefined;\n  this._outlineColorProperty = undefined;\n  this._outlineWidth = 1.0;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._options = options.geometryOptions;\n  this._geometryPropertyName = geometryPropertyName;\n  this._id = geometryPropertyName + "-" + entity.id;\n  this._observedPropertyNames = options.observedPropertyNames;\n  this._supportsMaterialsforEntitiesOnTerrain = _Entity_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].supportsMaterialsforEntitiesOnTerrain */ .Z.supportsMaterialsforEntitiesOnTerrain(\n    options.scene\n  );\n}\n\nObject.defineProperties(GeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof GeometryUpdater.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return (\n        !this._fillEnabled ||\n        (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._entity.availability) &&\n          _Property_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].isConstant */ .Z.isConstant(this._showProperty) &&\n          _Property_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].isConstant */ .Z.isConstant(this._fillProperty))\n      );\n    },\n  },\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    get: function () {\n      return this._outlineEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    get: function () {\n      return (\n        !this._outlineEnabled ||\n        (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(this._entity.availability) &&\n          _Property_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].isConstant */ .Z.isConstant(this._showProperty) &&\n          _Property_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].isConstant */ .Z.isConstant(this._showOutlineProperty))\n      );\n    },\n  },\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    get: function () {\n      return this._outlineColorProperty;\n    },\n  },\n  /**\n   * Gets the constant with of the geometry outline, in pixels.\n   * This value is only valid if isDynamic is false.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n  },\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   * If true, all visualization is delegated to a DynamicGeometryUpdater\n   * returned by GeometryUpdater#createDynamicUpdater.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isClosed: {\n    get: function () {\n      return this._isClosed;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry should be drawn on terrain.\n   * @memberof EllipseGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  onTerrain: {\n    get: function () {\n      return this._onTerrain;\n    },\n  },\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    },\n  },\n});\n\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  var entity = this._entity;\n  var visible =\n    this._outlineEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._showOutlineProperty.getValue(time);\n  return (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(visible, false);\n};\n\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isFilled = function (time) {\n  var entity = this._entity;\n  var visible =\n    this._fillEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._fillProperty.getValue(time);\n  return (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(visible, false);\n};\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nGeometryUpdater.prototype.createFillGeometryInstance =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nGeometryUpdater.prototype.createOutlineGeometryInstance =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGeometryUpdater.prototype.destroy = function () {\n  (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isHidden = function (entity, geometry) {\n  var show = geometry.show;\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(show) && show.isConstant && !show.getValue(_Core_Iso8601_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE)\n  );\n};\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return false;\n};\n\n/**\n * @param {GeometryOptions} options\n * @private\n */\nGeometryUpdater.prototype._getIsClosed = function (options) {\n  return true;\n};\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isDynamic = _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._setStaticOptions =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {String} propertyName\n * @param {*} newValue\n * @param {*} oldValue\n * @private\n */\nGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  var geometry = this._entity[this._geometryPropertyName];\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  var fillProperty = geometry.fill;\n  var fillEnabled =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(fillProperty) && fillProperty.isConstant\n      ? fillProperty.getValue(_Core_Iso8601_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE)\n      : true;\n\n  var outlineProperty = geometry.outline;\n  var outlineEnabled = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(outlineProperty);\n  if (outlineEnabled && outlineProperty.isConstant) {\n    outlineEnabled = outlineProperty.getValue(_Core_Iso8601_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE);\n  }\n\n  if (!fillEnabled && !outlineEnabled) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  var show = geometry.show;\n  if (this._isHidden(entity, geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  this._materialProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(geometry.material, defaultMaterial);\n  this._fillProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(fillProperty, defaultFill);\n  this._showProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(show, defaultShow);\n  this._showOutlineProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(geometry.outline, defaultOutline);\n  this._outlineColorProperty = outlineEnabled\n    ? (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(geometry.outlineColor, defaultOutlineColor)\n    : undefined;\n  this._shadowsProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(geometry.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    geometry.distanceDisplayCondition,\n    defaultDistanceDisplayCondition\n  );\n  this._classificationTypeProperty = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    geometry.classificationType,\n    defaultClassificationType\n  );\n\n  this._fillEnabled = fillEnabled;\n\n  var onTerrain =\n    this._isOnTerrain(entity, geometry) &&\n    (this._supportsMaterialsforEntitiesOnTerrain ||\n      this._materialProperty instanceof _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z);\n\n  if (outlineEnabled && onTerrain) {\n    (0,_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].geometryOutlines */ .Z.geometryOutlines);\n    outlineEnabled = false;\n  }\n\n  this._onTerrain = onTerrain;\n  this._outlineEnabled = outlineEnabled;\n\n  if (this._isDynamic(entity, geometry)) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    this._setStaticOptions(entity, geometry);\n    this._isClosed = this._getIsClosed(this._options);\n    var outlineWidth = geometry.outlineWidth;\n    this._outlineWidth = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(outlineWidth)\n      ? outlineWidth.getValue(_Core_Iso8601_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].MINIMUM_VALUE */ .Z.MINIMUM_VALUE)\n      : 1.0;\n    this._dynamic = false;\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n *\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n * @private\n */\nGeometryUpdater.prototype.createDynamicUpdater = function (\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("primitives", primitives);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("groundPrimitives", groundPrimitives);\n\n  if (!this._dynamic) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "This instance does not represent dynamic geometry."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  return new this.constructor.DynamicGeometryUpdater(\n    this,\n    primitives,\n    groundPrimitives\n  );\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GeometryUpdater);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwNDUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNBO0FBQ2M7QUFDVjtBQUNZO0FBQ0U7QUFDb0I7QUFDdEM7QUFDSTtBQUNjO0FBQ1M7QUFDaEI7QUFDZTtBQUNWO0FBQ3BCO0FBQ0k7O0FBRXJDLDBCQUEwQiwyRUFBcUIsQ0FBQywyRUFBVztBQUMzRCxzQkFBc0Isc0VBQWdCO0FBQ3RDLHNCQUFzQixzRUFBZ0I7QUFDdEMseUJBQXlCLHNFQUFnQjtBQUN6Qyw4QkFBOEIsc0VBQWdCLENBQUMsMkVBQVc7QUFDMUQseUJBQXlCLHNFQUFnQixDQUFDLHdGQUFtQjtBQUM3RCwwQ0FBMEMsc0VBQWdCO0FBQzFELE1BQU0sa0ZBQXdCO0FBQzlCO0FBQ0Esb0NBQW9DLHNFQUFnQixDQUFDLHVGQUF1Qjs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0VBQWE7QUFDZixFQUFFLCtFQUFhO0FBQ2YsRUFBRSwrRUFBYTtBQUNmLEVBQUUsK0VBQWE7QUFDZixFQUFFLCtFQUFhO0FBQ2Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwrREFBSztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsd0lBQTRDO0FBQzVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNFQUFPO0FBQ2pCLFVBQVUsb0ZBQW1CO0FBQzdCLFVBQVUsb0ZBQW1CO0FBQzdCO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNFQUFPO0FBQ2pCLFVBQVUsb0ZBQW1CO0FBQzdCLFVBQVUsb0ZBQW1CO0FBQzdCO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLHVCQUF1QixnQ0FBZ0M7QUFDdkQ7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLHVCQUF1QiwwQkFBMEI7QUFDakQ7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwRUFBWTtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBFQUFZO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBLEVBQUUsd0hBQXNDOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixhQUFhLGtCQUFrQjtBQUMvQjtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQSxFQUFFLHdIQUFzQzs7QUFFeEM7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQSxhQUFhLFNBQVMsbUNBQW1DO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQSxFQUFFLDJFQUFhO0FBQ2Y7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksc0VBQU8sNENBQTRDLDZGQUFxQjtBQUM1RTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLHVDQUF1Qyx3SEFBc0M7O0FBRTdFO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxFQUFFLHdIQUFzQzs7QUFFeEM7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTyxzRUFBTztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLHNFQUFPO0FBQ1gsOEJBQThCLDZGQUFxQjtBQUNuRDs7QUFFQTtBQUNBLHVCQUF1QixzRUFBTztBQUM5QjtBQUNBLDhDQUE4Qyw2RkFBcUI7QUFDbkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLDBFQUFZO0FBQ3ZDLHVCQUF1QiwwRUFBWTtBQUNuQyx1QkFBdUIsMEVBQVk7QUFDbkMsOEJBQThCLDBFQUFZO0FBQzFDO0FBQ0EsTUFBTSwwRUFBWTtBQUNsQjtBQUNBLDBCQUEwQiwwRUFBWTtBQUN0QywyQ0FBMkMsMEVBQVk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDBFQUFZO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsMkVBQXFCOztBQUU3RDtBQUNBLElBQUksNEVBQWMsQ0FBQywwR0FBK0I7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHNFQUFPO0FBQ2hDLDhCQUE4Qiw2RkFBcUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLCtFQUFhO0FBQ2YsRUFBRSwrRUFBYTs7QUFFZjtBQUNBLGNBQWMsd0VBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsZUFBZSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL0RhdGFTb3VyY2VzL0dlb21ldHJ5VXBkYXRlci5qcz9kNzBjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGVjayBmcm9tIFwiLi4vQ29yZS9DaGVjay5qc1wiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9Db3JlL0NvbG9yLmpzXCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi9Db3JlL2RlZmF1bHRWYWx1ZS5qc1wiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IGRlc3Ryb3lPYmplY3QgZnJvbSBcIi4uL0NvcmUvZGVzdHJveU9iamVjdC5qc1wiO1xuaW1wb3J0IERldmVsb3BlckVycm9yIGZyb20gXCIuLi9Db3JlL0RldmVsb3BlckVycm9yLmpzXCI7XG5pbXBvcnQgRGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uIGZyb20gXCIuLi9Db3JlL0Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvbi5qc1wiO1xuaW1wb3J0IEV2ZW50IGZyb20gXCIuLi9Db3JlL0V2ZW50LmpzXCI7XG5pbXBvcnQgSXNvODYwMSBmcm9tIFwiLi4vQ29yZS9Jc284NjAxLmpzXCI7XG5pbXBvcnQgb25lVGltZVdhcm5pbmcgZnJvbSBcIi4uL0NvcmUvb25lVGltZVdhcm5pbmcuanNcIjtcbmltcG9ydCBDbGFzc2lmaWNhdGlvblR5cGUgZnJvbSBcIi4uL1NjZW5lL0NsYXNzaWZpY2F0aW9uVHlwZS5qc1wiO1xuaW1wb3J0IFNoYWRvd01vZGUgZnJvbSBcIi4uL1NjZW5lL1NoYWRvd01vZGUuanNcIjtcbmltcG9ydCBDb2xvck1hdGVyaWFsUHJvcGVydHkgZnJvbSBcIi4vQ29sb3JNYXRlcmlhbFByb3BlcnR5LmpzXCI7XG5pbXBvcnQgQ29uc3RhbnRQcm9wZXJ0eSBmcm9tIFwiLi9Db25zdGFudFByb3BlcnR5LmpzXCI7XG5pbXBvcnQgRW50aXR5IGZyb20gXCIuL0VudGl0eS5qc1wiO1xuaW1wb3J0IFByb3BlcnR5IGZyb20gXCIuL1Byb3BlcnR5LmpzXCI7XG5cbnZhciBkZWZhdWx0TWF0ZXJpYWwgPSBuZXcgQ29sb3JNYXRlcmlhbFByb3BlcnR5KENvbG9yLldISVRFKTtcbnZhciBkZWZhdWx0U2hvdyA9IG5ldyBDb25zdGFudFByb3BlcnR5KHRydWUpO1xudmFyIGRlZmF1bHRGaWxsID0gbmV3IENvbnN0YW50UHJvcGVydHkodHJ1ZSk7XG52YXIgZGVmYXVsdE91dGxpbmUgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShmYWxzZSk7XG52YXIgZGVmYXVsdE91dGxpbmVDb2xvciA9IG5ldyBDb25zdGFudFByb3BlcnR5KENvbG9yLkJMQUNLKTtcbnZhciBkZWZhdWx0U2hhZG93cyA9IG5ldyBDb25zdGFudFByb3BlcnR5KFNoYWRvd01vZGUuRElTQUJMRUQpO1xudmFyIGRlZmF1bHREaXN0YW5jZURpc3BsYXlDb25kaXRpb24gPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShcbiAgbmV3IERpc3RhbmNlRGlzcGxheUNvbmRpdGlvbigpXG4pO1xudmFyIGRlZmF1bHRDbGFzc2lmaWNhdGlvblR5cGUgPSBuZXcgQ29uc3RhbnRQcm9wZXJ0eShDbGFzc2lmaWNhdGlvblR5cGUuQk9USCk7XG5cbi8qKlxuICogQW4gYWJzdHJhY3QgY2xhc3MgZm9yIHVwZGF0aW5nIGdlb21ldHJ5IGVudGl0aWVzLlxuICogQGFsaWFzIEdlb21ldHJ5VXBkYXRlclxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogQHBhcmFtIHtFbnRpdHl9IG9wdGlvbnMuZW50aXR5IFRoZSBlbnRpdHkgY29udGFpbmluZyB0aGUgZ2VvbWV0cnkgdG8gYmUgdmlzdWFsaXplZC5cbiAqIEBwYXJhbSB7U2NlbmV9IG9wdGlvbnMuc2NlbmUgVGhlIHNjZW5lIHdoZXJlIHZpc3VhbGl6YXRpb24gaXMgdGFraW5nIHBsYWNlLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuZ2VvbWV0cnlPcHRpb25zIE9wdGlvbnMgZm9yIHRoZSBnZW9tZXRyeVxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuZ2VvbWV0cnlQcm9wZXJ0eU5hbWUgVGhlIGdlb21ldHJ5IHByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nW119IG9wdGlvbnMub2JzZXJ2ZWRQcm9wZXJ0eU5hbWVzIFRoZSBlbnRpdHkgcHJvcGVydGllcyB0aGlzIGdlb21ldHJ5IGNhcmVzIGFib3V0XG4gKi9cbmZ1bmN0aW9uIEdlb21ldHJ5VXBkYXRlcihvcHRpb25zKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIENoZWNrLmRlZmluZWQoXCJvcHRpb25zLmVudGl0eVwiLCBvcHRpb25zLmVudGl0eSk7XG4gIENoZWNrLmRlZmluZWQoXCJvcHRpb25zLnNjZW5lXCIsIG9wdGlvbnMuc2NlbmUpO1xuICBDaGVjay5kZWZpbmVkKFwib3B0aW9ucy5nZW9tZXRyeU9wdGlvbnNcIiwgb3B0aW9ucy5nZW9tZXRyeU9wdGlvbnMpO1xuICBDaGVjay5kZWZpbmVkKFwib3B0aW9ucy5nZW9tZXRyeVByb3BlcnR5TmFtZVwiLCBvcHRpb25zLmdlb21ldHJ5UHJvcGVydHlOYW1lKTtcbiAgQ2hlY2suZGVmaW5lZChcIm9wdGlvbnMub2JzZXJ2ZWRQcm9wZXJ0eU5hbWVzXCIsIG9wdGlvbnMub2JzZXJ2ZWRQcm9wZXJ0eU5hbWVzKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIGVudGl0eSA9IG9wdGlvbnMuZW50aXR5O1xuICB2YXIgZ2VvbWV0cnlQcm9wZXJ0eU5hbWUgPSBvcHRpb25zLmdlb21ldHJ5UHJvcGVydHlOYW1lO1xuXG4gIHRoaXMuX2VudGl0eSA9IGVudGl0eTtcbiAgdGhpcy5fc2NlbmUgPSBvcHRpb25zLnNjZW5lO1xuICB0aGlzLl9maWxsRW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLl9pc0Nsb3NlZCA9IGZhbHNlO1xuICB0aGlzLl9vblRlcnJhaW4gPSBmYWxzZTtcbiAgdGhpcy5fZHluYW1pYyA9IGZhbHNlO1xuICB0aGlzLl9vdXRsaW5lRW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLl9nZW9tZXRyeUNoYW5nZWQgPSBuZXcgRXZlbnQoKTtcbiAgdGhpcy5fc2hvd1Byb3BlcnR5ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9tYXRlcmlhbFByb3BlcnR5ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zaG93T3V0bGluZVByb3BlcnR5ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vdXRsaW5lQ29sb3JQcm9wZXJ0eSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fb3V0bGluZVdpZHRoID0gMS4wO1xuICB0aGlzLl9zaGFkb3dzUHJvcGVydHkgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2Rpc3RhbmNlRGlzcGxheUNvbmRpdGlvblByb3BlcnR5ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9jbGFzc2lmaWNhdGlvblR5cGVQcm9wZXJ0eSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMuZ2VvbWV0cnlPcHRpb25zO1xuICB0aGlzLl9nZW9tZXRyeVByb3BlcnR5TmFtZSA9IGdlb21ldHJ5UHJvcGVydHlOYW1lO1xuICB0aGlzLl9pZCA9IGdlb21ldHJ5UHJvcGVydHlOYW1lICsgXCItXCIgKyBlbnRpdHkuaWQ7XG4gIHRoaXMuX29ic2VydmVkUHJvcGVydHlOYW1lcyA9IG9wdGlvbnMub2JzZXJ2ZWRQcm9wZXJ0eU5hbWVzO1xuICB0aGlzLl9zdXBwb3J0c01hdGVyaWFsc2ZvckVudGl0aWVzT25UZXJyYWluID0gRW50aXR5LnN1cHBvcnRzTWF0ZXJpYWxzZm9yRW50aXRpZXNPblRlcnJhaW4oXG4gICAgb3B0aW9ucy5zY2VuZVxuICApO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhHZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1bmlxdWUgSUQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdXBkYXRlclxuICAgKiBAbWVtYmVyb2YgR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGlkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEdldHMgdGhlIGVudGl0eSBhc3NvY2lhdGVkIHdpdGggdGhpcyBnZW9tZXRyeS5cbiAgICogQG1lbWJlcm9mIEdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0VudGl0eX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBlbnRpdHk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbnRpdHk7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIGlmIHRoZSBnZW9tZXRyeSBoYXMgYSBmaWxsIGNvbXBvbmVudC5cbiAgICogQG1lbWJlcm9mIEdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZmlsbEVuYWJsZWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9maWxsRW5hYmxlZDtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgaWYgZmlsbCB2aXNpYmlsaXR5IHZhcmllcyB3aXRoIHNpbXVsYXRpb24gdGltZS5cbiAgICogQG1lbWJlcm9mIEdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgaGFzQ29uc3RhbnRGaWxsOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhdGhpcy5fZmlsbEVuYWJsZWQgfHxcbiAgICAgICAgKCFkZWZpbmVkKHRoaXMuX2VudGl0eS5hdmFpbGFiaWxpdHkpICYmXG4gICAgICAgICAgUHJvcGVydHkuaXNDb25zdGFudCh0aGlzLl9zaG93UHJvcGVydHkpICYmXG4gICAgICAgICAgUHJvcGVydHkuaXNDb25zdGFudCh0aGlzLl9maWxsUHJvcGVydHkpKVxuICAgICAgKTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyB0aGUgbWF0ZXJpYWwgcHJvcGVydHkgdXNlZCB0byBmaWxsIHRoZSBnZW9tZXRyeS5cbiAgICogQG1lbWJlcm9mIEdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge01hdGVyaWFsUHJvcGVydHl9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZmlsbE1hdGVyaWFsUHJvcGVydHk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbFByb3BlcnR5O1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgZ2VvbWV0cnkgaGFzIGFuIG91dGxpbmUgY29tcG9uZW50LlxuICAgKiBAbWVtYmVyb2YgR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBvdXRsaW5lRW5hYmxlZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX291dGxpbmVFbmFibGVkO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgZ2VvbWV0cnkgaGFzIGFuIG91dGxpbmUgY29tcG9uZW50LlxuICAgKiBAbWVtYmVyb2YgR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBoYXNDb25zdGFudE91dGxpbmU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICF0aGlzLl9vdXRsaW5lRW5hYmxlZCB8fFxuICAgICAgICAoIWRlZmluZWQodGhpcy5fZW50aXR5LmF2YWlsYWJpbGl0eSkgJiZcbiAgICAgICAgICBQcm9wZXJ0eS5pc0NvbnN0YW50KHRoaXMuX3Nob3dQcm9wZXJ0eSkgJiZcbiAgICAgICAgICBQcm9wZXJ0eS5pc0NvbnN0YW50KHRoaXMuX3Nob3dPdXRsaW5lUHJvcGVydHkpKVxuICAgICAgKTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyB0aGUge0BsaW5rIENvbG9yfSBwcm9wZXJ0eSBmb3IgdGhlIGdlb21ldHJ5IG91dGxpbmUuXG4gICAqIEBtZW1iZXJvZiBHZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtQcm9wZXJ0eX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBvdXRsaW5lQ29sb3JQcm9wZXJ0eToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX291dGxpbmVDb2xvclByb3BlcnR5O1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjb25zdGFudCB3aXRoIG9mIHRoZSBnZW9tZXRyeSBvdXRsaW5lLCBpbiBwaXhlbHMuXG4gICAqIFRoaXMgdmFsdWUgaXMgb25seSB2YWxpZCBpZiBpc0R5bmFtaWMgaXMgZmFsc2UuXG4gICAqIEBtZW1iZXJvZiBHZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgb3V0bGluZVdpZHRoOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb3V0bGluZVdpZHRoO1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBzcGVjaWZ5aW5nIHdoZXRoZXIgdGhlIGdlb21ldHJ5XG4gICAqIGNhc3RzIG9yIHJlY2VpdmVzIHNoYWRvd3MgZnJvbSBsaWdodCBzb3VyY2VzLlxuICAgKiBAbWVtYmVyb2YgR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7UHJvcGVydHl9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgc2hhZG93c1Byb3BlcnR5OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2hhZG93c1Byb3BlcnR5O1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIHtAbGluayBEaXN0YW5jZURpc3BsYXlDb25kaXRpb259IFByb3BlcnR5IHNwZWNpZnlpbmcgYXQgd2hhdCBkaXN0YW5jZSBmcm9tIHRoZSBjYW1lcmEgdGhhdCB0aGlzIGdlb21ldHJ5IHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKiBAbWVtYmVyb2YgR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7UHJvcGVydHl9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uUHJvcGVydHk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kaXN0YW5jZURpc3BsYXlDb25kaXRpb25Qcm9wZXJ0eTtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSB7QGxpbmsgQ2xhc3NpZmljYXRpb25UeXBlfSBQcm9wZXJ0eSBzcGVjaWZ5aW5nIGlmIHRoaXMgZ2VvbWV0cnkgd2lsbCBjbGFzc2lmeSB0ZXJyYWluLCAzRCBUaWxlcywgb3IgYm90aCB3aGVuIG9uIHRoZSBncm91bmQuXG4gICAqIEBtZW1iZXJvZiBHZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtQcm9wZXJ0eX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBjbGFzc2lmaWNhdGlvblR5cGVQcm9wZXJ0eToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzaWZpY2F0aW9uVHlwZVByb3BlcnR5O1xuICAgIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgZ2VvbWV0cnkgaXMgdGltZS12YXJ5aW5nLlxuICAgKiBJZiB0cnVlLCBhbGwgdmlzdWFsaXphdGlvbiBpcyBkZWxlZ2F0ZWQgdG8gYSBEeW5hbWljR2VvbWV0cnlVcGRhdGVyXG4gICAqIHJldHVybmVkIGJ5IEdlb21ldHJ5VXBkYXRlciNjcmVhdGVEeW5hbWljVXBkYXRlci5cbiAgICogQG1lbWJlcm9mIEdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgaXNEeW5hbWljOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZHluYW1pYztcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZC5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IHZhbGlkIGZvciBzdGF0aWMgZ2VvbWV0cnkuXG4gICAqIEBtZW1iZXJvZiBHZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGlzQ2xvc2VkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNDbG9zZWQ7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIGlmIHRoZSBnZW9tZXRyeSBzaG91bGQgYmUgZHJhd24gb24gdGVycmFpbi5cbiAgICogQG1lbWJlcm9mIEVsbGlwc2VHZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG9uVGVycmFpbjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29uVGVycmFpbjtcbiAgICB9LFxuICB9LFxuICAvKipcbiAgICogR2V0cyBhbiBldmVudCB0aGF0IGlzIHJhaXNlZCB3aGVuZXZlciB0aGUgcHVibGljIHByb3BlcnRpZXNcbiAgICogb2YgdGhpcyB1cGRhdGVyIGNoYW5nZS5cbiAgICogQG1lbWJlcm9mIEdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2VvbWV0cnlDaGFuZ2VkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnlDaGFuZ2VkO1xuICAgIH0sXG4gIH0sXG59KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdlb21ldHJ5IGlzIG91dGxpbmVkIGF0IHRoZSBwcm92aWRlZCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7SnVsaWFuRGF0ZX0gdGltZSBUaGUgdGltZSBmb3Igd2hpY2ggdG8gcmV0cmlldmUgdmlzaWJpbGl0eS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIGdlb21ldHJ5IGlzIG91dGxpbmVkIGF0IHRoZSBwcm92aWRlZCB0aW1lLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGUuaXNPdXRsaW5lVmlzaWJsZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gIHZhciBlbnRpdHkgPSB0aGlzLl9lbnRpdHk7XG4gIHZhciB2aXNpYmxlID1cbiAgICB0aGlzLl9vdXRsaW5lRW5hYmxlZCAmJlxuICAgIGVudGl0eS5pc0F2YWlsYWJsZSh0aW1lKSAmJlxuICAgIHRoaXMuX3Nob3dQcm9wZXJ0eS5nZXRWYWx1ZSh0aW1lKSAmJlxuICAgIHRoaXMuX3Nob3dPdXRsaW5lUHJvcGVydHkuZ2V0VmFsdWUodGltZSk7XG4gIHJldHVybiBkZWZhdWx0VmFsdWUodmlzaWJsZSwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdlb21ldHJ5IGlzIGZpbGxlZCBhdCB0aGUgcHJvdmlkZWQgdGltZS5cbiAqXG4gKiBAcGFyYW0ge0p1bGlhbkRhdGV9IHRpbWUgVGhlIHRpbWUgZm9yIHdoaWNoIHRvIHJldHJpZXZlIHZpc2liaWxpdHkuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBnZW9tZXRyeSBpcyBmaWxsZWQgYXQgdGhlIHByb3ZpZGVkIHRpbWUsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZS5pc0ZpbGxlZCA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gIHZhciBlbnRpdHkgPSB0aGlzLl9lbnRpdHk7XG4gIHZhciB2aXNpYmxlID1cbiAgICB0aGlzLl9maWxsRW5hYmxlZCAmJlxuICAgIGVudGl0eS5pc0F2YWlsYWJsZSh0aW1lKSAmJlxuICAgIHRoaXMuX3Nob3dQcm9wZXJ0eS5nZXRWYWx1ZSh0aW1lKSAmJlxuICAgIHRoaXMuX2ZpbGxQcm9wZXJ0eS5nZXRWYWx1ZSh0aW1lKTtcbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZSh2aXNpYmxlLCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGdlb21ldHJ5IGluc3RhbmNlIHdoaWNoIHJlcHJlc2VudHMgdGhlIGZpbGwgb2YgdGhlIGdlb21ldHJ5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtKdWxpYW5EYXRlfSB0aW1lIFRoZSB0aW1lIHRvIHVzZSB3aGVuIHJldHJpZXZpbmcgaW5pdGlhbCBhdHRyaWJ1dGUgdmFsdWVzLlxuICogQHJldHVybnMge0dlb21ldHJ5SW5zdGFuY2V9IFRoZSBnZW9tZXRyeSBpbnN0YW5jZSByZXByZXNlbnRpbmcgdGhlIGZpbGxlZCBwb3J0aW9uIG9mIHRoZSBnZW9tZXRyeS5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gVGhpcyBpbnN0YW5jZSBkb2VzIG5vdCByZXByZXNlbnQgYSBmaWxsZWQgZ2VvbWV0cnkuXG4gKi9cbkdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGUuY3JlYXRlRmlsbEdlb21ldHJ5SW5zdGFuY2UgPVxuICBEZXZlbG9wZXJFcnJvci50aHJvd0luc3RhbnRpYXRpb25FcnJvcjtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBnZW9tZXRyeSBpbnN0YW5jZSB3aGljaCByZXByZXNlbnRzIHRoZSBvdXRsaW5lIG9mIHRoZSBnZW9tZXRyeS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7SnVsaWFuRGF0ZX0gdGltZSBUaGUgdGltZSB0byB1c2Ugd2hlbiByZXRyaWV2aW5nIGluaXRpYWwgYXR0cmlidXRlIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtHZW9tZXRyeUluc3RhbmNlfSBUaGUgZ2VvbWV0cnkgaW5zdGFuY2UgcmVwcmVzZW50aW5nIHRoZSBvdXRsaW5lIHBvcnRpb24gb2YgdGhlIGdlb21ldHJ5LlxuICpcbiAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBUaGlzIGluc3RhbmNlIGRvZXMgbm90IHJlcHJlc2VudCBhbiBvdXRsaW5lZCBnZW9tZXRyeS5cbiAqL1xuR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZS5jcmVhdGVPdXRsaW5lR2VvbWV0cnlJbnN0YW5jZSA9XG4gIERldmVsb3BlckVycm9yLnRocm93SW5zdGFudGlhdGlvbkVycm9yO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIG9iamVjdCB3YXMgZGVzdHJveWVkOyBvdGhlcndpc2UsIGZhbHNlLlxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQ7IG90aGVyd2lzZSwgZmFsc2UuXG4gKi9cbkdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGUuaXNEZXN0cm95ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVzdHJveXMgYW5kIHJlc291cmNlcyB1c2VkIGJ5IHRoZSBvYmplY3QuICBPbmNlIGFuIG9iamVjdCBpcyBkZXN0cm95ZWQsIGl0IHNob3VsZCBub3QgYmUgdXNlZC5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gVGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZCwgaS5lLiwgZGVzdHJveSgpIHdhcyBjYWxsZWQuXG4gKi9cbkdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVzdHJveU9iamVjdCh0aGlzKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7RW50aXR5fSBlbnRpdHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBnZW9tZXRyeVxuICogQHByaXZhdGVcbiAqL1xuR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZS5faXNIaWRkZW4gPSBmdW5jdGlvbiAoZW50aXR5LCBnZW9tZXRyeSkge1xuICB2YXIgc2hvdyA9IGdlb21ldHJ5LnNob3c7XG4gIHJldHVybiAoXG4gICAgZGVmaW5lZChzaG93KSAmJiBzaG93LmlzQ29uc3RhbnQgJiYgIXNob3cuZ2V0VmFsdWUoSXNvODYwMS5NSU5JTVVNX1ZBTFVFKVxuICApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VudGl0eX0gZW50aXR5XG4gKiBAcGFyYW0ge09iamVjdH0gZ2VvbWV0cnlcbiAqIEBwcml2YXRlXG4gKi9cbkdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGUuX2lzT25UZXJyYWluID0gZnVuY3Rpb24gKGVudGl0eSwgZ2VvbWV0cnkpIHtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0dlb21ldHJ5T3B0aW9uc30gb3B0aW9uc1xuICogQHByaXZhdGVcbiAqL1xuR2VvbWV0cnlVcGRhdGVyLnByb3RvdHlwZS5fZ2V0SXNDbG9zZWQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbnRpdHl9IGVudGl0eVxuICogQHBhcmFtIHtPYmplY3R9IGdlb21ldHJ5XG4gKiBAcHJpdmF0ZVxuICovXG5HZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlLl9pc0R5bmFtaWMgPSBEZXZlbG9wZXJFcnJvci50aHJvd0luc3RhbnRpYXRpb25FcnJvcjtcblxuLyoqXG4gKiBAcGFyYW0ge0VudGl0eX0gZW50aXR5XG4gKiBAcGFyYW0ge09iamVjdH0gZ2VvbWV0cnlcbiAqIEBwcml2YXRlXG4gKi9cbkdlb21ldHJ5VXBkYXRlci5wcm90b3R5cGUuX3NldFN0YXRpY09wdGlvbnMgPVxuICBEZXZlbG9wZXJFcnJvci50aHJvd0luc3RhbnRpYXRpb25FcnJvcjtcblxuLyoqXG4gKiBAcGFyYW0ge0VudGl0eX0gZW50aXR5XG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lXG4gKiBAcGFyYW0geyp9IG5ld1ZhbHVlXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG5HZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlLl9vbkVudGl0eVByb3BlcnR5Q2hhbmdlZCA9IGZ1bmN0aW9uIChcbiAgZW50aXR5LFxuICBwcm9wZXJ0eU5hbWUsXG4gIG5ld1ZhbHVlLFxuICBvbGRWYWx1ZVxuKSB7XG4gIGlmICh0aGlzLl9vYnNlcnZlZFByb3BlcnR5TmFtZXMuaW5kZXhPZihwcm9wZXJ0eU5hbWUpID09PSAtMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBnZW9tZXRyeSA9IHRoaXMuX2VudGl0eVt0aGlzLl9nZW9tZXRyeVByb3BlcnR5TmFtZV07XG5cbiAgaWYgKCFkZWZpbmVkKGdlb21ldHJ5KSkge1xuICAgIGlmICh0aGlzLl9maWxsRW5hYmxlZCB8fCB0aGlzLl9vdXRsaW5lRW5hYmxlZCkge1xuICAgICAgdGhpcy5fZmlsbEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX291dGxpbmVFbmFibGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9nZW9tZXRyeUNoYW5nZWQucmFpc2VFdmVudCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZpbGxQcm9wZXJ0eSA9IGdlb21ldHJ5LmZpbGw7XG4gIHZhciBmaWxsRW5hYmxlZCA9XG4gICAgZGVmaW5lZChmaWxsUHJvcGVydHkpICYmIGZpbGxQcm9wZXJ0eS5pc0NvbnN0YW50XG4gICAgICA/IGZpbGxQcm9wZXJ0eS5nZXRWYWx1ZShJc284NjAxLk1JTklNVU1fVkFMVUUpXG4gICAgICA6IHRydWU7XG5cbiAgdmFyIG91dGxpbmVQcm9wZXJ0eSA9IGdlb21ldHJ5Lm91dGxpbmU7XG4gIHZhciBvdXRsaW5lRW5hYmxlZCA9IGRlZmluZWQob3V0bGluZVByb3BlcnR5KTtcbiAgaWYgKG91dGxpbmVFbmFibGVkICYmIG91dGxpbmVQcm9wZXJ0eS5pc0NvbnN0YW50KSB7XG4gICAgb3V0bGluZUVuYWJsZWQgPSBvdXRsaW5lUHJvcGVydHkuZ2V0VmFsdWUoSXNvODYwMS5NSU5JTVVNX1ZBTFVFKTtcbiAgfVxuXG4gIGlmICghZmlsbEVuYWJsZWQgJiYgIW91dGxpbmVFbmFibGVkKSB7XG4gICAgaWYgKHRoaXMuX2ZpbGxFbmFibGVkIHx8IHRoaXMuX291dGxpbmVFbmFibGVkKSB7XG4gICAgICB0aGlzLl9maWxsRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fb3V0bGluZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2dlb21ldHJ5Q2hhbmdlZC5yYWlzZUV2ZW50KHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hvdyA9IGdlb21ldHJ5LnNob3c7XG4gIGlmICh0aGlzLl9pc0hpZGRlbihlbnRpdHksIGdlb21ldHJ5KSkge1xuICAgIGlmICh0aGlzLl9maWxsRW5hYmxlZCB8fCB0aGlzLl9vdXRsaW5lRW5hYmxlZCkge1xuICAgICAgdGhpcy5fZmlsbEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX291dGxpbmVFbmFibGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9nZW9tZXRyeUNoYW5nZWQucmFpc2VFdmVudCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fbWF0ZXJpYWxQcm9wZXJ0eSA9IGRlZmF1bHRWYWx1ZShnZW9tZXRyeS5tYXRlcmlhbCwgZGVmYXVsdE1hdGVyaWFsKTtcbiAgdGhpcy5fZmlsbFByb3BlcnR5ID0gZGVmYXVsdFZhbHVlKGZpbGxQcm9wZXJ0eSwgZGVmYXVsdEZpbGwpO1xuICB0aGlzLl9zaG93UHJvcGVydHkgPSBkZWZhdWx0VmFsdWUoc2hvdywgZGVmYXVsdFNob3cpO1xuICB0aGlzLl9zaG93T3V0bGluZVByb3BlcnR5ID0gZGVmYXVsdFZhbHVlKGdlb21ldHJ5Lm91dGxpbmUsIGRlZmF1bHRPdXRsaW5lKTtcbiAgdGhpcy5fb3V0bGluZUNvbG9yUHJvcGVydHkgPSBvdXRsaW5lRW5hYmxlZFxuICAgID8gZGVmYXVsdFZhbHVlKGdlb21ldHJ5Lm91dGxpbmVDb2xvciwgZGVmYXVsdE91dGxpbmVDb2xvcilcbiAgICA6IHVuZGVmaW5lZDtcbiAgdGhpcy5fc2hhZG93c1Byb3BlcnR5ID0gZGVmYXVsdFZhbHVlKGdlb21ldHJ5LnNoYWRvd3MsIGRlZmF1bHRTaGFkb3dzKTtcbiAgdGhpcy5fZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uUHJvcGVydHkgPSBkZWZhdWx0VmFsdWUoXG4gICAgZ2VvbWV0cnkuZGlzdGFuY2VEaXNwbGF5Q29uZGl0aW9uLFxuICAgIGRlZmF1bHREaXN0YW5jZURpc3BsYXlDb25kaXRpb25cbiAgKTtcbiAgdGhpcy5fY2xhc3NpZmljYXRpb25UeXBlUHJvcGVydHkgPSBkZWZhdWx0VmFsdWUoXG4gICAgZ2VvbWV0cnkuY2xhc3NpZmljYXRpb25UeXBlLFxuICAgIGRlZmF1bHRDbGFzc2lmaWNhdGlvblR5cGVcbiAgKTtcblxuICB0aGlzLl9maWxsRW5hYmxlZCA9IGZpbGxFbmFibGVkO1xuXG4gIHZhciBvblRlcnJhaW4gPVxuICAgIHRoaXMuX2lzT25UZXJyYWluKGVudGl0eSwgZ2VvbWV0cnkpICYmXG4gICAgKHRoaXMuX3N1cHBvcnRzTWF0ZXJpYWxzZm9yRW50aXRpZXNPblRlcnJhaW4gfHxcbiAgICAgIHRoaXMuX21hdGVyaWFsUHJvcGVydHkgaW5zdGFuY2VvZiBDb2xvck1hdGVyaWFsUHJvcGVydHkpO1xuXG4gIGlmIChvdXRsaW5lRW5hYmxlZCAmJiBvblRlcnJhaW4pIHtcbiAgICBvbmVUaW1lV2FybmluZyhvbmVUaW1lV2FybmluZy5nZW9tZXRyeU91dGxpbmVzKTtcbiAgICBvdXRsaW5lRW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgdGhpcy5fb25UZXJyYWluID0gb25UZXJyYWluO1xuICB0aGlzLl9vdXRsaW5lRW5hYmxlZCA9IG91dGxpbmVFbmFibGVkO1xuXG4gIGlmICh0aGlzLl9pc0R5bmFtaWMoZW50aXR5LCBnZW9tZXRyeSkpIHtcbiAgICBpZiAoIXRoaXMuX2R5bmFtaWMpIHtcbiAgICAgIHRoaXMuX2R5bmFtaWMgPSB0cnVlO1xuICAgICAgdGhpcy5fZ2VvbWV0cnlDaGFuZ2VkLnJhaXNlRXZlbnQodGhpcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX3NldFN0YXRpY09wdGlvbnMoZW50aXR5LCBnZW9tZXRyeSk7XG4gICAgdGhpcy5faXNDbG9zZWQgPSB0aGlzLl9nZXRJc0Nsb3NlZCh0aGlzLl9vcHRpb25zKTtcbiAgICB2YXIgb3V0bGluZVdpZHRoID0gZ2VvbWV0cnkub3V0bGluZVdpZHRoO1xuICAgIHRoaXMuX291dGxpbmVXaWR0aCA9IGRlZmluZWQob3V0bGluZVdpZHRoKVxuICAgICAgPyBvdXRsaW5lV2lkdGguZ2V0VmFsdWUoSXNvODYwMS5NSU5JTVVNX1ZBTFVFKVxuICAgICAgOiAxLjA7XG4gICAgdGhpcy5fZHluYW1pYyA9IGZhbHNlO1xuICAgIHRoaXMuX2dlb21ldHJ5Q2hhbmdlZC5yYWlzZUV2ZW50KHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGR5bmFtaWMgdXBkYXRlciB0byBiZSB1c2VkIHdoZW4gR2VvbWV0cnlVcGRhdGVyI2lzRHluYW1pYyBpcyB0cnVlLlxuICpcbiAqIEBwYXJhbSB7UHJpbWl0aXZlQ29sbGVjdGlvbn0gcHJpbWl0aXZlcyBUaGUgcHJpbWl0aXZlIGNvbGxlY3Rpb24gdG8gdXNlLlxuICogQHBhcmFtIHtQcmltaXRpdmVDb2xsZWN0aW9ufSBbZ3JvdW5kUHJpbWl0aXZlc10gVGhlIHByaW1pdGl2ZSBjb2xsZWN0aW9uIHRvIHVzZSBmb3IgZ3JvdW5kIHByaW1pdGl2ZXMuXG4gKlxuICogQHJldHVybnMge0R5bmFtaWNHZW9tZXRyeVVwZGF0ZXJ9IFRoZSBkeW5hbWljIHVwZGF0ZXIgdXNlZCB0byB1cGRhdGUgdGhlIGdlb21ldHJ5IGVhY2ggZnJhbWUuXG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoaXMgaW5zdGFuY2UgZG9lcyBub3QgcmVwcmVzZW50IGR5bmFtaWMgZ2VvbWV0cnkuXG4gKiBAcHJpdmF0ZVxuICovXG5HZW9tZXRyeVVwZGF0ZXIucHJvdG90eXBlLmNyZWF0ZUR5bmFtaWNVcGRhdGVyID0gZnVuY3Rpb24gKFxuICBwcmltaXRpdmVzLFxuICBncm91bmRQcmltaXRpdmVzXG4pIHtcbiAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgQ2hlY2suZGVmaW5lZChcInByaW1pdGl2ZXNcIiwgcHJpbWl0aXZlcyk7XG4gIENoZWNrLmRlZmluZWQoXCJncm91bmRQcmltaXRpdmVzXCIsIGdyb3VuZFByaW1pdGl2ZXMpO1xuXG4gIGlmICghdGhpcy5fZHluYW1pYykge1xuICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcihcbiAgICAgIFwiVGhpcyBpbnN0YW5jZSBkb2VzIG5vdCByZXByZXNlbnQgZHluYW1pYyBnZW9tZXRyeS5cIlxuICAgICk7XG4gIH1cbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yLkR5bmFtaWNHZW9tZXRyeVVwZGF0ZXIoXG4gICAgdGhpcyxcbiAgICBwcmltaXRpdmVzLFxuICAgIGdyb3VuZFByaW1pdGl2ZXNcbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBHZW9tZXRyeVVwZGF0ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17045\n')},60500:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_AssociativeArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8629);\n/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(86511);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14459);\n/* harmony import */ var _Core_EventHelper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79539);\n/* harmony import */ var _Scene_ClassificationType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(73001);\n/* harmony import */ var _Scene_MaterialAppearance_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(79158);\n/* harmony import */ var _Scene_PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(64060);\n/* harmony import */ var _Scene_ShadowMode_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(34125);\n/* harmony import */ var _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(69895);\n/* harmony import */ var _BoxGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(52777);\n/* harmony import */ var _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(20174);\n/* harmony import */ var _CorridorGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(91166);\n/* harmony import */ var _CylinderGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(43894);\n/* harmony import */ var _DynamicGeometryBatch_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(22425);\n/* harmony import */ var _EllipseGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(28698);\n/* harmony import */ var _EllipsoidGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(16884);\n/* harmony import */ var _Entity_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(11895);\n/* harmony import */ var _PlaneGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(397);\n/* harmony import */ var _PolygonGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(62373);\n/* harmony import */ var _PolylineVolumeGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(24818);\n/* harmony import */ var _RectangleGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(54749);\n/* harmony import */ var _StaticGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(81189);\n/* harmony import */ var _StaticGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(30487);\n/* harmony import */ var _StaticGroundGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(4371);\n/* harmony import */ var _StaticGroundGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(65249);\n/* harmony import */ var _StaticOutlineGeometryBatch_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(29596);\n/* harmony import */ var _WallGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(97167);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar emptyArray = [];\n\nvar geometryUpdaters = [\n  _BoxGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z,\n  _CylinderGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z,\n  _CorridorGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z,\n  _EllipseGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z,\n  _EllipsoidGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z,\n  _PlaneGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z,\n  _PolygonGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z,\n  _PolylineVolumeGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z,\n  _RectangleGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z,\n  _WallGeometryUpdater_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z,\n];\n\nfunction GeometryUpdaterSet(entity, scene) {\n  this.entity = entity;\n  this.scene = scene;\n  var updaters = new Array(geometryUpdaters.length);\n  var geometryChanged = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n  function raiseEvent(geometry) {\n    geometryChanged.raiseEvent(geometry);\n  }\n  var eventHelper = new _Core_EventHelper_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n  for (var i = 0; i < updaters.length; i++) {\n    var updater = new geometryUpdaters[i](entity, scene);\n    eventHelper.add(updater.geometryChanged, raiseEvent);\n    updaters[i] = updater;\n  }\n  this.updaters = updaters;\n  this.geometryChanged = geometryChanged;\n  this.eventHelper = eventHelper;\n\n  this._removeEntitySubscription = entity.definitionChanged.addEventListener(\n    GeometryUpdaterSet.prototype._onEntityPropertyChanged,\n    this\n  );\n}\n\nGeometryUpdaterSet.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  var updaters = this.updaters;\n  for (var i = 0; i < updaters.length; i++) {\n    updaters[i]._onEntityPropertyChanged(\n      entity,\n      propertyName,\n      newValue,\n      oldValue\n    );\n  }\n};\n\nGeometryUpdaterSet.prototype.forEach = function (callback) {\n  var updaters = this.updaters;\n  for (var i = 0; i < updaters.length; i++) {\n    callback(updaters[i]);\n  }\n};\n\nGeometryUpdaterSet.prototype.destroy = function () {\n  this.eventHelper.removeAll();\n  var updaters = this.updaters;\n  for (var i = 0; i < updaters.length; i++) {\n    updaters[i].destroy();\n  }\n  this._removeEntitySubscription();\n  (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this);\n};\n\n/**\n * A general purpose visualizer for geometry represented by {@link Primitive} instances.\n * @alias GeometryVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n */\nfunction GeometryVisualizer(\n  scene,\n  entityCollection,\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("scene", scene);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("entityCollection", entityCollection);\n  //>>includeEnd(\'debug\');\n\n  primitives = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(primitives, scene.primitives);\n  groundPrimitives = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(groundPrimitives, scene.groundPrimitives);\n\n  this._scene = scene;\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n  this._entityCollection = undefined;\n  this._addedObjects = new _Core_AssociativeArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._removedObjects = new _Core_AssociativeArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._changedObjects = new _Core_AssociativeArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n  var numberOfShadowModes = _Scene_ShadowMode_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NUMBER_OF_SHADOW_MODES */ .Z.NUMBER_OF_SHADOW_MODES;\n  this._outlineBatches = new Array(numberOfShadowModes * 2);\n  this._closedColorBatches = new Array(numberOfShadowModes * 2);\n  this._closedMaterialBatches = new Array(numberOfShadowModes * 2);\n  this._openColorBatches = new Array(numberOfShadowModes * 2);\n  this._openMaterialBatches = new Array(numberOfShadowModes * 2);\n\n  var supportsMaterialsforEntitiesOnTerrain = _Entity_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].supportsMaterialsforEntitiesOnTerrain */ .Z.supportsMaterialsforEntitiesOnTerrain(\n    scene\n  );\n  this._supportsMaterialsforEntitiesOnTerrain = supportsMaterialsforEntitiesOnTerrain;\n\n  var i;\n  for (i = 0; i < numberOfShadowModes; ++i) {\n    this._outlineBatches[i] = new _StaticOutlineGeometryBatch_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z(\n      primitives,\n      scene,\n      i,\n      false\n    );\n    this._outlineBatches[\n      numberOfShadowModes + i\n    ] = new _StaticOutlineGeometryBatch_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z(primitives, scene, i, true);\n\n    this._closedColorBatches[i] = new _StaticGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(\n      primitives,\n      _Scene_PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n      undefined,\n      true,\n      i,\n      true\n    );\n    this._closedColorBatches[\n      numberOfShadowModes + i\n    ] = new _StaticGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(\n      primitives,\n      _Scene_PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n      undefined,\n      true,\n      i,\n      false\n    );\n\n    this._closedMaterialBatches[i] = new _StaticGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z(\n      primitives,\n      _Scene_MaterialAppearance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n      undefined,\n      true,\n      i,\n      true\n    );\n    this._closedMaterialBatches[\n      numberOfShadowModes + i\n    ] = new _StaticGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z(\n      primitives,\n      _Scene_MaterialAppearance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n      undefined,\n      true,\n      i,\n      false\n    );\n\n    this._openColorBatches[i] = new _StaticGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(\n      primitives,\n      _Scene_PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n      undefined,\n      false,\n      i,\n      true\n    );\n    this._openColorBatches[\n      numberOfShadowModes + i\n    ] = new _StaticGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(\n      primitives,\n      _Scene_PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n      undefined,\n      false,\n      i,\n      false\n    );\n\n    this._openMaterialBatches[i] = new _StaticGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z(\n      primitives,\n      _Scene_MaterialAppearance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n      undefined,\n      false,\n      i,\n      true\n    );\n    this._openMaterialBatches[\n      numberOfShadowModes + i\n    ] = new _StaticGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z(\n      primitives,\n      _Scene_MaterialAppearance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n      undefined,\n      false,\n      i,\n      false\n    );\n  }\n\n  var numberOfClassificationTypes =\n    _Scene_ClassificationType_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].NUMBER_OF_CLASSIFICATION_TYPES */ .Z.NUMBER_OF_CLASSIFICATION_TYPES;\n  var groundColorBatches = new Array(numberOfClassificationTypes);\n  var groundMaterialBatches = [];\n  if (supportsMaterialsforEntitiesOnTerrain) {\n    for (i = 0; i < numberOfClassificationTypes; ++i) {\n      groundMaterialBatches.push(\n        new _StaticGroundGeometryPerMaterialBatch_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z(\n          groundPrimitives,\n          i,\n          _Scene_MaterialAppearance_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z\n        )\n      );\n      groundColorBatches[i] = new _StaticGroundGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z(\n        groundPrimitives,\n        i\n      );\n    }\n  } else {\n    for (i = 0; i < numberOfClassificationTypes; ++i) {\n      groundColorBatches[i] = new _StaticGroundGeometryColorBatch_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z(\n        groundPrimitives,\n        i\n      );\n    }\n  }\n\n  this._groundColorBatches = groundColorBatches;\n  this._groundMaterialBatches = groundMaterialBatches;\n\n  this._dynamicBatch = new _DynamicGeometryBatch_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z(primitives, groundPrimitives);\n\n  this._batches = this._outlineBatches.concat(\n    this._closedColorBatches,\n    this._closedMaterialBatches,\n    this._openColorBatches,\n    this._openMaterialBatches,\n    this._groundColorBatches,\n    this._groundMaterialBatches,\n    this._dynamicBatch\n  );\n\n  this._subscriptions = new _Core_AssociativeArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._updaterSets = new _Core_AssociativeArray_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n  this._entityCollection = entityCollection;\n  entityCollection.collectionChanged.addEventListener(\n    GeometryVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  this._onCollectionChanged(\n    entityCollection,\n    entityCollection.values,\n    emptyArray\n  );\n}\n\n/**\n * Updates all of the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n * false if the visualizer is waiting for asynchronous primitives to be created.\n */\nGeometryVisualizer.prototype.update = function (time) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("time", time);\n  //>>includeEnd(\'debug\');\n\n  var addedObjects = this._addedObjects;\n  var added = addedObjects.values;\n  var removedObjects = this._removedObjects;\n  var removed = removedObjects.values;\n  var changedObjects = this._changedObjects;\n  var changed = changedObjects.values;\n\n  var i;\n  var entity;\n  var id;\n  var updaterSet;\n  var that = this;\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    id = entity.id;\n    updaterSet = this._updaterSets.get(id);\n\n    //If in a single update, an entity gets removed and a new instance\n    //re-added with the same id, the updater no longer tracks the\n    //correct entity, we need to both remove the old one and\n    //add the new one, which is done by pushing the entity\n    //onto the removed/added lists.\n    if (updaterSet.entity === entity) {\n      updaterSet.forEach(function (updater) {\n        that._removeUpdater(updater);\n        that._insertUpdaterIntoBatch(time, updater);\n      });\n    } else {\n      removed.push(entity);\n      added.push(entity);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    id = entity.id;\n    updaterSet = this._updaterSets.get(id);\n    updaterSet.forEach(this._removeUpdater.bind(this));\n    updaterSet.destroy();\n    this._updaterSets.remove(id);\n    this._subscriptions.get(id)();\n    this._subscriptions.remove(id);\n  }\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    id = entity.id;\n    updaterSet = new GeometryUpdaterSet(entity, this._scene);\n    this._updaterSets.set(id, updaterSet);\n    updaterSet.forEach(function (updater) {\n      that._insertUpdaterIntoBatch(time, updater);\n    });\n    this._subscriptions.set(\n      id,\n      updaterSet.geometryChanged.addEventListener(\n        GeometryVisualizer._onGeometryChanged,\n        this\n      )\n    );\n  }\n\n  addedObjects.removeAll();\n  removedObjects.removeAll();\n  changedObjects.removeAll();\n\n  var isUpdated = true;\n  var batches = this._batches;\n  var length = batches.length;\n  for (i = 0; i < length; i++) {\n    isUpdated = batches[i].update(time) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nvar getBoundingSphereArrayScratch = [];\nvar getBoundingSphereBoundingSphereScratch = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene\'s globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nGeometryVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("entity", entity);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].defined */ .Z.defined("result", result);\n  //>>includeEnd(\'debug\');\n\n  var boundingSpheres = getBoundingSphereArrayScratch;\n  var tmp = getBoundingSphereBoundingSphereScratch;\n\n  var count = 0;\n  var state = _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].DONE */ .Z.DONE;\n  var batches = this._batches;\n  var batchesLength = batches.length;\n\n  var id = entity.id;\n  var updaters = this._updaterSets.get(id).updaters;\n\n  for (var j = 0; j < updaters.length; j++) {\n    var updater = updaters[j];\n    for (var i = 0; i < batchesLength; i++) {\n      state = batches[i].getBoundingSphere(updater, tmp);\n      if (state === _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].PENDING */ .Z.PENDING) {\n        return _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].PENDING */ .Z.PENDING;\n      } else if (state === _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].DONE */ .Z.DONE) {\n        boundingSpheres[count] = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n          tmp,\n          boundingSpheres[count]\n        );\n        count++;\n      }\n    }\n  }\n\n  if (count === 0) {\n    return _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].FAILED */ .Z.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromBoundingSpheres */ .Z.fromBoundingSpheres(boundingSpheres, result);\n  return _BoundingSphereState_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].DONE */ .Z.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nGeometryVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    GeometryVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  this._addedObjects.removeAll();\n  this._removedObjects.removeAll();\n\n  var i;\n  var batches = this._batches;\n  var length = batches.length;\n  for (i = 0; i < length; i++) {\n    batches[i].removeAllPrimitives();\n  }\n\n  var subscriptions = this._subscriptions.values;\n  length = subscriptions.length;\n  for (i = 0; i < length; i++) {\n    subscriptions[i]();\n  }\n  this._subscriptions.removeAll();\n\n  var updaterSets = this._updaterSets.values;\n  length = updaterSets.length;\n  for (i = 0; i < length; i++) {\n    updaterSets[i].destroy();\n  }\n  this._updaterSets.removeAll();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this);\n};\n\n/**\n * @private\n */\nGeometryVisualizer.prototype._removeUpdater = function (updater) {\n  //We don\'t keep track of which batch an updater is in, so just remove it from all of them.\n  var batches = this._batches;\n  var length = batches.length;\n  for (var i = 0; i < length; i++) {\n    batches[i].remove(updater);\n  }\n};\n\n/**\n * @private\n */\nGeometryVisualizer.prototype._insertUpdaterIntoBatch = function (\n  time,\n  updater\n) {\n  if (updater.isDynamic) {\n    this._dynamicBatch.add(time, updater);\n    return;\n  }\n\n  var shadows;\n  if (updater.outlineEnabled || updater.fillEnabled) {\n    shadows = updater.shadowsProperty.getValue(time);\n  }\n\n  var numberOfShadowModes = _Scene_ShadowMode_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].NUMBER_OF_SHADOW_MODES */ .Z.NUMBER_OF_SHADOW_MODES;\n  if (updater.outlineEnabled) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(updater.terrainOffsetProperty)) {\n      this._outlineBatches[numberOfShadowModes + shadows].add(time, updater);\n    } else {\n      this._outlineBatches[shadows].add(time, updater);\n    }\n  }\n\n  if (updater.fillEnabled) {\n    if (updater.onTerrain) {\n      var classificationType = updater.classificationTypeProperty.getValue(\n        time\n      );\n      if (updater.fillMaterialProperty instanceof _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z) {\n        this._groundColorBatches[classificationType].add(time, updater);\n      } else {\n        // If unsupported, updater will not be on terrain.\n        this._groundMaterialBatches[classificationType].add(time, updater);\n      }\n    } else if (updater.isClosed) {\n      if (updater.fillMaterialProperty instanceof _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z) {\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(updater.terrainOffsetProperty)) {\n          this._closedColorBatches[numberOfShadowModes + shadows].add(\n            time,\n            updater\n          );\n        } else {\n          this._closedColorBatches[shadows].add(time, updater);\n        }\n      } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(updater.terrainOffsetProperty)) {\n        this._closedMaterialBatches[numberOfShadowModes + shadows].add(\n          time,\n          updater\n        );\n      } else {\n        this._closedMaterialBatches[shadows].add(time, updater);\n      }\n    } else if (updater.fillMaterialProperty instanceof _ColorMaterialProperty_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(updater.terrainOffsetProperty)) {\n        this._openColorBatches[numberOfShadowModes + shadows].add(\n          time,\n          updater\n        );\n      } else {\n        this._openColorBatches[shadows].add(time, updater);\n      }\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(updater.terrainOffsetProperty)) {\n      this._openMaterialBatches[numberOfShadowModes + shadows].add(\n        time,\n        updater\n      );\n    } else {\n      this._openMaterialBatches[shadows].add(time, updater);\n    }\n  }\n};\n\n/**\n * @private\n */\nGeometryVisualizer._onGeometryChanged = function (updater) {\n  var removedObjects = this._removedObjects;\n  var changedObjects = this._changedObjects;\n\n  var entity = updater.entity;\n  var id = entity.id;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(removedObjects.get(id)) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(changedObjects.get(id))) {\n    changedObjects.set(id, entity);\n  }\n};\n\n/**\n * @private\n */\nGeometryVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed\n) {\n  var addedObjects = this._addedObjects;\n  var removedObjects = this._removedObjects;\n  var changedObjects = this._changedObjects;\n\n  var i;\n  var id;\n  var entity;\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    id = entity.id;\n    if (!addedObjects.remove(id)) {\n      removedObjects.set(id, entity);\n      changedObjects.remove(id);\n    }\n  }\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    id = entity.id;\n    if (removedObjects.remove(id)) {\n      changedObjects.set(id, entity);\n    } else {\n      addedObjects.set(id, entity);\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GeometryVisualizer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60500\n')},84903:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(90203);\n/* harmony import */ var _Property_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40112);\n\n\n\n\n\n\n\n\nvar defaultColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE;\nvar defaultCellAlpha = 0.1;\nvar defaultLineCount = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(8, 8);\nvar defaultLineOffset = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0, 0);\nvar defaultLineThickness = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1, 1);\n\n/**\n * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\n * @alias GridMaterialProperty\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\n * @param {Property|Number} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\n * @param {Property|Cartesian2} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\n *\n * @constructor\n */\nfunction GridMaterialProperty(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._definitionChanged = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._cellAlpha = undefined;\n  this._cellAlphaSubscription = undefined;\n  this._lineCount = undefined;\n  this._lineCountSubscription = undefined;\n  this._lineThickness = undefined;\n  this._lineThicknessSubscription = undefined;\n  this._lineOffset = undefined;\n  this._lineOffsetSubscription = undefined;\n\n  this.color = options.color;\n  this.cellAlpha = options.cellAlpha;\n  this.lineCount = options.lineCount;\n  this.lineThickness = options.lineThickness;\n  this.lineOffset = options.lineOffset;\n}\n\nObject.defineProperties(GridMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._color) &&\n        _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._cellAlpha) &&\n        _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._lineCount) &&\n        _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._lineThickness) &&\n        _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._lineOffset)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the grid {@link Color}.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("color"),\n\n  /**\n   * Gets or sets the numeric Property specifying cell alpha values.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 0.1\n   */\n  cellAlpha: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("cellAlpha"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(8.0, 8.0)\n   */\n  lineCount: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("lineCount"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  lineThickness: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("lineThickness"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(0.0, 0.0)\n   */\n  lineOffset: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("lineOffset"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nGridMaterialProperty.prototype.getType = function (time) {\n  return "Grid";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nGridMaterialProperty.prototype.getValue = function (time, result) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(result)) {\n    result = {};\n  }\n  result.color = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrClonedDefault */ .Z.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.cellAlpha = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrDefault */ .Z.getValueOrDefault(\n    this._cellAlpha,\n    time,\n    defaultCellAlpha\n  );\n  result.lineCount = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrClonedDefault */ .Z.getValueOrClonedDefault(\n    this._lineCount,\n    time,\n    defaultLineCount,\n    result.lineCount\n  );\n  result.lineThickness = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrClonedDefault */ .Z.getValueOrClonedDefault(\n    this._lineThickness,\n    time,\n    defaultLineThickness,\n    result.lineThickness\n  );\n  result.lineOffset = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrClonedDefault */ .Z.getValueOrClonedDefault(\n    this._lineOffset,\n    time,\n    defaultLineOffset,\n    result.lineOffset\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nGridMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof GridMaterialProperty && //\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._color, other._color) && //\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._cellAlpha, other._cellAlpha) && //\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._lineCount, other._lineCount) && //\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._lineThickness, other._lineThickness) && //\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._lineOffset, other._lineOffset))\n  );\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GridMaterialProperty);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84903\n')},8254:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(87379);\n/* harmony import */ var _Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27671);\n/* harmony import */ var _Scene_GroundPrimitive_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(47780);\n/* harmony import */ var _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4260);\n/* harmony import */ var _CallbackProperty_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11249);\n/* harmony import */ var _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(612);\n/* harmony import */ var _GeometryUpdater_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(17045);\n/* harmony import */ var _TerrainOffsetProperty_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(18743);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultZIndex = new _ConstantProperty_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(0);\n\n/**\n * An abstract class for updating ground geometry entities.\n * @constructor\n * @alias GroundGeometryUpdater\n * @param {Object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {Object} options.geometryOptions Options for the geometry\n * @param {String} options.geometryPropertyName The geometry property name\n * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GroundGeometryUpdater(options) {\n  _GeometryUpdater_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].call */ .Z.call(this, options);\n\n  this._zIndex = 0;\n  this._terrainOffsetProperty = undefined;\n}\n\nif ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(Object.create)) {\n  GroundGeometryUpdater.prototype = Object.create(_GeometryUpdater_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].prototype */ .Z.prototype);\n  GroundGeometryUpdater.prototype.constructor = GroundGeometryUpdater;\n}\n\nObject.defineProperties(GroundGeometryUpdater.prototype, {\n  /**\n   * Gets the zindex\n   * @type {Number}\n   * @memberof GroundGeometryUpdater.prototype\n   * @readonly\n   */\n  zIndex: {\n    get: function () {\n      return this._zIndex;\n    },\n  },\n\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof GroundGeometryUpdater.prototype\n   * @readonly\n   * @private\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\nGroundGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return (\n    this._fillEnabled &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(geometry.height) &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(geometry.extrudedHeight) &&\n    _Scene_GroundPrimitive_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isSupported */ .Z.isSupported(this._scene)\n  );\n};\n\nGroundGeometryUpdater.prototype._getIsClosed = function (options) {\n  var height = options.height;\n  var extrudedHeight = options.extrudedHeight;\n  return height === 0 || ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(extrudedHeight) && extrudedHeight !== height);\n};\n\nGroundGeometryUpdater.prototype._computeCenter =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\nGroundGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  _GeometryUpdater_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].prototype._onEntityPropertyChanged.call */ .Z.prototype._onEntityPropertyChanged.call(\n    this,\n    entity,\n    propertyName,\n    newValue,\n    oldValue\n  );\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  var geometry = this._entity[this._geometryPropertyName];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(geometry)) {\n    return;\n  }\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(geometry.zIndex) &&\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(geometry.height) || (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(geometry.extrudedHeight))\n  ) {\n    (0,_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].geometryZIndex */ .Z.geometryZIndex);\n  }\n\n  this._zIndex = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(geometry.zIndex, defaultZIndex);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(this._terrainOffsetProperty)) {\n    this._terrainOffsetProperty.destroy();\n    this._terrainOffsetProperty = undefined;\n  }\n\n  var heightReferenceProperty = geometry.heightReference;\n  var extrudedHeightReferenceProperty = geometry.extrudedHeightReference;\n\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(heightReferenceProperty) ||\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(extrudedHeightReferenceProperty)\n  ) {\n    var centerPosition = new _CallbackProperty_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n      this._computeCenter.bind(this),\n      !this._dynamic\n    );\n    this._terrainOffsetProperty = new _TerrainOffsetProperty_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n      this._scene,\n      centerPosition,\n      heightReferenceProperty,\n      extrudedHeightReferenceProperty\n    );\n  }\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGroundGeometryUpdater.prototype.destroy = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(this._terrainOffsetProperty)) {\n    this._terrainOffsetProperty.destroy();\n    this._terrainOffsetProperty = undefined;\n  }\n\n  _GeometryUpdater_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].prototype.destroy.call */ .Z.prototype.destroy.call(this);\n};\n\n/**\n * @private\n */\nGroundGeometryUpdater.getGeometryHeight = function (height, heightReference) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("heightReference", heightReference);\n  //>>includeEnd(\'debug\');\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(height)) {\n    if (heightReference !== _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].NONE */ .Z.NONE) {\n      (0,_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].geometryHeightReference */ .Z.geometryHeightReference);\n    }\n    return;\n  }\n\n  if (heightReference !== _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].CLAMP_TO_GROUND */ .Z.CLAMP_TO_GROUND) {\n    return height;\n  }\n  return 0.0;\n};\n\n/**\n * @private\n */\nGroundGeometryUpdater.getGeometryExtrudedHeight = function (\n  extrudedHeight,\n  extrudedHeightReference\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("extrudedHeightReference", extrudedHeightReference);\n  //>>includeEnd(\'debug\');\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(extrudedHeight)) {\n    if (extrudedHeightReference !== _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].NONE */ .Z.NONE) {\n      (0,_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(_Core_oneTimeWarning_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].geometryExtrudedHeightReference */ .Z.geometryExtrudedHeightReference);\n    }\n    return;\n  }\n  if (extrudedHeightReference !== _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].CLAMP_TO_GROUND */ .Z.CLAMP_TO_GROUND) {\n    return extrudedHeight;\n  }\n\n  return GroundGeometryUpdater.CLAMP_TO_GROUND;\n};\n\n/**\n * @private\n */\nGroundGeometryUpdater.CLAMP_TO_GROUND = "clamp";\n\n/**\n * @private\n */\nGroundGeometryUpdater.computeGeometryOffsetAttribute = function (\n  height,\n  heightReference,\n  extrudedHeight,\n  extrudedHeightReference\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(height) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(heightReference)) {\n    heightReference = _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].NONE */ .Z.NONE;\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(extrudedHeight) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(extrudedHeightReference)) {\n    extrudedHeightReference = _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].NONE */ .Z.NONE;\n  }\n  var n = 0;\n  if (heightReference !== _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].NONE */ .Z.NONE) {\n    n++;\n  }\n  if (extrudedHeightReference === _Scene_HeightReference_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].RELATIVE_TO_GROUND */ .Z.RELATIVE_TO_GROUND) {\n    n++;\n  }\n  if (n === 2) {\n    return _Core_GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ALL */ .Z.ALL;\n  }\n  if (n === 1) {\n    return _Core_GeometryOffsetAttribute_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].TOP */ .Z.TOP;\n  }\n\n  return undefined;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GroundGeometryUpdater);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8254\n')},33796:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14459);\n/* harmony import */ var _createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(90203);\n/* harmony import */ var _Property_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40112);\n\n\n\n\n\n\n\n\nvar defaultRepeat = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1, 1);\nvar defaultTransparent = false;\nvar defaultColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].WHITE */ .Z.WHITE;\n\n/**\n * A {@link MaterialProperty} that maps to image {@link Material} uniforms.\n * @alias ImageMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|String|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [options.image] A Property specifying the Image, URL, Canvas, or Video.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n * @param {Property|Color} [options.color=Color.WHITE] The color applied to the image\n * @param {Property|Boolean} [options.transparent=false] Set to true when the image has transparency (for example, when a png has transparent sections)\n */\nfunction ImageMaterialProperty(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._definitionChanged = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._transparent = undefined;\n  this._transparentSubscription = undefined;\n\n  this.image = options.image;\n  this.repeat = options.repeat;\n  this.color = options.color;\n  this.transparent = options.transparent;\n}\n\nObject.defineProperties(ImageMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._image) && _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isConstant */ .Z.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying Image, URL, Canvas, or Video to use.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  image: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("image"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1, 1)\n   */\n  repeat: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("repeat"),\n\n  /**\n   * Gets or sets the Color Property specifying the desired color applied to the image.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  color: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("color"),\n\n  /**\n   * Gets or sets the Boolean Property specifying whether the image has transparency\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  transparent: (0,_createPropertyDescriptor_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)("transparent"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nImageMaterialProperty.prototype.getType = function (time) {\n  return "Image";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nImageMaterialProperty.prototype.getValue = function (time, result) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(result)) {\n    result = {};\n  }\n\n  result.image = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrUndefined */ .Z.getValueOrUndefined(this._image, time);\n  result.repeat = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrClonedDefault */ .Z.getValueOrClonedDefault(\n    this._repeat,\n    time,\n    defaultRepeat,\n    result.repeat\n  );\n  result.color = _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrClonedDefault */ .Z.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  if (_Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].getValueOrDefault */ .Z.getValueOrDefault(this._transparent, time, defaultTransparent)) {\n    result.color.alpha = Math.min(0.99, result.color.alpha);\n  }\n\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nImageMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ImageMaterialProperty &&\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._image, other._image) &&\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._repeat, other._repeat) &&\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._color, other._color) &&\n      _Property_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equals */ .Z.equals(this._transparent, other._transparent))\n  );\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ImageMaterialProperty);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33796\n')},25320:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('\n// UNUSED EXPORTS: default\n\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/ArcType.js\nvar ArcType = __webpack_require__(11491);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/AssociativeArray.js\nvar AssociativeArray = __webpack_require__(8629);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/BoundingRectangle.js\nvar BoundingRectangle = __webpack_require__(88108);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Cartesian2.js\nvar Cartesian2 = __webpack_require__(60838);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Cartesian3.js\nvar Cartesian3 = __webpack_require__(60216);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Cartographic.js\nvar Cartographic = __webpack_require__(51688);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/ClockRange.js\nvar ClockRange = __webpack_require__(44159);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/ClockStep.js\nvar ClockStep = __webpack_require__(96627);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/clone.js\nvar clone = __webpack_require__(83856);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Color.js\nvar Color = __webpack_require__(59947);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/createGuid.js\nvar createGuid = __webpack_require__(39960);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Credit.js\nvar Credit = __webpack_require__(52975);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/defaultValue.js\nvar defaultValue = __webpack_require__(62200);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/defined.js\nvar defined = __webpack_require__(82982);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/DeveloperError.js\nvar DeveloperError = __webpack_require__(12572);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Ellipsoid.js\nvar Ellipsoid = __webpack_require__(50491);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Event.js\nvar Event = __webpack_require__(14459);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/getExtensionFromUri.js\nvar getExtensionFromUri = __webpack_require__(83931);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/getFilenameFromUri.js\nvar getFilenameFromUri = __webpack_require__(8962);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/getTimestamp.js\nvar getTimestamp = __webpack_require__(59081);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/HeadingPitchRange.js\nvar HeadingPitchRange = __webpack_require__(99819);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/HeadingPitchRoll.js\nvar HeadingPitchRoll = __webpack_require__(57674);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Iso8601.js\nvar Iso8601 = __webpack_require__(22841);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/JulianDate.js\nvar JulianDate = __webpack_require__(55293);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Math.js\nvar Core_Math = __webpack_require__(99417);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/NearFarScalar.js\nvar NearFarScalar = __webpack_require__(15720);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/objectToQuery.js\nvar objectToQuery = __webpack_require__(72804);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/oneTimeWarning.js\nvar oneTimeWarning = __webpack_require__(27671);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/PinBuilder.js\nvar PinBuilder = __webpack_require__(78318);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/PolygonHierarchy.js\nvar PolygonHierarchy = __webpack_require__(78757);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/queryToObject.js\nvar queryToObject = __webpack_require__(95037);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Rectangle.js\nvar Rectangle = __webpack_require__(96190);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/Resource.js\nvar Resource = __webpack_require__(68985);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/RuntimeError.js\nvar RuntimeError = __webpack_require__(9407);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/TimeInterval.js\nvar TimeInterval = __webpack_require__(77808);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Core/TimeIntervalCollection.js\nvar TimeIntervalCollection = __webpack_require__(46026);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Scene/HeightReference.js\nvar HeightReference = __webpack_require__(4260);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Scene/HorizontalOrigin.js\nvar HorizontalOrigin = __webpack_require__(62919);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Scene/LabelStyle.js\nvar LabelStyle = __webpack_require__(81208);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/Scene/SceneMode.js\nvar SceneMode = __webpack_require__(89917);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/ThirdParty/Autolinker.js\nvar Autolinker = __webpack_require__(99574);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/ThirdParty/Uri.js\nvar Uri = __webpack_require__(93922);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/ThirdParty/when.js\nvar when = __webpack_require__(13222);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/ThirdParty/zip.js\nvar zip = __webpack_require__(92678);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/BillboardGraphics.js\nvar BillboardGraphics = __webpack_require__(44011);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/CompositePositionProperty.js\nvar CompositePositionProperty = __webpack_require__(74254);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/DataSource.js\nvar DataSource = __webpack_require__(70265);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/DataSourceClock.js\nvar DataSourceClock = __webpack_require__(91419);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/Entity.js\nvar Entity = __webpack_require__(11895);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/EntityCluster.js\nvar EntityCluster = __webpack_require__(47890);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/EntityCollection.js\nvar EntityCollection = __webpack_require__(69516);\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/DataSources/KmlCamera.js\n/**\n * Representation of <Camera> from KML\n * @alias KmlCamera\n * @constructor\n *\n * @param {Cartesian3} position camera position\n * @param {HeadingPitchRoll} headingPitchRoll camera orientation\n */\nfunction KmlCamera(position, headingPitchRoll) {\n  this.position = position;\n  this.headingPitchRoll = headingPitchRoll;\n}\n/* harmony default export */ var DataSources_KmlCamera = (KmlCamera);\n\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/DataSources/KmlLookAt.js\n/**\n * @alias KmlLookAt\n * @constructor\n *\n * @param {Cartesian3} position camera position\n * @param {HeadingPitchRange} headingPitchRange camera orientation\n */\nfunction KmlLookAt(position, headingPitchRange) {\n  this.position = position;\n  this.headingPitchRange = headingPitchRange;\n}\n/* harmony default export */ var DataSources_KmlLookAt = (KmlLookAt);\n\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/KmlTour.js\nvar KmlTour = __webpack_require__(20217);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/KmlTourFlyTo.js\nvar KmlTourFlyTo = __webpack_require__(98826);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/KmlTourWait.js\nvar KmlTourWait = __webpack_require__(86729);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/LabelGraphics.js\nvar LabelGraphics = __webpack_require__(71550);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/PathGraphics.js\nvar PathGraphics = __webpack_require__(51426);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/PolygonGraphics.js\nvar PolygonGraphics = __webpack_require__(3081);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/PolylineGraphics.js\nvar PolylineGraphics = __webpack_require__(42956);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/PositionPropertyArray.js\nvar PositionPropertyArray = __webpack_require__(92961);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/RectangleGraphics.js\nvar RectangleGraphics = __webpack_require__(85441);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/ReferenceProperty.js\nvar ReferenceProperty = __webpack_require__(57547);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/SampledPositionProperty.js\nvar SampledPositionProperty = __webpack_require__(87207);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/ScaledPositionProperty.js\nvar ScaledPositionProperty = __webpack_require__(42098);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/TimeIntervalCollectionProperty.js\nvar TimeIntervalCollectionProperty = __webpack_require__(36811);\n// EXTERNAL MODULE: ./node_modules/cesium/Source/DataSources/WallGraphics.js\nvar WallGraphics = __webpack_require__(65269);\n;// CONCATENATED MODULE: ./node_modules/cesium/Source/DataSources/KmlDataSource.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//This is by no means an exhaustive list of MIME types.\n//The purpose of this list is to be able to accurately identify content embedded\n//in KMZ files. Eventually, we can make this configurable by the end user so they can add\n//there own content types if they have KMZ files that require it.\nvar MimeTypes = {\n  avi: "video/x-msvideo",\n  bmp: "image/bmp",\n  bz2: "application/x-bzip2",\n  chm: "application/vnd.ms-htmlhelp",\n  css: "text/css",\n  csv: "text/csv",\n  doc: "application/msword",\n  dvi: "application/x-dvi",\n  eps: "application/postscript",\n  flv: "video/x-flv",\n  gif: "image/gif",\n  gz: "application/x-gzip",\n  htm: "text/html",\n  html: "text/html",\n  ico: "image/vnd.microsoft.icon",\n  jnlp: "application/x-java-jnlp-file",\n  jpeg: "image/jpeg",\n  jpg: "image/jpeg",\n  m3u: "audio/x-mpegurl",\n  m4v: "video/mp4",\n  mathml: "application/mathml+xml",\n  mid: "audio/midi",\n  midi: "audio/midi",\n  mov: "video/quicktime",\n  mp3: "audio/mpeg",\n  mp4: "video/mp4",\n  mp4v: "video/mp4",\n  mpeg: "video/mpeg",\n  mpg: "video/mpeg",\n  odp: "application/vnd.oasis.opendocument.presentation",\n  ods: "application/vnd.oasis.opendocument.spreadsheet",\n  odt: "application/vnd.oasis.opendocument.text",\n  ogg: "application/ogg",\n  pdf: "application/pdf",\n  png: "image/png",\n  pps: "application/vnd.ms-powerpoint",\n  ppt: "application/vnd.ms-powerpoint",\n  ps: "application/postscript",\n  qt: "video/quicktime",\n  rdf: "application/rdf+xml",\n  rss: "application/rss+xml",\n  rtf: "application/rtf",\n  svg: "image/svg+xml",\n  swf: "application/x-shockwave-flash",\n  text: "text/plain",\n  tif: "image/tiff",\n  tiff: "image/tiff",\n  txt: "text/plain",\n  wav: "audio/x-wav",\n  wma: "audio/x-ms-wma",\n  wmv: "video/x-ms-wmv",\n  xml: "application/xml",\n  zip: "application/zip",\n\n  detectFromFilename: function (filename) {\n    var ext = filename.toLowerCase();\n    ext = (0,getExtensionFromUri/* default */.Z)(ext);\n    return MimeTypes[ext];\n  },\n};\n\nvar parser;\nif (typeof DOMParser !== "undefined") {\n  parser = new DOMParser();\n}\n\nvar autolinker = new Autolinker/* default */.Z({\n  stripPrefix: false,\n  email: false,\n  replaceFn: function (match) {\n    if (!match.protocolUrlMatch) {\n      //Prevent matching of non-explicit urls.\n      //i.e. foo.id won\'t match but http://foo.id will\n      return false;\n    }\n  },\n});\n\nvar BILLBOARD_SIZE = 32;\n\nvar BILLBOARD_NEAR_DISTANCE = 2414016;\nvar BILLBOARD_NEAR_RATIO = 1.0;\nvar BILLBOARD_FAR_DISTANCE = 1.6093e7;\nvar BILLBOARD_FAR_RATIO = 0.1;\n\nvar kmlNamespaces = [\n  null,\n  undefined,\n  "http://www.opengis.net/kml/2.2",\n  "http://earth.google.com/kml/2.2",\n  "http://earth.google.com/kml/2.1",\n  "http://earth.google.com/kml/2.0",\n];\nvar gxNamespaces = ["http://www.google.com/kml/ext/2.2"];\nvar atomNamespaces = ["http://www.w3.org/2005/Atom"];\nvar namespaces = {\n  kml: kmlNamespaces,\n  gx: gxNamespaces,\n  atom: atomNamespaces,\n  kmlgx: kmlNamespaces.concat(gxNamespaces),\n};\n\n// Ensure Specs/Data/KML/unsupported.kml is kept up to date with these supported types\nvar featureTypes = {\n  Document: processDocument,\n  Folder: processFolder,\n  Placemark: processPlacemark,\n  NetworkLink: processNetworkLink,\n  GroundOverlay: processGroundOverlay,\n  PhotoOverlay: processUnsupportedFeature,\n  ScreenOverlay: processUnsupportedFeature,\n  Tour: processTour,\n};\n\nfunction DeferredLoading(dataSource) {\n  this._dataSource = dataSource;\n  this._deferred = when/* default.defer */.Z.defer();\n  this._stack = [];\n  this._promises = [];\n  this._timeoutSet = false;\n  this._used = false;\n\n  this._started = 0;\n  this._timeThreshold = 1000; // Initial load is 1 second\n}\n\nObject.defineProperties(DeferredLoading.prototype, {\n  dataSource: {\n    get: function () {\n      return this._dataSource;\n    },\n  },\n});\n\nDeferredLoading.prototype.addNodes = function (nodes, processingData) {\n  this._stack.push({\n    nodes: nodes,\n    index: 0,\n    processingData: processingData,\n  });\n  this._used = true;\n};\n\nDeferredLoading.prototype.addPromise = function (promise) {\n  this._promises.push(promise);\n};\n\nDeferredLoading.prototype.wait = function () {\n  // Case where we had a non-document/folder as the root\n  var deferred = this._deferred;\n  if (!this._used) {\n    deferred.resolve();\n  }\n\n  return when/* default.join */.Z.join(deferred.promise, when/* default.all */.Z.all(this._promises));\n};\n\nDeferredLoading.prototype.process = function () {\n  var isFirstCall = this._stack.length === 1;\n  if (isFirstCall) {\n    this._started = KmlDataSource._getTimestamp();\n  }\n\n  return this._process(isFirstCall);\n};\n\nDeferredLoading.prototype._giveUpTime = function () {\n  if (this._timeoutSet) {\n    // Timeout was already set so just return\n    return;\n  }\n\n  this._timeoutSet = true;\n  this._timeThreshold = 50; // After the first load lower threshold to 0.5 seconds\n  var that = this;\n  setTimeout(function () {\n    that._timeoutSet = false;\n    that._started = KmlDataSource._getTimestamp();\n    that._process(true);\n  }, 0);\n};\n\nDeferredLoading.prototype._nextNode = function () {\n  var stack = this._stack;\n  var top = stack[stack.length - 1];\n  var index = top.index;\n  var nodes = top.nodes;\n  if (index === nodes.length) {\n    return;\n  }\n  ++top.index;\n\n  return nodes[index];\n};\n\nDeferredLoading.prototype._pop = function () {\n  var stack = this._stack;\n  stack.pop();\n\n  // Return false if we are done\n  if (stack.length === 0) {\n    this._deferred.resolve();\n    return false;\n  }\n\n  return true;\n};\n\nDeferredLoading.prototype._process = function (isFirstCall) {\n  var dataSource = this.dataSource;\n  var processingData = this._stack[this._stack.length - 1].processingData;\n\n  var child = this._nextNode();\n  while ((0,defined/* default */.Z)(child)) {\n    var featureProcessor = featureTypes[child.localName];\n    if (\n      (0,defined/* default */.Z)(featureProcessor) &&\n      (namespaces.kml.indexOf(child.namespaceURI) !== -1 ||\n        namespaces.gx.indexOf(child.namespaceURI) !== -1)\n    ) {\n      featureProcessor(dataSource, child, processingData, this);\n\n      // Give up time and continue loading later\n      if (\n        this._timeoutSet ||\n        KmlDataSource._getTimestamp() > this._started + this._timeThreshold\n      ) {\n        this._giveUpTime();\n        return;\n      }\n    }\n\n    child = this._nextNode();\n  }\n\n  // If we are a recursive call from a subfolder, just return so the parent folder can continue processing\n  // If we aren\'t then make another call to processNodes because there is stuff still left in the queue\n  if (this._pop() && isFirstCall) {\n    this._process(true);\n  }\n};\n\nfunction isZipFile(blob) {\n  var magicBlob = blob.slice(0, Math.min(4, blob.size));\n  var deferred = when/* default.defer */.Z.defer();\n  var reader = new FileReader();\n  reader.addEventListener("load", function () {\n    deferred.resolve(\n      new DataView(reader.result).getUint32(0, false) === 0x504b0304\n    );\n  });\n  reader.addEventListener("error", function () {\n    deferred.reject(reader.error);\n  });\n  reader.readAsArrayBuffer(magicBlob);\n  return deferred.promise;\n}\n\nfunction readBlobAsText(blob) {\n  var deferred = when/* default.defer */.Z.defer();\n  var reader = new FileReader();\n  reader.addEventListener("load", function () {\n    deferred.resolve(reader.result);\n  });\n  reader.addEventListener("error", function () {\n    deferred.reject(reader.error);\n  });\n  reader.readAsText(blob);\n  return deferred.promise;\n}\n\nfunction insertNamespaces(text) {\n  var namespaceMap = {\n    xsi: "http://www.w3.org/2001/XMLSchema-instance",\n  };\n  var firstPart, lastPart, reg, declaration;\n\n  for (var key in namespaceMap) {\n    if (namespaceMap.hasOwnProperty(key)) {\n      reg = RegExp("[< ]" + key + ":");\n      declaration = "xmlns:" + key + "=";\n      if (reg.test(text) && text.indexOf(declaration) === -1) {\n        if (!(0,defined/* default */.Z)(firstPart)) {\n          firstPart = text.substr(0, text.indexOf("<kml") + 4);\n          lastPart = text.substr(firstPart.length);\n        }\n        firstPart += " " + declaration + \'"\' + namespaceMap[key] + \'"\';\n      }\n    }\n  }\n\n  if ((0,defined/* default */.Z)(firstPart)) {\n    text = firstPart + lastPart;\n  }\n\n  return text;\n}\n\nfunction removeDuplicateNamespaces(text) {\n  var index = text.indexOf("xmlns:");\n  var endDeclaration = text.indexOf(">", index);\n  var namespace, startIndex, endIndex;\n\n  while (index !== -1 && index < endDeclaration) {\n    namespace = text.slice(index, text.indexOf(\'"\', index));\n    startIndex = index;\n    index = text.indexOf(namespace, index + 1);\n    if (index !== -1) {\n      endIndex = text.indexOf(\'"\', text.indexOf(\'"\', index) + 1);\n      text = text.slice(0, index - 1) + text.slice(endIndex + 1, text.length);\n      index = text.indexOf("xmlns:", startIndex - 1);\n    } else {\n      index = text.indexOf("xmlns:", startIndex + 1);\n    }\n  }\n\n  return text;\n}\n\nfunction loadXmlFromZip(entry, uriResolver) {\n  return (0,when/* default */.Z)(entry.getData(new zip/* default.TextWriter */.Z.TextWriter())).then(function (text) {\n    text = insertNamespaces(text);\n    text = removeDuplicateNamespaces(text);\n    uriResolver.kml = parser.parseFromString(text, "application/xml");\n  });\n}\n\nfunction loadDataUriFromZip(entry, uriResolver) {\n  var mimeType = (0,defaultValue/* default */.Z)(\n    MimeTypes.detectFromFilename(entry.filename),\n    "application/octet-stream"\n  );\n  return (0,when/* default */.Z)(entry.getData(new zip/* default.Data64URIWriter */.Z.Data64URIWriter(mimeType))).then(function (\n    dataUri\n  ) {\n    uriResolver[entry.filename] = dataUri;\n  });\n}\n\nfunction embedDataUris(div, elementType, attributeName, uriResolver) {\n  var keys = uriResolver.keys;\n  var baseUri = new Uri/* default */.Z(".");\n  var elements = div.querySelectorAll(elementType);\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    var value = element.getAttribute(attributeName);\n    var relativeUri = new Uri/* default */.Z(value);\n    var uri = relativeUri.absoluteTo(baseUri).toString();\n    var index = keys.indexOf(uri);\n    if (index !== -1) {\n      var key = keys[index];\n      element.setAttribute(attributeName, uriResolver[key]);\n      if (elementType === "a" && element.getAttribute("download") === null) {\n        element.setAttribute("download", key);\n      }\n    }\n  }\n}\n\nfunction applyBasePath(div, elementType, attributeName, sourceResource) {\n  var elements = div.querySelectorAll(elementType);\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    var value = element.getAttribute(attributeName);\n    var resource = resolveHref(value, sourceResource);\n    element.setAttribute(attributeName, resource.url);\n  }\n}\n\n// an optional context is passed to allow for some malformed kmls (those with multiple geometries with same ids) to still parse\n// correctly, as they do in Google Earth.\nfunction createEntity(node, entityCollection, context) {\n  var id = queryStringAttribute(node, "id");\n  id = (0,defined/* default */.Z)(id) && id.length !== 0 ? id : (0,createGuid/* default */.Z)();\n  if ((0,defined/* default */.Z)(context)) {\n    id = context + id;\n  }\n\n  // If we have a duplicate ID just generate one.\n  // This isn\'t valid KML but Google Earth handles this case.\n  var entity = entityCollection.getById(id);\n  if ((0,defined/* default */.Z)(entity)) {\n    id = (0,createGuid/* default */.Z)();\n    if ((0,defined/* default */.Z)(context)) {\n      id = context + id;\n    }\n  }\n\n  entity = entityCollection.add(new Entity/* default */.Z({ id: id }));\n  if (!(0,defined/* default */.Z)(entity.kml)) {\n    entity.addProperty("kml");\n    entity.kml = new KmlFeatureData();\n  }\n  return entity;\n}\n\nfunction isExtrudable(altitudeMode, gxAltitudeMode) {\n  return (\n    altitudeMode === "absolute" ||\n    altitudeMode === "relativeToGround" ||\n    gxAltitudeMode === "relativeToSeaFloor"\n  );\n}\n\nfunction readCoordinate(value, ellipsoid) {\n  //Google Earth treats empty or missing coordinates as 0.\n  if (!(0,defined/* default */.Z)(value)) {\n    return Cartesian3/* default.fromDegrees */.Z.fromDegrees(0, 0, 0, ellipsoid);\n  }\n\n  var digits = value.match(/[^\\s,\\n]+/g);\n  if (!(0,defined/* default */.Z)(digits)) {\n    return Cartesian3/* default.fromDegrees */.Z.fromDegrees(0, 0, 0, ellipsoid);\n  }\n\n  var longitude = parseFloat(digits[0]);\n  var latitude = parseFloat(digits[1]);\n  var height = parseFloat(digits[2]);\n\n  longitude = isNaN(longitude) ? 0.0 : longitude;\n  latitude = isNaN(latitude) ? 0.0 : latitude;\n  height = isNaN(height) ? 0.0 : height;\n\n  return Cartesian3/* default.fromDegrees */.Z.fromDegrees(longitude, latitude, height, ellipsoid);\n}\n\nfunction readCoordinates(element, ellipsoid) {\n  if (!(0,defined/* default */.Z)(element)) {\n    return undefined;\n  }\n\n  var tuples = element.textContent.match(/[^\\s\\n]+/g);\n  if (!(0,defined/* default */.Z)(tuples)) {\n    return undefined;\n  }\n\n  var length = tuples.length;\n  var result = new Array(length);\n  var resultIndex = 0;\n  for (var i = 0; i < length; i++) {\n    result[resultIndex++] = readCoordinate(tuples[i], ellipsoid);\n  }\n  return result;\n}\n\nfunction queryNumericAttribute(node, attributeName) {\n  if (!(0,defined/* default */.Z)(node)) {\n    return undefined;\n  }\n\n  var value = node.getAttribute(attributeName);\n  if (value !== null) {\n    var result = parseFloat(value);\n    return !isNaN(result) ? result : undefined;\n  }\n  return undefined;\n}\n\nfunction queryStringAttribute(node, attributeName) {\n  if (!(0,defined/* default */.Z)(node)) {\n    return undefined;\n  }\n  var value = node.getAttribute(attributeName);\n  return value !== null ? value : undefined;\n}\n\nfunction queryFirstNode(node, tagName, namespace) {\n  if (!(0,defined/* default */.Z)(node)) {\n    return undefined;\n  }\n  var childNodes = node.childNodes;\n  var length = childNodes.length;\n  for (var q = 0; q < length; q++) {\n    var child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      return child;\n    }\n  }\n  return undefined;\n}\n\nfunction queryNodes(node, tagName, namespace) {\n  if (!(0,defined/* default */.Z)(node)) {\n    return undefined;\n  }\n  var result = [];\n  var childNodes = node.getElementsByTagNameNS("*", tagName);\n  var length = childNodes.length;\n  for (var q = 0; q < length; q++) {\n    var child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      result.push(child);\n    }\n  }\n  return result;\n}\n\nfunction queryChildNodes(node, tagName, namespace) {\n  if (!(0,defined/* default */.Z)(node)) {\n    return [];\n  }\n  var result = [];\n  var childNodes = node.childNodes;\n  var length = childNodes.length;\n  for (var q = 0; q < length; q++) {\n    var child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      result.push(child);\n    }\n  }\n  return result;\n}\n\nfunction queryNumericValue(node, tagName, namespace) {\n  var resultNode = queryFirstNode(node, tagName, namespace);\n  if ((0,defined/* default */.Z)(resultNode)) {\n    var result = parseFloat(resultNode.textContent);\n    return !isNaN(result) ? result : undefined;\n  }\n  return undefined;\n}\n\nfunction queryStringValue(node, tagName, namespace) {\n  var result = queryFirstNode(node, tagName, namespace);\n  if ((0,defined/* default */.Z)(result)) {\n    return result.textContent.trim();\n  }\n  return undefined;\n}\n\nfunction queryBooleanValue(node, tagName, namespace) {\n  var result = queryFirstNode(node, tagName, namespace);\n  if ((0,defined/* default */.Z)(result)) {\n    var value = result.textContent.trim();\n    return value === "1" || /^true$/i.test(value);\n  }\n  return undefined;\n}\n\nfunction resolveHref(href, sourceResource, uriResolver) {\n  if (!(0,defined/* default */.Z)(href)) {\n    return undefined;\n  }\n\n  var resource;\n  if ((0,defined/* default */.Z)(uriResolver)) {\n    // To resolve issues with KML sources defined in Windows style paths.\n    href = href.replace(/\\\\/g, "/");\n    var blob = uriResolver[href];\n    if ((0,defined/* default */.Z)(blob)) {\n      resource = new Resource/* default */.Z({\n        url: blob,\n      });\n    } else {\n      // Needed for multiple levels of KML files in a KMZ\n      var baseUri = new Uri/* default */.Z(sourceResource.getUrlComponent());\n      var uri = new Uri/* default */.Z(href);\n      blob = uriResolver[uri.absoluteTo(baseUri)];\n      if ((0,defined/* default */.Z)(blob)) {\n        resource = new Resource/* default */.Z({\n          url: blob,\n        });\n      }\n    }\n  }\n\n  if (!(0,defined/* default */.Z)(resource)) {\n    resource = sourceResource.getDerivedResource({\n      url: href,\n    });\n  }\n\n  return resource;\n}\n\nvar colorOptions = {\n  maximumRed: undefined,\n  red: undefined,\n  maximumGreen: undefined,\n  green: undefined,\n  maximumBlue: undefined,\n  blue: undefined,\n};\n\nfunction parseColorString(value, isRandom) {\n  if (!(0,defined/* default */.Z)(value) || /^\\s*$/gm.test(value)) {\n    return undefined;\n  }\n\n  if (value[0] === "#") {\n    value = value.substring(1);\n  }\n\n  var alpha = parseInt(value.substring(0, 2), 16) / 255.0;\n  var blue = parseInt(value.substring(2, 4), 16) / 255.0;\n  var green = parseInt(value.substring(4, 6), 16) / 255.0;\n  var red = parseInt(value.substring(6, 8), 16) / 255.0;\n\n  if (!isRandom) {\n    return new Color/* default */.Z(red, green, blue, alpha);\n  }\n\n  if (red > 0) {\n    colorOptions.maximumRed = red;\n    colorOptions.red = undefined;\n  } else {\n    colorOptions.maximumRed = undefined;\n    colorOptions.red = 0;\n  }\n  if (green > 0) {\n    colorOptions.maximumGreen = green;\n    colorOptions.green = undefined;\n  } else {\n    colorOptions.maximumGreen = undefined;\n    colorOptions.green = 0;\n  }\n  if (blue > 0) {\n    colorOptions.maximumBlue = blue;\n    colorOptions.blue = undefined;\n  } else {\n    colorOptions.maximumBlue = undefined;\n    colorOptions.blue = 0;\n  }\n  colorOptions.alpha = alpha;\n  return Color/* default.fromRandom */.Z.fromRandom(colorOptions);\n}\n\nfunction queryColorValue(node, tagName, namespace) {\n  var value = queryStringValue(node, tagName, namespace);\n  if (!(0,defined/* default */.Z)(value)) {\n    return undefined;\n  }\n  return parseColorString(\n    value,\n    queryStringValue(node, "colorMode", namespace) === "random"\n  );\n}\n\nfunction processTimeStamp(featureNode) {\n  var node = queryFirstNode(featureNode, "TimeStamp", namespaces.kmlgx);\n  var whenString = queryStringValue(node, "when", namespaces.kmlgx);\n\n  if (!(0,defined/* default */.Z)(node) || !(0,defined/* default */.Z)(whenString) || whenString.length === 0) {\n    return undefined;\n  }\n\n  //According to the KML spec, a TimeStamp represents a "single moment in time"\n  //However, since Cesium animates much differently than Google Earth, that doesn\'t\n  //Make much sense here.  Instead, we use the TimeStamp as the moment the feature\n  //comes into existence.  This works much better and gives a similar feel to\n  //GE\'s experience.\n  var when = JulianDate/* default.fromIso8601 */.Z.fromIso8601(whenString);\n  var result = new TimeIntervalCollection/* default */.Z();\n  result.addInterval(\n    new TimeInterval/* default */.Z({\n      start: when,\n      stop: Iso8601/* default.MAXIMUM_VALUE */.Z.MAXIMUM_VALUE,\n    })\n  );\n  return result;\n}\n\nfunction processTimeSpan(featureNode) {\n  var node = queryFirstNode(featureNode, "TimeSpan", namespaces.kmlgx);\n  if (!(0,defined/* default */.Z)(node)) {\n    return undefined;\n  }\n  var result;\n\n  var beginNode = queryFirstNode(node, "begin", namespaces.kmlgx);\n  var beginDate = (0,defined/* default */.Z)(beginNode)\n    ? JulianDate/* default.fromIso8601 */.Z.fromIso8601(beginNode.textContent)\n    : undefined;\n\n  var endNode = queryFirstNode(node, "end", namespaces.kmlgx);\n  var endDate = (0,defined/* default */.Z)(endNode)\n    ? JulianDate/* default.fromIso8601 */.Z.fromIso8601(endNode.textContent)\n    : undefined;\n\n  if ((0,defined/* default */.Z)(beginDate) && (0,defined/* default */.Z)(endDate)) {\n    if (JulianDate/* default.lessThan */.Z.lessThan(endDate, beginDate)) {\n      var tmp = beginDate;\n      beginDate = endDate;\n      endDate = tmp;\n    }\n    result = new TimeIntervalCollection/* default */.Z();\n    result.addInterval(\n      new TimeInterval/* default */.Z({\n        start: beginDate,\n        stop: endDate,\n      })\n    );\n  } else if ((0,defined/* default */.Z)(beginDate)) {\n    result = new TimeIntervalCollection/* default */.Z();\n    result.addInterval(\n      new TimeInterval/* default */.Z({\n        start: beginDate,\n        stop: Iso8601/* default.MAXIMUM_VALUE */.Z.MAXIMUM_VALUE,\n      })\n    );\n  } else if ((0,defined/* default */.Z)(endDate)) {\n    result = new TimeIntervalCollection/* default */.Z();\n    result.addInterval(\n      new TimeInterval/* default */.Z({\n        start: Iso8601/* default.MINIMUM_VALUE */.Z.MINIMUM_VALUE,\n        stop: endDate,\n      })\n    );\n  }\n\n  return result;\n}\n\nfunction createDefaultBillboard() {\n  var billboard = new BillboardGraphics/* default */.Z();\n  billboard.width = BILLBOARD_SIZE;\n  billboard.height = BILLBOARD_SIZE;\n  billboard.scaleByDistance = new NearFarScalar/* default */.Z(\n    BILLBOARD_NEAR_DISTANCE,\n    BILLBOARD_NEAR_RATIO,\n    BILLBOARD_FAR_DISTANCE,\n    BILLBOARD_FAR_RATIO\n  );\n  billboard.pixelOffsetScaleByDistance = new NearFarScalar/* default */.Z(\n    BILLBOARD_NEAR_DISTANCE,\n    BILLBOARD_NEAR_RATIO,\n    BILLBOARD_FAR_DISTANCE,\n    BILLBOARD_FAR_RATIO\n  );\n  return billboard;\n}\n\nfunction createDefaultPolygon() {\n  var polygon = new PolygonGraphics/* default */.Z();\n  polygon.outline = true;\n  polygon.outlineColor = Color/* default.WHITE */.Z.WHITE;\n  return polygon;\n}\n\nfunction createDefaultLabel() {\n  var label = new LabelGraphics/* default */.Z();\n  label.translucencyByDistance = new NearFarScalar/* default */.Z(3000000, 1.0, 5000000, 0.0);\n  label.pixelOffset = new Cartesian2/* default */.Z(17, 0);\n  label.horizontalOrigin = HorizontalOrigin/* default.LEFT */.Z.LEFT;\n  label.font = "16px sans-serif";\n  label.style = LabelStyle/* default.FILL_AND_OUTLINE */.Z.FILL_AND_OUTLINE;\n  return label;\n}\n\nfunction getIconHref(\n  iconNode,\n  dataSource,\n  sourceResource,\n  uriResolver,\n  canRefresh\n) {\n  var href = queryStringValue(iconNode, "href", namespaces.kml);\n  if (!(0,defined/* default */.Z)(href) || href.length === 0) {\n    return undefined;\n  }\n\n  if (href.indexOf("root://icons/palette-") === 0) {\n    var palette = href.charAt(21);\n\n    // Get the icon number\n    var x = (0,defaultValue/* default */.Z)(queryNumericValue(iconNode, "x", namespaces.gx), 0);\n    var y = (0,defaultValue/* default */.Z)(queryNumericValue(iconNode, "y", namespaces.gx), 0);\n    x = Math.min(x / 32, 7);\n    y = 7 - Math.min(y / 32, 7);\n    var iconNum = 8 * y + x;\n\n    href =\n      "https://maps.google.com/mapfiles/kml/pal" +\n      palette +\n      "/icon" +\n      iconNum +\n      ".png";\n  }\n\n  var hrefResource = resolveHref(href, sourceResource, uriResolver);\n\n  if (canRefresh) {\n    var refreshMode = queryStringValue(iconNode, "refreshMode", namespaces.kml);\n    var viewRefreshMode = queryStringValue(\n      iconNode,\n      "viewRefreshMode",\n      namespaces.kml\n    );\n    if (refreshMode === "onInterval" || refreshMode === "onExpire") {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-refreshMode-" + refreshMode,\n        "KML - Unsupported Icon refreshMode: " + refreshMode\n      );\n    } else if (viewRefreshMode === "onStop" || viewRefreshMode === "onRegion") {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-refreshMode-" + viewRefreshMode,\n        "KML - Unsupported Icon viewRefreshMode: " + viewRefreshMode\n      );\n    }\n\n    var viewBoundScale = (0,defaultValue/* default */.Z)(\n      queryStringValue(iconNode, "viewBoundScale", namespaces.kml),\n      1.0\n    );\n    var defaultViewFormat =\n      viewRefreshMode === "onStop"\n        ? "BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]"\n        : "";\n    var viewFormat = (0,defaultValue/* default */.Z)(\n      queryStringValue(iconNode, "viewFormat", namespaces.kml),\n      defaultViewFormat\n    );\n    var httpQuery = queryStringValue(iconNode, "httpQuery", namespaces.kml);\n    if ((0,defined/* default */.Z)(viewFormat)) {\n      hrefResource.setQueryParameters((0,queryToObject/* default */.Z)(cleanupString(viewFormat)));\n    }\n    if ((0,defined/* default */.Z)(httpQuery)) {\n      hrefResource.setQueryParameters((0,queryToObject/* default */.Z)(cleanupString(httpQuery)));\n    }\n\n    var ellipsoid = dataSource._ellipsoid;\n    processNetworkLinkQueryString(\n      hrefResource,\n      dataSource._camera,\n      dataSource._canvas,\n      viewBoundScale,\n      dataSource._lastCameraView.bbox,\n      ellipsoid\n    );\n\n    return hrefResource;\n  }\n\n  return hrefResource;\n}\n\nfunction processBillboardIcon(\n  dataSource,\n  node,\n  targetEntity,\n  sourceResource,\n  uriResolver\n) {\n  var scale = queryNumericValue(node, "scale", namespaces.kml);\n  var heading = queryNumericValue(node, "heading", namespaces.kml);\n  var color = queryColorValue(node, "color", namespaces.kml);\n\n  var iconNode = queryFirstNode(node, "Icon", namespaces.kml);\n  var icon = getIconHref(\n    iconNode,\n    dataSource,\n    sourceResource,\n    uriResolver,\n    false\n  );\n\n  // If icon tags are present but blank, we do not want to show an icon\n  if ((0,defined/* default */.Z)(iconNode) && !(0,defined/* default */.Z)(icon)) {\n    icon = false;\n  }\n\n  var x = queryNumericValue(iconNode, "x", namespaces.gx);\n  var y = queryNumericValue(iconNode, "y", namespaces.gx);\n  var w = queryNumericValue(iconNode, "w", namespaces.gx);\n  var h = queryNumericValue(iconNode, "h", namespaces.gx);\n\n  var hotSpotNode = queryFirstNode(node, "hotSpot", namespaces.kml);\n  var hotSpotX = queryNumericAttribute(hotSpotNode, "x");\n  var hotSpotY = queryNumericAttribute(hotSpotNode, "y");\n  var hotSpotXUnit = queryStringAttribute(hotSpotNode, "xunits");\n  var hotSpotYUnit = queryStringAttribute(hotSpotNode, "yunits");\n\n  var billboard = targetEntity.billboard;\n  if (!(0,defined/* default */.Z)(billboard)) {\n    billboard = createDefaultBillboard();\n    targetEntity.billboard = billboard;\n  }\n\n  billboard.image = icon;\n  billboard.scale = scale;\n  billboard.color = color;\n\n  if ((0,defined/* default */.Z)(x) || (0,defined/* default */.Z)(y) || (0,defined/* default */.Z)(w) || (0,defined/* default */.Z)(h)) {\n    billboard.imageSubRegion = new BoundingRectangle/* default */.Z(x, y, w, h);\n  }\n\n  //GE treats a heading of zero as no heading\n  //You can still point north using a 360 degree angle (or any multiple of 360)\n  if ((0,defined/* default */.Z)(heading) && heading !== 0) {\n    billboard.rotation = Core_Math/* default.toRadians */.Z.toRadians(-heading);\n    billboard.alignedAxis = Cartesian3/* default.UNIT_Z */.Z.UNIT_Z;\n  }\n\n  //Hotpot is the KML equivalent of pixel offset\n  //The hotspot origin is the lower left, but we leave\n  //our billboard origin at the center and simply\n  //modify the pixel offset to take this into account\n  scale = (0,defaultValue/* default */.Z)(scale, 1.0);\n\n  var xOffset;\n  var yOffset;\n  if ((0,defined/* default */.Z)(hotSpotX)) {\n    if (hotSpotXUnit === "pixels") {\n      xOffset = -hotSpotX * scale;\n    } else if (hotSpotXUnit === "insetPixels") {\n      xOffset = (hotSpotX - BILLBOARD_SIZE) * scale;\n    } else if (hotSpotXUnit === "fraction") {\n      xOffset = -hotSpotX * BILLBOARD_SIZE * scale;\n    }\n    xOffset += BILLBOARD_SIZE * 0.5 * scale;\n  }\n\n  if ((0,defined/* default */.Z)(hotSpotY)) {\n    if (hotSpotYUnit === "pixels") {\n      yOffset = hotSpotY * scale;\n    } else if (hotSpotYUnit === "insetPixels") {\n      yOffset = (-hotSpotY + BILLBOARD_SIZE) * scale;\n    } else if (hotSpotYUnit === "fraction") {\n      yOffset = hotSpotY * BILLBOARD_SIZE * scale;\n    }\n\n    yOffset -= BILLBOARD_SIZE * 0.5 * scale;\n  }\n\n  if ((0,defined/* default */.Z)(xOffset) || (0,defined/* default */.Z)(yOffset)) {\n    billboard.pixelOffset = new Cartesian2/* default */.Z(xOffset, yOffset);\n  }\n}\n\nfunction applyStyle(\n  dataSource,\n  styleNode,\n  targetEntity,\n  sourceResource,\n  uriResolver\n) {\n  for (var i = 0, len = styleNode.childNodes.length; i < len; i++) {\n    var node = styleNode.childNodes.item(i);\n    if (node.localName === "IconStyle") {\n      processBillboardIcon(\n        dataSource,\n        node,\n        targetEntity,\n        sourceResource,\n        uriResolver\n      );\n    } else if (node.localName === "LabelStyle") {\n      var label = targetEntity.label;\n      if (!(0,defined/* default */.Z)(label)) {\n        label = createDefaultLabel();\n        targetEntity.label = label;\n      }\n      label.scale = (0,defaultValue/* default */.Z)(\n        queryNumericValue(node, "scale", namespaces.kml),\n        label.scale\n      );\n      label.fillColor = (0,defaultValue/* default */.Z)(\n        queryColorValue(node, "color", namespaces.kml),\n        label.fillColor\n      );\n      label.text = targetEntity.name;\n    } else if (node.localName === "LineStyle") {\n      var polyline = targetEntity.polyline;\n      if (!(0,defined/* default */.Z)(polyline)) {\n        polyline = new PolylineGraphics/* default */.Z();\n        targetEntity.polyline = polyline;\n      }\n      polyline.width = queryNumericValue(node, "width", namespaces.kml);\n      polyline.material = queryColorValue(node, "color", namespaces.kml);\n      if ((0,defined/* default */.Z)(queryColorValue(node, "outerColor", namespaces.gx))) {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-gx:outerColor",\n          "KML - gx:outerColor is not supported in a LineStyle"\n        );\n      }\n      if ((0,defined/* default */.Z)(queryNumericValue(node, "outerWidth", namespaces.gx))) {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-gx:outerWidth",\n          "KML - gx:outerWidth is not supported in a LineStyle"\n        );\n      }\n      if ((0,defined/* default */.Z)(queryNumericValue(node, "physicalWidth", namespaces.gx))) {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-gx:physicalWidth",\n          "KML - gx:physicalWidth is not supported in a LineStyle"\n        );\n      }\n      if ((0,defined/* default */.Z)(queryBooleanValue(node, "labelVisibility", namespaces.gx))) {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-gx:labelVisibility",\n          "KML - gx:labelVisibility is not supported in a LineStyle"\n        );\n      }\n    } else if (node.localName === "PolyStyle") {\n      var polygon = targetEntity.polygon;\n      if (!(0,defined/* default */.Z)(polygon)) {\n        polygon = createDefaultPolygon();\n        targetEntity.polygon = polygon;\n      }\n      polygon.material = (0,defaultValue/* default */.Z)(\n        queryColorValue(node, "color", namespaces.kml),\n        polygon.material\n      );\n      polygon.fill = (0,defaultValue/* default */.Z)(\n        queryBooleanValue(node, "fill", namespaces.kml),\n        polygon.fill\n      );\n      polygon.outline = (0,defaultValue/* default */.Z)(\n        queryBooleanValue(node, "outline", namespaces.kml),\n        polygon.outline\n      );\n    } else if (node.localName === "BalloonStyle") {\n      var bgColor = (0,defaultValue/* default */.Z)(\n        parseColorString(queryStringValue(node, "bgColor", namespaces.kml)),\n        Color/* default.WHITE */.Z.WHITE\n      );\n      var textColor = (0,defaultValue/* default */.Z)(\n        parseColorString(queryStringValue(node, "textColor", namespaces.kml)),\n        Color/* default.BLACK */.Z.BLACK\n      );\n      var text = queryStringValue(node, "text", namespaces.kml);\n\n      //This is purely an internal property used in style processing,\n      //it never ends up on the final entity.\n      targetEntity.addProperty("balloonStyle");\n      targetEntity.balloonStyle = {\n        bgColor: bgColor,\n        textColor: textColor,\n        text: text,\n      };\n    } else if (node.localName === "ListStyle") {\n      var listItemType = queryStringValue(node, "listItemType", namespaces.kml);\n      if (listItemType === "radioFolder" || listItemType === "checkOffOnly") {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-listStyle-" + listItemType,\n          "KML - Unsupported ListStyle with listItemType: " + listItemType\n        );\n      }\n    }\n  }\n}\n\n//Processes and merges any inline styles for the provided node into the provided entity.\nfunction computeFinalStyle(\n  dataSource,\n  placeMark,\n  styleCollection,\n  sourceResource,\n  uriResolver\n) {\n  var result = new Entity/* default */.Z();\n  var styleEntity;\n\n  //Google earth seems to always use the last inline Style/StyleMap only\n  var styleIndex = -1;\n  var childNodes = placeMark.childNodes;\n  var length = childNodes.length;\n  for (var q = 0; q < length; q++) {\n    var child = childNodes[q];\n    if (child.localName === "Style" || child.localName === "StyleMap") {\n      styleIndex = q;\n    }\n  }\n\n  if (styleIndex !== -1) {\n    var inlineStyleNode = childNodes[styleIndex];\n    if (inlineStyleNode.localName === "Style") {\n      applyStyle(\n        dataSource,\n        inlineStyleNode,\n        result,\n        sourceResource,\n        uriResolver\n      );\n    } else {\n      // StyleMap\n      var pairs = queryChildNodes(inlineStyleNode, "Pair", namespaces.kml);\n      for (var p = 0; p < pairs.length; p++) {\n        var pair = pairs[p];\n        var key = queryStringValue(pair, "key", namespaces.kml);\n        if (key === "normal") {\n          var styleUrl = queryStringValue(pair, "styleUrl", namespaces.kml);\n          if ((0,defined/* default */.Z)(styleUrl)) {\n            styleEntity = styleCollection.getById(styleUrl);\n            if (!(0,defined/* default */.Z)(styleEntity)) {\n              styleEntity = styleCollection.getById("#" + styleUrl);\n            }\n            if ((0,defined/* default */.Z)(styleEntity)) {\n              result.merge(styleEntity);\n            }\n          } else {\n            var node = queryFirstNode(pair, "Style", namespaces.kml);\n            applyStyle(dataSource, node, result, sourceResource, uriResolver);\n          }\n        } else {\n          (0,oneTimeWarning/* default */.Z)(\n            "kml-styleMap-" + key,\n            "KML - Unsupported StyleMap key: " + key\n          );\n        }\n      }\n    }\n  }\n\n  //Google earth seems to always use the first external style only.\n  var externalStyle = queryStringValue(placeMark, "styleUrl", namespaces.kml);\n  if ((0,defined/* default */.Z)(externalStyle)) {\n    var id = externalStyle;\n    if (externalStyle[0] !== "#" && externalStyle.indexOf("#") !== -1) {\n      var tokens = externalStyle.split("#");\n      var uri = tokens[0];\n      var resource = sourceResource.getDerivedResource({\n        url: uri,\n      });\n\n      id = resource.getUrlComponent() + "#" + tokens[1];\n    }\n\n    styleEntity = styleCollection.getById(id);\n    if (!(0,defined/* default */.Z)(styleEntity)) {\n      styleEntity = styleCollection.getById("#" + id);\n    }\n    if ((0,defined/* default */.Z)(styleEntity)) {\n      result.merge(styleEntity);\n    }\n  }\n\n  return result;\n}\n\n//Asynchronously processes an external style file.\nfunction processExternalStyles(dataSource, resource, styleCollection) {\n  return resource.fetchXML().then(function (styleKml) {\n    return processStyles(dataSource, styleKml, styleCollection, resource, true);\n  });\n}\n\n//Processes all shared and external styles and stores\n//their id into the provided styleCollection.\n//Returns an array of promises that will resolve when\n//each style is loaded.\nfunction processStyles(\n  dataSource,\n  kml,\n  styleCollection,\n  sourceResource,\n  isExternal,\n  uriResolver\n) {\n  var i;\n  var id;\n  var styleEntity;\n\n  var node;\n  var styleNodes = queryNodes(kml, "Style", namespaces.kml);\n  if ((0,defined/* default */.Z)(styleNodes)) {\n    var styleNodesLength = styleNodes.length;\n    for (i = 0; i < styleNodesLength; i++) {\n      node = styleNodes[i];\n      id = queryStringAttribute(node, "id");\n      if ((0,defined/* default */.Z)(id)) {\n        id = "#" + id;\n        if (isExternal && (0,defined/* default */.Z)(sourceResource)) {\n          id = sourceResource.getUrlComponent() + id;\n        }\n        if (!(0,defined/* default */.Z)(styleCollection.getById(id))) {\n          styleEntity = new Entity/* default */.Z({\n            id: id,\n          });\n          styleCollection.add(styleEntity);\n          applyStyle(\n            dataSource,\n            node,\n            styleEntity,\n            sourceResource,\n            uriResolver\n          );\n        }\n      }\n    }\n  }\n\n  var styleMaps = queryNodes(kml, "StyleMap", namespaces.kml);\n  if ((0,defined/* default */.Z)(styleMaps)) {\n    var styleMapsLength = styleMaps.length;\n    for (i = 0; i < styleMapsLength; i++) {\n      var styleMap = styleMaps[i];\n      id = queryStringAttribute(styleMap, "id");\n      if ((0,defined/* default */.Z)(id)) {\n        var pairs = queryChildNodes(styleMap, "Pair", namespaces.kml);\n        for (var p = 0; p < pairs.length; p++) {\n          var pair = pairs[p];\n          var key = queryStringValue(pair, "key", namespaces.kml);\n          if (key === "normal") {\n            id = "#" + id;\n            if (isExternal && (0,defined/* default */.Z)(sourceResource)) {\n              id = sourceResource.getUrlComponent() + id;\n            }\n            if (!(0,defined/* default */.Z)(styleCollection.getById(id))) {\n              styleEntity = styleCollection.getOrCreateEntity(id);\n\n              var styleUrl = queryStringValue(pair, "styleUrl", namespaces.kml);\n              if ((0,defined/* default */.Z)(styleUrl)) {\n                if (styleUrl[0] !== "#") {\n                  styleUrl = "#" + styleUrl;\n                }\n\n                if (isExternal && (0,defined/* default */.Z)(sourceResource)) {\n                  styleUrl = sourceResource.getUrlComponent() + styleUrl;\n                }\n                var base = styleCollection.getById(styleUrl);\n\n                if ((0,defined/* default */.Z)(base)) {\n                  styleEntity.merge(base);\n                }\n              } else {\n                node = queryFirstNode(pair, "Style", namespaces.kml);\n                applyStyle(\n                  dataSource,\n                  node,\n                  styleEntity,\n                  sourceResource,\n                  uriResolver\n                );\n              }\n            }\n          } else {\n            (0,oneTimeWarning/* default */.Z)(\n              "kml-styleMap-" + key,\n              "KML - Unsupported StyleMap key: " + key\n            );\n          }\n        }\n      }\n    }\n  }\n\n  var promises = [];\n  var styleUrlNodes = kml.getElementsByTagName("styleUrl");\n  var styleUrlNodesLength = styleUrlNodes.length;\n  for (i = 0; i < styleUrlNodesLength; i++) {\n    var styleReference = styleUrlNodes[i].textContent;\n    if (styleReference[0] !== "#") {\n      //According to the spec, all local styles should start with a #\n      //and everything else is an external style that has a # seperating\n      //the URL of the document and the style.  However, Google Earth\n      //also accepts styleUrls without a # as meaning a local style.\n      var tokens = styleReference.split("#");\n      if (tokens.length === 2) {\n        var uri = tokens[0];\n        var resource = sourceResource.getDerivedResource({\n          url: uri,\n        });\n\n        promises.push(\n          processExternalStyles(dataSource, resource, styleCollection)\n        );\n      }\n    }\n  }\n\n  return promises;\n}\n\nfunction createDropLine(entityCollection, entity, styleEntity) {\n  var entityPosition = new ReferenceProperty/* default */.Z(entityCollection, entity.id, [\n    "position",\n  ]);\n  var surfacePosition = new ScaledPositionProperty/* default */.Z(entity.position);\n  entity.polyline = (0,defined/* default */.Z)(styleEntity.polyline)\n    ? styleEntity.polyline.clone()\n    : new PolylineGraphics/* default */.Z();\n  entity.polyline.positions = new PositionPropertyArray/* default */.Z([\n    entityPosition,\n    surfacePosition,\n  ]);\n}\n\nfunction heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode) {\n  if (\n    (!(0,defined/* default */.Z)(altitudeMode) && !(0,defined/* default */.Z)(gxAltitudeMode)) ||\n    altitudeMode === "clampToGround"\n  ) {\n    return HeightReference/* default.CLAMP_TO_GROUND */.Z.CLAMP_TO_GROUND;\n  }\n\n  if (altitudeMode === "relativeToGround") {\n    return HeightReference/* default.RELATIVE_TO_GROUND */.Z.RELATIVE_TO_GROUND;\n  }\n\n  if (altitudeMode === "absolute") {\n    return HeightReference/* default.NONE */.Z.NONE;\n  }\n\n  if (gxAltitudeMode === "clampToSeaFloor") {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-gx:altitudeMode-clampToSeaFloor",\n      "KML - <gx:altitudeMode>:clampToSeaFloor is currently not supported, using <kml:altitudeMode>:clampToGround."\n    );\n    return HeightReference/* default.CLAMP_TO_GROUND */.Z.CLAMP_TO_GROUND;\n  }\n\n  if (gxAltitudeMode === "relativeToSeaFloor") {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-gx:altitudeMode-relativeToSeaFloor",\n      "KML - <gx:altitudeMode>:relativeToSeaFloor is currently not supported, using <kml:altitudeMode>:relativeToGround."\n    );\n    return HeightReference/* default.RELATIVE_TO_GROUND */.Z.RELATIVE_TO_GROUND;\n  }\n\n  if ((0,defined/* default */.Z)(altitudeMode)) {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-altitudeMode-unknown",\n      "KML - Unknown <kml:altitudeMode>:" +\n        altitudeMode +\n        ", using <kml:altitudeMode>:CLAMP_TO_GROUND."\n    );\n  } else {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-gx:altitudeMode-unknown",\n      "KML - Unknown <gx:altitudeMode>:" +\n        gxAltitudeMode +\n        ", using <kml:altitudeMode>:CLAMP_TO_GROUND."\n    );\n  }\n\n  // Clamp to ground is the default\n  return HeightReference/* default.CLAMP_TO_GROUND */.Z.CLAMP_TO_GROUND;\n}\n\nfunction createPositionPropertyFromAltitudeMode(\n  property,\n  altitudeMode,\n  gxAltitudeMode\n) {\n  if (\n    gxAltitudeMode === "relativeToSeaFloor" ||\n    altitudeMode === "absolute" ||\n    altitudeMode === "relativeToGround"\n  ) {\n    //Just return the ellipsoid referenced property until we support MSL\n    return property;\n  }\n\n  if (\n    ((0,defined/* default */.Z)(altitudeMode) && altitudeMode !== "clampToGround") || //\n    ((0,defined/* default */.Z)(gxAltitudeMode) && gxAltitudeMode !== "clampToSeaFloor")\n  ) {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-altitudeMode-unknown",\n      "KML - Unknown altitudeMode: " +\n        (0,defaultValue/* default */.Z)(altitudeMode, gxAltitudeMode)\n    );\n  }\n\n  // Clamp to ground is the default\n  return new ScaledPositionProperty/* default */.Z(property);\n}\n\nfunction createPositionPropertyArrayFromAltitudeMode(\n  properties,\n  altitudeMode,\n  gxAltitudeMode,\n  ellipsoid\n) {\n  if (!(0,defined/* default */.Z)(properties)) {\n    return undefined;\n  }\n\n  if (\n    gxAltitudeMode === "relativeToSeaFloor" ||\n    altitudeMode === "absolute" ||\n    altitudeMode === "relativeToGround"\n  ) {\n    //Just return the ellipsoid referenced property until we support MSL\n    return properties;\n  }\n\n  if (\n    ((0,defined/* default */.Z)(altitudeMode) && altitudeMode !== "clampToGround") || //\n    ((0,defined/* default */.Z)(gxAltitudeMode) && gxAltitudeMode !== "clampToSeaFloor")\n  ) {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-altitudeMode-unknown",\n      "KML - Unknown altitudeMode: " +\n        (0,defaultValue/* default */.Z)(altitudeMode, gxAltitudeMode)\n    );\n  }\n\n  // Clamp to ground is the default\n  var propertiesLength = properties.length;\n  for (var i = 0; i < propertiesLength; i++) {\n    var property = properties[i];\n    ellipsoid.scaleToGeodeticSurface(property, property);\n  }\n  return properties;\n}\n\nfunction processPositionGraphics(\n  dataSource,\n  entity,\n  styleEntity,\n  heightReference\n) {\n  var label = entity.label;\n  if (!(0,defined/* default */.Z)(label)) {\n    label = (0,defined/* default */.Z)(styleEntity.label)\n      ? styleEntity.label.clone()\n      : createDefaultLabel();\n    entity.label = label;\n  }\n  label.text = entity.name;\n\n  var billboard = entity.billboard;\n  if (!(0,defined/* default */.Z)(billboard)) {\n    billboard = (0,defined/* default */.Z)(styleEntity.billboard)\n      ? styleEntity.billboard.clone()\n      : createDefaultBillboard();\n    entity.billboard = billboard;\n  }\n\n  if (!(0,defined/* default */.Z)(billboard.image)) {\n    billboard.image = dataSource._pinBuilder.fromColor(Color/* default.YELLOW */.Z.YELLOW, 64);\n\n    // If there were empty <Icon> tags in the KML, then billboard.image was set to false above\n    // However, in this case, the false value would have been converted to a property afterwards\n    // Thus, we check if billboard.image is defined with value of false\n  } else if (!billboard.image.getValue()) {\n    billboard.image = undefined;\n  }\n\n  var scale = 1.0;\n  if ((0,defined/* default */.Z)(billboard.scale)) {\n    scale = billboard.scale.getValue();\n    if (scale !== 0) {\n      label.pixelOffset = new Cartesian2/* default */.Z(scale * 16 + 1, 0);\n    } else {\n      //Minor tweaks to better match Google Earth.\n      label.pixelOffset = undefined;\n      label.horizontalOrigin = undefined;\n    }\n  }\n\n  if ((0,defined/* default */.Z)(heightReference) && dataSource._clampToGround) {\n    billboard.heightReference = heightReference;\n    label.heightReference = heightReference;\n  }\n}\n\nfunction processPathGraphics(entity, styleEntity) {\n  var path = entity.path;\n  if (!(0,defined/* default */.Z)(path)) {\n    path = new PathGraphics/* default */.Z();\n    path.leadTime = 0;\n    entity.path = path;\n  }\n\n  var polyline = styleEntity.polyline;\n  if ((0,defined/* default */.Z)(polyline)) {\n    path.material = polyline.material;\n    path.width = polyline.width;\n  }\n}\n\nfunction processPoint(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  var coordinatesString = queryStringValue(\n    geometryNode,\n    "coordinates",\n    namespaces.kml\n  );\n  var altitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.kml\n  );\n  var gxAltitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.gx\n  );\n  var extrude = queryBooleanValue(geometryNode, "extrude", namespaces.kml);\n  var ellipsoid = dataSource._ellipsoid;\n  var position = readCoordinate(coordinatesString, ellipsoid);\n\n  entity.position = position;\n  processPositionGraphics(\n    dataSource,\n    entity,\n    styleEntity,\n    heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode)\n  );\n\n  if (extrude && isExtrudable(altitudeMode, gxAltitudeMode)) {\n    createDropLine(entityCollection, entity, styleEntity);\n  }\n\n  return true;\n}\n\nfunction processLineStringOrLinearRing(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  var coordinatesNode = queryFirstNode(\n    geometryNode,\n    "coordinates",\n    namespaces.kml\n  );\n  var altitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.kml\n  );\n  var gxAltitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.gx\n  );\n  var extrude = queryBooleanValue(geometryNode, "extrude", namespaces.kml);\n  var tessellate = queryBooleanValue(\n    geometryNode,\n    "tessellate",\n    namespaces.kml\n  );\n  var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n  var zIndex = queryNumericValue(geometryNode, "drawOrder", namespaces.gx);\n\n  var ellipsoid = dataSource._ellipsoid;\n  var coordinates = readCoordinates(coordinatesNode, ellipsoid);\n  var polyline = styleEntity.polyline;\n  if (canExtrude && extrude) {\n    var wall = new WallGraphics/* default */.Z();\n    entity.wall = wall;\n    wall.positions = coordinates;\n    var polygon = styleEntity.polygon;\n\n    if ((0,defined/* default */.Z)(polygon)) {\n      wall.fill = polygon.fill;\n      wall.material = polygon.material;\n    }\n\n    //Always outline walls so they show up in 2D.\n    wall.outline = true;\n    if ((0,defined/* default */.Z)(polyline)) {\n      wall.outlineColor = (0,defined/* default */.Z)(polyline.material)\n        ? polyline.material.color\n        : Color/* default.WHITE */.Z.WHITE;\n      wall.outlineWidth = polyline.width;\n    } else if ((0,defined/* default */.Z)(polygon)) {\n      wall.outlineColor = (0,defined/* default */.Z)(polygon.material)\n        ? polygon.material.color\n        : Color/* default.WHITE */.Z.WHITE;\n    }\n  } else if (dataSource._clampToGround && !canExtrude && tessellate) {\n    var polylineGraphics = new PolylineGraphics/* default */.Z();\n    polylineGraphics.clampToGround = true;\n    entity.polyline = polylineGraphics;\n    polylineGraphics.positions = coordinates;\n    if ((0,defined/* default */.Z)(polyline)) {\n      polylineGraphics.material = (0,defined/* default */.Z)(polyline.material)\n        ? polyline.material.color.getValue(Iso8601/* default.MINIMUM_VALUE */.Z.MINIMUM_VALUE)\n        : Color/* default.WHITE */.Z.WHITE;\n      polylineGraphics.width = (0,defaultValue/* default */.Z)(polyline.width, 1.0);\n    } else {\n      polylineGraphics.material = Color/* default.WHITE */.Z.WHITE;\n      polylineGraphics.width = 1.0;\n    }\n    polylineGraphics.zIndex = zIndex;\n  } else {\n    if ((0,defined/* default */.Z)(zIndex)) {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-gx:drawOrder",\n        "KML - gx:drawOrder is not supported in LineStrings when clampToGround is false"\n      );\n    }\n    if (dataSource._clampToGround && !tessellate) {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-line-tesselate",\n        "Ignoring clampToGround for KML lines without the tessellate flag."\n      );\n    }\n\n    polyline = (0,defined/* default */.Z)(polyline) ? polyline.clone() : new PolylineGraphics/* default */.Z();\n    entity.polyline = polyline;\n    polyline.positions = createPositionPropertyArrayFromAltitudeMode(\n      coordinates,\n      altitudeMode,\n      gxAltitudeMode,\n      ellipsoid\n    );\n    if (!tessellate || canExtrude) {\n      polyline.arcType = ArcType/* default.NONE */.Z.NONE;\n    }\n  }\n\n  return true;\n}\n\nfunction processPolygon(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  var outerBoundaryIsNode = queryFirstNode(\n    geometryNode,\n    "outerBoundaryIs",\n    namespaces.kml\n  );\n  var linearRingNode = queryFirstNode(\n    outerBoundaryIsNode,\n    "LinearRing",\n    namespaces.kml\n  );\n  var coordinatesNode = queryFirstNode(\n    linearRingNode,\n    "coordinates",\n    namespaces.kml\n  );\n  var ellipsoid = dataSource._ellipsoid;\n  var coordinates = readCoordinates(coordinatesNode, ellipsoid);\n  var extrude = queryBooleanValue(geometryNode, "extrude", namespaces.kml);\n  var altitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.kml\n  );\n  var gxAltitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.gx\n  );\n  var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n\n  var polygon = (0,defined/* default */.Z)(styleEntity.polygon)\n    ? styleEntity.polygon.clone()\n    : createDefaultPolygon();\n\n  var polyline = styleEntity.polyline;\n  if ((0,defined/* default */.Z)(polyline)) {\n    polygon.outlineColor = (0,defined/* default */.Z)(polyline.material)\n      ? polyline.material.color\n      : Color/* default.WHITE */.Z.WHITE;\n    polygon.outlineWidth = polyline.width;\n  }\n  entity.polygon = polygon;\n\n  if (canExtrude) {\n    polygon.perPositionHeight = true;\n    polygon.extrudedHeight = extrude ? 0 : undefined;\n  } else if (!dataSource._clampToGround) {\n    polygon.height = 0;\n  }\n\n  if ((0,defined/* default */.Z)(coordinates)) {\n    var hierarchy = new PolygonHierarchy/* default */.Z(coordinates);\n    var innerBoundaryIsNodes = queryChildNodes(\n      geometryNode,\n      "innerBoundaryIs",\n      namespaces.kml\n    );\n    for (var j = 0; j < innerBoundaryIsNodes.length; j++) {\n      linearRingNode = queryChildNodes(\n        innerBoundaryIsNodes[j],\n        "LinearRing",\n        namespaces.kml\n      );\n      for (var k = 0; k < linearRingNode.length; k++) {\n        coordinatesNode = queryFirstNode(\n          linearRingNode[k],\n          "coordinates",\n          namespaces.kml\n        );\n        coordinates = readCoordinates(coordinatesNode, ellipsoid);\n        if ((0,defined/* default */.Z)(coordinates)) {\n          hierarchy.holes.push(new PolygonHierarchy/* default */.Z(coordinates));\n        }\n      }\n    }\n    polygon.hierarchy = hierarchy;\n  }\n\n  return true;\n}\n\nfunction processTrack(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  var altitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.kml\n  );\n  var gxAltitudeMode = queryStringValue(\n    geometryNode,\n    "altitudeMode",\n    namespaces.gx\n  );\n  var coordNodes = queryChildNodes(geometryNode, "coord", namespaces.gx);\n  var angleNodes = queryChildNodes(geometryNode, "angles", namespaces.gx);\n  var timeNodes = queryChildNodes(geometryNode, "when", namespaces.kml);\n  var extrude = queryBooleanValue(geometryNode, "extrude", namespaces.kml);\n  var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n  var ellipsoid = dataSource._ellipsoid;\n\n  if (angleNodes.length > 0) {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-gx:angles",\n      "KML - gx:angles are not supported in gx:Tracks"\n    );\n  }\n\n  var length = Math.min(coordNodes.length, timeNodes.length);\n  var coordinates = [];\n  var times = [];\n  for (var i = 0; i < length; i++) {\n    var position = readCoordinate(coordNodes[i].textContent, ellipsoid);\n    coordinates.push(position);\n    times.push(JulianDate/* default.fromIso8601 */.Z.fromIso8601(timeNodes[i].textContent));\n  }\n  var property = new SampledPositionProperty/* default */.Z();\n  property.addSamples(times, coordinates);\n  entity.position = property;\n  processPositionGraphics(\n    dataSource,\n    entity,\n    styleEntity,\n    heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode)\n  );\n  processPathGraphics(entity, styleEntity);\n\n  entity.availability = new TimeIntervalCollection/* default */.Z();\n\n  if (timeNodes.length > 0) {\n    entity.availability.addInterval(\n      new TimeInterval/* default */.Z({\n        start: times[0],\n        stop: times[times.length - 1],\n      })\n    );\n  }\n\n  if (canExtrude && extrude) {\n    createDropLine(entityCollection, entity, styleEntity);\n  }\n\n  return true;\n}\n\nfunction addToMultiTrack(\n  times,\n  positions,\n  composite,\n  availability,\n  dropShowProperty,\n  extrude,\n  altitudeMode,\n  gxAltitudeMode,\n  includeEndPoints\n) {\n  var start = times[0];\n  var stop = times[times.length - 1];\n\n  var data = new SampledPositionProperty/* default */.Z();\n  data.addSamples(times, positions);\n\n  composite.intervals.addInterval(\n    new TimeInterval/* default */.Z({\n      start: start,\n      stop: stop,\n      isStartIncluded: includeEndPoints,\n      isStopIncluded: includeEndPoints,\n      data: createPositionPropertyFromAltitudeMode(\n        data,\n        altitudeMode,\n        gxAltitudeMode\n      ),\n    })\n  );\n  availability.addInterval(\n    new TimeInterval/* default */.Z({\n      start: start,\n      stop: stop,\n      isStartIncluded: includeEndPoints,\n      isStopIncluded: includeEndPoints,\n    })\n  );\n  dropShowProperty.intervals.addInterval(\n    new TimeInterval/* default */.Z({\n      start: start,\n      stop: stop,\n      isStartIncluded: includeEndPoints,\n      isStopIncluded: includeEndPoints,\n      data: extrude,\n    })\n  );\n}\n\nfunction processMultiTrack(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  // Multitrack options do not work in GE as detailed in the spec,\n  // rather than altitudeMode being at the MultiTrack level,\n  // GE just defers all settings to the underlying track.\n\n  var interpolate = queryBooleanValue(\n    geometryNode,\n    "interpolate",\n    namespaces.gx\n  );\n  var trackNodes = queryChildNodes(geometryNode, "Track", namespaces.gx);\n\n  var times;\n  var lastStop;\n  var lastStopPosition;\n  var needDropLine = false;\n  var dropShowProperty = new TimeIntervalCollectionProperty/* default */.Z();\n  var availability = new TimeIntervalCollection/* default */.Z();\n  var composite = new CompositePositionProperty/* default */.Z();\n  var ellipsoid = dataSource._ellipsoid;\n  for (var i = 0, len = trackNodes.length; i < len; i++) {\n    var trackNode = trackNodes[i];\n    var timeNodes = queryChildNodes(trackNode, "when", namespaces.kml);\n    var coordNodes = queryChildNodes(trackNode, "coord", namespaces.gx);\n    var altitudeMode = queryStringValue(\n      trackNode,\n      "altitudeMode",\n      namespaces.kml\n    );\n    var gxAltitudeMode = queryStringValue(\n      trackNode,\n      "altitudeMode",\n      namespaces.gx\n    );\n    var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n    var extrude = queryBooleanValue(trackNode, "extrude", namespaces.kml);\n\n    var length = Math.min(coordNodes.length, timeNodes.length);\n\n    var positions = [];\n    times = [];\n    for (var x = 0; x < length; x++) {\n      var position = readCoordinate(coordNodes[x].textContent, ellipsoid);\n      positions.push(position);\n      times.push(JulianDate/* default.fromIso8601 */.Z.fromIso8601(timeNodes[x].textContent));\n    }\n\n    if (interpolate) {\n      //If we are interpolating, then we need to fill in the end of\n      //the last track and the beginning of this one with a sampled\n      //property.  From testing in Google Earth, this property\n      //is never extruded and always absolute.\n      if ((0,defined/* default */.Z)(lastStop)) {\n        addToMultiTrack(\n          [lastStop, times[0]],\n          [lastStopPosition, positions[0]],\n          composite,\n          availability,\n          dropShowProperty,\n          false,\n          "absolute",\n          undefined,\n          false\n        );\n      }\n      lastStop = times[length - 1];\n      lastStopPosition = positions[positions.length - 1];\n    }\n\n    addToMultiTrack(\n      times,\n      positions,\n      composite,\n      availability,\n      dropShowProperty,\n      canExtrude && extrude,\n      altitudeMode,\n      gxAltitudeMode,\n      true\n    );\n    needDropLine = needDropLine || (canExtrude && extrude);\n  }\n\n  entity.availability = availability;\n  entity.position = composite;\n  processPositionGraphics(dataSource, entity, styleEntity);\n  processPathGraphics(entity, styleEntity);\n  if (needDropLine) {\n    createDropLine(entityCollection, entity, styleEntity);\n    entity.polyline.show = dropShowProperty;\n  }\n\n  return true;\n}\n\nvar geometryTypes = {\n  Point: processPoint,\n  LineString: processLineStringOrLinearRing,\n  LinearRing: processLineStringOrLinearRing,\n  Polygon: processPolygon,\n  Track: processTrack,\n  MultiTrack: processMultiTrack,\n  MultiGeometry: processMultiGeometry,\n  Model: processUnsupportedGeometry,\n};\n\nfunction processMultiGeometry(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity,\n  context\n) {\n  var childNodes = geometryNode.childNodes;\n  var hasGeometry = false;\n  for (var i = 0, len = childNodes.length; i < len; i++) {\n    var childNode = childNodes.item(i);\n    var geometryProcessor = geometryTypes[childNode.localName];\n    if ((0,defined/* default */.Z)(geometryProcessor)) {\n      var childEntity = createEntity(childNode, entityCollection, context);\n      childEntity.parent = entity;\n      childEntity.name = entity.name;\n      childEntity.availability = entity.availability;\n      childEntity.description = entity.description;\n      childEntity.kml = entity.kml;\n      if (\n        geometryProcessor(\n          dataSource,\n          entityCollection,\n          childNode,\n          childEntity,\n          styleEntity\n        )\n      ) {\n        hasGeometry = true;\n      }\n    }\n  }\n\n  return hasGeometry;\n}\n\nfunction processUnsupportedGeometry(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  (0,oneTimeWarning/* default */.Z)(\n    "kml-unsupportedGeometry",\n    "KML - Unsupported geometry: " + geometryNode.localName\n  );\n  return false;\n}\n\nfunction processExtendedData(node, entity) {\n  var extendedDataNode = queryFirstNode(node, "ExtendedData", namespaces.kml);\n\n  if (!(0,defined/* default */.Z)(extendedDataNode)) {\n    return undefined;\n  }\n\n  if ((0,defined/* default */.Z)(queryFirstNode(extendedDataNode, "SchemaData", namespaces.kml))) {\n    (0,oneTimeWarning/* default */.Z)("kml-schemaData", "KML - SchemaData is unsupported");\n  }\n  if ((0,defined/* default */.Z)(queryStringAttribute(extendedDataNode, "xmlns:prefix"))) {\n    (0,oneTimeWarning/* default */.Z)(\n      "kml-extendedData",\n      "KML - ExtendedData with xmlns:prefix is unsupported"\n    );\n  }\n\n  var result = {};\n  var dataNodes = queryChildNodes(extendedDataNode, "Data", namespaces.kml);\n  if ((0,defined/* default */.Z)(dataNodes)) {\n    var length = dataNodes.length;\n    for (var i = 0; i < length; i++) {\n      var dataNode = dataNodes[i];\n      var name = queryStringAttribute(dataNode, "name");\n      if ((0,defined/* default */.Z)(name)) {\n        result[name] = {\n          displayName: queryStringValue(\n            dataNode,\n            "displayName",\n            namespaces.kml\n          ),\n          value: queryStringValue(dataNode, "value", namespaces.kml),\n        };\n      }\n    }\n  }\n  entity.kml.extendedData = result;\n}\n\nvar scratchDiv;\nif (typeof document !== "undefined") {\n  scratchDiv = document.createElement("div");\n}\n\nfunction processDescription(\n  node,\n  entity,\n  styleEntity,\n  uriResolver,\n  sourceResource\n) {\n  var i;\n  var key;\n  var keys;\n\n  var kmlData = entity.kml;\n  var extendedData = kmlData.extendedData;\n  var description = queryStringValue(node, "description", namespaces.kml);\n\n  var balloonStyle = (0,defaultValue/* default */.Z)(\n    entity.balloonStyle,\n    styleEntity.balloonStyle\n  );\n\n  var background = Color/* default.WHITE */.Z.WHITE;\n  var foreground = Color/* default.BLACK */.Z.BLACK;\n  var text = description;\n\n  if ((0,defined/* default */.Z)(balloonStyle)) {\n    background = (0,defaultValue/* default */.Z)(balloonStyle.bgColor, Color/* default.WHITE */.Z.WHITE);\n    foreground = (0,defaultValue/* default */.Z)(balloonStyle.textColor, Color/* default.BLACK */.Z.BLACK);\n    text = (0,defaultValue/* default */.Z)(balloonStyle.text, description);\n  }\n\n  var value;\n  if ((0,defined/* default */.Z)(text)) {\n    text = text.replace("$[name]", (0,defaultValue/* default */.Z)(entity.name, ""));\n    text = text.replace("$[description]", (0,defaultValue/* default */.Z)(description, ""));\n    text = text.replace("$[address]", (0,defaultValue/* default */.Z)(kmlData.address, ""));\n    text = text.replace("$[Snippet]", (0,defaultValue/* default */.Z)(kmlData.snippet, ""));\n    text = text.replace("$[id]", entity.id);\n\n    //While not explicitly defined by the OGC spec, in Google Earth\n    //The appearance of geDirections adds the directions to/from links\n    //We simply replace this string with nothing.\n    text = text.replace("$[geDirections]", "");\n\n    if ((0,defined/* default */.Z)(extendedData)) {\n      var matches = text.match(/\\$\\[.+?\\]/g);\n      if (matches !== null) {\n        for (i = 0; i < matches.length; i++) {\n          var token = matches[i];\n          var propertyName = token.substr(2, token.length - 3);\n          var isDisplayName = /\\/displayName$/.test(propertyName);\n          propertyName = propertyName.replace(/\\/displayName$/, "");\n\n          value = extendedData[propertyName];\n          if ((0,defined/* default */.Z)(value)) {\n            value = isDisplayName ? value.displayName : value.value;\n          }\n          if ((0,defined/* default */.Z)(value)) {\n            text = text.replace(token, (0,defaultValue/* default */.Z)(value, ""));\n          }\n        }\n      }\n    }\n  } else if ((0,defined/* default */.Z)(extendedData)) {\n    //If no description exists, build a table out of the extended data\n    keys = Object.keys(extendedData);\n    if (keys.length > 0) {\n      text =\n        \'<table class="cesium-infoBox-defaultTable cesium-infoBox-defaultTable-lighter"><tbody>\';\n      for (i = 0; i < keys.length; i++) {\n        key = keys[i];\n        value = extendedData[key];\n        text +=\n          "<tr><th>" +\n          (0,defaultValue/* default */.Z)(value.displayName, key) +\n          "</th><td>" +\n          (0,defaultValue/* default */.Z)(value.value, "") +\n          "</td></tr>";\n      }\n      text += "</tbody></table>";\n    }\n  }\n\n  if (!(0,defined/* default */.Z)(text)) {\n    //No description\n    return;\n  }\n\n  //Turns non-explicit links into clickable links.\n  text = autolinker.link(text);\n\n  //Use a temporary div to manipulate the links\n  //so that they open in a new window.\n  scratchDiv.innerHTML = text;\n  var links = scratchDiv.querySelectorAll("a");\n  for (i = 0; i < links.length; i++) {\n    links[i].setAttribute("target", "_blank");\n  }\n\n  //Rewrite any KMZ embedded urls\n  if ((0,defined/* default */.Z)(uriResolver) && uriResolver.keys.length > 1) {\n    embedDataUris(scratchDiv, "a", "href", uriResolver);\n    embedDataUris(scratchDiv, "img", "src", uriResolver);\n  }\n\n  //Make relative urls absolute using the sourceResource\n  applyBasePath(scratchDiv, "a", "href", sourceResource);\n  applyBasePath(scratchDiv, "img", "src", sourceResource);\n\n  var tmp = \'<div class="cesium-infoBox-description-lighter" style="\';\n  tmp += "overflow:auto;";\n  tmp += "word-wrap:break-word;";\n  tmp += "background-color:" + background.toCssColorString() + ";";\n  tmp += "color:" + foreground.toCssColorString() + ";";\n  tmp += \'">\';\n  tmp += scratchDiv.innerHTML + "</div>";\n  scratchDiv.innerHTML = "";\n\n  //Set the final HTML as the description.\n  entity.description = tmp;\n}\n\nfunction processFeature(dataSource, featureNode, processingData) {\n  var entityCollection = processingData.entityCollection;\n  var parent = processingData.parentEntity;\n  var sourceResource = processingData.sourceResource;\n  var uriResolver = processingData.uriResolver;\n\n  var entity = createEntity(\n    featureNode,\n    entityCollection,\n    processingData.context\n  );\n  var kmlData = entity.kml;\n  var styleEntity = computeFinalStyle(\n    dataSource,\n    featureNode,\n    processingData.styleCollection,\n    sourceResource,\n    uriResolver\n  );\n\n  var name = queryStringValue(featureNode, "name", namespaces.kml);\n  entity.name = name;\n  entity.parent = parent;\n\n  var availability = processTimeSpan(featureNode);\n  if (!(0,defined/* default */.Z)(availability)) {\n    availability = processTimeStamp(featureNode);\n  }\n  entity.availability = availability;\n\n  mergeAvailabilityWithParent(entity);\n\n  // Per KML spec "A Feature is visible only if it and all its ancestors are visible."\n  function ancestryIsVisible(parentEntity) {\n    if (!parentEntity) {\n      return true;\n    }\n    return parentEntity.show && ancestryIsVisible(parentEntity.parent);\n  }\n\n  var visibility = queryBooleanValue(featureNode, "visibility", namespaces.kml);\n  entity.show = ancestryIsVisible(parent) && (0,defaultValue/* default */.Z)(visibility, true);\n  //var open = queryBooleanValue(featureNode, \'open\', namespaces.kml);\n\n  var authorNode = queryFirstNode(featureNode, "author", namespaces.atom);\n  var author = kmlData.author;\n  author.name = queryStringValue(authorNode, "name", namespaces.atom);\n  author.uri = queryStringValue(authorNode, "uri", namespaces.atom);\n  author.email = queryStringValue(authorNode, "email", namespaces.atom);\n\n  var linkNode = queryFirstNode(featureNode, "link", namespaces.atom);\n  var link = kmlData.link;\n  link.href = queryStringAttribute(linkNode, "href");\n  link.hreflang = queryStringAttribute(linkNode, "hreflang");\n  link.rel = queryStringAttribute(linkNode, "rel");\n  link.type = queryStringAttribute(linkNode, "type");\n  link.title = queryStringAttribute(linkNode, "title");\n  link.length = queryStringAttribute(linkNode, "length");\n\n  kmlData.address = queryStringValue(featureNode, "address", namespaces.kml);\n  kmlData.phoneNumber = queryStringValue(\n    featureNode,\n    "phoneNumber",\n    namespaces.kml\n  );\n  kmlData.snippet = queryStringValue(featureNode, "Snippet", namespaces.kml);\n\n  processExtendedData(featureNode, entity);\n  processDescription(\n    featureNode,\n    entity,\n    styleEntity,\n    uriResolver,\n    sourceResource\n  );\n\n  var ellipsoid = dataSource._ellipsoid;\n  processLookAt(featureNode, entity, ellipsoid);\n  processCamera(featureNode, entity, ellipsoid);\n\n  if ((0,defined/* default */.Z)(queryFirstNode(featureNode, "Region", namespaces.kml))) {\n    (0,oneTimeWarning/* default */.Z)("kml-region", "KML - Placemark Regions are unsupported");\n  }\n\n  return {\n    entity: entity,\n    styleEntity: styleEntity,\n  };\n}\n\nfunction processDocument(dataSource, node, processingData, deferredLoading) {\n  deferredLoading.addNodes(node.childNodes, processingData);\n  deferredLoading.process();\n}\n\nfunction processFolder(dataSource, node, processingData, deferredLoading) {\n  var r = processFeature(dataSource, node, processingData);\n  var newProcessingData = (0,clone/* default */.Z)(processingData);\n  newProcessingData.parentEntity = r.entity;\n  processDocument(dataSource, node, newProcessingData, deferredLoading);\n}\n\nfunction processPlacemark(\n  dataSource,\n  placemark,\n  processingData,\n  deferredLoading\n) {\n  var r = processFeature(dataSource, placemark, processingData);\n  var entity = r.entity;\n  var styleEntity = r.styleEntity;\n\n  var hasGeometry = false;\n  var childNodes = placemark.childNodes;\n  for (var i = 0, len = childNodes.length; i < len && !hasGeometry; i++) {\n    var childNode = childNodes.item(i);\n    var geometryProcessor = geometryTypes[childNode.localName];\n    if ((0,defined/* default */.Z)(geometryProcessor)) {\n      // pass the placemark entity id as a context for case of defining multiple child entities together to handle case\n      // where some malformed kmls reuse the same id across placemarks, which works in GE, but is not technically to spec.\n      geometryProcessor(\n        dataSource,\n        processingData.entityCollection,\n        childNode,\n        entity,\n        styleEntity,\n        entity.id\n      );\n      hasGeometry = true;\n    }\n  }\n\n  if (!hasGeometry) {\n    entity.merge(styleEntity);\n    processPositionGraphics(dataSource, entity, styleEntity);\n  }\n}\n\nvar playlistNodeProcessors = {\n  FlyTo: processTourFlyTo,\n  Wait: processTourWait,\n  SoundCue: processTourUnsupportedNode,\n  AnimatedUpdate: processTourUnsupportedNode,\n  TourControl: processTourUnsupportedNode,\n};\n\nfunction processTour(dataSource, node, processingData, deferredLoading) {\n  var name = queryStringValue(node, "name", namespaces.kml);\n  var id = queryStringAttribute(node, "id");\n  var tour = new KmlTour/* default */.Z(name, id);\n\n  var playlistNode = queryFirstNode(node, "Playlist", namespaces.gx);\n  if (playlistNode) {\n    var ellipsoid = dataSource._ellipsoid;\n    var childNodes = playlistNode.childNodes;\n    for (var i = 0; i < childNodes.length; i++) {\n      var entryNode = childNodes[i];\n      if (entryNode.localName) {\n        var playlistNodeProcessor = playlistNodeProcessors[entryNode.localName];\n        if (playlistNodeProcessor) {\n          playlistNodeProcessor(tour, entryNode, ellipsoid);\n        } else {\n          console.log(\n            "Unknown KML Tour playlist entry type " + entryNode.localName\n          );\n        }\n      }\n    }\n  }\n\n  dataSource._kmlTours.push(tour);\n}\n\nfunction processTourUnsupportedNode(tour, entryNode) {\n  (0,oneTimeWarning/* default */.Z)("KML Tour unsupported node " + entryNode.localName);\n}\n\nfunction processTourWait(tour, entryNode) {\n  var duration = queryNumericValue(entryNode, "duration", namespaces.gx);\n  tour.addPlaylistEntry(new KmlTourWait/* default */.Z(duration));\n}\n\nfunction processTourFlyTo(tour, entryNode, ellipsoid) {\n  var duration = queryNumericValue(entryNode, "duration", namespaces.gx);\n  var flyToMode = queryStringValue(entryNode, "flyToMode", namespaces.gx);\n\n  var t = { kml: {} };\n\n  processLookAt(entryNode, t, ellipsoid);\n  processCamera(entryNode, t, ellipsoid);\n\n  var view = t.kml.lookAt || t.kml.camera;\n\n  var flyto = new KmlTourFlyTo/* default */.Z(duration, flyToMode, view);\n  tour.addPlaylistEntry(flyto);\n}\n\nfunction processCamera(featureNode, entity, ellipsoid) {\n  var camera = queryFirstNode(featureNode, "Camera", namespaces.kml);\n  if ((0,defined/* default */.Z)(camera)) {\n    var lon = (0,defaultValue/* default */.Z)(\n      queryNumericValue(camera, "longitude", namespaces.kml),\n      0.0\n    );\n    var lat = (0,defaultValue/* default */.Z)(\n      queryNumericValue(camera, "latitude", namespaces.kml),\n      0.0\n    );\n    var altitude = (0,defaultValue/* default */.Z)(\n      queryNumericValue(camera, "altitude", namespaces.kml),\n      0.0\n    );\n\n    var heading = (0,defaultValue/* default */.Z)(\n      queryNumericValue(camera, "heading", namespaces.kml),\n      0.0\n    );\n    var tilt = (0,defaultValue/* default */.Z)(\n      queryNumericValue(camera, "tilt", namespaces.kml),\n      0.0\n    );\n    var roll = (0,defaultValue/* default */.Z)(\n      queryNumericValue(camera, "roll", namespaces.kml),\n      0.0\n    );\n\n    var position = Cartesian3/* default.fromDegrees */.Z.fromDegrees(lon, lat, altitude, ellipsoid);\n    var hpr = HeadingPitchRoll/* default.fromDegrees */.Z.fromDegrees(heading, tilt - 90.0, roll);\n\n    entity.kml.camera = new DataSources_KmlCamera(position, hpr);\n  }\n}\n\nfunction processLookAt(featureNode, entity, ellipsoid) {\n  var lookAt = queryFirstNode(featureNode, "LookAt", namespaces.kml);\n  if ((0,defined/* default */.Z)(lookAt)) {\n    var lon = (0,defaultValue/* default */.Z)(\n      queryNumericValue(lookAt, "longitude", namespaces.kml),\n      0.0\n    );\n    var lat = (0,defaultValue/* default */.Z)(\n      queryNumericValue(lookAt, "latitude", namespaces.kml),\n      0.0\n    );\n    var altitude = (0,defaultValue/* default */.Z)(\n      queryNumericValue(lookAt, "altitude", namespaces.kml),\n      0.0\n    );\n    var heading = queryNumericValue(lookAt, "heading", namespaces.kml);\n    var tilt = queryNumericValue(lookAt, "tilt", namespaces.kml);\n    var range = (0,defaultValue/* default */.Z)(\n      queryNumericValue(lookAt, "range", namespaces.kml),\n      0.0\n    );\n\n    tilt = Core_Math/* default.toRadians */.Z.toRadians((0,defaultValue/* default */.Z)(tilt, 0.0));\n    heading = Core_Math/* default.toRadians */.Z.toRadians((0,defaultValue/* default */.Z)(heading, 0.0));\n\n    var hpr = new HeadingPitchRange/* default */.Z(\n      heading,\n      tilt - Core_Math/* default.PI_OVER_TWO */.Z.PI_OVER_TWO,\n      range\n    );\n    var viewPoint = Cartesian3/* default.fromDegrees */.Z.fromDegrees(lon, lat, altitude, ellipsoid);\n\n    entity.kml.lookAt = new DataSources_KmlLookAt(viewPoint, hpr);\n  }\n}\n\nfunction processGroundOverlay(\n  dataSource,\n  groundOverlay,\n  processingData,\n  deferredLoading\n) {\n  var r = processFeature(dataSource, groundOverlay, processingData);\n  var entity = r.entity;\n\n  var geometry;\n  var isLatLonQuad = false;\n\n  var ellipsoid = dataSource._ellipsoid;\n  var positions = readCoordinates(\n    queryFirstNode(groundOverlay, "LatLonQuad", namespaces.gx),\n    ellipsoid\n  );\n  var zIndex = queryNumericValue(groundOverlay, "drawOrder", namespaces.kml);\n  if ((0,defined/* default */.Z)(positions)) {\n    geometry = createDefaultPolygon();\n    geometry.hierarchy = new PolygonHierarchy/* default */.Z(positions);\n    geometry.zIndex = zIndex;\n    entity.polygon = geometry;\n    isLatLonQuad = true;\n  } else {\n    geometry = new RectangleGraphics/* default */.Z();\n    geometry.zIndex = zIndex;\n    entity.rectangle = geometry;\n\n    var latLonBox = queryFirstNode(groundOverlay, "LatLonBox", namespaces.kml);\n    if ((0,defined/* default */.Z)(latLonBox)) {\n      var west = queryNumericValue(latLonBox, "west", namespaces.kml);\n      var south = queryNumericValue(latLonBox, "south", namespaces.kml);\n      var east = queryNumericValue(latLonBox, "east", namespaces.kml);\n      var north = queryNumericValue(latLonBox, "north", namespaces.kml);\n\n      if ((0,defined/* default */.Z)(west)) {\n        west = Core_Math/* default.negativePiToPi */.Z.negativePiToPi(Core_Math/* default.toRadians */.Z.toRadians(west));\n      }\n      if ((0,defined/* default */.Z)(south)) {\n        south = Core_Math/* default.clampToLatitudeRange */.Z.clampToLatitudeRange(Core_Math/* default.toRadians */.Z.toRadians(south));\n      }\n      if ((0,defined/* default */.Z)(east)) {\n        east = Core_Math/* default.negativePiToPi */.Z.negativePiToPi(Core_Math/* default.toRadians */.Z.toRadians(east));\n      }\n      if ((0,defined/* default */.Z)(north)) {\n        north = Core_Math/* default.clampToLatitudeRange */.Z.clampToLatitudeRange(Core_Math/* default.toRadians */.Z.toRadians(north));\n      }\n      geometry.coordinates = new Rectangle/* default */.Z(west, south, east, north);\n\n      var rotation = queryNumericValue(latLonBox, "rotation", namespaces.kml);\n      if ((0,defined/* default */.Z)(rotation)) {\n        var rotationRadians = Core_Math/* default.toRadians */.Z.toRadians(rotation);\n        geometry.rotation = rotationRadians;\n        geometry.stRotation = rotationRadians;\n      }\n    }\n  }\n\n  var iconNode = queryFirstNode(groundOverlay, "Icon", namespaces.kml);\n  var href = getIconHref(\n    iconNode,\n    dataSource,\n    processingData.sourceResource,\n    processingData.uriResolver,\n    true\n  );\n  if ((0,defined/* default */.Z)(href)) {\n    if (isLatLonQuad) {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-gx:LatLonQuad",\n        "KML - gx:LatLonQuad Icon does not support texture projection."\n      );\n    }\n    var x = queryNumericValue(iconNode, "x", namespaces.gx);\n    var y = queryNumericValue(iconNode, "y", namespaces.gx);\n    var w = queryNumericValue(iconNode, "w", namespaces.gx);\n    var h = queryNumericValue(iconNode, "h", namespaces.gx);\n\n    if ((0,defined/* default */.Z)(x) || (0,defined/* default */.Z)(y) || (0,defined/* default */.Z)(w) || (0,defined/* default */.Z)(h)) {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-groundOverlay-xywh",\n        "KML - gx:x, gx:y, gx:w, gx:h aren\'t supported for GroundOverlays"\n      );\n    }\n\n    geometry.material = href;\n    geometry.material.color = queryColorValue(\n      groundOverlay,\n      "color",\n      namespaces.kml\n    );\n    geometry.material.transparent = true;\n  } else {\n    geometry.material = queryColorValue(groundOverlay, "color", namespaces.kml);\n  }\n\n  var altitudeMode = queryStringValue(\n    groundOverlay,\n    "altitudeMode",\n    namespaces.kml\n  );\n\n  if ((0,defined/* default */.Z)(altitudeMode)) {\n    if (altitudeMode === "absolute") {\n      //Use height above ellipsoid until we support MSL.\n      geometry.height = queryNumericValue(\n        groundOverlay,\n        "altitude",\n        namespaces.kml\n      );\n      geometry.zIndex = undefined;\n    } else if (altitudeMode !== "clampToGround") {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-altitudeMode-unknown",\n        "KML - Unknown altitudeMode: " + altitudeMode\n      );\n    }\n    // else just use the default of 0 until we support \'clampToGround\'\n  } else {\n    altitudeMode = queryStringValue(\n      groundOverlay,\n      "altitudeMode",\n      namespaces.gx\n    );\n    if (altitudeMode === "relativeToSeaFloor") {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-altitudeMode-relativeToSeaFloor",\n        "KML - altitudeMode relativeToSeaFloor is currently not supported, treating as absolute."\n      );\n      geometry.height = queryNumericValue(\n        groundOverlay,\n        "altitude",\n        namespaces.kml\n      );\n      geometry.zIndex = undefined;\n    } else if (altitudeMode === "clampToSeaFloor") {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-altitudeMode-clampToSeaFloor",\n        "KML - altitudeMode clampToSeaFloor is currently not supported, treating as clampToGround."\n      );\n    } else if ((0,defined/* default */.Z)(altitudeMode)) {\n      (0,oneTimeWarning/* default */.Z)(\n        "kml-altitudeMode-unknown",\n        "KML - Unknown altitudeMode: " + altitudeMode\n      );\n    }\n  }\n}\n\nfunction processUnsupportedFeature(\n  dataSource,\n  node,\n  processingData,\n  deferredLoading\n) {\n  dataSource._unsupportedNode.raiseEvent(\n    dataSource,\n    processingData.parentEntity,\n    node,\n    processingData.entityCollection,\n    processingData.styleCollection,\n    processingData.sourceResource,\n    processingData.uriResolver\n  );\n  (0,oneTimeWarning/* default */.Z)(\n    "kml-unsupportedFeature-" + node.nodeName,\n    "KML - Unsupported feature: " + node.nodeName\n  );\n}\n\nvar RefreshMode = {\n  INTERVAL: 0,\n  EXPIRE: 1,\n  STOP: 2,\n};\n\nfunction cleanupString(s) {\n  if (!(0,defined/* default */.Z)(s) || s.length === 0) {\n    return "";\n  }\n\n  var sFirst = s[0];\n  if (sFirst === "&" || sFirst === "?") {\n    s = s.substring(1);\n  }\n\n  return s;\n}\n\nvar zeroRectangle = new Rectangle/* default */.Z();\nvar scratchCartographic = new Cartographic/* default */.Z();\nvar scratchCartesian2 = new Cartesian2/* default */.Z();\nvar scratchCartesian3 = new Cartesian3/* default */.Z();\n\nfunction processNetworkLinkQueryString(\n  resource,\n  camera,\n  canvas,\n  viewBoundScale,\n  bbox,\n  ellipsoid\n) {\n  function fixLatitude(value) {\n    if (value < -Core_Math/* default.PI_OVER_TWO */.Z.PI_OVER_TWO) {\n      return -Core_Math/* default.PI_OVER_TWO */.Z.PI_OVER_TWO;\n    } else if (value > Core_Math/* default.PI_OVER_TWO */.Z.PI_OVER_TWO) {\n      return Core_Math/* default.PI_OVER_TWO */.Z.PI_OVER_TWO;\n    }\n    return value;\n  }\n\n  function fixLongitude(value) {\n    if (value > Core_Math/* default.PI */.Z.PI) {\n      return value - Core_Math/* default.TWO_PI */.Z.TWO_PI;\n    } else if (value < -Core_Math/* default.PI */.Z.PI) {\n      return value + Core_Math/* default.TWO_PI */.Z.TWO_PI;\n    }\n\n    return value;\n  }\n\n  var queryString = (0,objectToQuery/* default */.Z)(resource.queryParameters);\n\n  // objectToQuery escapes [ and ], so fix that\n  queryString = queryString.replace(/%5B/g, "[").replace(/%5D/g, "]");\n\n  if ((0,defined/* default */.Z)(camera) && camera._mode !== SceneMode/* default.MORPHING */.Z.MORPHING) {\n    var centerCartesian;\n    var centerCartographic;\n\n    bbox = (0,defaultValue/* default */.Z)(bbox, zeroRectangle);\n    if ((0,defined/* default */.Z)(canvas)) {\n      scratchCartesian2.x = canvas.clientWidth * 0.5;\n      scratchCartesian2.y = canvas.clientHeight * 0.5;\n      centerCartesian = camera.pickEllipsoid(\n        scratchCartesian2,\n        ellipsoid,\n        scratchCartesian3\n      );\n    }\n\n    if ((0,defined/* default */.Z)(centerCartesian)) {\n      centerCartographic = ellipsoid.cartesianToCartographic(\n        centerCartesian,\n        scratchCartographic\n      );\n    } else {\n      centerCartographic = Rectangle/* default.center */.Z.center(bbox, scratchCartographic);\n      centerCartesian = ellipsoid.cartographicToCartesian(centerCartographic);\n    }\n\n    if (\n      (0,defined/* default */.Z)(viewBoundScale) &&\n      !Core_Math/* default.equalsEpsilon */.Z.equalsEpsilon(viewBoundScale, 1.0, Core_Math/* default.EPSILON9 */.Z.EPSILON9)\n    ) {\n      var newHalfWidth = bbox.width * viewBoundScale * 0.5;\n      var newHalfHeight = bbox.height * viewBoundScale * 0.5;\n      bbox = new Rectangle/* default */.Z(\n        fixLongitude(centerCartographic.longitude - newHalfWidth),\n        fixLatitude(centerCartographic.latitude - newHalfHeight),\n        fixLongitude(centerCartographic.longitude + newHalfWidth),\n        fixLatitude(centerCartographic.latitude + newHalfHeight)\n      );\n    }\n\n    queryString = queryString.replace(\n      "[bboxWest]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(bbox.west).toString()\n    );\n    queryString = queryString.replace(\n      "[bboxSouth]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(bbox.south).toString()\n    );\n    queryString = queryString.replace(\n      "[bboxEast]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(bbox.east).toString()\n    );\n    queryString = queryString.replace(\n      "[bboxNorth]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(bbox.north).toString()\n    );\n\n    var lon = Core_Math/* default.toDegrees */.Z.toDegrees(centerCartographic.longitude).toString();\n    var lat = Core_Math/* default.toDegrees */.Z.toDegrees(centerCartographic.latitude).toString();\n    queryString = queryString.replace("[lookatLon]", lon);\n    queryString = queryString.replace("[lookatLat]", lat);\n    queryString = queryString.replace(\n      "[lookatTilt]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(camera.pitch).toString()\n    );\n    queryString = queryString.replace(\n      "[lookatHeading]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(camera.heading).toString()\n    );\n    queryString = queryString.replace(\n      "[lookatRange]",\n      Cartesian3/* default.distance */.Z.distance(camera.positionWC, centerCartesian)\n    );\n    queryString = queryString.replace("[lookatTerrainLon]", lon);\n    queryString = queryString.replace("[lookatTerrainLat]", lat);\n    queryString = queryString.replace(\n      "[lookatTerrainAlt]",\n      centerCartographic.height.toString()\n    );\n\n    ellipsoid.cartesianToCartographic(camera.positionWC, scratchCartographic);\n    queryString = queryString.replace(\n      "[cameraLon]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(scratchCartographic.longitude).toString()\n    );\n    queryString = queryString.replace(\n      "[cameraLat]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(scratchCartographic.latitude).toString()\n    );\n    queryString = queryString.replace(\n      "[cameraAlt]",\n      Core_Math/* default.toDegrees */.Z.toDegrees(scratchCartographic.height).toString()\n    );\n\n    var frustum = camera.frustum;\n    var aspectRatio = frustum.aspectRatio;\n    var horizFov = "";\n    var vertFov = "";\n    if ((0,defined/* default */.Z)(aspectRatio)) {\n      var fov = Core_Math/* default.toDegrees */.Z.toDegrees(frustum.fov);\n      if (aspectRatio > 1.0) {\n        horizFov = fov;\n        vertFov = fov / aspectRatio;\n      } else {\n        vertFov = fov;\n        horizFov = fov * aspectRatio;\n      }\n    }\n    queryString = queryString.replace("[horizFov]", horizFov.toString());\n    queryString = queryString.replace("[vertFov]", vertFov.toString());\n  } else {\n    queryString = queryString.replace("[bboxWest]", "-180");\n    queryString = queryString.replace("[bboxSouth]", "-90");\n    queryString = queryString.replace("[bboxEast]", "180");\n    queryString = queryString.replace("[bboxNorth]", "90");\n\n    queryString = queryString.replace("[lookatLon]", "");\n    queryString = queryString.replace("[lookatLat]", "");\n    queryString = queryString.replace("[lookatRange]", "");\n    queryString = queryString.replace("[lookatTilt]", "");\n    queryString = queryString.replace("[lookatHeading]", "");\n    queryString = queryString.replace("[lookatTerrainLon]", "");\n    queryString = queryString.replace("[lookatTerrainLat]", "");\n    queryString = queryString.replace("[lookatTerrainAlt]", "");\n\n    queryString = queryString.replace("[cameraLon]", "");\n    queryString = queryString.replace("[cameraLat]", "");\n    queryString = queryString.replace("[cameraAlt]", "");\n    queryString = queryString.replace("[horizFov]", "");\n    queryString = queryString.replace("[vertFov]", "");\n  }\n\n  if ((0,defined/* default */.Z)(canvas)) {\n    queryString = queryString.replace("[horizPixels]", canvas.clientWidth);\n    queryString = queryString.replace("[vertPixels]", canvas.clientHeight);\n  } else {\n    queryString = queryString.replace("[horizPixels]", "");\n    queryString = queryString.replace("[vertPixels]", "");\n  }\n\n  queryString = queryString.replace("[terrainEnabled]", "1");\n  queryString = queryString.replace("[clientVersion]", "1");\n  queryString = queryString.replace("[kmlVersion]", "2.2");\n  queryString = queryString.replace("[clientName]", "Cesium");\n  queryString = queryString.replace("[language]", "English");\n\n  resource.setQueryParameters((0,queryToObject/* default */.Z)(queryString));\n}\n\nfunction processNetworkLink(dataSource, node, processingData, deferredLoading) {\n  var r = processFeature(dataSource, node, processingData);\n  var networkEntity = r.entity;\n\n  var sourceResource = processingData.sourceResource;\n  var uriResolver = processingData.uriResolver;\n\n  var link = queryFirstNode(node, "Link", namespaces.kml);\n\n  if (!(0,defined/* default */.Z)(link)) {\n    link = queryFirstNode(node, "Url", namespaces.kml);\n  }\n  if ((0,defined/* default */.Z)(link)) {\n    var href = queryStringValue(link, "href", namespaces.kml);\n    var viewRefreshMode;\n    var viewBoundScale;\n    if ((0,defined/* default */.Z)(href)) {\n      var newSourceUri = href;\n      href = resolveHref(href, sourceResource, processingData.uriResolver);\n\n      // We need to pass in the original path if resolveHref returns a data uri because the network link\n      //  references a document in a KMZ archive\n      if (/^data:/.test(href.getUrlComponent())) {\n        // So if sourceUri isn\'t the kmz file, then its another kml in the archive, so resolve it\n        if (!/\\.kmz/i.test(sourceResource.getUrlComponent())) {\n          newSourceUri = sourceResource.getDerivedResource({\n            url: newSourceUri,\n          });\n        }\n      } else {\n        newSourceUri = href.clone(); // Not a data uri so use the fully qualified uri\n        viewRefreshMode = queryStringValue(\n          link,\n          "viewRefreshMode",\n          namespaces.kml\n        );\n        viewBoundScale = (0,defaultValue/* default */.Z)(\n          queryStringValue(link, "viewBoundScale", namespaces.kml),\n          1.0\n        );\n        var defaultViewFormat =\n          viewRefreshMode === "onStop"\n            ? "BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]"\n            : "";\n        var viewFormat = (0,defaultValue/* default */.Z)(\n          queryStringValue(link, "viewFormat", namespaces.kml),\n          defaultViewFormat\n        );\n        var httpQuery = queryStringValue(link, "httpQuery", namespaces.kml);\n        if ((0,defined/* default */.Z)(viewFormat)) {\n          href.setQueryParameters((0,queryToObject/* default */.Z)(cleanupString(viewFormat)));\n        }\n        if ((0,defined/* default */.Z)(httpQuery)) {\n          href.setQueryParameters((0,queryToObject/* default */.Z)(cleanupString(httpQuery)));\n        }\n\n        var ellipsoid = dataSource._ellipsoid;\n        processNetworkLinkQueryString(\n          href,\n          dataSource._camera,\n          dataSource._canvas,\n          viewBoundScale,\n          dataSource._lastCameraView.bbox,\n          ellipsoid\n        );\n      }\n\n      var options = {\n        sourceUri: newSourceUri,\n        uriResolver: uriResolver,\n        context: networkEntity.id,\n      };\n      var networkLinkCollection = new EntityCollection/* default */.Z();\n      var promise = load(dataSource, networkLinkCollection, href, options)\n        .then(function (rootElement) {\n          var entities = dataSource._entityCollection;\n          var newEntities = networkLinkCollection.values;\n          entities.suspendEvents();\n          for (var i = 0; i < newEntities.length; i++) {\n            var newEntity = newEntities[i];\n            if (!(0,defined/* default */.Z)(newEntity.parent)) {\n              newEntity.parent = networkEntity;\n              mergeAvailabilityWithParent(newEntity);\n            }\n\n            entities.add(newEntity);\n          }\n          entities.resumeEvents();\n\n          // Add network links to a list if we need they will need to be updated\n          var refreshMode = queryStringValue(\n            link,\n            "refreshMode",\n            namespaces.kml\n          );\n          var refreshInterval = (0,defaultValue/* default */.Z)(\n            queryNumericValue(link, "refreshInterval", namespaces.kml),\n            0\n          );\n          if (\n            (refreshMode === "onInterval" && refreshInterval > 0) ||\n            refreshMode === "onExpire" ||\n            viewRefreshMode === "onStop"\n          ) {\n            var networkLinkControl = queryFirstNode(\n              rootElement,\n              "NetworkLinkControl",\n              namespaces.kml\n            );\n            var hasNetworkLinkControl = (0,defined/* default */.Z)(networkLinkControl);\n\n            var now = JulianDate/* default.now */.Z.now();\n            var networkLinkInfo = {\n              id: (0,createGuid/* default */.Z)(),\n              href: href,\n              cookie: {},\n              lastUpdated: now,\n              updating: false,\n              entity: networkEntity,\n              viewBoundScale: viewBoundScale,\n              needsUpdate: false,\n              cameraUpdateTime: now,\n            };\n\n            var minRefreshPeriod = 0;\n            if (hasNetworkLinkControl) {\n              networkLinkInfo.cookie = (0,queryToObject/* default */.Z)(\n                (0,defaultValue/* default */.Z)(\n                  queryStringValue(\n                    networkLinkControl,\n                    "cookie",\n                    namespaces.kml\n                  ),\n                  ""\n                )\n              );\n              minRefreshPeriod = (0,defaultValue/* default */.Z)(\n                queryNumericValue(\n                  networkLinkControl,\n                  "minRefreshPeriod",\n                  namespaces.kml\n                ),\n                0\n              );\n            }\n\n            if (refreshMode === "onInterval") {\n              if (hasNetworkLinkControl) {\n                refreshInterval = Math.max(minRefreshPeriod, refreshInterval);\n              }\n              networkLinkInfo.refreshMode = RefreshMode.INTERVAL;\n              networkLinkInfo.time = refreshInterval;\n            } else if (refreshMode === "onExpire") {\n              var expires;\n              if (hasNetworkLinkControl) {\n                expires = queryStringValue(\n                  networkLinkControl,\n                  "expires",\n                  namespaces.kml\n                );\n              }\n              if ((0,defined/* default */.Z)(expires)) {\n                try {\n                  var date = JulianDate/* default.fromIso8601 */.Z.fromIso8601(expires);\n                  var diff = JulianDate/* default.secondsDifference */.Z.secondsDifference(date, now);\n                  if (diff > 0 && diff < minRefreshPeriod) {\n                    JulianDate/* default.addSeconds */.Z.addSeconds(now, minRefreshPeriod, date);\n                  }\n                  networkLinkInfo.refreshMode = RefreshMode.EXPIRE;\n                  networkLinkInfo.time = date;\n                } catch (e) {\n                  (0,oneTimeWarning/* default */.Z)(\n                    "kml-refreshMode-onInterval-onExpire",\n                    "KML - NetworkLinkControl expires is not a valid date"\n                  );\n                }\n              } else {\n                (0,oneTimeWarning/* default */.Z)(\n                  "kml-refreshMode-onExpire",\n                  "KML - refreshMode of onExpire requires the NetworkLinkControl to have an expires element"\n                );\n              }\n            } else if (dataSource._camera) {\n              // Only allow onStop refreshes if we have a camera\n              networkLinkInfo.refreshMode = RefreshMode.STOP;\n              networkLinkInfo.time = (0,defaultValue/* default */.Z)(\n                queryNumericValue(link, "viewRefreshTime", namespaces.kml),\n                0\n              );\n            } else {\n              (0,oneTimeWarning/* default */.Z)(\n                "kml-refrehMode-onStop-noCamera",\n                "A NetworkLink with viewRefreshMode=onStop requires a camera be passed in when creating the KmlDataSource"\n              );\n            }\n\n            if ((0,defined/* default */.Z)(networkLinkInfo.refreshMode)) {\n              dataSource._networkLinks.set(networkLinkInfo.id, networkLinkInfo);\n            }\n          } else if (viewRefreshMode === "onRegion") {\n            (0,oneTimeWarning/* default */.Z)(\n              "kml-refrehMode-onRegion",\n              "KML - Unsupported viewRefreshMode: onRegion"\n            );\n          }\n        })\n        .otherwise(function (error) {\n          (0,oneTimeWarning/* default */.Z)("An error occured during loading " + href.url);\n          dataSource._error.raiseEvent(dataSource, error);\n        });\n\n      deferredLoading.addPromise(promise);\n    }\n  }\n}\n\nfunction processFeatureNode(dataSource, node, processingData, deferredLoading) {\n  var featureProcessor = featureTypes[node.localName];\n  if ((0,defined/* default */.Z)(featureProcessor)) {\n    return featureProcessor(dataSource, node, processingData, deferredLoading);\n  }\n\n  return processUnsupportedFeature(\n    dataSource,\n    node,\n    processingData,\n    deferredLoading\n  );\n}\n\nfunction loadKml(\n  dataSource,\n  entityCollection,\n  kml,\n  sourceResource,\n  uriResolver,\n  context\n) {\n  entityCollection.removeAll();\n\n  var documentElement = kml.documentElement;\n  var document =\n    documentElement.localName === "Document"\n      ? documentElement\n      : queryFirstNode(documentElement, "Document", namespaces.kml);\n  var name = queryStringValue(document, "name", namespaces.kml);\n  if (!(0,defined/* default */.Z)(name)) {\n    name = (0,getFilenameFromUri/* default */.Z)(sourceResource.getUrlComponent());\n  }\n\n  // Only set the name from the root document\n  if (!(0,defined/* default */.Z)(dataSource._name)) {\n    dataSource._name = name;\n  }\n\n  var deferredLoading = new KmlDataSource._DeferredLoading(dataSource);\n  var styleCollection = new EntityCollection/* default */.Z(dataSource);\n  return when/* default.all */.Z.all(\n      processStyles(\n        dataSource,\n        kml,\n        styleCollection,\n        sourceResource,\n        false,\n        uriResolver\n      )\n    )\n    .then(function () {\n      var element = kml.documentElement;\n      if (element.localName === "kml") {\n        var childNodes = element.childNodes;\n        for (var i = 0; i < childNodes.length; i++) {\n          var tmp = childNodes[i];\n          if ((0,defined/* default */.Z)(featureTypes[tmp.localName])) {\n            element = tmp;\n            break;\n          }\n        }\n      }\n\n      var processingData = {\n        parentEntity: undefined,\n        entityCollection: entityCollection,\n        styleCollection: styleCollection,\n        sourceResource: sourceResource,\n        uriResolver: uriResolver,\n        context: context,\n      };\n\n      entityCollection.suspendEvents();\n      processFeatureNode(dataSource, element, processingData, deferredLoading);\n      entityCollection.resumeEvents();\n\n      return deferredLoading.wait().then(function () {\n        return kml.documentElement;\n      });\n    });\n}\n\nfunction loadKmz(dataSource, entityCollection, blob, sourceResource) {\n  var reader = new zip/* default.ZipReader */.Z.ZipReader(new zip/* default.BlobReader */.Z.BlobReader(blob));\n  return (0,when/* default */.Z)(reader.getEntries()).then(function (entries) {\n    var promises = [];\n    var uriResolver = {};\n    var docEntry;\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n      if (!entry.directory) {\n        if (/\\.kml$/i.test(entry.filename)) {\n          // We use the first KML document we come across\n          //  https://developers.google.com/kml/documentation/kmzarchives\n          // Unless we come across a .kml file at the root of the archive because GE does this\n          if (!(0,defined/* default */.Z)(docEntry) || !/\\//i.test(entry.filename)) {\n            if ((0,defined/* default */.Z)(docEntry)) {\n              // We found one at the root so load the initial kml as a data uri\n              promises.push(loadDataUriFromZip(docEntry, uriResolver));\n            }\n            docEntry = entry;\n          } else {\n            // Wasn\'t the first kml and wasn\'t at the root\n            promises.push(loadDataUriFromZip(entry, uriResolver));\n          }\n        } else {\n          promises.push(loadDataUriFromZip(entry, uriResolver));\n        }\n      }\n    }\n\n    // Now load the root KML document\n    if ((0,defined/* default */.Z)(docEntry)) {\n      promises.push(loadXmlFromZip(docEntry, uriResolver));\n    }\n    return when/* default.all */.Z.all(promises).then(function () {\n      reader.close();\n      if (!(0,defined/* default */.Z)(uriResolver.kml)) {\n        throw new RuntimeError/* default */.Z("KMZ file does not contain a KML document.");\n      }\n      uriResolver.keys = Object.keys(uriResolver);\n      return loadKml(\n        dataSource,\n        entityCollection,\n        uriResolver.kml,\n        sourceResource,\n        uriResolver\n      );\n    });\n  });\n}\n\nfunction load(dataSource, entityCollection, data, options) {\n  options = (0,defaultValue/* default */.Z)(options, defaultValue/* default.EMPTY_OBJECT */.Z.EMPTY_OBJECT);\n  var sourceUri = options.sourceUri;\n  var uriResolver = options.uriResolver;\n  var context = options.context;\n\n  var promise = data;\n  if (typeof data === "string" || data instanceof Resource/* default */.Z) {\n    data = Resource/* default.createIfNeeded */.Z.createIfNeeded(data);\n    promise = data.fetchBlob();\n    sourceUri = (0,defaultValue/* default */.Z)(sourceUri, data.clone());\n\n    // Add resource credits to our list of credits to display\n    var resourceCredits = dataSource._resourceCredits;\n    var credits = data.credits;\n    if ((0,defined/* default */.Z)(credits)) {\n      var length = credits.length;\n      for (var i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  } else {\n    sourceUri = (0,defaultValue/* default */.Z)(sourceUri, Resource/* default.DEFAULT.clone */.Z.DEFAULT.clone());\n  }\n\n  sourceUri = Resource/* default.createIfNeeded */.Z.createIfNeeded(sourceUri);\n\n  return (0,when/* default */.Z)(promise)\n    .then(function (dataToLoad) {\n      if (dataToLoad instanceof Blob) {\n        return isZipFile(dataToLoad).then(function (isZip) {\n          if (isZip) {\n            return loadKmz(dataSource, entityCollection, dataToLoad, sourceUri);\n          }\n          return readBlobAsText(dataToLoad).then(function (text) {\n            //There\'s no official way to validate if a parse was successful.\n            //The following check detects the error on various browsers.\n\n            //Insert missing namespaces\n            text = insertNamespaces(text);\n\n            //Remove Duplicate Namespaces\n            text = removeDuplicateNamespaces(text);\n\n            //IE raises an exception\n            var kml;\n            var error;\n            try {\n              kml = parser.parseFromString(text, "application/xml");\n            } catch (e) {\n              error = e.toString();\n            }\n\n            //The parse succeeds on Chrome and Firefox, but the error\n            //handling is different in each.\n            if (\n              (0,defined/* default */.Z)(error) ||\n              kml.body ||\n              kml.documentElement.tagName === "parsererror"\n            ) {\n              //Firefox has error information as the firstChild nodeValue.\n              var msg = (0,defined/* default */.Z)(error)\n                ? error\n                : kml.documentElement.firstChild.nodeValue;\n\n              //Chrome has it in the body text.\n              if (!msg) {\n                msg = kml.body.innerText;\n              }\n\n              //Return the error\n              throw new RuntimeError/* default */.Z(msg);\n            }\n            return loadKml(\n              dataSource,\n              entityCollection,\n              kml,\n              sourceUri,\n              uriResolver,\n              context\n            );\n          });\n        });\n      }\n      return loadKml(\n        dataSource,\n        entityCollection,\n        dataToLoad,\n        sourceUri,\n        uriResolver,\n        context\n      );\n    })\n    .otherwise(function (error) {\n      dataSource._error.raiseEvent(dataSource, error);\n      console.log(error);\n      return when/* default.reject */.Z.reject(error);\n    });\n}\n\n/**\n * @typedef {Object} KmlDataSource.LoadOptions\n *\n * Initialization options for the `load` method.\n *\n * @property {Camera} camera The camera that is used for viewRefreshModes and sending camera properties to network links.\n * @property {HTMLCanvasElement} canvas The canvas that is used for sending viewer properties to network links.\n * @property {String} [sourceUri] Overrides the url to use for resolving relative links and other KML network features.\n * @property {Boolean} [clampToGround=false] true if we want the geometry features (Polygons, LineStrings and LinearRings) clamped to the ground.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * A {@link DataSource} which processes Keyhole Markup Language 2.2 (KML).\n * <p>\n * KML support in Cesium is incomplete, but a large amount of the standard,\n * as well as Google\'s <code>gx</code> extension namespace, is supported. See Github issue\n * {@link https://github.com/CesiumGS/cesium/issues/873|#873} for a\n * detailed list of what is and isn\'t support. Cesium will also write information to the\n * console when it encounters most unsupported features.\n * </p>\n * <p>\n * Non visual feature data, such as <code>atom:author</code> and <code>ExtendedData</code>\n * is exposed via an instance of {@link KmlFeatureData}, which is added to each {@link Entity}\n * under the <code>kml</code> property.\n * </p>\n *\n * @alias KmlDataSource\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Camera} options.camera The camera that is used for viewRefreshModes and sending camera properties to network links.\n * @param {HTMLCanvasElement} options.canvas The canvas that is used for sending viewer properties to network links.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @see {@link http://www.opengeospatial.org/standards/kml/|Open Geospatial Consortium KML Standard}\n * @see {@link https://developers.google.com/kml/|Google KML Documentation}\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=KML.html|Cesium Sandcastle KML Demo}\n *\n * @example\n * var viewer = new Cesium.Viewer(\'cesiumContainer\');\n * viewer.dataSources.add(Cesium.KmlDataSource.load(\'../../SampleData/facilities.kmz\',\n *      {\n *           camera: viewer.scene.camera,\n *           canvas: viewer.scene.canvas\n *      })\n * );\n */\nfunction KmlDataSource(options) {\n  options = (0,defaultValue/* default */.Z)(options, defaultValue/* default.EMPTY_OBJECT */.Z.EMPTY_OBJECT);\n  var camera = options.camera;\n  var canvas = options.canvas;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,defined/* default */.Z)(camera)) {\n    throw new DeveloperError/* default */.Z("options.camera is required.");\n  }\n  if (!(0,defined/* default */.Z)(canvas)) {\n    throw new DeveloperError/* default */.Z("options.canvas is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._changed = new Event/* default */.Z();\n  this._error = new Event/* default */.Z();\n  this._loading = new Event/* default */.Z();\n  this._refresh = new Event/* default */.Z();\n  this._unsupportedNode = new Event/* default */.Z();\n\n  this._clock = undefined;\n  this._entityCollection = new EntityCollection/* default */.Z(this);\n  this._name = undefined;\n  this._isLoading = false;\n  this._pinBuilder = new PinBuilder/* default */.Z();\n  this._networkLinks = new AssociativeArray/* default */.Z();\n  this._entityCluster = new EntityCluster/* default */.Z();\n\n  this._canvas = canvas;\n  this._camera = camera;\n  this._lastCameraView = {\n    position: (0,defined/* default */.Z)(camera) ? Cartesian3/* default.clone */.Z.clone(camera.positionWC) : undefined,\n    direction: (0,defined/* default */.Z)(camera)\n      ? Cartesian3/* default.clone */.Z.clone(camera.directionWC)\n      : undefined,\n    up: (0,defined/* default */.Z)(camera) ? Cartesian3/* default.clone */.Z.clone(camera.upWC) : undefined,\n    bbox: (0,defined/* default */.Z)(camera)\n      ? camera.computeViewRectangle()\n      : Rectangle/* default.clone */.Z.clone(Rectangle/* default.MAX_VALUE */.Z.MAX_VALUE),\n  };\n\n  this._ellipsoid = (0,defaultValue/* default */.Z)(options.ellipsoid, Ellipsoid/* default.WGS84 */.Z.WGS84);\n\n  // User specified credit\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new Credit/* default */.Z(credit);\n  }\n  this._credit = credit;\n\n  // Create a list of Credit\'s from the resource that the user can\'t remove\n  this._resourceCredits = [];\n\n  this._kmlTours = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided KML data.\n *\n * @param {Resource|String|Document|Blob} data A url, parsed KML document, or Blob containing binary KMZ data or a parsed KML document.\n * @param {KmlDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<KmlDataSource>} A promise that will resolve to a new KmlDataSource instance once the KML is loaded.\n */\nKmlDataSource.load = function (data, options) {\n  options = (0,defaultValue/* default */.Z)(options, defaultValue/* default.EMPTY_OBJECT */.Z.EMPTY_OBJECT);\n  var dataSource = new KmlDataSource(options);\n  return dataSource.load(data, options);\n};\n\nObject.defineProperties(KmlDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * This will be automatically be set to the KML document name on load.\n   * @memberof KmlDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets the clock settings defined by the loaded KML. This represents the total\n   * availability interval for all time-dynamic data. If the KML does not contain\n   * time-dynamic data, this value is undefined.\n   * @memberof KmlDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof KmlDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof KmlDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source refreshes a network link.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  refreshEvent: {\n    get: function () {\n      return this._refresh;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source finds an unsupported node type.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  unsupportedNodeEvent: {\n    get: function () {\n      return this._unsupportedNode;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof KmlDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof KmlDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,defined/* default */.Z)(value)) {\n        throw new DeveloperError/* default */.Z("value must be defined.");\n      }\n      //>>includeEnd(\'debug\');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof KmlDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n  /**\n   * Gets the KML Tours that are used to guide the camera to specified destinations on given time intervals.\n   * @memberof KmlDataSource.prototype\n   * @type {KmlTour[]}\n   */\n  kmlTours: {\n    get: function () {\n      return this._kmlTours;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided KML data, replacing any existing data.\n *\n * @param {Resource|String|Document|Blob} data A url, parsed KML document, or Blob containing binary KMZ data or a parsed KML document.\n * @param {Object} [options] An object with the following properties:\n * @param {Resource|String} [options.sourceUri] Overrides the url to use for resolving relative links and other KML network features.\n * @param {Boolean} [options.clampToGround=false] true if we want the geometry features (Polygons, LineStrings and LinearRings) clamped to the ground. If true, lines will use corridors so use Entity.corridor instead of Entity.polyline.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\n *\n * @returns {Promise.<KmlDataSource>} A promise that will resolve to this instances once the KML is loaded.\n */\nKmlDataSource.prototype.load = function (data, options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,defined/* default */.Z)(data)) {\n    throw new DeveloperError/* default */.Z("data is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  options = (0,defaultValue/* default */.Z)(options, defaultValue/* default.EMPTY_OBJECT */.Z.EMPTY_OBJECT);\n  DataSource/* default.setLoading */.Z.setLoading(this, true);\n\n  var oldName = this._name;\n  this._name = undefined;\n  this._clampToGround = (0,defaultValue/* default */.Z)(options.clampToGround, false);\n\n  var that = this;\n  return load(this, this._entityCollection, data, options)\n    .then(function () {\n      var clock;\n\n      var availability = that._entityCollection.computeAvailability();\n\n      var start = availability.start;\n      var stop = availability.stop;\n      var isMinStart = JulianDate/* default.equals */.Z.equals(start, Iso8601/* default.MINIMUM_VALUE */.Z.MINIMUM_VALUE);\n      var isMaxStop = JulianDate/* default.equals */.Z.equals(stop, Iso8601/* default.MAXIMUM_VALUE */.Z.MAXIMUM_VALUE);\n      if (!isMinStart || !isMaxStop) {\n        var date;\n\n        //If start is min time just start at midnight this morning, local time\n        if (isMinStart) {\n          date = new Date();\n          date.setHours(0, 0, 0, 0);\n          start = JulianDate/* default.fromDate */.Z.fromDate(date);\n        }\n\n        //If stop is max value just stop at midnight tonight, local time\n        if (isMaxStop) {\n          date = new Date();\n          date.setHours(24, 0, 0, 0);\n          stop = JulianDate/* default.fromDate */.Z.fromDate(date);\n        }\n\n        clock = new DataSourceClock/* default */.Z();\n        clock.startTime = start;\n        clock.stopTime = stop;\n        clock.currentTime = JulianDate/* default.clone */.Z.clone(start);\n        clock.clockRange = ClockRange/* default.LOOP_STOP */.Z.LOOP_STOP;\n        clock.clockStep = ClockStep/* default.SYSTEM_CLOCK_MULTIPLIER */.Z.SYSTEM_CLOCK_MULTIPLIER;\n        clock.multiplier = Math.round(\n          Math.min(\n            Math.max(JulianDate/* default.secondsDifference */.Z.secondsDifference(stop, start) / 60, 1),\n            3.15569e7\n          )\n        );\n      }\n\n      var changed = false;\n      if (clock !== that._clock) {\n        that._clock = clock;\n        changed = true;\n      }\n\n      if (oldName !== that._name) {\n        changed = true;\n      }\n\n      if (changed) {\n        that._changed.raiseEvent(that);\n      }\n\n      DataSource/* default.setLoading */.Z.setLoading(that, false);\n\n      return that;\n    })\n    .otherwise(function (error) {\n      DataSource/* default.setLoading */.Z.setLoading(that, false);\n      that._error.raiseEvent(that, error);\n      console.log(error);\n      return when/* default.reject */.Z.reject(error);\n    });\n};\n\nfunction mergeAvailabilityWithParent(child) {\n  var parent = child.parent;\n  if ((0,defined/* default */.Z)(parent)) {\n    var parentAvailability = parent.availability;\n    if ((0,defined/* default */.Z)(parentAvailability)) {\n      var childAvailability = child.availability;\n      if ((0,defined/* default */.Z)(childAvailability)) {\n        childAvailability.intersect(parentAvailability);\n      } else {\n        child.availability = parentAvailability;\n      }\n    }\n  }\n}\n\nfunction getNetworkLinkUpdateCallback(\n  dataSource,\n  networkLink,\n  newEntityCollection,\n  networkLinks,\n  processedHref\n) {\n  return function (rootElement) {\n    if (!networkLinks.contains(networkLink.id)) {\n      // Got into the odd case where a parent network link was updated while a child\n      //  network link update was in flight, so just throw it away.\n      return;\n    }\n    var remove = false;\n    var networkLinkControl = queryFirstNode(\n      rootElement,\n      "NetworkLinkControl",\n      namespaces.kml\n    );\n    var hasNetworkLinkControl = (0,defined/* default */.Z)(networkLinkControl);\n\n    var minRefreshPeriod = 0;\n    if (hasNetworkLinkControl) {\n      if (\n        (0,defined/* default */.Z)(queryFirstNode(networkLinkControl, "Update", namespaces.kml))\n      ) {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-networkLinkControl-update",\n          "KML - NetworkLinkControl updates aren\'t supported."\n        );\n        networkLink.updating = false;\n        networkLinks.remove(networkLink.id);\n        return;\n      }\n      networkLink.cookie = (0,queryToObject/* default */.Z)(\n        (0,defaultValue/* default */.Z)(\n          queryStringValue(networkLinkControl, "cookie", namespaces.kml),\n          ""\n        )\n      );\n      minRefreshPeriod = (0,defaultValue/* default */.Z)(\n        queryNumericValue(\n          networkLinkControl,\n          "minRefreshPeriod",\n          namespaces.kml\n        ),\n        0\n      );\n    }\n\n    var now = JulianDate/* default.now */.Z.now();\n    var refreshMode = networkLink.refreshMode;\n    if (refreshMode === RefreshMode.INTERVAL) {\n      if ((0,defined/* default */.Z)(networkLinkControl)) {\n        networkLink.time = Math.max(minRefreshPeriod, networkLink.time);\n      }\n    } else if (refreshMode === RefreshMode.EXPIRE) {\n      var expires;\n      if ((0,defined/* default */.Z)(networkLinkControl)) {\n        expires = queryStringValue(\n          networkLinkControl,\n          "expires",\n          namespaces.kml\n        );\n      }\n      if ((0,defined/* default */.Z)(expires)) {\n        try {\n          var date = JulianDate/* default.fromIso8601 */.Z.fromIso8601(expires);\n          var diff = JulianDate/* default.secondsDifference */.Z.secondsDifference(date, now);\n          if (diff > 0 && diff < minRefreshPeriod) {\n            JulianDate/* default.addSeconds */.Z.addSeconds(now, minRefreshPeriod, date);\n          }\n          networkLink.time = date;\n        } catch (e) {\n          (0,oneTimeWarning/* default */.Z)(\n            "kml-networkLinkControl-expires",\n            "KML - NetworkLinkControl expires is not a valid date"\n          );\n          remove = true;\n        }\n      } else {\n        (0,oneTimeWarning/* default */.Z)(\n          "kml-refreshMode-onExpire",\n          "KML - refreshMode of onExpire requires the NetworkLinkControl to have an expires element"\n        );\n        remove = true;\n      }\n    }\n\n    var networkLinkEntity = networkLink.entity;\n    var entityCollection = dataSource._entityCollection;\n    var newEntities = newEntityCollection.values;\n\n    function removeChildren(entity) {\n      entityCollection.remove(entity);\n      var children = entity._children;\n      var count = children.length;\n      for (var i = 0; i < count; ++i) {\n        removeChildren(children[i]);\n      }\n    }\n\n    // Remove old entities\n    entityCollection.suspendEvents();\n    var entitiesCopy = entityCollection.values.slice();\n    var i;\n    for (i = 0; i < entitiesCopy.length; ++i) {\n      var entityToRemove = entitiesCopy[i];\n      if (entityToRemove.parent === networkLinkEntity) {\n        entityToRemove.parent = undefined;\n        removeChildren(entityToRemove);\n      }\n    }\n    entityCollection.resumeEvents();\n\n    // Add new entities\n    entityCollection.suspendEvents();\n    for (i = 0; i < newEntities.length; i++) {\n      var newEntity = newEntities[i];\n      if (!(0,defined/* default */.Z)(newEntity.parent)) {\n        newEntity.parent = networkLinkEntity;\n        mergeAvailabilityWithParent(newEntity);\n      }\n      entityCollection.add(newEntity);\n    }\n    entityCollection.resumeEvents();\n\n    // No refresh information remove it, otherwise update lastUpdate time\n    if (remove) {\n      networkLinks.remove(networkLink.id);\n    } else {\n      networkLink.lastUpdated = now;\n    }\n\n    var availability = entityCollection.computeAvailability();\n\n    var start = availability.start;\n    var stop = availability.stop;\n    var isMinStart = JulianDate/* default.equals */.Z.equals(start, Iso8601/* default.MINIMUM_VALUE */.Z.MINIMUM_VALUE);\n    var isMaxStop = JulianDate/* default.equals */.Z.equals(stop, Iso8601/* default.MAXIMUM_VALUE */.Z.MAXIMUM_VALUE);\n    if (!isMinStart || !isMaxStop) {\n      var clock = dataSource._clock;\n\n      if (clock.startTime !== start || clock.stopTime !== stop) {\n        clock.startTime = start;\n        clock.stopTime = stop;\n        dataSource._changed.raiseEvent(dataSource);\n      }\n    }\n\n    networkLink.updating = false;\n    networkLink.needsUpdate = false;\n    dataSource._refresh.raiseEvent(\n      dataSource,\n      processedHref.getUrlComponent(true)\n    );\n  };\n}\n\nvar entitiesToIgnore = new AssociativeArray/* default */.Z();\n\n/**\n * Updates any NetworkLink that require updating.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nKmlDataSource.prototype.update = function (time) {\n  var networkLinks = this._networkLinks;\n  if (networkLinks.length === 0) {\n    return true;\n  }\n\n  var now = JulianDate/* default.now */.Z.now();\n  var that = this;\n\n  entitiesToIgnore.removeAll();\n\n  function recurseIgnoreEntities(entity) {\n    var children = entity._children;\n    var count = children.length;\n    for (var i = 0; i < count; ++i) {\n      var child = children[i];\n      entitiesToIgnore.set(child.id, child);\n      recurseIgnoreEntities(child);\n    }\n  }\n\n  var cameraViewUpdate = false;\n  var lastCameraView = this._lastCameraView;\n  var camera = this._camera;\n  if (\n    (0,defined/* default */.Z)(camera) &&\n    !(\n      camera.positionWC.equalsEpsilon(\n        lastCameraView.position,\n        Core_Math/* default.EPSILON7 */.Z.EPSILON7\n      ) &&\n      camera.directionWC.equalsEpsilon(\n        lastCameraView.direction,\n        Core_Math/* default.EPSILON7 */.Z.EPSILON7\n      ) &&\n      camera.upWC.equalsEpsilon(lastCameraView.up, Core_Math/* default.EPSILON7 */.Z.EPSILON7)\n    )\n  ) {\n    // Camera has changed so update the last view\n    lastCameraView.position = Cartesian3/* default.clone */.Z.clone(camera.positionWC);\n    lastCameraView.direction = Cartesian3/* default.clone */.Z.clone(camera.directionWC);\n    lastCameraView.up = Cartesian3/* default.clone */.Z.clone(camera.upWC);\n    lastCameraView.bbox = camera.computeViewRectangle();\n    cameraViewUpdate = true;\n  }\n\n  var newNetworkLinks = new AssociativeArray/* default */.Z();\n  var changed = false;\n  networkLinks.values.forEach(function (networkLink) {\n    var entity = networkLink.entity;\n    if (entitiesToIgnore.contains(entity.id)) {\n      return;\n    }\n\n    if (!networkLink.updating) {\n      var doUpdate = false;\n      if (networkLink.refreshMode === RefreshMode.INTERVAL) {\n        if (\n          JulianDate/* default.secondsDifference */.Z.secondsDifference(now, networkLink.lastUpdated) >\n          networkLink.time\n        ) {\n          doUpdate = true;\n        }\n      } else if (networkLink.refreshMode === RefreshMode.EXPIRE) {\n        if (JulianDate/* default.greaterThan */.Z.greaterThan(now, networkLink.time)) {\n          doUpdate = true;\n        }\n      } else if (networkLink.refreshMode === RefreshMode.STOP) {\n        if (cameraViewUpdate) {\n          networkLink.needsUpdate = true;\n          networkLink.cameraUpdateTime = now;\n        }\n\n        if (\n          networkLink.needsUpdate &&\n          JulianDate/* default.secondsDifference */.Z.secondsDifference(now, networkLink.cameraUpdateTime) >=\n            networkLink.time\n        ) {\n          doUpdate = true;\n        }\n      }\n\n      if (doUpdate) {\n        recurseIgnoreEntities(entity);\n        networkLink.updating = true;\n        var newEntityCollection = new EntityCollection/* default */.Z();\n        var href = networkLink.href.clone();\n\n        href.setQueryParameters(networkLink.cookie);\n        var ellipsoid = (0,defaultValue/* default */.Z)(that._ellipsoid, Ellipsoid/* default.WGS84 */.Z.WGS84);\n        processNetworkLinkQueryString(\n          href,\n          that._camera,\n          that._canvas,\n          networkLink.viewBoundScale,\n          lastCameraView.bbox,\n          ellipsoid\n        );\n\n        load(that, newEntityCollection, href, { context: entity.id })\n          .then(\n            getNetworkLinkUpdateCallback(\n              that,\n              networkLink,\n              newEntityCollection,\n              newNetworkLinks,\n              href\n            )\n          )\n          .otherwise(function (error) {\n            var msg =\n              "NetworkLink " + networkLink.href + " refresh failed: " + error;\n            console.log(msg);\n            that._error.raiseEvent(that, msg);\n          });\n        changed = true;\n      }\n    }\n    newNetworkLinks.set(networkLink.id, networkLink);\n  });\n\n  if (changed) {\n    this._networkLinks = newNetworkLinks;\n    this._changed.raiseEvent(this);\n  }\n\n  return true;\n};\n\n/**\n * Contains KML Feature data loaded into the <code>Entity.kml</code> property by {@link KmlDataSource}.\n * @alias KmlFeatureData\n * @constructor\n */\nfunction KmlFeatureData() {\n  /**\n   * @typedef KmlFeatureData.Author\n   * @type {Object}\n   * @property {String} name Gets the name.\n   * @property {String} uri Gets the URI.\n   * @property {Number} age Gets the email.\n   */\n\n  /**\n   * Gets the atom syndication format author field.\n   * @type {KmlFeatureData.Author}\n   */\n  this.author = {\n    name: undefined,\n    uri: undefined,\n    email: undefined,\n  };\n\n  /**\n   * @typedef KmlFeatureData.Link\n   * @type {Object}\n   * @property {String} href Gets the href.\n   * @property {String} hreflang Gets the language of the linked resource.\n   * @property {String} rel Gets the link relation.\n   * @property {String} type Gets the link type.\n   * @property {String} title Gets the link title.\n   * @property {String} length Gets the link length.\n   */\n\n  /**\n   * Gets the link.\n   * @type {KmlFeatureData.Link}\n   */\n  this.link = {\n    href: undefined,\n    hreflang: undefined,\n    rel: undefined,\n    type: undefined,\n    title: undefined,\n    length: undefined,\n  };\n\n  /**\n   * Gets the unstructured address field.\n   * @type {String}\n   */\n  this.address = undefined;\n  /**\n   * Gets the phone number.\n   * @type {String}\n   */\n  this.phoneNumber = undefined;\n  /**\n   * Gets the snippet.\n   * @type {String}\n   */\n  this.snippet = undefined;\n  /**\n   * Gets the extended data, parsed into a JSON object.\n   * Currently only the <code>Data</code> property is supported.\n   * <code>SchemaData</code> and custom data are ignored.\n   * @type {String}\n   */\n  this.extendedData = undefined;\n}\n\n// For testing\nKmlDataSource._DeferredLoading = DeferredLoading;\nKmlDataSource._getTimestamp = getTimestamp/* default */.Z;\n\n/* harmony default export */ var DataSources_KmlDataSource = ((/* unused pure expression or super */ null && (KmlDataSource)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25320\n')},20217:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14459);\n\n\n/**\n * Describes a KmlTour, which uses KmlTourFlyTo, and KmlTourWait to\n * guide the camera to a specified destinations on given time intervals.\n *\n * @alias KmlTour\n * @constructor\n *\n * @param {String} name name parsed from KML\n * @param {String} id id parsed from KML\n * @param {Array} playlist array with KmlTourFlyTos and KmlTourWaits\n *\n * @see KmlTourFlyTo\n * @see KmlTourWait\n *\n * @demo {@link https://sandcastle.cesium.com/?src=KML%20Tours.html|KML Tours}\n */\nfunction KmlTour(name, id) {\n  /**\n   * Id of kml gx:Tour entry\n   * @type String\n   */\n  this.id = id;\n  /**\n   * Tour name\n   * @type String\n   */\n  this.name = name;\n  /**\n   * Index of current entry from playlist\n   * @type Number\n   */\n  this.playlistIndex = 0;\n  /**\n   * Array of playlist entries\n   * @type Array\n   */\n  this.playlist = [];\n  /**\n   * Event will be called when tour starts to play,\n   * before any playlist entry starts to play.\n   * @type Event\n   */\n  this.tourStart = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  /**\n   * Event will be called when all playlist entries are\n   * played, or tour playback being canceled.\n   *\n   * If tour playback was terminated, event callback will\n   * be called with terminated=true parameter.\n   * @type Event\n   */\n  this.tourEnd = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  /**\n   * Event will be called when entry from playlist starts to play.\n   *\n   * Event callback will be called with curent entry as first parameter.\n   * @type Event\n   */\n  this.entryStart = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  /**\n   * Event will be called when entry from playlist ends to play.\n   *\n   * Event callback will be called with following parameters:\n   * 1. entry - entry\n   * 2. terminated - true if playback was terminated by calling {@link KmlTour#stop}\n   * @type Event\n   */\n  this.entryEnd = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\n  this._activeEntries = [];\n}\n\n/**\n * Add entry to this tour playlist.\n *\n * @param {KmlTourFlyTo|KmlTourWait} entry an entry to add to the playlist.\n */\nKmlTour.prototype.addPlaylistEntry = function (entry) {\n  this.playlist.push(entry);\n};\n\n/**\n * Play this tour.\n *\n * @param {Viewer} viewer viewer widget.\n * @param {Object} [cameraOptions] these options will be merged with {@link Camera#flyTo}\n * options for FlyTo playlist entries.\n */\nKmlTour.prototype.play = function (viewer, cameraOptions) {\n  this.tourStart.raiseEvent();\n\n  var tour = this;\n  playEntry.call(this, viewer, cameraOptions, function (terminated) {\n    tour.playlistIndex = 0;\n    // Stop nonblocking entries\n    if (!terminated) {\n      cancelAllEntries(tour._activeEntries);\n    }\n    tour.tourEnd.raiseEvent(terminated);\n  });\n};\n\n/**\n * Stop curently playing tour.\n */\nKmlTour.prototype.stop = function () {\n  cancelAllEntries(this._activeEntries);\n};\n\n// Stop all activeEntries.\nfunction cancelAllEntries(activeEntries) {\n  for (\n    var entry = activeEntries.pop();\n    entry !== undefined;\n    entry = activeEntries.pop()\n  ) {\n    entry.stop();\n  }\n}\n\n// Play playlist entry.\n// This function is called recursevly with playNext and iterates over all entries from playlist.\nfunction playEntry(viewer, cameraOptions, allDone) {\n  var entry = this.playlist[this.playlistIndex];\n  if (entry) {\n    var _playNext = playNext.bind(this, viewer, cameraOptions, allDone);\n    this._activeEntries.push(entry);\n    this.entryStart.raiseEvent(entry);\n    if (entry.blocking) {\n      entry.play(_playNext, viewer.scene.camera, cameraOptions);\n    } else {\n      var tour = this;\n      entry.play(function () {\n        tour.entryEnd.raiseEvent(entry);\n        var indx = tour._activeEntries.indexOf(entry);\n        if (indx >= 0) {\n          tour._activeEntries.splice(indx, 1);\n        }\n      });\n      _playNext(viewer, cameraOptions, allDone);\n    }\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(allDone)) {\n    allDone(false);\n  }\n}\n\n// Increment playlistIndex and call playEntry if terminated isn\'t true.\nfunction playNext(viewer, cameraOptions, allDone, terminated) {\n  var entry = this.playlist[this.playlistIndex];\n  this.entryEnd.raiseEvent(entry, terminated);\n\n  if (terminated) {\n    allDone(terminated);\n  } else {\n    var indx = this._activeEntries.indexOf(entry);\n    if (indx >= 0) {\n      this._activeEntries.splice(indx, 1);\n    }\n    this.playlistIndex++;\n    playEntry.call(this, viewer, cameraOptions, allDone);\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (KmlTour);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAyMTcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBeUM7QUFDSjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwrREFBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtEQUFLO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrREFBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQSxzQkFBc0IsK0RBQUs7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVywwQkFBMEI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUSxtREFBbUQ7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLElBQUksU0FBUyxxRUFBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsT0FBTyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL0RhdGFTb3VyY2VzL0ttbFRvdXIuanM/NDhhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRXZlbnQgZnJvbSBcIi4uL0NvcmUvRXZlbnQuanNcIjtcbi8qKlxuICogRGVzY3JpYmVzIGEgS21sVG91ciwgd2hpY2ggdXNlcyBLbWxUb3VyRmx5VG8sIGFuZCBLbWxUb3VyV2FpdCB0b1xuICogZ3VpZGUgdGhlIGNhbWVyYSB0byBhIHNwZWNpZmllZCBkZXN0aW5hdGlvbnMgb24gZ2l2ZW4gdGltZSBpbnRlcnZhbHMuXG4gKlxuICogQGFsaWFzIEttbFRvdXJcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWUgcGFyc2VkIGZyb20gS01MXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgaWQgcGFyc2VkIGZyb20gS01MXG4gKiBAcGFyYW0ge0FycmF5fSBwbGF5bGlzdCBhcnJheSB3aXRoIEttbFRvdXJGbHlUb3MgYW5kIEttbFRvdXJXYWl0c1xuICpcbiAqIEBzZWUgS21sVG91ckZseVRvXG4gKiBAc2VlIEttbFRvdXJXYWl0XG4gKlxuICogQGRlbW8ge0BsaW5rIGh0dHBzOi8vc2FuZGNhc3RsZS5jZXNpdW0uY29tLz9zcmM9S01MJTIwVG91cnMuaHRtbHxLTUwgVG91cnN9XG4gKi9cbmZ1bmN0aW9uIEttbFRvdXIobmFtZSwgaWQpIHtcbiAgLyoqXG4gICAqIElkIG9mIGttbCBneDpUb3VyIGVudHJ5XG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKi9cbiAgdGhpcy5pZCA9IGlkO1xuICAvKipcbiAgICogVG91ciBuYW1lXG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKi9cbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgLyoqXG4gICAqIEluZGV4IG9mIGN1cnJlbnQgZW50cnkgZnJvbSBwbGF5bGlzdFxuICAgKiBAdHlwZSBOdW1iZXJcbiAgICovXG4gIHRoaXMucGxheWxpc3RJbmRleCA9IDA7XG4gIC8qKlxuICAgKiBBcnJheSBvZiBwbGF5bGlzdCBlbnRyaWVzXG4gICAqIEB0eXBlIEFycmF5XG4gICAqL1xuICB0aGlzLnBsYXlsaXN0ID0gW107XG4gIC8qKlxuICAgKiBFdmVudCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRvdXIgc3RhcnRzIHRvIHBsYXksXG4gICAqIGJlZm9yZSBhbnkgcGxheWxpc3QgZW50cnkgc3RhcnRzIHRvIHBsYXkuXG4gICAqIEB0eXBlIEV2ZW50XG4gICAqL1xuICB0aGlzLnRvdXJTdGFydCA9IG5ldyBFdmVudCgpO1xuICAvKipcbiAgICogRXZlbnQgd2lsbCBiZSBjYWxsZWQgd2hlbiBhbGwgcGxheWxpc3QgZW50cmllcyBhcmVcbiAgICogcGxheWVkLCBvciB0b3VyIHBsYXliYWNrIGJlaW5nIGNhbmNlbGVkLlxuICAgKlxuICAgKiBJZiB0b3VyIHBsYXliYWNrIHdhcyB0ZXJtaW5hdGVkLCBldmVudCBjYWxsYmFjayB3aWxsXG4gICAqIGJlIGNhbGxlZCB3aXRoIHRlcm1pbmF0ZWQ9dHJ1ZSBwYXJhbWV0ZXIuXG4gICAqIEB0eXBlIEV2ZW50XG4gICAqL1xuICB0aGlzLnRvdXJFbmQgPSBuZXcgRXZlbnQoKTtcbiAgLyoqXG4gICAqIEV2ZW50IHdpbGwgYmUgY2FsbGVkIHdoZW4gZW50cnkgZnJvbSBwbGF5bGlzdCBzdGFydHMgdG8gcGxheS5cbiAgICpcbiAgICogRXZlbnQgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgd2l0aCBjdXJlbnQgZW50cnkgYXMgZmlyc3QgcGFyYW1ldGVyLlxuICAgKiBAdHlwZSBFdmVudFxuICAgKi9cbiAgdGhpcy5lbnRyeVN0YXJ0ID0gbmV3IEV2ZW50KCk7XG4gIC8qKlxuICAgKiBFdmVudCB3aWxsIGJlIGNhbGxlZCB3aGVuIGVudHJ5IGZyb20gcGxheWxpc3QgZW5kcyB0byBwbGF5LlxuICAgKlxuICAgKiBFdmVudCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aXRoIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgKiAxLiBlbnRyeSAtIGVudHJ5XG4gICAqIDIuIHRlcm1pbmF0ZWQgLSB0cnVlIGlmIHBsYXliYWNrIHdhcyB0ZXJtaW5hdGVkIGJ5IGNhbGxpbmcge0BsaW5rIEttbFRvdXIjc3RvcH1cbiAgICogQHR5cGUgRXZlbnRcbiAgICovXG4gIHRoaXMuZW50cnlFbmQgPSBuZXcgRXZlbnQoKTtcblxuICB0aGlzLl9hY3RpdmVFbnRyaWVzID0gW107XG59XG5cbi8qKlxuICogQWRkIGVudHJ5IHRvIHRoaXMgdG91ciBwbGF5bGlzdC5cbiAqXG4gKiBAcGFyYW0ge0ttbFRvdXJGbHlUb3xLbWxUb3VyV2FpdH0gZW50cnkgYW4gZW50cnkgdG8gYWRkIHRvIHRoZSBwbGF5bGlzdC5cbiAqL1xuS21sVG91ci5wcm90b3R5cGUuYWRkUGxheWxpc3RFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICB0aGlzLnBsYXlsaXN0LnB1c2goZW50cnkpO1xufTtcblxuLyoqXG4gKiBQbGF5IHRoaXMgdG91ci5cbiAqXG4gKiBAcGFyYW0ge1ZpZXdlcn0gdmlld2VyIHZpZXdlciB3aWRnZXQuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NhbWVyYU9wdGlvbnNdIHRoZXNlIG9wdGlvbnMgd2lsbCBiZSBtZXJnZWQgd2l0aCB7QGxpbmsgQ2FtZXJhI2ZseVRvfVxuICogb3B0aW9ucyBmb3IgRmx5VG8gcGxheWxpc3QgZW50cmllcy5cbiAqL1xuS21sVG91ci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uICh2aWV3ZXIsIGNhbWVyYU9wdGlvbnMpIHtcbiAgdGhpcy50b3VyU3RhcnQucmFpc2VFdmVudCgpO1xuXG4gIHZhciB0b3VyID0gdGhpcztcbiAgcGxheUVudHJ5LmNhbGwodGhpcywgdmlld2VyLCBjYW1lcmFPcHRpb25zLCBmdW5jdGlvbiAodGVybWluYXRlZCkge1xuICAgIHRvdXIucGxheWxpc3RJbmRleCA9IDA7XG4gICAgLy8gU3RvcCBub25ibG9ja2luZyBlbnRyaWVzXG4gICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICBjYW5jZWxBbGxFbnRyaWVzKHRvdXIuX2FjdGl2ZUVudHJpZXMpO1xuICAgIH1cbiAgICB0b3VyLnRvdXJFbmQucmFpc2VFdmVudCh0ZXJtaW5hdGVkKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFN0b3AgY3VyZW50bHkgcGxheWluZyB0b3VyLlxuICovXG5LbWxUb3VyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICBjYW5jZWxBbGxFbnRyaWVzKHRoaXMuX2FjdGl2ZUVudHJpZXMpO1xufTtcblxuLy8gU3RvcCBhbGwgYWN0aXZlRW50cmllcy5cbmZ1bmN0aW9uIGNhbmNlbEFsbEVudHJpZXMoYWN0aXZlRW50cmllcykge1xuICBmb3IgKFxuICAgIHZhciBlbnRyeSA9IGFjdGl2ZUVudHJpZXMucG9wKCk7XG4gICAgZW50cnkgIT09IHVuZGVmaW5lZDtcbiAgICBlbnRyeSA9IGFjdGl2ZUVudHJpZXMucG9wKClcbiAgKSB7XG4gICAgZW50cnkuc3RvcCgpO1xuICB9XG59XG5cbi8vIFBsYXkgcGxheWxpc3QgZW50cnkuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCByZWN1cnNldmx5IHdpdGggcGxheU5leHQgYW5kIGl0ZXJhdGVzIG92ZXIgYWxsIGVudHJpZXMgZnJvbSBwbGF5bGlzdC5cbmZ1bmN0aW9uIHBsYXlFbnRyeSh2aWV3ZXIsIGNhbWVyYU9wdGlvbnMsIGFsbERvbmUpIHtcbiAgdmFyIGVudHJ5ID0gdGhpcy5wbGF5bGlzdFt0aGlzLnBsYXlsaXN0SW5kZXhdO1xuICBpZiAoZW50cnkpIHtcbiAgICB2YXIgX3BsYXlOZXh0ID0gcGxheU5leHQuYmluZCh0aGlzLCB2aWV3ZXIsIGNhbWVyYU9wdGlvbnMsIGFsbERvbmUpO1xuICAgIHRoaXMuX2FjdGl2ZUVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgdGhpcy5lbnRyeVN0YXJ0LnJhaXNlRXZlbnQoZW50cnkpO1xuICAgIGlmIChlbnRyeS5ibG9ja2luZykge1xuICAgICAgZW50cnkucGxheShfcGxheU5leHQsIHZpZXdlci5zY2VuZS5jYW1lcmEsIGNhbWVyYU9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdG91ciA9IHRoaXM7XG4gICAgICBlbnRyeS5wbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdG91ci5lbnRyeUVuZC5yYWlzZUV2ZW50KGVudHJ5KTtcbiAgICAgICAgdmFyIGluZHggPSB0b3VyLl9hY3RpdmVFbnRyaWVzLmluZGV4T2YoZW50cnkpO1xuICAgICAgICBpZiAoaW5keCA+PSAwKSB7XG4gICAgICAgICAgdG91ci5fYWN0aXZlRW50cmllcy5zcGxpY2UoaW5keCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX3BsYXlOZXh0KHZpZXdlciwgY2FtZXJhT3B0aW9ucywgYWxsRG9uZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlZmluZWQoYWxsRG9uZSkpIHtcbiAgICBhbGxEb25lKGZhbHNlKTtcbiAgfVxufVxuXG4vLyBJbmNyZW1lbnQgcGxheWxpc3RJbmRleCBhbmQgY2FsbCBwbGF5RW50cnkgaWYgdGVybWluYXRlZCBpc24ndCB0cnVlLlxuZnVuY3Rpb24gcGxheU5leHQodmlld2VyLCBjYW1lcmFPcHRpb25zLCBhbGxEb25lLCB0ZXJtaW5hdGVkKSB7XG4gIHZhciBlbnRyeSA9IHRoaXMucGxheWxpc3RbdGhpcy5wbGF5bGlzdEluZGV4XTtcbiAgdGhpcy5lbnRyeUVuZC5yYWlzZUV2ZW50KGVudHJ5LCB0ZXJtaW5hdGVkKTtcblxuICBpZiAodGVybWluYXRlZCkge1xuICAgIGFsbERvbmUodGVybWluYXRlZCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluZHggPSB0aGlzLl9hY3RpdmVFbnRyaWVzLmluZGV4T2YoZW50cnkpO1xuICAgIGlmIChpbmR4ID49IDApIHtcbiAgICAgIHRoaXMuX2FjdGl2ZUVudHJpZXMuc3BsaWNlKGluZHgsIDEpO1xuICAgIH1cbiAgICB0aGlzLnBsYXlsaXN0SW5kZXgrKztcbiAgICBwbGF5RW50cnkuY2FsbCh0aGlzLCB2aWV3ZXIsIGNhbWVyYU9wdGlvbnMsIGFsbERvbmUpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBLbWxUb3VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20217\n')},98826:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8182);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Core_EasingFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50732);\n\n\n\n\n/**\n * Transitions the KmlTour to the next destination. This transition is facilitated\n * using a specified flyToMode over a given number of seconds.\n *\n * @alias KmlTourFlyTo\n * @constructor\n *\n * @param {Number} duration entry duration\n * @param {String} flyToMode KML fly to mode: bounce, smooth, etc\n * @param {KmlCamera|KmlLookAt} view KmlCamera or KmlLookAt\n *\n * @see KmlTour\n * @see KmlTourWait\n */\nfunction KmlTourFlyTo(duration, flyToMode, view) {\n  this.type = "KmlTourFlyTo";\n  this.blocking = true;\n  this.activeCamera = null;\n  this.activeCallback = null;\n\n  this.duration = duration;\n  this.view = view;\n  this.flyToMode = flyToMode;\n}\n\n/**\n * Play this playlist entry\n *\n * @param {KmlTourFlyTo.DoneCallback} done function which will be called when playback ends\n * @param {Camera} camera Cesium camera\n * @param {Object} [cameraOptions] which will be merged with camera flyTo options. See {@link Camera#flyTo}\n */\nKmlTourFlyTo.prototype.play = function (done, camera, cameraOptions) {\n  this.activeCamera = camera;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(done) && done !== null) {\n    var self = this;\n    this.activeCallback = function (terminated) {\n      delete self.activeCallback;\n      delete self.activeCamera;\n      done((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(terminated) ? false : terminated);\n    };\n  }\n\n  var options = this.getCameraOptions(cameraOptions);\n  if (this.view.headingPitchRoll) {\n    camera.flyTo(options);\n  } else if (this.view.headingPitchRange) {\n    var target = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(this.view.position);\n    camera.flyToBoundingSphere(target, options);\n  }\n};\n\n/**\n * Stop execution of curent entry. Cancel camera flyTo\n */\nKmlTourFlyTo.prototype.stop = function () {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this.activeCamera)) {\n    this.activeCamera.cancelFlight();\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this.activeCallback)) {\n    this.activeCallback(true);\n  }\n};\n\n/**\n * Returns options for {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere}\n * depends on this.view type.\n *\n * @param {Object} cameraOptions options to merge with generated. See {@link Camera#flyTo}\n * @returns {Object} {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere} options\n */\nKmlTourFlyTo.prototype.getCameraOptions = function (cameraOptions) {\n  var options = {\n    duration: this.duration,\n  };\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this.activeCallback)) {\n    options.complete = this.activeCallback;\n  }\n\n  if (this.flyToMode === "smooth") {\n    options.easingFunction = _Core_EasingFunction_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].LINEAR_NONE */ .Z.LINEAR_NONE;\n  }\n\n  if (this.view.headingPitchRoll) {\n    options.destination = this.view.position;\n    options.orientation = this.view.headingPitchRoll;\n  } else if (this.view.headingPitchRange) {\n    options.offset = this.view.headingPitchRange;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(cameraOptions)) {\n    options = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, cameraOptions);\n  }\n  return options;\n};\n\n/**\n * A function that will be executed when the flight completes.\n * @callback KmlTourFlyTo.DoneCallback\n *\n * @param {Boolean} terminated true if {@link KmlTourFlyTo#stop} was\n * called before entry done playback.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (KmlTourFlyTo);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg4MjYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF1RDtBQUNkO0FBQ0E7QUFDYztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVEscUVBQXFFO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUVBQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0oscUJBQXFCLHdFQUFjO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0EsTUFBTSxxRUFBTztBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixvQkFBb0IsSUFBSTtBQUNoRDtBQUNBO0FBQ0EsV0FBVyxRQUFRLG9EQUFvRDtBQUN2RSxhQUFhLFNBQVMsb0JBQW9CLElBQUksa0NBQWtDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxxRUFBTztBQUNiO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsZ0dBQTBCO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLE1BQU0scUVBQU87QUFDYixjQUFjLHFFQUFPO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUyxvQkFBb0IseUJBQXlCO0FBQ2pFO0FBQ0E7QUFDQSx5REFBZSxZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvRGF0YVNvdXJjZXMvS21sVG91ckZseVRvLmpzP2E1OWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvdW5kaW5nU3BoZXJlIGZyb20gXCIuLi9Db3JlL0JvdW5kaW5nU3BoZXJlLmpzXCI7XG5pbXBvcnQgY29tYmluZSBmcm9tIFwiLi4vQ29yZS9jb21iaW5lLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRWFzaW5nRnVuY3Rpb24gZnJvbSBcIi4uL0NvcmUvRWFzaW5nRnVuY3Rpb24uanNcIjtcbi8qKlxuICogVHJhbnNpdGlvbnMgdGhlIEttbFRvdXIgdG8gdGhlIG5leHQgZGVzdGluYXRpb24uIFRoaXMgdHJhbnNpdGlvbiBpcyBmYWNpbGl0YXRlZFxuICogdXNpbmcgYSBzcGVjaWZpZWQgZmx5VG9Nb2RlIG92ZXIgYSBnaXZlbiBudW1iZXIgb2Ygc2Vjb25kcy5cbiAqXG4gKiBAYWxpYXMgS21sVG91ckZseVRvXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gZW50cnkgZHVyYXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBmbHlUb01vZGUgS01MIGZseSB0byBtb2RlOiBib3VuY2UsIHNtb290aCwgZXRjXG4gKiBAcGFyYW0ge0ttbENhbWVyYXxLbWxMb29rQXR9IHZpZXcgS21sQ2FtZXJhIG9yIEttbExvb2tBdFxuICpcbiAqIEBzZWUgS21sVG91clxuICogQHNlZSBLbWxUb3VyV2FpdFxuICovXG5mdW5jdGlvbiBLbWxUb3VyRmx5VG8oZHVyYXRpb24sIGZseVRvTW9kZSwgdmlldykge1xuICB0aGlzLnR5cGUgPSBcIkttbFRvdXJGbHlUb1wiO1xuICB0aGlzLmJsb2NraW5nID0gdHJ1ZTtcbiAgdGhpcy5hY3RpdmVDYW1lcmEgPSBudWxsO1xuICB0aGlzLmFjdGl2ZUNhbGxiYWNrID0gbnVsbDtcblxuICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gIHRoaXMudmlldyA9IHZpZXc7XG4gIHRoaXMuZmx5VG9Nb2RlID0gZmx5VG9Nb2RlO1xufVxuXG4vKipcbiAqIFBsYXkgdGhpcyBwbGF5bGlzdCBlbnRyeVxuICpcbiAqIEBwYXJhbSB7S21sVG91ckZseVRvLkRvbmVDYWxsYmFja30gZG9uZSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aGVuIHBsYXliYWNrIGVuZHNcbiAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgQ2VzaXVtIGNhbWVyYVxuICogQHBhcmFtIHtPYmplY3R9IFtjYW1lcmFPcHRpb25zXSB3aGljaCB3aWxsIGJlIG1lcmdlZCB3aXRoIGNhbWVyYSBmbHlUbyBvcHRpb25zLiBTZWUge0BsaW5rIENhbWVyYSNmbHlUb31cbiAqL1xuS21sVG91ckZseVRvLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKGRvbmUsIGNhbWVyYSwgY2FtZXJhT3B0aW9ucykge1xuICB0aGlzLmFjdGl2ZUNhbWVyYSA9IGNhbWVyYTtcbiAgaWYgKGRlZmluZWQoZG9uZSkgJiYgZG9uZSAhPT0gbnVsbCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmFjdGl2ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHRlcm1pbmF0ZWQpIHtcbiAgICAgIGRlbGV0ZSBzZWxmLmFjdGl2ZUNhbGxiYWNrO1xuICAgICAgZGVsZXRlIHNlbGYuYWN0aXZlQ2FtZXJhO1xuICAgICAgZG9uZShkZWZpbmVkKHRlcm1pbmF0ZWQpID8gZmFsc2UgOiB0ZXJtaW5hdGVkKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldENhbWVyYU9wdGlvbnMoY2FtZXJhT3B0aW9ucyk7XG4gIGlmICh0aGlzLnZpZXcuaGVhZGluZ1BpdGNoUm9sbCkge1xuICAgIGNhbWVyYS5mbHlUbyhvcHRpb25zKTtcbiAgfSBlbHNlIGlmICh0aGlzLnZpZXcuaGVhZGluZ1BpdGNoUmFuZ2UpIHtcbiAgICB2YXIgdGFyZ2V0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKHRoaXMudmlldy5wb3NpdGlvbik7XG4gICAgY2FtZXJhLmZseVRvQm91bmRpbmdTcGhlcmUodGFyZ2V0LCBvcHRpb25zKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdG9wIGV4ZWN1dGlvbiBvZiBjdXJlbnQgZW50cnkuIENhbmNlbCBjYW1lcmEgZmx5VG9cbiAqL1xuS21sVG91ckZseVRvLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICBpZiAoZGVmaW5lZCh0aGlzLmFjdGl2ZUNhbWVyYSkpIHtcbiAgICB0aGlzLmFjdGl2ZUNhbWVyYS5jYW5jZWxGbGlnaHQoKTtcbiAgfVxuICBpZiAoZGVmaW5lZCh0aGlzLmFjdGl2ZUNhbGxiYWNrKSkge1xuICAgIHRoaXMuYWN0aXZlQ2FsbGJhY2sodHJ1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBvcHRpb25zIGZvciB7QGxpbmsgQ2FtZXJhI2ZseVRvfSBvciB7QGxpbmsgQ2FtZXJhI2ZseVRvQm91bmRpbmdTcGhlcmV9XG4gKiBkZXBlbmRzIG9uIHRoaXMudmlldyB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYW1lcmFPcHRpb25zIG9wdGlvbnMgdG8gbWVyZ2Ugd2l0aCBnZW5lcmF0ZWQuIFNlZSB7QGxpbmsgQ2FtZXJhI2ZseVRvfVxuICogQHJldHVybnMge09iamVjdH0ge0BsaW5rIENhbWVyYSNmbHlUb30gb3Ige0BsaW5rIENhbWVyYSNmbHlUb0JvdW5kaW5nU3BoZXJlfSBvcHRpb25zXG4gKi9cbkttbFRvdXJGbHlUby5wcm90b3R5cGUuZ2V0Q2FtZXJhT3B0aW9ucyA9IGZ1bmN0aW9uIChjYW1lcmFPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLFxuICB9O1xuXG4gIGlmIChkZWZpbmVkKHRoaXMuYWN0aXZlQ2FsbGJhY2spKSB7XG4gICAgb3B0aW9ucy5jb21wbGV0ZSA9IHRoaXMuYWN0aXZlQ2FsbGJhY2s7XG4gIH1cblxuICBpZiAodGhpcy5mbHlUb01vZGUgPT09IFwic21vb3RoXCIpIHtcbiAgICBvcHRpb25zLmVhc2luZ0Z1bmN0aW9uID0gRWFzaW5nRnVuY3Rpb24uTElORUFSX05PTkU7XG4gIH1cblxuICBpZiAodGhpcy52aWV3LmhlYWRpbmdQaXRjaFJvbGwpIHtcbiAgICBvcHRpb25zLmRlc3RpbmF0aW9uID0gdGhpcy52aWV3LnBvc2l0aW9uO1xuICAgIG9wdGlvbnMub3JpZW50YXRpb24gPSB0aGlzLnZpZXcuaGVhZGluZ1BpdGNoUm9sbDtcbiAgfSBlbHNlIGlmICh0aGlzLnZpZXcuaGVhZGluZ1BpdGNoUmFuZ2UpIHtcbiAgICBvcHRpb25zLm9mZnNldCA9IHRoaXMudmlldy5oZWFkaW5nUGl0Y2hSYW5nZTtcbiAgfVxuXG4gIGlmIChkZWZpbmVkKGNhbWVyYU9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IGNvbWJpbmUob3B0aW9ucywgY2FtZXJhT3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGZsaWdodCBjb21wbGV0ZXMuXG4gKiBAY2FsbGJhY2sgS21sVG91ckZseVRvLkRvbmVDYWxsYmFja1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdGVybWluYXRlZCB0cnVlIGlmIHtAbGluayBLbWxUb3VyRmx5VG8jc3RvcH0gd2FzXG4gKiBjYWxsZWQgYmVmb3JlIGVudHJ5IGRvbmUgcGxheWJhY2suXG4gKi9cbmV4cG9ydCBkZWZhdWx0IEttbFRvdXJGbHlUbztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///98826\n')},86729:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82982);\n\n/**\n * Pauses the KmlTour for a given number of seconds.\n *\n * @alias KmlTourWait\n * @constructor\n *\n * @param {Number} duration entry duration\n *\n * @see KmlTour\n * @see KmlTourFlyTo\n */\nfunction KmlTourWait(duration) {\n  this.type = "KmlTourWait";\n  this.blocking = true;\n  this.duration = duration;\n\n  this.timeout = null;\n}\n\n/**\n * Play this playlist entry\n *\n * @param {KmlTourWait.DoneCallback} done function which will be called when playback ends\n */\nKmlTourWait.prototype.play = function (done) {\n  var self = this;\n  this.activeCallback = done;\n  this.timeout = setTimeout(function () {\n    delete self.activeCallback;\n    done(false);\n  }, this.duration * 1000);\n};\n\n/**\n * Stop execution of curent entry, cancel curent timeout\n */\nKmlTourWait.prototype.stop = function () {\n  clearTimeout(this.timeout);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this.activeCallback)) {\n    this.activeCallback(true);\n  }\n};\n\n/**\n * A function which will be called when playback ends.\n *\n * @callback KmlTourWait.DoneCallback\n * @param {Boolean} terminated true if {@link KmlTourWait#stop} was\n * called before entry done playback.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (KmlTourWait);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY3MjkuanMiLCJtYXBwaW5ncyI6IjtBQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTLG9CQUFvQix3QkFBd0I7QUFDaEU7QUFDQTtBQUNBLHlEQUFlLFdBQVcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9EYXRhU291cmNlcy9LbWxUb3VyV2FpdC5qcz9jYzU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbi8qKlxuICogUGF1c2VzIHRoZSBLbWxUb3VyIGZvciBhIGdpdmVuIG51bWJlciBvZiBzZWNvbmRzLlxuICpcbiAqIEBhbGlhcyBLbWxUb3VyV2FpdFxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIGVudHJ5IGR1cmF0aW9uXG4gKlxuICogQHNlZSBLbWxUb3VyXG4gKiBAc2VlIEttbFRvdXJGbHlUb1xuICovXG5mdW5jdGlvbiBLbWxUb3VyV2FpdChkdXJhdGlvbikge1xuICB0aGlzLnR5cGUgPSBcIkttbFRvdXJXYWl0XCI7XG4gIHRoaXMuYmxvY2tpbmcgPSB0cnVlO1xuICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG5cbiAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBQbGF5IHRoaXMgcGxheWxpc3QgZW50cnlcbiAqXG4gKiBAcGFyYW0ge0ttbFRvdXJXYWl0LkRvbmVDYWxsYmFja30gZG9uZSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aGVuIHBsYXliYWNrIGVuZHNcbiAqL1xuS21sVG91cldhaXQucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuYWN0aXZlQ2FsbGJhY2sgPSBkb25lO1xuICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBkZWxldGUgc2VsZi5hY3RpdmVDYWxsYmFjaztcbiAgICBkb25lKGZhbHNlKTtcbiAgfSwgdGhpcy5kdXJhdGlvbiAqIDEwMDApO1xufTtcblxuLyoqXG4gKiBTdG9wIGV4ZWN1dGlvbiBvZiBjdXJlbnQgZW50cnksIGNhbmNlbCBjdXJlbnQgdGltZW91dFxuICovXG5LbWxUb3VyV2FpdC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gIGlmIChkZWZpbmVkKHRoaXMuYWN0aXZlQ2FsbGJhY2spKSB7XG4gICAgdGhpcy5hY3RpdmVDYWxsYmFjayh0cnVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gcGxheWJhY2sgZW5kcy5cbiAqXG4gKiBAY2FsbGJhY2sgS21sVG91cldhaXQuRG9uZUNhbGxiYWNrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRlcm1pbmF0ZWQgdHJ1ZSBpZiB7QGxpbmsgS21sVG91cldhaXQjc3RvcH0gd2FzXG4gKiBjYWxsZWQgYmVmb3JlIGVudHJ5IGRvbmUgcGxheWJhY2suXG4gKi9cbmV4cG9ydCBkZWZhdWx0IEttbFRvdXJXYWl0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///86729\n')}}]);