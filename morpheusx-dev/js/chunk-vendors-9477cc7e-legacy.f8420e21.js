"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[1882],{40370:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_arraySlice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68591);\n/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59947);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8182);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(84828);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12572);\n/* harmony import */ var _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(96037);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22832);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72248);\n/* harmony import */ var _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(97264);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9407);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(95555);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(52200);\n/* harmony import */ var _GltfPipeline_addDefaults_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(32550);\n/* harmony import */ var _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(56629);\n/* harmony import */ var _GltfPipeline_getAccessorByteStride_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(93224);\n/* harmony import */ var _GltfPipeline_numberOfComponentsForType_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(26806);\n/* harmony import */ var _GltfPipeline_parseGlb_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(52655);\n/* harmony import */ var _GltfPipeline_updateVersion_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(6186);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(13222);\n/* harmony import */ var _Axis_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(66577);\n/* harmony import */ var _ModelLoadResources_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(28770);\n/* harmony import */ var _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(15322);\n/* harmony import */ var _processModelMaterialsCommon_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(51240);\n/* harmony import */ var _processPbrMaterials_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(14503);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(89917);\n/* harmony import */ var _Vector3DTileBatch_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(51867);\n/* harmony import */ var _Vector3DTilePrimitive_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(90082);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar boundingSphereCartesian3Scratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nvar ModelState = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].ModelState */ .Z.ModelState;\n\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * A 3D model for classifying other 3D assets based on glTF, the runtime 3D asset format.\n * This is a special case when a model of a 3D tileset becomes a classifier when setting {@link Cesium3DTileset#classificationType}.\n *\n * @alias ClassificationModel\n * @constructor\n *\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {ArrayBuffer|Uint8Array} options.gltf A binary glTF buffer.\n * @param {Boolean} [options.show=true] Determines if the model primitive will be shown.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the model from model to world coordinates.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for each draw command in the model.\n * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the model in wireframe.\n * @param {ClassificationType} [options.classificationType] What this model will classify.\n *\n * @exception {RuntimeError} Only binary glTF is supported.\n * @exception {RuntimeError} Buffer data must be embedded in the binary glTF.\n * @exception {RuntimeError} Only one node is supported for classification and it must have a mesh.\n * @exception {RuntimeError} Only one mesh is supported when using b3dm for classification.\n * @exception {RuntimeError} Only one primitive per mesh is supported when using b3dm for classification.\n * @exception {RuntimeError} The mesh must have a position attribute.\n * @exception {RuntimeError} The mesh must have a batch id attribute.\n */\nfunction ClassificationModel(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var gltf = options.gltf;\n  if (gltf instanceof ArrayBuffer) {\n    gltf = new Uint8Array(gltf);\n  }\n\n  if (gltf instanceof Uint8Array) {\n    // Parse and update binary glTF\n    gltf = (0,_GltfPipeline_parseGlb_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)(gltf);\n    (0,_GltfPipeline_updateVersion_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z)(gltf);\n    (0,_GltfPipeline_addDefaults_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(gltf);\n    (0,_processModelMaterialsCommon_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(gltf);\n    (0,_processPbrMaterials_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z)(gltf);\n  } else {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z("Only binary glTF is supported as a classifier.");\n  }\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].buffer */ .Z.buffer(gltf, function (buffer) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(buffer.extras._pipeline.source)) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z(\n        "Buffer data must be embedded in the binary gltf."\n      );\n    }\n  });\n\n  var gltfNodes = gltf.nodes;\n  var gltfMeshes = gltf.meshes;\n\n  var gltfNode = gltfNodes[0];\n  var meshId = gltfNode.mesh;\n  if (gltfNodes.length !== 1 || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(meshId)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z(\n      "Only one node is supported for classification and it must have a mesh."\n    );\n  }\n\n  if (gltfMeshes.length !== 1) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z(\n      "Only one mesh is supported when using b3dm for classification."\n    );\n  }\n\n  var gltfPrimitives = gltfMeshes[0].primitives;\n  if (gltfPrimitives.length !== 1) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z(\n      "Only one primitive per mesh is supported when using b3dm for classification."\n    );\n  }\n\n  var gltfPositionAttribute = gltfPrimitives[0].attributes.POSITION;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(gltfPositionAttribute)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z("The mesh must have a position attribute.");\n  }\n\n  var gltfBatchIdAttribute = gltfPrimitives[0].attributes._BATCHID;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(gltfBatchIdAttribute)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z("The mesh must have a batch id attribute.");\n  }\n\n  this._gltf = gltf;\n\n  /**\n   * Determines if the model primitive will be shown.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.show, true);\n\n  /**\n   * The 4x4 transformation matrix that transforms the model from model to world coordinates.\n   * When this is the identity matrix, the model is drawn in world coordinates, i.e., Earth\'s WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   *\n   * @default {@link Matrix4.IDENTITY}\n   *\n   * @example\n   * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n   * m.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n   */\n  this.modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.modelMatrix, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].IDENTITY */ .Z.IDENTITY)\n  );\n  this._modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clone */ .Z.clone(this.modelMatrix);\n\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].defer */ .Z.defer();\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the model.  A glTF primitive corresponds\n   * to one draw command.  A glTF mesh has an array of primitives, often of length one.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n  this._debugShowBoundingVolume = false;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the model in wireframe.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugWireframe = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.debugWireframe, false);\n  this._debugWireframe = false;\n\n  this._classificationType = options.classificationType;\n\n  // Undocumented options\n  this._vertexShaderLoaded = options.vertexShaderLoaded;\n  this._classificationShaderLoaded = options.classificationShaderLoaded;\n  this._uniformMapLoaded = options.uniformMapLoaded;\n  this._pickIdLoaded = options.pickIdLoaded;\n  this._ignoreCommands = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.ignoreCommands, false);\n  this._upAxis = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.upAxis, _Axis_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].Y */ .Z.Y);\n  this._batchTable = options.batchTable;\n\n  this._computedModelMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(); // Derived from modelMatrix and axis\n  this._initialRadius = undefined; // Radius without model\'s scale property, model-matrix scale, animations, or skins\n  this._boundingSphere = undefined;\n  this._scaledBoundingSphere = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._state = ModelState.NEEDS_LOAD;\n  this._loadResources = undefined;\n\n  this._mode = undefined;\n  this._dirty = false; // true when the model was transformed this frame\n\n  this._nodeMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n  this._primitive = undefined;\n\n  this._extensionsUsed = undefined; // Cached used glTF extensions\n  this._extensionsRequired = undefined; // Cached required glTF extensions\n  this._quantizedUniforms = undefined; // Quantized uniforms for WEB3D_quantized_attributes\n\n  this._buffers = {};\n  this._vertexArray = undefined;\n  this._shaderProgram = undefined;\n  this._uniformMap = undefined;\n\n  this._geometryByteLength = 0;\n  this._trianglesLength = 0;\n\n  // CESIUM_RTC extension\n  this._rtcCenter = undefined; // reference to either 3D or 2D\n  this._rtcCenterEye = undefined; // in eye coordinates\n  this._rtcCenter3D = undefined; // in world coordinates\n  this._rtcCenter2D = undefined; // in projected world coordinates\n}\n\nObject.defineProperties(ClassificationModel.prototype, {\n  /**\n   * The object for the glTF JSON, including properties with default values omitted\n   * from the JSON provided to this model.\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  gltf: {\n    get: function () {\n      return this._gltf;\n    },\n  },\n\n  /**\n   * The model\'s bounding sphere in its local coordinate system.\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {BoundingSphere}\n   * @readonly\n   *\n   * @default undefined\n   *\n   * @exception {DeveloperError} The model is not loaded.  Use ClassificationModel.readyPromise or wait for ClassificationModel.ready to be true.\n   *\n   * @example\n   * // Center in WGS84 coordinates\n   * var center = Cesium.Matrix4.multiplyByPoint(model.modelMatrix, model.boundingSphere.center, new Cesium.Cartesian3());\n   */\n  boundingSphere: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (this._state !== ModelState.LOADED) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(\n          "The model is not loaded.  Use ClassificationModel.readyPromise or wait for ClassificationModel.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      var modelMatrix = this.modelMatrix;\n      var nonUniformScale = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getScale */ .Z.getScale(\n        modelMatrix,\n        boundingSphereCartesian3Scratch\n      );\n\n      var scaledBoundingSphere = this._scaledBoundingSphere;\n      scaledBoundingSphere.center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyComponents */ .Z.multiplyComponents(\n        this._boundingSphere.center,\n        nonUniformScale,\n        scaledBoundingSphere.center\n      );\n      scaledBoundingSphere.radius =\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maximumComponent */ .Z.maximumComponent(nonUniformScale) * this._initialRadius;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(this._rtcCenter)) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n          this._rtcCenter,\n          scaledBoundingSphere.center,\n          scaledBoundingSphere.center\n        );\n      }\n\n      return scaledBoundingSphere;\n    },\n  },\n\n  /**\n   * When <code>true</code>, this model is ready to render, i.e., the external binary, image,\n   * and shader files were downloaded and the WebGL resources were created.  This is set to\n   * <code>true</code> right before {@link ClassificationModel#readyPromise} is resolved.\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when this model is ready to render, i.e., when the external binary, image,\n   * and shader files were downloaded and the WebGL resources were created.\n   * <p>\n   * This promise is resolved at the end of the frame before the first frame the model is rendered in.\n   * </p>\n   *\n   * @memberof ClassificationModel.prototype\n   * @type {Promise.<ClassificationModel>}\n   * @readonly\n   *\n   * @see ClassificationModel#ready\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Returns true if the model was transformed this frame\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  dirty: {\n    get: function () {\n      return this._dirty;\n    },\n  },\n\n  /**\n   * Returns an object with all of the glTF extensions used.\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  extensionsUsed: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(this._extensionsUsed)) {\n        this._extensionsUsed = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getUsedExtensions */ .Z.getUsedExtensions(this.gltf);\n      }\n      return this._extensionsUsed;\n    },\n  },\n\n  /**\n   * Returns an object with all of the glTF extensions required.\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {Object}\n   * @readonly\n   */\n  extensionsRequired: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(this._extensionsRequired)) {\n        this._extensionsRequired = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getRequiredExtensions */ .Z.getRequiredExtensions(\n          this.gltf\n        );\n      }\n      return this._extensionsRequired;\n    },\n  },\n\n  /**\n   * Gets the model\'s up-axis.\n   * By default models are y-up according to the glTF spec, however geo-referenced models will typically be z-up.\n   *\n   * @memberof ClassificationModel.prototype\n   *\n   * @type {Number}\n   * @default Axis.Y\n   * @readonly\n   *\n   * @private\n   */\n  upAxis: {\n    get: function () {\n      return this._upAxis;\n    },\n  },\n\n  /**\n   * Gets the model\'s triangle count.\n   *\n   * @private\n   */\n  trianglesLength: {\n    get: function () {\n      return this._trianglesLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s geometry memory in bytes. This includes all vertex and index buffers.\n   *\n   * @private\n   */\n  geometryByteLength: {\n    get: function () {\n      return this._geometryByteLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s texture memory in bytes.\n   *\n   * @private\n   */\n  texturesByteLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the model\'s classification type.\n   * @memberof ClassificationModel.prototype\n   * @type {ClassificationType}\n   */\n  classificationType: {\n    get: function () {\n      return this._classificationType;\n    },\n  },\n});\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction addBuffersToLoadResources(model) {\n  var gltf = model.gltf;\n  var loadResources = model._loadResources;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].buffer */ .Z.buffer(gltf, function (buffer, id) {\n    loadResources.buffers[id] = buffer.extras._pipeline.source;\n  });\n}\n\nfunction parseBufferViews(model) {\n  var bufferViews = model.gltf.bufferViews;\n\n  var vertexBuffersToCreate = model._loadResources.vertexBuffersToCreate;\n\n  // Only ARRAY_BUFFER here.  ELEMENT_ARRAY_BUFFER created below.\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].bufferView */ .Z.bufferView(model.gltf, function (bufferView, id) {\n    if (bufferView.target === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].ARRAY_BUFFER */ .Z.ARRAY_BUFFER) {\n      vertexBuffersToCreate.enqueue(id);\n    }\n  });\n\n  var indexBuffersToCreate = model._loadResources.indexBuffersToCreate;\n  var indexBufferIds = {};\n\n  // The Cesium Renderer requires knowing the datatype for an index buffer\n  // at creation type, which is not part of the glTF bufferview so loop\n  // through glTF accessors to create the bufferview\'s index buffer.\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].accessor */ .Z.accessor(model.gltf, function (accessor) {\n    var bufferViewId = accessor.bufferView;\n    var bufferView = bufferViews[bufferViewId];\n\n    if (\n      bufferView.target === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER &&\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(indexBufferIds[bufferViewId])\n    ) {\n      indexBufferIds[bufferViewId] = true;\n      indexBuffersToCreate.enqueue({\n        id: bufferViewId,\n        componentType: accessor.componentType,\n      });\n    }\n  });\n}\n\nfunction createVertexBuffer(bufferViewId, model) {\n  var loadResources = model._loadResources;\n  var bufferViews = model.gltf.bufferViews;\n  var bufferView = bufferViews[bufferViewId];\n  var vertexBuffer = loadResources.getBuffer(bufferView);\n  model._buffers[bufferViewId] = vertexBuffer;\n  model._geometryByteLength += vertexBuffer.byteLength;\n}\n\nfunction createIndexBuffer(bufferViewId, componentType, model) {\n  var loadResources = model._loadResources;\n  var bufferViews = model.gltf.bufferViews;\n  var bufferView = bufferViews[bufferViewId];\n  var indexBuffer = {\n    typedArray: loadResources.getBuffer(bufferView),\n    indexDatatype: componentType,\n  };\n  model._buffers[bufferViewId] = indexBuffer;\n  model._geometryByteLength += indexBuffer.typedArray.byteLength;\n}\n\nfunction createBuffers(model) {\n  var loadResources = model._loadResources;\n\n  if (loadResources.pendingBufferLoads !== 0) {\n    return;\n  }\n\n  var vertexBuffersToCreate = loadResources.vertexBuffersToCreate;\n  var indexBuffersToCreate = loadResources.indexBuffersToCreate;\n\n  while (vertexBuffersToCreate.length > 0) {\n    createVertexBuffer(vertexBuffersToCreate.dequeue(), model);\n  }\n\n  while (indexBuffersToCreate.length > 0) {\n    var i = indexBuffersToCreate.dequeue();\n    createIndexBuffer(i.id, i.componentType, model);\n  }\n}\n\nfunction modifyShaderForQuantizedAttributes(shader, model) {\n  var primitive = model.gltf.meshes[0].primitives[0];\n  var result = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].modifyShaderForQuantizedAttributes */ .Z.modifyShaderForQuantizedAttributes(\n    model.gltf,\n    primitive,\n    shader\n  );\n  model._quantizedUniforms = result.uniforms;\n  return result.shader;\n}\n\nfunction modifyShader(shader, callback) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(callback)) {\n    shader = callback(shader);\n  }\n  return shader;\n}\n\nfunction createProgram(model) {\n  var gltf = model.gltf;\n\n  var positionName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n    gltf,\n    "POSITION"\n  );\n  var batchIdName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n    gltf,\n    "_BATCHID"\n  );\n\n  var attributeLocations = {};\n  attributeLocations[positionName] = 0;\n  attributeLocations[batchIdName] = 1;\n\n  var modelViewProjectionName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n    gltf,\n    "MODELVIEWPROJECTION"\n  );\n\n  var uniformDecl;\n  var toClip;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(modelViewProjectionName)) {\n    var projectionName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n      gltf,\n      "PROJECTION"\n    );\n    var modelViewName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n      gltf,\n      "MODELVIEW"\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(modelViewName)) {\n      modelViewName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n        gltf,\n        "CESIUM_RTC_MODELVIEW"\n      );\n    }\n\n    uniformDecl =\n      "uniform mat4 " +\n      modelViewName +\n      ";\\n" +\n      "uniform mat4 " +\n      projectionName +\n      ";\\n";\n    toClip =\n      projectionName +\n      " * " +\n      modelViewName +\n      " * vec4(" +\n      positionName +\n      ", 1.0)";\n  } else {\n    uniformDecl = "uniform mat4 " + modelViewProjectionName + ";\\n";\n    toClip = modelViewProjectionName + " * vec4(" + positionName + ", 1.0)";\n  }\n\n  var computePosition = "    vec4 positionInClipCoords = " + toClip + ";\\n";\n\n  var vs =\n    "attribute vec3 " +\n    positionName +\n    ";\\n" +\n    "attribute float " +\n    batchIdName +\n    ";\\n" +\n    uniformDecl +\n    "void main() {\\n" +\n    computePosition +\n    "    gl_Position = czm_depthClamp(positionInClipCoords);\\n" +\n    "}\\n";\n  var fs =\n    "#ifdef GL_EXT_frag_depth\\n" +\n    "#extension GL_EXT_frag_depth : enable\\n" +\n    "#endif\\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    gl_FragColor = vec4(1.0); \\n" +\n    "    czm_writeDepthClamp();\\n" +\n    "}\\n";\n\n  if (model.extensionsUsed.WEB3D_quantized_attributes) {\n    vs = modifyShaderForQuantizedAttributes(vs, model);\n  }\n\n  var drawVS = modifyShader(vs, model._vertexShaderLoaded);\n  var drawFS = modifyShader(fs, model._classificationShaderLoaded);\n\n  model._shaderProgram = {\n    vertexShaderSource: drawVS,\n    fragmentShaderSource: drawFS,\n    attributeLocations: attributeLocations,\n  };\n}\n\nfunction getAttributeLocations() {\n  return {\n    POSITION: 0,\n    _BATCHID: 1,\n  };\n}\n\nfunction createVertexArray(model) {\n  var loadResources = model._loadResources;\n  if (!loadResources.finishedBuffersCreation() || (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._vertexArray)) {\n    return;\n  }\n\n  var rendererBuffers = model._buffers;\n  var gltf = model.gltf;\n  var accessors = gltf.accessors;\n  var meshes = gltf.meshes;\n  var primitives = meshes[0].primitives;\n\n  var primitive = primitives[0];\n  var attributeLocations = getAttributeLocations();\n  var attributes = {};\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].meshPrimitiveAttribute */ .Z.meshPrimitiveAttribute(primitive, function (\n    accessorId,\n    attributeName\n  ) {\n    // Skip if the attribute is not used by the material, e.g., because the asset\n    // was exported with an attribute that wasn\'t used and the asset wasn\'t optimized.\n    var attributeLocation = attributeLocations[attributeName];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(attributeLocation)) {\n      var a = accessors[accessorId];\n      attributes[attributeName] = {\n        index: attributeLocation,\n        vertexBuffer: rendererBuffers[a.bufferView],\n        componentsPerAttribute: (0,_GltfPipeline_numberOfComponentsForType_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z)(a.type),\n        componentDatatype: a.componentType,\n        offsetInBytes: a.byteOffset,\n        strideInBytes: (0,_GltfPipeline_getAccessorByteStride_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(gltf, a),\n      };\n    }\n  });\n\n  var indexBuffer;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(primitive.indices)) {\n    var accessor = accessors[primitive.indices];\n    indexBuffer = rendererBuffers[accessor.bufferView];\n  }\n  model._vertexArray = {\n    attributes: attributes,\n    indexBuffer: indexBuffer,\n  };\n}\n\nvar gltfSemanticUniforms = {\n  PROJECTION: function (uniformState, model) {\n    return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getGltfSemanticUniforms */ .Z.getGltfSemanticUniforms().PROJECTION(\n      uniformState,\n      model\n    );\n  },\n  MODELVIEW: function (uniformState, model) {\n    return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getGltfSemanticUniforms */ .Z.getGltfSemanticUniforms().MODELVIEW(\n      uniformState,\n      model\n    );\n  },\n  CESIUM_RTC_MODELVIEW: function (uniformState, model) {\n    return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getGltfSemanticUniforms */ .Z.getGltfSemanticUniforms().CESIUM_RTC_MODELVIEW(\n      uniformState,\n      model\n    );\n  },\n  MODELVIEWPROJECTION: function (uniformState, model) {\n    return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getGltfSemanticUniforms */ .Z.getGltfSemanticUniforms().MODELVIEWPROJECTION(\n      uniformState,\n      model\n    );\n  },\n};\n\nfunction createUniformMap(model, context) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._uniformMap)) {\n    return;\n  }\n\n  var uniformMap = {};\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].technique */ .Z.technique(model.gltf, function (technique) {\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].techniqueUniform */ .Z.techniqueUniform(technique, function (uniform, uniformName) {\n      if (\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(uniform.semantic) ||\n        !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(gltfSemanticUniforms[uniform.semantic])\n      ) {\n        return;\n      }\n\n      uniformMap[uniformName] = gltfSemanticUniforms[uniform.semantic](\n        context.uniformState,\n        model\n      );\n    });\n  });\n\n  model._uniformMap = uniformMap;\n}\n\nfunction createUniformsForQuantizedAttributes(model, primitive) {\n  return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].createUniformsForQuantizedAttributes */ .Z.createUniformsForQuantizedAttributes(\n    model.gltf,\n    primitive,\n    model._quantizedUniforms\n  );\n}\n\nfunction triangleCountFromPrimitiveIndices(primitive, indicesCount) {\n  switch (primitive.mode) {\n    case _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TRIANGLES */ .Z.TRIANGLES:\n      return indicesCount / 3;\n    case _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TRIANGLE_STRIP */ .Z.TRIANGLE_STRIP:\n    case _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TRIANGLE_FAN */ .Z.TRIANGLE_FAN:\n      return Math.max(indicesCount - 2, 0);\n    default:\n      return 0;\n  }\n}\n\nfunction createPrimitive(model) {\n  var batchTable = model._batchTable;\n\n  var uniformMap = model._uniformMap;\n  var vertexArray = model._vertexArray;\n\n  var gltf = model.gltf;\n  var accessors = gltf.accessors;\n  var gltfMeshes = gltf.meshes;\n  var primitive = gltfMeshes[0].primitives[0];\n  var ix = accessors[primitive.indices];\n\n  var positionAccessor = primitive.attributes.POSITION;\n  var minMax = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getAccessorMinMax */ .Z.getAccessorMinMax(gltf, positionAccessor);\n  var boundingSphere = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromCornerPoints */ .Z.fromCornerPoints(\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(minMax.min),\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(minMax.max)\n  );\n\n  var offset;\n  var count;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(ix)) {\n    count = ix.count;\n    offset = ix.byteOffset / _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].getSizeInBytes */ .Z.getSizeInBytes(ix.componentType); // glTF has offset in bytes.  Cesium has offsets in indices\n  } else {\n    var positions = accessors[primitive.attributes.POSITION];\n    count = positions.count;\n    offset = 0;\n  }\n\n  // Update model triangle count using number of indices\n  model._trianglesLength += triangleCountFromPrimitiveIndices(primitive, count);\n\n  // Allow callback to modify the uniformMap\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._uniformMapLoaded)) {\n    uniformMap = model._uniformMapLoaded(uniformMap);\n  }\n\n  // Add uniforms for decoding quantized attributes if used\n  if (model.extensionsUsed.WEB3D_quantized_attributes) {\n    var quantizedUniformMap = createUniformsForQuantizedAttributes(\n      model,\n      primitive\n    );\n    uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(uniformMap, quantizedUniformMap);\n  }\n\n  var attribute = vertexArray.attributes.POSITION;\n  var componentDatatype = attribute.componentDatatype;\n  var typedArray = attribute.vertexBuffer;\n  var byteOffset = typedArray.byteOffset;\n  var bufferLength =\n    typedArray.byteLength / _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].getSizeInBytes */ .Z.getSizeInBytes(componentDatatype);\n  var positionsBuffer = _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].createArrayBufferView */ .Z.createArrayBufferView(\n    componentDatatype,\n    typedArray.buffer,\n    byteOffset,\n    bufferLength\n  );\n\n  attribute = vertexArray.attributes._BATCHID;\n  componentDatatype = attribute.componentDatatype;\n  typedArray = attribute.vertexBuffer;\n  byteOffset = typedArray.byteOffset;\n  bufferLength =\n    typedArray.byteLength / _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].getSizeInBytes */ .Z.getSizeInBytes(componentDatatype);\n  var vertexBatchIds = _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].createArrayBufferView */ .Z.createArrayBufferView(\n    componentDatatype,\n    typedArray.buffer,\n    byteOffset,\n    bufferLength\n  );\n\n  var buffer = vertexArray.indexBuffer.typedArray;\n  var indices;\n  if (vertexArray.indexBuffer.indexDatatype === _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT) {\n    indices = new Uint16Array(\n      buffer.buffer,\n      buffer.byteOffset,\n      buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT\n    );\n  } else {\n    indices = new Uint32Array(\n      buffer.buffer,\n      buffer.byteOffset,\n      buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  positionsBuffer = (0,_Core_arraySlice_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(positionsBuffer);\n  vertexBatchIds = (0,_Core_arraySlice_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(vertexBatchIds);\n  indices = (0,_Core_arraySlice_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(indices, offset, offset + count);\n\n  var batchIds = [];\n  var indexCounts = [];\n  var indexOffsets = [];\n  var batchedIndices = [];\n\n  var currentId = vertexBatchIds[indices[0]];\n  batchIds.push(currentId);\n  indexOffsets.push(0);\n\n  var batchId;\n  var indexOffset;\n  var indexCount;\n  var indicesLength = indices.length;\n  for (var j = 1; j < indicesLength; ++j) {\n    batchId = vertexBatchIds[indices[j]];\n    if (batchId !== currentId) {\n      indexOffset = indexOffsets[indexOffsets.length - 1];\n      indexCount = j - indexOffset;\n\n      batchIds.push(batchId);\n      indexCounts.push(indexCount);\n      indexOffsets.push(j);\n\n      batchedIndices.push(\n        new _Vector3DTileBatch_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z({\n          offset: indexOffset,\n          count: indexCount,\n          batchIds: [currentId],\n          color: _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].WHITE */ .Z.WHITE,\n        })\n      );\n\n      currentId = batchId;\n    }\n  }\n\n  indexOffset = indexOffsets[indexOffsets.length - 1];\n  indexCount = indicesLength - indexOffset;\n\n  indexCounts.push(indexCount);\n  batchedIndices.push(\n    new _Vector3DTileBatch_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z({\n      offset: indexOffset,\n      count: indexCount,\n      batchIds: [currentId],\n      color: _Core_Color_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].WHITE */ .Z.WHITE,\n    })\n  );\n\n  var shader = model._shaderProgram;\n  var vertexShaderSource = shader.vertexShaderSource;\n  var fragmentShaderSource = shader.fragmentShaderSource;\n  var attributeLocations = shader.attributeLocations;\n  var pickId = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._pickIdLoaded) ? model._pickIdLoaded() : undefined;\n\n  model._primitive = new _Vector3DTilePrimitive_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z({\n    classificationType: model._classificationType,\n    positions: positionsBuffer,\n    indices: indices,\n    indexOffsets: indexOffsets,\n    indexCounts: indexCounts,\n    batchIds: batchIds,\n    vertexBatchIds: vertexBatchIds,\n    batchedIndices: batchedIndices,\n    batchTable: batchTable,\n    boundingVolume: new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(), // updated in update()\n    _vertexShaderSource: vertexShaderSource,\n    _fragmentShaderSource: fragmentShaderSource,\n    _attributeLocations: attributeLocations,\n    _uniformMap: uniformMap,\n    _pickId: pickId,\n    _modelMatrix: new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(), // updated in update()\n    _boundingSphere: boundingSphere, // used to update boundingVolume\n  });\n\n  // Release CPU resources\n  model._buffers = undefined;\n  model._vertexArray = undefined;\n  model._shaderProgram = undefined;\n  model._uniformMap = undefined;\n}\n\nfunction createRuntimeNodes(model) {\n  var loadResources = model._loadResources;\n  if (!loadResources.finished()) {\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._primitive)) {\n    return;\n  }\n\n  var gltf = model.gltf;\n  var nodes = gltf.nodes;\n  var gltfNode = nodes[0];\n  model._nodeMatrix = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].getTransform */ .Z.getTransform(gltfNode, model._nodeMatrix);\n\n  createPrimitive(model);\n}\n\nfunction createResources(model, frameState) {\n  var context = frameState.context;\n\n  _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].checkSupportedGlExtensions */ .Z.checkSupportedGlExtensions(model.gltf.glExtensionsUsed, context);\n  createBuffers(model); // using glTF bufferViews\n  createProgram(model);\n  createVertexArray(model); // using glTF meshes\n  createUniformMap(model, context); // using glTF materials/techniques\n  createRuntimeNodes(model); // using glTF scene\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvar scratchComputedTranslation = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchComputedMatrixIn2D = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\nfunction updateNodeModelMatrix(\n  model,\n  modelTransformChanged,\n  justLoaded,\n  projection\n) {\n  var computedModelMatrix = model._computedModelMatrix;\n\n  if (model._mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].SCENE3D */ .Z.SCENE3D && !model._ignoreCommands) {\n    var translation = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getColumn */ .Z.getColumn(\n      computedModelMatrix,\n      3,\n      scratchComputedTranslation\n    );\n    if (!_Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(translation, _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_W */ .Z.UNIT_W)) {\n      computedModelMatrix = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].basisTo2D */ .Z.basisTo2D(\n        projection,\n        computedModelMatrix,\n        scratchComputedMatrixIn2D\n      );\n      model._rtcCenter = model._rtcCenter3D;\n    } else {\n      var center = model.boundingSphere.center;\n      var to2D = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].wgs84To2DModelMatrix */ .Z.wgs84To2DModelMatrix(\n        projection,\n        center,\n        scratchComputedMatrixIn2D\n      );\n      computedModelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiply */ .Z.multiply(\n        to2D,\n        computedModelMatrix,\n        scratchComputedMatrixIn2D\n      );\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._rtcCenter)) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].setTranslation */ .Z.setTranslation(\n          computedModelMatrix,\n          _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_W */ .Z.UNIT_W,\n          computedModelMatrix\n        );\n        model._rtcCenter = model._rtcCenter2D;\n      }\n    }\n  }\n\n  var primitive = model._primitive;\n\n  if (modelTransformChanged || justLoaded) {\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n      computedModelMatrix,\n      model._nodeMatrix,\n      primitive._modelMatrix\n    );\n    _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].transform */ .Z.transform(\n      primitive._boundingSphere,\n      primitive._modelMatrix,\n      primitive._boundingVolume\n    );\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(model._rtcCenter)) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n        model._rtcCenter,\n        primitive._boundingVolume.center,\n        primitive._boundingVolume.center\n      );\n    }\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nClassificationModel.prototype.updateCommands = function (batchId, color) {\n  this._primitive.updateCommands(batchId, color);\n};\n\nClassificationModel.prototype.update = function (frameState) {\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].MORPHING */ .Z.MORPHING) {\n    return;\n  }\n\n  if (!_Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].supportsWebP.initialized */ .Z.supportsWebP.initialized) {\n    _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].supportsWebP.initialize */ .Z.supportsWebP.initialize();\n    return;\n  }\n  var supportsWebP = _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].supportsWebP */ .Z.supportsWebP();\n\n  if (this._state === ModelState.NEEDS_LOAD && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(this.gltf)) {\n    this._state = ModelState.LOADING;\n    if (this._state !== ModelState.FAILED) {\n      var extensions = this.gltf.extensions;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(extensions) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(extensions.CESIUM_RTC)) {\n        var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(extensions.CESIUM_RTC.center);\n        if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(center, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO)) {\n          this._rtcCenter3D = center;\n\n          var projection = frameState.mapProjection;\n          var ellipsoid = projection.ellipsoid;\n          var cartographic = ellipsoid.cartesianToCartographic(\n            this._rtcCenter3D\n          );\n          var projectedCart = projection.project(cartographic);\n          _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n            projectedCart.z,\n            projectedCart.x,\n            projectedCart.y,\n            projectedCart\n          );\n          this._rtcCenter2D = projectedCart;\n\n          this._rtcCenterEye = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n          this._rtcCenter = this._rtcCenter3D;\n        }\n      }\n\n      this._loadResources = new _ModelLoadResources_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n      _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].parseBuffers */ .Z.parseBuffers(this);\n    }\n  }\n\n  var loadResources = this._loadResources;\n  var justLoaded = false;\n\n  if (this._state === ModelState.LOADING) {\n    // Transition from LOADING -> LOADED once resources are downloaded and created.\n    // Textures may continue to stream in while in the LOADED state.\n    if (loadResources.pendingBufferLoads === 0) {\n      _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].checkSupportedExtensions */ .Z.checkSupportedExtensions(\n        this.extensionsRequired,\n        supportsWebP\n      );\n\n      addBuffersToLoadResources(this);\n      parseBufferViews(this);\n\n      this._boundingSphere = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].computeBoundingSphere */ .Z.computeBoundingSphere(this);\n      this._initialRadius = this._boundingSphere.radius;\n      createResources(this, frameState);\n    }\n    if (loadResources.finished()) {\n      this._state = ModelState.LOADED;\n      justLoaded = true;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z)(loadResources) && this._state === ModelState.LOADED) {\n    if (!justLoaded) {\n      createResources(this, frameState);\n    }\n\n    if (loadResources.finished()) {\n      this._loadResources = undefined; // Clear CPU memory since WebGL resources were created.\n    }\n  }\n\n  var show = this.show;\n\n  if ((show && this._state === ModelState.LOADED) || justLoaded) {\n    this._dirty = false;\n    var modelMatrix = this.modelMatrix;\n\n    var modeChanged = frameState.mode !== this._mode;\n    this._mode = frameState.mode;\n\n    // ClassificationModel\'s model matrix needs to be updated\n    var modelTransformChanged =\n      !_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].equals */ .Z.equals(this._modelMatrix, modelMatrix) || modeChanged;\n\n    if (modelTransformChanged || justLoaded) {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clone */ .Z.clone(modelMatrix, this._modelMatrix);\n\n      var computedModelMatrix = this._computedModelMatrix;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].clone */ .Z.clone(modelMatrix, computedModelMatrix);\n      if (this._upAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].Y */ .Z.Y) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedModelMatrix,\n          _Axis_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].Y_UP_TO_Z_UP */ .Z.Y_UP_TO_Z_UP,\n          computedModelMatrix\n        );\n      } else if (this._upAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].X */ .Z.X) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedModelMatrix,\n          _Axis_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].X_UP_TO_Z_UP */ .Z.X_UP_TO_Z_UP,\n          computedModelMatrix\n        );\n      }\n    }\n\n    // Update modelMatrix throughout the graph as needed\n    if (modelTransformChanged || justLoaded) {\n      updateNodeModelMatrix(\n        this,\n        modelTransformChanged,\n        justLoaded,\n        frameState.mapProjection\n      );\n      this._dirty = true;\n    }\n  }\n\n  if (justLoaded) {\n    // Called after modelMatrix update.\n    var model = this;\n    frameState.afterRender.push(function () {\n      model._ready = true;\n      model._readyPromise.resolve(model);\n    });\n    return;\n  }\n\n  if (show && !this._ignoreCommands) {\n    this._primitive.debugShowBoundingVolume = this.debugShowBoundingVolume;\n    this._primitive.debugWireframe = this.debugWireframe;\n    this._primitive.update(frameState);\n  }\n};\n\nClassificationModel.prototype.isDestroyed = function () {\n  return false;\n};\n\nClassificationModel.prototype.destroy = function () {\n  this._primitive = this._primitive && this._primitive.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ClassificationModel);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40370\n')},14662:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92062);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8182);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26865);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(60072);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(46588);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(53642);\n/* harmony import */ var _Shaders_ShadowVolumeAppearanceVS_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(73257);\n/* harmony import */ var _Shaders_ShadowVolumeFS_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(79863);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(13222);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(13633);\n/* harmony import */ var _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(73001);\n/* harmony import */ var _DepthFunction_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(7976);\n/* harmony import */ var _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(64060);\n/* harmony import */ var _Primitive_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(34380);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(89917);\n/* harmony import */ var _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(88472);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(87233);\n/* harmony import */ var _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(77053);\n/* harmony import */ var _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(81255);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A classification primitive represents a volume enclosing geometry in the {@link Scene} to be highlighted.\n * <p>\n * A primitive combines geometry instances with an {@link Appearance} that describes the full shading, including\n * {@link Material} and {@link RenderState}.  Roughly, the geometry instance defines the structure and placement,\n * and the appearance defines the visual characteristics.  Decoupling geometry and appearance allows us to mix\n * and match most of them and add a new geometry or appearance independently of each other.\n * Only {@link PerInstanceColorAppearance} with the same color across all instances is supported at this time when using\n * ClassificationPrimitive directly.\n * For full {@link Appearance} support when classifying terrain or 3D Tiles use {@link GroundPrimitive} instead.\n * </p>\n * <p>\n * For correct rendering, this feature requires the EXT_frag_depth WebGL extension. For hardware that do not support this extension, there\n * will be rendering artifacts for some viewing angles.\n * </p>\n * <p>\n * Valid geometries are {@link BoxGeometry}, {@link CylinderGeometry}, {@link EllipsoidGeometry}, {@link PolylineVolumeGeometry}, and {@link SphereGeometry}.\n * </p>\n * <p>\n * Geometries that follow the surface of the ellipsoid, such as {@link CircleGeometry}, {@link CorridorGeometry}, {@link EllipseGeometry}, {@link PolygonGeometry}, and {@link RectangleGeometry},\n * are also valid if they are extruded volumes; otherwise, they will not be rendered.\n * </p>\n *\n * @alias ClassificationPrimitive\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Array|GeometryInstance} [options.geometryInstances] The geometry instances to render. This can either be a single instance or an array of length one.\n * @param {Appearance} [options.appearance] The appearance used to render the primitive. Defaults to PerInstanceColorAppearance when GeometryInstances have a color attribute.\n * @param {Boolean} [options.show=true] Determines if this primitive will be shown.\n * @param {Boolean} [options.vertexCacheOptimize=false] When <code>true</code>, geometry vertices are optimized for the pre and post-vertex-shader caches.\n * @param {Boolean} [options.interleave=false] When <code>true</code>, geometry vertex attributes are interleaved, which can slightly improve rendering performance but increases load time.\n * @param {Boolean} [options.compressVertices=true] When <code>true</code>, the geometry vertices are compressed, which will save memory.\n * @param {Boolean} [options.releaseGeometryInstances=true] When <code>true</code>, the primitive does not keep a reference to the input <code>geometryInstances</code> to save memory.\n * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each geometry instance will only be pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n * @param {Boolean} [options.asynchronous=true] Determines if the primitive will be created asynchronously or block until ready. If false initializeTerrainHeights() must be called first.\n * @param {ClassificationType} [options.classificationType=ClassificationType.BOTH] Determines whether terrain, 3D Tiles or both will be classified.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive\'s commands\' bounding spheres are shown.\n * @param {Boolean} [options.debugShowShadowVolume=false] For debugging only. Determines if the shadow volume for each geometry in the primitive is drawn. Must be <code>true</code> on\n *                  creation for the volumes to be created before the geometry is released or options.releaseGeometryInstance must be <code>false</code>.\n *\n * @see Primitive\n * @see GroundPrimitive\n * @see GeometryInstance\n * @see Appearance\n */\nfunction ClassificationPrimitive(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var geometryInstances = options.geometryInstances;\n\n  /**\n   * The geometry instance rendered with this primitive.  This may\n   * be <code>undefined</code> if <code>options.releaseGeometryInstances</code>\n   * is <code>true</code> when the primitive is constructed.\n   * <p>\n   * Changing this property after the primitive is rendered has no effect.\n   * </p>\n   * <p>\n   * Because of the rendering technique used, all geometry instances must be the same color.\n   * If there is an instance with a differing color, a <code>DeveloperError</code> will be thrown\n   * on the first attempt to render.\n   * </p>\n   *\n   * @readonly\n   * @type {Array|GeometryInstance}\n   *\n   * @default undefined\n   */\n  this.geometryInstances = geometryInstances;\n  /**\n   * Determines if the primitive will be shown.  This affects all geometry\n   * instances in the primitive.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.show, true);\n  /**\n   * Determines whether terrain, 3D Tiles or both will be classified.\n   *\n   * @type {ClassificationType}\n   *\n   * @default ClassificationType.BOTH\n   */\n  this.classificationType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.classificationType,\n    _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].BOTH */ .Z.BOTH\n  );\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the shadow volume for each geometry in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowShadowVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.debugShowShadowVolume,\n    false\n  );\n  this._debugShowShadowVolume = false;\n\n  // These are used by GroundPrimitive to augment the shader and uniform map.\n  this._extruded = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options._extruded, false);\n  this._uniformMap = options._uniformMap;\n\n  this._sp = undefined;\n  this._spStencil = undefined;\n  this._spPick = undefined;\n  this._spColor = undefined;\n\n  this._spPick2D = undefined; // only derived if necessary\n  this._spColor2D = undefined; // only derived if necessary\n\n  this._rsStencilDepthPass = undefined;\n  this._rsStencilDepthPass3DTiles = undefined;\n  this._rsColorPass = undefined;\n  this._rsPickPass = undefined;\n\n  this._commandsIgnoreShow = [];\n\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].defer */ .Z.defer();\n\n  this._primitive = undefined;\n  this._pickPrimitive = options._pickPrimitive;\n\n  // Set in update\n  this._hasSphericalExtentsAttribute = false;\n  this._hasPlanarExtentsAttributes = false;\n  this._hasPerColorAttribute = false;\n\n  this.appearance = options.appearance;\n\n  this._createBoundingVolumeFunction = options._createBoundingVolumeFunction;\n  this._updateAndQueueCommandsFunction =\n    options._updateAndQueueCommandsFunction;\n\n  this._usePickOffsets = false;\n\n  this._primitiveOptions = {\n    geometryInstances: undefined,\n    appearance: undefined,\n    vertexCacheOptimize: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.vertexCacheOptimize, false),\n    interleave: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.interleave, false),\n    releaseGeometryInstances: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n      options.releaseGeometryInstances,\n      true\n    ),\n    allowPicking: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.allowPicking, true),\n    asynchronous: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.asynchronous, true),\n    compressVertices: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.compressVertices, true),\n    _createBoundingVolumeFunction: undefined,\n    _createRenderStatesFunction: undefined,\n    _createShaderProgramFunction: undefined,\n    _createCommandsFunction: undefined,\n    _updateAndQueueCommandsFunction: undefined,\n    _createPickOffsets: true,\n  };\n}\n\nObject.defineProperties(ClassificationPrimitive.prototype, {\n  /**\n   * When <code>true</code>, geometry vertices are optimized for the pre and post-vertex-shader caches.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  vertexCacheOptimize: {\n    get: function () {\n      return this._primitiveOptions.vertexCacheOptimize;\n    },\n  },\n\n  /**\n   * Determines if geometry vertex attributes are interleaved, which can slightly improve rendering performance.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  interleave: {\n    get: function () {\n      return this._primitiveOptions.interleave;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the primitive does not keep a reference to the input <code>geometryInstances</code> to save memory.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  releaseGeometryInstances: {\n    get: function () {\n      return this._primitiveOptions.releaseGeometryInstances;\n    },\n  },\n\n  /**\n   * When <code>true</code>, each geometry instance will only be pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  allowPicking: {\n    get: function () {\n      return this._primitiveOptions.allowPicking;\n    },\n  },\n\n  /**\n   * Determines if the geometry instances will be created and batched on a web worker.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  asynchronous: {\n    get: function () {\n      return this._primitiveOptions.asynchronous;\n    },\n  },\n\n  /**\n   * When <code>true</code>, geometry vertices are compressed, which will save memory.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  compressVertices: {\n    get: function () {\n      return this._primitiveOptions.compressVertices;\n    },\n  },\n\n  /**\n   * Determines if the primitive is complete and ready to render.  If this property is\n   * true, the primitive will be rendered the next time that {@link ClassificationPrimitive#update}\n   * is called.\n   *\n   * @memberof ClassificationPrimitive.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves when the primitive is ready to render.\n   * @memberof ClassificationPrimitive.prototype\n   * @type {Promise.<ClassificationPrimitive>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Returns true if the ClassificationPrimitive needs a separate shader and commands for 2D.\n   * This is because texture coordinates on ClassificationPrimitives are computed differently,\n   * and are used for culling when multiple GeometryInstances are batched in one ClassificationPrimitive.\n   * @memberof ClassificationPrimitive.prototype\n   * @type {Boolean}\n   * @readonly\n   * @private\n   */\n  _needs2DShader: {\n    get: function () {\n      return (\n        this._hasPlanarExtentsAttributes || this._hasSphericalExtentsAttribute\n      );\n    },\n  },\n});\n\n/**\n * Determines if ClassificationPrimitive rendering is supported.\n *\n * @param {Scene} scene The scene.\n * @returns {Boolean} <code>true</code> if ClassificationPrimitives are supported; otherwise, returns <code>false</code>\n */\nClassificationPrimitive.isSupported = function (scene) {\n  return scene.context.stencilBuffer;\n};\n\nfunction getStencilDepthRenderState(enableStencil, mask3DTiles) {\n  var stencilFunction = mask3DTiles\n    ? _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].EQUAL */ .Z.EQUAL\n    : _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].ALWAYS */ .Z.ALWAYS;\n  return {\n    colorMask: {\n      red: false,\n      green: false,\n      blue: false,\n      alpha: false,\n    },\n    stencilTest: {\n      enabled: enableStencil,\n      frontFunction: stencilFunction,\n      frontOperation: {\n        fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].DECREMENT_WRAP */ .Z.DECREMENT_WRAP,\n        zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].KEEP */ .Z.KEEP,\n      },\n      backFunction: stencilFunction,\n      backOperation: {\n        fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].INCREMENT_WRAP */ .Z.INCREMENT_WRAP,\n        zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].KEEP */ .Z.KEEP,\n      },\n      reference: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n      mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK,\n    },\n    stencilMask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n    depthTest: {\n      enabled: true,\n      func: _DepthFunction_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].LESS_OR_EQUAL */ .Z.LESS_OR_EQUAL,\n    },\n    depthMask: false,\n  };\n}\n\nfunction getColorRenderState(enableStencil) {\n  return {\n    stencilTest: {\n      enabled: enableStencil,\n      frontFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].NOT_EQUAL */ .Z.NOT_EQUAL,\n      frontOperation: {\n        fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n        zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n        zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n      },\n      backFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].NOT_EQUAL */ .Z.NOT_EQUAL,\n      backOperation: {\n        fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n        zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n        zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n      },\n      reference: 0,\n      mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n    },\n    stencilMask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n    depthTest: {\n      enabled: false,\n    },\n    depthMask: false,\n    blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].PRE_MULTIPLIED_ALPHA_BLEND */ .Z.PRE_MULTIPLIED_ALPHA_BLEND,\n  };\n}\n\nvar pickRenderState = {\n  stencilTest: {\n    enabled: true,\n    frontFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].NOT_EQUAL */ .Z.NOT_EQUAL,\n    frontOperation: {\n      fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n      zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n      zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n    },\n    backFunction: _StencilFunction_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].NOT_EQUAL */ .Z.NOT_EQUAL,\n    backOperation: {\n      fail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n      zFail: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n      zPass: _StencilOperation_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].ZERO */ .Z.ZERO,\n    },\n    reference: 0,\n    mask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n  },\n  stencilMask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n  depthTest: {\n    enabled: false,\n  },\n  depthMask: false,\n};\n\nfunction createRenderStates(\n  classificationPrimitive,\n  context,\n  appearance,\n  twoPasses\n) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(classificationPrimitive._rsStencilDepthPass)) {\n    return;\n  }\n  var stencilEnabled = !classificationPrimitive.debugShowShadowVolume;\n\n  classificationPrimitive._rsStencilDepthPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n    getStencilDepthRenderState(stencilEnabled, false)\n  );\n  classificationPrimitive._rsStencilDepthPass3DTiles = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n    getStencilDepthRenderState(stencilEnabled, true)\n  );\n  classificationPrimitive._rsColorPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n    getColorRenderState(stencilEnabled, false)\n  );\n  classificationPrimitive._rsPickPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(pickRenderState);\n}\n\nfunction modifyForEncodedNormals(primitive, vertexShaderSource) {\n  if (!primitive.compressVertices) {\n    return vertexShaderSource;\n  }\n\n  if (\n    vertexShaderSource.search(/attribute\\s+vec3\\s+extrudeDirection;/g) !== -1\n  ) {\n    var attributeName = "compressedAttributes";\n\n    //only shadow volumes use extrudeDirection, and shadow volumes use vertexFormat: POSITION_ONLY so we don\'t need to check other attributes\n    var attributeDecl = "attribute vec2 " + attributeName + ";";\n\n    var globalDecl = "vec3 extrudeDirection;\\n";\n    var decode =\n      "    extrudeDirection = czm_octDecode(" + attributeName + ", 65535.0);\\n";\n\n    var modifiedVS = vertexShaderSource;\n    modifiedVS = modifiedVS.replace(\n      /attribute\\s+vec3\\s+extrudeDirection;/g,\n      ""\n    );\n    modifiedVS = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].replaceMain */ .Z.replaceMain(\n      modifiedVS,\n      "czm_non_compressed_main"\n    );\n    var compressedMain =\n      "void main() \\n" +\n      "{ \\n" +\n      decode +\n      "    czm_non_compressed_main(); \\n" +\n      "}";\n\n    return [attributeDecl, globalDecl, modifiedVS, compressedMain].join("\\n");\n  }\n}\n\nfunction createShaderProgram(classificationPrimitive, frameState) {\n  var context = frameState.context;\n  var primitive = classificationPrimitive._primitive;\n  var vs = _Shaders_ShadowVolumeAppearanceVS_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z;\n  vs = classificationPrimitive._primitive._batchTable.getVertexShaderCallback()(\n    vs\n  );\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._appendDistanceDisplayConditionToShader */ .Z._appendDistanceDisplayConditionToShader(primitive, vs);\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._modifyShaderPosition */ .Z._modifyShaderPosition(\n    classificationPrimitive,\n    vs,\n    frameState.scene3DOnly\n  );\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._updateColorAttribute */ .Z._updateColorAttribute(primitive, vs);\n\n  var planarExtents = classificationPrimitive._hasPlanarExtentsAttributes;\n  var cullFragmentsUsingExtents =\n    planarExtents || classificationPrimitive._hasSphericalExtentsAttribute;\n\n  if (classificationPrimitive._extruded) {\n    vs = modifyForEncodedNormals(primitive, vs);\n  }\n\n  var extrudedDefine = classificationPrimitive._extruded\n    ? "EXTRUDED_GEOMETRY"\n    : "";\n\n  var vsSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    defines: [extrudedDefine],\n    sources: [vs],\n  });\n  var fsSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    sources: [_Shaders_ShadowVolumeFS_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z],\n  });\n  var attributeLocations =\n    classificationPrimitive._primitive._attributeLocations;\n\n  var shadowVolumeAppearance = new _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z(\n    cullFragmentsUsingExtents,\n    planarExtents,\n    classificationPrimitive.appearance\n  );\n\n  classificationPrimitive._spStencil = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].replaceCache */ .Z.replaceCache({\n    context: context,\n    shaderProgram: classificationPrimitive._spStencil,\n    vertexShaderSource: vsSource,\n    fragmentShaderSource: fsSource,\n    attributeLocations: attributeLocations,\n  });\n\n  if (classificationPrimitive._primitive.allowPicking) {\n    var vsPick = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].createPickVertexShaderSource */ .Z.createPickVertexShaderSource(vs);\n    vsPick = _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._appendShowToShader */ .Z._appendShowToShader(primitive, vsPick);\n    vsPick = _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._updatePickColorAttribute */ .Z._updatePickColorAttribute(vsPick);\n\n    var pickFS3D = shadowVolumeAppearance.createPickFragmentShader(false);\n    var pickVS3D = shadowVolumeAppearance.createPickVertexShader(\n      [extrudedDefine],\n      vsPick,\n      false,\n      frameState.mapProjection\n    );\n\n    classificationPrimitive._spPick = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].replaceCache */ .Z.replaceCache({\n      context: context,\n      shaderProgram: classificationPrimitive._spPick,\n      vertexShaderSource: pickVS3D,\n      fragmentShaderSource: pickFS3D,\n      attributeLocations: attributeLocations,\n    });\n\n    // Derive a 2D pick shader if the primitive uses texture coordinate-based fragment culling,\n    // since texture coordinates are computed differently in 2D.\n    if (cullFragmentsUsingExtents) {\n      var pickProgram2D = context.shaderCache.getDerivedShaderProgram(\n        classificationPrimitive._spPick,\n        "2dPick"\n      );\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(pickProgram2D)) {\n        var pickFS2D = shadowVolumeAppearance.createPickFragmentShader(true);\n        var pickVS2D = shadowVolumeAppearance.createPickVertexShader(\n          [extrudedDefine],\n          vsPick,\n          true,\n          frameState.mapProjection\n        );\n\n        pickProgram2D = context.shaderCache.createDerivedShaderProgram(\n          classificationPrimitive._spPick,\n          "2dPick",\n          {\n            vertexShaderSource: pickVS2D,\n            fragmentShaderSource: pickFS2D,\n            attributeLocations: attributeLocations,\n          }\n        );\n      }\n      classificationPrimitive._spPick2D = pickProgram2D;\n    }\n  } else {\n    classificationPrimitive._spPick = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].fromCache */ .Z.fromCache({\n      context: context,\n      vertexShaderSource: vsSource,\n      fragmentShaderSource: fsSource,\n      attributeLocations: attributeLocations,\n    });\n  }\n\n  vs = _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._appendShowToShader */ .Z._appendShowToShader(primitive, vs);\n  vsSource = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    defines: [extrudedDefine],\n    sources: [vs],\n  });\n\n  classificationPrimitive._sp = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].replaceCache */ .Z.replaceCache({\n    context: context,\n    shaderProgram: classificationPrimitive._sp,\n    vertexShaderSource: vsSource,\n    fragmentShaderSource: fsSource,\n    attributeLocations: attributeLocations,\n  });\n\n  // Create a fragment shader that computes only required material hookups using screen space techniques\n  var fsColorSource = shadowVolumeAppearance.createFragmentShader(false);\n  var vsColorSource = shadowVolumeAppearance.createVertexShader(\n    [extrudedDefine],\n    vs,\n    false,\n    frameState.mapProjection\n  );\n\n  classificationPrimitive._spColor = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].replaceCache */ .Z.replaceCache({\n    context: context,\n    shaderProgram: classificationPrimitive._spColor,\n    vertexShaderSource: vsColorSource,\n    fragmentShaderSource: fsColorSource,\n    attributeLocations: attributeLocations,\n  });\n\n  // Derive a 2D shader if the primitive uses texture coordinate-based fragment culling,\n  // since texture coordinates are computed differently in 2D.\n  // Any material that uses texture coordinates will also equip texture coordinate-based fragment culling.\n  if (cullFragmentsUsingExtents) {\n    var colorProgram2D = context.shaderCache.getDerivedShaderProgram(\n      classificationPrimitive._spColor,\n      "2dColor"\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(colorProgram2D)) {\n      var fsColorSource2D = shadowVolumeAppearance.createFragmentShader(true);\n      var vsColorSource2D = shadowVolumeAppearance.createVertexShader(\n        [extrudedDefine],\n        vs,\n        true,\n        frameState.mapProjection\n      );\n\n      colorProgram2D = context.shaderCache.createDerivedShaderProgram(\n        classificationPrimitive._spColor,\n        "2dColor",\n        {\n          vertexShaderSource: vsColorSource2D,\n          fragmentShaderSource: fsColorSource2D,\n          attributeLocations: attributeLocations,\n        }\n      );\n    }\n    classificationPrimitive._spColor2D = colorProgram2D;\n  }\n}\n\nfunction createColorCommands(classificationPrimitive, colorCommands) {\n  var primitive = classificationPrimitive._primitive;\n  var length = primitive._va.length * 2; // each geometry (pack of vertex attributes) needs 2 commands: front/back stencils and fill\n  colorCommands.length = length;\n\n  var i;\n  var command;\n  var derivedCommand;\n  var vaIndex = 0;\n  var uniformMap = primitive._batchTable.getUniformMapCallback()(\n    classificationPrimitive._uniformMap\n  );\n\n  var needs2DShader = classificationPrimitive._needs2DShader;\n\n  for (i = 0; i < length; i += 2) {\n    var vertexArray = primitive._va[vaIndex++];\n\n    // Stencil depth command\n    command = colorCommands[i];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(command)) {\n      command = colorCommands[i] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n        owner: classificationPrimitive,\n        primitiveType: primitive._primitiveType,\n      });\n    }\n\n    command.vertexArray = vertexArray;\n    command.renderState = classificationPrimitive._rsStencilDepthPass;\n    command.shaderProgram = classificationPrimitive._sp;\n    command.uniformMap = uniformMap;\n    command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION;\n\n    derivedCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.tileset\n    );\n    derivedCommand.renderState =\n      classificationPrimitive._rsStencilDepthPass3DTiles;\n    derivedCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION;\n    command.derivedCommands.tileset = derivedCommand;\n\n    // Color command\n    command = colorCommands[i + 1];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(command)) {\n      command = colorCommands[i + 1] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n        owner: classificationPrimitive,\n        primitiveType: primitive._primitiveType,\n      });\n    }\n\n    command.vertexArray = vertexArray;\n    command.renderState = classificationPrimitive._rsColorPass;\n    command.shaderProgram = classificationPrimitive._spColor;\n    command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION;\n\n    var appearance = classificationPrimitive.appearance;\n    var material = appearance.material;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(material)) {\n      uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(uniformMap, material._uniforms);\n    }\n\n    command.uniformMap = uniformMap;\n\n    derivedCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.tileset\n    );\n    derivedCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION;\n    command.derivedCommands.tileset = derivedCommand;\n\n    // Derive for 2D if texture coordinates are ever computed\n    if (needs2DShader) {\n      // First derive from the terrain command\n      var derived2DCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n        command,\n        command.derivedCommands.appearance2D\n      );\n      derived2DCommand.shaderProgram = classificationPrimitive._spColor2D;\n      command.derivedCommands.appearance2D = derived2DCommand;\n\n      // Then derive from the 3D Tiles command\n      derived2DCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n        derivedCommand,\n        derivedCommand.derivedCommands.appearance2D\n      );\n      derived2DCommand.shaderProgram = classificationPrimitive._spColor2D;\n      derivedCommand.derivedCommands.appearance2D = derived2DCommand;\n    }\n  }\n\n  var commandsIgnoreShow = classificationPrimitive._commandsIgnoreShow;\n  var spStencil = classificationPrimitive._spStencil;\n\n  var commandIndex = 0;\n  length = commandsIgnoreShow.length = length / 2;\n\n  for (var j = 0; j < length; ++j) {\n    var commandIgnoreShow = (commandsIgnoreShow[j] = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n      colorCommands[commandIndex],\n      commandsIgnoreShow[j]\n    ));\n    commandIgnoreShow.shaderProgram = spStencil;\n    commandIgnoreShow.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW */ .Z.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW;\n\n    commandIndex += 2;\n  }\n}\n\nfunction createPickCommands(classificationPrimitive, pickCommands) {\n  var usePickOffsets = classificationPrimitive._usePickOffsets;\n\n  var primitive = classificationPrimitive._primitive;\n  var length = primitive._va.length * 2; // each geometry (pack of vertex attributes) needs 2 commands: front/back stencils and fill\n\n  // Fallback for batching same-color geometry instances\n  var pickOffsets;\n  var pickIndex = 0;\n  var pickOffset;\n  if (usePickOffsets) {\n    pickOffsets = primitive._pickOffsets;\n    length = pickOffsets.length * 2;\n  }\n\n  pickCommands.length = length;\n\n  var j;\n  var command;\n  var derivedCommand;\n  var vaIndex = 0;\n  var uniformMap = primitive._batchTable.getUniformMapCallback()(\n    classificationPrimitive._uniformMap\n  );\n\n  var needs2DShader = classificationPrimitive._needs2DShader;\n\n  for (j = 0; j < length; j += 2) {\n    var vertexArray = primitive._va[vaIndex++];\n    if (usePickOffsets) {\n      pickOffset = pickOffsets[pickIndex++];\n      vertexArray = primitive._va[pickOffset.index];\n    }\n\n    // Stencil depth command\n    command = pickCommands[j];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(command)) {\n      command = pickCommands[j] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n        owner: classificationPrimitive,\n        primitiveType: primitive._primitiveType,\n        pickOnly: true,\n      });\n    }\n\n    command.vertexArray = vertexArray;\n    command.renderState = classificationPrimitive._rsStencilDepthPass;\n    command.shaderProgram = classificationPrimitive._sp;\n    command.uniformMap = uniformMap;\n    command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION;\n    if (usePickOffsets) {\n      command.offset = pickOffset.offset;\n      command.count = pickOffset.count;\n    }\n\n    // Derive for 3D Tiles classification\n    derivedCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.tileset\n    );\n    derivedCommand.renderState =\n      classificationPrimitive._rsStencilDepthPass3DTiles;\n    derivedCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION;\n    command.derivedCommands.tileset = derivedCommand;\n\n    // Pick color command\n    command = pickCommands[j + 1];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(command)) {\n      command = pickCommands[j + 1] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n        owner: classificationPrimitive,\n        primitiveType: primitive._primitiveType,\n        pickOnly: true,\n      });\n    }\n\n    command.vertexArray = vertexArray;\n    command.renderState = classificationPrimitive._rsPickPass;\n    command.shaderProgram = classificationPrimitive._spPick;\n    command.uniformMap = uniformMap;\n    command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION;\n    if (usePickOffsets) {\n      command.offset = pickOffset.offset;\n      command.count = pickOffset.count;\n    }\n\n    derivedCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n      command,\n      command.derivedCommands.tileset\n    );\n    derivedCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION;\n    command.derivedCommands.tileset = derivedCommand;\n\n    // Derive for 2D if texture coordinates are ever computed\n    if (needs2DShader) {\n      // First derive from the terrain command\n      var derived2DCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n        command,\n        command.derivedCommands.pick2D\n      );\n      derived2DCommand.shaderProgram = classificationPrimitive._spPick2D;\n      command.derivedCommands.pick2D = derived2DCommand;\n\n      // Then derive from the 3D Tiles command\n      derived2DCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].shallowClone */ .Z.shallowClone(\n        derivedCommand,\n        derivedCommand.derivedCommands.pick2D\n      );\n      derived2DCommand.shaderProgram = classificationPrimitive._spPick2D;\n      derivedCommand.derivedCommands.pick2D = derived2DCommand;\n    }\n  }\n}\n\nfunction createCommands(\n  classificationPrimitive,\n  appearance,\n  material,\n  translucent,\n  twoPasses,\n  colorCommands,\n  pickCommands\n) {\n  createColorCommands(classificationPrimitive, colorCommands);\n  createPickCommands(classificationPrimitive, pickCommands);\n}\n\nfunction boundingVolumeIndex(commandIndex, length) {\n  return Math.floor((commandIndex % length) / 2);\n}\n\nfunction updateAndQueueRenderCommand(\n  command,\n  frameState,\n  modelMatrix,\n  cull,\n  boundingVolume,\n  debugShowBoundingVolume\n) {\n  command.modelMatrix = modelMatrix;\n  command.boundingVolume = boundingVolume;\n  command.cull = cull;\n  command.debugShowBoundingVolume = debugShowBoundingVolume;\n\n  frameState.commandList.push(command);\n}\n\nfunction updateAndQueuePickCommand(\n  command,\n  frameState,\n  modelMatrix,\n  cull,\n  boundingVolume\n) {\n  command.modelMatrix = modelMatrix;\n  command.boundingVolume = boundingVolume;\n  command.cull = cull;\n\n  frameState.commandList.push(command);\n}\n\nfunction updateAndQueueCommands(\n  classificationPrimitive,\n  frameState,\n  colorCommands,\n  pickCommands,\n  modelMatrix,\n  cull,\n  debugShowBoundingVolume,\n  twoPasses\n) {\n  var primitive = classificationPrimitive._primitive;\n  _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"]._updateBoundingVolumes */ .Z._updateBoundingVolumes(primitive, frameState, modelMatrix);\n\n  var boundingVolumes;\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    boundingVolumes = primitive._boundingSphereWC;\n  } else if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    boundingVolumes = primitive._boundingSphereCV;\n  } else if (\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(primitive._boundingSphere2D)\n  ) {\n    boundingVolumes = primitive._boundingSphere2D;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(primitive._boundingSphereMorph)) {\n    boundingVolumes = primitive._boundingSphereMorph;\n  }\n\n  var classificationType = classificationPrimitive.classificationType;\n  var queueTerrainCommands =\n    classificationType !== _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE;\n  var queue3DTilesCommands = classificationType !== _ClassificationType_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].TERRAIN */ .Z.TERRAIN;\n\n  var passes = frameState.passes;\n\n  var i;\n  var boundingVolume;\n  var command;\n\n  if (passes.render) {\n    var colorLength = colorCommands.length;\n    for (i = 0; i < colorLength; ++i) {\n      boundingVolume = boundingVolumes[boundingVolumeIndex(i, colorLength)];\n      if (queueTerrainCommands) {\n        command = colorCommands[i];\n        updateAndQueueRenderCommand(\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n      if (queue3DTilesCommands) {\n        command = colorCommands[i].derivedCommands.tileset;\n        updateAndQueueRenderCommand(\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n    }\n\n    if (frameState.invertClassification) {\n      var ignoreShowCommands = classificationPrimitive._commandsIgnoreShow;\n      var ignoreShowCommandsLength = ignoreShowCommands.length;\n      for (i = 0; i < ignoreShowCommandsLength; ++i) {\n        boundingVolume = boundingVolumes[i];\n        command = ignoreShowCommands[i];\n        updateAndQueueRenderCommand(\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume,\n          debugShowBoundingVolume\n        );\n      }\n    }\n  }\n\n  if (passes.pick) {\n    var pickLength = pickCommands.length;\n    var pickOffsets = primitive._pickOffsets;\n    for (i = 0; i < pickLength; ++i) {\n      var pickOffset = pickOffsets[boundingVolumeIndex(i, pickLength)];\n      boundingVolume = boundingVolumes[pickOffset.index];\n      if (queueTerrainCommands) {\n        command = pickCommands[i];\n        updateAndQueuePickCommand(\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume\n        );\n      }\n      if (queue3DTilesCommands) {\n        command = pickCommands[i].derivedCommands.tileset;\n        updateAndQueuePickCommand(\n          command,\n          frameState,\n          modelMatrix,\n          cull,\n          boundingVolume\n        );\n      }\n    }\n  }\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} All instance geometries must have the same primitiveType.\n * @exception {DeveloperError} Appearance and material have a uniform with the same name.\n * @exception {DeveloperError} Not all of the geometry instances have the same color attribute.\n */\nClassificationPrimitive.prototype.update = function (frameState) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._primitive) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this.geometryInstances)) {\n    return;\n  }\n\n  var appearance = this.appearance;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(appearance) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(appearance.material)) {\n    appearance.material.update(frameState.context);\n  }\n\n  var that = this;\n  var primitiveOptions = this._primitiveOptions;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._primitive)) {\n    var instances = Array.isArray(this.geometryInstances)\n      ? this.geometryInstances\n      : [this.geometryInstances];\n    var length = instances.length;\n\n    var i;\n    var instance;\n    var attributes;\n\n    var hasPerColorAttribute = false;\n    var allColorsSame = true;\n    var firstColor;\n    var hasSphericalExtentsAttribute = false;\n    var hasPlanarExtentsAttributes = false;\n\n    if (length > 0) {\n      attributes = instances[0].attributes;\n      // Not expecting these to be set by users, should only be set via GroundPrimitive.\n      // So don\'t check for mismatch.\n      hasSphericalExtentsAttribute = _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].hasAttributesForSphericalExtents */ .Z.hasAttributesForSphericalExtents(\n        attributes\n      );\n      hasPlanarExtentsAttributes = _ShadowVolumeAppearance_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].hasAttributesForTextureCoordinatePlanes */ .Z.hasAttributesForTextureCoordinatePlanes(\n        attributes\n      );\n      firstColor = attributes.color;\n    }\n\n    for (i = 0; i < length; i++) {\n      instance = instances[i];\n      var color = instance.attributes.color;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(color)) {\n        hasPerColorAttribute = true;\n      }\n      //>>includeStart(\'debug\', pragmas.debug);\n      else if (hasPerColorAttribute) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n          "All GeometryInstances must have color attributes to use per-instance color."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      allColorsSame =\n        allColorsSame &&\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(color) &&\n        _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(firstColor, color);\n    }\n\n    // If no attributes exist for computing spherical extents or fragment culling,\n    // throw if the colors aren\'t all the same.\n    if (\n      !allColorsSame &&\n      !hasSphericalExtentsAttribute &&\n      !hasPlanarExtentsAttributes\n    ) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "All GeometryInstances must have the same color attribute except via GroundPrimitives"\n      );\n    }\n\n    // default to a color appearance\n    if (hasPerColorAttribute && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(appearance)) {\n      appearance = new _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n        flat: true,\n      });\n      this.appearance = appearance;\n    }\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (\n      !hasPerColorAttribute &&\n      appearance instanceof _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z\n    ) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "PerInstanceColorAppearance requires color GeometryInstanceAttributes on all GeometryInstances"\n      );\n    }\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(appearance.material) &&\n      !hasSphericalExtentsAttribute &&\n      !hasPlanarExtentsAttributes\n    ) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "Materials on ClassificationPrimitives are not supported except via GroundPrimitives"\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    this._usePickOffsets =\n      !hasSphericalExtentsAttribute && !hasPlanarExtentsAttributes;\n    this._hasSphericalExtentsAttribute = hasSphericalExtentsAttribute;\n    this._hasPlanarExtentsAttributes = hasPlanarExtentsAttributes;\n    this._hasPerColorAttribute = hasPerColorAttribute;\n\n    var geometryInstances = new Array(length);\n    for (i = 0; i < length; ++i) {\n      instance = instances[i];\n      geometryInstances[i] = new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n        geometry: instance.geometry,\n        attributes: instance.attributes,\n        modelMatrix: instance.modelMatrix,\n        id: instance.id,\n        pickPrimitive: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._pickPrimitive, that),\n      });\n    }\n\n    primitiveOptions.appearance = appearance;\n    primitiveOptions.geometryInstances = geometryInstances;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._createBoundingVolumeFunction)) {\n      primitiveOptions._createBoundingVolumeFunction = function (\n        frameState,\n        geometry\n      ) {\n        that._createBoundingVolumeFunction(frameState, geometry);\n      };\n    }\n\n    primitiveOptions._createRenderStatesFunction = function (\n      primitive,\n      context,\n      appearance,\n      twoPasses\n    ) {\n      createRenderStates(that, context);\n    };\n    primitiveOptions._createShaderProgramFunction = function (\n      primitive,\n      frameState,\n      appearance\n    ) {\n      createShaderProgram(that, frameState);\n    };\n    primitiveOptions._createCommandsFunction = function (\n      primitive,\n      appearance,\n      material,\n      translucent,\n      twoPasses,\n      colorCommands,\n      pickCommands\n    ) {\n      createCommands(\n        that,\n        undefined,\n        undefined,\n        true,\n        false,\n        colorCommands,\n        pickCommands\n      );\n    };\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._updateAndQueueCommandsFunction)) {\n      primitiveOptions._updateAndQueueCommandsFunction = function (\n        primitive,\n        frameState,\n        colorCommands,\n        pickCommands,\n        modelMatrix,\n        cull,\n        debugShowBoundingVolume,\n        twoPasses\n      ) {\n        that._updateAndQueueCommandsFunction(\n          primitive,\n          frameState,\n          colorCommands,\n          pickCommands,\n          modelMatrix,\n          cull,\n          debugShowBoundingVolume,\n          twoPasses\n        );\n      };\n    } else {\n      primitiveOptions._updateAndQueueCommandsFunction = function (\n        primitive,\n        frameState,\n        colorCommands,\n        pickCommands,\n        modelMatrix,\n        cull,\n        debugShowBoundingVolume,\n        twoPasses\n      ) {\n        updateAndQueueCommands(\n          that,\n          frameState,\n          colorCommands,\n          pickCommands,\n          modelMatrix,\n          cull,\n          debugShowBoundingVolume,\n          twoPasses\n        );\n      };\n    }\n\n    this._primitive = new _Primitive_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z(primitiveOptions);\n    this._primitive.readyPromise.then(function (primitive) {\n      that._ready = true;\n\n      if (that.releaseGeometryInstances) {\n        that.geometryInstances = undefined;\n      }\n\n      var error = primitive._error;\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(error)) {\n        that._readyPromise.resolve(that);\n      } else {\n        that._readyPromise.reject(error);\n      }\n    });\n  }\n\n  if (\n    this.debugShowShadowVolume &&\n    !this._debugShowShadowVolume &&\n    this._ready\n  ) {\n    this._debugShowShadowVolume = true;\n    this._rsStencilDepthPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n      getStencilDepthRenderState(false, false)\n    );\n    this._rsStencilDepthPass3DTiles = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n      getStencilDepthRenderState(false, true)\n    );\n    this._rsColorPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(getColorRenderState(false));\n  } else if (!this.debugShowShadowVolume && this._debugShowShadowVolume) {\n    this._debugShowShadowVolume = false;\n    this._rsStencilDepthPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n      getStencilDepthRenderState(true, false)\n    );\n    this._rsStencilDepthPass3DTiles = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(\n      getStencilDepthRenderState(true, true)\n    );\n    this._rsColorPass = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].fromCache */ .Z.fromCache(getColorRenderState(true));\n  }\n  // Update primitive appearance\n  if (this._primitive.appearance !== appearance) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    // Check if the appearance is supported by the geometry attributes\n    if (\n      !this._hasSphericalExtentsAttribute &&\n      !this._hasPlanarExtentsAttributes &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(appearance.material)\n    ) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "Materials on ClassificationPrimitives are not supported except via GroundPrimitive"\n      );\n    }\n    if (\n      !this._hasPerColorAttribute &&\n      appearance instanceof _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z\n    ) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n        "PerInstanceColorAppearance requires color GeometryInstanceAttribute"\n      );\n    }\n    //>>includeEnd(\'debug\');\n    this._primitive.appearance = appearance;\n  }\n\n  this._primitive.show = this.show;\n  this._primitive.debugShowBoundingVolume = this.debugShowBoundingVolume;\n  this._primitive.update(frameState);\n};\n\n/**\n * Returns the modifiable per-instance attributes for a {@link GeometryInstance}.\n *\n * @param {*} id The id of the {@link GeometryInstance}.\n * @returns {Object} The typed array in the attribute\'s format or undefined if the is no instance with id.\n *\n * @exception {DeveloperError} must call update before calling getGeometryInstanceAttributes.\n *\n * @example\n * var attributes = primitive.getGeometryInstanceAttributes(\'an id\');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA);\n * attributes.show = Cesium.ShowGeometryInstanceAttribute.toValue(true);\n */\nClassificationPrimitive.prototype.getGeometryInstanceAttributes = function (\n  id\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z)(this._primitive)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "must call update before calling getGeometryInstanceAttributes"\n    );\n  }\n  //>>includeEnd(\'debug\');\n  return this._primitive.getGeometryInstanceAttributes(id);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <p>\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n * </p>\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ClassificationPrimitive#destroy\n */\nClassificationPrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n * </p>\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * e = e && e.destroy();\n *\n * @see ClassificationPrimitive#isDestroyed\n */\nClassificationPrimitive.prototype.destroy = function () {\n  this._primitive = this._primitive && this._primitive.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._spPick = this._spPick && this._spPick.destroy();\n  this._spColor = this._spColor && this._spColor.destroy();\n\n  // Derived programs, destroyed above if they existed.\n  this._spPick2D = undefined;\n  this._spColor2D = undefined;\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ClassificationPrimitive);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14662\n')},73001:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Whether a classification affects terrain, 3D Tiles or both.\n *\n * @enum {Number}\n */\nvar ClassificationType = {\n  /**\n   * Only terrain will be classified.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TERRAIN: 0,\n  /**\n   * Only 3D Tiles will be classified.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CESIUM_3D_TILE: 1,\n  /**\n   * Both terrain and 3D Tiles will be classified.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BOTH: 2,\n};\n\n/**\n * @private\n */\nClassificationType.NUMBER_OF_CLASSIFICATION_TYPES = 3;\n\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(ClassificationType));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMwMDEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5REFBZSxpQ0FBaUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9DbGFzc2lmaWNhdGlvblR5cGUuanM/NzM4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdoZXRoZXIgYSBjbGFzc2lmaWNhdGlvbiBhZmZlY3RzIHRlcnJhaW4sIDNEIFRpbGVzIG9yIGJvdGguXG4gKlxuICogQGVudW0ge051bWJlcn1cbiAqL1xudmFyIENsYXNzaWZpY2F0aW9uVHlwZSA9IHtcbiAgLyoqXG4gICAqIE9ubHkgdGVycmFpbiB3aWxsIGJlIGNsYXNzaWZpZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgVEVSUkFJTjogMCxcbiAgLyoqXG4gICAqIE9ubHkgM0QgVGlsZXMgd2lsbCBiZSBjbGFzc2lmaWVkLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIENFU0lVTV8zRF9USUxFOiAxLFxuICAvKipcbiAgICogQm90aCB0ZXJyYWluIGFuZCAzRCBUaWxlcyB3aWxsIGJlIGNsYXNzaWZpZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKi9cbiAgQk9USDogMixcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuQ2xhc3NpZmljYXRpb25UeXBlLk5VTUJFUl9PRl9DTEFTU0lGSUNBVElPTl9UWVBFUyA9IDM7XG5cbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoQ2xhc3NpZmljYXRpb25UeXBlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73001\n')},44683:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n\n\n\n\n/**\n * A Plane in Hessian Normal form to be used with {@link ClippingPlaneCollection}.\n * Compatible with mathematics functions in {@link Plane}\n *\n * @alias ClippingPlane\n * @constructor\n *\n * @param {Cartesian3} normal The plane\'s normal (normalized).\n * @param {Number} distance The shortest distance from the origin to the plane.  The sign of\n * <code>distance</code> determines which side of the plane the origin\n * is on.  If <code>distance</code> is positive, the origin is in the half-space\n * in the direction of the normal; if negative, the origin is in the half-space\n * opposite to the normal; if zero, the plane passes through the origin.\n */\nfunction ClippingPlane(normal, distance) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("normal", normal);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("distance", distance);\n  //>>includeEnd(\'debug\');\n\n  this._distance = distance;\n  this._normal = new UpdateChangedCartesian3(normal, this);\n  this.onChangeCallback = undefined;\n  this.index = -1; // to be set by ClippingPlaneCollection\n}\n\nObject.defineProperties(ClippingPlane.prototype, {\n  /**\n   * The shortest distance from the origin to the plane.  The sign of\n   * <code>distance</code> determines which side of the plane the origin\n   * is on.  If <code>distance</code> is positive, the origin is in the half-space\n   * in the direction of the normal; if negative, the origin is in the half-space\n   * opposite to the normal; if zero, the plane passes through the origin.\n   *\n   * @type {Number}\n   * @memberof ClippingPlane.prototype\n   */\n  distance: {\n    get: function () {\n      return this._distance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.onChangeCallback) && value !== this._distance) {\n        this.onChangeCallback(this.index);\n      }\n      this._distance = value;\n    },\n  },\n  /**\n   * The plane\'s normal.\n   *\n   * @type {Cartesian3}\n   * @memberof ClippingPlane.prototype\n   */\n  normal: {\n    get: function () {\n      return this._normal;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n      //>>includeEnd(\'debug\');\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this.onChangeCallback) &&\n        !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(this._normal._cartesian3, value)\n      ) {\n        this.onChangeCallback(this.index);\n      }\n      // Set without firing callback again\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(value, this._normal._cartesian3);\n    },\n  },\n});\n\n/**\n * Create a ClippingPlane from a Plane object.\n *\n * @param {Plane} plane The plane containing parameters to copy\n * @param {ClippingPlane} [result] The object on which to store the result\n * @returns {ClippingPlane} The ClippingPlane generated from the plane\'s parameters.\n */\nClippingPlane.fromPlane = function (plane, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.object */ .Z.typeOf.object("plane", plane);\n  //>>includeEnd(\'debug\');\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    result = new ClippingPlane(plane.normal, plane.distance);\n  } else {\n    result.normal = plane.normal;\n    result.distance = plane.distance;\n  }\n  return result;\n};\n\n/**\n * Clones the ClippingPlane without setting its ownership.\n * @param {ClippingPlane} clippingPlane The ClippingPlane to be cloned\n * @param {ClippingPlane} [result] The object on which to store the cloned parameters.\n * @returns {ClippingPlane} a clone of the input ClippingPlane\n */\nClippingPlane.clone = function (clippingPlane, result) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    return new ClippingPlane(clippingPlane.normal, clippingPlane.distance);\n  }\n  result.normal = clippingPlane.normal;\n  result.distance = clippingPlane.distance;\n  return result;\n};\n\n/**\n * Wrapper on Cartesian3 that allows detection of Plane changes from "members of members," for example:\n *\n * var clippingPlane = new ClippingPlane(...);\n * clippingPlane.normal.z = -1.0;\n *\n * @private\n */\nfunction UpdateChangedCartesian3(normal, clippingPlane) {\n  this._clippingPlane = clippingPlane;\n  this._cartesian3 = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(normal);\n}\n\nObject.defineProperties(UpdateChangedCartesian3.prototype, {\n  x: {\n    get: function () {\n      return this._cartesian3.x;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._clippingPlane.onChangeCallback) &&\n        value !== this._cartesian3.x\n      ) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n      this._cartesian3.x = value;\n    },\n  },\n  y: {\n    get: function () {\n      return this._cartesian3.y;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._clippingPlane.onChangeCallback) &&\n        value !== this._cartesian3.y\n      ) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n      this._cartesian3.y = value;\n    },\n  },\n  z: {\n    get: function () {\n      return this._cartesian3.z;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n      //>>includeEnd(\'debug\');\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._clippingPlane.onChangeCallback) &&\n        value !== this._cartesian3.z\n      ) {\n        this._clippingPlane.onChangeCallback(this._clippingPlane.index);\n      }\n      this._cartesian3.z = value;\n    },\n  },\n});\n/* harmony default export */ __webpack_exports__["Z"] = (ClippingPlane);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44683\n')},21809:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52323);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14459);\n/* harmony import */ var _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(84935);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(72248);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(38443);\n/* harmony import */ var _Core_Plane_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(7749);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(21572);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(8743);\n/* harmony import */ var _ClippingPlane_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(44683);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Specifies a set of clipping planes. Clipping planes selectively disable rendering in a region on the\n * outside of the specified list of {@link ClippingPlane} objects for a single gltf model, 3D Tileset, or the globe.\n * <p>\n * In general the clipping planes\' coordinates are relative to the object they\'re attached to, so a plane with distance set to 0 will clip\n * through the center of the object.\n * </p>\n * <p>\n * For 3D Tiles, the root tile\'s transform is used to position the clipping planes. If a transform is not defined, the root tile\'s {@link Cesium3DTile#boundingSphere} is used instead.\n * </p>\n *\n * @alias ClippingPlaneCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {ClippingPlane[]} [options.planes=[]] An array of {@link ClippingPlane} objects used to selectively disable rendering on the outside of each plane.\n * @param {Boolean} [options.enabled=true] Determines whether the clipping planes are active.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix specifying an additional transform relative to the clipping planes original coordinate system.\n * @param {Boolean} [options.unionClippingRegions=false] If true, a region will be clipped if it is on the outside of any plane in the collection. Otherwise, a region will only be clipped if it is on the outside of every plane.\n * @param {Color} [options.edgeColor=Color.WHITE] The color applied to highlight the edge along which an object is clipped.\n * @param {Number} [options.edgeWidth=0.0] The width, in pixels, of the highlight applied to the edge along which an object is clipped.\n *\n * @demo {@link https://sandcastle.cesium.com/?src=3D%20Tiles%20Clipping%20Planes.html|Clipping 3D Tiles and glTF models.}\n * @demo {@link https://sandcastle.cesium.com/?src=Terrain%20Clipping%20Planes.html|Clipping the Globe.}\n *\n * @example\n * // This clipping plane\'s distance is positive, which means its normal\n * // is facing the origin. This will clip everything that is behind\n * // the plane, which is anything with y coordinate < -5.\n * var clippingPlanes = new Cesium.ClippingPlaneCollection({\n *     planes : [\n *         new Cesium.ClippingPlane(new Cesium.Cartesian3(0.0, 1.0, 0.0), 5.0)\n *     ],\n * });\n * // Create an entity and attach the ClippingPlaneCollection to the model.\n * var entity = viewer.entities.add({\n *     position : Cesium.Cartesian3.fromDegrees(-123.0744619, 44.0503706, 10000),\n *     model : {\n *         uri : \'model.gltf\',\n *         minimumPixelSize : 128,\n *         maximumScale : 20000,\n *         clippingPlanes : clippingPlanes\n *     }\n * });\n * viewer.zoomTo(entity);\n */\nfunction ClippingPlaneCollection(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._planes = [];\n\n  // Do partial texture updates if just one plane is dirty.\n  // If many planes are dirty, refresh the entire texture.\n  this._dirtyIndex = -1;\n  this._multipleDirtyPlanes = false;\n\n  this._enabled = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options.enabled, true);\n\n  /**\n   * The 4x4 transformation matrix specifying an additional transform relative to the clipping planes\n   * original coordinate system.\n   *\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   */\n  this.modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options.modelMatrix, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].IDENTITY */ .Z.IDENTITY)\n  );\n\n  /**\n   * The color applied to highlight the edge along which an object is clipped.\n   *\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.edgeColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clone */ .Z.clone((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options.edgeColor, _Core_Color_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].WHITE */ .Z.WHITE));\n\n  /**\n   * The width, in pixels, of the highlight applied to the edge along which an object is clipped.\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  this.edgeWidth = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options.edgeWidth, 0.0);\n\n  /**\n   * An event triggered when a new clipping plane is added to the collection.  Event handlers\n   * are passed the new plane and the index at which it was added.\n   * @type {Event}\n   * @default Event()\n   */\n  this.planeAdded = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z();\n\n  /**\n   * An event triggered when a new clipping plane is removed from the collection.  Event handlers\n   * are passed the new plane and the index from which it was removed.\n   * @type {Event}\n   * @default Event()\n   */\n  this.planeRemoved = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z();\n\n  // If this ClippingPlaneCollection has an owner, only its owner should update or destroy it.\n  // This is because in a Cesium3DTileset multiple models may reference the tileset\'s ClippingPlaneCollection.\n  this._owner = undefined;\n\n  var unionClippingRegions = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options.unionClippingRegions, false);\n  this._unionClippingRegions = unionClippingRegions;\n  this._testIntersection = unionClippingRegions\n    ? unionIntersectFunction\n    : defaultIntersectFunction;\n\n  this._uint8View = undefined;\n  this._float32View = undefined;\n\n  this._clippingPlanesTexture = undefined;\n\n  // Add each ClippingPlane object.\n  var planes = options.planes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(planes)) {\n    var planesLength = planes.length;\n    for (var i = 0; i < planesLength; ++i) {\n      this.add(planes[i]);\n    }\n  }\n}\n\nfunction unionIntersectFunction(value) {\n  return value === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].OUTSIDE */ .Z.OUTSIDE;\n}\n\nfunction defaultIntersectFunction(value) {\n  return value === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INSIDE */ .Z.INSIDE;\n}\n\nObject.defineProperties(ClippingPlaneCollection.prototype, {\n  /**\n   * Returns the number of planes in this collection.  This is commonly used with\n   * {@link ClippingPlaneCollection#get} to iterate over all the planes\n   * in the collection.\n   *\n   * @memberof ClippingPlaneCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._planes.length;\n    },\n  },\n\n  /**\n   * If true, a region will be clipped if it is on the outside of any plane in the\n   * collection. Otherwise, a region will only be clipped if it is on the\n   * outside of every plane.\n   *\n   * @memberof ClippingPlaneCollection.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  unionClippingRegions: {\n    get: function () {\n      return this._unionClippingRegions;\n    },\n    set: function (value) {\n      if (this._unionClippingRegions === value) {\n        return;\n      }\n      this._unionClippingRegions = value;\n      this._testIntersection = value\n        ? unionIntersectFunction\n        : defaultIntersectFunction;\n    },\n  },\n\n  /**\n   * If true, clipping will be enabled.\n   *\n   * @memberof ClippingPlaneCollection.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      if (this._enabled === value) {\n        return;\n      }\n      this._enabled = value;\n    },\n  },\n\n  /**\n   * Returns a texture containing packed, untransformed clipping planes.\n   *\n   * @memberof ClippingPlaneCollection.prototype\n   * @type {Texture}\n   * @readonly\n   * @private\n   */\n  texture: {\n    get: function () {\n      return this._clippingPlanesTexture;\n    },\n  },\n\n  /**\n   * A reference to the ClippingPlaneCollection\'s owner, if any.\n   *\n   * @memberof ClippingPlaneCollection.prototype\n   * @readonly\n   * @private\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n  },\n\n  /**\n   * Returns a Number encapsulating the state for this ClippingPlaneCollection.\n   *\n   * Clipping mode is encoded in the sign of the number, which is just the plane count.\n   * Used for checking if shader regeneration is necessary.\n   *\n   * @memberof ClippingPlaneCollection.prototype\n   * @returns {Number} A Number that describes the ClippingPlaneCollection\'s state.\n   * @readonly\n   * @private\n   */\n  clippingPlanesState: {\n    get: function () {\n      return this._unionClippingRegions\n        ? this._planes.length\n        : -this._planes.length;\n    },\n  },\n});\n\nfunction setIndexDirty(collection, index) {\n  // If there\'s already a different _dirtyIndex set, more than one plane has changed since update.\n  // Entire texture must be reloaded\n  collection._multipleDirtyPlanes =\n    collection._multipleDirtyPlanes ||\n    (collection._dirtyIndex !== -1 && collection._dirtyIndex !== index);\n  collection._dirtyIndex = index;\n}\n\n/**\n * Adds the specified {@link ClippingPlane} to the collection to be used to selectively disable rendering\n * on the outside of each plane. Use {@link ClippingPlaneCollection#unionClippingRegions} to modify\n * how modify the clipping behavior of multiple planes.\n *\n * @param {ClippingPlane} plane The ClippingPlane to add to the collection.\n *\n * @see ClippingPlaneCollection#unionClippingRegions\n * @see ClippingPlaneCollection#remove\n * @see ClippingPlaneCollection#removeAll\n */\nClippingPlaneCollection.prototype.add = function (plane) {\n  var newPlaneIndex = this._planes.length;\n\n  var that = this;\n  plane.onChangeCallback = function (index) {\n    setIndexDirty(that, index);\n  };\n  plane.index = newPlaneIndex;\n\n  setIndexDirty(this, newPlaneIndex);\n  this._planes.push(plane);\n  this.planeAdded.raiseEvent(plane, newPlaneIndex);\n};\n\n/**\n * Returns the plane in the collection at the specified index.  Indices are zero-based\n * and increase as planes are added.  Removing a plane shifts all planes after\n * it to the left, changing their indices.  This function is commonly used with\n * {@link ClippingPlaneCollection#length} to iterate over all the planes\n * in the collection.\n *\n * @param {Number} index The zero-based index of the plane.\n * @returns {ClippingPlane} The ClippingPlane at the specified index.\n *\n * @see ClippingPlaneCollection#length\n */\nClippingPlaneCollection.prototype.get = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number */ .Z.typeOf.number("index", index);\n  //>>includeEnd(\'debug\');\n\n  return this._planes[index];\n};\n\nfunction indexOf(planes, plane) {\n  var length = planes.length;\n  for (var i = 0; i < length; ++i) {\n    if (_Core_Plane_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(planes[i], plane)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Checks whether this collection contains a ClippingPlane equal to the given ClippingPlane.\n *\n * @param {ClippingPlane} [clippingPlane] The ClippingPlane to check for.\n * @returns {Boolean} true if this collection contains the ClippingPlane, false otherwise.\n *\n * @see ClippingPlaneCollection#get\n */\nClippingPlaneCollection.prototype.contains = function (clippingPlane) {\n  return indexOf(this._planes, clippingPlane) !== -1;\n};\n\n/**\n * Removes the first occurrence of the given ClippingPlane from the collection.\n *\n * @param {ClippingPlane} clippingPlane\n * @returns {Boolean} <code>true</code> if the plane was removed; <code>false</code> if the plane was not found in the collection.\n *\n * @see ClippingPlaneCollection#add\n * @see ClippingPlaneCollection#contains\n * @see ClippingPlaneCollection#removeAll\n */\nClippingPlaneCollection.prototype.remove = function (clippingPlane) {\n  var planes = this._planes;\n  var index = indexOf(planes, clippingPlane);\n\n  if (index === -1) {\n    return false;\n  }\n\n  // Unlink this ClippingPlaneCollection from the ClippingPlane\n  if (clippingPlane instanceof _ClippingPlane_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z) {\n    clippingPlane.onChangeCallback = undefined;\n    clippingPlane.index = -1;\n  }\n\n  // Shift and update indices\n  var length = planes.length - 1;\n  for (var i = index; i < length; ++i) {\n    var planeToKeep = planes[i + 1];\n    planes[i] = planeToKeep;\n    if (planeToKeep instanceof _ClippingPlane_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z) {\n      planeToKeep.index = i;\n    }\n  }\n\n  // Indicate planes texture is dirty\n  this._multipleDirtyPlanes = true;\n  planes.length = length;\n\n  this.planeRemoved.raiseEvent(clippingPlane, index);\n\n  return true;\n};\n\n/**\n * Removes all planes from the collection.\n *\n * @see ClippingPlaneCollection#add\n * @see ClippingPlaneCollection#remove\n */\nClippingPlaneCollection.prototype.removeAll = function () {\n  // Dereference this ClippingPlaneCollection from all ClippingPlanes\n  var planes = this._planes;\n  var planesCount = planes.length;\n  for (var i = 0; i < planesCount; ++i) {\n    var plane = planes[i];\n    if (plane instanceof _ClippingPlane_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z) {\n      plane.onChangeCallback = undefined;\n      plane.index = -1;\n    }\n    this.planeRemoved.raiseEvent(plane, i);\n  }\n  this._multipleDirtyPlanes = true;\n  this._planes = [];\n};\n\nvar distanceEncodeScratch = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar oct32EncodeScratch = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nfunction packPlanesAsUint8(clippingPlaneCollection, startIndex, endIndex) {\n  var uint8View = clippingPlaneCollection._uint8View;\n  var planes = clippingPlaneCollection._planes;\n  var byteIndex = 0;\n  for (var i = startIndex; i < endIndex; ++i) {\n    var plane = planes[i];\n\n    var oct32Normal = _Core_AttributeCompression_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].octEncodeToCartesian4 */ .Z.octEncodeToCartesian4(\n      plane.normal,\n      oct32EncodeScratch\n    );\n    uint8View[byteIndex] = oct32Normal.x;\n    uint8View[byteIndex + 1] = oct32Normal.y;\n    uint8View[byteIndex + 2] = oct32Normal.z;\n    uint8View[byteIndex + 3] = oct32Normal.w;\n\n    var encodedDistance = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].packFloat */ .Z.packFloat(\n      plane.distance,\n      distanceEncodeScratch\n    );\n    uint8View[byteIndex + 4] = encodedDistance.x;\n    uint8View[byteIndex + 5] = encodedDistance.y;\n    uint8View[byteIndex + 6] = encodedDistance.z;\n    uint8View[byteIndex + 7] = encodedDistance.w;\n\n    byteIndex += 8;\n  }\n}\n\n// Pack starting at the beginning of the buffer to allow partial update\nfunction packPlanesAsFloats(clippingPlaneCollection, startIndex, endIndex) {\n  var float32View = clippingPlaneCollection._float32View;\n  var planes = clippingPlaneCollection._planes;\n\n  var floatIndex = 0;\n  for (var i = startIndex; i < endIndex; ++i) {\n    var plane = planes[i];\n    var normal = plane.normal;\n\n    float32View[floatIndex] = normal.x;\n    float32View[floatIndex + 1] = normal.y;\n    float32View[floatIndex + 2] = normal.z;\n    float32View[floatIndex + 3] = plane.distance;\n\n    floatIndex += 4; // each plane is 4 floats\n  }\n}\n\nfunction computeTextureResolution(pixelsNeeded, result) {\n  var maxSize = _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].maximumTextureSize */ .Z.maximumTextureSize;\n  result.x = Math.min(pixelsNeeded, maxSize);\n  result.y = Math.ceil(pixelsNeeded / result.x);\n  return result;\n}\n\nvar textureResolutionScratch = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * build the resources for clipping planes.\n * <p>\n * Do not call this function directly.\n * </p>\n */\nClippingPlaneCollection.prototype.update = function (frameState) {\n  var clippingPlanesTexture = this._clippingPlanesTexture;\n  var context = frameState.context;\n  var useFloatTexture = ClippingPlaneCollection.useFloatTexture(context);\n\n  // Compute texture requirements for current planes\n  // In RGBA FLOAT, A plane is 4 floats packed to a RGBA.\n  // In RGBA UNSIGNED_BYTE, A plane is a float in [0, 1) packed to RGBA and an Oct32 quantized normal,\n  // so 8 bits or 2 pixels in RGBA.\n  var pixelsNeeded = useFloatTexture ? this.length : this.length * 2;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(clippingPlanesTexture)) {\n    var currentPixelCount =\n      clippingPlanesTexture.width * clippingPlanesTexture.height;\n    // Recreate the texture to double current requirement if it isn\'t big enough or is 4 times larger than it needs to be.\n    // Optimization note: this isn\'t exactly the classic resizeable array algorithm\n    // * not necessarily checking for resize after each add/remove operation\n    // * random-access deletes instead of just pops\n    // * alloc ops likely more expensive than demonstrable via big-O analysis\n    if (\n      currentPixelCount < pixelsNeeded ||\n      pixelsNeeded < 0.25 * currentPixelCount\n    ) {\n      clippingPlanesTexture.destroy();\n      clippingPlanesTexture = undefined;\n      this._clippingPlanesTexture = undefined;\n    }\n  }\n\n  // If there are no clipping planes, there\'s nothing to update.\n  if (this.length === 0) {\n    return;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(clippingPlanesTexture)) {\n    var requiredResolution = computeTextureResolution(\n      pixelsNeeded,\n      textureResolutionScratch\n    );\n    // Allocate twice as much space as needed to avoid frequent texture reallocation.\n    // Allocate in the Y direction, since texture may be as wide as context texture support.\n    requiredResolution.y *= 2;\n\n    if (useFloatTexture) {\n      clippingPlanesTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z({\n        context: context,\n        width: requiredResolution.x,\n        height: requiredResolution.y,\n        pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].RGBA */ .Z.RGBA,\n        pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].FLOAT */ .Z.FLOAT,\n        sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].NEAREST */ .Z.NEAREST,\n        flipY: false,\n      });\n      this._float32View = new Float32Array(\n        requiredResolution.x * requiredResolution.y * 4\n      );\n    } else {\n      clippingPlanesTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z({\n        context: context,\n        width: requiredResolution.x,\n        height: requiredResolution.y,\n        pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].RGBA */ .Z.RGBA,\n        pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n        sampler: _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].NEAREST */ .Z.NEAREST,\n        flipY: false,\n      });\n      this._uint8View = new Uint8Array(\n        requiredResolution.x * requiredResolution.y * 4\n      );\n    }\n\n    this._clippingPlanesTexture = clippingPlanesTexture;\n    this._multipleDirtyPlanes = true;\n  }\n\n  var dirtyIndex = this._dirtyIndex;\n  if (!this._multipleDirtyPlanes && dirtyIndex === -1) {\n    return;\n  }\n  if (!this._multipleDirtyPlanes) {\n    // partial updates possible\n    var offsetX = 0;\n    var offsetY = 0;\n    if (useFloatTexture) {\n      offsetY = Math.floor(dirtyIndex / clippingPlanesTexture.width);\n      offsetX = Math.floor(dirtyIndex - offsetY * clippingPlanesTexture.width);\n\n      packPlanesAsFloats(this, dirtyIndex, dirtyIndex + 1);\n      clippingPlanesTexture.copyFrom({\n        source: {\n          width: 1,\n          height: 1,\n          arrayBufferView: this._float32View,\n        },\n        xOffset: offsetX,\n        yOffset: offsetY,\n      });\n    } else {\n      offsetY = Math.floor((dirtyIndex * 2) / clippingPlanesTexture.width);\n      offsetX = Math.floor(\n        dirtyIndex * 2 - offsetY * clippingPlanesTexture.width\n      );\n      packPlanesAsUint8(this, dirtyIndex, dirtyIndex + 1);\n      clippingPlanesTexture.copyFrom({\n        source: {\n          width: 2,\n          height: 1,\n          arrayBufferView: this._uint8View,\n        },\n        xOffset: offsetX,\n        yOffset: offsetY,\n      });\n    }\n  } else if (useFloatTexture) {\n    packPlanesAsFloats(this, 0, this._planes.length);\n    clippingPlanesTexture.copyFrom({\n      source: {\n        width: clippingPlanesTexture.width,\n        height: clippingPlanesTexture.height,\n        arrayBufferView: this._float32View,\n      },\n    });\n  } else {\n    packPlanesAsUint8(this, 0, this._planes.length);\n    clippingPlanesTexture.copyFrom({\n      source: {\n        width: clippingPlanesTexture.width,\n        height: clippingPlanesTexture.height,\n        arrayBufferView: this._uint8View,\n      },\n    });\n  }\n\n  this._multipleDirtyPlanes = false;\n  this._dirtyIndex = -1;\n};\n\nvar scratchMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z();\nvar scratchPlane = new _Core_Plane_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNIT_X */ .Z.UNIT_X, 0.0);\n/**\n * Determines the type intersection with the planes of this ClippingPlaneCollection instance and the specified {@link TileBoundingVolume}.\n * @private\n *\n * @param {Object} tileBoundingVolume The volume to determine the intersection with the planes.\n * @param {Matrix4} [transform] An optional, additional matrix to transform the plane to world coordinates.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire volume is on the side of the planes\n *                      the normal is pointing and should be entirely rendered, {@link Intersect.OUTSIDE}\n *                      if the entire volume is on the opposite side and should be clipped, and\n *                      {@link Intersect.INTERSECTING} if the volume intersects the planes.\n */\nClippingPlaneCollection.prototype.computeIntersectionWithBoundingVolume = function (\n  tileBoundingVolume,\n  transform\n) {\n  var planes = this._planes;\n  var length = planes.length;\n\n  var modelMatrix = this.modelMatrix;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(transform)) {\n    modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].multiply */ .Z.multiply(transform, modelMatrix, scratchMatrix);\n  }\n\n  // If the collection is not set to union the clipping regions, the volume must be outside of all planes to be\n  // considered completely clipped. If the collection is set to union the clipping regions, if the volume can be\n  // outside any the planes, it is considered completely clipped.\n  // Lastly, if not completely clipped, if any plane is intersecting, more calculations must be performed.\n  var intersection = _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INSIDE */ .Z.INSIDE;\n  if (!this.unionClippingRegions && length > 0) {\n    intersection = _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].OUTSIDE */ .Z.OUTSIDE;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var plane = planes[i];\n\n    _Core_Plane_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].transform */ .Z.transform(plane, modelMatrix, scratchPlane); // ClippingPlane can be used for Plane math\n\n    var value = tileBoundingVolume.intersectPlane(scratchPlane);\n    if (value === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].INTERSECTING */ .Z.INTERSECTING) {\n      intersection = value;\n    } else if (this._testIntersection(value)) {\n      return value;\n    }\n  }\n\n  return intersection;\n};\n\n/**\n * Sets the owner for the input ClippingPlaneCollection if there wasn\'t another owner.\n * Destroys the owner\'s previous ClippingPlaneCollection if setting is successful.\n *\n * @param {ClippingPlaneCollection} [clippingPlaneCollection] A ClippingPlaneCollection (or undefined) being attached to an object\n * @param {Object} owner An Object that should receive the new ClippingPlaneCollection\n * @param {String} key The Key for the Object to reference the ClippingPlaneCollection\n * @private\n */\nClippingPlaneCollection.setOwner = function (\n  clippingPlaneCollection,\n  owner,\n  key\n) {\n  // Don\'t destroy the ClippingPlaneCollection if it is already owned by newOwner\n  if (clippingPlaneCollection === owner[key]) {\n    return;\n  }\n  // Destroy the existing ClippingPlaneCollection, if any\n  owner[key] = owner[key] && owner[key].destroy();\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(clippingPlaneCollection)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(clippingPlaneCollection._owner)) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(\n        "ClippingPlaneCollection should only be assigned to one object"\n      );\n    }\n    //>>includeEnd(\'debug\');\n    clippingPlaneCollection._owner = owner;\n    owner[key] = clippingPlaneCollection;\n  }\n};\n\n/**\n * Function for checking if the context will allow clipping planes with floating point textures.\n *\n * @param {Context} context The Context that will contain clipped objects and clipping textures.\n * @returns {Boolean} <code>true</code> if floating point textures can be used for clipping planes.\n * @private\n */\nClippingPlaneCollection.useFloatTexture = function (context) {\n  return context.floatingPointTexture;\n};\n\n/**\n * Function for getting the clipping plane collection\'s texture resolution.\n * If the ClippingPlaneCollection hasn\'t been updated, returns the resolution that will be\n * allocated based on the current plane count.\n *\n * @param {ClippingPlaneCollection} clippingPlaneCollection The clipping plane collection\n * @param {Context} context The rendering context\n * @param {Cartesian2} result A Cartesian2 for the result.\n * @returns {Cartesian2} The required resolution.\n * @private\n */\nClippingPlaneCollection.getTextureResolution = function (\n  clippingPlaneCollection,\n  context,\n  result\n) {\n  var texture = clippingPlaneCollection.texture;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(texture)) {\n    result.x = texture.width;\n    result.y = texture.height;\n    return result;\n  }\n\n  var pixelsNeeded = ClippingPlaneCollection.useFloatTexture(context)\n    ? clippingPlaneCollection.length\n    : clippingPlaneCollection.length * 2;\n  var requiredResolution = computeTextureResolution(pixelsNeeded, result);\n\n  // Allocate twice as much space as needed to avoid frequent texture reallocation.\n  requiredResolution.y *= 2;\n  return requiredResolution;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ClippingPlaneCollection#destroy\n */\nClippingPlaneCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * clippingPlanes = clippingPlanes && clippingPlanes.destroy();\n *\n * @see ClippingPlaneCollection#isDestroyed\n */\nClippingPlaneCollection.prototype.destroy = function () {\n  this._clippingPlanesTexture =\n    this._clippingPlanesTexture && this._clippingPlanesTexture.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ClippingPlaneCollection);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21809\n')},43495:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13633);\n/* harmony import */ var _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99095);\n/* harmony import */ var _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(58597);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66553);\n/* harmony import */ var _Renderer_ComputeCommand_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(92357);\n/* harmony import */ var _CloudType_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(91757);\n/* harmony import */ var _Shaders_CloudCollectionFS_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(50442);\n/* harmony import */ var _Shaders_CloudCollectionVS_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(16999);\n/* harmony import */ var _Shaders_CloudNoiseFS_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(12444);\n/* harmony import */ var _Shaders_CloudNoiseVS_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(61968);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(84828);\n/* harmony import */ var _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(93030);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(12572);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(60072);\n/* harmony import */ var _Core_EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(74938);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(22832);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(21572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(38443);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(46588);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(42246);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(88453);\n/* harmony import */ var _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(18192);\n/* harmony import */ var _Renderer_VertexArrayFacade_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(52851);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(52200);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar attributeLocations;\n\nvar attributeLocationsBatched = {\n  positionHighAndScaleX: 0,\n  positionLowAndScaleY: 1,\n  packedAttribute0: 2, // show, brightness, direction\n  packedAttribute1: 3, // cloudSize, slice\n};\n\nvar attributeLocationsInstanced = {\n  direction: 0,\n  positionHighAndScaleX: 1,\n  positionLowAndScaleY: 2,\n  packedAttribute0: 3, // show, brightness\n  packedAttribute1: 4, // cloudSize, slice\n};\n\nvar SHOW_INDEX = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].SHOW_INDEX */ .Z.SHOW_INDEX;\nvar POSITION_INDEX = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].POSITION_INDEX */ .Z.POSITION_INDEX;\nvar SCALE_INDEX = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].SCALE_INDEX */ .Z.SCALE_INDEX;\nvar MAXIMUM_SIZE_INDEX = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].MAXIMUM_SIZE_INDEX */ .Z.MAXIMUM_SIZE_INDEX;\nvar SLICE_INDEX = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].SLICE_INDEX */ .Z.SLICE_INDEX;\nvar BRIGHTNESS_INDEX = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].BRIGHTNESS_INDEX */ .Z.BRIGHTNESS_INDEX;\nvar NUMBER_OF_PROPERTIES = _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].NUMBER_OF_PROPERTIES */ .Z.NUMBER_OF_PROPERTIES;\n\n/**\n * A renderable collection of clouds in the 3D scene.\n * <br /><br />\n * <div align=\'center\'>\n * <img src=\'Images/CumulusCloud.png\' width=\'400\' height=\'300\' /><br />\n * Example cumulus clouds\n * </div>\n * <br /><br />\n * Clouds are added and removed from the collection using {@link CloudCollection#add}\n * and {@link CloudCollection#remove}.\n * @alias CloudCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Whether to display the clouds.\n * @param {Number} [options.noiseDetail=16.0] Desired amount of detail in the noise texture.\n * @param {Number} [options.noiseOffset=Cartesian3.ZERO] Desired translation of data in noise texture.\n * @param {Boolean} [options.debugBillboards=false] For debugging only. Determines if the billboards are rendered with an opaque color.\n * @param {Boolean} [options.debugEllipsoids=false] For debugging only. Determines if the clouds will be rendered as opaque ellipsoids.\n * @see CloudCollection#add\n * @see CloudCollection#remove\n * @see CumulusCloud\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Clouds.html|Cesium Sandcastle Clouds Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Cloud%20Parameters.html|Cesium Sandcastle Cloud Parameters Demo}\n *\n * @example\n * // Create a cloud collection with two cumulus clouds\n * var clouds = scene.primitives.add(new Cesium.CloudCollection());\n * clouds.add({\n *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),\n *   maximumSize: new Cesium.Cartesian3(20.0, 12.0, 8.0)\n * });\n * clouds.add({\n *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),\n *   maximumSize: new Cesium.Cartesian3(15.0, 9.0, 9.0),\n *   slice: 0.5\n * });\n *\n */\nfunction CloudCollection(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._clouds = [];\n  this._cloudsToUpdate = [];\n  this._cloudsToUpdateIndex = 0;\n  this._cloudsRemoved = false;\n  this._createVertexArray = false;\n\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n\n  this._noiseTexture = undefined;\n  this._noiseTextureLength = 128;\n\n  /**\n   * <p>\n   * Controls the amount of detail captured in the precomputed noise texture\n   * used to render the cumulus clouds. In order for the texture to be tileable,\n   * this must be a power of two. For best results, set this to be a power of two\n   * between <code>8.0</code> and <code>32.0</code> (inclusive).\n   * </p>\n   *\n   * <div align=\'center\'>\n   * <table border=\'0\' cellpadding=\'5\'><tr>\n   * <td align=\'center\'>\n   *   <code>clouds.noiseDetail = 8.0;</code><br/>\n   *   <img src=\'Images/CloudCollection.noiseDetail8.png\' width=\'250\' height=\'158\' />\n   * </td>\n   * <td align=\'center\'>\n   *   <code>clouds.noiseDetail = 32.0;</code><br/>\n   *   <img src=\'Images/CloudCollection.noiseDetail32.png\' width=\'250\' height=\'158\' />\n   * </td>\n   * </tr></table>\n   * </div>\n   *\n   * @type {Number}\n   *\n   * @default 16.0\n   */\n  this.noiseDetail = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.noiseDetail, 16.0);\n\n  /**\n   * <p>\n   * Applies a translation to noise texture coordinates to generate different data.\n   * This can be modified if the default noise does not generate good-looking clouds.\n   * </p>\n   *\n   * <div align=\'center\'>\n   * <table border=\'0\' cellpadding=\'5\'><tr>\n   * <td align=\'center\'>\n   *   <code>default</code><br/>\n   *   <img src=\'Images/CloudCollection.noiseOffsetdefault.png\' width=\'250\' height=\'158\' />\n   * </td>\n   * <td align=\'center\'>\n   *   <code>clouds.noiseOffset = new Cesium.Cartesian3(10, 20, 10);</code><br/>\n   *   <img src=\'Images/CloudCollection.noiseOffsetx10y20z10.png\' width=\'250\' height=\'158\' />\n   * </td>\n   * </tr></table>\n   * </div>\n   * @type {Cartesian3}\n   *\n   * @default Cartesian3.ZERO\n   */\n  this.noiseOffset = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.noiseOffset, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ZERO */ .Z.ZERO)\n  );\n\n  this._loading = false;\n  this._ready = false;\n\n  var that = this;\n  this._uniforms = {\n    u_noiseTexture: function () {\n      return that._noiseTexture;\n    },\n    u_noiseTextureLength: function () {\n      return that._noiseTextureLength;\n    },\n    u_noiseDetail: function () {\n      return that.noiseDetail;\n    },\n  };\n\n  this._vaNoise = undefined;\n  this._spNoise = undefined;\n\n  this._spCreated = false;\n  this._sp = undefined;\n  this._rs = undefined;\n\n  /**\n   * Determines if billboards in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.show, true);\n\n  this._colorCommands = [];\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Renders the billboards with one opaque color for the sake of debugging.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugBillboards = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.debugBillboards, false);\n  this._compiledDebugBillboards = false;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the clouds as opaque, monochrome ellipsoids for the sake of debugging.\n   * If <code>debugBillboards</code> is also true, then the ellipsoids will draw on top of the billboards.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugEllipsoids = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.debugEllipsoids, false);\n  this._compiledDebugEllipsoids = false;\n}\n\nObject.defineProperties(CloudCollection.prototype, {\n  /**\n   * Returns the number of clouds in this collection.\n   * @memberof CloudCollection.prototype\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      removeClouds(this);\n      return this._clouds.length;\n    },\n  },\n});\n\nfunction destroyClouds(clouds) {\n  var length = clouds.length;\n  for (var i = 0; i < length; ++i) {\n    if (clouds[i]) {\n      clouds[i]._destroy();\n    }\n  }\n}\n\n/**\n * Creates and adds a cloud with the specified initial properties to the collection.\n * The added cloud is returned so it can be modified or removed from the collection later.\n *\n * @param {Object}[options] A template describing the cloud\'s properties as shown in Example 1.\n * @returns {CumulusCloud} The cloud that was added to the collection.\n *\n * @performance Calling <code>add</code> is expected constant time.  However, the collection\'s vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, add as many clouds as possible before calling <code>update</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Example 1:  Add a cumulus cloud, specifying all the default values.\n * var c = clouds.add({\n *   show : true,\n *   position : Cesium.Cartesian3.ZERO,\n *   scale : new Cesium.Cartesian2(20.0, 12.0),\n *   maximumSize: new Cesium.Cartesian3(20.0, 12.0, 12.0),\n *   slice: -1.0,\n *   cloudType : CloudType.CUMULUS\n * });\n *\n * @example\n * // Example 2:  Specify only the cloud\'s cartographic position.\n * var c = clouds.add({\n *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\n * });\n *\n * @see CloudCollection#remove\n * @see CloudCollection#removeAll\n */\nCloudCollection.prototype.add = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var cloudType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.cloudType, _CloudType_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].CUMULUS */ .Z.CUMULUS);\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!_CloudType_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].validate */ .Z.validate(cloudType)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z("invalid cloud type");\n  }\n  //>>includeEnd(\'debug\');\n\n  var cloud;\n  if (cloudType === _CloudType_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].CUMULUS */ .Z.CUMULUS) {\n    cloud = new _CumulusCloud_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(options, this);\n    cloud._index = this._clouds.length;\n    this._clouds.push(cloud);\n    this._createVertexArray = true;\n  }\n\n  return cloud;\n};\n\n/**\n * Removes a cloud from the collection.\n *\n * @param {CumulusCloud} cloud The cloud to remove.\n * @returns {Boolean} <code>true</code> if the cloud was removed; <code>false</code> if the cloud was not found in the collection.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * var c = clouds.add(...);\n * clouds.remove(c);  // Returns true\n *\n * @see CloudCollection#add\n * @see CloudCollection#removeAll\n * @see CumulusCloud#show\n */\nCloudCollection.prototype.remove = function (cloud) {\n  if (this.contains(cloud)) {\n    this._clouds[cloud._index] = undefined; // Removed later in removeClouds()\n    this._cloudsRemoved = true;\n    this._createVertexArray = true;\n    cloud._destroy();\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all clouds from the collection.\n *\n * @performance <code>O(n)</code>.  It is more efficient to remove all the clouds\n * from a collection and then add new ones than to create a new collection entirely.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * clouds.add(...);\n * clouds.add(...);\n * clouds.removeAll();\n *\n * @see CloudCollection#add\n * @see CloudCollection#remove\n */\nCloudCollection.prototype.removeAll = function () {\n  destroyClouds(this._clouds);\n  this._clouds = [];\n  this._cloudsToUpdate = [];\n  this._cloudsToUpdateIndex = 0;\n  this._cloudsRemoved = false;\n\n  this._createVertexArray = true;\n};\n\nfunction removeClouds(cloudCollection) {\n  if (cloudCollection._cloudsRemoved) {\n    cloudCollection._cloudsRemoved = false;\n\n    var newClouds = [];\n    var clouds = cloudCollection._clouds;\n    var length = clouds.length;\n    for (var i = 0, j = 0; i < length; ++i) {\n      var cloud = clouds[i];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(cloud)) {\n        clouds._index = j++;\n        newClouds.push(cloud);\n      }\n    }\n\n    cloudCollection._clouds = newClouds;\n  }\n}\n\nCloudCollection.prototype._updateCloud = function (cloud, propertyChanged) {\n  if (!cloud._dirty) {\n    this._cloudsToUpdate[this._cloudsToUpdateIndex++] = cloud;\n  }\n\n  ++this._propertiesChanged[propertyChanged];\n};\n\n/**\n * Check whether this collection contains a given cloud.\n *\n * @param {CumulusCloud} [cloud] The cloud to check for.\n * @returns {Boolean} true if this collection contains the cloud, false otherwise.\n *\n * @see CloudCollection#get\n */\nCloudCollection.prototype.contains = function (cloud) {\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(cloud) && cloud._cloudCollection === this;\n};\n\n/**\n * Returns the cloud in the collection at the specified index. Indices are zero-based\n * and increase as clouds are added. Removing a cloud shifts all clouds after\n * it to the left, changing their indices. This function is commonly used with\n * {@link CloudCollection#length} to iterate over all the clouds in the collection.\n *\n * @param {Number} index The zero-based index of the cloud.\n * @returns {CumulusCloud} The cloud at the specified index.\n *\n * @performance Expected constant time. If clouds were removed from the collection and\n * {@link CloudCollection#update} was not called, an implicit <code>O(n)</code>\n * operation is performed.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every cloud in the collection\n * var len = clouds.length;\n * for (var i = 0; i < len; ++i) {\n *   var c = clouds.get(i);\n *   c.show = !c.show;\n * }\n *\n * @see CloudCollection#length\n */\nCloudCollection.prototype.get = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number */ .Z.typeOf.number("index", index);\n  //>>includeEnd(\'debug\');\n\n  removeClouds(this);\n  return this._clouds[index];\n};\n\nvar texturePositions = new Float32Array([\n  -1.0,\n  -1.0,\n  1.0,\n  -1.0,\n  1.0,\n  1.0,\n  -1.0,\n  1.0,\n]);\n\nvar textureIndices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nfunction createTextureVA(context) {\n  var positionBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n    context: context,\n    typedArray: texturePositions,\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n  });\n  var indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: textureIndices,\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n  });\n\n  var attributes = [\n    {\n      index: 0,\n      vertexBuffer: positionBuffer,\n      componentsPerAttribute: 2,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n    },\n  ];\n\n  return new _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z({\n    context: context,\n    attributes: attributes,\n    indexBuffer: indexBuffer,\n  });\n}\n\nvar getIndexBuffer;\n\nfunction getIndexBufferBatched(context) {\n  var sixteenK = 16 * 1024;\n\n  var indexBuffer = context.cache.cloudCollection_indexBufferBatched;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  // Subtract 6 because the last index is reserved for primitive restart.\n  // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18\n  var length = sixteenK * 6 - 6;\n  var indices = new Uint16Array(length);\n  for (var i = 0, j = 0; i < length; i += 6, j += 4) {\n    indices[i] = j;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n\n    indices[i + 3] = j;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  }\n\n  indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: indices,\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_indexBufferBatched = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getIndexBufferInstanced(context) {\n  var indexBuffer = context.cache.cloudCollection_indexBufferInstanced;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].UNSIGNED_SHORT */ .Z.UNSIGNED_SHORT,\n  });\n\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_indexBufferInstanced = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getVertexBufferInstanced(context) {\n  var vertexBuffer = context.cache.cloudCollection_vertexBufferInstanced;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(vertexBuffer)) {\n    return vertexBuffer;\n  }\n\n  vertexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n    context: context,\n    typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n  });\n\n  vertexBuffer.vertexArrayDestroyable = false;\n  context.cache.cloudCollection_vertexBufferInstanced = vertexBuffer;\n  return vertexBuffer;\n}\n\nfunction createVAF(context, numberOfClouds, instanced) {\n  var attributes = [\n    {\n      index: attributeLocations.positionHighAndScaleX,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.positionLowAndScaleY,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.packedAttribute0,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    },\n    {\n      index: attributeLocations.packedAttribute1,\n      componentsPerAttribute: 4,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n      usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    },\n  ];\n\n  if (instanced) {\n    attributes.push({\n      index: attributeLocations.direction,\n      componentsPerAttribute: 2,\n      componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n      vertexBuffer: getVertexBufferInstanced(context),\n    });\n  }\n\n  var sizeInVertices = instanced ? numberOfClouds : 4 * numberOfClouds;\n  return new _Renderer_VertexArrayFacade_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"] */ .Z(context, attributes, sizeInVertices, instanced);\n}\n\nvar writePositionScratch = new _Core_EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\nfunction writePositionAndScale(cloudCollection, frameState, vafWriters, cloud) {\n  var i;\n  var positionHighWriter = vafWriters[attributeLocations.positionHighAndScaleX];\n  var positionLowWriter = vafWriters[attributeLocations.positionLowAndScaleY];\n  var position = cloud.position;\n\n  _Core_EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].fromCartesian */ .Z.fromCartesian(position, writePositionScratch);\n  var scale = cloud.scale;\n\n  var high = writePositionScratch.high;\n  var low = writePositionScratch.low;\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    positionHighWriter(i, high.x, high.y, high.z, scale.x);\n    positionLowWriter(i, low.x, low.y, low.z, scale.y);\n  } else {\n    i = cloud._index * 4;\n    positionHighWriter(i + 0, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 1, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 2, high.x, high.y, high.z, scale.x);\n    positionHighWriter(i + 3, high.x, high.y, high.z, scale.x);\n\n    positionLowWriter(i + 0, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 1, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 2, low.x, low.y, low.z, scale.y);\n    positionLowWriter(i + 3, low.x, low.y, low.z, scale.y);\n  }\n}\n\nfunction writePackedAttribute0(cloudCollection, frameState, vafWriters, cloud) {\n  var i;\n  var writer = vafWriters[attributeLocations.packedAttribute0];\n  var show = cloud.show;\n  var brightness = cloud.brightness;\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, show, brightness, 0.0, 0.0);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, show, brightness, 0.0, 0.0);\n    writer(i + 1, show, brightness, 1.0, 0.0);\n    writer(i + 2, show, brightness, 1.0, 1.0);\n    writer(i + 3, show, brightness, 0.0, 1.0);\n  }\n}\n\nfunction writePackedAttribute1(cloudCollection, frameState, vafWriters, cloud) {\n  var i;\n  var writer = vafWriters[attributeLocations.packedAttribute1];\n  var maximumSize = cloud.maximumSize;\n  var slice = cloud.slice;\n\n  if (cloudCollection._instanced) {\n    i = cloud._index;\n    writer(i, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n  } else {\n    i = cloud._index * 4;\n    writer(i + 0, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 1, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 2, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n    writer(i + 3, maximumSize.x, maximumSize.y, maximumSize.z, slice);\n  }\n}\n\nfunction writeCloud(cloudCollection, frameState, vafWriters, cloud) {\n  writePositionAndScale(cloudCollection, frameState, vafWriters, cloud);\n  writePackedAttribute0(cloudCollection, frameState, vafWriters, cloud);\n  writePackedAttribute1(cloudCollection, frameState, vafWriters, cloud);\n}\n\nfunction createNoiseTexture(cloudCollection, frameState, vsSource, fsSource) {\n  var that = cloudCollection;\n  var context = frameState.context;\n  that._vaNoise = createTextureVA(context);\n  that._spNoise = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].fromCache */ .Z.fromCache({\n    context: context,\n    vertexShaderSource: vsSource,\n    fragmentShaderSource: fsSource,\n    attributeLocations: {\n      position: 0,\n    },\n  });\n\n  var noiseTextureLength = that._noiseTextureLength;\n  var noiseDetail = that.noiseDetail;\n  var noiseOffset = that.noiseOffset;\n\n  that._noiseTexture = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z({\n    context: context,\n    width: noiseTextureLength * noiseTextureLength,\n    height: noiseTextureLength,\n    pixelDatatype: _Renderer_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE,\n    pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].RGBA */ .Z.RGBA,\n    sampler: new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z({\n      wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].REPEAT */ .Z.REPEAT,\n      wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].REPEAT */ .Z.REPEAT,\n      minificationFilter: _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].NEAREST */ .Z.NEAREST,\n      magnificationFilter: _Renderer_TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].NEAREST */ .Z.NEAREST,\n    }),\n  });\n\n  var textureCommand = new _Renderer_ComputeCommand_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    vertexArray: that._vaNoise,\n    shaderProgram: that._spNoise,\n    outputTexture: that._noiseTexture,\n    uniformMap: {\n      u_noiseTextureLength: function () {\n        return noiseTextureLength;\n      },\n      u_noiseDetail: function () {\n        return noiseDetail;\n      },\n      u_noiseOffset: function () {\n        return noiseOffset;\n      },\n    },\n    persists: false,\n    owner: cloudCollection,\n    postExecute: function (texture) {\n      that._ready = true;\n      that._loading = false;\n    },\n  });\n\n  frameState.commandList.push(textureCommand);\n  that._loading = true;\n}\n\nfunction createVertexArray(cloudCollection, frameState) {\n  var that = cloudCollection;\n  var context = frameState.context;\n  that._createVertexArray = false;\n  that._vaf = that._vaf && that._vaf.destroy();\n\n  var clouds = cloudCollection._clouds;\n  var cloudsLength = clouds.length;\n  if (cloudsLength > 0) {\n    that._vaf = createVAF(context, cloudsLength, that._instanced);\n    var vafWriters = that._vaf.writers;\n\n    var i;\n    // Rewrite entire buffer if clouds were added or removed.\n    for (i = 0; i < cloudsLength; ++i) {\n      var cloud = clouds[i];\n      writeCloud(cloudCollection, frameState, vafWriters, cloud);\n    }\n\n    // Different cloud collections share the same index buffer.\n    that._vaf.commit(getIndexBuffer(context));\n  }\n}\n\nvar scratchWriterArray = [];\n\nfunction updateClouds(cloudCollection, frameState) {\n  var context = frameState.context;\n  var that = cloudCollection;\n  var clouds = that._clouds;\n  var cloudsLength = clouds.length;\n  var cloudsToUpdate = that._cloudsToUpdate;\n  var cloudsToUpdateLength = that._cloudsToUpdateIndex;\n\n  var properties = that._propertiesChanged;\n\n  var writers = scratchWriterArray;\n  writers.length = 0;\n\n  if (properties[POSITION_INDEX] || properties[SCALE_INDEX]) {\n    writers.push(writePositionAndScale);\n  }\n\n  if (properties[SHOW_INDEX] || properties[BRIGHTNESS_INDEX]) {\n    writers.push(writePackedAttribute0);\n  }\n\n  if (properties[MAXIMUM_SIZE_INDEX] || properties[SLICE_INDEX]) {\n    writers.push(writePackedAttribute1);\n  }\n\n  var numWriters = writers.length;\n  var vafWriters = that._vaf.writers;\n\n  var i, c, w;\n  if (cloudsToUpdateLength / cloudsLength > 0.1) {\n    // Like BillboardCollection, if more than 10% of clouds change,\n    // rewrite the entire buffer.\n\n    for (i = 0; i < cloudsToUpdateLength; ++i) {\n      c = cloudsToUpdate[i];\n      c._dirty = false;\n\n      for (w = 0; w < numWriters; ++w) {\n        writers[w](cloudCollection, frameState, vafWriters, c);\n      }\n    }\n\n    that._vaf.commit(getIndexBuffer(context));\n  } else {\n    for (i = 0; i < cloudsToUpdateLength; ++i) {\n      c = cloudsToUpdate[i];\n      c._dirty = false;\n\n      for (w = 0; w < numWriters; ++w) {\n        writers[w](cloudCollection, frameState, vafWriters, c);\n      }\n\n      if (that._instanced) {\n        that._vaf.subCommit(c._index, 1);\n      } else {\n        that._vaf.subCommit(c._index * 4, 4);\n      }\n    }\n    that._vaf.endSubCommits();\n  }\n\n  that._cloudsToUpdateIndex = 0;\n}\n\nfunction createShaderProgram(cloudCollection, frameState, vsSource, fsSource) {\n  var context = frameState.context;\n  var that = cloudCollection;\n  var vs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z({\n    defines: [],\n    sources: [vsSource],\n  });\n\n  if (that._instanced) {\n    vs.defines.push("INSTANCED");\n  }\n\n  var fs = new _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z({\n    defines: [],\n    sources: [fsSource],\n  });\n\n  if (that.debugBillboards) {\n    fs.defines.push("DEBUG_BILLBOARDS");\n  }\n\n  if (that.debugEllipsoids) {\n    fs.defines.push("DEBUG_ELLIPSOIDS");\n  }\n\n  that._sp = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].replaceCache */ .Z.replaceCache({\n    context: context,\n    shaderProgram: that._sp,\n    vertexShaderSource: vs,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations,\n  });\n\n  that._rs = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].fromCache */ .Z.fromCache({\n    depthTest: {\n      enabled: true,\n      func: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].LESS */ .Z.LESS,\n    },\n    depthMask: false,\n    blending: _BlendingState_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND,\n  });\n\n  that._spCreated = true;\n  that._compiledDebugBillboards = that.debugBillboards;\n  that._compiledDebugEllipsoids = that.debugEllipsoids;\n}\n\nfunction createDrawCommands(cloudCollection, frameState) {\n  var that = cloudCollection;\n  var pass = frameState.passes;\n  var uniforms = that._uniforms;\n  var commandList = frameState.commandList;\n  if (pass.render) {\n    var colorList = that._colorCommands;\n\n    var va = that._vaf.va;\n    var vaLength = va.length;\n    colorList.length = vaLength;\n    for (var i = 0; i < vaLength; i++) {\n      var command = colorList[i];\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(command)) {\n        command = colorList[i] = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n      }\n      command.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT;\n      command.owner = cloudCollection;\n      command.uniformMap = uniforms;\n      command.count = va[i].indicesCount;\n      command.vertexArray = va[i].va;\n      command.shaderProgram = that._sp;\n      command.renderState = that._rs;\n      if (that._instanced) {\n        command.count = 6;\n        command.instanceCount = that._clouds.length;\n      }\n\n      commandList.push(command);\n    }\n  }\n}\n\n/**\n * @private\n */\nCloudCollection.prototype.update = function (frameState) {\n  removeClouds(this);\n  if (!this.show) {\n    return;\n  }\n\n  var debugging = this.debugBillboards || this.debugEllipsoids;\n  this._ready = debugging ? true : (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(this._noiseTexture);\n\n  if (!this._ready && !this._loading && !debugging) {\n    createNoiseTexture(this, frameState, _Shaders_CloudNoiseVS_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z, _Shaders_CloudNoiseFS_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z);\n  }\n\n  this._instanced = frameState.context.instancedArrays;\n  attributeLocations = this._instanced\n    ? attributeLocationsInstanced\n    : attributeLocationsBatched;\n  getIndexBuffer = this._instanced\n    ? getIndexBufferInstanced\n    : getIndexBufferBatched;\n\n  var clouds = this._clouds;\n  var cloudsLength = clouds.length;\n  var cloudsToUpdate = this._cloudsToUpdate;\n  var cloudsToUpdateLength = this._cloudsToUpdateIndex;\n\n  if (this._createVertexArray) {\n    createVertexArray(this, frameState);\n  } else if (cloudsToUpdateLength > 0) {\n    // Clouds were modified, but none were added or removed.\n    updateClouds(this, frameState);\n  }\n\n  // If the number of total clouds ever shrinks considerably,\n  // truncate cloudsToUpdate so that we free memory that\n  // we are no longer using.\n  if (cloudsToUpdateLength > cloudsLength * 1.5) {\n    cloudsToUpdate.length = cloudsLength;\n  }\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(this._vaf) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)(this._vaf.va) ||\n    !this._ready & !debugging\n  ) {\n    return;\n  }\n\n  if (\n    !this._spCreated ||\n    this.debugBillboards !== this._compiledDebugBillboards ||\n    this.debugEllipsoids !== this._compiledDebugEllipsoids\n  ) {\n    createShaderProgram(this, frameState, _Shaders_CloudCollectionVS_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z, _Shaders_CloudCollectionFS_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z);\n  }\n\n  createDrawCommands(this, frameState);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see CloudCollection#destroy\n */\nCloudCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * clouds = clouds && clouds.destroy();\n *\n * @see CloudCollection#isDestroyed\n */\nCloudCollection.prototype.destroy = function () {\n  this._noiseTexture = this._noiseTexture && this._noiseTexture.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._vaf = this._vaf && this._vaf.destroy();\n\n  destroyClouds(this._clouds);\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(this);\n};\n\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (CloudCollection)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43495\n')},91757:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * Specifies the type of the cloud that is added to a {@link CloudCollection} in {@link CloudCollection#add}.\n *\n * @enum {Number}\n */\n\nvar CloudType = {\n  /**\n   * Cumulus cloud.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CUMULUS: 0,\n};\n\n/**\n * Validates that the provided cloud type is a valid {@link CloudType}\n *\n * @param {CloudType} cloudType The cloud type to validate.\n * @returns {Boolean} <code>true</code> if the provided cloud type is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.CloudType.validate(cloudType)) {\n *   throw new Cesium.DeveloperError('cloudType must be a valid value.');\n * }\n */\n\nCloudType.validate = function (cloudType) {\n  return cloudType === CloudType.CUMULUS;\n};\n\n/* harmony default export */ __webpack_exports__[\"Z\"] = (Object.freeze(CloudType));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE3NTcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx1REFBdUQsdUJBQXVCLElBQUksMEJBQTBCO0FBQzVHO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLGFBQWEsU0FBUywrREFBK0Q7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx5REFBZSx3QkFBd0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9DbG91ZFR5cGUuanM/NDZlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNwZWNpZmllcyB0aGUgdHlwZSBvZiB0aGUgY2xvdWQgdGhhdCBpcyBhZGRlZCB0byBhIHtAbGluayBDbG91ZENvbGxlY3Rpb259IGluIHtAbGluayBDbG91ZENvbGxlY3Rpb24jYWRkfS5cbiAqXG4gKiBAZW51bSB7TnVtYmVyfVxuICovXG5cbnZhciBDbG91ZFR5cGUgPSB7XG4gIC8qKlxuICAgKiBDdW11bHVzIGNsb3VkLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICovXG4gIENVTVVMVVM6IDAsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHRoZSBwcm92aWRlZCBjbG91ZCB0eXBlIGlzIGEgdmFsaWQge0BsaW5rIENsb3VkVHlwZX1cbiAqXG4gKiBAcGFyYW0ge0Nsb3VkVHlwZX0gY2xvdWRUeXBlIFRoZSBjbG91ZCB0eXBlIHRvIHZhbGlkYXRlLlxuICogQHJldHVybnMge0Jvb2xlYW59IDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBwcm92aWRlZCBjbG91ZCB0eXBlIGlzIGEgdmFsaWQgdmFsdWU7IG90aGVyd2lzZSwgPGNvZGU+ZmFsc2U8L2NvZGU+LlxuICpcbiAqIEBleGFtcGxlXG4gKiBpZiAoIUNlc2l1bS5DbG91ZFR5cGUudmFsaWRhdGUoY2xvdWRUeXBlKSkge1xuICogICB0aHJvdyBuZXcgQ2VzaXVtLkRldmVsb3BlckVycm9yKCdjbG91ZFR5cGUgbXVzdCBiZSBhIHZhbGlkIHZhbHVlLicpO1xuICogfVxuICovXG5cbkNsb3VkVHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChjbG91ZFR5cGUpIHtcbiAgcmV0dXJuIGNsb3VkVHlwZSA9PT0gQ2xvdWRUeXBlLkNVTVVMVVM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKENsb3VkVHlwZSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91757\n")}}]);