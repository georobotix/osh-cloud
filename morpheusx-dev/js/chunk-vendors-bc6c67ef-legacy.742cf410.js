"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[2108],{48055:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "T": function() { return /* binding */ Timeline; }\n/* harmony export */ });\nlet channelHandles = 1;\nlet animationHandles = 1;\nclass Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {\n      delay = 0,\n      duration = Number.POSITIVE_INFINITY,\n      rate = 1,\n      repeat = 1\n    } = props;\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n\n    this._setChannelTime(channel, this.time);\n\n    this.channels.set(handle, channel);\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n    const channels = this.channels.values();\n\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n\n    for (const animationData of animations) {\n      const {\n        animation,\n        channel\n      } = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n    animation.setTime(this.getTime(channelHandle));\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n\n}\n//# sourceMappingURL=timeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgwNTUuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC9lbmdpbmUvZGlzdC9lc20vYW5pbWF0aW9uL3RpbWVsaW5lLmpzP2VkNTkiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGNoYW5uZWxIYW5kbGVzID0gMTtcbmxldCBhbmltYXRpb25IYW5kbGVzID0gMTtcbmV4cG9ydCBjbGFzcyBUaW1lbGluZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGltZSA9IDA7XG4gICAgdGhpcy5jaGFubmVscyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmFuaW1hdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0RW5naW5lVGltZSA9IC0xO1xuICB9XG5cbiAgYWRkQ2hhbm5lbChwcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbGF5ID0gMCxcbiAgICAgIGR1cmF0aW9uID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgcmF0ZSA9IDEsXG4gICAgICByZXBlYXQgPSAxXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IGhhbmRsZSA9IGNoYW5uZWxIYW5kbGVzKys7XG4gICAgY29uc3QgY2hhbm5lbCA9IHtcbiAgICAgIHRpbWU6IDAsXG4gICAgICBkZWxheSxcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgcmF0ZSxcbiAgICAgIHJlcGVhdFxuICAgIH07XG5cbiAgICB0aGlzLl9zZXRDaGFubmVsVGltZShjaGFubmVsLCB0aGlzLnRpbWUpO1xuXG4gICAgdGhpcy5jaGFubmVscy5zZXQoaGFuZGxlLCBjaGFubmVsKTtcbiAgICByZXR1cm4gaGFuZGxlO1xuICB9XG5cbiAgcmVtb3ZlQ2hhbm5lbChoYW5kbGUpIHtcbiAgICB0aGlzLmNoYW5uZWxzLmRlbGV0ZShoYW5kbGUpO1xuXG4gICAgZm9yIChjb25zdCBbYW5pbWF0aW9uSGFuZGxlLCBhbmltYXRpb25dIG9mIHRoaXMuYW5pbWF0aW9ucykge1xuICAgICAgaWYgKGFuaW1hdGlvbi5jaGFubmVsID09PSBoYW5kbGUpIHtcbiAgICAgICAgdGhpcy5kZXRhY2hBbmltYXRpb24oYW5pbWF0aW9uSGFuZGxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc0ZpbmlzaGVkKGhhbmRsZSkge1xuICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmdldChoYW5kbGUpO1xuXG4gICAgaWYgKGNoYW5uZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRpbWUgPj0gY2hhbm5lbC5kZWxheSArIGNoYW5uZWwuZHVyYXRpb24gKiBjaGFubmVsLnJlcGVhdDtcbiAgfVxuXG4gIGdldFRpbWUoaGFuZGxlKSB7XG4gICAgaWYgKGhhbmRsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmdldChoYW5kbGUpO1xuXG4gICAgaWYgKGNoYW5uZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHJldHVybiBjaGFubmVsLnRpbWU7XG4gIH1cblxuICBzZXRUaW1lKHRpbWUpIHtcbiAgICB0aGlzLnRpbWUgPSBNYXRoLm1heCgwLCB0aW1lKTtcbiAgICBjb25zdCBjaGFubmVscyA9IHRoaXMuY2hhbm5lbHMudmFsdWVzKCk7XG5cbiAgICBmb3IgKGNvbnN0IGNoYW5uZWwgb2YgY2hhbm5lbHMpIHtcbiAgICAgIHRoaXMuX3NldENoYW5uZWxUaW1lKGNoYW5uZWwsIHRoaXMudGltZSk7XG4gICAgfVxuXG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucy52YWx1ZXMoKTtcblxuICAgIGZvciAoY29uc3QgYW5pbWF0aW9uRGF0YSBvZiBhbmltYXRpb25zKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFuaW1hdGlvbixcbiAgICAgICAgY2hhbm5lbFxuICAgICAgfSA9IGFuaW1hdGlvbkRhdGE7XG4gICAgICBhbmltYXRpb24uc2V0VGltZSh0aGlzLmdldFRpbWUoY2hhbm5lbCkpO1xuICAgIH1cbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMubGFzdEVuZ2luZVRpbWUgPSAtMTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2V0VGltZSgwKTtcbiAgfVxuXG4gIGF0dGFjaEFuaW1hdGlvbihhbmltYXRpb24sIGNoYW5uZWxIYW5kbGUpIHtcbiAgICBjb25zdCBhbmltYXRpb25IYW5kbGUgPSBhbmltYXRpb25IYW5kbGVzKys7XG4gICAgdGhpcy5hbmltYXRpb25zLnNldChhbmltYXRpb25IYW5kbGUsIHtcbiAgICAgIGFuaW1hdGlvbixcbiAgICAgIGNoYW5uZWw6IGNoYW5uZWxIYW5kbGVcbiAgICB9KTtcbiAgICBhbmltYXRpb24uc2V0VGltZSh0aGlzLmdldFRpbWUoY2hhbm5lbEhhbmRsZSkpO1xuICAgIHJldHVybiBhbmltYXRpb25IYW5kbGU7XG4gIH1cblxuICBkZXRhY2hBbmltYXRpb24oaGFuZGxlKSB7XG4gICAgdGhpcy5hbmltYXRpb25zLmRlbGV0ZShoYW5kbGUpO1xuICB9XG5cbiAgdXBkYXRlKGVuZ2luZVRpbWUpIHtcbiAgICBpZiAodGhpcy5wbGF5aW5nKSB7XG4gICAgICBpZiAodGhpcy5sYXN0RW5naW5lVGltZSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5sYXN0RW5naW5lVGltZSA9IGVuZ2luZVRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VGltZSh0aGlzLnRpbWUgKyAoZW5naW5lVGltZSAtIHRoaXMubGFzdEVuZ2luZVRpbWUpKTtcbiAgICAgIHRoaXMubGFzdEVuZ2luZVRpbWUgPSBlbmdpbmVUaW1lO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRDaGFubmVsVGltZShjaGFubmVsLCB0aW1lKSB7XG4gICAgY29uc3Qgb2Zmc2V0VGltZSA9IHRpbWUgLSBjaGFubmVsLmRlbGF5O1xuICAgIGNvbnN0IHRvdGFsRHVyYXRpb24gPSBjaGFubmVsLmR1cmF0aW9uICogY2hhbm5lbC5yZXBlYXQ7XG5cbiAgICBpZiAob2Zmc2V0VGltZSA+PSB0b3RhbER1cmF0aW9uKSB7XG4gICAgICBjaGFubmVsLnRpbWUgPSBjaGFubmVsLmR1cmF0aW9uICogY2hhbm5lbC5yYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFubmVsLnRpbWUgPSBNYXRoLm1heCgwLCBvZmZzZXRUaW1lKSAlIGNoYW5uZWwuZHVyYXRpb247XG4gICAgICBjaGFubmVsLnRpbWUgKj0gY2hhbm5lbC5yYXRlO1xuICAgIH1cbiAgfVxuXG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lbGluZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48055\n')},53982:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ Geometry; }\n/* harmony export */ });\n/* unused harmony export DRAW_MODE */\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(74538);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22525);\n\nconst DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\nclass Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_0__/* .uid */ .hQ)(\'geometry\'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getAttributes() {\n    return this.indices ? {\n      indices: this.indices,\n      ...this.attributes\n    } : this.attributes;\n  }\n\n  _print(attributeName) {\n    return "Geometry ".concat(this.id, " attribute ").concat(attributeName);\n  }\n\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {\n        value: indices,\n        size: 1\n      } : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n      attribute = ArrayBuffer.isView(attribute) ? {\n        value: attribute\n      } : attribute;\n      (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_1__/* .assert */ .h)(ArrayBuffer.isView(attribute.value), "".concat(this._print(attributeName), ": must be typed array or object with value as typed array"));\n\n      if ((attributeName === \'POSITION\' || attributeName === \'positions\') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      if (attributeName === \'indices\') {\n        (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_1__/* .assert */ .h)(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n\n    let vertexCount = Infinity;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {\n        value,\n        size,\n        constant\n      } = attribute;\n\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_1__/* .assert */ .h)(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n\n}\n//# sourceMappingURL=geometry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM5ODIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZDO0FBQ3RDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkRBQUc7QUFDZDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixNQUFNLCtEQUFNOztBQUVaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsK0RBQU07QUFDZDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSwrREFBTTtBQUNWO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvZW5naW5lL2Rpc3QvZXNtL2dlb21ldHJ5L2dlb21ldHJ5LmpzP2E4ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdWlkLCBhc3NlcnQgfSBmcm9tICdAbHVtYS5nbC93ZWJnbCc7XG5leHBvcnQgY29uc3QgRFJBV19NT0RFID0ge1xuICBQT0lOVFM6IDB4MDAwMCxcbiAgTElORVM6IDB4MDAwMSxcbiAgTElORV9MT09QOiAweDAwMDIsXG4gIExJTkVfU1RSSVA6IDB4MDAwMyxcbiAgVFJJQU5HTEVTOiAweDAwMDQsXG4gIFRSSUFOR0xFX1NUUklQOiAweDAwMDUsXG4gIFRSSUFOR0xFX0ZBTjogMHgwMDA2XG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VvbWV0cnkge1xuICBzdGF0aWMgZ2V0IERSQVdfTU9ERSgpIHtcbiAgICByZXR1cm4gRFJBV19NT0RFO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBjb25zdCB7XG4gICAgICBpZCA9IHVpZCgnZ2VvbWV0cnknKSxcbiAgICAgIGRyYXdNb2RlID0gRFJBV19NT0RFLlRSSUFOR0xFUyxcbiAgICAgIGF0dHJpYnV0ZXMgPSB7fSxcbiAgICAgIGluZGljZXMgPSBudWxsLFxuICAgICAgdmVydGV4Q291bnQgPSBudWxsXG4gICAgfSA9IHByb3BzO1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmRyYXdNb2RlID0gZHJhd01vZGUgfCAwO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIHRoaXMudXNlckRhdGEgPSB7fTtcblxuICAgIHRoaXMuX3NldEF0dHJpYnV0ZXMoYXR0cmlidXRlcywgaW5kaWNlcyk7XG5cbiAgICB0aGlzLnZlcnRleENvdW50ID0gdmVydGV4Q291bnQgfHwgdGhpcy5fY2FsY3VsYXRlVmVydGV4Q291bnQodGhpcy5hdHRyaWJ1dGVzLCB0aGlzLmluZGljZXMpO1xuICB9XG5cbiAgZ2V0IG1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHJhd01vZGU7XG4gIH1cblxuICBnZXRWZXJ0ZXhDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0ZXhDb3VudDtcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kaWNlcyA/IHtcbiAgICAgIGluZGljZXM6IHRoaXMuaW5kaWNlcyxcbiAgICAgIC4uLnRoaXMuYXR0cmlidXRlc1xuICAgIH0gOiB0aGlzLmF0dHJpYnV0ZXM7XG4gIH1cblxuICBfcHJpbnQoYXR0cmlidXRlTmFtZSkge1xuICAgIHJldHVybiBcIkdlb21ldHJ5IFwiLmNvbmNhdCh0aGlzLmlkLCBcIiBhdHRyaWJ1dGUgXCIpLmNvbmNhdChhdHRyaWJ1dGVOYW1lKTtcbiAgfVxuXG4gIF9zZXRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMsIGluZGljZXMpIHtcbiAgICBpZiAoaW5kaWNlcykge1xuICAgICAgdGhpcy5pbmRpY2VzID0gQXJyYXlCdWZmZXIuaXNWaWV3KGluZGljZXMpID8ge1xuICAgICAgICB2YWx1ZTogaW5kaWNlcyxcbiAgICAgICAgc2l6ZTogMVxuICAgICAgfSA6IGluZGljZXM7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGxldCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xuICAgICAgYXR0cmlidXRlID0gQXJyYXlCdWZmZXIuaXNWaWV3KGF0dHJpYnV0ZSkgPyB7XG4gICAgICAgIHZhbHVlOiBhdHRyaWJ1dGVcbiAgICAgIH0gOiBhdHRyaWJ1dGU7XG4gICAgICBhc3NlcnQoQXJyYXlCdWZmZXIuaXNWaWV3KGF0dHJpYnV0ZS52YWx1ZSksIFwiXCIuY29uY2F0KHRoaXMuX3ByaW50KGF0dHJpYnV0ZU5hbWUpLCBcIjogbXVzdCBiZSB0eXBlZCBhcnJheSBvciBvYmplY3Qgd2l0aCB2YWx1ZSBhcyB0eXBlZCBhcnJheVwiKSk7XG5cbiAgICAgIGlmICgoYXR0cmlidXRlTmFtZSA9PT0gJ1BPU0lUSU9OJyB8fCBhdHRyaWJ1dGVOYW1lID09PSAncG9zaXRpb25zJykgJiYgIWF0dHJpYnV0ZS5zaXplKSB7XG4gICAgICAgIGF0dHJpYnV0ZS5zaXplID0gMztcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09ICdpbmRpY2VzJykge1xuICAgICAgICBhc3NlcnQoIXRoaXMuaW5kaWNlcyk7XG4gICAgICAgIHRoaXMuaW5kaWNlcyA9IGF0dHJpYnV0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9IGF0dHJpYnV0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pbmRpY2VzICYmIHRoaXMuaW5kaWNlcy5pc0luZGV4ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pbmRpY2VzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbmRpY2VzKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmluZGljZXMuaXNJbmRleGVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgX2NhbGN1bGF0ZVZlcnRleENvdW50KGF0dHJpYnV0ZXMsIGluZGljZXMpIHtcbiAgICBpZiAoaW5kaWNlcykge1xuICAgICAgcmV0dXJuIGluZGljZXMudmFsdWUubGVuZ3RoO1xuICAgIH1cblxuICAgIGxldCB2ZXJ0ZXhDb3VudCA9IEluZmluaXR5O1xuXG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG4gICAgICBjb25zdCB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzaXplLFxuICAgICAgICBjb25zdGFudFxuICAgICAgfSA9IGF0dHJpYnV0ZTtcblxuICAgICAgaWYgKCFjb25zdGFudCAmJiB2YWx1ZSAmJiBzaXplID49IDEpIHtcbiAgICAgICAgdmVydGV4Q291bnQgPSBNYXRoLm1pbih2ZXJ0ZXhDb3VudCwgdmFsdWUubGVuZ3RoIC8gc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXNzZXJ0KE51bWJlci5pc0Zpbml0ZSh2ZXJ0ZXhDb3VudCkpO1xuICAgIHJldHVybiB2ZXJ0ZXhDb3VudDtcbiAgfVxuXG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW9tZXRyeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53982\n')},16816:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ AnimationLoop; }\n/* harmony export */ });\n/* harmony import */ var _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1418);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(49835);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22525);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14178);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37178);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53849);\n/* harmony import */ var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93370);\n\n\n\nconst isPage = (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z)() && typeof document !== 'undefined';\nlet statIdCounter = 0;\nclass AnimationLoop {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      onCreateContext = opts => (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .createGLContext */ .s9)(opts),\n      onAddHTML = null,\n      onInitialize = () => {},\n      onRender = () => {},\n      onFinalize = () => {},\n      onError,\n      gl = null,\n      glOptions = {},\n      debug = false,\n      createFramebuffer = false,\n      autoResizeViewport = true,\n      autoResizeDrawingBuffer = true,\n      stats = _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_2__/* .lumaStats.get */ .lR.get(\"animation-loop-\".concat(statIdCounter++))\n    } = props;\n    let {\n      useDevicePixels = true\n    } = props;\n\n    if ('useDevicePixelRatio' in props) {\n      _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.deprecated */ .cM.deprecated('useDevicePixelRatio', 'useDevicePixels')();\n      useDevicePixels = props.useDevicePixelRatio;\n    }\n\n    this.props = {\n      onCreateContext,\n      onAddHTML,\n      onInitialize,\n      onRender,\n      onFinalize,\n      onError,\n      gl,\n      glOptions,\n      debug,\n      createFramebuffer\n    };\n    this.gl = gl;\n    this.needsRedraw = null;\n    this.timeline = null;\n    this.stats = stats;\n    this.cpuTime = this.stats.get('CPU Time');\n    this.gpuTime = this.stats.get('GPU Time');\n    this.frameRate = this.stats.get('Frame Rate');\n    this._initialized = false;\n    this._running = false;\n    this._animationFrameId = null;\n    this._nextFramePromise = null;\n    this._resolveNextFrame = null;\n    this._cpuStartTime = 0;\n    this.setProps({\n      autoResizeViewport,\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this._pageLoadPromise = null;\n    this._onMousemove = this._onMousemove.bind(this);\n    this._onMouseleave = this._onMouseleave.bind(this);\n  }\n\n  delete() {\n    this.stop();\n\n    this._setDisplay(null);\n  }\n\n  setNeedsRedraw(reason) {\n    (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(typeof reason === 'string');\n    this.needsRedraw = this.needsRedraw || reason;\n    return this;\n  }\n\n  setProps(props) {\n    if ('autoResizeViewport' in props) {\n      this.autoResizeViewport = props.autoResizeViewport;\n    }\n\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n\n    return this;\n  }\n\n  start() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this._running) {\n      return this;\n    }\n\n    this._running = true;\n\n    const startPromise = this._getPageLoadPromise().then(() => {\n      if (!this._running || this._initialized) {\n        return null;\n      }\n\n      this._createWebGLContext(opts);\n\n      this._createFramebuffer();\n\n      this._startEventHandling();\n\n      this._initializeCallbackData();\n\n      this._updateCallbackData();\n\n      this._resizeCanvasDrawingBuffer();\n\n      this._resizeViewport();\n\n      this._gpuTimeQuery = _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"].isSupported */ .Z.isSupported(this.gl, ['timers']) ? new _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z(this.gl) : null;\n      this._initialized = true;\n      return this.onInitialize(this.animationProps);\n    }).then(appContext => {\n      if (this._running) {\n        this._addCallbackData(appContext || {});\n\n        if (appContext !== false) {\n          this._startLoop();\n        }\n      }\n    });\n\n    if (this.props.onError) {\n      startPromise.catch(this.props.onError);\n    }\n\n    return this;\n  }\n\n  redraw() {\n    if (this.isContextLost()) {\n      return this;\n    }\n\n    this._beginTimers();\n\n    this._setupFrame();\n\n    this._updateCallbackData();\n\n    this._renderFrame(this.animationProps);\n\n    this._clearNeedsRedraw();\n\n    if (this.offScreen && this.gl.commit) {\n      this.gl.commit();\n    }\n\n    if (this._resolveNextFrame) {\n      this._resolveNextFrame(this);\n\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n    }\n\n    this._endTimers();\n\n    return this;\n  }\n\n  stop() {\n    if (this._running) {\n      this._finalizeCallbackData();\n\n      this._cancelAnimationFrame(this._animationFrameId);\n\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n      this._animationFrameId = null;\n      this._running = false;\n    }\n\n    return this;\n  }\n\n  attachTimeline(timeline) {\n    this.timeline = timeline;\n    return this.timeline;\n  }\n\n  detachTimeline() {\n    this.timeline = null;\n  }\n\n  waitForRender() {\n    this.setNeedsRedraw('waitForRender');\n\n    if (!this._nextFramePromise) {\n      this._nextFramePromise = new Promise(resolve => {\n        this._resolveNextFrame = resolve;\n      });\n    }\n\n    return this._nextFramePromise;\n  }\n\n  async toDataURL() {\n    this.setNeedsRedraw('toDataURL');\n    await this.waitForRender();\n    return this.gl.canvas.toDataURL();\n  }\n\n  isContextLost() {\n    return this.gl.isContextLost();\n  }\n\n  onCreateContext() {\n    return this.props.onCreateContext(...arguments);\n  }\n\n  onInitialize() {\n    return this.props.onInitialize(...arguments);\n  }\n\n  onRender() {\n    return this.props.onRender(...arguments);\n  }\n\n  onFinalize() {\n    return this.props.onFinalize(...arguments);\n  }\n\n  getHTMLControlValue(id) {\n    let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const element = document.getElementById(id);\n    return element ? Number(element.value) : defaultValue;\n  }\n\n  setViewParameters() {\n    _luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .log.removed */ .cM.removed('AnimationLoop.setViewParameters', 'AnimationLoop.setProps')();\n    return this;\n  }\n\n  _startLoop() {\n    const renderFrame = () => {\n      if (!this._running) {\n        return;\n      }\n\n      this.redraw();\n      this._animationFrameId = this._requestAnimationFrame(renderFrame);\n    };\n\n    this._cancelAnimationFrame(this._animationFrameId);\n\n    this._animationFrameId = this._requestAnimationFrame(renderFrame);\n  }\n\n  _getPageLoadPromise() {\n    if (!this._pageLoadPromise) {\n      this._pageLoadPromise = isPage ? new Promise((resolve, reject) => {\n        if (isPage && document.readyState === 'complete') {\n          resolve(document);\n          return;\n        }\n\n        window.addEventListener('load', () => {\n          resolve(document);\n        });\n      }) : Promise.resolve({});\n    }\n\n    return this._pageLoadPromise;\n  }\n\n  _setDisplay(display) {\n    if (this.display) {\n      this.display.delete();\n      this.display.animationLoop = null;\n    }\n\n    if (display) {\n      display.animationLoop = this;\n    }\n\n    this.display = display;\n  }\n\n  _cancelAnimationFrame(animationFrameId) {\n    if (this.display && this.display.cancelAnimationFrame) {\n      return this.display.cancelAnimationFrame(animationFrameId);\n    }\n\n    return (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__/* .cancelAnimationFrame */ .W)(animationFrameId);\n  }\n\n  _requestAnimationFrame(renderFrameCallback) {\n    if (this._running) {\n      if (this.display && this.display.requestAnimationFrame) {\n        return this.display.requestAnimationFrame(renderFrameCallback);\n      }\n\n      return (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_5__/* .requestAnimationFrame */ .U)(renderFrameCallback);\n    }\n\n    return undefined;\n  }\n\n  _renderFrame() {\n    if (this.display) {\n      this.display._renderFrame(...arguments);\n\n      return;\n    }\n\n    this.onRender(...arguments);\n  }\n\n  _clearNeedsRedraw() {\n    this.needsRedraw = null;\n  }\n\n  _setupFrame() {\n    this._resizeCanvasDrawingBuffer();\n\n    this._resizeViewport();\n\n    this._resizeFramebuffer();\n  }\n\n  _initializeCallbackData() {\n    this.animationProps = {\n      gl: this.gl,\n      stop: this.stop,\n      canvas: this.gl.canvas,\n      framebuffer: this.framebuffer,\n      useDevicePixels: this.useDevicePixels,\n      needsRedraw: null,\n      startTime: Date.now(),\n      engineTime: 0,\n      tick: 0,\n      tock: 0,\n      time: 0,\n      _timeline: this.timeline,\n      _loop: this,\n      _animationLoop: this,\n      _mousePosition: null\n    };\n  }\n\n  _updateCallbackData() {\n    const {\n      width,\n      height,\n      aspect\n    } = this._getSizeAndAspect();\n\n    if (width !== this.animationProps.width || height !== this.animationProps.height) {\n      this.setNeedsRedraw('drawing buffer resized');\n    }\n\n    if (aspect !== this.animationProps.aspect) {\n      this.setNeedsRedraw('drawing buffer aspect changed');\n    }\n\n    this.animationProps.width = width;\n    this.animationProps.height = height;\n    this.animationProps.aspect = aspect;\n    this.animationProps.needsRedraw = this.needsRedraw;\n    this.animationProps.engineTime = Date.now() - this.animationProps.startTime;\n\n    if (this.timeline) {\n      this.timeline.update(this.animationProps.engineTime);\n    }\n\n    this.animationProps.tick = Math.floor(this.animationProps.time / 1000 * 60);\n    this.animationProps.tock++;\n    this.animationProps.time = this.timeline ? this.timeline.getTime() : this.animationProps.engineTime;\n    this.animationProps._offScreen = this.offScreen;\n  }\n\n  _finalizeCallbackData() {\n    this.onFinalize(this.animationProps);\n  }\n\n  _addCallbackData(appContext) {\n    if (typeof appContext === 'object' && appContext !== null) {\n      this.animationProps = Object.assign({}, this.animationProps, appContext);\n    }\n  }\n\n  _createWebGLContext(opts) {\n    this.offScreen = opts.canvas && typeof OffscreenCanvas !== 'undefined' && opts.canvas instanceof OffscreenCanvas;\n    opts = Object.assign({}, opts, this.props.glOptions);\n    this.gl = this.props.gl ? (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .instrumentGLContext */ .yW)(this.props.gl, opts) : this.onCreateContext(opts);\n\n    if (!(0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .isWebGL */ .UF)(this.gl)) {\n      throw new Error('AnimationLoop.onCreateContext - illegal context returned');\n    }\n\n    (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .resetParameters */ .kL)(this.gl);\n\n    this._createInfoDiv();\n  }\n\n  _createInfoDiv() {\n    if (this.gl.canvas && this.props.onAddHTML) {\n      const wrapperDiv = document.createElement('div');\n      document.body.appendChild(wrapperDiv);\n      wrapperDiv.style.position = 'relative';\n      const div = document.createElement('div');\n      div.style.position = 'absolute';\n      div.style.left = '10px';\n      div.style.bottom = '10px';\n      div.style.width = '300px';\n      div.style.background = 'white';\n      wrapperDiv.appendChild(this.gl.canvas);\n      wrapperDiv.appendChild(div);\n      const html = this.props.onAddHTML(div);\n\n      if (html) {\n        div.innerHTML = html;\n      }\n    }\n  }\n\n  _getSizeAndAspect() {\n    const width = this.gl.drawingBufferWidth;\n    const height = this.gl.drawingBufferHeight;\n    let aspect = 1;\n    const {\n      canvas\n    } = this.gl;\n\n    if (canvas && canvas.clientHeight) {\n      aspect = canvas.clientWidth / canvas.clientHeight;\n    } else if (width > 0 && height > 0) {\n      aspect = width / height;\n    }\n\n    return {\n      width,\n      height,\n      aspect\n    };\n  }\n\n  _resizeViewport() {\n    if (this.autoResizeViewport) {\n      this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    }\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      (0,_luma_gl_gltools__WEBPACK_IMPORTED_MODULE_0__/* .resizeGLContext */ .aQ)(this.gl, {\n        useDevicePixels: this.useDevicePixels\n      });\n    }\n  }\n\n  _createFramebuffer() {\n    if (this.props.createFramebuffer) {\n      this.framebuffer = new _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_6__/* [\"default\"] */ .Z(this.gl);\n    }\n  }\n\n  _resizeFramebuffer() {\n    if (this.framebuffer) {\n      this.framebuffer.resize({\n        width: this.gl.drawingBufferWidth,\n        height: this.gl.drawingBufferHeight\n      });\n    }\n  }\n\n  _beginTimers() {\n    this.frameRate.timeEnd();\n    this.frameRate.timeStart();\n\n    if (this._gpuTimeQuery && this._gpuTimeQuery.isResultAvailable() && !this._gpuTimeQuery.isTimerDisjoint()) {\n      this.stats.get('GPU Time').addTime(this._gpuTimeQuery.getTimerMilliseconds());\n    }\n\n    if (this._gpuTimeQuery) {\n      this._gpuTimeQuery.beginTimeElapsedQuery();\n    }\n\n    this.cpuTime.timeStart();\n  }\n\n  _endTimers() {\n    this.cpuTime.timeEnd();\n\n    if (this._gpuTimeQuery) {\n      this._gpuTimeQuery.end();\n    }\n  }\n\n  _startEventHandling() {\n    const {\n      canvas\n    } = this.gl;\n\n    if (canvas) {\n      canvas.addEventListener('mousemove', this._onMousemove);\n      canvas.addEventListener('mouseleave', this._onMouseleave);\n    }\n  }\n\n  _onMousemove(e) {\n    this.animationProps._mousePosition = [e.offsetX, e.offsetY];\n  }\n\n  _onMouseleave(e) {\n    this.animationProps._mousePosition = null;\n  }\n\n}\n//# sourceMappingURL=animation-loop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16816\n")},80210:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ Model; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/program-manager.js + 8 modules\nvar program_manager = __webpack_require__(43426);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/utils.js\nvar utils = __webpack_require__(74538);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar assert = __webpack_require__(22525);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/clear.js\nvar clear = __webpack_require__(26047);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/program.js + 6 modules\nvar classes_program = __webpack_require__(75433);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/vertex-array.js + 2 modules\nvar vertex_array = __webpack_require__(55045);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/buffer.js\nvar classes_buffer = __webpack_require__(53478);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/transform-feedback.js\nvar transform_feedback = __webpack_require__(51053);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/debug/debug-vertex-array.js\nvar debug_vertex_array = __webpack_require__(61713);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/debug/debug-uniforms.js\nvar debug_uniforms = __webpack_require__(49258);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/debug/debug-program-configuration.js\nvar debug_program_configuration = __webpack_require__(3124);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/model-utils.js\n\nconst GLTF_TO_LUMA_ATTRIBUTE_MAP = {\n  POSITION: 'positions',\n  NORMAL: 'normals',\n  COLOR_0: 'colors',\n  TEXCOORD_0: 'texCoords',\n  TEXCOORD_1: 'texCoords1',\n  TEXCOORD_2: 'texCoords2'\n};\nfunction getBuffersFromGeometry(gl, geometry, options) {\n  const buffers = {};\n  let indices = geometry.indices;\n\n  for (const name in geometry.attributes) {\n    const attribute = geometry.attributes[name];\n    const remappedName = mapAttributeName(name, options);\n\n    if (name === 'indices') {\n      indices = attribute;\n    } else if (attribute.constant) {\n      buffers[remappedName] = attribute.value;\n    } else {\n      const typedArray = attribute.value;\n      const accessor = { ...attribute\n      };\n      delete accessor.value;\n      buffers[remappedName] = [new classes_buffer/* default */.Z(gl, typedArray), accessor];\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n\n  if (indices) {\n    const data = indices.value || indices;\n    (0,assert/* assert */.h)(data instanceof Uint16Array || data instanceof Uint32Array, 'attribute array for \"indices\" must be of integer type');\n    const accessor = {\n      size: 1,\n      isIndexed: indices.isIndexed === undefined ? true : indices.isIndexed\n    };\n    buffers.indices = [new classes_buffer/* default */.Z(gl, {\n      data,\n      target: 34963\n    }), accessor];\n  }\n\n  return buffers;\n}\n\nfunction mapAttributeName(name, options) {\n  const {\n    attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP\n  } = options || {};\n  return attributeMap && attributeMap[name] || name;\n}\n\nfunction inferAttributeAccessor(attributeName, attribute) {\n  let category;\n\n  switch (attributeName) {\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n\n    default:\n  }\n\n  switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n\n    default:\n  }\n\n  (0,assert/* assert */.h)(Number.isFinite(attribute.size), \"attribute \".concat(attributeName, \" needs size\"));\n}\n//# sourceMappingURL=model-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/model.js\n\n\n\n\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst NOOP = () => {};\n\nconst DRAW_PARAMS = {};\nclass Model {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      id = (0,utils/* uid */.hQ)('model')\n    } = props;\n    (0,assert/* assert */.h)((0,esm/* isWebGL */.UF)(gl));\n    this.id = id;\n    this.gl = gl;\n    this.id = props.id || (0,utils/* uid */.hQ)('Model');\n    this.lastLogTime = 0;\n    this.animated = false;\n    this.initialize(props);\n  }\n\n  initialize(props) {\n    this.props = {};\n    this.programManager = props.programManager || program_manager/* default.getDefaultProgramManager */.Z.getDefaultProgramManager(this.gl);\n    this._programManagerState = -1;\n    this._managedProgram = false;\n    const {\n      program = null,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    } = props;\n    this.programProps = {\n      program,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    };\n    this.program = null;\n    this.vertexArray = null;\n    this._programDirty = true;\n    this.userData = {};\n    this.needsRedraw = true;\n    this._attributes = {};\n    this.attributes = {};\n    this.uniforms = {};\n    this.pickable = true;\n\n    this._checkProgram();\n\n    this.setUniforms(Object.assign({}, this.getModuleUniforms(props.moduleSettings)));\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : 4;\n    this.vertexCount = props.vertexCount || 0;\n    this.geometryBuffers = {};\n    this.isInstanced = props.isInstanced || props.instanced || props.instanceCount > 0;\n\n    this._setModelProps(props);\n\n    this.geometry = {};\n    (0,assert/* assert */.h)(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    this._setModelProps(props);\n  }\n\n  delete() {\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    if (this._managedProgram) {\n      this.programManager.release(this.program);\n      this._managedProgram = false;\n    }\n\n    this.vertexArray.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  setProgram(props) {\n    const {\n      program,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    } = props;\n    this.programProps = {\n      program,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    };\n    this._programDirty = true;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    (0,assert/* assert */.h)(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    (0,assert/* assert */.h)(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes() {\n    let attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if ((0,utils/* isObjectEmpty */.nK)(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  setUniforms() {\n    let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(this.uniforms, uniforms);\n    return this;\n  }\n\n  getModuleUniforms(opts) {\n    this._checkProgram();\n\n    const getUniforms = this.programManager.getUniforms(this.program);\n\n    if (getUniforms) {\n      return getUniforms(opts);\n    }\n\n    return {};\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  clear(opts) {\n    (0,clear/* clear */.Z)(this.program.gl, opts);\n    return this;\n  }\n\n  draw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this._checkProgram();\n\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray\n    } = opts;\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms);\n    let logPriority;\n\n    if (esm/* log.priority */.cM.priority >= LOG_DRAW_PRIORITY) {\n      logPriority = this._logDrawCallStart(LOG_DRAW_PRIORITY);\n    }\n\n    const drawParams = this.vertexArray.getDrawParams();\n    const {\n      isIndexed = drawParams.isIndexed,\n      indexType = drawParams.indexType,\n      indexOffset = drawParams.indexOffset,\n      vertexArrayInstanced = drawParams.isInstanced\n    } = this.props;\n\n    if (vertexArrayInstanced && !this.isInstanced) {\n      esm/* log.warn */.cM.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {\n      isInstanced,\n      instanceCount\n    } = this;\n    const {\n      onBeforeRender = NOOP,\n      onAfterRender = NOOP\n    } = this.props;\n    onBeforeRender();\n    this.program.setUniforms(this.uniforms);\n    const didDraw = this.program.draw(Object.assign(DRAW_PARAMS, opts, {\n      logPriority,\n      uniforms: null,\n      framebuffer,\n      parameters,\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      vertexArray,\n      transformFeedback,\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount,\n      offset: isIndexed ? indexOffset : 0\n    }));\n    onAfterRender();\n\n    if (esm/* log.priority */.cM.priority >= LOG_DRAW_PRIORITY) {\n      this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n    }\n\n    return didDraw;\n  }\n\n  transform() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      discard = true,\n      feedbackBuffers,\n      unbindModels = []\n    } = opts;\n    let {\n      parameters\n    } = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {\n        [35977]: discard\n      });\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n\n    try {\n      this.draw(Object.assign({}, opts, {\n        parameters\n      }));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  render() {\n    let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    esm/* log.warn */.cM.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  _setModelProps(props) {\n    Object.assign(this.props, props);\n\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _checkProgram() {\n    const needsUpdate = this._programDirty || this.programManager.stateHash !== this._programManagerState;\n\n    if (!needsUpdate) {\n      return;\n    }\n\n    let {\n      program\n    } = this.programProps;\n\n    if (program) {\n      this._managedProgram = false;\n    } else {\n      const {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        varyings,\n        bufferMode,\n        transpileToGLSL100\n      } = this.programProps;\n      program = this.programManager.get({\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        varyings,\n        bufferMode,\n        transpileToGLSL100\n      });\n\n      if (this.program && this._managedProgram) {\n        this.programManager.release(this.program);\n      }\n\n      this._programManagerState = this.programManager.stateHash;\n      this._managedProgram = true;\n    }\n\n    (0,assert/* assert */.h)(program instanceof classes_program/* default */.Z, 'Model needs a program');\n    this._programDirty = false;\n\n    if (program === this.program) {\n      return;\n    }\n\n    this.program = program;\n\n    if (this.vertexArray) {\n      this.vertexArray.setProps({\n        program: this.program,\n        attributes: this.vertexArray.attributes\n      });\n    } else {\n      this.vertexArray = new vertex_array/* default */.Z(this.gl, {\n        program: this.program\n      });\n    }\n\n    this.setUniforms(Object.assign({}, this.getModuleUniforms()));\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n\n      if (buffer instanceof classes_buffer/* default */.Z) {\n        buffer.delete();\n      }\n    }\n  }\n\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      (0,assert/* assert */.h)(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n    }\n  }\n\n  _setFeedbackBuffers() {\n    let feedbackBuffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if ((0,utils/* isObjectEmpty */.nK)(feedbackBuffers)) {\n      return this;\n    }\n\n    const {\n      gl\n    } = this.program;\n    this.transformFeedback = this.transformFeedback || new transform_feedback/* default */.Z(gl, {\n      program: this.program\n    });\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n\n  _logDrawCallStart(logLevel) {\n    const logDrawTimeout = logLevel > 3 ? 0 : LOG_DRAW_TIMEOUT;\n\n    if (Date.now() - this.lastLogTime < logDrawTimeout) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n    esm/* log.group */.cM.group(LOG_DRAW_PRIORITY, \">>> DRAWING MODEL \".concat(this.id), {\n      collapsed: esm/* log.level */.cM.level <= 2\n    })();\n    return logLevel;\n  }\n\n  _logDrawCallEnd(logLevel, vertexArray, uniforms, framebuffer) {\n    if (logLevel === undefined) {\n      return;\n    }\n\n    const attributeTable = (0,debug_vertex_array/* getDebugTableForVertexArray */.L)({\n      vertexArray,\n      header: \"\".concat(this.id, \" attributes\"),\n      attributes: this._attributes\n    });\n    const {\n      table: uniformTable,\n      unusedTable,\n      unusedCount\n    } = (0,debug_uniforms/* getDebugTableForUniforms */.d)({\n      header: \"\".concat(this.id, \" uniforms\"),\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n    const {\n      table: missingTable,\n      count: missingCount\n    } = (0,debug_uniforms/* getDebugTableForUniforms */.d)({\n      header: \"\".concat(this.id, \" uniforms\"),\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      esm/* log.log */.cM.log('MISSING UNIFORMS', Object.keys(missingTable))();\n    }\n\n    if (unusedCount > 0) {\n      esm/* log.log */.cM.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n    }\n\n    const configTable = (0,debug_program_configuration/* getDebugTableForProgramConfiguration */.n)(this.vertexArray.configuration);\n    esm/* log.table */.cM.table(logLevel, attributeTable)();\n    esm/* log.table */.cM.table(logLevel, uniformTable)();\n    esm/* log.table */.cM.table(logLevel + 1, configTable)();\n\n    if (framebuffer) {\n      framebuffer.log({\n        logLevel: LOG_DRAW_PRIORITY,\n        message: \"Rendered to \".concat(framebuffer.id)\n      });\n    }\n\n    esm/* log.groupEnd */.cM.groupEnd(LOG_DRAW_PRIORITY)();\n  }\n\n}\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80210\n")},43426:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ ProgramManager; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/constants.js\nvar constants = __webpack_require__(75682);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/utils/assert.js\nvar assert = __webpack_require__(29047);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/filters/prop-types.js\nconst TYPE_DEFINITIONS = {\n  number: {\n    validate(value, propType) {\n      return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);\n    }\n\n  },\n  array: {\n    validate(value, propType) {\n      return Array.isArray(value) || ArrayBuffer.isView(value);\n    }\n\n  }\n};\nfunction parsePropTypes(propDefs) {\n  const propTypes = {};\n\n  for (const propName in propDefs) {\n    const propDef = propDefs[propName];\n    const propType = parsePropType(propDef);\n    propTypes[propName] = propType;\n  }\n\n  return propTypes;\n}\n\nfunction parsePropType(propDef) {\n  let type = getTypeOf(propDef);\n\n  if (type === 'object') {\n    if (!propDef) {\n      return {\n        type: 'object',\n        value: null\n      };\n    }\n\n    if ('type' in propDef) {\n      return Object.assign({}, propDef, TYPE_DEFINITIONS[propDef.type]);\n    }\n\n    if (!('value' in propDef)) {\n      return {\n        type: 'object',\n        value: propDef\n      };\n    }\n\n    type = getTypeOf(propDef.value);\n    return Object.assign({\n      type\n    }, propDef, TYPE_DEFINITIONS[type]);\n  }\n\n  return Object.assign({\n    type,\n    value: propDef\n  }, TYPE_DEFINITIONS[type]);\n}\n\nfunction getTypeOf(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return 'array';\n  }\n\n  return typeof value;\n}\n//# sourceMappingURL=prop-types.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/shader-module.js\n\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\nclass ShaderModule {\n  constructor(_ref) {\n    let {\n      name,\n      vs,\n      fs,\n      dependencies = [],\n      uniforms,\n      getUniforms,\n      deprecations = [],\n      defines = {},\n      inject = {},\n      vertexShader,\n      fragmentShader\n    } = _ref;\n    (0,assert/* default */.Z)(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  getModuleSource(type) {\n    let moduleSource;\n\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n\n      default:\n        (0,assert/* default */.Z)(false);\n    }\n\n    return \"#define MODULE_\".concat(this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_'), \"\\n\").concat(moduleSource, \"// END MODULE_\").concat(this.name, \"\\n\\n\");\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(\"\\\\b\".concat(def.old, \"\\\\(\"));\n          break;\n\n        default:\n          def.regex = new RegExp(\"\".concat(def.type, \" \").concat(def.old, \";\"));\n      }\n    });\n    return deprecations;\n  }\n\n  _defaultGetUniforms() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          (0,assert/* default */.Z)(propDef.validate(opts[key], propDef), \"\".concat(this.name, \": invalid \").concat(key));\n        }\n\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n\n}\nfunction normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n//# sourceMappingURL=shader-module.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/resolve-modules.js\n\n\nfunction resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({\n    modules,\n    level: 0,\n    moduleMap,\n    moduleDepth\n  });\n  return Object.keys(moduleDepth).sort((a, b) => moduleDepth[b] - moduleDepth[a]).map(name => moduleMap[name]);\n}\n\nfunction getDependencyGraph(_ref) {\n  let {\n    modules,\n    level,\n    moduleMap,\n    moduleDepth\n  } = _ref;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({\n        modules: module.dependencies,\n        level: level + 1,\n        moduleMap,\n        moduleDepth\n      });\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    (0,assert/* default */.Z)(typeof module !== 'string', \"Shader module use by name is deprecated. Import shader module '\".concat(module, \"' and use it directly.\"));\n    (0,assert/* default */.Z)(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\n\nconst TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n//# sourceMappingURL=resolve-modules.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/utils/is-old-ie.js\nfunction isOldIE() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const navigator = typeof window !== 'undefined' ? window.navigator || {} : {};\n  const userAgent = opts.userAgent || navigator.userAgent || '';\n  const isMSIE = userAgent.indexOf('MSIE ') !== -1;\n  const isTrident = userAgent.indexOf('Trident/') !== -1;\n  return isMSIE || isTrident;\n}\n//# sourceMappingURL=is-old-ie.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/utils/webgl-info.js\n\n\nconst GL_VENDOR = 0x1f00;\nconst GL_RENDERER = 0x1f01;\nconst GL_VERSION = 0x1f02;\nconst GL_SHADING_LANGUAGE_VERSION = 0x8b8c;\nconst WEBGL_FEATURES = {\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\n\n\nfunction isWebGL2(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n\n  return Boolean(gl && gl._version === 2);\n}\n\nfunction getContextInfo(gl) {\n  const info = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendor = gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || GL_VENDOR);\n  const renderer = gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || GL_RENDERER);\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  const gpuInfo = {\n    gpuVendor,\n    vendor,\n    renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n\n  if (vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i)) {\n    return 'AMD';\n  }\n\n  return 'UNKNOWN GPU';\n}\n\nconst compiledGlslExtensions = {};\nfunction canCompileGLGSExtension(gl, cap) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const feature = WEBGL_FEATURES[cap];\n  (0,assert/* default */.Z)(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const behavior = opts.behavior || 'enable';\n  const source = \"#extension GL_\".concat(extensionName, \" : \").concat(behavior, \"\\nvoid main(void) {}\");\n  const shader = gl.createShader(35633);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, 35713);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  (0,assert/* default */.Z)(feature, cap);\n  const extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n  const value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n  (0,assert/* default */.Z)(value === false || value === true);\n  return value;\n}\n\nfunction hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => getFeature(gl, feature));\n}\n//# sourceMappingURL=webgl-info.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/platform-defines.js\n\nfunction getPlatformShaderDefines(gl) {\n  const debugInfo = getContextInfo(gl);\n\n  switch (debugInfo.gpuVendor.toLowerCase()) {\n    case 'nvidia':\n      return \"#define NVIDIA_GPU\\n// Nvidia optimizes away the calculation necessary for emulated fp64\\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\\n\";\n\n    case 'intel':\n      return \"#define INTEL_GPU\\n// Intel optimizes away the calculation necessary for emulated fp64\\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\\n// Intel's built-in 'tan' function doesn't have acceptable precision\\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\\n\";\n\n    case 'amd':\n      return \"#define AMD_GPU\\n\";\n\n    default:\n      return \"#define DEFAULT_GPU\\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\\n// Intel's built-in 'tan' function doesn't have acceptable precision\\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\\n\";\n  }\n}\nfunction getVersionDefines(gl, glslVersion, isFragment) {\n  let versionDefines = \"#if (__VERSION__ > 120)\\n\\n# define FEATURE_GLSL_DERIVATIVES\\n# define FEATURE_GLSL_DRAW_BUFFERS\\n# define FEATURE_GLSL_FRAG_DEPTH\\n# define FEATURE_GLSL_TEXTURE_LOD\\n\\n// DEPRECATED FLAGS, remove in v9\\n# define FRAG_DEPTH\\n# define DERIVATIVES\\n# define DRAW_BUFFERS\\n# define TEXTURE_LOD\\n\\n#endif // __VERSION\\n\";\n\n  if (hasFeatures(gl, FEATURES.GLSL_FRAG_DEPTH)) {\n    versionDefines += \"\\n// FRAG_DEPTH => gl_FragDepth is available\\n#ifdef GL_EXT_frag_depth\\n#extension GL_EXT_frag_depth : enable\\n# define FEATURE_GLSL_FRAG_DEPTH\\n# define FRAG_DEPTH\\n# define gl_FragDepth gl_FragDepthEXT\\n#endif\\n\";\n  }\n\n  if (hasFeatures(gl, FEATURES.GLSL_DERIVATIVES) && canCompileGLGSExtension(gl, FEATURES.GLSL_DERIVATIVES)) {\n    versionDefines += \"\\n// DERIVATIVES => dxdF, dxdY and fwidth are available\\n#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n# define FEATURE_GLSL_DERIVATIVES\\n# define DERIVATIVES\\n#endif\\n\";\n  }\n\n  if (hasFeatures(gl, FEATURES.GLSL_FRAG_DATA) && canCompileGLGSExtension(gl, FEATURES.GLSL_FRAG_DATA, {\n    behavior: 'require'\n  })) {\n    versionDefines += \"\\n// DRAW_BUFFERS => gl_FragData[] is available\\n#ifdef GL_EXT_draw_buffers\\n#extension GL_EXT_draw_buffers : require\\n#define FEATURE_GLSL_DRAW_BUFFERS\\n#define DRAW_BUFFERS\\n#endif\\n\";\n  }\n\n  if (hasFeatures(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n    versionDefines += \"// TEXTURE_LOD => texture2DLod etc are available\\n#ifdef GL_EXT_shader_texture_lod\\n#extension GL_EXT_shader_texture_lod : enable\\n\\n# define FEATURE_GLSL_TEXTURE_LOD\\n# define TEXTURE_LOD\\n\\n#endif\\n\";\n  }\n\n  return versionDefines;\n}\n//# sourceMappingURL=platform-defines.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/inject-shader.js + 1 modules\nvar inject_shader = __webpack_require__(60827);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/transpile-shader.js\nfunction testVariable(qualifier) {\n  return new RegExp(\"\\\\b\".concat(qualifier, \"[ \\\\t]+(\\\\w+[ \\\\t]+\\\\w+(\\\\[\\\\w+\\\\])?;)\"), 'g');\n}\n\nconst ES300_REPLACEMENTS = [[/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n'], [/\\btexture(2D|2DProj|Cube)Lod(EXT)?\\(/g, 'textureLod('], [/\\btexture(2D|2DProj|Cube)(EXT)?\\(/g, 'texture(']];\nconst ES300_VERTEX_REPLACEMENTS = [...ES300_REPLACEMENTS, [testVariable('attribute'), 'in $1'], [testVariable('varying'), 'out $1']];\nconst ES300_FRAGMENT_REPLACEMENTS = [...ES300_REPLACEMENTS, [testVariable('varying'), 'in $1']];\nconst ES100_REPLACEMENTS = [[/^#version[ \\t]+300[ \\t]+es/, '#version 100'], [/\\btexture(2D|2DProj|Cube)Lod\\(/g, 'texture$1LodEXT('], [/\\btexture\\(/g, 'texture2D('], [/\\btextureLod\\(/g, 'texture2DLodEXT(']];\nconst ES100_VERTEX_REPLACEMENTS = [...ES100_REPLACEMENTS, [testVariable('in'), 'attribute $1'], [testVariable('out'), 'varying $1']];\nconst ES100_FRAGMENT_REPLACEMENTS = [...ES100_REPLACEMENTS, [testVariable('in'), 'varying $1']];\nconst ES100_FRAGMENT_OUTPUT_NAME = 'gl_FragColor';\nconst ES300_FRAGMENT_OUTPUT_REGEX = /\\bout[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\n?/;\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/;\nfunction transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertShader(source, ES300_VERTEX_REPLACEMENTS) : convertFragmentShaderTo300(source);\n\n    case 100:\n      return isVertex ? convertShader(source, ES100_VERTEX_REPLACEMENTS) : convertFragmentShaderTo100(source);\n\n    default:\n      throw new Error(\"unknown GLSL version \".concat(targetGLSLVersion));\n  }\n}\n\nfunction convertShader(source, replacements) {\n  for (const [pattern, replacement] of replacements) {\n    source = source.replace(pattern, replacement);\n  }\n\n  return source;\n}\n\nfunction convertFragmentShaderTo300(source) {\n  source = convertShader(source, ES300_FRAGMENT_REPLACEMENTS);\n  const outputMatch = source.match(ES300_FRAGMENT_OUTPUT_REGEX);\n\n  if (outputMatch) {\n    const outputName = outputMatch[1];\n    source = source.replace(new RegExp(\"\\\\b\".concat(ES100_FRAGMENT_OUTPUT_NAME, \"\\\\b\"), 'g'), outputName);\n  } else {\n    const outputName = 'fragmentColor';\n    source = source.replace(REGEX_START_OF_MAIN, match => \"out vec4 \".concat(outputName, \";\\n\").concat(match)).replace(new RegExp(\"\\\\b\".concat(ES100_FRAGMENT_OUTPUT_NAME, \"\\\\b\"), 'g'), outputName);\n  }\n\n  return source;\n}\n\nfunction convertFragmentShaderTo100(source) {\n  source = convertShader(source, ES100_FRAGMENT_REPLACEMENTS);\n  const outputMatch = source.match(ES300_FRAGMENT_OUTPUT_REGEX);\n\n  if (outputMatch) {\n    const outputName = outputMatch[1];\n    source = source.replace(ES300_FRAGMENT_OUTPUT_REGEX, '').replace(new RegExp(\"\\\\b\".concat(outputName, \"\\\\b\"), 'g'), ES100_FRAGMENT_OUTPUT_NAME);\n  }\n\n  return source;\n}\n//# sourceMappingURL=transpile-shader.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/assemble-shaders.js\n\n\n\n\n\n\nconst INJECT_SHADER_DECLARATIONS = \"\\n\\n\".concat(inject_shader/* DECLARATION_INJECT_MARKER */.O_, \"\\n\\n\");\nconst SHADER_TYPE = {\n  [constants/* VERTEX_SHADER */.H]: 'vertex',\n  [constants/* FRAGMENT_SHADER */.Y]: 'fragment'\n};\nconst FRAGMENT_SHADER_PROLOGUE = \"precision highp float;\\n\\n\";\nfunction assembleShaders(gl, opts) {\n  const {\n    vs,\n    fs\n  } = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {\n      source: vs,\n      type: constants/* VERTEX_SHADER */.H,\n      modules\n    })),\n    fs: assembleShader(gl, Object.assign({}, opts, {\n      source: fs,\n      type: constants/* FRAGMENT_SHADER */.Y,\n      modules\n    })),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\n\nfunction assembleShader(gl, _ref) {\n  let {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = [],\n    inject = {},\n    transpileToGLSL100 = false,\n    prologue = true,\n    log\n  } = _ref;\n  (0,assert/* default */.Z)(typeof source === 'string', 'shader source must be a string');\n  const isVertex = type === constants/* VERTEX_SHADER */.H;\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300;\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = \"#version \".concat(glslVersion);\n  }\n\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n  let assembledSource = prologue ? \"\".concat(versionLine, \"\\n\").concat(getShaderName({\n    id,\n    source,\n    type\n  }), \"\\n\").concat(getShaderType({\n    type\n  }), \"\\n\").concat(getPlatformShaderDefines(gl), \"\\n\").concat(getVersionDefines(gl, glslVersion, !isVertex), \"\\n\").concat(getApplicationDefines(allDefines), \"\\n\").concat(isVertex ? '' : FRAGMENT_SHADER_PROLOGUE, \"\\n\") : \"\".concat(versionLine, \"\\n\");\n  const hookFunctionMap = normalizeHookFunctions(hookFunctions);\n  const hookInjections = {};\n  const declInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection = typeof inject[key] === 'string' ? {\n      injection: inject[key],\n      order: 0\n    } : inject[key];\n    const match = key.match(/^(v|f)s:(#)?([\\w-]+)$/);\n\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection];\n        } else {\n          mainInjections[key] = [injection];\n        }\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    if (log) {\n      module.checkDeprecations(coreSource, log);\n    }\n\n    const moduleSource = module.getModuleSource(type, glslVersion);\n    assembledSource += moduleSource;\n    const injections = module.injections[type];\n\n    for (const key in injections) {\n      const match = key.match(/^(v|f)s:#([\\w-]+)$/);\n\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n  assembledSource = (0,inject_shader/* default */.ZP)(assembledSource, type, declInjections);\n  assembledSource += getHookFunctions(hookFunctionMap[type], hookInjections);\n  assembledSource += coreSource;\n  assembledSource = (0,inject_shader/* default */.ZP)(assembledSource, type, mainInjections);\n  assembledSource = transpileShader(assembledSource, transpileToGLSL100 ? 100 : glslVersion, isVertex);\n  return assembledSource;\n}\n\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n\n    for (const module of modules) {\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n\n    return uniforms;\n  };\n}\n\nfunction getShaderType(_ref2) {\n  let {\n    type\n  } = _ref2;\n  return \"\\n#define SHADER_TYPE_\".concat(SHADER_TYPE[type].toUpperCase(), \"\\n\");\n}\n\nfunction getShaderName(_ref3) {\n  let {\n    id,\n    source,\n    type\n  } = _ref3;\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName ? \"\\n#define SHADER_NAME \".concat(id, \"_\").concat(SHADER_TYPE[type], \"\\n\\n\") : '';\n}\n\nfunction getApplicationDefines() {\n  let defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let count = 0;\n  let sourceText = '';\n\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n\n    count++;\n    const value = defines[define];\n\n    if (value || Number.isFinite(value)) {\n      sourceText += \"#define \".concat(define.toUpperCase(), \" \").concat(defines[define], \"\\n\");\n    }\n  }\n\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n\n  return sourceText;\n}\n\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += \"void \".concat(hookFunction.signature, \" {\\n\");\n\n    if (hookFunction.header) {\n      result += \"  \".concat(hookFunction.header);\n    }\n\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n\n      for (const injection of injections) {\n        result += \"  \".concat(injection.injection, \"\\n\");\n      }\n    }\n\n    if (hookFunction.footer) {\n      result += \"  \".concat(hookFunction.footer);\n    }\n\n    result += '}\\n';\n  }\n\n  return result;\n}\n\nfunction normalizeHookFunctions(hookFunctions) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n  hookFunctions.forEach(hook => {\n    let opts;\n\n    if (typeof hook !== 'string') {\n      opts = hook;\n      hook = opts.hook;\n    } else {\n      opts = {};\n    }\n\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    result[stage][name] = Object.assign(opts, {\n      signature\n    });\n  });\n  return result;\n}\n//# sourceMappingURL=assemble-shaders.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/program.js + 6 modules\nvar program = __webpack_require__(75433);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/program-manager.js\n\n\nclass ProgramManager {\n  static getDefaultProgramManager(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n    return gl.luma.defaultProgramManager;\n  }\n\n  constructor(gl) {\n    this.gl = gl;\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {};\n    this._hookFunctions = [];\n    this._defaultModules = [];\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0;\n    this._useCounts = {};\n  }\n\n  addDefaultModule(module) {\n    if (!this._defaultModules.find(m => m.name === module.name)) {\n      this._defaultModules.push(module);\n    }\n\n    this.stateHash++;\n  }\n\n  removeDefaultModule(module) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);\n    this.stateHash++;\n  }\n\n  addShaderHook(hook, opts) {\n    if (opts) {\n      hook = Object.assign(opts, {\n        hook\n      });\n    }\n\n    this._hookFunctions.push(hook);\n\n    this.stateHash++;\n  }\n\n  get() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      vs = '',\n      fs = '',\n      defines = {},\n      inject = {},\n      varyings = [],\n      bufferMode = 0x8c8d,\n      transpileToGLSL100 = false\n    } = props;\n\n    const modules = this._getModuleList(props.modules);\n\n    const vsHash = this._getHash(vs);\n\n    const fsHash = this._getHash(fs);\n\n    const moduleHashes = modules.map(m => this._getHash(m.name)).sort();\n    const varyingHashes = varyings.map(v => this._getHash(v));\n    const defineKeys = Object.keys(defines).sort();\n    const injectKeys = Object.keys(inject).sort();\n    const defineHashes = [];\n    const injectHashes = [];\n\n    for (const key of defineKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(defines[key]));\n    }\n\n    for (const key of injectKeys) {\n      injectHashes.push(this._getHash(key));\n      injectHashes.push(this._getHash(inject[key]));\n    }\n\n    const hash = \"\".concat(vsHash, \"/\").concat(fsHash, \"D\").concat(defineHashes.join('/'), \"M\").concat(moduleHashes.join('/'), \"I\").concat(injectHashes.join('/'), \"V\").concat(varyingHashes.join('/'), \"H\").concat(this.stateHash, \"B\").concat(bufferMode).concat(transpileToGLSL100 ? 'T' : '');\n\n    if (!this._programCache[hash]) {\n      const assembled = assembleShaders(this.gl, {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        hookFunctions: this._hookFunctions,\n        transpileToGLSL100\n      });\n      this._programCache[hash] = new program/* default */.Z(this.gl, {\n        hash,\n        vs: assembled.vs,\n        fs: assembled.fs,\n        varyings,\n        bufferMode\n      });\n\n      this._getUniforms[hash] = assembled.getUniforms || (x => {});\n\n      this._useCounts[hash] = 0;\n    }\n\n    this._useCounts[hash]++;\n    return this._programCache[hash];\n  }\n\n  getUniforms(program) {\n    return this._getUniforms[program.hash] || null;\n  }\n\n  release(program) {\n    const hash = program.hash;\n    this._useCounts[hash]--;\n\n    if (this._useCounts[hash] === 0) {\n      this._programCache[hash].delete();\n\n      delete this._programCache[hash];\n      delete this._getUniforms[hash];\n      delete this._useCounts[hash];\n    }\n  }\n\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n\n    return this._hashes[key];\n  }\n\n  _getModuleList() {\n    let appModules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const modules = new Array(this._defaultModules.length + appModules.length);\n    const seen = {};\n    let count = 0;\n\n    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {\n      const module = this._defaultModules[i];\n      const name = module.name;\n      modules[count++] = module;\n      seen[name] = true;\n    }\n\n    for (let i = 0, len = appModules.length; i < len; ++i) {\n      const module = appModules[i];\n      const name = module.name;\n\n      if (!seen[name]) {\n        modules[count++] = module;\n        seen[name] = true;\n      }\n    }\n\n    modules.length = count;\n    return modules;\n  }\n\n}\n//# sourceMappingURL=program-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43426\n")},19718:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ Transform; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/utils/assert.js\nvar assert = __webpack_require__(29047);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/utils/shader-utils.js\n\nconst FS100 = "void main() {gl_FragColor = vec4(0);}";\nconst FS_GLES = "out vec4 transform_output;\\nvoid main() {\\n  transform_output = vec4(0);\\n}";\nconst FS300 = "#version 300 es\\n".concat(FS_GLES);\nfunction getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, \'\').split(/\\s+/);\n  const [qualifier, type, definition] = words;\n\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n\n  const name = definition.split(\';\')[0];\n  return {\n    qualifier,\n    type,\n    name\n  };\n}\nfunction getPassthroughFS() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    version = 100,\n    input,\n    inputType,\n    output\n  } = options;\n\n  if (!input) {\n    if (version === 300) {\n      return FS300;\n    } else if (version > 300) {\n      return "#version ".concat(version, "\\n").concat(FS_GLES);\n    }\n\n    return FS100;\n  }\n\n  const outputValue = convertToVec4(input, inputType);\n\n  if (version >= 300) {\n    return "#version ".concat(version, " ").concat(version === 300 ? \'es\' : \'\', "\\nin ").concat(inputType, " ").concat(input, ";\\nout vec4 ").concat(output, ";\\nvoid main() {\\n  ").concat(output, " = ").concat(outputValue, ";\\n}");\n  }\n\n  return "varying ".concat(inputType, " ").concat(input, ";\\nvoid main() {\\n  gl_FragColor = ").concat(outputValue, ";\\n}");\n}\nfunction typeToChannelSuffix(type) {\n  switch (type) {\n    case \'float\':\n      return \'x\';\n\n    case \'vec2\':\n      return \'xy\';\n\n    case \'vec3\':\n      return \'xyz\';\n\n    case \'vec4\':\n      return \'xyzw\';\n\n    default:\n      (0,assert/* default */.Z)(false);\n      return null;\n  }\n}\nfunction typeToChannelCount(type) {\n  switch (type) {\n    case \'float\':\n      return 1;\n\n    case \'vec2\':\n      return 2;\n\n    case \'vec3\':\n      return 3;\n\n    case \'vec4\':\n      return 4;\n\n    default:\n      (0,assert/* default */.Z)(false);\n      return null;\n  }\n}\nfunction convertToVec4(variable, type) {\n  switch (type) {\n    case \'float\':\n      return "vec4(".concat(variable, ", 0.0, 0.0, 1.0)");\n\n    case \'vec2\':\n      return "vec4(".concat(variable, ", 0.0, 1.0)");\n\n    case \'vec3\':\n      return "vec4(".concat(variable, ", 1.0)");\n\n    case \'vec4\':\n      return variable;\n\n    default:\n      (0,assert/* default */.Z)(false);\n      return null;\n  }\n}\n//# sourceMappingURL=shader-utils.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/buffer.js\nvar classes_buffer = __webpack_require__(53478);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/transform-feedback.js\nvar transform_feedback = __webpack_require__(51053);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar utils_assert = __webpack_require__(22525);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/transform/buffer-transform.js\n\n\n\nclass BufferTransform {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.currentIndex = 0;\n    this.feedbackMap = {};\n    this.varyings = null;\n    this.bindings = [];\n    this.resources = {};\n\n    this._initialize(props);\n\n    Object.seal(this);\n  }\n\n  setupResources(opts) {\n    for (const binding of this.bindings) {\n      this._setupTransformFeedback(binding, opts);\n    }\n  }\n\n  updateModelProps() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      varyings\n    } = this;\n\n    if (varyings.length > 0) {\n      props = Object.assign({}, props, {\n        varyings\n      });\n    }\n\n    return props;\n  }\n\n  getDrawOptions() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const binding = this.bindings[this.currentIndex];\n    const {\n      sourceBuffers,\n      transformFeedback\n    } = binding;\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n    return {\n      attributes,\n      transformFeedback\n    };\n  }\n\n  swap() {\n    if (this.feedbackMap) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n\n    return false;\n  }\n\n  update() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this._setupBuffers(opts);\n  }\n\n  getBuffer(varyingName) {\n    const {\n      feedbackBuffers\n    } = this.bindings[this.currentIndex];\n    const bufferOrParams = varyingName ? feedbackBuffers[varyingName] : null;\n\n    if (!bufferOrParams) {\n      return null;\n    }\n\n    return bufferOrParams instanceof classes_buffer/* default */.Z ? bufferOrParams : bufferOrParams.buffer;\n  }\n\n  getData() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      varyingName\n    } = options;\n    const buffer = this.getBuffer(varyingName);\n\n    if (buffer) {\n      return buffer.getData();\n    }\n\n    return null;\n  }\n\n  delete() {\n    for (const name in this.resources) {\n      this.resources[name].delete();\n    }\n  }\n\n  _initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this._setupBuffers(props);\n\n    this.varyings = props.varyings || Object.keys(this.bindings[this.currentIndex].feedbackBuffers);\n\n    if (this.varyings.length > 0) {\n      (0,utils_assert/* assert */.h)((0,esm/* isWebGL2 */.D0)(this.gl));\n    }\n  }\n\n  _getFeedbackBuffers(props) {\n    const {\n      sourceBuffers = {}\n    } = props;\n    const feedbackBuffers = {};\n\n    if (this.bindings[this.currentIndex]) {\n      Object.assign(feedbackBuffers, this.bindings[this.currentIndex].feedbackBuffers);\n    }\n\n    if (this.feedbackMap) {\n      for (const sourceName in this.feedbackMap) {\n        const feedbackName = this.feedbackMap[sourceName];\n\n        if (sourceName in sourceBuffers) {\n          feedbackBuffers[feedbackName] = sourceName;\n        }\n      }\n    }\n\n    Object.assign(feedbackBuffers, props.feedbackBuffers);\n\n    for (const bufferName in feedbackBuffers) {\n      const bufferOrRef = feedbackBuffers[bufferName];\n\n      if (typeof bufferOrRef === \'string\') {\n        const sourceBuffer = sourceBuffers[bufferOrRef];\n        const {\n          byteLength,\n          usage,\n          accessor\n        } = sourceBuffer;\n        feedbackBuffers[bufferName] = this._createNewBuffer(bufferName, {\n          byteLength,\n          usage,\n          accessor\n        });\n      }\n    }\n\n    return feedbackBuffers;\n  }\n\n  _setupBuffers() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      sourceBuffers = null\n    } = props;\n    Object.assign(this.feedbackMap, props.feedbackMap);\n\n    const feedbackBuffers = this._getFeedbackBuffers(props);\n\n    this._updateBindings({\n      sourceBuffers,\n      feedbackBuffers\n    });\n  }\n\n  _setupTransformFeedback(binding, _ref) {\n    let {\n      model\n    } = _ref;\n    const {\n      program\n    } = model;\n    binding.transformFeedback = new transform_feedback/* default */.Z(this.gl, {\n      program,\n      buffers: binding.feedbackBuffers\n    });\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n\n    if (this.feedbackMap) {\n      const {\n        sourceBuffers,\n        feedbackBuffers\n      } = this._swapBuffers(this.bindings[this.currentIndex]);\n\n      const nextIndex = this._getNextIndex();\n\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    if (!binding) {\n      return {\n        sourceBuffers: Object.assign({}, opts.sourceBuffers),\n        feedbackBuffers: Object.assign({}, opts.feedbackBuffers)\n      };\n    }\n\n    Object.assign(binding.sourceBuffers, opts.sourceBuffers);\n    Object.assign(binding.feedbackBuffers, opts.feedbackBuffers);\n\n    if (binding.transformFeedback) {\n      binding.transformFeedback.setBuffers(binding.feedbackBuffers);\n    }\n\n    return binding;\n  }\n\n  _swapBuffers(opts) {\n    if (!this.feedbackMap) {\n      return null;\n    }\n\n    const sourceBuffers = Object.assign({}, opts.sourceBuffers);\n    const feedbackBuffers = Object.assign({}, opts.feedbackBuffers);\n\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      sourceBuffers[srcName] = opts.feedbackBuffers[dstName];\n      feedbackBuffers[dstName] = opts.sourceBuffers[srcName];\n      (0,utils_assert/* assert */.h)(feedbackBuffers[dstName] instanceof classes_buffer/* default */.Z);\n    }\n\n    return {\n      sourceBuffers,\n      feedbackBuffers\n    };\n  }\n\n  _createNewBuffer(name, opts) {\n    const buffer = new classes_buffer/* default */.Z(this.gl, opts);\n\n    if (this.resources[name]) {\n      this.resources[name].delete();\n    }\n\n    this.resources[name] = buffer;\n    return buffer;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n\n}\n//# sourceMappingURL=buffer-transform.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/copy-and-blit.js + 1 modules\nvar copy_and_blit = __webpack_require__(81913);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-2d.js + 1 modules\nvar texture_2d = __webpack_require__(51621);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/framebuffer.js\nvar classes_framebuffer = __webpack_require__(53849);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/webgl-utils/texture-utils.js + 2 modules\nvar texture_utils = __webpack_require__(73462);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/glsl-utils/get-shader-version.js\nvar get_shader_version = __webpack_require__(27588);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/inject-shader.js + 1 modules\nvar inject_shader = __webpack_require__(60827);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/transform/transform.js\nconst vs = "attribute float transform_elementID;\\nvec2 transform_getPixelSizeHalf(vec2 size) {\\n  return vec2(1.) / (2. * size);\\n}\\n\\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\\n  return vec2(xIndex, yIndex);\\n}\\nvec2 transform_getTexCoord(vec2 size) {\\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\\n  vec2 coord = indices / size + pixelSizeHalf;\\n  return coord;\\n}\\nvec2 transform_getPos(vec2 size) {\\n  vec2 texCoord = transform_getTexCoord(size);\\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\\n  return pos;\\n}\\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\\n  vec2 texCoord = transform_getTexCoord(size);\\n  vec4 textureColor = texture2D(texSampler, texCoord);\\n  return textureColor;\\n}\\n";\nconst transform = {\n  name: \'transform\',\n  vs,\n  fs: null\n};\n//# sourceMappingURL=transform.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/transform/transform-shader-utils.js\n\n\nconst SAMPLER_UNIFORM_PREFIX = \'transform_uSampler_\';\nconst SIZE_UNIFORM_PREFIX = \'transform_uSize_\';\nconst VS_POS_VARIABLE = \'transform_position\';\nfunction updateForTextures(_ref) {\n  let {\n    vs,\n    sourceTextureMap,\n    targetTextureVarying,\n    targetTexture\n  } = _ref;\n  const texAttributeNames = Object.keys(sourceTextureMap);\n  let sourceCount = texAttributeNames.length;\n  let targetTextureType = null;\n  const samplerTextureMap = {};\n  let updatedVs = vs;\n  let finalInject = {};\n\n  if (sourceCount > 0 || targetTextureVarying) {\n    const vsLines = updatedVs.split(\'\\n\');\n    const updateVsLines = vsLines.slice();\n    vsLines.forEach((line, index, lines) => {\n      if (sourceCount > 0) {\n        const updated = processAttributeDefinition(line, sourceTextureMap);\n\n        if (updated) {\n          const {\n            updatedLine,\n            inject\n          } = updated;\n          updateVsLines[index] = updatedLine;\n          finalInject = (0,inject_shader/* combineInjects */.Lm)([finalInject, inject]);\n          Object.assign(samplerTextureMap, updated.samplerTextureMap);\n          sourceCount--;\n        }\n      }\n\n      if (targetTextureVarying && !targetTextureType) {\n        targetTextureType = getVaryingType(line, targetTextureVarying);\n      }\n    });\n\n    if (targetTextureVarying) {\n      (0,utils_assert/* assert */.h)(targetTexture);\n      const sizeName = "".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying);\n      const uniformDeclaration = "uniform vec2 ".concat(sizeName, ";\\n");\n      const posInstructions = "     vec2 ".concat(VS_POS_VARIABLE, " = transform_getPos(").concat(sizeName, ");\\n     gl_Position = vec4(").concat(VS_POS_VARIABLE, ", 0, 1.);\\n");\n      const inject = {\n        \'vs:#decl\': uniformDeclaration,\n        \'vs:#main-start\': posInstructions\n      };\n      finalInject = (0,inject_shader/* combineInjects */.Lm)([finalInject, inject]);\n    }\n\n    updatedVs = updateVsLines.join(\'\\n\');\n  }\n\n  return {\n    vs: updatedVs,\n    targetTextureType,\n    inject: finalInject,\n    samplerTextureMap\n  };\n}\nfunction getSizeUniforms(_ref2) {\n  let {\n    sourceTextureMap,\n    targetTextureVarying,\n    targetTexture\n  } = _ref2;\n  const uniforms = {};\n  let width;\n  let height;\n\n  if (targetTextureVarying) {\n    ({\n      width,\n      height\n    } = targetTexture);\n    uniforms["".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying)] = [width, height];\n  }\n\n  for (const textureName in sourceTextureMap) {\n    ({\n      width,\n      height\n    } = sourceTextureMap[textureName]);\n    uniforms["".concat(SIZE_UNIFORM_PREFIX).concat(textureName)] = [width, height];\n  }\n\n  return uniforms;\n}\n\nfunction getAttributeDefinition(line) {\n  return getQualifierDetails(line, [\'attribute\', \'in\']);\n}\n\nfunction getSamplerDeclerations(textureName) {\n  const samplerName = "".concat(SAMPLER_UNIFORM_PREFIX).concat(textureName);\n  const sizeName = "".concat(SIZE_UNIFORM_PREFIX).concat(textureName);\n  const uniformDeclerations = "  uniform sampler2D ".concat(samplerName, ";\\n  uniform vec2 ").concat(sizeName, ";");\n  return {\n    samplerName,\n    sizeName,\n    uniformDeclerations\n  };\n}\n\nfunction getVaryingType(line, varying) {\n  const qualaiferDetails = getQualifierDetails(line, [\'varying\', \'out\']);\n\n  if (!qualaiferDetails) {\n    return null;\n  }\n\n  return qualaiferDetails.name === varying ? qualaiferDetails.type : null;\n}\nfunction processAttributeDefinition(line, textureMap) {\n  const samplerTextureMap = {};\n  const attributeData = getAttributeDefinition(line);\n\n  if (!attributeData) {\n    return null;\n  }\n\n  const {\n    type,\n    name\n  } = attributeData;\n\n  if (name && textureMap[name]) {\n    const updatedLine = "// ".concat(line, " => Replaced by Transform with a sampler");\n    const {\n      samplerName,\n      sizeName,\n      uniformDeclerations\n    } = getSamplerDeclerations(name);\n    const channels = typeToChannelSuffix(type);\n    const sampleInstruction = "  ".concat(type, " ").concat(name, " = transform_getInput(").concat(samplerName, ", ").concat(sizeName, ").").concat(channels, ";\\n");\n    samplerTextureMap[samplerName] = name;\n    const inject = {\n      \'vs:#decl\': uniformDeclerations,\n      \'vs:#main-start\': sampleInstruction\n    };\n    return {\n      updatedLine,\n      inject,\n      samplerTextureMap\n    };\n  }\n\n  return null;\n}\n//# sourceMappingURL=transform-shader-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/transform/texture-transform.js\n\n\n\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [10241]: 9728,\n  [10240]: 9728,\n  [10242]: 33071,\n  [10243]: 33071\n};\nconst FS_OUTPUT_VARIABLE = \'transform_output\';\nclass TextureTransform {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.id = this.currentIndex = 0;\n    this._swapTexture = null;\n    this.targetTextureVarying = null;\n    this.targetTextureType = null;\n    this.samplerTextureMap = null;\n    this.bindings = [];\n    this.resources = {};\n\n    this._initialize(props);\n\n    Object.seal(this);\n  }\n\n  updateModelProps() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const updatedModelProps = this._processVertexShader(props);\n\n    return Object.assign({}, props, updatedModelProps);\n  }\n\n  getDrawOptions() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      sourceBuffers,\n      sourceTextures,\n      framebuffer,\n      targetTexture\n    } = this.bindings[this.currentIndex];\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n    const uniforms = Object.assign({}, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    let discard = opts.discard;\n\n    if (this.hasSourceTextures || this.hasTargetTexture) {\n      attributes.transform_elementID = this.elementIDBuffer;\n\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = sourceTextures[textureName];\n      }\n\n      this._setSourceTextureParameters();\n\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: sourceTextures,\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n\n    if (this.hasTargetTexture) {\n      discard = false;\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n    }\n\n    return {\n      attributes,\n      framebuffer,\n      uniforms,\n      discard,\n      parameters\n    };\n  }\n\n  swap() {\n    if (this._swapTexture) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n\n    return false;\n  }\n\n  update() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this._setupTextures(opts);\n  }\n\n  getTargetTexture() {\n    const {\n      targetTexture\n    } = this.bindings[this.currentIndex];\n    return targetTexture;\n  }\n\n  getData() {\n    let {\n      packed = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      framebuffer\n    } = this.bindings[this.currentIndex];\n    const pixels = (0,copy_and_blit/* readPixelsToArray */.z6)(framebuffer);\n\n    if (!packed) {\n      return pixels;\n    }\n\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    const packedPixels = new ArrayType(pixels.length * channelCount / 4);\n    let packCount = 0;\n\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n\n    return packedPixels;\n  }\n\n  getFramebuffer() {\n    const currentResources = this.bindings[this.currentIndex];\n    return currentResources.framebuffer;\n  }\n\n  delete() {\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n\n    if (this.elementIDBuffer) {\n      this.elementIDBuffer.delete();\n    }\n  }\n\n  _initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      _targetTextureVarying,\n      _swapTexture\n    } = props;\n    this._swapTexture = _swapTexture;\n    this.targetTextureVarying = _targetTextureVarying;\n    this.hasTargetTexture = _targetTextureVarying;\n\n    this._setupTextures(props);\n  }\n\n  _createTargetTexture(props) {\n    const {\n      sourceTextures,\n      textureOrReference\n    } = props;\n\n    if (textureOrReference instanceof texture_2d/* default */.Z) {\n      return textureOrReference;\n    }\n\n    const refTexture = sourceTextures[textureOrReference];\n\n    if (!refTexture) {\n      return null;\n    }\n\n    this._targetRefTexName = textureOrReference;\n    return this._createNewTexture(refTexture);\n  }\n\n  _setupTextures() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      sourceBuffers,\n      _sourceTextures = {},\n      _targetTexture\n    } = props;\n\n    const targetTexture = this._createTargetTexture({\n      sourceTextures: _sourceTextures,\n      textureOrReference: _targetTexture\n    });\n\n    this.hasSourceTextures = this.hasSourceTextures || _sourceTextures && Object.keys(_sourceTextures).length > 0;\n\n    this._updateBindings({\n      sourceBuffers,\n      sourceTextures: _sourceTextures,\n      targetTexture\n    });\n\n    if (\'elementCount\' in props) {\n      this._updateElementIDBuffer(props.elementCount);\n    }\n  }\n\n  _updateElementIDBuffer(elementCount) {\n    if (typeof elementCount !== \'number\' || this.elementCount >= elementCount) {\n      return;\n    }\n\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new classes_buffer/* default */.Z(this.gl, {\n        data: elementIds,\n        accessor: {\n          size: 1\n        }\n      });\n    } else {\n      this.elementIDBuffer.setData({\n        data: elementIds\n      });\n    }\n\n    this.elementCount = elementCount;\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n\n    if (this._swapTexture) {\n      const {\n        sourceTextures,\n        targetTexture\n      } = this._swapTextures(this.bindings[this.currentIndex]);\n\n      const nextIndex = this._getNextIndex();\n\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceTextures,\n        targetTexture\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    const {\n      sourceBuffers,\n      sourceTextures,\n      targetTexture\n    } = opts;\n\n    if (!binding) {\n      binding = {\n        sourceBuffers: {},\n        sourceTextures: {},\n        targetTexture: null\n      };\n    }\n\n    Object.assign(binding.sourceTextures, sourceTextures);\n    Object.assign(binding.sourceBuffers, sourceBuffers);\n\n    if (targetTexture) {\n      binding.targetTexture = targetTexture;\n      const {\n        width,\n        height\n      } = targetTexture;\n      const {\n        framebuffer\n      } = binding;\n\n      if (framebuffer) {\n        framebuffer.update({\n          attachments: {\n            [36064]: targetTexture\n          },\n          resizeAttachments: false\n        });\n        framebuffer.resize({\n          width,\n          height\n        });\n      } else {\n        binding.framebuffer = new classes_framebuffer/* default */.Z(this.gl, {\n          id: "transform-framebuffer",\n          width,\n          height,\n          attachments: {\n            [36064]: targetTexture\n          }\n        });\n      }\n    }\n\n    return binding;\n  }\n\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    const {\n      sourceTextures\n    } = this.bindings[index];\n\n    for (const name in sourceTextures) {\n      sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  _swapTextures(opts) {\n    if (!this._swapTexture) {\n      return null;\n    }\n\n    const sourceTextures = Object.assign({}, opts.sourceTextures);\n    sourceTextures[this._swapTexture] = opts.targetTexture;\n    const targetTexture = opts.sourceTextures[this._swapTexture];\n    return {\n      sourceTextures,\n      targetTexture\n    };\n  }\n\n  _createNewTexture(refTexture) {\n    const texture = (0,texture_utils/* cloneTextureFrom */.h)(refTexture, {\n      parameters: {\n        [10241]: 9728,\n        [10240]: 9728,\n        [10242]: 33071,\n        [10243]: 33071\n      },\n      pixelStore: {\n        [37440]: false\n      }\n    });\n\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n\n    this.ownTexture = texture;\n    return texture;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n\n  _processVertexShader() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      sourceTextures,\n      targetTexture\n    } = this.bindings[this.currentIndex];\n    const {\n      vs,\n      uniforms,\n      targetTextureType,\n      inject,\n      samplerTextureMap\n    } = updateForTextures({\n      vs: props.vs,\n      sourceTextureMap: sourceTextures,\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture\n    });\n    const combinedInject = (0,inject_shader/* combineInjects */.Lm)([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    this.samplerTextureMap = samplerTextureMap;\n    const fs = props._fs || getPassthroughFS({\n      version: (0,get_shader_version/* default */.Z)(vs),\n      input: this.targetTextureVarying,\n      inputType: targetTextureType,\n      output: FS_OUTPUT_VARIABLE\n    });\n    const modules = this.hasSourceTextures || this.targetTextureVarying ? [transform].concat(props.modules || []) : props.modules;\n    return {\n      vs,\n      fs,\n      modules,\n      uniforms,\n      inject: combinedInject\n    };\n  }\n\n}\n//# sourceMappingURL=texture-transform.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/utils.js\nvar utils = __webpack_require__(74538);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/model.js + 1 modules\nvar model = __webpack_require__(80210);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/engine/dist/esm/transform/transform.js\n\n\n\n\n\n\nclass Transform {\n  static isSupported(gl) {\n    return (0,esm/* isWebGL2 */.D0)(gl);\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n\n    this._initialize(props);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    const {\n      model,\n      bufferTransform,\n      textureTransform\n    } = this;\n\n    if (model) {\n      model.delete();\n    }\n\n    if (bufferTransform) {\n      bufferTransform.delete();\n    }\n\n    if (textureTransform) {\n      textureTransform.delete();\n    }\n  }\n\n  run() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      clearRenderTarget = true\n    } = opts;\n\n    const updatedOpts = this._updateDrawOptions(opts);\n\n    if (clearRenderTarget && updatedOpts.framebuffer) {\n      updatedOpts.framebuffer.clear({\n        color: true\n      });\n    }\n\n    this.model.transform(updatedOpts);\n  }\n\n  swap() {\n    let swapped = false;\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n    for (const resourceTransform of resourceTransforms) {\n      swapped = swapped || resourceTransform.swap();\n    }\n\n    (0,utils_assert/* assert */.h)(swapped, \'Nothing to swap\');\n  }\n\n  getBuffer() {\n    let varyingName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n  }\n\n  getData() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n    for (const resourceTransform of resourceTransforms) {\n      const data = resourceTransform.getData(opts);\n\n      if (data) {\n        return data;\n      }\n    }\n\n    return null;\n  }\n\n  getFramebuffer() {\n    return this.textureTransform && this.textureTransform.getFramebuffer();\n  }\n\n  update() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (\'elementCount\' in opts) {\n      this.model.setVertexCount(opts.elementCount);\n    }\n\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n    for (const resourceTransform of resourceTransforms) {\n      resourceTransform.update(opts);\n    }\n  }\n\n  _initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      gl\n    } = this;\n\n    this._buildResourceTransforms(gl, props);\n\n    props = this._updateModelProps(props);\n    this.model = new model/* default */.Z(gl, Object.assign({}, props, {\n      fs: props.fs || getPassthroughFS({\n        version: (0,get_shader_version/* default */.Z)(props.vs)\n      }),\n      id: props.id || \'transform-model\',\n      drawMode: props.drawMode || 0,\n      vertexCount: props.elementCount\n    }));\n    this.bufferTransform && this.bufferTransform.setupResources({\n      model: this.model\n    });\n  }\n\n  _updateModelProps(props) {\n    let updatedProps = Object.assign({}, props);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n    for (const resourceTransform of resourceTransforms) {\n      updatedProps = resourceTransform.updateModelProps(updatedProps);\n    }\n\n    return updatedProps;\n  }\n\n  _buildResourceTransforms(gl, props) {\n    if (canCreateBufferTransform(props)) {\n      this.bufferTransform = new BufferTransform(gl, props);\n    }\n\n    if (canCreateTextureTransform(props)) {\n      this.textureTransform = new TextureTransform(gl, props);\n    }\n\n    (0,utils_assert/* assert */.h)(this.bufferTransform || this.textureTransform, \'must provide source/feedback buffers or source/target textures\');\n  }\n\n  _updateDrawOptions(opts) {\n    let updatedOpts = Object.assign({}, opts);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n\n    for (const resourceTransform of resourceTransforms) {\n      updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n    }\n\n    return updatedOpts;\n  }\n\n}\n\nfunction canCreateBufferTransform(props) {\n  if (!(0,utils/* isObjectEmpty */.nK)(props.feedbackBuffers) || !(0,utils/* isObjectEmpty */.nK)(props.feedbackMap) || props.varyings && props.varyings.length > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction canCreateTextureTransform(props) {\n  if (!(0,utils/* isObjectEmpty */.nK)(props._sourceTextures) || props._targetTexture || props._targetTextureVarying) {\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=transform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19718\n')},77910:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ createGLTFObjects; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/matrix4.js\nvar matrix4 = __webpack_require__(85451);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js + 13 modules\nvar esm = __webpack_require__(1418);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/buffer.js\nvar buffer = __webpack_require__(53478);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/accessor.js\nvar classes_accessor = __webpack_require__(14072);\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/vector3.js\nvar vector3 = __webpack_require__(43855);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/experimental/dist/esm/scenegraph/scenegraph-node.js\nvar scenegraph_node = __webpack_require__(44522);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/scenegraph/group-node.js\n\n\n\nclass GroupNode extends scenegraph_node/* default */.Z {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = Array.isArray(props) ? {\n      children: props\n    } : props;\n    const {\n      children = []\n    } = props;\n    esm/* log.assert */.cM.assert(children.every(child => child instanceof scenegraph_node/* default */.Z), 'every child must an instance of ScenegraphNode');\n    super(props);\n    this.children = children;\n  }\n\n  add() {\n    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n\n    return this;\n  }\n\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n\n    return this;\n  }\n\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n\n  delete() {\n    this.children.forEach(child => child.delete());\n    this.removeAll();\n    super.delete();\n  }\n\n  getBounds() {\n    const result = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n    this.traverse((node, _ref) => {\n      let {\n        worldMatrix\n      } = _ref;\n      const bounds = node.getBounds();\n\n      if (!bounds) {\n        return;\n      }\n\n      const [min, max] = bounds;\n      const center = new vector3/* default */.Z(min).add(max).divide([2, 2, 2]);\n      worldMatrix.transformAsPoint(center, center);\n      const halfSize = new vector3/* default */.Z(max).subtract(min).divide([2, 2, 2]);\n      worldMatrix.transformAsVector(halfSize, halfSize);\n\n      for (let v = 0; v < 8; v++) {\n        const position = new vector3/* default */.Z(v & 0b001 ? -1 : 1, v & 0b010 ? -1 : 1, v & 0b100 ? -1 : 1).multiply(halfSize).add(center);\n\n        for (let i = 0; i < 3; i++) {\n          result[0][i] = Math.min(result[0][i], position[i]);\n          result[1][i] = Math.max(result[1][i], position[i]);\n        }\n      }\n    });\n\n    if (!Number.isFinite(result[0][0])) {\n      return null;\n    }\n\n    return result;\n  }\n\n  traverse(visitor) {\n    let {\n      worldMatrix = new matrix4/* default */.Z()\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const modelMatrix = new matrix4/* default */.Z(worldMatrix).multiplyRight(this.matrix);\n\n    for (const child of this.children) {\n      if (child instanceof GroupNode) {\n        child.traverse(visitor, {\n          worldMatrix: modelMatrix\n        });\n      } else {\n        visitor(child, {\n          worldMatrix: modelMatrix\n        });\n      }\n    }\n  }\n\n}\n//# sourceMappingURL=group-node.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/utils/assert.js\nvar assert = __webpack_require__(22525);\n// EXTERNAL MODULE: ./node_modules/@math.gl/core/dist/esm/classes/quaternion.js + 1 modules\nvar quaternion = __webpack_require__(43897);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/gltf/gltf-animator.js\n\n\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\nfunction accessorToJsArray(accessor) {\n  if (!accessor._animation) {\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n    const length = components * accessor.count;\n    const {\n      buffer,\n      byteOffset\n    } = accessor.bufferView.data;\n    const array = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length);\n\n    if (components === 1) {\n      accessor._animation = Array.from(array);\n    } else {\n      const slicedArray = [];\n\n      for (let i = 0; i < array.length; i += components) {\n        slicedArray.push(Array.from(array.slice(i, i + components)));\n      }\n\n      accessor._animation = slicedArray;\n    }\n  }\n\n  return accessor._animation;\n}\n\nconst helperMatrix = new matrix4/* default */.Z();\n\nfunction applyTranslationRotationScale(gltfNode, node) {\n  node.matrix.identity();\n\n  if (gltfNode.translation) {\n    node.matrix.translate(gltfNode.translation);\n  }\n\n  if (gltfNode.rotation) {\n    const rotationMatrix = helperMatrix.fromQuaternion(gltfNode.rotation);\n    node.matrix.multiplyRight(rotationMatrix);\n  }\n\n  if (gltfNode.scale) {\n    node.matrix.scale(gltfNode.scale);\n  }\n}\n\nconst gltf_animator_quaternion = new quaternion/* default */.Z();\n\nfunction linearInterpolate(target, path, start, stop, ratio) {\n  if (path === 'rotation') {\n    gltf_animator_quaternion.slerp({\n      start,\n      target: stop,\n      ratio\n    });\n\n    for (let i = 0; i < gltf_animator_quaternion.length; i++) {\n      target[path][i] = gltf_animator_quaternion[i];\n    }\n  } else {\n    for (let i = 0; i < start.length; i++) {\n      target[path][i] = ratio * stop[i] + (1 - ratio) * start[i];\n    }\n  }\n}\n\nfunction cubicsplineInterpolate(target, path, _ref) {\n  let {\n    p0,\n    outTangent0,\n    inTangent1,\n    p1,\n    tDiff,\n    ratio: t\n  } = _ref;\n\n  for (let i = 0; i < target[path].length; i++) {\n    const m0 = outTangent0[i] * tDiff;\n    const m1 = inTangent1[i] * tDiff;\n    target[path][i] = (2 * Math.pow(t, 3) - 3 * Math.pow(t, 2) + 1) * p0[i] + (Math.pow(t, 3) - 2 * Math.pow(t, 2) + t) * m0 + (-2 * Math.pow(t, 3) + 3 * Math.pow(t, 2)) * p1[i] + (Math.pow(t, 3) - Math.pow(t, 2)) * m1;\n  }\n}\n\nfunction stepInterpolate(target, path, value) {\n  for (let i = 0; i < value.length; i++) {\n    target[path][i] = value[i];\n  }\n}\n\nfunction interpolate(time, _ref2, target, path) {\n  let {\n    input,\n    interpolation,\n    output\n  } = _ref2;\n  const maxTime = input[input.length - 1];\n  const animationTime = time % maxTime;\n  const nextIndex = input.findIndex(t => t >= animationTime);\n  const previousIndex = Math.max(0, nextIndex - 1);\n\n  if (!Array.isArray(target[path])) {\n    switch (path) {\n      case 'translation':\n        target[path] = [0, 0, 0];\n        break;\n\n      case 'rotation':\n        target[path] = [0, 0, 0, 1];\n        break;\n\n      case 'scale':\n        target[path] = [1, 1, 1];\n        break;\n\n      default:\n        esm/* log.warn */.cM.warn(\"Bad animation path \".concat(path))();\n    }\n  }\n\n  (0,assert/* assert */.h)(target[path].length === output[previousIndex].length);\n  const previousTime = input[previousIndex];\n  const nextTime = input[nextIndex];\n\n  switch (interpolation) {\n    case 'STEP':\n      stepInterpolate(target, path, output[previousIndex]);\n      break;\n\n    case 'LINEAR':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        linearInterpolate(target, path, output[previousIndex], output[nextIndex], ratio);\n      }\n\n      break;\n\n    case 'CUBICSPLINE':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        const tDiff = nextTime - previousTime;\n        const p0 = output[3 * previousIndex + 1];\n        const outTangent0 = output[3 * previousIndex + 2];\n        const inTangent1 = output[3 * nextIndex + 0];\n        const p1 = output[3 * nextIndex + 1];\n        cubicsplineInterpolate(target, path, {\n          p0,\n          outTangent0,\n          inTangent1,\n          p1,\n          tDiff,\n          ratio\n        });\n      }\n\n      break;\n\n    default:\n      esm/* log.warn */.cM.warn(\"Interpolation \".concat(interpolation, \" not supported\"))();\n      break;\n  }\n}\n\nclass GLTFAnimation {\n  constructor(props) {\n    this.startTime = 0;\n    this.playing = true;\n    this.speed = 1;\n    this.channels = [];\n    Object.assign(this, props);\n  }\n\n  animate(timeMs) {\n    if (!this.playing) {\n      return;\n    }\n\n    const absTime = timeMs / 1000;\n    const time = (absTime - this.startTime) * this.speed;\n    this.channels.forEach(_ref3 => {\n      let {\n        sampler,\n        target,\n        path\n      } = _ref3;\n      interpolate(time, sampler, target, path);\n      applyTranslationRotationScale(target, target._node);\n    });\n  }\n\n}\n\nclass GLTFAnimator {\n  constructor(gltf) {\n    this.animations = gltf.animations.map((animation, index) => {\n      const name = animation.name || \"Animation-\".concat(index);\n      const samplers = animation.samplers.map(_ref4 => {\n        let {\n          input,\n          interpolation = 'LINEAR',\n          output\n        } = _ref4;\n        return {\n          input: accessorToJsArray(gltf.accessors[input]),\n          interpolation,\n          output: accessorToJsArray(gltf.accessors[output])\n        };\n      });\n      const channels = animation.channels.map(_ref5 => {\n        let {\n          sampler,\n          target\n        } = _ref5;\n        return {\n          sampler: samplers[sampler],\n          target: gltf.nodes[target.node],\n          path: target.path\n        };\n      });\n      return new GLTFAnimation({\n        name,\n        channels\n      });\n    });\n  }\n\n  animate(time) {\n    this.setTime(time);\n  }\n\n  setTime(time) {\n    this.animations.forEach(animation => animation.animate(time));\n  }\n\n  getAnimations() {\n    return this.animations;\n  }\n\n}\n//# sourceMappingURL=gltf-animator.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/pbr/pbr.js + 2 modules\nvar pbr = __webpack_require__(49764);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/engine/dist/esm/lib/model.js + 1 modules\nvar model = __webpack_require__(80210);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/scenegraph/model-node.js\n\n\nclass ModelNode extends scenegraph_node/* default */.Z {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(props);\n    this.onBeforeRender = null;\n    this.AfterRender = null;\n\n    if (gl instanceof model/* default */.Z) {\n      this.model = gl;\n\n      this._setModelNodeProps(props);\n    } else {\n      this.model = new model/* default */.Z(gl, props);\n    }\n\n    this.bounds = null;\n    this.managedResources = props.managedResources || [];\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    this._setModelNodeProps(props);\n\n    return this;\n  }\n\n  getBounds() {\n    return this.bounds;\n  }\n\n  delete() {\n    if (this.model) {\n      this.model.delete();\n      this.model = null;\n    }\n\n    this.managedResources.forEach(resource => resource.delete());\n    this.managedResources = [];\n  }\n\n  draw() {\n    return this.model.draw(...arguments);\n  }\n\n  setUniforms() {\n    this.model.setUniforms(...arguments);\n    return this;\n  }\n\n  setAttributes() {\n    this.model.setAttributes(...arguments);\n    return this;\n  }\n\n  updateModuleSettings() {\n    this.model.updateModuleSettings(...arguments);\n    return this;\n  }\n\n  _setModelNodeProps(props) {\n    this.model.setProps(props);\n  }\n\n}\n//# sourceMappingURL=model-node.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/features/features.js\nvar features = __webpack_require__(44211);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/features/webgl-features-table.js\nvar webgl_features_table = __webpack_require__(6948);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/webgl/dist/esm/classes/texture-2d.js + 1 modules\nvar texture_2d = __webpack_require__(51621);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/gltf/gltf-material-parser.js\n\nclass GLTFMaterialParser {\n  constructor(gl, _ref) {\n    let {\n      attributes,\n      material,\n      pbrDebug,\n      imageBasedLightingEnvironment,\n      lights,\n      useTangents\n    } = _ref;\n    this.gl = gl;\n    this.defines = {\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    if ((0,features/* hasFeature */.U6)(gl, webgl_features_table/* FEATURES.GLSL_TEXTURE_LOD */.h.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n\n    this.uniforms = {\n      u_Camera: [0, 0, 0],\n      u_MetallicRoughnessValues: [1, 1]\n    };\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  defineIfPresent(value, name) {\n    if (value) {\n      this.defines[name] = 1;\n    }\n  }\n\n  parseTexture(gltfTexture, name) {\n    let define = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const parameters = gltfTexture.texture && gltfTexture.texture.sampler && gltfTexture.texture.sampler.parameters || {};\n    const image = gltfTexture.texture.source.image;\n    let textureOptions;\n    let specialTextureParameters = {};\n\n    if (image.compressed) {\n      textureOptions = image;\n      specialTextureParameters = {\n        [this.gl.TEXTURE_MIN_FILTER]: image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR\n      };\n    } else {\n      textureOptions = {\n        data: image\n      };\n    }\n\n    const texture = new texture_2d/* default */.Z(this.gl, {\n      id: gltfTexture.name || gltfTexture.id,\n      parameters: { ...parameters,\n        ...specialTextureParameters\n      },\n      pixelStore: {\n        [this.gl.UNPACK_FLIP_Y_WEBGL]: false\n      },\n      ...textureOptions\n    });\n    this.uniforms[name] = texture;\n    this.defineIfPresent(define, define);\n    this.generatedTextures.push(texture);\n  }\n\n  parsePbrMetallicRoughness(pbrMetallicRoughness) {\n    if (pbrMetallicRoughness.baseColorTexture) {\n      this.parseTexture(pbrMetallicRoughness.baseColorTexture, 'u_BaseColorSampler', 'HAS_BASECOLORMAP');\n    }\n\n    this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n      this.parseTexture(pbrMetallicRoughness.metallicRoughnessTexture, 'u_MetallicRoughnessSampler', 'HAS_METALROUGHNESSMAP');\n    }\n\n    const {\n      metallicFactor = 1,\n      roughnessFactor = 1\n    } = pbrMetallicRoughness;\n    this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n  }\n\n  parseMaterial(material) {\n    this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n\n    if (material.pbrMetallicRoughness) {\n      this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n    }\n\n    if (material.normalTexture) {\n      this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n      const {\n        scale = 1\n      } = material.normalTexture;\n      this.uniforms.u_NormalScale = scale;\n    }\n\n    if (material.occlusionTexture) {\n      this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n      const {\n        strength = 1\n      } = material.occlusionTexture;\n      this.uniforms.u_OcclusionStrength = strength;\n    }\n\n    if (material.emissiveTexture) {\n      this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n      this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n    }\n\n    if (material.alphaMode === 'MASK') {\n      const {\n        alphaCutoff = 0.5\n      } = material;\n      this.defines.ALPHA_CUTOFF = 1;\n      this.uniforms.u_AlphaCutoff = alphaCutoff;\n    } else if (material.alphaMode === 'BLEND') {\n      esm/* log.warn */.cM.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n      Object.assign(this.parameters, {\n        blend: true,\n        blendEquation: this.gl.FUNC_ADD,\n        blendFunc: [this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA]\n      });\n    }\n  }\n\n  delete() {\n    this.generatedTextures.forEach(texture => texture.delete());\n  }\n\n}\n//# sourceMappingURL=gltf-material-parser.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/gltf/create-gltf-model.js\n\n\n\n\n\nconst vs = \"\\n#if (__VERSION__ < 300)\\n  #define _attr attribute\\n#else\\n  #define _attr in\\n#endif\\n\\n  _attr vec4 POSITION;\\n\\n  #ifdef HAS_NORMALS\\n    _attr vec4 NORMAL;\\n  #endif\\n\\n  #ifdef HAS_TANGENTS\\n    _attr vec4 TANGENT;\\n  #endif\\n\\n  #ifdef HAS_UV\\n    _attr vec2 TEXCOORD_0;\\n  #endif\\n\\n  void main(void) {\\n    vec4 _NORMAL = vec4(0.);\\n    vec4 _TANGENT = vec4(0.);\\n    vec2 _TEXCOORD_0 = vec2(0.);\\n\\n    #ifdef HAS_NORMALS\\n      _NORMAL = NORMAL;\\n    #endif\\n\\n    #ifdef HAS_TANGENTS\\n      _TANGENT = TANGENT;\\n    #endif\\n\\n    #ifdef HAS_UV\\n      _TEXCOORD_0 = TEXCOORD_0;\\n    #endif\\n\\n    pbr_setPositionNormalTangentUV(POSITION, _NORMAL, _TANGENT, _TEXCOORD_0);\\n    gl_Position = u_MVPMatrix * POSITION;\\n  }\\n\";\nconst fs = \"\\n#if (__VERSION__ < 300)\\n  #define fragmentColor gl_FragColor\\n#else\\n  out vec4 fragmentColor;\\n#endif\\n\\n  void main(void) {\\n    fragmentColor = pbr_filterColor(vec4(0));\\n  }\\n\";\n\nfunction addVersionToShader(gl, source) {\n  if ((0,esm/* isWebGL2 */.D0)(gl)) {\n    return \"#version 300 es\\n\".concat(source);\n  }\n\n  return source;\n}\n\nfunction createGLTFModel(gl, options) {\n  const {\n    id,\n    drawMode,\n    vertexCount,\n    attributes,\n    modelOptions\n  } = options;\n  const materialParser = new GLTFMaterialParser(gl, options);\n  esm/* log.info */.cM.info(4, 'createGLTFModel defines: ', materialParser.defines)();\n  const managedResources = [];\n  managedResources.push(...materialParser.generatedTextures);\n  managedResources.push(...Object.values(attributes).map(attribute => attribute.buffer));\n  const model = new ModelNode(gl, Object.assign({\n    id,\n    drawMode,\n    vertexCount,\n    modules: [pbr/* pbr */.b],\n    defines: materialParser.defines,\n    parameters: materialParser.parameters,\n    vs: addVersionToShader(gl, vs),\n    fs: addVersionToShader(gl, fs),\n    managedResources\n  }, modelOptions));\n  model.setProps({\n    attributes\n  });\n  model.setUniforms(materialParser.uniforms);\n  return model;\n}\n//# sourceMappingURL=create-gltf-model.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/gltf/gltf-instantiator.js\n\n\n\n\n\nconst gltf_instantiator_ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst DEFAULT_OPTIONS = {\n  modelOptions: {},\n  pbrDebug: false,\n  imageBasedLightingEnvironment: null,\n  lights: true,\n  useTangents: false\n};\nclass GLTFInstantiator {\n  constructor(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n\n  instantiate(gltf) {\n    this.gltf = gltf;\n    const scenes = (gltf.scenes || []).map(scene => this.createScene(scene));\n    return scenes;\n  }\n\n  createAnimator() {\n    if (Array.isArray(this.gltf.animations)) {\n      return new GLTFAnimator(this.gltf);\n    }\n\n    return null;\n  }\n\n  createScene(gltfScene) {\n    const gltfNodes = gltfScene.nodes || [];\n    const nodes = gltfNodes.map(node => this.createNode(node));\n    const scene = new GroupNode({\n      id: gltfScene.name || gltfScene.id,\n      children: nodes\n    });\n    return scene;\n  }\n\n  createNode(gltfNode) {\n    if (!gltfNode._node) {\n      const gltfChildren = gltfNode.children || [];\n      const children = gltfChildren.map(child => this.createNode(child));\n\n      if (gltfNode.mesh) {\n        children.push(this.createMesh(gltfNode.mesh));\n      }\n\n      const node = new GroupNode({\n        id: gltfNode.name || gltfNode.id,\n        children\n      });\n\n      if (gltfNode.matrix) {\n        node.setMatrix(gltfNode.matrix);\n      } else {\n        node.matrix.identity();\n\n        if (gltfNode.translation) {\n          node.matrix.translate(gltfNode.translation);\n        }\n\n        if (gltfNode.rotation) {\n          const rotationMatrix = new matrix4/* default */.Z().fromQuaternion(gltfNode.rotation);\n          node.matrix.multiplyRight(rotationMatrix);\n        }\n\n        if (gltfNode.scale) {\n          node.matrix.scale(gltfNode.scale);\n        }\n      }\n\n      gltfNode._node = node;\n    }\n\n    return gltfNode._node;\n  }\n\n  createMesh(gltfMesh) {\n    if (!gltfMesh._mesh) {\n      const gltfPrimitives = gltfMesh.primitives || [];\n      const primitives = gltfPrimitives.map((gltfPrimitive, i) => this.createPrimitive(gltfPrimitive, i, gltfMesh));\n      const mesh = new GroupNode({\n        id: gltfMesh.name || gltfMesh.id,\n        children: primitives\n      });\n      gltfMesh._mesh = mesh;\n    }\n\n    return gltfMesh._mesh;\n  }\n\n  getVertexCount(attributes) {\n    esm/* log.warn */.cM.warn('getVertexCount() not found')();\n  }\n\n  createPrimitive(gltfPrimitive, i, gltfMesh) {\n    const model = createGLTFModel(this.gl, Object.assign({\n      id: gltfPrimitive.name || \"\".concat(gltfMesh.name || gltfMesh.id, \"-primitive-\").concat(i),\n      drawMode: gltfPrimitive.mode || 4,\n      vertexCount: gltfPrimitive.indices ? gltfPrimitive.indices.count : this.getVertexCount(gltfPrimitive.attributes),\n      attributes: this.createAttributes(gltfPrimitive.attributes, gltfPrimitive.indices),\n      material: gltfPrimitive.material\n    }, this.options));\n    model.bounds = [gltfPrimitive.attributes.POSITION.min, gltfPrimitive.attributes.POSITION.max];\n    return model;\n  }\n\n  createAttributes(attributes, indices) {\n    const loadedAttributes = {};\n    Object.keys(attributes).forEach(attrName => {\n      loadedAttributes[attrName] = this.createAccessor(attributes[attrName], this.createBuffer(attributes[attrName], this.gl.ARRAY_BUFFER));\n    });\n\n    if (indices) {\n      loadedAttributes.indices = this.createAccessor(indices, this.createBuffer(indices, this.gl.ELEMENT_ARRAY_BUFFER));\n    }\n\n    esm/* log.info */.cM.info(4, 'glTF Attributes', {\n      attributes,\n      indices,\n      generated: loadedAttributes\n    })();\n    return loadedAttributes;\n  }\n\n  createBuffer(attribute, target) {\n    if (!attribute.bufferView) {\n      attribute.bufferView = {};\n    }\n\n    const {\n      bufferView\n    } = attribute;\n\n    if (!bufferView.lumaBuffers) {\n      bufferView.lumaBuffers = {};\n    }\n\n    if (!bufferView.lumaBuffers[target]) {\n      bufferView.lumaBuffers[target] = new buffer/* default */.Z(this.gl, {\n        id: \"from-\".concat(bufferView.id),\n        data: bufferView.data || attribute.value,\n        target\n      });\n    }\n\n    return bufferView.lumaBuffers[target];\n  }\n\n  createAccessor(accessor, buffer) {\n    return new classes_accessor/* default */.Z({\n      buffer,\n      offset: accessor.byteOffset || 0,\n      stride: accessor.bufferView.byteStride || 0,\n      type: accessor.componentType,\n      size: gltf_instantiator_ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type]\n    });\n  }\n\n  createSampler(gltfSampler) {\n    return gltfSampler;\n  }\n\n  needsPOT() {\n    return false;\n  }\n\n}\n//# sourceMappingURL=gltf-instantiator.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/experimental/dist/esm/gltf/create-gltf-objects.js\n\nfunction createGLTFObjects(gl, gltf, options) {\n  const instantiator = new GLTFInstantiator(gl, options);\n  const scenes = instantiator.instantiate(gltf);\n  const animator = instantiator.createAnimator();\n  return {\n    scenes,\n    animator\n  };\n}\n//# sourceMappingURL=create-gltf-objects.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///77910\n")},44522:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ ScenegraphNode; }\n/* harmony export */ });\n/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43855);\n/* harmony import */ var _math_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85451);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(74538);\n/* harmony import */ var _luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22525);\n\n\nclass ScenegraphNode {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id\n    } = props;\n    this.id = id || (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_0__/* .uid */ .hQ)(this.constructor.name);\n    this.display = true;\n    this.position = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z();\n    this.rotation = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z();\n    this.scale = new _math_gl_core__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .Z(1, 1, 1);\n    this.matrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z();\n    this.userData = {};\n    this.props = {};\n\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n\n    return this;\n  }\n\n  toString() {\n    return \"{type: ScenegraphNode, id: \".concat(this.id, \")}\");\n  }\n\n  getBounds() {\n    return null;\n  }\n\n  setPosition(position) {\n    (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix) {\n    let copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents(_ref) {\n    let {\n      position,\n      rotation,\n      scale,\n      update = true\n    } = _ref;\n\n    if (position) {\n      this.setPosition(position);\n    }\n\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n\n    if (scale) {\n      this.setScale(scale);\n    }\n\n    if (update) {\n      this.updateMatrix();\n    }\n\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      position,\n      rotation,\n      scale\n    } = options;\n\n    if (position) {\n      this.setPosition(position);\n    }\n\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n\n    if (scale) {\n      this.setScale(scale);\n    }\n\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    (0,_luma_gl_webgl__WEBPACK_IMPORTED_MODULE_3__/* .assert */ .h)(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new _math_gl_core__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n\n}\n//# sourceMappingURL=scenegraph-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ1MjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRDtBQUNKO0FBQzlCO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sb0JBQW9CLDZEQUFHO0FBQ3ZCO0FBQ0Esd0JBQXdCLDhEQUFPO0FBQy9CLHdCQUF3Qiw4REFBTztBQUMvQixxQkFBcUIsOERBQU87QUFDNUIsc0JBQXNCLDhEQUFPO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLCtDQUErQztBQUM1RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLCtEQUFNO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSwrREFBTTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksK0RBQU07QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSwrREFBTTtBQUNWO0FBQ0EsNEJBQTRCLDhEQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvZXhwZXJpbWVudGFsL2Rpc3QvZXNtL3NjZW5lZ3JhcGgvc2NlbmVncmFwaC1ub2RlLmpzPzk3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMywgTWF0cml4NCB9IGZyb20gJ0BtYXRoLmdsL2NvcmUnO1xuaW1wb3J0IHsgYXNzZXJ0LCB1aWQgfSBmcm9tICdAbHVtYS5nbC93ZWJnbCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2VuZWdyYXBoTm9kZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgY29uc3Qge1xuICAgICAgaWRcbiAgICB9ID0gcHJvcHM7XG4gICAgdGhpcy5pZCA9IGlkIHx8IHVpZCh0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgIHRoaXMuZGlzcGxheSA9IHRydWU7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG4gICAgdGhpcy5zY2FsZSA9IG5ldyBWZWN0b3IzKDEsIDEsIDEpO1xuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbiAgICB0aGlzLnVzZXJEYXRhID0ge307XG4gICAgdGhpcy5wcm9wcyA9IHt9O1xuXG4gICAgdGhpcy5fc2V0U2NlbmVncmFwaE5vZGVQcm9wcyhwcm9wcyk7XG4gIH1cblxuICBkZWxldGUoKSB7fVxuXG4gIHNldFByb3BzKHByb3BzKSB7XG4gICAgdGhpcy5fc2V0U2NlbmVncmFwaE5vZGVQcm9wcyhwcm9wcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcInt0eXBlOiBTY2VuZWdyYXBoTm9kZSwgaWQ6IFwiLmNvbmNhdCh0aGlzLmlkLCBcIil9XCIpO1xuICB9XG5cbiAgZ2V0Qm91bmRzKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBhc3NlcnQocG9zaXRpb24ubGVuZ3RoID09PSAzLCAnc2V0UG9zaXRpb24gcmVxdWlyZXMgdmVjdG9yIGFyZ3VtZW50Jyk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0Um90YXRpb24ocm90YXRpb24pIHtcbiAgICBhc3NlcnQocm90YXRpb24ubGVuZ3RoID09PSAzLCAnc2V0Um90YXRpb24gcmVxdWlyZXMgdmVjdG9yIGFyZ3VtZW50Jyk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0U2NhbGUoc2NhbGUpIHtcbiAgICBhc3NlcnQoc2NhbGUubGVuZ3RoID09PSAzLCAnc2V0U2NhbGUgcmVxdWlyZXMgdmVjdG9yIGFyZ3VtZW50Jyk7XG4gICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0TWF0cml4KG1hdHJpeCkge1xuICAgIGxldCBjb3B5TWF0cml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gICAgaWYgKGNvcHlNYXRyaXgpIHtcbiAgICAgIHRoaXMubWF0cml4LmNvcHkobWF0cml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgfVxuICB9XG5cbiAgc2V0TWF0cml4Q29tcG9uZW50cyhfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgcm90YXRpb24sXG4gICAgICBzY2FsZSxcbiAgICAgIHVwZGF0ZSA9IHRydWVcbiAgICB9ID0gX3JlZjtcblxuICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgdGhpcy5zZXRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICB0aGlzLnNldFJvdGF0aW9uKHJvdGF0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoc2NhbGUpIHtcbiAgICAgIHRoaXMuc2V0U2NhbGUoc2NhbGUpO1xuICAgIH1cblxuICAgIGlmICh1cGRhdGUpIHtcbiAgICAgIHRoaXMudXBkYXRlTWF0cml4KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB1cGRhdGVNYXRyaXgoKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5wb3NpdGlvbjtcbiAgICBjb25zdCByb3QgPSB0aGlzLnJvdGF0aW9uO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5zY2FsZTtcbiAgICB0aGlzLm1hdHJpeC5pZGVudGl0eSgpO1xuICAgIHRoaXMubWF0cml4LnRyYW5zbGF0ZShwb3MpO1xuICAgIHRoaXMubWF0cml4LnJvdGF0ZVhZWihyb3QpO1xuICAgIHRoaXMubWF0cml4LnNjYWxlKHNjYWxlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgY29uc3Qge1xuICAgICAgcG9zaXRpb24sXG4gICAgICByb3RhdGlvbixcbiAgICAgIHNjYWxlXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHRoaXMuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgdGhpcy5zZXRSb3RhdGlvbihyb3RhdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKHNjYWxlKSB7XG4gICAgICB0aGlzLnNldFNjYWxlKHNjYWxlKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0Q29vcmRpbmF0ZVVuaWZvcm1zKHZpZXdNYXRyaXgsIG1vZGVsTWF0cml4KSB7XG4gICAgYXNzZXJ0KHZpZXdNYXRyaXgpO1xuICAgIG1vZGVsTWF0cml4ID0gbW9kZWxNYXRyaXggfHwgdGhpcy5tYXRyaXg7XG4gICAgY29uc3Qgd29ybGRNYXRyaXggPSBuZXcgTWF0cml4NCh2aWV3TWF0cml4KS5tdWx0aXBseVJpZ2h0KG1vZGVsTWF0cml4KTtcbiAgICBjb25zdCB3b3JsZEludmVyc2UgPSB3b3JsZE1hdHJpeC5pbnZlcnQoKTtcbiAgICBjb25zdCB3b3JsZEludmVyc2VUcmFuc3Bvc2UgPSB3b3JsZEludmVyc2UudHJhbnNwb3NlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZXdNYXRyaXgsXG4gICAgICBtb2RlbE1hdHJpeCxcbiAgICAgIG9iamVjdE1hdHJpeDogbW9kZWxNYXRyaXgsXG4gICAgICB3b3JsZE1hdHJpeCxcbiAgICAgIHdvcmxkSW52ZXJzZU1hdHJpeDogd29ybGRJbnZlcnNlLFxuICAgICAgd29ybGRJbnZlcnNlVHJhbnNwb3NlTWF0cml4OiB3b3JsZEludmVyc2VUcmFuc3Bvc2VcbiAgICB9O1xuICB9XG5cbiAgX3NldFNjZW5lZ3JhcGhOb2RlUHJvcHMocHJvcHMpIHtcbiAgICBpZiAoJ2Rpc3BsYXknIGluIHByb3BzKSB7XG4gICAgICB0aGlzLmRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5O1xuICAgIH1cblxuICAgIGlmICgncG9zaXRpb24nIGluIHByb3BzKSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKHByb3BzLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoJ3JvdGF0aW9uJyBpbiBwcm9wcykge1xuICAgICAgdGhpcy5zZXRSb3RhdGlvbihwcm9wcy5yb3RhdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKCdzY2FsZScgaW4gcHJvcHMpIHtcbiAgICAgIHRoaXMuc2V0U2NhbGUocHJvcHMuc2NhbGUpO1xuICAgIH1cblxuICAgIGlmICgnbWF0cml4JyBpbiBwcm9wcykge1xuICAgICAgdGhpcy5zZXRNYXRyaXgocHJvcHMubWF0cml4KTtcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvcHMsIHByb3BzKTtcbiAgfVxuXG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2VuZWdyYXBoLW5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44522\n")},1418:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"KQ\": function() { return /* reexport */ assertWebGL2Context; },\n  \"JD\": function() { return /* reexport */ assertWebGLContext; },\n  \"s9\": function() { return /* reexport */ createGLContext; },\n  \"JY\": function() { return /* reexport */ cssToDevicePixels; },\n  \"w\": function() { return /* reexport */ cssToDeviceRatio; },\n  \"vd\": function() { return /* reexport */ getWebGL2Context; },\n  \"yW\": function() { return /* reexport */ instrumentGLContext; },\n  \"UF\": function() { return /* reexport */ isWebGL; },\n  \"D0\": function() { return /* reexport */ isWebGL2; },\n  \"cM\": function() { return /* reexport */ log_log; },\n  \"kL\": function() { return /* reexport */ resetParameters; },\n  \"aQ\": function() { return /* reexport */ resizeGLContext; },\n  \"dR\": function() { return /* reexport */ setParameters; },\n  \"s8\": function() { return /* reexport */ withParameters; }\n});\n\n// UNUSED EXPORTS: getContextDebugInfo, getParameters, polyfillContext, popContextState, pushContextState, trackContextState\n\n// EXTERNAL MODULE: ./node_modules/@probe.gl/log/dist/esm/log.js + 8 modules\nvar log = __webpack_require__(56426);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/utils/log.js\n\nconst log_log = new log/* Log */.Z({\n  id: 'luma.gl'\n});\n//# sourceMappingURL=log.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/utils/assert.js\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/utils/webgl-checks.js\n\nconst ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nconst ERR_WEBGL = (/* unused pure expression or super */ null && (ERR_CONTEXT));\nconst ERR_WEBGL2 = 'Requires WebGL2';\nfunction isWebGL(gl) {\n  if (typeof WebGLRenderingContext !== 'undefined' && gl instanceof WebGLRenderingContext) {\n    return true;\n  }\n\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n\n  return Boolean(gl && Number.isFinite(gl._version));\n}\nfunction isWebGL2(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n\n  return Boolean(gl && gl._version === 2);\n}\nfunction getWebGL2Context(gl) {\n  return isWebGL2(gl) ? gl : null;\n}\nfunction assertWebGLContext(gl) {\n  assert(isWebGL(gl), ERR_CONTEXT);\n  return gl;\n}\nfunction assertWebGL2Context(gl) {\n  assert(isWebGL2(gl), ERR_WEBGL2);\n  return gl;\n}\n//# sourceMappingURL=webgl-checks.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-vertex-array-object.js\nconst glErrorShadow = {};\n\nfunction error(msg) {\n  if (globalThis.console && globalThis.console.error) {\n    globalThis.console.error(msg);\n  }\n}\n\nfunction polyfill_vertex_array_object_log(msg) {\n  if (globalThis.console && globalThis.console.log) {\n    globalThis.console.log(msg);\n  }\n}\n\nfunction synthesizeGLError(err, opt_msg) {\n  glErrorShadow[err] = true;\n\n  if (opt_msg !== undefined) {\n    error(opt_msg);\n  }\n}\n\nfunction wrapGLError(gl) {\n  const f = gl.getError;\n\n  gl.getError = function getError() {\n    let err;\n\n    do {\n      err = f.apply(gl);\n\n      if (err !== 0) {\n        glErrorShadow[err] = true;\n      }\n    } while (err !== 0);\n\n    for (err in glErrorShadow) {\n      if (glErrorShadow[err]) {\n        delete glErrorShadow[err];\n        return parseInt(err, 10);\n      }\n    }\n\n    return 0;\n  };\n}\n\nconst WebGLVertexArrayObjectOES = function WebGLVertexArrayObjectOES(ext) {\n  const gl = ext.gl;\n  this.ext = ext;\n  this.isAlive = true;\n  this.hasBeenBound = false;\n  this.elementArrayBuffer = null;\n  this.attribs = new Array(ext.maxVertexAttribs);\n\n  for (let n = 0; n < this.attribs.length; n++) {\n    const attrib = new WebGLVertexArrayObjectOES.VertexAttrib(gl);\n    this.attribs[n] = attrib;\n  }\n\n  this.maxAttrib = 0;\n};\n\nWebGLVertexArrayObjectOES.VertexAttrib = function VertexAttrib(gl) {\n  this.enabled = false;\n  this.buffer = null;\n  this.size = 4;\n  this.type = 5126;\n  this.normalized = false;\n  this.stride = 16;\n  this.offset = 0;\n  this.cached = '';\n  this.recache();\n};\n\nWebGLVertexArrayObjectOES.VertexAttrib.prototype.recache = function recache() {\n  this.cached = [this.size, this.type, this.normalized, this.stride, this.offset].join(':');\n};\n\nconst OESVertexArrayObject = function OESVertexArrayObject(gl) {\n  const self = this;\n  this.gl = gl;\n  wrapGLError(gl);\n  const original = this.original = {\n    getParameter: gl.getParameter,\n    enableVertexAttribArray: gl.enableVertexAttribArray,\n    disableVertexAttribArray: gl.disableVertexAttribArray,\n    bindBuffer: gl.bindBuffer,\n    getVertexAttrib: gl.getVertexAttrib,\n    vertexAttribPointer: gl.vertexAttribPointer\n  };\n\n  gl.getParameter = function getParameter(pname) {\n    if (pname === self.VERTEX_ARRAY_BINDING_OES) {\n      if (self.currentVertexArrayObject === self.defaultVertexArrayObject) {\n        return null;\n      }\n\n      return self.currentVertexArrayObject;\n    }\n\n    return original.getParameter.apply(this, arguments);\n  };\n\n  gl.enableVertexAttribArray = function enableVertexAttribArray(index) {\n    const vao = self.currentVertexArrayObject;\n    vao.maxAttrib = Math.max(vao.maxAttrib, index);\n    const attrib = vao.attribs[index];\n    attrib.enabled = true;\n    return original.enableVertexAttribArray.apply(this, arguments);\n  };\n\n  gl.disableVertexAttribArray = function disableVertexAttribArray(index) {\n    const vao = self.currentVertexArrayObject;\n    vao.maxAttrib = Math.max(vao.maxAttrib, index);\n    const attrib = vao.attribs[index];\n    attrib.enabled = false;\n    return original.disableVertexAttribArray.apply(this, arguments);\n  };\n\n  gl.bindBuffer = function bindBuffer(target, buffer) {\n    switch (target) {\n      case 34962:\n        self.currentArrayBuffer = buffer;\n        break;\n\n      case 34963:\n        self.currentVertexArrayObject.elementArrayBuffer = buffer;\n        break;\n\n      default:\n    }\n\n    return original.bindBuffer.apply(this, arguments);\n  };\n\n  gl.getVertexAttrib = function getVertexAttrib(index, pname) {\n    const vao = self.currentVertexArrayObject;\n    const attrib = vao.attribs[index];\n\n    switch (pname) {\n      case 34975:\n        return attrib.buffer;\n\n      case 34338:\n        return attrib.enabled;\n\n      case 34339:\n        return attrib.size;\n\n      case 34340:\n        return attrib.stride;\n\n      case 34341:\n        return attrib.type;\n\n      case 34922:\n        return attrib.normalized;\n\n      default:\n        return original.getVertexAttrib.apply(this, arguments);\n    }\n  };\n\n  gl.vertexAttribPointer = function vertexAttribPointer(indx, size, type, normalized, stride, offset) {\n    const vao = self.currentVertexArrayObject;\n    vao.maxAttrib = Math.max(vao.maxAttrib, indx);\n    const attrib = vao.attribs[indx];\n    attrib.buffer = self.currentArrayBuffer;\n    attrib.size = size;\n    attrib.type = type;\n    attrib.normalized = normalized;\n    attrib.stride = stride;\n    attrib.offset = offset;\n    attrib.recache();\n    return original.vertexAttribPointer.apply(this, arguments);\n  };\n\n  if (gl.instrumentExtension) {\n    gl.instrumentExtension(this, 'OES_vertex_array_object');\n  }\n\n  if (gl.canvas) {\n    gl.canvas.addEventListener('webglcontextrestored', () => {\n      polyfill_vertex_array_object_log('OESVertexArrayObject emulation library context restored');\n      self.reset_();\n    }, true);\n  }\n\n  this.reset_();\n};\n\nOESVertexArrayObject.prototype.VERTEX_ARRAY_BINDING_OES = 0x85b5;\n\nOESVertexArrayObject.prototype.reset_ = function reset_() {\n  const contextWasLost = this.vertexArrayObjects !== undefined;\n\n  if (contextWasLost) {\n    for (let ii = 0; ii < this.vertexArrayObjects.length; ++ii) {\n      this.vertexArrayObjects.isAlive = false;\n    }\n  }\n\n  const gl = this.gl;\n  this.maxVertexAttribs = gl.getParameter(34921);\n  this.defaultVertexArrayObject = new WebGLVertexArrayObjectOES(this);\n  this.currentVertexArrayObject = null;\n  this.currentArrayBuffer = null;\n  this.vertexArrayObjects = [this.defaultVertexArrayObject];\n  this.bindVertexArrayOES(null);\n};\n\nOESVertexArrayObject.prototype.createVertexArrayOES = function createVertexArrayOES() {\n  const arrayObject = new WebGLVertexArrayObjectOES(this);\n  this.vertexArrayObjects.push(arrayObject);\n  return arrayObject;\n};\n\nOESVertexArrayObject.prototype.deleteVertexArrayOES = function deleteVertexArrayOES(arrayObject) {\n  arrayObject.isAlive = false;\n  this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(arrayObject), 1);\n\n  if (this.currentVertexArrayObject === arrayObject) {\n    this.bindVertexArrayOES(null);\n  }\n};\n\nOESVertexArrayObject.prototype.isVertexArrayOES = function isVertexArrayOES(arrayObject) {\n  if (arrayObject && arrayObject instanceof WebGLVertexArrayObjectOES) {\n    if (arrayObject.hasBeenBound && arrayObject.ext === this) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nOESVertexArrayObject.prototype.bindVertexArrayOES = function bindVertexArrayOES(arrayObject) {\n  const gl = this.gl;\n\n  if (arrayObject && !arrayObject.isAlive) {\n    synthesizeGLError(1282, 'bindVertexArrayOES: attempt to bind deleted arrayObject');\n    return;\n  }\n\n  const original = this.original;\n  const oldVAO = this.currentVertexArrayObject;\n  this.currentVertexArrayObject = arrayObject || this.defaultVertexArrayObject;\n  this.currentVertexArrayObject.hasBeenBound = true;\n  const newVAO = this.currentVertexArrayObject;\n\n  if (oldVAO === newVAO) {\n    return;\n  }\n\n  if (!oldVAO || newVAO.elementArrayBuffer !== oldVAO.elementArrayBuffer) {\n    original.bindBuffer.call(gl, 34963, newVAO.elementArrayBuffer);\n  }\n\n  let currentBinding = this.currentArrayBuffer;\n  const maxAttrib = Math.max(oldVAO ? oldVAO.maxAttrib : 0, newVAO.maxAttrib);\n\n  for (let n = 0; n <= maxAttrib; n++) {\n    const attrib = newVAO.attribs[n];\n    const oldAttrib = oldVAO ? oldVAO.attribs[n] : null;\n\n    if (!oldVAO || attrib.enabled !== oldAttrib.enabled) {\n      if (attrib.enabled) {\n        original.enableVertexAttribArray.call(gl, n);\n      } else {\n        original.disableVertexAttribArray.call(gl, n);\n      }\n    }\n\n    if (attrib.enabled) {\n      let bufferChanged = false;\n\n      if (!oldVAO || attrib.buffer !== oldAttrib.buffer) {\n        if (currentBinding !== attrib.buffer) {\n          original.bindBuffer.call(gl, 34962, attrib.buffer);\n          currentBinding = attrib.buffer;\n        }\n\n        bufferChanged = true;\n      }\n\n      if (bufferChanged || attrib.cached !== oldAttrib.cached) {\n        original.vertexAttribPointer.call(gl, n, attrib.size, attrib.type, attrib.normalized, attrib.stride, attrib.offset);\n      }\n    }\n  }\n\n  if (this.currentArrayBuffer !== currentBinding) {\n    original.bindBuffer.call(gl, 34962, this.currentArrayBuffer);\n  }\n};\n\nfunction polyfillVertexArrayObject(gl) {\n  if (typeof gl.createVertexArray === 'function') {\n    return;\n  }\n\n  const original_getSupportedExtensions = gl.getSupportedExtensions;\n\n  gl.getSupportedExtensions = function getSupportedExtensions() {\n    const list = original_getSupportedExtensions.call(this) || [];\n\n    if (list.indexOf('OES_vertex_array_object') < 0) {\n      list.push('OES_vertex_array_object');\n    }\n\n    return list;\n  };\n\n  const original_getExtension = gl.getExtension;\n\n  gl.getExtension = function getExtension(name) {\n    const ext = original_getExtension.call(this, name);\n\n    if (ext) {\n      return ext;\n    }\n\n    if (name !== 'OES_vertex_array_object') {\n      return null;\n    }\n\n    if (!gl.__OESVertexArrayObject) {\n      this.__OESVertexArrayObject = new OESVertexArrayObject(this);\n    }\n\n    return this.__OESVertexArrayObject;\n  };\n}\n//# sourceMappingURL=polyfill-vertex-array-object.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/polyfill/get-parameter-polyfill.js\n\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245;\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246;\n\nconst getWebGL2ValueOrZero = gl => !isWebGL2(gl) ? 0 : undefined;\n\nconst WEBGL_PARAMETERS = {\n  [3074]: gl => !isWebGL2(gl) ? 36064 : undefined,\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => !isWebGL2(gl) ? GL_DONT_CARE : undefined,\n  [35977]: getWebGL2ValueOrZero,\n  [32937]: getWebGL2ValueOrZero,\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || 7936);\n  },\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || 7937);\n  },\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n  [32883]: getWebGL2ValueOrZero,\n  [35071]: getWebGL2ValueOrZero,\n  [37447]: getWebGL2ValueOrZero,\n  [36063]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n\n    return undefined;\n  },\n  [35379]: getWebGL2ValueOrZero,\n  [35374]: getWebGL2ValueOrZero,\n  [35377]: getWebGL2ValueOrZero,\n  [34852]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n\n    return undefined;\n  },\n  [36203]: gl => gl.getExtension(OES_element_index) ? 2147483647 : 65535,\n  [33001]: gl => gl.getExtension(OES_element_index) ? 16777216 : 65535,\n  [33000]: gl => 16777216,\n  [37157]: getWebGL2ValueOrZero,\n  [35373]: getWebGL2ValueOrZero,\n  [35657]: getWebGL2ValueOrZero,\n  [36183]: getWebGL2ValueOrZero,\n  [37137]: getWebGL2ValueOrZero,\n  [34045]: getWebGL2ValueOrZero,\n  [35978]: getWebGL2ValueOrZero,\n  [35979]: getWebGL2ValueOrZero,\n  [35968]: getWebGL2ValueOrZero,\n  [35376]: getWebGL2ValueOrZero,\n  [35375]: getWebGL2ValueOrZero,\n  [35659]: getWebGL2ValueOrZero,\n  [37154]: getWebGL2ValueOrZero,\n  [35371]: getWebGL2ValueOrZero,\n  [35658]: getWebGL2ValueOrZero,\n  [35076]: getWebGL2ValueOrZero,\n  [35077]: getWebGL2ValueOrZero,\n  [35380]: getWebGL2ValueOrZero\n};\nfunction getParameterPolyfill(gl, originalGetParameter, pname) {\n  const limit = WEBGL_PARAMETERS[pname];\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}\n//# sourceMappingURL=get-parameter-polyfill.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-table.js\n\n\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst polyfill_table_WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst polyfill_table_EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst polyfill_table_EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\nconst WEBGL2_CONTEXT_POLYFILLS = {\n  [OES_vertex_array_object]: {\n    meta: {\n      suffix: 'OES'\n    },\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n    },\n\n    vertexAttribDivisor(location, divisor) {\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [polyfill_table_WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [polyfill_table_EXT_disjoint_timer_query]: {\n    meta: {\n      suffix: 'EXT'\n    },\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n\n    getQueryObject: () => {}\n  }\n};\nconst WEBGL2_CONTEXT_OVERRIDES = {\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {}\n  },\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    const {\n      webgl2,\n      ext\n    } = getExtensionData(gl, ANGLE_instanced_arrays);\n    let result;\n\n    switch (pname) {\n      case 35069:\n        result = !webgl2 ? false : undefined;\n        break;\n\n      case 35070:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 35967:\n          return 35981;\n\n        case 35971:\n          return 0;\n\n        case 35382:\n          return 0;\n\n        default:\n      }\n    }\n\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 32937:\n          return new Int32Array([0]);\n\n        default:\n      }\n    }\n\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case 34046:\n        const {\n          extensions\n        } = gl.luma;\n        const ext = extensions[polyfill_table_EXT_texture_filter_anisotropic];\n        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;\n        break;\n\n      default:\n    }\n\n    return originalFunc(target, pname);\n  },\n\n  getParameter: getParameterPolyfill,\n\n  hint(gl, originalFunc, pname, value) {\n    return originalFunc(pname, value);\n  }\n\n};\n//# sourceMappingURL=polyfill-table.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/polyfill/polyfill-context.js\n\n\n\nfunction polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  const {\n    luma\n  } = gl;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {\n      target: luma,\n      target2: gl\n    });\n    luma.polyfilled = true;\n  }\n\n  return gl;\n}\nglobalThis.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\nfunction installOverrides(gl, _ref) {\n  let {\n    target,\n    target2\n  } = _ref;\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {\n        extension,\n        target: gl.luma,\n        target2: gl\n      });\n    }\n  }\n}\n\nfunction polyfillExtension(gl, _ref2) {\n  let {\n    extension,\n    target,\n    target2\n  } = _ref2;\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n  const {\n    meta = {}\n  } = defaults;\n  const {\n    suffix = ''\n  } = meta;\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = \"\".concat(key).concat(suffix);\n    let polyfill = null;\n\n    if (key === 'meta') {} else if (typeof gl[key] === 'function') {} else if (ext && typeof ext[extKey] === 'function') {\n      polyfill = function () {\n        return ext[extKey](...arguments);\n      };\n    } else if (typeof defaults[key] === 'function') {\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n//# sourceMappingURL=polyfill-context.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/state-tracker/webgl-parameter-tables.js\n\nconst GL_PARAMETER_DEFAULTS = {\n  [3042]: false,\n  [32773]: new Float32Array([0, 0, 0, 0]),\n  [32777]: 32774,\n  [34877]: 32774,\n  [32969]: 1,\n  [32968]: 0,\n  [32971]: 1,\n  [32970]: 0,\n  [3106]: new Float32Array([0, 0, 0, 0]),\n  [3107]: [true, true, true, true],\n  [2884]: false,\n  [2885]: 1029,\n  [2929]: false,\n  [2931]: 1,\n  [2932]: 513,\n  [2928]: new Float32Array([0, 1]),\n  [2930]: true,\n  [3024]: true,\n  [36006]: null,\n  [2886]: 2305,\n  [33170]: 4352,\n  [2849]: 1,\n  [32823]: false,\n  [32824]: 0,\n  [10752]: 0,\n  [32938]: 1.0,\n  [32939]: false,\n  [3089]: false,\n  [3088]: new Int32Array([0, 0, 1024, 1024]),\n  [2960]: false,\n  [2961]: 0,\n  [2968]: 0xffffffff,\n  [36005]: 0xffffffff,\n  [2962]: 519,\n  [2967]: 0,\n  [2963]: 0xffffffff,\n  [34816]: 519,\n  [36003]: 0,\n  [36004]: 0xffffffff,\n  [2964]: 7680,\n  [2965]: 7680,\n  [2966]: 7680,\n  [34817]: 7680,\n  [34818]: 7680,\n  [34819]: 7680,\n  [2978]: [0, 0, 1024, 1024],\n  [3333]: 4,\n  [3317]: 4,\n  [37440]: false,\n  [37441]: false,\n  [37443]: 37444,\n  [35723]: 4352,\n  [36010]: null,\n  [35977]: false,\n  [3330]: 0,\n  [3332]: 0,\n  [3331]: 0,\n  [3314]: 0,\n  [32878]: 0,\n  [3316]: 0,\n  [3315]: 0,\n  [32877]: 0\n};\n\nconst enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);\n\nconst hint = (gl, value, key) => gl.hint(key, value);\n\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? 36009 : 36160;\n  return gl.bindFramebuffer(target, value);\n};\n\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(36008, value);\n};\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\nconst GL_PARAMETER_SETTERS = {\n  [3042]: enable,\n  [32773]: (gl, value) => gl.blendColor(...value),\n  [32777]: 'blendEquation',\n  [34877]: 'blendEquation',\n  [32969]: 'blendFunc',\n  [32968]: 'blendFunc',\n  [32971]: 'blendFunc',\n  [32970]: 'blendFunc',\n  [3106]: (gl, value) => gl.clearColor(...value),\n  [3107]: (gl, value) => gl.colorMask(...value),\n  [2884]: enable,\n  [2885]: (gl, value) => gl.cullFace(value),\n  [2929]: enable,\n  [2931]: (gl, value) => gl.clearDepth(value),\n  [2932]: (gl, value) => gl.depthFunc(value),\n  [2928]: (gl, value) => gl.depthRange(...value),\n  [2930]: (gl, value) => gl.depthMask(value),\n  [3024]: enable,\n  [35723]: hint,\n  [36006]: drawFramebuffer,\n  [2886]: (gl, value) => gl.frontFace(value),\n  [33170]: hint,\n  [2849]: (gl, value) => gl.lineWidth(value),\n  [32823]: enable,\n  [32824]: 'polygonOffset',\n  [10752]: 'polygonOffset',\n  [35977]: enable,\n  [32938]: 'sampleCoverage',\n  [32939]: 'sampleCoverage',\n  [3089]: enable,\n  [3088]: (gl, value) => gl.scissor(...value),\n  [2960]: enable,\n  [2961]: (gl, value) => gl.clearStencil(value),\n  [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),\n  [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),\n  [2962]: 'stencilFuncFront',\n  [2967]: 'stencilFuncFront',\n  [2963]: 'stencilFuncFront',\n  [34816]: 'stencilFuncBack',\n  [36003]: 'stencilFuncBack',\n  [36004]: 'stencilFuncBack',\n  [2964]: 'stencilOpFront',\n  [2965]: 'stencilOpFront',\n  [2966]: 'stencilOpFront',\n  [34817]: 'stencilOpBack',\n  [34818]: 'stencilOpBack',\n  [34819]: 'stencilOpBack',\n  [2978]: (gl, value) => gl.viewport(...value),\n  [3333]: pixelStorei,\n  [3317]: pixelStorei,\n  [37440]: pixelStorei,\n  [37441]: pixelStorei,\n  [37443]: pixelStorei,\n  [3330]: pixelStorei,\n  [3332]: pixelStorei,\n  [3331]: pixelStorei,\n  [36010]: readFramebuffer,\n  [3314]: pixelStorei,\n  [32878]: pixelStorei,\n  [3316]: pixelStorei,\n  [3315]: pixelStorei,\n  [32877]: pixelStorei,\n  framebuffer: (gl, framebuffer) => {\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(36160, handle);\n  },\n  blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n  colorMask: (gl, value) => gl.colorMask(...value),\n  cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),\n  cullFace: (gl, value) => gl.cullFace(value),\n  depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n  dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),\n  derivativeHint: (gl, value) => {\n    gl.hint(35723, value);\n  },\n  frontFace: (gl, value) => gl.frontFace(value),\n  mipmapHint: (gl, value) => gl.hint(33170, value),\n  lineWidth: (gl, value) => gl.lineWidth(value),\n  polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n  scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),\n  scissor: (gl, value) => gl.scissor(...value),\n  stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(1028, mask);\n    gl.stencilMaskSeparate(1029, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(1028, func, ref, mask);\n    gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);\n  },\n  viewport: (gl, value) => gl.viewport(...value)\n};\n\nfunction getValue(glEnum, values, cache) {\n  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];\n}\n\nconst GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values, cache) => gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache)),\n  blendFunc: (gl, values, cache) => gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache)),\n  polygonOffset: (gl, values, cache) => gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache)),\n  sampleCoverage: (gl, values, cache) => gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache)),\n  stencilFuncFront: (gl, values, cache) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache)),\n  stencilFuncBack: (gl, values, cache) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache)),\n  stencilOpFront: (gl, values, cache) => gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache)),\n  stencilOpBack: (gl, values, cache) => gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache))\n};\nconst GL_HOOKED_SETTERS = {\n  enable: (update, capability) => update({\n    [capability]: true\n  }),\n  disable: (update, capability) => update({\n    [capability]: false\n  }),\n  pixelStorei: (update, pname, value) => update({\n    [pname]: value\n  }),\n  hint: (update, pname, hint) => update({\n    [pname]: hint\n  }),\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case 36160:\n        return update({\n          [36006]: framebuffer,\n          [36010]: framebuffer\n        });\n\n      case 36009:\n        return update({\n          [36006]: framebuffer\n        });\n\n      case 36008:\n        return update({\n          [36010]: framebuffer\n        });\n\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) => update({\n    [32773]: new Float32Array([r, g, b, a])\n  }),\n  blendEquation: (update, mode) => update({\n    [32777]: mode,\n    [34877]: mode\n  }),\n  blendEquationSeparate: (update, modeRGB, modeAlpha) => update({\n    [32777]: modeRGB,\n    [34877]: modeAlpha\n  }),\n  blendFunc: (update, src, dst) => update({\n    [32969]: src,\n    [32968]: dst,\n    [32971]: src,\n    [32970]: dst\n  }),\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({\n    [32969]: srcRGB,\n    [32968]: dstRGB,\n    [32971]: srcAlpha,\n    [32970]: dstAlpha\n  }),\n  clearColor: (update, r, g, b, a) => update({\n    [3106]: new Float32Array([r, g, b, a])\n  }),\n  clearDepth: (update, depth) => update({\n    [2931]: depth\n  }),\n  clearStencil: (update, s) => update({\n    [2961]: s\n  }),\n  colorMask: (update, r, g, b, a) => update({\n    [3107]: [r, g, b, a]\n  }),\n  cullFace: (update, mode) => update({\n    [2885]: mode\n  }),\n  depthFunc: (update, func) => update({\n    [2932]: func\n  }),\n  depthRange: (update, zNear, zFar) => update({\n    [2928]: new Float32Array([zNear, zFar])\n  }),\n  depthMask: (update, mask) => update({\n    [2930]: mask\n  }),\n  frontFace: (update, face) => update({\n    [2886]: face\n  }),\n  lineWidth: (update, width) => update({\n    [2849]: width\n  }),\n  polygonOffset: (update, factor, units) => update({\n    [32824]: factor,\n    [10752]: units\n  }),\n  sampleCoverage: (update, value, invert) => update({\n    [32938]: value,\n    [32939]: invert\n  }),\n  scissor: (update, x, y, width, height) => update({\n    [3088]: new Int32Array([x, y, width, height])\n  }),\n  stencilMask: (update, mask) => update({\n    [2968]: mask,\n    [36005]: mask\n  }),\n  stencilMaskSeparate: (update, face, mask) => update({\n    [face === 1028 ? 2968 : 36005]: mask\n  }),\n  stencilFunc: (update, func, ref, mask) => update({\n    [2962]: func,\n    [2967]: ref,\n    [2963]: mask,\n    [34816]: func,\n    [36003]: ref,\n    [36004]: mask\n  }),\n  stencilFuncSeparate: (update, face, func, ref, mask) => update({\n    [face === 1028 ? 2962 : 34816]: func,\n    [face === 1028 ? 2967 : 36003]: ref,\n    [face === 1028 ? 2963 : 36004]: mask\n  }),\n  stencilOp: (update, fail, zfail, zpass) => update({\n    [2964]: fail,\n    [2965]: zfail,\n    [2966]: zpass,\n    [34817]: fail,\n    [34818]: zfail,\n    [34819]: zpass\n  }),\n  stencilOpSeparate: (update, face, fail, zfail, zpass) => update({\n    [face === 1028 ? 2964 : 34817]: fail,\n    [face === 1028 ? 2965 : 34818]: zfail,\n    [face === 1028 ? 2966 : 34819]: zpass\n  }),\n  viewport: (update, x, y, width, height) => update({\n    [2978]: [x, y, width, height]\n  })\n};\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\nconst GL_PARAMETER_GETTERS = {\n  [3042]: isEnabled,\n  [2884]: isEnabled,\n  [2929]: isEnabled,\n  [3024]: isEnabled,\n  [32823]: isEnabled,\n  [32926]: isEnabled,\n  [32928]: isEnabled,\n  [3089]: isEnabled,\n  [2960]: isEnabled,\n  [35977]: isEnabled\n};\n//# sourceMappingURL=webgl-parameter-tables.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/utils/utils.js\nfunction isObjectEmpty(object) {\n  for (const key in object) {\n    return false;\n  }\n\n  return true;\n}\nfunction deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n\n  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/state-tracker/track-context-state.js\n\n\n\n\n\nfunction installGetterOverride(gl, functionName) {\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  gl[functionName] = function get() {\n    const pname = arguments.length <= 0 ? undefined : arguments[0];\n\n    if (!(pname in gl.state.cache)) {\n      return originalGetterFunc(...arguments);\n    }\n\n    return gl.state.enable ? gl.state.cache[pname] : originalGetterFunc(...arguments);\n  };\n\n  Object.defineProperty(gl[functionName], 'name', {\n    value: \"\".concat(functionName, \"-from-cache\"),\n    configurable: false\n  });\n}\n\nfunction installSetterSpy(gl, functionName, setter) {\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  gl[functionName] = function set() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    const {\n      valueChanged,\n      oldValue\n    } = setter(gl.state._updateCache, ...params);\n\n    if (valueChanged) {\n      originalSetterFunc(...params);\n    }\n\n    return oldValue;\n  };\n\n  Object.defineProperty(gl[functionName], 'name', {\n    value: \"\".concat(functionName, \"-to-cache\"),\n    configurable: false\n  });\n}\n\nfunction installProgramSpy(gl) {\n  const originalUseProgram = gl.useProgram.bind(gl);\n\n  gl.useProgram = function useProgramLuma(handle) {\n    if (gl.state.program !== handle) {\n      originalUseProgram(handle);\n      gl.state.program = handle;\n    }\n  };\n}\n\nclass GLState {\n  constructor(gl) {\n    let {\n      copyState = false,\n      log = () => {}\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.program = null;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push() {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues);\n    this.stateStack.pop();\n  }\n\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue;\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      const value = values[key];\n      const cached = this.cache[key];\n\n      if (!deepArrayEqual(value, cached)) {\n        valueChanged = true;\n        oldValue = cached;\n\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = cached;\n        }\n\n        this.cache[key] = value;\n      }\n    }\n\n    return {\n      valueChanged,\n      oldValue\n    };\n  }\n\n}\n\nfunction trackContextState(gl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    enable = true,\n    copyState\n  } = options;\n  assert(copyState !== undefined);\n\n  if (!gl.state) {\n    const {\n      polyfillContext\n    } = globalThis;\n\n    if (polyfillContext) {\n      polyfillContext(gl);\n    }\n\n    gl.state = new GLState(gl, {\n      copyState\n    });\n    installProgramSpy(gl);\n\n    for (const key in GL_HOOKED_SETTERS) {\n      const setter = GL_HOOKED_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n  return gl;\n}\nfunction pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {\n      copyState: false\n    });\n  }\n\n  gl.state.push();\n}\nfunction popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n//# sourceMappingURL=track-context-state.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/state-tracker/unified-parameter-api.js\n\n\n\n\n\nfunction setParameters(gl, values) {\n  assert(isWebGL(gl), 'setParameters requires a WebGL context');\n\n  if (isObjectEmpty(values)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n\n    if (setter) {\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  const cache = gl.state && gl.state.cache;\n\n  if (cache) {\n    for (const key in compositeSetters) {\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      compositeSetter(gl, values, cache);\n    }\n  }\n}\nfunction getParameters(gl, parameters) {\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n\n  if (typeof parameters === 'number') {\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n  const state = {};\n\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n\n  return state;\n}\nfunction resetParameters(gl) {\n  setParameters(gl, GL_PARAMETER_DEFAULTS);\n}\nfunction withParameters(gl, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    return func(gl);\n  }\n\n  const {\n    nocatch = true\n  } = parameters;\n  pushContextState(gl);\n  setParameters(gl, parameters);\n  let value;\n\n  if (nocatch) {\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=unified-parameter-api.js.map\n// EXTERNAL MODULE: ./node_modules/@probe.gl/env/dist/esm/lib/is-browser.js\nvar is_browser = __webpack_require__(93370);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/utils/device-pixels.js\nfunction cssToDeviceRatio(gl) {\n  const {\n    luma\n  } = gl;\n\n  if (gl.canvas && luma) {\n    const {\n      clientWidth\n    } = luma.canvasSizeInfo;\n    return clientWidth ? gl.drawingBufferWidth / clientWidth : 1;\n  }\n\n  return 1;\n}\nfunction cssToDevicePixels(gl, cssPixel) {\n  let yInvert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const ratio = cssToDeviceRatio(gl);\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  return scalePixels(cssPixel, ratio, width, height, yInvert);\n}\nfunction getDevicePixelRatio(useDevicePixels) {\n  const windowRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio || 1;\n\n  if (Number.isFinite(useDevicePixels)) {\n    return useDevicePixels <= 0 ? 1 : useDevicePixels;\n  }\n\n  return useDevicePixels ? windowRatio : 1;\n}\n\nfunction scalePixels(pixel, ratio, width, height, yInvert) {\n  const x = scaleX(pixel[0], ratio, width);\n  let y = scaleY(pixel[1], ratio, height, yInvert);\n  let t = scaleX(pixel[0] + 1, ratio, width);\n  const xHigh = t === width - 1 ? t : t - 1;\n  t = scaleY(pixel[1] + 1, ratio, height, yInvert);\n  let yHigh;\n\n  if (yInvert) {\n    t = t === 0 ? t : t + 1;\n    yHigh = y;\n    y = t;\n  } else {\n    yHigh = t === height - 1 ? t : t - 1;\n  }\n\n  return {\n    x,\n    y,\n    width: Math.max(xHigh - x + 1, 1),\n    height: Math.max(yHigh - y + 1, 1)\n  };\n}\n\nfunction scaleX(x, ratio, width) {\n  const r = Math.min(Math.round(x * ratio), width - 1);\n  return r;\n}\n\nfunction scaleY(y, ratio, height, yInvert) {\n  return yInvert ? Math.max(0, height - 1 - Math.round(y * ratio)) : Math.min(Math.round(y * ratio), height - 1);\n}\n//# sourceMappingURL=device-pixels.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/context/context.js\n\n\n\n\n\n\nconst isBrowser = (0,is_browser/* default */.Z)();\nconst isPage = isBrowser && typeof document !== 'undefined';\nconst CONTEXT_DEFAULTS = {\n  webgl2: true,\n  webgl1: true,\n  throwOnError: true,\n  manageState: true,\n  canvas: null,\n  debug: false,\n  width: 800,\n  height: 600\n};\nfunction createGLContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  assert(isBrowser, \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\");\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {\n    width,\n    height\n  } = options;\n\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n\n    console.error(message);\n    return null;\n  }\n\n  options.onError = onError;\n  let gl;\n  const {\n    canvas\n  } = options;\n  const targetCanvas = getCanvas({\n    canvas,\n    width,\n    height,\n    onError\n  });\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n  logInfo(gl);\n  return gl;\n}\nfunction instrumentGLContext(gl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {\n    manageState,\n    debug\n  } = options;\n\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return log_log.log(1, ...args)();\n      }\n    });\n  }\n\n  if (isBrowser && debug) {\n    if (!globalThis.makeDebugContext) {\n      log_log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = globalThis.makeDebugContext(gl, options);\n      log_log.level = Math.max(log_log.level, 1);\n    }\n  }\n\n  gl._instrumented = true;\n  return gl;\n}\nfunction getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(7936);\n  const rendererMasked = gl.getParameter(7937);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(7938),\n    shadingLanguageVersion: gl.getParameter(35724)\n  };\n}\nfunction resizeGLContext(gl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n\n  if (ext && \"width\" in options && \"height\" in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\nfunction createBrowserContext(canvas, options) {\n  const {\n    onError\n  } = options;\n  let errorMessage = null;\n\n  const onCreateError = error => errorMessage = error.statusMessage || errorMessage;\n\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n  const {\n    webgl1 = true,\n    webgl2 = true\n  } = options;\n  let gl = null;\n\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(\"Failed to create \".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', \" context: \").concat(errorMessage || 'Unknown error'));\n  }\n\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n\n  return gl;\n}\n\nfunction getCanvas(_ref) {\n  let {\n    canvas,\n    width = 800,\n    height = 600,\n    onError\n  } = _ref;\n  let targetCanvas;\n\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n\n    if (!isPageLoaded) {\n      onError(\"createGLContext called on canvas '\".concat(canvas, \"' before page was loaded\"));\n    }\n\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? \"\".concat(width, \"px\") : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? \"\".concat(height, \"px\") : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? \"(\".concat(info.vendor, \",\").concat(info.renderer, \")\") : '';\n  const debug = gl.debug ? ' debug' : '';\n  log_log.info(1, \"\".concat(webGL).concat(debug, \" context \").concat(driver))();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return 2;\n  }\n\n  return 1;\n}\n\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    log_log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n\n  if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {\n    let clampedPixelRatio = devicePixelRatio;\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log_log.warn(\"Device pixel ratio clamped\")();\n      clampedPixelRatio = Math.min(gl.drawingBufferWidth / clientWidth, gl.drawingBufferHeight / clientHeight);\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {\n      clientWidth,\n      clientHeight,\n      devicePixelRatio\n    });\n  }\n}\n//# sourceMappingURL=context.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/gltools/dist/esm/index.js\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1418\n")},75682:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"H\": function() { return /* binding */ VERTEX_SHADER; },\n/* harmony export */   \"Y\": function() { return /* binding */ FRAGMENT_SHADER; }\n/* harmony export */ });\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU2ODIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ0E7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvc2hhZGVydG9vbHMvZGlzdC9lc20vbGliL2NvbnN0YW50cy5qcz9kZDg2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBWRVJURVhfU0hBREVSID0gJ3ZzJztcbmV4cG9ydCBjb25zdCBGUkFHTUVOVF9TSEFERVIgPSAnZnMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///75682\n")},60827:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"O_\": function() { return /* binding */ DECLARATION_INJECT_MARKER; },\n  \"Lm\": function() { return /* binding */ combineInjects; },\n  \"ZP\": function() { return /* binding */ injectShader; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/module-injectors.js\nconst MODULE_INJECTORS_VS = \"#ifdef MODULE_LOGDEPTH\\n  logdepth_adjustPosition(gl_Position);\\n#endif\\n\";\nconst MODULE_INJECTORS_FS = \"#ifdef MODULE_MATERIAL\\n  gl_FragColor = material_filterColor(gl_FragColor);\\n#endif\\n\\n#ifdef MODULE_LIGHTING\\n  gl_FragColor = lighting_filterColor(gl_FragColor);\\n#endif\\n\\n#ifdef MODULE_FOG\\n  gl_FragColor = fog_filterColor(gl_FragColor);\\n#endif\\n\\n#ifdef MODULE_PICKING\\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\\n#endif\\n\\n#ifdef MODULE_LOGDEPTH\\n  logdepth_setFragDepth();\\n#endif\\n\";\n//# sourceMappingURL=module-injectors.js.map\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/constants.js\nvar constants = __webpack_require__(75682);\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/utils/assert.js\nvar assert = __webpack_require__(29047);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/lib/inject-shader.js\n\n\n\nconst MODULE_INJECTORS = {\n  [constants/* VERTEX_SHADER */.H]: MODULE_INJECTORS_VS,\n  [constants/* FRAGMENT_SHADER */.Y]: MODULE_INJECTORS_FS\n};\nconst DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/;\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/;\nconst fragments = [];\nfunction injectShader(source, type, inject) {\n  let injectStandardStubs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const isVertex = type === constants/* VERTEX_SHADER */.H;\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a, b) => a.order - b.order);\n    fragments.length = fragmentData.length;\n\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n\n    const fragmentString = \"\".concat(fragments.join('\\n'), \"\\n\");\n\n    switch (key) {\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n\n        break;\n\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n\n        break;\n\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n\n        break;\n\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n\n        break;\n\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n\n        break;\n\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n\n        break;\n\n      default:\n        source = source.replace(key, match => match + fragmentString);\n    }\n  }\n\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, match => match + MODULE_INJECTORS[type]);\n  }\n\n  return source;\n}\nfunction combineInjects(injects) {\n  const result = {};\n  (0,assert/* default */.Z)(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? \"\".concat(result[key], \"\\n\").concat(inject[key]) : inject[key];\n    }\n  });\n  return result;\n}\n//# sourceMappingURL=inject-shader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA4MjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sNEZBQTRGO0FBQzVGLHlHQUF5Ryx3RkFBd0YsOEVBQThFLCtGQUErRiw0REFBNEQsOERBQThEO0FBQy9lLDRDOzs7Ozs7QUNGdUY7QUFDMUI7QUFDM0I7QUFDbEM7QUFDQSxHQUFHLDhCQUFhLEdBQUcsbUJBQW1CO0FBQ3RDLEdBQUcsZ0NBQWUsR0FBRyxtQkFBbUI7QUFDeEM7QUFDTztBQUNQLHlEQUF5RDtBQUN6RCw0QkFBNEIsT0FBTztBQUNuQztBQUNlO0FBQ2Y7QUFDQSw0QkFBNEIsOEJBQWE7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLCtCQUErQjtBQUMvQjs7QUFFQTtBQUNBO0FBQ087QUFDUDtBQUNBLEVBQUUseUJBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3NoYWRlcnRvb2xzL2Rpc3QvZXNtL21vZHVsZXMvbW9kdWxlLWluamVjdG9ycy5qcz8yMjg1Iiwid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvc2hhZGVydG9vbHMvZGlzdC9lc20vbGliL2luamVjdC1zaGFkZXIuanM/NGNmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgTU9EVUxFX0lOSkVDVE9SU19WUyA9IFwiI2lmZGVmIE1PRFVMRV9MT0dERVBUSFxcbiAgbG9nZGVwdGhfYWRqdXN0UG9zaXRpb24oZ2xfUG9zaXRpb24pO1xcbiNlbmRpZlxcblwiO1xuZXhwb3J0IGNvbnN0IE1PRFVMRV9JTkpFQ1RPUlNfRlMgPSBcIiNpZmRlZiBNT0RVTEVfTUFURVJJQUxcXG4gIGdsX0ZyYWdDb2xvciA9IG1hdGVyaWFsX2ZpbHRlckNvbG9yKGdsX0ZyYWdDb2xvcik7XFxuI2VuZGlmXFxuXFxuI2lmZGVmIE1PRFVMRV9MSUdIVElOR1xcbiAgZ2xfRnJhZ0NvbG9yID0gbGlnaHRpbmdfZmlsdGVyQ29sb3IoZ2xfRnJhZ0NvbG9yKTtcXG4jZW5kaWZcXG5cXG4jaWZkZWYgTU9EVUxFX0ZPR1xcbiAgZ2xfRnJhZ0NvbG9yID0gZm9nX2ZpbHRlckNvbG9yKGdsX0ZyYWdDb2xvcik7XFxuI2VuZGlmXFxuXFxuI2lmZGVmIE1PRFVMRV9QSUNLSU5HXFxuICBnbF9GcmFnQ29sb3IgPSBwaWNraW5nX2ZpbHRlckhpZ2hsaWdodENvbG9yKGdsX0ZyYWdDb2xvcik7XFxuICBnbF9GcmFnQ29sb3IgPSBwaWNraW5nX2ZpbHRlclBpY2tpbmdDb2xvcihnbF9GcmFnQ29sb3IpO1xcbiNlbmRpZlxcblxcbiNpZmRlZiBNT0RVTEVfTE9HREVQVEhcXG4gIGxvZ2RlcHRoX3NldEZyYWdEZXB0aCgpO1xcbiNlbmRpZlxcblwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLWluamVjdG9ycy5qcy5tYXAiLCJpbXBvcnQgeyBNT0RVTEVfSU5KRUNUT1JTX1ZTLCBNT0RVTEVfSU5KRUNUT1JTX0ZTIH0gZnJvbSAnLi4vbW9kdWxlcy9tb2R1bGUtaW5qZWN0b3JzJztcbmltcG9ydCB7IFZFUlRFWF9TSEFERVIsIEZSQUdNRU5UX1NIQURFUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IE1PRFVMRV9JTkpFQ1RPUlMgPSB7XG4gIFtWRVJURVhfU0hBREVSXTogTU9EVUxFX0lOSkVDVE9SU19WUyxcbiAgW0ZSQUdNRU5UX1NIQURFUl06IE1PRFVMRV9JTkpFQ1RPUlNfRlNcbn07XG5leHBvcnQgY29uc3QgREVDTEFSQVRJT05fSU5KRUNUX01BUktFUiA9ICdfX0xVTUFfSU5KRUNUX0RFQ0xBUkFUSU9OU19fJztcbmNvbnN0IFJFR0VYX1NUQVJUX09GX01BSU4gPSAvdm9pZFxccyttYWluXFxzKlxcKFteKV0qXFwpXFxzKlxce1xcbj8vO1xuY29uc3QgUkVHRVhfRU5EX09GX01BSU4gPSAvfVxcbj9bXnt9XSokLztcbmNvbnN0IGZyYWdtZW50cyA9IFtdO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0U2hhZGVyKHNvdXJjZSwgdHlwZSwgaW5qZWN0KSB7XG4gIGxldCBpbmplY3RTdGFuZGFyZFN0dWJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgY29uc3QgaXNWZXJ0ZXggPSB0eXBlID09PSBWRVJURVhfU0hBREVSO1xuXG4gIGZvciAoY29uc3Qga2V5IGluIGluamVjdCkge1xuICAgIGNvbnN0IGZyYWdtZW50RGF0YSA9IGluamVjdFtrZXldO1xuICAgIGZyYWdtZW50RGF0YS5zb3J0KChhLCBiKSA9PiBhLm9yZGVyIC0gYi5vcmRlcik7XG4gICAgZnJhZ21lbnRzLmxlbmd0aCA9IGZyYWdtZW50RGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZnJhZ21lbnREYXRhLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBmcmFnbWVudHNbaV0gPSBmcmFnbWVudERhdGFbaV0uaW5qZWN0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGZyYWdtZW50U3RyaW5nID0gXCJcIi5jb25jYXQoZnJhZ21lbnRzLmpvaW4oJ1xcbicpLCBcIlxcblwiKTtcblxuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICd2czojZGVjbCc6XG4gICAgICAgIGlmIChpc1ZlcnRleCkge1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKERFQ0xBUkFUSU9OX0lOSkVDVF9NQVJLRVIsIGZyYWdtZW50U3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd2czojbWFpbi1zdGFydCc6XG4gICAgICAgIGlmIChpc1ZlcnRleCkge1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKFJFR0VYX1NUQVJUX09GX01BSU4sIG1hdGNoID0+IG1hdGNoICsgZnJhZ21lbnRTdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3ZzOiNtYWluLWVuZCc6XG4gICAgICAgIGlmIChpc1ZlcnRleCkge1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKFJFR0VYX0VORF9PRl9NQUlOLCBtYXRjaCA9PiBmcmFnbWVudFN0cmluZyArIG1hdGNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmczojZGVjbCc6XG4gICAgICAgIGlmICghaXNWZXJ0ZXgpIHtcbiAgICAgICAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZShERUNMQVJBVElPTl9JTkpFQ1RfTUFSS0VSLCBmcmFnbWVudFN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZnM6I21haW4tc3RhcnQnOlxuICAgICAgICBpZiAoIWlzVmVydGV4KSB7XG4gICAgICAgICAgc291cmNlID0gc291cmNlLnJlcGxhY2UoUkVHRVhfU1RBUlRfT0ZfTUFJTiwgbWF0Y2ggPT4gbWF0Y2ggKyBmcmFnbWVudFN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZnM6I21haW4tZW5kJzpcbiAgICAgICAgaWYgKCFpc1ZlcnRleCkge1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKFJFR0VYX0VORF9PRl9NQUlOLCBtYXRjaCA9PiBmcmFnbWVudFN0cmluZyArIG1hdGNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZShrZXksIG1hdGNoID0+IG1hdGNoICsgZnJhZ21lbnRTdHJpbmcpO1xuICAgIH1cbiAgfVxuXG4gIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKERFQ0xBUkFUSU9OX0lOSkVDVF9NQVJLRVIsICcnKTtcblxuICBpZiAoaW5qZWN0U3RhbmRhcmRTdHVicykge1xuICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKC9cXH1cXHMqJC8sIG1hdGNoID0+IG1hdGNoICsgTU9EVUxFX0lOSkVDVE9SU1t0eXBlXSk7XG4gIH1cblxuICByZXR1cm4gc291cmNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVJbmplY3RzKGluamVjdHMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGFzc2VydChBcnJheS5pc0FycmF5KGluamVjdHMpICYmIGluamVjdHMubGVuZ3RoID4gMSk7XG4gIGluamVjdHMuZm9yRWFjaChpbmplY3QgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGluamVjdCkge1xuICAgICAgcmVzdWx0W2tleV0gPSByZXN1bHRba2V5XSA/IFwiXCIuY29uY2F0KHJlc3VsdFtrZXldLCBcIlxcblwiKS5jb25jYXQoaW5qZWN0W2tleV0pIDogaW5qZWN0W2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluamVjdC1zaGFkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60827\n")},25502:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "O": function() { return /* binding */ fp32; }\n/* harmony export */ });\nconst fp32shader = "#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\\nconst float TWO_PI = 6.2831854820251465;\\nconst float PI_2 = 1.5707963705062866;\\nconst float PI_16 = 0.1963495463132858;\\n\\nconst float SIN_TABLE_0 = 0.19509032368659973;\\nconst float SIN_TABLE_1 = 0.3826834261417389;\\nconst float SIN_TABLE_2 = 0.5555702447891235;\\nconst float SIN_TABLE_3 = 0.7071067690849304;\\n\\nconst float COS_TABLE_0 = 0.9807852506637573;\\nconst float COS_TABLE_1 = 0.9238795042037964;\\nconst float COS_TABLE_2 = 0.8314695954322815;\\nconst float COS_TABLE_3 = 0.7071067690849304;\\n\\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01;\\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03;\\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04;\\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06;\\n\\nfloat sin_taylor_fp32(float a) {\\n  float r, s, t, x;\\n\\n  if (a == 0.0) {\\n    return 0.0;\\n  }\\n\\n  x = -a * a;\\n  s = a;\\n  r = a;\\n\\n  r = r * x;\\n  t = r * INVERSE_FACTORIAL_3;\\n  s = s + t;\\n\\n  r = r * x;\\n  t = r * INVERSE_FACTORIAL_5;\\n  s = s + t;\\n\\n  r = r * x;\\n  t = r * INVERSE_FACTORIAL_7;\\n  s = s + t;\\n\\n  r = r * x;\\n  t = r * INVERSE_FACTORIAL_9;\\n  s = s + t;\\n\\n  return s;\\n}\\n\\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\\n  if (a == 0.0) {\\n    sin_t = 0.0;\\n    cos_t = 1.0;\\n  }\\n  sin_t = sin_taylor_fp32(a);\\n  cos_t = sqrt(1.0 - sin_t * sin_t);\\n}\\n\\nfloat tan_taylor_fp32(float a) {\\n    float sin_a;\\n    float cos_a;\\n\\n    if (a == 0.0) {\\n        return 0.0;\\n    }\\n    float z = floor(a / TWO_PI);\\n    float r = a - TWO_PI * z;\\n\\n    float t;\\n    float q = floor(r / PI_2 + 0.5);\\n    int j = int(q);\\n\\n    if (j < -2 || j > 2) {\\n        return 1.0 / 0.0;\\n    }\\n\\n    t = r - PI_2 * q;\\n\\n    q = floor(t / PI_16 + 0.5);\\n    int k = int(q);\\n    int abs_k = int(abs(float(k)));\\n\\n    if (abs_k > 4) {\\n        return 1.0 / 0.0;\\n    } else {\\n        t = t - PI_16 * q;\\n    }\\n\\n    float u = 0.0;\\n    float v = 0.0;\\n\\n    float sin_t, cos_t;\\n    float s, c;\\n    sincos_taylor_fp32(t, sin_t, cos_t);\\n\\n    if (k == 0) {\\n        s = sin_t;\\n        c = cos_t;\\n    } else {\\n        if (abs(float(abs_k) - 1.0) < 0.5) {\\n            u = COS_TABLE_0;\\n            v = SIN_TABLE_0;\\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\\n            u = COS_TABLE_1;\\n            v = SIN_TABLE_1;\\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\\n            u = COS_TABLE_2;\\n            v = SIN_TABLE_2;\\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\\n            u = COS_TABLE_3;\\n            v = SIN_TABLE_3;\\n        }\\n        if (k > 0) {\\n            s = u * sin_t + v * cos_t;\\n            c = u * cos_t - v * sin_t;\\n        } else {\\n            s = u * sin_t - v * cos_t;\\n            c = u * cos_t + v * sin_t;\\n        }\\n    }\\n\\n    if (j == 0) {\\n        sin_a = s;\\n        cos_a = c;\\n    } else if (j == 1) {\\n        sin_a = c;\\n        cos_a = -s;\\n    } else if (j == -1) {\\n        sin_a = -c;\\n        cos_a = s;\\n    } else {\\n        sin_a = -s;\\n        cos_a = -c;\\n    }\\n    return sin_a / cos_a;\\n}\\n#endif\\n\\nfloat tan_fp32(float a) {\\n#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\\n  return tan_taylor_fp32(a);\\n#else\\n  return tan(a);\\n#endif\\n}\\n";\nconst fp32 = {\n  name: \'fp32\',\n  vs: fp32shader,\n  fs: null\n};\n//# sourceMappingURL=fp32.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU1MDIuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUdBQXVHLHdDQUF3Qyx5Q0FBeUMsa0RBQWtELCtDQUErQywrQ0FBK0MsK0NBQStDLGlEQUFpRCwrQ0FBK0MsK0NBQStDLCtDQUErQyw0REFBNEQsMERBQTBELDJEQUEyRCw0REFBNEQsb0NBQW9DLHFCQUFxQixxQkFBcUIsaUJBQWlCLEtBQUssaUJBQWlCLFVBQVUsVUFBVSxnQkFBZ0IsZ0NBQWdDLGNBQWMsZ0JBQWdCLGdDQUFnQyxjQUFjLGdCQUFnQixnQ0FBZ0MsY0FBYyxnQkFBZ0IsZ0NBQWdDLGNBQWMsZUFBZSxHQUFHLHdFQUF3RSxtQkFBbUIsa0JBQWtCLGtCQUFrQixLQUFLLCtCQUErQixzQ0FBc0MsR0FBRyxvQ0FBb0Msa0JBQWtCLGtCQUFrQix1QkFBdUIscUJBQXFCLE9BQU8sa0NBQWtDLCtCQUErQixnQkFBZ0Isc0NBQXNDLHFCQUFxQiw4QkFBOEIsMkJBQTJCLE9BQU8seUJBQXlCLG1DQUFtQyxxQkFBcUIscUNBQXFDLHdCQUF3QiwyQkFBMkIsUUFBUSxNQUFNLDRCQUE0QixPQUFPLHNCQUFzQixvQkFBb0IsMkJBQTJCLGlCQUFpQiwwQ0FBMEMscUJBQXFCLG9CQUFvQixvQkFBb0IsUUFBUSxNQUFNLDhDQUE4Qyw4QkFBOEIsOEJBQThCLFlBQVkseUNBQXlDLDhCQUE4Qiw4QkFBOEIsWUFBWSx5Q0FBeUMsOEJBQThCLDhCQUE4QixZQUFZLHlDQUF5Qyw4QkFBOEIsOEJBQThCLFdBQVcsc0JBQXNCLHdDQUF3Qyx3Q0FBd0MsWUFBWSxNQUFNLHdDQUF3Qyx3Q0FBd0MsV0FBVyxPQUFPLHFCQUFxQixvQkFBb0Isb0JBQW9CLFFBQVEsa0JBQWtCLG9CQUFvQixxQkFBcUIsUUFBUSxtQkFBbUIscUJBQXFCLG9CQUFvQixRQUFRLE1BQU0scUJBQXFCLHFCQUFxQixPQUFPLDJCQUEyQixHQUFHLHFDQUFxQyx5RUFBeUUseUJBQXlCLFdBQVc7QUFDM3JHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvc2hhZGVydG9vbHMvZGlzdC9lc20vbW9kdWxlcy9mcDMyL2ZwMzIuanM/N2IzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcDMyc2hhZGVyID0gXCIjaWZkZWYgTFVNQV9GUDMyX1RBTl9QUkVDSVNJT05fV09SS0FST1VORFxcbmNvbnN0IGZsb2F0IFRXT19QSSA9IDYuMjgzMTg1NDgyMDI1MTQ2NTtcXG5jb25zdCBmbG9hdCBQSV8yID0gMS41NzA3OTYzNzA1MDYyODY2O1xcbmNvbnN0IGZsb2F0IFBJXzE2ID0gMC4xOTYzNDk1NDYzMTMyODU4O1xcblxcbmNvbnN0IGZsb2F0IFNJTl9UQUJMRV8wID0gMC4xOTUwOTAzMjM2ODY1OTk3MztcXG5jb25zdCBmbG9hdCBTSU5fVEFCTEVfMSA9IDAuMzgyNjgzNDI2MTQxNzM4OTtcXG5jb25zdCBmbG9hdCBTSU5fVEFCTEVfMiA9IDAuNTU1NTcwMjQ0Nzg5MTIzNTtcXG5jb25zdCBmbG9hdCBTSU5fVEFCTEVfMyA9IDAuNzA3MTA2NzY5MDg0OTMwNDtcXG5cXG5jb25zdCBmbG9hdCBDT1NfVEFCTEVfMCA9IDAuOTgwNzg1MjUwNjYzNzU3MztcXG5jb25zdCBmbG9hdCBDT1NfVEFCTEVfMSA9IDAuOTIzODc5NTA0MjAzNzk2NDtcXG5jb25zdCBmbG9hdCBDT1NfVEFCTEVfMiA9IDAuODMxNDY5NTk1NDMyMjgxNTtcXG5jb25zdCBmbG9hdCBDT1NfVEFCTEVfMyA9IDAuNzA3MTA2NzY5MDg0OTMwNDtcXG5cXG5jb25zdCBmbG9hdCBJTlZFUlNFX0ZBQ1RPUklBTF8zID0gMS42NjY2NjY3MTYzMzcyMDRlLTAxO1xcbmNvbnN0IGZsb2F0IElOVkVSU0VfRkFDVE9SSUFMXzUgPSA4LjMzMzMzMzc2Nzk1MDUzNWUtMDM7XFxuY29uc3QgZmxvYXQgSU5WRVJTRV9GQUNUT1JJQUxfNyA9IDEuOTg0MTI3MDExMzgyOTUyM2UtMDQ7XFxuY29uc3QgZmxvYXQgSU5WRVJTRV9GQUNUT1JJQUxfOSA9IDIuNzU1NzMxODg0NDYyODc1MzNlLTA2O1xcblxcbmZsb2F0IHNpbl90YXlsb3JfZnAzMihmbG9hdCBhKSB7XFxuICBmbG9hdCByLCBzLCB0LCB4O1xcblxcbiAgaWYgKGEgPT0gMC4wKSB7XFxuICAgIHJldHVybiAwLjA7XFxuICB9XFxuXFxuICB4ID0gLWEgKiBhO1xcbiAgcyA9IGE7XFxuICByID0gYTtcXG5cXG4gIHIgPSByICogeDtcXG4gIHQgPSByICogSU5WRVJTRV9GQUNUT1JJQUxfMztcXG4gIHMgPSBzICsgdDtcXG5cXG4gIHIgPSByICogeDtcXG4gIHQgPSByICogSU5WRVJTRV9GQUNUT1JJQUxfNTtcXG4gIHMgPSBzICsgdDtcXG5cXG4gIHIgPSByICogeDtcXG4gIHQgPSByICogSU5WRVJTRV9GQUNUT1JJQUxfNztcXG4gIHMgPSBzICsgdDtcXG5cXG4gIHIgPSByICogeDtcXG4gIHQgPSByICogSU5WRVJTRV9GQUNUT1JJQUxfOTtcXG4gIHMgPSBzICsgdDtcXG5cXG4gIHJldHVybiBzO1xcbn1cXG5cXG52b2lkIHNpbmNvc190YXlsb3JfZnAzMihmbG9hdCBhLCBvdXQgZmxvYXQgc2luX3QsIG91dCBmbG9hdCBjb3NfdCkge1xcbiAgaWYgKGEgPT0gMC4wKSB7XFxuICAgIHNpbl90ID0gMC4wO1xcbiAgICBjb3NfdCA9IDEuMDtcXG4gIH1cXG4gIHNpbl90ID0gc2luX3RheWxvcl9mcDMyKGEpO1xcbiAgY29zX3QgPSBzcXJ0KDEuMCAtIHNpbl90ICogc2luX3QpO1xcbn1cXG5cXG5mbG9hdCB0YW5fdGF5bG9yX2ZwMzIoZmxvYXQgYSkge1xcbiAgICBmbG9hdCBzaW5fYTtcXG4gICAgZmxvYXQgY29zX2E7XFxuXFxuICAgIGlmIChhID09IDAuMCkge1xcbiAgICAgICAgcmV0dXJuIDAuMDtcXG4gICAgfVxcbiAgICBmbG9hdCB6ID0gZmxvb3IoYSAvIFRXT19QSSk7XFxuICAgIGZsb2F0IHIgPSBhIC0gVFdPX1BJICogejtcXG5cXG4gICAgZmxvYXQgdDtcXG4gICAgZmxvYXQgcSA9IGZsb29yKHIgLyBQSV8yICsgMC41KTtcXG4gICAgaW50IGogPSBpbnQocSk7XFxuXFxuICAgIGlmIChqIDwgLTIgfHwgaiA+IDIpIHtcXG4gICAgICAgIHJldHVybiAxLjAgLyAwLjA7XFxuICAgIH1cXG5cXG4gICAgdCA9IHIgLSBQSV8yICogcTtcXG5cXG4gICAgcSA9IGZsb29yKHQgLyBQSV8xNiArIDAuNSk7XFxuICAgIGludCBrID0gaW50KHEpO1xcbiAgICBpbnQgYWJzX2sgPSBpbnQoYWJzKGZsb2F0KGspKSk7XFxuXFxuICAgIGlmIChhYnNfayA+IDQpIHtcXG4gICAgICAgIHJldHVybiAxLjAgLyAwLjA7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB0ID0gdCAtIFBJXzE2ICogcTtcXG4gICAgfVxcblxcbiAgICBmbG9hdCB1ID0gMC4wO1xcbiAgICBmbG9hdCB2ID0gMC4wO1xcblxcbiAgICBmbG9hdCBzaW5fdCwgY29zX3Q7XFxuICAgIGZsb2F0IHMsIGM7XFxuICAgIHNpbmNvc190YXlsb3JfZnAzMih0LCBzaW5fdCwgY29zX3QpO1xcblxcbiAgICBpZiAoayA9PSAwKSB7XFxuICAgICAgICBzID0gc2luX3Q7XFxuICAgICAgICBjID0gY29zX3Q7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBpZiAoYWJzKGZsb2F0KGFic19rKSAtIDEuMCkgPCAwLjUpIHtcXG4gICAgICAgICAgICB1ID0gQ09TX1RBQkxFXzA7XFxuICAgICAgICAgICAgdiA9IFNJTl9UQUJMRV8wO1xcbiAgICAgICAgfSBlbHNlIGlmIChhYnMoZmxvYXQoYWJzX2spIC0gMi4wKSA8IDAuNSkge1xcbiAgICAgICAgICAgIHUgPSBDT1NfVEFCTEVfMTtcXG4gICAgICAgICAgICB2ID0gU0lOX1RBQkxFXzE7XFxuICAgICAgICB9IGVsc2UgaWYgKGFicyhmbG9hdChhYnNfaykgLSAzLjApIDwgMC41KSB7XFxuICAgICAgICAgICAgdSA9IENPU19UQUJMRV8yO1xcbiAgICAgICAgICAgIHYgPSBTSU5fVEFCTEVfMjtcXG4gICAgICAgIH0gZWxzZSBpZiAoYWJzKGZsb2F0KGFic19rKSAtIDQuMCkgPCAwLjUpIHtcXG4gICAgICAgICAgICB1ID0gQ09TX1RBQkxFXzM7XFxuICAgICAgICAgICAgdiA9IFNJTl9UQUJMRV8zO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGsgPiAwKSB7XFxuICAgICAgICAgICAgcyA9IHUgKiBzaW5fdCArIHYgKiBjb3NfdDtcXG4gICAgICAgICAgICBjID0gdSAqIGNvc190IC0gdiAqIHNpbl90O1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzID0gdSAqIHNpbl90IC0gdiAqIGNvc190O1xcbiAgICAgICAgICAgIGMgPSB1ICogY29zX3QgKyB2ICogc2luX3Q7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgaWYgKGogPT0gMCkge1xcbiAgICAgICAgc2luX2EgPSBzO1xcbiAgICAgICAgY29zX2EgPSBjO1xcbiAgICB9IGVsc2UgaWYgKGogPT0gMSkge1xcbiAgICAgICAgc2luX2EgPSBjO1xcbiAgICAgICAgY29zX2EgPSAtcztcXG4gICAgfSBlbHNlIGlmIChqID09IC0xKSB7XFxuICAgICAgICBzaW5fYSA9IC1jO1xcbiAgICAgICAgY29zX2EgPSBzO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgc2luX2EgPSAtcztcXG4gICAgICAgIGNvc19hID0gLWM7XFxuICAgIH1cXG4gICAgcmV0dXJuIHNpbl9hIC8gY29zX2E7XFxufVxcbiNlbmRpZlxcblxcbmZsb2F0IHRhbl9mcDMyKGZsb2F0IGEpIHtcXG4jaWZkZWYgTFVNQV9GUDMyX1RBTl9QUkVDSVNJT05fV09SS0FST1VORFxcbiAgcmV0dXJuIHRhbl90YXlsb3JfZnAzMihhKTtcXG4jZWxzZVxcbiAgcmV0dXJuIHRhbihhKTtcXG4jZW5kaWZcXG59XFxuXCI7XG5leHBvcnQgY29uc3QgZnAzMiA9IHtcbiAgbmFtZTogJ2ZwMzInLFxuICB2czogZnAzMnNoYWRlcixcbiAgZnM6IG51bGxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcDMyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25502\n')},66931:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "H": function() { return /* binding */ lights; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/lights/lights.glsl.js\n/* harmony default export */ var lights_glsl = ("#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\\n\\nstruct AmbientLight {\\n vec3 color;\\n};\\n\\nstruct PointLight {\\n vec3 color;\\n vec3 position;\\n vec3 attenuation;\\n};\\n\\nstruct DirectionalLight {\\n  vec3 color;\\n  vec3 direction;\\n};\\n\\nuniform AmbientLight lighting_uAmbientLight;\\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\\nuniform int lighting_uPointLightCount;\\nuniform int lighting_uDirectionalLightCount;\\n\\nuniform bool lighting_uEnabled;\\n\\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\\n  return pointLight.attenuation.x\\n       + pointLight.attenuation.y * distance\\n       + pointLight.attenuation.z * distance * distance;\\n}\\n\\n#endif\\n");\n//# sourceMappingURL=lights.glsl.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/lights/lights.js\n\nconst INITIAL_MODULE_OPTIONS = {\n  lightSources: {}\n};\n\nfunction convertColor() {\n  let {\n    color = [0, 0, 0],\n    intensity = 1.0\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return color.map(component => component * intensity / 255.0);\n}\n\nfunction getLightSourceUniforms(_ref) {\n  let {\n    ambientLight,\n    pointLights = [],\n    directionalLights = []\n  } = _ref;\n  const lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms[\'lighting_uAmbientLight.color\'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms[\'lighting_uAmbientLight.color\'] = [0, 0, 0];\n  }\n\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms["lighting_uPointLight[".concat(index, "].color")] = convertColor(pointLight);\n    lightSourceUniforms["lighting_uPointLight[".concat(index, "].position")] = pointLight.position;\n    lightSourceUniforms["lighting_uPointLight[".concat(index, "].attenuation")] = pointLight.attenuation || [1, 0, 0];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].color")] = convertColor(directionalLight);\n    lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].direction")] = directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n  return lightSourceUniforms;\n}\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;\n\n  if (\'lightSources\' in opts) {\n    const {\n      ambientLight,\n      pointLights,\n      directionalLights\n    } = opts.lightSources || {};\n    const hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;\n\n    if (!hasLights) {\n      return {\n        lighting_uEnabled: false\n      };\n    }\n\n    return Object.assign({}, getLightSourceUniforms({\n      ambientLight,\n      pointLights,\n      directionalLights\n    }), {\n      lighting_uEnabled: true\n    });\n  }\n\n  if (\'lights\' in opts) {\n    const lightSources = {\n      pointLights: [],\n      directionalLights: []\n    };\n\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case \'ambient\':\n          lightSources.ambientLight = light;\n          break;\n\n        case \'directional\':\n          lightSources.directionalLights.push(light);\n          break;\n\n        case \'point\':\n          lightSources.pointLights.push(light);\n          break;\n\n        default:\n      }\n    }\n\n    return getUniforms({\n      lightSources\n    });\n  }\n\n  return {};\n}\n\nconst lights = {\n  name: \'lights\',\n  vs: lights_glsl,\n  fs: lights_glsl,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};\n//# sourceMappingURL=lights.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY5MzEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGdEQUFlLHdKQUF3SixjQUFjLElBQUksdUJBQXVCLGNBQWMsaUJBQWlCLG9CQUFvQixJQUFJLDZCQUE2QixlQUFlLG1CQUFtQixJQUFJLGdEQUFnRCxzREFBc0Qsa0VBQWtFLHdDQUF3Qyw4Q0FBOEMsbUNBQW1DLDJFQUEyRSwySUFBMkksR0FBRyxhQUFhLEVBQUM7QUFDbDFCLHVDOztBQ0QyQztBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVPO0FBQ1A7QUFDQSxNQUFNLFdBQWM7QUFDcEIsTUFBTSxXQUFjO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvc2hhZGVydG9vbHMvZGlzdC9lc20vbW9kdWxlcy9saWdodHMvbGlnaHRzLmdsc2wuanM/ZTJiNCIsIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3NoYWRlcnRvb2xzL2Rpc3QvZXNtL21vZHVsZXMvbGlnaHRzL2xpZ2h0cy5qcz82Mjk1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiI2lmIChkZWZpbmVkKFNIQURFUl9UWVBFX0ZSQUdNRU5UKSAmJiBkZWZpbmVkKExJR0hUSU5HX0ZSQUdNRU5UKSkgfHwgKGRlZmluZWQoU0hBREVSX1RZUEVfVkVSVEVYKSAmJiBkZWZpbmVkKExJR0hUSU5HX1ZFUlRFWCkpXFxuXFxuc3RydWN0IEFtYmllbnRMaWdodCB7XFxuIHZlYzMgY29sb3I7XFxufTtcXG5cXG5zdHJ1Y3QgUG9pbnRMaWdodCB7XFxuIHZlYzMgY29sb3I7XFxuIHZlYzMgcG9zaXRpb247XFxuIHZlYzMgYXR0ZW51YXRpb247XFxufTtcXG5cXG5zdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XFxuICB2ZWMzIGNvbG9yO1xcbiAgdmVjMyBkaXJlY3Rpb247XFxufTtcXG5cXG51bmlmb3JtIEFtYmllbnRMaWdodCBsaWdodGluZ191QW1iaWVudExpZ2h0O1xcbnVuaWZvcm0gUG9pbnRMaWdodCBsaWdodGluZ191UG9pbnRMaWdodFtNQVhfTElHSFRTXTtcXG51bmlmb3JtIERpcmVjdGlvbmFsTGlnaHQgbGlnaHRpbmdfdURpcmVjdGlvbmFsTGlnaHRbTUFYX0xJR0hUU107XFxudW5pZm9ybSBpbnQgbGlnaHRpbmdfdVBvaW50TGlnaHRDb3VudDtcXG51bmlmb3JtIGludCBsaWdodGluZ191RGlyZWN0aW9uYWxMaWdodENvdW50O1xcblxcbnVuaWZvcm0gYm9vbCBsaWdodGluZ191RW5hYmxlZDtcXG5cXG5mbG9hdCBnZXRQb2ludExpZ2h0QXR0ZW51YXRpb24oUG9pbnRMaWdodCBwb2ludExpZ2h0LCBmbG9hdCBkaXN0YW5jZSkge1xcbiAgcmV0dXJuIHBvaW50TGlnaHQuYXR0ZW51YXRpb24ueFxcbiAgICAgICArIHBvaW50TGlnaHQuYXR0ZW51YXRpb24ueSAqIGRpc3RhbmNlXFxuICAgICAgICsgcG9pbnRMaWdodC5hdHRlbnVhdGlvbi56ICogZGlzdGFuY2UgKiBkaXN0YW5jZTtcXG59XFxuXFxuI2VuZGlmXFxuXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWdodHMuZ2xzbC5qcy5tYXAiLCJpbXBvcnQgbGlnaHRpbmdTaGFkZXIgZnJvbSAnLi9saWdodHMuZ2xzbCc7XG5jb25zdCBJTklUSUFMX01PRFVMRV9PUFRJT05TID0ge1xuICBsaWdodFNvdXJjZXM6IHt9XG59O1xuXG5mdW5jdGlvbiBjb252ZXJ0Q29sb3IoKSB7XG4gIGxldCB7XG4gICAgY29sb3IgPSBbMCwgMCwgMF0sXG4gICAgaW50ZW5zaXR5ID0gMS4wXG4gIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gY29sb3IubWFwKGNvbXBvbmVudCA9PiBjb21wb25lbnQgKiBpbnRlbnNpdHkgLyAyNTUuMCk7XG59XG5cbmZ1bmN0aW9uIGdldExpZ2h0U291cmNlVW5pZm9ybXMoX3JlZikge1xuICBsZXQge1xuICAgIGFtYmllbnRMaWdodCxcbiAgICBwb2ludExpZ2h0cyA9IFtdLFxuICAgIGRpcmVjdGlvbmFsTGlnaHRzID0gW11cbiAgfSA9IF9yZWY7XG4gIGNvbnN0IGxpZ2h0U291cmNlVW5pZm9ybXMgPSB7fTtcblxuICBpZiAoYW1iaWVudExpZ2h0KSB7XG4gICAgbGlnaHRTb3VyY2VVbmlmb3Jtc1snbGlnaHRpbmdfdUFtYmllbnRMaWdodC5jb2xvciddID0gY29udmVydENvbG9yKGFtYmllbnRMaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgbGlnaHRTb3VyY2VVbmlmb3Jtc1snbGlnaHRpbmdfdUFtYmllbnRMaWdodC5jb2xvciddID0gWzAsIDAsIDBdO1xuICB9XG5cbiAgcG9pbnRMaWdodHMuZm9yRWFjaCgocG9pbnRMaWdodCwgaW5kZXgpID0+IHtcbiAgICBsaWdodFNvdXJjZVVuaWZvcm1zW1wibGlnaHRpbmdfdVBvaW50TGlnaHRbXCIuY29uY2F0KGluZGV4LCBcIl0uY29sb3JcIildID0gY29udmVydENvbG9yKHBvaW50TGlnaHQpO1xuICAgIGxpZ2h0U291cmNlVW5pZm9ybXNbXCJsaWdodGluZ191UG9pbnRMaWdodFtcIi5jb25jYXQoaW5kZXgsIFwiXS5wb3NpdGlvblwiKV0gPSBwb2ludExpZ2h0LnBvc2l0aW9uO1xuICAgIGxpZ2h0U291cmNlVW5pZm9ybXNbXCJsaWdodGluZ191UG9pbnRMaWdodFtcIi5jb25jYXQoaW5kZXgsIFwiXS5hdHRlbnVhdGlvblwiKV0gPSBwb2ludExpZ2h0LmF0dGVudWF0aW9uIHx8IFsxLCAwLCAwXTtcbiAgfSk7XG4gIGxpZ2h0U291cmNlVW5pZm9ybXMubGlnaHRpbmdfdVBvaW50TGlnaHRDb3VudCA9IHBvaW50TGlnaHRzLmxlbmd0aDtcbiAgZGlyZWN0aW9uYWxMaWdodHMuZm9yRWFjaCgoZGlyZWN0aW9uYWxMaWdodCwgaW5kZXgpID0+IHtcbiAgICBsaWdodFNvdXJjZVVuaWZvcm1zW1wibGlnaHRpbmdfdURpcmVjdGlvbmFsTGlnaHRbXCIuY29uY2F0KGluZGV4LCBcIl0uY29sb3JcIildID0gY29udmVydENvbG9yKGRpcmVjdGlvbmFsTGlnaHQpO1xuICAgIGxpZ2h0U291cmNlVW5pZm9ybXNbXCJsaWdodGluZ191RGlyZWN0aW9uYWxMaWdodFtcIi5jb25jYXQoaW5kZXgsIFwiXS5kaXJlY3Rpb25cIildID0gZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb247XG4gIH0pO1xuICBsaWdodFNvdXJjZVVuaWZvcm1zLmxpZ2h0aW5nX3VEaXJlY3Rpb25hbExpZ2h0Q291bnQgPSBkaXJlY3Rpb25hbExpZ2h0cy5sZW5ndGg7XG4gIHJldHVybiBsaWdodFNvdXJjZVVuaWZvcm1zO1xufVxuXG5mdW5jdGlvbiBnZXRVbmlmb3JtcygpIHtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IElOSVRJQUxfTU9EVUxFX09QVElPTlM7XG5cbiAgaWYgKCdsaWdodFNvdXJjZXMnIGluIG9wdHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBhbWJpZW50TGlnaHQsXG4gICAgICBwb2ludExpZ2h0cyxcbiAgICAgIGRpcmVjdGlvbmFsTGlnaHRzXG4gICAgfSA9IG9wdHMubGlnaHRTb3VyY2VzIHx8IHt9O1xuICAgIGNvbnN0IGhhc0xpZ2h0cyA9IGFtYmllbnRMaWdodCB8fCBwb2ludExpZ2h0cyAmJiBwb2ludExpZ2h0cy5sZW5ndGggPiAwIHx8IGRpcmVjdGlvbmFsTGlnaHRzICYmIGRpcmVjdGlvbmFsTGlnaHRzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoIWhhc0xpZ2h0cykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGlnaHRpbmdfdUVuYWJsZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRMaWdodFNvdXJjZVVuaWZvcm1zKHtcbiAgICAgIGFtYmllbnRMaWdodCxcbiAgICAgIHBvaW50TGlnaHRzLFxuICAgICAgZGlyZWN0aW9uYWxMaWdodHNcbiAgICB9KSwge1xuICAgICAgbGlnaHRpbmdfdUVuYWJsZWQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGlmICgnbGlnaHRzJyBpbiBvcHRzKSB7XG4gICAgY29uc3QgbGlnaHRTb3VyY2VzID0ge1xuICAgICAgcG9pbnRMaWdodHM6IFtdLFxuICAgICAgZGlyZWN0aW9uYWxMaWdodHM6IFtdXG4gICAgfTtcblxuICAgIGZvciAoY29uc3QgbGlnaHQgb2Ygb3B0cy5saWdodHMgfHwgW10pIHtcbiAgICAgIHN3aXRjaCAobGlnaHQudHlwZSkge1xuICAgICAgICBjYXNlICdhbWJpZW50JzpcbiAgICAgICAgICBsaWdodFNvdXJjZXMuYW1iaWVudExpZ2h0ID0gbGlnaHQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZGlyZWN0aW9uYWwnOlxuICAgICAgICAgIGxpZ2h0U291cmNlcy5kaXJlY3Rpb25hbExpZ2h0cy5wdXNoKGxpZ2h0KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdwb2ludCc6XG4gICAgICAgICAgbGlnaHRTb3VyY2VzLnBvaW50TGlnaHRzLnB1c2gobGlnaHQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFVuaWZvcm1zKHtcbiAgICAgIGxpZ2h0U291cmNlc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHt9O1xufVxuXG5leHBvcnQgY29uc3QgbGlnaHRzID0ge1xuICBuYW1lOiAnbGlnaHRzJyxcbiAgdnM6IGxpZ2h0aW5nU2hhZGVyLFxuICBmczogbGlnaHRpbmdTaGFkZXIsXG4gIGdldFVuaWZvcm1zLFxuICBkZWZpbmVzOiB7XG4gICAgTUFYX0xJR0hUUzogM1xuICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlnaHRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66931\n')},49764:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "b": function() { return /* binding */ pbr; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/lights/lights.js + 1 modules\nvar lights = __webpack_require__(66931);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/pbr/pbr-vertex.glsl.js\n/* harmony default export */ var pbr_vertex_glsl = ("uniform mat4 u_MVPMatrix;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_NormalMatrix;\\n\\nvarying vec3 pbr_vPosition;\\nvarying vec2 pbr_vUV;\\n\\n#ifdef HAS_NORMALS\\n# ifdef HAS_TANGENTS\\nvarying mat3 pbr_vTBN;\\n# else\\nvarying vec3 pbr_vNormal;\\n# endif\\n#endif\\n\\nvoid pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)\\n{\\n  vec4 pos = u_ModelMatrix * position;\\n  pbr_vPosition = vec3(pos.xyz) / pos.w;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\n  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(normal.xyz, 0.0)));\\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(tangent.xyz, 0.0)));\\n  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;\\n  pbr_vTBN = mat3(tangentW, bitangentW, normalW);\\n#else\\n  pbr_vNormal = normalize(vec3(u_ModelMatrix * vec4(normal.xyz, 0.0)));\\n#endif\\n#endif\\n\\n#ifdef HAS_UV\\n  pbr_vUV = uv;\\n#else\\n  pbr_vUV = vec2(0.,0.);\\n#endif\\n}\\n");\n//# sourceMappingURL=pbr-vertex.glsl.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/pbr/pbr-fragment.glsl.js\n/* harmony default export */ var pbr_fragment_glsl = ("#if defined(USE_TEX_LOD) && !defined(FEATURE_GLSL_TEXTURE_LOD)\\n# error PBR fragment shader: Texture LOD is not available\\n#endif\\n\\n#if !defined(HAS_TANGENTS) && !defined(FEATURE_GLSL_DERIVATIVES)\\n# error PBR fragment shader: Derivatives are not available\\n#endif\\n\\n\\n#if (__VERSION__ < 300)\\n  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL1COND; INCR)\\n#else\\n  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL2COND; INCR)\\n#endif\\n\\nprecision highp float;\\n\\nuniform bool pbr_uUnlit;\\n\\n#ifdef USE_IBL\\nuniform samplerCube u_DiffuseEnvSampler;\\nuniform samplerCube u_SpecularEnvSampler;\\nuniform sampler2D u_brdfLUT;\\nuniform vec2 u_ScaleIBLAmbient;\\n#endif\\n\\n#ifdef HAS_BASECOLORMAP\\nuniform sampler2D u_BaseColorSampler;\\n#endif\\n#ifdef HAS_NORMALMAP\\nuniform sampler2D u_NormalSampler;\\nuniform float u_NormalScale;\\n#endif\\n#ifdef HAS_EMISSIVEMAP\\nuniform sampler2D u_EmissiveSampler;\\nuniform vec3 u_EmissiveFactor;\\n#endif\\n#ifdef HAS_METALROUGHNESSMAP\\nuniform sampler2D u_MetallicRoughnessSampler;\\n#endif\\n#ifdef HAS_OCCLUSIONMAP\\nuniform sampler2D u_OcclusionSampler;\\nuniform float u_OcclusionStrength;\\n#endif\\n\\n#ifdef ALPHA_CUTOFF\\nuniform float u_AlphaCutoff;\\n#endif\\n\\nuniform vec2 u_MetallicRoughnessValues;\\nuniform vec4 u_BaseColorFactor;\\n\\nuniform vec3 u_Camera;\\n#ifdef PBR_DEBUG\\nuniform vec4 u_ScaleDiffBaseMR;\\nuniform vec4 u_ScaleFGDSpec;\\n#endif\\n\\nvarying vec3 pbr_vPosition;\\n\\nvarying vec2 pbr_vUV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 pbr_vTBN;\\n#else\\nvarying vec3 pbr_vNormal;\\n#endif\\n#endif\\n\\n\\nstruct PBRInfo\\n{\\n  float NdotL;\\n  float NdotV;\\n  float NdotH;\\n  float LdotH;\\n  float VdotH;\\n  float perceptualRoughness;\\n  float metalness;\\n  vec3 reflectance0;\\n  vec3 reflectance90;\\n  float alphaRoughness;\\n  vec3 diffuseColor;\\n  vec3 specularColor;\\n  vec3 n;\\n  vec3 v;\\n};\\n\\nconst float M_PI = 3.141592653589793;\\nconst float c_MinRoughness = 0.04;\\n\\nvec4 SRGBtoLINEAR(vec4 srgbIn)\\n{\\n#ifdef MANUAL_SRGB\\n#ifdef SRGB_FAST_APPROXIMATION\\n  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\\n#else\\n  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\\n  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\\n#endif\\n  return vec4(linOut,srgbIn.w);;\\n#else\\n  return srgbIn;\\n#endif\\n}\\n\\nvec3 getNormal()\\n{\\n#ifndef HAS_TANGENTS\\n  vec3 pos_dx = dFdx(pbr_vPosition);\\n  vec3 pos_dy = dFdy(pbr_vPosition);\\n  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));\\n  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));\\n  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\\n#ifdef HAS_NORMALS\\n  vec3 ng = normalize(pbr_vNormal);\\n#else\\n  vec3 ng = cross(pos_dx, pos_dy);\\n#endif\\n\\n  t = normalize(t - ng * dot(ng, t));\\n  vec3 b = normalize(cross(ng, t));\\n  mat3 tbn = mat3(t, b, ng);\\n#else\\n  mat3 tbn = pbr_vTBN;\\n#endif\\n\\n#ifdef HAS_NORMALMAP\\n  vec3 n = texture2D(u_NormalSampler, pbr_vUV).rgb;\\n  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\\n#else\\n  vec3 n = normalize(tbn[2].xyz);\\n#endif\\n\\n  return n;\\n}\\n\\n\\n#ifdef USE_IBL\\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\\n{\\n  float mipCount = 9.0;\\n  float lod = (pbrInputs.perceptualRoughness * mipCount);\\n  vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT,\\n    vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\\n  vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;\\n\\n#ifdef USE_TEX_LOD\\n  vec3 specularLight = SRGBtoLINEAR(textureCubeLod(u_SpecularEnvSampler, reflection, lod)).rgb;\\n#else\\n  vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;\\n#endif\\n\\n  vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\\n  vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\\n  diffuse *= u_ScaleIBLAmbient.x;\\n  specular *= u_ScaleIBLAmbient.y;\\n\\n  return diffuse + specular;\\n}\\n#endif\\n\\n\\nvec3 diffuse(PBRInfo pbrInputs)\\n{\\n  return pbrInputs.diffuseColor / M_PI;\\n}\\n\\nvec3 specularReflection(PBRInfo pbrInputs)\\n{\\n  return pbrInputs.reflectance0 +\\n    (pbrInputs.reflectance90 - pbrInputs.reflectance0) *\\n    pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\\n}\\n\\n\\n\\nfloat geometricOcclusion(PBRInfo pbrInputs)\\n{\\n  float NdotL = pbrInputs.NdotL;\\n  float NdotV = pbrInputs.NdotV;\\n  float r = pbrInputs.alphaRoughness;\\n\\n  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\\n  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\\n  return attenuationL * attenuationV;\\n}\\n\\n\\n\\n\\n\\nfloat microfacetDistribution(PBRInfo pbrInputs)\\n{\\n  float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\\n  float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\\n  return roughnessSq / (M_PI * f * f);\\n}\\n\\nvoid PBRInfo_setAmbientLight(inout PBRInfo pbrInputs) {\\n  pbrInputs.NdotL = 1.0;\\n  pbrInputs.NdotH = 0.0;\\n  pbrInputs.LdotH = 0.0;\\n  pbrInputs.VdotH = 1.0;\\n}\\n\\nvoid PBRInfo_setDirectionalLight(inout PBRInfo pbrInputs, vec3 lightDirection) {\\n  vec3 n = pbrInputs.n;\\n  vec3 v = pbrInputs.v;\\n  vec3 l = normalize(lightDirection);\\n  vec3 h = normalize(l+v);\\n\\n  pbrInputs.NdotL = clamp(dot(n, l), 0.001, 1.0);\\n  pbrInputs.NdotH = clamp(dot(n, h), 0.0, 1.0);\\n  pbrInputs.LdotH = clamp(dot(l, h), 0.0, 1.0);\\n  pbrInputs.VdotH = clamp(dot(v, h), 0.0, 1.0);\\n}\\n\\nvoid PBRInfo_setPointLight(inout PBRInfo pbrInputs, PointLight pointLight) {\\n  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);\\n  PBRInfo_setDirectionalLight(pbrInputs, light_direction);\\n}\\n\\nvec3 calculateFinalColor(PBRInfo pbrInputs, vec3 lightColor) {\\n  vec3 F = specularReflection(pbrInputs);\\n  float G = geometricOcclusion(pbrInputs);\\n  float D = microfacetDistribution(pbrInputs);\\n  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\\n  vec3 specContrib = F * G * D / (4.0 * pbrInputs.NdotL * pbrInputs.NdotV);\\n  return pbrInputs.NdotL * lightColor * (diffuseContrib + specContrib);\\n}\\n\\nvec4 pbr_filterColor(vec4 colorUnused)\\n{\\n#ifdef HAS_BASECOLORMAP\\n  vec4 baseColor = SRGBtoLINEAR(texture2D(u_BaseColorSampler, pbr_vUV)) * u_BaseColorFactor;\\n#else\\n  vec4 baseColor = u_BaseColorFactor;\\n#endif\\n\\n#ifdef ALPHA_CUTOFF\\n  if (baseColor.a < u_AlphaCutoff) {\\n    discard;\\n  }\\n#endif\\n\\n  vec3 color = vec3(0, 0, 0);\\n\\n  if(pbr_uUnlit){\\n    color.rgb = baseColor.rgb;\\n  }\\n  else{\\n\\n\\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\\n    float metallic = u_MetallicRoughnessValues.x;\\n#ifdef HAS_METALROUGHNESSMAP\\n\\n    vec4 mrSample = texture2D(u_MetallicRoughnessSampler, pbr_vUV);\\n    perceptualRoughness = mrSample.g * perceptualRoughness;\\n    metallic = mrSample.b * metallic;\\n#endif\\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\\n    metallic = clamp(metallic, 0.0, 1.0);\\n\\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\\n\\n    vec3 f0 = vec3(0.04);\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\\n    diffuseColor *= 1.0 - metallic;\\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n\\n\\n\\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\\n    vec3 specularEnvironmentR0 = specularColor.rgb;\\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\\n\\n    vec3 n = getNormal();\\n    vec3 v = normalize(u_Camera - pbr_vPosition);\\n\\n    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);\\n    vec3 reflection = -normalize(reflect(v, n));\\n\\n    PBRInfo pbrInputs = PBRInfo(\\n      0.0,\\n      NdotV,\\n      0.0,\\n      0.0,\\n      0.0,\\n      perceptualRoughness,\\n      metallic,\\n      specularEnvironmentR0,\\n      specularEnvironmentR90,\\n      alphaRoughness,\\n      diffuseColor,\\n      specularColor,\\n      n,\\n      v\\n    );\\n\\n#ifdef USE_LIGHTS\\n    PBRInfo_setAmbientLight(pbrInputs);\\n    color += calculateFinalColor(pbrInputs, lighting_uAmbientLight.color);\\n    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uDirectionalLightCount, i++) {\\n      if (i < lighting_uDirectionalLightCount) {\\n        PBRInfo_setDirectionalLight(pbrInputs, lighting_uDirectionalLight[i].direction);\\n        color += calculateFinalColor(pbrInputs, lighting_uDirectionalLight[i].color);\\n      }\\n    }\\n    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uPointLightCount, i++) {\\n      if (i < lighting_uPointLightCount) {\\n        PBRInfo_setPointLight(pbrInputs, lighting_uPointLight[i]);\\n        float attenuation = getPointLightAttenuation(lighting_uPointLight[i], distance(lighting_uPointLight[i].position, pbr_vPosition));\\n        color += calculateFinalColor(pbrInputs, lighting_uPointLight[i].color / attenuation);\\n      }\\n    }\\n#endif\\n#ifdef USE_IBL\\n    color += getIBLContribution(pbrInputs, n, reflection);\\n#endif\\n#ifdef HAS_OCCLUSIONMAP\\n    float ao = texture2D(u_OcclusionSampler, pbr_vUV).r;\\n    color = mix(color, color * ao, u_OcclusionStrength);\\n#endif\\n\\n#ifdef HAS_EMISSIVEMAP\\n    vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, pbr_vUV)).rgb * u_EmissiveFactor;\\n    color += emissive;\\n#endif\\n\\n#ifdef PBR_DEBUG\\n\\n\\n\\n\\n\\n    color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\\n    color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\\n    color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\\n#endif\\n\\n  }\\n\\n  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);\\n}\\n");\n//# sourceMappingURL=pbr-fragment.glsl.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/pbr/pbr.js\n\n\n\nconst pbr = {\n  name: \'pbr\',\n  vs: pbr_vertex_glsl,\n  fs: pbr_fragment_glsl,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  dependencies: [lights/* lights */.H]\n};\n//# sourceMappingURL=pbr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49764\n')},8674:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"N\": function() { return /* binding */ gouraudLighting; }\n});\n\n// UNUSED EXPORTS: phongLighting\n\n// EXTERNAL MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/lights/lights.js + 1 modules\nvar lights = __webpack_require__(66931);\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/phong-lighting/phong-lighting.glsl.js\n/* harmony default export */ var phong_lighting_glsl = (\"\\nuniform float lighting_uAmbient;\\nuniform float lighting_uDiffuse;\\nuniform float lighting_uShininess;\\nuniform vec3  lighting_uSpecularColor;\\n\\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\\n    vec3 halfway_direction = normalize(light_direction + view_direction);\\n    float lambertian = dot(light_direction, normal_worldspace);\\n    float specular = 0.0;\\n    if (lambertian > 0.0) {\\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\\n      specular = pow(specular_angle, lighting_uShininess);\\n    }\\n    lambertian = max(lambertian, 0.0);\\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\\n}\\n\\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\\n  vec3 lightColor = surfaceColor;\\n\\n  if (lighting_uEnabled) {\\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uPointLightCount) {\\n        break;\\n      }\\n      PointLight pointLight = lighting_uPointLight[i];\\n      vec3 light_position_worldspace = pointLight.position;\\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\\n    }\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uDirectionalLightCount) {\\n        break;\\n      }\\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\\n    }\\n  }\\n  return lightColor;\\n}\\n\\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\\n  vec3 lightColor = vec3(0, 0, 0);\\n  vec3 surfaceColor = vec3(0, 0, 0);\\n\\n  if (lighting_uEnabled) {\\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uPointLightCount) {\\n        break;\\n      }\\n      PointLight pointLight = lighting_uPointLight[i];\\n      vec3 light_position_worldspace = pointLight.position;\\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\\n    }\\n\\n    for (int i = 0; i < MAX_LIGHTS; i++) {\\n      if (i >= lighting_uDirectionalLightCount) {\\n        break;\\n      }\\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\\n    }\\n  }\\n  return lightColor;\\n}\\n\");\n//# sourceMappingURL=phong-lighting.glsl.js.map\n;// CONCATENATED MODULE: ./node_modules/@luma.gl/shadertools/dist/esm/modules/phong-lighting/phong-lighting.js\n\n\nconst INITIAL_MODULE_OPTIONS = {};\n\nfunction getMaterialUniforms(material) {\n  const {\n    ambient = 0.35,\n    diffuse = 0.6,\n    shininess = 32,\n    specularColor = [30, 30, 30]\n  } = material;\n  return {\n    lighting_uAmbient: ambient,\n    lighting_uDiffuse: diffuse,\n    lighting_uShininess: shininess,\n    lighting_uSpecularColor: specularColor.map(x => x / 255)\n  };\n}\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;\n\n  if (!('material' in opts)) {\n    return {};\n  }\n\n  const {\n    material\n  } = opts;\n\n  if (!material) {\n    return {\n      lighting_uEnabled: false\n    };\n  }\n\n  return getMaterialUniforms(material);\n}\n\nconst gouraudLighting = {\n  name: 'gouraud-lighting',\n  dependencies: [lights/* lights */.H],\n  vs: phong_lighting_glsl,\n  defines: {\n    LIGHTING_VERTEX: 1\n  },\n  getUniforms\n};\nconst phongLighting = {\n  name: 'phong-lighting',\n  dependencies: [lights/* lights */.H],\n  fs: phong_lighting_glsl,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  getUniforms\n};\n//# sourceMappingURL=phong-lighting.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHdEQUFlLG1DQUFtQyxrQ0FBa0Msb0NBQW9DLHdDQUF3QyxtSUFBbUksMkVBQTJFLGlFQUFpRSwyQkFBMkIsNkJBQTZCLG1GQUFtRiw0REFBNEQsT0FBTyx3Q0FBd0MsMEdBQTBHLEdBQUcsMkhBQTJILG1DQUFtQyw4QkFBOEIsNEVBQTRFLG1GQUFtRix3QkFBd0IsZ0JBQWdCLE1BQU0sNkNBQTZDLGdCQUFnQixTQUFTLHdEQUF3RCw2REFBNkQsMEZBQTBGLGlJQUFpSSxPQUFPLHdCQUF3QixnQkFBZ0IsTUFBTSxtREFBbUQsZ0JBQWdCLFNBQVMsMEVBQTBFLG1KQUFtSixPQUFPLEtBQUssc0JBQXNCLEdBQUcsZ0hBQWdILG9DQUFvQyxzQ0FBc0MsOEJBQThCLDRFQUE0RSx3QkFBd0IsZ0JBQWdCLE1BQU0sNkNBQTZDLGdCQUFnQixTQUFTLHdEQUF3RCw2REFBNkQsMEZBQTBGLGlJQUFpSSxPQUFPLHdCQUF3QixnQkFBZ0IsTUFBTSxtREFBbUQsZ0JBQWdCLFNBQVMsMEVBQTBFLG1KQUFtSixPQUFPLEtBQUssc0JBQXNCLEdBQUcsR0FBRyxFQUFDO0FBQ25pRywrQzs7QUNEMEM7QUFDUztBQUNuRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVPO0FBQ1A7QUFDQSxpQkFBaUIsb0JBQU07QUFDdkIsTUFBTSxtQkFBYztBQUNwQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDTztBQUNQO0FBQ0EsaUJBQWlCLG9CQUFNO0FBQ3ZCLE1BQU0sbUJBQWM7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL0BsdW1hLmdsL3NoYWRlcnRvb2xzL2Rpc3QvZXNtL21vZHVsZXMvcGhvbmctbGlnaHRpbmcvcGhvbmctbGlnaHRpbmcuZ2xzbC5qcz8xZjQ4Iiwid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvQGx1bWEuZ2wvc2hhZGVydG9vbHMvZGlzdC9lc20vbW9kdWxlcy9waG9uZy1saWdodGluZy9waG9uZy1saWdodGluZy5qcz9lNzRiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiXFxudW5pZm9ybSBmbG9hdCBsaWdodGluZ191QW1iaWVudDtcXG51bmlmb3JtIGZsb2F0IGxpZ2h0aW5nX3VEaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgbGlnaHRpbmdfdVNoaW5pbmVzcztcXG51bmlmb3JtIHZlYzMgIGxpZ2h0aW5nX3VTcGVjdWxhckNvbG9yO1xcblxcbnZlYzMgbGlnaHRpbmdfZ2V0TGlnaHRDb2xvcih2ZWMzIHN1cmZhY2VDb2xvciwgdmVjMyBsaWdodF9kaXJlY3Rpb24sIHZlYzMgdmlld19kaXJlY3Rpb24sIHZlYzMgbm9ybWFsX3dvcmxkc3BhY2UsIHZlYzMgY29sb3IpIHtcXG4gICAgdmVjMyBoYWxmd2F5X2RpcmVjdGlvbiA9IG5vcm1hbGl6ZShsaWdodF9kaXJlY3Rpb24gKyB2aWV3X2RpcmVjdGlvbik7XFxuICAgIGZsb2F0IGxhbWJlcnRpYW4gPSBkb3QobGlnaHRfZGlyZWN0aW9uLCBub3JtYWxfd29ybGRzcGFjZSk7XFxuICAgIGZsb2F0IHNwZWN1bGFyID0gMC4wO1xcbiAgICBpZiAobGFtYmVydGlhbiA+IDAuMCkge1xcbiAgICAgIGZsb2F0IHNwZWN1bGFyX2FuZ2xlID0gbWF4KGRvdChub3JtYWxfd29ybGRzcGFjZSwgaGFsZndheV9kaXJlY3Rpb24pLCAwLjApO1xcbiAgICAgIHNwZWN1bGFyID0gcG93KHNwZWN1bGFyX2FuZ2xlLCBsaWdodGluZ191U2hpbmluZXNzKTtcXG4gICAgfVxcbiAgICBsYW1iZXJ0aWFuID0gbWF4KGxhbWJlcnRpYW4sIDAuMCk7XFxuICAgIHJldHVybiAobGFtYmVydGlhbiAqIGxpZ2h0aW5nX3VEaWZmdXNlICogc3VyZmFjZUNvbG9yICsgc3BlY3VsYXIgKiBsaWdodGluZ191U3BlY3VsYXJDb2xvcikgKiBjb2xvcjtcXG59XFxuXFxudmVjMyBsaWdodGluZ19nZXRMaWdodENvbG9yKHZlYzMgc3VyZmFjZUNvbG9yLCB2ZWMzIGNhbWVyYVBvc2l0aW9uLCB2ZWMzIHBvc2l0aW9uX3dvcmxkc3BhY2UsIHZlYzMgbm9ybWFsX3dvcmxkc3BhY2UpIHtcXG4gIHZlYzMgbGlnaHRDb2xvciA9IHN1cmZhY2VDb2xvcjtcXG5cXG4gIGlmIChsaWdodGluZ191RW5hYmxlZCkge1xcbiAgICB2ZWMzIHZpZXdfZGlyZWN0aW9uID0gbm9ybWFsaXplKGNhbWVyYVBvc2l0aW9uIC0gcG9zaXRpb25fd29ybGRzcGFjZSk7XFxuICAgIGxpZ2h0Q29sb3IgPSBsaWdodGluZ191QW1iaWVudCAqIHN1cmZhY2VDb2xvciAqIGxpZ2h0aW5nX3VBbWJpZW50TGlnaHQuY29sb3I7XFxuXFxuICAgIGZvciAoaW50IGkgPSAwOyBpIDwgTUFYX0xJR0hUUzsgaSsrKSB7XFxuICAgICAgaWYgKGkgPj0gbGlnaHRpbmdfdVBvaW50TGlnaHRDb3VudCkge1xcbiAgICAgICAgYnJlYWs7XFxuICAgICAgfVxcbiAgICAgIFBvaW50TGlnaHQgcG9pbnRMaWdodCA9IGxpZ2h0aW5nX3VQb2ludExpZ2h0W2ldO1xcbiAgICAgIHZlYzMgbGlnaHRfcG9zaXRpb25fd29ybGRzcGFjZSA9IHBvaW50TGlnaHQucG9zaXRpb247XFxuICAgICAgdmVjMyBsaWdodF9kaXJlY3Rpb24gPSBub3JtYWxpemUobGlnaHRfcG9zaXRpb25fd29ybGRzcGFjZSAtIHBvc2l0aW9uX3dvcmxkc3BhY2UpO1xcbiAgICAgIGxpZ2h0Q29sb3IgKz0gbGlnaHRpbmdfZ2V0TGlnaHRDb2xvcihzdXJmYWNlQ29sb3IsIGxpZ2h0X2RpcmVjdGlvbiwgdmlld19kaXJlY3Rpb24sIG5vcm1hbF93b3JsZHNwYWNlLCBwb2ludExpZ2h0LmNvbG9yKTtcXG4gICAgfVxcblxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IE1BWF9MSUdIVFM7IGkrKykge1xcbiAgICAgIGlmIChpID49IGxpZ2h0aW5nX3VEaXJlY3Rpb25hbExpZ2h0Q291bnQpIHtcXG4gICAgICAgIGJyZWFrO1xcbiAgICAgIH1cXG4gICAgICBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQgPSBsaWdodGluZ191RGlyZWN0aW9uYWxMaWdodFtpXTtcXG4gICAgICBsaWdodENvbG9yICs9IGxpZ2h0aW5nX2dldExpZ2h0Q29sb3Ioc3VyZmFjZUNvbG9yLCAtZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb24sIHZpZXdfZGlyZWN0aW9uLCBub3JtYWxfd29ybGRzcGFjZSwgZGlyZWN0aW9uYWxMaWdodC5jb2xvcik7XFxuICAgIH1cXG4gIH1cXG4gIHJldHVybiBsaWdodENvbG9yO1xcbn1cXG5cXG52ZWMzIGxpZ2h0aW5nX2dldFNwZWN1bGFyTGlnaHRDb2xvcih2ZWMzIGNhbWVyYVBvc2l0aW9uLCB2ZWMzIHBvc2l0aW9uX3dvcmxkc3BhY2UsIHZlYzMgbm9ybWFsX3dvcmxkc3BhY2UpIHtcXG4gIHZlYzMgbGlnaHRDb2xvciA9IHZlYzMoMCwgMCwgMCk7XFxuICB2ZWMzIHN1cmZhY2VDb2xvciA9IHZlYzMoMCwgMCwgMCk7XFxuXFxuICBpZiAobGlnaHRpbmdfdUVuYWJsZWQpIHtcXG4gICAgdmVjMyB2aWV3X2RpcmVjdGlvbiA9IG5vcm1hbGl6ZShjYW1lcmFQb3NpdGlvbiAtIHBvc2l0aW9uX3dvcmxkc3BhY2UpO1xcblxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IE1BWF9MSUdIVFM7IGkrKykge1xcbiAgICAgIGlmIChpID49IGxpZ2h0aW5nX3VQb2ludExpZ2h0Q291bnQpIHtcXG4gICAgICAgIGJyZWFrO1xcbiAgICAgIH1cXG4gICAgICBQb2ludExpZ2h0IHBvaW50TGlnaHQgPSBsaWdodGluZ191UG9pbnRMaWdodFtpXTtcXG4gICAgICB2ZWMzIGxpZ2h0X3Bvc2l0aW9uX3dvcmxkc3BhY2UgPSBwb2ludExpZ2h0LnBvc2l0aW9uO1xcbiAgICAgIHZlYzMgbGlnaHRfZGlyZWN0aW9uID0gbm9ybWFsaXplKGxpZ2h0X3Bvc2l0aW9uX3dvcmxkc3BhY2UgLSBwb3NpdGlvbl93b3JsZHNwYWNlKTtcXG4gICAgICBsaWdodENvbG9yICs9IGxpZ2h0aW5nX2dldExpZ2h0Q29sb3Ioc3VyZmFjZUNvbG9yLCBsaWdodF9kaXJlY3Rpb24sIHZpZXdfZGlyZWN0aW9uLCBub3JtYWxfd29ybGRzcGFjZSwgcG9pbnRMaWdodC5jb2xvcik7XFxuICAgIH1cXG5cXG4gICAgZm9yIChpbnQgaSA9IDA7IGkgPCBNQVhfTElHSFRTOyBpKyspIHtcXG4gICAgICBpZiAoaSA+PSBsaWdodGluZ191RGlyZWN0aW9uYWxMaWdodENvdW50KSB7XFxuICAgICAgICBicmVhaztcXG4gICAgICB9XFxuICAgICAgRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0ID0gbGlnaHRpbmdfdURpcmVjdGlvbmFsTGlnaHRbaV07XFxuICAgICAgbGlnaHRDb2xvciArPSBsaWdodGluZ19nZXRMaWdodENvbG9yKHN1cmZhY2VDb2xvciwgLWRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uLCB2aWV3X2RpcmVjdGlvbiwgbm9ybWFsX3dvcmxkc3BhY2UsIGRpcmVjdGlvbmFsTGlnaHQuY29sb3IpO1xcbiAgICB9XFxuICB9XFxuICByZXR1cm4gbGlnaHRDb2xvcjtcXG59XFxuXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waG9uZy1saWdodGluZy5nbHNsLmpzLm1hcCIsImltcG9ydCB7IGxpZ2h0cyB9IGZyb20gJy4uL2xpZ2h0cy9saWdodHMnO1xuaW1wb3J0IGxpZ2h0aW5nU2hhZGVyIGZyb20gJy4vcGhvbmctbGlnaHRpbmcuZ2xzbCc7XG5jb25zdCBJTklUSUFMX01PRFVMRV9PUFRJT05TID0ge307XG5cbmZ1bmN0aW9uIGdldE1hdGVyaWFsVW5pZm9ybXMobWF0ZXJpYWwpIHtcbiAgY29uc3Qge1xuICAgIGFtYmllbnQgPSAwLjM1LFxuICAgIGRpZmZ1c2UgPSAwLjYsXG4gICAgc2hpbmluZXNzID0gMzIsXG4gICAgc3BlY3VsYXJDb2xvciA9IFszMCwgMzAsIDMwXVxuICB9ID0gbWF0ZXJpYWw7XG4gIHJldHVybiB7XG4gICAgbGlnaHRpbmdfdUFtYmllbnQ6IGFtYmllbnQsXG4gICAgbGlnaHRpbmdfdURpZmZ1c2U6IGRpZmZ1c2UsXG4gICAgbGlnaHRpbmdfdVNoaW5pbmVzczogc2hpbmluZXNzLFxuICAgIGxpZ2h0aW5nX3VTcGVjdWxhckNvbG9yOiBzcGVjdWxhckNvbG9yLm1hcCh4ID0+IHggLyAyNTUpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFVuaWZvcm1zKCkge1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogSU5JVElBTF9NT0RVTEVfT1BUSU9OUztcblxuICBpZiAoISgnbWF0ZXJpYWwnIGluIG9wdHMpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3Qge1xuICAgIG1hdGVyaWFsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghbWF0ZXJpYWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGlnaHRpbmdfdUVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBnZXRNYXRlcmlhbFVuaWZvcm1zKG1hdGVyaWFsKTtcbn1cblxuZXhwb3J0IGNvbnN0IGdvdXJhdWRMaWdodGluZyA9IHtcbiAgbmFtZTogJ2dvdXJhdWQtbGlnaHRpbmcnLFxuICBkZXBlbmRlbmNpZXM6IFtsaWdodHNdLFxuICB2czogbGlnaHRpbmdTaGFkZXIsXG4gIGRlZmluZXM6IHtcbiAgICBMSUdIVElOR19WRVJURVg6IDFcbiAgfSxcbiAgZ2V0VW5pZm9ybXNcbn07XG5leHBvcnQgY29uc3QgcGhvbmdMaWdodGluZyA9IHtcbiAgbmFtZTogJ3Bob25nLWxpZ2h0aW5nJyxcbiAgZGVwZW5kZW5jaWVzOiBbbGlnaHRzXSxcbiAgZnM6IGxpZ2h0aW5nU2hhZGVyLFxuICBkZWZpbmVzOiB7XG4gICAgTElHSFRJTkdfRlJBR01FTlQ6IDFcbiAgfSxcbiAgZ2V0VW5pZm9ybXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waG9uZy1saWdodGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8674\n")},83330:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "q": function() { return /* binding */ picking; }\n/* harmony export */ });\nconst DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null,\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,\n  pickingActive: false,\n  pickingAttribute: false\n};\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  const uniforms = {};\n\n  if (opts.pickingSelectedColor !== undefined) {\n    if (!opts.pickingSelectedColor) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = opts.pickingSelectedColor.slice(0, 3);\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n\n  if (opts.pickingHighlightColor) {\n    const color = Array.from(opts.pickingHighlightColor, x => x / 255);\n\n    if (!Number.isFinite(color[3])) {\n      color[3] = 1;\n    }\n\n    uniforms.picking_uHighlightColor = color;\n  }\n\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = Boolean(opts.pickingActive);\n    uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);\n  }\n\n  return uniforms;\n}\n\nconst vs = "uniform bool picking_uActive;\\nuniform bool picking_uAttribute;\\nuniform vec3 picking_uSelectedColor;\\nuniform bool picking_uSelectedColorValid;\\n\\nout vec4 picking_vRGBcolor_Avalid;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\nbool picking_isColorValid(vec3 color) {\\n  return dot(color, vec3(1.0)) > 0.001;\\n}\\n\\nbool isVertexPicked(vec3 vertexColor) {\\n  return\\n    picking_uSelectedColorValid &&\\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\\n}\\n\\nvoid picking_setPickingColor(vec3 pickingColor) {\\n  if (picking_uActive) {\\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\\n\\n    if (!picking_uAttribute) {\\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\\n    }\\n  } else {\\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\\n  }\\n}\\n\\nvoid picking_setPickingAttribute(float value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.r = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec2 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rg = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec3 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rgb = value;\\n  }\\n}\\n";\nconst fs = "uniform bool picking_uActive;\\nuniform vec3 picking_uSelectedColor;\\nuniform vec4 picking_uHighlightColor;\\n\\nin vec4 picking_vRGBcolor_Avalid;\\nvec4 picking_filterHighlightColor(vec4 color) {\\n  if (picking_uActive) {\\n    return color;\\n  }\\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\\n\\n  if (selected) {\\n    float highLightAlpha = picking_uHighlightColor.a;\\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\\n    float highLightRatio = highLightAlpha / blendedAlpha;\\n\\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\\n    return vec4(blendedRGB, blendedAlpha);\\n  } else {\\n    return color;\\n  }\\n}\\nvec4 picking_filterPickingColor(vec4 color) {\\n  if (picking_uActive) {\\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\\n      discard;\\n    }\\n    return picking_vRGBcolor_Avalid;\\n  }\\n  return color;\\n}\\nvec4 picking_filterColor(vec4 color) {\\n  vec4 highightColor = picking_filterHighlightColor(color);\\n  return picking_filterPickingColor(highightColor);\\n}\\n\\n";\nconst picking = {\n  name: \'picking\',\n  vs,\n  fs,\n  getUniforms\n};\n//# sourceMappingURL=picking.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMzMzAuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5Q0FBeUMsa0NBQWtDLHNDQUFzQywyQ0FBMkMsc0NBQXNDLHdDQUF3QywyQ0FBMkMseUNBQXlDLEdBQUcsMkNBQTJDLHFIQUFxSCxHQUFHLHFEQUFxRCwwQkFBMEIsNkVBQTZFLGtDQUFrQyxrRUFBa0UsT0FBTyxNQUFNLE1BQU0sdUVBQXVFLEtBQUssR0FBRyxtREFBbUQsNkJBQTZCLHlDQUF5QyxLQUFLLEdBQUcsZ0RBQWdELDZCQUE2QiwwQ0FBMEMsS0FBSyxHQUFHLGdEQUFnRCw2QkFBNkIsMkNBQTJDLEtBQUssR0FBRztBQUN0c0MseUNBQXlDLHNDQUFzQyx1Q0FBdUMscUNBQXFDLGlEQUFpRCwwQkFBMEIsbUJBQW1CLEtBQUsscURBQXFELHFCQUFxQix1REFBdUQsNkVBQTZFLDJEQUEyRCxzRkFBc0YsNENBQTRDLE1BQU0sTUFBTSxtQkFBbUIsS0FBSyxHQUFHLCtDQUErQywwQkFBMEIsOENBQThDLGdCQUFnQixPQUFPLHNDQUFzQyxLQUFLLGlCQUFpQixHQUFHLHdDQUF3Qyw2REFBNkQscURBQXFELEdBQUc7QUFDbmhDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC9zaGFkZXJ0b29scy9kaXN0L2VzbS9tb2R1bGVzL3BpY2tpbmcvcGlja2luZy5qcz9mODRkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFRkFVTFRfSElHSExJR0hUX0NPTE9SID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDI1NSwgMjU1LCAyNTVdKTtcbmNvbnN0IERFRkFVTFRfTU9EVUxFX09QVElPTlMgPSB7XG4gIHBpY2tpbmdTZWxlY3RlZENvbG9yOiBudWxsLFxuICBwaWNraW5nSGlnaGxpZ2h0Q29sb3I6IERFRkFVTFRfSElHSExJR0hUX0NPTE9SLFxuICBwaWNraW5nQWN0aXZlOiBmYWxzZSxcbiAgcGlja2luZ0F0dHJpYnV0ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGdldFVuaWZvcm1zKCkge1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogREVGQVVMVF9NT0RVTEVfT1BUSU9OUztcbiAgY29uc3QgdW5pZm9ybXMgPSB7fTtcblxuICBpZiAob3B0cy5waWNraW5nU2VsZWN0ZWRDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFvcHRzLnBpY2tpbmdTZWxlY3RlZENvbG9yKSB7XG4gICAgICB1bmlmb3Jtcy5waWNraW5nX3VTZWxlY3RlZENvbG9yVmFsaWQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzZWxlY3RlZENvbG9yID0gb3B0cy5waWNraW5nU2VsZWN0ZWRDb2xvci5zbGljZSgwLCAzKTtcbiAgICAgIHVuaWZvcm1zLnBpY2tpbmdfdVNlbGVjdGVkQ29sb3JWYWxpZCA9IDE7XG4gICAgICB1bmlmb3Jtcy5waWNraW5nX3VTZWxlY3RlZENvbG9yID0gc2VsZWN0ZWRDb2xvcjtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5waWNraW5nSGlnaGxpZ2h0Q29sb3IpIHtcbiAgICBjb25zdCBjb2xvciA9IEFycmF5LmZyb20ob3B0cy5waWNraW5nSGlnaGxpZ2h0Q29sb3IsIHggPT4geCAvIDI1NSk7XG5cbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShjb2xvclszXSkpIHtcbiAgICAgIGNvbG9yWzNdID0gMTtcbiAgICB9XG5cbiAgICB1bmlmb3Jtcy5waWNraW5nX3VIaWdobGlnaHRDb2xvciA9IGNvbG9yO1xuICB9XG5cbiAgaWYgKG9wdHMucGlja2luZ0FjdGl2ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdW5pZm9ybXMucGlja2luZ191QWN0aXZlID0gQm9vbGVhbihvcHRzLnBpY2tpbmdBY3RpdmUpO1xuICAgIHVuaWZvcm1zLnBpY2tpbmdfdUF0dHJpYnV0ZSA9IEJvb2xlYW4ob3B0cy5waWNraW5nQXR0cmlidXRlKTtcbiAgfVxuXG4gIHJldHVybiB1bmlmb3Jtcztcbn1cblxuY29uc3QgdnMgPSBcInVuaWZvcm0gYm9vbCBwaWNraW5nX3VBY3RpdmU7XFxudW5pZm9ybSBib29sIHBpY2tpbmdfdUF0dHJpYnV0ZTtcXG51bmlmb3JtIHZlYzMgcGlja2luZ191U2VsZWN0ZWRDb2xvcjtcXG51bmlmb3JtIGJvb2wgcGlja2luZ191U2VsZWN0ZWRDb2xvclZhbGlkO1xcblxcbm91dCB2ZWM0IHBpY2tpbmdfdlJHQmNvbG9yX0F2YWxpZDtcXG5cXG5jb25zdCBmbG9hdCBDT0xPUl9TQ0FMRSA9IDEuIC8gMjU1LjtcXG5cXG5ib29sIHBpY2tpbmdfaXNDb2xvclZhbGlkKHZlYzMgY29sb3IpIHtcXG4gIHJldHVybiBkb3QoY29sb3IsIHZlYzMoMS4wKSkgPiAwLjAwMTtcXG59XFxuXFxuYm9vbCBpc1ZlcnRleFBpY2tlZCh2ZWMzIHZlcnRleENvbG9yKSB7XFxuICByZXR1cm5cXG4gICAgcGlja2luZ191U2VsZWN0ZWRDb2xvclZhbGlkICYmXFxuICAgICFwaWNraW5nX2lzQ29sb3JWYWxpZChhYnModmVydGV4Q29sb3IgLSBwaWNraW5nX3VTZWxlY3RlZENvbG9yKSk7XFxufVxcblxcbnZvaWQgcGlja2luZ19zZXRQaWNraW5nQ29sb3IodmVjMyBwaWNraW5nQ29sb3IpIHtcXG4gIGlmIChwaWNraW5nX3VBY3RpdmUpIHtcXG4gICAgcGlja2luZ192UkdCY29sb3JfQXZhbGlkLmEgPSBmbG9hdChwaWNraW5nX2lzQ29sb3JWYWxpZChwaWNraW5nQ29sb3IpKTtcXG5cXG4gICAgaWYgKCFwaWNraW5nX3VBdHRyaWJ1dGUpIHtcXG4gICAgICBwaWNraW5nX3ZSR0Jjb2xvcl9BdmFsaWQucmdiID0gcGlja2luZ0NvbG9yICogQ09MT1JfU0NBTEU7XFxuICAgIH1cXG4gIH0gZWxzZSB7XFxuICAgIHBpY2tpbmdfdlJHQmNvbG9yX0F2YWxpZC5hID0gZmxvYXQoaXNWZXJ0ZXhQaWNrZWQocGlja2luZ0NvbG9yKSk7XFxuICB9XFxufVxcblxcbnZvaWQgcGlja2luZ19zZXRQaWNraW5nQXR0cmlidXRlKGZsb2F0IHZhbHVlKSB7XFxuICBpZiAocGlja2luZ191QXR0cmlidXRlKSB7XFxuICAgIHBpY2tpbmdfdlJHQmNvbG9yX0F2YWxpZC5yID0gdmFsdWU7XFxuICB9XFxufVxcbnZvaWQgcGlja2luZ19zZXRQaWNraW5nQXR0cmlidXRlKHZlYzIgdmFsdWUpIHtcXG4gIGlmIChwaWNraW5nX3VBdHRyaWJ1dGUpIHtcXG4gICAgcGlja2luZ192UkdCY29sb3JfQXZhbGlkLnJnID0gdmFsdWU7XFxuICB9XFxufVxcbnZvaWQgcGlja2luZ19zZXRQaWNraW5nQXR0cmlidXRlKHZlYzMgdmFsdWUpIHtcXG4gIGlmIChwaWNraW5nX3VBdHRyaWJ1dGUpIHtcXG4gICAgcGlja2luZ192UkdCY29sb3JfQXZhbGlkLnJnYiA9IHZhbHVlO1xcbiAgfVxcbn1cXG5cIjtcbmNvbnN0IGZzID0gXCJ1bmlmb3JtIGJvb2wgcGlja2luZ191QWN0aXZlO1xcbnVuaWZvcm0gdmVjMyBwaWNraW5nX3VTZWxlY3RlZENvbG9yO1xcbnVuaWZvcm0gdmVjNCBwaWNraW5nX3VIaWdobGlnaHRDb2xvcjtcXG5cXG5pbiB2ZWM0IHBpY2tpbmdfdlJHQmNvbG9yX0F2YWxpZDtcXG52ZWM0IHBpY2tpbmdfZmlsdGVySGlnaGxpZ2h0Q29sb3IodmVjNCBjb2xvcikge1xcbiAgaWYgKHBpY2tpbmdfdUFjdGl2ZSkge1xcbiAgICByZXR1cm4gY29sb3I7XFxuICB9XFxuICBib29sIHNlbGVjdGVkID0gYm9vbChwaWNraW5nX3ZSR0Jjb2xvcl9BdmFsaWQuYSk7XFxuXFxuICBpZiAoc2VsZWN0ZWQpIHtcXG4gICAgZmxvYXQgaGlnaExpZ2h0QWxwaGEgPSBwaWNraW5nX3VIaWdobGlnaHRDb2xvci5hO1xcbiAgICBmbG9hdCBibGVuZGVkQWxwaGEgPSBoaWdoTGlnaHRBbHBoYSArIGNvbG9yLmEgKiAoMS4wIC0gaGlnaExpZ2h0QWxwaGEpO1xcbiAgICBmbG9hdCBoaWdoTGlnaHRSYXRpbyA9IGhpZ2hMaWdodEFscGhhIC8gYmxlbmRlZEFscGhhO1xcblxcbiAgICB2ZWMzIGJsZW5kZWRSR0IgPSBtaXgoY29sb3IucmdiLCBwaWNraW5nX3VIaWdobGlnaHRDb2xvci5yZ2IsIGhpZ2hMaWdodFJhdGlvKTtcXG4gICAgcmV0dXJuIHZlYzQoYmxlbmRlZFJHQiwgYmxlbmRlZEFscGhhKTtcXG4gIH0gZWxzZSB7XFxuICAgIHJldHVybiBjb2xvcjtcXG4gIH1cXG59XFxudmVjNCBwaWNraW5nX2ZpbHRlclBpY2tpbmdDb2xvcih2ZWM0IGNvbG9yKSB7XFxuICBpZiAocGlja2luZ191QWN0aXZlKSB7XFxuICAgIGlmIChwaWNraW5nX3ZSR0Jjb2xvcl9BdmFsaWQuYSA9PSAwLjApIHtcXG4gICAgICBkaXNjYXJkO1xcbiAgICB9XFxuICAgIHJldHVybiBwaWNraW5nX3ZSR0Jjb2xvcl9BdmFsaWQ7XFxuICB9XFxuICByZXR1cm4gY29sb3I7XFxufVxcbnZlYzQgcGlja2luZ19maWx0ZXJDb2xvcih2ZWM0IGNvbG9yKSB7XFxuICB2ZWM0IGhpZ2hpZ2h0Q29sb3IgPSBwaWNraW5nX2ZpbHRlckhpZ2hsaWdodENvbG9yKGNvbG9yKTtcXG4gIHJldHVybiBwaWNraW5nX2ZpbHRlclBpY2tpbmdDb2xvcihoaWdoaWdodENvbG9yKTtcXG59XFxuXFxuXCI7XG5leHBvcnQgY29uc3QgcGlja2luZyA9IHtcbiAgbmFtZTogJ3BpY2tpbmcnLFxuICB2cyxcbiAgZnMsXG4gIGdldFVuaWZvcm1zXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlja2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83330\n')},29047:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": function() { return /* binding */ assert; }\n/* harmony export */ });\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'shadertools: assertion failed.');\n  }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkwNDcuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9AbHVtYS5nbC9zaGFkZXJ0b29scy9kaXN0L2VzbS91dGlscy9hc3NlcnQuanM/ZGU5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ3NoYWRlcnRvb2xzOiBhc3NlcnRpb24gZmFpbGVkLicpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29047\n")}}]);