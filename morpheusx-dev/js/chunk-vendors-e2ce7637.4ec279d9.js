"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[3924],{16626:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(66553);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(83856);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(59947);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8182);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(39960);\n/* harmony import */ var _Core_Credit_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(52975);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(12572);\n/* harmony import */ var _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(47861);\n/* harmony import */ var _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(96037);\n/* harmony import */ var _Core_getAbsoluteUri_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(83295);\n/* harmony import */ var _Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(12540);\n/* harmony import */ var _Core_getMagic_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(3020);\n/* harmony import */ var _Core_getStringFromTypedArray_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(66659);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(22832);\n/* harmony import */ var _Core_loadImageFromTypedArray_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(10945);\n/* harmony import */ var _Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(54973);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(72248);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(38443);\n/* harmony import */ var _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(97264);\n/* harmony import */ var _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(87811);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(68985);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(95555);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(52200);\n/* harmony import */ var _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(99095);\n/* harmony import */ var _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(58597);\n/* harmony import */ var _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(60072);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(10667);\n/* harmony import */ var _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(87721);\n/* harmony import */ var _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(46588);\n/* harmony import */ var _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(53642);\n/* harmony import */ var _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(8743);\n/* harmony import */ var _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(80188);\n/* harmony import */ var _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(88453);\n/* harmony import */ var _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(18192);\n/* harmony import */ var _GltfPipeline_addDefaults_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(32550);\n/* harmony import */ var _GltfPipeline_addPipelineExtras_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(93410);\n/* harmony import */ var _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(56629);\n/* harmony import */ var _GltfPipeline_getAccessorByteStride_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(93224);\n/* harmony import */ var _GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(29745);\n/* harmony import */ var _GltfPipeline_numberOfComponentsForType_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(26806);\n/* harmony import */ var _GltfPipeline_parseGlb_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(52655);\n/* harmony import */ var _GltfPipeline_updateVersion_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(6186);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(13222);\n/* harmony import */ var _Axis_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(66577);\n/* harmony import */ var _BlendingState_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(13633);\n/* harmony import */ var _ClippingPlaneCollection_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(21809);\n/* harmony import */ var _ColorBlendMode_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(75464);\n/* harmony import */ var _DepthFunction_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(7976);\n/* harmony import */ var _DracoLoader_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(8056);\n/* harmony import */ var _getClipAndStyleCode_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(11013);\n/* harmony import */ var _getClippingFunction_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(84167);\n/* harmony import */ var _HeightReference_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(4260);\n/* harmony import */ var _JobType_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(92454);\n/* harmony import */ var _ModelAnimationCache_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(81977);\n/* harmony import */ var _ModelAnimationCollection_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(73431);\n/* harmony import */ var _ModelLoadResources_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(28770);\n/* harmony import */ var _ModelMaterial_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(74333);\n/* harmony import */ var _ModelMesh_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(55531);\n/* harmony import */ var _ModelNode_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(10531);\n/* harmony import */ var _ModelOutlineLoader_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(32851);\n/* harmony import */ var _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(15322);\n/* harmony import */ var _OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(22277);\n/* harmony import */ var _processModelMaterialsCommon_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(51240);\n/* harmony import */ var _processPbrMaterials_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(14503);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(89917);\n/* harmony import */ var _ShadowMode_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(34125);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(87233);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar boundingSphereCartesian3Scratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nvar ModelState = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].ModelState */ .Z.ModelState;\n\n// glTF MIME types discussed in https://github.com/KhronosGroup/glTF/issues/412 and https://github.com/KhronosGroup/glTF/issues/943\nvar defaultModelAccept =\n  "model/gltf-binary,model/gltf+json;q=0.8,application/json;q=0.2,*/*;q=0.01";\n\nvar articulationEpsilon = _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].EPSILON16 */ .Z.EPSILON16;\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction setCachedGltf(model, cachedGltf) {\n  model._cachedGltf = cachedGltf;\n}\n\n// glTF JSON can be big given embedded geometry, textures, and animations, so we\n// cache it across all models using the same url/cache-key.  This also reduces the\n// slight overhead in assigning defaults to missing values.\n//\n// Note that this is a global cache, compared to renderer resources, which\n// are cached per context.\nfunction CachedGltf(options) {\n  this._gltf = options.gltf;\n  this.ready = options.ready;\n  this.modelsToLoad = [];\n  this.count = 0;\n}\n\nObject.defineProperties(CachedGltf.prototype, {\n  gltf: {\n    set: function (value) {\n      this._gltf = value;\n    },\n\n    get: function () {\n      return this._gltf;\n    },\n  },\n});\n\nCachedGltf.prototype.makeReady = function (gltfJson) {\n  this.gltf = gltfJson;\n\n  var models = this.modelsToLoad;\n  var length = models.length;\n  for (var i = 0; i < length; ++i) {\n    var m = models[i];\n    if (!m.isDestroyed()) {\n      setCachedGltf(m, this);\n    }\n  }\n  this.modelsToLoad = undefined;\n  this.ready = true;\n};\n\nvar gltfCache = {};\nvar uriToGuid = {};\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * A 3D model based on glTF, the runtime asset format for WebGL, OpenGL ES, and OpenGL.\n * <p>\n * Cesium includes support for geometry and materials, glTF animations, and glTF skinning.\n * In addition, individual glTF nodes are pickable with {@link Scene#pick} and animatable\n * with {@link Model#getNode}.  glTF cameras and lights are not currently supported.\n * </p>\n * <p>\n * An external glTF asset is created with {@link Model.fromGltf}.  glTF JSON can also be\n * created at runtime and passed to this constructor function.  In either case, the\n * {@link Model#readyPromise} is resolved when the model is ready to render, i.e.,\n * when the external binary, image, and shader files are downloaded and the WebGL\n * resources are created.\n * </p>\n * <p>\n * Cesium supports glTF assets with the following extensions:\n * <ul>\n * <li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/README.md|KHR_binary_glTF (glTF 1.0)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_materials_common/README.md|KHR_materials_common (glTF 1.0)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/WEB3D_quantized_attributes/README.md|WEB3D_quantized_attributes (glTF 1.0)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/AGI_articulations/README.md|AGI_articulations}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/pull/1302|KHR_blend (draft)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md|KHR_draco_mesh_compression}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/README.md|KHR_materials_pbrSpecularGlossiness}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit/README.md|KHR_materials_unlit}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_techniques_webgl/README.md|KHR_techniques_webgl}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/README.md|KHR_texture_transform}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_basisu|KHR_texture_basisu}\n * </li>\n * </ul>\n * </p>\n * <p>\n * Note: for models with compressed textures using the KHR_texture_basisu extension, we recommend power of 2 textures in both dimensions\n * for maximum compatibility. This is because some samplers require power of 2 textures ({@link https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL|Using textures in WebGL})\n * and KHR_texture_basisu requires multiple of 4 dimensions ({@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_basisu/README.md#additional-requirements|KHR_texture_basisu additional requirements}).\n * </p>\n * <p>\n * For high-precision rendering, Cesium supports the {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/CESIUM_RTC/README.md|CESIUM_RTC} extension, which introduces the\n * CESIUM_RTC_MODELVIEW parameter semantic that says the node is in WGS84 coordinates translated\n * relative to a local origin.\n * </p>\n *\n * @alias Model\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Object|ArrayBuffer|Uint8Array} [options.gltf] A glTF JSON object, or a binary glTF buffer.\n * @param {Resource|String} [options.basePath=\'\'] The base path that paths in the glTF JSON are relative to.\n * @param {Boolean} [options.show=true] Determines if the model primitive will be shown.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the model from model to world coordinates.\n * @param {Number} [options.scale=1.0] A uniform scale applied to this model.\n * @param {Number} [options.minimumPixelSize=0.0] The approximate minimum pixel size of the model regardless of zoom.\n * @param {Number} [options.maximumScale] The maximum scale size of a model. An upper limit for minimumPixelSize.\n * @param {Object} [options.id] A user-defined object to return when the model is picked with {@link Scene#pick}.\n * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each glTF mesh and primitive is pickable with {@link Scene#pick}.\n * @param {Boolean} [options.incrementallyLoadTextures=true] Determine if textures may continue to stream in after the model is loaded.\n * @param {Boolean} [options.asynchronous=true] Determines if model WebGL resource creation will be spread out over several frames or block until completion once all glTF files are loaded.\n * @param {Boolean} [options.clampAnimations=true] Determines if the model\'s animations should hold a pose over frames where no keyframes are specified.\n * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the model casts or receives shadows from light sources.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for each draw command in the model.\n * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the model in wireframe.\n * @param {HeightReference} [options.heightReference=HeightReference.NONE] Determines how the model is drawn relative to terrain.\n * @param {Scene} [options.scene] Must be passed in for models that use the height reference property.\n * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this model will be displayed.\n * @param {Color} [options.color=Color.WHITE] A color that blends with the model\'s rendered color.\n * @param {ColorBlendMode} [options.colorBlendMode=ColorBlendMode.HIGHLIGHT] Defines how the color blends with the model.\n * @param {Number} [options.colorBlendAmount=0.5] Value used to determine the color strength when the <code>colorBlendMode</code> is <code>MIX</code>. A value of 0.0 results in the model\'s rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.\n * @param {Color} [options.silhouetteColor=Color.RED] The silhouette color. If more than 256 models have silhouettes enabled, there is a small chance that overlapping models will have minor artifacts.\n * @param {Number} [options.silhouetteSize=0.0] The size of the silhouette in pixels.\n * @param {ClippingPlaneCollection} [options.clippingPlanes] The {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n * @param {Boolean} [options.dequantizeInShader=true] Determines if a {@link https://github.com/google/draco|Draco} encoded model is dequantized on the GPU. This decreases total memory usage for encoded models.\n * @param {Cartesian2} [options.imageBasedLightingFactor=Cartesian2(1.0, 1.0)] Scales diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n * @param {Cartesian3} [options.lightColor] The light color when shading the model. When <code>undefined</code> the scene\'s light color is used instead.\n * @param {Number} [options.luminanceAtZenith=0.2] The sun\'s luminance at the zenith in kilo candela per meter squared to use for this model\'s procedural environment map.\n * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n * @param {String} [options.specularEnvironmentMaps] A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n * @param {Boolean} [options.backFaceCulling=true] Whether to cull back-facing geometry. When true, back face culling is determined by the material\'s doubleSided property; when false, back face culling is disabled. Back faces are not culled if {@link Model#color} is translucent or {@link Model#silhouetteSize} is greater than 0.0.\n * @param {Boolean} [options.showOutline=true] Whether to display the outline for models using the {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/CESIUM_primitive_outline|CESIUM_primitive_outline} extension. When true, outlines are displayed. When false, outlines are not displayed.\n *\n * @see Model.fromGltf\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=3D%20Models.html|Cesium Sandcastle Models Demo}\n */\nfunction Model(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var cacheKey = options.cacheKey;\n  this._cacheKey = cacheKey;\n  this._cachedGltf = undefined;\n  this._releaseGltfJson = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.releaseGltfJson, false);\n\n  var cachedGltf;\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(cacheKey) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltfCache[cacheKey]) &&\n    gltfCache[cacheKey].ready\n  ) {\n    // glTF JSON is in cache and ready\n    cachedGltf = gltfCache[cacheKey];\n    ++cachedGltf.count;\n  } else {\n    // glTF was explicitly provided, e.g., when a user uses the Model constructor directly\n    var gltf = options.gltf;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltf)) {\n      if (gltf instanceof ArrayBuffer) {\n        gltf = new Uint8Array(gltf);\n      }\n\n      if (gltf instanceof Uint8Array) {\n        // Binary glTF\n        var parsedGltf = (0,_GltfPipeline_parseGlb_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"] */ .Z)(gltf);\n\n        cachedGltf = new CachedGltf({\n          gltf: parsedGltf,\n          ready: true,\n        });\n      } else {\n        // Normal glTF (JSON)\n        cachedGltf = new CachedGltf({\n          gltf: options.gltf,\n          ready: true,\n        });\n      }\n\n      cachedGltf.count = 1;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(cacheKey)) {\n        gltfCache[cacheKey] = cachedGltf;\n      }\n    }\n  }\n  setCachedGltf(this, cachedGltf);\n\n  var basePath = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.basePath, "");\n  this._resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].createIfNeeded */ .Z.createIfNeeded(basePath);\n\n  // User specified credit\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(credit);\n  }\n  this._credit = credit;\n\n  // Create a list of Credit\'s so they can be added from the Resource later\n  this._resourceCredits = [];\n\n  /**\n   * Determines if the model primitive will be shown.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.show, true);\n\n  /**\n   * The silhouette color.\n   *\n   * @type {Color}\n   *\n   * @default Color.RED\n   */\n  this.silhouetteColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.silhouetteColor, _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].RED */ .Z.RED);\n  this._silhouetteColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\n  this._silhouetteColorPreviousAlpha = 1.0;\n  this._normalAttributeName = undefined;\n\n  /**\n   * The size of the silhouette in pixels.\n   *\n   * @type {Number}\n   *\n   * @default 0.0\n   */\n  this.silhouetteSize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.silhouetteSize, 0.0);\n\n  /**\n   * The 4x4 transformation matrix that transforms the model from model to world coordinates.\n   * When this is the identity matrix, the model is drawn in world coordinates, i.e., Earth\'s WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   *\n   * @default {@link Matrix4.IDENTITY}\n   *\n   * @example\n   * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n   * m.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n   */\n  this.modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.modelMatrix, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].IDENTITY */ .Z.IDENTITY)\n  );\n  this._modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(this.modelMatrix);\n  this._clampedModelMatrix = undefined;\n\n  /**\n   * A uniform scale applied to this model before the {@link Model#modelMatrix}.\n   * Values greater than <code>1.0</code> increase the size of the model; values\n   * less than <code>1.0</code> decrease.\n   *\n   * @type {Number}\n   *\n   * @default 1.0\n   */\n  this.scale = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.scale, 1.0);\n  this._scale = this.scale;\n\n  /**\n   * The approximate minimum pixel size of the model regardless of zoom.\n   * This can be used to ensure that a model is visible even when the viewer\n   * zooms out.  When <code>0.0</code>, no minimum size is enforced.\n   *\n   * @type {Number}\n   *\n   * @default 0.0\n   */\n  this.minimumPixelSize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.minimumPixelSize, 0.0);\n  this._minimumPixelSize = this.minimumPixelSize;\n\n  /**\n   * The maximum scale size for a model. This can be used to give\n   * an upper limit to the {@link Model#minimumPixelSize}, ensuring that the model\n   * is never an unreasonable scale.\n   *\n   * @type {Number}\n   */\n  this.maximumScale = options.maximumScale;\n  this._maximumScale = this.maximumScale;\n\n  /**\n   * User-defined object returned when the model is picked.\n   *\n   * @type Object\n   *\n   * @default undefined\n   *\n   * @see Scene#pick\n   */\n  this.id = options.id;\n  this._id = options.id;\n\n  /**\n   * Returns the height reference of the model\n   *\n   * @type {HeightReference}\n   *\n   * @default HeightReference.NONE\n   */\n  this.heightReference = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    options.heightReference,\n    _HeightReference_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"].NONE */ .Z.NONE\n  );\n  this._heightReference = this.heightReference;\n  this._heightChanged = false;\n  this._removeUpdateHeightCallback = undefined;\n  var scene = options.scene;\n  this._scene = scene;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(scene) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(scene.terrainProviderChanged)) {\n    this._terrainProviderChangedCallback = scene.terrainProviderChanged.addEventListener(\n      function () {\n        this._heightChanged = true;\n      },\n      this\n    );\n  }\n\n  /**\n   * Used for picking primitives that wrap a model.\n   *\n   * @private\n   */\n  this._pickObject = options.pickObject;\n  this._allowPicking = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.allowPicking, true);\n\n  this._ready = false;\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"].defer */ .Z.defer();\n\n  /**\n   * The currently playing glTF animations.\n   *\n   * @type {ModelAnimationCollection}\n   */\n  this.activeAnimations = new _ModelAnimationCollection_js__WEBPACK_IMPORTED_MODULE_61__/* ["default"] */ .Z(this);\n\n  /**\n   * Determines if the model\'s animations should hold a pose over frames where no keyframes are specified.\n   *\n   * @type {Boolean}\n   */\n  this.clampAnimations = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.clampAnimations, true);\n\n  this._defaultTexture = undefined;\n  this._incrementallyLoadTextures = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    options.incrementallyLoadTextures,\n    true\n  );\n  this._asynchronous = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.asynchronous, true);\n\n  /**\n   * Determines whether the model casts or receives shadows from light sources.\n   *\n   * @type {ShadowMode}\n   *\n   * @default ShadowMode.ENABLED\n   */\n  this.shadows = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.shadows, _ShadowMode_js__WEBPACK_IMPORTED_MODULE_72__/* ["default"].ENABLED */ .Z.ENABLED);\n  this._shadows = this.shadows;\n\n  /**\n   * A color that blends with the model\'s rendered color.\n   *\n   * @type {Color}\n   *\n   * @default Color.WHITE\n   */\n  this.color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.color, _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].WHITE */ .Z.WHITE));\n  this._colorPreviousAlpha = 1.0;\n\n  /**\n   * Defines how the color blends with the model.\n   *\n   * @type {ColorBlendMode}\n   *\n   * @default ColorBlendMode.HIGHLIGHT\n   */\n  this.colorBlendMode = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    options.colorBlendMode,\n    _ColorBlendMode_js__WEBPACK_IMPORTED_MODULE_53__/* ["default"].HIGHLIGHT */ .Z.HIGHLIGHT\n  );\n\n  /**\n   * Value used to determine the color strength when the <code>colorBlendMode</code> is <code>MIX</code>.\n   * A value of 0.0 results in the model\'s rendered color while a value of 1.0 results in a solid color, with\n   * any value in-between resulting in a mix of the two.\n   *\n   * @type {Number}\n   *\n   * @default 0.5\n   */\n  this.colorBlendAmount = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.colorBlendAmount, 0.5);\n\n  this._colorShadingEnabled = false;\n\n  this._clippingPlanes = undefined;\n  this.clippingPlanes = options.clippingPlanes;\n  // Used for checking if shaders need to be regenerated due to clipping plane changes.\n  this._clippingPlanesState = 0;\n\n  // If defined, use this matrix to transform miscellaneous properties like\n  // clipping planes and IBL instead of the modelMatrix. This is so that when\n  // models are part of a tileset these properties get transformed relative to\n  // a common reference (such as the root).\n  this.referenceMatrix = undefined;\n\n  /**\n   * Whether to cull back-facing geometry. When true, back face culling is\n   * determined by the material\'s doubleSided property; when false, back face\n   * culling is disabled. Back faces are not culled if {@link Model#color} is\n   * translucent or {@link Model#silhouetteSize} is greater than 0.0.\n   *\n   * @type {Boolean}\n   *\n   * @default true\n   */\n  this.backFaceCulling = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.backFaceCulling, true);\n\n  /**\n   * Whether to display the outline for models using the\n   * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/CESIUM_primitive_outline|CESIUM_primitive_outline} extension.\n   * When true, outlines are displayed. When false, outlines are not displayed.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  this.showOutline = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.showOutline, true);\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the model.  A glTF primitive corresponds\n   * to one draw command.  A glTF mesh has an array of primitives, often of length one.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n  this._debugShowBoundingVolume = false;\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the model in wireframe.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugWireframe = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.debugWireframe, false);\n  this._debugWireframe = false;\n\n  this._distanceDisplayCondition = options.distanceDisplayCondition;\n\n  // Undocumented options\n  this._addBatchIdToGeneratedShaders = options.addBatchIdToGeneratedShaders;\n  this._precreatedAttributes = options.precreatedAttributes;\n  this._vertexShaderLoaded = options.vertexShaderLoaded;\n  this._fragmentShaderLoaded = options.fragmentShaderLoaded;\n  this._uniformMapLoaded = options.uniformMapLoaded;\n  this._pickIdLoaded = options.pickIdLoaded;\n  this._ignoreCommands = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.ignoreCommands, false);\n  this._requestType = options.requestType;\n  this._upAxis = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.upAxis, _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].Y */ .Z.Y);\n  this._gltfForwardAxis = _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].Z */ .Z.Z;\n  this._forwardAxis = options.forwardAxis;\n\n  /**\n   * @private\n   * @readonly\n   */\n  this.cull = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.cull, true);\n\n  /**\n   * @private\n   * @readonly\n   */\n  this.opaquePass = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.opaquePass, _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE);\n\n  this._computedModelMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(); // Derived from modelMatrix and scale\n  this._clippingPlanesMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].IDENTITY */ .Z.IDENTITY); // Derived from reference matrix and the current view matrix\n  this._iblReferenceFrameMatrix = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].clone */ .Z.clone(_Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].IDENTITY */ .Z.IDENTITY); // Derived from reference matrix and the current view matrix\n  this._initialRadius = undefined; // Radius without model\'s scale property, model-matrix scale, animations, or skins\n  this._boundingSphere = undefined;\n  this._scaledBoundingSphere = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._state = ModelState.NEEDS_LOAD;\n  this._loadResources = undefined;\n\n  this._mode = undefined;\n\n  this._perNodeShowDirty = false; // true when the Cesium API was used to change a node\'s show property\n  this._cesiumAnimationsDirty = false; // true when the Cesium API, not a glTF animation, changed a node transform\n  this._dirty = false; // true when the model was transformed this frame\n  this._maxDirtyNumber = 0; // Used in place of a dirty boolean flag to avoid an extra graph traversal\n\n  this._runtime = {\n    animations: undefined,\n    articulationsByName: undefined,\n    articulationsByStageKey: undefined,\n    stagesByKey: undefined,\n    rootNodes: undefined,\n    nodes: undefined, // Indexed with the node\'s index\n    nodesByName: undefined, // Indexed with name property in the node\n    skinnedNodes: undefined,\n    meshesByName: undefined, // Indexed with the name property in the mesh\n    materialsByName: undefined, // Indexed with the name property in the material\n    materialsById: undefined, // Indexed with the material\'s index\n  };\n\n  this._uniformMaps = {}; // Not cached since it can be targeted by glTF animation\n  this._extensionsUsed = undefined; // Cached used glTF extensions\n  this._extensionsRequired = undefined; // Cached required glTF extensions\n  this._quantizedUniforms = {}; // Quantized uniforms for each program for WEB3D_quantized_attributes\n  this._programPrimitives = {};\n  this._rendererResources = {\n    // Cached between models with the same url/cache-key\n    buffers: {},\n    vertexArrays: {},\n    programs: {},\n    sourceShaders: {},\n    silhouettePrograms: {},\n    textures: {},\n    samplers: {},\n    renderStates: {},\n  };\n  this._cachedRendererResources = undefined;\n  this._loadRendererResourcesFromCache = false;\n\n  this._dequantizeInShader = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.dequantizeInShader, true);\n  this._decodedData = {};\n\n  this._cachedGeometryByteLength = 0;\n  this._cachedTexturesByteLength = 0;\n  this._geometryByteLength = 0;\n  this._texturesByteLength = 0;\n  this._trianglesLength = 0;\n  this._pointsLength = 0;\n\n  // Hold references for shader reconstruction.\n  // Hold these separately because _cachedGltf may get released (this.releaseGltfJson)\n  this._sourceTechniques = {};\n  this._sourcePrograms = {};\n  this._quantizedVertexShaders = {};\n\n  this._nodeCommands = [];\n  this._pickIds = [];\n\n  // CESIUM_RTC extension\n  this._rtcCenter = undefined; // reference to either 3D or 2D\n  this._rtcCenterEye = undefined; // in eye coordinates\n  this._rtcCenter3D = undefined; // in world coordinates\n  this._rtcCenter2D = undefined; // in projected world coordinates\n\n  this._sourceVersion = undefined;\n  this._sourceKHRTechniquesWebGL = undefined;\n\n  this._imageBasedLightingFactor = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(1.0, 1.0);\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    options.imageBasedLightingFactor,\n    this._imageBasedLightingFactor\n  );\n  this._lightColor = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(options.lightColor);\n\n  this._luminanceAtZenith = undefined;\n  this.luminanceAtZenith = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.luminanceAtZenith, 0.2);\n\n  this._sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n  this._specularEnvironmentMaps = options.specularEnvironmentMaps;\n  this._shouldUpdateSpecularMapAtlas = true;\n  this._specularEnvironmentMapAtlas = undefined;\n\n  this._useDefaultSphericalHarmonics = false;\n  this._useDefaultSpecularMaps = false;\n\n  this._shouldRegenerateShaders = false;\n}\n\nObject.defineProperties(Model.prototype, {\n  /**\n   * The object for the glTF JSON, including properties with default values omitted\n   * from the JSON provided to this model.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  gltf: {\n    get: function () {\n      return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._cachedGltf) ? this._cachedGltf.gltf : undefined;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the glTF JSON is not stored with the model once the model is\n   * loaded (when {@link Model#ready} is <code>true</code>).  This saves memory when\n   * geometry, textures, and animations are embedded in the .gltf file.\n   * This is especially useful for cases like 3D buildings, where each .gltf model is unique\n   * and caching the glTF JSON is not effective.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   *\n   * @private\n   */\n  releaseGltfJson: {\n    get: function () {\n      return this._releaseGltfJson;\n    },\n  },\n\n  /**\n   * The key identifying this model in the model cache for glTF JSON, renderer resources, and animations.\n   * Caching saves memory and improves loading speed when several models with the same url are created.\n   * <p>\n   * This key is automatically generated when the model is created with {@link Model.fromGltf}.  If the model\n   * is created directly from glTF JSON using the {@link Model} constructor, this key can be manually\n   * provided; otherwise, the model will not be changed.\n   * </p>\n   *\n   * @memberof Model.prototype\n   *\n   * @type {String}\n   * @readonly\n   *\n   * @private\n   */\n  cacheKey: {\n    get: function () {\n      return this._cacheKey;\n    },\n  },\n\n  /**\n   * The base path that paths in the glTF JSON are relative to.  The base\n   * path is the same path as the path containing the .gltf file\n   * minus the .gltf file, when binary, image, and shader files are\n   * in the same directory as the .gltf.  When this is <code>\'\'</code>,\n   * the app\'s base path is used.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {String}\n   * @readonly\n   *\n   * @default \'\'\n   */\n  basePath: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * The model\'s bounding sphere in its local coordinate system.  This does not take into\n   * account glTF animations and skins nor does it take into account {@link Model#minimumPixelSize}.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {BoundingSphere}\n   * @readonly\n   *\n   * @default undefined\n   *\n   * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n   *\n   * @example\n   * // Center in WGS84 coordinates\n   * var center = Cesium.Matrix4.multiplyByPoint(model.modelMatrix, model.boundingSphere.center, new Cesium.Cartesian3());\n   */\n  boundingSphere: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (this._state !== ModelState.LOADED) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n          "The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      var modelMatrix = this.modelMatrix;\n      if (\n        this.heightReference !== _HeightReference_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"].NONE */ .Z.NONE &&\n        this._clampedModelMatrix\n      ) {\n        modelMatrix = this._clampedModelMatrix;\n      }\n\n      var nonUniformScale = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].getScale */ .Z.getScale(\n        modelMatrix,\n        boundingSphereCartesian3Scratch\n      );\n      var scale = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this.maximumScale)\n        ? Math.min(this.maximumScale, this.scale)\n        : this.scale;\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(nonUniformScale, scale, nonUniformScale);\n\n      var scaledBoundingSphere = this._scaledBoundingSphere;\n      scaledBoundingSphere.center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyComponents */ .Z.multiplyComponents(\n        this._boundingSphere.center,\n        nonUniformScale,\n        scaledBoundingSphere.center\n      );\n      scaledBoundingSphere.radius =\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maximumComponent */ .Z.maximumComponent(nonUniformScale) * this._initialRadius;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._rtcCenter)) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n          this._rtcCenter,\n          scaledBoundingSphere.center,\n          scaledBoundingSphere.center\n        );\n      }\n\n      return scaledBoundingSphere;\n    },\n  },\n\n  /**\n   * When <code>true</code>, this model is ready to render, i.e., the external binary, image,\n   * and shader files were downloaded and the WebGL resources were created.  This is set to\n   * <code>true</code> right before {@link Model#readyPromise} is resolved.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when this model is ready to render, i.e., when the external binary, image,\n   * and shader files were downloaded and the WebGL resources were created.\n   * <p>\n   * This promise is resolved at the end of the frame before the first frame the model is rendered in.\n   * </p>\n   *\n   * @memberof Model.prototype\n   * @type {Promise.<Model>}\n   * @readonly\n   *\n   * @example\n   * // Play all animations at half-speed when the model is ready to render\n   * Cesium.when(model.readyPromise).then(function(model) {\n   *   model.activeAnimations.addAll({\n   *     multiplier : 0.5\n   *   });\n   * }).otherwise(function(error){\n   *   window.alert(error);\n   * });\n   *\n   * @see Model#ready\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Determines if model WebGL resource creation will be spread out over several frames or\n   * block until completion once all glTF files are loaded.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  asynchronous: {\n    get: function () {\n      return this._asynchronous;\n    },\n  },\n\n  /**\n   * When <code>true</code>, each glTF mesh and primitive is pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  allowPicking: {\n    get: function () {\n      return this._allowPicking;\n    },\n  },\n\n  /**\n   * Determine if textures may continue to stream in after the model is loaded.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  incrementallyLoadTextures: {\n    get: function () {\n      return this._incrementallyLoadTextures;\n    },\n  },\n\n  /**\n   * Return the number of pending texture loads.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  pendingTextureLoads: {\n    get: function () {\n      return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._loadResources)\n        ? this._loadResources.pendingTextureLoads\n        : 0;\n    },\n  },\n\n  /**\n   * Returns true if the model was transformed this frame\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  dirty: {\n    get: function () {\n      return this._dirty;\n    },\n  },\n\n  /**\n   * Gets or sets the condition specifying at what distance from the camera that this model will be displayed.\n   * @memberof Model.prototype\n   * @type {DistanceDisplayCondition}\n   * @default undefined\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value) && value.far <= value.near) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("far must be greater than near");\n      }\n      //>>includeEnd(\'debug\');\n      this._distanceDisplayCondition = _Core_DistanceDisplayCondition_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(\n        value,\n        this._distanceDisplayCondition\n      );\n    },\n  },\n\n  extensionsUsed: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._extensionsUsed)) {\n        this._extensionsUsed = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getUsedExtensions */ .Z.getUsedExtensions(this.gltf);\n      }\n      return this._extensionsUsed;\n    },\n  },\n\n  extensionsRequired: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._extensionsRequired)) {\n        this._extensionsRequired = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getRequiredExtensions */ .Z.getRequiredExtensions(\n          this.gltf\n        );\n      }\n      return this._extensionsRequired;\n    },\n  },\n\n  /**\n   * Gets the model\'s up-axis.\n   * By default models are y-up according to the glTF spec, however geo-referenced models will typically be z-up.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Number}\n   * @default Axis.Y\n   * @readonly\n   *\n   * @private\n   */\n  upAxis: {\n    get: function () {\n      return this._upAxis;\n    },\n  },\n\n  /**\n   * Gets the model\'s forward axis.\n   * By default, glTF 2.0 models are z-forward according to the glTF spec, however older\n   * glTF (1.0, 0.8) models used x-forward.  Note that only Axis.X and Axis.Z are supported.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Number}\n   * @default Axis.Z\n   * @readonly\n   *\n   * @private\n   */\n  forwardAxis: {\n    get: function () {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._forwardAxis)) {\n        return this._forwardAxis;\n      }\n      return this._gltfForwardAxis;\n    },\n  },\n\n  /**\n   * Gets the model\'s triangle count.\n   *\n   * @private\n   */\n  trianglesLength: {\n    get: function () {\n      return this._trianglesLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s point count.\n   *\n   * @private\n   */\n  pointsLength: {\n    get: function () {\n      return this._pointsLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s geometry memory in bytes. This includes all vertex and index buffers.\n   *\n   * @private\n   */\n  geometryByteLength: {\n    get: function () {\n      return this._geometryByteLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s texture memory in bytes.\n   *\n   * @private\n   */\n  texturesByteLength: {\n    get: function () {\n      return this._texturesByteLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s cached geometry memory in bytes. This includes all vertex and index buffers.\n   *\n   * @private\n   */\n  cachedGeometryByteLength: {\n    get: function () {\n      return this._cachedGeometryByteLength;\n    },\n  },\n\n  /**\n   * Gets the model\'s cached texture memory in bytes.\n   *\n   * @private\n   */\n  cachedTexturesByteLength: {\n    get: function () {\n      return this._cachedTexturesByteLength;\n    },\n  },\n\n  /**\n   * The {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {ClippingPlaneCollection}\n   */\n  clippingPlanes: {\n    get: function () {\n      return this._clippingPlanes;\n    },\n    set: function (value) {\n      if (value === this._clippingPlanes) {\n        return;\n      }\n      // Handle destroying, checking of unknown, checking for existing ownership\n      _ClippingPlaneCollection_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"].setOwner */ .Z.setOwner(value, this, "_clippingPlanes");\n    },\n  },\n\n  /**\n   * @private\n   */\n  pickIds: {\n    get: function () {\n      return this._pickIds;\n    },\n  },\n\n  /**\n   * Cesium adds lighting from the earth, sky, atmosphere, and star skybox. This cartesian is used to scale the final\n   * diffuse and specular lighting contribution from those sources to the final color. A value of 0.0 will disable those light sources.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Cartesian2}\n   * @default Cartesian2(1.0, 1.0)\n   */\n  imageBasedLightingFactor: {\n    get: function () {\n      return this._imageBasedLightingFactor;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("imageBasedLightingFactor", value);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n        "imageBasedLightingFactor.x",\n        value.x,\n        0.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n        "imageBasedLightingFactor.x",\n        value.x,\n        1.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n        "imageBasedLightingFactor.y",\n        value.y,\n        0.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n        "imageBasedLightingFactor.y",\n        value.y,\n        1.0\n      );\n      //>>includeEnd(\'debug\');\n      var imageBasedLightingFactor = this._imageBasedLightingFactor;\n      if (\n        value === imageBasedLightingFactor ||\n        _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(value, imageBasedLightingFactor)\n      ) {\n        return;\n      }\n      this._shouldRegenerateShaders =\n        this._shouldRegenerateShaders ||\n        (this._imageBasedLightingFactor.x > 0.0 && value.x === 0.0) ||\n        (this._imageBasedLightingFactor.x === 0.0 && value.x > 0.0);\n      this._shouldRegenerateShaders =\n        this._shouldRegenerateShaders ||\n        (this._imageBasedLightingFactor.y > 0.0 && value.y === 0.0) ||\n        (this._imageBasedLightingFactor.y === 0.0 && value.y > 0.0);\n      _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(value, this._imageBasedLightingFactor);\n    },\n  },\n\n  /**\n   * The light color when shading the model. When <code>undefined</code> the scene\'s light color is used instead.\n   * <p>\n   * For example, disabling additional light sources by setting <code>model.imageBasedLightingFactor = new Cesium.Cartesian2(0.0, 0.0)</code> will make the\n   * model much darker. Here, increasing the intensity of the light source will make the model brighter.\n   * </p>\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Cartesian3}\n   * @default undefined\n   */\n  lightColor: {\n    get: function () {\n      return this._lightColor;\n    },\n    set: function (value) {\n      var lightColor = this._lightColor;\n      if (value === lightColor || _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(value, lightColor)) {\n        return;\n      }\n      this._shouldRegenerateShaders =\n        this._shouldRegenerateShaders ||\n        ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(lightColor) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value)) ||\n        ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(lightColor));\n      this._lightColor = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, lightColor);\n    },\n  },\n\n  /**\n   * The sun\'s luminance at the zenith in kilo candela per meter squared to use for this model\'s procedural environment map.\n   * This is used when {@link Model#specularEnvironmentMaps} and {@link Model#sphericalHarmonicCoefficients} are not defined.\n   *\n   * @memberof Model.prototype\n   *\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @type {Number}\n   * @default 0.2\n   */\n  luminanceAtZenith: {\n    get: function () {\n      return this._luminanceAtZenith;\n    },\n    set: function (value) {\n      var lum = this._luminanceAtZenith;\n      if (value === lum) {\n        return;\n      }\n      this._shouldRegenerateShaders =\n        this._shouldRegenerateShaders ||\n        ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(lum) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value)) ||\n        ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(lum));\n      this._luminanceAtZenith = value;\n    },\n  },\n\n  /**\n   * The third order spherical harmonic coefficients used for the diffuse color of image-based lighting. When <code>undefined</code>, a diffuse irradiance\n   * computed from the atmosphere color is used.\n   * <p>\n   * There are nine <code>Cartesian3</code> coefficients.\n   * The order of the coefficients is: L<sub>00</sub>, L<sub>1-1</sub>, L<sub>10</sub>, L<sub>11</sub>, L<sub>2-2</sub>, L<sub>2-1</sub>, L<sub>20</sub>, L<sub>21</sub>, L<sub>22</sub>\n   * </p>\n   *\n   * These values can be obtained by preprocessing the environment map using the <code>cmgen</code> tool of\n   * {@link https://github.com/google/filament/releases|Google\'s Filament project}. This will also generate a KTX file that can be\n   * supplied to {@link Model#specularEnvironmentMaps}.\n   *\n   * @memberof Model.prototype\n   *\n   * @type {Cartesian3[]}\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @see {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf|An Efficient Representation for Irradiance Environment Maps}\n   */\n  sphericalHarmonicCoefficients: {\n    get: function () {\n      return this._sphericalHarmonicCoefficients;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value) && (!Array.isArray(value) || value.length !== 9)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n          "sphericalHarmonicCoefficients must be an array of 9 Cartesian3 values."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      if (value === this._sphericalHarmonicCoefficients) {\n        return;\n      }\n      this._sphericalHarmonicCoefficients = value;\n      this._shouldRegenerateShaders = true;\n    },\n  },\n\n  /**\n   * A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n   *\n   * @memberof Model.prototype\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @type {String}\n   * @see Model#sphericalHarmonicCoefficients\n   */\n  specularEnvironmentMaps: {\n    get: function () {\n      return this._specularEnvironmentMaps;\n    },\n    set: function (value) {\n      this._shouldUpdateSpecularMapAtlas =\n        this._shouldUpdateSpecularMapAtlas ||\n        value !== this._specularEnvironmentMaps;\n      this._specularEnvironmentMaps = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the model\n   * @memberof Model.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\nfunction silhouetteSupported(context) {\n  return context.stencilBuffer;\n}\n\nfunction isColorShadingEnabled(model) {\n  return (\n    !_Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].equals */ .Z.equals(model.color, _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].WHITE */ .Z.WHITE) ||\n    model.colorBlendMode !== _ColorBlendMode_js__WEBPACK_IMPORTED_MODULE_53__/* ["default"].HIGHLIGHT */ .Z.HIGHLIGHT\n  );\n}\n\nfunction isClippingEnabled(model) {\n  var clippingPlanes = model._clippingPlanes;\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(clippingPlanes) &&\n    clippingPlanes.enabled &&\n    clippingPlanes.length !== 0\n  );\n}\n\n/**\n * Determines if silhouettes are supported.\n *\n * @param {Scene} scene The scene.\n * @returns {Boolean} <code>true</code> if silhouettes are supported; otherwise, returns <code>false</code>\n */\nModel.silhouetteSupported = function (scene) {\n  return silhouetteSupported(scene.context);\n};\n\nfunction containsGltfMagic(uint8Array) {\n  var magic = (0,_Core_getMagic_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z)(uint8Array);\n  return magic === "glTF";\n}\n\n/**\n * <p>\n * Creates a model from a glTF asset.  When the model is ready to render, i.e., when the external binary, image,\n * and shader files are downloaded and the WebGL resources are created, the {@link Model#readyPromise} is resolved.\n * </p>\n * <p>\n * The model can be a traditional glTF asset with a .gltf extension or a Binary glTF using the .glb extension.\n * </p>\n * <p>\n * Cesium supports glTF assets with the following extensions:\n * <ul>\n * <li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/README.md|KHR_binary_glTF (glTF 1.0)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_materials_common/README.md|KHR_materials_common (glTF 1.0)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/WEB3D_quantized_attributes/README.md|WEB3D_quantized_attributes (glTF 1.0)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/AGI_articulations/README.md|AGI_articulations}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/pull/1302|KHR_blend (draft)}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md|KHR_draco_mesh_compression}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/README.md|KHR_materials_pbrSpecularGlossiness}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit/README.md|KHR_materials_unlit}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_techniques_webgl/README.md|KHR_techniques_webgl}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/README.md|KHR_texture_transform}\n * </li><li>\n * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_basisu/README.md|KHR_texture_basisu}\n * </li>\n * </ul>\n * </p>\n * <p>\n * For high-precision rendering, Cesium supports the {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/CESIUM_RTC/README.md|CESIUM_RTC} extension, which introduces the\n * CESIUM_RTC_MODELVIEW parameter semantic that says the node is in WGS84 coordinates translated\n * relative to a local origin.\n * </p>\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The url to the .gltf file.\n * @param {Resource|String} [options.basePath] The base path that paths in the glTF JSON are relative to.\n * @param {Boolean} [options.show=true] Determines if the model primitive will be shown.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the model from model to world coordinates.\n * @param {Number} [options.scale=1.0] A uniform scale applied to this model.\n * @param {Number} [options.minimumPixelSize=0.0] The approximate minimum pixel size of the model regardless of zoom.\n * @param {Number} [options.maximumScale] The maximum scale for the model.\n * @param {Object} [options.id] A user-defined object to return when the model is picked with {@link Scene#pick}.\n * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each glTF mesh and primitive is pickable with {@link Scene#pick}.\n * @param {Boolean} [options.incrementallyLoadTextures=true] Determine if textures may continue to stream in after the model is loaded.\n * @param {Boolean} [options.asynchronous=true] Determines if model WebGL resource creation will be spread out over several frames or block until completion once all glTF files are loaded.\n * @param {Boolean} [options.clampAnimations=true] Determines if the model\'s animations should hold a pose over frames where no keyframes are specified.\n * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the model casts or receives shadows from light sources.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for each draw command in the model.\n * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the model in wireframe.\n * @param {HeightReference} [options.heightReference=HeightReference.NONE] Determines how the model is drawn relative to terrain.\n * @param {Scene} [options.scene] Must be passed in for models that use the height reference property.\n * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this model will be displayed.\n * @param {Color} [options.color=Color.WHITE] A color that blends with the model\'s rendered color.\n * @param {ColorBlendMode} [options.colorBlendMode=ColorBlendMode.HIGHLIGHT] Defines how the color blends with the model.\n * @param {Number} [options.colorBlendAmount=0.5] Value used to determine the color strength when the <code>colorBlendMode</code> is <code>MIX</code>. A value of 0.0 results in the model\'s rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.\n * @param {Color} [options.silhouetteColor=Color.RED] The silhouette color. If more than 256 models have silhouettes enabled, there is a small chance that overlapping models will have minor artifacts.\n * @param {Number} [options.silhouetteSize=0.0] The size of the silhouette in pixels.\n * @param {ClippingPlaneCollection} [options.clippingPlanes] The {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n * @param {Boolean} [options.dequantizeInShader=true] Determines if a {@link https://github.com/google/draco|Draco} encoded model is dequantized on the GPU. This decreases total memory usage for encoded models.\n * @param {Credit|String} [options.credit] A credit for the model, which is displayed on the canvas.\n * @param {Boolean} [options.backFaceCulling=true] Whether to cull back-facing geometry. When true, back face culling is determined by the material\'s doubleSided property; when false, back face culling is disabled. Back faces are not culled if {@link Model#color} is translucent or {@link Model#silhouetteSize} is greater than 0.0.\n * @param {Boolean} [options.showOutline=true] Whether to display the outline for models using the {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/CESIUM_primitive_outline|CESIUM_primitive_outline} extension. When true, outlines are displayed. When false, outlines are not displayed.\n * @returns {Model} The newly created model.\n *\n * @example\n * // Example 1. Create a model from a glTF asset\n * var model = scene.primitives.add(Cesium.Model.fromGltf({\n *   url : \'./duck/duck.gltf\'\n * }));\n *\n * @example\n * // Example 2. Create model and provide all properties and events\n * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n * var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n *\n * var model = scene.primitives.add(Cesium.Model.fromGltf({\n *   url : \'./duck/duck.gltf\',\n *   show : true,                     // default\n *   modelMatrix : modelMatrix,\n *   scale : 2.0,                     // double size\n *   minimumPixelSize : 128,          // never smaller than 128 pixels\n *   maximumScale: 20000,             // never larger than 20000 * model size (overrides minimumPixelSize)\n *   allowPicking : false,            // not pickable\n *   debugShowBoundingVolume : false, // default\n *   debugWireframe : false\n * }));\n *\n * model.readyPromise.then(function(model) {\n *   // Play all animations when the model is ready to render\n *   model.activeAnimations.addAll();\n * });\n */\nModel.fromGltf = function (options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(options) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(options.url)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("options.url is required");\n  }\n  //>>includeEnd(\'debug\');\n\n  var url = options.url;\n  options = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(options);\n\n  // Create resource for the model file\n  var modelResource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].createIfNeeded */ .Z.createIfNeeded(url);\n\n  // Setup basePath to get dependent files\n  var basePath = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(options.basePath, modelResource.clone());\n  var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].createIfNeeded */ .Z.createIfNeeded(basePath);\n\n  // If no cache key is provided, use a GUID.\n  // Check using a URI to GUID dictionary that we have not already added this model.\n  var cacheKey = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n    options.cacheKey,\n    uriToGuid[(0,_Core_getAbsoluteUri_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(modelResource.url)]\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(cacheKey)) {\n    cacheKey = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_75__/* ["default"] */ .Z)();\n    uriToGuid[(0,_Core_getAbsoluteUri_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z)(modelResource.url)] = cacheKey;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(options.basePath) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(options.cacheKey)) {\n    cacheKey += resource.url;\n  }\n  options.cacheKey = cacheKey;\n  options.basePath = resource;\n\n  var model = new Model(options);\n\n  var cachedGltf = gltfCache[cacheKey];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(cachedGltf)) {\n    cachedGltf = new CachedGltf({\n      ready: false,\n    });\n    cachedGltf.count = 1;\n    cachedGltf.modelsToLoad.push(model);\n    setCachedGltf(model, cachedGltf);\n    gltfCache[cacheKey] = cachedGltf;\n\n    // Add Accept header if we need it\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(modelResource.headers.Accept)) {\n      modelResource.headers.Accept = defaultModelAccept;\n    }\n\n    modelResource\n      .fetchArrayBuffer()\n      .then(function (arrayBuffer) {\n        var array = new Uint8Array(arrayBuffer);\n        if (containsGltfMagic(array)) {\n          // Load binary glTF\n          var parsedGltf = (0,_GltfPipeline_parseGlb_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"] */ .Z)(array);\n          cachedGltf.makeReady(parsedGltf);\n        } else {\n          // Load text (JSON) glTF\n          var json = (0,_Core_getJsonFromTypedArray_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(array);\n          cachedGltf.makeReady(json);\n        }\n\n        var resourceCredits = model._resourceCredits;\n        var credits = modelResource.credits;\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(credits)) {\n          var length = credits.length;\n          for (var i = 0; i < length; i++) {\n            resourceCredits.push(credits[i]);\n          }\n        }\n      })\n      .otherwise(\n        _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getFailedLoadFunction */ .Z.getFailedLoadFunction(model, "model", modelResource.url)\n      );\n  } else if (!cachedGltf.ready) {\n    // Cache hit but the fetchArrayBuffer() or fetchText() request is still pending\n    ++cachedGltf.count;\n    cachedGltf.modelsToLoad.push(model);\n  }\n  // else if the cached glTF is defined and ready, the\n  // model constructor will pick it up using the cache key.\n\n  return model;\n};\n\n/**\n * For the unit tests to verify model caching.\n *\n * @private\n */\nModel._gltfCache = gltfCache;\n\nfunction getRuntime(model, runtimeName, name) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (model._state !== ModelState.LOADED) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n      "The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true."\n    );\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(name)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("name is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  return model._runtime[runtimeName][name];\n}\n\n/**\n * Returns the glTF node with the given <code>name</code> property.  This is used to\n * modify a node\'s transform for animation outside of glTF animations.\n *\n * @param {String} name The glTF name of the node.\n * @returns {ModelNode} The node or <code>undefined</code> if no node with <code>name</code> exists.\n *\n * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n *\n * @example\n * // Apply non-uniform scale to node LOD3sp\n * var node = model.getNode(\'LOD3sp\');\n * node.matrix = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(5.0, 1.0, 1.0), node.matrix);\n */\nModel.prototype.getNode = function (name) {\n  var node = getRuntime(this, "nodesByName", name);\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(node) ? node.publicNode : undefined;\n};\n\n/**\n * Returns the glTF mesh with the given <code>name</code> property.\n *\n * @param {String} name The glTF name of the mesh.\n *\n * @returns {ModelMesh} The mesh or <code>undefined</code> if no mesh with <code>name</code> exists.\n *\n * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n */\nModel.prototype.getMesh = function (name) {\n  return getRuntime(this, "meshesByName", name);\n};\n\n/**\n * Returns the glTF material with the given <code>name</code> property.\n *\n * @param {String} name The glTF name of the material.\n * @returns {ModelMaterial} The material or <code>undefined</code> if no material with <code>name</code> exists.\n *\n * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n */\nModel.prototype.getMaterial = function (name) {\n  return getRuntime(this, "materialsByName", name);\n};\n\n/**\n * Sets the current value of an articulation stage.  After setting one or multiple stage values, call\n * Model.applyArticulations() to cause the node matrices to be recalculated.\n *\n * @param {String} articulationStageKey The name of the articulation, a space, and the name of the stage.\n * @param {Number} value The numeric value of this stage of the articulation.\n *\n * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n *\n * @see Model#applyArticulations\n */\nModel.prototype.setArticulationStage = function (articulationStageKey, value) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.number */ .Z.typeOf.number("value", value);\n  //>>includeEnd(\'debug\');\n\n  var stage = getRuntime(this, "stagesByKey", articulationStageKey);\n  var articulation = getRuntime(\n    this,\n    "articulationsByStageKey",\n    articulationStageKey\n  );\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(stage) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(articulation)) {\n    value = _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].clamp */ .Z.clamp(value, stage.minimumValue, stage.maximumValue);\n    if (\n      !_Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(stage.currentValue, value, articulationEpsilon)\n    ) {\n      stage.currentValue = value;\n      articulation.isDirty = true;\n    }\n  }\n};\n\nvar scratchArticulationCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchArticulationRotation = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z();\n\n/**\n * Modifies a Matrix4 by applying a transformation for a given value of a stage.  Note this is different usage\n * from the typical <code>result</code> parameter, in that the incoming value of <code>result</code> is\n * meaningful.  Various stages of an articulation can be multiplied together, so their\n * transformations are all merged into a composite Matrix4 representing them all.\n *\n * @param {object} stage The stage of an articulation that is being evaluated.\n * @param {Matrix4} result The matrix to be modified.\n * @returns {Matrix4} A matrix transformed as requested by the articulation stage.\n *\n * @private\n */\nfunction applyArticulationStageMatrix(stage, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("stage", stage);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].typeOf.object */ .Z.typeOf.object("result", result);\n  //>>includeEnd(\'debug\');\n\n  var value = stage.currentValue;\n  var cartesian = scratchArticulationCartesian;\n  var rotation;\n  switch (stage.type) {\n    case "xRotate":\n      rotation = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].fromRotationX */ .Z.fromRotationX(\n        _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].toRadians */ .Z.toRadians(value),\n        scratchArticulationRotation\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByMatrix3 */ .Z.multiplyByMatrix3(result, rotation, result);\n      break;\n    case "yRotate":\n      rotation = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].fromRotationY */ .Z.fromRotationY(\n        _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].toRadians */ .Z.toRadians(value),\n        scratchArticulationRotation\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByMatrix3 */ .Z.multiplyByMatrix3(result, rotation, result);\n      break;\n    case "zRotate":\n      rotation = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].fromRotationZ */ .Z.fromRotationZ(\n        _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].toRadians */ .Z.toRadians(value),\n        scratchArticulationRotation\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByMatrix3 */ .Z.multiplyByMatrix3(result, rotation, result);\n      break;\n    case "xTranslate":\n      cartesian.x = value;\n      cartesian.y = 0.0;\n      cartesian.z = 0.0;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByTranslation */ .Z.multiplyByTranslation(result, cartesian, result);\n      break;\n    case "yTranslate":\n      cartesian.x = 0.0;\n      cartesian.y = value;\n      cartesian.z = 0.0;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByTranslation */ .Z.multiplyByTranslation(result, cartesian, result);\n      break;\n    case "zTranslate":\n      cartesian.x = 0.0;\n      cartesian.y = 0.0;\n      cartesian.z = value;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByTranslation */ .Z.multiplyByTranslation(result, cartesian, result);\n      break;\n    case "xScale":\n      cartesian.x = value;\n      cartesian.y = 1.0;\n      cartesian.z = 1.0;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByScale */ .Z.multiplyByScale(result, cartesian, result);\n      break;\n    case "yScale":\n      cartesian.x = 1.0;\n      cartesian.y = value;\n      cartesian.z = 1.0;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByScale */ .Z.multiplyByScale(result, cartesian, result);\n      break;\n    case "zScale":\n      cartesian.x = 1.0;\n      cartesian.y = 1.0;\n      cartesian.z = value;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByScale */ .Z.multiplyByScale(result, cartesian, result);\n      break;\n    case "uniformScale":\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByUniformScale */ .Z.multiplyByUniformScale(result, value, result);\n      break;\n    default:\n      break;\n  }\n  return result;\n}\n\nvar scratchApplyArticulationTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n\n/**\n * Applies any modified articulation stages to the matrix of each node that participates\n * in any articulation.  Note that this will overwrite any nodeTransformations on participating nodes.\n *\n * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n */\nModel.prototype.applyArticulations = function () {\n  var articulationsByName = this._runtime.articulationsByName;\n  for (var articulationName in articulationsByName) {\n    if (articulationsByName.hasOwnProperty(articulationName)) {\n      var articulation = articulationsByName[articulationName];\n      if (articulation.isDirty) {\n        articulation.isDirty = false;\n        var numNodes = articulation.nodes.length;\n        for (var n = 0; n < numNodes; ++n) {\n          var node = articulation.nodes[n];\n          var transform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(\n            node.originalMatrix,\n            scratchApplyArticulationTransform\n          );\n\n          var numStages = articulation.stages.length;\n          for (var s = 0; s < numStages; ++s) {\n            var stage = articulation.stages[s];\n            transform = applyArticulationStageMatrix(stage, transform);\n          }\n          node.matrix = transform;\n        }\n      }\n    }\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction addBuffersToLoadResources(model) {\n  var gltf = model.gltf;\n  var loadResources = model._loadResources;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].buffer */ .Z.buffer(gltf, function (buffer, id) {\n    loadResources.buffers[id] = buffer.extras._pipeline.source;\n  });\n}\n\nfunction bufferLoad(model, id) {\n  return function (arrayBuffer) {\n    var loadResources = model._loadResources;\n    var buffer = new Uint8Array(arrayBuffer);\n    --loadResources.pendingBufferLoads;\n    model.gltf.buffers[id].extras._pipeline.source = buffer;\n  };\n}\n\nfunction parseBufferViews(model) {\n  var bufferViews = model.gltf.bufferViews;\n  var vertexBuffersToCreate = model._loadResources.vertexBuffersToCreate;\n\n  // Only ARRAY_BUFFER here.  ELEMENT_ARRAY_BUFFER created below.\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].bufferView */ .Z.bufferView(model.gltf, function (bufferView, id) {\n    if (bufferView.target === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ARRAY_BUFFER */ .Z.ARRAY_BUFFER) {\n      vertexBuffersToCreate.enqueue(id);\n    }\n  });\n\n  var indexBuffersToCreate = model._loadResources.indexBuffersToCreate;\n  var indexBufferIds = {};\n\n  // The Cesium Renderer requires knowing the datatype for an index buffer\n  // at creation type, which is not part of the glTF bufferview so loop\n  // through glTF accessors to create the bufferview\'s index buffer.\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].accessor */ .Z.accessor(model.gltf, function (accessor) {\n    var bufferViewId = accessor.bufferView;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(bufferViewId)) {\n      return;\n    }\n\n    var bufferView = bufferViews[bufferViewId];\n    if (\n      bufferView.target === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER &&\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(indexBufferIds[bufferViewId])\n    ) {\n      indexBufferIds[bufferViewId] = true;\n      indexBuffersToCreate.enqueue({\n        id: bufferViewId,\n        componentType: accessor.componentType,\n      });\n    }\n  });\n}\n\nfunction parseTechniques(model) {\n  // retain references to gltf techniques\n  var gltf = model.gltf;\n  if (!(0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_76__/* ["default"] */ .Z)(gltf, "KHR_techniques_webgl")) {\n    return;\n  }\n\n  var sourcePrograms = model._sourcePrograms;\n  var sourceTechniques = model._sourceTechniques;\n  var programs = gltf.extensions.KHR_techniques_webgl.programs;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].technique */ .Z.technique(gltf, function (technique, techniqueId) {\n    sourceTechniques[techniqueId] = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(technique);\n\n    var programId = technique.program;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(sourcePrograms[programId])) {\n      sourcePrograms[programId] = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(programs[programId]);\n    }\n  });\n}\n\nfunction shaderLoad(model, type, id) {\n  return function (source) {\n    var loadResources = model._loadResources;\n    loadResources.shaders[id] = {\n      source: source,\n      type: type,\n      bufferView: undefined,\n    };\n    --loadResources.pendingShaderLoads;\n    model._rendererResources.sourceShaders[id] = source;\n  };\n}\n\nfunction parseShaders(model) {\n  var gltf = model.gltf;\n  var buffers = gltf.buffers;\n  var bufferViews = gltf.bufferViews;\n  var sourceShaders = model._rendererResources.sourceShaders;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].shader */ .Z.shader(gltf, function (shader, id) {\n    // Shader references either uri (external or base64-encoded) or bufferView\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(shader.bufferView)) {\n      var bufferViewId = shader.bufferView;\n      var bufferView = bufferViews[bufferViewId];\n      var bufferId = bufferView.buffer;\n      var buffer = buffers[bufferId];\n      var source = (0,_Core_getStringFromTypedArray_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z)(\n        buffer.extras._pipeline.source,\n        bufferView.byteOffset,\n        bufferView.byteLength\n      );\n      sourceShaders[id] = source;\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(shader.extras._pipeline.source)) {\n      sourceShaders[id] = shader.extras._pipeline.source;\n    } else {\n      ++model._loadResources.pendingShaderLoads;\n\n      var shaderResource = model._resource.getDerivedResource({\n        url: shader.uri,\n      });\n\n      shaderResource\n        .fetchText()\n        .then(shaderLoad(model, shader.type, id))\n        .otherwise(\n          _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getFailedLoadFunction */ .Z.getFailedLoadFunction(\n            model,\n            "shader",\n            shaderResource.url\n          )\n        );\n    }\n  });\n}\n\nfunction parsePrograms(model) {\n  var sourceTechniques = model._sourceTechniques;\n  for (var techniqueId in sourceTechniques) {\n    if (sourceTechniques.hasOwnProperty(techniqueId)) {\n      var technique = sourceTechniques[techniqueId];\n      model._loadResources.programsToCreate.enqueue({\n        programId: technique.program,\n        techniqueId: techniqueId,\n      });\n    }\n  }\n}\n\nfunction parseArticulations(model) {\n  var articulationsByName = {};\n  var articulationsByStageKey = {};\n  var runtimeStagesByKey = {};\n\n  model._runtime.articulationsByName = articulationsByName;\n  model._runtime.articulationsByStageKey = articulationsByStageKey;\n  model._runtime.stagesByKey = runtimeStagesByKey;\n\n  var gltf = model.gltf;\n  if (\n    !(0,_GltfPipeline_usesExtension_js__WEBPACK_IMPORTED_MODULE_76__/* ["default"] */ .Z)(gltf, "AGI_articulations") ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltf.extensions) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltf.extensions.AGI_articulations)\n  ) {\n    return;\n  }\n\n  var gltfArticulations = gltf.extensions.AGI_articulations.articulations;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltfArticulations)) {\n    return;\n  }\n\n  var numArticulations = gltfArticulations.length;\n  for (var i = 0; i < numArticulations; ++i) {\n    var articulation = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(gltfArticulations[i]);\n    articulation.nodes = [];\n    articulation.isDirty = true;\n    articulationsByName[articulation.name] = articulation;\n\n    var numStages = articulation.stages.length;\n    for (var s = 0; s < numStages; ++s) {\n      var stage = articulation.stages[s];\n      stage.currentValue = stage.initialValue;\n\n      var stageKey = articulation.name + " " + stage.name;\n      articulationsByStageKey[stageKey] = articulation;\n      runtimeStagesByKey[stageKey] = stage;\n    }\n  }\n}\n\nfunction imageLoad(model, textureId) {\n  return function (image) {\n    var loadResources = model._loadResources;\n    --loadResources.pendingTextureLoads;\n\n    // Images transcoded from KTX2 can contain multiple mip levels:\n    // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu\n    var mipLevels;\n    if (Array.isArray(image)) {\n      // highest detail mip should be level 0\n      mipLevels = image.slice(1, image.length).map(function (mipLevel) {\n        return mipLevel.bufferView;\n      });\n      image = image[0];\n    }\n\n    loadResources.texturesToCreate.enqueue({\n      id: textureId,\n      image: image,\n      bufferView: image.bufferView,\n      width: image.width,\n      height: image.height,\n      internalFormat: image.internalFormat,\n      mipLevels: mipLevels,\n    });\n  };\n}\n\nvar ktx2Regex = /(^data:image\\/ktx2)|(\\.ktx2$)/i;\n\nfunction parseTextures(model, context, supportsWebP) {\n  var gltf = model.gltf;\n  var images = gltf.images;\n  var uri;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].texture */ .Z.texture(gltf, function (texture, id) {\n    var imageId = texture.source;\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(texture.extensions) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(texture.extensions.EXT_texture_webp) &&\n      supportsWebP\n    ) {\n      imageId = texture.extensions.EXT_texture_webp.source;\n    } else if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(texture.extensions) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(texture.extensions.KHR_texture_basisu) &&\n      context.supportsBasis\n    ) {\n      imageId = texture.extensions.KHR_texture_basisu.source;\n    }\n\n    var gltfImage = images[imageId];\n\n    var bufferViewId = gltfImage.bufferView;\n    var mimeType = gltfImage.mimeType;\n    uri = gltfImage.uri;\n\n    // Image references either uri (external or base64-encoded) or bufferView\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(bufferViewId)) {\n      model._loadResources.texturesToCreateFromBufferView.enqueue({\n        id: id,\n        image: undefined,\n        bufferView: bufferViewId,\n        mimeType: mimeType,\n      });\n    } else {\n      ++model._loadResources.pendingTextureLoads;\n\n      var imageResource = model._resource.getDerivedResource({\n        url: uri,\n      });\n\n      var promise;\n      if (ktx2Regex.test(uri)) {\n        promise = (0,_Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z)(imageResource);\n      } else {\n        promise = imageResource.fetchImage({\n          skipColorSpaceConversion: true,\n          preferImageBitmap: true,\n        });\n      }\n      promise\n        .then(imageLoad(model, id, imageId))\n        .otherwise(\n          _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getFailedLoadFunction */ .Z.getFailedLoadFunction(model, "image", imageResource.url)\n        );\n    }\n  });\n}\n\nvar scratchArticulationStageInitialTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n\nfunction parseNodes(model) {\n  var runtimeNodes = {};\n  var runtimeNodesByName = {};\n  var skinnedNodes = [];\n\n  var skinnedNodesIds = model._loadResources.skinnedNodesIds;\n  var articulationsByName = model._runtime.articulationsByName;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].node */ .Z.node(model.gltf, function (node, id) {\n    var runtimeNode = {\n      // Animation targets\n      matrix: undefined,\n      translation: undefined,\n      rotation: undefined,\n      scale: undefined,\n\n      // Per-node show inherited from parent\n      computedShow: true,\n\n      // Computed transforms\n      transformToRoot: new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(),\n      computedMatrix: new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(),\n      dirtyNumber: 0, // The frame this node was made dirty by an animation; for graph traversal\n\n      // Rendering\n      commands: [], // empty for transform, light, and camera nodes\n\n      // Skinned node\n      inverseBindMatrices: undefined, // undefined when node is not skinned\n      bindShapeMatrix: undefined, // undefined when node is not skinned or identity\n      joints: [], // empty when node is not skinned\n      computedJointMatrices: [], // empty when node is not skinned\n\n      // Joint node\n      jointName: node.jointName, // undefined when node is not a joint\n\n      weights: [],\n\n      // Graph pointers\n      children: [], // empty for leaf nodes\n      parents: [], // empty for root nodes\n\n      // Publicly-accessible ModelNode instance to modify animation targets\n      publicNode: undefined,\n    };\n    runtimeNode.publicNode = new _ModelNode_js__WEBPACK_IMPORTED_MODULE_65__/* ["default"] */ .Z(\n      model,\n      node,\n      runtimeNode,\n      id,\n      _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getTransform */ .Z.getTransform(node)\n    );\n\n    runtimeNodes[id] = runtimeNode;\n    runtimeNodesByName[node.name] = runtimeNode;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(node.skin)) {\n      skinnedNodesIds.push(id);\n      skinnedNodes.push(runtimeNode);\n    }\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(node.extensions) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(node.extensions.AGI_articulations)\n    ) {\n      var articulationName = node.extensions.AGI_articulations.articulationName;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(articulationName)) {\n        var transform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(\n          runtimeNode.publicNode.originalMatrix,\n          scratchArticulationStageInitialTransform\n        );\n        var articulation = articulationsByName[articulationName];\n        articulation.nodes.push(runtimeNode.publicNode);\n\n        var numStages = articulation.stages.length;\n        for (var s = 0; s < numStages; ++s) {\n          var stage = articulation.stages[s];\n          transform = applyArticulationStageMatrix(stage, transform);\n        }\n        runtimeNode.publicNode.matrix = transform;\n      }\n    }\n  });\n\n  model._runtime.nodes = runtimeNodes;\n  model._runtime.nodesByName = runtimeNodesByName;\n  model._runtime.skinnedNodes = skinnedNodes;\n}\n\nfunction parseMaterials(model) {\n  var gltf = model.gltf;\n  var techniques = model._sourceTechniques;\n\n  var runtimeMaterialsByName = {};\n  var runtimeMaterialsById = {};\n  var uniformMaps = model._uniformMaps;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].material */ .Z.material(gltf, function (material, materialId) {\n    // Allocated now so ModelMaterial can keep a reference to it.\n    uniformMaps[materialId] = {\n      uniformMap: undefined,\n      values: undefined,\n      jointMatrixUniformName: undefined,\n      morphWeightsUniformName: undefined,\n    };\n\n    var modelMaterial = new _ModelMaterial_js__WEBPACK_IMPORTED_MODULE_63__/* ["default"] */ .Z(model, material, materialId);\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material.extensions) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material.extensions.KHR_techniques_webgl)\n    ) {\n      var techniqueId = material.extensions.KHR_techniques_webgl.technique;\n      modelMaterial._technique = techniqueId;\n      modelMaterial._program = techniques[techniqueId].program;\n\n      _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].materialValue */ .Z.materialValue(material, function (value, uniformName) {\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(modelMaterial._values)) {\n          modelMaterial._values = {};\n        }\n\n        modelMaterial._values[uniformName] = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(value);\n      });\n    }\n\n    runtimeMaterialsByName[material.name] = modelMaterial;\n    runtimeMaterialsById[materialId] = modelMaterial;\n  });\n\n  model._runtime.materialsByName = runtimeMaterialsByName;\n  model._runtime.materialsById = runtimeMaterialsById;\n}\n\nfunction parseMeshes(model) {\n  var runtimeMeshesByName = {};\n  var runtimeMaterialsById = model._runtime.materialsById;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].mesh */ .Z.mesh(model.gltf, function (mesh, meshId) {\n    runtimeMeshesByName[mesh.name] = new _ModelMesh_js__WEBPACK_IMPORTED_MODULE_64__/* ["default"] */ .Z(\n      mesh,\n      runtimeMaterialsById,\n      meshId\n    );\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model.extensionsUsed.WEB3D_quantized_attributes) ||\n      model._dequantizeInShader\n    ) {\n      // Cache primitives according to their program\n      _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].meshPrimitive */ .Z.meshPrimitive(mesh, function (primitive, primitiveId) {\n        var programId = getProgramForPrimitive(model, primitive);\n        var programPrimitives = model._programPrimitives[programId];\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(programPrimitives)) {\n          programPrimitives = {};\n          model._programPrimitives[programId] = programPrimitives;\n        }\n        programPrimitives[meshId + ".primitive." + primitiveId] = primitive;\n      });\n    }\n  });\n\n  model._runtime.meshesByName = runtimeMeshesByName;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvar CreateVertexBufferJob = function () {\n  this.id = undefined;\n  this.model = undefined;\n  this.context = undefined;\n};\n\nCreateVertexBufferJob.prototype.set = function (id, model, context) {\n  this.id = id;\n  this.model = model;\n  this.context = context;\n};\n\nCreateVertexBufferJob.prototype.execute = function () {\n  createVertexBuffer(this.id, this.model, this.context);\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction createVertexBuffer(bufferViewId, model, context) {\n  var loadResources = model._loadResources;\n  var bufferViews = model.gltf.bufferViews;\n  var bufferView = bufferViews[bufferViewId];\n\n  // Use bufferView created at runtime\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(bufferView)) {\n    bufferView = loadResources.createdBufferViews[bufferViewId];\n  }\n\n  var vertexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"].createVertexBuffer */ .Z.createVertexBuffer({\n    context: context,\n    typedArray: loadResources.getBuffer(bufferView),\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n  });\n  vertexBuffer.vertexArrayDestroyable = false;\n  model._rendererResources.buffers[bufferViewId] = vertexBuffer;\n  model._geometryByteLength += vertexBuffer.sizeInBytes;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvar CreateIndexBufferJob = function () {\n  this.id = undefined;\n  this.componentType = undefined;\n  this.model = undefined;\n  this.context = undefined;\n};\n\nCreateIndexBufferJob.prototype.set = function (\n  id,\n  componentType,\n  model,\n  context\n) {\n  this.id = id;\n  this.componentType = componentType;\n  this.model = model;\n  this.context = context;\n};\n\nCreateIndexBufferJob.prototype.execute = function () {\n  createIndexBuffer(this.id, this.componentType, this.model, this.context);\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction createIndexBuffer(bufferViewId, componentType, model, context) {\n  var loadResources = model._loadResources;\n  var bufferViews = model.gltf.bufferViews;\n  var bufferView = bufferViews[bufferViewId];\n\n  // Use bufferView created at runtime\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(bufferView)) {\n    bufferView = loadResources.createdBufferViews[bufferViewId];\n  }\n\n  var indexBuffer = _Renderer_Buffer_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"].createIndexBuffer */ .Z.createIndexBuffer({\n    context: context,\n    typedArray: loadResources.getBuffer(bufferView),\n    usage: _Renderer_BufferUsage_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n    indexDatatype: componentType,\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  model._rendererResources.buffers[bufferViewId] = indexBuffer;\n  model._geometryByteLength += indexBuffer.sizeInBytes;\n}\n\nvar scratchVertexBufferJob = new CreateVertexBufferJob();\nvar scratchIndexBufferJob = new CreateIndexBufferJob();\n\nfunction createBuffers(model, frameState) {\n  var loadResources = model._loadResources;\n\n  if (loadResources.pendingBufferLoads !== 0) {\n    return;\n  }\n\n  var context = frameState.context;\n  var vertexBuffersToCreate = loadResources.vertexBuffersToCreate;\n  var indexBuffersToCreate = loadResources.indexBuffersToCreate;\n  var i;\n\n  if (model.asynchronous) {\n    while (vertexBuffersToCreate.length > 0) {\n      scratchVertexBufferJob.set(vertexBuffersToCreate.peek(), model, context);\n      if (\n        !frameState.jobScheduler.execute(scratchVertexBufferJob, _JobType_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].BUFFER */ .Z.BUFFER)\n      ) {\n        break;\n      }\n      vertexBuffersToCreate.dequeue();\n    }\n\n    while (indexBuffersToCreate.length > 0) {\n      i = indexBuffersToCreate.peek();\n      scratchIndexBufferJob.set(i.id, i.componentType, model, context);\n      if (\n        !frameState.jobScheduler.execute(scratchIndexBufferJob, _JobType_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].BUFFER */ .Z.BUFFER)\n      ) {\n        break;\n      }\n      indexBuffersToCreate.dequeue();\n    }\n  } else {\n    while (vertexBuffersToCreate.length > 0) {\n      createVertexBuffer(vertexBuffersToCreate.dequeue(), model, context);\n    }\n\n    while (indexBuffersToCreate.length > 0) {\n      i = indexBuffersToCreate.dequeue();\n      createIndexBuffer(i.id, i.componentType, model, context);\n    }\n  }\n}\n\nfunction getProgramForPrimitive(model, primitive) {\n  var material = model._runtime.materialsById[primitive.material];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material)) {\n    return;\n  }\n\n  return material._program;\n}\n\nfunction modifyShaderForQuantizedAttributes(shader, programName, model) {\n  var primitive;\n  var primitives = model._programPrimitives[programName];\n\n  // If no primitives were cached for this program, there\'s no need to modify the shader\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(primitives)) {\n    return shader;\n  }\n\n  var primitiveId;\n  for (primitiveId in primitives) {\n    if (primitives.hasOwnProperty(primitiveId)) {\n      primitive = primitives[primitiveId];\n      if (getProgramForPrimitive(model, primitive) === programName) {\n        break;\n      }\n    }\n  }\n\n  // This is not needed after the program is processed, free the memory\n  model._programPrimitives[programName] = undefined;\n\n  var result;\n  if (model.extensionsUsed.WEB3D_quantized_attributes) {\n    result = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].modifyShaderForQuantizedAttributes */ .Z.modifyShaderForQuantizedAttributes(\n      model.gltf,\n      primitive,\n      shader\n    );\n    model._quantizedUniforms[programName] = result.uniforms;\n  } else {\n    var decodedData = model._decodedData[primitiveId];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(decodedData)) {\n      result = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].modifyShaderForDracoQuantizedAttributes */ .Z.modifyShaderForDracoQuantizedAttributes(\n        model.gltf,\n        primitive,\n        shader,\n        decodedData.attributes\n      );\n    } else {\n      return shader;\n    }\n  }\n\n  return result.shader;\n}\n\nfunction modifyShaderForColor(shader) {\n  shader = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].replaceMain */ .Z.replaceMain(shader, "gltf_blend_main");\n  shader +=\n    "uniform vec4 gltf_color; \\n" +\n    "uniform float gltf_colorBlend; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    gltf_blend_main(); \\n" +\n    "    gl_FragColor.rgb = mix(gl_FragColor.rgb, gltf_color.rgb, gltf_colorBlend); \\n" +\n    "    float highlight = ceil(gltf_colorBlend); \\n" +\n    "    gl_FragColor.rgb *= mix(gltf_color.rgb, vec3(1.0), highlight); \\n" +\n    "    gl_FragColor.a *= gltf_color.a; \\n" +\n    "} \\n";\n\n  return shader;\n}\n\nfunction modifyShader(shader, programName, callback) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(callback)) {\n    shader = callback(shader, programName);\n  }\n  return shader;\n}\n\nvar CreateProgramJob = function () {\n  this.programToCreate = undefined;\n  this.model = undefined;\n  this.context = undefined;\n};\n\nCreateProgramJob.prototype.set = function (programToCreate, model, context) {\n  this.programToCreate = programToCreate;\n  this.model = model;\n  this.context = context;\n};\n\nCreateProgramJob.prototype.execute = function () {\n  createProgram(this.programToCreate, this.model, this.context);\n};\n\n///////////////////////////////////////////////////////////////////////////\n\n// When building programs for the first time, do not include modifiers for clipping planes and color\n// since this is the version of the program that will be cached for use with other Models.\nfunction createProgram(programToCreate, model, context) {\n  var programId = programToCreate.programId;\n  var techniqueId = programToCreate.techniqueId;\n  var program = model._sourcePrograms[programId];\n  var shaders = model._rendererResources.sourceShaders;\n\n  var vs = shaders[program.vertexShader];\n  var fs = shaders[program.fragmentShader];\n\n  var quantizedVertexShaders = model._quantizedVertexShaders;\n\n  if (\n    model.extensionsUsed.WEB3D_quantized_attributes ||\n    model._dequantizeInShader\n  ) {\n    var quantizedVS = quantizedVertexShaders[programId];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(quantizedVS)) {\n      quantizedVS = modifyShaderForQuantizedAttributes(vs, programId, model);\n      quantizedVertexShaders[programId] = quantizedVS;\n    }\n    vs = quantizedVS;\n  }\n\n  var drawVS = modifyShader(vs, programId, model._vertexShaderLoaded);\n  var drawFS = modifyShader(fs, programId, model._fragmentShaderLoaded);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._uniformMapLoaded)) {\n    drawFS = "uniform vec4 czm_pickColor;\\n" + drawFS;\n  }\n\n  var useIBL =\n    model._imageBasedLightingFactor.x > 0.0 ||\n    model._imageBasedLightingFactor.y > 0.0;\n  if (useIBL) {\n    drawFS = "#define USE_IBL_LIGHTING \\n\\n" + drawFS;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._lightColor)) {\n    drawFS = "#define USE_CUSTOM_LIGHT_COLOR \\n\\n" + drawFS;\n  }\n\n  if (model._sourceVersion !== "2.0" || model._sourceKHRTechniquesWebGL) {\n    drawFS = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].replaceMain */ .Z.replaceMain(drawFS, "non_gamma_corrected_main");\n    drawFS =\n      drawFS +\n      "\\n" +\n      "void main() { \\n" +\n      "    non_gamma_corrected_main(); \\n" +\n      "    gl_FragColor = czm_gammaCorrect(gl_FragColor); \\n" +\n      "} \\n";\n  }\n\n  if (_OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_68__/* ["default"].isSupported */ .Z.isSupported(context)) {\n    var usesSH =\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._sphericalHarmonicCoefficients) ||\n      model._useDefaultSphericalHarmonics;\n    var usesSM =\n      ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._specularEnvironmentMapAtlas) &&\n        model._specularEnvironmentMapAtlas.ready) ||\n      model._useDefaultSpecularMaps;\n    var addMatrix = usesSH || usesSM || useIBL;\n    if (addMatrix) {\n      drawFS = "uniform mat3 gltf_iblReferenceFrameMatrix; \\n" + drawFS;\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._sphericalHarmonicCoefficients)) {\n      drawFS =\n        "#define DIFFUSE_IBL \\n" +\n        "#define CUSTOM_SPHERICAL_HARMONICS \\n" +\n        "uniform vec3 gltf_sphericalHarmonicCoefficients[9]; \\n" +\n        drawFS;\n    } else if (model._useDefaultSphericalHarmonics) {\n      drawFS = "#define DIFFUSE_IBL \\n" + drawFS;\n    }\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._specularEnvironmentMapAtlas) &&\n      model._specularEnvironmentMapAtlas.ready\n    ) {\n      drawFS =\n        "#define SPECULAR_IBL \\n" +\n        "#define CUSTOM_SPECULAR_IBL \\n" +\n        "uniform sampler2D gltf_specularMap; \\n" +\n        "uniform vec2 gltf_specularMapSize; \\n" +\n        "uniform float gltf_maxSpecularLOD; \\n" +\n        drawFS;\n    } else if (model._useDefaultSpecularMaps) {\n      drawFS = "#define SPECULAR_IBL \\n" + drawFS;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._luminanceAtZenith)) {\n    drawFS =\n      "#define USE_SUN_LUMINANCE \\n" +\n      "uniform float gltf_luminanceAtZenith;\\n" +\n      drawFS;\n  }\n\n  createAttributesAndProgram(\n    programId,\n    techniqueId,\n    drawFS,\n    drawVS,\n    model,\n    context\n  );\n}\n\nfunction recreateProgram(programToCreate, model, context) {\n  var programId = programToCreate.programId;\n  var techniqueId = programToCreate.techniqueId;\n  var program = model._sourcePrograms[programId];\n  var shaders = model._rendererResources.sourceShaders;\n\n  var quantizedVertexShaders = model._quantizedVertexShaders;\n\n  var clippingPlaneCollection = model.clippingPlanes;\n  var addClippingPlaneCode = isClippingEnabled(model);\n\n  var vs = shaders[program.vertexShader];\n  var fs = shaders[program.fragmentShader];\n\n  if (\n    model.extensionsUsed.WEB3D_quantized_attributes ||\n    model._dequantizeInShader\n  ) {\n    vs = quantizedVertexShaders[programId];\n  }\n\n  var finalFS = fs;\n  if (isColorShadingEnabled(model)) {\n    finalFS = Model._modifyShaderForColor(finalFS);\n  }\n  if (addClippingPlaneCode) {\n    finalFS = modifyShaderForClippingPlanes(\n      finalFS,\n      clippingPlaneCollection,\n      context\n    );\n  }\n\n  var drawVS = modifyShader(vs, programId, model._vertexShaderLoaded);\n  var drawFS = modifyShader(finalFS, programId, model._fragmentShaderLoaded);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._uniformMapLoaded)) {\n    drawFS = "uniform vec4 czm_pickColor;\\n" + drawFS;\n  }\n\n  var useIBL =\n    model._imageBasedLightingFactor.x > 0.0 ||\n    model._imageBasedLightingFactor.y > 0.0;\n  if (useIBL) {\n    drawFS = "#define USE_IBL_LIGHTING \\n\\n" + drawFS;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._lightColor)) {\n    drawFS = "#define USE_CUSTOM_LIGHT_COLOR \\n\\n" + drawFS;\n  }\n\n  if (model._sourceVersion !== "2.0" || model._sourceKHRTechniquesWebGL) {\n    drawFS = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].replaceMain */ .Z.replaceMain(drawFS, "non_gamma_corrected_main");\n    drawFS =\n      drawFS +\n      "\\n" +\n      "void main() { \\n" +\n      "    non_gamma_corrected_main(); \\n" +\n      "    gl_FragColor = czm_gammaCorrect(gl_FragColor); \\n" +\n      "} \\n";\n  }\n\n  if (_OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_68__/* ["default"].isSupported */ .Z.isSupported(context)) {\n    var usesSH =\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._sphericalHarmonicCoefficients) ||\n      model._useDefaultSphericalHarmonics;\n    var usesSM =\n      ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._specularEnvironmentMapAtlas) &&\n        model._specularEnvironmentMapAtlas.ready) ||\n      model._useDefaultSpecularMaps;\n    var addMatrix = usesSH || usesSM || useIBL;\n    if (addMatrix) {\n      drawFS = "uniform mat3 gltf_iblReferenceFrameMatrix; \\n" + drawFS;\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._sphericalHarmonicCoefficients)) {\n      drawFS =\n        "#define DIFFUSE_IBL \\n" +\n        "#define CUSTOM_SPHERICAL_HARMONICS \\n" +\n        "uniform vec3 gltf_sphericalHarmonicCoefficients[9]; \\n" +\n        drawFS;\n    } else if (model._useDefaultSphericalHarmonics) {\n      drawFS = "#define DIFFUSE_IBL \\n" + drawFS;\n    }\n\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._specularEnvironmentMapAtlas) &&\n      model._specularEnvironmentMapAtlas.ready\n    ) {\n      drawFS =\n        "#define SPECULAR_IBL \\n" +\n        "#define CUSTOM_SPECULAR_IBL \\n" +\n        "uniform sampler2D gltf_specularMap; \\n" +\n        "uniform vec2 gltf_specularMapSize; \\n" +\n        "uniform float gltf_maxSpecularLOD; \\n" +\n        drawFS;\n    } else if (model._useDefaultSpecularMaps) {\n      drawFS = "#define SPECULAR_IBL \\n" + drawFS;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._luminanceAtZenith)) {\n    drawFS =\n      "#define USE_SUN_LUMINANCE \\n" +\n      "uniform float gltf_luminanceAtZenith;\\n" +\n      drawFS;\n  }\n\n  createAttributesAndProgram(\n    programId,\n    techniqueId,\n    drawFS,\n    drawVS,\n    model,\n    context\n  );\n}\n\nfunction createAttributesAndProgram(\n  programId,\n  techniqueId,\n  drawFS,\n  drawVS,\n  model,\n  context\n) {\n  var technique = model._sourceTechniques[techniqueId];\n  var attributeLocations = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].createAttributeLocations */ .Z.createAttributeLocations(\n    technique,\n    model._precreatedAttributes\n  );\n\n  model._rendererResources.programs[programId] = _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"].fromCache */ .Z.fromCache({\n    context: context,\n    vertexShaderSource: drawVS,\n    fragmentShaderSource: drawFS,\n    attributeLocations: attributeLocations,\n  });\n}\n\nvar scratchCreateProgramJob = new CreateProgramJob();\n\nfunction createPrograms(model, frameState) {\n  var loadResources = model._loadResources;\n  var programsToCreate = loadResources.programsToCreate;\n\n  if (loadResources.pendingShaderLoads !== 0) {\n    return;\n  }\n\n  // PERFORMANCE_IDEA: this could be more fine-grained by looking\n  // at the shader\'s bufferView\'s to determine the buffer dependencies.\n  if (loadResources.pendingBufferLoads !== 0) {\n    return;\n  }\n\n  var context = frameState.context;\n\n  if (model.asynchronous) {\n    while (programsToCreate.length > 0) {\n      scratchCreateProgramJob.set(programsToCreate.peek(), model, context);\n      if (\n        !frameState.jobScheduler.execute(\n          scratchCreateProgramJob,\n          _JobType_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].PROGRAM */ .Z.PROGRAM\n        )\n      ) {\n        break;\n      }\n      programsToCreate.dequeue();\n    }\n  } else {\n    // Create all loaded programs this frame\n    while (programsToCreate.length > 0) {\n      createProgram(programsToCreate.dequeue(), model, context);\n    }\n  }\n}\n\nfunction getOnImageCreatedFromTypedArray(loadResources, gltfTexture) {\n  return function (image) {\n    loadResources.texturesToCreate.enqueue({\n      id: gltfTexture.id,\n      image: image,\n      bufferView: undefined,\n    });\n\n    --loadResources.pendingBufferViewToImage;\n  };\n}\n\nfunction loadTexturesFromBufferViews(model) {\n  var loadResources = model._loadResources;\n\n  if (loadResources.pendingBufferLoads !== 0) {\n    return;\n  }\n\n  while (loadResources.texturesToCreateFromBufferView.length > 0) {\n    var gltfTexture = loadResources.texturesToCreateFromBufferView.dequeue();\n\n    var gltf = model.gltf;\n    var bufferView = gltf.bufferViews[gltfTexture.bufferView];\n    var imageId = gltf.textures[gltfTexture.id].source;\n\n    var onerror = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getFailedLoadFunction */ .Z.getFailedLoadFunction(\n      model,\n      "image",\n      "id: " + gltfTexture.id + ", bufferView: " + gltfTexture.bufferView\n    );\n\n    if (gltfTexture.mimeType === "image/ktx2") {\n      // Need to make a copy of the embedded KTX2 buffer otherwise the underlying\n      // ArrayBuffer may be accessed on both the worker and the main thread and\n      // throw an error like "Cannot perform Construct on a detached ArrayBuffer".\n      // Look into SharedArrayBuffer at some point to get around this.\n      var ktxBuffer = new Uint8Array(loadResources.getBuffer(bufferView));\n      (0,_Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z)(ktxBuffer)\n        .then(imageLoad(model, gltfTexture.id, imageId))\n        .otherwise(onerror);\n      ++model._loadResources.pendingTextureLoads;\n    } else {\n      var onload = getOnImageCreatedFromTypedArray(loadResources, gltfTexture);\n      (0,_Core_loadImageFromTypedArray_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z)({\n        uint8Array: loadResources.getBuffer(bufferView),\n        format: gltfTexture.mimeType,\n        flipY: false,\n        skipColorSpaceConversion: true,\n      })\n        .then(onload)\n        .otherwise(onerror);\n      ++loadResources.pendingBufferViewToImage;\n    }\n  }\n}\n\nfunction createSamplers(model) {\n  var loadResources = model._loadResources;\n  if (loadResources.createSamplers) {\n    loadResources.createSamplers = false;\n\n    var rendererSamplers = model._rendererResources.samplers;\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].sampler */ .Z.sampler(model.gltf, function (sampler, samplerId) {\n      rendererSamplers[samplerId] = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z({\n        wrapS: sampler.wrapS,\n        wrapT: sampler.wrapT,\n        minificationFilter: sampler.minFilter,\n        magnificationFilter: sampler.magFilter,\n      });\n    });\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvar CreateTextureJob = function () {\n  this.gltfTexture = undefined;\n  this.model = undefined;\n  this.context = undefined;\n};\n\nCreateTextureJob.prototype.set = function (gltfTexture, model, context) {\n  this.gltfTexture = gltfTexture;\n  this.model = model;\n  this.context = context;\n};\n\nCreateTextureJob.prototype.execute = function () {\n  createTexture(this.gltfTexture, this.model, this.context);\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction createTexture(gltfTexture, model, context) {\n  var textures = model.gltf.textures;\n  var texture = textures[gltfTexture.id];\n\n  var rendererSamplers = model._rendererResources.samplers;\n  var sampler = rendererSamplers[texture.sampler];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(sampler)) {\n    sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z({\n      wrapS: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].REPEAT */ .Z.REPEAT,\n      wrapT: _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].REPEAT */ .Z.REPEAT,\n    });\n  }\n\n  var usesTextureTransform = false;\n  var materials = model.gltf.materials;\n  var materialsLength = materials.length;\n  for (var i = 0; i < materialsLength; ++i) {\n    var material = materials[i];\n    if (\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material.extensions) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material.extensions.KHR_techniques_webgl)\n    ) {\n      var values = material.extensions.KHR_techniques_webgl.values;\n      for (var valueName in values) {\n        if (\n          values.hasOwnProperty(valueName) &&\n          valueName.indexOf("Texture") !== -1\n        ) {\n          var value = values[valueName];\n          if (\n            value.index === gltfTexture.id &&\n            (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value.extensions) &&\n            (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(value.extensions.KHR_texture_transform)\n          ) {\n            usesTextureTransform = true;\n            break;\n          }\n        }\n      }\n    }\n    if (usesTextureTransform) {\n      break;\n    }\n  }\n\n  var wrapS = sampler.wrapS;\n  var wrapT = sampler.wrapT;\n  var minFilter = sampler.minificationFilter;\n\n  if (\n    usesTextureTransform &&\n    minFilter !== _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR */ .Z.LINEAR &&\n    minFilter !== _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST */ .Z.NEAREST\n  ) {\n    if (\n      minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST_MIPMAP_NEAREST */ .Z.NEAREST_MIPMAP_NEAREST ||\n      minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST_MIPMAP_LINEAR */ .Z.NEAREST_MIPMAP_LINEAR\n    ) {\n      minFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST */ .Z.NEAREST;\n    } else {\n      minFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR */ .Z.LINEAR;\n    }\n\n    sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z({\n      wrapS: sampler.wrapS,\n      wrapT: sampler.wrapT,\n      minificationFilter: minFilter,\n      magnificationFilter: sampler.magnificationFilter,\n    });\n  }\n\n  var internalFormat = gltfTexture.internalFormat;\n\n  var mipmap =\n    !(\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(internalFormat) && _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].isCompressedFormat */ .Z.isCompressedFormat(internalFormat)\n    ) &&\n    (minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST_MIPMAP_NEAREST */ .Z.NEAREST_MIPMAP_NEAREST ||\n      minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST_MIPMAP_LINEAR */ .Z.NEAREST_MIPMAP_LINEAR ||\n      minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR_MIPMAP_NEAREST */ .Z.LINEAR_MIPMAP_NEAREST ||\n      minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR_MIPMAP_LINEAR */ .Z.LINEAR_MIPMAP_LINEAR);\n  var requiresNpot =\n    mipmap ||\n    wrapS === _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].REPEAT */ .Z.REPEAT ||\n    wrapS === _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].MIRRORED_REPEAT */ .Z.MIRRORED_REPEAT ||\n    wrapT === _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].REPEAT */ .Z.REPEAT ||\n    wrapT === _Renderer_TextureWrap_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"].MIRRORED_REPEAT */ .Z.MIRRORED_REPEAT;\n  var npot;\n  var tx;\n  var source = gltfTexture.image;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(internalFormat)) {\n    npot =\n      !_Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(gltfTexture.width) ||\n      !_Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(gltfTexture.height);\n\n    // Warning to encourage power of 2 texture dimensions with KHR_texture_basisu\n    if (\n      !context.webgl2 &&\n      _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].isCompressedFormat */ .Z.isCompressedFormat(internalFormat) &&\n      npot &&\n      requiresNpot\n    ) {\n      console.warn(\n        "Compressed texture uses REPEAT or MIRRORED_REPEAT texture wrap mode and dimensions are not powers of two. The texture may be rendered incorrectly. See the Model.js constructor documentation for more information."\n      );\n    }\n\n    var minificationFilter;\n    if (\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltfTexture.mipLevels) &&\n      (minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST_MIPMAP_NEAREST */ .Z.NEAREST_MIPMAP_NEAREST ||\n        minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST_MIPMAP_LINEAR */ .Z.NEAREST_MIPMAP_LINEAR)\n    ) {\n      minificationFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].NEAREST */ .Z.NEAREST;\n    } else if (\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltfTexture.mipLevels) &&\n      (minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR_MIPMAP_NEAREST */ .Z.LINEAR_MIPMAP_NEAREST ||\n        minFilter === _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR_MIPMAP_LINEAR */ .Z.LINEAR_MIPMAP_LINEAR)\n    ) {\n      minificationFilter = _Renderer_TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"].LINEAR */ .Z.LINEAR;\n    }\n    sampler = new _Renderer_Sampler_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z({\n      wrapS: sampler.wrapS,\n      wrapT: sampler.wrapT,\n      minificationFilter: minificationFilter,\n      magnificationFilter: sampler.magnificationFilter,\n    });\n\n    tx = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z({\n      context: context,\n      source: {\n        arrayBufferView: gltfTexture.bufferView,\n        mipLevels: gltfTexture.mipLevels,\n      },\n      width: gltfTexture.width,\n      height: gltfTexture.height,\n      pixelFormat: internalFormat,\n      sampler: sampler,\n    });\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(source)) {\n    npot =\n      !_Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(source.width) ||\n      !_Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(source.height);\n    if (requiresNpot && npot) {\n      // WebGL requires power-of-two texture dimensions for mipmapping and REPEAT/MIRRORED_REPEAT wrap modes.\n      var canvas = document.createElement("canvas");\n      canvas.width = _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].nextPowerOfTwo */ .Z.nextPowerOfTwo(source.width);\n      canvas.height = _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].nextPowerOfTwo */ .Z.nextPowerOfTwo(source.height);\n      var canvasContext = canvas.getContext("2d");\n      canvasContext.drawImage(\n        source,\n        0,\n        0,\n        source.width,\n        source.height,\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n      source = canvas;\n    }\n\n    tx = new _Renderer_Texture_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z({\n      context: context,\n      source: source,\n      pixelFormat: texture.internalFormat,\n      pixelDatatype: texture.type,\n      sampler: sampler,\n      flipY: false,\n      skipColorSpaceConversion: true,\n    });\n    // GLTF_SPEC: Support TEXTURE_CUBE_MAP.  https://github.com/KhronosGroup/glTF/issues/40\n    if (mipmap) {\n      tx.generateMipmap();\n    }\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(tx)) {\n    model._rendererResources.textures[gltfTexture.id] = tx;\n    model._texturesByteLength += tx.sizeInBytes;\n  }\n}\n\nvar scratchCreateTextureJob = new CreateTextureJob();\n\nfunction createTextures(model, frameState) {\n  var context = frameState.context;\n  var texturesToCreate = model._loadResources.texturesToCreate;\n\n  if (model.asynchronous) {\n    while (texturesToCreate.length > 0) {\n      scratchCreateTextureJob.set(texturesToCreate.peek(), model, context);\n      if (\n        !frameState.jobScheduler.execute(\n          scratchCreateTextureJob,\n          _JobType_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].TEXTURE */ .Z.TEXTURE\n        )\n      ) {\n        break;\n      }\n      texturesToCreate.dequeue();\n    }\n  } else {\n    // Create all loaded textures this frame\n    while (texturesToCreate.length > 0) {\n      createTexture(texturesToCreate.dequeue(), model, context);\n    }\n  }\n}\n\nfunction getAttributeLocations(model, primitive) {\n  var techniques = model._sourceTechniques;\n\n  // Retrieve the compiled shader program to assign index values to attributes\n  var attributeLocations = {};\n\n  var location;\n  var index;\n  var material = model._runtime.materialsById[primitive.material];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material)) {\n    return attributeLocations;\n  }\n\n  var technique = techniques[material._technique];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(technique)) {\n    return attributeLocations;\n  }\n\n  var attributes = technique.attributes;\n  var program = model._rendererResources.programs[technique.program];\n  var programAttributeLocations = program._attributeLocations;\n\n  for (location in programAttributeLocations) {\n    if (programAttributeLocations.hasOwnProperty(location)) {\n      var attribute = attributes[location];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(attribute)) {\n        index = programAttributeLocations[location];\n        attributeLocations[attribute.semantic] = index;\n      }\n    }\n  }\n\n  // Add pre-created attributes.\n  var precreatedAttributes = model._precreatedAttributes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(precreatedAttributes)) {\n    for (location in precreatedAttributes) {\n      if (precreatedAttributes.hasOwnProperty(location)) {\n        index = programAttributeLocations[location];\n        attributeLocations[location] = index;\n      }\n    }\n  }\n\n  return attributeLocations;\n}\n\nfunction createJoints(model, runtimeSkins) {\n  var gltf = model.gltf;\n  var skins = gltf.skins;\n  var nodes = gltf.nodes;\n  var runtimeNodes = model._runtime.nodes;\n\n  var skinnedNodesIds = model._loadResources.skinnedNodesIds;\n  var length = skinnedNodesIds.length;\n  for (var j = 0; j < length; ++j) {\n    var id = skinnedNodesIds[j];\n    var skinnedNode = runtimeNodes[id];\n    var node = nodes[id];\n\n    var runtimeSkin = runtimeSkins[node.skin];\n    skinnedNode.inverseBindMatrices = runtimeSkin.inverseBindMatrices;\n    skinnedNode.bindShapeMatrix = runtimeSkin.bindShapeMatrix;\n\n    var gltfJoints = skins[node.skin].joints;\n    var jointsLength = gltfJoints.length;\n    for (var i = 0; i < jointsLength; ++i) {\n      var nodeId = gltfJoints[i];\n      var jointNode = runtimeNodes[nodeId];\n      skinnedNode.joints.push(jointNode);\n    }\n  }\n}\n\nfunction createSkins(model) {\n  var loadResources = model._loadResources;\n\n  if (loadResources.pendingBufferLoads !== 0) {\n    return;\n  }\n\n  if (!loadResources.createSkins) {\n    return;\n  }\n  loadResources.createSkins = false;\n\n  var gltf = model.gltf;\n  var accessors = gltf.accessors;\n  var runtimeSkins = {};\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].skin */ .Z.skin(gltf, function (skin, id) {\n    var accessor = accessors[skin.inverseBindMatrices];\n\n    var bindShapeMatrix;\n    if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].equals */ .Z.equals(skin.bindShapeMatrix, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].IDENTITY */ .Z.IDENTITY)) {\n      bindShapeMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(skin.bindShapeMatrix);\n    }\n\n    runtimeSkins[id] = {\n      inverseBindMatrices: _ModelAnimationCache_js__WEBPACK_IMPORTED_MODULE_60__/* ["default"].getSkinInverseBindMatrices */ .Z.getSkinInverseBindMatrices(\n        model,\n        accessor\n      ),\n      bindShapeMatrix: bindShapeMatrix, // not used when undefined\n    };\n  });\n\n  createJoints(model, runtimeSkins);\n}\n\nfunction getChannelEvaluator(model, runtimeNode, targetPath, spline) {\n  return function (localAnimationTime) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(spline)) {\n      localAnimationTime = model.clampAnimations\n        ? spline.clampTime(localAnimationTime)\n        : spline.wrapTime(localAnimationTime);\n      runtimeNode[targetPath] = spline.evaluate(\n        localAnimationTime,\n        runtimeNode[targetPath]\n      );\n      runtimeNode.dirtyNumber = model._maxDirtyNumber;\n    }\n  };\n}\n\nfunction createRuntimeAnimations(model) {\n  var loadResources = model._loadResources;\n\n  if (!loadResources.finishedPendingBufferLoads()) {\n    return;\n  }\n\n  if (!loadResources.createRuntimeAnimations) {\n    return;\n  }\n  loadResources.createRuntimeAnimations = false;\n\n  model._runtime.animations = [];\n\n  var runtimeNodes = model._runtime.nodes;\n  var accessors = model.gltf.accessors;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].animation */ .Z.animation(model.gltf, function (animation, i) {\n    var channels = animation.channels;\n    var samplers = animation.samplers;\n\n    // Find start and stop time for the entire animation\n    var startTime = Number.MAX_VALUE;\n    var stopTime = -Number.MAX_VALUE;\n\n    var channelsLength = channels.length;\n    var channelEvaluators = new Array(channelsLength);\n\n    for (var j = 0; j < channelsLength; ++j) {\n      var channel = channels[j];\n      var target = channel.target;\n      var path = target.path;\n      var sampler = samplers[channel.sampler];\n      var input = _ModelAnimationCache_js__WEBPACK_IMPORTED_MODULE_60__/* ["default"].getAnimationParameterValues */ .Z.getAnimationParameterValues(\n        model,\n        accessors[sampler.input]\n      );\n      var output = _ModelAnimationCache_js__WEBPACK_IMPORTED_MODULE_60__/* ["default"].getAnimationParameterValues */ .Z.getAnimationParameterValues(\n        model,\n        accessors[sampler.output]\n      );\n\n      startTime = Math.min(startTime, input[0]);\n      stopTime = Math.max(stopTime, input[input.length - 1]);\n\n      var spline = _ModelAnimationCache_js__WEBPACK_IMPORTED_MODULE_60__/* ["default"].getAnimationSpline */ .Z.getAnimationSpline(\n        model,\n        i,\n        animation,\n        channel.sampler,\n        sampler,\n        input,\n        path,\n        output\n      );\n\n      channelEvaluators[j] = getChannelEvaluator(\n        model,\n        runtimeNodes[target.node],\n        target.path,\n        spline\n      );\n    }\n\n    model._runtime.animations[i] = {\n      name: animation.name,\n      startTime: startTime,\n      stopTime: stopTime,\n      channelEvaluators: channelEvaluators,\n    };\n  });\n}\n\nfunction createVertexArrays(model, context) {\n  var loadResources = model._loadResources;\n  if (\n    !loadResources.finishedBuffersCreation() ||\n    !loadResources.finishedProgramCreation() ||\n    !loadResources.createVertexArrays\n  ) {\n    return;\n  }\n  loadResources.createVertexArrays = false;\n\n  var rendererBuffers = model._rendererResources.buffers;\n  var rendererVertexArrays = model._rendererResources.vertexArrays;\n  var gltf = model.gltf;\n  var accessors = gltf.accessors;\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].mesh */ .Z.mesh(gltf, function (mesh, meshId) {\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].meshPrimitive */ .Z.meshPrimitive(mesh, function (primitive, primitiveId) {\n      var attributes = [];\n      var attributeLocation;\n      var attributeLocations = getAttributeLocations(model, primitive);\n      var decodedData =\n        model._decodedData[meshId + ".primitive." + primitiveId];\n      _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].meshPrimitiveAttribute */ .Z.meshPrimitiveAttribute(primitive, function (\n        accessorId,\n        attributeName\n      ) {\n        // Skip if the attribute is not used by the material, e.g., because the asset\n        // was exported with an attribute that wasn\'t used and the asset wasn\'t optimized.\n        attributeLocation = attributeLocations[attributeName];\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(attributeLocation)) {\n          // Use attributes of previously decoded draco geometry\n          if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(decodedData)) {\n            var decodedAttributes = decodedData.attributes;\n            if (decodedAttributes.hasOwnProperty(attributeName)) {\n              var decodedAttribute = decodedAttributes[attributeName];\n              attributes.push({\n                index: attributeLocation,\n                vertexBuffer: rendererBuffers[decodedAttribute.bufferView],\n                componentsPerAttribute: decodedAttribute.componentsPerAttribute,\n                componentDatatype: decodedAttribute.componentDatatype,\n                normalize: decodedAttribute.normalized,\n                offsetInBytes: decodedAttribute.byteOffset,\n                strideInBytes: decodedAttribute.byteStride,\n              });\n\n              return;\n            }\n          }\n\n          var a = accessors[accessorId];\n          var normalize = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(a.normalized) && a.normalized;\n          attributes.push({\n            index: attributeLocation,\n            vertexBuffer: rendererBuffers[a.bufferView],\n            componentsPerAttribute: (0,_GltfPipeline_numberOfComponentsForType_js__WEBPACK_IMPORTED_MODULE_77__/* ["default"] */ .Z)(a.type),\n            componentDatatype: a.componentType,\n            normalize: normalize,\n            offsetInBytes: a.byteOffset,\n            strideInBytes: (0,_GltfPipeline_getAccessorByteStride_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"] */ .Z)(gltf, a),\n          });\n        }\n      });\n\n      // Add pre-created attributes\n      var attribute;\n      var attributeName;\n      var precreatedAttributes = model._precreatedAttributes;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(precreatedAttributes)) {\n        for (attributeName in precreatedAttributes) {\n          if (precreatedAttributes.hasOwnProperty(attributeName)) {\n            attributeLocation = attributeLocations[attributeName];\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(attributeLocation)) {\n              attribute = precreatedAttributes[attributeName];\n              attribute.index = attributeLocation;\n              attributes.push(attribute);\n            }\n          }\n        }\n      }\n\n      var indexBuffer;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(primitive.indices)) {\n        var accessor = accessors[primitive.indices];\n        var bufferView = accessor.bufferView;\n\n        // Use buffer of previously decoded draco geometry\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(decodedData)) {\n          bufferView = decodedData.bufferView;\n        }\n\n        indexBuffer = rendererBuffers[bufferView];\n      }\n      rendererVertexArrays[\n        meshId + ".primitive." + primitiveId\n      ] = new _Renderer_VertexArray_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"] */ .Z({\n        context: context,\n        attributes: attributes,\n        indexBuffer: indexBuffer,\n      });\n    });\n  });\n}\n\nfunction createRenderStates(model) {\n  var loadResources = model._loadResources;\n  if (loadResources.createRenderStates) {\n    loadResources.createRenderStates = false;\n\n    _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].material */ .Z.material(model.gltf, function (material, materialId) {\n      createRenderStateForMaterial(model, material, materialId);\n    });\n  }\n}\n\nfunction createRenderStateForMaterial(model, material, materialId) {\n  var rendererRenderStates = model._rendererResources.renderStates;\n\n  var blendEquationSeparate = [\n    _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].FUNC_ADD */ .Z.FUNC_ADD,\n    _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].FUNC_ADD */ .Z.FUNC_ADD,\n  ];\n  var blendFuncSeparate = [\n    _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ONE */ .Z.ONE,\n    _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ONE_MINUS_SRC_ALPHA */ .Z.ONE_MINUS_SRC_ALPHA,\n    _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ONE */ .Z.ONE,\n    _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ONE_MINUS_SRC_ALPHA */ .Z.ONE_MINUS_SRC_ALPHA,\n  ];\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material.extensions) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(material.extensions.KHR_blend)) {\n    blendEquationSeparate = material.extensions.KHR_blend.blendEquation;\n    blendFuncSeparate = material.extensions.KHR_blend.blendFactors;\n  }\n\n  var enableCulling = !material.doubleSided;\n  var blendingEnabled = material.alphaMode === "BLEND";\n  rendererRenderStates[materialId] = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache({\n    cull: {\n      enabled: enableCulling,\n    },\n    depthTest: {\n      enabled: true,\n      func: _DepthFunction_js__WEBPACK_IMPORTED_MODULE_54__/* ["default"].LESS_OR_EQUAL */ .Z.LESS_OR_EQUAL,\n    },\n    depthMask: !blendingEnabled,\n    blending: {\n      enabled: blendingEnabled,\n      equationRgb: blendEquationSeparate[0],\n      equationAlpha: blendEquationSeparate[1],\n      functionSourceRgb: blendFuncSeparate[0],\n      functionDestinationRgb: blendFuncSeparate[1],\n      functionSourceAlpha: blendFuncSeparate[2],\n      functionDestinationAlpha: blendFuncSeparate[3],\n    },\n  });\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvar gltfUniformsFromNode = {\n  MODEL: function (uniformState, model, runtimeNode) {\n    return function () {\n      return runtimeNode.computedMatrix;\n    };\n  },\n  VIEW: function (uniformState, model, runtimeNode) {\n    return function () {\n      return uniformState.view;\n    };\n  },\n  PROJECTION: function (uniformState, model, runtimeNode) {\n    return function () {\n      return uniformState.projection;\n    };\n  },\n  MODELVIEW: function (uniformState, model, runtimeNode) {\n    var mv = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    return function () {\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        uniformState.view,\n        runtimeNode.computedMatrix,\n        mv\n      );\n    };\n  },\n  CESIUM_RTC_MODELVIEW: function (uniformState, model, runtimeNode) {\n    // CESIUM_RTC extension\n    var mvRtc = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    return function () {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        uniformState.view,\n        runtimeNode.computedMatrix,\n        mvRtc\n      );\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].setTranslation */ .Z.setTranslation(mvRtc, model._rtcCenterEye, mvRtc);\n    };\n  },\n  MODELVIEWPROJECTION: function (uniformState, model, runtimeNode) {\n    var mvp = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    return function () {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        uniformState.view,\n        runtimeNode.computedMatrix,\n        mvp\n      );\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiply */ .Z.multiply(uniformState._projection, mvp, mvp);\n    };\n  },\n  MODELINVERSE: function (uniformState, model, runtimeNode) {\n    var mInverse = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    return function () {\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverse */ .Z.inverse(runtimeNode.computedMatrix, mInverse);\n    };\n  },\n  VIEWINVERSE: function (uniformState, model) {\n    return function () {\n      return uniformState.inverseView;\n    };\n  },\n  PROJECTIONINVERSE: function (uniformState, model, runtimeNode) {\n    return function () {\n      return uniformState.inverseProjection;\n    };\n  },\n  MODELVIEWINVERSE: function (uniformState, model, runtimeNode) {\n    var mv = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    var mvInverse = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    return function () {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        uniformState.view,\n        runtimeNode.computedMatrix,\n        mv\n      );\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverse */ .Z.inverse(mv, mvInverse);\n    };\n  },\n  MODELVIEWPROJECTIONINVERSE: function (uniformState, model, runtimeNode) {\n    var mvp = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    var mvpInverse = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    return function () {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        uniformState.view,\n        runtimeNode.computedMatrix,\n        mvp\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiply */ .Z.multiply(uniformState._projection, mvp, mvp);\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverse */ .Z.inverse(mvp, mvpInverse);\n    };\n  },\n  MODELINVERSETRANSPOSE: function (uniformState, model, runtimeNode) {\n    var mInverse = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    var mInverseTranspose = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z();\n    return function () {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverse */ .Z.inverse(runtimeNode.computedMatrix, mInverse);\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].getMatrix3 */ .Z.getMatrix3(mInverse, mInverseTranspose);\n      return _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].transpose */ .Z.transpose(mInverseTranspose, mInverseTranspose);\n    };\n  },\n  MODELVIEWINVERSETRANSPOSE: function (uniformState, model, runtimeNode) {\n    var mv = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    var mvInverse = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n    var mvInverseTranspose = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z();\n    return function () {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        uniformState.view,\n        runtimeNode.computedMatrix,\n        mv\n      );\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverse */ .Z.inverse(mv, mvInverse);\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].getMatrix3 */ .Z.getMatrix3(mvInverse, mvInverseTranspose);\n      return _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].transpose */ .Z.transpose(mvInverseTranspose, mvInverseTranspose);\n    };\n  },\n  VIEWPORT: function (uniformState, model, runtimeNode) {\n    return function () {\n      return uniformState.viewportCartesian4;\n    };\n  },\n};\n\nfunction getUniformFunctionFromSource(source, model, semantic, uniformState) {\n  var runtimeNode = model._runtime.nodes[source];\n  return gltfUniformsFromNode[semantic](uniformState, model, runtimeNode);\n}\n\nfunction createUniformsForMaterial(\n  model,\n  material,\n  technique,\n  instanceValues,\n  context,\n  textures,\n  defaultTexture\n) {\n  var uniformMap = {};\n  var uniformValues = {};\n  var jointMatrixUniformName;\n  var morphWeightsUniformName;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].techniqueUniform */ .Z.techniqueUniform(technique, function (uniform, uniformName) {\n    // GLTF_SPEC: This does not take into account uniform arrays,\n    // indicated by uniforms with a count property.\n    //\n    // https://github.com/KhronosGroup/glTF/issues/258\n\n    // GLTF_SPEC: In this implementation, material parameters with a\n    // semantic or targeted via a source (for animation) are not\n    // targetable for material animations.  Is this too strict?\n    //\n    // https://github.com/KhronosGroup/glTF/issues/142\n\n    var uv;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(instanceValues) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(instanceValues[uniformName])) {\n      // Parameter overrides by the instance technique\n      uv = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].createUniformFunction */ .Z.createUniformFunction(\n        uniform.type,\n        instanceValues[uniformName],\n        textures,\n        defaultTexture\n      );\n      uniformMap[uniformName] = uv.func;\n      uniformValues[uniformName] = uv;\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(uniform.node)) {\n      uniformMap[uniformName] = getUniformFunctionFromSource(\n        uniform.node,\n        model,\n        uniform.semantic,\n        context.uniformState\n      );\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(uniform.semantic)) {\n      if (uniform.semantic === "JOINTMATRIX") {\n        jointMatrixUniformName = uniformName;\n      } else if (uniform.semantic === "MORPHWEIGHTS") {\n        morphWeightsUniformName = uniformName;\n      } else if (uniform.semantic === "ALPHACUTOFF") {\n        // The material\'s alphaCutoff value uses a uniform with semantic ALPHACUTOFF.\n        // A uniform with this semantic will ignore the instance or default values.\n        var alphaMode = material.alphaMode;\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(alphaMode) && alphaMode === "MASK") {\n          var alphaCutoffValue = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(material.alphaCutoff, 0.5);\n          uv = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].createUniformFunction */ .Z.createUniformFunction(\n            uniform.type,\n            alphaCutoffValue,\n            textures,\n            defaultTexture\n          );\n          uniformMap[uniformName] = uv.func;\n          uniformValues[uniformName] = uv;\n        }\n      } else {\n        // Map glTF semantic to Cesium automatic uniform\n        uniformMap[uniformName] = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getGltfSemanticUniforms */ .Z.getGltfSemanticUniforms()[\n          uniform.semantic\n        ](context.uniformState, model);\n      }\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(uniform.value)) {\n      // Technique value that isn\'t overridden by a material\n      var uv2 = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].createUniformFunction */ .Z.createUniformFunction(\n        uniform.type,\n        uniform.value,\n        textures,\n        defaultTexture\n      );\n      uniformMap[uniformName] = uv2.func;\n      uniformValues[uniformName] = uv2;\n    }\n  });\n\n  return {\n    map: uniformMap,\n    values: uniformValues,\n    jointMatrixUniformName: jointMatrixUniformName,\n    morphWeightsUniformName: morphWeightsUniformName,\n  };\n}\n\nfunction createUniformMaps(model, context) {\n  var loadResources = model._loadResources;\n\n  if (!loadResources.finishedProgramCreation()) {\n    return;\n  }\n\n  if (!loadResources.createUniformMaps) {\n    return;\n  }\n  loadResources.createUniformMaps = false;\n\n  var gltf = model.gltf;\n  var techniques = model._sourceTechniques;\n  var uniformMaps = model._uniformMaps;\n\n  var textures = model._rendererResources.textures;\n  var defaultTexture = model._defaultTexture;\n\n  _GltfPipeline_ForEach_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].material */ .Z.material(gltf, function (material, materialId) {\n    var modelMaterial = model._runtime.materialsById[materialId];\n    var technique = techniques[modelMaterial._technique];\n    var instanceValues = modelMaterial._values;\n\n    var uniforms = createUniformsForMaterial(\n      model,\n      material,\n      technique,\n      instanceValues,\n      context,\n      textures,\n      defaultTexture\n    );\n\n    var u = uniformMaps[materialId];\n    u.uniformMap = uniforms.map; // uniform name -> function for the renderer\n    u.values = uniforms.values; // material parameter name -> ModelMaterial for modifying the parameter at runtime\n    u.jointMatrixUniformName = uniforms.jointMatrixUniformName;\n    u.morphWeightsUniformName = uniforms.morphWeightsUniformName;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(technique.attributes.a_outlineCoordinates)) {\n      var outlineTexture = _ModelOutlineLoader_js__WEBPACK_IMPORTED_MODULE_66__/* ["default"].createTexture */ .Z.createTexture(model, context);\n      u.uniformMap.u_outlineTexture = function () {\n        return outlineTexture;\n      };\n    }\n  });\n}\n\nfunction createUniformsForDracoQuantizedAttributes(decodedData) {\n  return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].createUniformsForDracoQuantizedAttributes */ .Z.createUniformsForDracoQuantizedAttributes(\n    decodedData.attributes\n  );\n}\n\nfunction createUniformsForQuantizedAttributes(model, primitive) {\n  var programId = getProgramForPrimitive(model, primitive);\n  var quantizedUniforms = model._quantizedUniforms[programId];\n  return _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].createUniformsForQuantizedAttributes */ .Z.createUniformsForQuantizedAttributes(\n    model.gltf,\n    primitive,\n    quantizedUniforms\n  );\n}\n\nfunction createPickColorFunction(color) {\n  return function () {\n    return color;\n  };\n}\n\nfunction createJointMatricesFunction(runtimeNode) {\n  return function () {\n    return runtimeNode.computedJointMatrices;\n  };\n}\n\nfunction createMorphWeightsFunction(runtimeNode) {\n  return function () {\n    return runtimeNode.weights;\n  };\n}\n\nfunction createSilhouetteColorFunction(model) {\n  return function () {\n    return model.silhouetteColor;\n  };\n}\n\nfunction createSilhouetteSizeFunction(model) {\n  return function () {\n    return model.silhouetteSize;\n  };\n}\n\nfunction createColorFunction(model) {\n  return function () {\n    return model.color;\n  };\n}\n\nfunction createClippingPlanesMatrixFunction(model) {\n  return function () {\n    return model._clippingPlanesMatrix;\n  };\n}\n\nfunction createIBLReferenceFrameMatrixFunction(model) {\n  return function () {\n    return model._iblReferenceFrameMatrix;\n  };\n}\n\nfunction createClippingPlanesFunction(model) {\n  return function () {\n    var clippingPlanes = model.clippingPlanes;\n    return !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(clippingPlanes) || !clippingPlanes.enabled\n      ? model._defaultTexture\n      : clippingPlanes.texture;\n  };\n}\n\nfunction createClippingPlanesEdgeStyleFunction(model) {\n  return function () {\n    var clippingPlanes = model.clippingPlanes;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(clippingPlanes)) {\n      return _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].WHITE.withAlpha */ .Z.WHITE.withAlpha(0.0);\n    }\n\n    var style = _Core_Color_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].clone */ .Z.clone(clippingPlanes.edgeColor);\n    style.alpha = clippingPlanes.edgeWidth;\n    return style;\n  };\n}\n\nfunction createColorBlendFunction(model) {\n  return function () {\n    return _ColorBlendMode_js__WEBPACK_IMPORTED_MODULE_53__/* ["default"].getColorBlend */ .Z.getColorBlend(\n      model.colorBlendMode,\n      model.colorBlendAmount\n    );\n  };\n}\n\nfunction createIBLFactorFunction(model) {\n  return function () {\n    return model._imageBasedLightingFactor;\n  };\n}\n\nfunction createLightColorFunction(model) {\n  return function () {\n    return model._lightColor;\n  };\n}\n\nfunction createLuminanceAtZenithFunction(model) {\n  return function () {\n    return model.luminanceAtZenith;\n  };\n}\n\nfunction createSphericalHarmonicCoefficientsFunction(model) {\n  return function () {\n    return model._sphericalHarmonicCoefficients;\n  };\n}\n\nfunction createSpecularEnvironmentMapFunction(model) {\n  return function () {\n    return model._specularEnvironmentMapAtlas.texture;\n  };\n}\n\nfunction createSpecularEnvironmentMapSizeFunction(model) {\n  return function () {\n    return model._specularEnvironmentMapAtlas.texture.dimensions;\n  };\n}\n\nfunction createSpecularEnvironmentMapLOD(model) {\n  return function () {\n    return model._specularEnvironmentMapAtlas.maximumMipmapLevel;\n  };\n}\n\nfunction triangleCountFromPrimitiveIndices(primitive, indicesCount) {\n  switch (primitive.mode) {\n    case _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRIANGLES */ .Z.TRIANGLES:\n      return indicesCount / 3;\n    case _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRIANGLE_STRIP */ .Z.TRIANGLE_STRIP:\n    case _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRIANGLE_FAN */ .Z.TRIANGLE_FAN:\n      return Math.max(indicesCount - 2, 0);\n    default:\n      return 0;\n  }\n}\n\nfunction createCommand(model, gltfNode, runtimeNode, context, scene3DOnly) {\n  var nodeCommands = model._nodeCommands;\n  var pickIds = model._pickIds;\n  var allowPicking = model.allowPicking;\n  var runtimeMeshesByName = model._runtime.meshesByName;\n\n  var resources = model._rendererResources;\n  var rendererVertexArrays = resources.vertexArrays;\n  var rendererPrograms = resources.programs;\n  var rendererRenderStates = resources.renderStates;\n  var uniformMaps = model._uniformMaps;\n\n  var gltf = model.gltf;\n  var accessors = gltf.accessors;\n  var gltfMeshes = gltf.meshes;\n\n  var id = gltfNode.mesh;\n  var mesh = gltfMeshes[id];\n\n  var primitives = mesh.primitives;\n  var length = primitives.length;\n\n  // The glTF node hierarchy is a DAG so a node can have more than one\n  // parent, so a node may already have commands.  If so, append more\n  // since they will have a different model matrix.\n\n  for (var i = 0; i < length; ++i) {\n    var primitive = primitives[i];\n    var ix = accessors[primitive.indices];\n    var material = model._runtime.materialsById[primitive.material];\n    var programId = material._program;\n    var decodedData = model._decodedData[id + ".primitive." + i];\n\n    var boundingSphere;\n    var positionAccessor = primitive.attributes.POSITION;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(positionAccessor)) {\n      var minMax = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getAccessorMinMax */ .Z.getAccessorMinMax(gltf, positionAccessor);\n      boundingSphere = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromCornerPoints */ .Z.fromCornerPoints(\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(minMax.min),\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(minMax.max)\n      );\n    }\n\n    var vertexArray = rendererVertexArrays[id + ".primitive." + i];\n    var offset;\n    var count;\n\n    // Use indices of the previously decoded Draco geometry.\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(decodedData)) {\n      count = decodedData.numberOfIndices;\n      offset = 0;\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(ix)) {\n      count = ix.count;\n      offset = ix.byteOffset / _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].getSizeInBytes */ .Z.getSizeInBytes(ix.componentType); // glTF has offset in bytes.  Cesium has offsets in indices\n    } else {\n      var positions = accessors[primitive.attributes.POSITION];\n      count = positions.count;\n      offset = 0;\n    }\n\n    // Update model triangle count using number of indices\n    model._trianglesLength += triangleCountFromPrimitiveIndices(\n      primitive,\n      count\n    );\n\n    if (primitive.mode === _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].POINTS */ .Z.POINTS) {\n      model._pointsLength += count;\n    }\n\n    var um = uniformMaps[primitive.material];\n    var uniformMap = um.uniformMap;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(um.jointMatrixUniformName)) {\n      var jointUniformMap = {};\n      jointUniformMap[um.jointMatrixUniformName] = createJointMatricesFunction(\n        runtimeNode\n      );\n\n      uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(uniformMap, jointUniformMap);\n    }\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(um.morphWeightsUniformName)) {\n      var morphWeightsUniformMap = {};\n      morphWeightsUniformMap[\n        um.morphWeightsUniformName\n      ] = createMorphWeightsFunction(runtimeNode);\n\n      uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(uniformMap, morphWeightsUniformMap);\n    }\n\n    uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(uniformMap, {\n      gltf_color: createColorFunction(model),\n      gltf_colorBlend: createColorBlendFunction(model),\n      gltf_clippingPlanes: createClippingPlanesFunction(model),\n      gltf_clippingPlanesEdgeStyle: createClippingPlanesEdgeStyleFunction(\n        model\n      ),\n      gltf_clippingPlanesMatrix: createClippingPlanesMatrixFunction(model),\n      gltf_iblReferenceFrameMatrix: createIBLReferenceFrameMatrixFunction(\n        model\n      ),\n      gltf_iblFactor: createIBLFactorFunction(model),\n      gltf_lightColor: createLightColorFunction(model),\n      gltf_sphericalHarmonicCoefficients: createSphericalHarmonicCoefficientsFunction(\n        model\n      ),\n      gltf_specularMap: createSpecularEnvironmentMapFunction(model),\n      gltf_specularMapSize: createSpecularEnvironmentMapSizeFunction(model),\n      gltf_maxSpecularLOD: createSpecularEnvironmentMapLOD(model),\n      gltf_luminanceAtZenith: createLuminanceAtZenithFunction(model),\n    });\n\n    // Allow callback to modify the uniformMap\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._uniformMapLoaded)) {\n      uniformMap = model._uniformMapLoaded(uniformMap, programId, runtimeNode);\n    }\n\n    // Add uniforms for decoding quantized attributes if used\n    var quantizedUniformMap = {};\n    if (model.extensionsUsed.WEB3D_quantized_attributes) {\n      quantizedUniformMap = createUniformsForQuantizedAttributes(\n        model,\n        primitive\n      );\n    } else if (model._dequantizeInShader && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(decodedData)) {\n      quantizedUniformMap = createUniformsForDracoQuantizedAttributes(\n        decodedData\n      );\n    }\n    uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(uniformMap, quantizedUniformMap);\n\n    var rs = rendererRenderStates[primitive.material];\n    var isTranslucent = rs.blending.enabled;\n\n    var owner = model._pickObject;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(owner)) {\n      owner = {\n        primitive: model,\n        id: model.id,\n        node: runtimeNode.publicNode,\n        mesh: runtimeMeshesByName[mesh.name],\n      };\n    }\n\n    var castShadows = _ShadowMode_js__WEBPACK_IMPORTED_MODULE_72__/* ["default"].castShadows */ .Z.castShadows(model._shadows);\n    var receiveShadows = _ShadowMode_js__WEBPACK_IMPORTED_MODULE_72__/* ["default"].receiveShadows */ .Z.receiveShadows(model._shadows);\n\n    var pickId;\n    if (allowPicking && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._uniformMapLoaded)) {\n      pickId = context.createPickId(owner);\n      pickIds.push(pickId);\n      var pickUniforms = {\n        czm_pickColor: createPickColorFunction(pickId.color),\n      };\n      uniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(uniformMap, pickUniforms);\n    }\n\n    if (allowPicking) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._pickIdLoaded) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._uniformMapLoaded)) {\n        pickId = model._pickIdLoaded();\n      } else {\n        pickId = "czm_pickColor";\n      }\n    }\n\n    var command = new _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z({\n      boundingVolume: new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(), // updated in update()\n      cull: model.cull,\n      modelMatrix: new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(), // computed in update()\n      primitiveType: primitive.mode,\n      vertexArray: vertexArray,\n      count: count,\n      offset: offset,\n      shaderProgram: rendererPrograms[programId],\n      castShadows: castShadows,\n      receiveShadows: receiveShadows,\n      uniformMap: uniformMap,\n      renderState: rs,\n      owner: owner,\n      pass: isTranslucent ? _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT : model.opaquePass,\n      pickId: pickId,\n    });\n\n    var command2D;\n    if (!scene3DOnly) {\n      command2D = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(command);\n      command2D.boundingVolume = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(); // updated in update()\n      command2D.modelMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z(); // updated in update()\n    }\n\n    var nodeCommand = {\n      show: true,\n      boundingSphere: boundingSphere,\n      command: command,\n      command2D: command2D,\n      // Generated on demand when silhouette size is greater than 0.0 and silhouette alpha is greater than 0.0\n      silhouetteModelCommand: undefined,\n      silhouetteModelCommand2D: undefined,\n      silhouetteColorCommand: undefined,\n      silhouetteColorCommand2D: undefined,\n      // Generated on demand when color alpha is less than 1.0\n      translucentCommand: undefined,\n      translucentCommand2D: undefined,\n      // Generated on demand when back face culling is false\n      disableCullingCommand: undefined,\n      disableCullingCommand2D: undefined,\n      // For updating node commands on shader reconstruction\n      programId: programId,\n    };\n    runtimeNode.commands.push(nodeCommand);\n    nodeCommands.push(nodeCommand);\n  }\n}\n\nfunction createRuntimeNodes(model, context, scene3DOnly) {\n  var loadResources = model._loadResources;\n\n  if (!loadResources.finishedEverythingButTextureCreation()) {\n    return;\n  }\n\n  if (!loadResources.createRuntimeNodes) {\n    return;\n  }\n  loadResources.createRuntimeNodes = false;\n\n  var rootNodes = [];\n  var runtimeNodes = model._runtime.nodes;\n\n  var gltf = model.gltf;\n  var nodes = gltf.nodes;\n\n  var scene = gltf.scenes[gltf.scene];\n  var sceneNodes = scene.nodes;\n  var length = sceneNodes.length;\n\n  var stack = [];\n  var seen = {};\n\n  for (var i = 0; i < length; ++i) {\n    stack.push({\n      parentRuntimeNode: undefined,\n      gltfNode: nodes[sceneNodes[i]],\n      id: sceneNodes[i],\n    });\n\n    while (stack.length > 0) {\n      var n = stack.pop();\n      seen[n.id] = true;\n      var parentRuntimeNode = n.parentRuntimeNode;\n      var gltfNode = n.gltfNode;\n\n      // Node hierarchy is a DAG so a node can have more than one parent so it may already exist\n      var runtimeNode = runtimeNodes[n.id];\n      if (runtimeNode.parents.length === 0) {\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltfNode.matrix)) {\n          runtimeNode.matrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].fromColumnMajorArray */ .Z.fromColumnMajorArray(gltfNode.matrix);\n        } else {\n          // TRS converted to Cesium types\n          var rotation = gltfNode.rotation;\n          runtimeNode.translation = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(gltfNode.translation);\n          runtimeNode.rotation = _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].unpack */ .Z.unpack(rotation);\n          runtimeNode.scale = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(gltfNode.scale);\n        }\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(parentRuntimeNode)) {\n        parentRuntimeNode.children.push(runtimeNode);\n        runtimeNode.parents.push(parentRuntimeNode);\n      } else {\n        rootNodes.push(runtimeNode);\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(gltfNode.mesh)) {\n        createCommand(model, gltfNode, runtimeNode, context, scene3DOnly);\n      }\n\n      var children = gltfNode.children;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(children)) {\n        var childrenLength = children.length;\n        for (var j = 0; j < childrenLength; j++) {\n          var childId = children[j];\n          if (!seen[childId]) {\n            stack.push({\n              parentRuntimeNode: runtimeNode,\n              gltfNode: nodes[childId],\n              id: children[j],\n            });\n          }\n        }\n      }\n    }\n  }\n\n  model._runtime.rootNodes = rootNodes;\n  model._runtime.nodes = runtimeNodes;\n}\n\nfunction getGeometryByteLength(buffers) {\n  var memory = 0;\n  for (var id in buffers) {\n    if (buffers.hasOwnProperty(id)) {\n      memory += buffers[id].sizeInBytes;\n    }\n  }\n  return memory;\n}\n\nfunction getTexturesByteLength(textures) {\n  var memory = 0;\n  for (var id in textures) {\n    if (textures.hasOwnProperty(id)) {\n      memory += textures[id].sizeInBytes;\n    }\n  }\n  return memory;\n}\n\nfunction createResources(model, frameState) {\n  var context = frameState.context;\n  var scene3DOnly = frameState.scene3DOnly;\n  var quantizedVertexShaders = model._quantizedVertexShaders;\n  var techniques = model._sourceTechniques;\n  var programs = model._sourcePrograms;\n\n  var resources = model._rendererResources;\n  var shaders = resources.sourceShaders;\n  if (model._loadRendererResourcesFromCache) {\n    shaders = resources.sourceShaders =\n      model._cachedRendererResources.sourceShaders;\n  }\n\n  for (var techniqueId in techniques) {\n    if (techniques.hasOwnProperty(techniqueId)) {\n      var programId = techniques[techniqueId].program;\n      var program = programs[programId];\n      var shader = shaders[program.vertexShader];\n\n      _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].checkSupportedGlExtensions */ .Z.checkSupportedGlExtensions(program.glExtensions, context);\n\n      if (\n        model.extensionsUsed.WEB3D_quantized_attributes ||\n        model._dequantizeInShader\n      ) {\n        var quantizedVS = quantizedVertexShaders[programId];\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(quantizedVS)) {\n          quantizedVS = modifyShaderForQuantizedAttributes(\n            shader,\n            programId,\n            model\n          );\n          quantizedVertexShaders[programId] = quantizedVS;\n        }\n        shader = quantizedVS;\n      }\n\n      shader = modifyShader(shader, programId, model._vertexShaderLoaded);\n    }\n  }\n\n  if (model._loadRendererResourcesFromCache) {\n    var cachedResources = model._cachedRendererResources;\n\n    resources.buffers = cachedResources.buffers;\n    resources.vertexArrays = cachedResources.vertexArrays;\n    resources.programs = cachedResources.programs;\n    resources.silhouettePrograms = cachedResources.silhouettePrograms;\n    resources.textures = cachedResources.textures;\n    resources.samplers = cachedResources.samplers;\n    resources.renderStates = cachedResources.renderStates;\n\n    // Vertex arrays are unique to this model, create instead of using the cache.\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._precreatedAttributes)) {\n      createVertexArrays(model, context);\n    }\n\n    model._cachedGeometryByteLength += getGeometryByteLength(\n      cachedResources.buffers\n    );\n    model._cachedTexturesByteLength += getTexturesByteLength(\n      cachedResources.textures\n    );\n  } else {\n    createBuffers(model, frameState); // using glTF bufferViews\n    createPrograms(model, frameState);\n    createSamplers(model, context);\n    loadTexturesFromBufferViews(model);\n    createTextures(model, frameState);\n  }\n\n  createSkins(model);\n  createRuntimeAnimations(model);\n\n  if (!model._loadRendererResourcesFromCache) {\n    createVertexArrays(model, context); // using glTF meshes\n    createRenderStates(model); // using glTF materials/techniques/states\n    // Long-term, we might not cache render states if they could change\n    // due to an animation, e.g., a uniform going from opaque to transparent.\n    // Could use copy-on-write if it is worth it.  Probably overkill.\n  }\n\n  createUniformMaps(model, context); // using glTF materials/techniques\n  createRuntimeNodes(model, context, scene3DOnly); // using glTF scene\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction getNodeMatrix(node, result) {\n  var publicNode = node.publicNode;\n  var publicMatrix = publicNode.matrix;\n\n  if (publicNode.useMatrix && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(publicMatrix)) {\n    // Public matrix overrides original glTF matrix and glTF animations\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(publicMatrix, result);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(node.matrix)) {\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(node.matrix, result);\n  } else {\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].fromTranslationQuaternionRotationScale */ .Z.fromTranslationQuaternionRotationScale(\n      node.translation,\n      node.rotation,\n      node.scale,\n      result\n    );\n    // Keep matrix returned by the node in-sync if the node is targeted by an animation.  Only TRS nodes can be targeted.\n    publicNode.setMatrix(result);\n  }\n}\n\nvar scratchNodeStack = [];\nvar scratchComputedTranslation = new _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchComputedMatrixIn2D = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n\nfunction updateNodeHierarchyModelMatrix(\n  model,\n  modelTransformChanged,\n  justLoaded,\n  projection\n) {\n  var maxDirtyNumber = model._maxDirtyNumber;\n\n  var rootNodes = model._runtime.rootNodes;\n  var length = rootNodes.length;\n\n  var nodeStack = scratchNodeStack;\n  var computedModelMatrix = model._computedModelMatrix;\n\n  if (model._mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].SCENE3D */ .Z.SCENE3D && !model._ignoreCommands) {\n    var translation = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].getColumn */ .Z.getColumn(\n      computedModelMatrix,\n      3,\n      scratchComputedTranslation\n    );\n    if (!_Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].equals */ .Z.equals(translation, _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_W */ .Z.UNIT_W)) {\n      computedModelMatrix = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].basisTo2D */ .Z.basisTo2D(\n        projection,\n        computedModelMatrix,\n        scratchComputedMatrixIn2D\n      );\n      model._rtcCenter = model._rtcCenter3D;\n    } else {\n      var center = model.boundingSphere.center;\n      var to2D = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].wgs84To2DModelMatrix */ .Z.wgs84To2DModelMatrix(\n        projection,\n        center,\n        scratchComputedMatrixIn2D\n      );\n      computedModelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiply */ .Z.multiply(\n        to2D,\n        computedModelMatrix,\n        scratchComputedMatrixIn2D\n      );\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._rtcCenter)) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].setTranslation */ .Z.setTranslation(\n          computedModelMatrix,\n          _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].UNIT_W */ .Z.UNIT_W,\n          computedModelMatrix\n        );\n        model._rtcCenter = model._rtcCenter2D;\n      }\n    }\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var n = rootNodes[i];\n\n    getNodeMatrix(n, n.transformToRoot);\n    nodeStack.push(n);\n\n    while (nodeStack.length > 0) {\n      n = nodeStack.pop();\n      var transformToRoot = n.transformToRoot;\n      var commands = n.commands;\n\n      if (\n        n.dirtyNumber === maxDirtyNumber ||\n        modelTransformChanged ||\n        justLoaded\n      ) {\n        var nodeMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedModelMatrix,\n          transformToRoot,\n          n.computedMatrix\n        );\n        var commandsLength = commands.length;\n        if (commandsLength > 0) {\n          // Node has meshes, which has primitives.  Update their commands.\n          for (var j = 0; j < commandsLength; ++j) {\n            var primitiveCommand = commands[j];\n            var command = primitiveCommand.command;\n            _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(nodeMatrix, command.modelMatrix);\n\n            // PERFORMANCE_IDEA: Can use transformWithoutScale if no node up to the root has scale (including animation)\n            _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].transform */ .Z.transform(\n              primitiveCommand.boundingSphere,\n              command.modelMatrix,\n              command.boundingVolume\n            );\n\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._rtcCenter)) {\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(\n                model._rtcCenter,\n                command.boundingVolume.center,\n                command.boundingVolume.center\n              );\n            }\n\n            // If the model crosses the IDL in 2D, it will be drawn in one viewport, but part of it\n            // will be clipped by the viewport. We create a second command that translates the model\n            // model matrix to the opposite side of the map so the part that was clipped in one viewport\n            // is drawn in the other.\n            command = primitiveCommand.command2D;\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(command) && model._mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n              _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(nodeMatrix, command.modelMatrix);\n              command.modelMatrix[13] -=\n                _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].sign */ .Z.sign(command.modelMatrix[13]) *\n                2.0 *\n                _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].PI */ .Z.PI *\n                projection.ellipsoid.maximumRadius;\n              _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].transform */ .Z.transform(\n                primitiveCommand.boundingSphere,\n                command.modelMatrix,\n                command.boundingVolume\n              );\n            }\n          }\n        }\n      }\n\n      var children = n.children;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(children)) {\n        var childrenLength = children.length;\n        for (var k = 0; k < childrenLength; ++k) {\n          var child = children[k];\n\n          // A node\'s transform needs to be updated if\n          // - It was targeted for animation this frame, or\n          // - Any of its ancestors were targeted for animation this frame\n\n          // PERFORMANCE_IDEA: if a child has multiple parents and only one of the parents\n          // is dirty, all the subtrees for each child instance will be dirty; we probably\n          // won\'t see this in the wild often.\n          child.dirtyNumber = Math.max(child.dirtyNumber, n.dirtyNumber);\n\n          if (child.dirtyNumber === maxDirtyNumber || justLoaded) {\n            // Don\'t check for modelTransformChanged since if only the model\'s model matrix changed,\n            // we do not need to rebuild the local transform-to-root, only the final\n            // [model\'s-model-matrix][transform-to-root] above.\n            getNodeMatrix(child, child.transformToRoot);\n            _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n              transformToRoot,\n              child.transformToRoot,\n              child.transformToRoot\n            );\n          }\n\n          nodeStack.push(child);\n        }\n      }\n    }\n  }\n\n  ++model._maxDirtyNumber;\n}\n\nvar scratchObjectSpace = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n\nfunction applySkins(model) {\n  var skinnedNodes = model._runtime.skinnedNodes;\n  var length = skinnedNodes.length;\n\n  for (var i = 0; i < length; ++i) {\n    var node = skinnedNodes[i];\n\n    scratchObjectSpace = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverseTransformation */ .Z.inverseTransformation(\n      node.transformToRoot,\n      scratchObjectSpace\n    );\n\n    var computedJointMatrices = node.computedJointMatrices;\n    var joints = node.joints;\n    var bindShapeMatrix = node.bindShapeMatrix;\n    var inverseBindMatrices = node.inverseBindMatrices;\n    var inverseBindMatricesLength = inverseBindMatrices.length;\n\n    for (var m = 0; m < inverseBindMatricesLength; ++m) {\n      // [joint-matrix] = [node-to-root^-1][joint-to-root][inverse-bind][bind-shape]\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(computedJointMatrices[m])) {\n        computedJointMatrices[m] = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n      }\n      computedJointMatrices[m] = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        scratchObjectSpace,\n        joints[m].transformToRoot,\n        computedJointMatrices[m]\n      );\n      computedJointMatrices[m] = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n        computedJointMatrices[m],\n        inverseBindMatrices[m],\n        computedJointMatrices[m]\n      );\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(bindShapeMatrix)) {\n        // NOTE: bindShapeMatrix is glTF 1.0 only, removed in glTF 2.0.\n        computedJointMatrices[m] = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedJointMatrices[m],\n          bindShapeMatrix,\n          computedJointMatrices[m]\n        );\n      }\n    }\n  }\n}\n\nfunction updatePerNodeShow(model) {\n  // Totally not worth it, but we could optimize this:\n  // http://help.agi.com/AGIComponents/html/BlogDeletionInBoundingVolumeHierarchies.htm\n\n  var rootNodes = model._runtime.rootNodes;\n  var length = rootNodes.length;\n\n  var nodeStack = scratchNodeStack;\n\n  for (var i = 0; i < length; ++i) {\n    var n = rootNodes[i];\n    n.computedShow = n.publicNode.show;\n    nodeStack.push(n);\n\n    while (nodeStack.length > 0) {\n      n = nodeStack.pop();\n      var show = n.computedShow;\n\n      var nodeCommands = n.commands;\n      var nodeCommandsLength = nodeCommands.length;\n      for (var j = 0; j < nodeCommandsLength; ++j) {\n        nodeCommands[j].show = show;\n      }\n      // if commandsLength is zero, the node has a light or camera\n\n      var children = n.children;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(children)) {\n        var childrenLength = children.length;\n        for (var k = 0; k < childrenLength; ++k) {\n          var child = children[k];\n          // Parent needs to be shown for child to be shown.\n          child.computedShow = show && child.publicNode.show;\n          nodeStack.push(child);\n        }\n      }\n    }\n  }\n}\n\nfunction updatePickIds(model, context) {\n  var id = model.id;\n  if (model._id !== id) {\n    model._id = id;\n\n    var pickIds = model._pickIds;\n    var length = pickIds.length;\n    for (var i = 0; i < length; ++i) {\n      pickIds[i].object.id = id;\n    }\n  }\n}\n\nfunction updateWireframe(model) {\n  if (model._debugWireframe !== model.debugWireframe) {\n    model._debugWireframe = model.debugWireframe;\n\n    // This assumes the original primitive was TRIANGLES and that the triangles\n    // are connected for the wireframe to look perfect.\n    var primitiveType = model.debugWireframe\n      ? _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].LINES */ .Z.LINES\n      : _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].TRIANGLES */ .Z.TRIANGLES;\n    var nodeCommands = model._nodeCommands;\n    var length = nodeCommands.length;\n\n    for (var i = 0; i < length; ++i) {\n      nodeCommands[i].command.primitiveType = primitiveType;\n    }\n  }\n}\n\nfunction updateShowBoundingVolume(model) {\n  if (model.debugShowBoundingVolume !== model._debugShowBoundingVolume) {\n    model._debugShowBoundingVolume = model.debugShowBoundingVolume;\n\n    var debugShowBoundingVolume = model.debugShowBoundingVolume;\n    var nodeCommands = model._nodeCommands;\n    var length = nodeCommands.length;\n\n    for (var i = 0; i < length; ++i) {\n      nodeCommands[i].command.debugShowBoundingVolume = debugShowBoundingVolume;\n    }\n  }\n}\n\nfunction updateShadows(model) {\n  if (model.shadows !== model._shadows) {\n    model._shadows = model.shadows;\n\n    var castShadows = _ShadowMode_js__WEBPACK_IMPORTED_MODULE_72__/* ["default"].castShadows */ .Z.castShadows(model.shadows);\n    var receiveShadows = _ShadowMode_js__WEBPACK_IMPORTED_MODULE_72__/* ["default"].receiveShadows */ .Z.receiveShadows(model.shadows);\n    var nodeCommands = model._nodeCommands;\n    var length = nodeCommands.length;\n\n    for (var i = 0; i < length; i++) {\n      var nodeCommand = nodeCommands[i];\n      nodeCommand.command.castShadows = castShadows;\n      nodeCommand.command.receiveShadows = receiveShadows;\n    }\n  }\n}\n\nfunction getTranslucentRenderState(model, renderState) {\n  var rs = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(renderState, true);\n  rs.cull.enabled = false;\n  rs.depthTest.enabled = true;\n  rs.depthMask = false;\n  rs.blending = _BlendingState_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND;\n\n  if (model.opaquePass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE) {\n    rs.stencilTest = _StencilConstants_js__WEBPACK_IMPORTED_MODULE_73__/* ["default"].setCesium3DTileBit */ .Z.setCesium3DTileBit();\n    rs.stencilMask = _StencilConstants_js__WEBPACK_IMPORTED_MODULE_73__/* ["default"].CESIUM_3D_TILE_MASK */ .Z.CESIUM_3D_TILE_MASK;\n  }\n\n  return _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache(rs);\n}\n\nfunction deriveTranslucentCommand(model, command) {\n  var translucentCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(command);\n  translucentCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT;\n  translucentCommand.renderState = getTranslucentRenderState(\n    model,\n    command.renderState\n  );\n  return translucentCommand;\n}\n\nfunction updateColor(model, frameState, forceDerive) {\n  // Generate translucent commands when the blend color has an alpha in the range (0.0, 1.0) exclusive\n  var scene3DOnly = frameState.scene3DOnly;\n  var alpha = model.color.alpha;\n  if (alpha > 0.0 && alpha < 1.0) {\n    var nodeCommands = model._nodeCommands;\n    var length = nodeCommands.length;\n    if (\n      length > 0 &&\n      (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(nodeCommands[0].translucentCommand) || forceDerive)\n    ) {\n      for (var i = 0; i < length; ++i) {\n        var nodeCommand = nodeCommands[i];\n        var command = nodeCommand.command;\n        nodeCommand.translucentCommand = deriveTranslucentCommand(\n          model,\n          command\n        );\n        if (!scene3DOnly) {\n          var command2D = nodeCommand.command2D;\n          nodeCommand.translucentCommand2D = deriveTranslucentCommand(\n            model,\n            command2D\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction getDisableCullingRenderState(renderState) {\n  var rs = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(renderState, true);\n  rs.cull.enabled = false;\n  return _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache(rs);\n}\n\nfunction deriveDisableCullingCommand(command) {\n  var disableCullingCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(command);\n  disableCullingCommand.renderState = getDisableCullingRenderState(\n    command.renderState\n  );\n  return disableCullingCommand;\n}\n\nfunction updateBackFaceCulling(model, frameState, forceDerive) {\n  var scene3DOnly = frameState.scene3DOnly;\n  var backFaceCulling = model.backFaceCulling;\n  if (!backFaceCulling) {\n    var nodeCommands = model._nodeCommands;\n    var length = nodeCommands.length;\n    if (\n      length > 0 &&\n      (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(nodeCommands[0].disableCullingCommand) || forceDerive)\n    ) {\n      for (var i = 0; i < length; ++i) {\n        var nodeCommand = nodeCommands[i];\n        var command = nodeCommand.command;\n        nodeCommand.disableCullingCommand = deriveDisableCullingCommand(\n          command\n        );\n        if (!scene3DOnly) {\n          var command2D = nodeCommand.command2D;\n          nodeCommand.disableCullingCommand2D = deriveDisableCullingCommand(\n            command2D\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction getProgramId(model, program) {\n  var programs = model._rendererResources.programs;\n  for (var id in programs) {\n    if (programs.hasOwnProperty(id)) {\n      if (programs[id] === program) {\n        return id;\n      }\n    }\n  }\n}\n\nfunction createSilhouetteProgram(model, program, frameState) {\n  var vs = program.vertexShaderSource.sources[0];\n  var attributeLocations = program._attributeLocations;\n  var normalAttributeName = model._normalAttributeName;\n\n  // Modified from http://forum.unity3d.com/threads/toon-outline-but-with-diffuse-surface.24668/\n  vs = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].replaceMain */ .Z.replaceMain(vs, "gltf_silhouette_main");\n  vs +=\n    "uniform float gltf_silhouetteSize; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    gltf_silhouette_main(); \\n" +\n    "    vec3 n = normalize(czm_normal3D * " +\n    normalAttributeName +\n    "); \\n" +\n    "    n.x *= czm_projection[0][0]; \\n" +\n    "    n.y *= czm_projection[1][1]; \\n" +\n    "    vec4 clip = gl_Position; \\n" +\n    "    clip.xy += n.xy * clip.w * gltf_silhouetteSize * czm_pixelRatio / czm_viewport.z; \\n" +\n    "    gl_Position = clip; \\n" +\n    "}";\n\n  var fs =\n    "uniform vec4 gltf_silhouetteColor; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    gl_FragColor = czm_gammaCorrect(gltf_silhouetteColor); \\n" +\n    "}";\n\n  return _Renderer_ShaderProgram_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"].fromCache */ .Z.fromCache({\n    context: frameState.context,\n    vertexShaderSource: vs,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations,\n  });\n}\n\nfunction hasSilhouette(model, frameState) {\n  return (\n    silhouetteSupported(frameState.context) &&\n    model.silhouetteSize > 0.0 &&\n    model.silhouetteColor.alpha > 0.0 &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._normalAttributeName)\n  );\n}\n\nfunction hasTranslucentCommands(model) {\n  var nodeCommands = model._nodeCommands;\n  var length = nodeCommands.length;\n  for (var i = 0; i < length; ++i) {\n    var nodeCommand = nodeCommands[i];\n    var command = nodeCommand.command;\n    if (command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTranslucent(model) {\n  return model.color.alpha > 0.0 && model.color.alpha < 1.0;\n}\n\nfunction isInvisible(model) {\n  return model.color.alpha === 0.0;\n}\n\nfunction alphaDirty(currAlpha, prevAlpha) {\n  // Returns whether the alpha state has changed between invisible, translucent, or opaque\n  return (\n    Math.floor(currAlpha) !== Math.floor(prevAlpha) ||\n    Math.ceil(currAlpha) !== Math.ceil(prevAlpha)\n  );\n}\n\nvar silhouettesLength = 0;\n\nfunction createSilhouetteCommands(model, frameState) {\n  // Wrap around after exceeding the 8-bit stencil limit.\n  // The reference is unique to each model until this point.\n  var stencilReference = ++silhouettesLength % 255;\n\n  // If the model is translucent the silhouette needs to be in the translucent pass.\n  // Otherwise the silhouette would be rendered before the model.\n  var silhouetteTranslucent =\n    hasTranslucentCommands(model) ||\n    isTranslucent(model) ||\n    model.silhouetteColor.alpha < 1.0;\n  var silhouettePrograms = model._rendererResources.silhouettePrograms;\n  var scene3DOnly = frameState.scene3DOnly;\n  var nodeCommands = model._nodeCommands;\n  var length = nodeCommands.length;\n  for (var i = 0; i < length; ++i) {\n    var nodeCommand = nodeCommands[i];\n    var command = nodeCommand.command;\n\n    // Create model command\n    var modelCommand = isTranslucent(model)\n      ? nodeCommand.translucentCommand\n      : command;\n    var silhouetteModelCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(modelCommand);\n    var renderState = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(modelCommand.renderState);\n\n    // Write the reference value into the stencil buffer.\n    renderState.stencilTest = {\n      enabled: true,\n      frontFunction: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ALWAYS */ .Z.ALWAYS,\n      backFunction: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].ALWAYS */ .Z.ALWAYS,\n      reference: stencilReference,\n      mask: ~0,\n      frontOperation: {\n        fail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zPass: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].REPLACE */ .Z.REPLACE,\n      },\n      backOperation: {\n        fail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zPass: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].REPLACE */ .Z.REPLACE,\n      },\n    };\n\n    if (isInvisible(model)) {\n      // When the model is invisible disable color and depth writes but still write into the stencil buffer\n      renderState.colorMask = {\n        red: false,\n        green: false,\n        blue: false,\n        alpha: false,\n      };\n      renderState.depthMask = false;\n    }\n    renderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache(renderState);\n    silhouetteModelCommand.renderState = renderState;\n    nodeCommand.silhouetteModelCommand = silhouetteModelCommand;\n\n    // Create color command\n    var silhouetteColorCommand = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(command);\n    renderState = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(command.renderState, true);\n    renderState.depthTest.enabled = true;\n    renderState.cull.enabled = false;\n    if (silhouetteTranslucent) {\n      silhouetteColorCommand.pass = _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT;\n      renderState.depthMask = false;\n      renderState.blending = _BlendingState_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].ALPHA_BLEND */ .Z.ALPHA_BLEND;\n    }\n\n    // Only render silhouette if the value in the stencil buffer equals the reference\n    renderState.stencilTest = {\n      enabled: true,\n      frontFunction: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].NOTEQUAL */ .Z.NOTEQUAL,\n      backFunction: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].NOTEQUAL */ .Z.NOTEQUAL,\n      reference: stencilReference,\n      mask: ~0,\n      frontOperation: {\n        fail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zPass: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n      },\n      backOperation: {\n        fail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zFail: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n        zPass: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].KEEP */ .Z.KEEP,\n      },\n    };\n    renderState = _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache(renderState);\n\n    // If the silhouette program has already been cached use it\n    var program = command.shaderProgram;\n    var id = getProgramId(model, program);\n    var silhouetteProgram = silhouettePrograms[id];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(silhouetteProgram)) {\n      silhouetteProgram = createSilhouetteProgram(model, program, frameState);\n      silhouettePrograms[id] = silhouetteProgram;\n    }\n\n    var silhouetteUniformMap = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(command.uniformMap, {\n      gltf_silhouetteColor: createSilhouetteColorFunction(model),\n      gltf_silhouetteSize: createSilhouetteSizeFunction(model),\n    });\n\n    silhouetteColorCommand.renderState = renderState;\n    silhouetteColorCommand.shaderProgram = silhouetteProgram;\n    silhouetteColorCommand.uniformMap = silhouetteUniformMap;\n    silhouetteColorCommand.castShadows = false;\n    silhouetteColorCommand.receiveShadows = false;\n    nodeCommand.silhouetteColorCommand = silhouetteColorCommand;\n\n    if (!scene3DOnly) {\n      var command2D = nodeCommand.command2D;\n      var silhouetteModelCommand2D = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(\n        silhouetteModelCommand\n      );\n      silhouetteModelCommand2D.boundingVolume = command2D.boundingVolume;\n      silhouetteModelCommand2D.modelMatrix = command2D.modelMatrix;\n      nodeCommand.silhouetteModelCommand2D = silhouetteModelCommand2D;\n\n      var silhouetteColorCommand2D = _Renderer_DrawCommand_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].shallowClone */ .Z.shallowClone(\n        silhouetteColorCommand\n      );\n      silhouetteModelCommand2D.boundingVolume = command2D.boundingVolume;\n      silhouetteModelCommand2D.modelMatrix = command2D.modelMatrix;\n      nodeCommand.silhouetteColorCommand2D = silhouetteColorCommand2D;\n    }\n  }\n}\n\nfunction modifyShaderForClippingPlanes(\n  shader,\n  clippingPlaneCollection,\n  context\n) {\n  shader = _Renderer_ShaderSource_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].replaceMain */ .Z.replaceMain(shader, "gltf_clip_main");\n  shader += Model._getClippingFunction(clippingPlaneCollection, context) + "\\n";\n  shader +=\n    "uniform highp sampler2D gltf_clippingPlanes; \\n" +\n    "uniform mat4 gltf_clippingPlanesMatrix; \\n" +\n    "uniform vec4 gltf_clippingPlanesEdgeStyle; \\n" +\n    "void main() \\n" +\n    "{ \\n" +\n    "    gltf_clip_main(); \\n" +\n    (0,_getClipAndStyleCode_js__WEBPACK_IMPORTED_MODULE_56__/* ["default"] */ .Z)(\n      "gltf_clippingPlanes",\n      "gltf_clippingPlanesMatrix",\n      "gltf_clippingPlanesEdgeStyle"\n    ) +\n    "} \\n";\n  return shader;\n}\n\nfunction updateSilhouette(model, frameState, force) {\n  // Generate silhouette commands when the silhouette size is greater than 0.0 and the alpha is greater than 0.0\n  // There are two silhouette commands:\n  //     1. silhouetteModelCommand : render model normally while enabling stencil mask\n  //     2. silhouetteColorCommand : render enlarged model with a solid color while enabling stencil tests\n  if (!hasSilhouette(model, frameState)) {\n    return;\n  }\n\n  var nodeCommands = model._nodeCommands;\n  var dirty =\n    nodeCommands.length > 0 &&\n    (alphaDirty(model.color.alpha, model._colorPreviousAlpha) ||\n      alphaDirty(\n        model.silhouetteColor.alpha,\n        model._silhouetteColorPreviousAlpha\n      ) ||\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(nodeCommands[0].silhouetteModelCommand));\n\n  model._colorPreviousAlpha = model.color.alpha;\n  model._silhouetteColorPreviousAlpha = model.silhouetteColor.alpha;\n\n  if (dirty || force) {\n    createSilhouetteCommands(model, frameState);\n  }\n}\n\nfunction updateClippingPlanes(model, frameState) {\n  var clippingPlanes = model._clippingPlanes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.owner === model) {\n    if (clippingPlanes.enabled) {\n      clippingPlanes.update(frameState);\n    }\n  }\n}\n\nvar scratchBoundingSphere = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction scaleInPixels(positionWC, radius, frameState) {\n  scratchBoundingSphere.center = positionWC;\n  scratchBoundingSphere.radius = radius;\n  return frameState.camera.getPixelSize(\n    scratchBoundingSphere,\n    frameState.context.drawingBufferWidth,\n    frameState.context.drawingBufferHeight\n  );\n}\n\nvar scratchPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nfunction getScale(model, frameState) {\n  var scale = model.scale;\n\n  if (model.minimumPixelSize !== 0.0) {\n    // Compute size of bounding sphere in pixels\n    var context = frameState.context;\n    var maxPixelSize = Math.max(\n      context.drawingBufferWidth,\n      context.drawingBufferHeight\n    );\n    var m = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._clampedModelMatrix)\n      ? model._clampedModelMatrix\n      : model.modelMatrix;\n    scratchPosition.x = m[12];\n    scratchPosition.y = m[13];\n    scratchPosition.z = m[14];\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._rtcCenter)) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(model._rtcCenter, scratchPosition, scratchPosition);\n    }\n\n    if (model._mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n      var projection = frameState.mapProjection;\n      var cartographic = projection.ellipsoid.cartesianToCartographic(\n        scratchPosition,\n        scratchCartographic\n      );\n      projection.project(cartographic, scratchPosition);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n        scratchPosition.z,\n        scratchPosition.x,\n        scratchPosition.y,\n        scratchPosition\n      );\n    }\n\n    var radius = model.boundingSphere.radius;\n    var metersPerPixel = scaleInPixels(scratchPosition, radius, frameState);\n\n    // metersPerPixel is always > 0.0\n    var pixelsPerMeter = 1.0 / metersPerPixel;\n    var diameterInPixels = Math.min(\n      pixelsPerMeter * (2.0 * radius),\n      maxPixelSize\n    );\n\n    // Maintain model\'s minimum pixel size\n    if (diameterInPixels < model.minimumPixelSize) {\n      scale =\n        (model.minimumPixelSize * metersPerPixel) /\n        (2.0 * model._initialRadius);\n    }\n  }\n\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model.maximumScale)\n    ? Math.min(model.maximumScale, scale)\n    : scale;\n}\n\nfunction releaseCachedGltf(model) {\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._cacheKey) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._cachedGltf) &&\n    --model._cachedGltf.count === 0\n  ) {\n    delete gltfCache[model._cacheKey];\n  }\n  model._cachedGltf = undefined;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction CachedRendererResources(context, cacheKey) {\n  this.buffers = undefined;\n  this.vertexArrays = undefined;\n  this.programs = undefined;\n  this.sourceShaders = undefined;\n  this.silhouettePrograms = undefined;\n  this.textures = undefined;\n  this.samplers = undefined;\n  this.renderStates = undefined;\n  this.ready = false;\n\n  this.context = context;\n  this.cacheKey = cacheKey;\n  this.count = 0;\n}\n\nfunction destroy(property) {\n  for (var name in property) {\n    if (property.hasOwnProperty(name)) {\n      property[name].destroy();\n    }\n  }\n}\n\nfunction destroyCachedRendererResources(resources) {\n  destroy(resources.buffers);\n  destroy(resources.vertexArrays);\n  destroy(resources.programs);\n  destroy(resources.silhouettePrograms);\n  destroy(resources.textures);\n}\n\nCachedRendererResources.prototype.release = function () {\n  if (--this.count === 0) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this.cacheKey)) {\n      // Remove if this was cached\n      delete this.context.cache.modelRendererResourceCache[this.cacheKey];\n    }\n    destroyCachedRendererResources(this);\n    return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(this);\n  }\n\n  return undefined;\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction getUpdateHeightCallback(model, ellipsoid, cartoPosition) {\n  return function (clampedPosition) {\n    if (model.heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"].RELATIVE_TO_GROUND */ .Z.RELATIVE_TO_GROUND) {\n      var clampedCart = ellipsoid.cartesianToCartographic(\n        clampedPosition,\n        scratchCartographic\n      );\n      clampedCart.height += cartoPosition.height;\n      ellipsoid.cartographicToCartesian(clampedCart, clampedPosition);\n    }\n\n    var clampedModelMatrix = model._clampedModelMatrix;\n\n    // Modify clamped model matrix to use new height\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(model.modelMatrix, clampedModelMatrix);\n    clampedModelMatrix[12] = clampedPosition.x;\n    clampedModelMatrix[13] = clampedPosition.y;\n    clampedModelMatrix[14] = clampedPosition.z;\n\n    model._heightChanged = true;\n  };\n}\n\nfunction updateClamping(model) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._removeUpdateHeightCallback)) {\n    model._removeUpdateHeightCallback();\n    model._removeUpdateHeightCallback = undefined;\n  }\n\n  var scene = model._scene;\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(scene) ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(scene.globe) ||\n    model.heightReference === _HeightReference_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"].NONE */ .Z.NONE\n  ) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (model.heightReference !== _HeightReference_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"].NONE */ .Z.NONE) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n        "Height reference is not supported without a scene and globe."\n      );\n    }\n    //>>includeEnd(\'debug\');\n    model._clampedModelMatrix = undefined;\n    return;\n  }\n\n  var globe = scene.globe;\n  var ellipsoid = globe.ellipsoid;\n\n  // Compute cartographic position so we don\'t recompute every update\n  var modelMatrix = model.modelMatrix;\n  scratchPosition.x = modelMatrix[12];\n  scratchPosition.y = modelMatrix[13];\n  scratchPosition.z = modelMatrix[14];\n  var cartoPosition = ellipsoid.cartesianToCartographic(scratchPosition);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(model._clampedModelMatrix)) {\n    model._clampedModelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(modelMatrix, new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z());\n  }\n\n  // Install callback to handle updating of terrain tiles\n  var surface = globe._surface;\n  model._removeUpdateHeightCallback = surface.updateHeight(\n    cartoPosition,\n    getUpdateHeightCallback(model, ellipsoid, cartoPosition)\n  );\n\n  // Set the correct height now\n  var height = globe.getHeight(cartoPosition);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(height)) {\n    // Get callback with cartoPosition being the non-clamped position\n    var cb = getUpdateHeightCallback(model, ellipsoid, cartoPosition);\n\n    // Compute the clamped cartesian and call updateHeight callback\n    _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(cartoPosition, scratchCartographic);\n    scratchCartographic.height = height;\n    ellipsoid.cartographicToCartesian(scratchCartographic, scratchPosition);\n    cb(scratchPosition);\n  }\n}\n\nvar scratchDisplayConditionCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchDistanceDisplayConditionCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nfunction distanceDisplayConditionVisible(model, frameState) {\n  var distance2;\n  var ddc = model.distanceDisplayCondition;\n  var nearSquared = ddc.near * ddc.near;\n  var farSquared = ddc.far * ddc.far;\n\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n    var frustum2DWidth =\n      frameState.camera.frustum.right - frameState.camera.frustum.left;\n    distance2 = frustum2DWidth * 0.5;\n    distance2 = distance2 * distance2;\n  } else {\n    // Distance to center of primitive\'s reference frame\n    var position = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].getTranslation */ .Z.getTranslation(\n      model.modelMatrix,\n      scratchDisplayConditionCartesian\n    );\n    if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n      var projection = frameState.mapProjection;\n      var ellipsoid = projection.ellipsoid;\n      var cartographic = ellipsoid.cartesianToCartographic(\n        position,\n        scratchDistanceDisplayConditionCartographic\n      );\n      position = projection.project(cartographic, position);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(position.z, position.x, position.y, position);\n    }\n    distance2 = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].distanceSquared */ .Z.distanceSquared(\n      position,\n      frameState.camera.positionWC\n    );\n  }\n\n  return distance2 >= nearSquared && distance2 <= farSquared;\n}\n\nvar scratchClippingPlanesMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\nvar scratchIBLReferenceFrameMatrix4 = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\nvar scratchIBLReferenceFrameMatrix3 = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z();\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {RuntimeError} Failed to load external reference.\n */\nModel.prototype.update = function (frameState) {\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].MORPHING */ .Z.MORPHING) {\n    return;\n  }\n\n  if (!_Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].supportsWebP.initialized */ .Z.supportsWebP.initialized) {\n    _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].supportsWebP.initialize */ .Z.supportsWebP.initialize();\n    return;\n  }\n\n  var context = frameState.context;\n  this._defaultTexture = context.defaultTexture;\n\n  var supportsWebP = _Core_FeatureDetection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].supportsWebP */ .Z.supportsWebP();\n\n  if (this._state === ModelState.NEEDS_LOAD && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this.gltf)) {\n    // Use renderer resources from cache instead of loading/creating them?\n    var cachedRendererResources;\n    var cacheKey = this.cacheKey;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(cacheKey)) {\n      // cache key given? this model will pull from or contribute to context level cache\n      context.cache.modelRendererResourceCache = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(\n        context.cache.modelRendererResourceCache,\n        {}\n      );\n      var modelCaches = context.cache.modelRendererResourceCache;\n\n      cachedRendererResources = modelCaches[this.cacheKey];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(cachedRendererResources)) {\n        if (!cachedRendererResources.ready) {\n          // Cached resources for the model are not loaded yet.  We\'ll\n          // try again every frame until they are.\n          return;\n        }\n\n        ++cachedRendererResources.count;\n        this._loadRendererResourcesFromCache = true;\n      } else {\n        cachedRendererResources = new CachedRendererResources(\n          context,\n          cacheKey\n        );\n        cachedRendererResources.count = 1;\n        modelCaches[this.cacheKey] = cachedRendererResources;\n      }\n      this._cachedRendererResources = cachedRendererResources;\n    } else {\n      // cache key not given? this model doesn\'t care about context level cache at all. Cache is here to simplify freeing on destroy.\n      cachedRendererResources = new CachedRendererResources(context);\n      cachedRendererResources.count = 1;\n      this._cachedRendererResources = cachedRendererResources;\n    }\n\n    this._state = ModelState.LOADING;\n    if (this._state !== ModelState.FAILED) {\n      var extensions = this.gltf.extensions;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(extensions) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(extensions.CESIUM_RTC)) {\n        var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromArray */ .Z.fromArray(extensions.CESIUM_RTC.center);\n        if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(center, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ZERO */ .Z.ZERO)) {\n          this._rtcCenter3D = center;\n\n          var projection = frameState.mapProjection;\n          var ellipsoid = projection.ellipsoid;\n          var cartographic = ellipsoid.cartesianToCartographic(\n            this._rtcCenter3D\n          );\n          var projectedCart = projection.project(cartographic);\n          _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromElements */ .Z.fromElements(\n            projectedCart.z,\n            projectedCart.x,\n            projectedCart.y,\n            projectedCart\n          );\n          this._rtcCenter2D = projectedCart;\n\n          this._rtcCenterEye = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n          this._rtcCenter = this._rtcCenter3D;\n        }\n      }\n\n      (0,_GltfPipeline_addPipelineExtras_js__WEBPACK_IMPORTED_MODULE_44__/* ["default"] */ .Z)(this.gltf);\n\n      this._loadResources = new _ModelLoadResources_js__WEBPACK_IMPORTED_MODULE_62__/* ["default"] */ .Z();\n      if (!this._loadRendererResourcesFromCache) {\n        // Buffers are required to updateVersion\n        _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].parseBuffers */ .Z.parseBuffers(this, bufferLoad);\n      }\n    }\n  }\n\n  var loadResources = this._loadResources;\n  var incrementallyLoadTextures = this._incrementallyLoadTextures;\n  var justLoaded = false;\n\n  if (this._state === ModelState.LOADING) {\n    // Transition from LOADING -> LOADED once resources are downloaded and created.\n    // Textures may continue to stream in while in the LOADED state.\n    if (loadResources.pendingBufferLoads === 0) {\n      if (!loadResources.initialized) {\n        frameState.brdfLutGenerator.update(frameState);\n\n        _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].checkSupportedExtensions */ .Z.checkSupportedExtensions(\n          this.extensionsRequired,\n          supportsWebP\n        );\n        _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].updateForwardAxis */ .Z.updateForwardAxis(this);\n\n        // glTF pipeline updates, not needed if loading from cache\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this.gltf.extras.sourceVersion)) {\n          var gltf = this.gltf;\n          // Add the original version so it remains cached\n          gltf.extras.sourceVersion = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getAssetVersion */ .Z.getAssetVersion(gltf);\n          gltf.extras.sourceKHRTechniquesWebGL = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(\n            _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getUsedExtensions */ .Z.getUsedExtensions(gltf).KHR_techniques_webgl\n          );\n\n          this._sourceVersion = gltf.extras.sourceVersion;\n          this._sourceKHRTechniquesWebGL = gltf.extras.sourceKHRTechniquesWebGL;\n\n          (0,_GltfPipeline_updateVersion_js__WEBPACK_IMPORTED_MODULE_48__/* ["default"] */ .Z)(gltf);\n          (0,_GltfPipeline_addDefaults_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"] */ .Z)(gltf);\n\n          var options = {\n            addBatchIdToGeneratedShaders: this._addBatchIdToGeneratedShaders,\n          };\n\n          (0,_processModelMaterialsCommon_js__WEBPACK_IMPORTED_MODULE_69__/* ["default"] */ .Z)(gltf, options);\n          (0,_processPbrMaterials_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(gltf, options);\n        }\n\n        this._sourceVersion = this.gltf.extras.sourceVersion;\n        this._sourceKHRTechniquesWebGL = this.gltf.extras.sourceKHRTechniquesWebGL;\n\n        // Skip dequantizing in the shader if not encoded\n        this._dequantizeInShader =\n          this._dequantizeInShader && _DracoLoader_js__WEBPACK_IMPORTED_MODULE_55__/* ["default"].hasExtension */ .Z.hasExtension(this);\n\n        // We do this after to make sure that the ids don\'t change\n        addBuffersToLoadResources(this);\n        parseArticulations(this);\n        parseTechniques(this);\n        if (!this._loadRendererResourcesFromCache) {\n          parseBufferViews(this);\n          parseShaders(this);\n          parsePrograms(this);\n          parseTextures(this, context, supportsWebP);\n        }\n        parseMaterials(this);\n        parseMeshes(this);\n        parseNodes(this);\n\n        // Start draco decoding\n        _DracoLoader_js__WEBPACK_IMPORTED_MODULE_55__/* ["default"].parse */ .Z.parse(this, context);\n\n        loadResources.initialized = true;\n      }\n\n      if (!loadResources.finishedDecoding()) {\n        _DracoLoader_js__WEBPACK_IMPORTED_MODULE_55__/* ["default"].decodeModel */ .Z.decodeModel(this, context).otherwise(\n          _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getFailedLoadFunction */ .Z.getFailedLoadFunction(this, "model", this.basePath)\n        );\n      }\n\n      if (loadResources.finishedDecoding() && !loadResources.resourcesParsed) {\n        this._boundingSphere = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].computeBoundingSphere */ .Z.computeBoundingSphere(this);\n        this._initialRadius = this._boundingSphere.radius;\n\n        _DracoLoader_js__WEBPACK_IMPORTED_MODULE_55__/* ["default"].cacheDataForModel */ .Z.cacheDataForModel(this);\n\n        loadResources.resourcesParsed = true;\n      }\n\n      if (\n        loadResources.resourcesParsed &&\n        loadResources.pendingShaderLoads === 0\n      ) {\n        if (this.showOutline) {\n          _ModelOutlineLoader_js__WEBPACK_IMPORTED_MODULE_66__/* ["default"].outlinePrimitives */ .Z.outlinePrimitives(this);\n        }\n        createResources(this, frameState);\n      }\n    }\n\n    if (\n      loadResources.finished() ||\n      (incrementallyLoadTextures &&\n        loadResources.finishedEverythingButTextureCreation())\n    ) {\n      this._state = ModelState.LOADED;\n      justLoaded = true;\n    }\n  }\n\n  // Incrementally stream textures.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(loadResources) && this._state === ModelState.LOADED) {\n    if (incrementallyLoadTextures && !justLoaded) {\n      createResources(this, frameState);\n    }\n\n    if (loadResources.finished()) {\n      this._loadResources = undefined; // Clear CPU memory since WebGL resources were created.\n\n      var resources = this._rendererResources;\n      var cachedResources = this._cachedRendererResources;\n\n      cachedResources.buffers = resources.buffers;\n      cachedResources.vertexArrays = resources.vertexArrays;\n      cachedResources.programs = resources.programs;\n      cachedResources.sourceShaders = resources.sourceShaders;\n      cachedResources.silhouettePrograms = resources.silhouettePrograms;\n      cachedResources.textures = resources.textures;\n      cachedResources.samplers = resources.samplers;\n      cachedResources.renderStates = resources.renderStates;\n      cachedResources.ready = true;\n\n      // The normal attribute name is required for silhouettes, so get it before the gltf JSON is released\n      this._normalAttributeName = _ModelUtility_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"].getAttributeOrUniformBySemantic */ .Z.getAttributeOrUniformBySemantic(\n        this.gltf,\n        "NORMAL"\n      );\n\n      // Vertex arrays are unique to this model, do not store in cache.\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._precreatedAttributes)) {\n        cachedResources.vertexArrays = {};\n      }\n\n      if (this.releaseGltfJson) {\n        releaseCachedGltf(this);\n      }\n    }\n  }\n\n  var iblSupported = _OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_68__/* ["default"].isSupported */ .Z.isSupported(context);\n  if (this._shouldUpdateSpecularMapAtlas && iblSupported) {\n    this._shouldUpdateSpecularMapAtlas = false;\n    this._specularEnvironmentMapAtlas =\n      this._specularEnvironmentMapAtlas &&\n      this._specularEnvironmentMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = undefined;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._specularEnvironmentMaps)) {\n      this._specularEnvironmentMapAtlas = new _OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_68__/* ["default"] */ .Z(\n        this._specularEnvironmentMaps\n      );\n      var that = this;\n      this._specularEnvironmentMapAtlas.readyPromise\n        .then(function () {\n          that._shouldRegenerateShaders = true;\n        })\n        .otherwise(function (error) {\n          console.error("Error loading specularEnvironmentMaps: " + error);\n        });\n    }\n\n    // Regenerate shaders to not use an environment map. Will be set to true again if there was a new environment map and it is ready.\n    this._shouldRegenerateShaders = true;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._specularEnvironmentMapAtlas)) {\n    this._specularEnvironmentMapAtlas.update(frameState);\n  }\n\n  var recompileWithDefaultAtlas =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._specularEnvironmentMapAtlas) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(frameState.specularEnvironmentMaps) &&\n    !this._useDefaultSpecularMaps;\n  var recompileWithoutDefaultAtlas =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(frameState.specularEnvironmentMaps) &&\n    this._useDefaultSpecularMaps;\n\n  var recompileWithDefaultSHCoeffs =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._sphericalHarmonicCoefficients) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(frameState.sphericalHarmonicCoefficients) &&\n    !this._useDefaultSphericalHarmonics;\n  var recompileWithoutDefaultSHCoeffs =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(frameState.sphericalHarmonicCoefficients) &&\n    this._useDefaultSphericalHarmonics;\n\n  this._shouldRegenerateShaders =\n    this._shouldRegenerateShaders ||\n    recompileWithDefaultAtlas ||\n    recompileWithoutDefaultAtlas ||\n    recompileWithDefaultSHCoeffs ||\n    recompileWithoutDefaultSHCoeffs;\n\n  this._useDefaultSpecularMaps =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._specularEnvironmentMapAtlas) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(frameState.specularEnvironmentMaps);\n  this._useDefaultSphericalHarmonics =\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._sphericalHarmonicCoefficients) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(frameState.sphericalHarmonicCoefficients);\n\n  var silhouette = hasSilhouette(this, frameState);\n  var translucent = isTranslucent(this);\n  var invisible = isInvisible(this);\n  var backFaceCulling = this.backFaceCulling;\n  var displayConditionPassed = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this.distanceDisplayCondition)\n    ? distanceDisplayConditionVisible(this, frameState)\n    : true;\n  var show =\n    this.show &&\n    displayConditionPassed &&\n    this.scale !== 0.0 &&\n    (!invisible || silhouette);\n\n  if ((show && this._state === ModelState.LOADED) || justLoaded) {\n    var animated =\n      this.activeAnimations.update(frameState) || this._cesiumAnimationsDirty;\n    this._cesiumAnimationsDirty = false;\n    this._dirty = false;\n    var modelMatrix = this.modelMatrix;\n\n    var modeChanged = frameState.mode !== this._mode;\n    this._mode = frameState.mode;\n\n    // Model\'s model matrix needs to be updated\n    var modelTransformChanged =\n      !_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].equals */ .Z.equals(this._modelMatrix, modelMatrix) ||\n      this._scale !== this.scale ||\n      this._minimumPixelSize !== this.minimumPixelSize ||\n      this.minimumPixelSize !== 0.0 || // Minimum pixel size changed or is enabled\n      this._maximumScale !== this.maximumScale ||\n      this._heightReference !== this.heightReference ||\n      this._heightChanged ||\n      modeChanged;\n\n    if (modelTransformChanged || justLoaded) {\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].clone */ .Z.clone(modelMatrix, this._modelMatrix);\n\n      updateClamping(this);\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._clampedModelMatrix)) {\n        modelMatrix = this._clampedModelMatrix;\n      }\n\n      this._scale = this.scale;\n      this._minimumPixelSize = this.minimumPixelSize;\n      this._maximumScale = this.maximumScale;\n      this._heightReference = this.heightReference;\n      this._heightChanged = false;\n\n      var scale = getScale(this, frameState);\n      var computedModelMatrix = this._computedModelMatrix;\n      _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyByUniformScale */ .Z.multiplyByUniformScale(modelMatrix, scale, computedModelMatrix);\n      if (this._upAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].Y */ .Z.Y) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedModelMatrix,\n          _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].Y_UP_TO_Z_UP */ .Z.Y_UP_TO_Z_UP,\n          computedModelMatrix\n        );\n      } else if (this._upAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].X */ .Z.X) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedModelMatrix,\n          _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].X_UP_TO_Z_UP */ .Z.X_UP_TO_Z_UP,\n          computedModelMatrix\n        );\n      }\n      if (this.forwardAxis === _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].Z */ .Z.Z) {\n        // glTF 2.0 has a Z-forward convention that must be adapted here to X-forward.\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n          computedModelMatrix,\n          _Axis_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"].Z_UP_TO_X_UP */ .Z.Z_UP_TO_X_UP,\n          computedModelMatrix\n        );\n      }\n    }\n\n    // Update modelMatrix throughout the graph as needed\n    if (animated || modelTransformChanged || justLoaded) {\n      updateNodeHierarchyModelMatrix(\n        this,\n        modelTransformChanged,\n        justLoaded,\n        frameState.mapProjection\n      );\n      this._dirty = true;\n\n      if (animated || justLoaded) {\n        // Apply skins if animation changed any node transforms\n        applySkins(this);\n      }\n    }\n\n    if (this._perNodeShowDirty) {\n      this._perNodeShowDirty = false;\n      updatePerNodeShow(this);\n    }\n    updatePickIds(this, context);\n    updateWireframe(this);\n    updateShowBoundingVolume(this);\n    updateShadows(this);\n    updateClippingPlanes(this, frameState);\n\n    // Regenerate shaders if ClippingPlaneCollection state changed or it was removed\n    var clippingPlanes = this._clippingPlanes;\n    var currentClippingPlanesState = 0;\n\n    // If defined, use the reference matrix to transform miscellaneous properties like\n    // clipping planes and IBL instead of the modelMatrix. This is so that when\n    // models are part of a tileset these properties get transformed relative to\n    // a common reference (such as the root).\n    var referenceMatrix = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(this.referenceMatrix, modelMatrix);\n\n    if (isClippingEnabled(this)) {\n      var clippingPlanesMatrix = scratchClippingPlanesMatrix;\n      clippingPlanesMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiply */ .Z.multiply(\n        context.uniformState.view3D,\n        referenceMatrix,\n        clippingPlanesMatrix\n      );\n      clippingPlanesMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiply */ .Z.multiply(\n        clippingPlanesMatrix,\n        clippingPlanes.modelMatrix,\n        clippingPlanesMatrix\n      );\n      this._clippingPlanesMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].inverseTranspose */ .Z.inverseTranspose(\n        clippingPlanesMatrix,\n        this._clippingPlanesMatrix\n      );\n      currentClippingPlanesState = clippingPlanes.clippingPlanesState;\n    }\n\n    var usesSH =\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._sphericalHarmonicCoefficients) ||\n      this._useDefaultSphericalHarmonics;\n    var usesSM =\n      ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._specularEnvironmentMapAtlas) &&\n        this._specularEnvironmentMapAtlas.ready) ||\n      this._useDefaultSpecularMaps;\n\n    if (usesSH || usesSM) {\n      var iblReferenceFrameMatrix3 = scratchIBLReferenceFrameMatrix3;\n      var iblReferenceFrameMatrix4 = scratchIBLReferenceFrameMatrix4;\n\n      iblReferenceFrameMatrix4 = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].multiply */ .Z.multiply(\n        context.uniformState.view3D,\n        referenceMatrix,\n        iblReferenceFrameMatrix4\n      );\n      iblReferenceFrameMatrix3 = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].getMatrix3 */ .Z.getMatrix3(\n        iblReferenceFrameMatrix4,\n        iblReferenceFrameMatrix3\n      );\n      iblReferenceFrameMatrix3 = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].getRotation */ .Z.getRotation(\n        iblReferenceFrameMatrix3,\n        iblReferenceFrameMatrix3\n      );\n      this._iblReferenceFrameMatrix = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].transpose */ .Z.transpose(\n        iblReferenceFrameMatrix3,\n        this._iblReferenceFrameMatrix\n      );\n    }\n\n    var shouldRegenerateShaders = this._shouldRegenerateShaders;\n    shouldRegenerateShaders =\n      shouldRegenerateShaders ||\n      this._clippingPlanesState !== currentClippingPlanesState;\n    this._clippingPlanesState = currentClippingPlanesState;\n\n    // Regenerate shaders if color shading changed from last update\n    var currentlyColorShadingEnabled = isColorShadingEnabled(this);\n    if (currentlyColorShadingEnabled !== this._colorShadingEnabled) {\n      this._colorShadingEnabled = currentlyColorShadingEnabled;\n      shouldRegenerateShaders = true;\n    }\n\n    if (shouldRegenerateShaders) {\n      regenerateShaders(this, frameState);\n    } else {\n      updateColor(this, frameState, false);\n      updateBackFaceCulling(this, frameState, false);\n      updateSilhouette(this, frameState, false);\n    }\n  }\n\n  if (justLoaded) {\n    // Called after modelMatrix update.\n    var model = this;\n    frameState.afterRender.push(function () {\n      model._ready = true;\n      model._readyPromise.resolve(model);\n    });\n    return;\n  }\n\n  // We don\'t check show at the top of the function since we\n  // want to be able to progressively load models when they are not shown,\n  // and then have them visible immediately when show is set to true.\n  if (show && !this._ignoreCommands) {\n    // PERFORMANCE_IDEA: This is terrible\n    var commandList = frameState.commandList;\n    var passes = frameState.passes;\n    var nodeCommands = this._nodeCommands;\n    var length = nodeCommands.length;\n    var i;\n    var nc;\n\n    var idl2D =\n      frameState.mapProjection.ellipsoid.maximumRadius * _Core_Math_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].PI */ .Z.PI;\n    var boundingVolume;\n\n    if (passes.render || (passes.pick && this.allowPicking)) {\n      for (i = 0; i < length; ++i) {\n        nc = nodeCommands[i];\n        if (nc.show) {\n          var command = nc.command;\n          if (silhouette) {\n            command = nc.silhouetteModelCommand;\n          } else if (translucent) {\n            command = nc.translucentCommand;\n          } else if (!backFaceCulling) {\n            command = nc.disableCullingCommand;\n          }\n          commandList.push(command);\n          boundingVolume = nc.command.boundingVolume;\n          if (\n            frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n            (boundingVolume.center.y + boundingVolume.radius > idl2D ||\n              boundingVolume.center.y - boundingVolume.radius < idl2D)\n          ) {\n            var command2D = nc.command2D;\n            if (silhouette) {\n              command2D = nc.silhouetteModelCommand2D;\n            } else if (translucent) {\n              command2D = nc.translucentCommand2D;\n            } else if (!backFaceCulling) {\n              command2D = nc.disableCullingCommand2D;\n            }\n            commandList.push(command2D);\n          }\n        }\n      }\n\n      if (silhouette && !passes.pick) {\n        // Render second silhouette pass\n        for (i = 0; i < length; ++i) {\n          nc = nodeCommands[i];\n          if (nc.show) {\n            commandList.push(nc.silhouetteColorCommand);\n            boundingVolume = nc.command.boundingVolume;\n            if (\n              frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n              (boundingVolume.center.y + boundingVolume.radius > idl2D ||\n                boundingVolume.center.y - boundingVolume.radius < idl2D)\n            ) {\n              commandList.push(nc.silhouetteColorCommand2D);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  var credit = this._credit;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(credit)) {\n    frameState.creditDisplay.addCredit(credit);\n  }\n\n  var resourceCredits = this._resourceCredits;\n  var creditCount = resourceCredits.length;\n  for (var c = 0; c < creditCount; c++) {\n    frameState.creditDisplay.addCredit(resourceCredits[c]);\n  }\n};\n\nfunction destroyIfNotCached(rendererResources, cachedRendererResources) {\n  if (rendererResources.programs !== cachedRendererResources.programs) {\n    destroy(rendererResources.programs);\n  }\n  if (\n    rendererResources.silhouettePrograms !==\n    cachedRendererResources.silhouettePrograms\n  ) {\n    destroy(rendererResources.silhouettePrograms);\n  }\n}\n\n// Run from update iff:\n// - everything is loaded\n// - clipping planes state change OR color state set\n// Run this from destructor after removing color state and clipping plane state\nfunction regenerateShaders(model, frameState) {\n  // In regards to _cachedRendererResources:\n  // Fair to assume that this is data that should just never get modified due to clipping planes or model color.\n  // So if clipping planes or model color active:\n  // - delink _rendererResources.*programs and create new dictionaries.\n  // - do NOT destroy any programs - might be used by copies of the model or by might be needed in the future if clipping planes/model color is deactivated\n\n  // If clipping planes and model color inactive:\n  // - destroy _rendererResources.*programs\n  // - relink _rendererResources.*programs to _cachedRendererResources\n\n  // In both cases, need to mark commands as dirty, re-run derived commands (elsewhere)\n\n  var rendererResources = model._rendererResources;\n  var cachedRendererResources = model._cachedRendererResources;\n  destroyIfNotCached(rendererResources, cachedRendererResources);\n\n  var programId;\n  if (\n    isClippingEnabled(model) ||\n    isColorShadingEnabled(model) ||\n    model._shouldRegenerateShaders\n  ) {\n    model._shouldRegenerateShaders = false;\n\n    rendererResources.programs = {};\n    rendererResources.silhouettePrograms = {};\n\n    var visitedPrograms = {};\n    var techniques = model._sourceTechniques;\n    var technique;\n\n    for (var techniqueId in techniques) {\n      if (techniques.hasOwnProperty(techniqueId)) {\n        technique = techniques[techniqueId];\n        programId = technique.program;\n        if (!visitedPrograms[programId]) {\n          visitedPrograms[programId] = true;\n          recreateProgram(\n            {\n              programId: programId,\n              techniqueId: techniqueId,\n            },\n            model,\n            frameState.context\n          );\n        }\n      }\n    }\n  } else {\n    rendererResources.programs = cachedRendererResources.programs;\n    rendererResources.silhouettePrograms =\n      cachedRendererResources.silhouettePrograms;\n  }\n\n  // Fix all the commands, marking them as dirty so everything that derives will re-derive\n  var rendererPrograms = rendererResources.programs;\n\n  var nodeCommands = model._nodeCommands;\n  var commandCount = nodeCommands.length;\n  for (var i = 0; i < commandCount; ++i) {\n    var nodeCommand = nodeCommands[i];\n    programId = nodeCommand.programId;\n\n    var renderProgram = rendererPrograms[programId];\n    nodeCommand.command.shaderProgram = renderProgram;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(nodeCommand.command2D)) {\n      nodeCommand.command2D.shaderProgram = renderProgram;\n    }\n  }\n\n  // Force update silhouette commands/shaders\n  updateColor(model, frameState, true);\n  updateBackFaceCulling(model, frameState, true);\n  updateSilhouette(model, frameState, true);\n}\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Model#destroy\n */\nModel.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * model = model && model.destroy();\n *\n * @see Model#isDestroyed\n */\nModel.prototype.destroy = function () {\n  // Vertex arrays are unique to this model, destroy here.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._precreatedAttributes)) {\n    destroy(this._rendererResources.vertexArrays);\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._removeUpdateHeightCallback)) {\n    this._removeUpdateHeightCallback();\n    this._removeUpdateHeightCallback = undefined;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._terrainProviderChangedCallback)) {\n    this._terrainProviderChangedCallback();\n    this._terrainProviderChangedCallback = undefined;\n  }\n\n  // Shaders modified for clipping and for color don\'t get cached, so destroy these manually\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(this._cachedRendererResources)) {\n    destroyIfNotCached(this._rendererResources, this._cachedRendererResources);\n  }\n\n  this._rendererResources = undefined;\n  this._cachedRendererResources =\n    this._cachedRendererResources && this._cachedRendererResources.release();\n  _DracoLoader_js__WEBPACK_IMPORTED_MODULE_55__/* ["default"].destroyCachedDataForModel */ .Z.destroyCachedDataForModel(this);\n\n  var pickIds = this._pickIds;\n  var length = pickIds.length;\n  for (var i = 0; i < length; ++i) {\n    pickIds[i].destroy();\n  }\n\n  releaseCachedGltf(this);\n  this._quantizedVertexShaders = undefined;\n\n  // Only destroy the ClippingPlaneCollection if this is the owner - if this model is part of a Cesium3DTileset,\n  // _clippingPlanes references a ClippingPlaneCollection that this model does not own.\n  var clippingPlaneCollection = this._clippingPlanes;\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_74__/* ["default"] */ .Z)(clippingPlaneCollection) &&\n    !clippingPlaneCollection.isDestroyed() &&\n    clippingPlaneCollection.owner === this\n  ) {\n    clippingPlaneCollection.destroy();\n  }\n  this._clippingPlanes = undefined;\n\n  this._specularEnvironmentMapAtlas =\n    this._specularEnvironmentMapAtlas &&\n    this._specularEnvironmentMapAtlas.destroy();\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z)(this);\n};\n\n// exposed for testing\nModel._getClippingFunction = _getClippingFunction_js__WEBPACK_IMPORTED_MODULE_57__/* ["default"] */ .Z;\nModel._modifyShaderForColor = modifyShaderForColor;\n/* harmony default export */ __webpack_exports__["Z"] = (Model);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16626\n')},39982:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72000);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50491);\n/* harmony import */ var _Core_IauOrientationAxes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(23628);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(72248);\n/* harmony import */ var _Core_Simon1994PlanetaryPositions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(83156);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(95555);\n/* harmony import */ var _EllipsoidPrimitive_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(64336);\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(69592);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Draws the Moon in 3D.\n * @alias Moon\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Boolean} [options.show=true] Determines whether the moon will be rendered.\n * @param {String} [options.textureUrl=buildModuleUrl(\'Assets/Textures/moonSmall.jpg\')] The moon texture.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.MOON] The moon ellipsoid.\n * @param {Boolean} [options.onlySunLighting=true] Use the sun as the only light source.\n *\n *\n * @example\n * scene.moon = new Cesium.Moon();\n *\n * @see Scene#moon\n */\nfunction Moon(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var url = options.textureUrl;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(url)) {\n    url = (0,_Core_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)("Assets/Textures/moonSmall.jpg");\n  }\n\n  /**\n   * Determines if the moon will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.show, true);\n\n  /**\n   * The moon texture.\n   * @type {String}\n   * @default buildModuleUrl(\'Assets/Textures/moonSmall.jpg\')\n   */\n  this.textureUrl = url;\n\n  this._ellipsoid = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.ellipsoid, _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].MOON */ .Z.MOON);\n\n  /**\n   * Use the sun as the only light source.\n   * @type {Boolean}\n   * @default true\n   */\n  this.onlySunLighting = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.onlySunLighting, true);\n\n  this._ellipsoidPrimitive = new _EllipsoidPrimitive_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    radii: this.ellipsoid.radii,\n    material: _Material_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].fromType */ .Z.fromType(_Material_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].ImageType */ .Z.ImageType),\n    depthTestEnabled: false,\n    _owner: this,\n  });\n  this._ellipsoidPrimitive.material.translucent = false;\n\n  this._axes = new _Core_IauOrientationAxes_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n}\n\nObject.defineProperties(Moon.prototype, {\n  /**\n   * Get the ellipsoid that defines the shape of the moon.\n   *\n   * @memberof Moon.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   *\n   * @default {@link Ellipsoid.MOON}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n\nvar icrfToFixed = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\nvar rotationScratch = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\nvar translationScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCommandList = [];\n\n/**\n * @private\n */\nMoon.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  var ellipsoidPrimitive = this._ellipsoidPrimitive;\n  ellipsoidPrimitive.material.uniforms.image = this.textureUrl;\n  ellipsoidPrimitive.onlySunLighting = this.onlySunLighting;\n\n  var date = frameState.time;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(_Core_Transforms_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].computeIcrfToFixedMatrix */ .Z.computeIcrfToFixedMatrix(date, icrfToFixed))) {\n    _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].computeTemeToPseudoFixedMatrix */ .Z.computeTemeToPseudoFixedMatrix(date, icrfToFixed);\n  }\n\n  var rotation = this._axes.evaluate(date, rotationScratch);\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].transpose */ .Z.transpose(rotation, rotation);\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiply */ .Z.multiply(icrfToFixed, rotation, rotation);\n\n  var translation = _Core_Simon1994PlanetaryPositions_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].computeMoonPositionInEarthInertialFrame */ .Z.computeMoonPositionInEarthInertialFrame(\n    date,\n    translationScratch\n  );\n  _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].multiplyByVector */ .Z.multiplyByVector(icrfToFixed, translation, translation);\n\n  _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n    rotation,\n    translation,\n    ellipsoidPrimitive.modelMatrix\n  );\n\n  var savedCommandList = frameState.commandList;\n  frameState.commandList = scratchCommandList;\n  scratchCommandList.length = 0;\n  ellipsoidPrimitive.update(frameState);\n  frameState.commandList = savedCommandList;\n  return scratchCommandList.length === 1 ? scratchCommandList[0] : undefined;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Moon#destroy\n */\nMoon.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * moon = moon && moon.destroy();\n *\n * @see Moon#isDestroyed\n */\nMoon.prototype.destroy = function () {\n  this._ellipsoidPrimitive =\n    this._ellipsoidPrimitive && this._ellipsoidPrimitive.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Moon);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39982\n')}}]);