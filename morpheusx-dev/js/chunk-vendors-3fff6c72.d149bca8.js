"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[8259],{63640:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_EllipsoidalOccluder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(61252);\n\n\n\n/**\n * A set of occluders that can be used to test quadtree tiles for occlusion.\n *\n * @alias QuadtreeOccluders\n * @constructor\n * @private\n *\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid that potentially occludes tiles.\n */\nfunction QuadtreeOccluders(options) {\n  this._ellipsoid = new _Core_EllipsoidalOccluder_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(options.ellipsoid, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].ZERO */ .Z.ZERO);\n}\n\nObject.defineProperties(QuadtreeOccluders.prototype, {\n  /**\n   * Gets the {@link EllipsoidalOccluder} that can be used to determine if a point is\n   * occluded by an {@link Ellipsoid}.\n   * @type {EllipsoidalOccluder}\n   * @memberof QuadtreeOccluders.prototype\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n});\n/* harmony default export */ __webpack_exports__["Z"] = (QuadtreeOccluders);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM2NDAuanMiLCJtYXBwaW5ncyI6Ijs7QUFBK0M7QUFDa0I7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQSx3QkFBd0IsNkVBQW1CLG9CQUFvQiw4RUFBZTtBQUM5RTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSwyQkFBMkI7QUFDMUMscUJBQXFCLGdCQUFnQjtBQUNyQyxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQztBQUNELHlEQUFlLGlCQUFpQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL1F1YWR0cmVlT2NjbHVkZXJzLmpzPzFlOTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IEVsbGlwc29pZGFsT2NjbHVkZXIgZnJvbSBcIi4uL0NvcmUvRWxsaXBzb2lkYWxPY2NsdWRlci5qc1wiO1xuXG4vKipcbiAqIEEgc2V0IG9mIG9jY2x1ZGVycyB0aGF0IGNhbiBiZSB1c2VkIHRvIHRlc3QgcXVhZHRyZWUgdGlsZXMgZm9yIG9jY2x1c2lvbi5cbiAqXG4gKiBAYWxpYXMgUXVhZHRyZWVPY2NsdWRlcnNcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge0VsbGlwc29pZH0gW29wdGlvbnMuZWxsaXBzb2lkPUVsbGlwc29pZC5XR1M4NF0gVGhlIGVsbGlwc29pZCB0aGF0IHBvdGVudGlhbGx5IG9jY2x1ZGVzIHRpbGVzLlxuICovXG5mdW5jdGlvbiBRdWFkdHJlZU9jY2x1ZGVycyhvcHRpb25zKSB7XG4gIHRoaXMuX2VsbGlwc29pZCA9IG5ldyBFbGxpcHNvaWRhbE9jY2x1ZGVyKG9wdGlvbnMuZWxsaXBzb2lkLCBDYXJ0ZXNpYW4zLlpFUk8pO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhRdWFkdHJlZU9jY2x1ZGVycy5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIEdldHMgdGhlIHtAbGluayBFbGxpcHNvaWRhbE9jY2x1ZGVyfSB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBpZiBhIHBvaW50IGlzXG4gICAqIG9jY2x1ZGVkIGJ5IGFuIHtAbGluayBFbGxpcHNvaWR9LlxuICAgKiBAdHlwZSB7RWxsaXBzb2lkYWxPY2NsdWRlcn1cbiAgICogQG1lbWJlcm9mIFF1YWR0cmVlT2NjbHVkZXJzLnByb3RvdHlwZVxuICAgKi9cbiAgZWxsaXBzb2lkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZWxsaXBzb2lkO1xuICAgIH0sXG4gIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IFF1YWR0cmVlT2NjbHVkZXJzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///63640\n')},9733:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51688);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14459);\n/* harmony import */ var _Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59081);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(72248);\n/* harmony import */ var _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91473);\n/* harmony import */ var _Core_OrthographicOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(35131);\n/* harmony import */ var _Core_Ray_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(68457);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(96190);\n/* harmony import */ var _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(54933);\n/* harmony import */ var _QuadtreeOccluders_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(63640);\n/* harmony import */ var _QuadtreeTile_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(19543);\n/* harmony import */ var _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(85828);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(89917);\n/* harmony import */ var _TileReplacementQueue_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(26561);\n/* harmony import */ var _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(37728);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Renders massive sets of data by utilizing level-of-detail and culling.  The globe surface is divided into\n * a quadtree of tiles with large, low-detail tiles at the root and small, high-detail tiles at the leaves.\n * The set of tiles to render is selected by projecting an estimate of the geometric error in a tile onto\n * the screen to estimate screen-space error, in pixels, which must be below a user-specified threshold.\n * The actual content of the tiles is arbitrary and is specified using a {@link QuadtreeTileProvider}.\n *\n * @alias QuadtreePrimitive\n * @constructor\n * @private\n *\n * @param {QuadtreeTileProvider} options.tileProvider The tile provider that loads, renders, and estimates\n *        the distance to individual tiles.\n * @param {Number} [options.maximumScreenSpaceError=2] The maximum screen-space error, in pixels, that is allowed.\n *        A higher maximum error will render fewer tiles and improve performance, while a lower\n *        value will improve visual quality.\n * @param {Number} [options.tileCacheSize=100] The maximum number of tiles that will be retained in the tile cache.\n *        Note that tiles will never be unloaded if they were used for rendering the last\n *        frame, so the actual number of resident tiles may be higher.  The value of\n *        this property will not affect visual quality.\n */\nfunction QuadtreePrimitive(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(options) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(options.tileProvider)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("options.tileProvider is required.");\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(options.tileProvider.quadtree)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "A QuadtreeTileProvider can only be used with a single QuadtreePrimitive"\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  this._tileProvider = options.tileProvider;\n  this._tileProvider.quadtree = this;\n\n  this._debug = {\n    enableDebugOutput: false,\n\n    maxDepth: 0,\n    maxDepthVisited: 0,\n    tilesVisited: 0,\n    tilesCulled: 0,\n    tilesRendered: 0,\n    tilesWaitingForChildren: 0,\n\n    lastMaxDepth: -1,\n    lastMaxDepthVisited: -1,\n    lastTilesVisited: -1,\n    lastTilesCulled: -1,\n    lastTilesRendered: -1,\n    lastTilesWaitingForChildren: -1,\n\n    suspendLodUpdate: false,\n  };\n\n  var tilingScheme = this._tileProvider.tilingScheme;\n  var ellipsoid = tilingScheme.ellipsoid;\n\n  this._tilesToRender = [];\n  this._tileLoadQueueHigh = []; // high priority tiles are preventing refinement\n  this._tileLoadQueueMedium = []; // medium priority tiles are being rendered\n  this._tileLoadQueueLow = []; // low priority tiles were refined past or are non-visible parts of quads.\n  this._tileReplacementQueue = new _TileReplacementQueue_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\n  this._levelZeroTiles = undefined;\n  this._loadQueueTimeSlice = 5.0;\n  this._tilesInvalidated = false;\n\n  this._addHeightCallbacks = [];\n  this._removeHeightCallbacks = [];\n\n  this._tileToUpdateHeights = [];\n  this._lastTileIndex = 0;\n  this._updateHeightsTimeSlice = 2.0;\n\n  // If a culled tile contains _cameraPositionCartographic or _cameraReferenceFrameOriginCartographic, it will be marked\n  // TileSelectionResult.CULLED_BUT_NEEDED and added to the list of tiles to update heights,\n  // even though it is not rendered.\n  // These are updated each frame in `selectTilesForRendering`.\n  this._cameraPositionCartographic = undefined;\n  this._cameraReferenceFrameOriginCartographic = undefined;\n\n  /**\n   * Gets or sets the maximum screen-space error, in pixels, that is allowed.\n   * A higher maximum error will render fewer tiles and improve performance, while a lower\n   * value will improve visual quality.\n   * @type {Number}\n   * @default 2\n   */\n  this.maximumScreenSpaceError = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    options.maximumScreenSpaceError,\n    2\n  );\n\n  /**\n   * Gets or sets the maximum number of tiles that will be retained in the tile cache.\n   * Note that tiles will never be unloaded if they were used for rendering the last\n   * frame, so the actual number of resident tiles may be higher.  The value of\n   * this property will not affect visual quality.\n   * @type {Number}\n   * @default 100\n   */\n  this.tileCacheSize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options.tileCacheSize, 100);\n\n  /**\n   * Gets or sets the number of loading descendant tiles that is considered "too many".\n   * If a tile has too many loading descendants, that tile will be loaded and rendered before any of\n   * its descendants are loaded and rendered. This means more feedback for the user that something\n   * is happening at the cost of a longer overall load time. Setting this to 0 will cause each\n   * tile level to be loaded successively, significantly increasing load time. Setting it to a large\n   * number (e.g. 1000) will minimize the number of tiles that are loaded but tend to make\n   * detail appear all at once after a long wait.\n   * @type {Number}\n   * @default 20\n   */\n  this.loadingDescendantLimit = 20;\n\n  /**\n   * Gets or sets a value indicating whether the ancestors of rendered tiles should be preloaded.\n   * Setting this to true optimizes the zoom-out experience and provides more detail in\n   * newly-exposed areas when panning. The down side is that it requires loading more tiles.\n   * @type {Boolean}\n   * @default true\n   */\n  this.preloadAncestors = true;\n\n  /**\n   * Gets or sets a value indicating whether the siblings of rendered tiles should be preloaded.\n   * Setting this to true causes tiles with the same parent as a rendered tile to be loaded, even\n   * if they are culled. Setting this to true may provide a better panning experience at the\n   * cost of loading more tiles.\n   * @type {Boolean}\n   * @default false\n   */\n  this.preloadSiblings = false;\n\n  this._occluders = new _QuadtreeOccluders_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z({\n    ellipsoid: ellipsoid,\n  });\n\n  this._tileLoadProgressEvent = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n  this._lastTileLoadQueueLength = 0;\n\n  this._lastSelectionFrameNumber = undefined;\n}\n\nObject.defineProperties(QuadtreePrimitive.prototype, {\n  /**\n   * Gets the provider of {@link QuadtreeTile} instances for this quadtree.\n   * @type {QuadtreeTile}\n   * @memberof QuadtreePrimitive.prototype\n   */\n  tileProvider: {\n    get: function () {\n      return this._tileProvider;\n    },\n  },\n  /**\n   * Gets an event that\'s raised when the length of the tile load queue has changed since the last render frame.  When the load queue is empty,\n   * all terrain and imagery for the current view have been loaded.  The event passes the new length of the tile load queue.\n   *\n   * @memberof QuadtreePrimitive.prototype\n   * @type {Event}\n   */\n  tileLoadProgressEvent: {\n    get: function () {\n      return this._tileLoadProgressEvent;\n    },\n  },\n\n  occluders: {\n    get: function () {\n      return this._occluders;\n    },\n  },\n});\n\n/**\n * Invalidates and frees all the tiles in the quadtree.  The tiles must be reloaded\n * before they can be displayed.\n *\n * @memberof QuadtreePrimitive\n */\nQuadtreePrimitive.prototype.invalidateAllTiles = function () {\n  this._tilesInvalidated = true;\n};\n\nfunction invalidateAllTiles(primitive) {\n  // Clear the replacement queue\n  var replacementQueue = primitive._tileReplacementQueue;\n  replacementQueue.head = undefined;\n  replacementQueue.tail = undefined;\n  replacementQueue.count = 0;\n\n  clearTileLoadQueue(primitive);\n\n  // Free and recreate the level zero tiles.\n  var levelZeroTiles = primitive._levelZeroTiles;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(levelZeroTiles)) {\n    for (var i = 0; i < levelZeroTiles.length; ++i) {\n      var tile = levelZeroTiles[i];\n      var customData = tile.customData;\n      var customDataLength = customData.length;\n\n      for (var j = 0; j < customDataLength; ++j) {\n        var data = customData[j];\n        data.level = 0;\n        primitive._addHeightCallbacks.push(data);\n      }\n\n      levelZeroTiles[i].freeResources();\n    }\n  }\n\n  primitive._levelZeroTiles = undefined;\n\n  primitive._tileProvider.cancelReprojections();\n}\n\n/**\n * Invokes a specified function for each {@link QuadtreeTile} that is partially\n * or completely loaded.\n *\n * @param {Function} tileFunction The function to invoke for each loaded tile.  The\n *        function is passed a reference to the tile as its only parameter.\n */\nQuadtreePrimitive.prototype.forEachLoadedTile = function (tileFunction) {\n  var tile = this._tileReplacementQueue.head;\n  while ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tile)) {\n    if (tile.state !== _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].START */ .Z.START) {\n      tileFunction(tile);\n    }\n    tile = tile.replacementNext;\n  }\n};\n\n/**\n * Invokes a specified function for each {@link QuadtreeTile} that was rendered\n * in the most recent frame.\n *\n * @param {Function} tileFunction The function to invoke for each rendered tile.  The\n *        function is passed a reference to the tile as its only parameter.\n */\nQuadtreePrimitive.prototype.forEachRenderedTile = function (tileFunction) {\n  var tilesRendered = this._tilesToRender;\n  for (var i = 0, len = tilesRendered.length; i < len; ++i) {\n    tileFunction(tilesRendered[i]);\n  }\n};\n\n/**\n * Calls the callback when a new tile is rendered that contains the given cartographic. The only parameter\n * is the cartesian position on the tile.\n *\n * @param {Cartographic} cartographic The cartographic position.\n * @param {Function} callback The function to be called when a new tile is loaded containing cartographic.\n * @returns {Function} The function to remove this callback from the quadtree.\n */\nQuadtreePrimitive.prototype.updateHeight = function (cartographic, callback) {\n  var primitive = this;\n  var object = {\n    positionOnEllipsoidSurface: undefined,\n    positionCartographic: cartographic,\n    level: -1,\n    callback: callback,\n  };\n\n  object.removeFunc = function () {\n    var addedCallbacks = primitive._addHeightCallbacks;\n    var length = addedCallbacks.length;\n    for (var i = 0; i < length; ++i) {\n      if (addedCallbacks[i] === object) {\n        addedCallbacks.splice(i, 1);\n        break;\n      }\n    }\n    primitive._removeHeightCallbacks.push(object);\n  };\n\n  primitive._addHeightCallbacks.push(object);\n  return object.removeFunc;\n};\n\n/**\n * Updates the tile provider imagery and continues to process the tile load queue.\n * @private\n */\nQuadtreePrimitive.prototype.update = function (frameState) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(this._tileProvider.update)) {\n    this._tileProvider.update(frameState);\n  }\n};\n\nfunction clearTileLoadQueue(primitive) {\n  var debug = primitive._debug;\n  debug.maxDepth = 0;\n  debug.maxDepthVisited = 0;\n  debug.tilesVisited = 0;\n  debug.tilesCulled = 0;\n  debug.tilesRendered = 0;\n  debug.tilesWaitingForChildren = 0;\n\n  primitive._tileLoadQueueHigh.length = 0;\n  primitive._tileLoadQueueMedium.length = 0;\n  primitive._tileLoadQueueLow.length = 0;\n}\n\n/**\n * Initializes values for a new render frame and prepare the tile load queue.\n * @private\n */\nQuadtreePrimitive.prototype.beginFrame = function (frameState) {\n  var passes = frameState.passes;\n  if (!passes.render) {\n    return;\n  }\n\n  if (this._tilesInvalidated) {\n    invalidateAllTiles(this);\n    this._tilesInvalidated = false;\n  }\n\n  // Gets commands for any texture re-projections\n  this._tileProvider.initialize(frameState);\n\n  clearTileLoadQueue(this);\n\n  if (this._debug.suspendLodUpdate) {\n    return;\n  }\n\n  this._tileReplacementQueue.markStartOfRenderFrame();\n};\n\n/**\n * Selects new tiles to load based on the frame state and creates render commands.\n * @private\n */\nQuadtreePrimitive.prototype.render = function (frameState) {\n  var passes = frameState.passes;\n  var tileProvider = this._tileProvider;\n\n  if (passes.render) {\n    tileProvider.beginUpdate(frameState);\n\n    selectTilesForRendering(this, frameState);\n    createRenderCommandsForSelectedTiles(this, frameState);\n\n    tileProvider.endUpdate(frameState);\n  }\n\n  if (passes.pick && this._tilesToRender.length > 0) {\n    tileProvider.updateForPick(frameState);\n  }\n};\n\n/**\n * Checks if the load queue length has changed since the last time we raised a queue change event - if so, raises\n * a new change event at the end of the render cycle.\n * @private\n */\nfunction updateTileLoadProgress(primitive, frameState) {\n  var currentLoadQueueLength =\n    primitive._tileLoadQueueHigh.length +\n    primitive._tileLoadQueueMedium.length +\n    primitive._tileLoadQueueLow.length;\n\n  if (\n    currentLoadQueueLength !== primitive._lastTileLoadQueueLength ||\n    primitive._tilesInvalidated\n  ) {\n    frameState.afterRender.push(\n      _Core_Event_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].prototype.raiseEvent.bind */ .Z.prototype.raiseEvent.bind(\n        primitive._tileLoadProgressEvent,\n        currentLoadQueueLength\n      )\n    );\n    primitive._lastTileLoadQueueLength = currentLoadQueueLength;\n  }\n\n  var debug = primitive._debug;\n  if (debug.enableDebugOutput && !debug.suspendLodUpdate) {\n    debug.maxDepth = primitive._tilesToRender.reduce(function (max, tile) {\n      return Math.max(max, tile.level);\n    }, -1);\n    debug.tilesRendered = primitive._tilesToRender.length;\n\n    if (\n      debug.tilesVisited !== debug.lastTilesVisited ||\n      debug.tilesRendered !== debug.lastTilesRendered ||\n      debug.tilesCulled !== debug.lastTilesCulled ||\n      debug.maxDepth !== debug.lastMaxDepth ||\n      debug.tilesWaitingForChildren !== debug.lastTilesWaitingForChildren ||\n      debug.maxDepthVisited !== debug.lastMaxDepthVisited\n    ) {\n      console.log(\n        "Visited " +\n          debug.tilesVisited +\n          ", Rendered: " +\n          debug.tilesRendered +\n          ", Culled: " +\n          debug.tilesCulled +\n          ", Max Depth Rendered: " +\n          debug.maxDepth +\n          ", Max Depth Visited: " +\n          debug.maxDepthVisited +\n          ", Waiting for children: " +\n          debug.tilesWaitingForChildren\n      );\n\n      debug.lastTilesVisited = debug.tilesVisited;\n      debug.lastTilesRendered = debug.tilesRendered;\n      debug.lastTilesCulled = debug.tilesCulled;\n      debug.lastMaxDepth = debug.maxDepth;\n      debug.lastTilesWaitingForChildren = debug.tilesWaitingForChildren;\n      debug.lastMaxDepthVisited = debug.maxDepthVisited;\n    }\n  }\n}\n\n/**\n * Updates terrain heights.\n * @private\n */\nQuadtreePrimitive.prototype.endFrame = function (frameState) {\n  var passes = frameState.passes;\n  if (!passes.render || frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].MORPHING */ .Z.MORPHING) {\n    // Only process the load queue for a single pass.\n    // Don\'t process the load queue or update heights during the morph flights.\n    return;\n  }\n\n  // Load/create resources for terrain and imagery. Prepare texture re-projections for the next frame.\n  processTileLoadQueue(this, frameState);\n  updateHeights(this, frameState);\n  updateTileLoadProgress(this, frameState);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof QuadtreePrimitive\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see QuadtreePrimitive#destroy\n */\nQuadtreePrimitive.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof QuadtreePrimitive\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * primitive = primitive && primitive.destroy();\n *\n * @see QuadtreePrimitive#isDestroyed\n */\nQuadtreePrimitive.prototype.destroy = function () {\n  this._tileProvider = this._tileProvider && this._tileProvider.destroy();\n};\n\nvar comparisonPoint;\nvar centerScratch = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nfunction compareDistanceToPoint(a, b) {\n  var center = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].center */ .Z.center(a.rectangle, centerScratch);\n  var alon = center.longitude - comparisonPoint.longitude;\n  var alat = center.latitude - comparisonPoint.latitude;\n\n  center = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].center */ .Z.center(b.rectangle, centerScratch);\n  var blon = center.longitude - comparisonPoint.longitude;\n  var blat = center.latitude - comparisonPoint.latitude;\n\n  return alon * alon + alat * alat - (blon * blon + blat * blat);\n}\n\nvar cameraOriginScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar rootTraversalDetails = [];\n\nfunction selectTilesForRendering(primitive, frameState) {\n  var debug = primitive._debug;\n  if (debug.suspendLodUpdate) {\n    return;\n  }\n\n  // Clear the render list.\n  var tilesToRender = primitive._tilesToRender;\n  tilesToRender.length = 0;\n\n  // We can\'t render anything before the level zero tiles exist.\n  var i;\n  var tileProvider = primitive._tileProvider;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(primitive._levelZeroTiles)) {\n    if (tileProvider.ready) {\n      var tilingScheme = tileProvider.tilingScheme;\n      primitive._levelZeroTiles = _QuadtreeTile_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].createLevelZeroTiles */ .Z.createLevelZeroTiles(\n        tilingScheme\n      );\n      var numberOfRootTiles = primitive._levelZeroTiles.length;\n      if (rootTraversalDetails.length < numberOfRootTiles) {\n        rootTraversalDetails = new Array(numberOfRootTiles);\n        for (i = 0; i < numberOfRootTiles; ++i) {\n          if (rootTraversalDetails[i] === undefined) {\n            rootTraversalDetails[i] = new TraversalDetails();\n          }\n        }\n      }\n    } else {\n      // Nothing to do until the provider is ready.\n      return;\n    }\n  }\n\n  primitive._occluders.ellipsoid.cameraPosition = frameState.camera.positionWC;\n\n  var tile;\n  var levelZeroTiles = primitive._levelZeroTiles;\n  var occluders = levelZeroTiles.length > 1 ? primitive._occluders : undefined;\n\n  // Sort the level zero tiles by the distance from the center to the camera.\n  // The level zero tiles aren\'t necessarily a nice neat quad, so we can\'t use the\n  // quadtree ordering we use elsewhere in the tree\n  comparisonPoint = frameState.camera.positionCartographic;\n  levelZeroTiles.sort(compareDistanceToPoint);\n\n  var customDataAdded = primitive._addHeightCallbacks;\n  var customDataRemoved = primitive._removeHeightCallbacks;\n  var frameNumber = frameState.frameNumber;\n\n  var len;\n  if (customDataAdded.length > 0 || customDataRemoved.length > 0) {\n    for (i = 0, len = levelZeroTiles.length; i < len; ++i) {\n      tile = levelZeroTiles[i];\n      tile._updateCustomData(frameNumber, customDataAdded, customDataRemoved);\n    }\n\n    customDataAdded.length = 0;\n    customDataRemoved.length = 0;\n  }\n\n  var camera = frameState.camera;\n\n  primitive._cameraPositionCartographic = camera.positionCartographic;\n  var cameraFrameOrigin = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].getTranslation */ .Z.getTranslation(\n    camera.transform,\n    cameraOriginScratch\n  );\n  primitive._cameraReferenceFrameOriginCartographic = primitive.tileProvider.tilingScheme.ellipsoid.cartesianToCartographic(\n    cameraFrameOrigin,\n    primitive._cameraReferenceFrameOriginCartographic\n  );\n\n  // Traverse in depth-first, near-to-far order.\n  for (i = 0, len = levelZeroTiles.length; i < len; ++i) {\n    tile = levelZeroTiles[i];\n    primitive._tileReplacementQueue.markTileRendered(tile);\n    if (!tile.renderable) {\n      queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);\n      ++debug.tilesWaitingForChildren;\n    } else {\n      visitIfVisible(\n        primitive,\n        tile,\n        tileProvider,\n        frameState,\n        occluders,\n        false,\n        rootTraversalDetails[i]\n      );\n    }\n  }\n\n  primitive._lastSelectionFrameNumber = frameNumber;\n}\n\nfunction queueTileLoad(primitive, queue, tile, frameState) {\n  if (!tile.needsLoading) {\n    return;\n  }\n\n  if (primitive.tileProvider.computeTileLoadPriority !== undefined) {\n    tile._loadPriority = primitive.tileProvider.computeTileLoadPriority(\n      tile,\n      frameState\n    );\n  }\n  queue.push(tile);\n}\n\n/**\n * Tracks details of traversing a tile while selecting tiles for rendering.\n * @alias TraversalDetails\n * @constructor\n * @private\n */\nfunction TraversalDetails() {\n  /**\n   * True if all selected (i.e. not culled or refined) tiles in this tile\'s subtree\n   * are renderable. If the subtree is renderable, we\'ll render it; no drama.\n   */\n  this.allAreRenderable = true;\n\n  /**\n   * True if any tiles in this tile\'s subtree were rendered last frame. If any\n   * were, we must render the subtree rather than this tile, because rendering\n   * this tile would cause detail to vanish that was visible last frame, and\n   * that\'s no good.\n   */\n  this.anyWereRenderedLastFrame = false;\n\n  /**\n   * Counts the number of selected tiles in this tile\'s subtree that are\n   * not yet ready to be rendered because they need more loading. Note that\n   * this value will _not_ necessarily be zero when\n   * {@link TraversalDetails#allAreRenderable} is true, for subtle reasons.\n   * When {@link TraversalDetails#allAreRenderable} and\n   * {@link TraversalDetails#anyWereRenderedLastFrame} are both false, we\n   * will render this tile instead of any tiles in its subtree and\n   * the `allAreRenderable` value for this tile will reflect only whether _this_\n   * tile is renderable. The `notYetRenderableCount` value, however, will still\n   * reflect the total number of tiles that we are waiting on, including the\n   * ones that we\'re not rendering. `notYetRenderableCount` is only reset\n   * when a subtree is removed from the render queue because the\n   * `notYetRenderableCount` exceeds the\n   * {@link QuadtreePrimitive#loadingDescendantLimit}.\n   */\n  this.notYetRenderableCount = 0;\n}\n\nfunction TraversalQuadDetails() {\n  this.southwest = new TraversalDetails();\n  this.southeast = new TraversalDetails();\n  this.northwest = new TraversalDetails();\n  this.northeast = new TraversalDetails();\n}\n\nTraversalQuadDetails.prototype.combine = function (result) {\n  var southwest = this.southwest;\n  var southeast = this.southeast;\n  var northwest = this.northwest;\n  var northeast = this.northeast;\n\n  result.allAreRenderable =\n    southwest.allAreRenderable &&\n    southeast.allAreRenderable &&\n    northwest.allAreRenderable &&\n    northeast.allAreRenderable;\n  result.anyWereRenderedLastFrame =\n    southwest.anyWereRenderedLastFrame ||\n    southeast.anyWereRenderedLastFrame ||\n    northwest.anyWereRenderedLastFrame ||\n    northeast.anyWereRenderedLastFrame;\n  result.notYetRenderableCount =\n    southwest.notYetRenderableCount +\n    southeast.notYetRenderableCount +\n    northwest.notYetRenderableCount +\n    northeast.notYetRenderableCount;\n};\n\nvar traversalQuadsByLevel = new Array(31); // level 30 tiles are ~2cm wide at the equator, should be good enough.\nfor (var i = 0; i < traversalQuadsByLevel.length; ++i) {\n  traversalQuadsByLevel[i] = new TraversalQuadDetails();\n}\n\n/**\n * Visits a tile for possible rendering. When we call this function with a tile:\n *\n *    * the tile has been determined to be visible (possibly based on a bounding volume that is not very tight-fitting)\n *    * its parent tile does _not_ meet the SSE (unless ancestorMeetsSse=true, see comments below)\n *    * the tile may or may not be renderable\n *\n * @private\n *\n * @param {Primitive} primitive The QuadtreePrimitive.\n * @param {FrameState} frameState The frame state.\n * @param {QuadtreeTile} tile The tile to visit\n * @param {Boolean} ancestorMeetsSse True if a tile higher in the tile tree already met the SSE and we\'re refining further only\n *                  to maintain detail while that higher tile loads.\n * @param {TraversalDetails} traveralDetails On return, populated with details of how the traversal of this tile went.\n */\nfunction visitTile(\n  primitive,\n  frameState,\n  tile,\n  ancestorMeetsSse,\n  traversalDetails\n) {\n  var debug = primitive._debug;\n\n  ++debug.tilesVisited;\n\n  primitive._tileReplacementQueue.markTileRendered(tile);\n  tile._updateCustomData(frameState.frameNumber);\n\n  if (tile.level > debug.maxDepthVisited) {\n    debug.maxDepthVisited = tile.level;\n  }\n\n  var meetsSse =\n    screenSpaceError(primitive, frameState, tile) <\n    primitive.maximumScreenSpaceError;\n\n  var southwestChild = tile.southwestChild;\n  var southeastChild = tile.southeastChild;\n  var northwestChild = tile.northwestChild;\n  var northeastChild = tile.northeastChild;\n\n  var lastFrame = primitive._lastSelectionFrameNumber;\n  var lastFrameSelectionResult =\n    tile._lastSelectionResultFrame === lastFrame\n      ? tile._lastSelectionResult\n      : _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].NONE */ .Z.NONE;\n\n  var tileProvider = primitive.tileProvider;\n\n  if (meetsSse || ancestorMeetsSse) {\n    // This tile (or an ancestor) is the one we want to render this frame, but we\'ll do different things depending\n    // on the state of this tile and on what we did _last_ frame.\n\n    // We can render it if _any_ of the following are true:\n    // 1. We rendered it (or kicked it) last frame.\n    // 2. This tile was culled last frame, or it wasn\'t even visited because an ancestor was culled.\n    // 3. The tile is completely done loading.\n    // 4. a) Terrain is ready, and\n    //    b) All necessary imagery is ready. Necessary imagery is imagery that was rendered with this tile\n    //       or any descendants last frame. Such imagery is required because rendering this tile without\n    //       it would cause detail to disappear.\n    //\n    // Determining condition 4 is more expensive, so we check the others first.\n    //\n    // Note that even if we decide to render a tile here, it may later get "kicked" in favor of an ancestor.\n\n    var oneRenderedLastFrame =\n      _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].originalResult */ .Z.originalResult(lastFrameSelectionResult) ===\n      _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n    var twoCulledOrNotVisited =\n      _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].originalResult */ .Z.originalResult(lastFrameSelectionResult) ===\n        _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CULLED */ .Z.CULLED ||\n      lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].NONE */ .Z.NONE;\n    var threeCompletelyLoaded = tile.state === _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].DONE */ .Z.DONE;\n\n    var renderable =\n      oneRenderedLastFrame || twoCulledOrNotVisited || threeCompletelyLoaded;\n\n    if (!renderable) {\n      // Check the more expensive condition 4 above. This requires details of the thing\n      // we\'re rendering (e.g. the globe surface), so delegate it to the tile provider.\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tileProvider.canRenderWithoutLosingDetail)) {\n        renderable = tileProvider.canRenderWithoutLosingDetail(tile);\n      }\n    }\n\n    if (renderable) {\n      // Only load this tile if it (not just an ancestor) meets the SSE.\n      if (meetsSse) {\n        queueTileLoad(\n          primitive,\n          primitive._tileLoadQueueMedium,\n          tile,\n          frameState\n        );\n      }\n      addTileToRenderList(primitive, tile);\n\n      traversalDetails.allAreRenderable = tile.renderable;\n      traversalDetails.anyWereRenderedLastFrame =\n        lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n      traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n\n      tile._lastSelectionResultFrame = frameState.frameNumber;\n      tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n\n      if (!traversalDetails.anyWereRenderedLastFrame) {\n        // Tile is newly-rendered this frame, so update its heights.\n        primitive._tileToUpdateHeights.push(tile);\n      }\n\n      return;\n    }\n\n    // Otherwise, we can\'t render this tile (or its fill) because doing so would cause detail to disappear\n    // that was visible last frame. Instead, keep rendering any still-visible descendants that were rendered\n    // last frame and render fills for newly-visible descendants. E.g. if we were rendering level 15 last\n    // frame but this frame we want level 14 and the closest renderable level <= 14 is 0, rendering level\n    // zero would be pretty jarring so instead we keep rendering level 15 even though its SSE is better\n    // than required. So fall through to continue traversal...\n    ancestorMeetsSse = true;\n\n    // Load this blocker tile with high priority, but only if this tile (not just an ancestor) meets the SSE.\n    if (meetsSse) {\n      queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);\n    }\n  }\n\n  if (tileProvider.canRefine(tile)) {\n    var allAreUpsampled =\n      southwestChild.upsampledFromParent &&\n      southeastChild.upsampledFromParent &&\n      northwestChild.upsampledFromParent &&\n      northeastChild.upsampledFromParent;\n\n    if (allAreUpsampled) {\n      // No point in rendering the children because they\'re all upsampled.  Render this tile instead.\n      addTileToRenderList(primitive, tile);\n\n      // Rendered tile that\'s not waiting on children loads with medium priority.\n      queueTileLoad(\n        primitive,\n        primitive._tileLoadQueueMedium,\n        tile,\n        frameState\n      );\n\n      // Make sure we don\'t unload the children and forget they\'re upsampled.\n      primitive._tileReplacementQueue.markTileRendered(southwestChild);\n      primitive._tileReplacementQueue.markTileRendered(southeastChild);\n      primitive._tileReplacementQueue.markTileRendered(northwestChild);\n      primitive._tileReplacementQueue.markTileRendered(northeastChild);\n\n      traversalDetails.allAreRenderable = tile.renderable;\n      traversalDetails.anyWereRenderedLastFrame =\n        lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n      traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n\n      tile._lastSelectionResultFrame = frameState.frameNumber;\n      tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n\n      if (!traversalDetails.anyWereRenderedLastFrame) {\n        // Tile is newly-rendered this frame, so update its heights.\n        primitive._tileToUpdateHeights.push(tile);\n      }\n\n      return;\n    }\n\n    // SSE is not good enough, so refine.\n    tile._lastSelectionResultFrame = frameState.frameNumber;\n    tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].REFINED */ .Z.REFINED;\n\n    var firstRenderedDescendantIndex = primitive._tilesToRender.length;\n    var loadIndexLow = primitive._tileLoadQueueLow.length;\n    var loadIndexMedium = primitive._tileLoadQueueMedium.length;\n    var loadIndexHigh = primitive._tileLoadQueueHigh.length;\n    var tilesToUpdateHeightsIndex = primitive._tileToUpdateHeights.length;\n\n    // No need to add the children to the load queue because they\'ll be added (if necessary) when they\'re visited.\n    visitVisibleChildrenNearToFar(\n      primitive,\n      southwestChild,\n      southeastChild,\n      northwestChild,\n      northeastChild,\n      frameState,\n      ancestorMeetsSse,\n      traversalDetails\n    );\n\n    // If no descendant tiles were added to the render list by the function above, it means they were all\n    // culled even though this tile was deemed visible. That\'s pretty common.\n\n    if (firstRenderedDescendantIndex !== primitive._tilesToRender.length) {\n      // At least one descendant tile was added to the render list.\n      // The traversalDetails tell us what happened while visiting the children.\n\n      var allAreRenderable = traversalDetails.allAreRenderable;\n      var anyWereRenderedLastFrame = traversalDetails.anyWereRenderedLastFrame;\n      var notYetRenderableCount = traversalDetails.notYetRenderableCount;\n      var queuedForLoad = false;\n\n      if (!allAreRenderable && !anyWereRenderedLastFrame) {\n        // Some of our descendants aren\'t ready to render yet, and none were rendered last frame,\n        // so kick them all out of the render list and render this tile instead. Continue to load them though!\n\n        // Mark the rendered descendants and their ancestors - up to this tile - as kicked.\n        var renderList = primitive._tilesToRender;\n        for (var i = firstRenderedDescendantIndex; i < renderList.length; ++i) {\n          var workTile = renderList[i];\n          while (\n            workTile !== undefined &&\n            workTile._lastSelectionResult !== _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].KICKED */ .Z.KICKED &&\n            workTile !== tile\n          ) {\n            workTile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].kick */ .Z.kick(\n              workTile._lastSelectionResult\n            );\n            workTile = workTile.parent;\n          }\n        }\n\n        // Remove all descendants from the render list and add this tile.\n        primitive._tilesToRender.length = firstRenderedDescendantIndex;\n        primitive._tileToUpdateHeights.length = tilesToUpdateHeightsIndex;\n        addTileToRenderList(primitive, tile);\n\n        tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n\n        // If we\'re waiting on heaps of descendants, the above will take too long. So in that case,\n        // load this tile INSTEAD of loading any of the descendants, and tell the up-level we\'re only waiting\n        // on this tile. Keep doing this until we actually manage to render this tile.\n        var wasRenderedLastFrame =\n          lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n        if (\n          !wasRenderedLastFrame &&\n          notYetRenderableCount > primitive.loadingDescendantLimit\n        ) {\n          // Remove all descendants from the load queues.\n          primitive._tileLoadQueueLow.length = loadIndexLow;\n          primitive._tileLoadQueueMedium.length = loadIndexMedium;\n          primitive._tileLoadQueueHigh.length = loadIndexHigh;\n          queueTileLoad(\n            primitive,\n            primitive._tileLoadQueueMedium,\n            tile,\n            frameState\n          );\n          traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n          queuedForLoad = true;\n        }\n\n        traversalDetails.allAreRenderable = tile.renderable;\n        traversalDetails.anyWereRenderedLastFrame = wasRenderedLastFrame;\n\n        if (!wasRenderedLastFrame) {\n          // Tile is newly-rendered this frame, so update its heights.\n          primitive._tileToUpdateHeights.push(tile);\n        }\n\n        ++debug.tilesWaitingForChildren;\n      }\n\n      if (primitive.preloadAncestors && !queuedForLoad) {\n        queueTileLoad(primitive, primitive._tileLoadQueueLow, tile, frameState);\n      }\n    }\n\n    return;\n  }\n\n  tile._lastSelectionResultFrame = frameState.frameNumber;\n  tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n\n  // We\'d like to refine but can\'t because we have no availability data for this tile\'s children,\n  // so we have no idea if refinining would involve a load or an upsample. We\'ll have to finish\n  // loading this tile first in order to find that out, so load this refinement blocker with\n  // high priority.\n  addTileToRenderList(primitive, tile);\n  queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);\n\n  traversalDetails.allAreRenderable = tile.renderable;\n  traversalDetails.anyWereRenderedLastFrame =\n    lastFrameSelectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED;\n  traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n}\n\nfunction visitVisibleChildrenNearToFar(\n  primitive,\n  southwest,\n  southeast,\n  northwest,\n  northeast,\n  frameState,\n  ancestorMeetsSse,\n  traversalDetails\n) {\n  var cameraPosition = frameState.camera.positionCartographic;\n  var tileProvider = primitive._tileProvider;\n  var occluders = primitive._occluders;\n\n  var quadDetails = traversalQuadsByLevel[southwest.level];\n  var southwestDetails = quadDetails.southwest;\n  var southeastDetails = quadDetails.southeast;\n  var northwestDetails = quadDetails.northwest;\n  var northeastDetails = quadDetails.northeast;\n\n  if (cameraPosition.longitude < southwest.rectangle.east) {\n    if (cameraPosition.latitude < southwest.rectangle.north) {\n      // Camera in southwest quadrant\n      visitIfVisible(\n        primitive,\n        southwest,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        southwestDetails\n      );\n      visitIfVisible(\n        primitive,\n        southeast,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        southeastDetails\n      );\n      visitIfVisible(\n        primitive,\n        northwest,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        northwestDetails\n      );\n      visitIfVisible(\n        primitive,\n        northeast,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        northeastDetails\n      );\n    } else {\n      // Camera in northwest quadrant\n      visitIfVisible(\n        primitive,\n        northwest,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        northwestDetails\n      );\n      visitIfVisible(\n        primitive,\n        southwest,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        southwestDetails\n      );\n      visitIfVisible(\n        primitive,\n        northeast,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        northeastDetails\n      );\n      visitIfVisible(\n        primitive,\n        southeast,\n        tileProvider,\n        frameState,\n        occluders,\n        ancestorMeetsSse,\n        southeastDetails\n      );\n    }\n  } else if (cameraPosition.latitude < southwest.rectangle.north) {\n    // Camera southeast quadrant\n    visitIfVisible(\n      primitive,\n      southeast,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      southeastDetails\n    );\n    visitIfVisible(\n      primitive,\n      southwest,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      southwestDetails\n    );\n    visitIfVisible(\n      primitive,\n      northeast,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      northeastDetails\n    );\n    visitIfVisible(\n      primitive,\n      northwest,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      northwestDetails\n    );\n  } else {\n    // Camera in northeast quadrant\n    visitIfVisible(\n      primitive,\n      northeast,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      northeastDetails\n    );\n    visitIfVisible(\n      primitive,\n      northwest,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      northwestDetails\n    );\n    visitIfVisible(\n      primitive,\n      southeast,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      southeastDetails\n    );\n    visitIfVisible(\n      primitive,\n      southwest,\n      tileProvider,\n      frameState,\n      occluders,\n      ancestorMeetsSse,\n      southwestDetails\n    );\n  }\n\n  quadDetails.combine(traversalDetails);\n}\n\nfunction containsNeededPosition(primitive, tile) {\n  var rectangle = tile.rectangle;\n  return (\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(primitive._cameraPositionCartographic) &&\n      _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].contains */ .Z.contains(rectangle, primitive._cameraPositionCartographic)) ||\n    ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(primitive._cameraReferenceFrameOriginCartographic) &&\n      _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].contains */ .Z.contains(\n        rectangle,\n        primitive._cameraReferenceFrameOriginCartographic\n      ))\n  );\n}\n\nfunction visitIfVisible(\n  primitive,\n  tile,\n  tileProvider,\n  frameState,\n  occluders,\n  ancestorMeetsSse,\n  traversalDetails\n) {\n  if (\n    tileProvider.computeTileVisibility(tile, frameState, occluders) !==\n    _Core_Visibility_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].NONE */ .Z.NONE\n  ) {\n    return visitTile(\n      primitive,\n      frameState,\n      tile,\n      ancestorMeetsSse,\n      traversalDetails\n    );\n  }\n\n  ++primitive._debug.tilesCulled;\n  primitive._tileReplacementQueue.markTileRendered(tile);\n\n  traversalDetails.allAreRenderable = true;\n  traversalDetails.anyWereRenderedLastFrame = false;\n  traversalDetails.notYetRenderableCount = 0;\n\n  if (containsNeededPosition(primitive, tile)) {\n    // Load the tile(s) that contains the camera\'s position and\n    // the origin of its reference frame with medium priority.\n    // But we only need to load until the terrain is available, no need to load imagery.\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tile.data) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tile.data.vertexArray)) {\n      queueTileLoad(\n        primitive,\n        primitive._tileLoadQueueMedium,\n        tile,\n        frameState\n      );\n    }\n\n    var lastFrame = primitive._lastSelectionFrameNumber;\n    var lastFrameSelectionResult =\n      tile._lastSelectionResultFrame === lastFrame\n        ? tile._lastSelectionResult\n        : _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].NONE */ .Z.NONE;\n    if (\n      lastFrameSelectionResult !== _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CULLED_BUT_NEEDED */ .Z.CULLED_BUT_NEEDED &&\n      lastFrameSelectionResult !== _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED\n    ) {\n      primitive._tileToUpdateHeights.push(tile);\n    }\n\n    tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CULLED_BUT_NEEDED */ .Z.CULLED_BUT_NEEDED;\n  } else if (primitive.preloadSiblings || tile.level === 0) {\n    // Load culled level zero tiles with low priority.\n    // For all other levels, only load culled tiles if preloadSiblings is enabled.\n    queueTileLoad(primitive, primitive._tileLoadQueueLow, tile, frameState);\n    tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CULLED */ .Z.CULLED;\n  } else {\n    tile._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CULLED */ .Z.CULLED;\n  }\n\n  tile._lastSelectionResultFrame = frameState.frameNumber;\n}\n\nfunction screenSpaceError(primitive, frameState, tile) {\n  if (\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].SCENE2D */ .Z.SCENE2D ||\n    frameState.camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z ||\n    frameState.camera.frustum instanceof _Core_OrthographicOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z\n  ) {\n    return screenSpaceError2D(primitive, frameState, tile);\n  }\n\n  var maxGeometricError = primitive._tileProvider.getLevelMaximumGeometricError(\n    tile.level\n  );\n\n  var distance = tile._distance;\n  var height = frameState.context.drawingBufferHeight;\n  var sseDenominator = frameState.camera.frustum.sseDenominator;\n\n  var error = (maxGeometricError * height) / (distance * sseDenominator);\n\n  if (frameState.fog.enabled) {\n    error -=\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fog */ .Z.fog(distance, frameState.fog.density) * frameState.fog.sse;\n  }\n\n  error /= frameState.pixelRatio;\n\n  return error;\n}\n\nfunction screenSpaceError2D(primitive, frameState, tile) {\n  var camera = frameState.camera;\n  var frustum = camera.frustum;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(frustum._offCenterFrustum)) {\n    frustum = frustum._offCenterFrustum;\n  }\n\n  var context = frameState.context;\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight;\n\n  var maxGeometricError = primitive._tileProvider.getLevelMaximumGeometricError(\n    tile.level\n  );\n  var pixelSize =\n    Math.max(frustum.top - frustum.bottom, frustum.right - frustum.left) /\n    Math.max(width, height);\n  var error = maxGeometricError / pixelSize;\n\n  if (frameState.fog.enabled && frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n    error -=\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].fog */ .Z.fog(tile._distance, frameState.fog.density) *\n      frameState.fog.sse;\n  }\n\n  error /= frameState.pixelRatio;\n\n  return error;\n}\n\nfunction addTileToRenderList(primitive, tile) {\n  primitive._tilesToRender.push(tile);\n}\n\nfunction processTileLoadQueue(primitive, frameState) {\n  var tileLoadQueueHigh = primitive._tileLoadQueueHigh;\n  var tileLoadQueueMedium = primitive._tileLoadQueueMedium;\n  var tileLoadQueueLow = primitive._tileLoadQueueLow;\n\n  if (\n    tileLoadQueueHigh.length === 0 &&\n    tileLoadQueueMedium.length === 0 &&\n    tileLoadQueueLow.length === 0\n  ) {\n    return;\n  }\n\n  // Remove any tiles that were not used this frame beyond the number\n  // we\'re allowed to keep.\n  primitive._tileReplacementQueue.trimTiles(primitive.tileCacheSize);\n\n  var endTime = (0,_Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)() + primitive._loadQueueTimeSlice;\n  var tileProvider = primitive._tileProvider;\n\n  var didSomeLoading = processSinglePriorityLoadQueue(\n    primitive,\n    frameState,\n    tileProvider,\n    endTime,\n    tileLoadQueueHigh,\n    false\n  );\n  didSomeLoading = processSinglePriorityLoadQueue(\n    primitive,\n    frameState,\n    tileProvider,\n    endTime,\n    tileLoadQueueMedium,\n    didSomeLoading\n  );\n  processSinglePriorityLoadQueue(\n    primitive,\n    frameState,\n    tileProvider,\n    endTime,\n    tileLoadQueueLow,\n    didSomeLoading\n  );\n}\n\nfunction sortByLoadPriority(a, b) {\n  return a._loadPriority - b._loadPriority;\n}\n\nfunction processSinglePriorityLoadQueue(\n  primitive,\n  frameState,\n  tileProvider,\n  endTime,\n  loadQueue,\n  didSomeLoading\n) {\n  if (tileProvider.computeTileLoadPriority !== undefined) {\n    loadQueue.sort(sortByLoadPriority);\n  }\n\n  for (\n    var i = 0, len = loadQueue.length;\n    i < len && ((0,_Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)() < endTime || !didSomeLoading);\n    ++i\n  ) {\n    var tile = loadQueue[i];\n    primitive._tileReplacementQueue.markTileRendered(tile);\n    tileProvider.loadTile(frameState, tile);\n    didSomeLoading = true;\n  }\n\n  return didSomeLoading;\n}\n\nvar scratchRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchArray = [];\n\nfunction updateHeights(primitive, frameState) {\n  if (!primitive.tileProvider.ready) {\n    return;\n  }\n\n  var tryNextFrame = scratchArray;\n  tryNextFrame.length = 0;\n  var tilesToUpdateHeights = primitive._tileToUpdateHeights;\n\n  var startTime = (0,_Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)();\n  var timeSlice = primitive._updateHeightsTimeSlice;\n  var endTime = startTime + timeSlice;\n\n  var mode = frameState.mode;\n  var projection = frameState.mapProjection;\n  var ellipsoid = primitive.tileProvider.tilingScheme.ellipsoid;\n  var i;\n\n  while (tilesToUpdateHeights.length > 0) {\n    var tile = tilesToUpdateHeights[0];\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tile.data) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tile.data.mesh)) {\n      // Tile isn\'t loaded enough yet, so try again next frame if this tile is still\n      // being rendered.\n      var selectionResult =\n        tile._lastSelectionResultFrame === primitive._lastSelectionFrameNumber\n          ? tile._lastSelectionResult\n          : _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].NONE */ .Z.NONE;\n      if (\n        selectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].RENDERED */ .Z.RENDERED ||\n        selectionResult === _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].CULLED_BUT_NEEDED */ .Z.CULLED_BUT_NEEDED\n      ) {\n        tryNextFrame.push(tile);\n      }\n      tilesToUpdateHeights.shift();\n      primitive._lastTileIndex = 0;\n      continue;\n    }\n    var customData = tile.customData;\n    var customDataLength = customData.length;\n\n    var timeSliceMax = false;\n    for (i = primitive._lastTileIndex; i < customDataLength; ++i) {\n      var data = customData[i];\n\n      // No need to run this code when the tile is upsampled, because the height will be the same as its parent.\n      var terrainData = tile.data.terrainData;\n      var upsampledGeometryFromParent =\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(terrainData) && terrainData.wasCreatedByUpsampling();\n\n      if (tile.level > data.level && !upsampledGeometryFromParent) {\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(data.positionOnEllipsoidSurface)) {\n          // cartesian has to be on the ellipsoid surface for `ellipsoid.geodeticSurfaceNormal`\n          data.positionOnEllipsoidSurface = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromRadians */ .Z.fromRadians(\n            data.positionCartographic.longitude,\n            data.positionCartographic.latitude,\n            0.0,\n            ellipsoid\n          );\n        }\n\n        if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n          var surfaceNormal = ellipsoid.geodeticSurfaceNormal(\n            data.positionOnEllipsoidSurface,\n            scratchRay.direction\n          );\n\n          // compute origin point\n\n          // Try to find the intersection point between the surface normal and z-axis.\n          // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n          var rayOrigin = ellipsoid.getSurfaceNormalIntersectionWithZAxis(\n            data.positionOnEllipsoidSurface,\n            11500.0,\n            scratchRay.origin\n          );\n\n          // Theoretically, not with Earth datums, the intersection point can be outside the ellipsoid\n          if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(rayOrigin)) {\n            // intersection point is outside the ellipsoid, try other value\n            // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n            var minimumHeight;\n            if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(tile.data.tileBoundingRegion)) {\n              minimumHeight = tile.data.tileBoundingRegion.minimumHeight;\n            }\n            var magnitude = Math.min(\n              (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(minimumHeight, 0.0),\n              -11500.0\n            );\n\n            // multiply by the *positive* value of the magnitude\n            var vectorToMinimumPoint = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n              surfaceNormal,\n              Math.abs(magnitude) + 1,\n              scratchPosition\n            );\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n              data.positionOnEllipsoidSurface,\n              vectorToMinimumPoint,\n              scratchRay.origin\n            );\n          }\n        } else {\n          _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(data.positionCartographic, scratchCartographic);\n\n          // minimum height for the terrain set, need to get this information from the terrain provider\n          scratchCartographic.height = -11500.0;\n          projection.project(scratchCartographic, scratchPosition);\n          _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromElements */ .Z.fromElements(\n            scratchPosition.z,\n            scratchPosition.x,\n            scratchPosition.y,\n            scratchPosition\n          );\n          _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(scratchPosition, scratchRay.origin);\n          _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].UNIT_X */ .Z.UNIT_X, scratchRay.direction);\n        }\n\n        var position = tile.data.pick(\n          scratchRay,\n          mode,\n          projection,\n          false,\n          scratchPosition\n        );\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(position)) {\n          data.callback(position);\n          data.level = tile.level;\n        }\n      }\n\n      if ((0,_Core_getTimestamp_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)() >= endTime) {\n        timeSliceMax = true;\n        break;\n      }\n    }\n\n    if (timeSliceMax) {\n      primitive._lastTileIndex = i;\n      break;\n    } else {\n      primitive._lastTileIndex = 0;\n      tilesToUpdateHeights.shift();\n    }\n  }\n  for (i = 0; i < tryNextFrame.length; i++) {\n    tilesToUpdateHeights.push(tryNextFrame[i]);\n  }\n}\n\nfunction createRenderCommandsForSelectedTiles(primitive, frameState) {\n  var tileProvider = primitive._tileProvider;\n  var tilesToRender = primitive._tilesToRender;\n\n  for (var i = 0, len = tilesToRender.length; i < len; ++i) {\n    var tile = tilesToRender[i];\n    tileProvider.showTileThisFrame(tile, frameState);\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (QuadtreePrimitive);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9733\n')},19543:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96190);\n/* harmony import */ var _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85828);\n/* harmony import */ var _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(37728);\n\n\n\n\n\n\n/**\n * A single tile in a {@link QuadtreePrimitive}.\n *\n * @alias QuadtreeTile\n * @constructor\n * @private\n *\n * @param {Number} options.level The level of the tile in the quadtree.\n * @param {Number} options.x The X coordinate of the tile in the quadtree.  0 is the westernmost tile.\n * @param {Number} options.y The Y coordinate of the tile in the quadtree.  0 is the northernmost tile.\n * @param {TilingScheme} options.tilingScheme The tiling scheme in which this tile exists.\n * @param {QuadtreeTile} [options.parent] This tile\'s parent, or undefined if this is a root tile.\n */\nfunction QuadtreeTile(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("options is required.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.x)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("options.x is required.");\n  } else if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.y)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("options.y is required.");\n  } else if (options.x < 0 || options.y < 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "options.x and options.y must be greater than or equal to zero."\n    );\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.level)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n      "options.level is required and must be greater than or equal to zero."\n    );\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.tilingScheme)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("options.tilingScheme is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._tilingScheme = options.tilingScheme;\n  this._x = options.x;\n  this._y = options.y;\n  this._level = options.level;\n  this._parent = options.parent;\n  this._rectangle = this._tilingScheme.tileXYToRectangle(\n    this._x,\n    this._y,\n    this._level\n  );\n\n  this._southwestChild = undefined;\n  this._southeastChild = undefined;\n  this._northwestChild = undefined;\n  this._northeastChild = undefined;\n\n  // TileReplacementQueue gets/sets these private properties.\n  this.replacementPrevious = undefined;\n  this.replacementNext = undefined;\n\n  // The distance from the camera to this tile, updated when the tile is selected\n  // for rendering.  We can get rid of this if we have a better way to sort by\n  // distance - for example, by using the natural ordering of a quadtree.\n  // QuadtreePrimitive gets/sets this private property.\n  this._distance = 0.0;\n  this._loadPriority = 0.0;\n\n  this._customData = [];\n  this._frameUpdated = undefined;\n  this._lastSelectionResult = _TileSelectionResult_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].NONE */ .Z.NONE;\n  this._lastSelectionResultFrame = undefined;\n  this._loadedCallbacks = {};\n\n  /**\n   * Gets or sets the current state of the tile in the tile load pipeline.\n   * @type {QuadtreeTileLoadState}\n   * @default {@link QuadtreeTileLoadState.START}\n   */\n  this.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].START */ .Z.START;\n\n  /**\n   * Gets or sets a value indicating whether or not the tile is currently renderable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.renderable = false;\n\n  /**\n   * Gets or set a value indicating whether or not the tile was entirely upsampled from its\n   * parent tile.  If all four children of a parent tile were upsampled from the parent,\n   * we will render the parent instead of the children even if the LOD indicates that\n   * the children would be preferable.\n   * @type {Boolean}\n   * @default false\n   */\n  this.upsampledFromParent = false;\n\n  /**\n   * Gets or sets the additional data associated with this tile.  The exact content is specific to the\n   * {@link QuadtreeTileProvider}.\n   * @type {Object}\n   * @default undefined\n   */\n  this.data = undefined;\n}\n\n/**\n * Creates a rectangular set of tiles for level of detail zero, the coarsest, least detailed level.\n *\n * @memberof QuadtreeTile\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which the tiles are to be created.\n * @returns {QuadtreeTile[]} An array containing the tiles at level of detail zero, starting with the\n * tile in the northwest corner and followed by the tile (if any) to its east.\n */\nQuadtreeTile.createLevelZeroTiles = function (tilingScheme) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(tilingScheme)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z("tilingScheme is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var numberOfLevelZeroTilesX = tilingScheme.getNumberOfXTilesAtLevel(0);\n  var numberOfLevelZeroTilesY = tilingScheme.getNumberOfYTilesAtLevel(0);\n\n  var result = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\n\n  var index = 0;\n  for (var y = 0; y < numberOfLevelZeroTilesY; ++y) {\n    for (var x = 0; x < numberOfLevelZeroTilesX; ++x) {\n      result[index++] = new QuadtreeTile({\n        tilingScheme: tilingScheme,\n        x: x,\n        y: y,\n        level: 0,\n      });\n    }\n  }\n\n  return result;\n};\n\nQuadtreeTile.prototype._updateCustomData = function (\n  frameNumber,\n  added,\n  removed\n) {\n  var customData = this.customData;\n\n  var i;\n  var data;\n  var rectangle;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(added) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(removed)) {\n    customData = customData.filter(function (value) {\n      return removed.indexOf(value) === -1;\n    });\n    this._customData = customData;\n\n    rectangle = this._rectangle;\n    for (i = 0; i < added.length; ++i) {\n      data = added[i];\n      if (_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].contains */ .Z.contains(rectangle, data.positionCartographic)) {\n        customData.push(data);\n      }\n    }\n\n    this._frameUpdated = frameNumber;\n  } else {\n    // interior or leaf tile, update from parent\n    var parent = this._parent;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(parent) && this._frameUpdated !== parent._frameUpdated) {\n      customData.length = 0;\n\n      rectangle = this._rectangle;\n      var parentCustomData = parent.customData;\n      for (i = 0; i < parentCustomData.length; ++i) {\n        data = parentCustomData[i];\n        if (_Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].contains */ .Z.contains(rectangle, data.positionCartographic)) {\n          customData.push(data);\n        }\n      }\n\n      this._frameUpdated = parent._frameUpdated;\n    }\n  }\n};\n\nObject.defineProperties(QuadtreeTile.prototype, {\n  /**\n   * Gets the tiling scheme used to tile the surface.\n   * @memberof QuadtreeTile.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile X coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  x: {\n    get: function () {\n      return this._x;\n    },\n  },\n\n  /**\n   * Gets the tile Y coordinate.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  y: {\n    get: function () {\n      return this._y;\n    },\n  },\n\n  /**\n   * Gets the level-of-detail, where zero is the coarsest, least-detailed.\n   * @memberof QuadtreeTile.prototype\n   * @type {Number}\n   */\n  level: {\n    get: function () {\n      return this._level;\n    },\n  },\n\n  /**\n   * Gets the parent tile of this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n  },\n\n  /**\n   * Gets the cartographic rectangle of the tile, with north, south, east and\n   * west properties in radians.\n   * @memberof QuadtreeTile.prototype\n   * @type {Rectangle}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * An array of tiles that is at the next level of the tile tree.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile[]}\n   */\n  children: {\n    get: function () {\n      return [\n        this.northwestChild,\n        this.northeastChild,\n        this.southwestChild,\n        this.southeastChild,\n      ];\n    },\n  },\n\n  /**\n   * Gets the southwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southwestChild: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this._southwestChild)) {\n        this._southwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._southwestChild;\n    },\n  },\n\n  /**\n   * Gets the southeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  southeastChild: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this._southeastChild)) {\n        this._southeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2 + 1,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._southeastChild;\n    },\n  },\n\n  /**\n   * Gets the northwest child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northwestChild: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this._northwestChild)) {\n        this._northwestChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._northwestChild;\n    },\n  },\n\n  /**\n   * Gets the northeast child tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {QuadtreeTile}\n   */\n  northeastChild: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this._northeastChild)) {\n        this._northeastChild = new QuadtreeTile({\n          tilingScheme: this.tilingScheme,\n          x: this.x * 2 + 1,\n          y: this.y * 2,\n          level: this.level + 1,\n          parent: this,\n        });\n      }\n      return this._northeastChild;\n    },\n  },\n\n  /**\n   * An array of objects associated with this tile.\n   * @memberof QuadtreeTile.prototype\n   * @type {Array}\n   */\n  customData: {\n    get: function () {\n      return this._customData;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile needs further loading.\n   * This property will return true if the {@link QuadtreeTile#state} is\n   * <code>START</code> or <code>LOADING</code>.\n   * @memberof QuadtreeTile.prototype\n   * @type {Boolean}\n   */\n  needsLoading: {\n    get: function () {\n      return this.state < _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].DONE */ .Z.DONE;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not this tile is eligible to be unloaded.\n   * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n   * such as a request for data, is in progress on it.  A tile will never be\n   * unloaded while it is needed for rendering, regardless of the value of this\n   * property.  If {@link QuadtreeTile#data} is defined and has an\n   * <code>eligibleForUnloading</code> property, the value of that property is returned.\n   * Otherwise, this property returns true.\n   * @memberof QuadtreeTile.prototype\n   * @type {Boolean}\n   */\n  eligibleForUnloading: {\n    get: function () {\n      var result = true;\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this.data)) {\n        result = this.data.eligibleForUnloading;\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(result)) {\n          result = true;\n        }\n      }\n\n      return result;\n    },\n  },\n});\n\nQuadtreeTile.prototype.findLevelZeroTile = function (levelZeroTiles, x, y) {\n  var xTiles = this.tilingScheme.getNumberOfXTilesAtLevel(0);\n  if (x < 0) {\n    x += xTiles;\n  } else if (x >= xTiles) {\n    x -= xTiles;\n  }\n\n  if (y < 0 || y >= this.tilingScheme.getNumberOfYTilesAtLevel(0)) {\n    return undefined;\n  }\n\n  return levelZeroTiles.filter(function (tile) {\n    return tile.x === x && tile.y === y;\n  })[0];\n};\n\nQuadtreeTile.prototype.findTileToWest = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x - 1, this.y);\n  }\n\n  if (parent.southeastChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.northwestChild;\n  }\n\n  var westOfParent = parent.findTileToWest(levelZeroTiles);\n  if (westOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return westOfParent.southeastChild;\n  }\n  return westOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToEast = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x + 1, this.y);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.southeastChild;\n  } else if (parent.northwestChild === this) {\n    return parent.northeastChild;\n  }\n\n  var eastOfParent = parent.findTileToEast(levelZeroTiles);\n  if (eastOfParent === undefined) {\n    return undefined;\n  } else if (parent.southeastChild === this) {\n    return eastOfParent.southwestChild;\n  }\n  return eastOfParent.northwestChild;\n};\n\nQuadtreeTile.prototype.findTileToSouth = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y + 1);\n  }\n\n  if (parent.northwestChild === this) {\n    return parent.southwestChild;\n  } else if (parent.northeastChild === this) {\n    return parent.southeastChild;\n  }\n\n  var southOfParent = parent.findTileToSouth(levelZeroTiles);\n  if (southOfParent === undefined) {\n    return undefined;\n  } else if (parent.southwestChild === this) {\n    return southOfParent.northwestChild;\n  }\n  return southOfParent.northeastChild;\n};\n\nQuadtreeTile.prototype.findTileToNorth = function (levelZeroTiles) {\n  var parent = this.parent;\n  if (parent === undefined) {\n    return this.findLevelZeroTile(levelZeroTiles, this.x, this.y - 1);\n  }\n\n  if (parent.southwestChild === this) {\n    return parent.northwestChild;\n  } else if (parent.southeastChild === this) {\n    return parent.northeastChild;\n  }\n\n  var northOfParent = parent.findTileToNorth(levelZeroTiles);\n  if (northOfParent === undefined) {\n    return undefined;\n  } else if (parent.northwestChild === this) {\n    return northOfParent.southwestChild;\n  }\n  return northOfParent.southeastChild;\n};\n\n/**\n * Frees the resources associated with this tile and returns it to the <code>START</code>\n * {@link QuadtreeTileLoadState}.  If the {@link QuadtreeTile#data} property is defined and it\n * has a <code>freeResources</code> method, the method will be invoked.\n *\n * @memberof QuadtreeTile\n */\nQuadtreeTile.prototype.freeResources = function () {\n  this.state = _QuadtreeTileLoadState_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].START */ .Z.START;\n  this.renderable = false;\n  this.upsampledFromParent = false;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this.data) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this.data.freeResources)) {\n    this.data.freeResources();\n  }\n\n  freeTile(this._southwestChild);\n  this._southwestChild = undefined;\n  freeTile(this._southeastChild);\n  this._southeastChild = undefined;\n  freeTile(this._northwestChild);\n  this._northwestChild = undefined;\n  freeTile(this._northeastChild);\n  this._northeastChild = undefined;\n};\n\nfunction freeTile(tile) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(tile)) {\n    tile.freeResources();\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (QuadtreeTile);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19543\n')},85828:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * The state of a {@link QuadtreeTile} in the tile load pipeline.\n * @enum {Number}\n * @private\n */\nvar QuadtreeTileLoadState = {\n  /**\n   * The tile is new and loading has not yet begun.\n   * @type QuadtreeTileLoadState\n   * @constant\n   * @default 0\n   */\n  START: 0,\n\n  /**\n   * Loading is in progress.\n   * @type QuadtreeTileLoadState\n   * @constant\n   * @default 1\n   */\n  LOADING: 1,\n\n  /**\n   * Loading is complete.\n   * @type QuadtreeTileLoadState\n   * @constant\n   * @default 2\n   */\n  DONE: 2,\n\n  /**\n   * The tile has failed to load.\n   * @type QuadtreeTileLoadState\n   * @constant\n   * @default 3\n   */\n  FAILED: 3,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(QuadtreeTileLoadState));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU4MjguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsb0NBQW9DLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvUXVhZHRyZWVUaWxlTG9hZFN0YXRlLmpzPzc5M2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgc3RhdGUgb2YgYSB7QGxpbmsgUXVhZHRyZWVUaWxlfSBpbiB0aGUgdGlsZSBsb2FkIHBpcGVsaW5lLlxuICogQGVudW0ge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBRdWFkdHJlZVRpbGVMb2FkU3RhdGUgPSB7XG4gIC8qKlxuICAgKiBUaGUgdGlsZSBpcyBuZXcgYW5kIGxvYWRpbmcgaGFzIG5vdCB5ZXQgYmVndW4uXG4gICAqIEB0eXBlIFF1YWR0cmVlVGlsZUxvYWRTdGF0ZVxuICAgKiBAY29uc3RhbnRcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgU1RBUlQ6IDAsXG5cbiAgLyoqXG4gICAqIExvYWRpbmcgaXMgaW4gcHJvZ3Jlc3MuXG4gICAqIEB0eXBlIFF1YWR0cmVlVGlsZUxvYWRTdGF0ZVxuICAgKiBAY29uc3RhbnRcbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgTE9BRElORzogMSxcblxuICAvKipcbiAgICogTG9hZGluZyBpcyBjb21wbGV0ZS5cbiAgICogQHR5cGUgUXVhZHRyZWVUaWxlTG9hZFN0YXRlXG4gICAqIEBjb25zdGFudFxuICAgKiBAZGVmYXVsdCAyXG4gICAqL1xuICBET05FOiAyLFxuXG4gIC8qKlxuICAgKiBUaGUgdGlsZSBoYXMgZmFpbGVkIHRvIGxvYWQuXG4gICAqIEB0eXBlIFF1YWR0cmVlVGlsZUxvYWRTdGF0ZVxuICAgKiBAY29uc3RhbnRcbiAgICogQGRlZmF1bHQgM1xuICAgKi9cbiAgRkFJTEVEOiAzLFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoUXVhZHRyZWVUaWxlTG9hZFN0YXRlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85828\n')},8158:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12572);\n\n\n/**\n * Provides general quadtree tiles to be displayed on or near the surface of an ellipsoid.  It is intended to be\n * used with the {@link QuadtreePrimitive}.  This type describes an interface and is not intended to be\n * instantiated directly.\n *\n * @alias QuadtreeTileProvider\n * @constructor\n * @private\n */\nfunction QuadtreeTileProvider() {\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n}\n\n/**\n * Computes the default geometric error for level zero of the quadtree.\n *\n * @memberof QuadtreeTileProvider\n *\n * @param {TilingScheme} tilingScheme The tiling scheme for which to compute the geometric error.\n * @returns {Number} The maximum geometric error at level zero, in meters.\n */\nQuadtreeTileProvider.computeDefaultLevelZeroMaximumGeometricError = function (\n  tilingScheme\n) {\n  return (\n    (tilingScheme.ellipsoid.maximumRadius * 2 * Math.PI * 0.25) /\n    (65 * tilingScheme.getNumberOfXTilesAtLevel(0))\n  );\n};\n\nObject.defineProperties(QuadtreeTileProvider.prototype, {\n  /**\n   * Gets or sets the {@link QuadtreePrimitive} for which this provider is\n   * providing tiles.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {QuadtreePrimitive}\n   */\n  quadtree: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n    set: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This property should\n   * not be accessed before {@link QuadtreeTileProvider#ready} returns true.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n\n  /**\n   * Gets an event that is raised when the geometry provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof QuadtreeTileProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError,\n  },\n});\n\n/**\n * Called at the beginning of the update cycle, regardless of id a new frame is being rendered, before {@link QuadtreeTileProvider#beginUpdate}\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n */\nQuadtreeTileProvider.prototype.update = _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Called at the beginning of the update cycle for each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n * or any other functions.\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} commandList An array of rendering commands.  This method may push\n *        commands into this array.\n */\nQuadtreeTileProvider.prototype.beginUpdate =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Called at the end of the update cycle for each render frame, after {@link QuadtreeTileProvider#showTileThisFrame}\n * and any other functions.\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {DrawCommand[]} commandList An array of rendering commands.  This method may push\n *        commands into this array.\n */\nQuadtreeTileProvider.prototype.endUpdate =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level, in meters.  This function should not be\n * called before {@link QuadtreeTileProvider#ready} returns true.\n *\n * @see QuadtreeTileProvider#computeDefaultLevelZeroMaximumGeometricError\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error in meters.\n */\nQuadtreeTileProvider.prototype.getLevelMaximumGeometricError =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Loads, or continues loading, a given tile.  This function will continue to be called\n * until {@link QuadtreeTile#state} is no longer {@link QuadtreeTileLoadState#LOADING}.  This function should\n * not be called before {@link QuadtreeTileProvider#ready} returns true.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The frame state.\n * @param {QuadtreeTile} tile The tile to load.\n *\n * @exception {DeveloperError} <code>loadTile</code> must not be called before the tile provider is ready.\n */\nQuadtreeTileProvider.prototype.loadTile =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Determines the visibility of a given tile.  The tile may be fully visible, partially visible, or not\n * visible at all.  Tiles that are renderable and are at least partially visible will be shown by a call\n * to {@link QuadtreeTileProvider#showTileThisFrame}.\n *\n * @memberof QuadtreeTileProvider\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information about the current frame.\n * @param {QuadtreeOccluders} occluders The objects that may occlude this tile.\n *\n * @returns {Visibility} The visibility of the tile.\n */\nQuadtreeTileProvider.prototype.computeTileVisibility =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Shows a specified tile in this frame.  The provider can cause the tile to be shown by adding\n * render commands to the commandList, or use any other method as appropriate.  The tile is not\n * expected to be visible next frame as well, unless this method is call next frame, too.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {Context} context The rendering context.\n * @param {FrameState} frameState The state information of the current rendering frame.\n * @param {DrawCommand[]} commandList The list of rendering commands.  This method may add additional commands to this list.\n */\nQuadtreeTileProvider.prototype.showTileThisFrame =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Gets the distance from the camera to the closest point on the tile.  This is used for level-of-detail selection.\n *\n * @memberof QuadtreeTileProvider\n * @function\n *\n * @param {QuadtreeTile} tile The tile instance.\n * @param {FrameState} frameState The state information of the current rendering frame.\n *\n * @returns {Number} The distance from the camera to the closest point on the tile, in meters.\n */\nQuadtreeTileProvider.prototype.computeDistanceToTile =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @memberof QuadtreeTileProvider\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see QuadtreeTileProvider#destroy\n */\nQuadtreeTileProvider.prototype.isDestroyed =\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @memberof QuadtreeTileProvider\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * provider = provider && provider();\n *\n * @see QuadtreeTileProvider#isDestroyed\n */\nQuadtreeTileProvider.prototype.destroy = _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError;\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (QuadtreeTileProvider)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8158\n')},38956:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _BufferLoader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(61446);\n/* harmony import */ var _GltfBufferViewLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42306);\n/* harmony import */ var _GltfDracoLoader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(69179);\n/* harmony import */ var _GltfImageLoader_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(24351);\n/* harmony import */ var _GltfIndexBufferLoader_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28096);\n/* harmony import */ var _GltfJsonLoader_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(60785);\n/* harmony import */ var _GltfTextureLoader_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(31129);\n/* harmony import */ var _GltfVertexBufferLoader_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(46398);\n/* harmony import */ var _MetadataSchemaLoader_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(87508);\n/* harmony import */ var _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72638);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Cache for resources shared across 3D Tiles and glTF.\n *\n * @namespace ResourceCache\n *\n * @private\n */\nfunction ResourceCache() {}\n\nResourceCache.cacheEntries = {};\n\n/**\n * A reference-counted cache entry.\n *\n * @param {ResourceLoader} resourceLoader The resource.\n *\n * @alias CacheEntry\n * @constructor\n *\n * @private\n */\nfunction CacheEntry(resourceLoader) {\n  this.referenceCount = 1;\n  this.resourceLoader = resourceLoader;\n}\n\n/**\n * Gets a resource from the cache. If the resource exists its reference count is\n * incremented. Otherwise, if no resource loader exists, undefined is returned.\n *\n * @param {String} cacheKey The cache key of the resource.\n *\n * @returns {ResourceLoader|undefined} The resource.\n * @private\n */\nResourceCache.get = function (cacheKey) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("cacheKey", cacheKey);\n  //>>includeEnd(\'debug\');\n\n  var cacheEntry = ResourceCache.cacheEntries[cacheKey];\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(cacheEntry)) {\n    ++cacheEntry.referenceCount;\n    return cacheEntry.resourceLoader;\n  }\n  return undefined;\n};\n\n/**\n * Loads a resource and adds it to the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {ResourceLoader} options.resourceLoader The resource.\n *\n * @exception {DeveloperError} Resource with this cacheKey is already in the cach\n * @private\n */\nResourceCache.load = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var resourceLoader = options.resourceLoader;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.resourceLoader", resourceLoader);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = resourceLoader.cacheKey;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("options.resourceLoader.cacheKey", cacheKey);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(ResourceCache.cacheEntries[cacheKey])) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "Resource with this cacheKey is already in the cache: " + cacheKey\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  ResourceCache.cacheEntries[cacheKey] = new CacheEntry(resourceLoader);\n\n  resourceLoader.load();\n};\n\n/**\n * Unloads a resource from the cache. When the reference count hits zero the\n * resource is destroyed.\n *\n * @param {ResourceLoader} resourceLoader The resource.\n *\n * @exception {DeveloperError} Resource is not in the cache.\n * @exception {DeveloperError} Cannot unload resource that has no references.\n * @private\n */\nResourceCache.unload = function (resourceLoader) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("resourceLoader", resourceLoader);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = resourceLoader.cacheKey;\n  var cacheEntry = ResourceCache.cacheEntries[cacheKey];\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(cacheEntry)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z("Resource is not in the cache: " + cacheKey);\n  }\n  //>>includeEnd(\'debug\');\n\n  --cacheEntry.referenceCount;\n\n  if (cacheEntry.referenceCount === 0) {\n    resourceLoader.destroy();\n    delete ResourceCache.cacheEntries[cacheKey];\n  }\n};\n\n/**\n * Loads a schema from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} [options.schema] An object that explicitly defines a schema JSON. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the schema JSON. Mutually exclusive with options.schema.\n *\n * @returns {MetadataSchemaLoader} The schema resource.\n *\n * @exception {DeveloperError} One of options.schema and options.resource must be defined.\n * @private\n */\nResourceCache.loadSchema = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var schema = options.schema;\n  var resource = options.resource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(schema) === (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(resource)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "One of options.schema and options.resource must be defined."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getSchemaCacheKey */ .Z.getSchemaCacheKey({\n    schema: schema,\n    resource: resource,\n  });\n\n  var schemaLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(schemaLoader)) {\n    return schemaLoader;\n  }\n\n  schemaLoader = new _MetadataSchemaLoader_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z({\n    schema: schema,\n    resource: resource,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: schemaLoader,\n  });\n\n  return schemaLoader;\n};\n\n/**\n * Load an embedded buffer from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource} options.parentResource The {@link Resource} containing the embedded buffer.\n * @param {Number} options.bufferId A unique identifier of the embedded buffer within the parent resource.\n * @param {Uint8Array} [options.typedArray] The typed array containing the embedded buffer contents.\n *\n * @returns {BufferLoader} The buffer loader.\n * @private\n */\nResourceCache.loadEmbeddedBuffer = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var parentResource = options.parentResource;\n  var bufferId = options.bufferId;\n  var typedArray = options.typedArray;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.parentResource", parentResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.bufferId", bufferId);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getEmbeddedBufferCacheKey */ .Z.getEmbeddedBufferCacheKey({\n    parentResource: parentResource,\n    bufferId: bufferId,\n  });\n\n  var bufferLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(bufferLoader)) {\n    return bufferLoader;\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.typedArray", typedArray);\n  //>>includeEnd(\'debug\');\n\n  bufferLoader = new _BufferLoader_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n    typedArray: typedArray,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: bufferLoader,\n  });\n\n  return bufferLoader;\n};\n\n/**\n * Loads an external buffer from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource} options.resource The {@link Resource} pointing to the external buffer.\n *\n * @returns {BufferLoader} The buffer loader.\n * @private\n */\nResourceCache.loadExternalBuffer = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var resource = options.resource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.resource", resource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getExternalBufferCacheKey */ .Z.getExternalBufferCacheKey({\n    resource: resource,\n  });\n\n  var bufferLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(bufferLoader)) {\n    return bufferLoader;\n  }\n\n  bufferLoader = new _BufferLoader_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n    resource: resource,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: bufferLoader,\n  });\n\n  return bufferLoader;\n};\n\n/**\n * Loads a glTF JSON from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {Uint8Array} [options.typedArray] The typed array containing the glTF contents.\n * @param {Object} [options.gltfJson] The parsed glTF JSON contents.\n *\n * @returns {GltfJsonLoader} The glTF JSON.\n * @private\n */\nResourceCache.loadGltfJson = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var typedArray = options.typedArray;\n  var gltfJson = options.gltfJson;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getGltfCacheKey */ .Z.getGltfCacheKey({\n    gltfResource: gltfResource,\n  });\n\n  var gltfJsonLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(gltfJsonLoader)) {\n    return gltfJsonLoader;\n  }\n\n  gltfJsonLoader = new _GltfJsonLoader_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    typedArray: typedArray,\n    gltfJson: gltfJson,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: gltfJsonLoader,\n  });\n\n  return gltfJsonLoader;\n};\n\n/**\n * Loads a glTF buffer view from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Number} options.bufferViewId The bufferView ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {GltfBufferViewLoader} The buffer view loader.\n * @private\n */\nResourceCache.loadBufferView = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var bufferViewId = options.bufferViewId;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.bufferViewId", bufferViewId);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getBufferViewCacheKey */ .Z.getBufferViewCacheKey({\n    gltf: gltf,\n    bufferViewId: bufferViewId,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n  });\n\n  var bufferViewLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(bufferViewLoader)) {\n    return bufferViewLoader;\n  }\n\n  bufferViewLoader = new _GltfBufferViewLoader_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltf: gltf,\n    bufferViewId: bufferViewId,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: bufferViewLoader,\n  });\n\n  return bufferViewLoader;\n};\n\n/**\n * Loads Draco data from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Object} options.draco The Draco extension object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {GltfDracoLoader} The Draco loader.\n * @private\n */\nResourceCache.loadDraco = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var draco = options.draco;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.draco", draco);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getDracoCacheKey */ .Z.getDracoCacheKey({\n    gltf: gltf,\n    draco: draco,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n  });\n\n  var dracoLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(dracoLoader)) {\n    return dracoLoader;\n  }\n\n  dracoLoader = new _GltfDracoLoader_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltf: gltf,\n    draco: draco,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: dracoLoader,\n  });\n\n  return dracoLoader;\n};\n\n/**\n * Loads a glTF vertex buffer from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {Number} [options.bufferViewId] The bufferView ID corresponding to the vertex buffer.\n * @param {Object} [options.draco] The Draco extension object.\n * @param {String} [options.attributeSemantic] The attribute semantic, e.g. POSITION or NORMAL.\n * @param {Number} [options.accessorId] The accessor ID.\n * @param {Boolean} [options.asynchronous=true] Determines if WebGL resource creation will be spread out over several frames or block until all WebGL resources are created.\n * @param {Boolean} [dequantize=false] Determines whether or not the vertex buffer will be dequantized on the CPU.\n *\n * @exception {DeveloperError} One of options.bufferViewId and options.draco must be defined.\n * @exception {DeveloperError} When options.draco is defined options.attributeSemantic must also be defined.\n * @exception {DeveloperError} When options.draco is defined options.accessorId must also be defined.\n *\n * @returns {GltfVertexBufferLoader} The vertex buffer loader.\n * @private\n */\nResourceCache.loadVertexBuffer = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var bufferViewId = options.bufferViewId;\n  var draco = options.draco;\n  var attributeSemantic = options.attributeSemantic;\n  var accessorId = options.accessorId;\n  var asynchronous = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.asynchronous, true);\n  var dequantize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.dequantize, false);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n\n  var hasBufferViewId = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(bufferViewId);\n  var hasDraco = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(draco);\n  var hasAttributeSemantic = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(attributeSemantic);\n  var hasAccessorId = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(accessorId);\n\n  if (hasBufferViewId === hasDraco) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "One of options.bufferViewId and options.draco must be defined."\n    );\n  }\n\n  if (hasDraco && !hasAttributeSemantic) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "When options.draco is defined options.attributeSemantic must also be defined."\n    );\n  }\n\n  if (hasDraco && !hasAccessorId) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "When options.draco is defined options.haAccessorId must also be defined."\n    );\n  }\n\n  if (hasDraco) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.draco", draco);\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("options.attributeSemantic", attributeSemantic);\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.accessorId", accessorId);\n  }\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getVertexBufferCacheKey */ .Z.getVertexBufferCacheKey({\n    gltf: gltf,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    bufferViewId: bufferViewId,\n    draco: draco,\n    attributeSemantic: attributeSemantic,\n  });\n\n  var vertexBufferLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(vertexBufferLoader)) {\n    return vertexBufferLoader;\n  }\n\n  vertexBufferLoader = new _GltfVertexBufferLoader_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltf: gltf,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    bufferViewId: bufferViewId,\n    draco: draco,\n    attributeSemantic: attributeSemantic,\n    accessorId: accessorId,\n    cacheKey: cacheKey,\n    asynchronous: asynchronous,\n    dequantize: dequantize,\n  });\n\n  ResourceCache.load({\n    resourceLoader: vertexBufferLoader,\n  });\n\n  return vertexBufferLoader;\n};\n\n/**\n * Loads a glTF index buffer from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Number} options.accessorId The accessor ID corresponding to the index buffer.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {Object} [options.draco] The Draco extension object.\n * @param {Boolean} [options.asynchronous=true] Determines if WebGL resource creation will be spread out over several frames or block until all WebGL resources are created.\n *\n * @returns {GltfIndexBufferLoader} The index buffer loader.\n * @private\n */\nResourceCache.loadIndexBuffer = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var accessorId = options.accessorId;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var draco = options.draco;\n  var asynchronous = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.asynchronous, true);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.accessorId", accessorId);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getIndexBufferCacheKey */ .Z.getIndexBufferCacheKey({\n    gltf: gltf,\n    accessorId: accessorId,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    draco: draco,\n  });\n\n  var indexBufferLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(indexBufferLoader)) {\n    return indexBufferLoader;\n  }\n\n  indexBufferLoader = new _GltfIndexBufferLoader_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltf: gltf,\n    accessorId: accessorId,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    draco: draco,\n    cacheKey: cacheKey,\n    asynchronous: asynchronous,\n  });\n\n  ResourceCache.load({\n    resourceLoader: indexBufferLoader,\n  });\n\n  return indexBufferLoader;\n};\n\n/**\n * Loads a glTF image from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Number} options.imageId The image ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {GltfImageLoader} The image loader.\n * @private\n */\nResourceCache.loadImage = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var imageId = options.imageId;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.imageId", imageId);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getImageCacheKey */ .Z.getImageCacheKey({\n    gltf: gltf,\n    imageId: imageId,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n  });\n\n  var imageLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(imageLoader)) {\n    return imageLoader;\n  }\n\n  imageLoader = new _GltfImageLoader_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltf: gltf,\n    imageId: imageId,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    cacheKey: cacheKey,\n  });\n\n  ResourceCache.load({\n    resourceLoader: imageLoader,\n  });\n\n  return imageLoader;\n};\n\n/**\n * Loads a glTF texture from the cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Object} options.textureInfo The texture info object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {SupportedImageFormats} options.supportedImageFormats The supported image formats.\n * @param {Boolean} [options.asynchronous=true] Determines if WebGL resource creation will be spread out over several frames or block until all WebGL resources are created.\n *\n * @returns {GltfTextureLoader} The texture loader.\n * @private\n */\nResourceCache.loadTexture = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var textureInfo = options.textureInfo;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var supportedImageFormats = options.supportedImageFormats;\n  var asynchronous = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.asynchronous, true);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.textureInfo", textureInfo);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var cacheKey = _ResourceCacheKey_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].getTextureCacheKey */ .Z.getTextureCacheKey({\n    gltf: gltf,\n    textureInfo: textureInfo,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    supportedImageFormats: supportedImageFormats,\n  });\n\n  var textureLoader = ResourceCache.get(cacheKey);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(textureLoader)) {\n    return textureLoader;\n  }\n\n  textureLoader = new _GltfTextureLoader_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n    resourceCache: ResourceCache,\n    gltf: gltf,\n    textureInfo: textureInfo,\n    gltfResource: gltfResource,\n    baseResource: baseResource,\n    supportedImageFormats: supportedImageFormats,\n    cacheKey: cacheKey,\n    asynchronous: asynchronous,\n  });\n\n  ResourceCache.load({\n    resourceLoader: textureLoader,\n  });\n\n  return textureLoader;\n};\n\n/**\n * Unload everything from the cache. This is used for unit testing.\n *\n * @private\n */\nResourceCache.clearForSpecs = function () {\n  // Unload in the order below. This prevents an unload function from unloading\n  // a resource that has already been unloaded.\n  var precedence = [\n    _GltfVertexBufferLoader_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z,\n    _GltfIndexBufferLoader_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z,\n    _GltfDracoLoader_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z,\n    _GltfTextureLoader_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z,\n    _GltfImageLoader_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z,\n    _GltfBufferViewLoader_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z,\n    _BufferLoader_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z,\n    _MetadataSchemaLoader_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z,\n    _GltfJsonLoader_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z,\n  ];\n\n  var cacheKey;\n  var cacheEntries = ResourceCache.cacheEntries;\n\n  var cacheEntriesSorted = [];\n  for (cacheKey in cacheEntries) {\n    if (cacheEntries.hasOwnProperty(cacheKey)) {\n      cacheEntriesSorted.push(cacheEntries[cacheKey]);\n    }\n  }\n\n  cacheEntriesSorted.sort(function (a, b) {\n    var indexA = precedence.indexOf(a.resourceLoader.constructor);\n    var indexB = precedence.indexOf(b.resourceLoader.constructor);\n    return indexA - indexB;\n  });\n\n  var cacheEntriesLength = cacheEntriesSorted.length;\n  for (var i = 0; i < cacheEntriesLength; ++i) {\n    var cacheEntry = cacheEntriesSorted[i];\n    cacheKey = cacheEntry.resourceLoader.cacheKey;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(cacheEntries[cacheKey])) {\n      cacheEntry.resourceLoader.destroy();\n      delete cacheEntries[cacheKey];\n    }\n  }\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (ResourceCache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38956\n')},72638:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_getAbsoluteUri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83295);\n/* harmony import */ var _GltfLoaderUtil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(61120);\n/* harmony import */ var _hasExtension_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81326);\n\n\n\n\n\n\n\n\n/**\n * Compute cache keys for resources in {@link ResourceCache}.\n *\n * @namespace ResourceCacheKey\n *\n * @private\n */\nvar ResourceCacheKey = {};\n\nfunction getExternalResourceCacheKey(resource) {\n  return (0,_Core_getAbsoluteUri_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(resource.url);\n}\n\nfunction getBufferViewCacheKey(bufferView) {\n  var byteOffset = bufferView.byteOffset;\n  var byteLength = bufferView.byteLength;\n\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(bufferView, "EXT_meshopt_compression")) {\n    var meshopt = bufferView.extensions.EXT_meshopt_compression;\n    byteOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(meshopt.byteOffset, 0);\n    byteLength = meshopt.byteLength;\n  }\n\n  return byteOffset + "-" + (byteOffset + byteLength);\n}\n\nfunction getAccessorCacheKey(accessor, bufferView) {\n  var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n  var componentType = accessor.componentType;\n  var type = accessor.type;\n  var count = accessor.count;\n  return byteOffset + "-" + componentType + "-" + type + "-" + count;\n}\n\nfunction getExternalBufferCacheKey(resource) {\n  return getExternalResourceCacheKey(resource);\n}\n\nfunction getEmbeddedBufferCacheKey(parentResource, bufferId) {\n  var parentCacheKey = getExternalResourceCacheKey(parentResource);\n  return parentCacheKey + "-buffer-id-" + bufferId;\n}\n\nfunction getBufferCacheKey(buffer, bufferId, gltfResource, baseResource) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(buffer.uri)) {\n    var resource = baseResource.getDerivedResource({\n      url: buffer.uri,\n    });\n    return getExternalBufferCacheKey(resource);\n  }\n\n  return getEmbeddedBufferCacheKey(gltfResource, bufferId);\n}\n\nfunction getDracoCacheKey(gltf, draco, gltfResource, baseResource) {\n  var bufferViewId = draco.bufferView;\n  var bufferView = gltf.bufferViews[bufferViewId];\n  var bufferId = bufferView.buffer;\n  var buffer = gltf.buffers[bufferId];\n\n  var bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource\n  );\n\n  var bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return bufferCacheKey + "-range-" + bufferViewCacheKey;\n}\n\nfunction getImageCacheKey(gltf, imageId, gltfResource, baseResource) {\n  var image = gltf.images[imageId];\n  var bufferViewId = image.bufferView;\n  var uri = image.uri;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(uri)) {\n    var resource = baseResource.getDerivedResource({\n      url: uri,\n    });\n    return getExternalResourceCacheKey(resource);\n  }\n\n  var bufferView = gltf.bufferViews[bufferViewId];\n  var bufferId = bufferView.buffer;\n  var buffer = gltf.buffers[bufferId];\n\n  var bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource\n  );\n\n  var bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return bufferCacheKey + "-range-" + bufferViewCacheKey;\n}\n\nfunction getSamplerCacheKey(gltf, textureInfo) {\n  var sampler = _GltfLoaderUtil_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].createSampler */ .Z.createSampler({\n    gltf: gltf,\n    textureInfo: textureInfo,\n  });\n\n  return (\n    sampler.wrapS +\n    "-" +\n    sampler.wrapT +\n    "-" +\n    sampler.minificationFilter +\n    "-" +\n    sampler.magnificationFilter\n  );\n}\n\n/**\n * Gets the schema cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} [options.schema] An object that explicitly defines a schema JSON. Mutually exclusive with options.resource.\n * @param {Resource} [options.resource] The {@link Resource} pointing to the schema JSON. Mutually exclusive with options.schema.\n *\n * @returns {String} The schema cache key.\n *\n * @exception {DeveloperError} One of options.schema and options.resource must be defined.\n * @private\n */\nResourceCacheKey.getSchemaCacheKey = function (options) {\n  var schema = options.schema;\n  var resource = options.resource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(schema) === (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(resource)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "One of options.schema and options.resource must be defined."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(schema)) {\n    return "embedded-schema:" + JSON.stringify(schema);\n  }\n\n  return "external-schema:" + getExternalResourceCacheKey(resource);\n};\n\n/**\n * Gets the external buffer cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource} options.resource The {@link Resource} pointing to the external buffer.\n *\n * @returns {String} The external buffer cache key.\n * @private\n */\nResourceCacheKey.getExternalBufferCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var resource = options.resource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.resource", resource);\n  //>>includeEnd(\'debug\');\n\n  return "external-buffer:" + getExternalBufferCacheKey(resource);\n};\n\n/**\n * Gets the embedded buffer cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource} options.parentResource The {@link Resource} containing the embedded buffer.\n * @param {Number} options.bufferId A unique identifier of the embedded buffer within the parent resource.\n *\n * @returns {String} The embedded buffer cache key.\n * @private\n */\nResourceCacheKey.getEmbeddedBufferCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var parentResource = options.parentResource;\n  var bufferId = options.bufferId;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.parentResource", parentResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.bufferId", bufferId);\n  //>>includeEnd(\'debug\');\n\n  return (\n    "embedded-buffer:" + getEmbeddedBufferCacheKey(parentResource, bufferId)\n  );\n};\n\n/**\n * Gets the glTF cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n *\n * @returns {String} The glTF cache key.\n * @private\n */\nResourceCacheKey.getGltfCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltfResource = options.gltfResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  //>>includeEnd(\'debug\');\n\n  return "gltf:" + getExternalResourceCacheKey(gltfResource);\n};\n\n/**\n * Gets the buffer view cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Number} options.bufferViewId The bufferView ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {String} The buffer view cache key.\n * @private\n */\nResourceCacheKey.getBufferViewCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var bufferViewId = options.bufferViewId;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.bufferViewId", bufferViewId);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var bufferView = gltf.bufferViews[bufferViewId];\n  var bufferId = bufferView.buffer;\n  var buffer = gltf.buffers[bufferId];\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(bufferView, "EXT_meshopt_compression")) {\n    var meshopt = bufferView.extensions.EXT_meshopt_compression;\n    bufferId = meshopt.buffer;\n  }\n\n  var bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource\n  );\n\n  var bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return "buffer-view:" + bufferCacheKey + "-range-" + bufferViewCacheKey;\n};\n\n/**\n * Gets the Draco cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Object} options.draco The Draco extension object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {String} The Draco cache key.\n * @private\n */\nResourceCacheKey.getDracoCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var draco = options.draco;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.draco", draco);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  return "draco:" + getDracoCacheKey(gltf, draco, gltfResource, baseResource);\n};\n\n/**\n * Gets the vertex buffer cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {Number} [options.bufferViewId] The bufferView ID corresponding to the vertex buffer.\n * @param {Object} [options.draco] The Draco extension object.\n * @param {String} [options.attributeSemantic] The attribute semantic, e.g. POSITION or NORMAL.\n *\n * @exception {DeveloperError} One of options.bufferViewId and options.draco must be defined.\n * @exception {DeveloperError} When options.draco is defined options.attributeSemantic must also be defined.\n *\n * @returns {String} The vertex buffer cache key.\n * @private\n */\nResourceCacheKey.getVertexBufferCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var bufferViewId = options.bufferViewId;\n  var draco = options.draco;\n  var attributeSemantic = options.attributeSemantic;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n\n  var hasBufferViewId = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(bufferViewId);\n  var hasDraco = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(draco);\n  var hasAttributeSemantic = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(attributeSemantic);\n\n  if (hasBufferViewId === hasDraco) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "One of options.bufferViewId and options.draco must be defined."\n    );\n  }\n\n  if (hasDraco && !hasAttributeSemantic) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "When options.draco is defined options.attributeSemantic must also be defined."\n    );\n  }\n\n  if (hasDraco) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.draco", draco);\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("options.attributeSemantic", attributeSemantic);\n  }\n  //>>includeEnd(\'debug\');\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(draco)) {\n    var dracoCacheKey = getDracoCacheKey(\n      gltf,\n      draco,\n      gltfResource,\n      baseResource\n    );\n    return "vertex-buffer:" + dracoCacheKey + "-draco-" + attributeSemantic;\n  }\n\n  var bufferView = gltf.bufferViews[bufferViewId];\n  var bufferId = bufferView.buffer;\n  var buffer = gltf.buffers[bufferId];\n\n  var bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource\n  );\n\n  var bufferViewCacheKey = getBufferViewCacheKey(bufferView);\n\n  return "vertex-buffer:" + bufferCacheKey + "-range-" + bufferViewCacheKey;\n};\n\n/**\n * Gets the index buffer cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Number} options.accessorId The accessor ID corresponding to the index buffer.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {Object} [options.draco] The Draco extension object.\n *\n * @returns {String} The index buffer cache key.\n * @private\n */\nResourceCacheKey.getIndexBufferCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var accessorId = options.accessorId;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var draco = options.draco;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.accessorId", accessorId);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(draco)) {\n    var dracoCacheKey = getDracoCacheKey(\n      gltf,\n      draco,\n      gltfResource,\n      baseResource\n    );\n    return "index-buffer:" + dracoCacheKey + "-draco";\n  }\n\n  var accessor = gltf.accessors[accessorId];\n  var bufferViewId = accessor.bufferView;\n  var bufferView = gltf.bufferViews[bufferViewId];\n  var bufferId = bufferView.buffer;\n  var buffer = gltf.buffers[bufferId];\n\n  var bufferCacheKey = getBufferCacheKey(\n    buffer,\n    bufferId,\n    gltfResource,\n    baseResource\n  );\n\n  var accessorCacheKey = getAccessorCacheKey(accessor, bufferView);\n\n  return "index-buffer:" + bufferCacheKey + "-accessor-" + accessorCacheKey;\n};\n\n/**\n * Gets the image cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Number} options.imageId The image ID.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n *\n * @returns {String} The image cache key.\n * @private\n */\nResourceCacheKey.getImageCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var imageId = options.imageId;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number("options.imageId", imageId);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  //>>includeEnd(\'debug\');\n\n  var imageCacheKey = getImageCacheKey(\n    gltf,\n    imageId,\n    gltfResource,\n    baseResource\n  );\n\n  return "image:" + imageCacheKey;\n};\n\n/**\n * Gets the texture cache key.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.gltf The glTF JSON.\n * @param {Object} options.textureInfo The texture info object.\n * @param {Resource} options.gltfResource The {@link Resource} containing the glTF.\n * @param {Resource} options.baseResource The {@link Resource} that paths in the glTF JSON are relative to.\n * @param {SupportedImageFormats} options.supportedImageFormats The supported image formats.\n *\n * @returns {String} The texture cache key.\n * @private\n */\nResourceCacheKey.getTextureCacheKey = function (options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var gltf = options.gltf;\n  var textureInfo = options.textureInfo;\n  var gltfResource = options.gltfResource;\n  var baseResource = options.baseResource;\n  var supportedImageFormats = options.supportedImageFormats;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltf", gltf);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.textureInfo", textureInfo);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.gltfResource", gltfResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.baseResource", baseResource);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.supportedImageFormats", supportedImageFormats);\n  //>>includeEnd(\'debug\');\n\n  var textureId = textureInfo.index;\n\n  var imageId = _GltfLoaderUtil_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].getImageIdFromTexture */ .Z.getImageIdFromTexture({\n    gltf: gltf,\n    textureId: textureId,\n    supportedImageFormats: supportedImageFormats,\n  });\n\n  var imageCacheKey = getImageCacheKey(\n    gltf,\n    imageId,\n    gltfResource,\n    baseResource\n  );\n\n  // Include the sampler cache key in the texture cache key since textures and\n  // samplers are coupled in WebGL 1. When upgrading to WebGL 2 consider\n  // removing the sampleCacheKey here.\n  var samplerCacheKey = getSamplerCacheKey(gltf, textureInfo);\n\n  return "texture:" + imageCacheKey + "-sampler-" + samplerCacheKey;\n};\n\n/* harmony default export */ __webpack_exports__["Z"] = (ResourceCacheKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///72638\n')},29789:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ResourceLoader; }\n/* harmony export */ });\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9407);\n\n\n\n\n\n\n/**\n * A cache resource.\n * <p>\n * This type describes an interface and is not intended to be instantiated directly.\n * </p>\n *\n * @alias ResourceLoader\n * @constructor\n *\n * @see ResourceCache\n *\n * @private\n */\nfunction ResourceLoader() {}\n\nObject.defineProperties(ResourceLoader.prototype, {\n  /**\n   * A promise that resolves to the resource when the resource is ready.\n   *\n   * @memberof ResourceLoader.prototype\n   *\n   * @type {Promise.<ResourceLoader>}\n   * @readonly\n   * @private\n   */\n  promise: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n    },\n  },\n  /**\n   * The cache key of the resource.\n   *\n   * @memberof ResourceLoader.prototype\n   *\n   * @type {String}\n   * @readonly\n   * @private\n   */\n  cacheKey: {\n    // eslint-disable-next-line getter-return\n    get: function () {\n      _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n    },\n  },\n});\n\n/**\n * Loads the resource.\n * @private\n */\nResourceLoader.prototype.load = function () {\n  _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].throwInstantiationError */ .Z.throwInstantiationError();\n};\n\n/**\n * Unloads the resource.\n * @private\n */\nResourceLoader.prototype.unload = function () {};\n\n/**\n * Processes the resource until it becomes ready.\n *\n * @param {FrameState} frameState The frame state.\n * @private\n */\nResourceLoader.prototype.process = function (frameState) {};\n\n/**\n * Constructs a {@link RuntimeError} from an errorMessage and an error.\n *\n * @param {String} errorMessage The error message.\n * @param {Error} [error] The error.\n *\n * @returns {RuntimeError} The runtime error.\n * @private\n */\nResourceLoader.prototype.getError = function (errorMessage, error) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.string */ .Z.typeOf.string("errorMessage", errorMessage);\n  //>>includeEnd(\'debug\');\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(error)) {\n    errorMessage += "\\n" + error.message;\n  }\n  return new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(errorMessage);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ResourceLoader#destroy\n * @private\n */\nResourceLoader.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the loaded resource.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * resourceLoader = resourceLoader && resourceLoader.destroy();\n *\n * @see ResourceLoader#isDestroyed\n * @private\n */\nResourceLoader.prototype.destroy = function () {\n  this.unload();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk3ODkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUM7QUFDSTtBQUNZO0FBQ0U7QUFDSjs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx3SEFBc0M7QUFDNUMsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sd0hBQXNDO0FBQzVDLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSx3SEFBc0M7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEI7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDJGQUFtQjtBQUNyQjs7QUFFQSxNQUFNLHFFQUFPO0FBQ2I7QUFDQTtBQUNBLGFBQWEsc0VBQVk7QUFDekI7O0FBRUE7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQSx3REFBd0Q7QUFDeEQsOENBQThDLHNCQUFzQjtBQUNwRTtBQUNBLGFBQWEsU0FBUyxnREFBZ0Q7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELDhDQUE4QyxzQkFBc0I7QUFDcEU7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsMkVBQWE7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvUmVzb3VyY2VMb2FkZXIuanM/NzkxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBkZXN0cm95T2JqZWN0IGZyb20gXCIuLi9Db3JlL2Rlc3Ryb3lPYmplY3QuanNcIjtcbmltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuaW1wb3J0IFJ1bnRpbWVFcnJvciBmcm9tIFwiLi4vQ29yZS9SdW50aW1lRXJyb3IuanNcIjtcblxuLyoqXG4gKiBBIGNhY2hlIHJlc291cmNlLlxuICogPHA+XG4gKiBUaGlzIHR5cGUgZGVzY3JpYmVzIGFuIGludGVyZmFjZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAqIDwvcD5cbiAqXG4gKiBAYWxpYXMgUmVzb3VyY2VMb2FkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBzZWUgUmVzb3VyY2VDYWNoZVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlc291cmNlTG9hZGVyKCkge31cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcmVzb3VyY2Ugd2hlbiB0aGUgcmVzb3VyY2UgaXMgcmVhZHkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBSZXNvdXJjZUxvYWRlci5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge1Byb21pc2UuPFJlc291cmNlTG9hZGVyPn1cbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm9taXNlOiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdldHRlci1yZXR1cm5cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIERldmVsb3BlckVycm9yLnRocm93SW5zdGFudGlhdGlvbkVycm9yKCk7XG4gICAgfSxcbiAgfSxcbiAgLyoqXG4gICAqIFRoZSBjYWNoZSBrZXkgb2YgdGhlIHJlc291cmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEByZWFkb25seVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FjaGVLZXk6IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2V0dGVyLXJldHVyblxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IoKTtcbiAgICB9LFxuICB9LFxufSk7XG5cbi8qKlxuICogTG9hZHMgdGhlIHJlc291cmNlLlxuICogQHByaXZhdGVcbiAqL1xuUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gIERldmVsb3BlckVycm9yLnRocm93SW5zdGFudGlhdGlvbkVycm9yKCk7XG59O1xuXG4vKipcbiAqIFVubG9hZHMgdGhlIHJlc291cmNlLlxuICogQHByaXZhdGVcbiAqL1xuUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vKipcbiAqIFByb2Nlc3NlcyB0aGUgcmVzb3VyY2UgdW50aWwgaXQgYmVjb21lcyByZWFkeS5cbiAqXG4gKiBAcGFyYW0ge0ZyYW1lU3RhdGV9IGZyYW1lU3RhdGUgVGhlIGZyYW1lIHN0YXRlLlxuICogQHByaXZhdGVcbiAqL1xuUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoZnJhbWVTdGF0ZSkge307XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHtAbGluayBSdW50aW1lRXJyb3J9IGZyb20gYW4gZXJyb3JNZXNzYWdlIGFuZCBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXJyb3JNZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtFcnJvcn0gW2Vycm9yXSBUaGUgZXJyb3IuXG4gKlxuICogQHJldHVybnMge1J1bnRpbWVFcnJvcn0gVGhlIHJ1bnRpbWUgZXJyb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5SZXNvdXJjZUxvYWRlci5wcm90b3R5cGUuZ2V0RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JNZXNzYWdlLCBlcnJvcikge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2Yuc3RyaW5nKFwiZXJyb3JNZXNzYWdlXCIsIGVycm9yTWVzc2FnZSk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIGlmIChkZWZpbmVkKGVycm9yKSkge1xuICAgIGVycm9yTWVzc2FnZSArPSBcIlxcblwiICsgZXJyb3IubWVzc2FnZTtcbiAgfVxuICByZXR1cm4gbmV3IFJ1bnRpbWVFcnJvcihlcnJvck1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZDsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIDxiciAvPjxiciAvPlxuICogSWYgdGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZCwgaXQgc2hvdWxkIG5vdCBiZSB1c2VkOyBjYWxsaW5nIGFueSBmdW5jdGlvbiBvdGhlciB0aGFuXG4gKiA8Y29kZT5pc0Rlc3Ryb3llZDwvY29kZT4gd2lsbCByZXN1bHQgaW4gYSB7QGxpbmsgRGV2ZWxvcGVyRXJyb3J9IGV4Y2VwdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZDsgb3RoZXJ3aXNlLCA8Y29kZT5mYWxzZTwvY29kZT4uXG4gKlxuICogQHNlZSBSZXNvdXJjZUxvYWRlciNkZXN0cm95XG4gKiBAcHJpdmF0ZVxuICovXG5SZXNvdXJjZUxvYWRlci5wcm90b3R5cGUuaXNEZXN0cm95ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIGxvYWRlZCByZXNvdXJjZS5cbiAqIDxiciAvPjxiciAvPlxuICogT25jZSBhbiBvYmplY3QgaXMgZGVzdHJveWVkLCBpdCBzaG91bGQgbm90IGJlIHVzZWQ7IGNhbGxpbmcgYW55IGZ1bmN0aW9uIG90aGVyIHRoYW5cbiAqIDxjb2RlPmlzRGVzdHJveWVkPC9jb2RlPiB3aWxsIHJlc3VsdCBpbiBhIHtAbGluayBEZXZlbG9wZXJFcnJvcn0gZXhjZXB0aW9uLiAgVGhlcmVmb3JlLFxuICogYXNzaWduIHRoZSByZXR1cm4gdmFsdWUgKDxjb2RlPnVuZGVmaW5lZDwvY29kZT4pIHRvIHRoZSBvYmplY3QgYXMgZG9uZSBpbiB0aGUgZXhhbXBsZS5cbiAqXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gVGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZCwgaS5lLiwgZGVzdHJveSgpIHdhcyBjYWxsZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIHJlc291cmNlTG9hZGVyID0gcmVzb3VyY2VMb2FkZXIgJiYgcmVzb3VyY2VMb2FkZXIuZGVzdHJveSgpO1xuICpcbiAqIEBzZWUgUmVzb3VyY2VMb2FkZXIjaXNEZXN0cm95ZWRcbiAqIEBwcml2YXRlXG4gKi9cblJlc291cmNlTG9hZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnVubG9hZCgpO1xuICByZXR1cm4gZGVzdHJveU9iamVjdCh0aGlzKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29789\n')},89356:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * The {@link ResourceLoader} state.\n *\n * @private\n */\nvar ResourceLoaderState = {\n  /**\n   * The resource has not yet been loaded.\n   *\n   * @type {Number}\n   * @constant\n   * @private\n   */\n  UNLOADED: 0,\n  /**\n   * The resource is loading. In this state, external resources are fetched as needed.\n   *\n   * @type {Number}\n   * @constant\n   * @private\n   */\n  LOADING: 1,\n  /**\n   * The resource has finished loading, but requires further processing. GPU resources are allocated in this state as needed.\n   *\n   * @type {Number}\n   * @constant\n   * @private\n   */\n  PROCESSING: 2,\n  /**\n   * The resource has finished loading and processing; the results are ready to be used.\n   *\n   * @type {Number}\n   * @constant\n   * @private\n   */\n  READY: 3,\n  /**\n   * The resource loading or processing has failed due to an error.\n   *\n   * @type {Number}\n   * @constant\n   * @private\n   */\n  FAILED: 4,\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(ResourceLoaderState));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkzNTYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxRQUFRLHNCQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxrQ0FBa0MsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9SZXNvdXJjZUxvYWRlclN0YXRlLmpzP2EyMDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUge0BsaW5rIFJlc291cmNlTG9hZGVyfSBzdGF0ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgUmVzb3VyY2VMb2FkZXJTdGF0ZSA9IHtcbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBoYXMgbm90IHlldCBiZWVuIGxvYWRlZC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBVTkxPQURFRDogMCxcbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBpcyBsb2FkaW5nLiBJbiB0aGlzIHN0YXRlLCBleHRlcm5hbCByZXNvdXJjZXMgYXJlIGZldGNoZWQgYXMgbmVlZGVkLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAY29uc3RhbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIExPQURJTkc6IDEsXG4gIC8qKlxuICAgKiBUaGUgcmVzb3VyY2UgaGFzIGZpbmlzaGVkIGxvYWRpbmcsIGJ1dCByZXF1aXJlcyBmdXJ0aGVyIHByb2Nlc3NpbmcuIEdQVSByZXNvdXJjZXMgYXJlIGFsbG9jYXRlZCBpbiB0aGlzIHN0YXRlIGFzIG5lZWRlZC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBQUk9DRVNTSU5HOiAyLFxuICAvKipcbiAgICogVGhlIHJlc291cmNlIGhhcyBmaW5pc2hlZCBsb2FkaW5nIGFuZCBwcm9jZXNzaW5nOyB0aGUgcmVzdWx0cyBhcmUgcmVhZHkgdG8gYmUgdXNlZC5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGNvbnN0YW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBSRUFEWTogMyxcbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBsb2FkaW5nIG9yIHByb2Nlc3NpbmcgaGFzIGZhaWxlZCBkdWUgdG8gYW4gZXJyb3IuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBjb25zdGFudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgRkFJTEVEOiA0LFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoUmVzb3VyY2VMb2FkZXJTdGF0ZSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///89356\n')}}]);