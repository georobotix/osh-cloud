"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[5571],{92244:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(72248);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52200);\n\n\n\n\nvar viewerPositionWCScratch = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction AutomaticUniform(options) {\n  this._size = options.size;\n  this._datatype = options.datatype;\n  this.getValue = options.getValue;\n}\n\nvar datatypeToGlsl = {};\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT] = "float";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2] = "vec2";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3] = "vec3";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4] = "vec4";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].INT */ .Z.INT] = "int";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].INT_VEC2 */ .Z.INT_VEC2] = "ivec2";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].INT_VEC3 */ .Z.INT_VEC3] = "ivec3";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].INT_VEC4 */ .Z.INT_VEC4] = "ivec4";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BOOL */ .Z.BOOL] = "bool";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BOOL_VEC2 */ .Z.BOOL_VEC2] = "bvec2";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BOOL_VEC3 */ .Z.BOOL_VEC3] = "bvec3";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BOOL_VEC4 */ .Z.BOOL_VEC4] = "bvec4";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT2 */ .Z.FLOAT_MAT2] = "mat2";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3] = "mat3";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4] = "mat4";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D] = "sampler2D";\ndatatypeToGlsl[_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SAMPLER_CUBE */ .Z.SAMPLER_CUBE] = "samplerCube";\n\nAutomaticUniform.prototype.getDeclaration = function (name) {\n  var declaration = "uniform " + datatypeToGlsl[this._datatype] + " " + name;\n\n  var size = this._size;\n  if (size === 1) {\n    declaration += ";";\n  } else {\n    declaration += "[" + size.toString() + "];";\n  }\n\n  return declaration;\n};\n\n/**\n * @private\n */\nvar AutomaticUniforms = {\n  /**\n   * An automatic GLSL uniform containing the viewport\'s <code>x</code>, <code>y</code>, <code>width</code>,\n   * and <code>height</code> properties in an <code>vec4</code>\'s <code>x</code>, <code>y</code>, <code>z</code>,\n   * and <code>w</code> components, respectively.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec4 czm_viewport;\n   *\n   * // Scale the window coordinate components to [0, 1] by dividing\n   * // by the viewport\'s width and height.\n   * vec2 v = gl_FragCoord.xy / czm_viewport.zw;\n   *\n   * @see Context#getViewport\n   */\n  czm_viewport: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4,\n    getValue: function (uniformState) {\n      return uniformState.viewportCartesian4;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 orthographic projection matrix that\n   * transforms window coordinates to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   * <br /><br />\n   * This transform is useful when a vertex shader inputs or manipulates window coordinates\n   * as done by {@link BillboardCollection}.\n   * <br /><br />\n   * Do not confuse {@link czm_viewportTransformation} with <code>czm_viewportOrthographic</code>.\n   * The former transforms from normalized device coordinates to window coordinates; the later transforms\n   * from window coordinates to clip coordinates, and is often used to assign to <code>gl_Position</code>.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_viewportOrthographic;\n   *\n   * // Example\n   * gl_Position = czm_viewportOrthographic * vec4(windowPosition, 0.0, 1.0);\n   *\n   * @see UniformState#viewportOrthographic\n   * @see czm_viewport\n   * @see czm_viewportTransformation\n   * @see BillboardCollection\n   */\n  czm_viewportOrthographic: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.viewportOrthographic;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 transformation matrix that\n   * transforms normalized device coordinates to window coordinates.  The context\'s\n   * full viewport is used, and the depth range is assumed to be <code>near = 0</code>\n   * and <code>far = 1</code>.\n   * <br /><br />\n   * This transform is useful when there is a need to manipulate window coordinates\n   * in a vertex shader as done by {@link BillboardCollection}.  In many cases,\n   * this matrix will not be used directly; instead, {@link czm_modelToWindowCoordinates}\n   * will be used to transform directly from model to window coordinates.\n   * <br /><br />\n   * Do not confuse <code>czm_viewportTransformation</code> with {@link czm_viewportOrthographic}.\n   * The former transforms from normalized device coordinates to window coordinates; the later transforms\n   * from window coordinates to clip coordinates, and is often used to assign to <code>gl_Position</code>.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_viewportTransformation;\n   *\n   * // Use czm_viewportTransformation as part of the\n   * // transform from model to window coordinates.\n   * vec4 q = czm_modelViewProjection * positionMC;               // model to clip coordinates\n   * q.xyz /= q.w;                                                // clip to normalized device coordinates (ndc)\n   * q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // ndc to window coordinates\n   *\n   * @see UniformState#viewportTransformation\n   * @see czm_viewport\n   * @see czm_viewportOrthographic\n   * @see czm_modelToWindowCoordinates\n   * @see BillboardCollection\n   */\n  czm_viewportTransformation: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.viewportTransformation;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the depth of the scene\n   * after the globe pass and then updated after the 3D Tiles pass.\n   * The depth is packed into an RGBA texture.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform sampler2D czm_globeDepthTexture;\n   *\n   * // Get the depth at the current fragment\n   * vec2 coords = gl_FragCoord.xy / czm_viewport.zw;\n   * float depth = czm_unpackDepth(texture2D(czm_globeDepthTexture, coords));\n   */\n  czm_globeDepthTexture: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D,\n    getValue: function (uniformState) {\n      return uniformState.globeDepthTexture;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model transformation matrix that\n   * transforms model coordinates to world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_model;\n   *\n   * // Example\n   * vec4 worldPosition = czm_model * modelPosition;\n   *\n   * @see UniformState#model\n   * @see czm_inverseModel\n   * @see czm_modelView\n   * @see czm_modelViewProjection\n   */\n  czm_model: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.model;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model transformation matrix that\n   * transforms world coordinates to model coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseModel;\n   *\n   * // Example\n   * vec4 modelPosition = czm_inverseModel * worldPosition;\n   *\n   * @see UniformState#inverseModel\n   * @see czm_model\n   * @see czm_inverseModelView\n   */\n  czm_inverseModel: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseModel;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 view transformation matrix that\n   * transforms world coordinates to eye coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_view;\n   *\n   * // Example\n   * vec4 eyePosition = czm_view * worldPosition;\n   *\n   * @see UniformState#view\n   * @see czm_viewRotation\n   * @see czm_modelView\n   * @see czm_viewProjection\n   * @see czm_modelViewProjection\n   * @see czm_inverseView\n   */\n  czm_view: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.view;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 view transformation matrix that\n   * transforms 3D world coordinates to eye coordinates.  In 3D mode, this is identical to\n   * {@link czm_view}, but in 2D and Columbus View it represents the view matrix\n   * as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_view3D;\n   *\n   * // Example\n   * vec4 eyePosition3D = czm_view3D * worldPosition3D;\n   *\n   * @see UniformState#view3D\n   * @see czm_view\n   */\n  czm_view3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.view3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 view rotation matrix that\n   * transforms vectors in world coordinates to eye coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_viewRotation;\n   *\n   * // Example\n   * vec3 eyeVector = czm_viewRotation * worldVector;\n   *\n   * @see UniformState#viewRotation\n   * @see czm_view\n   * @see czm_inverseView\n   * @see czm_inverseViewRotation\n   */\n  czm_viewRotation: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.viewRotation;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 view rotation matrix that\n   * transforms vectors in 3D world coordinates to eye coordinates.  In 3D mode, this is identical to\n   * {@link czm_viewRotation}, but in 2D and Columbus View it represents the view matrix\n   * as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_viewRotation3D;\n   *\n   * // Example\n   * vec3 eyeVector = czm_viewRotation3D * worldVector;\n   *\n   * @see UniformState#viewRotation3D\n   * @see czm_viewRotation\n   */\n  czm_viewRotation3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.viewRotation3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 transformation matrix that\n   * transforms from eye coordinates to world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseView;\n   *\n   * // Example\n   * vec4 worldPosition = czm_inverseView * eyePosition;\n   *\n   * @see UniformState#inverseView\n   * @see czm_view\n   * @see czm_inverseNormal\n   */\n  czm_inverseView: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseView;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 transformation matrix that\n   * transforms from 3D eye coordinates to world coordinates.  In 3D mode, this is identical to\n   * {@link czm_inverseView}, but in 2D and Columbus View it represents the inverse view matrix\n   * as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseView3D;\n   *\n   * // Example\n   * vec4 worldPosition = czm_inverseView3D * eyePosition;\n   *\n   * @see UniformState#inverseView3D\n   * @see czm_inverseView\n   */\n  czm_inverseView3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseView3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 rotation matrix that\n   * transforms vectors from eye coordinates to world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_inverseViewRotation;\n   *\n   * // Example\n   * vec4 worldVector = czm_inverseViewRotation * eyeVector;\n   *\n   * @see UniformState#inverseView\n   * @see czm_view\n   * @see czm_viewRotation\n   * @see czm_inverseViewRotation\n   */\n  czm_inverseViewRotation: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.inverseViewRotation;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 rotation matrix that\n   * transforms vectors from 3D eye coordinates to world coordinates.  In 3D mode, this is identical to\n   * {@link czm_inverseViewRotation}, but in 2D and Columbus View it represents the inverse view matrix\n   * as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_inverseViewRotation3D;\n   *\n   * // Example\n   * vec4 worldVector = czm_inverseViewRotation3D * eyeVector;\n   *\n   * @see UniformState#inverseView3D\n   * @see czm_inverseViewRotation\n   */\n  czm_inverseViewRotation3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.inverseViewRotation3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 projection transformation matrix that\n   * transforms eye coordinates to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_projection;\n   *\n   * // Example\n   * gl_Position = czm_projection * eyePosition;\n   *\n   * @see UniformState#projection\n   * @see czm_viewProjection\n   * @see czm_modelViewProjection\n   * @see czm_infiniteProjection\n   */\n  czm_projection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.projection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 inverse projection transformation matrix that\n   * transforms from clip coordinates to eye coordinates. Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseProjection;\n   *\n   * // Example\n   * vec4 eyePosition = czm_inverseProjection * clipPosition;\n   *\n   * @see UniformState#inverseProjection\n   * @see czm_projection\n   */\n  czm_inverseProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 projection transformation matrix with the far plane at infinity,\n   * that transforms eye coordinates to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.  An infinite far plane is used\n   * in algorithms like shadow volumes and GPU ray casting with proxy geometry to ensure that triangles\n   * are not clipped by the far plane.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_infiniteProjection;\n   *\n   * // Example\n   * gl_Position = czm_infiniteProjection * eyePosition;\n   *\n   * @see UniformState#infiniteProjection\n   * @see czm_projection\n   * @see czm_modelViewInfiniteProjection\n   */\n  czm_infiniteProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.infiniteProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model-view transformation matrix that\n   * transforms model coordinates to eye coordinates.\n   * <br /><br />\n   * Positions should be transformed to eye coordinates using <code>czm_modelView</code> and\n   * normals should be transformed using {@link czm_normal}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_modelView;\n   *\n   * // Example\n   * vec4 eyePosition = czm_modelView * modelPosition;\n   *\n   * // The above is equivalent to, but more efficient than:\n   * vec4 eyePosition = czm_view * czm_model * modelPosition;\n   *\n   * @see UniformState#modelView\n   * @see czm_model\n   * @see czm_view\n   * @see czm_modelViewProjection\n   * @see czm_normal\n   */\n  czm_modelView: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.modelView;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model-view transformation matrix that\n   * transforms 3D model coordinates to eye coordinates.  In 3D mode, this is identical to\n   * {@link czm_modelView}, but in 2D and Columbus View it represents the model-view matrix\n   * as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   * <br /><br />\n   * Positions should be transformed to eye coordinates using <code>czm_modelView3D</code> and\n   * normals should be transformed using {@link czm_normal3D}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_modelView3D;\n   *\n   * // Example\n   * vec4 eyePosition = czm_modelView3D * modelPosition;\n   *\n   * // The above is equivalent to, but more efficient than:\n   * vec4 eyePosition = czm_view3D * czm_model * modelPosition;\n   *\n   * @see UniformState#modelView3D\n   * @see czm_modelView\n   */\n  czm_modelView3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.modelView3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model-view transformation matrix that\n   * transforms model coordinates, relative to the eye, to eye coordinates.  This is used\n   * in conjunction with {@link czm_translateRelativeToEye}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_modelViewRelativeToEye;\n   *\n   * // Example\n   * attribute vec3 positionHigh;\n   * attribute vec3 positionLow;\n   *\n   * void main()\n   * {\n   *   vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\n   *   gl_Position = czm_projection * (czm_modelViewRelativeToEye * p);\n   * }\n   *\n   * @see czm_modelViewProjectionRelativeToEye\n   * @see czm_translateRelativeToEye\n   * @see EncodedCartesian3\n   */\n  czm_modelViewRelativeToEye: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.modelViewRelativeToEye;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 transformation matrix that\n   * transforms from eye coordinates to model coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseModelView;\n   *\n   * // Example\n   * vec4 modelPosition = czm_inverseModelView * eyePosition;\n   *\n   * @see UniformState#inverseModelView\n   * @see czm_modelView\n   */\n  czm_inverseModelView: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseModelView;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 transformation matrix that\n   * transforms from eye coordinates to 3D model coordinates.  In 3D mode, this is identical to\n   * {@link czm_inverseModelView}, but in 2D and Columbus View it represents the inverse model-view matrix\n   * as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseModelView3D;\n   *\n   * // Example\n   * vec4 modelPosition = czm_inverseModelView3D * eyePosition;\n   *\n   * @see UniformState#inverseModelView\n   * @see czm_inverseModelView\n   * @see czm_modelView3D\n   */\n  czm_inverseModelView3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseModelView3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 view-projection transformation matrix that\n   * transforms world coordinates to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_viewProjection;\n   *\n   * // Example\n   * vec4 gl_Position = czm_viewProjection * czm_model * modelPosition;\n   *\n   * // The above is equivalent to, but more efficient than:\n   * gl_Position = czm_projection * czm_view * czm_model * modelPosition;\n   *\n   * @see UniformState#viewProjection\n   * @see czm_view\n   * @see czm_projection\n   * @see czm_modelViewProjection\n   * @see czm_inverseViewProjection\n   */\n  czm_viewProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.viewProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 view-projection transformation matrix that\n   * transforms clip coordinates to world coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseViewProjection;\n   *\n   * // Example\n   * vec4 worldPosition = czm_inverseViewProjection * clipPosition;\n   *\n   * @see UniformState#inverseViewProjection\n   * @see czm_viewProjection\n   */\n  czm_inverseViewProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseViewProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model-view-projection transformation matrix that\n   * transforms model coordinates to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_modelViewProjection;\n   *\n   * // Example\n   * vec4 gl_Position = czm_modelViewProjection * modelPosition;\n   *\n   * // The above is equivalent to, but more efficient than:\n   * gl_Position = czm_projection * czm_view * czm_model * modelPosition;\n   *\n   * @see UniformState#modelViewProjection\n   * @see czm_model\n   * @see czm_view\n   * @see czm_projection\n   * @see czm_modelView\n   * @see czm_viewProjection\n   * @see czm_modelViewInfiniteProjection\n   * @see czm_inverseModelViewProjection\n   */\n  czm_modelViewProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.modelViewProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 inverse model-view-projection transformation matrix that\n   * transforms clip coordinates to model coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_inverseModelViewProjection;\n   *\n   * // Example\n   * vec4 modelPosition = czm_inverseModelViewProjection * clipPosition;\n   *\n   * @see UniformState#modelViewProjection\n   * @see czm_modelViewProjection\n   */\n  czm_inverseModelViewProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.inverseModelViewProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model-view-projection transformation matrix that\n   * transforms model coordinates, relative to the eye, to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.  This is used in\n   * conjunction with {@link czm_translateRelativeToEye}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_modelViewProjectionRelativeToEye;\n   *\n   * // Example\n   * attribute vec3 positionHigh;\n   * attribute vec3 positionLow;\n   *\n   * void main()\n   * {\n   *   vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\n   *   gl_Position = czm_modelViewProjectionRelativeToEye * p;\n   * }\n   *\n   * @see czm_modelViewRelativeToEye\n   * @see czm_translateRelativeToEye\n   * @see EncodedCartesian3\n   */\n  czm_modelViewProjectionRelativeToEye: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.modelViewProjectionRelativeToEye;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 4x4 model-view-projection transformation matrix that\n   * transforms model coordinates to clip coordinates.  Clip coordinates is the\n   * coordinate system for a vertex shader\'s <code>gl_Position</code> output.  The projection matrix places\n   * the far plane at infinity.  This is useful in algorithms like shadow volumes and GPU ray casting with\n   * proxy geometry to ensure that triangles are not clipped by the far plane.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat4 czm_modelViewInfiniteProjection;\n   *\n   * // Example\n   * vec4 gl_Position = czm_modelViewInfiniteProjection * modelPosition;\n   *\n   * // The above is equivalent to, but more efficient than:\n   * gl_Position = czm_infiniteProjection * czm_view * czm_model * modelPosition;\n   *\n   * @see UniformState#modelViewInfiniteProjection\n   * @see czm_model\n   * @see czm_view\n   * @see czm_infiniteProjection\n   * @see czm_modelViewProjection\n   */\n  czm_modelViewInfiniteProjection: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT4 */ .Z.FLOAT_MAT4,\n    getValue: function (uniformState) {\n      return uniformState.modelViewInfiniteProjection;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that indicates if the current camera is orthographic in 3D.\n   *\n   * @see UniformState#orthographicIn3D\n   */\n  czm_orthographicIn3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.orthographicIn3D ? 1 : 0;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 normal transformation matrix that\n   * transforms normal vectors in model coordinates to eye coordinates.\n   * <br /><br />\n   * Positions should be transformed to eye coordinates using {@link czm_modelView} and\n   * normals should be transformed using <code>czm_normal</code>.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_normal;\n   *\n   * // Example\n   * vec3 eyeNormal = czm_normal * normal;\n   *\n   * @see UniformState#normal\n   * @see czm_inverseNormal\n   * @see czm_modelView\n   */\n  czm_normal: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.normal;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 normal transformation matrix that\n   * transforms normal vectors in 3D model coordinates to eye coordinates.\n   * In 3D mode, this is identical to\n   * {@link czm_normal}, but in 2D and Columbus View it represents the normal transformation\n   * matrix as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   * <br /><br />\n   * Positions should be transformed to eye coordinates using {@link czm_modelView3D} and\n   * normals should be transformed using <code>czm_normal3D</code>.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_normal3D;\n   *\n   * // Example\n   * vec3 eyeNormal = czm_normal3D * normal;\n   *\n   * @see UniformState#normal3D\n   * @see czm_normal\n   */\n  czm_normal3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.normal3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 normal transformation matrix that\n   * transforms normal vectors in eye coordinates to model coordinates.  This is\n   * the opposite of the transform provided by {@link czm_normal}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_inverseNormal;\n   *\n   * // Example\n   * vec3 normalMC = czm_inverseNormal * normalEC;\n   *\n   * @see UniformState#inverseNormal\n   * @see czm_normal\n   * @see czm_modelView\n   * @see czm_inverseView\n   */\n  czm_inverseNormal: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.inverseNormal;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 normal transformation matrix that\n   * transforms normal vectors in eye coordinates to 3D model coordinates.  This is\n   * the opposite of the transform provided by {@link czm_normal}.\n   * In 3D mode, this is identical to\n   * {@link czm_inverseNormal}, but in 2D and Columbus View it represents the inverse normal transformation\n   * matrix as if the camera were at an equivalent location in 3D mode.  This is useful for lighting\n   * 2D and Columbus View in the same way that 3D is lit.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_inverseNormal3D;\n   *\n   * // Example\n   * vec3 normalMC = czm_inverseNormal3D * normalEC;\n   *\n   * @see UniformState#inverseNormal3D\n   * @see czm_inverseNormal\n   */\n  czm_inverseNormal3D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.inverseNormal3D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the height in meters of the\n   * eye (camera) above or below the ellipsoid.\n   *\n   * @see UniformState#eyeHeight\n   */\n  czm_eyeHeight: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.eyeHeight;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing height (<code>x</code>) and height squared (<code>y</code>)\n   * in meters of the eye (camera) above the 2D world plane. This uniform is only valid\n   * when the {@link SceneMode} is <code>SCENE2D</code>.\n   *\n   * @see UniformState#eyeHeight2D\n   */\n  czm_eyeHeight2D: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2,\n    getValue: function (uniformState) {\n      return uniformState.eyeHeight2D;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the near distance (<code>x</code>) and the far distance (<code>y</code>)\n   * of the frustum defined by the camera.  This is the largest possible frustum, not an individual\n   * frustum used for multi-frustum rendering.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec2 czm_entireFrustum;\n   *\n   * // Example\n   * float frustumLength = czm_entireFrustum.y - czm_entireFrustum.x;\n   *\n   * @see UniformState#entireFrustum\n   * @see czm_currentFrustum\n   */\n  czm_entireFrustum: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2,\n    getValue: function (uniformState) {\n      return uniformState.entireFrustum;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the near distance (<code>x</code>) and the far distance (<code>y</code>)\n   * of the frustum defined by the camera.  This is the individual\n   * frustum used for multi-frustum rendering.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec2 czm_currentFrustum;\n   *\n   * // Example\n   * float frustumLength = czm_currentFrustum.y - czm_currentFrustum.x;\n   *\n   * @see UniformState#currentFrustum\n   * @see czm_entireFrustum\n   */\n  czm_currentFrustum: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2,\n    getValue: function (uniformState) {\n      return uniformState.currentFrustum;\n    },\n  }),\n\n  /**\n   * The distances to the frustum planes. The top, bottom, left and right distances are\n   * the x, y, z, and w components, respectively.\n   */\n  czm_frustumPlanes: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4,\n    getValue: function (uniformState) {\n      return uniformState.frustumPlanes;\n    },\n  }),\n\n  /**\n   * Gets the far plane\'s distance from the near plane, plus 1.0.\n   */\n  czm_farDepthFromNearPlusOne: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.farDepthFromNearPlusOne;\n    },\n  }),\n\n  /**\n   * Gets the log2 of {@link AutomaticUniforms#czm_farDepthFromNearPlusOne}.\n   */\n  czm_log2FarDepthFromNearPlusOne: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.log2FarDepthFromNearPlusOne;\n    },\n  }),\n\n  /**\n   * Gets 1.0 divided by {@link AutomaticUniforms#czm_log2FarDepthFromNearPlusOne}.\n   */\n  czm_oneOverLog2FarDepthFromNearPlusOne: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.oneOverLog2FarDepthFromNearPlusOne;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the sun position in world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_sunPositionWC;\n   *\n   * @see UniformState#sunPositionWC\n   * @see czm_sunPositionColumbusView\n   * @see czm_sunDirectionWC\n   */\n  czm_sunPositionWC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.sunPositionWC;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the sun position in Columbus view world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_sunPositionColumbusView;\n   *\n   * @see UniformState#sunPositionColumbusView\n   * @see czm_sunPositionWC\n   */\n  czm_sunPositionColumbusView: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.sunPositionColumbusView;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the normalized direction to the sun in eye coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_sunDirectionEC;\n   *\n   * // Example\n   * float diffuse = max(dot(czm_sunDirectionEC, normalEC), 0.0);\n   *\n   * @see UniformState#sunDirectionEC\n   * @see czm_moonDirectionEC\n   * @see czm_sunDirectionWC\n   */\n  czm_sunDirectionEC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.sunDirectionEC;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the normalized direction to the sun in world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_sunDirectionWC;\n   *\n   * // Example\n   * float diffuse = max(dot(czm_sunDirectionWC, normalWC), 0.0);\n   *\n   * @see UniformState#sunDirectionWC\n   * @see czm_sunPositionWC\n   * @see czm_sunDirectionEC\n   */\n  czm_sunDirectionWC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.sunDirectionWC;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the normalized direction to the moon in eye coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_moonDirectionEC;\n   *\n   * // Example\n   * float diffuse = max(dot(czm_moonDirectionEC, normalEC), 0.0);\n   *\n   * @see UniformState#moonDirectionEC\n   * @see czm_sunDirectionEC\n   */\n  czm_moonDirectionEC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.moonDirectionEC;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the normalized direction to the scene\'s light source in eye coordinates.\n   * This is commonly used for directional lighting computations.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_lightDirectionEC;\n   *\n   * // Example\n   * float diffuse = max(dot(czm_lightDirectionEC, normalEC), 0.0);\n   *\n   * @see UniformState#lightDirectionEC\n   * @see czm_lightDirectionWC\n   */\n  czm_lightDirectionEC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.lightDirectionEC;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the normalized direction to the scene\'s light source in world coordinates.\n   * This is commonly used for directional lighting computations.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_lightDirectionWC;\n   *\n   * // Example\n   * float diffuse = max(dot(czm_lightDirectionWC, normalWC), 0.0);\n   *\n   * @see UniformState#lightDirectionWC\n   * @see czm_lightDirectionEC\n   */\n  czm_lightDirectionWC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.lightDirectionWC;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that represents the color of light emitted by the scene\'s light source. This\n   * is equivalent to the light color multiplied by the light intensity limited to a maximum luminance of 1.0\n   * suitable for non-HDR lighting.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_lightColor;\n   *\n   * // Example\n   * vec3 diffuseColor = czm_lightColor * max(dot(czm_lightDirectionWC, normalWC), 0.0);\n   *\n   * @see UniformState#lightColor\n   * @see czm_lightColorHdr\n   */\n  czm_lightColor: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.lightColor;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that represents the high dynamic range color of light emitted by the scene\'s light\n   * source. This is equivalent to the light color multiplied by the light intensity suitable for HDR lighting.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_lightColorHdr;\n   *\n   * // Example\n   * vec3 diffuseColor = czm_lightColorHdr * max(dot(czm_lightDirectionWC, normalWC), 0.0);\n   *\n   * @see UniformState#lightColorHdr\n   * @see czm_lightColor\n   */\n  czm_lightColorHdr: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.lightColorHdr;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the high bits of the camera position in model\n   * coordinates.  This is used for GPU RTE to eliminate jittering artifacts when rendering\n   * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_encodedCameraPositionMCHigh;\n   *\n   * @see czm_encodedCameraPositionMCLow\n   * @see czm_modelViewRelativeToEye\n   * @see czm_modelViewProjectionRelativeToEye\n   */\n  czm_encodedCameraPositionMCHigh: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.encodedCameraPositionMCHigh;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the low bits of the camera position in model\n   * coordinates.  This is used for GPU RTE to eliminate jittering artifacts when rendering\n   * as described in {@linkhttp://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_encodedCameraPositionMCLow;\n   *\n   * @see czm_encodedCameraPositionMCHigh\n   * @see czm_modelViewRelativeToEye\n   * @see czm_modelViewProjectionRelativeToEye\n   */\n  czm_encodedCameraPositionMCLow: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.encodedCameraPositionMCLow;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the position of the viewer (camera) in world coordinates.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3 czm_viewerPositionWC;\n   */\n  czm_viewerPositionWC: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].getTranslation */ .Z.getTranslation(\n        uniformState.inverseView,\n        viewerPositionWCScratch\n      );\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the frame number. This uniform is automatically incremented\n   * every frame.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform float czm_frameNumber;\n   */\n  czm_frameNumber: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.frameState.frameNumber;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the current morph transition time between\n   * 2D/Columbus View and 3D, with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform float czm_morphTime;\n   *\n   * // Example\n   * vec4 p = czm_columbusViewMorph(position2D, position3D, czm_morphTime);\n   */\n  czm_morphTime: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.frameState.morphTime;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the current {@link SceneMode}, expressed\n   * as a float.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform float czm_sceneMode;\n   *\n   * // Example\n   * if (czm_sceneMode == czm_sceneMode2D)\n   * {\n   *     eyeHeightSq = czm_eyeHeight2D.y;\n   * }\n   *\n   * @see czm_sceneMode2D\n   * @see czm_sceneModeColumbusView\n   * @see czm_sceneMode3D\n   * @see czm_sceneModeMorphing\n   */\n  czm_sceneMode: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.frameState.mode;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the current rendering pass.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform float czm_pass;\n   *\n   * // Example\n   * if ((czm_pass == czm_passTranslucent) && isOpaque())\n   * {\n   *     gl_Position *= 0.0; // Cull opaque geometry in the translucent pass\n   * }\n   */\n  czm_pass: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.pass;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the current scene background color.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec4 czm_backgroundColor;\n   *\n   * // Example: If the given color\'s RGB matches the background color, invert it.\n   * vec4 adjustColorForContrast(vec4 color)\n   * {\n   *     if (czm_backgroundColor.rgb == color.rgb)\n   *     {\n   *         color.rgb = vec3(1.0) - color.rgb;\n   *     }\n   *\n   *     return color;\n   * }\n   */\n  czm_backgroundColor: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4,\n    getValue: function (uniformState) {\n      return uniformState.backgroundColor;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the BRDF look up texture used for image-based lighting computations.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform sampler2D czm_brdfLut;\n   *\n   * // Example: For a given roughness and NdotV value, find the material\'s BRDF information in the red and green channels\n   * float roughness = 0.5;\n   * float NdotV = dot(normal, view);\n   * vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, 1.0 - roughness)).rg;\n   */\n  czm_brdfLut: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D,\n    getValue: function (uniformState) {\n      return uniformState.brdfLut;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the environment map used within the scene.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform samplerCube czm_environmentMap;\n   *\n   * // Example: Create a perfect reflection of the environment map on a  model\n   * float reflected = reflect(view, normal);\n   * vec4 reflectedColor = textureCube(czm_environmentMap, reflected);\n   */\n  czm_environmentMap: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SAMPLER_CUBE */ .Z.SAMPLER_CUBE,\n    getValue: function (uniformState) {\n      return uniformState.environmentMap;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the specular environment map atlas used within the scene.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform sampler2D czm_specularEnvironmentMaps;\n   */\n  czm_specularEnvironmentMaps: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].SAMPLER_2D */ .Z.SAMPLER_2D,\n    getValue: function (uniformState) {\n      return uniformState.specularEnvironmentMaps;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the size of the specular environment map atlas used within the scene.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec2 czm_specularEnvironmentMapSize;\n   */\n  czm_specularEnvironmentMapSize: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC2 */ .Z.FLOAT_VEC2,\n    getValue: function (uniformState) {\n      return uniformState.specularEnvironmentMapsDimensions;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the maximum level-of-detail of the specular environment map atlas used within the scene.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform float czm_specularEnvironmentMapsMaximumLOD;\n   */\n  czm_specularEnvironmentMapsMaximumLOD: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.specularEnvironmentMapsMaximumLOD;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform containing the spherical harmonic coefficients used within the scene.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform vec3[9] czm_sphericalHarmonicCoefficients;\n   */\n  czm_sphericalHarmonicCoefficients: new AutomaticUniform({\n    size: 9,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.sphericalHarmonicCoefficients;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing a 3x3 rotation matrix that transforms\n   * from True Equator Mean Equinox (TEME) axes to the pseudo-fixed axes at the current scene time.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform mat3 czm_temeToPseudoFixed;\n   *\n   * // Example\n   * vec3 pseudoFixed = czm_temeToPseudoFixed * teme;\n   *\n   * @see UniformState#temeToPseudoFixedMatrix\n   * @see Transforms.computeTemeToPseudoFixedMatrix\n   */\n  czm_temeToPseudoFixed: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_MAT3 */ .Z.FLOAT_MAT3,\n    getValue: function (uniformState) {\n      return uniformState.temeToPseudoFixedMatrix;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the ratio of canvas coordinate space to canvas pixel space.\n   *\n   * @example\n   * uniform float czm_pixelRatio;\n   */\n  czm_pixelRatio: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.pixelRatio;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform scalar used to mix a color with the fog color based on the distance to the camera.\n   *\n   * @see czm_fog\n   */\n  czm_fogDensity: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.fogDensity;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the splitter position to use when rendering imagery layers with a splitter.\n   * This will be in pixel coordinates relative to the canvas.\n   *\n   * @example\n   * // GLSL declaration\n   * uniform float czm_imagerySplitPosition;\n   */\n  czm_imagerySplitPosition: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.imagerySplitPosition;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform scalar representing the geometric tolerance per meter\n   */\n  czm_geometricToleranceOverMeter: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.geometricToleranceOverMeter;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform representing the distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always be applied. When less than zero,\n   * the depth test should never be applied.\n   */\n  czm_minimumDisableDepthTestDistance: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.minimumDisableDepthTestDistance;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that will be the highlight color of unclassified 3D Tiles.\n   */\n  czm_invertClassificationColor: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC4 */ .Z.FLOAT_VEC4,\n    getValue: function (uniformState) {\n      return uniformState.invertClassificationColor;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that is used for gamma correction.\n   */\n  czm_gamma: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT */ .Z.FLOAT,\n    getValue: function (uniformState) {\n      return uniformState.gamma;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that stores the ellipsoid radii.\n   */\n  czm_ellipsoidRadii: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.ellipsoid.radii;\n    },\n  }),\n\n  /**\n   * An automatic GLSL uniform that stores the ellipsoid inverse radii.\n   */\n  czm_ellipsoidInverseRadii: new AutomaticUniform({\n    size: 1,\n    datatype: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].FLOAT_VEC3 */ .Z.FLOAT_VEC3,\n    getValue: function (uniformState) {\n      return uniformState.ellipsoid.oneOverRadii;\n    },\n  }),\n};\n/* harmony default export */ __webpack_exports__["Z"] = (AutomaticUniforms);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIyNDQuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQStDO0FBQ047QUFDYzs7QUFFdkQsa0NBQWtDLG9FQUFVOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxvRkFBb0I7QUFDbkMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSxnRkFBa0I7QUFDakMsZUFBZSwwRkFBdUI7QUFDdEMsZUFBZSwwRkFBdUI7QUFDdEMsZUFBZSwwRkFBdUI7QUFDdEMsZUFBZSxrRkFBbUI7QUFDbEMsZUFBZSw0RkFBd0I7QUFDdkMsZUFBZSw0RkFBd0I7QUFDdkMsZUFBZSw0RkFBd0I7QUFDdkMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSw4RkFBeUI7QUFDeEMsZUFBZSxrR0FBMkI7O0FBRTFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixJQUFJO0FBQ0osOENBQThDO0FBQzlDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQSxxQkFBcUIsa0NBQWtDO0FBQ3ZELHFGQUFxRjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwQkFBMEI7QUFDOUQsNENBQTRDLFVBQVU7QUFDdEQ7QUFDQTtBQUNBLGtFQUFrRSwrQkFBK0I7QUFDakcscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEUsa0VBQWtFO0FBQ2xFLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsTUFBTSxlQUFlO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsTUFBTSx1QkFBdUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsTUFBTSxzQkFBc0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxNQUFNLDhCQUE4QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsaUJBQWlCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLE1BQU0sb0JBQW9CO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLG1CQUFtQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsaUNBQWlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxNQUFNLDJCQUEyQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlDQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUFvQjtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QscUJBQXFCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0saUJBQWlCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCx1QkFBdUI7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsaUJBQWlCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsaUJBQWlCO0FBQ2pFO0FBQ0EsTUFBTSx3QkFBd0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUFvQjtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUFvQjtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQSx1QkFBdUIsb0RBQW9EO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0ZBQW9CO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBLDBCQUEwQix3REFBd0Q7QUFDbEY7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvRkFBb0I7QUFDbEM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsaUdBQWlHO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdHQUFnRztBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0EsYUFBYSwrRkFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUFvQjtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUFvQjtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQSx5REFBeUQsZ0JBQWdCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvRkFBb0I7QUFDbEM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvRkFBb0I7QUFDbEM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEZBQXlCO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0dBQTJCO0FBQ3pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0ZBQW9CO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0ZBQW9CO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0ZBQW9CO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0ZBQW9CO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvRkFBb0I7QUFDbEM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvRkFBb0I7QUFDbEM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0ZBQW9CO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4RkFBeUI7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhGQUF5QjtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLHlEQUFlLGlCQUFpQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1JlbmRlcmVyL0F1dG9tYXRpY1VuaWZvcm1zLmpzP2Q0OGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL0NvcmUvTWF0cml4NC5qc1wiO1xuaW1wb3J0IFdlYkdMQ29uc3RhbnRzIGZyb20gXCIuLi9Db3JlL1dlYkdMQ29uc3RhbnRzLmpzXCI7XG5cbnZhciB2aWV3ZXJQb3NpdGlvbldDU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG5cbmZ1bmN0aW9uIEF1dG9tYXRpY1VuaWZvcm0ob3B0aW9ucykge1xuICB0aGlzLl9zaXplID0gb3B0aW9ucy5zaXplO1xuICB0aGlzLl9kYXRhdHlwZSA9IG9wdGlvbnMuZGF0YXR5cGU7XG4gIHRoaXMuZ2V0VmFsdWUgPSBvcHRpb25zLmdldFZhbHVlO1xufVxuXG52YXIgZGF0YXR5cGVUb0dsc2wgPSB7fTtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLkZMT0FUXSA9IFwiZmxvYXRcIjtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzJdID0gXCJ2ZWMyXCI7XG5kYXRhdHlwZVRvR2xzbFtXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMzXSA9IFwidmVjM1wiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDNF0gPSBcInZlYzRcIjtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLklOVF0gPSBcImludFwiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuSU5UX1ZFQzJdID0gXCJpdmVjMlwiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuSU5UX1ZFQzNdID0gXCJpdmVjM1wiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuSU5UX1ZFQzRdID0gXCJpdmVjNFwiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuQk9PTF0gPSBcImJvb2xcIjtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLkJPT0xfVkVDMl0gPSBcImJ2ZWMyXCI7XG5kYXRhdHlwZVRvR2xzbFtXZWJHTENvbnN0YW50cy5CT09MX1ZFQzNdID0gXCJidmVjM1wiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuQk9PTF9WRUM0XSA9IFwiYnZlYzRcIjtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDJdID0gXCJtYXQyXCI7XG5kYXRhdHlwZVRvR2xzbFtXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzXSA9IFwibWF0M1wiO1xuZGF0YXR5cGVUb0dsc2xbV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNF0gPSBcIm1hdDRcIjtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLlNBTVBMRVJfMkRdID0gXCJzYW1wbGVyMkRcIjtcbmRhdGF0eXBlVG9HbHNsW1dlYkdMQ29uc3RhbnRzLlNBTVBMRVJfQ1VCRV0gPSBcInNhbXBsZXJDdWJlXCI7XG5cbkF1dG9tYXRpY1VuaWZvcm0ucHJvdG90eXBlLmdldERlY2xhcmF0aW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGRlY2xhcmF0aW9uID0gXCJ1bmlmb3JtIFwiICsgZGF0YXR5cGVUb0dsc2xbdGhpcy5fZGF0YXR5cGVdICsgXCIgXCIgKyBuYW1lO1xuXG4gIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgaWYgKHNpemUgPT09IDEpIHtcbiAgICBkZWNsYXJhdGlvbiArPSBcIjtcIjtcbiAgfSBlbHNlIHtcbiAgICBkZWNsYXJhdGlvbiArPSBcIltcIiArIHNpemUudG9TdHJpbmcoKSArIFwiXTtcIjtcbiAgfVxuXG4gIHJldHVybiBkZWNsYXJhdGlvbjtcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xudmFyIEF1dG9tYXRpY1VuaWZvcm1zID0ge1xuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSBjb250YWluaW5nIHRoZSB2aWV3cG9ydCdzIDxjb2RlPng8L2NvZGU+LCA8Y29kZT55PC9jb2RlPiwgPGNvZGU+d2lkdGg8L2NvZGU+LFxuICAgKiBhbmQgPGNvZGU+aGVpZ2h0PC9jb2RlPiBwcm9wZXJ0aWVzIGluIGFuIDxjb2RlPnZlYzQ8L2NvZGU+J3MgPGNvZGU+eDwvY29kZT4sIDxjb2RlPnk8L2NvZGU+LCA8Y29kZT56PC9jb2RlPixcbiAgICogYW5kIDxjb2RlPnc8L2NvZGU+IGNvbXBvbmVudHMsIHJlc3BlY3RpdmVseS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHZlYzQgY3ptX3ZpZXdwb3J0O1xuICAgKlxuICAgKiAvLyBTY2FsZSB0aGUgd2luZG93IGNvb3JkaW5hdGUgY29tcG9uZW50cyB0byBbMCwgMV0gYnkgZGl2aWRpbmdcbiAgICogLy8gYnkgdGhlIHZpZXdwb3J0J3Mgd2lkdGggYW5kIGhlaWdodC5cbiAgICogdmVjMiB2ID0gZ2xfRnJhZ0Nvb3JkLnh5IC8gY3ptX3ZpZXdwb3J0Lnp3O1xuICAgKlxuICAgKiBAc2VlIENvbnRleHQjZ2V0Vmlld3BvcnRcbiAgICovXG4gIGN6bV92aWV3cG9ydDogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUudmlld3BvcnRDYXJ0ZXNpYW40O1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDR4NCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIHdpbmRvdyBjb29yZGluYXRlcyB0byBjbGlwIGNvb3JkaW5hdGVzLiAgQ2xpcCBjb29yZGluYXRlcyBpcyB0aGVcbiAgICogY29vcmRpbmF0ZSBzeXN0ZW0gZm9yIGEgdmVydGV4IHNoYWRlcidzIDxjb2RlPmdsX1Bvc2l0aW9uPC9jb2RlPiBvdXRwdXQuXG4gICAqIDxiciAvPjxiciAvPlxuICAgKiBUaGlzIHRyYW5zZm9ybSBpcyB1c2VmdWwgd2hlbiBhIHZlcnRleCBzaGFkZXIgaW5wdXRzIG9yIG1hbmlwdWxhdGVzIHdpbmRvdyBjb29yZGluYXRlc1xuICAgKiBhcyBkb25lIGJ5IHtAbGluayBCaWxsYm9hcmRDb2xsZWN0aW9ufS5cbiAgICogPGJyIC8+PGJyIC8+XG4gICAqIERvIG5vdCBjb25mdXNlIHtAbGluayBjem1fdmlld3BvcnRUcmFuc2Zvcm1hdGlvbn0gd2l0aCA8Y29kZT5jem1fdmlld3BvcnRPcnRob2dyYXBoaWM8L2NvZGU+LlxuICAgKiBUaGUgZm9ybWVyIHRyYW5zZm9ybXMgZnJvbSBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlcyB0byB3aW5kb3cgY29vcmRpbmF0ZXM7IHRoZSBsYXRlciB0cmFuc2Zvcm1zXG4gICAqIGZyb20gd2luZG93IGNvb3JkaW5hdGVzIHRvIGNsaXAgY29vcmRpbmF0ZXMsIGFuZCBpcyBvZnRlbiB1c2VkIHRvIGFzc2lnbiB0byA8Y29kZT5nbF9Qb3NpdGlvbjwvY29kZT4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQ0IGN6bV92aWV3cG9ydE9ydGhvZ3JhcGhpYztcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiBnbF9Qb3NpdGlvbiA9IGN6bV92aWV3cG9ydE9ydGhvZ3JhcGhpYyAqIHZlYzQod2luZG93UG9zaXRpb24sIDAuMCwgMS4wKTtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjdmlld3BvcnRPcnRob2dyYXBoaWNcbiAgICogQHNlZSBjem1fdmlld3BvcnRcbiAgICogQHNlZSBjem1fdmlld3BvcnRUcmFuc2Zvcm1hdGlvblxuICAgKiBAc2VlIEJpbGxib2FyZENvbGxlY3Rpb25cbiAgICovXG4gIGN6bV92aWV3cG9ydE9ydGhvZ3JhcGhpYzogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUudmlld3BvcnRPcnRob2dyYXBoaWM7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZXMgdG8gd2luZG93IGNvb3JkaW5hdGVzLiAgVGhlIGNvbnRleHQnc1xuICAgKiBmdWxsIHZpZXdwb3J0IGlzIHVzZWQsIGFuZCB0aGUgZGVwdGggcmFuZ2UgaXMgYXNzdW1lZCB0byBiZSA8Y29kZT5uZWFyID0gMDwvY29kZT5cbiAgICogYW5kIDxjb2RlPmZhciA9IDE8L2NvZGU+LlxuICAgKiA8YnIgLz48YnIgLz5cbiAgICogVGhpcyB0cmFuc2Zvcm0gaXMgdXNlZnVsIHdoZW4gdGhlcmUgaXMgYSBuZWVkIHRvIG1hbmlwdWxhdGUgd2luZG93IGNvb3JkaW5hdGVzXG4gICAqIGluIGEgdmVydGV4IHNoYWRlciBhcyBkb25lIGJ5IHtAbGluayBCaWxsYm9hcmRDb2xsZWN0aW9ufS4gIEluIG1hbnkgY2FzZXMsXG4gICAqIHRoaXMgbWF0cml4IHdpbGwgbm90IGJlIHVzZWQgZGlyZWN0bHk7IGluc3RlYWQsIHtAbGluayBjem1fbW9kZWxUb1dpbmRvd0Nvb3JkaW5hdGVzfVxuICAgKiB3aWxsIGJlIHVzZWQgdG8gdHJhbnNmb3JtIGRpcmVjdGx5IGZyb20gbW9kZWwgdG8gd2luZG93IGNvb3JkaW5hdGVzLlxuICAgKiA8YnIgLz48YnIgLz5cbiAgICogRG8gbm90IGNvbmZ1c2UgPGNvZGU+Y3ptX3ZpZXdwb3J0VHJhbnNmb3JtYXRpb248L2NvZGU+IHdpdGgge0BsaW5rIGN6bV92aWV3cG9ydE9ydGhvZ3JhcGhpY30uXG4gICAqIFRoZSBmb3JtZXIgdHJhbnNmb3JtcyBmcm9tIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzIHRvIHdpbmRvdyBjb29yZGluYXRlczsgdGhlIGxhdGVyIHRyYW5zZm9ybXNcbiAgICogZnJvbSB3aW5kb3cgY29vcmRpbmF0ZXMgdG8gY2xpcCBjb29yZGluYXRlcywgYW5kIGlzIG9mdGVuIHVzZWQgdG8gYXNzaWduIHRvIDxjb2RlPmdsX1Bvc2l0aW9uPC9jb2RlPi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX3ZpZXdwb3J0VHJhbnNmb3JtYXRpb247XG4gICAqXG4gICAqIC8vIFVzZSBjem1fdmlld3BvcnRUcmFuc2Zvcm1hdGlvbiBhcyBwYXJ0IG9mIHRoZVxuICAgKiAvLyB0cmFuc2Zvcm0gZnJvbSBtb2RlbCB0byB3aW5kb3cgY29vcmRpbmF0ZXMuXG4gICAqIHZlYzQgcSA9IGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uICogcG9zaXRpb25NQzsgICAgICAgICAgICAgICAvLyBtb2RlbCB0byBjbGlwIGNvb3JkaW5hdGVzXG4gICAqIHEueHl6IC89IHEudzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGlwIHRvIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzIChuZGMpXG4gICAqIHEueHl6ID0gKGN6bV92aWV3cG9ydFRyYW5zZm9ybWF0aW9uICogdmVjNChxLnh5eiwgMS4wKSkueHl6OyAvLyBuZGMgdG8gd2luZG93IGNvb3JkaW5hdGVzXG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI3ZpZXdwb3J0VHJhbnNmb3JtYXRpb25cbiAgICogQHNlZSBjem1fdmlld3BvcnRcbiAgICogQHNlZSBjem1fdmlld3BvcnRPcnRob2dyYXBoaWNcbiAgICogQHNlZSBjem1fbW9kZWxUb1dpbmRvd0Nvb3JkaW5hdGVzXG4gICAqIEBzZWUgQmlsbGJvYXJkQ29sbGVjdGlvblxuICAgKi9cbiAgY3ptX3ZpZXdwb3J0VHJhbnNmb3JtYXRpb246IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLnZpZXdwb3J0VHJhbnNmb3JtYXRpb247XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBkZXB0aCBvZiB0aGUgc2NlbmVcbiAgICogYWZ0ZXIgdGhlIGdsb2JlIHBhc3MgYW5kIHRoZW4gdXBkYXRlZCBhZnRlciB0aGUgM0QgVGlsZXMgcGFzcy5cbiAgICogVGhlIGRlcHRoIGlzIHBhY2tlZCBpbnRvIGFuIFJHQkEgdGV4dHVyZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHNhbXBsZXIyRCBjem1fZ2xvYmVEZXB0aFRleHR1cmU7XG4gICAqXG4gICAqIC8vIEdldCB0aGUgZGVwdGggYXQgdGhlIGN1cnJlbnQgZnJhZ21lbnRcbiAgICogdmVjMiBjb29yZHMgPSBnbF9GcmFnQ29vcmQueHkgLyBjem1fdmlld3BvcnQuenc7XG4gICAqIGZsb2F0IGRlcHRoID0gY3ptX3VucGFja0RlcHRoKHRleHR1cmUyRChjem1fZ2xvYmVEZXB0aFRleHR1cmUsIGNvb3JkcykpO1xuICAgKi9cbiAgY3ptX2dsb2JlRGVwdGhUZXh0dXJlOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuU0FNUExFUl8yRCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5nbG9iZURlcHRoVGV4dHVyZTtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgbW9kZWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyBtb2RlbCBjb29yZGluYXRlcyB0byB3b3JsZCBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX21vZGVsO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgd29ybGRQb3NpdGlvbiA9IGN6bV9tb2RlbCAqIG1vZGVsUG9zaXRpb247XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI21vZGVsXG4gICAqIEBzZWUgY3ptX2ludmVyc2VNb2RlbFxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdcbiAgICogQHNlZSBjem1fbW9kZWxWaWV3UHJvamVjdGlvblxuICAgKi9cbiAgY3ptX21vZGVsOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5tb2RlbDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgbW9kZWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyB3b3JsZCBjb29yZGluYXRlcyB0byBtb2RlbCBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX2ludmVyc2VNb2RlbDtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWM0IG1vZGVsUG9zaXRpb24gPSBjem1faW52ZXJzZU1vZGVsICogd29ybGRQb3NpdGlvbjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjaW52ZXJzZU1vZGVsXG4gICAqIEBzZWUgY3ptX21vZGVsXG4gICAqIEBzZWUgY3ptX2ludmVyc2VNb2RlbFZpZXdcbiAgICovXG4gIGN6bV9pbnZlcnNlTW9kZWw6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VNb2RlbDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgdmlldyB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIHdvcmxkIGNvb3JkaW5hdGVzIHRvIGV5ZSBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX3ZpZXc7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjNCBleWVQb3NpdGlvbiA9IGN6bV92aWV3ICogd29ybGRQb3NpdGlvbjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjdmlld1xuICAgKiBAc2VlIGN6bV92aWV3Um90YXRpb25cbiAgICogQHNlZSBjem1fbW9kZWxWaWV3XG4gICAqIEBzZWUgY3ptX3ZpZXdQcm9qZWN0aW9uXG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1Byb2plY3Rpb25cbiAgICogQHNlZSBjem1faW52ZXJzZVZpZXdcbiAgICovXG4gIGN6bV92aWV3OiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS52aWV3O1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDR4NCB2aWV3IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgM0Qgd29ybGQgY29vcmRpbmF0ZXMgdG8gZXllIGNvb3JkaW5hdGVzLiAgSW4gM0QgbW9kZSwgdGhpcyBpcyBpZGVudGljYWwgdG9cbiAgICoge0BsaW5rIGN6bV92aWV3fSwgYnV0IGluIDJEIGFuZCBDb2x1bWJ1cyBWaWV3IGl0IHJlcHJlc2VudHMgdGhlIHZpZXcgbWF0cml4XG4gICAqIGFzIGlmIHRoZSBjYW1lcmEgd2VyZSBhdCBhbiBlcXVpdmFsZW50IGxvY2F0aW9uIGluIDNEIG1vZGUuICBUaGlzIGlzIHVzZWZ1bCBmb3IgbGlnaHRpbmdcbiAgICogMkQgYW5kIENvbHVtYnVzIFZpZXcgaW4gdGhlIHNhbWUgd2F5IHRoYXQgM0QgaXMgbGl0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1fdmlldzNEO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgZXllUG9zaXRpb24zRCA9IGN6bV92aWV3M0QgKiB3b3JsZFBvc2l0aW9uM0Q7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI3ZpZXczRFxuICAgKiBAc2VlIGN6bV92aWV3XG4gICAqL1xuICBjem1fdmlldzNEOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS52aWV3M0Q7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgM3gzIHZpZXcgcm90YXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyB2ZWN0b3JzIGluIHdvcmxkIGNvb3JkaW5hdGVzIHRvIGV5ZSBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDMgY3ptX3ZpZXdSb3RhdGlvbjtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWMzIGV5ZVZlY3RvciA9IGN6bV92aWV3Um90YXRpb24gKiB3b3JsZFZlY3RvcjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjdmlld1JvdGF0aW9uXG4gICAqIEBzZWUgY3ptX3ZpZXdcbiAgICogQHNlZSBjem1faW52ZXJzZVZpZXdcbiAgICogQHNlZSBjem1faW52ZXJzZVZpZXdSb3RhdGlvblxuICAgKi9cbiAgY3ptX3ZpZXdSb3RhdGlvbjogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDMsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUudmlld1JvdGF0aW9uO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDN4MyB2aWV3IHJvdGF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgdmVjdG9ycyBpbiAzRCB3b3JsZCBjb29yZGluYXRlcyB0byBleWUgY29vcmRpbmF0ZXMuICBJbiAzRCBtb2RlLCB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICAgKiB7QGxpbmsgY3ptX3ZpZXdSb3RhdGlvbn0sIGJ1dCBpbiAyRCBhbmQgQ29sdW1idXMgVmlldyBpdCByZXByZXNlbnRzIHRoZSB2aWV3IG1hdHJpeFxuICAgKiBhcyBpZiB0aGUgY2FtZXJhIHdlcmUgYXQgYW4gZXF1aXZhbGVudCBsb2NhdGlvbiBpbiAzRCBtb2RlLiAgVGhpcyBpcyB1c2VmdWwgZm9yIGxpZ2h0aW5nXG4gICAqIDJEIGFuZCBDb2x1bWJ1cyBWaWV3IGluIHRoZSBzYW1lIHdheSB0aGF0IDNEIGlzIGxpdC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDMgY3ptX3ZpZXdSb3RhdGlvbjNEO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzMgZXllVmVjdG9yID0gY3ptX3ZpZXdSb3RhdGlvbjNEICogd29ybGRWZWN0b3I7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI3ZpZXdSb3RhdGlvbjNEXG4gICAqIEBzZWUgY3ptX3ZpZXdSb3RhdGlvblxuICAgKi9cbiAgY3ptX3ZpZXdSb3RhdGlvbjNEOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS52aWV3Um90YXRpb24zRDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyBmcm9tIGV5ZSBjb29yZGluYXRlcyB0byB3b3JsZCBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX2ludmVyc2VWaWV3O1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgd29ybGRQb3NpdGlvbiA9IGN6bV9pbnZlcnNlVmlldyAqIGV5ZVBvc2l0aW9uO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNpbnZlcnNlVmlld1xuICAgKiBAc2VlIGN6bV92aWV3XG4gICAqIEBzZWUgY3ptX2ludmVyc2VOb3JtYWxcbiAgICovXG4gIGN6bV9pbnZlcnNlVmlldzogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuaW52ZXJzZVZpZXc7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgZnJvbSAzRCBleWUgY29vcmRpbmF0ZXMgdG8gd29ybGQgY29vcmRpbmF0ZXMuICBJbiAzRCBtb2RlLCB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICAgKiB7QGxpbmsgY3ptX2ludmVyc2VWaWV3fSwgYnV0IGluIDJEIGFuZCBDb2x1bWJ1cyBWaWV3IGl0IHJlcHJlc2VudHMgdGhlIGludmVyc2UgdmlldyBtYXRyaXhcbiAgICogYXMgaWYgdGhlIGNhbWVyYSB3ZXJlIGF0IGFuIGVxdWl2YWxlbnQgbG9jYXRpb24gaW4gM0QgbW9kZS4gIFRoaXMgaXMgdXNlZnVsIGZvciBsaWdodGluZ1xuICAgKiAyRCBhbmQgQ29sdW1idXMgVmlldyBpbiB0aGUgc2FtZSB3YXkgdGhhdCAzRCBpcyBsaXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQ0IGN6bV9pbnZlcnNlVmlldzNEO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgd29ybGRQb3NpdGlvbiA9IGN6bV9pbnZlcnNlVmlldzNEICogZXllUG9zaXRpb247XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2ludmVyc2VWaWV3M0RcbiAgICogQHNlZSBjem1faW52ZXJzZVZpZXdcbiAgICovXG4gIGN6bV9pbnZlcnNlVmlldzNEOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5pbnZlcnNlVmlldzNEO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDN4MyByb3RhdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIHZlY3RvcnMgZnJvbSBleWUgY29vcmRpbmF0ZXMgdG8gd29ybGQgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQzIGN6bV9pbnZlcnNlVmlld1JvdGF0aW9uO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgd29ybGRWZWN0b3IgPSBjem1faW52ZXJzZVZpZXdSb3RhdGlvbiAqIGV5ZVZlY3RvcjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjaW52ZXJzZVZpZXdcbiAgICogQHNlZSBjem1fdmlld1xuICAgKiBAc2VlIGN6bV92aWV3Um90YXRpb25cbiAgICogQHNlZSBjem1faW52ZXJzZVZpZXdSb3RhdGlvblxuICAgKi9cbiAgY3ptX2ludmVyc2VWaWV3Um90YXRpb246IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VWaWV3Um90YXRpb247XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgM3gzIHJvdGF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgdmVjdG9ycyBmcm9tIDNEIGV5ZSBjb29yZGluYXRlcyB0byB3b3JsZCBjb29yZGluYXRlcy4gIEluIDNEIG1vZGUsIHRoaXMgaXMgaWRlbnRpY2FsIHRvXG4gICAqIHtAbGluayBjem1faW52ZXJzZVZpZXdSb3RhdGlvbn0sIGJ1dCBpbiAyRCBhbmQgQ29sdW1idXMgVmlldyBpdCByZXByZXNlbnRzIHRoZSBpbnZlcnNlIHZpZXcgbWF0cml4XG4gICAqIGFzIGlmIHRoZSBjYW1lcmEgd2VyZSBhdCBhbiBlcXVpdmFsZW50IGxvY2F0aW9uIGluIDNEIG1vZGUuICBUaGlzIGlzIHVzZWZ1bCBmb3IgbGlnaHRpbmdcbiAgICogMkQgYW5kIENvbHVtYnVzIFZpZXcgaW4gdGhlIHNhbWUgd2F5IHRoYXQgM0QgaXMgbGl0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0MyBjem1faW52ZXJzZVZpZXdSb3RhdGlvbjNEO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgd29ybGRWZWN0b3IgPSBjem1faW52ZXJzZVZpZXdSb3RhdGlvbjNEICogZXllVmVjdG9yO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNpbnZlcnNlVmlldzNEXG4gICAqIEBzZWUgY3ptX2ludmVyc2VWaWV3Um90YXRpb25cbiAgICovXG4gIGN6bV9pbnZlcnNlVmlld1JvdGF0aW9uM0Q6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VWaWV3Um90YXRpb24zRDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgcHJvamVjdGlvbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIGV5ZSBjb29yZGluYXRlcyB0byBjbGlwIGNvb3JkaW5hdGVzLiAgQ2xpcCBjb29yZGluYXRlcyBpcyB0aGVcbiAgICogY29vcmRpbmF0ZSBzeXN0ZW0gZm9yIGEgdmVydGV4IHNoYWRlcidzIDxjb2RlPmdsX1Bvc2l0aW9uPC9jb2RlPiBvdXRwdXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQ0IGN6bV9wcm9qZWN0aW9uO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIGdsX1Bvc2l0aW9uID0gY3ptX3Byb2plY3Rpb24gKiBleWVQb3NpdGlvbjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjcHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV92aWV3UHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uXG4gICAqIEBzZWUgY3ptX2luZmluaXRlUHJvamVjdGlvblxuICAgKi9cbiAgY3ptX3Byb2plY3Rpb246IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLnByb2plY3Rpb247XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IGludmVyc2UgcHJvamVjdGlvbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIGZyb20gY2xpcCBjb29yZGluYXRlcyB0byBleWUgY29vcmRpbmF0ZXMuIENsaXAgY29vcmRpbmF0ZXMgaXMgdGhlXG4gICAqIGNvb3JkaW5hdGUgc3lzdGVtIGZvciBhIHZlcnRleCBzaGFkZXIncyA8Y29kZT5nbF9Qb3NpdGlvbjwvY29kZT4gb3V0cHV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1faW52ZXJzZVByb2plY3Rpb247XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjNCBleWVQb3NpdGlvbiA9IGN6bV9pbnZlcnNlUHJvamVjdGlvbiAqIGNsaXBQb3NpdGlvbjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjaW52ZXJzZVByb2plY3Rpb25cbiAgICogQHNlZSBjem1fcHJvamVjdGlvblxuICAgKi9cbiAgY3ptX2ludmVyc2VQcm9qZWN0aW9uOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5pbnZlcnNlUHJvamVjdGlvbjtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgcHJvamVjdGlvbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggd2l0aCB0aGUgZmFyIHBsYW5lIGF0IGluZmluaXR5LFxuICAgKiB0aGF0IHRyYW5zZm9ybXMgZXllIGNvb3JkaW5hdGVzIHRvIGNsaXAgY29vcmRpbmF0ZXMuICBDbGlwIGNvb3JkaW5hdGVzIGlzIHRoZVxuICAgKiBjb29yZGluYXRlIHN5c3RlbSBmb3IgYSB2ZXJ0ZXggc2hhZGVyJ3MgPGNvZGU+Z2xfUG9zaXRpb248L2NvZGU+IG91dHB1dC4gIEFuIGluZmluaXRlIGZhciBwbGFuZSBpcyB1c2VkXG4gICAqIGluIGFsZ29yaXRobXMgbGlrZSBzaGFkb3cgdm9sdW1lcyBhbmQgR1BVIHJheSBjYXN0aW5nIHdpdGggcHJveHkgZ2VvbWV0cnkgdG8gZW5zdXJlIHRoYXQgdHJpYW5nbGVzXG4gICAqIGFyZSBub3QgY2xpcHBlZCBieSB0aGUgZmFyIHBsYW5lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1faW5maW5pdGVQcm9qZWN0aW9uO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIGdsX1Bvc2l0aW9uID0gY3ptX2luZmluaXRlUHJvamVjdGlvbiAqIGV5ZVBvc2l0aW9uO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNpbmZpbml0ZVByb2plY3Rpb25cbiAgICogQHNlZSBjem1fcHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdJbmZpbml0ZVByb2plY3Rpb25cbiAgICovXG4gIGN6bV9pbmZpbml0ZVByb2plY3Rpb246IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmluZmluaXRlUHJvamVjdGlvbjtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgbW9kZWwtdmlldyB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIG1vZGVsIGNvb3JkaW5hdGVzIHRvIGV5ZSBjb29yZGluYXRlcy5cbiAgICogPGJyIC8+PGJyIC8+XG4gICAqIFBvc2l0aW9ucyBzaG91bGQgYmUgdHJhbnNmb3JtZWQgdG8gZXllIGNvb3JkaW5hdGVzIHVzaW5nIDxjb2RlPmN6bV9tb2RlbFZpZXc8L2NvZGU+IGFuZFxuICAgKiBub3JtYWxzIHNob3VsZCBiZSB0cmFuc2Zvcm1lZCB1c2luZyB7QGxpbmsgY3ptX25vcm1hbH0uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQ0IGN6bV9tb2RlbFZpZXc7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjNCBleWVQb3NpdGlvbiA9IGN6bV9tb2RlbFZpZXcgKiBtb2RlbFBvc2l0aW9uO1xuICAgKlxuICAgKiAvLyBUaGUgYWJvdmUgaXMgZXF1aXZhbGVudCB0bywgYnV0IG1vcmUgZWZmaWNpZW50IHRoYW46XG4gICAqIHZlYzQgZXllUG9zaXRpb24gPSBjem1fdmlldyAqIGN6bV9tb2RlbCAqIG1vZGVsUG9zaXRpb247XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI21vZGVsVmlld1xuICAgKiBAc2VlIGN6bV9tb2RlbFxuICAgKiBAc2VlIGN6bV92aWV3XG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1Byb2plY3Rpb25cbiAgICogQHNlZSBjem1fbm9ybWFsXG4gICAqL1xuICBjem1fbW9kZWxWaWV3OiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5tb2RlbFZpZXc7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IG1vZGVsLXZpZXcgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyAzRCBtb2RlbCBjb29yZGluYXRlcyB0byBleWUgY29vcmRpbmF0ZXMuICBJbiAzRCBtb2RlLCB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICAgKiB7QGxpbmsgY3ptX21vZGVsVmlld30sIGJ1dCBpbiAyRCBhbmQgQ29sdW1idXMgVmlldyBpdCByZXByZXNlbnRzIHRoZSBtb2RlbC12aWV3IG1hdHJpeFxuICAgKiBhcyBpZiB0aGUgY2FtZXJhIHdlcmUgYXQgYW4gZXF1aXZhbGVudCBsb2NhdGlvbiBpbiAzRCBtb2RlLiAgVGhpcyBpcyB1c2VmdWwgZm9yIGxpZ2h0aW5nXG4gICAqIDJEIGFuZCBDb2x1bWJ1cyBWaWV3IGluIHRoZSBzYW1lIHdheSB0aGF0IDNEIGlzIGxpdC5cbiAgICogPGJyIC8+PGJyIC8+XG4gICAqIFBvc2l0aW9ucyBzaG91bGQgYmUgdHJhbnNmb3JtZWQgdG8gZXllIGNvb3JkaW5hdGVzIHVzaW5nIDxjb2RlPmN6bV9tb2RlbFZpZXczRDwvY29kZT4gYW5kXG4gICAqIG5vcm1hbHMgc2hvdWxkIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHtAbGluayBjem1fbm9ybWFsM0R9LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1fbW9kZWxWaWV3M0Q7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjNCBleWVQb3NpdGlvbiA9IGN6bV9tb2RlbFZpZXczRCAqIG1vZGVsUG9zaXRpb247XG4gICAqXG4gICAqIC8vIFRoZSBhYm92ZSBpcyBlcXVpdmFsZW50IHRvLCBidXQgbW9yZSBlZmZpY2llbnQgdGhhbjpcbiAgICogdmVjNCBleWVQb3NpdGlvbiA9IGN6bV92aWV3M0QgKiBjem1fbW9kZWwgKiBtb2RlbFBvc2l0aW9uO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNtb2RlbFZpZXczRFxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdcbiAgICovXG4gIGN6bV9tb2RlbFZpZXczRDogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUubW9kZWxWaWV3M0Q7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IG1vZGVsLXZpZXcgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyBtb2RlbCBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIGV5ZSwgdG8gZXllIGNvb3JkaW5hdGVzLiAgVGhpcyBpcyB1c2VkXG4gICAqIGluIGNvbmp1bmN0aW9uIHdpdGgge0BsaW5rIGN6bV90cmFuc2xhdGVSZWxhdGl2ZVRvRXllfS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWU7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogYXR0cmlidXRlIHZlYzMgcG9zaXRpb25IaWdoO1xuICAgKiBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbkxvdztcbiAgICpcbiAgICogdm9pZCBtYWluKClcbiAgICoge1xuICAgKiAgIHZlYzQgcCA9IGN6bV90cmFuc2xhdGVSZWxhdGl2ZVRvRXllKHBvc2l0aW9uSGlnaCwgcG9zaXRpb25Mb3cpO1xuICAgKiAgIGdsX1Bvc2l0aW9uID0gY3ptX3Byb2plY3Rpb24gKiAoY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWUgKiBwKTtcbiAgICogfVxuICAgKlxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uUmVsYXRpdmVUb0V5ZVxuICAgKiBAc2VlIGN6bV90cmFuc2xhdGVSZWxhdGl2ZVRvRXllXG4gICAqIEBzZWUgRW5jb2RlZENhcnRlc2lhbjNcbiAgICovXG4gIGN6bV9tb2RlbFZpZXdSZWxhdGl2ZVRvRXllOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5tb2RlbFZpZXdSZWxhdGl2ZVRvRXllO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDR4NCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIGZyb20gZXllIGNvb3JkaW5hdGVzIHRvIG1vZGVsIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1faW52ZXJzZU1vZGVsVmlldztcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWM0IG1vZGVsUG9zaXRpb24gPSBjem1faW52ZXJzZU1vZGVsVmlldyAqIGV5ZVBvc2l0aW9uO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNpbnZlcnNlTW9kZWxWaWV3XG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1xuICAgKi9cbiAgY3ptX2ludmVyc2VNb2RlbFZpZXc6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VNb2RlbFZpZXc7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgZnJvbSBleWUgY29vcmRpbmF0ZXMgdG8gM0QgbW9kZWwgY29vcmRpbmF0ZXMuICBJbiAzRCBtb2RlLCB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICAgKiB7QGxpbmsgY3ptX2ludmVyc2VNb2RlbFZpZXd9LCBidXQgaW4gMkQgYW5kIENvbHVtYnVzIFZpZXcgaXQgcmVwcmVzZW50cyB0aGUgaW52ZXJzZSBtb2RlbC12aWV3IG1hdHJpeFxuICAgKiBhcyBpZiB0aGUgY2FtZXJhIHdlcmUgYXQgYW4gZXF1aXZhbGVudCBsb2NhdGlvbiBpbiAzRCBtb2RlLiAgVGhpcyBpcyB1c2VmdWwgZm9yIGxpZ2h0aW5nXG4gICAqIDJEIGFuZCBDb2x1bWJ1cyBWaWV3IGluIHRoZSBzYW1lIHdheSB0aGF0IDNEIGlzIGxpdC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX2ludmVyc2VNb2RlbFZpZXczRDtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWM0IG1vZGVsUG9zaXRpb24gPSBjem1faW52ZXJzZU1vZGVsVmlldzNEICogZXllUG9zaXRpb247XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2ludmVyc2VNb2RlbFZpZXdcbiAgICogQHNlZSBjem1faW52ZXJzZU1vZGVsVmlld1xuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXczRFxuICAgKi9cbiAgY3ptX2ludmVyc2VNb2RlbFZpZXczRDogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuaW52ZXJzZU1vZGVsVmlldzNEO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDR4NCB2aWV3LXByb2plY3Rpb24gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyB3b3JsZCBjb29yZGluYXRlcyB0byBjbGlwIGNvb3JkaW5hdGVzLiAgQ2xpcCBjb29yZGluYXRlcyBpcyB0aGVcbiAgICogY29vcmRpbmF0ZSBzeXN0ZW0gZm9yIGEgdmVydGV4IHNoYWRlcidzIDxjb2RlPmdsX1Bvc2l0aW9uPC9jb2RlPiBvdXRwdXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQ0IGN6bV92aWV3UHJvamVjdGlvbjtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWM0IGdsX1Bvc2l0aW9uID0gY3ptX3ZpZXdQcm9qZWN0aW9uICogY3ptX21vZGVsICogbW9kZWxQb3NpdGlvbjtcbiAgICpcbiAgICogLy8gVGhlIGFib3ZlIGlzIGVxdWl2YWxlbnQgdG8sIGJ1dCBtb3JlIGVmZmljaWVudCB0aGFuOlxuICAgKiBnbF9Qb3NpdGlvbiA9IGN6bV9wcm9qZWN0aW9uICogY3ptX3ZpZXcgKiBjem1fbW9kZWwgKiBtb2RlbFBvc2l0aW9uO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSN2aWV3UHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV92aWV3XG4gICAqIEBzZWUgY3ptX3Byb2plY3Rpb25cbiAgICogQHNlZSBjem1fbW9kZWxWaWV3UHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9pbnZlcnNlVmlld1Byb2plY3Rpb25cbiAgICovXG4gIGN6bV92aWV3UHJvamVjdGlvbjogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUudmlld1Byb2plY3Rpb247XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IHZpZXctcHJvamVjdGlvbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIGNsaXAgY29vcmRpbmF0ZXMgdG8gd29ybGQgY29vcmRpbmF0ZXMuICBDbGlwIGNvb3JkaW5hdGVzIGlzIHRoZVxuICAgKiBjb29yZGluYXRlIHN5c3RlbSBmb3IgYSB2ZXJ0ZXggc2hhZGVyJ3MgPGNvZGU+Z2xfUG9zaXRpb248L2NvZGU+IG91dHB1dC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX2ludmVyc2VWaWV3UHJvamVjdGlvbjtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWM0IHdvcmxkUG9zaXRpb24gPSBjem1faW52ZXJzZVZpZXdQcm9qZWN0aW9uICogY2xpcFBvc2l0aW9uO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNpbnZlcnNlVmlld1Byb2plY3Rpb25cbiAgICogQHNlZSBjem1fdmlld1Byb2plY3Rpb25cbiAgICovXG4gIGN6bV9pbnZlcnNlVmlld1Byb2plY3Rpb246IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VWaWV3UHJvamVjdGlvbjtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSA0eDQgbW9kZWwtdmlldy1wcm9qZWN0aW9uIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgbW9kZWwgY29vcmRpbmF0ZXMgdG8gY2xpcCBjb29yZGluYXRlcy4gIENsaXAgY29vcmRpbmF0ZXMgaXMgdGhlXG4gICAqIGNvb3JkaW5hdGUgc3lzdGVtIGZvciBhIHZlcnRleCBzaGFkZXIncyA8Y29kZT5nbF9Qb3NpdGlvbjwvY29kZT4gb3V0cHV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1fbW9kZWxWaWV3UHJvamVjdGlvbjtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWM0IGdsX1Bvc2l0aW9uID0gY3ptX21vZGVsVmlld1Byb2plY3Rpb24gKiBtb2RlbFBvc2l0aW9uO1xuICAgKlxuICAgKiAvLyBUaGUgYWJvdmUgaXMgZXF1aXZhbGVudCB0bywgYnV0IG1vcmUgZWZmaWNpZW50IHRoYW46XG4gICAqIGdsX1Bvc2l0aW9uID0gY3ptX3Byb2plY3Rpb24gKiBjem1fdmlldyAqIGN6bV9tb2RlbCAqIG1vZGVsUG9zaXRpb247XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI21vZGVsVmlld1Byb2plY3Rpb25cbiAgICogQHNlZSBjem1fbW9kZWxcbiAgICogQHNlZSBjem1fdmlld1xuICAgKiBAc2VlIGN6bV9wcm9qZWN0aW9uXG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1xuICAgKiBAc2VlIGN6bV92aWV3UHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdJbmZpbml0ZVByb2plY3Rpb25cbiAgICogQHNlZSBjem1faW52ZXJzZU1vZGVsVmlld1Byb2plY3Rpb25cbiAgICovXG4gIGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5tb2RlbFZpZXdQcm9qZWN0aW9uO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDR4NCBpbnZlcnNlIG1vZGVsLXZpZXctcHJvamVjdGlvbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIGNsaXAgY29vcmRpbmF0ZXMgdG8gbW9kZWwgY29vcmRpbmF0ZXMuICBDbGlwIGNvb3JkaW5hdGVzIGlzIHRoZVxuICAgKiBjb29yZGluYXRlIHN5c3RlbSBmb3IgYSB2ZXJ0ZXggc2hhZGVyJ3MgPGNvZGU+Z2xfUG9zaXRpb248L2NvZGU+IG91dHB1dC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX2ludmVyc2VNb2RlbFZpZXdQcm9qZWN0aW9uO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgbW9kZWxQb3NpdGlvbiA9IGN6bV9pbnZlcnNlTW9kZWxWaWV3UHJvamVjdGlvbiAqIGNsaXBQb3NpdGlvbjtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjbW9kZWxWaWV3UHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uXG4gICAqL1xuICBjem1faW52ZXJzZU1vZGVsVmlld1Byb2plY3Rpb246IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQ0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VNb2RlbFZpZXdQcm9qZWN0aW9uO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDR4NCBtb2RlbC12aWV3LXByb2plY3Rpb24gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyBtb2RlbCBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIGV5ZSwgdG8gY2xpcCBjb29yZGluYXRlcy4gIENsaXAgY29vcmRpbmF0ZXMgaXMgdGhlXG4gICAqIGNvb3JkaW5hdGUgc3lzdGVtIGZvciBhIHZlcnRleCBzaGFkZXIncyA8Y29kZT5nbF9Qb3NpdGlvbjwvY29kZT4gb3V0cHV0LiAgVGhpcyBpcyB1c2VkIGluXG4gICAqIGNvbmp1bmN0aW9uIHdpdGgge0BsaW5rIGN6bV90cmFuc2xhdGVSZWxhdGl2ZVRvRXllfS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDQgY3ptX21vZGVsVmlld1Byb2plY3Rpb25SZWxhdGl2ZVRvRXllO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIGF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uSGlnaDtcbiAgICogYXR0cmlidXRlIHZlYzMgcG9zaXRpb25Mb3c7XG4gICAqXG4gICAqIHZvaWQgbWFpbigpXG4gICAqIHtcbiAgICogICB2ZWM0IHAgPSBjem1fdHJhbnNsYXRlUmVsYXRpdmVUb0V5ZShwb3NpdGlvbkhpZ2gsIHBvc2l0aW9uTG93KTtcbiAgICogICBnbF9Qb3NpdGlvbiA9IGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uUmVsYXRpdmVUb0V5ZSAqIHA7XG4gICAqIH1cbiAgICpcbiAgICogQHNlZSBjem1fbW9kZWxWaWV3UmVsYXRpdmVUb0V5ZVxuICAgKiBAc2VlIGN6bV90cmFuc2xhdGVSZWxhdGl2ZVRvRXllXG4gICAqIEBzZWUgRW5jb2RlZENhcnRlc2lhbjNcbiAgICovXG4gIGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uUmVsYXRpdmVUb0V5ZTogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX01BVDQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUubW9kZWxWaWV3UHJvamVjdGlvblJlbGF0aXZlVG9FeWU7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgNHg0IG1vZGVsLXZpZXctcHJvamVjdGlvbiB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIG1vZGVsIGNvb3JkaW5hdGVzIHRvIGNsaXAgY29vcmRpbmF0ZXMuICBDbGlwIGNvb3JkaW5hdGVzIGlzIHRoZVxuICAgKiBjb29yZGluYXRlIHN5c3RlbSBmb3IgYSB2ZXJ0ZXggc2hhZGVyJ3MgPGNvZGU+Z2xfUG9zaXRpb248L2NvZGU+IG91dHB1dC4gIFRoZSBwcm9qZWN0aW9uIG1hdHJpeCBwbGFjZXNcbiAgICogdGhlIGZhciBwbGFuZSBhdCBpbmZpbml0eS4gIFRoaXMgaXMgdXNlZnVsIGluIGFsZ29yaXRobXMgbGlrZSBzaGFkb3cgdm9sdW1lcyBhbmQgR1BVIHJheSBjYXN0aW5nIHdpdGhcbiAgICogcHJveHkgZ2VvbWV0cnkgdG8gZW5zdXJlIHRoYXQgdHJpYW5nbGVzIGFyZSBub3QgY2xpcHBlZCBieSB0aGUgZmFyIHBsYW5lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0NCBjem1fbW9kZWxWaWV3SW5maW5pdGVQcm9qZWN0aW9uO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzQgZ2xfUG9zaXRpb24gPSBjem1fbW9kZWxWaWV3SW5maW5pdGVQcm9qZWN0aW9uICogbW9kZWxQb3NpdGlvbjtcbiAgICpcbiAgICogLy8gVGhlIGFib3ZlIGlzIGVxdWl2YWxlbnQgdG8sIGJ1dCBtb3JlIGVmZmljaWVudCB0aGFuOlxuICAgKiBnbF9Qb3NpdGlvbiA9IGN6bV9pbmZpbml0ZVByb2plY3Rpb24gKiBjem1fdmlldyAqIGN6bV9tb2RlbCAqIG1vZGVsUG9zaXRpb247XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI21vZGVsVmlld0luZmluaXRlUHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9tb2RlbFxuICAgKiBAc2VlIGN6bV92aWV3XG4gICAqIEBzZWUgY3ptX2luZmluaXRlUHJvamVjdGlvblxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdQcm9qZWN0aW9uXG4gICAqL1xuICBjem1fbW9kZWxWaWV3SW5maW5pdGVQcm9qZWN0aW9uOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5tb2RlbFZpZXdJbmZpbml0ZVByb2plY3Rpb247XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGN1cnJlbnQgY2FtZXJhIGlzIG9ydGhvZ3JhcGhpYyBpbiAzRC5cbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjb3J0aG9ncmFwaGljSW4zRFxuICAgKi9cbiAgY3ptX29ydGhvZ3JhcGhpY0luM0Q6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5vcnRob2dyYXBoaWNJbjNEID8gMSA6IDA7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgM3gzIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIG5vcm1hbCB2ZWN0b3JzIGluIG1vZGVsIGNvb3JkaW5hdGVzIHRvIGV5ZSBjb29yZGluYXRlcy5cbiAgICogPGJyIC8+PGJyIC8+XG4gICAqIFBvc2l0aW9ucyBzaG91bGQgYmUgdHJhbnNmb3JtZWQgdG8gZXllIGNvb3JkaW5hdGVzIHVzaW5nIHtAbGluayBjem1fbW9kZWxWaWV3fSBhbmRcbiAgICogbm9ybWFscyBzaG91bGQgYmUgdHJhbnNmb3JtZWQgdXNpbmcgPGNvZGU+Y3ptX25vcm1hbDwvY29kZT4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQzIGN6bV9ub3JtYWw7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjMyBleWVOb3JtYWwgPSBjem1fbm9ybWFsICogbm9ybWFsO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNub3JtYWxcbiAgICogQHNlZSBjem1faW52ZXJzZU5vcm1hbFxuICAgKiBAc2VlIGN6bV9tb2RlbFZpZXdcbiAgICovXG4gIGN6bV9ub3JtYWw6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLm5vcm1hbDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgYSAzeDMgbm9ybWFsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0aGF0XG4gICAqIHRyYW5zZm9ybXMgbm9ybWFsIHZlY3RvcnMgaW4gM0QgbW9kZWwgY29vcmRpbmF0ZXMgdG8gZXllIGNvb3JkaW5hdGVzLlxuICAgKiBJbiAzRCBtb2RlLCB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICAgKiB7QGxpbmsgY3ptX25vcm1hbH0sIGJ1dCBpbiAyRCBhbmQgQ29sdW1idXMgVmlldyBpdCByZXByZXNlbnRzIHRoZSBub3JtYWwgdHJhbnNmb3JtYXRpb25cbiAgICogbWF0cml4IGFzIGlmIHRoZSBjYW1lcmEgd2VyZSBhdCBhbiBlcXVpdmFsZW50IGxvY2F0aW9uIGluIDNEIG1vZGUuICBUaGlzIGlzIHVzZWZ1bCBmb3IgbGlnaHRpbmdcbiAgICogMkQgYW5kIENvbHVtYnVzIFZpZXcgaW4gdGhlIHNhbWUgd2F5IHRoYXQgM0QgaXMgbGl0LlxuICAgKiA8YnIgLz48YnIgLz5cbiAgICogUG9zaXRpb25zIHNob3VsZCBiZSB0cmFuc2Zvcm1lZCB0byBleWUgY29vcmRpbmF0ZXMgdXNpbmcge0BsaW5rIGN6bV9tb2RlbFZpZXczRH0gYW5kXG4gICAqIG5vcm1hbHMgc2hvdWxkIGJlIHRyYW5zZm9ybWVkIHVzaW5nIDxjb2RlPmN6bV9ub3JtYWwzRDwvY29kZT4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBtYXQzIGN6bV9ub3JtYWwzRDtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiB2ZWMzIGV5ZU5vcm1hbCA9IGN6bV9ub3JtYWwzRCAqIG5vcm1hbDtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjbm9ybWFsM0RcbiAgICogQHNlZSBjem1fbm9ybWFsXG4gICAqL1xuICBjem1fbm9ybWFsM0Q6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLm5vcm1hbDNEO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDN4MyBub3JtYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXRcbiAgICogdHJhbnNmb3JtcyBub3JtYWwgdmVjdG9ycyBpbiBleWUgY29vcmRpbmF0ZXMgdG8gbW9kZWwgY29vcmRpbmF0ZXMuICBUaGlzIGlzXG4gICAqIHRoZSBvcHBvc2l0ZSBvZiB0aGUgdHJhbnNmb3JtIHByb3ZpZGVkIGJ5IHtAbGluayBjem1fbm9ybWFsfS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDMgY3ptX2ludmVyc2VOb3JtYWw7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjMyBub3JtYWxNQyA9IGN6bV9pbnZlcnNlTm9ybWFsICogbm9ybWFsRUM7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2ludmVyc2VOb3JtYWxcbiAgICogQHNlZSBjem1fbm9ybWFsXG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1xuICAgKiBAc2VlIGN6bV9pbnZlcnNlVmlld1xuICAgKi9cbiAgY3ptX2ludmVyc2VOb3JtYWw6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmludmVyc2VOb3JtYWw7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIGEgM3gzIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdFxuICAgKiB0cmFuc2Zvcm1zIG5vcm1hbCB2ZWN0b3JzIGluIGV5ZSBjb29yZGluYXRlcyB0byAzRCBtb2RlbCBjb29yZGluYXRlcy4gIFRoaXMgaXNcbiAgICogdGhlIG9wcG9zaXRlIG9mIHRoZSB0cmFuc2Zvcm0gcHJvdmlkZWQgYnkge0BsaW5rIGN6bV9ub3JtYWx9LlxuICAgKiBJbiAzRCBtb2RlLCB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICAgKiB7QGxpbmsgY3ptX2ludmVyc2VOb3JtYWx9LCBidXQgaW4gMkQgYW5kIENvbHVtYnVzIFZpZXcgaXQgcmVwcmVzZW50cyB0aGUgaW52ZXJzZSBub3JtYWwgdHJhbnNmb3JtYXRpb25cbiAgICogbWF0cml4IGFzIGlmIHRoZSBjYW1lcmEgd2VyZSBhdCBhbiBlcXVpdmFsZW50IGxvY2F0aW9uIGluIDNEIG1vZGUuICBUaGlzIGlzIHVzZWZ1bCBmb3IgbGlnaHRpbmdcbiAgICogMkQgYW5kIENvbHVtYnVzIFZpZXcgaW4gdGhlIHNhbWUgd2F5IHRoYXQgM0QgaXMgbGl0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gbWF0MyBjem1faW52ZXJzZU5vcm1hbDNEO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzMgbm9ybWFsTUMgPSBjem1faW52ZXJzZU5vcm1hbDNEICogbm9ybWFsRUM7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2ludmVyc2VOb3JtYWwzRFxuICAgKiBAc2VlIGN6bV9pbnZlcnNlTm9ybWFsXG4gICAqL1xuICBjem1faW52ZXJzZU5vcm1hbDNEOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfTUFUMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5pbnZlcnNlTm9ybWFsM0Q7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gY29udGFpbmluZyB0aGUgaGVpZ2h0IGluIG1ldGVycyBvZiB0aGVcbiAgICogZXllIChjYW1lcmEpIGFib3ZlIG9yIGJlbG93IHRoZSBlbGxpcHNvaWQuXG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2V5ZUhlaWdodFxuICAgKi9cbiAgY3ptX2V5ZUhlaWdodDogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FULFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmV5ZUhlaWdodDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSBjb250YWluaW5nIGhlaWdodCAoPGNvZGU+eDwvY29kZT4pIGFuZCBoZWlnaHQgc3F1YXJlZCAoPGNvZGU+eTwvY29kZT4pXG4gICAqIGluIG1ldGVycyBvZiB0aGUgZXllIChjYW1lcmEpIGFib3ZlIHRoZSAyRCB3b3JsZCBwbGFuZS4gVGhpcyB1bmlmb3JtIGlzIG9ubHkgdmFsaWRcbiAgICogd2hlbiB0aGUge0BsaW5rIFNjZW5lTW9kZX0gaXMgPGNvZGU+U0NFTkUyRDwvY29kZT4uXG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2V5ZUhlaWdodDJEXG4gICAqL1xuICBjem1fZXllSGVpZ2h0MkQ6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMyLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmV5ZUhlaWdodDJEO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIGNvbnRhaW5pbmcgdGhlIG5lYXIgZGlzdGFuY2UgKDxjb2RlPng8L2NvZGU+KSBhbmQgdGhlIGZhciBkaXN0YW5jZSAoPGNvZGU+eTwvY29kZT4pXG4gICAqIG9mIHRoZSBmcnVzdHVtIGRlZmluZWQgYnkgdGhlIGNhbWVyYS4gIFRoaXMgaXMgdGhlIGxhcmdlc3QgcG9zc2libGUgZnJ1c3R1bSwgbm90IGFuIGluZGl2aWR1YWxcbiAgICogZnJ1c3R1bSB1c2VkIGZvciBtdWx0aS1mcnVzdHVtIHJlbmRlcmluZy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHZlYzIgY3ptX2VudGlyZUZydXN0dW07XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogZmxvYXQgZnJ1c3R1bUxlbmd0aCA9IGN6bV9lbnRpcmVGcnVzdHVtLnkgLSBjem1fZW50aXJlRnJ1c3R1bS54O1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNlbnRpcmVGcnVzdHVtXG4gICAqIEBzZWUgY3ptX2N1cnJlbnRGcnVzdHVtXG4gICAqL1xuICBjem1fZW50aXJlRnJ1c3R1bTogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzIsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuZW50aXJlRnJ1c3R1bTtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSBjb250YWluaW5nIHRoZSBuZWFyIGRpc3RhbmNlICg8Y29kZT54PC9jb2RlPikgYW5kIHRoZSBmYXIgZGlzdGFuY2UgKDxjb2RlPnk8L2NvZGU+KVxuICAgKiBvZiB0aGUgZnJ1c3R1bSBkZWZpbmVkIGJ5IHRoZSBjYW1lcmEuICBUaGlzIGlzIHRoZSBpbmRpdmlkdWFsXG4gICAqIGZydXN0dW0gdXNlZCBmb3IgbXVsdGktZnJ1c3R1bSByZW5kZXJpbmcuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMyIGN6bV9jdXJyZW50RnJ1c3R1bTtcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiBmbG9hdCBmcnVzdHVtTGVuZ3RoID0gY3ptX2N1cnJlbnRGcnVzdHVtLnkgLSBjem1fY3VycmVudEZydXN0dW0ueDtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjY3VycmVudEZydXN0dW1cbiAgICogQHNlZSBjem1fZW50aXJlRnJ1c3R1bVxuICAgKi9cbiAgY3ptX2N1cnJlbnRGcnVzdHVtOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMixcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5jdXJyZW50RnJ1c3R1bTtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRpc3RhbmNlcyB0byB0aGUgZnJ1c3R1bSBwbGFuZXMuIFRoZSB0b3AsIGJvdHRvbSwgbGVmdCBhbmQgcmlnaHQgZGlzdGFuY2VzIGFyZVxuICAgKiB0aGUgeCwgeSwgeiwgYW5kIHcgY29tcG9uZW50cywgcmVzcGVjdGl2ZWx5LlxuICAgKi9cbiAgY3ptX2ZydXN0dW1QbGFuZXM6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUM0LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmZydXN0dW1QbGFuZXM7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGZhciBwbGFuZSdzIGRpc3RhbmNlIGZyb20gdGhlIG5lYXIgcGxhbmUsIHBsdXMgMS4wLlxuICAgKi9cbiAgY3ptX2ZhckRlcHRoRnJvbU5lYXJQbHVzT25lOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuZmFyRGVwdGhGcm9tTmVhclBsdXNPbmU7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxvZzIgb2Yge0BsaW5rIEF1dG9tYXRpY1VuaWZvcm1zI2N6bV9mYXJEZXB0aEZyb21OZWFyUGx1c09uZX0uXG4gICAqL1xuICBjem1fbG9nMkZhckRlcHRoRnJvbU5lYXJQbHVzT25lOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUubG9nMkZhckRlcHRoRnJvbU5lYXJQbHVzT25lO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBHZXRzIDEuMCBkaXZpZGVkIGJ5IHtAbGluayBBdXRvbWF0aWNVbmlmb3JtcyNjem1fbG9nMkZhckRlcHRoRnJvbU5lYXJQbHVzT25lfS5cbiAgICovXG4gIGN6bV9vbmVPdmVyTG9nMkZhckRlcHRoRnJvbU5lYXJQbHVzT25lOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUub25lT3ZlckxvZzJGYXJEZXB0aEZyb21OZWFyUGx1c09uZTtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIHN1biBwb3NpdGlvbiBpbiB3b3JsZCBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHZlYzMgY3ptX3N1blBvc2l0aW9uV0M7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI3N1blBvc2l0aW9uV0NcbiAgICogQHNlZSBjem1fc3VuUG9zaXRpb25Db2x1bWJ1c1ZpZXdcbiAgICogQHNlZSBjem1fc3VuRGlyZWN0aW9uV0NcbiAgICovXG4gIGN6bV9zdW5Qb3NpdGlvbldDOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5zdW5Qb3NpdGlvbldDO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgc3VuIHBvc2l0aW9uIGluIENvbHVtYnVzIHZpZXcgd29ybGQgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9zdW5Qb3NpdGlvbkNvbHVtYnVzVmlldztcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjc3VuUG9zaXRpb25Db2x1bWJ1c1ZpZXdcbiAgICogQHNlZSBjem1fc3VuUG9zaXRpb25XQ1xuICAgKi9cbiAgY3ptX3N1blBvc2l0aW9uQ29sdW1idXNWaWV3OiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5zdW5Qb3NpdGlvbkNvbHVtYnVzVmlldztcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHRvIHRoZSBzdW4gaW4gZXllIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gdmVjMyBjem1fc3VuRGlyZWN0aW9uRUM7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogZmxvYXQgZGlmZnVzZSA9IG1heChkb3QoY3ptX3N1bkRpcmVjdGlvbkVDLCBub3JtYWxFQyksIDAuMCk7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI3N1bkRpcmVjdGlvbkVDXG4gICAqIEBzZWUgY3ptX21vb25EaXJlY3Rpb25FQ1xuICAgKiBAc2VlIGN6bV9zdW5EaXJlY3Rpb25XQ1xuICAgKi9cbiAgY3ptX3N1bkRpcmVjdGlvbkVDOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5zdW5EaXJlY3Rpb25FQztcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHRvIHRoZSBzdW4gaW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9zdW5EaXJlY3Rpb25XQztcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiBmbG9hdCBkaWZmdXNlID0gbWF4KGRvdChjem1fc3VuRGlyZWN0aW9uV0MsIG5vcm1hbFdDKSwgMC4wKTtcbiAgICpcbiAgICogQHNlZSBVbmlmb3JtU3RhdGUjc3VuRGlyZWN0aW9uV0NcbiAgICogQHNlZSBjem1fc3VuUG9zaXRpb25XQ1xuICAgKiBAc2VlIGN6bV9zdW5EaXJlY3Rpb25FQ1xuICAgKi9cbiAgY3ptX3N1bkRpcmVjdGlvbldDOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5zdW5EaXJlY3Rpb25XQztcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHRvIHRoZSBtb29uIGluIGV5ZSBjb29yZGluYXRlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHZlYzMgY3ptX21vb25EaXJlY3Rpb25FQztcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiBmbG9hdCBkaWZmdXNlID0gbWF4KGRvdChjem1fbW9vbkRpcmVjdGlvbkVDLCBub3JtYWxFQyksIDAuMCk7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI21vb25EaXJlY3Rpb25FQ1xuICAgKiBAc2VlIGN6bV9zdW5EaXJlY3Rpb25FQ1xuICAgKi9cbiAgY3ptX21vb25EaXJlY3Rpb25FQzogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzMsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUubW9vbkRpcmVjdGlvbkVDO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgbm9ybWFsaXplZCBkaXJlY3Rpb24gdG8gdGhlIHNjZW5lJ3MgbGlnaHQgc291cmNlIGluIGV5ZSBjb29yZGluYXRlcy5cbiAgICogVGhpcyBpcyBjb21tb25seSB1c2VkIGZvciBkaXJlY3Rpb25hbCBsaWdodGluZyBjb21wdXRhdGlvbnMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9saWdodERpcmVjdGlvbkVDO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIGZsb2F0IGRpZmZ1c2UgPSBtYXgoZG90KGN6bV9saWdodERpcmVjdGlvbkVDLCBub3JtYWxFQyksIDAuMCk7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2xpZ2h0RGlyZWN0aW9uRUNcbiAgICogQHNlZSBjem1fbGlnaHREaXJlY3Rpb25XQ1xuICAgKi9cbiAgY3ptX2xpZ2h0RGlyZWN0aW9uRUM6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmxpZ2h0RGlyZWN0aW9uRUM7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBub3JtYWxpemVkIGRpcmVjdGlvbiB0byB0aGUgc2NlbmUncyBsaWdodCBzb3VyY2UgaW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gICAqIFRoaXMgaXMgY29tbW9ubHkgdXNlZCBmb3IgZGlyZWN0aW9uYWwgbGlnaHRpbmcgY29tcHV0YXRpb25zLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gdmVjMyBjem1fbGlnaHREaXJlY3Rpb25XQztcbiAgICpcbiAgICogLy8gRXhhbXBsZVxuICAgKiBmbG9hdCBkaWZmdXNlID0gbWF4KGRvdChjem1fbGlnaHREaXJlY3Rpb25XQywgbm9ybWFsV0MpLCAwLjApO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSNsaWdodERpcmVjdGlvbldDXG4gICAqIEBzZWUgY3ptX2xpZ2h0RGlyZWN0aW9uRUNcbiAgICovXG4gIGN6bV9saWdodERpcmVjdGlvbldDOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5saWdodERpcmVjdGlvbldDO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHRoYXQgcmVwcmVzZW50cyB0aGUgY29sb3Igb2YgbGlnaHQgZW1pdHRlZCBieSB0aGUgc2NlbmUncyBsaWdodCBzb3VyY2UuIFRoaXNcbiAgICogaXMgZXF1aXZhbGVudCB0byB0aGUgbGlnaHQgY29sb3IgbXVsdGlwbGllZCBieSB0aGUgbGlnaHQgaW50ZW5zaXR5IGxpbWl0ZWQgdG8gYSBtYXhpbXVtIGx1bWluYW5jZSBvZiAxLjBcbiAgICogc3VpdGFibGUgZm9yIG5vbi1IRFIgbGlnaHRpbmcuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9saWdodENvbG9yO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzMgZGlmZnVzZUNvbG9yID0gY3ptX2xpZ2h0Q29sb3IgKiBtYXgoZG90KGN6bV9saWdodERpcmVjdGlvbldDLCBub3JtYWxXQyksIDAuMCk7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2xpZ2h0Q29sb3JcbiAgICogQHNlZSBjem1fbGlnaHRDb2xvckhkclxuICAgKi9cbiAgY3ptX2xpZ2h0Q29sb3I6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmxpZ2h0Q29sb3I7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gdGhhdCByZXByZXNlbnRzIHRoZSBoaWdoIGR5bmFtaWMgcmFuZ2UgY29sb3Igb2YgbGlnaHQgZW1pdHRlZCBieSB0aGUgc2NlbmUncyBsaWdodFxuICAgKiBzb3VyY2UuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgbGlnaHQgY29sb3IgbXVsdGlwbGllZCBieSB0aGUgbGlnaHQgaW50ZW5zaXR5IHN1aXRhYmxlIGZvciBIRFIgbGlnaHRpbmcuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9saWdodENvbG9ySGRyO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzMgZGlmZnVzZUNvbG9yID0gY3ptX2xpZ2h0Q29sb3JIZHIgKiBtYXgoZG90KGN6bV9saWdodERpcmVjdGlvbldDLCBub3JtYWxXQyksIDAuMCk7XG4gICAqXG4gICAqIEBzZWUgVW5pZm9ybVN0YXRlI2xpZ2h0Q29sb3JIZHJcbiAgICogQHNlZSBjem1fbGlnaHRDb2xvclxuICAgKi9cbiAgY3ptX2xpZ2h0Q29sb3JIZHI6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmxpZ2h0Q29sb3JIZHI7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBoaWdoIGJpdHMgb2YgdGhlIGNhbWVyYSBwb3NpdGlvbiBpbiBtb2RlbFxuICAgKiBjb29yZGluYXRlcy4gIFRoaXMgaXMgdXNlZCBmb3IgR1BVIFJURSB0byBlbGltaW5hdGUgaml0dGVyaW5nIGFydGlmYWN0cyB3aGVuIHJlbmRlcmluZ1xuICAgKiBhcyBkZXNjcmliZWQgaW4ge0BsaW5rIGh0dHA6Ly9oZWxwLmFnaS5jb20vQUdJQ29tcG9uZW50cy9odG1sL0Jsb2dQcmVjaXNpb25zUHJlY2lzaW9ucy5odG18UHJlY2lzaW9ucywgUHJlY2lzaW9uc30uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9lbmNvZGVkQ2FtZXJhUG9zaXRpb25NQ0hpZ2g7XG4gICAqXG4gICAqIEBzZWUgY3ptX2VuY29kZWRDYW1lcmFQb3NpdGlvbk1DTG93XG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWVcbiAgICogQHNlZSBjem1fbW9kZWxWaWV3UHJvamVjdGlvblJlbGF0aXZlVG9FeWVcbiAgICovXG4gIGN6bV9lbmNvZGVkQ2FtZXJhUG9zaXRpb25NQ0hpZ2g6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmVuY29kZWRDYW1lcmFQb3NpdGlvbk1DSGlnaDtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIGxvdyBiaXRzIG9mIHRoZSBjYW1lcmEgcG9zaXRpb24gaW4gbW9kZWxcbiAgICogY29vcmRpbmF0ZXMuICBUaGlzIGlzIHVzZWQgZm9yIEdQVSBSVEUgdG8gZWxpbWluYXRlIGppdHRlcmluZyBhcnRpZmFjdHMgd2hlbiByZW5kZXJpbmdcbiAgICogYXMgZGVzY3JpYmVkIGluIHtAbGlua2h0dHA6Ly9oZWxwLmFnaS5jb20vQUdJQ29tcG9uZW50cy9odG1sL0Jsb2dQcmVjaXNpb25zUHJlY2lzaW9ucy5odG18UHJlY2lzaW9ucywgUHJlY2lzaW9uc30uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSB2ZWMzIGN6bV9lbmNvZGVkQ2FtZXJhUG9zaXRpb25NQ0xvdztcbiAgICpcbiAgICogQHNlZSBjem1fZW5jb2RlZENhbWVyYVBvc2l0aW9uTUNIaWdoXG4gICAqIEBzZWUgY3ptX21vZGVsVmlld1JlbGF0aXZlVG9FeWVcbiAgICogQHNlZSBjem1fbW9kZWxWaWV3UHJvamVjdGlvblJlbGF0aXZlVG9FeWVcbiAgICovXG4gIGN6bV9lbmNvZGVkQ2FtZXJhUG9zaXRpb25NQ0xvdzogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzMsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuZW5jb2RlZENhbWVyYVBvc2l0aW9uTUNMb3c7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgdmlld2VyIChjYW1lcmEpIGluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gdmVjMyBjem1fdmlld2VyUG9zaXRpb25XQztcbiAgICovXG4gIGN6bV92aWV3ZXJQb3NpdGlvbldDOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIE1hdHJpeDQuZ2V0VHJhbnNsYXRpb24oXG4gICAgICAgIHVuaWZvcm1TdGF0ZS5pbnZlcnNlVmlldyxcbiAgICAgICAgdmlld2VyUG9zaXRpb25XQ1NjcmF0Y2hcbiAgICAgICk7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBmcmFtZSBudW1iZXIuIFRoaXMgdW5pZm9ybSBpcyBhdXRvbWF0aWNhbGx5IGluY3JlbWVudGVkXG4gICAqIGV2ZXJ5IGZyYW1lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gZmxvYXQgY3ptX2ZyYW1lTnVtYmVyO1xuICAgKi9cbiAgY3ptX2ZyYW1lTnVtYmVyOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuZnJhbWVTdGF0ZS5mcmFtZU51bWJlcjtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgbW9ycGggdHJhbnNpdGlvbiB0aW1lIGJldHdlZW5cbiAgICogMkQvQ29sdW1idXMgVmlldyBhbmQgM0QsIHdpdGggMC4wIGJlaW5nIDJEIG9yIENvbHVtYnVzIFZpZXcgYW5kIDEuMCBiZWluZyAzRC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIGZsb2F0IGN6bV9tb3JwaFRpbWU7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogdmVjNCBwID0gY3ptX2NvbHVtYnVzVmlld01vcnBoKHBvc2l0aW9uMkQsIHBvc2l0aW9uM0QsIGN6bV9tb3JwaFRpbWUpO1xuICAgKi9cbiAgY3ptX21vcnBoVGltZTogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FULFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmZyYW1lU3RhdGUubW9ycGhUaW1lO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCB7QGxpbmsgU2NlbmVNb2RlfSwgZXhwcmVzc2VkXG4gICAqIGFzIGEgZmxvYXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBmbG9hdCBjem1fc2NlbmVNb2RlO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIGlmIChjem1fc2NlbmVNb2RlID09IGN6bV9zY2VuZU1vZGUyRClcbiAgICoge1xuICAgKiAgICAgZXllSGVpZ2h0U3EgPSBjem1fZXllSGVpZ2h0MkQueTtcbiAgICogfVxuICAgKlxuICAgKiBAc2VlIGN6bV9zY2VuZU1vZGUyRFxuICAgKiBAc2VlIGN6bV9zY2VuZU1vZGVDb2x1bWJ1c1ZpZXdcbiAgICogQHNlZSBjem1fc2NlbmVNb2RlM0RcbiAgICogQHNlZSBjem1fc2NlbmVNb2RlTW9ycGhpbmdcbiAgICovXG4gIGN6bV9zY2VuZU1vZGU6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5mcmFtZVN0YXRlLm1vZGU7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHJlbmRlcmluZyBwYXNzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gZmxvYXQgY3ptX3Bhc3M7XG4gICAqXG4gICAqIC8vIEV4YW1wbGVcbiAgICogaWYgKChjem1fcGFzcyA9PSBjem1fcGFzc1RyYW5zbHVjZW50KSAmJiBpc09wYXF1ZSgpKVxuICAgKiB7XG4gICAqICAgICBnbF9Qb3NpdGlvbiAqPSAwLjA7IC8vIEN1bGwgb3BhcXVlIGdlb21ldHJ5IGluIHRoZSB0cmFuc2x1Y2VudCBwYXNzXG4gICAqIH1cbiAgICovXG4gIGN6bV9wYXNzOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUucGFzcztcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgc2NlbmUgYmFja2dyb3VuZCBjb2xvci5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHZlYzQgY3ptX2JhY2tncm91bmRDb2xvcjtcbiAgICpcbiAgICogLy8gRXhhbXBsZTogSWYgdGhlIGdpdmVuIGNvbG9yJ3MgUkdCIG1hdGNoZXMgdGhlIGJhY2tncm91bmQgY29sb3IsIGludmVydCBpdC5cbiAgICogdmVjNCBhZGp1c3RDb2xvckZvckNvbnRyYXN0KHZlYzQgY29sb3IpXG4gICAqIHtcbiAgICogICAgIGlmIChjem1fYmFja2dyb3VuZENvbG9yLnJnYiA9PSBjb2xvci5yZ2IpXG4gICAqICAgICB7XG4gICAqICAgICAgICAgY29sb3IucmdiID0gdmVjMygxLjApIC0gY29sb3IucmdiO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiAgICAgcmV0dXJuIGNvbG9yO1xuICAgKiB9XG4gICAqL1xuICBjem1fYmFja2dyb3VuZENvbG9yOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDNCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gY29udGFpbmluZyB0aGUgQlJERiBsb29rIHVwIHRleHR1cmUgdXNlZCBmb3IgaW1hZ2UtYmFzZWQgbGlnaHRpbmcgY29tcHV0YXRpb25zLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gc2FtcGxlcjJEIGN6bV9icmRmTHV0O1xuICAgKlxuICAgKiAvLyBFeGFtcGxlOiBGb3IgYSBnaXZlbiByb3VnaG5lc3MgYW5kIE5kb3RWIHZhbHVlLCBmaW5kIHRoZSBtYXRlcmlhbCdzIEJSREYgaW5mb3JtYXRpb24gaW4gdGhlIHJlZCBhbmQgZ3JlZW4gY2hhbm5lbHNcbiAgICogZmxvYXQgcm91Z2huZXNzID0gMC41O1xuICAgKiBmbG9hdCBOZG90ViA9IGRvdChub3JtYWwsIHZpZXcpO1xuICAgKiB2ZWMyIGJyZGZMdXQgPSB0ZXh0dXJlMkQoY3ptX2JyZGZMdXQsIHZlYzIoTmRvdFYsIDEuMCAtIHJvdWdobmVzcykpLnJnO1xuICAgKi9cbiAgY3ptX2JyZGZMdXQ6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5TQU1QTEVSXzJELFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmJyZGZMdXQ7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gY29udGFpbmluZyB0aGUgZW52aXJvbm1lbnQgbWFwIHVzZWQgd2l0aGluIHRoZSBzY2VuZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIHNhbXBsZXJDdWJlIGN6bV9lbnZpcm9ubWVudE1hcDtcbiAgICpcbiAgICogLy8gRXhhbXBsZTogQ3JlYXRlIGEgcGVyZmVjdCByZWZsZWN0aW9uIG9mIHRoZSBlbnZpcm9ubWVudCBtYXAgb24gYSAgbW9kZWxcbiAgICogZmxvYXQgcmVmbGVjdGVkID0gcmVmbGVjdCh2aWV3LCBub3JtYWwpO1xuICAgKiB2ZWM0IHJlZmxlY3RlZENvbG9yID0gdGV4dHVyZUN1YmUoY3ptX2Vudmlyb25tZW50TWFwLCByZWZsZWN0ZWQpO1xuICAgKi9cbiAgY3ptX2Vudmlyb25tZW50TWFwOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuU0FNUExFUl9DVUJFLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmVudmlyb25tZW50TWFwO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIGNvbnRhaW5pbmcgdGhlIHNwZWN1bGFyIGVudmlyb25tZW50IG1hcCBhdGxhcyB1c2VkIHdpdGhpbiB0aGUgc2NlbmUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEdMU0wgZGVjbGFyYXRpb25cbiAgICogdW5pZm9ybSBzYW1wbGVyMkQgY3ptX3NwZWN1bGFyRW52aXJvbm1lbnRNYXBzO1xuICAgKi9cbiAgY3ptX3NwZWN1bGFyRW52aXJvbm1lbnRNYXBzOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuU0FNUExFUl8yRCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5zcGVjdWxhckVudmlyb25tZW50TWFwcztcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSBjb250YWluaW5nIHRoZSBzaXplIG9mIHRoZSBzcGVjdWxhciBlbnZpcm9ubWVudCBtYXAgYXRsYXMgdXNlZCB3aXRoaW4gdGhlIHNjZW5lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gdmVjMiBjem1fc3BlY3VsYXJFbnZpcm9ubWVudE1hcFNpemU7XG4gICAqL1xuICBjem1fc3BlY3VsYXJFbnZpcm9ubWVudE1hcFNpemU6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMyLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLnNwZWN1bGFyRW52aXJvbm1lbnRNYXBzRGltZW5zaW9ucztcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSBjb250YWluaW5nIHRoZSBtYXhpbXVtIGxldmVsLW9mLWRldGFpbCBvZiB0aGUgc3BlY3VsYXIgZW52aXJvbm1lbnQgbWFwIGF0bGFzIHVzZWQgd2l0aGluIHRoZSBzY2VuZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIGZsb2F0IGN6bV9zcGVjdWxhckVudmlyb25tZW50TWFwc01heGltdW1MT0Q7XG4gICAqL1xuICBjem1fc3BlY3VsYXJFbnZpcm9ubWVudE1hcHNNYXhpbXVtTE9EOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuc3BlY3VsYXJFbnZpcm9ubWVudE1hcHNNYXhpbXVtTE9EO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIGNvbnRhaW5pbmcgdGhlIHNwaGVyaWNhbCBoYXJtb25pYyBjb2VmZmljaWVudHMgdXNlZCB3aXRoaW4gdGhlIHNjZW5lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBHTFNMIGRlY2xhcmF0aW9uXG4gICAqIHVuaWZvcm0gdmVjM1s5XSBjem1fc3BoZXJpY2FsSGFybW9uaWNDb2VmZmljaWVudHM7XG4gICAqL1xuICBjem1fc3BoZXJpY2FsSGFybW9uaWNDb2VmZmljaWVudHM6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiA5LFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9WRUMzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLnNwaGVyaWNhbEhhcm1vbmljQ29lZmZpY2llbnRzO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyBhIDN4MyByb3RhdGlvbiBtYXRyaXggdGhhdCB0cmFuc2Zvcm1zXG4gICAqIGZyb20gVHJ1ZSBFcXVhdG9yIE1lYW4gRXF1aW5veCAoVEVNRSkgYXhlcyB0byB0aGUgcHNldWRvLWZpeGVkIGF4ZXMgYXQgdGhlIGN1cnJlbnQgc2NlbmUgdGltZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIG1hdDMgY3ptX3RlbWVUb1BzZXVkb0ZpeGVkO1xuICAgKlxuICAgKiAvLyBFeGFtcGxlXG4gICAqIHZlYzMgcHNldWRvRml4ZWQgPSBjem1fdGVtZVRvUHNldWRvRml4ZWQgKiB0ZW1lO1xuICAgKlxuICAgKiBAc2VlIFVuaWZvcm1TdGF0ZSN0ZW1lVG9Qc2V1ZG9GaXhlZE1hdHJpeFxuICAgKiBAc2VlIFRyYW5zZm9ybXMuY29tcHV0ZVRlbWVUb1BzZXVkb0ZpeGVkTWF0cml4XG4gICAqL1xuICBjem1fdGVtZVRvUHNldWRvRml4ZWQ6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVF9NQVQzLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLnRlbWVUb1BzZXVkb0ZpeGVkTWF0cml4O1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgcmF0aW8gb2YgY2FudmFzIGNvb3JkaW5hdGUgc3BhY2UgdG8gY2FudmFzIHBpeGVsIHNwYWNlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB1bmlmb3JtIGZsb2F0IGN6bV9waXhlbFJhdGlvO1xuICAgKi9cbiAgY3ptX3BpeGVsUmF0aW86IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5waXhlbFJhdGlvO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHNjYWxhciB1c2VkIHRvIG1peCBhIGNvbG9yIHdpdGggdGhlIGZvZyBjb2xvciBiYXNlZCBvbiB0aGUgZGlzdGFuY2UgdG8gdGhlIGNhbWVyYS5cbiAgICpcbiAgICogQHNlZSBjem1fZm9nXG4gICAqL1xuICBjem1fZm9nRGVuc2l0eTogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FULFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmZvZ0RlbnNpdHk7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBzcGxpdHRlciBwb3NpdGlvbiB0byB1c2Ugd2hlbiByZW5kZXJpbmcgaW1hZ2VyeSBsYXllcnMgd2l0aCBhIHNwbGl0dGVyLlxuICAgKiBUaGlzIHdpbGwgYmUgaW4gcGl4ZWwgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdGhlIGNhbnZhcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gR0xTTCBkZWNsYXJhdGlvblxuICAgKiB1bmlmb3JtIGZsb2F0IGN6bV9pbWFnZXJ5U3BsaXRQb3NpdGlvbjtcbiAgICovXG4gIGN6bV9pbWFnZXJ5U3BsaXRQb3NpdGlvbjogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FULFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodW5pZm9ybVN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5pZm9ybVN0YXRlLmltYWdlcnlTcGxpdFBvc2l0aW9uO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHNjYWxhciByZXByZXNlbnRpbmcgdGhlIGdlb21ldHJpYyB0b2xlcmFuY2UgcGVyIG1ldGVyXG4gICAqL1xuICBjem1fZ2VvbWV0cmljVG9sZXJhbmNlT3Zlck1ldGVyOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuZ2VvbWV0cmljVG9sZXJhbmNlT3Zlck1ldGVyO1xuICAgIH0sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBhdXRvbWF0aWMgR0xTTCB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIGF0IHdoaWNoIHRvIGRpc2FibGUgdGhlIGRlcHRoIHRlc3Qgb2YgYmlsbGJvYXJkcywgbGFiZWxzIGFuZCBwb2ludHNcbiAgICogdG8sIGZvciBleGFtcGxlLCBwcmV2ZW50IGNsaXBwaW5nIGFnYWluc3QgdGVycmFpbi4gV2hlbiBzZXQgdG8gemVybywgdGhlIGRlcHRoIHRlc3Qgc2hvdWxkIGFsd2F5cyBiZSBhcHBsaWVkLiBXaGVuIGxlc3MgdGhhbiB6ZXJvLFxuICAgKiB0aGUgZGVwdGggdGVzdCBzaG91bGQgbmV2ZXIgYmUgYXBwbGllZC5cbiAgICovXG4gIGN6bV9taW5pbXVtRGlzYWJsZURlcHRoVGVzdERpc3RhbmNlOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUubWluaW11bURpc2FibGVEZXB0aFRlc3REaXN0YW5jZTtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSB0aGF0IHdpbGwgYmUgdGhlIGhpZ2hsaWdodCBjb2xvciBvZiB1bmNsYXNzaWZpZWQgM0QgVGlsZXMuXG4gICAqL1xuICBjem1faW52ZXJ0Q2xhc3NpZmljYXRpb25Db2xvcjogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzQsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuaW52ZXJ0Q2xhc3NpZmljYXRpb25Db2xvcjtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSB0aGF0IGlzIHVzZWQgZm9yIGdhbW1hIGNvcnJlY3Rpb24uXG4gICAqL1xuICBjem1fZ2FtbWE6IG5ldyBBdXRvbWF0aWNVbmlmb3JtKHtcbiAgICBzaXplOiAxLFxuICAgIGRhdGF0eXBlOiBXZWJHTENvbnN0YW50cy5GTE9BVCxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5nYW1tYTtcbiAgICB9LFxuICB9KSxcblxuICAvKipcbiAgICogQW4gYXV0b21hdGljIEdMU0wgdW5pZm9ybSB0aGF0IHN0b3JlcyB0aGUgZWxsaXBzb2lkIHJhZGlpLlxuICAgKi9cbiAgY3ptX2VsbGlwc29pZFJhZGlpOiBuZXcgQXV0b21hdGljVW5pZm9ybSh7XG4gICAgc2l6ZTogMSxcbiAgICBkYXRhdHlwZTogV2ViR0xDb25zdGFudHMuRkxPQVRfVkVDMyxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKHVuaWZvcm1TdGF0ZSkge1xuICAgICAgcmV0dXJuIHVuaWZvcm1TdGF0ZS5lbGxpcHNvaWQucmFkaWk7XG4gICAgfSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEFuIGF1dG9tYXRpYyBHTFNMIHVuaWZvcm0gdGhhdCBzdG9yZXMgdGhlIGVsbGlwc29pZCBpbnZlcnNlIHJhZGlpLlxuICAgKi9cbiAgY3ptX2VsbGlwc29pZEludmVyc2VSYWRpaTogbmV3IEF1dG9tYXRpY1VuaWZvcm0oe1xuICAgIHNpemU6IDEsXG4gICAgZGF0YXR5cGU6IFdlYkdMQ29uc3RhbnRzLkZMT0FUX1ZFQzMsXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICh1bmlmb3JtU3RhdGUpIHtcbiAgICAgIHJldHVybiB1bmlmb3JtU3RhdGUuZWxsaXBzb2lkLm9uZU92ZXJSYWRpaTtcbiAgICB9LFxuICB9KSxcbn07XG5leHBvcnQgZGVmYXVsdCBBdXRvbWF0aWNVbmlmb3JtcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///92244\n')},99095:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22832);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(52200);\n/* harmony import */ var _BufferUsage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(58597);\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction Buffer(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.context", options.context);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.typedArray) && !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.sizeInBytes)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Either options.sizeInBytes or options.typedArray is required."\n    );\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.typedArray) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.sizeInBytes)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot pass in both options.sizeInBytes and options.typedArray."\n    );\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.typedArray)) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.typedArray", options.typedArray);\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number */ .Z.typeOf.number(\n      "options.typedArray.byteLength",\n      options.typedArray.byteLength\n    );\n  }\n\n  if (!_BufferUsage_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].validate */ .Z.validate(options.usage)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("usage is invalid.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var gl = options.context._gl;\n  var bufferTarget = options.bufferTarget;\n  var typedArray = options.typedArray;\n  var sizeInBytes = options.sizeInBytes;\n  var usage = options.usage;\n  var hasArray = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(typedArray);\n\n  if (hasArray) {\n    sizeInBytes = typedArray.byteLength;\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("sizeInBytes", sizeInBytes, 0);\n  //>>includeEnd(\'debug\');\n\n  var buffer = gl.createBuffer();\n  gl.bindBuffer(bufferTarget, buffer);\n  gl.bufferData(bufferTarget, hasArray ? typedArray : sizeInBytes, usage);\n  gl.bindBuffer(bufferTarget, null);\n\n  this._gl = gl;\n  this._webgl2 = options.context._webgl2;\n  this._bufferTarget = bufferTarget;\n  this._sizeInBytes = sizeInBytes;\n  this._usage = usage;\n  this._buffer = buffer;\n  this.vertexArrayDestroyable = true;\n}\n\n/**\n * Creates a vertex buffer, which contains untyped vertex data in GPU-controlled memory.\n * <br /><br />\n * A vertex array defines the actual makeup of a vertex, e.g., positions, normals, texture coordinates,\n * etc., by interpreting the raw data in one or more vertex buffers.\n *\n * @param {Object} options An object containing the following properties:\n * @param {Context} options.context The context in which to create the buffer\n * @param {ArrayBufferView} [options.typedArray] A typed array containing the data to copy to the buffer.\n * @param {Number} [options.sizeInBytes] A <code>Number</code> defining the size of the buffer in bytes. Required if options.typedArray is not given.\n * @param {BufferUsage} options.usage Specifies the expected usage pattern of the buffer. On some GL implementations, this can significantly affect performance. See {@link BufferUsage}.\n * @returns {VertexBuffer} The vertex buffer, ready to be attached to a vertex array.\n *\n * @exception {DeveloperError} Must specify either <options.typedArray> or <options.sizeInBytes>, but not both.\n * @exception {DeveloperError} The buffer size must be greater than zero.\n * @exception {DeveloperError} Invalid <code>usage</code>.\n *\n *\n * @example\n * // Example 1. Create a dynamic vertex buffer 16 bytes in size.\n * var buffer = Buffer.createVertexBuffer({\n *     context : context,\n *     sizeInBytes : 16,\n *     usage : BufferUsage.DYNAMIC_DRAW\n * });\n *\n * @example\n * // Example 2. Create a dynamic vertex buffer from three floating-point values.\n * // The data copied to the vertex buffer is considered raw bytes until it is\n * // interpreted as vertices using a vertex array.\n * var positionBuffer = buffer.createVertexBuffer({\n *     context : context,\n *     typedArray : new Float32Array([0, 0, 0]),\n *     usage : BufferUsage.STATIC_DRAW\n * });\n *\n * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffer.xml|glGenBuffer}\n * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml|glBindBuffer} with <code>ARRAY_BUFFER</code>\n * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml|glBufferData} with <code>ARRAY_BUFFER</code>\n */\nBuffer.createVertexBuffer = function (options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.context", options.context);\n  //>>includeEnd(\'debug\');\n\n  return new Buffer({\n    context: options.context,\n    bufferTarget: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ARRAY_BUFFER */ .Z.ARRAY_BUFFER,\n    typedArray: options.typedArray,\n    sizeInBytes: options.sizeInBytes,\n    usage: options.usage,\n  });\n};\n\n/**\n * Creates an index buffer, which contains typed indices in GPU-controlled memory.\n * <br /><br />\n * An index buffer can be attached to a vertex array to select vertices for rendering.\n * <code>Context.draw</code> can render using the entire index buffer or a subset\n * of the index buffer defined by an offset and count.\n *\n * @param {Object} options An object containing the following properties:\n * @param {Context} options.context The context in which to create the buffer\n * @param {ArrayBufferView} [options.typedArray] A typed array containing the data to copy to the buffer.\n * @param {Number} [options.sizeInBytes] A <code>Number</code> defining the size of the buffer in bytes. Required if options.typedArray is not given.\n * @param {BufferUsage} options.usage Specifies the expected usage pattern of the buffer. On some GL implementations, this can significantly affect performance. See {@link BufferUsage}.\n * @param {IndexDatatype} options.indexDatatype The datatype of indices in the buffer.\n * @returns {IndexBuffer} The index buffer, ready to be attached to a vertex array.\n *\n * @exception {DeveloperError} Must specify either <options.typedArray> or <options.sizeInBytes>, but not both.\n * @exception {DeveloperError} IndexDatatype.UNSIGNED_INT requires OES_element_index_uint, which is not supported on this system. Check context.elementIndexUint.\n * @exception {DeveloperError} The size in bytes must be greater than zero.\n * @exception {DeveloperError} Invalid <code>usage</code>.\n * @exception {DeveloperError} Invalid <code>indexDatatype</code>.\n *\n *\n * @example\n * // Example 1. Create a stream index buffer of unsigned shorts that is\n * // 16 bytes in size.\n * var buffer = Buffer.createIndexBuffer({\n *     context : context,\n *     sizeInBytes : 16,\n *     usage : BufferUsage.STREAM_DRAW,\n *     indexDatatype : IndexDatatype.UNSIGNED_SHORT\n * });\n *\n * @example\n * // Example 2. Create a static index buffer containing three unsigned shorts.\n * var buffer = Buffer.createIndexBuffer({\n *     context : context,\n *     typedArray : new Uint16Array([0, 1, 2]),\n *     usage : BufferUsage.STATIC_DRAW,\n *     indexDatatype : IndexDatatype.UNSIGNED_SHORT\n * });\n *\n * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffer.xml|glGenBuffer}\n * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml|glBindBuffer} with <code>ELEMENT_ARRAY_BUFFER</code>\n * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml|glBufferData} with <code>ELEMENT_ARRAY_BUFFER</code>\n */\nBuffer.createIndexBuffer = function (options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.context", options.context);\n\n  if (!_Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].validate */ .Z.validate(options.indexDatatype)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("Invalid indexDatatype.");\n  }\n\n  if (\n    options.indexDatatype === _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNSIGNED_INT */ .Z.UNSIGNED_INT &&\n    !options.context.elementIndexUint\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "IndexDatatype.UNSIGNED_INT requires OES_element_index_uint, which is not supported on this system.  Check context.elementIndexUint."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var context = options.context;\n  var indexDatatype = options.indexDatatype;\n\n  var bytesPerIndex = _Core_IndexDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].getSizeInBytes */ .Z.getSizeInBytes(indexDatatype);\n  var buffer = new Buffer({\n    context: context,\n    bufferTarget: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER,\n    typedArray: options.typedArray,\n    sizeInBytes: options.sizeInBytes,\n    usage: options.usage,\n  });\n\n  var numberOfIndices = buffer.sizeInBytes / bytesPerIndex;\n\n  Object.defineProperties(buffer, {\n    indexDatatype: {\n      get: function () {\n        return indexDatatype;\n      },\n    },\n    bytesPerIndex: {\n      get: function () {\n        return bytesPerIndex;\n      },\n    },\n    numberOfIndices: {\n      get: function () {\n        return numberOfIndices;\n      },\n    },\n  });\n\n  return buffer;\n};\n\nObject.defineProperties(Buffer.prototype, {\n  sizeInBytes: {\n    get: function () {\n      return this._sizeInBytes;\n    },\n  },\n\n  usage: {\n    get: function () {\n      return this._usage;\n    },\n  },\n});\n\nBuffer.prototype._getBuffer = function () {\n  return this._buffer;\n};\n\nBuffer.prototype.copyFromArrayView = function (arrayView, offsetInBytes) {\n  offsetInBytes = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(offsetInBytes, 0);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("arrayView", arrayView);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n    "offsetInBytes + arrayView.byteLength",\n    offsetInBytes + arrayView.byteLength,\n    this._sizeInBytes\n  );\n  //>>includeEnd(\'debug\');\n\n  var gl = this._gl;\n  var target = this._bufferTarget;\n  gl.bindBuffer(target, this._buffer);\n  gl.bufferSubData(target, offsetInBytes, arrayView);\n  gl.bindBuffer(target, null);\n};\n\nBuffer.prototype.copyFromBuffer = function (\n  readBuffer,\n  readOffset,\n  writeOffset,\n  sizeInBytes\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._webgl2) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("A WebGL 2 context is required.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(readBuffer)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("readBuffer must be defined.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(sizeInBytes) || sizeInBytes <= 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "sizeInBytes must be defined and be greater than zero."\n    );\n  }\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(readOffset) ||\n    readOffset < 0 ||\n    readOffset + sizeInBytes > readBuffer._sizeInBytes\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "readOffset must be greater than or equal to zero and readOffset + sizeInBytes must be less than of equal to readBuffer.sizeInBytes."\n    );\n  }\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(writeOffset) ||\n    writeOffset < 0 ||\n    writeOffset + sizeInBytes > this._sizeInBytes\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "writeOffset must be greater than or equal to zero and writeOffset + sizeInBytes must be less than of equal to this.sizeInBytes."\n    );\n  }\n  if (\n    this._buffer === readBuffer._buffer &&\n    ((writeOffset >= readOffset && writeOffset < readOffset + sizeInBytes) ||\n      (readOffset > writeOffset && readOffset < writeOffset + sizeInBytes))\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "When readBuffer is equal to this, the ranges [readOffset + sizeInBytes) and [writeOffset, writeOffset + sizeInBytes) must not overlap."\n    );\n  }\n  if (\n    (this._bufferTarget === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER &&\n      readBuffer._bufferTarget !== _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER) ||\n    (this._bufferTarget !== _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER &&\n      readBuffer._bufferTarget === _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].ELEMENT_ARRAY_BUFFER */ .Z.ELEMENT_ARRAY_BUFFER)\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Can not copy an index buffer into another buffer type."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var readTarget = _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].COPY_READ_BUFFER */ .Z.COPY_READ_BUFFER;\n  var writeTarget = _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].COPY_WRITE_BUFFER */ .Z.COPY_WRITE_BUFFER;\n\n  var gl = this._gl;\n  gl.bindBuffer(writeTarget, this._buffer);\n  gl.bindBuffer(readTarget, readBuffer._buffer);\n  gl.copyBufferSubData(\n    readTarget,\n    writeTarget,\n    readOffset,\n    writeOffset,\n    sizeInBytes\n  );\n  gl.bindBuffer(writeTarget, null);\n  gl.bindBuffer(readTarget, null);\n};\n\nBuffer.prototype.getBufferData = function (\n  arrayView,\n  sourceOffset,\n  destinationOffset,\n  length\n) {\n  sourceOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(sourceOffset, 0);\n  destinationOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(destinationOffset, 0);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!this._webgl2) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("A WebGL 2 context is required.");\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(arrayView)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("arrayView is required.");\n  }\n\n  var copyLength;\n  var elementSize;\n  var arrayLength = arrayView.byteLength;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(length)) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(arrayLength)) {\n      copyLength = arrayLength - destinationOffset;\n      elementSize = 1;\n    } else {\n      arrayLength = arrayView.length;\n      copyLength = arrayLength - destinationOffset;\n      elementSize = arrayView.BYTES_PER_ELEMENT;\n    }\n  } else {\n    copyLength = length;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(arrayLength)) {\n      elementSize = 1;\n    } else {\n      arrayLength = arrayView.length;\n      elementSize = arrayView.BYTES_PER_ELEMENT;\n    }\n  }\n\n  if (destinationOffset < 0 || destinationOffset > arrayLength) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "destinationOffset must be greater than zero and less than the arrayView length."\n    );\n  }\n  if (destinationOffset + copyLength > arrayLength) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "destinationOffset + length must be less than or equal to the arrayViewLength."\n    );\n  }\n  if (sourceOffset < 0 || sourceOffset > this._sizeInBytes) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "sourceOffset must be greater than zero and less than the buffers size."\n    );\n  }\n  if (sourceOffset + copyLength * elementSize > this._sizeInBytes) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "sourceOffset + length must be less than the buffers size."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var gl = this._gl;\n  var target = _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].COPY_READ_BUFFER */ .Z.COPY_READ_BUFFER;\n  gl.bindBuffer(target, this._buffer);\n  gl.getBufferSubData(\n    target,\n    sourceOffset,\n    arrayView,\n    destinationOffset,\n    length\n  );\n  gl.bindBuffer(target, null);\n};\n\nBuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nBuffer.prototype.destroy = function () {\n  this._gl.deleteBuffer(this._buffer);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Buffer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99095\n')},58597:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52200);\n\n\n/**\n * @private\n */\nvar BufferUsage = {\n  STREAM_DRAW: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].STREAM_DRAW */ .Z.STREAM_DRAW,\n  STATIC_DRAW: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n  DYNAMIC_DRAW: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].DYNAMIC_DRAW */ .Z.DYNAMIC_DRAW,\n\n  validate: function (bufferUsage) {\n    return (\n      bufferUsage === BufferUsage.STREAM_DRAW ||\n      bufferUsage === BufferUsage.STATIC_DRAW ||\n      bufferUsage === BufferUsage.DYNAMIC_DRAW\n    );\n  },\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(BufferUsage));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg1OTcuanMiLCJtYXBwaW5ncyI6IjtBQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdHQUEwQjtBQUN6QyxlQUFlLGdHQUEwQjtBQUN6QyxnQkFBZ0Isa0dBQTJCOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSx5REFBZSwwQkFBMEIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9SZW5kZXJlci9CdWZmZXJVc2FnZS5qcz8yYjM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWJHTENvbnN0YW50cyBmcm9tIFwiLi4vQ29yZS9XZWJHTENvbnN0YW50cy5qc1wiO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBCdWZmZXJVc2FnZSA9IHtcbiAgU1RSRUFNX0RSQVc6IFdlYkdMQ29uc3RhbnRzLlNUUkVBTV9EUkFXLFxuICBTVEFUSUNfRFJBVzogV2ViR0xDb25zdGFudHMuU1RBVElDX0RSQVcsXG4gIERZTkFNSUNfRFJBVzogV2ViR0xDb25zdGFudHMuRFlOQU1JQ19EUkFXLFxuXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiAoYnVmZmVyVXNhZ2UpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYnVmZmVyVXNhZ2UgPT09IEJ1ZmZlclVzYWdlLlNUUkVBTV9EUkFXIHx8XG4gICAgICBidWZmZXJVc2FnZSA9PT0gQnVmZmVyVXNhZ2UuU1RBVElDX0RSQVcgfHxcbiAgICAgIGJ1ZmZlclVzYWdlID09PSBCdWZmZXJVc2FnZS5EWU5BTUlDX0RSQVdcbiAgICApO1xuICB9LFxufTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5mcmVlemUoQnVmZmVyVXNhZ2UpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58597\n')},39899:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n\n\n\n/**\n * Represents a command to the renderer for clearing a framebuffer.\n *\n * @private\n * @constructor\n */\nfunction ClearCommand(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * The value to clear the color buffer to.  When <code>undefined</code>, the color buffer is not cleared.\n   *\n   * @type {Color}\n   *\n   * @default undefined\n   */\n  this.color = options.color;\n\n  /**\n   * The value to clear the depth buffer to.  When <code>undefined</code>, the depth buffer is not cleared.\n   *\n   * @type {Number}\n   *\n   * @default undefined\n   */\n  this.depth = options.depth;\n\n  /**\n   * The value to clear the stencil buffer to.  When <code>undefined</code>, the stencil buffer is not cleared.\n   *\n   * @type {Number}\n   *\n   * @default undefined\n   */\n  this.stencil = options.stencil;\n\n  /**\n   * The render state to apply when executing the clear command.  The following states affect clearing:\n   * scissor test, color mask, depth mask, and stencil mask.  When the render state is\n   * <code>undefined</code>, the default render state is used.\n   *\n   * @type {RenderState}\n   *\n   * @default undefined\n   */\n  this.renderState = options.renderState;\n\n  /**\n   * The framebuffer to clear.\n   *\n   * @type {Framebuffer}\n   *\n   * @default undefined\n   */\n  this.framebuffer = options.framebuffer;\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows you to see who created a command when you only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {Object}\n   *\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  this.owner = options.owner;\n\n  /**\n   * The pass in which to run this command.\n   *\n   * @type {Pass}\n   *\n   * @default undefined\n   */\n  this.pass = options.pass;\n}\n\n/**\n * Clears color to (0.0, 0.0, 0.0, 0.0); depth to 1.0; and stencil to 0.\n *\n * @type {ClearCommand}\n *\n * @constant\n */\nClearCommand.ALL = Object.freeze(\n  new ClearCommand({\n    color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n    depth: 1.0,\n    stencil: 0.0,\n  })\n);\n\nClearCommand.prototype.execute = function (context, passState) {\n  context.clear(this, passState);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ClearCommand);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk4OTkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBcUM7QUFDYzs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBFQUFZLFVBQVUsZ0dBQXlCOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsV0FBVywrQkFBK0I7QUFDMUM7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLGNBQWM7QUFDdkQ7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQUs7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvUmVuZGVyZXIvQ2xlYXJDb21tYW5kLmpzPzY0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbG9yIGZyb20gXCIuLi9Db3JlL0NvbG9yLmpzXCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi9Db3JlL2RlZmF1bHRWYWx1ZS5qc1wiO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb21tYW5kIHRvIHRoZSByZW5kZXJlciBmb3IgY2xlYXJpbmcgYSBmcmFtZWJ1ZmZlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIENsZWFyQ29tbWFuZChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWUob3B0aW9ucywgZGVmYXVsdFZhbHVlLkVNUFRZX09CSkVDVCk7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSB0byBjbGVhciB0aGUgY29sb3IgYnVmZmVyIHRvLiAgV2hlbiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+LCB0aGUgY29sb3IgYnVmZmVyIGlzIG5vdCBjbGVhcmVkLlxuICAgKlxuICAgKiBAdHlwZSB7Q29sb3J9XG4gICAqXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5jb2xvciA9IG9wdGlvbnMuY29sb3I7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSB0byBjbGVhciB0aGUgZGVwdGggYnVmZmVyIHRvLiAgV2hlbiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+LCB0aGUgZGVwdGggYnVmZmVyIGlzIG5vdCBjbGVhcmVkLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKlxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuZGVwdGggPSBvcHRpb25zLmRlcHRoO1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgdG8gY2xlYXIgdGhlIHN0ZW5jaWwgYnVmZmVyIHRvLiAgV2hlbiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+LCB0aGUgc3RlbmNpbCBidWZmZXIgaXMgbm90IGNsZWFyZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5zdGVuY2lsID0gb3B0aW9ucy5zdGVuY2lsO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVuZGVyIHN0YXRlIHRvIGFwcGx5IHdoZW4gZXhlY3V0aW5nIHRoZSBjbGVhciBjb21tYW5kLiAgVGhlIGZvbGxvd2luZyBzdGF0ZXMgYWZmZWN0IGNsZWFyaW5nOlxuICAgKiBzY2lzc29yIHRlc3QsIGNvbG9yIG1hc2ssIGRlcHRoIG1hc2ssIGFuZCBzdGVuY2lsIG1hc2suICBXaGVuIHRoZSByZW5kZXIgc3RhdGUgaXNcbiAgICogPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiwgdGhlIGRlZmF1bHQgcmVuZGVyIHN0YXRlIGlzIHVzZWQuXG4gICAqXG4gICAqIEB0eXBlIHtSZW5kZXJTdGF0ZX1cbiAgICpcbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLnJlbmRlclN0YXRlID0gb3B0aW9ucy5yZW5kZXJTdGF0ZTtcblxuICAvKipcbiAgICogVGhlIGZyYW1lYnVmZmVyIHRvIGNsZWFyLlxuICAgKlxuICAgKiBAdHlwZSB7RnJhbWVidWZmZXJ9XG4gICAqXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5mcmFtZWJ1ZmZlciA9IG9wdGlvbnMuZnJhbWVidWZmZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3Qgd2hvIGNyZWF0ZWQgdGhpcyBjb21tYW5kLiAgVGhpcyBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZyBjb21tYW5kXG4gICAqIGV4ZWN1dGlvbjsgaXQgYWxsb3dzIHlvdSB0byBzZWUgd2hvIGNyZWF0ZWQgYSBjb21tYW5kIHdoZW4geW91IG9ubHkgaGF2ZSBhXG4gICAqIHJlZmVyZW5jZSB0byB0aGUgY29tbWFuZCwgYW5kIGNhbiBiZSB1c2VkIHRvIHNlbGVjdGl2ZWx5IGV4ZWN1dGUgY29tbWFuZHNcbiAgICogd2l0aCB7QGxpbmsgU2NlbmUjZGVidWdDb21tYW5kRmlsdGVyfS5cbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICpcbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqXG4gICAqIEBzZWUgU2NlbmUjZGVidWdDb21tYW5kRmlsdGVyXG4gICAqL1xuICB0aGlzLm93bmVyID0gb3B0aW9ucy5vd25lcjtcblxuICAvKipcbiAgICogVGhlIHBhc3MgaW4gd2hpY2ggdG8gcnVuIHRoaXMgY29tbWFuZC5cbiAgICpcbiAgICogQHR5cGUge1Bhc3N9XG4gICAqXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5wYXNzID0gb3B0aW9ucy5wYXNzO1xufVxuXG4vKipcbiAqIENsZWFycyBjb2xvciB0byAoMC4wLCAwLjAsIDAuMCwgMC4wKTsgZGVwdGggdG8gMS4wOyBhbmQgc3RlbmNpbCB0byAwLlxuICpcbiAqIEB0eXBlIHtDbGVhckNvbW1hbmR9XG4gKlxuICogQGNvbnN0YW50XG4gKi9cbkNsZWFyQ29tbWFuZC5BTEwgPSBPYmplY3QuZnJlZXplKFxuICBuZXcgQ2xlYXJDb21tYW5kKHtcbiAgICBjb2xvcjogbmV3IENvbG9yKDAuMCwgMC4wLCAwLjAsIDAuMCksXG4gICAgZGVwdGg6IDEuMCxcbiAgICBzdGVuY2lsOiAwLjAsXG4gIH0pXG4pO1xuXG5DbGVhckNvbW1hbmQucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoY29udGV4dCwgcGFzc1N0YXRlKSB7XG4gIGNvbnRleHQuY2xlYXIodGhpcywgcGFzc1N0YXRlKTtcbn07XG5leHBvcnQgZGVmYXVsdCBDbGVhckNvbW1hbmQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39899\n')},92357:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Pass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8379);\n\n\n\n/**\n * Represents a command to the renderer for GPU Compute (using old-school GPGPU).\n *\n * @private\n * @constructor\n */\nfunction ComputeCommand(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  /**\n   * The vertex array. If none is provided, a viewport quad will be used.\n   *\n   * @type {VertexArray}\n   * @default undefined\n   */\n  this.vertexArray = options.vertexArray;\n\n  /**\n   * The fragment shader source. The default vertex shader is ViewportQuadVS.\n   *\n   * @type {ShaderSource}\n   * @default undefined\n   */\n  this.fragmentShaderSource = options.fragmentShaderSource;\n\n  /**\n   * The shader program to apply.\n   *\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  this.shaderProgram = options.shaderProgram;\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @type {Object}\n   * @default undefined\n   */\n  this.uniformMap = options.uniformMap;\n\n  /**\n   * Texture to use for offscreen rendering.\n   *\n   * @type {Texture}\n   * @default undefined\n   */\n  this.outputTexture = options.outputTexture;\n\n  /**\n   * Function that is called immediately before the ComputeCommand is executed. Used to\n   * update any renderer resources. Takes the ComputeCommand as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.preExecute = options.preExecute;\n\n  /**\n   * Function that is called after the ComputeCommand is executed. Takes the output\n   * texture as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.postExecute = options.postExecute;\n\n  /**\n   * Function that is called when the command is canceled\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.canceled = options.canceled;\n\n  /**\n   * Whether the renderer resources will persist beyond this call. If not, they\n   * will be destroyed after completion.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.persists = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.persists, false);\n\n  /**\n   * The pass when to render. Always compute pass.\n   *\n   * @type {Pass}\n   * @default Pass.COMPUTE;\n   */\n  this.pass = _Pass_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].COMPUTE */ .Z.COMPUTE;\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {Object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  this.owner = options.owner;\n}\n\n/**\n * Executes the compute command.\n *\n * @param {ComputeEngine} computeEngine The context that processes the compute command.\n */\nComputeCommand.prototype.execute = function (computeEngine) {\n  computeEngine.execute(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ComputeCommand);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIzNTcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBbUQ7QUFDdEI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwRUFBWSxVQUFVLGdHQUF5Qjs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxrQkFBa0IsMEVBQVk7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsY0FBYyx5RUFBWTs7QUFFMUI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLFdBQVcsK0JBQStCO0FBQzFDO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxjQUFjLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvUmVuZGVyZXIvQ29tcHV0ZUNvbW1hbmQuanM/ODIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi9Db3JlL2RlZmF1bHRWYWx1ZS5qc1wiO1xuaW1wb3J0IFBhc3MgZnJvbSBcIi4vUGFzcy5qc1wiO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb21tYW5kIHRvIHRoZSByZW5kZXJlciBmb3IgR1BVIENvbXB1dGUgKHVzaW5nIG9sZC1zY2hvb2wgR1BHUFUpLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29tcHV0ZUNvbW1hbmQob3B0aW9ucykge1xuICBvcHRpb25zID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMsIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QpO1xuXG4gIC8qKlxuICAgKiBUaGUgdmVydGV4IGFycmF5LiBJZiBub25lIGlzIHByb3ZpZGVkLCBhIHZpZXdwb3J0IHF1YWQgd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAdHlwZSB7VmVydGV4QXJyYXl9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy52ZXJ0ZXhBcnJheSA9IG9wdGlvbnMudmVydGV4QXJyYXk7XG5cbiAgLyoqXG4gICAqIFRoZSBmcmFnbWVudCBzaGFkZXIgc291cmNlLiBUaGUgZGVmYXVsdCB2ZXJ0ZXggc2hhZGVyIGlzIFZpZXdwb3J0UXVhZFZTLlxuICAgKlxuICAgKiBAdHlwZSB7U2hhZGVyU291cmNlfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuZnJhZ21lbnRTaGFkZXJTb3VyY2UgPSBvcHRpb25zLmZyYWdtZW50U2hhZGVyU291cmNlO1xuXG4gIC8qKlxuICAgKiBUaGUgc2hhZGVyIHByb2dyYW0gdG8gYXBwbHkuXG4gICAqXG4gICAqIEB0eXBlIHtTaGFkZXJQcm9ncmFtfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuc2hhZGVyUHJvZ3JhbSA9IG9wdGlvbnMuc2hhZGVyUHJvZ3JhbTtcblxuICAvKipcbiAgICogQW4gb2JqZWN0IHdpdGggZnVuY3Rpb25zIHdob3NlIG5hbWVzIG1hdGNoIHRoZSB1bmlmb3JtcyBpbiB0aGUgc2hhZGVyIHByb2dyYW1cbiAgICogYW5kIHJldHVybiB2YWx1ZXMgdG8gc2V0IHRob3NlIHVuaWZvcm1zLlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMudW5pZm9ybU1hcCA9IG9wdGlvbnMudW5pZm9ybU1hcDtcblxuICAvKipcbiAgICogVGV4dHVyZSB0byB1c2UgZm9yIG9mZnNjcmVlbiByZW5kZXJpbmcuXG4gICAqXG4gICAqIEB0eXBlIHtUZXh0dXJlfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMub3V0cHV0VGV4dHVyZSA9IG9wdGlvbnMub3V0cHV0VGV4dHVyZTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBDb21wdXRlQ29tbWFuZCBpcyBleGVjdXRlZC4gVXNlZCB0b1xuICAgKiB1cGRhdGUgYW55IHJlbmRlcmVyIHJlc291cmNlcy4gVGFrZXMgdGhlIENvbXB1dGVDb21tYW5kIGFzIGl0cyBzaW5nbGUgYXJndW1lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLnByZUV4ZWN1dGUgPSBvcHRpb25zLnByZUV4ZWN1dGU7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGFmdGVyIHRoZSBDb21wdXRlQ29tbWFuZCBpcyBleGVjdXRlZC4gVGFrZXMgdGhlIG91dHB1dFxuICAgKiB0ZXh0dXJlIGFzIGl0cyBzaW5nbGUgYXJndW1lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICB0aGlzLnBvc3RFeGVjdXRlID0gb3B0aW9ucy5wb3N0RXhlY3V0ZTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgY29tbWFuZCBpcyBjYW5jZWxlZFxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5jYW5jZWxlZCA9IG9wdGlvbnMuY2FuY2VsZWQ7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHJlbmRlcmVyIHJlc291cmNlcyB3aWxsIHBlcnNpc3QgYmV5b25kIHRoaXMgY2FsbC4gSWYgbm90LCB0aGV5XG4gICAqIHdpbGwgYmUgZGVzdHJveWVkIGFmdGVyIGNvbXBsZXRpb24uXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5wZXJzaXN0cyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLnBlcnNpc3RzLCBmYWxzZSk7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXNzIHdoZW4gdG8gcmVuZGVyLiBBbHdheXMgY29tcHV0ZSBwYXNzLlxuICAgKlxuICAgKiBAdHlwZSB7UGFzc31cbiAgICogQGRlZmF1bHQgUGFzcy5DT01QVVRFO1xuICAgKi9cbiAgdGhpcy5wYXNzID0gUGFzcy5DT01QVVRFO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHdobyBjcmVhdGVkIHRoaXMgY29tbWFuZC4gIFRoaXMgaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcgY29tbWFuZFxuICAgKiBleGVjdXRpb247IGl0IGFsbG93cyB1cyB0byBzZWUgd2hvIGNyZWF0ZWQgYSBjb21tYW5kIHdoZW4gd2Ugb25seSBoYXZlIGFcbiAgICogcmVmZXJlbmNlIHRvIHRoZSBjb21tYW5kLCBhbmQgY2FuIGJlIHVzZWQgdG8gc2VsZWN0aXZlbHkgZXhlY3V0ZSBjb21tYW5kc1xuICAgKiB3aXRoIHtAbGluayBTY2VuZSNkZWJ1Z0NvbW1hbmRGaWx0ZXJ9LlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICpcbiAgICogQHNlZSBTY2VuZSNkZWJ1Z0NvbW1hbmRGaWx0ZXJcbiAgICovXG4gIHRoaXMub3duZXIgPSBvcHRpb25zLm93bmVyO1xufVxuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBjb21wdXRlIGNvbW1hbmQuXG4gKlxuICogQHBhcmFtIHtDb21wdXRlRW5naW5lfSBjb21wdXRlRW5naW5lIFRoZSBjb250ZXh0IHRoYXQgcHJvY2Vzc2VzIHRoZSBjb21wdXRlIGNvbW1hbmQuXG4gKi9cbkNvbXB1dGVDb21tYW5kLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKGNvbXB1dGVFbmdpbmUpIHtcbiAgY29tcHV0ZUVuZ2luZS5leGVjdXRlKHRoaXMpO1xufTtcbmV4cG9ydCBkZWZhdWx0IENvbXB1dGVDb21tYW5kO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///92357\n')},18157:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88108);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(97264);\n/* harmony import */ var _Shaders_ViewportQuadVS_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(59629);\n/* harmony import */ var _ClearCommand_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(39899);\n/* harmony import */ var _DrawCommand_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(60072);\n/* harmony import */ var _Framebuffer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(2932);\n/* harmony import */ var _RenderState_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(10667);\n/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(46588);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction ComputeEngine(context) {\n  this._context = context;\n}\n\nvar renderStateScratch;\nvar drawCommandScratch = new _DrawCommand_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n  primitiveType: _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n});\nvar clearCommandScratch = new _ClearCommand_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z({\n  color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0),\n});\n\nfunction createFramebuffer(context, outputTexture) {\n  return new _Framebuffer_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n    context: context,\n    colorTextures: [outputTexture],\n    destroyAttachments: false,\n  });\n}\n\nfunction createViewportQuadShader(context, fragmentShaderSource) {\n  return _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromCache */ .Z.fromCache({\n    context: context,\n    vertexShaderSource: _Shaders_ViewportQuadVS_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z,\n    fragmentShaderSource: fragmentShaderSource,\n    attributeLocations: {\n      position: 0,\n      textureCoordinates: 1,\n    },\n  });\n}\n\nfunction createRenderState(width, height) {\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(renderStateScratch) ||\n    renderStateScratch.viewport.width !== width ||\n    renderStateScratch.viewport.height !== height\n  ) {\n    renderStateScratch = _RenderState_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].fromCache */ .Z.fromCache({\n      viewport: new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0, 0, width, height),\n    });\n  }\n  return renderStateScratch;\n}\n\nComputeEngine.prototype.execute = function (computeCommand) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("computeCommand", computeCommand);\n  //>>includeEnd(\'debug\');\n\n  // This may modify the command\'s resources, so do error checking afterwards\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.preExecute)) {\n    computeCommand.preExecute(computeCommand);\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.fragmentShaderSource) &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.shaderProgram)\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n      "computeCommand.fragmentShaderSource or computeCommand.shaderProgram is required."\n    );\n  }\n\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].defined */ .Z.defined("computeCommand.outputTexture", computeCommand.outputTexture);\n  //>>includeEnd(\'debug\');\n\n  var outputTexture = computeCommand.outputTexture;\n  var width = outputTexture.width;\n  var height = outputTexture.height;\n\n  var context = this._context;\n  var vertexArray = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.vertexArray)\n    ? computeCommand.vertexArray\n    : context.getViewportQuadVertexArray();\n  var shaderProgram = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.shaderProgram)\n    ? computeCommand.shaderProgram\n    : createViewportQuadShader(context, computeCommand.fragmentShaderSource);\n  var framebuffer = createFramebuffer(context, outputTexture);\n  var renderState = createRenderState(width, height);\n  var uniformMap = computeCommand.uniformMap;\n\n  var clearCommand = clearCommandScratch;\n  clearCommand.framebuffer = framebuffer;\n  clearCommand.renderState = renderState;\n  clearCommand.execute(context);\n\n  var drawCommand = drawCommandScratch;\n  drawCommand.vertexArray = vertexArray;\n  drawCommand.renderState = renderState;\n  drawCommand.shaderProgram = shaderProgram;\n  drawCommand.uniformMap = uniformMap;\n  drawCommand.framebuffer = framebuffer;\n  drawCommand.execute(context);\n\n  framebuffer.destroy();\n\n  if (!computeCommand.persists) {\n    shaderProgram.destroy();\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.vertexArray)) {\n      vertexArray.destroy();\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z)(computeCommand.postExecute)) {\n    computeCommand.postExecute(outputTexture);\n  }\n};\n\nComputeEngine.prototype.isDestroyed = function () {\n  return false;\n};\n\nComputeEngine.prototype.destroy = function () {\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ComputeEngine);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxNTcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUE2RDtBQUN4QjtBQUNBO0FBQ0k7QUFDWTtBQUNFO0FBQ0Y7QUFDSztBQUNiO0FBQ0Y7QUFDQTtBQUNBO0FBQ0k7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixnRUFBVztBQUN4QyxpQkFBaUIsMkZBQXVCO0FBQ3hDLENBQUM7QUFDRCw4QkFBOEIsaUVBQVk7QUFDMUMsYUFBYSwrREFBSztBQUNsQixDQUFDOztBQUVEO0FBQ0EsYUFBYSxnRUFBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxTQUFTLHVGQUF1QjtBQUNoQztBQUNBLHdCQUF3Qiw0RUFBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLEtBQUssc0VBQU87QUFDWjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0ZBQXFCO0FBQzlDLG9CQUFvQiwyRUFBaUI7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRSwrRUFBYTtBQUNmOztBQUVBO0FBQ0EsTUFBTSxzRUFBTztBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUssc0VBQU87QUFDWixLQUFLLHNFQUFPO0FBQ1o7QUFDQSxjQUFjLHdFQUFjO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLCtFQUFhO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLHNFQUFPO0FBQzNCO0FBQ0E7QUFDQSxzQkFBc0Isc0VBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxzRUFBTztBQUNmO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLHNFQUFPO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsMkVBQWE7QUFDdEI7QUFDQSx5REFBZSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvUmVuZGVyZXIvQ29tcHV0ZUVuZ2luZS5qcz8yNzdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3VuZGluZ1JlY3RhbmdsZSBmcm9tIFwiLi4vQ29yZS9Cb3VuZGluZ1JlY3RhbmdsZS5qc1wiO1xuaW1wb3J0IENoZWNrIGZyb20gXCIuLi9Db3JlL0NoZWNrLmpzXCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL0NvcmUvQ29sb3IuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBkZXN0cm95T2JqZWN0IGZyb20gXCIuLi9Db3JlL2Rlc3Ryb3lPYmplY3QuanNcIjtcbmltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuaW1wb3J0IFByaW1pdGl2ZVR5cGUgZnJvbSBcIi4uL0NvcmUvUHJpbWl0aXZlVHlwZS5qc1wiO1xuaW1wb3J0IFZpZXdwb3J0UXVhZFZTIGZyb20gXCIuLi9TaGFkZXJzL1ZpZXdwb3J0UXVhZFZTLmpzXCI7XG5pbXBvcnQgQ2xlYXJDb21tYW5kIGZyb20gXCIuL0NsZWFyQ29tbWFuZC5qc1wiO1xuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuL0RyYXdDb21tYW5kLmpzXCI7XG5pbXBvcnQgRnJhbWVidWZmZXIgZnJvbSBcIi4vRnJhbWVidWZmZXIuanNcIjtcbmltcG9ydCBSZW5kZXJTdGF0ZSBmcm9tIFwiLi9SZW5kZXJTdGF0ZS5qc1wiO1xuaW1wb3J0IFNoYWRlclByb2dyYW0gZnJvbSBcIi4vU2hhZGVyUHJvZ3JhbS5qc1wiO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIENvbXB1dGVFbmdpbmUoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxudmFyIHJlbmRlclN0YXRlU2NyYXRjaDtcbnZhciBkcmF3Q29tbWFuZFNjcmF0Y2ggPSBuZXcgRHJhd0NvbW1hbmQoe1xuICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlLlRSSUFOR0xFUyxcbn0pO1xudmFyIGNsZWFyQ29tbWFuZFNjcmF0Y2ggPSBuZXcgQ2xlYXJDb21tYW5kKHtcbiAgY29sb3I6IG5ldyBDb2xvcigwLjAsIDAuMCwgMC4wLCAwLjApLFxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYW1lYnVmZmVyKGNvbnRleHQsIG91dHB1dFRleHR1cmUpIHtcbiAgcmV0dXJuIG5ldyBGcmFtZWJ1ZmZlcih7XG4gICAgY29udGV4dDogY29udGV4dCxcbiAgICBjb2xvclRleHR1cmVzOiBbb3V0cHV0VGV4dHVyZV0sXG4gICAgZGVzdHJveUF0dGFjaG1lbnRzOiBmYWxzZSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZpZXdwb3J0UXVhZFNoYWRlcihjb250ZXh0LCBmcmFnbWVudFNoYWRlclNvdXJjZSkge1xuICByZXR1cm4gU2hhZGVyUHJvZ3JhbS5mcm9tQ2FjaGUoe1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgdmVydGV4U2hhZGVyU291cmNlOiBWaWV3cG9ydFF1YWRWUyxcbiAgICBmcmFnbWVudFNoYWRlclNvdXJjZTogZnJhZ21lbnRTaGFkZXJTb3VyY2UsXG4gICAgYXR0cmlidXRlTG9jYXRpb25zOiB7XG4gICAgICBwb3NpdGlvbjogMCxcbiAgICAgIHRleHR1cmVDb29yZGluYXRlczogMSxcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyU3RhdGUod2lkdGgsIGhlaWdodCkge1xuICBpZiAoXG4gICAgIWRlZmluZWQocmVuZGVyU3RhdGVTY3JhdGNoKSB8fFxuICAgIHJlbmRlclN0YXRlU2NyYXRjaC52aWV3cG9ydC53aWR0aCAhPT0gd2lkdGggfHxcbiAgICByZW5kZXJTdGF0ZVNjcmF0Y2gudmlld3BvcnQuaGVpZ2h0ICE9PSBoZWlnaHRcbiAgKSB7XG4gICAgcmVuZGVyU3RhdGVTY3JhdGNoID0gUmVuZGVyU3RhdGUuZnJvbUNhY2hlKHtcbiAgICAgIHZpZXdwb3J0OiBuZXcgQm91bmRpbmdSZWN0YW5nbGUoMCwgMCwgd2lkdGgsIGhlaWdodCksXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlbmRlclN0YXRlU2NyYXRjaDtcbn1cblxuQ29tcHV0ZUVuZ2luZS5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChjb21wdXRlQ29tbWFuZCkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay5kZWZpbmVkKFwiY29tcHV0ZUNvbW1hbmRcIiwgY29tcHV0ZUNvbW1hbmQpO1xuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAvLyBUaGlzIG1heSBtb2RpZnkgdGhlIGNvbW1hbmQncyByZXNvdXJjZXMsIHNvIGRvIGVycm9yIGNoZWNraW5nIGFmdGVyd2FyZHNcbiAgaWYgKGRlZmluZWQoY29tcHV0ZUNvbW1hbmQucHJlRXhlY3V0ZSkpIHtcbiAgICBjb21wdXRlQ29tbWFuZC5wcmVFeGVjdXRlKGNvbXB1dGVDb21tYW5kKTtcbiAgfVxuXG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIGlmIChcbiAgICAhZGVmaW5lZChjb21wdXRlQ29tbWFuZC5mcmFnbWVudFNoYWRlclNvdXJjZSkgJiZcbiAgICAhZGVmaW5lZChjb21wdXRlQ29tbWFuZC5zaGFkZXJQcm9ncmFtKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICBcImNvbXB1dGVDb21tYW5kLmZyYWdtZW50U2hhZGVyU291cmNlIG9yIGNvbXB1dGVDb21tYW5kLnNoYWRlclByb2dyYW0gaXMgcmVxdWlyZWQuXCJcbiAgICApO1xuICB9XG5cbiAgQ2hlY2suZGVmaW5lZChcImNvbXB1dGVDb21tYW5kLm91dHB1dFRleHR1cmVcIiwgY29tcHV0ZUNvbW1hbmQub3V0cHV0VGV4dHVyZSk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBvdXRwdXRUZXh0dXJlID0gY29tcHV0ZUNvbW1hbmQub3V0cHV0VGV4dHVyZTtcbiAgdmFyIHdpZHRoID0gb3V0cHV0VGV4dHVyZS53aWR0aDtcbiAgdmFyIGhlaWdodCA9IG91dHB1dFRleHR1cmUuaGVpZ2h0O1xuXG4gIHZhciBjb250ZXh0ID0gdGhpcy5fY29udGV4dDtcbiAgdmFyIHZlcnRleEFycmF5ID0gZGVmaW5lZChjb21wdXRlQ29tbWFuZC52ZXJ0ZXhBcnJheSlcbiAgICA/IGNvbXB1dGVDb21tYW5kLnZlcnRleEFycmF5XG4gICAgOiBjb250ZXh0LmdldFZpZXdwb3J0UXVhZFZlcnRleEFycmF5KCk7XG4gIHZhciBzaGFkZXJQcm9ncmFtID0gZGVmaW5lZChjb21wdXRlQ29tbWFuZC5zaGFkZXJQcm9ncmFtKVxuICAgID8gY29tcHV0ZUNvbW1hbmQuc2hhZGVyUHJvZ3JhbVxuICAgIDogY3JlYXRlVmlld3BvcnRRdWFkU2hhZGVyKGNvbnRleHQsIGNvbXB1dGVDb21tYW5kLmZyYWdtZW50U2hhZGVyU291cmNlKTtcbiAgdmFyIGZyYW1lYnVmZmVyID0gY3JlYXRlRnJhbWVidWZmZXIoY29udGV4dCwgb3V0cHV0VGV4dHVyZSk7XG4gIHZhciByZW5kZXJTdGF0ZSA9IGNyZWF0ZVJlbmRlclN0YXRlKHdpZHRoLCBoZWlnaHQpO1xuICB2YXIgdW5pZm9ybU1hcCA9IGNvbXB1dGVDb21tYW5kLnVuaWZvcm1NYXA7XG5cbiAgdmFyIGNsZWFyQ29tbWFuZCA9IGNsZWFyQ29tbWFuZFNjcmF0Y2g7XG4gIGNsZWFyQ29tbWFuZC5mcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuICBjbGVhckNvbW1hbmQucmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZTtcbiAgY2xlYXJDb21tYW5kLmV4ZWN1dGUoY29udGV4dCk7XG5cbiAgdmFyIGRyYXdDb21tYW5kID0gZHJhd0NvbW1hbmRTY3JhdGNoO1xuICBkcmF3Q29tbWFuZC52ZXJ0ZXhBcnJheSA9IHZlcnRleEFycmF5O1xuICBkcmF3Q29tbWFuZC5yZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlO1xuICBkcmF3Q29tbWFuZC5zaGFkZXJQcm9ncmFtID0gc2hhZGVyUHJvZ3JhbTtcbiAgZHJhd0NvbW1hbmQudW5pZm9ybU1hcCA9IHVuaWZvcm1NYXA7XG4gIGRyYXdDb21tYW5kLmZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXI7XG4gIGRyYXdDb21tYW5kLmV4ZWN1dGUoY29udGV4dCk7XG5cbiAgZnJhbWVidWZmZXIuZGVzdHJveSgpO1xuXG4gIGlmICghY29tcHV0ZUNvbW1hbmQucGVyc2lzdHMpIHtcbiAgICBzaGFkZXJQcm9ncmFtLmRlc3Ryb3koKTtcbiAgICBpZiAoZGVmaW5lZChjb21wdXRlQ29tbWFuZC52ZXJ0ZXhBcnJheSkpIHtcbiAgICAgIHZlcnRleEFycmF5LmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVmaW5lZChjb21wdXRlQ29tbWFuZC5wb3N0RXhlY3V0ZSkpIHtcbiAgICBjb21wdXRlQ29tbWFuZC5wb3N0RXhlY3V0ZShvdXRwdXRUZXh0dXJlKTtcbiAgfVxufTtcblxuQ29tcHV0ZUVuZ2luZS5wcm90b3R5cGUuaXNEZXN0cm95ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkNvbXB1dGVFbmdpbmUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZXN0cm95T2JqZWN0KHRoaXMpO1xufTtcbmV4cG9ydCBkZWZhdWx0IENvbXB1dGVFbmdpbmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18157\n')},19385:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83856);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84828);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(39960);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Geometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82408);\n/* harmony import */ var _Core_GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(13616);\n/* harmony import */ var _Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(54973);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(72248);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(38443);\n/* harmony import */ var _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(97264);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9407);\n/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(52200);\n/* harmony import */ var _Shaders_ViewportQuadVS_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(59629);\n/* harmony import */ var _BufferUsage_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(58597);\n/* harmony import */ var _ClearCommand_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(39899);\n/* harmony import */ var _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(20521);\n/* harmony import */ var _CubeMap_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(51107);\n/* harmony import */ var _DrawCommand_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(60072);\n/* harmony import */ var _PassState_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(65121);\n/* harmony import */ var _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(21572);\n/* harmony import */ var _RenderState_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(10667);\n/* harmony import */ var _ShaderCache_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(5631);\n/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(46588);\n/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(8743);\n/* harmony import */ var _TextureCache_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(32158);\n/* harmony import */ var _UniformState_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(79140);\n/* harmony import */ var _VertexArray_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(18192);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction errorToString(gl, error) {\n  var message = "WebGL Error:  ";\n  switch (error) {\n    case gl.INVALID_ENUM:\n      message += "INVALID_ENUM";\n      break;\n    case gl.INVALID_VALUE:\n      message += "INVALID_VALUE";\n      break;\n    case gl.INVALID_OPERATION:\n      message += "INVALID_OPERATION";\n      break;\n    case gl.OUT_OF_MEMORY:\n      message += "OUT_OF_MEMORY";\n      break;\n    case gl.CONTEXT_LOST_WEBGL:\n      message += "CONTEXT_LOST_WEBGL lost";\n      break;\n    default:\n      message += "Unknown (" + error + ")";\n  }\n\n  return message;\n}\n\nfunction createErrorMessage(gl, glFunc, glFuncArguments, error) {\n  var message = errorToString(gl, error) + ": " + glFunc.name + "(";\n\n  for (var i = 0; i < glFuncArguments.length; ++i) {\n    if (i !== 0) {\n      message += ", ";\n    }\n    message += glFuncArguments[i];\n  }\n  message += ");";\n\n  return message;\n}\n\nfunction throwOnError(gl, glFunc, glFuncArguments) {\n  var error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z(\n      createErrorMessage(gl, glFunc, glFuncArguments, error)\n    );\n  }\n}\n\nfunction makeGetterSetter(gl, propertyName, logFunction) {\n  return {\n    get: function () {\n      var value = gl[propertyName];\n      logFunction(gl, "get: " + propertyName, value);\n      return gl[propertyName];\n    },\n    set: function (value) {\n      gl[propertyName] = value;\n      logFunction(gl, "set: " + propertyName, value);\n    },\n  };\n}\n\nfunction wrapGL(gl, logFunction) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(logFunction)) {\n    return gl;\n  }\n\n  function wrapFunction(property) {\n    return function () {\n      var result = property.apply(gl, arguments);\n      logFunction(gl, property, arguments);\n      return result;\n    };\n  }\n\n  var glWrapper = {};\n\n  // JavaScript linters normally demand that a for..in loop must directly contain an if,\n  // but in our loop below, we actually intend to iterate all properties, including\n  // those in the prototype.\n  /*eslint-disable guard-for-in*/\n  for (var propertyName in gl) {\n    var property = gl[propertyName];\n\n    // wrap any functions we encounter, otherwise just copy the property to the wrapper.\n    if (property instanceof Function) {\n      glWrapper[propertyName] = wrapFunction(property);\n    } else {\n      Object.defineProperty(\n        glWrapper,\n        propertyName,\n        makeGetterSetter(gl, propertyName, logFunction)\n      );\n    }\n  }\n  /*eslint-enable guard-for-in*/\n\n  return glWrapper;\n}\n\nfunction getExtension(gl, names) {\n  var length = names.length;\n  for (var i = 0; i < length; ++i) {\n    var extension = gl.getExtension(names[i]);\n    if (extension) {\n      return extension;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * @private\n * @constructor\n */\nfunction Context(canvas, options) {\n  // this check must use typeof, not defined, because defined doesn\'t work with undeclared variables.\n  if (typeof WebGLRenderingContext === "undefined") {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z(\n      "The browser does not support WebGL.  Visit http://get.webgl.org."\n    );\n  }\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("canvas", canvas);\n  //>>includeEnd(\'debug\');\n\n  this._canvas = canvas;\n\n  options = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, true);\n  // Don\'t use defaultValue.EMPTY_OBJECT here because the options object gets modified in the next line.\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, {});\n  options.allowTextureFilterAnisotropic = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.allowTextureFilterAnisotropic,\n    true\n  );\n  var webglOptions = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.webgl, {});\n\n  // Override select WebGL defaults\n  webglOptions.alpha = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(webglOptions.alpha, false); // WebGL default is true\n  webglOptions.stencil = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(webglOptions.stencil, true); // WebGL default is false\n\n  var requestWebgl2 =\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.requestWebgl2, false) &&\n    typeof WebGL2RenderingContext !== "undefined";\n  var webgl2 = false;\n\n  var glContext;\n  var getWebGLStub = options.getWebGLStub;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(getWebGLStub)) {\n    if (requestWebgl2) {\n      glContext =\n        canvas.getContext("webgl2", webglOptions) ||\n        canvas.getContext("experimental-webgl2", webglOptions) ||\n        undefined;\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(glContext)) {\n        webgl2 = true;\n      }\n    }\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(glContext)) {\n      glContext =\n        canvas.getContext("webgl", webglOptions) ||\n        canvas.getContext("experimental-webgl", webglOptions) ||\n        undefined;\n    }\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(glContext)) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z(\n        "The browser supports WebGL, but initialization failed."\n      );\n    }\n  } else {\n    // Use WebGL stub when requested for unit tests\n    glContext = getWebGLStub(canvas, webglOptions);\n  }\n\n  this._originalGLContext = glContext;\n  this._gl = glContext;\n  this._webgl2 = webgl2;\n  this._id = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"] */ .Z)();\n\n  // Validation and logging disabled by default for speed.\n  this.validateFramebuffer = false;\n  this.validateShaderProgram = false;\n  this.logShaderCompilation = false;\n\n  this._throwOnWebGLError = false;\n\n  this._shaderCache = new _ShaderCache_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z(this);\n  this._textureCache = new _TextureCache_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z();\n\n  var gl = glContext;\n\n  this._stencilBits = gl.getParameter(gl.STENCIL_BITS);\n\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumCombinedTextureImageUnits */ .Z._maximumCombinedTextureImageUnits = gl.getParameter(\n    gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS\n  ); // min: 8\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumCubeMapSize */ .Z._maximumCubeMapSize = gl.getParameter(\n    gl.MAX_CUBE_MAP_TEXTURE_SIZE\n  ); // min: 16\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumFragmentUniformVectors */ .Z._maximumFragmentUniformVectors = gl.getParameter(\n    gl.MAX_FRAGMENT_UNIFORM_VECTORS\n  ); // min: 16\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumTextureImageUnits */ .Z._maximumTextureImageUnits = gl.getParameter(\n    gl.MAX_TEXTURE_IMAGE_UNITS\n  ); // min: 8\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumRenderbufferSize */ .Z._maximumRenderbufferSize = gl.getParameter(\n    gl.MAX_RENDERBUFFER_SIZE\n  ); // min: 1\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumTextureSize */ .Z._maximumTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE); // min: 64\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumVaryingVectors */ .Z._maximumVaryingVectors = gl.getParameter(\n    gl.MAX_VARYING_VECTORS\n  ); // min: 8\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumVertexAttributes */ .Z._maximumVertexAttributes = gl.getParameter(\n    gl.MAX_VERTEX_ATTRIBS\n  ); // min: 8\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumVertexTextureImageUnits */ .Z._maximumVertexTextureImageUnits = gl.getParameter(\n    gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS\n  ); // min: 0\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumVertexUniformVectors */ .Z._maximumVertexUniformVectors = gl.getParameter(\n    gl.MAX_VERTEX_UNIFORM_VECTORS\n  ); // min: 128\n\n  var aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE); // must include 1\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._minimumAliasedLineWidth */ .Z._minimumAliasedLineWidth = aliasedLineWidthRange[0];\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumAliasedLineWidth */ .Z._maximumAliasedLineWidth = aliasedLineWidthRange[1];\n\n  var aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); // must include 1\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._minimumAliasedPointSize */ .Z._minimumAliasedPointSize = aliasedPointSizeRange[0];\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumAliasedPointSize */ .Z._maximumAliasedPointSize = aliasedPointSizeRange[1];\n\n  var maximumViewportDimensions = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumViewportWidth */ .Z._maximumViewportWidth = maximumViewportDimensions[0];\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumViewportHeight */ .Z._maximumViewportHeight = maximumViewportDimensions[1];\n\n  var highpFloat = gl.getShaderPrecisionFormat(\n    gl.FRAGMENT_SHADER,\n    gl.HIGH_FLOAT\n  );\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._highpFloatSupported */ .Z._highpFloatSupported = highpFloat.precision !== 0;\n  var highpInt = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._highpIntSupported */ .Z._highpIntSupported = highpInt.rangeMax !== 0;\n\n  this._antialias = gl.getContextAttributes().antialias;\n\n  // Query and initialize extensions\n  this._standardDerivatives = !!getExtension(gl, ["OES_standard_derivatives"]);\n  this._blendMinmax = !!getExtension(gl, ["EXT_blend_minmax"]);\n  this._elementIndexUint = !!getExtension(gl, ["OES_element_index_uint"]);\n  this._depthTexture = !!getExtension(gl, [\n    "WEBGL_depth_texture",\n    "WEBKIT_WEBGL_depth_texture",\n  ]);\n  this._fragDepth = !!getExtension(gl, ["EXT_frag_depth"]);\n  this._debugShaders = getExtension(gl, ["WEBGL_debug_shaders"]);\n\n  this._textureFloat = !!getExtension(gl, ["OES_texture_float"]);\n  this._textureHalfFloat = !!getExtension(gl, ["OES_texture_half_float"]);\n\n  this._textureFloatLinear = !!getExtension(gl, ["OES_texture_float_linear"]);\n  this._textureHalfFloatLinear = !!getExtension(gl, [\n    "OES_texture_half_float_linear",\n  ]);\n\n  this._colorBufferFloat = !!getExtension(gl, [\n    "EXT_color_buffer_float",\n    "WEBGL_color_buffer_float",\n  ]);\n  this._floatBlend = !!getExtension(gl, ["EXT_float_blend"]);\n  this._colorBufferHalfFloat = !!getExtension(gl, [\n    "EXT_color_buffer_half_float",\n  ]);\n\n  this._s3tc = !!getExtension(gl, [\n    "WEBGL_compressed_texture_s3tc",\n    "MOZ_WEBGL_compressed_texture_s3tc",\n    "WEBKIT_WEBGL_compressed_texture_s3tc",\n  ]);\n  this._pvrtc = !!getExtension(gl, [\n    "WEBGL_compressed_texture_pvrtc",\n    "WEBKIT_WEBGL_compressed_texture_pvrtc",\n  ]);\n  this._astc = !!getExtension(gl, ["WEBGL_compressed_texture_astc"]);\n  this._etc = !!getExtension(gl, ["WEBG_compressed_texture_etc"]);\n  this._etc1 = !!getExtension(gl, ["WEBGL_compressed_texture_etc1"]);\n  this._bc7 = !!getExtension(gl, ["EXT_texture_compression_bptc"]);\n\n  // It is necessary to pass supported formats to loadKTX2\n  // because imagery layers don\'t have access to the context.\n  _Core_loadKTX2_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].setKTX2SupportedFormats */ .Z.setKTX2SupportedFormats(\n    this._s3tc,\n    this._pvrtc,\n    this._astc,\n    this._etc,\n    this._etc1,\n    this._bc7\n  );\n\n  var textureFilterAnisotropic = options.allowTextureFilterAnisotropic\n    ? getExtension(gl, [\n        "EXT_texture_filter_anisotropic",\n        "WEBKIT_EXT_texture_filter_anisotropic",\n      ])\n    : undefined;\n  this._textureFilterAnisotropic = textureFilterAnisotropic;\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumTextureFilterAnisotropy */ .Z._maximumTextureFilterAnisotropy = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(\n    textureFilterAnisotropic\n  )\n    ? gl.getParameter(textureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n    : 1.0;\n\n  var glCreateVertexArray;\n  var glBindVertexArray;\n  var glDeleteVertexArray;\n\n  var glDrawElementsInstanced;\n  var glDrawArraysInstanced;\n  var glVertexAttribDivisor;\n\n  var glDrawBuffers;\n\n  var vertexArrayObject;\n  var instancedArrays;\n  var drawBuffers;\n\n  if (webgl2) {\n    var that = this;\n\n    glCreateVertexArray = function () {\n      return that._gl.createVertexArray();\n    };\n    glBindVertexArray = function (vao) {\n      that._gl.bindVertexArray(vao);\n    };\n    glDeleteVertexArray = function (vao) {\n      that._gl.deleteVertexArray(vao);\n    };\n\n    glDrawElementsInstanced = function (\n      mode,\n      count,\n      type,\n      offset,\n      instanceCount\n    ) {\n      gl.drawElementsInstanced(mode, count, type, offset, instanceCount);\n    };\n    glDrawArraysInstanced = function (mode, first, count, instanceCount) {\n      gl.drawArraysInstanced(mode, first, count, instanceCount);\n    };\n    glVertexAttribDivisor = function (index, divisor) {\n      gl.vertexAttribDivisor(index, divisor);\n    };\n\n    glDrawBuffers = function (buffers) {\n      gl.drawBuffers(buffers);\n    };\n  } else {\n    vertexArrayObject = getExtension(gl, ["OES_vertex_array_object"]);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(vertexArrayObject)) {\n      glCreateVertexArray = function () {\n        return vertexArrayObject.createVertexArrayOES();\n      };\n      glBindVertexArray = function (vertexArray) {\n        vertexArrayObject.bindVertexArrayOES(vertexArray);\n      };\n      glDeleteVertexArray = function (vertexArray) {\n        vertexArrayObject.deleteVertexArrayOES(vertexArray);\n      };\n    }\n\n    instancedArrays = getExtension(gl, ["ANGLE_instanced_arrays"]);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(instancedArrays)) {\n      glDrawElementsInstanced = function (\n        mode,\n        count,\n        type,\n        offset,\n        instanceCount\n      ) {\n        instancedArrays.drawElementsInstancedANGLE(\n          mode,\n          count,\n          type,\n          offset,\n          instanceCount\n        );\n      };\n      glDrawArraysInstanced = function (mode, first, count, instanceCount) {\n        instancedArrays.drawArraysInstancedANGLE(\n          mode,\n          first,\n          count,\n          instanceCount\n        );\n      };\n      glVertexAttribDivisor = function (index, divisor) {\n        instancedArrays.vertexAttribDivisorANGLE(index, divisor);\n      };\n    }\n\n    drawBuffers = getExtension(gl, ["WEBGL_draw_buffers"]);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(drawBuffers)) {\n      glDrawBuffers = function (buffers) {\n        drawBuffers.drawBuffersWEBGL(buffers);\n      };\n    }\n  }\n\n  this.glCreateVertexArray = glCreateVertexArray;\n  this.glBindVertexArray = glBindVertexArray;\n  this.glDeleteVertexArray = glDeleteVertexArray;\n\n  this.glDrawElementsInstanced = glDrawElementsInstanced;\n  this.glDrawArraysInstanced = glDrawArraysInstanced;\n  this.glVertexAttribDivisor = glVertexAttribDivisor;\n\n  this.glDrawBuffers = glDrawBuffers;\n\n  this._vertexArrayObject = !!vertexArrayObject;\n  this._instancedArrays = !!instancedArrays;\n  this._drawBuffers = !!drawBuffers;\n\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumDrawBuffers */ .Z._maximumDrawBuffers = this.drawBuffers\n    ? gl.getParameter(_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].MAX_DRAW_BUFFERS */ .Z.MAX_DRAW_BUFFERS)\n    : 1;\n  _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumColorAttachments */ .Z._maximumColorAttachments = this.drawBuffers\n    ? gl.getParameter(_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].MAX_COLOR_ATTACHMENTS */ .Z.MAX_COLOR_ATTACHMENTS)\n    : 1;\n\n  this._clearColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(0.0, 0.0, 0.0, 0.0);\n  this._clearDepth = 1.0;\n  this._clearStencil = 0;\n\n  var us = new _UniformState_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z();\n  var ps = new _PassState_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z(this);\n  var rs = _RenderState_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].fromCache */ .Z.fromCache();\n\n  this._defaultPassState = ps;\n  this._defaultRenderState = rs;\n  // default texture has a value of (1, 1, 1)\n  // default emissive texture has a value of (0, 0, 0)\n  // default normal texture is +z which is encoded as (0.5, 0.5, 1)\n  this._defaultTexture = undefined;\n  this._defaultEmissiveTexture = undefined;\n  this._defaultNormalTexture = undefined;\n  this._defaultCubeMap = undefined;\n\n  this._us = us;\n  this._currentRenderState = rs;\n  this._currentPassState = ps;\n  this._currentFramebuffer = undefined;\n  this._maxFrameTextureUnitIndex = 0;\n\n  // Vertex attribute divisor state cache. Workaround for ANGLE (also look at VertexArray.setVertexAttribDivisor)\n  this._vertexAttribDivisors = [];\n  this._previousDrawInstanced = false;\n  for (var i = 0; i < _ContextLimits_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"]._maximumVertexAttributes */ .Z._maximumVertexAttributes; i++) {\n    this._vertexAttribDivisors.push(0);\n  }\n\n  this._pickObjects = {};\n  this._nextPickColor = new Uint32Array(1);\n\n  /**\n   * @example\n   * {\n   *   webgl : {\n   *     alpha : false,\n   *     depth : true,\n   *     stencil : false,\n   *     antialias : true,\n   *     premultipliedAlpha : true,\n   *     preserveDrawingBuffer : false,\n   *     failIfMajorPerformanceCaveat : true\n   *   },\n   *   allowTextureFilterAnisotropic : true\n   * }\n   */\n  this.options = options;\n\n  /**\n   * A cache of objects tied to this context.  Just before the Context is destroyed,\n   * <code>destroy</code> will be invoked on each object in this object literal that has\n   * such a method.  This is useful for caching any objects that might otherwise\n   * be stored globally, except they\'re tied to a particular context, and to manage\n   * their lifetime.\n   *\n   * @type {Object}\n   */\n  this.cache = {};\n\n  _RenderState_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].apply */ .Z.apply(gl, rs, ps);\n}\n\nvar defaultFramebufferMarker = {};\n\nObject.defineProperties(Context.prototype, {\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  webgl2: {\n    get: function () {\n      return this._webgl2;\n    },\n  },\n  canvas: {\n    get: function () {\n      return this._canvas;\n    },\n  },\n  shaderCache: {\n    get: function () {\n      return this._shaderCache;\n    },\n  },\n  textureCache: {\n    get: function () {\n      return this._textureCache;\n    },\n  },\n  uniformState: {\n    get: function () {\n      return this._us;\n    },\n  },\n\n  /**\n   * The number of stencil bits per pixel in the default bound framebuffer.  The minimum is eight bits.\n   * @memberof Context.prototype\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>STENCIL_BITS</code>.\n   */\n  stencilBits: {\n    get: function () {\n      return this._stencilBits;\n    },\n  },\n\n  /**\n   * <code>true</code> if the WebGL context supports stencil buffers.\n   * Stencil buffers are not supported by all systems.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   */\n  stencilBuffer: {\n    get: function () {\n      return this._stencilBits >= 8;\n    },\n  },\n\n  /**\n   * <code>true</code> if the WebGL context supports antialiasing.  By default\n   * antialiasing is requested, but it is not supported by all systems.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   */\n  antialias: {\n    get: function () {\n      return this._antialias;\n    },\n  },\n\n  /**\n   * <code>true</code> if the OES_standard_derivatives extension is supported.  This\n   * extension provides access to <code>dFdx</code>, <code>dFdy</code>, and <code>fwidth</code>\n   * functions from GLSL.  A shader using these functions still needs to explicitly enable the\n   * extension with <code>#extension GL_OES_standard_derivatives : enable</code>.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link http://www.khronos.org/registry/gles/extensions/OES/OES_standard_derivatives.txt|OES_standard_derivatives}\n   */\n  standardDerivatives: {\n    get: function () {\n      return this._standardDerivatives || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_float_blend extension is supported. This\n   * extension enables blending with 32-bit float values.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_float_blend/}\n   */\n  floatBlend: {\n    get: function () {\n      return this._floatBlend;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_blend_minmax extension is supported.  This\n   * extension extends blending capabilities by adding two new blend equations:\n   * the minimum or maximum color components of the source and destination colors.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_blend_minmax/}\n   */\n  blendMinmax: {\n    get: function () {\n      return this._blendMinmax || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the OES_element_index_uint extension is supported.  This\n   * extension allows the use of unsigned int indices, which can improve performance by\n   * eliminating batch breaking caused by unsigned short indices.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_element_index_uint/|OES_element_index_uint}\n   */\n  elementIndexUint: {\n    get: function () {\n      return this._elementIndexUint || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_depth_texture is supported.  This extension provides\n   * access to depth textures that, for example, can be attached to framebuffers for shadow mapping.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n   */\n  depthTexture: {\n    get: function () {\n      return this._depthTexture || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_float is supported. This extension provides\n   * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float/}\n   */\n  floatingPointTexture: {\n    get: function () {\n      return this._webgl2 || this._textureFloat;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_half_float is supported. This extension provides\n   * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float/}\n   */\n  halfFloatingPointTexture: {\n    get: function () {\n      return this._webgl2 || this._textureHalfFloat;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_float_linear is supported. This extension provides\n   * access to linear sampling methods for minification and magnification filters of floating-point textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float_linear/}\n   */\n  textureFloatLinear: {\n    get: function () {\n      return this._textureFloatLinear;\n    },\n  },\n\n  /**\n   * <code>true</code> if OES_texture_half_float_linear is supported. This extension provides\n   * access to linear sampling methods for minification and magnification filters of half floating-point textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float_linear/}\n   */\n  textureHalfFloatLinear: {\n    get: function () {\n      return (\n        (this._webgl2 && this._textureFloatLinear) ||\n        (!this._webgl2 && this._textureHalfFloatLinear)\n      );\n    },\n  },\n\n  /**\n   * <code>true</code> if EXT_texture_filter_anisotropic is supported. This extension provides\n   * access to anisotropic filtering for textured surfaces at an oblique angle from the viewer.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_filter_anisotropic/}\n   */\n  textureFilterAnisotropic: {\n    get: function () {\n      return !!this._textureFilterAnisotropic;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_s3tc is supported.  This extension provides\n   * access to DXT compressed textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/}\n   */\n  s3tc: {\n    get: function () {\n      return this._s3tc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_pvrtc is supported.  This extension provides\n   * access to PVR compressed textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/}\n   */\n  pvrtc: {\n    get: function () {\n      return this._pvrtc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_astc is supported.  This extension provides\n   * access to ASTC compressed textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_astc/}\n   */\n  astc: {\n    get: function () {\n      return this._astc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_etc is supported.  This extension provides\n   * access to ETC compressed textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc/}\n   */\n  etc: {\n    get: function () {\n      return this._etc;\n    },\n  },\n\n  /**\n   * <code>true</code> if WEBGL_compressed_texture_etc1 is supported.  This extension provides\n   * access to ETC1 compressed textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/}\n   */\n  etc1: {\n    get: function () {\n      return this._etc1;\n    },\n  },\n\n  /**\n   * <code>true</code> if EXT_texture_compression_bptc is supported.  This extension provides\n   * access to BC7 compressed textures.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_compression_bptc/}\n   */\n  bc7: {\n    get: function () {\n      return this._bc7;\n    },\n  },\n\n  /**\n   * <code>true</code> if S3TC, PVRTC, ASTC, ETC, ETC1, or BC7 compression is supported.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   */\n  supportsBasis: {\n    get: function () {\n      return (\n        this._s3tc ||\n        this._pvrtc ||\n        this._astc ||\n        this._etc ||\n        this._etc1 ||\n        this._bc7\n      );\n    },\n  },\n\n  /**\n   * <code>true</code> if the OES_vertex_array_object extension is supported.  This\n   * extension can improve performance by reducing the overhead of switching vertex arrays.\n   * When enabled, this extension is automatically used by {@link VertexArray}.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_vertex_array_object/|OES_vertex_array_object}\n   */\n  vertexArrayObject: {\n    get: function () {\n      return this._vertexArrayObject || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_frag_depth extension is supported.  This\n   * extension provides access to the <code>gl_FragDepthEXT</code> built-in output variable\n   * from GLSL fragment shaders.  A shader using these functions still needs to explicitly enable the\n   * extension with <code>#extension GL_EXT_frag_depth : enable</code>.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/EXT_frag_depth/|EXT_frag_depth}\n   */\n  fragmentDepth: {\n    get: function () {\n      return this._fragDepth || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the ANGLE_instanced_arrays extension is supported.  This\n   * extension provides access to instanced rendering.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/ANGLE_instanced_arrays}\n   */\n  instancedArrays: {\n    get: function () {\n      return this._instancedArrays || this._webgl2;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_color_buffer_float extension is supported.  This\n   * extension makes the gl.RGBA32F format color renderable.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_color_buffer_float/}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n   */\n  colorBufferFloat: {\n    get: function () {\n      return this._colorBufferFloat;\n    },\n  },\n\n  /**\n   * <code>true</code> if the EXT_color_buffer_half_float extension is supported.  This\n   * extension makes the format gl.RGBA16F format color renderable.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_half_float/}\n   * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n   */\n  colorBufferHalfFloat: {\n    get: function () {\n      return (\n        (this._webgl2 && this._colorBufferFloat) ||\n        (!this._webgl2 && this._colorBufferHalfFloat)\n      );\n    },\n  },\n\n  /**\n   * <code>true</code> if the WEBGL_draw_buffers extension is supported. This\n   * extensions provides support for multiple render targets. The framebuffer object can have mutiple\n   * color attachments and the GLSL fragment shader can write to the built-in output array <code>gl_FragData</code>.\n   * A shader using this feature needs to explicitly enable the extension with\n   * <code>#extension GL_EXT_draw_buffers : enable</code>.\n   * @memberof Context.prototype\n   * @type {Boolean}\n   * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_draw_buffers/|WEBGL_draw_buffers}\n   */\n  drawBuffers: {\n    get: function () {\n      return this._drawBuffers || this._webgl2;\n    },\n  },\n\n  debugShaders: {\n    get: function () {\n      return this._debugShaders;\n    },\n  },\n\n  throwOnWebGLError: {\n    get: function () {\n      return this._throwOnWebGLError;\n    },\n    set: function (value) {\n      this._throwOnWebGLError = value;\n      this._gl = wrapGL(\n        this._originalGLContext,\n        value ? throwOnError : undefined\n      );\n    },\n  },\n\n  /**\n   * A 1x1 RGBA texture initialized to [255, 255, 255, 255].  This can\n   * be used as a placeholder texture while other textures are downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultTexture: {\n    get: function () {\n      if (this._defaultTexture === undefined) {\n        this._defaultTexture = new _Texture_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z({\n          context: this,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([255, 255, 255, 255]),\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultTexture;\n    },\n  },\n  /**\n   * A 1x1 RGB texture initialized to [0, 0, 0] representing a material that is\n   * not emissive. This can be used as a placeholder texture for emissive\n   * textures while other textures are downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultEmissiveTexture: {\n    get: function () {\n      if (this._defaultEmissiveTexture === undefined) {\n        this._defaultEmissiveTexture = new _Texture_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z({\n          context: this,\n          pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].RGB */ .Z.RGB,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([0, 0, 0]),\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultEmissiveTexture;\n    },\n  },\n  /**\n   * A 1x1 RGBA texture initialized to [128, 128, 255] to encode a tangent\n   * space normal pointing in the +z direction, i.e. (0, 0, 1). This can\n   * be used as a placeholder normal texture while other textures are\n   * downloaded.\n   * @memberof Context.prototype\n   * @type {Texture}\n   */\n  defaultNormalTexture: {\n    get: function () {\n      if (this._defaultNormalTexture === undefined) {\n        this._defaultNormalTexture = new _Texture_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z({\n          context: this,\n          pixelFormat: _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].RGB */ .Z.RGB,\n          source: {\n            width: 1,\n            height: 1,\n            arrayBufferView: new Uint8Array([128, 128, 255]),\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultNormalTexture;\n    },\n  },\n\n  /**\n   * A cube map, where each face is a 1x1 RGBA texture initialized to\n   * [255, 255, 255, 255].  This can be used as a placeholder cube map while\n   * other cube maps are downloaded.\n   * @memberof Context.prototype\n   * @type {CubeMap}\n   */\n  defaultCubeMap: {\n    get: function () {\n      if (this._defaultCubeMap === undefined) {\n        var face = {\n          width: 1,\n          height: 1,\n          arrayBufferView: new Uint8Array([255, 255, 255, 255]),\n        };\n\n        this._defaultCubeMap = new _CubeMap_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z({\n          context: this,\n          source: {\n            positiveX: face,\n            negativeX: face,\n            positiveY: face,\n            negativeY: face,\n            positiveZ: face,\n            negativeZ: face,\n          },\n          flipY: false,\n        });\n      }\n\n      return this._defaultCubeMap;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Context.prototype\n   * @type {Number}\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._gl.drawingBufferHeight;\n    },\n  },\n\n  /**\n   * The drawingBufferWidth of the underlying GL context.\n   * @memberof Context.prototype\n   * @type {Number}\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferWidth|drawingBufferWidth}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._gl.drawingBufferWidth;\n    },\n  },\n\n  /**\n   * Gets an object representing the currently bound framebuffer.  While this instance is not an actual\n   * {@link Framebuffer}, it is used to represent the default framebuffer in calls to\n   * {@link Texture.fromFramebuffer}.\n   * @memberof Context.prototype\n   * @type {Object}\n   */\n  defaultFramebuffer: {\n    get: function () {\n      return defaultFramebufferMarker;\n    },\n  },\n});\n\n/**\n * Validates a framebuffer.\n * Available in debug builds only.\n * @private\n */\nfunction validateFramebuffer(context) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (context.validateFramebuffer) {\n    var gl = context._gl;\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      var message;\n\n      switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n          message =\n            "Framebuffer is not complete.  Incomplete attachment: at least one attachment point with a renderbuffer or texture attached has its attached object no longer in existence or has an attached image with a width or height of zero, or the color attachment point has a non-color-renderable image attached, or the depth attachment point has a non-depth-renderable image attached, or the stencil attachment point has a non-stencil-renderable image attached.  Color-renderable formats include GL_RGBA4, GL_RGB5_A1, and GL_RGB565. GL_DEPTH_COMPONENT16 is the only depth-renderable format. GL_STENCIL_INDEX8 is the only stencil-renderable format.";\n          break;\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n          message =\n            "Framebuffer is not complete.  Incomplete dimensions: not all attached images have the same width and height.";\n          break;\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n          message =\n            "Framebuffer is not complete.  Missing attachment: no images are attached to the framebuffer.";\n          break;\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n          message =\n            "Framebuffer is not complete.  Unsupported: the combination of internal formats of the attached images violates an implementation-dependent set of restrictions.";\n          break;\n      }\n\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(message);\n    }\n  }\n  //>>includeEnd(\'debug\');\n}\n\nfunction applyRenderState(context, renderState, passState, clear) {\n  var previousRenderState = context._currentRenderState;\n  var previousPassState = context._currentPassState;\n  context._currentRenderState = renderState;\n  context._currentPassState = passState;\n  _RenderState_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].partialApply */ .Z.partialApply(\n    context._gl,\n    previousRenderState,\n    renderState,\n    previousPassState,\n    passState,\n    clear\n  );\n}\n\nvar scratchBackBufferArray;\n// this check must use typeof, not defined, because defined doesn\'t work with undeclared variables.\nif (typeof WebGLRenderingContext !== "undefined") {\n  scratchBackBufferArray = [_Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].BACK */ .Z.BACK];\n}\n\nfunction bindFramebuffer(context, framebuffer) {\n  if (framebuffer !== context._currentFramebuffer) {\n    context._currentFramebuffer = framebuffer;\n    var buffers = scratchBackBufferArray;\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(framebuffer)) {\n      framebuffer._bind();\n      validateFramebuffer(context);\n\n      // TODO: Need a way for a command to give what draw buffers are active.\n      buffers = framebuffer._getActiveColorAttachments();\n    } else {\n      var gl = context._gl;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    if (context.drawBuffers) {\n      context.glDrawBuffers(buffers);\n    }\n  }\n}\n\nvar defaultClearCommand = new _ClearCommand_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\n\nContext.prototype.clear = function (clearCommand, passState) {\n  clearCommand = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(clearCommand, defaultClearCommand);\n  passState = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(passState, this._defaultPassState);\n\n  var gl = this._gl;\n  var bitmask = 0;\n\n  var c = clearCommand.color;\n  var d = clearCommand.depth;\n  var s = clearCommand.stencil;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(c)) {\n    if (!_Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equals */ .Z.equals(this._clearColor, c)) {\n      _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(c, this._clearColor);\n      gl.clearColor(c.red, c.green, c.blue, c.alpha);\n    }\n    bitmask |= gl.COLOR_BUFFER_BIT;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(d)) {\n    if (d !== this._clearDepth) {\n      this._clearDepth = d;\n      gl.clearDepth(d);\n    }\n    bitmask |= gl.DEPTH_BUFFER_BIT;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(s)) {\n    if (s !== this._clearStencil) {\n      this._clearStencil = s;\n      gl.clearStencil(s);\n    }\n    bitmask |= gl.STENCIL_BUFFER_BIT;\n  }\n\n  var rs = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(clearCommand.renderState, this._defaultRenderState);\n  applyRenderState(this, rs, passState, true);\n\n  // The command\'s framebuffer takes presidence over the pass\' framebuffer, e.g., for off-screen rendering.\n  var framebuffer = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    clearCommand.framebuffer,\n    passState.framebuffer\n  );\n  bindFramebuffer(this, framebuffer);\n\n  gl.clear(bitmask);\n};\n\nfunction beginDraw(\n  context,\n  framebuffer,\n  passState,\n  shaderProgram,\n  renderState\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(framebuffer) && renderState.depthTest) {\n    if (renderState.depthTest.enabled && !framebuffer.hasDepthAttachment) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n        "The depth test can not be enabled (drawCommand.renderState.depthTest.enabled) because the framebuffer (drawCommand.framebuffer) does not have a depth or depth-stencil renderbuffer."\n      );\n    }\n  }\n  //>>includeEnd(\'debug\');\n\n  bindFramebuffer(context, framebuffer);\n  applyRenderState(context, renderState, passState, false);\n  shaderProgram._bind();\n  context._maxFrameTextureUnitIndex = Math.max(\n    context._maxFrameTextureUnitIndex,\n    shaderProgram.maximumTextureUnitIndex\n  );\n}\n\nfunction continueDraw(context, drawCommand, shaderProgram, uniformMap) {\n  var primitiveType = drawCommand._primitiveType;\n  var va = drawCommand._vertexArray;\n  var offset = drawCommand._offset;\n  var count = drawCommand._count;\n  var instanceCount = drawCommand.instanceCount;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!_Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].validate */ .Z.validate(primitiveType)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(\n      "drawCommand.primitiveType is required and must be valid."\n    );\n  }\n\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("drawCommand.vertexArray", va);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("drawCommand.offset", offset, 0);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(count)) {\n    _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("drawCommand.count", count, 0);\n  }\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n    "drawCommand.instanceCount",\n    instanceCount,\n    0\n  );\n  if (instanceCount > 0 && !context.instancedArrays) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("Instanced arrays extension is not supported");\n  }\n  //>>includeEnd(\'debug\');\n\n  context._us.model = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(drawCommand._modelMatrix, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].IDENTITY */ .Z.IDENTITY);\n  shaderProgram._setUniforms(\n    uniformMap,\n    context._us,\n    context.validateShaderProgram\n  );\n\n  va._bind();\n  var indexBuffer = va.indexBuffer;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(indexBuffer)) {\n    offset = offset * indexBuffer.bytesPerIndex; // offset in vertices to offset in bytes\n    count = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(count, indexBuffer.numberOfIndices);\n    if (instanceCount === 0) {\n      context._gl.drawElements(\n        primitiveType,\n        count,\n        indexBuffer.indexDatatype,\n        offset\n      );\n    } else {\n      context.glDrawElementsInstanced(\n        primitiveType,\n        count,\n        indexBuffer.indexDatatype,\n        offset,\n        instanceCount\n      );\n    }\n  } else {\n    count = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(count, va.numberOfVertices);\n    if (instanceCount === 0) {\n      context._gl.drawArrays(primitiveType, offset, count);\n    } else {\n      context.glDrawArraysInstanced(\n        primitiveType,\n        offset,\n        count,\n        instanceCount\n      );\n    }\n  }\n\n  va._unBind();\n}\n\nContext.prototype.draw = function (\n  drawCommand,\n  passState,\n  shaderProgram,\n  uniformMap\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("drawCommand", drawCommand);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("drawCommand.shaderProgram", drawCommand._shaderProgram);\n  //>>includeEnd(\'debug\');\n\n  passState = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(passState, this._defaultPassState);\n  // The command\'s framebuffer takes presidence over the pass\' framebuffer, e.g., for off-screen rendering.\n  var framebuffer = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    drawCommand._framebuffer,\n    passState.framebuffer\n  );\n  var renderState = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    drawCommand._renderState,\n    this._defaultRenderState\n  );\n  shaderProgram = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(shaderProgram, drawCommand._shaderProgram);\n  uniformMap = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(uniformMap, drawCommand._uniformMap);\n\n  beginDraw(this, framebuffer, passState, shaderProgram, renderState);\n  continueDraw(this, drawCommand, shaderProgram, uniformMap);\n};\n\nContext.prototype.endFrame = function () {\n  var gl = this._gl;\n  gl.useProgram(null);\n\n  this._currentFramebuffer = undefined;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  var buffers = scratchBackBufferArray;\n  if (this.drawBuffers) {\n    this.glDrawBuffers(buffers);\n  }\n\n  var length = this._maxFrameTextureUnitIndex;\n  this._maxFrameTextureUnitIndex = 0;\n\n  for (var i = 0; i < length; ++i) {\n    gl.activeTexture(gl.TEXTURE0 + i);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n  }\n};\n\nContext.prototype.readPixels = function (readState) {\n  var gl = this._gl;\n\n  readState = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(readState, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var x = Math.max((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(readState.x, 0), 0);\n  var y = Math.max((0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(readState.y, 0), 0);\n  var width = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(readState.width, gl.drawingBufferWidth);\n  var height = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(readState.height, gl.drawingBufferHeight);\n  var framebuffer = readState.framebuffer;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("readState.width", width, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("readState.height", height, 0);\n  //>>includeEnd(\'debug\');\n\n  var pixelDatatype = _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(framebuffer) && framebuffer.numberOfColorAttachments > 0) {\n    pixelDatatype = framebuffer.getColorTexture(0).pixelDatatype;\n  }\n\n  var pixels = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].createTypedArray */ .Z.createTypedArray(\n    _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].RGBA */ .Z.RGBA,\n    pixelDatatype,\n    width,\n    height\n  );\n\n  bindFramebuffer(this, framebuffer);\n\n  gl.readPixels(\n    x,\n    y,\n    width,\n    height,\n    _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].RGBA */ .Z.RGBA,\n    _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, this),\n    pixels\n  );\n\n  return pixels;\n};\n\nvar viewportQuadAttributeLocations = {\n  position: 0,\n  textureCoordinates: 1,\n};\n\nContext.prototype.getViewportQuadVertexArray = function () {\n  // Per-context cache for viewport quads\n  var vertexArray = this.cache.viewportQuad_vertexArray;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(vertexArray)) {\n    var geometry = new _Core_Geometry_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n      attributes: {\n        position: new _Core_GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n          componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n          componentsPerAttribute: 2,\n          values: [-1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0],\n        }),\n\n        textureCoordinates: new _Core_GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n          componentDatatype: _Core_ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].FLOAT */ .Z.FLOAT,\n          componentsPerAttribute: 2,\n          values: [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0],\n        }),\n      },\n      // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n      indices: new Uint16Array([0, 1, 2, 0, 2, 3]),\n      primitiveType: _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n    });\n\n    vertexArray = _VertexArray_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].fromGeometry */ .Z.fromGeometry({\n      context: this,\n      geometry: geometry,\n      attributeLocations: viewportQuadAttributeLocations,\n      bufferUsage: _BufferUsage_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].STATIC_DRAW */ .Z.STATIC_DRAW,\n      interleave: true,\n    });\n\n    this.cache.viewportQuad_vertexArray = vertexArray;\n  }\n\n  return vertexArray;\n};\n\nContext.prototype.createViewportQuadCommand = function (\n  fragmentShaderSource,\n  overrides\n) {\n  overrides = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(overrides, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  return new _DrawCommand_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z({\n    vertexArray: this.getViewportQuadVertexArray(),\n    primitiveType: _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].TRIANGLES */ .Z.TRIANGLES,\n    renderState: overrides.renderState,\n    shaderProgram: _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].fromCache */ .Z.fromCache({\n      context: this,\n      vertexShaderSource: _Shaders_ViewportQuadVS_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z,\n      fragmentShaderSource: fragmentShaderSource,\n      attributeLocations: viewportQuadAttributeLocations,\n    }),\n    uniformMap: overrides.uniformMap,\n    owner: overrides.owner,\n    framebuffer: overrides.framebuffer,\n    pass: overrides.pass,\n  });\n};\n\n/**\n * Gets the object associated with a pick color.\n *\n * @param {Color} pickColor The pick color.\n * @returns {Object} The object associated with the pick color, or undefined if no object is associated with that color.\n *\n * @example\n * var object = context.getObjectByPickColor(pickColor);\n *\n * @see Context#createPickId\n */\nContext.prototype.getObjectByPickColor = function (pickColor) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("pickColor", pickColor);\n  //>>includeEnd(\'debug\');\n\n  return this._pickObjects[pickColor.toRgba()];\n};\n\nfunction PickId(pickObjects, key, color) {\n  this._pickObjects = pickObjects;\n  this.key = key;\n  this.color = color;\n}\n\nObject.defineProperties(PickId.prototype, {\n  object: {\n    get: function () {\n      return this._pickObjects[this.key];\n    },\n    set: function (value) {\n      this._pickObjects[this.key] = value;\n    },\n  },\n});\n\nPickId.prototype.destroy = function () {\n  delete this._pickObjects[this.key];\n  return undefined;\n};\n\n/**\n * Creates a unique ID associated with the input object for use with color-buffer picking.\n * The ID has an RGBA color value unique to this context.  You must call destroy()\n * on the pick ID when destroying the input object.\n *\n * @param {Object} object The object to associate with the pick ID.\n * @returns {Object} A PickId object with a <code>color</code> property.\n *\n * @exception {RuntimeError} Out of unique Pick IDs.\n *\n *\n * @example\n * this._pickId = context.createPickId({\n *   primitive : this,\n *   id : this.id\n * });\n *\n * @see Context#getObjectByPickColor\n */\nContext.prototype.createPickId = function (object) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("object", object);\n  //>>includeEnd(\'debug\');\n\n  // the increment and assignment have to be separate statements to\n  // actually detect overflow in the Uint32 value\n  ++this._nextPickColor[0];\n  var key = this._nextPickColor[0];\n  if (key === 0) {\n    // In case of overflow\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z("Out of unique Pick IDs.");\n  }\n\n  this._pickObjects[key] = object;\n  return new PickId(this._pickObjects, key, _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRgba */ .Z.fromRgba(key));\n};\n\nContext.prototype.isDestroyed = function () {\n  return false;\n};\n\nContext.prototype.destroy = function () {\n  // Destroy all objects in the cache that have a destroy method.\n  var cache = this.cache;\n  for (var property in cache) {\n    if (cache.hasOwnProperty(property)) {\n      var propertyValue = cache[property];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z)(propertyValue.destroy)) {\n        propertyValue.destroy();\n      }\n    }\n  }\n\n  this._shaderCache = this._shaderCache.destroy();\n  this._textureCache = this._textureCache.destroy();\n  this._defaultTexture = this._defaultTexture && this._defaultTexture.destroy();\n  this._defaultEmissiveTexture =\n    this._defaultEmissiveTexture && this._defaultEmissiveTexture.destroy();\n  this._defaultNormalTexture =\n    this._defaultNormalTexture && this._defaultNormalTexture.destroy();\n  this._defaultCubeMap = this._defaultCubeMap && this._defaultCubeMap.destroy();\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Context);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19385\n')},20521:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * @private\n */\nvar ContextLimits = {\n  _maximumCombinedTextureImageUnits: 0,\n  _maximumCubeMapSize: 0,\n  _maximumFragmentUniformVectors: 0,\n  _maximumTextureImageUnits: 0,\n  _maximumRenderbufferSize: 0,\n  _maximumTextureSize: 0,\n  _maximumVaryingVectors: 0,\n  _maximumVertexAttributes: 0,\n  _maximumVertexTextureImageUnits: 0,\n  _maximumVertexUniformVectors: 0,\n  _minimumAliasedLineWidth: 0,\n  _maximumAliasedLineWidth: 0,\n  _minimumAliasedPointSize: 0,\n  _maximumAliasedPointSize: 0,\n  _maximumViewportWidth: 0,\n  _maximumViewportHeight: 0,\n  _maximumTextureFilterAnisotropy: 0,\n  _maximumDrawBuffers: 0,\n  _maximumColorAttachments: 0,\n  _highpFloatSupported: false,\n  _highpIntSupported: false,\n};\n\nObject.defineProperties(ContextLimits, {\n  /**\n   * The maximum number of texture units that can be used from the vertex and fragment\n   * shader with this WebGL implementation.  The minimum is eight.  If both shaders access the\n   * same texture unit, this counts as two texture units.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_COMBINED_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumCombinedTextureImageUnits: {\n    get: function () {\n      return ContextLimits._maximumCombinedTextureImageUnits;\n    },\n  },\n\n  /**\n   * The approximate maximum cube mape width and height supported by this WebGL implementation.\n   * The minimum is 16, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return ContextLimits._maximumCubeMapSize;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code>, <code>ivec4</code>, and <code>bvec4</code>\n   * uniforms that can be used by a fragment shader with this WebGL implementation.  The minimum is 16.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_FRAGMENT_UNIFORM_VECTORS</code>.\n   */\n  maximumFragmentUniformVectors: {\n    get: function () {\n      return ContextLimits._maximumFragmentUniformVectors;\n    },\n  },\n\n  /**\n   * The maximum number of texture units that can be used from the fragment shader with this WebGL implementation.  The minimum is eight.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumTextureImageUnits: {\n    get: function () {\n      return ContextLimits._maximumTextureImageUnits;\n    },\n  },\n\n  /**\n   * The maximum renderbuffer width and height supported by this WebGL implementation.\n   * The minimum is 16, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_RENDERBUFFER_SIZE</code>.\n   */\n  maximumRenderbufferSize: {\n    get: function () {\n      return ContextLimits._maximumRenderbufferSize;\n    },\n  },\n\n  /**\n   * The approximate maximum texture width and height supported by this WebGL implementation.\n   * The minimum is 64, but most desktop and laptop implementations will support much larger sizes like 8,192.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_TEXTURE_SIZE</code>.\n   */\n  maximumTextureSize: {\n    get: function () {\n      return ContextLimits._maximumTextureSize;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code> varying variables supported by this WebGL implementation.\n   * The minimum is eight.  Matrices and arrays count as multiple <code>vec4</code>s.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VARYING_VECTORS</code>.\n   */\n  maximumVaryingVectors: {\n    get: function () {\n      return ContextLimits._maximumVaryingVectors;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code> vertex attributes supported by this WebGL implementation.  The minimum is eight.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_ATTRIBS</code>.\n   */\n  maximumVertexAttributes: {\n    get: function () {\n      return ContextLimits._maximumVertexAttributes;\n    },\n  },\n\n  /**\n   * The maximum number of texture units that can be used from the vertex shader with this WebGL implementation.\n   * The minimum is zero, which means the GL does not support vertex texture fetch.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_TEXTURE_IMAGE_UNITS</code>.\n   */\n  maximumVertexTextureImageUnits: {\n    get: function () {\n      return ContextLimits._maximumVertexTextureImageUnits;\n    },\n  },\n\n  /**\n   * The maximum number of <code>vec4</code>, <code>ivec4</code>, and <code>bvec4</code>\n   * uniforms that can be used by a vertex shader with this WebGL implementation.  The minimum is 16.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VERTEX_UNIFORM_VECTORS</code>.\n   */\n  maximumVertexUniformVectors: {\n    get: function () {\n      return ContextLimits._maximumVertexUniformVectors;\n    },\n  },\n\n  /**\n   * The minimum aliased line width, in pixels, supported by this WebGL implementation.  It will be at most one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  minimumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits._minimumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits._maximumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The minimum aliased point size, in pixels, supported by this WebGL implementation.  It will be at most one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_POINT_SIZE_RANGE</code>.\n   */\n  minimumAliasedPointSize: {\n    get: function () {\n      return ContextLimits._minimumAliasedPointSize;\n    },\n  },\n\n  /**\n   * The maximum aliased point size, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_POINT_SIZE_RANGE</code>.\n   */\n  maximumAliasedPointSize: {\n    get: function () {\n      return ContextLimits._maximumAliasedPointSize;\n    },\n  },\n\n  /**\n   * The maximum supported width of the viewport.  It will be at least as large as the visible width of the associated canvas.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VIEWPORT_DIMS</code>.\n   */\n  maximumViewportWidth: {\n    get: function () {\n      return ContextLimits._maximumViewportWidth;\n    },\n  },\n\n  /**\n   * The maximum supported height of the viewport.  It will be at least as large as the visible height of the associated canvas.\n   * @memberof ContextLimits\n   * @type {Number}\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>MAX_VIEWPORT_DIMS</code>.\n   */\n  maximumViewportHeight: {\n    get: function () {\n      return ContextLimits._maximumViewportHeight;\n    },\n  },\n\n  /**\n   * The maximum degree of anisotropy for texture filtering\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumTextureFilterAnisotropy: {\n    get: function () {\n      return ContextLimits._maximumTextureFilterAnisotropy;\n    },\n  },\n\n  /**\n   * The maximum number of simultaneous outputs that may be written in a fragment shader.\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumDrawBuffers: {\n    get: function () {\n      return ContextLimits._maximumDrawBuffers;\n    },\n  },\n\n  /**\n   * The maximum number of color attachments supported.\n   * @memberof ContextLimits\n   * @type {Number}\n   */\n  maximumColorAttachments: {\n    get: function () {\n      return ContextLimits._maximumColorAttachments;\n    },\n  },\n\n  /**\n   * High precision float supported (<code>highp</code>) in fragment shaders.\n   * @memberof ContextLimits\n   * @type {Boolean}\n   */\n  highpFloatSupported: {\n    get: function () {\n      return ContextLimits._highpFloatSupported;\n    },\n  },\n\n  /**\n   * High precision int supported (<code>highp</code>) in fragment shaders.\n   * @memberof ContextLimits\n   * @type {Boolean}\n   */\n  highpIntSupported: {\n    get: function () {\n      return ContextLimits._highpIntSupported;\n    },\n  },\n});\n/* harmony default export */ __webpack_exports__["Z"] = (ContextLimits);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20521\n')},51107:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99417);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38443);\n/* harmony import */ var _ContextLimits_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20521);\n/* harmony import */ var _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(60136);\n/* harmony import */ var _MipmapHint_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(45368);\n/* harmony import */ var _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21572);\n/* harmony import */ var _Sampler_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(87721);\n/* harmony import */ var _TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(42246);\n/* harmony import */ var _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(80188);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction CubeMap(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.context", options.context);\n  //>>includeEnd(\'debug\');\n\n  var context = options.context;\n  var source = options.source;\n  var width;\n  var height;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(source)) {\n    var faces = [\n      source.positiveX,\n      source.negativeX,\n      source.positiveY,\n      source.negativeY,\n      source.positiveZ,\n      source.negativeZ,\n    ];\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (\n      !faces[0] ||\n      !faces[1] ||\n      !faces[2] ||\n      !faces[3] ||\n      !faces[4] ||\n      !faces[5]\n    ) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        "options.source requires positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ faces."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    width = faces[0].width;\n    height = faces[0].height;\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    for (var i = 1; i < 6; ++i) {\n      if (\n        Number(faces[i].width) !== width ||\n        Number(faces[i].height) !== height\n      ) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n          "Each face in options.source must have the same width and height."\n        );\n      }\n    }\n    //>>includeEnd(\'debug\');\n  } else {\n    width = options.width;\n    height = options.height;\n  }\n\n  var size = width;\n  var pixelDatatype = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    options.pixelDatatype,\n    _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].UNSIGNED_BYTE */ .Z.UNSIGNED_BYTE\n  );\n  var pixelFormat = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.pixelFormat, _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].RGBA */ .Z.RGBA);\n  var internalFormat = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].toInternalFormat */ .Z.toInternalFormat(\n    pixelFormat,\n    pixelDatatype,\n    context\n  );\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(width) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(height)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "options requires a source field to create an initialized cube map or width and height fields to create a blank cube map."\n    );\n  }\n\n  if (width !== height) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("Width must equal height.");\n  }\n\n  if (size <= 0) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("Width and height must be greater than zero.");\n  }\n\n  if (size > _ContextLimits_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].maximumCubeMapSize */ .Z.maximumCubeMapSize) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Width and height must be less than or equal to the maximum cube map size (" +\n        _ContextLimits_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].maximumCubeMapSize */ .Z.maximumCubeMapSize +\n        ").  Check maximumCubeMapSize."\n    );\n  }\n\n  if (!_Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].validate */ .Z.validate(pixelFormat)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("Invalid options.pixelFormat.");\n  }\n\n  if (_Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].isDepthFormat */ .Z.isDepthFormat(pixelFormat)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "options.pixelFormat cannot be DEPTH_COMPONENT or DEPTH_STENCIL."\n    );\n  }\n\n  if (!_PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].validate */ .Z.validate(pixelDatatype)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("Invalid options.pixelDatatype.");\n  }\n\n  if (pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FLOAT */ .Z.FLOAT && !context.floatingPointTexture) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension."\n    );\n  }\n\n  if (\n    pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT &&\n    !context.halfFloatingPointTexture\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "When options.pixelDatatype is HALF_FLOAT, this WebGL implementation must support the OES_texture_half_float extension."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var sizeInBytes =\n    _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].textureSizeInBytes */ .Z.textureSizeInBytes(pixelFormat, pixelDatatype, size, size) * 6;\n\n  // Use premultiplied alpha for opaque textures should perform better on Chrome:\n  // http://media.tojicode.com/webglCamp4/#20\n  var preMultiplyAlpha =\n    options.preMultiplyAlpha ||\n    pixelFormat === _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].RGB */ .Z.RGB ||\n    pixelFormat === _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].LUMINANCE */ .Z.LUMINANCE;\n  var flipY = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.flipY, true);\n  var skipColorSpaceConversion = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    options.skipColorSpaceConversion,\n    false\n  );\n\n  var gl = context._gl;\n  var textureTarget = gl.TEXTURE_CUBE_MAP;\n  var texture = gl.createTexture();\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(textureTarget, texture);\n\n  function createFace(\n    target,\n    sourceFace,\n    preMultiplyAlpha,\n    flipY,\n    skipColorSpaceConversion\n  ) {\n    var arrayBufferView = sourceFace.arrayBufferView;\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(arrayBufferView)) {\n      arrayBufferView = sourceFace.bufferView;\n    }\n\n    var unpackAlignment = 4;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(arrayBufferView)) {\n      unpackAlignment = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].alignmentInBytes */ .Z.alignmentInBytes(\n        pixelFormat,\n        pixelDatatype,\n        width\n      );\n    }\n\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n\n    if (skipColorSpaceConversion) {\n      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n    } else {\n      gl.pixelStorei(\n        gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n        gl.BROWSER_DEFAULT_WEBGL\n      );\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (flipY) {\n        arrayBufferView = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].flipY */ .Z.flipY(\n          arrayBufferView,\n          pixelFormat,\n          pixelDatatype,\n          size,\n          size\n        );\n      }\n      gl.texImage2D(\n        target,\n        0,\n        internalFormat,\n        size,\n        size,\n        0,\n        pixelFormat,\n        _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n        arrayBufferView\n      );\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n      // Source: ImageData, HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement\n      gl.texImage2D(\n        target,\n        0,\n        internalFormat,\n        pixelFormat,\n        _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n        sourceFace\n      );\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(source)) {\n    createFace(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n      source.positiveX,\n      preMultiplyAlpha,\n      flipY,\n      skipColorSpaceConversion\n    );\n    createFace(\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n      source.negativeX,\n      preMultiplyAlpha,\n      flipY,\n      skipColorSpaceConversion\n    );\n    createFace(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n      source.positiveY,\n      preMultiplyAlpha,\n      flipY,\n      skipColorSpaceConversion\n    );\n    createFace(\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      source.negativeY,\n      preMultiplyAlpha,\n      flipY,\n      skipColorSpaceConversion\n    );\n    createFace(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n      source.positiveZ,\n      preMultiplyAlpha,\n      flipY,\n      skipColorSpaceConversion\n    );\n    createFace(\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n      source.negativeZ,\n      preMultiplyAlpha,\n      flipY,\n      skipColorSpaceConversion\n    );\n  } else {\n    gl.texImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n      0,\n      internalFormat,\n      size,\n      size,\n      0,\n      pixelFormat,\n      _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n      null\n    );\n    gl.texImage2D(\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n      0,\n      internalFormat,\n      size,\n      size,\n      0,\n      pixelFormat,\n      _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n      null\n    );\n    gl.texImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n      0,\n      internalFormat,\n      size,\n      size,\n      0,\n      pixelFormat,\n      _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n      null\n    );\n    gl.texImage2D(\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      0,\n      internalFormat,\n      size,\n      size,\n      0,\n      pixelFormat,\n      _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n      null\n    );\n    gl.texImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n      0,\n      internalFormat,\n      size,\n      size,\n      0,\n      pixelFormat,\n      _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n      null\n    );\n    gl.texImage2D(\n      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n      0,\n      internalFormat,\n      size,\n      size,\n      0,\n      pixelFormat,\n      _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, context),\n      null\n    );\n  }\n  gl.bindTexture(textureTarget, null);\n\n  this._context = context;\n  this._textureFilterAnisotropic = context._textureFilterAnisotropic;\n  this._textureTarget = textureTarget;\n  this._texture = texture;\n  this._pixelFormat = pixelFormat;\n  this._pixelDatatype = pixelDatatype;\n  this._size = size;\n  this._hasMipmap = false;\n  this._sizeInBytes = sizeInBytes;\n  this._preMultiplyAlpha = preMultiplyAlpha;\n  this._flipY = flipY;\n  this._sampler = undefined;\n\n  var initialized = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(source);\n  this._positiveX = new _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n    context,\n    texture,\n    textureTarget,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n    internalFormat,\n    pixelFormat,\n    pixelDatatype,\n    size,\n    preMultiplyAlpha,\n    flipY,\n    initialized\n  );\n  this._negativeX = new _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n    context,\n    texture,\n    textureTarget,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n    internalFormat,\n    pixelFormat,\n    pixelDatatype,\n    size,\n    preMultiplyAlpha,\n    flipY,\n    initialized\n  );\n  this._positiveY = new _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n    context,\n    texture,\n    textureTarget,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n    internalFormat,\n    pixelFormat,\n    pixelDatatype,\n    size,\n    preMultiplyAlpha,\n    flipY,\n    initialized\n  );\n  this._negativeY = new _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n    context,\n    texture,\n    textureTarget,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n    internalFormat,\n    pixelFormat,\n    pixelDatatype,\n    size,\n    preMultiplyAlpha,\n    flipY,\n    initialized\n  );\n  this._positiveZ = new _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n    context,\n    texture,\n    textureTarget,\n    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n    internalFormat,\n    pixelFormat,\n    pixelDatatype,\n    size,\n    preMultiplyAlpha,\n    flipY,\n    initialized\n  );\n  this._negativeZ = new _CubeMapFace_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(\n    context,\n    texture,\n    textureTarget,\n    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    internalFormat,\n    pixelFormat,\n    pixelDatatype,\n    size,\n    preMultiplyAlpha,\n    flipY,\n    initialized\n  );\n\n  this.sampler = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(options.sampler) ? options.sampler : new _Sampler_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n}\n\nObject.defineProperties(CubeMap.prototype, {\n  positiveX: {\n    get: function () {\n      return this._positiveX;\n    },\n  },\n  negativeX: {\n    get: function () {\n      return this._negativeX;\n    },\n  },\n  positiveY: {\n    get: function () {\n      return this._positiveY;\n    },\n  },\n  negativeY: {\n    get: function () {\n      return this._negativeY;\n    },\n  },\n  positiveZ: {\n    get: function () {\n      return this._positiveZ;\n    },\n  },\n  negativeZ: {\n    get: function () {\n      return this._negativeZ;\n    },\n  },\n  sampler: {\n    get: function () {\n      return this._sampler;\n    },\n    set: function (sampler) {\n      var minificationFilter = sampler.minificationFilter;\n      var magnificationFilter = sampler.magnificationFilter;\n\n      var mipmap =\n        minificationFilter ===\n          _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].NEAREST_MIPMAP_NEAREST */ .Z.NEAREST_MIPMAP_NEAREST ||\n        minificationFilter ===\n          _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].NEAREST_MIPMAP_LINEAR */ .Z.NEAREST_MIPMAP_LINEAR ||\n        minificationFilter ===\n          _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].LINEAR_MIPMAP_NEAREST */ .Z.LINEAR_MIPMAP_NEAREST ||\n        minificationFilter === _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].LINEAR_MIPMAP_LINEAR */ .Z.LINEAR_MIPMAP_LINEAR;\n\n      var context = this._context;\n      var pixelDatatype = this._pixelDatatype;\n\n      // float textures only support nearest filtering unless the linear extensions are supported, so override the sampler\'s settings\n      if (\n        (pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].FLOAT */ .Z.FLOAT &&\n          !context.textureFloatLinear) ||\n        (pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT &&\n          !context.textureHalfFloatLinear)\n      ) {\n        minificationFilter = mipmap\n          ? _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].NEAREST_MIPMAP_NEAREST */ .Z.NEAREST_MIPMAP_NEAREST\n          : _TextureMinificationFilter_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].NEAREST */ .Z.NEAREST;\n        magnificationFilter = _TextureMagnificationFilter_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].NEAREST */ .Z.NEAREST;\n      }\n\n      var gl = context._gl;\n      var target = this._textureTarget;\n\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(target, this._texture);\n      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, minificationFilter);\n      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, magnificationFilter);\n      gl.texParameteri(target, gl.TEXTURE_WRAP_S, sampler.wrapS);\n      gl.texParameteri(target, gl.TEXTURE_WRAP_T, sampler.wrapT);\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(this._textureFilterAnisotropic)) {\n        gl.texParameteri(\n          target,\n          this._textureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,\n          sampler.maximumAnisotropy\n        );\n      }\n      gl.bindTexture(target, null);\n\n      this._sampler = sampler;\n    },\n  },\n  pixelFormat: {\n    get: function () {\n      return this._pixelFormat;\n    },\n  },\n  pixelDatatype: {\n    get: function () {\n      return this._pixelDatatype;\n    },\n  },\n  width: {\n    get: function () {\n      return this._size;\n    },\n  },\n  height: {\n    get: function () {\n      return this._size;\n    },\n  },\n  sizeInBytes: {\n    get: function () {\n      if (this._hasMipmap) {\n        return Math.floor((this._sizeInBytes * 4) / 3);\n      }\n      return this._sizeInBytes;\n    },\n  },\n  preMultiplyAlpha: {\n    get: function () {\n      return this._preMultiplyAlpha;\n    },\n  },\n  flipY: {\n    get: function () {\n      return this._flipY;\n    },\n  },\n\n  _target: {\n    get: function () {\n      return this._textureTarget;\n    },\n  },\n});\n\n/**\n * Generates a complete mipmap chain for each cubemap face.\n *\n * @param {MipmapHint} [hint=MipmapHint.DONT_CARE] A performance vs. quality hint.\n *\n * @exception {DeveloperError} hint is invalid.\n * @exception {DeveloperError} This CubeMap\'s width must be a power of two to call generateMipmap().\n * @exception {DeveloperError} This CubeMap\'s height must be a power of two to call generateMipmap().\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Generate mipmaps, and then set the sampler so mipmaps are used for\n * // minification when the cube map is sampled.\n * cubeMap.generateMipmap();\n * cubeMap.sampler = new Sampler({\n *   minificationFilter : Cesium.TextureMinificationFilter.NEAREST_MIPMAP_LINEAR\n * });\n */\nCubeMap.prototype.generateMipmap = function (hint) {\n  hint = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(hint, _MipmapHint_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].DONT_CARE */ .Z.DONT_CARE);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (this._size > 1 && !_Core_Math_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].isPowerOfTwo */ .Z.isPowerOfTwo(this._size)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "width and height must be a power of two to call generateMipmap()."\n    );\n  }\n  if (!_MipmapHint_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].validate */ .Z.validate(hint)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("hint is invalid.");\n  }\n  //>>includeEnd(\'debug\');\n\n  this._hasMipmap = true;\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n  gl.hint(gl.GENERATE_MIPMAP_HINT, hint);\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.generateMipmap(target);\n  gl.bindTexture(target, null);\n};\n\nCubeMap.prototype.isDestroyed = function () {\n  return false;\n};\n\nCubeMap.prototype.destroy = function () {\n  this._context._gl.deleteTexture(this._texture);\n  this._positiveX = (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._positiveX);\n  this._negativeX = (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._negativeX);\n  this._positiveY = (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._positiveY);\n  this._negativeY = (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._negativeY);\n  this._positiveZ = (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._positiveZ);\n  this._negativeZ = (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this._negativeZ);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (CubeMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51107\n')},60136:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38443);\n/* harmony import */ var _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(21572);\n\n\n\n\n\n\n\n/**\n * @private\n */\nfunction CubeMapFace(\n  context,\n  texture,\n  textureTarget,\n  targetFace,\n  internalFormat,\n  pixelFormat,\n  pixelDatatype,\n  size,\n  preMultiplyAlpha,\n  flipY,\n  initialized\n) {\n  this._context = context;\n  this._texture = texture;\n  this._textureTarget = textureTarget;\n  this._targetFace = targetFace;\n  this._pixelDatatype = pixelDatatype;\n  this._internalFormat = internalFormat;\n  this._pixelFormat = pixelFormat;\n  this._size = size;\n  this._preMultiplyAlpha = preMultiplyAlpha;\n  this._flipY = flipY;\n  this._initialized = initialized;\n}\n\nObject.defineProperties(CubeMapFace.prototype, {\n  pixelFormat: {\n    get: function () {\n      return this._pixelFormat;\n    },\n  },\n  pixelDatatype: {\n    get: function () {\n      return this._pixelDatatype;\n    },\n  },\n  _target: {\n    get: function () {\n      return this._targetFace;\n    },\n  },\n});\n\n/**\n * Copies texels from the source to the cubemap\'s face.\n * @param {Object} options Object with the following properties:\n * @param {Object} options.source The source {@link ImageData}, {@link HTMLImageElement}, {@link HTMLCanvasElement}, {@link HTMLVideoElement},\n *                              or an object with a width, height, and arrayBufferView properties.\n * @param {Number} [options.xOffset=0] An offset in the x direction in the cubemap where copying begins.\n * @param {Number} [options.yOffset=0] An offset in the y direction in the cubemap where copying begins.\n * @param {Boolean} [options.skipColorSpaceConversion=false] If true, any custom gamma or color profiles in the texture will be ignored.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Create a cubemap with 1x1 faces, and make the +x face red.\n * var cubeMap = new CubeMap({\n *   context : context\n *   width : 1,\n *   height : 1\n * });\n * cubeMap.positiveX.copyFrom({\n *   source: {\n *     width : 1,\n *     height : 1,\n *     arrayBufferView : new Uint8Array([255, 0, 0, 255])\n *   }\n * });\n */\nCubeMapFace.prototype.copyFrom = function (options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options", options);\n  //>>includeEnd(\'debug\');\n\n  var xOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.xOffset, 0);\n  var yOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.yOffset, 0);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.source", options.source);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("xOffset", xOffset, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("yOffset", yOffset, 0);\n  if (xOffset + options.source.width > this._size) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "xOffset + options.source.width must be less than or equal to width."\n    );\n  }\n  if (yOffset + options.source.height > this._size) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "yOffset + options.source.height must be less than or equal to height."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var source = options.source;\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n  var targetFace = this._targetFace;\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n\n  var width = source.width;\n  var height = source.height;\n  var arrayBufferView = source.arrayBufferView;\n\n  var size = this._size;\n  var pixelFormat = this._pixelFormat;\n  var internalFormat = this._internalFormat;\n  var pixelDatatype = this._pixelDatatype;\n\n  var preMultiplyAlpha = this._preMultiplyAlpha;\n  var flipY = this._flipY;\n  var skipColorSpaceConversion = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(\n    options.skipColorSpaceConversion,\n    false\n  );\n\n  var unpackAlignment = 4;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(arrayBufferView)) {\n    unpackAlignment = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].alignmentInBytes */ .Z.alignmentInBytes(\n      pixelFormat,\n      pixelDatatype,\n      width\n    );\n  }\n\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n\n  if (skipColorSpaceConversion) {\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n  } else {\n    gl.pixelStorei(\n      gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n      gl.BROWSER_DEFAULT_WEBGL\n    );\n  }\n\n  var uploaded = false;\n  if (!this._initialized) {\n    if (xOffset === 0 && yOffset === 0 && width === size && height === size) {\n      // initialize the entire texture\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(arrayBufferView)) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        if (flipY) {\n          arrayBufferView = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].flipY */ .Z.flipY(\n            arrayBufferView,\n            pixelFormat,\n            pixelDatatype,\n            size,\n            size\n          );\n        }\n        gl.texImage2D(\n          targetFace,\n          0,\n          internalFormat,\n          size,\n          size,\n          0,\n          pixelFormat,\n          _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, this._context),\n          arrayBufferView\n        );\n      } else {\n        // Only valid for DOM-Element uploads\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n        gl.texImage2D(\n          targetFace,\n          0,\n          internalFormat,\n          pixelFormat,\n          _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, this._context),\n          source\n        );\n      }\n      uploaded = true;\n    } else {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      // initialize the entire texture to zero\n      var bufferView = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].createTypedArray */ .Z.createTypedArray(\n        pixelFormat,\n        pixelDatatype,\n        size,\n        size\n      );\n      gl.texImage2D(\n        targetFace,\n        0,\n        internalFormat,\n        size,\n        size,\n        0,\n        pixelFormat,\n        _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, this._context),\n        bufferView\n      );\n    }\n    this._initialized = true;\n  }\n\n  if (!uploaded) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(arrayBufferView)) {\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (flipY) {\n        arrayBufferView = _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].flipY */ .Z.flipY(\n          arrayBufferView,\n          pixelFormat,\n          pixelDatatype,\n          width,\n          height\n        );\n      }\n      gl.texSubImage2D(\n        targetFace,\n        0,\n        xOffset,\n        yOffset,\n        width,\n        height,\n        pixelFormat,\n        _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, this._context),\n        arrayBufferView\n      );\n    } else {\n      // Only valid for DOM-Element uploads\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preMultiplyAlpha);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n\n      // Source: ImageData, HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement\n      gl.texSubImage2D(\n        targetFace,\n        0,\n        xOffset,\n        yOffset,\n        pixelFormat,\n        _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].toWebGLConstant */ .Z.toWebGLConstant(pixelDatatype, this._context),\n        source\n      );\n    }\n  }\n\n  gl.bindTexture(target, null);\n};\n\n/**\n * Copies texels from the framebuffer to the cubemap\'s face.\n *\n * @param {Number} [xOffset=0] An offset in the x direction in the cubemap where copying begins.\n * @param {Number} [yOffset=0] An offset in the y direction in the cubemap where copying begins.\n * @param {Number} [framebufferXOffset=0] An offset in the x direction in the framebuffer where copying begins from.\n * @param {Number} [framebufferYOffset=0] An offset in the y direction in the framebuffer where copying begins from.\n * @param {Number} [width=CubeMap\'s width] The width of the subimage to copy.\n * @param {Number} [height=CubeMap\'s height] The height of the subimage to copy.\n *\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT.\n * @exception {DeveloperError} Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n * @exception {DeveloperError} xOffset must be greater than or equal to zero.\n * @exception {DeveloperError} yOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferXOffset must be greater than or equal to zero.\n * @exception {DeveloperError} framebufferYOffset must be greater than or equal to zero.\n * @exception {DeveloperError} xOffset + source.width must be less than or equal to width.\n * @exception {DeveloperError} yOffset + source.height must be less than or equal to height.\n * @exception {DeveloperError} This CubeMap was destroyed, i.e., destroy() was called.\n *\n * @example\n * // Copy the framebuffer contents to the +x cube map face.\n * cubeMap.positiveX.copyFromFramebuffer();\n */\nCubeMapFace.prototype.copyFromFramebuffer = function (\n  xOffset,\n  yOffset,\n  framebufferXOffset,\n  framebufferYOffset,\n  width,\n  height\n) {\n  xOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(xOffset, 0);\n  yOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(yOffset, 0);\n  framebufferXOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(framebufferXOffset, 0);\n  framebufferYOffset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(framebufferYOffset, 0);\n  width = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(width, this._size);\n  height = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(height, this._size);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("xOffset", xOffset, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("yOffset", yOffset, 0);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n    "framebufferXOffset",\n    framebufferXOffset,\n    0\n  );\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n    "framebufferYOffset",\n    framebufferYOffset,\n    0\n  );\n  if (xOffset + width > this._size) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "xOffset + source.width must be less than or equal to width."\n    );\n  }\n  if (yOffset + height > this._size) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "yOffset + source.height must be less than or equal to height."\n    );\n  }\n  if (this._pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].FLOAT */ .Z.FLOAT) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT."\n    );\n  }\n  if (this._pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z(\n      "Cannot call copyFromFramebuffer when the texture pixel data type is HALF_FLOAT."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var gl = this._context._gl;\n  var target = this._textureTarget;\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(target, this._texture);\n  gl.copyTexSubImage2D(\n    this._targetFace,\n    0,\n    xOffset,\n    yOffset,\n    framebufferXOffset,\n    framebufferYOffset,\n    width,\n    height\n  );\n  gl.bindTexture(target, null);\n  this._initialized = true;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (CubeMapFace);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60136\n')},60072:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n/* harmony import */ var _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97264);\n\n\n\n\n/**\n * Represents a command to the renderer for drawing.\n *\n * @private\n */\nfunction DrawCommand(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  this._boundingVolume = options.boundingVolume;\n  this._orientedBoundingBox = options.orientedBoundingBox;\n  this._cull = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.cull, true);\n  this._occlude = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.occlude, true);\n  this._modelMatrix = options.modelMatrix;\n  this._primitiveType = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.primitiveType,\n    _Core_PrimitiveType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].TRIANGLES */ .Z.TRIANGLES\n  );\n  this._vertexArray = options.vertexArray;\n  this._count = options.count;\n  this._offset = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.offset, 0);\n  this._instanceCount = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.instanceCount, 0);\n  this._shaderProgram = options.shaderProgram;\n  this._uniformMap = options.uniformMap;\n  this._renderState = options.renderState;\n  this._framebuffer = options.framebuffer;\n  this._pass = options.pass;\n  this._executeInClosestFrustum = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.executeInClosestFrustum,\n    false\n  );\n  this._owner = options.owner;\n  this._debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n  this._debugOverlappingFrustums = 0;\n  this._castShadows = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.castShadows, false);\n  this._receiveShadows = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.receiveShadows, false);\n  this._pickId = options.pickId;\n  this._pickOnly = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(options.pickOnly, false);\n\n  this._depthForTranslucentClassification = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(\n    options.depthForTranslucentClassification,\n    false\n  );\n\n  this.dirty = true;\n  this.lastDirtyTime = 0;\n\n  /**\n   * @private\n   */\n  this.derivedCommands = {};\n}\n\nObject.defineProperties(DrawCommand.prototype, {\n  /**\n   * The bounding volume of the geometry in world space.  This is used for culling and frustum selection.\n   * <p>\n   * For best rendering performance, use the tightest possible bounding volume.  Although\n   * <code>undefined</code> is allowed, always try to provide a bounding volume to\n   * allow the tightest possible near and far planes to be computed for the scene, and\n   * minimize the number of frustums needed.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n    set: function (value) {\n      if (this._boundingVolume !== value) {\n        this._boundingVolume = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The oriented bounding box of the geometry in world space. If this is defined, it is used instead of\n   * {@link DrawCommand#boundingVolume} for plane intersection testing.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {OrientedBoundingBox}\n   * @default undefined\n   *\n   * @see DrawCommand#debugShowBoundingVolume\n   */\n  orientedBoundingBox: {\n    get: function () {\n      return this._orientedBoundingBox;\n    },\n    set: function (value) {\n      if (this._orientedBoundingBox !== value) {\n        this._orientedBoundingBox = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, the renderer frustum and horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * If the command was already culled, set this to <code>false</code> for a performance improvement.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  cull: {\n    get: function () {\n      return this._cull;\n    },\n    set: function (value) {\n      if (this._cull !== value) {\n        this._cull = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * When <code>true</code>, the horizon culls the command based on its {@link DrawCommand#boundingVolume}.\n   * {@link DrawCommand#cull} must also be <code>true</code> in order for the command to be culled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  occlude: {\n    get: function () {\n      return this._occlude;\n    },\n    set: function (value) {\n      if (this._occlude !== value) {\n        this._occlude = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The transformation from the geometry in model space to world space.\n   * <p>\n   * When <code>undefined</code>, the geometry is assumed to be defined in world space.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Matrix4}\n   * @default undefined\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      if (this._modelMatrix !== value) {\n        this._modelMatrix = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The type of geometry in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {PrimitiveType}\n   * @default PrimitiveType.TRIANGLES\n   */\n  primitiveType: {\n    get: function () {\n      return this._primitiveType;\n    },\n    set: function (value) {\n      if (this._primitiveType !== value) {\n        this._primitiveType = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {VertexArray}\n   * @default undefined\n   */\n  vertexArray: {\n    get: function () {\n      return this._vertexArray;\n    },\n    set: function (value) {\n      if (this._vertexArray !== value) {\n        this._vertexArray = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The number of vertices to draw in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default undefined\n   */\n  count: {\n    get: function () {\n      return this._count;\n    },\n    set: function (value) {\n      if (this._count !== value) {\n        this._count = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The offset to start drawing in the vertex array.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default 0\n   */\n  offset: {\n    get: function () {\n      return this._offset;\n    },\n    set: function (value) {\n      if (this._offset !== value) {\n        this._offset = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The number of instances to draw.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Number}\n   * @default 0\n   */\n  instanceCount: {\n    get: function () {\n      return this._instanceCount;\n    },\n    set: function (value) {\n      if (this._instanceCount !== value) {\n        this._instanceCount = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The shader program to apply.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  shaderProgram: {\n    get: function () {\n      return this._shaderProgram;\n    },\n    set: function (value) {\n      if (this._shaderProgram !== value) {\n        this._shaderProgram = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should cast shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  castShadows: {\n    get: function () {\n      return this._castShadows;\n    },\n    set: function (value) {\n      if (this._castShadows !== value) {\n        this._castShadows = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Whether this command should receive shadows when shadowing is enabled.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  receiveShadows: {\n    get: function () {\n      return this._receiveShadows;\n    },\n    set: function (value) {\n      if (this._receiveShadows !== value) {\n        this._receiveShadows = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   */\n  uniformMap: {\n    get: function () {\n      return this._uniformMap;\n    },\n    set: function (value) {\n      if (this._uniformMap !== value) {\n        this._uniformMap = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The render state.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {RenderState}\n   * @default undefined\n   */\n  renderState: {\n    get: function () {\n      return this._renderState;\n    },\n    set: function (value) {\n      if (this._renderState !== value) {\n        this._renderState = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The framebuffer to draw to.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Framebuffer}\n   * @default undefined\n   */\n  framebuffer: {\n    get: function () {\n      return this._framebuffer;\n    },\n    set: function (value) {\n      if (this._framebuffer !== value) {\n        this._framebuffer = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The pass when to render.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Pass}\n   * @default undefined\n   */\n  pass: {\n    get: function () {\n      return this._pass;\n    },\n    set: function (value) {\n      if (this._pass !== value) {\n        this._pass = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Specifies if this command is only to be executed in the frustum closest\n   * to the eye containing the bounding volume. Defaults to <code>false</code>.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  executeInClosestFrustum: {\n    get: function () {\n      return this._executeInClosestFrustum;\n    },\n    set: function (value) {\n      if (this._executeInClosestFrustum !== value) {\n        this._executeInClosestFrustum = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n    set: function (value) {\n      if (this._owner !== value) {\n        this._owner = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the {@link DrawCommand#boundingVolume} for this command, assuming it is a sphere, when the command executes.\n   * </p>\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   *\n   * @see DrawCommand#boundingVolume\n   */\n  debugShowBoundingVolume: {\n    get: function () {\n      return this._debugShowBoundingVolume;\n    },\n    set: function (value) {\n      if (this._debugShowBoundingVolume !== value) {\n        this._debugShowBoundingVolume = value;\n        this.dirty = true;\n      }\n    },\n  },\n\n  /**\n   * Used to implement Scene.debugShowFrustums.\n   * @private\n   */\n  debugOverlappingFrustums: {\n    get: function () {\n      return this._debugOverlappingFrustums;\n    },\n    set: function (value) {\n      if (this._debugOverlappingFrustums !== value) {\n        this._debugOverlappingFrustums = value;\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * A GLSL string that will evaluate to a pick id. When <code>undefined</code>, the command will only draw depth\n   * during the pick pass.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {String}\n   * @default undefined\n   */\n  pickId: {\n    get: function () {\n      return this._pickId;\n    },\n    set: function (value) {\n      if (this._pickId !== value) {\n        this._pickId = value;\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * Whether this command should be executed in the pick pass only.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  pickOnly: {\n    get: function () {\n      return this._pickOnly;\n    },\n    set: function (value) {\n      if (this._pickOnly !== value) {\n        this._pickOnly = value;\n        this.dirty = true;\n      }\n    },\n  },\n  /**\n   * Whether this command should be derived to draw depth for classification of translucent primitives.\n   *\n   * @memberof DrawCommand.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  depthForTranslucentClassification: {\n    get: function () {\n      return this._depthForTranslucentClassification;\n    },\n    set: function (value) {\n      if (this._depthForTranslucentClassification !== value) {\n        this._depthForTranslucentClassification = value;\n        this.dirty = true;\n      }\n    },\n  },\n});\n\n/**\n * @private\n */\nDrawCommand.shallowClone = function (command, result) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(command)) {\n    return undefined;\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(result)) {\n    result = new DrawCommand();\n  }\n\n  result._boundingVolume = command._boundingVolume;\n  result._orientedBoundingBox = command._orientedBoundingBox;\n  result._cull = command._cull;\n  result._occlude = command._occlude;\n  result._modelMatrix = command._modelMatrix;\n  result._primitiveType = command._primitiveType;\n  result._vertexArray = command._vertexArray;\n  result._count = command._count;\n  result._offset = command._offset;\n  result._instanceCount = command._instanceCount;\n  result._shaderProgram = command._shaderProgram;\n  result._uniformMap = command._uniformMap;\n  result._renderState = command._renderState;\n  result._framebuffer = command._framebuffer;\n  result._pass = command._pass;\n  result._executeInClosestFrustum = command._executeInClosestFrustum;\n  result._owner = command._owner;\n  result._debugShowBoundingVolume = command._debugShowBoundingVolume;\n  result._debugOverlappingFrustums = command._debugOverlappingFrustums;\n  result._castShadows = command._castShadows;\n  result._receiveShadows = command._receiveShadows;\n  result._pickId = command._pickId;\n  result._pickOnly = command._pickOnly;\n  result._depthForTranslucentClassification =\n    command._depthForTranslucentClassification;\n\n  result.dirty = true;\n  result.lastDirtyTime = 0;\n\n  return result;\n};\n\n/**\n * Executes the draw command.\n *\n * @param {Context} context The renderer context in which to draw.\n * @param {PassState} [passState] The state for the current render pass.\n */\nDrawCommand.prototype.execute = function (context, passState) {\n  context.draw(this, passState);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (DrawCommand);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60072\n')},2932:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38443);\n/* harmony import */ var _ContextLimits_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(20521);\n/* harmony import */ var _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21572);\n\n\n\n\n\n\n\n\n\nfunction attachTexture(framebuffer, attachment, texture) {\n  var gl = framebuffer._gl;\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    attachment,\n    texture._target,\n    texture._texture,\n    0\n  );\n}\n\nfunction attachRenderbuffer(framebuffer, attachment, renderbuffer) {\n  var gl = framebuffer._gl;\n  gl.framebufferRenderbuffer(\n    gl.FRAMEBUFFER,\n    attachment,\n    gl.RENDERBUFFER,\n    renderbuffer._getRenderbuffer()\n  );\n}\n\n/**\n * Creates a framebuffer with optional initial color, depth, and stencil attachments.\n * Framebuffers are used for render-to-texture effects; they allow us to render to\n * textures in one pass, and read from it in a later pass.\n *\n * @param {Object} options The initial framebuffer attachments as shown in the example below. <code>context</code> is required. The possible properties are <code>colorTextures</code>, <code>colorRenderbuffers</code>, <code>depthTexture</code>, <code>depthRenderbuffer</code>, <code>stencilRenderbuffer</code>, <code>depthStencilTexture</code>, and <code>depthStencilRenderbuffer</code>.\n *\n * @exception {DeveloperError} Cannot have both color texture and color renderbuffer attachments.\n * @exception {DeveloperError} Cannot have both a depth texture and depth renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment.\n * @exception {DeveloperError} Cannot have both a depth and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a stencil and depth-stencil renderbuffer.\n * @exception {DeveloperError} Cannot have both a depth and stencil renderbuffer.\n * @exception {DeveloperError} The color-texture pixel-format must be a color format.\n * @exception {DeveloperError} The depth-texture pixel-format must be DEPTH_COMPONENT.\n * @exception {DeveloperError} The depth-stencil-texture pixel-format must be DEPTH_STENCIL.\n * @exception {DeveloperError} The number of color attachments exceeds the number supported.\n * @exception {DeveloperError} The color-texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension.\n * @exception {DeveloperError} The color-texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions.\n *\n * @example\n * // Create a framebuffer with color and depth texture attachments.\n * var width = context.canvas.clientWidth;\n * var height = context.canvas.clientHeight;\n * var framebuffer = new Framebuffer({\n *   context : context,\n *   colorTextures : [new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.RGBA\n *   })],\n *   depthTexture : new Texture({\n *     context : context,\n *     width : width,\n *     height : height,\n *     pixelFormat : PixelFormat.DEPTH_COMPONENT,\n *     pixelDatatype : PixelDatatype.UNSIGNED_SHORT\n *   })\n * });\n *\n * @private\n * @constructor\n */\nfunction Framebuffer(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  var context = options.context;\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.context", context);\n  //>>includeEnd(\'debug\');\n\n  var gl = context._gl;\n  var maximumColorAttachments = _ContextLimits_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].maximumColorAttachments */ .Z.maximumColorAttachments;\n\n  this._gl = gl;\n  this._framebuffer = gl.createFramebuffer();\n\n  this._colorTextures = [];\n  this._colorRenderbuffers = [];\n  this._activeColorAttachments = [];\n\n  this._depthTexture = undefined;\n  this._depthRenderbuffer = undefined;\n  this._stencilRenderbuffer = undefined;\n  this._depthStencilTexture = undefined;\n  this._depthStencilRenderbuffer = undefined;\n\n  /**\n   * When true, the framebuffer owns its attachments so they will be destroyed when\n   * {@link Framebuffer#destroy} is called or when a new attachment is assigned\n   * to an attachment point.\n   *\n   * @type {Boolean}\n   * @default true\n   *\n   * @see Framebuffer#destroy\n   */\n  this.destroyAttachments = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options.destroyAttachments, true);\n\n  // Throw if a texture and renderbuffer are attached to the same point.  This won\'t\n  // cause a WebGL error (because only one will be attached), but is likely a developer error.\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.colorTextures) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.colorRenderbuffers)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot have both color texture and color renderbuffer attachments."\n    );\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthTexture) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthRenderbuffer)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot have both a depth texture and depth renderbuffer attachment."\n    );\n  }\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthStencilTexture) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthStencilRenderbuffer)\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot have both a depth-stencil texture and depth-stencil renderbuffer attachment."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  // Avoid errors defined in Section 6.5 of the WebGL spec\n  var depthAttachment =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthTexture) || (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthRenderbuffer);\n  var depthStencilAttachment =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthStencilTexture) ||\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthStencilRenderbuffer);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (depthAttachment && depthStencilAttachment) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot have both a depth and depth-stencil attachment."\n    );\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.stencilRenderbuffer) && depthStencilAttachment) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot have both a stencil and depth-stencil attachment."\n    );\n  }\n  if (depthAttachment && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.stencilRenderbuffer)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "Cannot have both a depth and stencil attachment."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  ///////////////////////////////////////////////////////////////////\n\n  this._bind();\n\n  var texture;\n  var renderbuffer;\n  var i;\n  var length;\n  var attachmentEnum;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.colorTextures)) {\n    var textures = options.colorTextures;\n    length = this._colorTextures.length = this._activeColorAttachments.length =\n      textures.length;\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        "The number of color attachments exceeds the number supported."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    for (i = 0; i < length; ++i) {\n      texture = textures[i];\n\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!_Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].isColorFormat */ .Z.isColorFormat(texture.pixelFormat)) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n          "The color-texture pixel-format must be a color format."\n        );\n      }\n      if (\n        texture.pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].FLOAT */ .Z.FLOAT &&\n        !context.colorBufferFloat\n      ) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n          "The color texture pixel datatype is FLOAT and the WebGL implementation does not support the EXT_color_buffer_float or WEBGL_color_buffer_float extensions. See Context.colorBufferFloat."\n        );\n      }\n      if (\n        texture.pixelDatatype === _PixelDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].HALF_FLOAT */ .Z.HALF_FLOAT &&\n        !context.colorBufferHalfFloat\n      ) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n          "The color texture pixel datatype is HALF_FLOAT and the WebGL implementation does not support the EXT_color_buffer_half_float extension. See Context.colorBufferHalfFloat."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachTexture(this, attachmentEnum, texture);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorTextures[i] = texture;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.colorRenderbuffers)) {\n    var renderbuffers = options.colorRenderbuffers;\n    length = this._colorRenderbuffers.length = this._activeColorAttachments.length =\n      renderbuffers.length;\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (length > maximumColorAttachments) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        "The number of color attachments exceeds the number supported."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    for (i = 0; i < length; ++i) {\n      renderbuffer = renderbuffers[i];\n      attachmentEnum = this._gl.COLOR_ATTACHMENT0 + i;\n      attachRenderbuffer(this, attachmentEnum, renderbuffer);\n      this._activeColorAttachments[i] = attachmentEnum;\n      this._colorRenderbuffers[i] = renderbuffer;\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthTexture)) {\n    texture = options.depthTexture;\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (texture.pixelFormat !== _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].DEPTH_COMPONENT */ .Z.DEPTH_COMPONENT) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        "The depth-texture pixel-format must be DEPTH_COMPONENT."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    attachTexture(this, this._gl.DEPTH_ATTACHMENT, texture);\n    this._depthTexture = texture;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthRenderbuffer)) {\n    renderbuffer = options.depthRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_ATTACHMENT, renderbuffer);\n    this._depthRenderbuffer = renderbuffer;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.stencilRenderbuffer)) {\n    renderbuffer = options.stencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.STENCIL_ATTACHMENT, renderbuffer);\n    this._stencilRenderbuffer = renderbuffer;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthStencilTexture)) {\n    texture = options.depthStencilTexture;\n\n    //>>includeStart(\'debug\', pragmas.debug);\n    if (texture.pixelFormat !== _Core_PixelFormat_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].DEPTH_STENCIL */ .Z.DEPTH_STENCIL) {\n      throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n        "The depth-stencil pixel-format must be DEPTH_STENCIL."\n      );\n    }\n    //>>includeEnd(\'debug\');\n\n    attachTexture(this, this._gl.DEPTH_STENCIL_ATTACHMENT, texture);\n    this._depthStencilTexture = texture;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.depthStencilRenderbuffer)) {\n    renderbuffer = options.depthStencilRenderbuffer;\n    attachRenderbuffer(this, this._gl.DEPTH_STENCIL_ATTACHMENT, renderbuffer);\n    this._depthStencilRenderbuffer = renderbuffer;\n  }\n\n  this._unBind();\n}\n\nObject.defineProperties(Framebuffer.prototype, {\n  /**\n   * The status of the framebuffer. If the status is not WebGLConstants.FRAMEBUFFER_COMPLETE,\n   * a {@link DeveloperError} will be thrown when attempting to render to the framebuffer.\n   * @memberof Framebuffer.prototype\n   * @type {Number}\n   */\n  status: {\n    get: function () {\n      this._bind();\n      var status = this._gl.checkFramebufferStatus(this._gl.FRAMEBUFFER);\n      this._unBind();\n      return status;\n    },\n  },\n  numberOfColorAttachments: {\n    get: function () {\n      return this._activeColorAttachments.length;\n    },\n  },\n  depthTexture: {\n    get: function () {\n      return this._depthTexture;\n    },\n  },\n  depthRenderbuffer: {\n    get: function () {\n      return this._depthRenderbuffer;\n    },\n  },\n  stencilRenderbuffer: {\n    get: function () {\n      return this._stencilRenderbuffer;\n    },\n  },\n  depthStencilTexture: {\n    get: function () {\n      return this._depthStencilTexture;\n    },\n  },\n  depthStencilRenderbuffer: {\n    get: function () {\n      return this._depthStencilRenderbuffer;\n    },\n  },\n\n  /**\n   * True if the framebuffer has a depth attachment.  Depth attachments include\n   * depth and depth-stencil textures, and depth and depth-stencil renderbuffers.  When\n   * rendering to a framebuffer, a depth attachment is required for the depth test to have effect.\n   * @memberof Framebuffer.prototype\n   * @type {Boolean}\n   */\n  hasDepthAttachment: {\n    get: function () {\n      return !!(\n        this.depthTexture ||\n        this.depthRenderbuffer ||\n        this.depthStencilTexture ||\n        this.depthStencilRenderbuffer\n      );\n    },\n  },\n});\n\nFramebuffer.prototype._bind = function () {\n  var gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n};\n\nFramebuffer.prototype._unBind = function () {\n  var gl = this._gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n\nFramebuffer.prototype._getActiveColorAttachments = function () {\n  return this._activeColorAttachments;\n};\n\nFramebuffer.prototype.getColorTexture = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(index) || index < 0 || index >= this._colorTextures.length) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "index is required, must be greater than or equal to zero and must be less than the number of color attachments."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  return this._colorTextures[index];\n};\n\nFramebuffer.prototype.getColorRenderbuffer = function (index) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(index) ||\n    index < 0 ||\n    index >= this._colorRenderbuffers.length\n  ) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "index is required, must be greater than or equal to zero and must be less than the number of color attachments."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  return this._colorRenderbuffers[index];\n};\n\nFramebuffer.prototype.isDestroyed = function () {\n  return false;\n};\n\nFramebuffer.prototype.destroy = function () {\n  if (this.destroyAttachments) {\n    // If the color texture is a cube map face, it is owned by the cube map, and will not be destroyed.\n    var i = 0;\n    var textures = this._colorTextures;\n    var length = textures.length;\n    for (; i < length; ++i) {\n      var texture = textures[i];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(texture)) {\n        texture.destroy();\n      }\n    }\n\n    var renderbuffers = this._colorRenderbuffers;\n    length = renderbuffers.length;\n    for (i = 0; i < length; ++i) {\n      var renderbuffer = renderbuffers[i];\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(renderbuffer)) {\n        renderbuffer.destroy();\n      }\n    }\n\n    this._depthTexture = this._depthTexture && this._depthTexture.destroy();\n    this._depthRenderbuffer =\n      this._depthRenderbuffer && this._depthRenderbuffer.destroy();\n    this._stencilRenderbuffer =\n      this._stencilRenderbuffer && this._stencilRenderbuffer.destroy();\n    this._depthStencilTexture =\n      this._depthStencilTexture && this._depthStencilTexture.destroy();\n    this._depthStencilRenderbuffer =\n      this._depthStencilRenderbuffer &&\n      this._depthStencilRenderbuffer.destroy();\n  }\n\n  this._gl.deleteFramebuffer(this._framebuffer);\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Framebuffer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2932\n')},45368:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52200);\n\n\n/**\n * @private\n */\nvar MipmapHint = {\n  DONT_CARE: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].DONT_CARE */ .Z.DONT_CARE,\n  FASTEST: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].FASTEST */ .Z.FASTEST,\n  NICEST: _Core_WebGLConstants_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].NICEST */ .Z.NICEST,\n\n  validate: function (mipmapHint) {\n    return (\n      mipmapHint === MipmapHint.DONT_CARE ||\n      mipmapHint === MipmapHint.FASTEST ||\n      mipmapHint === MipmapHint.NICEST\n    );\n  },\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Object.freeze(MipmapHint));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUzNjguanMiLCJtYXBwaW5ncyI6IjtBQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDRGQUF3QjtBQUNyQyxXQUFXLHdGQUFzQjtBQUNqQyxVQUFVLHNGQUFxQjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EseURBQWUseUJBQXlCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvUmVuZGVyZXIvTWlwbWFwSGludC5qcz81Y2UzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWJHTENvbnN0YW50cyBmcm9tIFwiLi4vQ29yZS9XZWJHTENvbnN0YW50cy5qc1wiO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBNaXBtYXBIaW50ID0ge1xuICBET05UX0NBUkU6IFdlYkdMQ29uc3RhbnRzLkRPTlRfQ0FSRSxcbiAgRkFTVEVTVDogV2ViR0xDb25zdGFudHMuRkFTVEVTVCxcbiAgTklDRVNUOiBXZWJHTENvbnN0YW50cy5OSUNFU1QsXG5cbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIChtaXBtYXBIaW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG1pcG1hcEhpbnQgPT09IE1pcG1hcEhpbnQuRE9OVF9DQVJFIHx8XG4gICAgICBtaXBtYXBIaW50ID09PSBNaXBtYXBIaW50LkZBU1RFU1QgfHxcbiAgICAgIG1pcG1hcEhpbnQgPT09IE1pcG1hcEhpbnQuTklDRVNUXG4gICAgKTtcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKE1pcG1hcEhpbnQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45368\n')},8379:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * The render pass for a command.\n *\n * @private\n */\nvar Pass = {\n  // If you add/modify/remove Pass constants, also change the automatic GLSL constants\n  // that start with 'czm_pass'\n  //\n  // Commands are executed in order by pass up to the translucent pass.\n  // Translucent geometry needs special handling (sorting/OIT). The compute pass\n  // is executed first and the overlay pass is executed last. Both are not sorted\n  // by frustum.\n  ENVIRONMENT: 0,\n  COMPUTE: 1,\n  GLOBE: 2,\n  TERRAIN_CLASSIFICATION: 3,\n  CESIUM_3D_TILE: 4,\n  CESIUM_3D_TILE_CLASSIFICATION: 5,\n  CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW: 6,\n  OPAQUE: 7,\n  TRANSLUCENT: 8,\n  OVERLAY: 9,\n  NUMBER_OF_PASSES: 10,\n};\n/* harmony default export */ __webpack_exports__[\"Z\"] = (Object.freeze(Pass));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM3OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1JlbmRlcmVyL1Bhc3MuanM/ZTJlYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSByZW5kZXIgcGFzcyBmb3IgYSBjb21tYW5kLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBQYXNzID0ge1xuICAvLyBJZiB5b3UgYWRkL21vZGlmeS9yZW1vdmUgUGFzcyBjb25zdGFudHMsIGFsc28gY2hhbmdlIHRoZSBhdXRvbWF0aWMgR0xTTCBjb25zdGFudHNcbiAgLy8gdGhhdCBzdGFydCB3aXRoICdjem1fcGFzcydcbiAgLy9cbiAgLy8gQ29tbWFuZHMgYXJlIGV4ZWN1dGVkIGluIG9yZGVyIGJ5IHBhc3MgdXAgdG8gdGhlIHRyYW5zbHVjZW50IHBhc3MuXG4gIC8vIFRyYW5zbHVjZW50IGdlb21ldHJ5IG5lZWRzIHNwZWNpYWwgaGFuZGxpbmcgKHNvcnRpbmcvT0lUKS4gVGhlIGNvbXB1dGUgcGFzc1xuICAvLyBpcyBleGVjdXRlZCBmaXJzdCBhbmQgdGhlIG92ZXJsYXkgcGFzcyBpcyBleGVjdXRlZCBsYXN0LiBCb3RoIGFyZSBub3Qgc29ydGVkXG4gIC8vIGJ5IGZydXN0dW0uXG4gIEVOVklST05NRU5UOiAwLFxuICBDT01QVVRFOiAxLFxuICBHTE9CRTogMixcbiAgVEVSUkFJTl9DTEFTU0lGSUNBVElPTjogMyxcbiAgQ0VTSVVNXzNEX1RJTEU6IDQsXG4gIENFU0lVTV8zRF9USUxFX0NMQVNTSUZJQ0FUSU9OOiA1LFxuICBDRVNJVU1fM0RfVElMRV9DTEFTU0lGSUNBVElPTl9JR05PUkVfU0hPVzogNixcbiAgT1BBUVVFOiA3LFxuICBUUkFOU0xVQ0VOVDogOCxcbiAgT1ZFUkxBWTogOSxcbiAgTlVNQkVSX09GX1BBU1NFUzogMTAsXG59O1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShQYXNzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8379\n")},65121:function(__unused_webpack___webpack_module__,__webpack_exports__){eval("/**\n * The state for a particular rendering pass.  This is used to supplement the state\n * in a command being executed.\n *\n * @private\n * @constructor\n */\nfunction PassState(context) {\n  /**\n   * The context used to execute commands for this pass.\n   *\n   * @type {Context}\n   */\n  this.context = context;\n\n  /**\n   * The framebuffer to render to.  This framebuffer is used unless a {@link DrawCommand}\n   * or {@link ClearCommand} explicitly define a framebuffer, which is used for off-screen\n   * rendering.\n   *\n   * @type {Framebuffer}\n   * @default undefined\n   */\n  this.framebuffer = undefined;\n\n  /**\n   * When defined, this overrides the blending property of a {@link DrawCommand}'s render state.\n   * This is used to, for example, to allow the renderer to turn off blending during the picking pass.\n   * <p>\n   * When this is <code>undefined</code>, the {@link DrawCommand}'s property is used.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default undefined\n   */\n  this.blendingEnabled = undefined;\n\n  /**\n   * When defined, this overrides the scissor test property of a {@link DrawCommand}'s render state.\n   * This is used to, for example, to allow the renderer to scissor out the pick region during the picking pass.\n   * <p>\n   * When this is <code>undefined</code>, the {@link DrawCommand}'s property is used.\n   * </p>\n   *\n   * @type {Object}\n   * @default undefined\n   */\n  this.scissorTest = undefined;\n\n  /**\n   * The viewport used when one is not defined by a {@link DrawCommand}'s render state.\n   * @type {BoundingRectangle}\n   * @default undefined\n   */\n  this.viewport = undefined;\n}\n/* harmony default export */ __webpack_exports__[\"Z\"] = (PassState);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUxMjEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsdUVBQXVFO0FBQ3ZFLFNBQVMsb0JBQW9CO0FBQzdCO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQThELGtCQUFrQjtBQUNoRjtBQUNBO0FBQ0EsK0NBQStDLGtCQUFrQjtBQUNqRTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtFQUFrRSxrQkFBa0I7QUFDcEY7QUFDQTtBQUNBLCtDQUErQyxrQkFBa0I7QUFDakU7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxREFBcUQsa0JBQWtCO0FBQ3ZFLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLFNBQVMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9SZW5kZXJlci9QYXNzU3RhdGUuanM/MGU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBzdGF0ZSBmb3IgYSBwYXJ0aWN1bGFyIHJlbmRlcmluZyBwYXNzLiAgVGhpcyBpcyB1c2VkIHRvIHN1cHBsZW1lbnQgdGhlIHN0YXRlXG4gKiBpbiBhIGNvbW1hbmQgYmVpbmcgZXhlY3V0ZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXNzU3RhdGUoY29udGV4dCkge1xuICAvKipcbiAgICogVGhlIGNvbnRleHQgdXNlZCB0byBleGVjdXRlIGNvbW1hbmRzIGZvciB0aGlzIHBhc3MuXG4gICAqXG4gICAqIEB0eXBlIHtDb250ZXh0fVxuICAgKi9cbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAvKipcbiAgICogVGhlIGZyYW1lYnVmZmVyIHRvIHJlbmRlciB0by4gIFRoaXMgZnJhbWVidWZmZXIgaXMgdXNlZCB1bmxlc3MgYSB7QGxpbmsgRHJhd0NvbW1hbmR9XG4gICAqIG9yIHtAbGluayBDbGVhckNvbW1hbmR9IGV4cGxpY2l0bHkgZGVmaW5lIGEgZnJhbWVidWZmZXIsIHdoaWNoIGlzIHVzZWQgZm9yIG9mZi1zY3JlZW5cbiAgICogcmVuZGVyaW5nLlxuICAgKlxuICAgKiBAdHlwZSB7RnJhbWVidWZmZXJ9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgdGhpcy5mcmFtZWJ1ZmZlciA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogV2hlbiBkZWZpbmVkLCB0aGlzIG92ZXJyaWRlcyB0aGUgYmxlbmRpbmcgcHJvcGVydHkgb2YgYSB7QGxpbmsgRHJhd0NvbW1hbmR9J3MgcmVuZGVyIHN0YXRlLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8sIGZvciBleGFtcGxlLCB0byBhbGxvdyB0aGUgcmVuZGVyZXIgdG8gdHVybiBvZmYgYmxlbmRpbmcgZHVyaW5nIHRoZSBwaWNraW5nIHBhc3MuXG4gICAqIDxwPlxuICAgKiBXaGVuIHRoaXMgaXMgPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiwgdGhlIHtAbGluayBEcmF3Q29tbWFuZH0ncyBwcm9wZXJ0eSBpcyB1c2VkLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuYmxlbmRpbmdFbmFibGVkID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBXaGVuIGRlZmluZWQsIHRoaXMgb3ZlcnJpZGVzIHRoZSBzY2lzc29yIHRlc3QgcHJvcGVydHkgb2YgYSB7QGxpbmsgRHJhd0NvbW1hbmR9J3MgcmVuZGVyIHN0YXRlLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8sIGZvciBleGFtcGxlLCB0byBhbGxvdyB0aGUgcmVuZGVyZXIgdG8gc2Npc3NvciBvdXQgdGhlIHBpY2sgcmVnaW9uIGR1cmluZyB0aGUgcGlja2luZyBwYXNzLlxuICAgKiA8cD5cbiAgICogV2hlbiB0aGlzIGlzIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4sIHRoZSB7QGxpbmsgRHJhd0NvbW1hbmR9J3MgcHJvcGVydHkgaXMgdXNlZC5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMuc2Npc3NvclRlc3QgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSB2aWV3cG9ydCB1c2VkIHdoZW4gb25lIGlzIG5vdCBkZWZpbmVkIGJ5IGEge0BsaW5rIERyYXdDb21tYW5kfSdzIHJlbmRlciBzdGF0ZS5cbiAgICogQHR5cGUge0JvdW5kaW5nUmVjdGFuZ2xlfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMudmlld3BvcnQgPSB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBQYXNzU3RhdGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65121\n")}}]);