"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[270],{59709:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59947);\n/* harmony import */ var _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92062);\n/* harmony import */ var _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(17711);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(82982);\n/* harmony import */ var _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11954);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(86511);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50491);\n/* harmony import */ var _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(84935);\n/* harmony import */ var _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(55293);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(72248);\n/* harmony import */ var _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(25405);\n/* harmony import */ var _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(91473);\n/* harmony import */ var _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(96190);\n/* harmony import */ var _Core_Request_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(22426);\n/* harmony import */ var _Core_RequestScheduler_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(63181);\n/* harmony import */ var _Core_RequestState_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(6224);\n/* harmony import */ var _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(82968);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(68985);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(9407);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(13222);\n/* harmony import */ var _Cesium3DTileContentFactory_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(95563);\n/* harmony import */ var _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(96706);\n/* harmony import */ var _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(41059);\n/* harmony import */ var _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(1157);\n/* harmony import */ var _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(94170);\n/* harmony import */ var _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(36819);\n/* harmony import */ var _Empty3DTileContent_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(67334);\n/* harmony import */ var _findGroupMetadata_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(20107);\n/* harmony import */ var _hasExtension_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(81326);\n/* harmony import */ var _Multiple3DTileContent_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(61773);\n/* harmony import */ var _preprocess3DTileContent_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(16240);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(89917);\n/* harmony import */ var _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(17106);\n/* harmony import */ var _TileBoundingS2Cell_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(96811);\n/* harmony import */ var _TileBoundingSphere_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(60516);\n/* harmony import */ var _TileMetadata_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(8796);\n/* harmony import */ var _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(43338);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(8379);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A tile in a {@link Cesium3DTileset}.  When a tile is first created, its content is not loaded;\n * the content is loaded on-demand when needed based on the view.\n * <p>\n * Do not construct this directly, instead access tiles through {@link Cesium3DTileset#tileVisible}.\n * </p>\n *\n * @alias Cesium3DTile\n * @constructor\n */\nfunction Cesium3DTile(tileset, baseResource, header, parent) {\n  this._tileset = tileset;\n  this._header = header;\n  var contentHeader = header.content;\n\n  /**\n   * The local transform of this tile.\n   * @type {Matrix4}\n   */\n  this.transform = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(header.transform)\n    ? _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].unpack */ .Z.unpack(header.transform)\n    : _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY);\n\n  var parentTransform = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent)\n    ? parent.computedTransform\n    : tileset.modelMatrix;\n  var computedTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiply */ .Z.multiply(\n    parentTransform,\n    this.transform,\n    new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z()\n  );\n\n  var parentInitialTransform = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent)\n    ? parent._initialTransform\n    : _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY;\n  this._initialTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiply */ .Z.multiply(\n    parentInitialTransform,\n    this.transform,\n    new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z()\n  );\n\n  /**\n   * The final computed transform of this tile.\n   * @type {Matrix4}\n   * @readonly\n   */\n  this.computedTransform = computedTransform;\n\n  this._boundingVolume = this.createBoundingVolume(\n    header.boundingVolume,\n    computedTransform\n  );\n  this._boundingVolume2D = undefined;\n\n  var contentBoundingVolume;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(contentHeader) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(contentHeader.boundingVolume)) {\n    // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n    // around only the features in the tile.  This box is useful for culling for rendering,\n    // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n    // since it only bounds features in the tile, not the entire tile, children may be\n    // outside of this box.\n    contentBoundingVolume = this.createBoundingVolume(\n      contentHeader.boundingVolume,\n      computedTransform\n    );\n  }\n  this._contentBoundingVolume = contentBoundingVolume;\n  this._contentBoundingVolume2D = undefined;\n\n  var viewerRequestVolume;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(header.viewerRequestVolume)) {\n    viewerRequestVolume = this.createBoundingVolume(\n      header.viewerRequestVolume,\n      computedTransform\n    );\n  }\n  this._viewerRequestVolume = viewerRequestVolume;\n\n  /**\n   * The error, in meters, introduced if this tile is rendered and its children are not.\n   * This is used to compute screen space error, i.e., the error measured in pixels.\n   *\n   * @type {Number}\n   * @readonly\n   */\n  this.geometricError = header.geometricError;\n  this._geometricError = header.geometricError;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._geometricError)) {\n    this._geometricError = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent)\n      ? parent.geometricError\n      : tileset._geometricError;\n    Cesium3DTile._deprecationWarning(\n      "geometricErrorUndefined",\n      "Required property geometricError is undefined for this tile. Using parent\'s geometric error instead."\n    );\n  }\n\n  this.updateGeometricErrorScale();\n\n  var refine;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(header.refine)) {\n    if (header.refine === "replace" || header.refine === "add") {\n      Cesium3DTile._deprecationWarning(\n        "lowercase-refine",\n        \'This tile uses a lowercase refine "\' +\n          header.refine +\n          \'". Instead use "\' +\n          header.refine.toUpperCase() +\n          \'".\'\n      );\n    }\n    refine =\n      header.refine.toUpperCase() === "REPLACE"\n        ? _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].REPLACE */ .Z.REPLACE\n        : _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].ADD */ .Z.ADD;\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent)) {\n    // Inherit from parent tile if omitted.\n    refine = parent.refine;\n  } else {\n    refine = _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].REPLACE */ .Z.REPLACE;\n  }\n\n  /**\n   * Specifies the type of refinement that is used when traversing this tile for rendering.\n   *\n   * @type {Cesium3DTileRefine}\n   * @readonly\n   * @private\n   */\n  this.refine = refine;\n\n  /**\n   * Gets the tile\'s children.\n   *\n   * @type {Cesium3DTile[]}\n   * @readonly\n   */\n  this.children = [];\n\n  /**\n   * This tile\'s parent or <code>undefined</code> if this tile is the root.\n   * <p>\n   * When a tile\'s content points to an external tileset JSON file, the external tileset\'s\n   * root tile\'s parent is not <code>undefined</code>; instead, the parent references\n   * the tile (with its content pointing to an external tileset JSON file) as if the two tilesets were merged.\n   * </p>\n   *\n   * @type {Cesium3DTile}\n   * @readonly\n   */\n  this.parent = parent;\n\n  var content;\n  var hasEmptyContent = false;\n  var hasMultipleContents = false;\n  var contentState;\n  var contentResource;\n  var serverKey;\n\n  baseResource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].createIfNeeded */ .Z.createIfNeeded(baseResource);\n\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"] */ .Z)(header, "3DTILES_multiple_contents")) {\n    hasMultipleContents = true;\n    contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].UNLOADED */ .Z.UNLOADED;\n    // Each content may have its own URI, but they all need to be resolved\n    // relative to the tileset, so the base resource is used.\n    contentResource = baseResource.clone();\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(contentHeader)) {\n    var contentHeaderUri = contentHeader.uri;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(contentHeader.url)) {\n      Cesium3DTile._deprecationWarning(\n        "contentUrl",\n        \'This tileset JSON uses the "content.url" property which has been deprecated. Use "content.uri" instead.\'\n      );\n      contentHeaderUri = contentHeader.url;\n    }\n    contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].UNLOADED */ .Z.UNLOADED;\n    contentResource = baseResource.getDerivedResource({\n      url: contentHeaderUri,\n    });\n    serverKey = _Core_RequestScheduler_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].getServerKey */ .Z.getServerKey(\n      contentResource.getUrlComponent()\n    );\n  } else {\n    content = new _Empty3DTileContent_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z(tileset, this);\n    hasEmptyContent = true;\n    contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].READY */ .Z.READY;\n  }\n\n  this._content = content;\n  this._contentResource = contentResource;\n  this._contentState = contentState;\n  this._contentReadyToProcessPromise = undefined;\n  this._contentReadyPromise = undefined;\n  this._expiredContent = undefined;\n\n  this._serverKey = serverKey;\n\n  /**\n   * When <code>true</code>, the tile has no content.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasEmptyContent = hasEmptyContent;\n\n  /**\n   * When <code>true</code>, the tile\'s content points to an external tileset.\n   * <p>\n   * This is <code>false</code> until the tile\'s content is loaded.\n   * </p>\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasTilesetContent = false;\n\n  /**\n   * When <code>true</code>, the tile\'s content is an implicit tileset.\n   * <p>\n   * This is <code>false</code> until the tile\'s implicit content is loaded.\n   * </p>\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.hasImplicitContent = false;\n\n  /**\n   * When <code>true</code>, the tile has multiple contents via the\n   * <code>3DTILES_multiple_contents</code> extension.\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/extensions/3DTILES_multiple_contents|3DTILES_multiple_contents extension}\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  this.hasMultipleContents = hasMultipleContents;\n\n  var metadata;\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"] */ .Z)(header, "3DTILES_metadata")) {\n    // This assumes that tileset.metadata has been created before any\n    // tiles are constructed.\n    var extension = header.extensions["3DTILES_metadata"];\n    var classes = tileset.metadata.schema.classes;\n    var tileClass = classes[extension.class];\n    metadata = new _TileMetadata_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z({\n      tile: extension,\n      class: tileClass,\n    });\n  }\n\n  /**\n   * When the <code>3DTILES_metadata</code> extension is used, this\n   * stores a {@link TileMetadata} object for accessing tile metadata.\n   *\n   * @type {TileMetadata}\n   * @readonly\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.metadata = metadata;\n\n  /**\n   * The node in the tileset\'s LRU cache, used to determine when to unload a tile\'s content.\n   *\n   * See {@link Cesium3DTilesetCache}\n   *\n   * @type {DoublyLinkedListNode}\n   * @readonly\n   *\n   * @private\n   */\n  this.cacheNode = undefined;\n\n  var expire = header.expire;\n  var expireDuration;\n  var expireDate;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(expire)) {\n    expireDuration = expire.duration;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(expire.date)) {\n      expireDate = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].fromIso8601 */ .Z.fromIso8601(expire.date);\n    }\n  }\n\n  /**\n   * The time in seconds after the tile\'s content is ready when the content expires and new content is requested.\n   *\n   * @type {Number}\n   */\n  this.expireDuration = expireDuration;\n\n  /**\n   * The date when the content expires and new content is requested.\n   *\n   * @type {JulianDate}\n   */\n  this.expireDate = expireDate;\n\n  /**\n   * The time when a style was last applied to this tile.\n   *\n   * @type {Number}\n   *\n   * @private\n   */\n  this.lastStyleTime = 0.0;\n\n  /**\n   * Marks whether the tile\'s children bounds are fully contained within the tile\'s bounds\n   *\n   * @type {Cesium3DTileOptimizationHint}\n   *\n   * @private\n   */\n  this._optimChildrenWithinParent = _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].NOT_COMPUTED */ .Z.NOT_COMPUTED;\n\n  /**\n   * Tracks if the tile\'s relationship with a ClippingPlaneCollection has changed with regards\n   * to the ClippingPlaneCollection\'s state.\n   *\n   * @type {Boolean}\n   *\n   * @private\n   */\n  this.clippingPlanesDirty = false;\n\n  /**\n   * Tracks if the tile\'s request should be deferred until all non-deferred\n   * tiles load.\n   *\n   * @type {Boolean}\n   *\n   * @private\n   */\n  this.priorityDeferred = false;\n\n  /**\n   * For implicit tiling, an ImplicitTileset object will be attached to a\n   * placeholder tile with the <code>3DTILES_implicit_tiling</code> extension.\n   * This way the {@link Implicit3DTileContent} can access the tile later once the content is fetched.\n   *\n   * @type {ImplicitTileset|undefined}\n   *\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.implicitTileset = undefined;\n\n  /**\n   * For implicit tiling, the (level, x, y, [z]) coordinates within the\n   * implicit tileset are stored in the tile.\n   *\n   * @type {ImplicitTileCoordinates|undefined}\n   *\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.implicitCoordinates = undefined;\n\n  /**\n   * For implicit tiling, each transcoded tile will hold a weak reference to\n   * the {@link ImplicitSubtree}.\n   *\n   * @type {ImplicitSubtree|undefined}\n   *\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.implicitSubtree = undefined;\n\n  // Members that are updated every frame for tree traversal and rendering optimizations:\n  this._distanceToCamera = 0.0;\n  this._centerZDepth = 0.0;\n  this._screenSpaceError = 0.0;\n  this._screenSpaceErrorProgressiveResolution = 0.0; // The screen space error at a given screen height of tileset.progressiveResolutionHeightFraction * screenHeight\n  this._visibilityPlaneMask = 0;\n  this._visible = false;\n  this._inRequestVolume = false;\n\n  this._finalResolution = true;\n  this._depth = 0;\n  this._stackLength = 0;\n  this._selectionDepth = 0;\n\n  this._updatedVisibilityFrame = 0;\n  this._touchedFrame = 0;\n  this._visitedFrame = 0;\n  this._selectedFrame = 0;\n  this._requestedFrame = 0;\n  this._ancestorWithContent = undefined;\n  this._ancestorWithContentAvailable = undefined;\n  this._refines = false;\n  this._shouldSelect = false;\n  this._isClipped = true;\n  this._clippingPlanesState = 0; // encapsulates (_isClipped, clippingPlanes.enabled) and number/function\n  this._debugBoundingVolume = undefined;\n  this._debugContentBoundingVolume = undefined;\n  this._debugViewerRequestVolume = undefined;\n  this._debugColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromRandom */ .Z.fromRandom({ alpha: 1.0 });\n  this._debugColorizeTiles = false;\n\n  this._priority = 0.0; // The priority used for request sorting\n  this._priorityHolder = this; // Reference to the ancestor up the tree that holds the _foveatedFactor and _distanceToCamera for all tiles in the refinement chain.\n  this._priorityProgressiveResolution = false;\n  this._priorityProgressiveResolutionScreenSpaceErrorLeaf = false;\n  this._priorityReverseScreenSpaceError = 0.0;\n  this._foveatedFactor = 0.0;\n  this._wasMinPriorityChild = false; // Needed for knowing when to continue a refinement chain. Gets reset in updateTile in traversal and gets set in updateAndPushChildren in traversal.\n\n  this._loadTimestamp = new _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\n  this._commandsLength = 0;\n\n  this._color = undefined;\n  this._colorDirty = false;\n\n  this._request = undefined;\n}\n\n// This can be overridden for testing purposes\nCesium3DTile._deprecationWarning = _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z;\n\nObject.defineProperties(Cesium3DTile.prototype, {\n  /**\n   * The tileset containing this tile.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Cesium3DTileset}\n   * @readonly\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  /**\n   * The tile\'s content.  This represents the actual tile\'s payload,\n   * not the content\'s metadata in the tileset JSON file.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Cesium3DTileContent}\n   * @readonly\n   */\n  content: {\n    get: function () {\n      return this._content;\n    },\n  },\n\n  /**\n   * Get the tile\'s bounding volume.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {TileBoundingVolume}\n   * @readonly\n   * @private\n   */\n  boundingVolume: {\n    get: function () {\n      return this._boundingVolume;\n    },\n  },\n\n  /**\n   * Get the bounding volume of the tile\'s contents.  This defaults to the\n   * tile\'s bounding volume when the content\'s bounding volume is\n   * <code>undefined</code>.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {TileBoundingVolume}\n   * @readonly\n   * @private\n   */\n  contentBoundingVolume: {\n    get: function () {\n      return (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this._contentBoundingVolume, this._boundingVolume);\n    },\n  },\n\n  /**\n   * Get the bounding sphere derived from the tile\'s bounding volume.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {BoundingSphere}\n   * @readonly\n   */\n  boundingSphere: {\n    get: function () {\n      return this._boundingVolume.boundingSphere;\n    },\n  },\n\n  /**\n   * Returns the <code>extras</code> property in the tileset JSON for this tile, which contains application specific metadata.\n   * Returns <code>undefined</code> if <code>extras</code> does not exist.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {*}\n   * @readonly\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification#specifying-extensions-and-application-specific-extras|Extras in the 3D Tiles specification.}\n   */\n  extras: {\n    get: function () {\n      return this._header.extras;\n    },\n  },\n\n  /**\n   * Gets or sets the tile\'s highlight color.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Color}\n   *\n   * @default {@link Color.WHITE}\n   *\n   * @private\n   */\n  color: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._color)) {\n        this._color = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n      }\n      return _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(this._color);\n    },\n    set: function (value) {\n      this._color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(value, this._color);\n      this._colorDirty = true;\n    },\n  },\n\n  /**\n   * Determines if the tile has available content to render.  <code>true</code> if the tile\'s\n   * content is ready or if it has expired content that renders while new content loads; otherwise,\n   * <code>false</code>.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  contentAvailable: {\n    get: function () {\n      return (\n        (this.contentReady &&\n          !this.hasEmptyContent &&\n          !this.hasTilesetContent &&\n          !this.hasImplicitContent) ||\n        ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._expiredContent) && !this.contentFailed)\n      );\n    },\n  },\n\n  /**\n   * Determines if the tile\'s content is ready. This is automatically <code>true</code> for\n   * tile\'s with empty content.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  contentReady: {\n    get: function () {\n      return this._contentState === _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].READY */ .Z.READY;\n    },\n  },\n\n  /**\n   * Determines if the tile\'s content has not be requested. <code>true</code> if tile\'s\n   * content has not be requested; otherwise, <code>false</code>.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  contentUnloaded: {\n    get: function () {\n      return this._contentState === _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].UNLOADED */ .Z.UNLOADED;\n    },\n  },\n\n  /**\n   * Determines if the tile\'s content is expired. <code>true</code> if tile\'s\n   * content is expired; otherwise, <code>false</code>.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  contentExpired: {\n    get: function () {\n      return this._contentState === _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].EXPIRED */ .Z.EXPIRED;\n    },\n  },\n\n  /**\n   * Determines if the tile\'s content failed to load.  <code>true</code> if the tile\'s\n   * content failed to load; otherwise, <code>false</code>.\n   *\n   * @memberof Cesium3DTile.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @private\n   */\n  contentFailed: {\n    get: function () {\n      return this._contentState === _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].FAILED */ .Z.FAILED;\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when the tile\'s content is ready to process.\n   * This happens after the content is downloaded but before the content is ready\n   * to render.\n   * <p>\n   * The promise remains <code>undefined</code> until the tile\'s content is requested.\n   * </p>\n   *\n   * @type {Promise.<Cesium3DTileContent>}\n   * @readonly\n   *\n   * @private\n   */\n  contentReadyToProcessPromise: {\n    get: function () {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._contentReadyToProcessPromise)) {\n        return this._contentReadyToProcessPromise.promise;\n      }\n      return undefined;\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when the tile\'s content is ready to render.\n   * <p>\n   * The promise remains <code>undefined</code> until the tile\'s content is requested.\n   * </p>\n   *\n   * @type {Promise.<Cesium3DTileContent>}\n   * @readonly\n   *\n   * @private\n   */\n  contentReadyPromise: {\n    get: function () {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._contentReadyPromise)) {\n        return this._contentReadyPromise.promise;\n      }\n      return undefined;\n    },\n  },\n\n  /**\n   * Returns the number of draw commands used by this tile.\n   *\n   * @readonly\n   *\n   * @private\n   */\n  commandsLength: {\n    get: function () {\n      return this._commandsLength;\n    },\n  },\n});\n\nvar scratchCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nfunction isPriorityDeferred(tile, frameState) {\n  var tileset = tile._tileset;\n\n  // If closest point on line is inside the sphere then set foveatedFactor to 0. Otherwise, the dot product is with the line from camera to the point on the sphere that is closest to the line.\n  var camera = frameState.camera;\n  var boundingSphere = tile.boundingSphere;\n  var radius = boundingSphere.radius;\n  var scaledCameraDirection = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    camera.directionWC,\n    tile._centerZDepth,\n    scratchCartesian\n  );\n  var closestPointOnLine = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(\n    camera.positionWC,\n    scaledCameraDirection,\n    scratchCartesian\n  );\n  // The distance from the camera\'s view direction to the tile.\n  var toLine = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(\n    closestPointOnLine,\n    boundingSphere.center,\n    scratchCartesian\n  );\n  var distanceToCenterLine = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(toLine);\n  var notTouchingSphere = distanceToCenterLine > radius;\n\n  // If camera\'s direction vector is inside the bounding sphere then consider\n  // this tile right along the line of sight and set _foveatedFactor to 0.\n  // Otherwise,_foveatedFactor is one minus the dot product of the camera\'s direction\n  // and the vector between the camera and the point on the bounding sphere closest to the view line.\n  if (notTouchingSphere) {\n    var toLineNormalized = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(toLine, scratchCartesian);\n    var scaledToLine = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      toLineNormalized,\n      radius,\n      scratchCartesian\n    );\n    var closestOnSphere = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(\n      boundingSphere.center,\n      scaledToLine,\n      scratchCartesian\n    );\n    var toClosestOnSphere = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(\n      closestOnSphere,\n      camera.positionWC,\n      scratchCartesian\n    );\n    var toClosestOnSphereNormalize = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n      toClosestOnSphere,\n      scratchCartesian\n    );\n    tile._foveatedFactor =\n      1.0 -\n      Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(camera.directionWC, toClosestOnSphereNormalize));\n  } else {\n    tile._foveatedFactor = 0.0;\n  }\n\n  // Skip this feature if: non-skipLevelOfDetail and replace refine, if the foveated settings are turned off, if tile is progressive resolution and replace refine and skipLevelOfDetail (will help get rid of ancestor artifacts faster)\n  // Or if the tile is a preload of any kind\n  var replace = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].REPLACE */ .Z.REPLACE;\n  var skipLevelOfDetail = tileset._skipLevelOfDetail;\n  if (\n    (replace && !skipLevelOfDetail) ||\n    !tileset.foveatedScreenSpaceError ||\n    tileset.foveatedConeSize === 1.0 ||\n    (tile._priorityProgressiveResolution && replace && skipLevelOfDetail) ||\n    tileset._pass === _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].PRELOAD_FLIGHT */ .Z.PRELOAD_FLIGHT ||\n    tileset._pass === _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].PRELOAD */ .Z.PRELOAD\n  ) {\n    return false;\n  }\n\n  var maximumFovatedFactor = 1.0 - Math.cos(camera.frustum.fov * 0.5); // 0.14 for fov = 60. NOTE very hard to defer vertically foveated tiles since max is based on fovy (which is fov). Lowering the 0.5 to a smaller fraction of the screen height will start to defer vertically foveated tiles.\n  var foveatedConeFactor = tileset.foveatedConeSize * maximumFovatedFactor;\n\n  // If it\'s inside the user-defined view cone, then it should not be deferred.\n  if (tile._foveatedFactor <= foveatedConeFactor) {\n    return false;\n  }\n\n  // Relax SSE based on how big the angle is between the tile and the edge of the foveated cone.\n  var range = maximumFovatedFactor - foveatedConeFactor;\n  var normalizedFoveatedFactor = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clamp */ .Z.clamp(\n    (tile._foveatedFactor - foveatedConeFactor) / range,\n    0.0,\n    1.0\n  );\n  var sseRelaxation = tileset.foveatedInterpolationCallback(\n    tileset.foveatedMinimumScreenSpaceErrorRelaxation,\n    tileset.maximumScreenSpaceError,\n    normalizedFoveatedFactor\n  );\n  var sse =\n    tile._screenSpaceError === 0.0 && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile.parent)\n      ? tile.parent._screenSpaceError * 0.5\n      : tile._screenSpaceError;\n\n  return tileset.maximumScreenSpaceError - sseRelaxation <= sse;\n}\n\nvar scratchJulianDate = new _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z();\n\n/**\n * Get the tile\'s screen space error.\n *\n * @private\n */\nCesium3DTile.prototype.getScreenSpaceError = function (\n  frameState,\n  useParentGeometricError,\n  progressiveResolutionHeightFraction\n) {\n  var tileset = this._tileset;\n  var heightFraction = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(progressiveResolutionHeightFraction, 1.0);\n  var parentGeometricError = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this.parent)\n    ? this.parent.geometricError\n    : tileset._geometricError;\n  var geometricError = useParentGeometricError\n    ? parentGeometricError\n    : this.geometricError;\n  if (geometricError === 0.0) {\n    // Leaf tiles do not have any error so save the computation\n    return 0.0;\n  }\n  var camera = frameState.camera;\n  var frustum = camera.frustum;\n  var context = frameState.context;\n  var width = context.drawingBufferWidth;\n  var height = context.drawingBufferHeight * heightFraction;\n  var error;\n  if (\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].SCENE2D */ .Z.SCENE2D ||\n    frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z\n  ) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(frustum._offCenterFrustum)) {\n      frustum = frustum._offCenterFrustum;\n    }\n    var pixelSize =\n      Math.max(frustum.top - frustum.bottom, frustum.right - frustum.left) /\n      Math.max(width, height);\n    error = geometricError / pixelSize;\n  } else {\n    // Avoid divide by zero when viewer is inside the tile\n    var distance = Math.max(this._distanceToCamera, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON7 */ .Z.EPSILON7);\n    var sseDenominator = camera.frustum.sseDenominator;\n    error = (geometricError * height) / (distance * sseDenominator);\n    if (tileset.dynamicScreenSpaceError) {\n      var density = tileset._dynamicScreenSpaceErrorComputedDensity;\n      var factor = tileset.dynamicScreenSpaceErrorFactor;\n      var dynamicError = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].fog */ .Z.fog(distance, density) * factor;\n      error -= dynamicError;\n    }\n  }\n\n  error /= frameState.pixelRatio;\n\n  return error;\n};\n\nfunction isPriorityProgressiveResolution(tileset, tile) {\n  if (\n    tileset.progressiveResolutionHeightFraction <= 0.0 ||\n    tileset.progressiveResolutionHeightFraction > 0.5\n  ) {\n    return false;\n  }\n\n  var isProgressiveResolutionTile =\n    tile._screenSpaceErrorProgressiveResolution >\n    tileset._maximumScreenSpaceError; // Mark non-SSE leaves\n  tile._priorityProgressiveResolutionScreenSpaceErrorLeaf = false; // Needed for skipLOD\n  var parent = tile.parent;\n  var maximumScreenSpaceError = tileset._maximumScreenSpaceError;\n  var tilePasses =\n    tile._screenSpaceErrorProgressiveResolution <= maximumScreenSpaceError;\n  var parentFails =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent) &&\n    parent._screenSpaceErrorProgressiveResolution > maximumScreenSpaceError;\n  if (tilePasses && parentFails) {\n    // A progressive resolution SSE leaf, promote its priority as well\n    tile._priorityProgressiveResolutionScreenSpaceErrorLeaf = true;\n    isProgressiveResolutionTile = true;\n  }\n  return isProgressiveResolutionTile;\n}\n\nfunction getPriorityReverseScreenSpaceError(tileset, tile) {\n  var parent = tile.parent;\n  var useParentScreenSpaceError =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent) &&\n    (!tileset._skipLevelOfDetail ||\n      tile._screenSpaceError === 0.0 ||\n      parent.hasTilesetContent ||\n      parent.hasImplicitContent);\n  var screenSpaceError = useParentScreenSpaceError\n    ? parent._screenSpaceError\n    : tile._screenSpaceError;\n  return tileset.root._screenSpaceError - screenSpaceError;\n}\n\n/**\n * Update the tile\'s visibility.\n *\n * @private\n */\nCesium3DTile.prototype.updateVisibility = function (frameState) {\n  var parent = this.parent;\n  var tileset = this._tileset;\n  var parentTransform = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent)\n    ? parent.computedTransform\n    : tileset.modelMatrix;\n  var parentVisibilityPlaneMask = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(parent)\n    ? parent._visibilityPlaneMask\n    : _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].MASK_INDETERMINATE */ .Z.MASK_INDETERMINATE;\n  this.updateTransform(parentTransform);\n  this._distanceToCamera = this.distanceToTile(frameState);\n  this._centerZDepth = this.distanceToTileCenter(frameState);\n  this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n  this._screenSpaceErrorProgressiveResolution = this.getScreenSpaceError(\n    frameState,\n    false,\n    tileset.progressiveResolutionHeightFraction\n  );\n  this._visibilityPlaneMask = this.visibility(\n    frameState,\n    parentVisibilityPlaneMask\n  ); // Use parent\'s plane mask to speed up visibility test\n  this._visible = this._visibilityPlaneMask !== _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].MASK_OUTSIDE */ .Z.MASK_OUTSIDE;\n  this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n  this._priorityReverseScreenSpaceError = getPriorityReverseScreenSpaceError(\n    tileset,\n    this\n  );\n  this._priorityProgressiveResolution = isPriorityProgressiveResolution(\n    tileset,\n    this\n  );\n  this.priorityDeferred = isPriorityDeferred(this, frameState);\n};\n\n/**\n * Update whether the tile has expired.\n *\n * @private\n */\nCesium3DTile.prototype.updateExpiration = function () {\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this.expireDate) &&\n    this.contentReady &&\n    !this.hasEmptyContent &&\n    !this.hasMultipleContents\n  ) {\n    var now = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].now */ .Z.now(scratchJulianDate);\n    if (_Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].lessThan */ .Z.lessThan(this.expireDate, now)) {\n      this._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].EXPIRED */ .Z.EXPIRED;\n      this._expiredContent = this._content;\n    }\n  }\n};\n\nfunction updateExpireDate(tile) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile.expireDuration)) {\n    var expireDurationDate = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].now */ .Z.now(scratchJulianDate);\n    _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].addSeconds */ .Z.addSeconds(\n      expireDurationDate,\n      tile.expireDuration,\n      expireDurationDate\n    );\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile.expireDate)) {\n      if (_Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].lessThan */ .Z.lessThan(tile.expireDate, expireDurationDate)) {\n        _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].clone */ .Z.clone(expireDurationDate, tile.expireDate);\n      }\n    } else {\n      tile.expireDate = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].clone */ .Z.clone(expireDurationDate);\n    }\n  }\n}\n\nfunction createPriorityFunction(tile) {\n  return function () {\n    return tile._priority;\n  };\n}\n\n/**\n * Requests the tile\'s content.\n * <p>\n * The request may not be made if the Cesium Request Scheduler can\'t prioritize it.\n * </p>\n *\n * @return {Number} The number of requests that were attempted but not scheduled.\n * @private\n */\nCesium3DTile.prototype.requestContent = function () {\n  // empty contents don\'t require any HTTP requests\n  if (this.hasEmptyContent) {\n    return 0;\n  }\n\n  if (this.hasMultipleContents) {\n    return requestMultipleContents(this);\n  }\n\n  return requestSingleContent(this);\n};\n\n/**\n * The <code>3DTILES_multiple_contents</code> extension allows multiple\n * {@link Cesium3DTileContent} within a single tile. Due to differences\n * in request scheduling, this is handled separately.\n * <p>\n * This implementation of <code>3DTILES_multiple_contents</code> does not\n * support tile expiry like requestSingleContent does. If this changes,\n * note that the resource.setQueryParameters() details must go inside {@link Multiple3DTileContent} since that is per-request.\n * </p>\n *\n * @private\n */\nfunction requestMultipleContents(tile) {\n  var multipleContents = tile._content;\n  var tileset = tile._tileset;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(multipleContents)) {\n    // Create the content object immediately, it will handle scheduling\n    // requests for inner contents.\n    var extensionHeader = tile._header.extensions["3DTILES_multiple_contents"];\n    multipleContents = new _Multiple3DTileContent_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z(\n      tileset,\n      tile,\n      tile._contentResource.clone(),\n      extensionHeader\n    );\n    tile._content = multipleContents;\n  }\n\n  var backloggedRequestCount = multipleContents.requestInnerContents();\n  if (backloggedRequestCount > 0) {\n    return backloggedRequestCount;\n  }\n\n  tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].LOADING */ .Z.LOADING;\n  tile._contentReadyToProcessPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].defer */ .Z.defer();\n  tile._contentReadyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].defer */ .Z.defer();\n\n  multipleContents.contentsFetchedPromise\n    .then(function () {\n      if (tile._contentState !== _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].LOADING */ .Z.LOADING) {\n        // tile was canceled, short circuit.\n        return;\n      }\n\n      if (tile.isDestroyed()) {\n        multipleContentFailed(\n          tile,\n          tileset,\n          "Tile was unloaded while content was loading"\n        );\n        return;\n      }\n\n      tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].PROCESSING */ .Z.PROCESSING;\n      tile._contentReadyToProcessPromise.resolve(multipleContents);\n\n      return multipleContents.readyPromise.then(function (content) {\n        if (tile.isDestroyed()) {\n          multipleContentFailed(\n            tile,\n            tileset,\n            "Tile was unloaded while content was processing"\n          );\n          return;\n        }\n\n        // Refresh style for expired content\n        tile._selectedFrame = 0;\n        tile.lastStyleTime = 0.0;\n\n        _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].now */ .Z.now(tile._loadTimestamp);\n        tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].READY */ .Z.READY;\n        tile._contentReadyPromise.resolve(content);\n      });\n    })\n    .otherwise(function (error) {\n      multipleContentFailed(tile, tileset, error);\n    });\n\n  return 0;\n}\n\nfunction multipleContentFailed(tile, tileset, error) {\n  // note: The Multiple3DTileContent handles decrementing the number of pending\n  // requests if the state is LOADING.\n  if (tile._contentState === _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].PROCESSING */ .Z.PROCESSING) {\n    --tileset.statistics.numberOfTilesProcessing;\n  }\n\n  tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].FAILED */ .Z.FAILED;\n  tile._contentReadyPromise.reject(error);\n  tile._contentReadyToProcessPromise.reject(error);\n}\n\nfunction requestSingleContent(tile) {\n  // it is important to clone here. The fetchArrayBuffer() below uses\n  // throttling, but other uses of the resources do not.\n  var resource = tile._contentResource.clone();\n  var expired = tile.contentExpired;\n  if (expired) {\n    // Append a query parameter of the tile expiration date to prevent caching\n    resource.setQueryParameters({\n      expired: tile.expireDate.toString(),\n    });\n  }\n\n  var request = new _Core_Request_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z({\n    throttle: true,\n    throttleByServer: true,\n    type: _Core_RequestType_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].TILES3D */ .Z.TILES3D,\n    priorityFunction: createPriorityFunction(tile),\n    serverKey: tile._serverKey,\n  });\n\n  tile._request = request;\n  resource.request = request;\n\n  var promise = resource.fetchArrayBuffer();\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(promise)) {\n    return 1;\n  }\n\n  var previousState = tile._contentState;\n  var tileset = tile._tileset;\n  tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].LOADING */ .Z.LOADING;\n  tile._contentReadyToProcessPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].defer */ .Z.defer();\n  tile._contentReadyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].defer */ .Z.defer();\n  ++tileset.statistics.numberOfPendingRequests;\n\n  promise\n    .then(function (arrayBuffer) {\n      if (tile.isDestroyed()) {\n        // Tile is unloaded before the content finishes loading\n        singleContentFailed(tile, tileset);\n        return;\n      }\n\n      var content = makeContent(tile, arrayBuffer);\n\n      if (expired) {\n        tile.expireDate = undefined;\n      }\n\n      tile._content = content;\n      tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].PROCESSING */ .Z.PROCESSING;\n      tile._contentReadyToProcessPromise.resolve(content);\n      --tileset.statistics.numberOfPendingRequests;\n\n      return content.readyPromise.then(function (content) {\n        if (tile.isDestroyed()) {\n          // Tile is unloaded before the content finishes processing\n          singleContentFailed(tile, tileset);\n          return;\n        }\n        updateExpireDate(tile);\n\n        // Refresh style for expired content\n        tile._selectedFrame = 0;\n        tile.lastStyleTime = 0.0;\n\n        _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].now */ .Z.now(tile._loadTimestamp);\n        tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].READY */ .Z.READY;\n        tile._contentReadyPromise.resolve(content);\n      });\n    })\n    .otherwise(function (error) {\n      if (request.state === _Core_RequestState_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].CANCELLED */ .Z.CANCELLED) {\n        // Cancelled due to low priority - try again later.\n        tile._contentState = previousState;\n        --tileset.statistics.numberOfPendingRequests;\n        ++tileset.statistics.numberOfAttemptedRequests;\n        return;\n      }\n      singleContentFailed(tile, tileset, error);\n    });\n\n  return 0;\n}\n\nfunction singleContentFailed(tile, tileset, error) {\n  if (tile._contentState === _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].PROCESSING */ .Z.PROCESSING) {\n    --tileset.statistics.numberOfTilesProcessing;\n  } else {\n    --tileset.statistics.numberOfPendingRequests;\n  }\n  tile._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].FAILED */ .Z.FAILED;\n  tile._contentReadyPromise.reject(error);\n  tile._contentReadyToProcessPromise.reject(error);\n}\n\n/**\n * Given a downloaded content payload, construct a {@link Cesium3DTileContent}.\n * <p>\n * This is only used for single contents.\n * </p>\n *\n * @param {Cesium3DTile} tile The tile\n * @param {ArrayBuffer} arrayBuffer The downloaded payload containing data for the content\n * @return {Cesium3DTileContent} A content object\n * @private\n */\nfunction makeContent(tile, arrayBuffer) {\n  var preprocessed = (0,_preprocess3DTileContent_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z)(arrayBuffer);\n\n  // Vector and Geometry tile rendering do not support the skip LOD optimization.\n  var tileset = tile._tileset;\n  tileset._disableSkipLevelOfDetail =\n    tileset._disableSkipLevelOfDetail ||\n    preprocessed.contentType === _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].GEOMETRY */ .Z.GEOMETRY ||\n    preprocessed.contentType === _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].VECTOR */ .Z.VECTOR;\n\n  if (preprocessed.contentType === _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].IMPLICIT_SUBTREE */ .Z.IMPLICIT_SUBTREE) {\n    tile.hasImplicitContent = true;\n  }\n\n  if (preprocessed.contentType === _Cesium3DTileContentType_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].EXTERNAL_TILESET */ .Z.EXTERNAL_TILESET) {\n    tile.hasTilesetContent = true;\n  }\n\n  var content;\n  var contentFactory = _Cesium3DTileContentFactory_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z[preprocessed.contentType];\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(preprocessed.binaryPayload)) {\n    content = contentFactory(\n      tileset,\n      tile,\n      tile._contentResource,\n      preprocessed.binaryPayload.buffer,\n      0\n    );\n  } else {\n    // JSON formats\n    content = contentFactory(\n      tileset,\n      tile,\n      tile._contentResource,\n      preprocessed.jsonPayload\n    );\n  }\n\n  var contentHeader = tile._header.content;\n  content.groupMetadata = (0,_findGroupMetadata_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"] */ .Z)(tileset, contentHeader);\n  return content;\n}\n\n/**\n * Cancel requests for the tile\'s contents. This is called when the tile\n * goes out of view.\n *\n * @private\n */\nCesium3DTile.prototype.cancelRequests = function () {\n  if (this.hasMultipleContents) {\n    this._content.cancelRequests();\n  } else {\n    this._request.cancel();\n  }\n};\n\n/**\n * Unloads the tile\'s content.\n *\n * @private\n */\nCesium3DTile.prototype.unloadContent = function () {\n  if (\n    this.hasEmptyContent ||\n    this.hasTilesetContent ||\n    this.hasImplicitContent\n  ) {\n    return;\n  }\n\n  this._content = this._content && this._content.destroy();\n  this._contentState = _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"].UNLOADED */ .Z.UNLOADED;\n  this._contentReadyToProcessPromise = undefined;\n  this._contentReadyPromise = undefined;\n\n  this.lastStyleTime = 0.0;\n  this.clippingPlanesDirty = this._clippingPlanesState === 0;\n  this._clippingPlanesState = 0;\n\n  this._debugColorizeTiles = false;\n\n  this._debugBoundingVolume =\n    this._debugBoundingVolume && this._debugBoundingVolume.destroy();\n  this._debugContentBoundingVolume =\n    this._debugContentBoundingVolume &&\n    this._debugContentBoundingVolume.destroy();\n  this._debugViewerRequestVolume =\n    this._debugViewerRequestVolume && this._debugViewerRequestVolume.destroy();\n};\n\nvar scratchProjectedBoundingSphere = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction getBoundingVolume(tile, frameState) {\n  if (\n    frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._boundingVolume2D)\n  ) {\n    var boundingSphere = tile._boundingVolume.boundingSphere;\n    var sphere = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].projectTo2D */ .Z.projectTo2D(\n      boundingSphere,\n      frameState.mapProjection,\n      scratchProjectedBoundingSphere\n    );\n    tile._boundingVolume2D = new _TileBoundingSphere_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z(\n      sphere.center,\n      sphere.radius\n    );\n  }\n\n  return frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].SCENE3D */ .Z.SCENE3D\n    ? tile._boundingVolume2D\n    : tile._boundingVolume;\n}\n\nfunction getContentBoundingVolume(tile, frameState) {\n  if (\n    frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._contentBoundingVolume2D)\n  ) {\n    var boundingSphere = tile._contentBoundingVolume.boundingSphere;\n    var sphere = _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].projectTo2D */ .Z.projectTo2D(\n      boundingSphere,\n      frameState.mapProjection,\n      scratchProjectedBoundingSphere\n    );\n    tile._contentBoundingVolume2D = new _TileBoundingSphere_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z(\n      sphere.center,\n      sphere.radius\n    );\n  }\n  return frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].SCENE3D */ .Z.SCENE3D\n    ? tile._contentBoundingVolume2D\n    : tile._contentBoundingVolume;\n}\n\n/**\n * Determines whether the tile\'s bounding volume intersects the culling volume.\n *\n * @param {FrameState} frameState The frame state.\n * @param {Number} parentVisibilityPlaneMask The parent\'s plane mask to speed up the visibility check.\n * @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n *\n * @private\n */\nCesium3DTile.prototype.visibility = function (\n  frameState,\n  parentVisibilityPlaneMask\n) {\n  var cullingVolume = frameState.cullingVolume;\n  var boundingVolume = getBoundingVolume(this, frameState);\n\n  var tileset = this._tileset;\n  var clippingPlanes = tileset.clippingPlanes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled) {\n    var intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n      boundingVolume,\n      tileset.clippingPlanesOriginMatrix\n    );\n    this._isClipped = intersection !== _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].INSIDE */ .Z.INSIDE;\n    if (intersection === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].OUTSIDE */ .Z.OUTSIDE) {\n      return _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].MASK_OUTSIDE */ .Z.MASK_OUTSIDE;\n    }\n  }\n\n  return cullingVolume.computeVisibilityWithPlaneMask(\n    boundingVolume,\n    parentVisibilityPlaneMask\n  );\n};\n\n/**\n * Assuming the tile\'s bounding volume intersects the culling volume, determines\n * whether the tile\'s content\'s bounding volume intersects the culling volume.\n *\n * @param {FrameState} frameState The frame state.\n * @returns {Intersect} The result of the intersection: the tile\'s content is completely outside, completely inside, or intersecting the culling volume.\n *\n * @private\n */\nCesium3DTile.prototype.contentVisibility = function (frameState) {\n  // Assumes the tile\'s bounding volume intersects the culling volume already, so\n  // just return Intersect.INSIDE if there is no content bounding volume.\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._contentBoundingVolume)) {\n    return _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].INSIDE */ .Z.INSIDE;\n  }\n\n  if (this._visibilityPlaneMask === _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].MASK_INSIDE */ .Z.MASK_INSIDE) {\n    // The tile\'s bounding volume is completely inside the culling volume so\n    // the content bounding volume must also be inside.\n    return _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].INSIDE */ .Z.INSIDE;\n  }\n\n  // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n  // tile\'s (not the content\'s) bounding volume intersects the culling volume?\n  var cullingVolume = frameState.cullingVolume;\n  var boundingVolume = getContentBoundingVolume(this, frameState);\n\n  var tileset = this._tileset;\n  var clippingPlanes = tileset.clippingPlanes;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled) {\n    var intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n      boundingVolume,\n      tileset.clippingPlanesOriginMatrix\n    );\n    this._isClipped = intersection !== _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].INSIDE */ .Z.INSIDE;\n    if (intersection === _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].OUTSIDE */ .Z.OUTSIDE) {\n      return _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].OUTSIDE */ .Z.OUTSIDE;\n    }\n  }\n\n  return cullingVolume.computeVisibility(boundingVolume);\n};\n\n/**\n * Computes the (potentially approximate) distance from the closest point of the tile\'s bounding volume to the camera.\n *\n * @param {FrameState} frameState The frame state.\n * @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n *\n * @private\n */\nCesium3DTile.prototype.distanceToTile = function (frameState) {\n  var boundingVolume = getBoundingVolume(this, frameState);\n  return boundingVolume.distanceToCamera(frameState);\n};\n\nvar scratchToTileCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n/**\n * Computes the distance from the center of the tile\'s bounding volume to the camera\'s plane defined by its position and view direction.\n *\n * @param {FrameState} frameState The frame state.\n * @returns {Number} The distance, in meters.\n *\n * @private\n */\nCesium3DTile.prototype.distanceToTileCenter = function (frameState) {\n  var tileBoundingVolume = getBoundingVolume(this, frameState);\n  var boundingVolume = tileBoundingVolume.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n  var toCenter = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(\n    boundingVolume.center,\n    frameState.camera.positionWC,\n    scratchToTileCenter\n  );\n  return _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(frameState.camera.directionWC, toCenter);\n};\n\n/**\n * Checks if the camera is inside the viewer request volume.\n *\n * @param {FrameState} frameState The frame state.\n * @returns {Boolean} Whether the camera is inside the volume.\n *\n * @private\n */\nCesium3DTile.prototype.insideViewerRequestVolume = function (frameState) {\n  var viewerRequestVolume = this._viewerRequestVolume;\n  return (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(viewerRequestVolume) ||\n    viewerRequestVolume.distanceToCamera(frameState) === 0.0\n  );\n};\n\nvar scratchMatrix = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\nvar scratchScale = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchHalfAxes = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\nvar scratchCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchRectangle = new _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\nvar scratchOrientedBoundingBox = new _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\nvar scratchTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\nfunction createBox(box, transform, result) {\n  var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(box[0], box[1], box[2], scratchCenter);\n  var halfAxes = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].fromArray */ .Z.fromArray(box, 3, scratchHalfAxes);\n\n  // Find the transformed center and halfAxes\n  center = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(transform, center, center);\n  var rotationScale = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].getMatrix3 */ .Z.getMatrix3(transform, scratchMatrix);\n  halfAxes = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiply */ .Z.multiply(rotationScale, halfAxes, halfAxes);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(result)) {\n    result.update(center, halfAxes);\n    return result;\n  }\n  return new _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"] */ .Z(center, halfAxes);\n}\n\nfunction createBoxFromTransformedRegion(\n  region,\n  transform,\n  initialTransform,\n  result\n) {\n  var rectangle = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].unpack */ .Z.unpack(region, 0, scratchRectangle);\n  var minimumHeight = region[4];\n  var maximumHeight = region[5];\n\n  var orientedBoundingBox = _Core_OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].fromRectangle */ .Z.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].WGS84 */ .Z.WGS84,\n    scratchOrientedBoundingBox\n  );\n  var center = orientedBoundingBox.center;\n  var halfAxes = orientedBoundingBox.halfAxes;\n\n  // A region bounding volume is not transformed by the transform in the tileset JSON,\n  // but may be transformed by additional transforms applied in Cesium.\n  // This is why the transform is calculated as the difference between the initial transform and the current transform.\n  transform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiplyTransformation */ .Z.multiplyTransformation(\n    transform,\n    _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].inverseTransformation */ .Z.inverseTransformation(initialTransform, scratchTransform),\n    scratchTransform\n  );\n  center = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(transform, center, center);\n  var rotationScale = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].getMatrix3 */ .Z.getMatrix3(transform, scratchMatrix);\n  halfAxes = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiply */ .Z.multiply(rotationScale, halfAxes, halfAxes);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(result) && result instanceof _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"] */ .Z) {\n    result.update(center, halfAxes);\n    return result;\n  }\n\n  return new _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"] */ .Z(center, halfAxes);\n}\n\nfunction createRegion(region, transform, initialTransform, result) {\n  if (\n    !_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(transform, initialTransform, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON8 */ .Z.EPSILON8)\n  ) {\n    return createBoxFromTransformedRegion(\n      region,\n      transform,\n      initialTransform,\n      result\n    );\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(result)) {\n    return result;\n  }\n\n  var rectangleRegion = _Core_Rectangle_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].unpack */ .Z.unpack(region, 0, scratchRectangle);\n\n  return new _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z({\n    rectangle: rectangleRegion,\n    minimumHeight: region[4],\n    maximumHeight: region[5],\n  });\n}\n\nfunction createSphere(sphere, transform, result) {\n  var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n    sphere[0],\n    sphere[1],\n    sphere[2],\n    scratchCenter\n  );\n  var radius = sphere[3];\n\n  // Find the transformed center and radius\n  center = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(transform, center, center);\n  var scale = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].getScale */ .Z.getScale(transform, scratchScale);\n  var uniformScale = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].maximumComponent */ .Z.maximumComponent(scale);\n  radius *= uniformScale;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(result)) {\n    result.update(center, radius);\n    return result;\n  }\n  return new _TileBoundingSphere_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z(center, radius);\n}\n\n/**\n * Create a bounding volume from the tile\'s bounding volume header.\n *\n * @param {Object} boundingVolumeHeader The tile\'s bounding volume header.\n * @param {Matrix4} transform The transform to apply to the bounding volume.\n * @param {TileBoundingVolume} [result] The object onto which to store the result.\n *\n * @returns {TileBoundingVolume} The modified result parameter or a new TileBoundingVolume instance if none was provided.\n *\n * @private\n */\nCesium3DTile.prototype.createBoundingVolume = function (\n  boundingVolumeHeader,\n  transform,\n  result\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(boundingVolumeHeader)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z("boundingVolume must be defined");\n  }\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"] */ .Z)(boundingVolumeHeader, "3DTILES_bounding_volume_S2")) {\n    return new _TileBoundingS2Cell_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z(\n      boundingVolumeHeader.extensions["3DTILES_bounding_volume_S2"]\n    );\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(boundingVolumeHeader.box)) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(boundingVolumeHeader.region)) {\n    return createRegion(\n      boundingVolumeHeader.region,\n      transform,\n      this._initialTransform,\n      result\n    );\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(boundingVolumeHeader.sphere)) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n  throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z(\n    "boundingVolume must contain a sphere, region, or box"\n  );\n};\n\n/**\n * Update the tile\'s transform. The transform is applied to the tile\'s bounding volumes.\n *\n * @private\n */\nCesium3DTile.prototype.updateTransform = function (parentTransform) {\n  parentTransform = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(parentTransform, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY);\n  var computedTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].multiply */ .Z.multiply(\n    parentTransform,\n    this.transform,\n    scratchTransform\n  );\n  var transformChanged = !_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(\n    computedTransform,\n    this.computedTransform\n  );\n\n  if (!transformChanged) {\n    return;\n  }\n\n  _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(computedTransform, this.computedTransform);\n\n  // Update the bounding volumes\n  var header = this._header;\n  var content = this._header.content;\n  this._boundingVolume = this.createBoundingVolume(\n    header.boundingVolume,\n    this.computedTransform,\n    this._boundingVolume\n  );\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._contentBoundingVolume)) {\n    this._contentBoundingVolume = this.createBoundingVolume(\n      content.boundingVolume,\n      this.computedTransform,\n      this._contentBoundingVolume\n    );\n  }\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(this._viewerRequestVolume)) {\n    this._viewerRequestVolume = this.createBoundingVolume(\n      header.viewerRequestVolume,\n      this.computedTransform,\n      this._viewerRequestVolume\n    );\n  }\n\n  this.updateGeometricErrorScale();\n\n  // Destroy the debug bounding volumes. They will be generated fresh.\n  this._debugBoundingVolume =\n    this._debugBoundingVolume && this._debugBoundingVolume.destroy();\n  this._debugContentBoundingVolume =\n    this._debugContentBoundingVolume &&\n    this._debugContentBoundingVolume.destroy();\n  this._debugViewerRequestVolume =\n    this._debugViewerRequestVolume && this._debugViewerRequestVolume.destroy();\n};\n\nCesium3DTile.prototype.updateGeometricErrorScale = function () {\n  var scale = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].getScale */ .Z.getScale(this.computedTransform, scratchScale);\n  var uniformScale = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].maximumComponent */ .Z.maximumComponent(scale);\n  this.geometricError = this._geometricError * uniformScale;\n};\n\nfunction applyDebugSettings(tile, tileset, frameState, passOptions) {\n  if (!passOptions.isRender) {\n    return;\n  }\n\n  var hasContentBoundingVolume =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._header.content) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._header.content.boundingVolume);\n  var empty =\n    tile.hasEmptyContent || tile.hasTilesetContent || tile.hasImplicitContent;\n\n  var showVolume =\n    tileset.debugShowBoundingVolume ||\n    (tileset.debugShowContentBoundingVolume && !hasContentBoundingVolume);\n  if (showVolume) {\n    var color;\n    if (!tile._finalResolution) {\n      color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].YELLOW */ .Z.YELLOW;\n    } else if (empty) {\n      color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].DARKGRAY */ .Z.DARKGRAY;\n    } else {\n      color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].WHITE */ .Z.WHITE;\n    }\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._debugBoundingVolume)) {\n      tile._debugBoundingVolume = tile._boundingVolume.createDebugVolume(color);\n    }\n    tile._debugBoundingVolume.update(frameState);\n    var attributes = tile._debugBoundingVolume.getGeometryInstanceAttributes(\n      "outline"\n    );\n    attributes.color = _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].toValue */ .Z.toValue(\n      color,\n      attributes.color\n    );\n  } else if (!showVolume && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._debugBoundingVolume)) {\n    tile._debugBoundingVolume = tile._debugBoundingVolume.destroy();\n  }\n\n  if (tileset.debugShowContentBoundingVolume && hasContentBoundingVolume) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._debugContentBoundingVolume)) {\n      tile._debugContentBoundingVolume = tile._contentBoundingVolume.createDebugVolume(\n        _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].BLUE */ .Z.BLUE\n      );\n    }\n    tile._debugContentBoundingVolume.update(frameState);\n  } else if (\n    !tileset.debugShowContentBoundingVolume &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._debugContentBoundingVolume)\n  ) {\n    tile._debugContentBoundingVolume = tile._debugContentBoundingVolume.destroy();\n  }\n\n  if (\n    tileset.debugShowViewerRequestVolume &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._viewerRequestVolume)\n  ) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._debugViewerRequestVolume)) {\n      tile._debugViewerRequestVolume = tile._viewerRequestVolume.createDebugVolume(\n        _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].YELLOW */ .Z.YELLOW\n      );\n    }\n    tile._debugViewerRequestVolume.update(frameState);\n  } else if (\n    !tileset.debugShowViewerRequestVolume &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tile._debugViewerRequestVolume)\n  ) {\n    tile._debugViewerRequestVolume = tile._debugViewerRequestVolume.destroy();\n  }\n\n  var debugColorizeTilesOn =\n    (tileset.debugColorizeTiles && !tile._debugColorizeTiles) ||\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(tileset._heatmap.tilePropertyName);\n  var debugColorizeTilesOff =\n    !tileset.debugColorizeTiles && tile._debugColorizeTiles;\n\n  if (debugColorizeTilesOn) {\n    tileset._heatmap.colorize(tile, frameState); // Skipped if tileset._heatmap.tilePropertyName is undefined\n    tile._debugColorizeTiles = true;\n    tile.color = tile._debugColor;\n  } else if (debugColorizeTilesOff) {\n    tile._debugColorizeTiles = false;\n    tile.color = _Core_Color_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].WHITE */ .Z.WHITE;\n  }\n\n  if (tile._colorDirty) {\n    tile._colorDirty = false;\n    tile._content.applyDebugSettings(true, tile._color);\n  }\n\n  if (debugColorizeTilesOff) {\n    tileset.makeStyleDirty(); // Re-apply style now that colorize is switched off\n  }\n}\n\nfunction updateContent(tile, tileset, frameState) {\n  var content = tile._content;\n  var expiredContent = tile._expiredContent;\n\n  // expired content is not supported for 3DTILES_multiple_contents\n  if (!tile.hasMultipleContents && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(expiredContent)) {\n    if (!tile.contentReady) {\n      // Render the expired content while the content loads\n      expiredContent.update(tileset, frameState);\n      return;\n    }\n\n    // New content is ready, destroy expired content\n    tile._expiredContent.destroy();\n    tile._expiredContent = undefined;\n  }\n\n  content.update(tileset, frameState);\n}\n\nfunction updateClippingPlanes(tile, tileset) {\n  // Compute and compare ClippingPlanes state:\n  // - enabled-ness - are clipping planes enabled? is this tile clipped?\n  // - clipping plane count\n  // - clipping function (union v. intersection)\n  var clippingPlanes = tileset.clippingPlanes;\n  var currentClippingPlanesState = 0;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z)(clippingPlanes) && tile._isClipped && clippingPlanes.enabled) {\n    currentClippingPlanesState = clippingPlanes.clippingPlanesState;\n  }\n  // If clippingPlaneState for tile changed, mark clippingPlanesDirty so content can update\n  if (currentClippingPlanesState !== tile._clippingPlanesState) {\n    tile._clippingPlanesState = currentClippingPlanesState;\n    tile.clippingPlanesDirty = true;\n  }\n}\n\n/**\n * Get the draw commands needed to render this tile.\n *\n * @private\n */\nCesium3DTile.prototype.update = function (tileset, frameState, passOptions) {\n  var commandStart = frameState.commandList.length;\n\n  updateClippingPlanes(this, tileset);\n  applyDebugSettings(this, tileset, frameState, passOptions);\n  updateContent(this, tileset, frameState);\n\n  var commandEnd = frameState.commandList.length;\n  var commandsLength = commandEnd - commandStart;\n  this._commandsLength = commandsLength;\n\n  for (var i = 0; i < commandsLength; ++i) {\n    var command = frameState.commandList[commandStart + i];\n    var translucent = command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT;\n    command.depthForTranslucentClassification = translucent;\n  }\n\n  this.clippingPlanesDirty = false; // reset after content update\n};\n\nvar scratchCommandList = [];\n\n/**\n * Processes the tile\'s content, e.g., create WebGL resources, to move from the PROCESSING to READY state.\n *\n * @param {Cesium3DTileset} tileset The tileset containing this tile.\n * @param {FrameState} frameState The frame state.\n *\n * @private\n */\nCesium3DTile.prototype.process = function (tileset, frameState) {\n  var savedCommandList = frameState.commandList;\n  frameState.commandList = scratchCommandList;\n\n  this._content.update(tileset, frameState);\n\n  scratchCommandList.length = 0;\n  frameState.commandList = savedCommandList;\n};\n\nfunction isolateDigits(normalizedValue, numberOfDigits, leftShift) {\n  var scaled = normalizedValue * Math.pow(10, numberOfDigits);\n  var integer = parseInt(scaled);\n  return integer * Math.pow(10, leftShift);\n}\n\nfunction priorityNormalizeAndClamp(value, minimum, maximum) {\n  return Math.max(\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].normalize */ .Z.normalize(value, minimum, maximum) - _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON7 */ .Z.EPSILON7,\n    0.0\n  ); // Subtract epsilon since we only want decimal digits present in the output.\n}\n\n/**\n * Sets the priority of the tile based on distance and depth\n * @private\n */\nCesium3DTile.prototype.updatePriority = function () {\n  var tileset = this.tileset;\n  var preferLeaves = tileset.preferLeaves;\n  var minimumPriority = tileset._minimumPriority;\n  var maximumPriority = tileset._maximumPriority;\n\n  // Combine priority systems together by mapping them into a base 10 number where each priority controls a specific set of digits in the number.\n  // For number priorities, map them to a 0.xxxxx number then left shift it up into a set number of digits before the decimal point. Chop of the fractional part then left shift again into the position it needs to go.\n  // For blending number priorities, normalize them to 0-1 and interpolate to get a combined 0-1 number, then proceed as normal.\n  // Booleans can just be 0 or 10^leftshift.\n  // Think of digits as penalties since smaller numbers are higher priority. If a tile has some large quantity or has a flag raised it\'s (usually) penalized for it, expressed as a higher number for the digit.\n  // Priority number format: preloadFlightDigits(1) | foveatedDeferDigits(1) | foveatedDigits(4) | preloadProgressiveResolutionDigits(1) | preferredSortingDigits(4) . depthDigits(the decimal digits)\n  // Certain flags like preferLeaves will flip / turn off certain digits to get desired load order.\n\n  // Setup leftShifts, digit counts, and scales (for booleans)\n  var digitsForANumber = 4;\n  var digitsForABoolean = 1;\n\n  var preferredSortingLeftShift = 0;\n  var preferredSortingDigitsCount = digitsForANumber;\n\n  var foveatedLeftShift =\n    preferredSortingLeftShift + preferredSortingDigitsCount;\n  var foveatedDigitsCount = digitsForANumber;\n\n  var preloadProgressiveResolutionLeftShift =\n    foveatedLeftShift + foveatedDigitsCount;\n  var preloadProgressiveResolutionDigitsCount = digitsForABoolean;\n  var preloadProgressiveResolutionScale = Math.pow(\n    10,\n    preloadProgressiveResolutionLeftShift\n  );\n\n  var foveatedDeferLeftShift =\n    preloadProgressiveResolutionLeftShift +\n    preloadProgressiveResolutionDigitsCount;\n  var foveatedDeferDigitsCount = digitsForABoolean;\n  var foveatedDeferScale = Math.pow(10, foveatedDeferLeftShift);\n\n  var preloadFlightLeftShift =\n    foveatedDeferLeftShift + foveatedDeferDigitsCount;\n  var preloadFlightScale = Math.pow(10, preloadFlightLeftShift);\n\n  // Compute the digits for each priority\n  var depthDigits = priorityNormalizeAndClamp(\n    this._depth,\n    minimumPriority.depth,\n    maximumPriority.depth\n  );\n  depthDigits = preferLeaves ? 1.0 - depthDigits : depthDigits;\n\n  // Map 0-1 then convert to digit. Include a distance sort when doing non-skipLOD and replacement refinement, helps things like non-skipLOD photogrammetry\n  var useDistance =\n    !tileset._skipLevelOfDetail && this.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].REPLACE */ .Z.REPLACE;\n  var normalizedPreferredSorting = useDistance\n    ? priorityNormalizeAndClamp(\n        this._priorityHolder._distanceToCamera,\n        minimumPriority.distance,\n        maximumPriority.distance\n      )\n    : priorityNormalizeAndClamp(\n        this._priorityReverseScreenSpaceError,\n        minimumPriority.reverseScreenSpaceError,\n        maximumPriority.reverseScreenSpaceError\n      );\n  var preferredSortingDigits = isolateDigits(\n    normalizedPreferredSorting,\n    preferredSortingDigitsCount,\n    preferredSortingLeftShift\n  );\n\n  var preloadProgressiveResolutionDigits = this._priorityProgressiveResolution\n    ? 0\n    : preloadProgressiveResolutionScale;\n\n  var normalizedFoveatedFactor = priorityNormalizeAndClamp(\n    this._priorityHolder._foveatedFactor,\n    minimumPriority.foveatedFactor,\n    maximumPriority.foveatedFactor\n  );\n  var foveatedDigits = isolateDigits(\n    normalizedFoveatedFactor,\n    foveatedDigitsCount,\n    foveatedLeftShift\n  );\n\n  var foveatedDeferDigits = this.priorityDeferred ? foveatedDeferScale : 0;\n\n  var preloadFlightDigits =\n    tileset._pass === _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].PRELOAD_FLIGHT */ .Z.PRELOAD_FLIGHT ? 0 : preloadFlightScale;\n\n  // Get the final base 10 number\n  this._priority =\n    depthDigits +\n    preferredSortingDigits +\n    preloadProgressiveResolutionDigits +\n    foveatedDigits +\n    foveatedDeferDigits +\n    preloadFlightDigits;\n};\n\n/**\n * @private\n */\nCesium3DTile.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * @private\n */\nCesium3DTile.prototype.destroy = function () {\n  // For the interval between new content being requested and downloaded, expiredContent === content, so don\'t destroy twice\n  this._content = this._content && this._content.destroy();\n  this._expiredContent =\n    this._expiredContent &&\n    !this._expiredContent.isDestroyed() &&\n    this._expiredContent.destroy();\n  this._debugBoundingVolume =\n    this._debugBoundingVolume && this._debugBoundingVolume.destroy();\n  this._debugContentBoundingVolume =\n    this._debugContentBoundingVolume &&\n    this._debugContentBoundingVolume.destroy();\n  this._debugViewerRequestVolume =\n    this._debugViewerRequestVolume && this._debugViewerRequestVolume.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTile);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDJFQUFhO0FBQ3RCO0FBQ0EseURBQWUsWUFBWSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0Nlc2l1bTNEVGlsZS5qcz82MTZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3VuZGluZ1NwaGVyZSBmcm9tIFwiLi4vQ29yZS9Cb3VuZGluZ1NwaGVyZS5qc1wiO1xuaW1wb3J0IENhcnRlc2lhbjMgZnJvbSBcIi4uL0NvcmUvQ2FydGVzaWFuMy5qc1wiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9Db3JlL0NvbG9yLmpzXCI7XG5pbXBvcnQgQ29sb3JHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlIGZyb20gXCIuLi9Db3JlL0NvbG9yR2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS5qc1wiO1xuaW1wb3J0IEN1bGxpbmdWb2x1bWUgZnJvbSBcIi4uL0NvcmUvQ3VsbGluZ1ZvbHVtZS5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vQ29yZS9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBkZXByZWNhdGlvbldhcm5pbmcgZnJvbSBcIi4uL0NvcmUvZGVwcmVjYXRpb25XYXJuaW5nLmpzXCI7XG5pbXBvcnQgZGVzdHJveU9iamVjdCBmcm9tIFwiLi4vQ29yZS9kZXN0cm95T2JqZWN0LmpzXCI7XG5pbXBvcnQgRWxsaXBzb2lkIGZyb20gXCIuLi9Db3JlL0VsbGlwc29pZC5qc1wiO1xuaW1wb3J0IEludGVyc2VjdCBmcm9tIFwiLi4vQ29yZS9JbnRlcnNlY3QuanNcIjtcbmltcG9ydCBKdWxpYW5EYXRlIGZyb20gXCIuLi9Db3JlL0p1bGlhbkRhdGUuanNcIjtcbmltcG9ydCBDZXNpdW1NYXRoIGZyb20gXCIuLi9Db3JlL01hdGguanNcIjtcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuLi9Db3JlL01hdHJpeDMuanNcIjtcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9Db3JlL01hdHJpeDQuanNcIjtcbmltcG9ydCBPcmllbnRlZEJvdW5kaW5nQm94IGZyb20gXCIuLi9Db3JlL09yaWVudGVkQm91bmRpbmdCb3guanNcIjtcbmltcG9ydCBPcnRob2dyYXBoaWNGcnVzdHVtIGZyb20gXCIuLi9Db3JlL09ydGhvZ3JhcGhpY0ZydXN0dW0uanNcIjtcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSBcIi4uL0NvcmUvUmVjdGFuZ2xlLmpzXCI7XG5pbXBvcnQgUmVxdWVzdCBmcm9tIFwiLi4vQ29yZS9SZXF1ZXN0LmpzXCI7XG5pbXBvcnQgUmVxdWVzdFNjaGVkdWxlciBmcm9tIFwiLi4vQ29yZS9SZXF1ZXN0U2NoZWR1bGVyLmpzXCI7XG5pbXBvcnQgUmVxdWVzdFN0YXRlIGZyb20gXCIuLi9Db3JlL1JlcXVlc3RTdGF0ZS5qc1wiO1xuaW1wb3J0IFJlcXVlc3RUeXBlIGZyb20gXCIuLi9Db3JlL1JlcXVlc3RUeXBlLmpzXCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4uL0NvcmUvUmVzb3VyY2UuanNcIjtcbmltcG9ydCBSdW50aW1lRXJyb3IgZnJvbSBcIi4uL0NvcmUvUnVudGltZUVycm9yLmpzXCI7XG5pbXBvcnQgd2hlbiBmcm9tIFwiLi4vVGhpcmRQYXJ0eS93aGVuLmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlQ29udGVudEZhY3RvcnkgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlQ29udGVudEZhY3RvcnkuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlQ29udGVudFR5cGUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlQ29udGVudFR5cGUuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVPcHRpbWl6YXRpb25IaW50IGZyb20gXCIuL0Nlc2l1bTNEVGlsZU9wdGltaXphdGlvbkhpbnQuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVQYXNzIGZyb20gXCIuL0Nlc2l1bTNEVGlsZVBhc3MuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVSZWZpbmUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlUmVmaW5lLmpzXCI7XG5pbXBvcnQgRW1wdHkzRFRpbGVDb250ZW50IGZyb20gXCIuL0VtcHR5M0RUaWxlQ29udGVudC5qc1wiO1xuaW1wb3J0IGZpbmRHcm91cE1ldGFkYXRhIGZyb20gXCIuL2ZpbmRHcm91cE1ldGFkYXRhLmpzXCI7XG5pbXBvcnQgaGFzRXh0ZW5zaW9uIGZyb20gXCIuL2hhc0V4dGVuc2lvbi5qc1wiO1xuaW1wb3J0IE11bHRpcGxlM0RUaWxlQ29udGVudCBmcm9tIFwiLi9NdWx0aXBsZTNEVGlsZUNvbnRlbnQuanNcIjtcbmltcG9ydCBwcmVwcm9jZXNzM0RUaWxlQ29udGVudCBmcm9tIFwiLi9wcmVwcm9jZXNzM0RUaWxlQ29udGVudC5qc1wiO1xuaW1wb3J0IFNjZW5lTW9kZSBmcm9tIFwiLi9TY2VuZU1vZGUuanNcIjtcbmltcG9ydCBUaWxlQm91bmRpbmdSZWdpb24gZnJvbSBcIi4vVGlsZUJvdW5kaW5nUmVnaW9uLmpzXCI7XG5pbXBvcnQgVGlsZUJvdW5kaW5nUzJDZWxsIGZyb20gXCIuL1RpbGVCb3VuZGluZ1MyQ2VsbC5qc1wiO1xuaW1wb3J0IFRpbGVCb3VuZGluZ1NwaGVyZSBmcm9tIFwiLi9UaWxlQm91bmRpbmdTcGhlcmUuanNcIjtcbmltcG9ydCBUaWxlTWV0YWRhdGEgZnJvbSBcIi4vVGlsZU1ldGFkYXRhLmpzXCI7XG5pbXBvcnQgVGlsZU9yaWVudGVkQm91bmRpbmdCb3ggZnJvbSBcIi4vVGlsZU9yaWVudGVkQm91bmRpbmdCb3guanNcIjtcbmltcG9ydCBQYXNzIGZyb20gXCIuLi9SZW5kZXJlci9QYXNzLmpzXCI7XG5cbi8qKlxuICogQSB0aWxlIGluIGEge0BsaW5rIENlc2l1bTNEVGlsZXNldH0uICBXaGVuIGEgdGlsZSBpcyBmaXJzdCBjcmVhdGVkLCBpdHMgY29udGVudCBpcyBub3QgbG9hZGVkO1xuICogdGhlIGNvbnRlbnQgaXMgbG9hZGVkIG9uLWRlbWFuZCB3aGVuIG5lZWRlZCBiYXNlZCBvbiB0aGUgdmlldy5cbiAqIDxwPlxuICogRG8gbm90IGNvbnN0cnVjdCB0aGlzIGRpcmVjdGx5LCBpbnN0ZWFkIGFjY2VzcyB0aWxlcyB0aHJvdWdoIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjdGlsZVZpc2libGV9LlxuICogPC9wPlxuICpcbiAqIEBhbGlhcyBDZXNpdW0zRFRpbGVcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDZXNpdW0zRFRpbGUodGlsZXNldCwgYmFzZVJlc291cmNlLCBoZWFkZXIsIHBhcmVudCkge1xuICB0aGlzLl90aWxlc2V0ID0gdGlsZXNldDtcbiAgdGhpcy5faGVhZGVyID0gaGVhZGVyO1xuICB2YXIgY29udGVudEhlYWRlciA9IGhlYWRlci5jb250ZW50O1xuXG4gIC8qKlxuICAgKiBUaGUgbG9jYWwgdHJhbnNmb3JtIG9mIHRoaXMgdGlsZS5cbiAgICogQHR5cGUge01hdHJpeDR9XG4gICAqL1xuICB0aGlzLnRyYW5zZm9ybSA9IGRlZmluZWQoaGVhZGVyLnRyYW5zZm9ybSlcbiAgICA/IE1hdHJpeDQudW5wYWNrKGhlYWRlci50cmFuc2Zvcm0pXG4gICAgOiBNYXRyaXg0LmNsb25lKE1hdHJpeDQuSURFTlRJVFkpO1xuXG4gIHZhciBwYXJlbnRUcmFuc2Zvcm0gPSBkZWZpbmVkKHBhcmVudClcbiAgICA/IHBhcmVudC5jb21wdXRlZFRyYW5zZm9ybVxuICAgIDogdGlsZXNldC5tb2RlbE1hdHJpeDtcbiAgdmFyIGNvbXB1dGVkVHJhbnNmb3JtID0gTWF0cml4NC5tdWx0aXBseShcbiAgICBwYXJlbnRUcmFuc2Zvcm0sXG4gICAgdGhpcy50cmFuc2Zvcm0sXG4gICAgbmV3IE1hdHJpeDQoKVxuICApO1xuXG4gIHZhciBwYXJlbnRJbml0aWFsVHJhbnNmb3JtID0gZGVmaW5lZChwYXJlbnQpXG4gICAgPyBwYXJlbnQuX2luaXRpYWxUcmFuc2Zvcm1cbiAgICA6IE1hdHJpeDQuSURFTlRJVFk7XG4gIHRoaXMuX2luaXRpYWxUcmFuc2Zvcm0gPSBNYXRyaXg0Lm11bHRpcGx5KFxuICAgIHBhcmVudEluaXRpYWxUcmFuc2Zvcm0sXG4gICAgdGhpcy50cmFuc2Zvcm0sXG4gICAgbmV3IE1hdHJpeDQoKVxuICApO1xuXG4gIC8qKlxuICAgKiBUaGUgZmluYWwgY29tcHV0ZWQgdHJhbnNmb3JtIG9mIHRoaXMgdGlsZS5cbiAgICogQHR5cGUge01hdHJpeDR9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdGhpcy5jb21wdXRlZFRyYW5zZm9ybSA9IGNvbXB1dGVkVHJhbnNmb3JtO1xuXG4gIHRoaXMuX2JvdW5kaW5nVm9sdW1lID0gdGhpcy5jcmVhdGVCb3VuZGluZ1ZvbHVtZShcbiAgICBoZWFkZXIuYm91bmRpbmdWb2x1bWUsXG4gICAgY29tcHV0ZWRUcmFuc2Zvcm1cbiAgKTtcbiAgdGhpcy5fYm91bmRpbmdWb2x1bWUyRCA9IHVuZGVmaW5lZDtcblxuICB2YXIgY29udGVudEJvdW5kaW5nVm9sdW1lO1xuXG4gIGlmIChkZWZpbmVkKGNvbnRlbnRIZWFkZXIpICYmIGRlZmluZWQoY29udGVudEhlYWRlci5ib3VuZGluZ1ZvbHVtZSkpIHtcbiAgICAvLyBOb24tbGVhZiB0aWxlcyBtYXkgaGF2ZSBhIGNvbnRlbnQgYm91bmRpbmctdm9sdW1lLCB3aGljaCBpcyBhIHRpZ2h0LWZpdCBib3VuZGluZyB2b2x1bWVcbiAgICAvLyBhcm91bmQgb25seSB0aGUgZmVhdHVyZXMgaW4gdGhlIHRpbGUuICBUaGlzIGJveCBpcyB1c2VmdWwgZm9yIGN1bGxpbmcgZm9yIHJlbmRlcmluZyxcbiAgICAvLyBidXQgbm90IGZvciBjdWxsaW5nIGZvciB0cmF2ZXJzaW5nIHRoZSB0cmVlIHNpbmNlIGl0IGRvZXMgbm90IGd1YXJhbnRlZSBzcGF0aWFsIGNvaGVyZW5jZSwgaS5lLixcbiAgICAvLyBzaW5jZSBpdCBvbmx5IGJvdW5kcyBmZWF0dXJlcyBpbiB0aGUgdGlsZSwgbm90IHRoZSBlbnRpcmUgdGlsZSwgY2hpbGRyZW4gbWF5IGJlXG4gICAgLy8gb3V0c2lkZSBvZiB0aGlzIGJveC5cbiAgICBjb250ZW50Qm91bmRpbmdWb2x1bWUgPSB0aGlzLmNyZWF0ZUJvdW5kaW5nVm9sdW1lKFxuICAgICAgY29udGVudEhlYWRlci5ib3VuZGluZ1ZvbHVtZSxcbiAgICAgIGNvbXB1dGVkVHJhbnNmb3JtXG4gICAgKTtcbiAgfVxuICB0aGlzLl9jb250ZW50Qm91bmRpbmdWb2x1bWUgPSBjb250ZW50Qm91bmRpbmdWb2x1bWU7XG4gIHRoaXMuX2NvbnRlbnRCb3VuZGluZ1ZvbHVtZTJEID0gdW5kZWZpbmVkO1xuXG4gIHZhciB2aWV3ZXJSZXF1ZXN0Vm9sdW1lO1xuICBpZiAoZGVmaW5lZChoZWFkZXIudmlld2VyUmVxdWVzdFZvbHVtZSkpIHtcbiAgICB2aWV3ZXJSZXF1ZXN0Vm9sdW1lID0gdGhpcy5jcmVhdGVCb3VuZGluZ1ZvbHVtZShcbiAgICAgIGhlYWRlci52aWV3ZXJSZXF1ZXN0Vm9sdW1lLFxuICAgICAgY29tcHV0ZWRUcmFuc2Zvcm1cbiAgICApO1xuICB9XG4gIHRoaXMuX3ZpZXdlclJlcXVlc3RWb2x1bWUgPSB2aWV3ZXJSZXF1ZXN0Vm9sdW1lO1xuXG4gIC8qKlxuICAgKiBUaGUgZXJyb3IsIGluIG1ldGVycywgaW50cm9kdWNlZCBpZiB0aGlzIHRpbGUgaXMgcmVuZGVyZWQgYW5kIGl0cyBjaGlsZHJlbiBhcmUgbm90LlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gY29tcHV0ZSBzY3JlZW4gc3BhY2UgZXJyb3IsIGkuZS4sIHRoZSBlcnJvciBtZWFzdXJlZCBpbiBwaXhlbHMuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdGhpcy5nZW9tZXRyaWNFcnJvciA9IGhlYWRlci5nZW9tZXRyaWNFcnJvcjtcbiAgdGhpcy5fZ2VvbWV0cmljRXJyb3IgPSBoZWFkZXIuZ2VvbWV0cmljRXJyb3I7XG5cbiAgaWYgKCFkZWZpbmVkKHRoaXMuX2dlb21ldHJpY0Vycm9yKSkge1xuICAgIHRoaXMuX2dlb21ldHJpY0Vycm9yID0gZGVmaW5lZChwYXJlbnQpXG4gICAgICA/IHBhcmVudC5nZW9tZXRyaWNFcnJvclxuICAgICAgOiB0aWxlc2V0Ll9nZW9tZXRyaWNFcnJvcjtcbiAgICBDZXNpdW0zRFRpbGUuX2RlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgIFwiZ2VvbWV0cmljRXJyb3JVbmRlZmluZWRcIixcbiAgICAgIFwiUmVxdWlyZWQgcHJvcGVydHkgZ2VvbWV0cmljRXJyb3IgaXMgdW5kZWZpbmVkIGZvciB0aGlzIHRpbGUuIFVzaW5nIHBhcmVudCdzIGdlb21ldHJpYyBlcnJvciBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIHRoaXMudXBkYXRlR2VvbWV0cmljRXJyb3JTY2FsZSgpO1xuXG4gIHZhciByZWZpbmU7XG4gIGlmIChkZWZpbmVkKGhlYWRlci5yZWZpbmUpKSB7XG4gICAgaWYgKGhlYWRlci5yZWZpbmUgPT09IFwicmVwbGFjZVwiIHx8IGhlYWRlci5yZWZpbmUgPT09IFwiYWRkXCIpIHtcbiAgICAgIENlc2l1bTNEVGlsZS5fZGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgICBcImxvd2VyY2FzZS1yZWZpbmVcIixcbiAgICAgICAgJ1RoaXMgdGlsZSB1c2VzIGEgbG93ZXJjYXNlIHJlZmluZSBcIicgK1xuICAgICAgICAgIGhlYWRlci5yZWZpbmUgK1xuICAgICAgICAgICdcIi4gSW5zdGVhZCB1c2UgXCInICtcbiAgICAgICAgICBoZWFkZXIucmVmaW5lLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgICAgICdcIi4nXG4gICAgICApO1xuICAgIH1cbiAgICByZWZpbmUgPVxuICAgICAgaGVhZGVyLnJlZmluZS50b1VwcGVyQ2FzZSgpID09PSBcIlJFUExBQ0VcIlxuICAgICAgICA/IENlc2l1bTNEVGlsZVJlZmluZS5SRVBMQUNFXG4gICAgICAgIDogQ2VzaXVtM0RUaWxlUmVmaW5lLkFERDtcbiAgfSBlbHNlIGlmIChkZWZpbmVkKHBhcmVudCkpIHtcbiAgICAvLyBJbmhlcml0IGZyb20gcGFyZW50IHRpbGUgaWYgb21pdHRlZC5cbiAgICByZWZpbmUgPSBwYXJlbnQucmVmaW5lO1xuICB9IGVsc2Uge1xuICAgIHJlZmluZSA9IENlc2l1bTNEVGlsZVJlZmluZS5SRVBMQUNFO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgdHlwZSBvZiByZWZpbmVtZW50IHRoYXQgaXMgdXNlZCB3aGVuIHRyYXZlcnNpbmcgdGhpcyB0aWxlIGZvciByZW5kZXJpbmcuXG4gICAqXG4gICAqIEB0eXBlIHtDZXNpdW0zRFRpbGVSZWZpbmV9XG4gICAqIEByZWFkb25seVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZWZpbmUgPSByZWZpbmU7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRpbGUncyBjaGlsZHJlbi5cbiAgICpcbiAgICogQHR5cGUge0Nlc2l1bTNEVGlsZVtdfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHRoaXMuY2hpbGRyZW4gPSBbXTtcblxuICAvKipcbiAgICogVGhpcyB0aWxlJ3MgcGFyZW50IG9yIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gaWYgdGhpcyB0aWxlIGlzIHRoZSByb290LlxuICAgKiA8cD5cbiAgICogV2hlbiBhIHRpbGUncyBjb250ZW50IHBvaW50cyB0byBhbiBleHRlcm5hbCB0aWxlc2V0IEpTT04gZmlsZSwgdGhlIGV4dGVybmFsIHRpbGVzZXQnc1xuICAgKiByb290IHRpbGUncyBwYXJlbnQgaXMgbm90IDxjb2RlPnVuZGVmaW5lZDwvY29kZT47IGluc3RlYWQsIHRoZSBwYXJlbnQgcmVmZXJlbmNlc1xuICAgKiB0aGUgdGlsZSAod2l0aCBpdHMgY29udGVudCBwb2ludGluZyB0byBhbiBleHRlcm5hbCB0aWxlc2V0IEpTT04gZmlsZSkgYXMgaWYgdGhlIHR3byB0aWxlc2V0cyB3ZXJlIG1lcmdlZC5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG4gIHZhciBjb250ZW50O1xuICB2YXIgaGFzRW1wdHlDb250ZW50ID0gZmFsc2U7XG4gIHZhciBoYXNNdWx0aXBsZUNvbnRlbnRzID0gZmFsc2U7XG4gIHZhciBjb250ZW50U3RhdGU7XG4gIHZhciBjb250ZW50UmVzb3VyY2U7XG4gIHZhciBzZXJ2ZXJLZXk7XG5cbiAgYmFzZVJlc291cmNlID0gUmVzb3VyY2UuY3JlYXRlSWZOZWVkZWQoYmFzZVJlc291cmNlKTtcblxuICBpZiAoaGFzRXh0ZW5zaW9uKGhlYWRlciwgXCIzRFRJTEVTX211bHRpcGxlX2NvbnRlbnRzXCIpKSB7XG4gICAgaGFzTXVsdGlwbGVDb250ZW50cyA9IHRydWU7XG4gICAgY29udGVudFN0YXRlID0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlVOTE9BREVEO1xuICAgIC8vIEVhY2ggY29udGVudCBtYXkgaGF2ZSBpdHMgb3duIFVSSSwgYnV0IHRoZXkgYWxsIG5lZWQgdG8gYmUgcmVzb2x2ZWRcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgdGlsZXNldCwgc28gdGhlIGJhc2UgcmVzb3VyY2UgaXMgdXNlZC5cbiAgICBjb250ZW50UmVzb3VyY2UgPSBiYXNlUmVzb3VyY2UuY2xvbmUoKTtcbiAgfSBlbHNlIGlmIChkZWZpbmVkKGNvbnRlbnRIZWFkZXIpKSB7XG4gICAgdmFyIGNvbnRlbnRIZWFkZXJVcmkgPSBjb250ZW50SGVhZGVyLnVyaTtcbiAgICBpZiAoZGVmaW5lZChjb250ZW50SGVhZGVyLnVybCkpIHtcbiAgICAgIENlc2l1bTNEVGlsZS5fZGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgICBcImNvbnRlbnRVcmxcIixcbiAgICAgICAgJ1RoaXMgdGlsZXNldCBKU09OIHVzZXMgdGhlIFwiY29udGVudC51cmxcIiBwcm9wZXJ0eSB3aGljaCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgXCJjb250ZW50LnVyaVwiIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICAgIGNvbnRlbnRIZWFkZXJVcmkgPSBjb250ZW50SGVhZGVyLnVybDtcbiAgICB9XG4gICAgY29udGVudFN0YXRlID0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlVOTE9BREVEO1xuICAgIGNvbnRlbnRSZXNvdXJjZSA9IGJhc2VSZXNvdXJjZS5nZXREZXJpdmVkUmVzb3VyY2Uoe1xuICAgICAgdXJsOiBjb250ZW50SGVhZGVyVXJpLFxuICAgIH0pO1xuICAgIHNlcnZlcktleSA9IFJlcXVlc3RTY2hlZHVsZXIuZ2V0U2VydmVyS2V5KFxuICAgICAgY29udGVudFJlc291cmNlLmdldFVybENvbXBvbmVudCgpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50ID0gbmV3IEVtcHR5M0RUaWxlQ29udGVudCh0aWxlc2V0LCB0aGlzKTtcbiAgICBoYXNFbXB0eUNvbnRlbnQgPSB0cnVlO1xuICAgIGNvbnRlbnRTdGF0ZSA9IENlc2l1bTNEVGlsZUNvbnRlbnRTdGF0ZS5SRUFEWTtcbiAgfVxuXG4gIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xuICB0aGlzLl9jb250ZW50UmVzb3VyY2UgPSBjb250ZW50UmVzb3VyY2U7XG4gIHRoaXMuX2NvbnRlbnRTdGF0ZSA9IGNvbnRlbnRTdGF0ZTtcbiAgdGhpcy5fY29udGVudFJlYWR5VG9Qcm9jZXNzUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY29udGVudFJlYWR5UHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZXhwaXJlZENvbnRlbnQgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5fc2VydmVyS2V5ID0gc2VydmVyS2V5O1xuXG4gIC8qKlxuICAgKiBXaGVuIDxjb2RlPnRydWU8L2NvZGU+LCB0aGUgdGlsZSBoYXMgbm8gY29udGVudC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5oYXNFbXB0eUNvbnRlbnQgPSBoYXNFbXB0eUNvbnRlbnQ7XG5cbiAgLyoqXG4gICAqIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4sIHRoZSB0aWxlJ3MgY29udGVudCBwb2ludHMgdG8gYW4gZXh0ZXJuYWwgdGlsZXNldC5cbiAgICogPHA+XG4gICAqIFRoaXMgaXMgPGNvZGU+ZmFsc2U8L2NvZGU+IHVudGlsIHRoZSB0aWxlJ3MgY29udGVudCBpcyBsb2FkZWQuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5oYXNUaWxlc2V0Q29udGVudCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGVuIDxjb2RlPnRydWU8L2NvZGU+LCB0aGUgdGlsZSdzIGNvbnRlbnQgaXMgYW4gaW1wbGljaXQgdGlsZXNldC5cbiAgICogPHA+XG4gICAqIFRoaXMgaXMgPGNvZGU+ZmFsc2U8L2NvZGU+IHVudGlsIHRoZSB0aWxlJ3MgaW1wbGljaXQgY29udGVudCBpcyBsb2FkZWQuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICovXG4gIHRoaXMuaGFzSW1wbGljaXRDb250ZW50ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4sIHRoZSB0aWxlIGhhcyBtdWx0aXBsZSBjb250ZW50cyB2aWEgdGhlXG4gICAqIDxjb2RlPjNEVElMRVNfbXVsdGlwbGVfY29udGVudHM8L2NvZGU+IGV4dGVuc2lvbi5cbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0Nlc2l1bUdTLzNkLXRpbGVzL3RyZWUvM2QtdGlsZXMtbmV4dC9leHRlbnNpb25zLzNEVElMRVNfbXVsdGlwbGVfY29udGVudHN8M0RUSUxFU19tdWx0aXBsZV9jb250ZW50cyBleHRlbnNpb259XG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaGFzTXVsdGlwbGVDb250ZW50cyA9IGhhc011bHRpcGxlQ29udGVudHM7XG5cbiAgdmFyIG1ldGFkYXRhO1xuICBpZiAoaGFzRXh0ZW5zaW9uKGhlYWRlciwgXCIzRFRJTEVTX21ldGFkYXRhXCIpKSB7XG4gICAgLy8gVGhpcyBhc3N1bWVzIHRoYXQgdGlsZXNldC5tZXRhZGF0YSBoYXMgYmVlbiBjcmVhdGVkIGJlZm9yZSBhbnlcbiAgICAvLyB0aWxlcyBhcmUgY29uc3RydWN0ZWQuXG4gICAgdmFyIGV4dGVuc2lvbiA9IGhlYWRlci5leHRlbnNpb25zW1wiM0RUSUxFU19tZXRhZGF0YVwiXTtcbiAgICB2YXIgY2xhc3NlcyA9IHRpbGVzZXQubWV0YWRhdGEuc2NoZW1hLmNsYXNzZXM7XG4gICAgdmFyIHRpbGVDbGFzcyA9IGNsYXNzZXNbZXh0ZW5zaW9uLmNsYXNzXTtcbiAgICBtZXRhZGF0YSA9IG5ldyBUaWxlTWV0YWRhdGEoe1xuICAgICAgdGlsZTogZXh0ZW5zaW9uLFxuICAgICAgY2xhc3M6IHRpbGVDbGFzcyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSA8Y29kZT4zRFRJTEVTX21ldGFkYXRhPC9jb2RlPiBleHRlbnNpb24gaXMgdXNlZCwgdGhpc1xuICAgKiBzdG9yZXMgYSB7QGxpbmsgVGlsZU1ldGFkYXRhfSBvYmplY3QgZm9yIGFjY2Vzc2luZyB0aWxlIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAdHlwZSB7VGlsZU1ldGFkYXRhfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICogQGV4cGVyaW1lbnRhbCBUaGlzIGZlYXR1cmUgaXMgdXNpbmcgcGFydCBvZiB0aGUgM0QgVGlsZXMgc3BlYyB0aGF0IGlzIG5vdCBmaW5hbCBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2Ugd2l0aG91dCBDZXNpdW0ncyBzdGFuZGFyZCBkZXByZWNhdGlvbiBwb2xpY3kuXG4gICAqL1xuICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG5cbiAgLyoqXG4gICAqIFRoZSBub2RlIGluIHRoZSB0aWxlc2V0J3MgTFJVIGNhY2hlLCB1c2VkIHRvIGRldGVybWluZSB3aGVuIHRvIHVubG9hZCBhIHRpbGUncyBjb250ZW50LlxuICAgKlxuICAgKiBTZWUge0BsaW5rIENlc2l1bTNEVGlsZXNldENhY2hlfVxuICAgKlxuICAgKiBAdHlwZSB7RG91Ymx5TGlua2VkTGlzdE5vZGV9XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jYWNoZU5vZGUgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIGV4cGlyZSA9IGhlYWRlci5leHBpcmU7XG4gIHZhciBleHBpcmVEdXJhdGlvbjtcbiAgdmFyIGV4cGlyZURhdGU7XG4gIGlmIChkZWZpbmVkKGV4cGlyZSkpIHtcbiAgICBleHBpcmVEdXJhdGlvbiA9IGV4cGlyZS5kdXJhdGlvbjtcbiAgICBpZiAoZGVmaW5lZChleHBpcmUuZGF0ZSkpIHtcbiAgICAgIGV4cGlyZURhdGUgPSBKdWxpYW5EYXRlLmZyb21Jc284NjAxKGV4cGlyZS5kYXRlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRpbWUgaW4gc2Vjb25kcyBhZnRlciB0aGUgdGlsZSdzIGNvbnRlbnQgaXMgcmVhZHkgd2hlbiB0aGUgY29udGVudCBleHBpcmVzIGFuZCBuZXcgY29udGVudCBpcyByZXF1ZXN0ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLmV4cGlyZUR1cmF0aW9uID0gZXhwaXJlRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRlIHdoZW4gdGhlIGNvbnRlbnQgZXhwaXJlcyBhbmQgbmV3IGNvbnRlbnQgaXMgcmVxdWVzdGVkLlxuICAgKlxuICAgKiBAdHlwZSB7SnVsaWFuRGF0ZX1cbiAgICovXG4gIHRoaXMuZXhwaXJlRGF0ZSA9IGV4cGlyZURhdGU7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIHdoZW4gYSBzdHlsZSB3YXMgbGFzdCBhcHBsaWVkIHRvIHRoaXMgdGlsZS5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGFzdFN0eWxlVGltZSA9IDAuMDtcblxuICAvKipcbiAgICogTWFya3Mgd2hldGhlciB0aGUgdGlsZSdzIGNoaWxkcmVuIGJvdW5kcyBhcmUgZnVsbHkgY29udGFpbmVkIHdpdGhpbiB0aGUgdGlsZSdzIGJvdW5kc1xuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlT3B0aW1pemF0aW9uSGludH1cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuX29wdGltQ2hpbGRyZW5XaXRoaW5QYXJlbnQgPSBDZXNpdW0zRFRpbGVPcHRpbWl6YXRpb25IaW50Lk5PVF9DT01QVVRFRDtcblxuICAvKipcbiAgICogVHJhY2tzIGlmIHRoZSB0aWxlJ3MgcmVsYXRpb25zaGlwIHdpdGggYSBDbGlwcGluZ1BsYW5lQ29sbGVjdGlvbiBoYXMgY2hhbmdlZCB3aXRoIHJlZ2FyZHNcbiAgICogdG8gdGhlIENsaXBwaW5nUGxhbmVDb2xsZWN0aW9uJ3Mgc3RhdGUuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jbGlwcGluZ1BsYW5lc0RpcnR5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBpZiB0aGUgdGlsZSdzIHJlcXVlc3Qgc2hvdWxkIGJlIGRlZmVycmVkIHVudGlsIGFsbCBub24tZGVmZXJyZWRcbiAgICogdGlsZXMgbG9hZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnByaW9yaXR5RGVmZXJyZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogRm9yIGltcGxpY2l0IHRpbGluZywgYW4gSW1wbGljaXRUaWxlc2V0IG9iamVjdCB3aWxsIGJlIGF0dGFjaGVkIHRvIGFcbiAgICogcGxhY2Vob2xkZXIgdGlsZSB3aXRoIHRoZSA8Y29kZT4zRFRJTEVTX2ltcGxpY2l0X3RpbGluZzwvY29kZT4gZXh0ZW5zaW9uLlxuICAgKiBUaGlzIHdheSB0aGUge0BsaW5rIEltcGxpY2l0M0RUaWxlQ29udGVudH0gY2FuIGFjY2VzcyB0aGUgdGlsZSBsYXRlciBvbmNlIHRoZSBjb250ZW50IGlzIGZldGNoZWQuXG4gICAqXG4gICAqIEB0eXBlIHtJbXBsaWNpdFRpbGVzZXR8dW5kZWZpbmVkfVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICovXG4gIHRoaXMuaW1wbGljaXRUaWxlc2V0ID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBGb3IgaW1wbGljaXQgdGlsaW5nLCB0aGUgKGxldmVsLCB4LCB5LCBbel0pIGNvb3JkaW5hdGVzIHdpdGhpbiB0aGVcbiAgICogaW1wbGljaXQgdGlsZXNldCBhcmUgc3RvcmVkIGluIHRoZSB0aWxlLlxuICAgKlxuICAgKiBAdHlwZSB7SW1wbGljaXRUaWxlQ29vcmRpbmF0ZXN8dW5kZWZpbmVkfVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICovXG4gIHRoaXMuaW1wbGljaXRDb29yZGluYXRlcyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRm9yIGltcGxpY2l0IHRpbGluZywgZWFjaCB0cmFuc2NvZGVkIHRpbGUgd2lsbCBob2xkIGEgd2VhayByZWZlcmVuY2UgdG9cbiAgICogdGhlIHtAbGluayBJbXBsaWNpdFN1YnRyZWV9LlxuICAgKlxuICAgKiBAdHlwZSB7SW1wbGljaXRTdWJ0cmVlfHVuZGVmaW5lZH1cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQGV4cGVyaW1lbnRhbCBUaGlzIGZlYXR1cmUgaXMgdXNpbmcgcGFydCBvZiB0aGUgM0QgVGlsZXMgc3BlYyB0aGF0IGlzIG5vdCBmaW5hbCBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2Ugd2l0aG91dCBDZXNpdW0ncyBzdGFuZGFyZCBkZXByZWNhdGlvbiBwb2xpY3kuXG4gICAqL1xuICB0aGlzLmltcGxpY2l0U3VidHJlZSA9IHVuZGVmaW5lZDtcblxuICAvLyBNZW1iZXJzIHRoYXQgYXJlIHVwZGF0ZWQgZXZlcnkgZnJhbWUgZm9yIHRyZWUgdHJhdmVyc2FsIGFuZCByZW5kZXJpbmcgb3B0aW1pemF0aW9uczpcbiAgdGhpcy5fZGlzdGFuY2VUb0NhbWVyYSA9IDAuMDtcbiAgdGhpcy5fY2VudGVyWkRlcHRoID0gMC4wO1xuICB0aGlzLl9zY3JlZW5TcGFjZUVycm9yID0gMC4wO1xuICB0aGlzLl9zY3JlZW5TcGFjZUVycm9yUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uID0gMC4wOyAvLyBUaGUgc2NyZWVuIHNwYWNlIGVycm9yIGF0IGEgZ2l2ZW4gc2NyZWVuIGhlaWdodCBvZiB0aWxlc2V0LnByb2dyZXNzaXZlUmVzb2x1dGlvbkhlaWdodEZyYWN0aW9uICogc2NyZWVuSGVpZ2h0XG4gIHRoaXMuX3Zpc2liaWxpdHlQbGFuZU1hc2sgPSAwO1xuICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XG4gIHRoaXMuX2luUmVxdWVzdFZvbHVtZSA9IGZhbHNlO1xuXG4gIHRoaXMuX2ZpbmFsUmVzb2x1dGlvbiA9IHRydWU7XG4gIHRoaXMuX2RlcHRoID0gMDtcbiAgdGhpcy5fc3RhY2tMZW5ndGggPSAwO1xuICB0aGlzLl9zZWxlY3Rpb25EZXB0aCA9IDA7XG5cbiAgdGhpcy5fdXBkYXRlZFZpc2liaWxpdHlGcmFtZSA9IDA7XG4gIHRoaXMuX3RvdWNoZWRGcmFtZSA9IDA7XG4gIHRoaXMuX3Zpc2l0ZWRGcmFtZSA9IDA7XG4gIHRoaXMuX3NlbGVjdGVkRnJhbWUgPSAwO1xuICB0aGlzLl9yZXF1ZXN0ZWRGcmFtZSA9IDA7XG4gIHRoaXMuX2FuY2VzdG9yV2l0aENvbnRlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2FuY2VzdG9yV2l0aENvbnRlbnRBdmFpbGFibGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3JlZmluZXMgPSBmYWxzZTtcbiAgdGhpcy5fc2hvdWxkU2VsZWN0ID0gZmFsc2U7XG4gIHRoaXMuX2lzQ2xpcHBlZCA9IHRydWU7XG4gIHRoaXMuX2NsaXBwaW5nUGxhbmVzU3RhdGUgPSAwOyAvLyBlbmNhcHN1bGF0ZXMgKF9pc0NsaXBwZWQsIGNsaXBwaW5nUGxhbmVzLmVuYWJsZWQpIGFuZCBudW1iZXIvZnVuY3Rpb25cbiAgdGhpcy5fZGVidWdCb3VuZGluZ1ZvbHVtZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZGVidWdDb250ZW50Qm91bmRpbmdWb2x1bWUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZGVidWdDb2xvciA9IENvbG9yLmZyb21SYW5kb20oeyBhbHBoYTogMS4wIH0pO1xuICB0aGlzLl9kZWJ1Z0NvbG9yaXplVGlsZXMgPSBmYWxzZTtcblxuICB0aGlzLl9wcmlvcml0eSA9IDAuMDsgLy8gVGhlIHByaW9yaXR5IHVzZWQgZm9yIHJlcXVlc3Qgc29ydGluZ1xuICB0aGlzLl9wcmlvcml0eUhvbGRlciA9IHRoaXM7IC8vIFJlZmVyZW5jZSB0byB0aGUgYW5jZXN0b3IgdXAgdGhlIHRyZWUgdGhhdCBob2xkcyB0aGUgX2ZvdmVhdGVkRmFjdG9yIGFuZCBfZGlzdGFuY2VUb0NhbWVyYSBmb3IgYWxsIHRpbGVzIGluIHRoZSByZWZpbmVtZW50IGNoYWluLlxuICB0aGlzLl9wcmlvcml0eVByb2dyZXNzaXZlUmVzb2x1dGlvbiA9IGZhbHNlO1xuICB0aGlzLl9wcmlvcml0eVByb2dyZXNzaXZlUmVzb2x1dGlvblNjcmVlblNwYWNlRXJyb3JMZWFmID0gZmFsc2U7XG4gIHRoaXMuX3ByaW9yaXR5UmV2ZXJzZVNjcmVlblNwYWNlRXJyb3IgPSAwLjA7XG4gIHRoaXMuX2ZvdmVhdGVkRmFjdG9yID0gMC4wO1xuICB0aGlzLl93YXNNaW5Qcmlvcml0eUNoaWxkID0gZmFsc2U7IC8vIE5lZWRlZCBmb3Iga25vd2luZyB3aGVuIHRvIGNvbnRpbnVlIGEgcmVmaW5lbWVudCBjaGFpbi4gR2V0cyByZXNldCBpbiB1cGRhdGVUaWxlIGluIHRyYXZlcnNhbCBhbmQgZ2V0cyBzZXQgaW4gdXBkYXRlQW5kUHVzaENoaWxkcmVuIGluIHRyYXZlcnNhbC5cblxuICB0aGlzLl9sb2FkVGltZXN0YW1wID0gbmV3IEp1bGlhbkRhdGUoKTtcblxuICB0aGlzLl9jb21tYW5kc0xlbmd0aCA9IDA7XG5cbiAgdGhpcy5fY29sb3IgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2NvbG9yRGlydHkgPSBmYWxzZTtcblxuICB0aGlzLl9yZXF1ZXN0ID0gdW5kZWZpbmVkO1xufVxuXG4vLyBUaGlzIGNhbiBiZSBvdmVycmlkZGVuIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG5DZXNpdW0zRFRpbGUuX2RlcHJlY2F0aW9uV2FybmluZyA9IGRlcHJlY2F0aW9uV2FybmluZztcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2VzaXVtM0RUaWxlLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogVGhlIHRpbGVzZXQgY29udGFpbmluZyB0aGlzIHRpbGUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGUucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtDZXNpdW0zRFRpbGVzZXR9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdGlsZXNldDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RpbGVzZXQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHRpbGUncyBjb250ZW50LiAgVGhpcyByZXByZXNlbnRzIHRoZSBhY3R1YWwgdGlsZSdzIHBheWxvYWQsXG4gICAqIG5vdCB0aGUgY29udGVudCdzIG1ldGFkYXRhIGluIHRoZSB0aWxlc2V0IEpTT04gZmlsZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZS5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Nlc2l1bTNEVGlsZUNvbnRlbnR9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgY29udGVudDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSB0aWxlJ3MgYm91bmRpbmcgdm9sdW1lLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7VGlsZUJvdW5kaW5nVm9sdW1lfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJvdW5kaW5nVm9sdW1lOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYm91bmRpbmdWb2x1bWU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBib3VuZGluZyB2b2x1bWUgb2YgdGhlIHRpbGUncyBjb250ZW50cy4gIFRoaXMgZGVmYXVsdHMgdG8gdGhlXG4gICAqIHRpbGUncyBib3VuZGluZyB2b2x1bWUgd2hlbiB0aGUgY29udGVudCdzIGJvdW5kaW5nIHZvbHVtZSBpc1xuICAgKiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7VGlsZUJvdW5kaW5nVm9sdW1lfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRlbnRCb3VuZGluZ1ZvbHVtZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZSh0aGlzLl9jb250ZW50Qm91bmRpbmdWb2x1bWUsIHRoaXMuX2JvdW5kaW5nVm9sdW1lKTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGJvdW5kaW5nIHNwaGVyZSBkZXJpdmVkIGZyb20gdGhlIHRpbGUncyBib3VuZGluZyB2b2x1bWUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGUucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb3VuZGluZ1NwaGVyZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBib3VuZGluZ1NwaGVyZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2JvdW5kaW5nVm9sdW1lLmJvdW5kaW5nU3BoZXJlO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIDxjb2RlPmV4dHJhczwvY29kZT4gcHJvcGVydHkgaW4gdGhlIHRpbGVzZXQgSlNPTiBmb3IgdGhpcyB0aWxlLCB3aGljaCBjb250YWlucyBhcHBsaWNhdGlvbiBzcGVjaWZpYyBtZXRhZGF0YS5cbiAgICogUmV0dXJucyA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IGlmIDxjb2RlPmV4dHJhczwvY29kZT4gZG9lcyBub3QgZXhpc3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGUucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0Nlc2l1bUdTLzNkLXRpbGVzL3RyZWUvbWFpbi9zcGVjaWZpY2F0aW9uI3NwZWNpZnlpbmctZXh0ZW5zaW9ucy1hbmQtYXBwbGljYXRpb24tc3BlY2lmaWMtZXh0cmFzfEV4dHJhcyBpbiB0aGUgM0QgVGlsZXMgc3BlY2lmaWNhdGlvbi59XG4gICAqL1xuICBleHRyYXM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXIuZXh0cmFzO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgdGlsZSdzIGhpZ2hsaWdodCBjb2xvci5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZS5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0NvbG9yfVxuICAgKlxuICAgKiBAZGVmYXVsdCB7QGxpbmsgQ29sb3IuV0hJVEV9XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb2xvcjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFkZWZpbmVkKHRoaXMuX2NvbG9yKSkge1xuICAgICAgICB0aGlzLl9jb2xvciA9IG5ldyBDb2xvcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIENvbG9yLmNsb25lKHRoaXMuX2NvbG9yKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aGlzLl9jb2xvciA9IENvbG9yLmNsb25lKHZhbHVlLCB0aGlzLl9jb2xvcik7XG4gICAgICB0aGlzLl9jb2xvckRpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB0aWxlIGhhcyBhdmFpbGFibGUgY29udGVudCB0byByZW5kZXIuICA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgdGlsZSdzXG4gICAqIGNvbnRlbnQgaXMgcmVhZHkgb3IgaWYgaXQgaGFzIGV4cGlyZWQgY29udGVudCB0aGF0IHJlbmRlcnMgd2hpbGUgbmV3IGNvbnRlbnQgbG9hZHM7IG90aGVyd2lzZSxcbiAgICogPGNvZGU+ZmFsc2U8L2NvZGU+LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb250ZW50QXZhaWxhYmxlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAodGhpcy5jb250ZW50UmVhZHkgJiZcbiAgICAgICAgICAhdGhpcy5oYXNFbXB0eUNvbnRlbnQgJiZcbiAgICAgICAgICAhdGhpcy5oYXNUaWxlc2V0Q29udGVudCAmJlxuICAgICAgICAgICF0aGlzLmhhc0ltcGxpY2l0Q29udGVudCkgfHxcbiAgICAgICAgKGRlZmluZWQodGhpcy5fZXhwaXJlZENvbnRlbnQpICYmICF0aGlzLmNvbnRlbnRGYWlsZWQpXG4gICAgICApO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIHRpbGUncyBjb250ZW50IGlzIHJlYWR5LiBUaGlzIGlzIGF1dG9tYXRpY2FsbHkgPGNvZGU+dHJ1ZTwvY29kZT4gZm9yXG4gICAqIHRpbGUncyB3aXRoIGVtcHR5IGNvbnRlbnQuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGUucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRlbnRSZWFkeToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRTdGF0ZSA9PT0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlJFQURZO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIHRpbGUncyBjb250ZW50IGhhcyBub3QgYmUgcmVxdWVzdGVkLiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aWxlJ3NcbiAgICogY29udGVudCBoYXMgbm90IGJlIHJlcXVlc3RlZDsgb3RoZXJ3aXNlLCA8Y29kZT5mYWxzZTwvY29kZT4uXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGUucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRlbnRVbmxvYWRlZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRTdGF0ZSA9PT0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlVOTE9BREVEO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIHRpbGUncyBjb250ZW50IGlzIGV4cGlyZWQuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRpbGUnc1xuICAgKiBjb250ZW50IGlzIGV4cGlyZWQ7IG90aGVyd2lzZSwgPGNvZGU+ZmFsc2U8L2NvZGU+LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb250ZW50RXhwaXJlZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRTdGF0ZSA9PT0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLkVYUElSRUQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgdGlsZSdzIGNvbnRlbnQgZmFpbGVkIHRvIGxvYWQuICA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgdGlsZSdzXG4gICAqIGNvbnRlbnQgZmFpbGVkIHRvIGxvYWQ7IG90aGVyd2lzZSwgPGNvZGU+ZmFsc2U8L2NvZGU+LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlLnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb250ZW50RmFpbGVkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudFN0YXRlID09PSBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUuRkFJTEVEO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIHRpbGUncyBjb250ZW50IGlzIHJlYWR5IHRvIHByb2Nlc3MuXG4gICAqIFRoaXMgaGFwcGVucyBhZnRlciB0aGUgY29udGVudCBpcyBkb3dubG9hZGVkIGJ1dCBiZWZvcmUgdGhlIGNvbnRlbnQgaXMgcmVhZHlcbiAgICogdG8gcmVuZGVyLlxuICAgKiA8cD5cbiAgICogVGhlIHByb21pc2UgcmVtYWlucyA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IHVudGlsIHRoZSB0aWxlJ3MgY29udGVudCBpcyByZXF1ZXN0ZWQuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge1Byb21pc2UuPENlc2l1bTNEVGlsZUNvbnRlbnQ+fVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnRlbnRSZWFkeVRvUHJvY2Vzc1Byb21pc2U6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkZWZpbmVkKHRoaXMuX2NvbnRlbnRSZWFkeVRvUHJvY2Vzc1Byb21pc2UpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50UmVhZHlUb1Byb2Nlc3NQcm9taXNlLnByb21pc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIHRpbGUncyBjb250ZW50IGlzIHJlYWR5IHRvIHJlbmRlci5cbiAgICogPHA+XG4gICAqIFRoZSBwcm9taXNlIHJlbWFpbnMgPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiB1bnRpbCB0aGUgdGlsZSdzIGNvbnRlbnQgaXMgcmVxdWVzdGVkLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtQcm9taXNlLjxDZXNpdW0zRFRpbGVDb250ZW50Pn1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb250ZW50UmVhZHlQcm9taXNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZGVmaW5lZCh0aGlzLl9jb250ZW50UmVhZHlQcm9taXNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudFJlYWR5UHJvbWlzZS5wcm9taXNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZHJhdyBjb21tYW5kcyB1c2VkIGJ5IHRoaXMgdGlsZS5cbiAgICpcbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb21tYW5kc0xlbmd0aDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRzTGVuZ3RoO1xuICAgIH0sXG4gIH0sXG59KTtcblxudmFyIHNjcmF0Y2hDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuMygpO1xuZnVuY3Rpb24gaXNQcmlvcml0eURlZmVycmVkKHRpbGUsIGZyYW1lU3RhdGUpIHtcbiAgdmFyIHRpbGVzZXQgPSB0aWxlLl90aWxlc2V0O1xuXG4gIC8vIElmIGNsb3Nlc3QgcG9pbnQgb24gbGluZSBpcyBpbnNpZGUgdGhlIHNwaGVyZSB0aGVuIHNldCBmb3ZlYXRlZEZhY3RvciB0byAwLiBPdGhlcndpc2UsIHRoZSBkb3QgcHJvZHVjdCBpcyB3aXRoIHRoZSBsaW5lIGZyb20gY2FtZXJhIHRvIHRoZSBwb2ludCBvbiB0aGUgc3BoZXJlIHRoYXQgaXMgY2xvc2VzdCB0byB0aGUgbGluZS5cbiAgdmFyIGNhbWVyYSA9IGZyYW1lU3RhdGUuY2FtZXJhO1xuICB2YXIgYm91bmRpbmdTcGhlcmUgPSB0aWxlLmJvdW5kaW5nU3BoZXJlO1xuICB2YXIgcmFkaXVzID0gYm91bmRpbmdTcGhlcmUucmFkaXVzO1xuICB2YXIgc2NhbGVkQ2FtZXJhRGlyZWN0aW9uID0gQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKFxuICAgIGNhbWVyYS5kaXJlY3Rpb25XQyxcbiAgICB0aWxlLl9jZW50ZXJaRGVwdGgsXG4gICAgc2NyYXRjaENhcnRlc2lhblxuICApO1xuICB2YXIgY2xvc2VzdFBvaW50T25MaW5lID0gQ2FydGVzaWFuMy5hZGQoXG4gICAgY2FtZXJhLnBvc2l0aW9uV0MsXG4gICAgc2NhbGVkQ2FtZXJhRGlyZWN0aW9uLFxuICAgIHNjcmF0Y2hDYXJ0ZXNpYW5cbiAgKTtcbiAgLy8gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSdzIHZpZXcgZGlyZWN0aW9uIHRvIHRoZSB0aWxlLlxuICB2YXIgdG9MaW5lID0gQ2FydGVzaWFuMy5zdWJ0cmFjdChcbiAgICBjbG9zZXN0UG9pbnRPbkxpbmUsXG4gICAgYm91bmRpbmdTcGhlcmUuY2VudGVyLFxuICAgIHNjcmF0Y2hDYXJ0ZXNpYW5cbiAgKTtcbiAgdmFyIGRpc3RhbmNlVG9DZW50ZXJMaW5lID0gQ2FydGVzaWFuMy5tYWduaXR1ZGUodG9MaW5lKTtcbiAgdmFyIG5vdFRvdWNoaW5nU3BoZXJlID0gZGlzdGFuY2VUb0NlbnRlckxpbmUgPiByYWRpdXM7XG5cbiAgLy8gSWYgY2FtZXJhJ3MgZGlyZWN0aW9uIHZlY3RvciBpcyBpbnNpZGUgdGhlIGJvdW5kaW5nIHNwaGVyZSB0aGVuIGNvbnNpZGVyXG4gIC8vIHRoaXMgdGlsZSByaWdodCBhbG9uZyB0aGUgbGluZSBvZiBzaWdodCBhbmQgc2V0IF9mb3ZlYXRlZEZhY3RvciB0byAwLlxuICAvLyBPdGhlcndpc2UsX2ZvdmVhdGVkRmFjdG9yIGlzIG9uZSBtaW51cyB0aGUgZG90IHByb2R1Y3Qgb2YgdGhlIGNhbWVyYSdzIGRpcmVjdGlvblxuICAvLyBhbmQgdGhlIHZlY3RvciBiZXR3ZWVuIHRoZSBjYW1lcmEgYW5kIHRoZSBwb2ludCBvbiB0aGUgYm91bmRpbmcgc3BoZXJlIGNsb3Nlc3QgdG8gdGhlIHZpZXcgbGluZS5cbiAgaWYgKG5vdFRvdWNoaW5nU3BoZXJlKSB7XG4gICAgdmFyIHRvTGluZU5vcm1hbGl6ZWQgPSBDYXJ0ZXNpYW4zLm5vcm1hbGl6ZSh0b0xpbmUsIHNjcmF0Y2hDYXJ0ZXNpYW4pO1xuICAgIHZhciBzY2FsZWRUb0xpbmUgPSBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoXG4gICAgICB0b0xpbmVOb3JtYWxpemVkLFxuICAgICAgcmFkaXVzLFxuICAgICAgc2NyYXRjaENhcnRlc2lhblxuICAgICk7XG4gICAgdmFyIGNsb3Nlc3RPblNwaGVyZSA9IENhcnRlc2lhbjMuYWRkKFxuICAgICAgYm91bmRpbmdTcGhlcmUuY2VudGVyLFxuICAgICAgc2NhbGVkVG9MaW5lLFxuICAgICAgc2NyYXRjaENhcnRlc2lhblxuICAgICk7XG4gICAgdmFyIHRvQ2xvc2VzdE9uU3BoZXJlID0gQ2FydGVzaWFuMy5zdWJ0cmFjdChcbiAgICAgIGNsb3Nlc3RPblNwaGVyZSxcbiAgICAgIGNhbWVyYS5wb3NpdGlvbldDLFxuICAgICAgc2NyYXRjaENhcnRlc2lhblxuICAgICk7XG4gICAgdmFyIHRvQ2xvc2VzdE9uU3BoZXJlTm9ybWFsaXplID0gQ2FydGVzaWFuMy5ub3JtYWxpemUoXG4gICAgICB0b0Nsb3Nlc3RPblNwaGVyZSxcbiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5cbiAgICApO1xuICAgIHRpbGUuX2ZvdmVhdGVkRmFjdG9yID1cbiAgICAgIDEuMCAtXG4gICAgICBNYXRoLmFicyhDYXJ0ZXNpYW4zLmRvdChjYW1lcmEuZGlyZWN0aW9uV0MsIHRvQ2xvc2VzdE9uU3BoZXJlTm9ybWFsaXplKSk7XG4gIH0gZWxzZSB7XG4gICAgdGlsZS5fZm92ZWF0ZWRGYWN0b3IgPSAwLjA7XG4gIH1cblxuICAvLyBTa2lwIHRoaXMgZmVhdHVyZSBpZjogbm9uLXNraXBMZXZlbE9mRGV0YWlsIGFuZCByZXBsYWNlIHJlZmluZSwgaWYgdGhlIGZvdmVhdGVkIHNldHRpbmdzIGFyZSB0dXJuZWQgb2ZmLCBpZiB0aWxlIGlzIHByb2dyZXNzaXZlIHJlc29sdXRpb24gYW5kIHJlcGxhY2UgcmVmaW5lIGFuZCBza2lwTGV2ZWxPZkRldGFpbCAod2lsbCBoZWxwIGdldCByaWQgb2YgYW5jZXN0b3IgYXJ0aWZhY3RzIGZhc3RlcilcbiAgLy8gT3IgaWYgdGhlIHRpbGUgaXMgYSBwcmVsb2FkIG9mIGFueSBraW5kXG4gIHZhciByZXBsYWNlID0gdGlsZS5yZWZpbmUgPT09IENlc2l1bTNEVGlsZVJlZmluZS5SRVBMQUNFO1xuICB2YXIgc2tpcExldmVsT2ZEZXRhaWwgPSB0aWxlc2V0Ll9za2lwTGV2ZWxPZkRldGFpbDtcbiAgaWYgKFxuICAgIChyZXBsYWNlICYmICFza2lwTGV2ZWxPZkRldGFpbCkgfHxcbiAgICAhdGlsZXNldC5mb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3IgfHxcbiAgICB0aWxlc2V0LmZvdmVhdGVkQ29uZVNpemUgPT09IDEuMCB8fFxuICAgICh0aWxlLl9wcmlvcml0eVByb2dyZXNzaXZlUmVzb2x1dGlvbiAmJiByZXBsYWNlICYmIHNraXBMZXZlbE9mRGV0YWlsKSB8fFxuICAgIHRpbGVzZXQuX3Bhc3MgPT09IENlc2l1bTNEVGlsZVBhc3MuUFJFTE9BRF9GTElHSFQgfHxcbiAgICB0aWxlc2V0Ll9wYXNzID09PSBDZXNpdW0zRFRpbGVQYXNzLlBSRUxPQURcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG1heGltdW1Gb3ZhdGVkRmFjdG9yID0gMS4wIC0gTWF0aC5jb3MoY2FtZXJhLmZydXN0dW0uZm92ICogMC41KTsgLy8gMC4xNCBmb3IgZm92ID0gNjAuIE5PVEUgdmVyeSBoYXJkIHRvIGRlZmVyIHZlcnRpY2FsbHkgZm92ZWF0ZWQgdGlsZXMgc2luY2UgbWF4IGlzIGJhc2VkIG9uIGZvdnkgKHdoaWNoIGlzIGZvdikuIExvd2VyaW5nIHRoZSAwLjUgdG8gYSBzbWFsbGVyIGZyYWN0aW9uIG9mIHRoZSBzY3JlZW4gaGVpZ2h0IHdpbGwgc3RhcnQgdG8gZGVmZXIgdmVydGljYWxseSBmb3ZlYXRlZCB0aWxlcy5cbiAgdmFyIGZvdmVhdGVkQ29uZUZhY3RvciA9IHRpbGVzZXQuZm92ZWF0ZWRDb25lU2l6ZSAqIG1heGltdW1Gb3ZhdGVkRmFjdG9yO1xuXG4gIC8vIElmIGl0J3MgaW5zaWRlIHRoZSB1c2VyLWRlZmluZWQgdmlldyBjb25lLCB0aGVuIGl0IHNob3VsZCBub3QgYmUgZGVmZXJyZWQuXG4gIGlmICh0aWxlLl9mb3ZlYXRlZEZhY3RvciA8PSBmb3ZlYXRlZENvbmVGYWN0b3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBSZWxheCBTU0UgYmFzZWQgb24gaG93IGJpZyB0aGUgYW5nbGUgaXMgYmV0d2VlbiB0aGUgdGlsZSBhbmQgdGhlIGVkZ2Ugb2YgdGhlIGZvdmVhdGVkIGNvbmUuXG4gIHZhciByYW5nZSA9IG1heGltdW1Gb3ZhdGVkRmFjdG9yIC0gZm92ZWF0ZWRDb25lRmFjdG9yO1xuICB2YXIgbm9ybWFsaXplZEZvdmVhdGVkRmFjdG9yID0gQ2VzaXVtTWF0aC5jbGFtcChcbiAgICAodGlsZS5fZm92ZWF0ZWRGYWN0b3IgLSBmb3ZlYXRlZENvbmVGYWN0b3IpIC8gcmFuZ2UsXG4gICAgMC4wLFxuICAgIDEuMFxuICApO1xuICB2YXIgc3NlUmVsYXhhdGlvbiA9IHRpbGVzZXQuZm92ZWF0ZWRJbnRlcnBvbGF0aW9uQ2FsbGJhY2soXG4gICAgdGlsZXNldC5mb3ZlYXRlZE1pbmltdW1TY3JlZW5TcGFjZUVycm9yUmVsYXhhdGlvbixcbiAgICB0aWxlc2V0Lm1heGltdW1TY3JlZW5TcGFjZUVycm9yLFxuICAgIG5vcm1hbGl6ZWRGb3ZlYXRlZEZhY3RvclxuICApO1xuICB2YXIgc3NlID1cbiAgICB0aWxlLl9zY3JlZW5TcGFjZUVycm9yID09PSAwLjAgJiYgZGVmaW5lZCh0aWxlLnBhcmVudClcbiAgICAgID8gdGlsZS5wYXJlbnQuX3NjcmVlblNwYWNlRXJyb3IgKiAwLjVcbiAgICAgIDogdGlsZS5fc2NyZWVuU3BhY2VFcnJvcjtcblxuICByZXR1cm4gdGlsZXNldC5tYXhpbXVtU2NyZWVuU3BhY2VFcnJvciAtIHNzZVJlbGF4YXRpb24gPD0gc3NlO1xufVxuXG52YXIgc2NyYXRjaEp1bGlhbkRhdGUgPSBuZXcgSnVsaWFuRGF0ZSgpO1xuXG4vKipcbiAqIEdldCB0aGUgdGlsZSdzIHNjcmVlbiBzcGFjZSBlcnJvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DZXNpdW0zRFRpbGUucHJvdG90eXBlLmdldFNjcmVlblNwYWNlRXJyb3IgPSBmdW5jdGlvbiAoXG4gIGZyYW1lU3RhdGUsXG4gIHVzZVBhcmVudEdlb21ldHJpY0Vycm9yLFxuICBwcm9ncmVzc2l2ZVJlc29sdXRpb25IZWlnaHRGcmFjdGlvblxuKSB7XG4gIHZhciB0aWxlc2V0ID0gdGhpcy5fdGlsZXNldDtcbiAgdmFyIGhlaWdodEZyYWN0aW9uID0gZGVmYXVsdFZhbHVlKHByb2dyZXNzaXZlUmVzb2x1dGlvbkhlaWdodEZyYWN0aW9uLCAxLjApO1xuICB2YXIgcGFyZW50R2VvbWV0cmljRXJyb3IgPSBkZWZpbmVkKHRoaXMucGFyZW50KVxuICAgID8gdGhpcy5wYXJlbnQuZ2VvbWV0cmljRXJyb3JcbiAgICA6IHRpbGVzZXQuX2dlb21ldHJpY0Vycm9yO1xuICB2YXIgZ2VvbWV0cmljRXJyb3IgPSB1c2VQYXJlbnRHZW9tZXRyaWNFcnJvclxuICAgID8gcGFyZW50R2VvbWV0cmljRXJyb3JcbiAgICA6IHRoaXMuZ2VvbWV0cmljRXJyb3I7XG4gIGlmIChnZW9tZXRyaWNFcnJvciA9PT0gMC4wKSB7XG4gICAgLy8gTGVhZiB0aWxlcyBkbyBub3QgaGF2ZSBhbnkgZXJyb3Igc28gc2F2ZSB0aGUgY29tcHV0YXRpb25cbiAgICByZXR1cm4gMC4wO1xuICB9XG4gIHZhciBjYW1lcmEgPSBmcmFtZVN0YXRlLmNhbWVyYTtcbiAgdmFyIGZydXN0dW0gPSBjYW1lcmEuZnJ1c3R1bTtcbiAgdmFyIGNvbnRleHQgPSBmcmFtZVN0YXRlLmNvbnRleHQ7XG4gIHZhciB3aWR0aCA9IGNvbnRleHQuZHJhd2luZ0J1ZmZlcldpZHRoO1xuICB2YXIgaGVpZ2h0ID0gY29udGV4dC5kcmF3aW5nQnVmZmVySGVpZ2h0ICogaGVpZ2h0RnJhY3Rpb247XG4gIHZhciBlcnJvcjtcbiAgaWYgKFxuICAgIGZyYW1lU3RhdGUubW9kZSA9PT0gU2NlbmVNb2RlLlNDRU5FMkQgfHxcbiAgICBmcnVzdHVtIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljRnJ1c3R1bVxuICApIHtcbiAgICBpZiAoZGVmaW5lZChmcnVzdHVtLl9vZmZDZW50ZXJGcnVzdHVtKSkge1xuICAgICAgZnJ1c3R1bSA9IGZydXN0dW0uX29mZkNlbnRlckZydXN0dW07XG4gICAgfVxuICAgIHZhciBwaXhlbFNpemUgPVxuICAgICAgTWF0aC5tYXgoZnJ1c3R1bS50b3AgLSBmcnVzdHVtLmJvdHRvbSwgZnJ1c3R1bS5yaWdodCAtIGZydXN0dW0ubGVmdCkgL1xuICAgICAgTWF0aC5tYXgod2lkdGgsIGhlaWdodCk7XG4gICAgZXJyb3IgPSBnZW9tZXRyaWNFcnJvciAvIHBpeGVsU2l6ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCBkaXZpZGUgYnkgemVybyB3aGVuIHZpZXdlciBpcyBpbnNpZGUgdGhlIHRpbGVcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLm1heCh0aGlzLl9kaXN0YW5jZVRvQ2FtZXJhLCBDZXNpdW1NYXRoLkVQU0lMT043KTtcbiAgICB2YXIgc3NlRGVub21pbmF0b3IgPSBjYW1lcmEuZnJ1c3R1bS5zc2VEZW5vbWluYXRvcjtcbiAgICBlcnJvciA9IChnZW9tZXRyaWNFcnJvciAqIGhlaWdodCkgLyAoZGlzdGFuY2UgKiBzc2VEZW5vbWluYXRvcik7XG4gICAgaWYgKHRpbGVzZXQuZHluYW1pY1NjcmVlblNwYWNlRXJyb3IpIHtcbiAgICAgIHZhciBkZW5zaXR5ID0gdGlsZXNldC5fZHluYW1pY1NjcmVlblNwYWNlRXJyb3JDb21wdXRlZERlbnNpdHk7XG4gICAgICB2YXIgZmFjdG9yID0gdGlsZXNldC5keW5hbWljU2NyZWVuU3BhY2VFcnJvckZhY3RvcjtcbiAgICAgIHZhciBkeW5hbWljRXJyb3IgPSBDZXNpdW1NYXRoLmZvZyhkaXN0YW5jZSwgZGVuc2l0eSkgKiBmYWN0b3I7XG4gICAgICBlcnJvciAtPSBkeW5hbWljRXJyb3I7XG4gICAgfVxuICB9XG5cbiAgZXJyb3IgLz0gZnJhbWVTdGF0ZS5waXhlbFJhdGlvO1xuXG4gIHJldHVybiBlcnJvcjtcbn07XG5cbmZ1bmN0aW9uIGlzUHJpb3JpdHlQcm9ncmVzc2l2ZVJlc29sdXRpb24odGlsZXNldCwgdGlsZSkge1xuICBpZiAoXG4gICAgdGlsZXNldC5wcm9ncmVzc2l2ZVJlc29sdXRpb25IZWlnaHRGcmFjdGlvbiA8PSAwLjAgfHxcbiAgICB0aWxlc2V0LnByb2dyZXNzaXZlUmVzb2x1dGlvbkhlaWdodEZyYWN0aW9uID4gMC41XG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc1Byb2dyZXNzaXZlUmVzb2x1dGlvblRpbGUgPVxuICAgIHRpbGUuX3NjcmVlblNwYWNlRXJyb3JQcm9ncmVzc2l2ZVJlc29sdXRpb24gPlxuICAgIHRpbGVzZXQuX21heGltdW1TY3JlZW5TcGFjZUVycm9yOyAvLyBNYXJrIG5vbi1TU0UgbGVhdmVzXG4gIHRpbGUuX3ByaW9yaXR5UHJvZ3Jlc3NpdmVSZXNvbHV0aW9uU2NyZWVuU3BhY2VFcnJvckxlYWYgPSBmYWxzZTsgLy8gTmVlZGVkIGZvciBza2lwTE9EXG4gIHZhciBwYXJlbnQgPSB0aWxlLnBhcmVudDtcbiAgdmFyIG1heGltdW1TY3JlZW5TcGFjZUVycm9yID0gdGlsZXNldC5fbWF4aW11bVNjcmVlblNwYWNlRXJyb3I7XG4gIHZhciB0aWxlUGFzc2VzID1cbiAgICB0aWxlLl9zY3JlZW5TcGFjZUVycm9yUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uIDw9IG1heGltdW1TY3JlZW5TcGFjZUVycm9yO1xuICB2YXIgcGFyZW50RmFpbHMgPVxuICAgIGRlZmluZWQocGFyZW50KSAmJlxuICAgIHBhcmVudC5fc2NyZWVuU3BhY2VFcnJvclByb2dyZXNzaXZlUmVzb2x1dGlvbiA+IG1heGltdW1TY3JlZW5TcGFjZUVycm9yO1xuICBpZiAodGlsZVBhc3NlcyAmJiBwYXJlbnRGYWlscykge1xuICAgIC8vIEEgcHJvZ3Jlc3NpdmUgcmVzb2x1dGlvbiBTU0UgbGVhZiwgcHJvbW90ZSBpdHMgcHJpb3JpdHkgYXMgd2VsbFxuICAgIHRpbGUuX3ByaW9yaXR5UHJvZ3Jlc3NpdmVSZXNvbHV0aW9uU2NyZWVuU3BhY2VFcnJvckxlYWYgPSB0cnVlO1xuICAgIGlzUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uVGlsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGlzUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uVGlsZTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJpb3JpdHlSZXZlcnNlU2NyZWVuU3BhY2VFcnJvcih0aWxlc2V0LCB0aWxlKSB7XG4gIHZhciBwYXJlbnQgPSB0aWxlLnBhcmVudDtcbiAgdmFyIHVzZVBhcmVudFNjcmVlblNwYWNlRXJyb3IgPVxuICAgIGRlZmluZWQocGFyZW50KSAmJlxuICAgICghdGlsZXNldC5fc2tpcExldmVsT2ZEZXRhaWwgfHxcbiAgICAgIHRpbGUuX3NjcmVlblNwYWNlRXJyb3IgPT09IDAuMCB8fFxuICAgICAgcGFyZW50Lmhhc1RpbGVzZXRDb250ZW50IHx8XG4gICAgICBwYXJlbnQuaGFzSW1wbGljaXRDb250ZW50KTtcbiAgdmFyIHNjcmVlblNwYWNlRXJyb3IgPSB1c2VQYXJlbnRTY3JlZW5TcGFjZUVycm9yXG4gICAgPyBwYXJlbnQuX3NjcmVlblNwYWNlRXJyb3JcbiAgICA6IHRpbGUuX3NjcmVlblNwYWNlRXJyb3I7XG4gIHJldHVybiB0aWxlc2V0LnJvb3QuX3NjcmVlblNwYWNlRXJyb3IgLSBzY3JlZW5TcGFjZUVycm9yO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB0aGUgdGlsZSdzIHZpc2liaWxpdHkuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlLnByb3RvdHlwZS51cGRhdGVWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGZyYW1lU3RhdGUpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICB2YXIgdGlsZXNldCA9IHRoaXMuX3RpbGVzZXQ7XG4gIHZhciBwYXJlbnRUcmFuc2Zvcm0gPSBkZWZpbmVkKHBhcmVudClcbiAgICA/IHBhcmVudC5jb21wdXRlZFRyYW5zZm9ybVxuICAgIDogdGlsZXNldC5tb2RlbE1hdHJpeDtcbiAgdmFyIHBhcmVudFZpc2liaWxpdHlQbGFuZU1hc2sgPSBkZWZpbmVkKHBhcmVudClcbiAgICA/IHBhcmVudC5fdmlzaWJpbGl0eVBsYW5lTWFza1xuICAgIDogQ3VsbGluZ1ZvbHVtZS5NQVNLX0lOREVURVJNSU5BVEU7XG4gIHRoaXMudXBkYXRlVHJhbnNmb3JtKHBhcmVudFRyYW5zZm9ybSk7XG4gIHRoaXMuX2Rpc3RhbmNlVG9DYW1lcmEgPSB0aGlzLmRpc3RhbmNlVG9UaWxlKGZyYW1lU3RhdGUpO1xuICB0aGlzLl9jZW50ZXJaRGVwdGggPSB0aGlzLmRpc3RhbmNlVG9UaWxlQ2VudGVyKGZyYW1lU3RhdGUpO1xuICB0aGlzLl9zY3JlZW5TcGFjZUVycm9yID0gdGhpcy5nZXRTY3JlZW5TcGFjZUVycm9yKGZyYW1lU3RhdGUsIGZhbHNlKTtcbiAgdGhpcy5fc2NyZWVuU3BhY2VFcnJvclByb2dyZXNzaXZlUmVzb2x1dGlvbiA9IHRoaXMuZ2V0U2NyZWVuU3BhY2VFcnJvcihcbiAgICBmcmFtZVN0YXRlLFxuICAgIGZhbHNlLFxuICAgIHRpbGVzZXQucHJvZ3Jlc3NpdmVSZXNvbHV0aW9uSGVpZ2h0RnJhY3Rpb25cbiAgKTtcbiAgdGhpcy5fdmlzaWJpbGl0eVBsYW5lTWFzayA9IHRoaXMudmlzaWJpbGl0eShcbiAgICBmcmFtZVN0YXRlLFxuICAgIHBhcmVudFZpc2liaWxpdHlQbGFuZU1hc2tcbiAgKTsgLy8gVXNlIHBhcmVudCdzIHBsYW5lIG1hc2sgdG8gc3BlZWQgdXAgdmlzaWJpbGl0eSB0ZXN0XG4gIHRoaXMuX3Zpc2libGUgPSB0aGlzLl92aXNpYmlsaXR5UGxhbmVNYXNrICE9PSBDdWxsaW5nVm9sdW1lLk1BU0tfT1VUU0lERTtcbiAgdGhpcy5faW5SZXF1ZXN0Vm9sdW1lID0gdGhpcy5pbnNpZGVWaWV3ZXJSZXF1ZXN0Vm9sdW1lKGZyYW1lU3RhdGUpO1xuICB0aGlzLl9wcmlvcml0eVJldmVyc2VTY3JlZW5TcGFjZUVycm9yID0gZ2V0UHJpb3JpdHlSZXZlcnNlU2NyZWVuU3BhY2VFcnJvcihcbiAgICB0aWxlc2V0LFxuICAgIHRoaXNcbiAgKTtcbiAgdGhpcy5fcHJpb3JpdHlQcm9ncmVzc2l2ZVJlc29sdXRpb24gPSBpc1ByaW9yaXR5UHJvZ3Jlc3NpdmVSZXNvbHV0aW9uKFxuICAgIHRpbGVzZXQsXG4gICAgdGhpc1xuICApO1xuICB0aGlzLnByaW9yaXR5RGVmZXJyZWQgPSBpc1ByaW9yaXR5RGVmZXJyZWQodGhpcywgZnJhbWVTdGF0ZSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB3aGV0aGVyIHRoZSB0aWxlIGhhcyBleHBpcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUudXBkYXRlRXhwaXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKFxuICAgIGRlZmluZWQodGhpcy5leHBpcmVEYXRlKSAmJlxuICAgIHRoaXMuY29udGVudFJlYWR5ICYmXG4gICAgIXRoaXMuaGFzRW1wdHlDb250ZW50ICYmXG4gICAgIXRoaXMuaGFzTXVsdGlwbGVDb250ZW50c1xuICApIHtcbiAgICB2YXIgbm93ID0gSnVsaWFuRGF0ZS5ub3coc2NyYXRjaEp1bGlhbkRhdGUpO1xuICAgIGlmIChKdWxpYW5EYXRlLmxlc3NUaGFuKHRoaXMuZXhwaXJlRGF0ZSwgbm93KSkge1xuICAgICAgdGhpcy5fY29udGVudFN0YXRlID0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLkVYUElSRUQ7XG4gICAgICB0aGlzLl9leHBpcmVkQ29udGVudCA9IHRoaXMuX2NvbnRlbnQ7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVFeHBpcmVEYXRlKHRpbGUpIHtcbiAgaWYgKGRlZmluZWQodGlsZS5leHBpcmVEdXJhdGlvbikpIHtcbiAgICB2YXIgZXhwaXJlRHVyYXRpb25EYXRlID0gSnVsaWFuRGF0ZS5ub3coc2NyYXRjaEp1bGlhbkRhdGUpO1xuICAgIEp1bGlhbkRhdGUuYWRkU2Vjb25kcyhcbiAgICAgIGV4cGlyZUR1cmF0aW9uRGF0ZSxcbiAgICAgIHRpbGUuZXhwaXJlRHVyYXRpb24sXG4gICAgICBleHBpcmVEdXJhdGlvbkRhdGVcbiAgICApO1xuXG4gICAgaWYgKGRlZmluZWQodGlsZS5leHBpcmVEYXRlKSkge1xuICAgICAgaWYgKEp1bGlhbkRhdGUubGVzc1RoYW4odGlsZS5leHBpcmVEYXRlLCBleHBpcmVEdXJhdGlvbkRhdGUpKSB7XG4gICAgICAgIEp1bGlhbkRhdGUuY2xvbmUoZXhwaXJlRHVyYXRpb25EYXRlLCB0aWxlLmV4cGlyZURhdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aWxlLmV4cGlyZURhdGUgPSBKdWxpYW5EYXRlLmNsb25lKGV4cGlyZUR1cmF0aW9uRGF0ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByaW9yaXR5RnVuY3Rpb24odGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aWxlLl9wcmlvcml0eTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXF1ZXN0cyB0aGUgdGlsZSdzIGNvbnRlbnQuXG4gKiA8cD5cbiAqIFRoZSByZXF1ZXN0IG1heSBub3QgYmUgbWFkZSBpZiB0aGUgQ2VzaXVtIFJlcXVlc3QgU2NoZWR1bGVyIGNhbid0IHByaW9yaXRpemUgaXQuXG4gKiA8L3A+XG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIHJlcXVlc3RzIHRoYXQgd2VyZSBhdHRlbXB0ZWQgYnV0IG5vdCBzY2hlZHVsZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5DZXNpdW0zRFRpbGUucHJvdG90eXBlLnJlcXVlc3RDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAvLyBlbXB0eSBjb250ZW50cyBkb24ndCByZXF1aXJlIGFueSBIVFRQIHJlcXVlc3RzXG4gIGlmICh0aGlzLmhhc0VtcHR5Q29udGVudCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKHRoaXMuaGFzTXVsdGlwbGVDb250ZW50cykge1xuICAgIHJldHVybiByZXF1ZXN0TXVsdGlwbGVDb250ZW50cyh0aGlzKTtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0U2luZ2xlQ29udGVudCh0aGlzKTtcbn07XG5cbi8qKlxuICogVGhlIDxjb2RlPjNEVElMRVNfbXVsdGlwbGVfY29udGVudHM8L2NvZGU+IGV4dGVuc2lvbiBhbGxvd3MgbXVsdGlwbGVcbiAqIHtAbGluayBDZXNpdW0zRFRpbGVDb250ZW50fSB3aXRoaW4gYSBzaW5nbGUgdGlsZS4gRHVlIHRvIGRpZmZlcmVuY2VzXG4gKiBpbiByZXF1ZXN0IHNjaGVkdWxpbmcsIHRoaXMgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5LlxuICogPHA+XG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIDxjb2RlPjNEVElMRVNfbXVsdGlwbGVfY29udGVudHM8L2NvZGU+IGRvZXMgbm90XG4gKiBzdXBwb3J0IHRpbGUgZXhwaXJ5IGxpa2UgcmVxdWVzdFNpbmdsZUNvbnRlbnQgZG9lcy4gSWYgdGhpcyBjaGFuZ2VzLFxuICogbm90ZSB0aGF0IHRoZSByZXNvdXJjZS5zZXRRdWVyeVBhcmFtZXRlcnMoKSBkZXRhaWxzIG11c3QgZ28gaW5zaWRlIHtAbGluayBNdWx0aXBsZTNEVGlsZUNvbnRlbnR9IHNpbmNlIHRoYXQgaXMgcGVyLXJlcXVlc3QuXG4gKiA8L3A+XG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVxdWVzdE11bHRpcGxlQ29udGVudHModGlsZSkge1xuICB2YXIgbXVsdGlwbGVDb250ZW50cyA9IHRpbGUuX2NvbnRlbnQ7XG4gIHZhciB0aWxlc2V0ID0gdGlsZS5fdGlsZXNldDtcblxuICBpZiAoIWRlZmluZWQobXVsdGlwbGVDb250ZW50cykpIHtcbiAgICAvLyBDcmVhdGUgdGhlIGNvbnRlbnQgb2JqZWN0IGltbWVkaWF0ZWx5LCBpdCB3aWxsIGhhbmRsZSBzY2hlZHVsaW5nXG4gICAgLy8gcmVxdWVzdHMgZm9yIGlubmVyIGNvbnRlbnRzLlxuICAgIHZhciBleHRlbnNpb25IZWFkZXIgPSB0aWxlLl9oZWFkZXIuZXh0ZW5zaW9uc1tcIjNEVElMRVNfbXVsdGlwbGVfY29udGVudHNcIl07XG4gICAgbXVsdGlwbGVDb250ZW50cyA9IG5ldyBNdWx0aXBsZTNEVGlsZUNvbnRlbnQoXG4gICAgICB0aWxlc2V0LFxuICAgICAgdGlsZSxcbiAgICAgIHRpbGUuX2NvbnRlbnRSZXNvdXJjZS5jbG9uZSgpLFxuICAgICAgZXh0ZW5zaW9uSGVhZGVyXG4gICAgKTtcbiAgICB0aWxlLl9jb250ZW50ID0gbXVsdGlwbGVDb250ZW50cztcbiAgfVxuXG4gIHZhciBiYWNrbG9nZ2VkUmVxdWVzdENvdW50ID0gbXVsdGlwbGVDb250ZW50cy5yZXF1ZXN0SW5uZXJDb250ZW50cygpO1xuICBpZiAoYmFja2xvZ2dlZFJlcXVlc3RDb3VudCA+IDApIHtcbiAgICByZXR1cm4gYmFja2xvZ2dlZFJlcXVlc3RDb3VudDtcbiAgfVxuXG4gIHRpbGUuX2NvbnRlbnRTdGF0ZSA9IENlc2l1bTNEVGlsZUNvbnRlbnRTdGF0ZS5MT0FESU5HO1xuICB0aWxlLl9jb250ZW50UmVhZHlUb1Byb2Nlc3NQcm9taXNlID0gd2hlbi5kZWZlcigpO1xuICB0aWxlLl9jb250ZW50UmVhZHlQcm9taXNlID0gd2hlbi5kZWZlcigpO1xuXG4gIG11bHRpcGxlQ29udGVudHMuY29udGVudHNGZXRjaGVkUHJvbWlzZVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aWxlLl9jb250ZW50U3RhdGUgIT09IENlc2l1bTNEVGlsZUNvbnRlbnRTdGF0ZS5MT0FESU5HKSB7XG4gICAgICAgIC8vIHRpbGUgd2FzIGNhbmNlbGVkLCBzaG9ydCBjaXJjdWl0LlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aWxlLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgICAgbXVsdGlwbGVDb250ZW50RmFpbGVkKFxuICAgICAgICAgIHRpbGUsXG4gICAgICAgICAgdGlsZXNldCxcbiAgICAgICAgICBcIlRpbGUgd2FzIHVubG9hZGVkIHdoaWxlIGNvbnRlbnQgd2FzIGxvYWRpbmdcIlxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRpbGUuX2NvbnRlbnRTdGF0ZSA9IENlc2l1bTNEVGlsZUNvbnRlbnRTdGF0ZS5QUk9DRVNTSU5HO1xuICAgICAgdGlsZS5fY29udGVudFJlYWR5VG9Qcm9jZXNzUHJvbWlzZS5yZXNvbHZlKG11bHRpcGxlQ29udGVudHMpO1xuXG4gICAgICByZXR1cm4gbXVsdGlwbGVDb250ZW50cy5yZWFkeVByb21pc2UudGhlbihmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAodGlsZS5pc0Rlc3Ryb3llZCgpKSB7XG4gICAgICAgICAgbXVsdGlwbGVDb250ZW50RmFpbGVkKFxuICAgICAgICAgICAgdGlsZSxcbiAgICAgICAgICAgIHRpbGVzZXQsXG4gICAgICAgICAgICBcIlRpbGUgd2FzIHVubG9hZGVkIHdoaWxlIGNvbnRlbnQgd2FzIHByb2Nlc3NpbmdcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVmcmVzaCBzdHlsZSBmb3IgZXhwaXJlZCBjb250ZW50XG4gICAgICAgIHRpbGUuX3NlbGVjdGVkRnJhbWUgPSAwO1xuICAgICAgICB0aWxlLmxhc3RTdHlsZVRpbWUgPSAwLjA7XG5cbiAgICAgICAgSnVsaWFuRGF0ZS5ub3codGlsZS5fbG9hZFRpbWVzdGFtcCk7XG4gICAgICAgIHRpbGUuX2NvbnRlbnRTdGF0ZSA9IENlc2l1bTNEVGlsZUNvbnRlbnRTdGF0ZS5SRUFEWTtcbiAgICAgICAgdGlsZS5fY29udGVudFJlYWR5UHJvbWlzZS5yZXNvbHZlKGNvbnRlbnQpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICAub3RoZXJ3aXNlKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgbXVsdGlwbGVDb250ZW50RmFpbGVkKHRpbGUsIHRpbGVzZXQsIGVycm9yKTtcbiAgICB9KTtcblxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZW50RmFpbGVkKHRpbGUsIHRpbGVzZXQsIGVycm9yKSB7XG4gIC8vIG5vdGU6IFRoZSBNdWx0aXBsZTNEVGlsZUNvbnRlbnQgaGFuZGxlcyBkZWNyZW1lbnRpbmcgdGhlIG51bWJlciBvZiBwZW5kaW5nXG4gIC8vIHJlcXVlc3RzIGlmIHRoZSBzdGF0ZSBpcyBMT0FESU5HLlxuICBpZiAodGlsZS5fY29udGVudFN0YXRlID09PSBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUuUFJPQ0VTU0lORykge1xuICAgIC0tdGlsZXNldC5zdGF0aXN0aWNzLm51bWJlck9mVGlsZXNQcm9jZXNzaW5nO1xuICB9XG5cbiAgdGlsZS5fY29udGVudFN0YXRlID0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLkZBSUxFRDtcbiAgdGlsZS5fY29udGVudFJlYWR5UHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB0aWxlLl9jb250ZW50UmVhZHlUb1Byb2Nlc3NQcm9taXNlLnJlamVjdChlcnJvcik7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RTaW5nbGVDb250ZW50KHRpbGUpIHtcbiAgLy8gaXQgaXMgaW1wb3J0YW50IHRvIGNsb25lIGhlcmUuIFRoZSBmZXRjaEFycmF5QnVmZmVyKCkgYmVsb3cgdXNlc1xuICAvLyB0aHJvdHRsaW5nLCBidXQgb3RoZXIgdXNlcyBvZiB0aGUgcmVzb3VyY2VzIGRvIG5vdC5cbiAgdmFyIHJlc291cmNlID0gdGlsZS5fY29udGVudFJlc291cmNlLmNsb25lKCk7XG4gIHZhciBleHBpcmVkID0gdGlsZS5jb250ZW50RXhwaXJlZDtcbiAgaWYgKGV4cGlyZWQpIHtcbiAgICAvLyBBcHBlbmQgYSBxdWVyeSBwYXJhbWV0ZXIgb2YgdGhlIHRpbGUgZXhwaXJhdGlvbiBkYXRlIHRvIHByZXZlbnQgY2FjaGluZ1xuICAgIHJlc291cmNlLnNldFF1ZXJ5UGFyYW1ldGVycyh7XG4gICAgICBleHBpcmVkOiB0aWxlLmV4cGlyZURhdGUudG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgfVxuXG4gIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3Qoe1xuICAgIHRocm90dGxlOiB0cnVlLFxuICAgIHRocm90dGxlQnlTZXJ2ZXI6IHRydWUsXG4gICAgdHlwZTogUmVxdWVzdFR5cGUuVElMRVMzRCxcbiAgICBwcmlvcml0eUZ1bmN0aW9uOiBjcmVhdGVQcmlvcml0eUZ1bmN0aW9uKHRpbGUpLFxuICAgIHNlcnZlcktleTogdGlsZS5fc2VydmVyS2V5LFxuICB9KTtcblxuICB0aWxlLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgcmVzb3VyY2UucmVxdWVzdCA9IHJlcXVlc3Q7XG5cbiAgdmFyIHByb21pc2UgPSByZXNvdXJjZS5mZXRjaEFycmF5QnVmZmVyKCk7XG4gIGlmICghZGVmaW5lZChwcm9taXNlKSkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB0aWxlLl9jb250ZW50U3RhdGU7XG4gIHZhciB0aWxlc2V0ID0gdGlsZS5fdGlsZXNldDtcbiAgdGlsZS5fY29udGVudFN0YXRlID0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLkxPQURJTkc7XG4gIHRpbGUuX2NvbnRlbnRSZWFkeVRvUHJvY2Vzc1Byb21pc2UgPSB3aGVuLmRlZmVyKCk7XG4gIHRpbGUuX2NvbnRlbnRSZWFkeVByb21pc2UgPSB3aGVuLmRlZmVyKCk7XG4gICsrdGlsZXNldC5zdGF0aXN0aWNzLm51bWJlck9mUGVuZGluZ1JlcXVlc3RzO1xuXG4gIHByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbiAoYXJyYXlCdWZmZXIpIHtcbiAgICAgIGlmICh0aWxlLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgICAgLy8gVGlsZSBpcyB1bmxvYWRlZCBiZWZvcmUgdGhlIGNvbnRlbnQgZmluaXNoZXMgbG9hZGluZ1xuICAgICAgICBzaW5nbGVDb250ZW50RmFpbGVkKHRpbGUsIHRpbGVzZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50ID0gbWFrZUNvbnRlbnQodGlsZSwgYXJyYXlCdWZmZXIpO1xuXG4gICAgICBpZiAoZXhwaXJlZCkge1xuICAgICAgICB0aWxlLmV4cGlyZURhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHRpbGUuX2NvbnRlbnQgPSBjb250ZW50O1xuICAgICAgdGlsZS5fY29udGVudFN0YXRlID0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlBST0NFU1NJTkc7XG4gICAgICB0aWxlLl9jb250ZW50UmVhZHlUb1Byb2Nlc3NQcm9taXNlLnJlc29sdmUoY29udGVudCk7XG4gICAgICAtLXRpbGVzZXQuc3RhdGlzdGljcy5udW1iZXJPZlBlbmRpbmdSZXF1ZXN0cztcblxuICAgICAgcmV0dXJuIGNvbnRlbnQucmVhZHlQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHRpbGUuaXNEZXN0cm95ZWQoKSkge1xuICAgICAgICAgIC8vIFRpbGUgaXMgdW5sb2FkZWQgYmVmb3JlIHRoZSBjb250ZW50IGZpbmlzaGVzIHByb2Nlc3NpbmdcbiAgICAgICAgICBzaW5nbGVDb250ZW50RmFpbGVkKHRpbGUsIHRpbGVzZXQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVFeHBpcmVEYXRlKHRpbGUpO1xuXG4gICAgICAgIC8vIFJlZnJlc2ggc3R5bGUgZm9yIGV4cGlyZWQgY29udGVudFxuICAgICAgICB0aWxlLl9zZWxlY3RlZEZyYW1lID0gMDtcbiAgICAgICAgdGlsZS5sYXN0U3R5bGVUaW1lID0gMC4wO1xuXG4gICAgICAgIEp1bGlhbkRhdGUubm93KHRpbGUuX2xvYWRUaW1lc3RhbXApO1xuICAgICAgICB0aWxlLl9jb250ZW50U3RhdGUgPSBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUuUkVBRFk7XG4gICAgICAgIHRpbGUuX2NvbnRlbnRSZWFkeVByb21pc2UucmVzb2x2ZShjb250ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLm90aGVyd2lzZShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGUuQ0FOQ0VMTEVEKSB7XG4gICAgICAgIC8vIENhbmNlbGxlZCBkdWUgdG8gbG93IHByaW9yaXR5IC0gdHJ5IGFnYWluIGxhdGVyLlxuICAgICAgICB0aWxlLl9jb250ZW50U3RhdGUgPSBwcmV2aW91c1N0YXRlO1xuICAgICAgICAtLXRpbGVzZXQuc3RhdGlzdGljcy5udW1iZXJPZlBlbmRpbmdSZXF1ZXN0cztcbiAgICAgICAgKyt0aWxlc2V0LnN0YXRpc3RpY3MubnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0cztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2luZ2xlQ29udGVudEZhaWxlZCh0aWxlLCB0aWxlc2V0LCBlcnJvcik7XG4gICAgfSk7XG5cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIHNpbmdsZUNvbnRlbnRGYWlsZWQodGlsZSwgdGlsZXNldCwgZXJyb3IpIHtcbiAgaWYgKHRpbGUuX2NvbnRlbnRTdGF0ZSA9PT0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlBST0NFU1NJTkcpIHtcbiAgICAtLXRpbGVzZXQuc3RhdGlzdGljcy5udW1iZXJPZlRpbGVzUHJvY2Vzc2luZztcbiAgfSBlbHNlIHtcbiAgICAtLXRpbGVzZXQuc3RhdGlzdGljcy5udW1iZXJPZlBlbmRpbmdSZXF1ZXN0cztcbiAgfVxuICB0aWxlLl9jb250ZW50U3RhdGUgPSBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUuRkFJTEVEO1xuICB0aWxlLl9jb250ZW50UmVhZHlQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIHRpbGUuX2NvbnRlbnRSZWFkeVRvUHJvY2Vzc1Byb21pc2UucmVqZWN0KGVycm9yKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGRvd25sb2FkZWQgY29udGVudCBwYXlsb2FkLCBjb25zdHJ1Y3QgYSB7QGxpbmsgQ2VzaXVtM0RUaWxlQ29udGVudH0uXG4gKiA8cD5cbiAqIFRoaXMgaXMgb25seSB1c2VkIGZvciBzaW5nbGUgY29udGVudHMuXG4gKiA8L3A+XG4gKlxuICogQHBhcmFtIHtDZXNpdW0zRFRpbGV9IHRpbGUgVGhlIHRpbGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBkb3dubG9hZGVkIHBheWxvYWQgY29udGFpbmluZyBkYXRhIGZvciB0aGUgY29udGVudFxuICogQHJldHVybiB7Q2VzaXVtM0RUaWxlQ29udGVudH0gQSBjb250ZW50IG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFrZUNvbnRlbnQodGlsZSwgYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHByZXByb2Nlc3NlZCA9IHByZXByb2Nlc3MzRFRpbGVDb250ZW50KGFycmF5QnVmZmVyKTtcblxuICAvLyBWZWN0b3IgYW5kIEdlb21ldHJ5IHRpbGUgcmVuZGVyaW5nIGRvIG5vdCBzdXBwb3J0IHRoZSBza2lwIExPRCBvcHRpbWl6YXRpb24uXG4gIHZhciB0aWxlc2V0ID0gdGlsZS5fdGlsZXNldDtcbiAgdGlsZXNldC5fZGlzYWJsZVNraXBMZXZlbE9mRGV0YWlsID1cbiAgICB0aWxlc2V0Ll9kaXNhYmxlU2tpcExldmVsT2ZEZXRhaWwgfHxcbiAgICBwcmVwcm9jZXNzZWQuY29udGVudFR5cGUgPT09IENlc2l1bTNEVGlsZUNvbnRlbnRUeXBlLkdFT01FVFJZIHx8XG4gICAgcHJlcHJvY2Vzc2VkLmNvbnRlbnRUeXBlID09PSBDZXNpdW0zRFRpbGVDb250ZW50VHlwZS5WRUNUT1I7XG5cbiAgaWYgKHByZXByb2Nlc3NlZC5jb250ZW50VHlwZSA9PT0gQ2VzaXVtM0RUaWxlQ29udGVudFR5cGUuSU1QTElDSVRfU1VCVFJFRSkge1xuICAgIHRpbGUuaGFzSW1wbGljaXRDb250ZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcmVwcm9jZXNzZWQuY29udGVudFR5cGUgPT09IENlc2l1bTNEVGlsZUNvbnRlbnRUeXBlLkVYVEVSTkFMX1RJTEVTRVQpIHtcbiAgICB0aWxlLmhhc1RpbGVzZXRDb250ZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBjb250ZW50O1xuICB2YXIgY29udGVudEZhY3RvcnkgPSBDZXNpdW0zRFRpbGVDb250ZW50RmFjdG9yeVtwcmVwcm9jZXNzZWQuY29udGVudFR5cGVdO1xuICBpZiAoZGVmaW5lZChwcmVwcm9jZXNzZWQuYmluYXJ5UGF5bG9hZCkpIHtcbiAgICBjb250ZW50ID0gY29udGVudEZhY3RvcnkoXG4gICAgICB0aWxlc2V0LFxuICAgICAgdGlsZSxcbiAgICAgIHRpbGUuX2NvbnRlbnRSZXNvdXJjZSxcbiAgICAgIHByZXByb2Nlc3NlZC5iaW5hcnlQYXlsb2FkLmJ1ZmZlcixcbiAgICAgIDBcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIEpTT04gZm9ybWF0c1xuICAgIGNvbnRlbnQgPSBjb250ZW50RmFjdG9yeShcbiAgICAgIHRpbGVzZXQsXG4gICAgICB0aWxlLFxuICAgICAgdGlsZS5fY29udGVudFJlc291cmNlLFxuICAgICAgcHJlcHJvY2Vzc2VkLmpzb25QYXlsb2FkXG4gICAgKTtcbiAgfVxuXG4gIHZhciBjb250ZW50SGVhZGVyID0gdGlsZS5faGVhZGVyLmNvbnRlbnQ7XG4gIGNvbnRlbnQuZ3JvdXBNZXRhZGF0YSA9IGZpbmRHcm91cE1ldGFkYXRhKHRpbGVzZXQsIGNvbnRlbnRIZWFkZXIpO1xuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBDYW5jZWwgcmVxdWVzdHMgZm9yIHRoZSB0aWxlJ3MgY29udGVudHMuIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhlIHRpbGVcbiAqIGdvZXMgb3V0IG9mIHZpZXcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlLnByb3RvdHlwZS5jYW5jZWxSZXF1ZXN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuaGFzTXVsdGlwbGVDb250ZW50cykge1xuICAgIHRoaXMuX2NvbnRlbnQuY2FuY2VsUmVxdWVzdHMoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9yZXF1ZXN0LmNhbmNlbCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFVubG9hZHMgdGhlIHRpbGUncyBjb250ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUudW5sb2FkQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKFxuICAgIHRoaXMuaGFzRW1wdHlDb250ZW50IHx8XG4gICAgdGhpcy5oYXNUaWxlc2V0Q29udGVudCB8fFxuICAgIHRoaXMuaGFzSW1wbGljaXRDb250ZW50XG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2NvbnRlbnQgPSB0aGlzLl9jb250ZW50ICYmIHRoaXMuX2NvbnRlbnQuZGVzdHJveSgpO1xuICB0aGlzLl9jb250ZW50U3RhdGUgPSBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUuVU5MT0FERUQ7XG4gIHRoaXMuX2NvbnRlbnRSZWFkeVRvUHJvY2Vzc1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2NvbnRlbnRSZWFkeVByb21pc2UgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy5sYXN0U3R5bGVUaW1lID0gMC4wO1xuICB0aGlzLmNsaXBwaW5nUGxhbmVzRGlydHkgPSB0aGlzLl9jbGlwcGluZ1BsYW5lc1N0YXRlID09PSAwO1xuICB0aGlzLl9jbGlwcGluZ1BsYW5lc1N0YXRlID0gMDtcblxuICB0aGlzLl9kZWJ1Z0NvbG9yaXplVGlsZXMgPSBmYWxzZTtcblxuICB0aGlzLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lID1cbiAgICB0aGlzLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lICYmIHRoaXMuX2RlYnVnQm91bmRpbmdWb2x1bWUuZGVzdHJveSgpO1xuICB0aGlzLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZSA9XG4gICAgdGhpcy5fZGVidWdDb250ZW50Qm91bmRpbmdWb2x1bWUgJiZcbiAgICB0aGlzLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZS5kZXN0cm95KCk7XG4gIHRoaXMuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZSA9XG4gICAgdGhpcy5fZGVidWdWaWV3ZXJSZXF1ZXN0Vm9sdW1lICYmIHRoaXMuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZS5kZXN0cm95KCk7XG59O1xuXG52YXIgc2NyYXRjaFByb2plY3RlZEJvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7XG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nVm9sdW1lKHRpbGUsIGZyYW1lU3RhdGUpIHtcbiAgaWYgKFxuICAgIGZyYW1lU3RhdGUubW9kZSAhPT0gU2NlbmVNb2RlLlNDRU5FM0QgJiZcbiAgICAhZGVmaW5lZCh0aWxlLl9ib3VuZGluZ1ZvbHVtZTJEKVxuICApIHtcbiAgICB2YXIgYm91bmRpbmdTcGhlcmUgPSB0aWxlLl9ib3VuZGluZ1ZvbHVtZS5ib3VuZGluZ1NwaGVyZTtcbiAgICB2YXIgc3BoZXJlID0gQm91bmRpbmdTcGhlcmUucHJvamVjdFRvMkQoXG4gICAgICBib3VuZGluZ1NwaGVyZSxcbiAgICAgIGZyYW1lU3RhdGUubWFwUHJvamVjdGlvbixcbiAgICAgIHNjcmF0Y2hQcm9qZWN0ZWRCb3VuZGluZ1NwaGVyZVxuICAgICk7XG4gICAgdGlsZS5fYm91bmRpbmdWb2x1bWUyRCA9IG5ldyBUaWxlQm91bmRpbmdTcGhlcmUoXG4gICAgICBzcGhlcmUuY2VudGVyLFxuICAgICAgc3BoZXJlLnJhZGl1c1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gZnJhbWVTdGF0ZS5tb2RlICE9PSBTY2VuZU1vZGUuU0NFTkUzRFxuICAgID8gdGlsZS5fYm91bmRpbmdWb2x1bWUyRFxuICAgIDogdGlsZS5fYm91bmRpbmdWb2x1bWU7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRlbnRCb3VuZGluZ1ZvbHVtZSh0aWxlLCBmcmFtZVN0YXRlKSB7XG4gIGlmIChcbiAgICBmcmFtZVN0YXRlLm1vZGUgIT09IFNjZW5lTW9kZS5TQ0VORTNEICYmXG4gICAgIWRlZmluZWQodGlsZS5fY29udGVudEJvdW5kaW5nVm9sdW1lMkQpXG4gICkge1xuICAgIHZhciBib3VuZGluZ1NwaGVyZSA9IHRpbGUuX2NvbnRlbnRCb3VuZGluZ1ZvbHVtZS5ib3VuZGluZ1NwaGVyZTtcbiAgICB2YXIgc3BoZXJlID0gQm91bmRpbmdTcGhlcmUucHJvamVjdFRvMkQoXG4gICAgICBib3VuZGluZ1NwaGVyZSxcbiAgICAgIGZyYW1lU3RhdGUubWFwUHJvamVjdGlvbixcbiAgICAgIHNjcmF0Y2hQcm9qZWN0ZWRCb3VuZGluZ1NwaGVyZVxuICAgICk7XG4gICAgdGlsZS5fY29udGVudEJvdW5kaW5nVm9sdW1lMkQgPSBuZXcgVGlsZUJvdW5kaW5nU3BoZXJlKFxuICAgICAgc3BoZXJlLmNlbnRlcixcbiAgICAgIHNwaGVyZS5yYWRpdXNcbiAgICApO1xuICB9XG4gIHJldHVybiBmcmFtZVN0YXRlLm1vZGUgIT09IFNjZW5lTW9kZS5TQ0VORTNEXG4gICAgPyB0aWxlLl9jb250ZW50Qm91bmRpbmdWb2x1bWUyRFxuICAgIDogdGlsZS5fY29udGVudEJvdW5kaW5nVm9sdW1lO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgdGlsZSdzIGJvdW5kaW5nIHZvbHVtZSBpbnRlcnNlY3RzIHRoZSBjdWxsaW5nIHZvbHVtZS5cbiAqXG4gKiBAcGFyYW0ge0ZyYW1lU3RhdGV9IGZyYW1lU3RhdGUgVGhlIGZyYW1lIHN0YXRlLlxuICogQHBhcmFtIHtOdW1iZXJ9IHBhcmVudFZpc2liaWxpdHlQbGFuZU1hc2sgVGhlIHBhcmVudCdzIHBsYW5lIG1hc2sgdG8gc3BlZWQgdXAgdGhlIHZpc2liaWxpdHkgY2hlY2suXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBBIHBsYW5lIG1hc2sgYXMgZGVzY3JpYmVkIGFib3ZlIGluIHtAbGluayBDdWxsaW5nVm9sdW1lI2NvbXB1dGVWaXNpYmlsaXR5V2l0aFBsYW5lTWFza30uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24gKFxuICBmcmFtZVN0YXRlLFxuICBwYXJlbnRWaXNpYmlsaXR5UGxhbmVNYXNrXG4pIHtcbiAgdmFyIGN1bGxpbmdWb2x1bWUgPSBmcmFtZVN0YXRlLmN1bGxpbmdWb2x1bWU7XG4gIHZhciBib3VuZGluZ1ZvbHVtZSA9IGdldEJvdW5kaW5nVm9sdW1lKHRoaXMsIGZyYW1lU3RhdGUpO1xuXG4gIHZhciB0aWxlc2V0ID0gdGhpcy5fdGlsZXNldDtcbiAgdmFyIGNsaXBwaW5nUGxhbmVzID0gdGlsZXNldC5jbGlwcGluZ1BsYW5lcztcbiAgaWYgKGRlZmluZWQoY2xpcHBpbmdQbGFuZXMpICYmIGNsaXBwaW5nUGxhbmVzLmVuYWJsZWQpIHtcbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2xpcHBpbmdQbGFuZXMuY29tcHV0ZUludGVyc2VjdGlvbldpdGhCb3VuZGluZ1ZvbHVtZShcbiAgICAgIGJvdW5kaW5nVm9sdW1lLFxuICAgICAgdGlsZXNldC5jbGlwcGluZ1BsYW5lc09yaWdpbk1hdHJpeFxuICAgICk7XG4gICAgdGhpcy5faXNDbGlwcGVkID0gaW50ZXJzZWN0aW9uICE9PSBJbnRlcnNlY3QuSU5TSURFO1xuICAgIGlmIChpbnRlcnNlY3Rpb24gPT09IEludGVyc2VjdC5PVVRTSURFKSB7XG4gICAgICByZXR1cm4gQ3VsbGluZ1ZvbHVtZS5NQVNLX09VVFNJREU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGN1bGxpbmdWb2x1bWUuY29tcHV0ZVZpc2liaWxpdHlXaXRoUGxhbmVNYXNrKFxuICAgIGJvdW5kaW5nVm9sdW1lLFxuICAgIHBhcmVudFZpc2liaWxpdHlQbGFuZU1hc2tcbiAgKTtcbn07XG5cbi8qKlxuICogQXNzdW1pbmcgdGhlIHRpbGUncyBib3VuZGluZyB2b2x1bWUgaW50ZXJzZWN0cyB0aGUgY3VsbGluZyB2b2x1bWUsIGRldGVybWluZXNcbiAqIHdoZXRoZXIgdGhlIHRpbGUncyBjb250ZW50J3MgYm91bmRpbmcgdm9sdW1lIGludGVyc2VjdHMgdGhlIGN1bGxpbmcgdm9sdW1lLlxuICpcbiAqIEBwYXJhbSB7RnJhbWVTdGF0ZX0gZnJhbWVTdGF0ZSBUaGUgZnJhbWUgc3RhdGUuXG4gKiBAcmV0dXJucyB7SW50ZXJzZWN0fSBUaGUgcmVzdWx0IG9mIHRoZSBpbnRlcnNlY3Rpb246IHRoZSB0aWxlJ3MgY29udGVudCBpcyBjb21wbGV0ZWx5IG91dHNpZGUsIGNvbXBsZXRlbHkgaW5zaWRlLCBvciBpbnRlcnNlY3RpbmcgdGhlIGN1bGxpbmcgdm9sdW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUuY29udGVudFZpc2liaWxpdHkgPSBmdW5jdGlvbiAoZnJhbWVTdGF0ZSkge1xuICAvLyBBc3N1bWVzIHRoZSB0aWxlJ3MgYm91bmRpbmcgdm9sdW1lIGludGVyc2VjdHMgdGhlIGN1bGxpbmcgdm9sdW1lIGFscmVhZHksIHNvXG4gIC8vIGp1c3QgcmV0dXJuIEludGVyc2VjdC5JTlNJREUgaWYgdGhlcmUgaXMgbm8gY29udGVudCBib3VuZGluZyB2b2x1bWUuXG4gIGlmICghZGVmaW5lZCh0aGlzLl9jb250ZW50Qm91bmRpbmdWb2x1bWUpKSB7XG4gICAgcmV0dXJuIEludGVyc2VjdC5JTlNJREU7XG4gIH1cblxuICBpZiAodGhpcy5fdmlzaWJpbGl0eVBsYW5lTWFzayA9PT0gQ3VsbGluZ1ZvbHVtZS5NQVNLX0lOU0lERSkge1xuICAgIC8vIFRoZSB0aWxlJ3MgYm91bmRpbmcgdm9sdW1lIGlzIGNvbXBsZXRlbHkgaW5zaWRlIHRoZSBjdWxsaW5nIHZvbHVtZSBzb1xuICAgIC8vIHRoZSBjb250ZW50IGJvdW5kaW5nIHZvbHVtZSBtdXN0IGFsc28gYmUgaW5zaWRlLlxuICAgIHJldHVybiBJbnRlcnNlY3QuSU5TSURFO1xuICB9XG5cbiAgLy8gUEVSRk9STUFOQ0VfSURFQTogaXMgaXQgcG9zc2libGUgdG8gYnVybiBsZXNzIENQVSBvbiB0aGlzIHRlc3Qgc2luY2Ugd2Uga25vdyB0aGVcbiAgLy8gdGlsZSdzIChub3QgdGhlIGNvbnRlbnQncykgYm91bmRpbmcgdm9sdW1lIGludGVyc2VjdHMgdGhlIGN1bGxpbmcgdm9sdW1lP1xuICB2YXIgY3VsbGluZ1ZvbHVtZSA9IGZyYW1lU3RhdGUuY3VsbGluZ1ZvbHVtZTtcbiAgdmFyIGJvdW5kaW5nVm9sdW1lID0gZ2V0Q29udGVudEJvdW5kaW5nVm9sdW1lKHRoaXMsIGZyYW1lU3RhdGUpO1xuXG4gIHZhciB0aWxlc2V0ID0gdGhpcy5fdGlsZXNldDtcbiAgdmFyIGNsaXBwaW5nUGxhbmVzID0gdGlsZXNldC5jbGlwcGluZ1BsYW5lcztcbiAgaWYgKGRlZmluZWQoY2xpcHBpbmdQbGFuZXMpICYmIGNsaXBwaW5nUGxhbmVzLmVuYWJsZWQpIHtcbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2xpcHBpbmdQbGFuZXMuY29tcHV0ZUludGVyc2VjdGlvbldpdGhCb3VuZGluZ1ZvbHVtZShcbiAgICAgIGJvdW5kaW5nVm9sdW1lLFxuICAgICAgdGlsZXNldC5jbGlwcGluZ1BsYW5lc09yaWdpbk1hdHJpeFxuICAgICk7XG4gICAgdGhpcy5faXNDbGlwcGVkID0gaW50ZXJzZWN0aW9uICE9PSBJbnRlcnNlY3QuSU5TSURFO1xuICAgIGlmIChpbnRlcnNlY3Rpb24gPT09IEludGVyc2VjdC5PVVRTSURFKSB7XG4gICAgICByZXR1cm4gSW50ZXJzZWN0Lk9VVFNJREU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGN1bGxpbmdWb2x1bWUuY29tcHV0ZVZpc2liaWxpdHkoYm91bmRpbmdWb2x1bWUpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgKHBvdGVudGlhbGx5IGFwcHJveGltYXRlKSBkaXN0YW5jZSBmcm9tIHRoZSBjbG9zZXN0IHBvaW50IG9mIHRoZSB0aWxlJ3MgYm91bmRpbmcgdm9sdW1lIHRvIHRoZSBjYW1lcmEuXG4gKlxuICogQHBhcmFtIHtGcmFtZVN0YXRlfSBmcmFtZVN0YXRlIFRoZSBmcmFtZSBzdGF0ZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBkaXN0YW5jZSwgaW4gbWV0ZXJzLCBvciB6ZXJvIGlmIHRoZSBjYW1lcmEgaXMgaW5zaWRlIHRoZSBib3VuZGluZyB2b2x1bWUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlLnByb3RvdHlwZS5kaXN0YW5jZVRvVGlsZSA9IGZ1bmN0aW9uIChmcmFtZVN0YXRlKSB7XG4gIHZhciBib3VuZGluZ1ZvbHVtZSA9IGdldEJvdW5kaW5nVm9sdW1lKHRoaXMsIGZyYW1lU3RhdGUpO1xuICByZXR1cm4gYm91bmRpbmdWb2x1bWUuZGlzdGFuY2VUb0NhbWVyYShmcmFtZVN0YXRlKTtcbn07XG5cbnZhciBzY3JhdGNoVG9UaWxlQ2VudGVyID0gbmV3IENhcnRlc2lhbjMoKTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSB0aWxlJ3MgYm91bmRpbmcgdm9sdW1lIHRvIHRoZSBjYW1lcmEncyBwbGFuZSBkZWZpbmVkIGJ5IGl0cyBwb3NpdGlvbiBhbmQgdmlldyBkaXJlY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGcmFtZVN0YXRlfSBmcmFtZVN0YXRlIFRoZSBmcmFtZSBzdGF0ZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBkaXN0YW5jZSwgaW4gbWV0ZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUuZGlzdGFuY2VUb1RpbGVDZW50ZXIgPSBmdW5jdGlvbiAoZnJhbWVTdGF0ZSkge1xuICB2YXIgdGlsZUJvdW5kaW5nVm9sdW1lID0gZ2V0Qm91bmRpbmdWb2x1bWUodGhpcywgZnJhbWVTdGF0ZSk7XG4gIHZhciBib3VuZGluZ1ZvbHVtZSA9IHRpbGVCb3VuZGluZ1ZvbHVtZS5ib3VuZGluZ1ZvbHVtZTsgLy8gR2V0cyB0aGUgdW5kZXJseWluZyBPcmllbnRlZEJvdW5kaW5nQm94IG9yIEJvdW5kaW5nU3BoZXJlXG4gIHZhciB0b0NlbnRlciA9IENhcnRlc2lhbjMuc3VidHJhY3QoXG4gICAgYm91bmRpbmdWb2x1bWUuY2VudGVyLFxuICAgIGZyYW1lU3RhdGUuY2FtZXJhLnBvc2l0aW9uV0MsXG4gICAgc2NyYXRjaFRvVGlsZUNlbnRlclxuICApO1xuICByZXR1cm4gQ2FydGVzaWFuMy5kb3QoZnJhbWVTdGF0ZS5jYW1lcmEuZGlyZWN0aW9uV0MsIHRvQ2VudGVyKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjYW1lcmEgaXMgaW5zaWRlIHRoZSB2aWV3ZXIgcmVxdWVzdCB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtGcmFtZVN0YXRlfSBmcmFtZVN0YXRlIFRoZSBmcmFtZSBzdGF0ZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBjYW1lcmEgaXMgaW5zaWRlIHRoZSB2b2x1bWUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlLnByb3RvdHlwZS5pbnNpZGVWaWV3ZXJSZXF1ZXN0Vm9sdW1lID0gZnVuY3Rpb24gKGZyYW1lU3RhdGUpIHtcbiAgdmFyIHZpZXdlclJlcXVlc3RWb2x1bWUgPSB0aGlzLl92aWV3ZXJSZXF1ZXN0Vm9sdW1lO1xuICByZXR1cm4gKFxuICAgICFkZWZpbmVkKHZpZXdlclJlcXVlc3RWb2x1bWUpIHx8XG4gICAgdmlld2VyUmVxdWVzdFZvbHVtZS5kaXN0YW5jZVRvQ2FtZXJhKGZyYW1lU3RhdGUpID09PSAwLjBcbiAgKTtcbn07XG5cbnZhciBzY3JhdGNoTWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcbnZhciBzY3JhdGNoU2NhbGUgPSBuZXcgQ2FydGVzaWFuMygpO1xudmFyIHNjcmF0Y2hIYWxmQXhlcyA9IG5ldyBNYXRyaXgzKCk7XG52YXIgc2NyYXRjaENlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG52YXIgc2NyYXRjaFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoKTtcbnZhciBzY3JhdGNoT3JpZW50ZWRCb3VuZGluZ0JveCA9IG5ldyBPcmllbnRlZEJvdW5kaW5nQm94KCk7XG52YXIgc2NyYXRjaFRyYW5zZm9ybSA9IG5ldyBNYXRyaXg0KCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUJveChib3gsIHRyYW5zZm9ybSwgcmVzdWx0KSB7XG4gIHZhciBjZW50ZXIgPSBDYXJ0ZXNpYW4zLmZyb21FbGVtZW50cyhib3hbMF0sIGJveFsxXSwgYm94WzJdLCBzY3JhdGNoQ2VudGVyKTtcbiAgdmFyIGhhbGZBeGVzID0gTWF0cml4My5mcm9tQXJyYXkoYm94LCAzLCBzY3JhdGNoSGFsZkF4ZXMpO1xuXG4gIC8vIEZpbmQgdGhlIHRyYW5zZm9ybWVkIGNlbnRlciBhbmQgaGFsZkF4ZXNcbiAgY2VudGVyID0gTWF0cml4NC5tdWx0aXBseUJ5UG9pbnQodHJhbnNmb3JtLCBjZW50ZXIsIGNlbnRlcik7XG4gIHZhciByb3RhdGlvblNjYWxlID0gTWF0cml4NC5nZXRNYXRyaXgzKHRyYW5zZm9ybSwgc2NyYXRjaE1hdHJpeCk7XG4gIGhhbGZBeGVzID0gTWF0cml4My5tdWx0aXBseShyb3RhdGlvblNjYWxlLCBoYWxmQXhlcywgaGFsZkF4ZXMpO1xuXG4gIGlmIChkZWZpbmVkKHJlc3VsdCkpIHtcbiAgICByZXN1bHQudXBkYXRlKGNlbnRlciwgaGFsZkF4ZXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIG5ldyBUaWxlT3JpZW50ZWRCb3VuZGluZ0JveChjZW50ZXIsIGhhbGZBeGVzKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQm94RnJvbVRyYW5zZm9ybWVkUmVnaW9uKFxuICByZWdpb24sXG4gIHRyYW5zZm9ybSxcbiAgaW5pdGlhbFRyYW5zZm9ybSxcbiAgcmVzdWx0XG4pIHtcbiAgdmFyIHJlY3RhbmdsZSA9IFJlY3RhbmdsZS51bnBhY2socmVnaW9uLCAwLCBzY3JhdGNoUmVjdGFuZ2xlKTtcbiAgdmFyIG1pbmltdW1IZWlnaHQgPSByZWdpb25bNF07XG4gIHZhciBtYXhpbXVtSGVpZ2h0ID0gcmVnaW9uWzVdO1xuXG4gIHZhciBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveC5mcm9tUmVjdGFuZ2xlKFxuICAgIHJlY3RhbmdsZSxcbiAgICBtaW5pbXVtSGVpZ2h0LFxuICAgIG1heGltdW1IZWlnaHQsXG4gICAgRWxsaXBzb2lkLldHUzg0LFxuICAgIHNjcmF0Y2hPcmllbnRlZEJvdW5kaW5nQm94XG4gICk7XG4gIHZhciBjZW50ZXIgPSBvcmllbnRlZEJvdW5kaW5nQm94LmNlbnRlcjtcbiAgdmFyIGhhbGZBeGVzID0gb3JpZW50ZWRCb3VuZGluZ0JveC5oYWxmQXhlcztcblxuICAvLyBBIHJlZ2lvbiBib3VuZGluZyB2b2x1bWUgaXMgbm90IHRyYW5zZm9ybWVkIGJ5IHRoZSB0cmFuc2Zvcm0gaW4gdGhlIHRpbGVzZXQgSlNPTixcbiAgLy8gYnV0IG1heSBiZSB0cmFuc2Zvcm1lZCBieSBhZGRpdGlvbmFsIHRyYW5zZm9ybXMgYXBwbGllZCBpbiBDZXNpdW0uXG4gIC8vIFRoaXMgaXMgd2h5IHRoZSB0cmFuc2Zvcm0gaXMgY2FsY3VsYXRlZCBhcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBpbml0aWFsIHRyYW5zZm9ybSBhbmQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtLlxuICB0cmFuc2Zvcm0gPSBNYXRyaXg0Lm11bHRpcGx5VHJhbnNmb3JtYXRpb24oXG4gICAgdHJhbnNmb3JtLFxuICAgIE1hdHJpeDQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uKGluaXRpYWxUcmFuc2Zvcm0sIHNjcmF0Y2hUcmFuc2Zvcm0pLFxuICAgIHNjcmF0Y2hUcmFuc2Zvcm1cbiAgKTtcbiAgY2VudGVyID0gTWF0cml4NC5tdWx0aXBseUJ5UG9pbnQodHJhbnNmb3JtLCBjZW50ZXIsIGNlbnRlcik7XG4gIHZhciByb3RhdGlvblNjYWxlID0gTWF0cml4NC5nZXRNYXRyaXgzKHRyYW5zZm9ybSwgc2NyYXRjaE1hdHJpeCk7XG4gIGhhbGZBeGVzID0gTWF0cml4My5tdWx0aXBseShyb3RhdGlvblNjYWxlLCBoYWxmQXhlcywgaGFsZkF4ZXMpO1xuXG4gIGlmIChkZWZpbmVkKHJlc3VsdCkgJiYgcmVzdWx0IGluc3RhbmNlb2YgVGlsZU9yaWVudGVkQm91bmRpbmdCb3gpIHtcbiAgICByZXN1bHQudXBkYXRlKGNlbnRlciwgaGFsZkF4ZXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IFRpbGVPcmllbnRlZEJvdW5kaW5nQm94KGNlbnRlciwgaGFsZkF4ZXMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWdpb24ocmVnaW9uLCB0cmFuc2Zvcm0sIGluaXRpYWxUcmFuc2Zvcm0sIHJlc3VsdCkge1xuICBpZiAoXG4gICAgIU1hdHJpeDQuZXF1YWxzRXBzaWxvbih0cmFuc2Zvcm0sIGluaXRpYWxUcmFuc2Zvcm0sIENlc2l1bU1hdGguRVBTSUxPTjgpXG4gICkge1xuICAgIHJldHVybiBjcmVhdGVCb3hGcm9tVHJhbnNmb3JtZWRSZWdpb24oXG4gICAgICByZWdpb24sXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBpbml0aWFsVHJhbnNmb3JtLFxuICAgICAgcmVzdWx0XG4gICAgKTtcbiAgfVxuXG4gIGlmIChkZWZpbmVkKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIHJlY3RhbmdsZVJlZ2lvbiA9IFJlY3RhbmdsZS51bnBhY2socmVnaW9uLCAwLCBzY3JhdGNoUmVjdGFuZ2xlKTtcblxuICByZXR1cm4gbmV3IFRpbGVCb3VuZGluZ1JlZ2lvbih7XG4gICAgcmVjdGFuZ2xlOiByZWN0YW5nbGVSZWdpb24sXG4gICAgbWluaW11bUhlaWdodDogcmVnaW9uWzRdLFxuICAgIG1heGltdW1IZWlnaHQ6IHJlZ2lvbls1XSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwaGVyZShzcGhlcmUsIHRyYW5zZm9ybSwgcmVzdWx0KSB7XG4gIHZhciBjZW50ZXIgPSBDYXJ0ZXNpYW4zLmZyb21FbGVtZW50cyhcbiAgICBzcGhlcmVbMF0sXG4gICAgc3BoZXJlWzFdLFxuICAgIHNwaGVyZVsyXSxcbiAgICBzY3JhdGNoQ2VudGVyXG4gICk7XG4gIHZhciByYWRpdXMgPSBzcGhlcmVbM107XG5cbiAgLy8gRmluZCB0aGUgdHJhbnNmb3JtZWQgY2VudGVyIGFuZCByYWRpdXNcbiAgY2VudGVyID0gTWF0cml4NC5tdWx0aXBseUJ5UG9pbnQodHJhbnNmb3JtLCBjZW50ZXIsIGNlbnRlcik7XG4gIHZhciBzY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUodHJhbnNmb3JtLCBzY3JhdGNoU2NhbGUpO1xuICB2YXIgdW5pZm9ybVNjYWxlID0gQ2FydGVzaWFuMy5tYXhpbXVtQ29tcG9uZW50KHNjYWxlKTtcbiAgcmFkaXVzICo9IHVuaWZvcm1TY2FsZTtcblxuICBpZiAoZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgcmVzdWx0LnVwZGF0ZShjZW50ZXIsIHJhZGl1cyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4gbmV3IFRpbGVCb3VuZGluZ1NwaGVyZShjZW50ZXIsIHJhZGl1cyk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYm91bmRpbmcgdm9sdW1lIGZyb20gdGhlIHRpbGUncyBib3VuZGluZyB2b2x1bWUgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBib3VuZGluZ1ZvbHVtZUhlYWRlciBUaGUgdGlsZSdzIGJvdW5kaW5nIHZvbHVtZSBoZWFkZXIuXG4gKiBAcGFyYW0ge01hdHJpeDR9IHRyYW5zZm9ybSBUaGUgdHJhbnNmb3JtIHRvIGFwcGx5IHRvIHRoZSBib3VuZGluZyB2b2x1bWUuXG4gKiBAcGFyYW0ge1RpbGVCb3VuZGluZ1ZvbHVtZX0gW3Jlc3VsdF0gVGhlIG9iamVjdCBvbnRvIHdoaWNoIHRvIHN0b3JlIHRoZSByZXN1bHQuXG4gKlxuICogQHJldHVybnMge1RpbGVCb3VuZGluZ1ZvbHVtZX0gVGhlIG1vZGlmaWVkIHJlc3VsdCBwYXJhbWV0ZXIgb3IgYSBuZXcgVGlsZUJvdW5kaW5nVm9sdW1lIGluc3RhbmNlIGlmIG5vbmUgd2FzIHByb3ZpZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUuY3JlYXRlQm91bmRpbmdWb2x1bWUgPSBmdW5jdGlvbiAoXG4gIGJvdW5kaW5nVm9sdW1lSGVhZGVyLFxuICB0cmFuc2Zvcm0sXG4gIHJlc3VsdFxuKSB7XG4gIGlmICghZGVmaW5lZChib3VuZGluZ1ZvbHVtZUhlYWRlcikpIHtcbiAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFwiYm91bmRpbmdWb2x1bWUgbXVzdCBiZSBkZWZpbmVkXCIpO1xuICB9XG4gIGlmIChoYXNFeHRlbnNpb24oYm91bmRpbmdWb2x1bWVIZWFkZXIsIFwiM0RUSUxFU19ib3VuZGluZ192b2x1bWVfUzJcIikpIHtcbiAgICByZXR1cm4gbmV3IFRpbGVCb3VuZGluZ1MyQ2VsbChcbiAgICAgIGJvdW5kaW5nVm9sdW1lSGVhZGVyLmV4dGVuc2lvbnNbXCIzRFRJTEVTX2JvdW5kaW5nX3ZvbHVtZV9TMlwiXVxuICAgICk7XG4gIH1cblxuICBpZiAoZGVmaW5lZChib3VuZGluZ1ZvbHVtZUhlYWRlci5ib3gpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJveChib3VuZGluZ1ZvbHVtZUhlYWRlci5ib3gsIHRyYW5zZm9ybSwgcmVzdWx0KTtcbiAgfVxuICBpZiAoZGVmaW5lZChib3VuZGluZ1ZvbHVtZUhlYWRlci5yZWdpb24pKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlZ2lvbihcbiAgICAgIGJvdW5kaW5nVm9sdW1lSGVhZGVyLnJlZ2lvbixcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHRoaXMuX2luaXRpYWxUcmFuc2Zvcm0sXG4gICAgICByZXN1bHRcbiAgICApO1xuICB9XG4gIGlmIChkZWZpbmVkKGJvdW5kaW5nVm9sdW1lSGVhZGVyLnNwaGVyZSkpIHtcbiAgICByZXR1cm4gY3JlYXRlU3BoZXJlKGJvdW5kaW5nVm9sdW1lSGVhZGVyLnNwaGVyZSwgdHJhbnNmb3JtLCByZXN1bHQpO1xuICB9XG4gIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgXCJib3VuZGluZ1ZvbHVtZSBtdXN0IGNvbnRhaW4gYSBzcGhlcmUsIHJlZ2lvbiwgb3IgYm94XCJcbiAgKTtcbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSB0aWxlJ3MgdHJhbnNmb3JtLiBUaGUgdHJhbnNmb3JtIGlzIGFwcGxpZWQgdG8gdGhlIHRpbGUncyBib3VuZGluZyB2b2x1bWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUudXBkYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gKHBhcmVudFRyYW5zZm9ybSkge1xuICBwYXJlbnRUcmFuc2Zvcm0gPSBkZWZhdWx0VmFsdWUocGFyZW50VHJhbnNmb3JtLCBNYXRyaXg0LklERU5USVRZKTtcbiAgdmFyIGNvbXB1dGVkVHJhbnNmb3JtID0gTWF0cml4NC5tdWx0aXBseShcbiAgICBwYXJlbnRUcmFuc2Zvcm0sXG4gICAgdGhpcy50cmFuc2Zvcm0sXG4gICAgc2NyYXRjaFRyYW5zZm9ybVxuICApO1xuICB2YXIgdHJhbnNmb3JtQ2hhbmdlZCA9ICFNYXRyaXg0LmVxdWFscyhcbiAgICBjb21wdXRlZFRyYW5zZm9ybSxcbiAgICB0aGlzLmNvbXB1dGVkVHJhbnNmb3JtXG4gICk7XG5cbiAgaWYgKCF0cmFuc2Zvcm1DaGFuZ2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgTWF0cml4NC5jbG9uZShjb21wdXRlZFRyYW5zZm9ybSwgdGhpcy5jb21wdXRlZFRyYW5zZm9ybSk7XG5cbiAgLy8gVXBkYXRlIHRoZSBib3VuZGluZyB2b2x1bWVzXG4gIHZhciBoZWFkZXIgPSB0aGlzLl9oZWFkZXI7XG4gIHZhciBjb250ZW50ID0gdGhpcy5faGVhZGVyLmNvbnRlbnQ7XG4gIHRoaXMuX2JvdW5kaW5nVm9sdW1lID0gdGhpcy5jcmVhdGVCb3VuZGluZ1ZvbHVtZShcbiAgICBoZWFkZXIuYm91bmRpbmdWb2x1bWUsXG4gICAgdGhpcy5jb21wdXRlZFRyYW5zZm9ybSxcbiAgICB0aGlzLl9ib3VuZGluZ1ZvbHVtZVxuICApO1xuICBpZiAoZGVmaW5lZCh0aGlzLl9jb250ZW50Qm91bmRpbmdWb2x1bWUpKSB7XG4gICAgdGhpcy5fY29udGVudEJvdW5kaW5nVm9sdW1lID0gdGhpcy5jcmVhdGVCb3VuZGluZ1ZvbHVtZShcbiAgICAgIGNvbnRlbnQuYm91bmRpbmdWb2x1bWUsXG4gICAgICB0aGlzLmNvbXB1dGVkVHJhbnNmb3JtLFxuICAgICAgdGhpcy5fY29udGVudEJvdW5kaW5nVm9sdW1lXG4gICAgKTtcbiAgfVxuICBpZiAoZGVmaW5lZCh0aGlzLl92aWV3ZXJSZXF1ZXN0Vm9sdW1lKSkge1xuICAgIHRoaXMuX3ZpZXdlclJlcXVlc3RWb2x1bWUgPSB0aGlzLmNyZWF0ZUJvdW5kaW5nVm9sdW1lKFxuICAgICAgaGVhZGVyLnZpZXdlclJlcXVlc3RWb2x1bWUsXG4gICAgICB0aGlzLmNvbXB1dGVkVHJhbnNmb3JtLFxuICAgICAgdGhpcy5fdmlld2VyUmVxdWVzdFZvbHVtZVxuICAgICk7XG4gIH1cblxuICB0aGlzLnVwZGF0ZUdlb21ldHJpY0Vycm9yU2NhbGUoKTtcblxuICAvLyBEZXN0cm95IHRoZSBkZWJ1ZyBib3VuZGluZyB2b2x1bWVzLiBUaGV5IHdpbGwgYmUgZ2VuZXJhdGVkIGZyZXNoLlxuICB0aGlzLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lID1cbiAgICB0aGlzLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lICYmIHRoaXMuX2RlYnVnQm91bmRpbmdWb2x1bWUuZGVzdHJveSgpO1xuICB0aGlzLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZSA9XG4gICAgdGhpcy5fZGVidWdDb250ZW50Qm91bmRpbmdWb2x1bWUgJiZcbiAgICB0aGlzLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZS5kZXN0cm95KCk7XG4gIHRoaXMuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZSA9XG4gICAgdGhpcy5fZGVidWdWaWV3ZXJSZXF1ZXN0Vm9sdW1lICYmIHRoaXMuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZS5kZXN0cm95KCk7XG59O1xuXG5DZXNpdW0zRFRpbGUucHJvdG90eXBlLnVwZGF0ZUdlb21ldHJpY0Vycm9yU2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUodGhpcy5jb21wdXRlZFRyYW5zZm9ybSwgc2NyYXRjaFNjYWxlKTtcbiAgdmFyIHVuaWZvcm1TY2FsZSA9IENhcnRlc2lhbjMubWF4aW11bUNvbXBvbmVudChzY2FsZSk7XG4gIHRoaXMuZ2VvbWV0cmljRXJyb3IgPSB0aGlzLl9nZW9tZXRyaWNFcnJvciAqIHVuaWZvcm1TY2FsZTtcbn07XG5cbmZ1bmN0aW9uIGFwcGx5RGVidWdTZXR0aW5ncyh0aWxlLCB0aWxlc2V0LCBmcmFtZVN0YXRlLCBwYXNzT3B0aW9ucykge1xuICBpZiAoIXBhc3NPcHRpb25zLmlzUmVuZGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhhc0NvbnRlbnRCb3VuZGluZ1ZvbHVtZSA9XG4gICAgZGVmaW5lZCh0aWxlLl9oZWFkZXIuY29udGVudCkgJiZcbiAgICBkZWZpbmVkKHRpbGUuX2hlYWRlci5jb250ZW50LmJvdW5kaW5nVm9sdW1lKTtcbiAgdmFyIGVtcHR5ID1cbiAgICB0aWxlLmhhc0VtcHR5Q29udGVudCB8fCB0aWxlLmhhc1RpbGVzZXRDb250ZW50IHx8IHRpbGUuaGFzSW1wbGljaXRDb250ZW50O1xuXG4gIHZhciBzaG93Vm9sdW1lID1cbiAgICB0aWxlc2V0LmRlYnVnU2hvd0JvdW5kaW5nVm9sdW1lIHx8XG4gICAgKHRpbGVzZXQuZGVidWdTaG93Q29udGVudEJvdW5kaW5nVm9sdW1lICYmICFoYXNDb250ZW50Qm91bmRpbmdWb2x1bWUpO1xuICBpZiAoc2hvd1ZvbHVtZSkge1xuICAgIHZhciBjb2xvcjtcbiAgICBpZiAoIXRpbGUuX2ZpbmFsUmVzb2x1dGlvbikge1xuICAgICAgY29sb3IgPSBDb2xvci5ZRUxMT1c7XG4gICAgfSBlbHNlIGlmIChlbXB0eSkge1xuICAgICAgY29sb3IgPSBDb2xvci5EQVJLR1JBWTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sb3IgPSBDb2xvci5XSElURTtcbiAgICB9XG4gICAgaWYgKCFkZWZpbmVkKHRpbGUuX2RlYnVnQm91bmRpbmdWb2x1bWUpKSB7XG4gICAgICB0aWxlLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lID0gdGlsZS5fYm91bmRpbmdWb2x1bWUuY3JlYXRlRGVidWdWb2x1bWUoY29sb3IpO1xuICAgIH1cbiAgICB0aWxlLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lLnVwZGF0ZShmcmFtZVN0YXRlKTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHRpbGUuX2RlYnVnQm91bmRpbmdWb2x1bWUuZ2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZXMoXG4gICAgICBcIm91dGxpbmVcIlxuICAgICk7XG4gICAgYXR0cmlidXRlcy5jb2xvciA9IENvbG9yR2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS50b1ZhbHVlKFxuICAgICAgY29sb3IsXG4gICAgICBhdHRyaWJ1dGVzLmNvbG9yXG4gICAgKTtcbiAgfSBlbHNlIGlmICghc2hvd1ZvbHVtZSAmJiBkZWZpbmVkKHRpbGUuX2RlYnVnQm91bmRpbmdWb2x1bWUpKSB7XG4gICAgdGlsZS5fZGVidWdCb3VuZGluZ1ZvbHVtZSA9IHRpbGUuX2RlYnVnQm91bmRpbmdWb2x1bWUuZGVzdHJveSgpO1xuICB9XG5cbiAgaWYgKHRpbGVzZXQuZGVidWdTaG93Q29udGVudEJvdW5kaW5nVm9sdW1lICYmIGhhc0NvbnRlbnRCb3VuZGluZ1ZvbHVtZSkge1xuICAgIGlmICghZGVmaW5lZCh0aWxlLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZSkpIHtcbiAgICAgIHRpbGUuX2RlYnVnQ29udGVudEJvdW5kaW5nVm9sdW1lID0gdGlsZS5fY29udGVudEJvdW5kaW5nVm9sdW1lLmNyZWF0ZURlYnVnVm9sdW1lKFxuICAgICAgICBDb2xvci5CTFVFXG4gICAgICApO1xuICAgIH1cbiAgICB0aWxlLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZS51cGRhdGUoZnJhbWVTdGF0ZSk7XG4gIH0gZWxzZSBpZiAoXG4gICAgIXRpbGVzZXQuZGVidWdTaG93Q29udGVudEJvdW5kaW5nVm9sdW1lICYmXG4gICAgZGVmaW5lZCh0aWxlLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZSlcbiAgKSB7XG4gICAgdGlsZS5fZGVidWdDb250ZW50Qm91bmRpbmdWb2x1bWUgPSB0aWxlLl9kZWJ1Z0NvbnRlbnRCb3VuZGluZ1ZvbHVtZS5kZXN0cm95KCk7XG4gIH1cblxuICBpZiAoXG4gICAgdGlsZXNldC5kZWJ1Z1Nob3dWaWV3ZXJSZXF1ZXN0Vm9sdW1lICYmXG4gICAgZGVmaW5lZCh0aWxlLl92aWV3ZXJSZXF1ZXN0Vm9sdW1lKVxuICApIHtcbiAgICBpZiAoIWRlZmluZWQodGlsZS5fZGVidWdWaWV3ZXJSZXF1ZXN0Vm9sdW1lKSkge1xuICAgICAgdGlsZS5fZGVidWdWaWV3ZXJSZXF1ZXN0Vm9sdW1lID0gdGlsZS5fdmlld2VyUmVxdWVzdFZvbHVtZS5jcmVhdGVEZWJ1Z1ZvbHVtZShcbiAgICAgICAgQ29sb3IuWUVMTE9XXG4gICAgICApO1xuICAgIH1cbiAgICB0aWxlLl9kZWJ1Z1ZpZXdlclJlcXVlc3RWb2x1bWUudXBkYXRlKGZyYW1lU3RhdGUpO1xuICB9IGVsc2UgaWYgKFxuICAgICF0aWxlc2V0LmRlYnVnU2hvd1ZpZXdlclJlcXVlc3RWb2x1bWUgJiZcbiAgICBkZWZpbmVkKHRpbGUuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZSlcbiAgKSB7XG4gICAgdGlsZS5fZGVidWdWaWV3ZXJSZXF1ZXN0Vm9sdW1lID0gdGlsZS5fZGVidWdWaWV3ZXJSZXF1ZXN0Vm9sdW1lLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHZhciBkZWJ1Z0NvbG9yaXplVGlsZXNPbiA9XG4gICAgKHRpbGVzZXQuZGVidWdDb2xvcml6ZVRpbGVzICYmICF0aWxlLl9kZWJ1Z0NvbG9yaXplVGlsZXMpIHx8XG4gICAgZGVmaW5lZCh0aWxlc2V0Ll9oZWF0bWFwLnRpbGVQcm9wZXJ0eU5hbWUpO1xuICB2YXIgZGVidWdDb2xvcml6ZVRpbGVzT2ZmID1cbiAgICAhdGlsZXNldC5kZWJ1Z0NvbG9yaXplVGlsZXMgJiYgdGlsZS5fZGVidWdDb2xvcml6ZVRpbGVzO1xuXG4gIGlmIChkZWJ1Z0NvbG9yaXplVGlsZXNPbikge1xuICAgIHRpbGVzZXQuX2hlYXRtYXAuY29sb3JpemUodGlsZSwgZnJhbWVTdGF0ZSk7IC8vIFNraXBwZWQgaWYgdGlsZXNldC5faGVhdG1hcC50aWxlUHJvcGVydHlOYW1lIGlzIHVuZGVmaW5lZFxuICAgIHRpbGUuX2RlYnVnQ29sb3JpemVUaWxlcyA9IHRydWU7XG4gICAgdGlsZS5jb2xvciA9IHRpbGUuX2RlYnVnQ29sb3I7XG4gIH0gZWxzZSBpZiAoZGVidWdDb2xvcml6ZVRpbGVzT2ZmKSB7XG4gICAgdGlsZS5fZGVidWdDb2xvcml6ZVRpbGVzID0gZmFsc2U7XG4gICAgdGlsZS5jb2xvciA9IENvbG9yLldISVRFO1xuICB9XG5cbiAgaWYgKHRpbGUuX2NvbG9yRGlydHkpIHtcbiAgICB0aWxlLl9jb2xvckRpcnR5ID0gZmFsc2U7XG4gICAgdGlsZS5fY29udGVudC5hcHBseURlYnVnU2V0dGluZ3ModHJ1ZSwgdGlsZS5fY29sb3IpO1xuICB9XG5cbiAgaWYgKGRlYnVnQ29sb3JpemVUaWxlc09mZikge1xuICAgIHRpbGVzZXQubWFrZVN0eWxlRGlydHkoKTsgLy8gUmUtYXBwbHkgc3R5bGUgbm93IHRoYXQgY29sb3JpemUgaXMgc3dpdGNoZWQgb2ZmXG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGVudCh0aWxlLCB0aWxlc2V0LCBmcmFtZVN0YXRlKSB7XG4gIHZhciBjb250ZW50ID0gdGlsZS5fY29udGVudDtcbiAgdmFyIGV4cGlyZWRDb250ZW50ID0gdGlsZS5fZXhwaXJlZENvbnRlbnQ7XG5cbiAgLy8gZXhwaXJlZCBjb250ZW50IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIDNEVElMRVNfbXVsdGlwbGVfY29udGVudHNcbiAgaWYgKCF0aWxlLmhhc011bHRpcGxlQ29udGVudHMgJiYgZGVmaW5lZChleHBpcmVkQ29udGVudCkpIHtcbiAgICBpZiAoIXRpbGUuY29udGVudFJlYWR5KSB7XG4gICAgICAvLyBSZW5kZXIgdGhlIGV4cGlyZWQgY29udGVudCB3aGlsZSB0aGUgY29udGVudCBsb2Fkc1xuICAgICAgZXhwaXJlZENvbnRlbnQudXBkYXRlKHRpbGVzZXQsIGZyYW1lU3RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE5ldyBjb250ZW50IGlzIHJlYWR5LCBkZXN0cm95IGV4cGlyZWQgY29udGVudFxuICAgIHRpbGUuX2V4cGlyZWRDb250ZW50LmRlc3Ryb3koKTtcbiAgICB0aWxlLl9leHBpcmVkQ29udGVudCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnRlbnQudXBkYXRlKHRpbGVzZXQsIGZyYW1lU3RhdGUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGlwcGluZ1BsYW5lcyh0aWxlLCB0aWxlc2V0KSB7XG4gIC8vIENvbXB1dGUgYW5kIGNvbXBhcmUgQ2xpcHBpbmdQbGFuZXMgc3RhdGU6XG4gIC8vIC0gZW5hYmxlZC1uZXNzIC0gYXJlIGNsaXBwaW5nIHBsYW5lcyBlbmFibGVkPyBpcyB0aGlzIHRpbGUgY2xpcHBlZD9cbiAgLy8gLSBjbGlwcGluZyBwbGFuZSBjb3VudFxuICAvLyAtIGNsaXBwaW5nIGZ1bmN0aW9uICh1bmlvbiB2LiBpbnRlcnNlY3Rpb24pXG4gIHZhciBjbGlwcGluZ1BsYW5lcyA9IHRpbGVzZXQuY2xpcHBpbmdQbGFuZXM7XG4gIHZhciBjdXJyZW50Q2xpcHBpbmdQbGFuZXNTdGF0ZSA9IDA7XG4gIGlmIChkZWZpbmVkKGNsaXBwaW5nUGxhbmVzKSAmJiB0aWxlLl9pc0NsaXBwZWQgJiYgY2xpcHBpbmdQbGFuZXMuZW5hYmxlZCkge1xuICAgIGN1cnJlbnRDbGlwcGluZ1BsYW5lc1N0YXRlID0gY2xpcHBpbmdQbGFuZXMuY2xpcHBpbmdQbGFuZXNTdGF0ZTtcbiAgfVxuICAvLyBJZiBjbGlwcGluZ1BsYW5lU3RhdGUgZm9yIHRpbGUgY2hhbmdlZCwgbWFyayBjbGlwcGluZ1BsYW5lc0RpcnR5IHNvIGNvbnRlbnQgY2FuIHVwZGF0ZVxuICBpZiAoY3VycmVudENsaXBwaW5nUGxhbmVzU3RhdGUgIT09IHRpbGUuX2NsaXBwaW5nUGxhbmVzU3RhdGUpIHtcbiAgICB0aWxlLl9jbGlwcGluZ1BsYW5lc1N0YXRlID0gY3VycmVudENsaXBwaW5nUGxhbmVzU3RhdGU7XG4gICAgdGlsZS5jbGlwcGluZ1BsYW5lc0RpcnR5ID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgZHJhdyBjb21tYW5kcyBuZWVkZWQgdG8gcmVuZGVyIHRoaXMgdGlsZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DZXNpdW0zRFRpbGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0aWxlc2V0LCBmcmFtZVN0YXRlLCBwYXNzT3B0aW9ucykge1xuICB2YXIgY29tbWFuZFN0YXJ0ID0gZnJhbWVTdGF0ZS5jb21tYW5kTGlzdC5sZW5ndGg7XG5cbiAgdXBkYXRlQ2xpcHBpbmdQbGFuZXModGhpcywgdGlsZXNldCk7XG4gIGFwcGx5RGVidWdTZXR0aW5ncyh0aGlzLCB0aWxlc2V0LCBmcmFtZVN0YXRlLCBwYXNzT3B0aW9ucyk7XG4gIHVwZGF0ZUNvbnRlbnQodGhpcywgdGlsZXNldCwgZnJhbWVTdGF0ZSk7XG5cbiAgdmFyIGNvbW1hbmRFbmQgPSBmcmFtZVN0YXRlLmNvbW1hbmRMaXN0Lmxlbmd0aDtcbiAgdmFyIGNvbW1hbmRzTGVuZ3RoID0gY29tbWFuZEVuZCAtIGNvbW1hbmRTdGFydDtcbiAgdGhpcy5fY29tbWFuZHNMZW5ndGggPSBjb21tYW5kc0xlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbW1hbmRzTGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgY29tbWFuZCA9IGZyYW1lU3RhdGUuY29tbWFuZExpc3RbY29tbWFuZFN0YXJ0ICsgaV07XG4gICAgdmFyIHRyYW5zbHVjZW50ID0gY29tbWFuZC5wYXNzID09PSBQYXNzLlRSQU5TTFVDRU5UO1xuICAgIGNvbW1hbmQuZGVwdGhGb3JUcmFuc2x1Y2VudENsYXNzaWZpY2F0aW9uID0gdHJhbnNsdWNlbnQ7XG4gIH1cblxuICB0aGlzLmNsaXBwaW5nUGxhbmVzRGlydHkgPSBmYWxzZTsgLy8gcmVzZXQgYWZ0ZXIgY29udGVudCB1cGRhdGVcbn07XG5cbnZhciBzY3JhdGNoQ29tbWFuZExpc3QgPSBbXTtcblxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIHRpbGUncyBjb250ZW50LCBlLmcuLCBjcmVhdGUgV2ViR0wgcmVzb3VyY2VzLCB0byBtb3ZlIGZyb20gdGhlIFBST0NFU1NJTkcgdG8gUkVBRFkgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtDZXNpdW0zRFRpbGVzZXR9IHRpbGVzZXQgVGhlIHRpbGVzZXQgY29udGFpbmluZyB0aGlzIHRpbGUuXG4gKiBAcGFyYW0ge0ZyYW1lU3RhdGV9IGZyYW1lU3RhdGUgVGhlIGZyYW1lIHN0YXRlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uICh0aWxlc2V0LCBmcmFtZVN0YXRlKSB7XG4gIHZhciBzYXZlZENvbW1hbmRMaXN0ID0gZnJhbWVTdGF0ZS5jb21tYW5kTGlzdDtcbiAgZnJhbWVTdGF0ZS5jb21tYW5kTGlzdCA9IHNjcmF0Y2hDb21tYW5kTGlzdDtcblxuICB0aGlzLl9jb250ZW50LnVwZGF0ZSh0aWxlc2V0LCBmcmFtZVN0YXRlKTtcblxuICBzY3JhdGNoQ29tbWFuZExpc3QubGVuZ3RoID0gMDtcbiAgZnJhbWVTdGF0ZS5jb21tYW5kTGlzdCA9IHNhdmVkQ29tbWFuZExpc3Q7XG59O1xuXG5mdW5jdGlvbiBpc29sYXRlRGlnaXRzKG5vcm1hbGl6ZWRWYWx1ZSwgbnVtYmVyT2ZEaWdpdHMsIGxlZnRTaGlmdCkge1xuICB2YXIgc2NhbGVkID0gbm9ybWFsaXplZFZhbHVlICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzKTtcbiAgdmFyIGludGVnZXIgPSBwYXJzZUludChzY2FsZWQpO1xuICByZXR1cm4gaW50ZWdlciAqIE1hdGgucG93KDEwLCBsZWZ0U2hpZnQpO1xufVxuXG5mdW5jdGlvbiBwcmlvcml0eU5vcm1hbGl6ZUFuZENsYW1wKHZhbHVlLCBtaW5pbXVtLCBtYXhpbXVtKSB7XG4gIHJldHVybiBNYXRoLm1heChcbiAgICBDZXNpdW1NYXRoLm5vcm1hbGl6ZSh2YWx1ZSwgbWluaW11bSwgbWF4aW11bSkgLSBDZXNpdW1NYXRoLkVQU0lMT043LFxuICAgIDAuMFxuICApOyAvLyBTdWJ0cmFjdCBlcHNpbG9uIHNpbmNlIHdlIG9ubHkgd2FudCBkZWNpbWFsIGRpZ2l0cyBwcmVzZW50IGluIHRoZSBvdXRwdXQuXG59XG5cbi8qKlxuICogU2V0cyB0aGUgcHJpb3JpdHkgb2YgdGhlIHRpbGUgYmFzZWQgb24gZGlzdGFuY2UgYW5kIGRlcHRoXG4gKiBAcHJpdmF0ZVxuICovXG5DZXNpdW0zRFRpbGUucHJvdG90eXBlLnVwZGF0ZVByaW9yaXR5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGlsZXNldCA9IHRoaXMudGlsZXNldDtcbiAgdmFyIHByZWZlckxlYXZlcyA9IHRpbGVzZXQucHJlZmVyTGVhdmVzO1xuICB2YXIgbWluaW11bVByaW9yaXR5ID0gdGlsZXNldC5fbWluaW11bVByaW9yaXR5O1xuICB2YXIgbWF4aW11bVByaW9yaXR5ID0gdGlsZXNldC5fbWF4aW11bVByaW9yaXR5O1xuXG4gIC8vIENvbWJpbmUgcHJpb3JpdHkgc3lzdGVtcyB0b2dldGhlciBieSBtYXBwaW5nIHRoZW0gaW50byBhIGJhc2UgMTAgbnVtYmVyIHdoZXJlIGVhY2ggcHJpb3JpdHkgY29udHJvbHMgYSBzcGVjaWZpYyBzZXQgb2YgZGlnaXRzIGluIHRoZSBudW1iZXIuXG4gIC8vIEZvciBudW1iZXIgcHJpb3JpdGllcywgbWFwIHRoZW0gdG8gYSAwLnh4eHh4IG51bWJlciB0aGVuIGxlZnQgc2hpZnQgaXQgdXAgaW50byBhIHNldCBudW1iZXIgb2YgZGlnaXRzIGJlZm9yZSB0aGUgZGVjaW1hbCBwb2ludC4gQ2hvcCBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0IHRoZW4gbGVmdCBzaGlmdCBhZ2FpbiBpbnRvIHRoZSBwb3NpdGlvbiBpdCBuZWVkcyB0byBnby5cbiAgLy8gRm9yIGJsZW5kaW5nIG51bWJlciBwcmlvcml0aWVzLCBub3JtYWxpemUgdGhlbSB0byAwLTEgYW5kIGludGVycG9sYXRlIHRvIGdldCBhIGNvbWJpbmVkIDAtMSBudW1iZXIsIHRoZW4gcHJvY2VlZCBhcyBub3JtYWwuXG4gIC8vIEJvb2xlYW5zIGNhbiBqdXN0IGJlIDAgb3IgMTBebGVmdHNoaWZ0LlxuICAvLyBUaGluayBvZiBkaWdpdHMgYXMgcGVuYWx0aWVzIHNpbmNlIHNtYWxsZXIgbnVtYmVycyBhcmUgaGlnaGVyIHByaW9yaXR5LiBJZiBhIHRpbGUgaGFzIHNvbWUgbGFyZ2UgcXVhbnRpdHkgb3IgaGFzIGEgZmxhZyByYWlzZWQgaXQncyAodXN1YWxseSkgcGVuYWxpemVkIGZvciBpdCwgZXhwcmVzc2VkIGFzIGEgaGlnaGVyIG51bWJlciBmb3IgdGhlIGRpZ2l0LlxuICAvLyBQcmlvcml0eSBudW1iZXIgZm9ybWF0OiBwcmVsb2FkRmxpZ2h0RGlnaXRzKDEpIHwgZm92ZWF0ZWREZWZlckRpZ2l0cygxKSB8IGZvdmVhdGVkRGlnaXRzKDQpIHwgcHJlbG9hZFByb2dyZXNzaXZlUmVzb2x1dGlvbkRpZ2l0cygxKSB8IHByZWZlcnJlZFNvcnRpbmdEaWdpdHMoNCkgLiBkZXB0aERpZ2l0cyh0aGUgZGVjaW1hbCBkaWdpdHMpXG4gIC8vIENlcnRhaW4gZmxhZ3MgbGlrZSBwcmVmZXJMZWF2ZXMgd2lsbCBmbGlwIC8gdHVybiBvZmYgY2VydGFpbiBkaWdpdHMgdG8gZ2V0IGRlc2lyZWQgbG9hZCBvcmRlci5cblxuICAvLyBTZXR1cCBsZWZ0U2hpZnRzLCBkaWdpdCBjb3VudHMsIGFuZCBzY2FsZXMgKGZvciBib29sZWFucylcbiAgdmFyIGRpZ2l0c0ZvckFOdW1iZXIgPSA0O1xuICB2YXIgZGlnaXRzRm9yQUJvb2xlYW4gPSAxO1xuXG4gIHZhciBwcmVmZXJyZWRTb3J0aW5nTGVmdFNoaWZ0ID0gMDtcbiAgdmFyIHByZWZlcnJlZFNvcnRpbmdEaWdpdHNDb3VudCA9IGRpZ2l0c0ZvckFOdW1iZXI7XG5cbiAgdmFyIGZvdmVhdGVkTGVmdFNoaWZ0ID1cbiAgICBwcmVmZXJyZWRTb3J0aW5nTGVmdFNoaWZ0ICsgcHJlZmVycmVkU29ydGluZ0RpZ2l0c0NvdW50O1xuICB2YXIgZm92ZWF0ZWREaWdpdHNDb3VudCA9IGRpZ2l0c0ZvckFOdW1iZXI7XG5cbiAgdmFyIHByZWxvYWRQcm9ncmVzc2l2ZVJlc29sdXRpb25MZWZ0U2hpZnQgPVxuICAgIGZvdmVhdGVkTGVmdFNoaWZ0ICsgZm92ZWF0ZWREaWdpdHNDb3VudDtcbiAgdmFyIHByZWxvYWRQcm9ncmVzc2l2ZVJlc29sdXRpb25EaWdpdHNDb3VudCA9IGRpZ2l0c0ZvckFCb29sZWFuO1xuICB2YXIgcHJlbG9hZFByb2dyZXNzaXZlUmVzb2x1dGlvblNjYWxlID0gTWF0aC5wb3coXG4gICAgMTAsXG4gICAgcHJlbG9hZFByb2dyZXNzaXZlUmVzb2x1dGlvbkxlZnRTaGlmdFxuICApO1xuXG4gIHZhciBmb3ZlYXRlZERlZmVyTGVmdFNoaWZ0ID1cbiAgICBwcmVsb2FkUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uTGVmdFNoaWZ0ICtcbiAgICBwcmVsb2FkUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uRGlnaXRzQ291bnQ7XG4gIHZhciBmb3ZlYXRlZERlZmVyRGlnaXRzQ291bnQgPSBkaWdpdHNGb3JBQm9vbGVhbjtcbiAgdmFyIGZvdmVhdGVkRGVmZXJTY2FsZSA9IE1hdGgucG93KDEwLCBmb3ZlYXRlZERlZmVyTGVmdFNoaWZ0KTtcblxuICB2YXIgcHJlbG9hZEZsaWdodExlZnRTaGlmdCA9XG4gICAgZm92ZWF0ZWREZWZlckxlZnRTaGlmdCArIGZvdmVhdGVkRGVmZXJEaWdpdHNDb3VudDtcbiAgdmFyIHByZWxvYWRGbGlnaHRTY2FsZSA9IE1hdGgucG93KDEwLCBwcmVsb2FkRmxpZ2h0TGVmdFNoaWZ0KTtcblxuICAvLyBDb21wdXRlIHRoZSBkaWdpdHMgZm9yIGVhY2ggcHJpb3JpdHlcbiAgdmFyIGRlcHRoRGlnaXRzID0gcHJpb3JpdHlOb3JtYWxpemVBbmRDbGFtcChcbiAgICB0aGlzLl9kZXB0aCxcbiAgICBtaW5pbXVtUHJpb3JpdHkuZGVwdGgsXG4gICAgbWF4aW11bVByaW9yaXR5LmRlcHRoXG4gICk7XG4gIGRlcHRoRGlnaXRzID0gcHJlZmVyTGVhdmVzID8gMS4wIC0gZGVwdGhEaWdpdHMgOiBkZXB0aERpZ2l0cztcblxuICAvLyBNYXAgMC0xIHRoZW4gY29udmVydCB0byBkaWdpdC4gSW5jbHVkZSBhIGRpc3RhbmNlIHNvcnQgd2hlbiBkb2luZyBub24tc2tpcExPRCBhbmQgcmVwbGFjZW1lbnQgcmVmaW5lbWVudCwgaGVscHMgdGhpbmdzIGxpa2Ugbm9uLXNraXBMT0QgcGhvdG9ncmFtbWV0cnlcbiAgdmFyIHVzZURpc3RhbmNlID1cbiAgICAhdGlsZXNldC5fc2tpcExldmVsT2ZEZXRhaWwgJiYgdGhpcy5yZWZpbmUgPT09IENlc2l1bTNEVGlsZVJlZmluZS5SRVBMQUNFO1xuICB2YXIgbm9ybWFsaXplZFByZWZlcnJlZFNvcnRpbmcgPSB1c2VEaXN0YW5jZVxuICAgID8gcHJpb3JpdHlOb3JtYWxpemVBbmRDbGFtcChcbiAgICAgICAgdGhpcy5fcHJpb3JpdHlIb2xkZXIuX2Rpc3RhbmNlVG9DYW1lcmEsXG4gICAgICAgIG1pbmltdW1Qcmlvcml0eS5kaXN0YW5jZSxcbiAgICAgICAgbWF4aW11bVByaW9yaXR5LmRpc3RhbmNlXG4gICAgICApXG4gICAgOiBwcmlvcml0eU5vcm1hbGl6ZUFuZENsYW1wKFxuICAgICAgICB0aGlzLl9wcmlvcml0eVJldmVyc2VTY3JlZW5TcGFjZUVycm9yLFxuICAgICAgICBtaW5pbXVtUHJpb3JpdHkucmV2ZXJzZVNjcmVlblNwYWNlRXJyb3IsXG4gICAgICAgIG1heGltdW1Qcmlvcml0eS5yZXZlcnNlU2NyZWVuU3BhY2VFcnJvclxuICAgICAgKTtcbiAgdmFyIHByZWZlcnJlZFNvcnRpbmdEaWdpdHMgPSBpc29sYXRlRGlnaXRzKFxuICAgIG5vcm1hbGl6ZWRQcmVmZXJyZWRTb3J0aW5nLFxuICAgIHByZWZlcnJlZFNvcnRpbmdEaWdpdHNDb3VudCxcbiAgICBwcmVmZXJyZWRTb3J0aW5nTGVmdFNoaWZ0XG4gICk7XG5cbiAgdmFyIHByZWxvYWRQcm9ncmVzc2l2ZVJlc29sdXRpb25EaWdpdHMgPSB0aGlzLl9wcmlvcml0eVByb2dyZXNzaXZlUmVzb2x1dGlvblxuICAgID8gMFxuICAgIDogcHJlbG9hZFByb2dyZXNzaXZlUmVzb2x1dGlvblNjYWxlO1xuXG4gIHZhciBub3JtYWxpemVkRm92ZWF0ZWRGYWN0b3IgPSBwcmlvcml0eU5vcm1hbGl6ZUFuZENsYW1wKFxuICAgIHRoaXMuX3ByaW9yaXR5SG9sZGVyLl9mb3ZlYXRlZEZhY3RvcixcbiAgICBtaW5pbXVtUHJpb3JpdHkuZm92ZWF0ZWRGYWN0b3IsXG4gICAgbWF4aW11bVByaW9yaXR5LmZvdmVhdGVkRmFjdG9yXG4gICk7XG4gIHZhciBmb3ZlYXRlZERpZ2l0cyA9IGlzb2xhdGVEaWdpdHMoXG4gICAgbm9ybWFsaXplZEZvdmVhdGVkRmFjdG9yLFxuICAgIGZvdmVhdGVkRGlnaXRzQ291bnQsXG4gICAgZm92ZWF0ZWRMZWZ0U2hpZnRcbiAgKTtcblxuICB2YXIgZm92ZWF0ZWREZWZlckRpZ2l0cyA9IHRoaXMucHJpb3JpdHlEZWZlcnJlZCA/IGZvdmVhdGVkRGVmZXJTY2FsZSA6IDA7XG5cbiAgdmFyIHByZWxvYWRGbGlnaHREaWdpdHMgPVxuICAgIHRpbGVzZXQuX3Bhc3MgPT09IENlc2l1bTNEVGlsZVBhc3MuUFJFTE9BRF9GTElHSFQgPyAwIDogcHJlbG9hZEZsaWdodFNjYWxlO1xuXG4gIC8vIEdldCB0aGUgZmluYWwgYmFzZSAxMCBudW1iZXJcbiAgdGhpcy5fcHJpb3JpdHkgPVxuICAgIGRlcHRoRGlnaXRzICtcbiAgICBwcmVmZXJyZWRTb3J0aW5nRGlnaXRzICtcbiAgICBwcmVsb2FkUHJvZ3Jlc3NpdmVSZXNvbHV0aW9uRGlnaXRzICtcbiAgICBmb3ZlYXRlZERpZ2l0cyArXG4gICAgZm92ZWF0ZWREZWZlckRpZ2l0cyArXG4gICAgcHJlbG9hZEZsaWdodERpZ2l0cztcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlLnByb3RvdHlwZS5pc0Rlc3Ryb3llZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5DZXNpdW0zRFRpbGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEZvciB0aGUgaW50ZXJ2YWwgYmV0d2VlbiBuZXcgY29udGVudCBiZWluZyByZXF1ZXN0ZWQgYW5kIGRvd25sb2FkZWQsIGV4cGlyZWRDb250ZW50ID09PSBjb250ZW50LCBzbyBkb24ndCBkZXN0cm95IHR3aWNlXG4gIHRoaXMuX2NvbnRlbnQgPSB0aGlzLl9jb250ZW50ICYmIHRoaXMuX2NvbnRlbnQuZGVzdHJveSgpO1xuICB0aGlzLl9leHBpcmVkQ29udGVudCA9XG4gICAgdGhpcy5fZXhwaXJlZENvbnRlbnQgJiZcbiAgICAhdGhpcy5fZXhwaXJlZENvbnRlbnQuaXNEZXN0cm95ZWQoKSAmJlxuICAgIHRoaXMuX2V4cGlyZWRDb250ZW50LmRlc3Ryb3koKTtcbiAgdGhpcy5fZGVidWdCb3VuZGluZ1ZvbHVtZSA9XG4gICAgdGhpcy5fZGVidWdCb3VuZGluZ1ZvbHVtZSAmJiB0aGlzLl9kZWJ1Z0JvdW5kaW5nVm9sdW1lLmRlc3Ryb3koKTtcbiAgdGhpcy5fZGVidWdDb250ZW50Qm91bmRpbmdWb2x1bWUgPVxuICAgIHRoaXMuX2RlYnVnQ29udGVudEJvdW5kaW5nVm9sdW1lICYmXG4gICAgdGhpcy5fZGVidWdDb250ZW50Qm91bmRpbmdWb2x1bWUuZGVzdHJveSgpO1xuICB0aGlzLl9kZWJ1Z1ZpZXdlclJlcXVlc3RWb2x1bWUgPVxuICAgIHRoaXMuX2RlYnVnVmlld2VyUmVxdWVzdFZvbHVtZSAmJiB0aGlzLl9kZWJ1Z1ZpZXdlclJlcXVlc3RWb2x1bWUuZGVzdHJveSgpO1xuICByZXR1cm4gZGVzdHJveU9iamVjdCh0aGlzKTtcbn07XG5leHBvcnQgZGVmYXVsdCBDZXNpdW0zRFRpbGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59709\n')},49104:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53773);\n/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51688);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66553);\n/* harmony import */ var _Core_combine_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8182);\n/* harmony import */ var _Core_Credit_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(52975);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(82982);\n/* harmony import */ var _Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11954);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(50491);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14459);\n/* harmony import */ var _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(55293);\n/* harmony import */ var _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(67519);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(72248);\n/* harmony import */ var _Core_Resource_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(68985);\n/* harmony import */ var _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(9407);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(95555);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(10667);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(13222);\n/* harmony import */ var _Axis_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(66577);\n/* harmony import */ var _Cesium3DTile_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(59709);\n/* harmony import */ var _Cesium3DTileColorBlendMode_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(95401);\n/* harmony import */ var _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(96706);\n/* harmony import */ var _Cesium3DTilesetMetadata_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(67796);\n/* harmony import */ var _Cesium3DTileOptimizations_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(97318);\n/* harmony import */ var _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(94170);\n/* harmony import */ var _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(36819);\n/* harmony import */ var _Cesium3DTilesetCache_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(49494);\n/* harmony import */ var _Cesium3DTilesetHeatmap_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(68263);\n/* harmony import */ var _Cesium3DTilesetStatistics_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(95883);\n/* harmony import */ var _Cesium3DTileStyleEngine_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(79459);\n/* harmony import */ var _ClippingPlaneCollection_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(21809);\n/* harmony import */ var _hasExtension_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(81326);\n/* harmony import */ var _ImplicitTileset_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(14255);\n/* harmony import */ var _ImplicitTileCoordinates_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(75692);\n/* harmony import */ var _LabelCollection_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(7017);\n/* harmony import */ var _PointCloudEyeDomeLighting_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(29388);\n/* harmony import */ var _PointCloudShading_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(45393);\n/* harmony import */ var _ResourceCache_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(38956);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(89917);\n/* harmony import */ var _ShadowMode_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(34125);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(87233);\n/* harmony import */ var _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(17106);\n/* harmony import */ var _TileBoundingSphere_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(60516);\n/* harmony import */ var _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(43338);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles tileset},\n * used for streaming massive heterogeneous 3D geospatial datasets.\n *\n * @alias Cesium3DTileset\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} options.url The url to a tileset JSON file.\n * @param {Boolean} [options.show=true] Determines if the tileset will be shown.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] A 4x4 transformation matrix that transforms the tileset\'s root tile.\n * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the tileset casts or receives shadows from light sources.\n * @param {Number} [options.maximumScreenSpaceError=16] The maximum screen space error used to drive level of detail refinement.\n * @param {Number} [options.maximumMemoryUsage=512] The maximum amount of memory in MB that can be used by the tileset.\n * @param {Boolean} [options.cullWithChildrenBounds=true] Optimization option. Whether to cull tiles using the union of their children bounding volumes.\n * @param {Boolean} [options.cullRequestsWhileMoving=true] Optimization option. Don\'t request tiles that will likely be unused when they come back because of the camera\'s movement. This optimization only applies to stationary tilesets.\n * @param {Number} [options.cullRequestsWhileMovingMultiplier=60.0] Optimization option. Multiplier used in culling requests while moving. Larger is more aggressive culling, smaller less aggressive culling.\n * @param {Boolean} [options.preloadWhenHidden=false] Preload tiles when <code>tileset.show</code> is <code>false</code>. Loads tiles as if the tileset is visible but does not render them.\n * @param {Boolean} [options.preloadFlightDestinations=true] Optimization option. Preload tiles at the camera\'s flight destination while the camera is in flight.\n * @param {Boolean} [options.preferLeaves=false] Optimization option. Prefer loading of leaves first.\n * @param {Boolean} [options.dynamicScreenSpaceError=false] Optimization option. Reduce the screen space error for tiles that are further away from the camera.\n * @param {Number} [options.dynamicScreenSpaceErrorDensity=0.00278] Density used to adjust the dynamic screen space error, similar to fog density.\n * @param {Number} [options.dynamicScreenSpaceErrorFactor=4.0] A factor used to increase the computed dynamic screen space error.\n * @param {Number} [options.dynamicScreenSpaceErrorHeightFalloff=0.25] A ratio of the tileset\'s height at which the density starts to falloff.\n * @param {Number} [options.progressiveResolutionHeightFraction=0.3] Optimization option. If between (0.0, 0.5], tiles at or above the screen space error for the reduced screen resolution of <code>progressiveResolutionHeightFraction*screenHeight</code> will be prioritized first. This can help get a quick layer of tiles down while full resolution tiles continue to load.\n * @param {Boolean} [options.foveatedScreenSpaceError=true] Optimization option. Prioritize loading tiles in the center of the screen by temporarily raising the screen space error for tiles around the edge of the screen. Screen space error returns to normal once all the tiles in the center of the screen as determined by the {@link Cesium3DTileset#foveatedConeSize} are loaded.\n * @param {Number} [options.foveatedConeSize=0.1] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the cone size that determines which tiles are deferred. Tiles that are inside this cone are loaded immediately. Tiles outside the cone are potentially deferred based on how far outside the cone they are and their screen space error. This is controlled by {@link Cesium3DTileset#foveatedInterpolationCallback} and {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation}. Setting this to 0.0 means the cone will be the line formed by the camera position and its view direction. Setting this to 1.0 means the cone encompasses the entire field of view of the camera, disabling the effect.\n * @param {Number} [options.foveatedMinimumScreenSpaceErrorRelaxation=0.0] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the starting screen space error relaxation for tiles outside the foveated cone. The screen space error will be raised starting with tileset value up to {@link Cesium3DTileset#maximumScreenSpaceError} based on the provided {@link Cesium3DTileset#foveatedInterpolationCallback}.\n * @param {Cesium3DTileset.foveatedInterpolationCallback} [options.foveatedInterpolationCallback=Math.lerp] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control how much to raise the screen space error for tiles outside the foveated cone, interpolating between {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation} and {@link Cesium3DTileset#maximumScreenSpaceError}\n * @param {Number} [options.foveatedTimeDelay=0.2] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control how long in seconds to wait after the camera stops moving before deferred tiles start loading in. This time delay prevents requesting tiles around the edges of the screen when the camera is moving. Setting this to 0.0 will immediately request all tiles in any given view.\n * @param {Boolean} [options.skipLevelOfDetail=false] Optimization option. Determines if level of detail skipping should be applied during the traversal.\n * @param {Number} [options.baseScreenSpaceError=1024] When <code>skipLevelOfDetail</code> is <code>true</code>, the screen space error that must be reached before skipping levels of detail.\n * @param {Number} [options.skipScreenSpaceErrorFactor=16] When <code>skipLevelOfDetail</code> is <code>true</code>, a multiplier defining the minimum screen space error to skip. Used in conjunction with <code>skipLevels</code> to determine which tiles to load.\n * @param {Number} [options.skipLevels=1] When <code>skipLevelOfDetail</code> is <code>true</code>, a constant defining the minimum number of levels to skip when loading tiles. When it is 0, no levels are skipped. Used in conjunction with <code>skipScreenSpaceErrorFactor</code> to determine which tiles to load.\n * @param {Boolean} [options.immediatelyLoadDesiredLevelOfDetail=false] When <code>skipLevelOfDetail</code> is <code>true</code>, only tiles that meet the maximum screen space error will ever be downloaded. Skipping factors are ignored and just the desired tiles are loaded.\n * @param {Boolean} [options.loadSiblings=false] When <code>skipLevelOfDetail</code> is <code>true</code>, determines whether siblings of visible tiles are always downloaded during traversal.\n * @param {ClippingPlaneCollection} [options.clippingPlanes] The {@link ClippingPlaneCollection} used to selectively disable rendering the tileset.\n * @param {ClassificationType} [options.classificationType] Determines whether terrain, 3D Tiles or both will be classified by this tileset. See {@link Cesium3DTileset#classificationType} for details about restrictions and limitations.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid determining the size and shape of the globe.\n * @param {Object} [options.pointCloudShading] Options for constructing a {@link PointCloudShading} object to control point attenuation based on geometric error and lighting.\n * @param {Cartesian2} [options.imageBasedLightingFactor=new Cartesian2(1.0, 1.0)] Scales the diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n * @param {Cartesian3} [options.lightColor] The light color when shading models. When <code>undefined</code> the scene\'s light color is used instead.\n * @param {Number} [options.luminanceAtZenith=0.2] The sun\'s luminance at the zenith in kilo candela per meter squared to use for this model\'s procedural environment map.\n * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n * @param {String} [options.specularEnvironmentMaps] A URL to a KTX2 file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n * @param {Boolean} [options.backFaceCulling=true] Whether to cull back-facing geometry. When true, back face culling is determined by the glTF material\'s doubleSided property; when false, back face culling is disabled.\n * @param {Boolean} [options.showOutline=true] Whether to display the outline for models using the {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/CESIUM_primitive_outline|CESIUM_primitive_outline} extension. When true, outlines are displayed. When false, outlines are not displayed.\n * @param {Boolean} [options.vectorClassificationOnly=false] Indicates that only the tileset\'s vector tiles should be used for classification.\n * @param {Boolean} [options.vectorKeepDecodedPositions=false] Whether vector tiles should keep decoded positions in memory. This is used with {@link Cesium3DTileFeature.getPolylinePositions}.\n * @param {String} [options.debugHeatmapTilePropertyName] The tile variable to colorize as a heatmap. All rendered tiles will be colorized relative to each other\'s specified variable value.\n * @param {Boolean} [options.debugFreezeFrame=false] For debugging only. Determines if only the tiles from last frame should be used for rendering.\n * @param {Boolean} [options.debugColorizeTiles=false] For debugging only. When true, assigns a random color to each tile.\n * @param {Boolean} [options.debugWireframe=false] For debugging only. When true, render\'s each tile\'s content as a wireframe.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. When true, renders the bounding volume for each tile.\n * @param {Boolean} [options.debugShowContentBoundingVolume=false] For debugging only. When true, renders the bounding volume for each tile\'s content.\n * @param {Boolean} [options.debugShowViewerRequestVolume=false] For debugging only. When true, renders the viewer request volume for each tile.\n * @param {Boolean} [options.debugShowGeometricError=false] For debugging only. When true, draws labels to indicate the geometric error of each tile.\n * @param {Boolean} [options.debugShowRenderingStatistics=false] For debugging only. When true, draws labels to indicate the number of commands, points, triangles and features for each tile.\n * @param {Boolean} [options.debugShowMemoryUsage=false] For debugging only. When true, draws labels to indicate the texture and geometry memory in megabytes used by each tile.\n * @param {Boolean} [options.debugShowUrl=false] For debugging only. When true, draws labels to indicate the url of each tile.\n *\n * @exception {DeveloperError} The tileset must be 3D Tiles version 0.0 or 1.0.\n *\n * @example\n * var tileset = scene.primitives.add(new Cesium.Cesium3DTileset({\n *      url : \'http://localhost:8002/tilesets/Seattle/tileset.json\'\n * }));\n *\n * @example\n * // Common setting for the skipLevelOfDetail optimization\n * var tileset = scene.primitives.add(new Cesium.Cesium3DTileset({\n *      url : \'http://localhost:8002/tilesets/Seattle/tileset.json\',\n *      skipLevelOfDetail : true,\n *      baseScreenSpaceError : 1024,\n *      skipScreenSpaceErrorFactor : 16,\n *      skipLevels : 1,\n *      immediatelyLoadDesiredLevelOfDetail : false,\n *      loadSiblings : false,\n *      cullWithChildrenBounds : true\n * }));\n *\n * @example\n * // Common settings for the dynamicScreenSpaceError optimization\n * var tileset = scene.primitives.add(new Cesium.Cesium3DTileset({\n *      url : \'http://localhost:8002/tilesets/Seattle/tileset.json\',\n *      dynamicScreenSpaceError : true,\n *      dynamicScreenSpaceErrorDensity : 0.00278,\n *      dynamicScreenSpaceErrorFactor : 4.0,\n *      dynamicScreenSpaceErrorHeightFalloff : 0.25\n * }));\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles specification}\n */\nfunction Cesium3DTileset(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].defined */ .Z.defined("options.url", options.url);\n  //>>includeEnd(\'debug\');\n\n  this._url = undefined;\n  this._basePath = undefined;\n  this._root = undefined;\n  this._resource = undefined;\n  this._asset = undefined; // Metadata for the entire tileset\n  this._properties = undefined; // Metadata for per-model/point/etc properties\n  this._geometricError = undefined; // Geometric error when the tree is not rendered at all\n  this._extensionsUsed = undefined;\n  this._extensions = undefined;\n  this._gltfUpAxis = undefined;\n  this._cache = new _Cesium3DTilesetCache_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z();\n  this._processingQueue = [];\n  this._selectedTiles = [];\n  this._emptyTiles = [];\n  this._requestedTiles = [];\n  this._selectedTilesToStyle = [];\n  this._loadTimestamp = undefined;\n  this._timeSinceLoad = 0.0;\n  this._updatedVisibilityFrame = 0;\n  this._updatedModelMatrixFrame = 0;\n  this._modelMatrixChanged = false;\n  this._previousModelMatrix = undefined;\n  this._extras = undefined;\n  this._credits = undefined;\n\n  this._cullWithChildrenBounds = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.cullWithChildrenBounds,\n    true\n  );\n  this._allTilesAdditive = true;\n\n  this._hasMixedContent = false;\n\n  this._stencilClearCommand = undefined;\n  this._backfaceCommands = new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n\n  this._maximumScreenSpaceError = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.maximumScreenSpaceError,\n    16\n  );\n  this._maximumMemoryUsage = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.maximumMemoryUsage, 512);\n\n  this._styleEngine = new _Cesium3DTileStyleEngine_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"] */ .Z();\n\n  this._modelMatrix = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(options.modelMatrix)\n    ? _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].clone */ .Z.clone(options.modelMatrix)\n    : _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].clone */ .Z.clone(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].IDENTITY */ .Z.IDENTITY);\n\n  this._statistics = new _Cesium3DTilesetStatistics_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z();\n  this._statisticsLast = new _Cesium3DTilesetStatistics_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z();\n  this._statisticsPerPass = new Array(_Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].NUMBER_OF_PASSES */ .Z.NUMBER_OF_PASSES);\n\n  for (var i = 0; i < _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].NUMBER_OF_PASSES */ .Z.NUMBER_OF_PASSES; ++i) {\n    this._statisticsPerPass[i] = new _Cesium3DTilesetStatistics_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"] */ .Z();\n  }\n\n  this._requestedTilesInFlight = [];\n\n  this._maximumPriority = {\n    foveatedFactor: -Number.MAX_VALUE,\n    depth: -Number.MAX_VALUE,\n    distance: -Number.MAX_VALUE,\n    reverseScreenSpaceError: -Number.MAX_VALUE,\n  };\n  this._minimumPriority = {\n    foveatedFactor: Number.MAX_VALUE,\n    depth: Number.MAX_VALUE,\n    distance: Number.MAX_VALUE,\n    reverseScreenSpaceError: Number.MAX_VALUE,\n  };\n  this._heatmap = new _Cesium3DTilesetHeatmap_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"] */ .Z(\n    options.debugHeatmapTilePropertyName\n  );\n\n  /**\n   * Optimization option. Don\'t request tiles that will likely be unused when they come back because of the camera\'s movement. This optimization only applies to stationary tilesets.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.cullRequestsWhileMoving = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.cullRequestsWhileMoving,\n    true\n  );\n  this._cullRequestsWhileMoving = false;\n\n  /**\n   * Optimization option. Multiplier used in culling requests while moving. Larger is more aggressive culling, smaller less aggressive culling.\n   *\n   * @type {Number}\n   * @default 60.0\n   */\n  this.cullRequestsWhileMovingMultiplier = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.cullRequestsWhileMovingMultiplier,\n    60.0\n  );\n\n  /**\n   * Optimization option. If between (0.0, 0.5], tiles at or above the screen space error for the reduced screen resolution of <code>progressiveResolutionHeightFraction*screenHeight</code> will be prioritized first. This can help get a quick layer of tiles down while full resolution tiles continue to load.\n   *\n   * @type {Number}\n   * @default 0.3\n   */\n  this.progressiveResolutionHeightFraction = _Core_Math_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].clamp */ .Z.clamp(\n    (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.progressiveResolutionHeightFraction, 0.3),\n    0.0,\n    0.5\n  );\n\n  /**\n   * Optimization option. Prefer loading of leaves first.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.preferLeaves = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.preferLeaves, false);\n\n  this._tilesLoaded = false;\n  this._initialTilesLoaded = false;\n\n  this._tileDebugLabels = undefined;\n\n  this._readyPromise = _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].defer */ .Z.defer();\n\n  this._classificationType = options.classificationType;\n\n  this._ellipsoid = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.ellipsoid, _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].WGS84 */ .Z.WGS84);\n\n  this._initialClippingPlanesOriginMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].IDENTITY */ .Z.IDENTITY; // Computed from the tileset JSON.\n  this._clippingPlanesOriginMatrix = undefined; // Combines the above with any run-time transforms.\n  this._clippingPlanesOriginMatrixDirty = true;\n\n  this._vectorClassificationOnly = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.vectorClassificationOnly,\n    false\n  );\n\n  this._vectorKeepDecodedPositions = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.vectorKeepDecodedPositions,\n    false\n  );\n\n  /**\n   * Preload tiles when <code>tileset.show</code> is <code>false</code>. Loads tiles as if the tileset is visible but does not render them.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.preloadWhenHidden = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.preloadWhenHidden, false);\n\n  /**\n   * Optimization option. Fetch tiles at the camera\'s flight destination while the camera is in flight.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.preloadFlightDestinations = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.preloadFlightDestinations,\n    true\n  );\n  this._pass = undefined; // Cesium3DTilePass\n\n  /**\n   * Optimization option. Whether the tileset should refine based on a dynamic screen space error. Tiles that are further\n   * away will be rendered with lower detail than closer tiles. This improves performance by rendering fewer\n   * tiles and making less requests, but may result in a slight drop in visual quality for tiles in the distance.\n   * The algorithm is biased towards "street views" where the camera is close to the ground plane of the tileset and looking\n   * at the horizon. In addition results are more accurate for tightly fitting bounding volumes like box and region.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.dynamicScreenSpaceError = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.dynamicScreenSpaceError,\n    false\n  );\n\n  /**\n   * Optimization option. Prioritize loading tiles in the center of the screen by temporarily raising the\n   * screen space error for tiles around the edge of the screen. Screen space error returns to normal once all\n   * the tiles in the center of the screen as determined by the {@link Cesium3DTileset#foveatedConeSize} are loaded.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.foveatedScreenSpaceError = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.foveatedScreenSpaceError,\n    true\n  );\n  this._foveatedConeSize = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.foveatedConeSize, 0.1);\n  this._foveatedMinimumScreenSpaceErrorRelaxation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.foveatedMinimumScreenSpaceErrorRelaxation,\n    0.0\n  );\n\n  /**\n   * Gets or sets a callback to control how much to raise the screen space error for tiles outside the foveated cone,\n   * interpolating between {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation} and {@link Cesium3DTileset#maximumScreenSpaceError}.\n   *\n   * @type {Cesium3DTileset.foveatedInterpolationCallback}\n   */\n  this.foveatedInterpolationCallback = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.foveatedInterpolationCallback,\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].lerp */ .Z.lerp\n  );\n\n  /**\n   * Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control\n   * how long in seconds to wait after the camera stops moving before deferred tiles start loading in.\n   * This time delay prevents requesting tiles around the edges of the screen when the camera is moving.\n   * Setting this to 0.0 will immediately request all tiles in any given view.\n   *\n   * @type {Number}\n   * @default 0.2\n   */\n  this.foveatedTimeDelay = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.foveatedTimeDelay, 0.2);\n\n  /**\n   * A scalar that determines the density used to adjust the dynamic screen space error, similar to {@link Fog}. Increasing this\n   * value has the effect of increasing the maximum screen space error for all tiles, but in a non-linear fashion.\n   * The error starts at 0.0 and increases exponentially until a midpoint is reached, and then approaches 1.0 asymptotically.\n   * This has the effect of keeping high detail in the closer tiles and lower detail in the further tiles, with all tiles\n   * beyond a certain distance all roughly having an error of 1.0.\n   * <p>\n   * The dynamic error is in the range [0.0, 1.0) and is multiplied by <code>dynamicScreenSpaceErrorFactor</code> to produce the\n   * final dynamic error. This dynamic error is then subtracted from the tile\'s actual screen space error.\n   * </p>\n   * <p>\n   * Increasing <code>dynamicScreenSpaceErrorDensity</code> has the effect of moving the error midpoint closer to the camera.\n   * It is analogous to moving fog closer to the camera.\n   * </p>\n   *\n   * @type {Number}\n   * @default 0.00278\n   */\n  this.dynamicScreenSpaceErrorDensity = 0.00278;\n\n  /**\n   * A factor used to increase the screen space error of tiles for dynamic screen space error. As this value increases less tiles\n   * are requested for rendering and tiles in the distance will have lower detail. If set to zero, the feature will be disabled.\n   *\n   * @type {Number}\n   * @default 4.0\n   */\n  this.dynamicScreenSpaceErrorFactor = 4.0;\n\n  /**\n   * A ratio of the tileset\'s height at which the density starts to falloff. If the camera is below this height the\n   * full computed density is applied, otherwise the density falls off. This has the effect of higher density at\n   * street level views.\n   * <p>\n   * Valid values are between 0.0 and 1.0.\n   * </p>\n   *\n   * @type {Number}\n   * @default 0.25\n   */\n  this.dynamicScreenSpaceErrorHeightFalloff = 0.25;\n\n  this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n\n  /**\n   * Determines whether the tileset casts or receives shadows from light sources.\n   * <p>\n   * Enabling shadows has a performance impact. A tileset that casts shadows must be rendered twice, once from the camera and again from the light\'s point of view.\n   * </p>\n   * <p>\n   * Shadows are rendered only when {@link Viewer#shadows} is <code>true</code>.\n   * </p>\n   *\n   * @type {ShadowMode}\n   * @default ShadowMode.ENABLED\n   */\n  this.shadows = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.shadows, _ShadowMode_js__WEBPACK_IMPORTED_MODULE_44__/* ["default"].ENABLED */ .Z.ENABLED);\n\n  /**\n   * Determines if the tileset will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.show, true);\n\n  /**\n   * Defines how per-feature colors set from the Cesium API or declarative styling blend with the source colors from\n   * the original feature, e.g. glTF material or per-point color in the tile.\n   *\n   * @type {Cesium3DTileColorBlendMode}\n   * @default Cesium3DTileColorBlendMode.HIGHLIGHT\n   */\n  this.colorBlendMode = _Cesium3DTileColorBlendMode_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"].HIGHLIGHT */ .Z.HIGHLIGHT;\n\n  /**\n   * Defines the value used to linearly interpolate between the source color and feature color when the {@link Cesium3DTileset#colorBlendMode} is <code>MIX</code>.\n   * A value of 0.0 results in the source color while a value of 1.0 results in the feature color, with any value in-between\n   * resulting in a mix of the source color and feature color.\n   *\n   * @type {Number}\n   * @default 0.5\n   */\n  this.colorBlendAmount = 0.5;\n\n  /**\n   * Options for controlling point size based on geometric error and eye dome lighting.\n   * @type {PointCloudShading}\n   */\n  this.pointCloudShading = new _PointCloudShading_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"] */ .Z(options.pointCloudShading);\n\n  this._pointCloudEyeDomeLighting = new _PointCloudEyeDomeLighting_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z();\n\n  /**\n   * The event fired to indicate progress of loading new tiles.  This event is fired when a new tile\n   * is requested, when a requested tile is finished downloading, and when a downloaded tile has been\n   * processed and is ready to render.\n   * <p>\n   * The number of pending tile requests, <code>numberOfPendingRequests</code>, and number of tiles\n   * processing, <code>numberOfTilesProcessing</code> are passed to the event listener.\n   * </p>\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.loadProgress.addEventListener(function(numberOfPendingRequests, numberOfTilesProcessing) {\n   *     if ((numberOfPendingRequests === 0) && (numberOfTilesProcessing === 0)) {\n   *         console.log(\'Stopped loading\');\n   *         return;\n   *     }\n   *\n   *     console.log(\'Loading: requests: \' + numberOfPendingRequests + \', processing: \' + numberOfTilesProcessing);\n   * });\n   */\n  this.loadProgress = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * The event fired to indicate that all tiles that meet the screen space error this frame are loaded. The tileset\n   * is completely loaded for this view.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.allTilesLoaded.addEventListener(function() {\n   *     console.log(\'All tiles are loaded\');\n   * });\n   *\n   * @see Cesium3DTileset#tilesLoaded\n   */\n  this.allTilesLoaded = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * The event fired to indicate that all tiles that meet the screen space error this frame are loaded. This event\n   * is fired once when all tiles in the initial view are loaded.\n   * <p>\n   * This event is fired at the end of the frame after the scene is rendered.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.initialTilesLoaded.addEventListener(function() {\n   *     console.log(\'Initial tiles are loaded\');\n   * });\n   *\n   * @see Cesium3DTileset#allTilesLoaded\n   */\n  this.initialTilesLoaded = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * The event fired to indicate that a tile\'s content was loaded.\n   * <p>\n   * The loaded {@link Cesium3DTile} is passed to the event listener.\n   * </p>\n   * <p>\n   * This event is fired during the tileset traversal while the frame is being rendered\n   * so that updates to the tile take effect in the same frame.  Do not create or modify\n   * Cesium entities or primitives during the event listener.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.tileLoad.addEventListener(function(tile) {\n   *     console.log(\'A tile was loaded.\');\n   * });\n   */\n  this.tileLoad = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * The event fired to indicate that a tile\'s content was unloaded.\n   * <p>\n   * The unloaded {@link Cesium3DTile} is passed to the event listener.\n   * </p>\n   * <p>\n   * This event is fired immediately before the tile\'s content is unloaded while the frame is being\n   * rendered so that the event listener has access to the tile\'s content.  Do not create\n   * or modify Cesium entities or primitives during the event listener.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.tileUnload.addEventListener(function(tile) {\n   *     console.log(\'A tile was unloaded from the cache.\');\n   * });\n   *\n   * @see Cesium3DTileset#maximumMemoryUsage\n   * @see Cesium3DTileset#trimLoadedTiles\n   */\n  this.tileUnload = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * The event fired to indicate that a tile\'s content failed to load.\n   * <p>\n   * If there are no event listeners, error messages will be logged to the console.\n   * </p>\n   * <p>\n   * The error object passed to the listener contains two properties:\n   * <ul>\n   * <li><code>url</code>: the url of the failed tile.</li>\n   * <li><code>message</code>: the error message.</li>\n   * </ul>\n   * <p>\n   * If the <code>3DTILES_multiple_contents</code> extension is used, this event is raised once per inner content with errors.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.tileFailed.addEventListener(function(error) {\n   *     console.log(\'An error occurred loading tile: \' + error.url);\n   *     console.log(\'Error: \' + error.message);\n   * });\n   */\n  this.tileFailed = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * This event fires once for each visible tile in a frame.  This can be used to manually\n   * style a tileset.\n   * <p>\n   * The visible {@link Cesium3DTile} is passed to the event listener.\n   * </p>\n   * <p>\n   * This event is fired during the tileset traversal while the frame is being rendered\n   * so that updates to the tile take effect in the same frame.  Do not create or modify\n   * Cesium entities or primitives during the event listener.\n   * </p>\n   *\n   * @type {Event}\n   * @default new Event()\n   *\n   * @example\n   * tileset.tileVisible.addEventListener(function(tile) {\n   *     if (tile.content instanceof Cesium.Batched3DModel3DTileContent) {\n   *         console.log(\'A Batched 3D Model tile is visible.\');\n   *     }\n   * });\n   *\n   * @example\n   * // Apply a red style and then manually set random colors for every other feature when the tile becomes visible.\n   * tileset.style = new Cesium.Cesium3DTileStyle({\n   *     color : \'color("red")\'\n   * });\n   * tileset.tileVisible.addEventListener(function(tile) {\n   *     var content = tile.content;\n   *     var featuresLength = content.featuresLength;\n   *     for (var i = 0; i < featuresLength; i+=2) {\n   *         content.getFeature(i).color = Cesium.Color.fromRandom();\n   *     }\n   * });\n   */\n  this.tileVisible = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\n\n  /**\n   * Optimization option. Determines if level of detail skipping should be applied during the traversal.\n   * <p>\n   * The common strategy for replacement-refinement traversal is to store all levels of the tree in memory and require\n   * all children to be loaded before the parent can refine. With this optimization levels of the tree can be skipped\n   * entirely and children can be rendered alongside their parents. The tileset requires significantly less memory when\n   * using this optimization.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.skipLevelOfDetail = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.skipLevelOfDetail, false);\n  this._skipLevelOfDetail = this.skipLevelOfDetail;\n  this._disableSkipLevelOfDetail = false;\n\n  /**\n   * The screen space error that must be reached before skipping levels of detail.\n   * <p>\n   * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1024\n   */\n  this.baseScreenSpaceError = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.baseScreenSpaceError, 1024);\n\n  /**\n   * Multiplier defining the minimum screen space error to skip.\n   * For example, if a tile has screen space error of 100, no tiles will be loaded unless they\n   * are leaves or have a screen space error <code><= 100 / skipScreenSpaceErrorFactor</code>.\n   * <p>\n   * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n   * </p>\n   *\n   * @type {Number}\n   * @default 16\n   */\n  this.skipScreenSpaceErrorFactor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.skipScreenSpaceErrorFactor,\n    16\n  );\n\n  /**\n   * Constant defining the minimum number of levels to skip when loading tiles. When it is 0, no levels are skipped.\n   * For example, if a tile is level 1, no tiles will be loaded unless they are at level greater than 2.\n   * <p>\n   * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1\n   */\n  this.skipLevels = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.skipLevels, 1);\n\n  /**\n   * When true, only tiles that meet the maximum screen space error will ever be downloaded.\n   * Skipping factors are ignored and just the desired tiles are loaded.\n   * <p>\n   * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.immediatelyLoadDesiredLevelOfDetail = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.immediatelyLoadDesiredLevelOfDetail,\n    false\n  );\n\n  /**\n   * Determines whether siblings of visible tiles are always downloaded during traversal.\n   * This may be useful for ensuring that tiles are already available when the viewer turns left/right.\n   * <p>\n   * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.loadSiblings = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.loadSiblings, false);\n\n  this._clippingPlanes = undefined;\n  this.clippingPlanes = options.clippingPlanes;\n\n  this._imageBasedLightingFactor = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(1.0, 1.0);\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    options.imageBasedLightingFactor,\n    this._imageBasedLightingFactor\n  );\n\n  /**\n   * The light color when shading models. When <code>undefined</code> the scene\'s light color is used instead.\n   * <p>\n   * For example, disabling additional light sources by setting <code>model.imageBasedLightingFactor = new Cartesian2(0.0, 0.0)</code> will make the\n   * model much darker. Here, increasing the intensity of the light source will make the model brighter.\n   * </p>\n   *\n   * @type {Cartesian3}\n   * @default undefined\n   */\n  this.lightColor = options.lightColor;\n\n  /**\n   * The sun\'s luminance at the zenith in kilo candela per meter squared to use for this model\'s procedural environment map.\n   * This is used when {@link Cesium3DTileset#specularEnvironmentMaps} and {@link Cesium3DTileset#sphericalHarmonicCoefficients} are not defined.\n   *\n   * @type Number\n   *\n   * @default 0.2\n   *\n   */\n  this.luminanceAtZenith = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.luminanceAtZenith, 0.2);\n\n  /**\n   * The third order spherical harmonic coefficients used for the diffuse color of image-based lighting. When <code>undefined</code>, a diffuse irradiance\n   * computed from the atmosphere color is used.\n   * <p>\n   * There are nine <code>Cartesian3</code> coefficients.\n   * The order of the coefficients is: L<sub>00</sub>, L<sub>1-1</sub>, L<sub>10</sub>, L<sub>11</sub>, L<sub>2-2</sub>, L<sub>2-1</sub>, L<sub>20</sub>, L<sub>21</sub>, L<sub>22</sub>\n   * </p>\n   *\n   * These values can be obtained by preprocessing the environment map using the <code>cmgen</code> tool of\n   * {@link https://github.com/google/filament/releases|Google\'s Filament project}. This will also generate a KTX file that can be\n   * supplied to {@link Cesium3DTileset#specularEnvironmentMaps}.\n   *\n   * @type {Cartesian3[]}\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @see {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf|An Efficient Representation for Irradiance Environment Maps}\n   */\n  this.sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n\n  /**\n   * A URL to a KTX file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n   *\n   * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n   * @type {String}\n   * @see Cesium3DTileset#sphericalHarmonicCoefficients\n   */\n  this.specularEnvironmentMaps = options.specularEnvironmentMaps;\n\n  /**\n   * Whether to cull back-facing geometry. When true, back face culling is determined\n   * by the glTF material\'s doubleSided property; when false, back face culling is disabled.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.backFaceCulling = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.backFaceCulling, true);\n\n  /**\n   * Whether to display the outline for models using the\n   * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/CESIUM_primitive_outline|CESIUM_primitive_outline} extension.\n   * When true, outlines are displayed. When false, outlines are not displayed.\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  this.showOutline = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.showOutline, true);\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * Determines if only the tiles from last frame should be used for rendering.  This\n   * effectively "freezes" the tileset to the previous frame so it is possible to zoom\n   * out and see what was rendered.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugFreezeFrame = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.debugFreezeFrame, false);\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, assigns a random color to each tile.  This is useful for visualizing\n   * what features belong to what tiles, especially with additive refinement where features\n   * from parent tiles may be interleaved with features from child tiles.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugColorizeTiles = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.debugColorizeTiles, false);\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, renders each tile\'s content as a wireframe.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugWireframe = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.debugWireframe, false);\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, renders the bounding volume for each visible tile.  The bounding volume is\n   * white if the tile has a content bounding volume or is empty; otherwise, it is red.  Tiles that don\'t meet the\n   * screen space error and are still refining to their descendants are yellow.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowBoundingVolume,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, renders the bounding volume for each visible tile\'s content. The bounding volume is\n   * blue if the tile has a content bounding volume; otherwise it is red.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowContentBoundingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowContentBoundingVolume,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, renders the viewer request volume for each tile.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowViewerRequestVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowViewerRequestVolume,\n    false\n  );\n\n  this._tileDebugLabels = undefined;\n  this.debugPickedTileLabelOnly = false;\n  this.debugPickedTile = undefined;\n  this.debugPickPosition = undefined;\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, draws labels to indicate the geometric error of each tile.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowGeometricError = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowGeometricError,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, draws labels to indicate the number of commands, points, triangles and features of each tile.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowRenderingStatistics = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    options.debugShowRenderingStatistics,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, draws labels to indicate the geometry and texture memory usage of each tile.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowMemoryUsage = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.debugShowMemoryUsage, false);\n\n  /**\n   * This property is for debugging only; it is not optimized for production use.\n   * <p>\n   * When true, draws labels to indicate the url of each tile.\n   * </p>\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.debugShowUrl = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(options.debugShowUrl, false);\n\n  /**\n   * Function for examining vector lines as they are being streamed.\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   *\n   * @type {Function}\n   */\n  this.examineVectorLinesFunction = undefined;\n\n  /**\n   * If the 3DTILES_metadata extension is used, this stores\n   * a {@link Cesium3DTilesetMetadata} object to access metadata.\n   *\n   * @type {Cesium3DTilesetMetadata|undefined}\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.metadata = undefined;\n\n  /**\n   * A custom shader to apply to the tileset. Only used for contents that use\n   * {@link ModelExperimental}\n   *\n   * @type {CustomShader}\n   * @private\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   */\n  this.customShader = options.customShader;\n\n  this._schemaLoader = undefined;\n\n  var that = this;\n  var resource;\n  (0,_ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z)(options.url)\n    .then(function (url) {\n      var basePath;\n      resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].createIfNeeded */ .Z.createIfNeeded(url);\n      that._resource = resource;\n\n      // ion resources have a credits property we can use for additional attribution.\n      that._credits = resource.credits;\n\n      if (resource.extension === "json") {\n        basePath = resource.getBaseUri(true);\n      } else if (resource.isDataUri) {\n        basePath = "";\n      }\n\n      that._url = resource.url;\n      that._basePath = basePath;\n\n      return Cesium3DTileset.loadJson(resource);\n    })\n    .then(function (tilesetJson) {\n      // This needs to be called before loadTileset() so tile metadata\n      // can be initialized synchronously in the Cesium3DTile constructor\n      return processMetadataExtension(that, tilesetJson);\n    })\n    .then(function (tilesetJson) {\n      that._root = that.loadTileset(resource, tilesetJson);\n      var gltfUpAxis = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tilesetJson.asset.gltfUpAxis)\n        ? _Axis_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].fromName */ .Z.fromName(tilesetJson.asset.gltfUpAxis)\n        : _Axis_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].Y */ .Z.Y;\n      var asset = tilesetJson.asset;\n      that._asset = asset;\n      that._properties = tilesetJson.properties;\n      that._geometricError = tilesetJson.geometricError;\n      that._extensionsUsed = tilesetJson.extensionsUsed;\n      that._extensions = tilesetJson.extensions;\n      that._gltfUpAxis = gltfUpAxis;\n      that._extras = tilesetJson.extras;\n\n      var extras = asset.extras;\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(extras) &&\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(extras.cesium) &&\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(extras.cesium.credits)\n      ) {\n        var extraCredits = extras.cesium.credits;\n        var credits = that._credits;\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(credits)) {\n          credits = [];\n          that._credits = credits;\n        }\n        for (var i = 0; i < extraCredits.length; ++i) {\n          var credit = extraCredits[i];\n          credits.push(new _Core_Credit_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(credit.html, credit.showOnScreen));\n        }\n      }\n\n      // Save the original, untransformed bounding volume position so we can apply\n      // the tile transform and model matrix at run time\n      var boundingVolume = that._root.createBoundingVolume(\n        tilesetJson.root.boundingVolume,\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].IDENTITY */ .Z.IDENTITY\n      );\n      var clippingPlanesOrigin = boundingVolume.boundingSphere.center;\n      // If this origin is above the surface of the earth\n      // we want to apply an ENU orientation as our best guess of orientation.\n      // Otherwise, we assume it gets its position/orientation completely from the\n      // root tile transform and the tileset\'s model matrix\n      var originCartographic = that._ellipsoid.cartesianToCartographic(\n        clippingPlanesOrigin\n      );\n      if (\n        (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(originCartographic) &&\n        originCartographic.height >\n          _Core_ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"]._defaultMinTerrainHeight */ .Z._defaultMinTerrainHeight\n      ) {\n        that._initialClippingPlanesOriginMatrix = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n          clippingPlanesOrigin\n        );\n      }\n      that._clippingPlanesOriginMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].clone */ .Z.clone(\n        that._initialClippingPlanesOriginMatrix\n      );\n\n      that._readyPromise.resolve(that);\n    })\n    .otherwise(function (error) {\n      that._readyPromise.reject(error);\n    });\n}\n\nObject.defineProperties(Cesium3DTileset.prototype, {\n  /**\n   * NOTE: This getter exists so that `Picking.js` can differentiate between\n   *       PrimitiveCollection and Cesium3DTileset objects without inflating\n   *       the size of the module via `instanceof Cesium3DTileset`\n   * @private\n   */\n  isCesium3DTileset: {\n    get: function () {\n      return true;\n    },\n  },\n\n  /**\n   * Gets the tileset\'s asset object property, which contains metadata about the tileset.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification#reference-asset|asset schema reference}\n   * in the 3D Tiles spec for the full set of properties.\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n   */\n  asset: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._asset;\n    },\n  },\n\n  /**\n   * Gets the tileset\'s extensions object property.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n   */\n  extensions: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._extensions;\n    },\n  },\n\n  /**\n   * The {@link ClippingPlaneCollection} used to selectively disable rendering the tileset.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {ClippingPlaneCollection}\n   */\n  clippingPlanes: {\n    get: function () {\n      return this._clippingPlanes;\n    },\n    set: function (value) {\n      _ClippingPlaneCollection_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"].setOwner */ .Z.setOwner(value, this, "_clippingPlanes");\n    },\n  },\n\n  /**\n   * Gets the tileset\'s properties dictionary object, which contains metadata about per-feature properties.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification#reference-properties|properties schema reference}\n   * in the 3D Tiles spec for the full set of properties.\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n   *\n   * @example\n   * console.log(\'Maximum building height: \' + tileset.properties.height.maximum);\n   * console.log(\'Minimum building height: \' + tileset.properties.height.minimum);\n   *\n   * @see Cesium3DTileFeature#getProperty\n   * @see Cesium3DTileFeature#setProperty\n   */\n  properties: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._properties;\n    },\n  },\n\n  /**\n   * When <code>true</code>, the tileset\'s root tile is loaded and the tileset is ready to render.\n   * This is set to <code>true</code> right before {@link Cesium3DTileset#readyPromise} is resolved.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   */\n  ready: {\n    get: function () {\n      return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._root);\n    },\n  },\n\n  /**\n   * Gets the promise that will be resolved when the tileset\'s root tile is loaded and the tileset is ready to render.\n   * <p>\n   * This promise is resolved at the end of the frame before the first frame the tileset is rendered in.\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Promise.<Cesium3DTileset>}\n   * @readonly\n   *\n   * @example\n   * tileset.readyPromise.then(function(tileset) {\n   *     // tile.properties is not defined until readyPromise resolves.\n   *     var properties = tileset.properties;\n   *     if (Cesium.defined(properties)) {\n   *         for (var name in properties) {\n   *             console.log(properties[name]);\n   *         }\n   *     }\n   * });\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * When <code>true</code>, all tiles that meet the screen space error this frame are loaded. The tileset is\n   * completely loaded for this view.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default false\n   *\n   * @see Cesium3DTileset#allTilesLoaded\n   */\n  tilesLoaded: {\n    get: function () {\n      return this._tilesLoaded;\n    },\n  },\n\n  /**\n   * The resource used to fetch the tileset JSON file\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    },\n  },\n\n  /**\n   * The base path that non-absolute paths in tileset JSON file are relative to.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {String}\n   * @readonly\n   * @deprecated\n   */\n  basePath: {\n    get: function () {\n      (0,_Core_deprecationWarning_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(\n        "Cesium3DTileset.basePath",\n        "Cesium3DTileset.basePath has been deprecated. All tiles are relative to the url of the tileset JSON file that contains them. Use the url property instead."\n      );\n      return this._basePath;\n    },\n  },\n\n  /**\n   * The style, defined using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language},\n   * applied to each feature in the tileset.\n   * <p>\n   * Assign <code>undefined</code> to remove the style, which will restore the visual\n   * appearance of the tileset to its default when no style was applied.\n   * </p>\n   * <p>\n   * The style is applied to a tile before the {@link Cesium3DTileset#tileVisible}\n   * event is raised, so code in <code>tileVisible</code> can manually set a feature\'s\n   * properties (e.g. color and show) after the style is applied. When\n   * a new style is assigned any manually set properties are overwritten.\n   * </p>\n   * <p>\n   * Use an always "true" condition to specify the Color for all objects that are not\n   * overridden by pre-existing conditions. Otherwise, the default color Cesium.Color.White\n   * will be used. Similarly, use an always "true" condition to specify the show property\n   * for all objects that are not overridden by pre-existing conditions. Otherwise, the\n   * default show value true will be used.\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Cesium3DTileStyle|undefined}\n   *\n   * @default undefined\n   *\n   * @example\n   * tileset.style = new Cesium.Cesium3DTileStyle({\n   *    color : {\n   *        conditions : [\n   *            [\'${Height} >= 100\', \'color("purple", 0.5)\'],\n   *            [\'${Height} >= 50\', \'color("red")\'],\n   *            [\'true\', \'color("blue")\']\n   *        ]\n   *    },\n   *    show : \'${Height} > 0\',\n   *    meta : {\n   *        description : \'"Building id ${id} has height ${Height}."\'\n   *    }\n   * });\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n   */\n  style: {\n    get: function () {\n      return this._styleEngine.style;\n    },\n    set: function (value) {\n      this._styleEngine.style = value;\n    },\n  },\n\n  /**\n   * The maximum screen space error used to drive level of detail refinement.  This value helps determine when a tile\n   * refines to its descendants, and therefore plays a major role in balancing performance with visual quality.\n   * <p>\n   * A tile\'s screen space error is roughly equivalent to the number of pixels wide that would be drawn if a sphere with a\n   * radius equal to the tile\'s <b>geometric error</b> were rendered at the tile\'s position. If this value exceeds\n   * <code>maximumScreenSpaceError</code> the tile refines to its descendants.\n   * </p>\n   * <p>\n   * Depending on the tileset, <code>maximumScreenSpaceError</code> may need to be tweaked to achieve the right balance.\n   * Higher values provide better performance but lower visual quality.\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Number}\n   * @default 16\n   *\n   * @exception {DeveloperError} <code>maximumScreenSpaceError</code> must be greater than or equal to zero.\n   */\n  maximumScreenSpaceError: {\n    get: function () {\n      return this._maximumScreenSpaceError;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n        "maximumScreenSpaceError",\n        value,\n        0\n      );\n      //>>includeEnd(\'debug\');\n\n      this._maximumScreenSpaceError = value;\n    },\n  },\n\n  /**\n   * The maximum amount of GPU memory (in MB) that may be used to cache tiles. This value is estimated from\n   * geometry, textures, and batch table textures of loaded tiles. For point clouds, this value also\n   * includes per-point metadata.\n   * <p>\n   * Tiles not in view are unloaded to enforce this.\n   * </p>\n   * <p>\n   * If decreasing this value results in unloading tiles, the tiles are unloaded the next frame.\n   * </p>\n   * <p>\n   * If tiles sized more than <code>maximumMemoryUsage</code> are needed\n   * to meet the desired screen space error, determined by {@link Cesium3DTileset#maximumScreenSpaceError},\n   * for the current view, then the memory usage of the tiles loaded will exceed\n   * <code>maximumMemoryUsage</code>.  For example, if the maximum is 256 MB, but\n   * 300 MB of tiles are needed to meet the screen space error, then 300 MB of tiles may be loaded.  When\n   * these tiles go out of view, they will be unloaded.\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Number}\n   * @default 512\n   *\n   * @exception {DeveloperError} <code>maximumMemoryUsage</code> must be greater than or equal to zero.\n   * @see Cesium3DTileset#totalMemoryUsageInBytes\n   */\n  maximumMemoryUsage: {\n    get: function () {\n      return this._maximumMemoryUsage;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("value", value, 0);\n      //>>includeEnd(\'debug\');\n\n      this._maximumMemoryUsage = value;\n    },\n  },\n\n  /**\n   * The root tile.\n   *\n   * @memberOf Cesium3DTileset.prototype\n   *\n   * @type {Cesium3DTile}\n   * @readonly\n   *\n   * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n   */\n  root: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._root;\n    },\n  },\n\n  /**\n   * The tileset\'s bounding sphere.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {BoundingSphere}\n   * @readonly\n   *\n   * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n   *\n   * @example\n   * var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset({\n   *     url : \'http://localhost:8002/tilesets/Seattle/tileset.json\'\n   * }));\n   *\n   * tileset.readyPromise.then(function(tileset) {\n   *     // Set the camera to view the newly added tileset\n   *     viewer.camera.viewBoundingSphere(tileset.boundingSphere, new Cesium.HeadingPitchRange(0, -0.5, 0));\n   * });\n   */\n  boundingSphere: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      this._root.updateTransform(this._modelMatrix);\n      return this._root.boundingSphere;\n    },\n  },\n\n  /**\n   * A 4x4 transformation matrix that transforms the entire tileset.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Matrix4}\n   * @default Matrix4.IDENTITY\n   *\n   * @example\n   * // Adjust a tileset\'s height from the globe\'s surface.\n   * var heightOffset = 20.0;\n   * var boundingSphere = tileset.boundingSphere;\n   * var cartographic = Cesium.Cartographic.fromCartesian(boundingSphere.center);\n   * var surface = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, 0.0);\n   * var offset = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, heightOffset);\n   * var translation = Cesium.Cartesian3.subtract(offset, surface, new Cesium.Cartesian3());\n   * tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n   */\n  modelMatrix: {\n    get: function () {\n      return this._modelMatrix;\n    },\n    set: function (value) {\n      this._modelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].clone */ .Z.clone(value, this._modelMatrix);\n    },\n  },\n\n  /**\n   * Returns the time, in milliseconds, since the tileset was loaded and first updated.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  timeSinceLoad: {\n    get: function () {\n      return this._timeSinceLoad;\n    },\n  },\n\n  /**\n   * The total amount of GPU memory in bytes used by the tileset. This value is estimated from\n   * geometry, texture, and batch table textures of loaded tiles. For point clouds, this value also\n   * includes per-point metadata.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see Cesium3DTileset#maximumMemoryUsage\n   */\n  totalMemoryUsageInBytes: {\n    get: function () {\n      var statistics = this._statistics;\n      return (\n        statistics.texturesByteLength +\n        statistics.geometryByteLength +\n        statistics.batchTableByteLength\n      );\n    },\n  },\n\n  /**\n   * @private\n   */\n  clippingPlanesOriginMatrix: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._clippingPlanesOriginMatrix)) {\n        return _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].IDENTITY */ .Z.IDENTITY;\n      }\n\n      if (this._clippingPlanesOriginMatrixDirty) {\n        _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].multiply */ .Z.multiply(\n          this.root.computedTransform,\n          this._initialClippingPlanesOriginMatrix,\n          this._clippingPlanesOriginMatrix\n        );\n        this._clippingPlanesOriginMatrixDirty = false;\n      }\n\n      return this._clippingPlanesOriginMatrix;\n    },\n  },\n\n  /**\n   * @private\n   */\n  styleEngine: {\n    get: function () {\n      return this._styleEngine;\n    },\n  },\n\n  /**\n   * @private\n   */\n  statistics: {\n    get: function () {\n      return this._statistics;\n    },\n  },\n\n  /**\n   * Determines whether terrain, 3D Tiles or both will be classified by this tileset.\n   * <p>\n   * This option is only applied to tilesets containing batched 3D models, geometry data, or vector data. Even when undefined, vector data and geometry data\n   * must render as classifications and will default to rendering on both terrain and other 3D Tiles tilesets.\n   * </p>\n   * <p>\n   * When enabled for batched 3D model tilesets, there are a few requirements/limitations on the glTF:\n   * <ul>\n   *     <li>POSITION and _BATCHID semantics are required.</li>\n   *     <li>All indices with the same batch id must occupy contiguous sections of the index buffer.</li>\n   *     <li>All shaders and techniques are ignored. The generated shader simply multiplies the position by the model-view-projection matrix.</li>\n   *     <li>The only supported extensions are CESIUM_RTC and WEB3D_quantized_attributes.</li>\n   *     <li>Only one node is supported.</li>\n   *     <li>Only one mesh per node is supported.</li>\n   *     <li>Only one primitive per mesh is supported.</li>\n   * </ul>\n   * </p>\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {ClassificationType}\n   * @default undefined\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   * @readonly\n   */\n  classificationType: {\n    get: function () {\n      return this._classificationType;\n    },\n  },\n\n  /**\n   * Gets an ellipsoid describing the shape of the globe.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the cone size that determines which tiles are deferred.\n   * Tiles that are inside this cone are loaded immediately. Tiles outside the cone are potentially deferred based on how far outside the cone they are and {@link Cesium3DTileset#foveatedInterpolationCallback} and {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation}.\n   * Setting this to 0.0 means the cone will be the line formed by the camera position and its view direction. Setting this to 1.0 means the cone encompasses the entire field of view of the camera, essentially disabling the effect.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Number}\n   * @default 0.3\n   */\n  foveatedConeSize: {\n    get: function () {\n      return this._foveatedConeSize;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("foveatedConeSize", value, 0.0);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals("foveatedConeSize", value, 1.0);\n      //>>includeEnd(\'debug\');\n\n      this._foveatedConeSize = value;\n    },\n  },\n\n  /**\n   * Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the starting screen space error relaxation for tiles outside the foveated cone.\n   * The screen space error will be raised starting with this value up to {@link Cesium3DTileset#maximumScreenSpaceError} based on the provided {@link Cesium3DTileset#foveatedInterpolationCallback}.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  foveatedMinimumScreenSpaceErrorRelaxation: {\n    get: function () {\n      return this._foveatedMinimumScreenSpaceErrorRelaxation;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n        "foveatedMinimumScreenSpaceErrorRelaxation",\n        value,\n        0.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n        "foveatedMinimumScreenSpaceErrorRelaxation",\n        value,\n        this.maximumScreenSpaceError\n      );\n      //>>includeEnd(\'debug\');\n\n      this._foveatedMinimumScreenSpaceErrorRelaxation = value;\n    },\n  },\n\n  /**\n   * Returns the <code>extras</code> property at the top-level of the tileset JSON, which contains application specific metadata.\n   * Returns <code>undefined</code> if <code>extras</code> does not exist.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n   *\n   * @type {*}\n   * @readonly\n   *\n   * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification#specifying-extensions-and-application-specific-extras|Extras in the 3D Tiles specification.}\n   */\n  extras: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this.ready) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z(\n          "The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._extras;\n    },\n  },\n\n  /**\n   * Cesium adds lighting from the earth, sky, atmosphere, and star skybox. This cartesian is used to scale the final\n   * diffuse and specular lighting contribution from those sources to the final color. A value of 0.0 will disable those light sources.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @type {Cartesian2}\n   * @default Cartesian2(1.0, 1.0)\n   */\n  imageBasedLightingFactor: {\n    get: function () {\n      return this._imageBasedLightingFactor;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.object */ .Z.typeOf.object("imageBasedLightingFactor", value);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n        "imageBasedLightingFactor.x",\n        value.x,\n        0.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n        "imageBasedLightingFactor.x",\n        value.x,\n        1.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals(\n        "imageBasedLightingFactor.y",\n        value.y,\n        0.0\n      );\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.number.lessThanOrEquals */ .Z.typeOf.number.lessThanOrEquals(\n        "imageBasedLightingFactor.y",\n        value.y,\n        1.0\n      );\n      //>>includeEnd(\'debug\');\n      _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(value, this._imageBasedLightingFactor);\n    },\n  },\n\n  /**\n   * Indicates that only the tileset\'s vector tiles should be used for classification.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  vectorClassificationOnly: {\n    get: function () {\n      return this._vectorClassificationOnly;\n    },\n  },\n\n  /**\n   * Whether vector tiles should keep decoded positions in memory.\n   * This is used with {@link Cesium3DTileFeature.getPolylinePositions}.\n   *\n   * @memberof Cesium3DTileset.prototype\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  vectorKeepDecodedPositions: {\n    get: function () {\n      return this._vectorKeepDecodedPositions;\n    },\n  },\n});\n\n/**\n * Provides a hook to override the method used to request the tileset json\n * useful when fetching tilesets from remote servers\n * @param {Resource|String} tilesetUrl The url of the json file to be fetched\n * @returns {Promise.<Object>} A promise that resolves with the fetched json data\n */\nCesium3DTileset.loadJson = function (tilesetUrl) {\n  var resource = _Core_Resource_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].createIfNeeded */ .Z.createIfNeeded(tilesetUrl);\n  return resource.fetchJson();\n};\n\n/**\n * Marks the tileset\'s {@link Cesium3DTileset#style} as dirty, which forces all\n * features to re-evaluate the style in the next frame each is visible.\n */\nCesium3DTileset.prototype.makeStyleDirty = function () {\n  this._styleEngine.makeDirty();\n};\n\n/**\n * Loads the main tileset JSON file or a tileset JSON file referenced from a tile.\n *\n * @private\n */\nCesium3DTileset.prototype.loadTileset = function (\n  resource,\n  tilesetJson,\n  parentTile\n) {\n  var asset = tilesetJson.asset;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(asset)) {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z("Tileset must have an asset property.");\n  }\n  if (asset.version !== "0.0" && asset.version !== "1.0") {\n    throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z("The tileset must be 3D Tiles version 0.0 or 1.0.");\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tilesetJson.extensionsRequired)) {\n    Cesium3DTileset.checkSupportedExtensions(tilesetJson.extensionsRequired);\n  }\n\n  var statistics = this._statistics;\n\n  var tilesetVersion = asset.tilesetVersion;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tilesetVersion)) {\n    // Append the tileset version to the resource\n    this._basePath += "?v=" + tilesetVersion;\n    resource = resource.clone();\n    resource.setQueryParameters({ v: tilesetVersion });\n  }\n\n  // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n  // Get the basePath relative to the external tileset.\n  var rootTile = makeTile(this, resource, tilesetJson.root, parentTile);\n\n  // If there is a parentTile, add the root of the currently loading tileset\n  // to parentTile\'s children, and update its _depth.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(parentTile)) {\n    parentTile.children.push(rootTile);\n    rootTile._depth = parentTile._depth + 1;\n  }\n\n  var stack = [];\n  stack.push(rootTile);\n\n  while (stack.length > 0) {\n    var tile = stack.pop();\n    ++statistics.numberOfTilesTotal;\n    this._allTilesAdditive =\n      this._allTilesAdditive && tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"].ADD */ .Z.ADD;\n    var children = tile._header.children;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(children)) {\n      var length = children.length;\n      for (var i = 0; i < length; ++i) {\n        var childHeader = children[i];\n        var childTile = makeTile(this, resource, childHeader, tile);\n        tile.children.push(childTile);\n        childTile._depth = tile._depth + 1;\n        stack.push(childTile);\n      }\n    }\n\n    if (this._cullWithChildrenBounds) {\n      _Cesium3DTileOptimizations_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].checkChildrenWithinParent */ .Z.checkChildrenWithinParent(tile);\n    }\n  }\n\n  return rootTile;\n};\n\n/**\n * Make a {@link Cesium3DTile} for a specific tile. If the tile has the\n * 3DTILES_implicit_tiling extension, it creates a placeholder tile instead\n * for lazy evaluation of the implicit tileset.\n *\n * @param {Cesium3DTileset} tileset The tileset\n * @param {Resource} baseResource The base resource for the tileset\n * @param {Object} tileHeader The JSON header for the tile\n * @param {Cesium3DTile} [parentTile] The parent tile of the new tile\n * @returns {Cesium3DTile} The newly created tile\n *\n * @private\n */\nfunction makeTile(tileset, baseResource, tileHeader, parentTile) {\n  if ((0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"] */ .Z)(tileHeader, "3DTILES_implicit_tiling")) {\n    var metadataSchema = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tileset.metadata)\n      ? tileset.metadata.schema\n      : undefined;\n\n    var implicitTileset = new _ImplicitTileset_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z(\n      baseResource,\n      tileHeader,\n      metadataSchema\n    );\n    var rootCoordinates = new _ImplicitTileCoordinates_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"] */ .Z({\n      subdivisionScheme: implicitTileset.subdivisionScheme,\n      subtreeLevels: implicitTileset.subtreeLevels,\n      level: 0,\n      x: 0,\n      y: 0,\n      // The constructor will only use this for octrees.\n      z: 0,\n    });\n\n    // Create a placeholder Cesium3DTile that has an ImplicitTileset\n    // object and whose content will resolve to an Implicit3DTileContent\n    var contentUri = implicitTileset.subtreeUriTemplate.getDerivedResource({\n      templateValues: rootCoordinates.getTemplateValues(),\n    }).url;\n    var contentJson = {\n      content: {\n        uri: contentUri,\n      },\n    };\n\n    var deepCopy = true;\n    var tileJson = (0,_Core_combine_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(contentJson, tileHeader, deepCopy);\n\n    // The placeholder tile does not have any extensions. If there are any\n    // extensions beyond 3DTILES_implicit_tiling, Implicit3DTileContent will\n    // copy them to the transcoded tiles.\n    delete tileJson.extensions;\n\n    var tile = new _Cesium3DTile_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z(tileset, baseResource, tileJson, parentTile);\n    tile.implicitTileset = implicitTileset;\n    tile.implicitCoordinates = rootCoordinates;\n    return tile;\n  }\n\n  return new _Cesium3DTile_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z(tileset, baseResource, tileHeader, parentTile);\n}\n\n/**\n * If the <code>3DTILES_metadata</code> extension is present, initialize the\n * {@link Cesium3DTilesetMetadata} instance. This is asynchronous since\n * metadata schemas may be external.\n *\n * @param {Cesium3DTileset} tileset The tileset\n * @param {Object} tilesetJson The tileset JSON\n * @return {Promise<Object>} A promise that resolves to tilesetJson for chaining.\n * @private\n */\nfunction processMetadataExtension(tileset, tilesetJson) {\n  if (!(0,_hasExtension_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"] */ .Z)(tilesetJson, "3DTILES_metadata")) {\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].resolve */ .Z.resolve(tilesetJson);\n  }\n\n  var extension = tilesetJson.extensions["3DTILES_metadata"];\n\n  var schemaLoader;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(extension.schemaUri)) {\n    var resource = tileset._resource.getDerivedResource({\n      url: extension.schemaUri,\n    });\n    schemaLoader = _ResourceCache_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].loadSchema */ .Z.loadSchema({\n      resource: resource,\n    });\n  } else {\n    schemaLoader = _ResourceCache_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].loadSchema */ .Z.loadSchema({\n      schema: extension.schema,\n    });\n  }\n  tileset._schemaLoader = schemaLoader;\n\n  return schemaLoader.promise.then(function (schemaLoader) {\n    tileset.metadata = new _Cesium3DTilesetMetadata_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"] */ .Z({\n      schema: schemaLoader.schema,\n      extension: extension,\n    });\n\n    return tilesetJson;\n  });\n}\n\nvar scratchPositionNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchMatrix = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\nvar scratchCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\nvar scratchDirection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction updateDynamicScreenSpaceError(tileset, frameState) {\n  var up;\n  var direction;\n  var height;\n  var minimumHeight;\n  var maximumHeight;\n\n  var camera = frameState.camera;\n  var root = tileset._root;\n  var tileBoundingVolume = root.contentBoundingVolume;\n\n  if (tileBoundingVolume instanceof _TileBoundingRegion_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"] */ .Z) {\n    up = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(camera.positionWC, scratchPositionNormal);\n    direction = camera.directionWC;\n    height = camera.positionCartographic.height;\n    minimumHeight = tileBoundingVolume.minimumHeight;\n    maximumHeight = tileBoundingVolume.maximumHeight;\n  } else {\n    // Transform camera position and direction into the local coordinate system of the tileset\n    var transformLocal = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].inverseTransformation */ .Z.inverseTransformation(\n      root.computedTransform,\n      scratchMatrix\n    );\n    var ellipsoid = frameState.mapProjection.ellipsoid;\n    var boundingVolume = tileBoundingVolume.boundingVolume;\n    var centerLocal = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n      transformLocal,\n      boundingVolume.center,\n      scratchCenter\n    );\n    if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].magnitude */ .Z.magnitude(centerLocal) > ellipsoid.minimumRadius) {\n      // The tileset is defined in WGS84. Approximate the minimum and maximum height.\n      var centerCartographic = _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromCartesian */ .Z.fromCartesian(\n        centerLocal,\n        ellipsoid,\n        scratchCartographic\n      );\n      up = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(camera.positionWC, scratchPositionNormal);\n      direction = camera.directionWC;\n      height = camera.positionCartographic.height;\n      minimumHeight = 0.0;\n      maximumHeight = centerCartographic.height * 2.0;\n    } else {\n      // The tileset is defined in local coordinates (z-up)\n      var positionLocal = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(\n        transformLocal,\n        camera.positionWC,\n        scratchPosition\n      );\n      up = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNIT_Z */ .Z.UNIT_Z;\n      direction = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].multiplyByPointAsVector */ .Z.multiplyByPointAsVector(\n        transformLocal,\n        camera.directionWC,\n        scratchDirection\n      );\n      direction = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(direction, direction);\n      height = positionLocal.z;\n      if (tileBoundingVolume instanceof _TileOrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_48__/* ["default"] */ .Z) {\n        // Assuming z-up, the last component stores the half-height of the box\n        var boxHeight = root._header.boundingVolume.box[11];\n        minimumHeight = centerLocal.z - boxHeight;\n        maximumHeight = centerLocal.z + boxHeight;\n      } else if (tileBoundingVolume instanceof _TileBoundingSphere_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"] */ .Z) {\n        var radius = boundingVolume.radius;\n        minimumHeight = centerLocal.z - radius;\n        maximumHeight = centerLocal.z + radius;\n      }\n    }\n  }\n\n  // The range where the density starts to lessen. Start at the quarter height of the tileset.\n  var heightFalloff = tileset.dynamicScreenSpaceErrorHeightFalloff;\n  var heightClose =\n    minimumHeight + (maximumHeight - minimumHeight) * heightFalloff;\n  var heightFar = maximumHeight;\n\n  var t = _Core_Math_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].clamp */ .Z.clamp(\n    (height - heightClose) / (heightFar - heightClose),\n    0.0,\n    1.0\n  );\n\n  // Increase density as the camera tilts towards the horizon\n  var dot = Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].dot */ .Z.dot(direction, up));\n  var horizonFactor = 1.0 - dot;\n\n  // Weaken the horizon factor as the camera height increases, implying the camera is further away from the tileset.\n  // The goal is to increase density for the "street view", not when viewing the tileset from a distance.\n  horizonFactor = horizonFactor * (1.0 - t);\n\n  var density = tileset.dynamicScreenSpaceErrorDensity;\n  density *= horizonFactor;\n\n  tileset._dynamicScreenSpaceErrorComputedDensity = density;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction requestContent(tileset, tile) {\n  if (tile.hasEmptyContent) {\n    return;\n  }\n\n  var statistics = tileset._statistics;\n  var expired = tile.contentExpired;\n  var attemptedRequests = tile.requestContent();\n\n  if (attemptedRequests > 0) {\n    statistics.numberOfAttemptedRequests += attemptedRequests;\n    return;\n  }\n\n  if (expired) {\n    if (tile.hasTilesetContent || tile.hasImplicitContent) {\n      destroySubtree(tileset, tile);\n    } else {\n      statistics.decrementLoadCounts(tile.content);\n      --statistics.numberOfTilesWithContentReady;\n    }\n  }\n\n  tileset._requestedTilesInFlight.push(tile);\n\n  tile.contentReadyToProcessPromise.then(addToProcessingQueue(tileset, tile));\n  tile.contentReadyPromise\n    .then(handleTileSuccess(tileset, tile))\n    .otherwise(handleTileFailure(tileset, tile));\n}\n\nfunction sortRequestByPriority(a, b) {\n  return a._priority - b._priority;\n}\n\n/**\n * Perform any pass invariant tasks here. Called after the render pass.\n * @private\n */\nCesium3DTileset.prototype.postPassesUpdate = function (frameState) {\n  if (!this.ready) {\n    return;\n  }\n\n  cancelOutOfViewRequests(this, frameState);\n  raiseLoadProgressEvent(this, frameState);\n  this._cache.unloadTiles(this, unloadTile);\n  this._styleEngine.resetDirty();\n};\n\n/**\n * Perform any pass invariant tasks here. Called before any passes are executed.\n * @private\n */\nCesium3DTileset.prototype.prePassesUpdate = function (frameState) {\n  if (!this.ready) {\n    return;\n  }\n\n  processTiles(this, frameState);\n\n  // Update clipping planes\n  var clippingPlanes = this._clippingPlanes;\n  this._clippingPlanesOriginMatrixDirty = true;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(clippingPlanes) && clippingPlanes.enabled) {\n    clippingPlanes.update(frameState);\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._loadTimestamp)) {\n    this._loadTimestamp = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(frameState.time);\n  }\n  this._timeSinceLoad = Math.max(\n    _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].secondsDifference */ .Z.secondsDifference(frameState.time, this._loadTimestamp) * 1000,\n    0.0\n  );\n\n  this._skipLevelOfDetail =\n    this.skipLevelOfDetail &&\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._classificationType) &&\n    !this._disableSkipLevelOfDetail &&\n    !this._allTilesAdditive;\n\n  if (this.dynamicScreenSpaceError) {\n    updateDynamicScreenSpaceError(this, frameState);\n  }\n\n  if (frameState.newFrame) {\n    this._cache.reset();\n  }\n};\n\nfunction cancelOutOfViewRequests(tileset, frameState) {\n  var requestedTilesInFlight = tileset._requestedTilesInFlight;\n  var removeCount = 0;\n  var length = requestedTilesInFlight.length;\n  for (var i = 0; i < length; ++i) {\n    var tile = requestedTilesInFlight[i];\n\n    // NOTE: This is framerate dependant so make sure the threshold check is small\n    var outOfView = frameState.frameNumber - tile._touchedFrame >= 1;\n    if (tile._contentState !== _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].LOADING */ .Z.LOADING) {\n      // No longer fetching from host, don\'t need to track it anymore. Gets marked as LOADING in Cesium3DTile::requestContent().\n      ++removeCount;\n      continue;\n    } else if (outOfView) {\n      // RequestScheduler will take care of cancelling it\n      tile.cancelRequests();\n      ++removeCount;\n      continue;\n    }\n\n    if (removeCount > 0) {\n      requestedTilesInFlight[i - removeCount] = tile;\n    }\n  }\n\n  requestedTilesInFlight.length -= removeCount;\n}\n\nfunction requestTiles(tileset, isAsync) {\n  // Sort requests by priority before making any requests.\n  // This makes it less likely that requests will be cancelled after being issued.\n  var requestedTiles = tileset._requestedTiles;\n  var length = requestedTiles.length;\n  requestedTiles.sort(sortRequestByPriority);\n  for (var i = 0; i < length; ++i) {\n    requestContent(tileset, requestedTiles[i]);\n  }\n}\n\nfunction addToProcessingQueue(tileset, tile) {\n  return function () {\n    tileset._processingQueue.push(tile);\n\n    ++tileset._statistics.numberOfTilesProcessing;\n  };\n}\n\nfunction handleTileFailure(tileset, tile) {\n  return function (error) {\n    var url = tile._contentResource.url;\n    var message = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(error.message) ? error.message : error.toString();\n    if (tileset.tileFailed.numberOfListeners > 0) {\n      tileset.tileFailed.raiseEvent({\n        url: url,\n        message: message,\n      });\n    } else {\n      console.log("A 3D tile failed to load: " + url);\n      console.log("Error: " + message);\n    }\n  };\n}\n\nfunction handleTileSuccess(tileset, tile) {\n  return function () {\n    --tileset._statistics.numberOfTilesProcessing;\n\n    if (!tile.hasTilesetContent && !tile.hasImplicitContent) {\n      // RESEARCH_IDEA: ability to unload tiles (without content) for an\n      // external tileset when all the tiles are unloaded.\n      tileset._statistics.incrementLoadCounts(tile.content);\n      ++tileset._statistics.numberOfTilesWithContentReady;\n      ++tileset._statistics.numberOfLoadedTilesTotal;\n\n      // Add to the tile cache. Previously expired tiles are already in the cache and won\'t get re-added.\n      tileset._cache.add(tile);\n    }\n\n    tileset.tileLoad.raiseEvent(tile);\n  };\n}\n\nfunction filterProcessingQueue(tileset) {\n  var tiles = tileset._processingQueue;\n  var length = tiles.length;\n\n  var removeCount = 0;\n  for (var i = 0; i < length; ++i) {\n    var tile = tiles[i];\n    if (tile._contentState !== _Cesium3DTileContentState_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].PROCESSING */ .Z.PROCESSING) {\n      ++removeCount;\n      continue;\n    }\n    if (removeCount > 0) {\n      tiles[i - removeCount] = tile;\n    }\n  }\n  tiles.length -= removeCount;\n}\n\nfunction processTiles(tileset, frameState) {\n  filterProcessingQueue(tileset);\n  var tiles = tileset._processingQueue;\n  var length = tiles.length;\n  // Process tiles in the PROCESSING state so they will eventually move to the READY state.\n  for (var i = 0; i < length; ++i) {\n    tiles[i].process(tileset, frameState);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvar scratchCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nvar stringOptions = {\n  maximumFractionDigits: 3,\n};\n\nfunction formatMemoryString(memorySizeInBytes) {\n  var memoryInMegabytes = memorySizeInBytes / 1048576;\n  if (memoryInMegabytes < 1.0) {\n    return memoryInMegabytes.toLocaleString(undefined, stringOptions);\n  }\n  return Math.round(memoryInMegabytes).toLocaleString();\n}\n\nfunction computeTileLabelPosition(tile) {\n  var boundingVolume = tile.boundingVolume.boundingVolume;\n  var halfAxes = boundingVolume.halfAxes;\n  var radius = boundingVolume.radius;\n\n  var position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(boundingVolume.center, scratchCartesian);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(halfAxes)) {\n    position.x += 0.75 * (halfAxes[0] + halfAxes[3] + halfAxes[6]);\n    position.y += 0.75 * (halfAxes[1] + halfAxes[4] + halfAxes[7]);\n    position.z += 0.75 * (halfAxes[2] + halfAxes[5] + halfAxes[8]);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(radius)) {\n    var normal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].normalize */ .Z.normalize(boundingVolume.center, scratchCartesian);\n    normal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      normal,\n      0.75 * radius,\n      scratchCartesian\n    );\n    position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].add */ .Z.add(normal, boundingVolume.center, scratchCartesian);\n  }\n  return position;\n}\n\nfunction addTileDebugLabel(tile, tileset, position) {\n  var labelString = "";\n  var attributes = 0;\n\n  if (tileset.debugShowGeometricError) {\n    labelString += "\\nGeometric error: " + tile.geometricError;\n    attributes++;\n  }\n\n  if (tileset.debugShowRenderingStatistics) {\n    labelString += "\\nCommands: " + tile.commandsLength;\n    attributes++;\n\n    // Don\'t display number of points or triangles if 0.\n    var numberOfPoints = tile.content.pointsLength;\n    if (numberOfPoints > 0) {\n      labelString += "\\nPoints: " + tile.content.pointsLength;\n      attributes++;\n    }\n\n    var numberOfTriangles = tile.content.trianglesLength;\n    if (numberOfTriangles > 0) {\n      labelString += "\\nTriangles: " + tile.content.trianglesLength;\n      attributes++;\n    }\n\n    labelString += "\\nFeatures: " + tile.content.featuresLength;\n    attributes++;\n  }\n\n  if (tileset.debugShowMemoryUsage) {\n    labelString +=\n      "\\nTexture Memory: " +\n      formatMemoryString(tile.content.texturesByteLength);\n    labelString +=\n      "\\nGeometry Memory: " +\n      formatMemoryString(tile.content.geometryByteLength);\n    attributes += 2;\n  }\n\n  if (tileset.debugShowUrl) {\n    if (tile.hasMultipleContents) {\n      labelString += "\\nUrls:";\n      var urls = tile.content.innerContentUrls;\n      for (var i = 0; i < urls.length; i++) {\n        labelString += "\\n- " + urls[i];\n      }\n      attributes += urls.length;\n    } else {\n      labelString += "\\nUrl: " + tile._header.content.uri;\n      attributes++;\n    }\n  }\n\n  var newLabel = {\n    text: labelString.substring(1),\n    position: position,\n    font: 19 - attributes + "px sans-serif",\n    showBackground: true,\n    disableDepthTestDistance: Number.POSITIVE_INFINITY,\n  };\n\n  return tileset._tileDebugLabels.add(newLabel);\n}\n\nfunction updateTileDebugLabels(tileset, frameState) {\n  var i;\n  var tile;\n  var selectedTiles = tileset._selectedTiles;\n  var selectedLength = selectedTiles.length;\n  var emptyTiles = tileset._emptyTiles;\n  var emptyLength = emptyTiles.length;\n  tileset._tileDebugLabels.removeAll();\n\n  if (tileset.debugPickedTileLabelOnly) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tileset.debugPickedTile)) {\n      var position = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tileset.debugPickPosition)\n        ? tileset.debugPickPosition\n        : computeTileLabelPosition(tileset.debugPickedTile);\n      var label = addTileDebugLabel(tileset.debugPickedTile, tileset, position);\n      label.pixelOffset = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(15, -15); // Offset to avoid picking the label.\n    }\n  } else {\n    for (i = 0; i < selectedLength; ++i) {\n      tile = selectedTiles[i];\n      addTileDebugLabel(tile, tileset, computeTileLabelPosition(tile));\n    }\n    for (i = 0; i < emptyLength; ++i) {\n      tile = emptyTiles[i];\n      if (tile.hasTilesetContent || tile.hasImplicitContent) {\n        addTileDebugLabel(tile, tileset, computeTileLabelPosition(tile));\n      }\n    }\n  }\n  tileset._tileDebugLabels.update(frameState);\n}\n\nfunction updateTiles(tileset, frameState, passOptions) {\n  tileset._styleEngine.applyStyle(tileset);\n\n  var isRender = passOptions.isRender;\n  var statistics = tileset._statistics;\n  var commandList = frameState.commandList;\n  var numberOfInitialCommands = commandList.length;\n  var selectedTiles = tileset._selectedTiles;\n  var selectedLength = selectedTiles.length;\n  var emptyTiles = tileset._emptyTiles;\n  var emptyLength = emptyTiles.length;\n  var tileVisible = tileset.tileVisible;\n  var i;\n  var tile;\n\n  var bivariateVisibilityTest =\n    tileset._skipLevelOfDetail &&\n    tileset._hasMixedContent &&\n    frameState.context.stencilBuffer &&\n    selectedLength > 0;\n\n  tileset._backfaceCommands.length = 0;\n\n  if (bivariateVisibilityTest) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tileset._stencilClearCommand)) {\n      tileset._stencilClearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z({\n        stencil: 0,\n        pass: _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE,\n        renderState: _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].fromCache */ .Z.fromCache({\n          stencilMask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"].SKIP_LOD_MASK */ .Z.SKIP_LOD_MASK,\n        }),\n      });\n    }\n    commandList.push(tileset._stencilClearCommand);\n  }\n\n  var lengthBeforeUpdate = commandList.length;\n  for (i = 0; i < selectedLength; ++i) {\n    tile = selectedTiles[i];\n    // Raise the tileVisible event before update in case the tileVisible event\n    // handler makes changes that update needs to apply to WebGL resources\n    if (isRender) {\n      tileVisible.raiseEvent(tile);\n    }\n    tile.update(tileset, frameState, passOptions);\n    statistics.incrementSelectionCounts(tile.content);\n    ++statistics.selected;\n  }\n  for (i = 0; i < emptyLength; ++i) {\n    tile = emptyTiles[i];\n    tile.update(tileset, frameState, passOptions);\n  }\n\n  var addedCommandsLength = commandList.length - lengthBeforeUpdate;\n\n  tileset._backfaceCommands.trim();\n\n  if (bivariateVisibilityTest) {\n    /*\n     * Consider \'effective leaf\' tiles as selected tiles that have no selected descendants. They may have children,\n     * but they are currently our effective leaves because they do not have selected descendants. These tiles\n     * are those where with tile._finalResolution === true.\n     * Let \'unresolved\' tiles be those with tile._finalResolution === false.\n     *\n     * 1. Render just the backfaces of unresolved tiles in order to lay down z\n     * 2. Render all frontfaces wherever tile._selectionDepth > stencilBuffer.\n     *    Replace stencilBuffer with tile._selectionDepth, when passing the z test.\n     *    Because children are always drawn before ancestors {@link Cesium3DTilesetTraversal#traverseAndSelect},\n     *    this effectively draws children first and does not draw ancestors if a descendant has already\n     *    been drawn at that pixel.\n     *    Step 1 prevents child tiles from appearing on top when they are truly behind ancestor content.\n     *    If they are behind the backfaces of the ancestor, then they will not be drawn.\n     *\n     * NOTE: Step 2 sometimes causes visual artifacts when backfacing child content has some faces that\n     * partially face the camera and are inside of the ancestor content. Because they are inside, they will\n     * not be culled by the depth writes in Step 1, and because they partially face the camera, the stencil tests\n     * will draw them on top of the ancestor content.\n     *\n     * NOTE: Because we always render backfaces of unresolved tiles, if the camera is looking at the backfaces\n     * of an object, they will always be drawn while loading, even if backface culling is enabled.\n     */\n\n    var backfaceCommands = tileset._backfaceCommands.values;\n    var backfaceCommandsLength = backfaceCommands.length;\n\n    commandList.length += backfaceCommandsLength;\n\n    // copy commands to the back of the commandList\n    for (i = addedCommandsLength - 1; i >= 0; --i) {\n      commandList[lengthBeforeUpdate + backfaceCommandsLength + i] =\n        commandList[lengthBeforeUpdate + i];\n    }\n\n    // move backface commands to the front of the commandList\n    for (i = 0; i < backfaceCommandsLength; ++i) {\n      commandList[lengthBeforeUpdate + i] = backfaceCommands[i];\n    }\n  }\n\n  // Number of commands added by each update above\n  addedCommandsLength = commandList.length - numberOfInitialCommands;\n  statistics.numberOfCommands = addedCommandsLength;\n\n  // Only run EDL if simple attenuation is on\n  if (\n    isRender &&\n    tileset.pointCloudShading.attenuation &&\n    tileset.pointCloudShading.eyeDomeLighting &&\n    addedCommandsLength > 0\n  ) {\n    tileset._pointCloudEyeDomeLighting.update(\n      frameState,\n      numberOfInitialCommands,\n      tileset.pointCloudShading,\n      tileset.boundingSphere\n    );\n  }\n\n  if (isRender) {\n    if (\n      tileset.debugShowGeometricError ||\n      tileset.debugShowRenderingStatistics ||\n      tileset.debugShowMemoryUsage ||\n      tileset.debugShowUrl\n    ) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tileset._tileDebugLabels)) {\n        tileset._tileDebugLabels = new _LabelCollection_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z();\n      }\n      updateTileDebugLabels(tileset, frameState);\n    } else {\n      tileset._tileDebugLabels =\n        tileset._tileDebugLabels && tileset._tileDebugLabels.destroy();\n    }\n  }\n}\n\nvar scratchStack = [];\n\nfunction destroySubtree(tileset, tile) {\n  var root = tile;\n  var stack = scratchStack;\n  stack.push(tile);\n  while (stack.length > 0) {\n    tile = stack.pop();\n    var children = tile.children;\n    var length = children.length;\n    for (var i = 0; i < length; ++i) {\n      stack.push(children[i]);\n    }\n    if (tile !== root) {\n      destroyTile(tileset, tile);\n      --tileset._statistics.numberOfTilesTotal;\n    }\n  }\n  root.children = [];\n}\n\nfunction unloadTile(tileset, tile) {\n  tileset.tileUnload.raiseEvent(tile);\n  tileset._statistics.decrementLoadCounts(tile.content);\n  --tileset._statistics.numberOfTilesWithContentReady;\n  tile.unloadContent();\n}\n\nfunction destroyTile(tileset, tile) {\n  tileset._cache.unloadTile(tileset, tile, unloadTile);\n  tile.destroy();\n}\n\n/**\n * Unloads all tiles that weren\'t selected the previous frame.  This can be used to\n * explicitly manage the tile cache and reduce the total number of tiles loaded below\n * {@link Cesium3DTileset#maximumMemoryUsage}.\n * <p>\n * Tile unloads occur at the next frame to keep all the WebGL delete calls\n * within the render loop.\n * </p>\n */\nCesium3DTileset.prototype.trimLoadedTiles = function () {\n  this._cache.trim();\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction raiseLoadProgressEvent(tileset, frameState) {\n  var statistics = tileset._statistics;\n  var statisticsLast = tileset._statisticsLast;\n\n  var numberOfPendingRequests = statistics.numberOfPendingRequests;\n  var numberOfTilesProcessing = statistics.numberOfTilesProcessing;\n  var lastNumberOfPendingRequest = statisticsLast.numberOfPendingRequests;\n  var lastNumberOfTilesProcessing = statisticsLast.numberOfTilesProcessing;\n\n  _Cesium3DTilesetStatistics_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].clone */ .Z.clone(statistics, statisticsLast);\n\n  var progressChanged =\n    numberOfPendingRequests !== lastNumberOfPendingRequest ||\n    numberOfTilesProcessing !== lastNumberOfTilesProcessing;\n\n  if (progressChanged) {\n    frameState.afterRender.push(function () {\n      tileset.loadProgress.raiseEvent(\n        numberOfPendingRequests,\n        numberOfTilesProcessing\n      );\n    });\n  }\n\n  tileset._tilesLoaded =\n    statistics.numberOfPendingRequests === 0 &&\n    statistics.numberOfTilesProcessing === 0 &&\n    statistics.numberOfAttemptedRequests === 0;\n\n  // Events are raised (added to the afterRender queue) here since promises\n  // may resolve outside of the update loop that then raise events, e.g.,\n  // model\'s readyPromise.\n  if (progressChanged && tileset._tilesLoaded) {\n    frameState.afterRender.push(function () {\n      tileset.allTilesLoaded.raiseEvent();\n    });\n    if (!tileset._initialTilesLoaded) {\n      tileset._initialTilesLoaded = true;\n      frameState.afterRender.push(function () {\n        tileset.initialTilesLoaded.raiseEvent();\n      });\n    }\n  }\n}\n\nfunction resetMinimumMaximum(tileset) {\n  tileset._heatmap.resetMinimumMaximum();\n  tileset._minimumPriority.depth = Number.MAX_VALUE;\n  tileset._maximumPriority.depth = -Number.MAX_VALUE;\n  tileset._minimumPriority.foveatedFactor = Number.MAX_VALUE;\n  tileset._maximumPriority.foveatedFactor = -Number.MAX_VALUE;\n  tileset._minimumPriority.distance = Number.MAX_VALUE;\n  tileset._maximumPriority.distance = -Number.MAX_VALUE;\n  tileset._minimumPriority.reverseScreenSpaceError = Number.MAX_VALUE;\n  tileset._maximumPriority.reverseScreenSpaceError = -Number.MAX_VALUE;\n}\n\nfunction detectModelMatrixChanged(tileset, frameState) {\n  if (\n    frameState.frameNumber !== tileset._updatedModelMatrixFrame ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(tileset._previousModelMatrix)\n  ) {\n    tileset._updatedModelMatrixFrame = frameState.frameNumber;\n    tileset._modelMatrixChanged = !_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].equals */ .Z.equals(\n      tileset.modelMatrix,\n      tileset._previousModelMatrix\n    );\n    if (tileset._modelMatrixChanged) {\n      tileset._previousModelMatrix = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].clone */ .Z.clone(\n        tileset.modelMatrix,\n        tileset._previousModelMatrix\n      );\n    }\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction update(tileset, frameState, passStatistics, passOptions) {\n  if (frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"].MORPHING */ .Z.MORPHING) {\n    return false;\n  }\n\n  if (!tileset.ready) {\n    return false;\n  }\n\n  var statistics = tileset._statistics;\n  statistics.clear();\n\n  var isRender = passOptions.isRender;\n\n  // Resets the visibility check for each pass\n  ++tileset._updatedVisibilityFrame;\n\n  // Update any tracked min max values\n  resetMinimumMaximum(tileset);\n\n  detectModelMatrixChanged(tileset, frameState);\n  tileset._cullRequestsWhileMoving =\n    tileset.cullRequestsWhileMoving && !tileset._modelMatrixChanged;\n\n  var ready = passOptions.traversal.selectTiles(tileset, frameState);\n\n  if (passOptions.requestTiles) {\n    requestTiles(tileset);\n  }\n\n  updateTiles(tileset, frameState, passOptions);\n\n  // Update pass statistics\n  _Cesium3DTilesetStatistics_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].clone */ .Z.clone(statistics, passStatistics);\n\n  if (isRender) {\n    var credits = tileset._credits;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(credits) && statistics.selected !== 0) {\n      var length = credits.length;\n      for (var i = 0; i < length; ++i) {\n        frameState.creditDisplay.addCredit(credits[i]);\n      }\n    }\n  }\n\n  return ready;\n}\n\n/**\n * @private\n */\nCesium3DTileset.prototype.update = function (frameState) {\n  this.updateForPass(frameState, frameState.tilesetPassState);\n};\n\n/**\n * @private\n */\nCesium3DTileset.prototype.updateForPass = function (\n  frameState,\n  tilesetPassState\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.object */ .Z.typeOf.object("frameState", frameState);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].typeOf.object */ .Z.typeOf.object("tilesetPassState", tilesetPassState);\n  //>>includeEnd(\'debug\');\n\n  var pass = tilesetPassState.pass;\n  if (\n    (pass === _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].PRELOAD */ .Z.PRELOAD &&\n      (!this.preloadWhenHidden || this.show)) ||\n    (pass === _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].PRELOAD_FLIGHT */ .Z.PRELOAD_FLIGHT &&\n      (!this.preloadFlightDestinations ||\n        (!this.show && !this.preloadWhenHidden))) ||\n    (pass === _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].REQUEST_RENDER_MODE_DEFER_CHECK */ .Z.REQUEST_RENDER_MODE_DEFER_CHECK &&\n      ((!this._cullRequestsWhileMoving && this.foveatedTimeDelay <= 0) ||\n        !this.show))\n  ) {\n    return;\n  }\n\n  var originalCommandList = frameState.commandList;\n  var originalCamera = frameState.camera;\n  var originalCullingVolume = frameState.cullingVolume;\n\n  tilesetPassState.ready = false;\n\n  var passOptions = _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"].getPassOptions */ .Z.getPassOptions(pass);\n  var ignoreCommands = passOptions.ignoreCommands;\n\n  var commandList = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    tilesetPassState.commandList,\n    originalCommandList\n  );\n  var commandStart = commandList.length;\n\n  frameState.commandList = commandList;\n  frameState.camera = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(tilesetPassState.camera, originalCamera);\n  frameState.cullingVolume = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(\n    tilesetPassState.cullingVolume,\n    originalCullingVolume\n  );\n\n  var passStatistics = this._statisticsPerPass[pass];\n\n  if (this.show || ignoreCommands) {\n    this._pass = pass;\n    tilesetPassState.ready = update(\n      this,\n      frameState,\n      passStatistics,\n      passOptions\n    );\n  }\n\n  if (ignoreCommands) {\n    commandList.length = commandStart;\n  }\n\n  frameState.commandList = originalCommandList;\n  frameState.camera = originalCamera;\n  frameState.cullingVolume = originalCullingVolume;\n};\n\n/**\n * <code>true</code> if the tileset JSON file lists the extension in extensionsUsed; otherwise, <code>false</code>.\n * @param {String} extensionName The name of the extension to check.\n *\n * @returns {Boolean} <code>true</code> if the tileset JSON file lists the extension in extensionsUsed; otherwise, <code>false</code>.\n */\nCesium3DTileset.prototype.hasExtension = function (extensionName) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._extensionsUsed)) {\n    return false;\n  }\n\n  return this._extensionsUsed.indexOf(extensionName) > -1;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Cesium3DTileset#destroy\n */\nCesium3DTileset.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n * @example\n * tileset = tileset && tileset.destroy();\n *\n * @see Cesium3DTileset#isDestroyed\n */\nCesium3DTileset.prototype.destroy = function () {\n  this._tileDebugLabels =\n    this._tileDebugLabels && this._tileDebugLabels.destroy();\n  this._clippingPlanes = this._clippingPlanes && this._clippingPlanes.destroy();\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._schemaLoader)) {\n    _ResourceCache_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"].unload */ .Z.unload(this._schemaLoader);\n  }\n\n  // Traverse the tree and destroy all tiles\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z)(this._root)) {\n    var stack = scratchStack;\n    stack.push(this._root);\n\n    while (stack.length > 0) {\n      var tile = stack.pop();\n      tile.destroy();\n\n      var children = tile.children;\n      var length = children.length;\n      for (var i = 0; i < length; ++i) {\n        stack.push(children[i]);\n      }\n    }\n  }\n\n  this._root = undefined;\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(this);\n};\n\nCesium3DTileset.supportedExtensions = {\n  "3DTILES_metadata": true,\n  "3DTILES_implicit_tiling": true,\n  "3DTILES_content_gltf": true,\n  "3DTILES_multiple_contents": true,\n  "3DTILES_bounding_volume_S2": true,\n  "3DTILES_batch_table_hierarchy": true,\n  "3DTILES_draco_point_compression": true,\n};\n\n/**\n * Checks to see if a given extension is supported by Cesium3DTileset. If\n * the extension is not supported by Cesium3DTileset, it throws a RuntimeError.\n *\n * @param {Object} extensionsRequired The extensions we wish to check\n *\n * @private\n */\nCesium3DTileset.checkSupportedExtensions = function (extensionsRequired) {\n  for (var i = 0; i < extensionsRequired.length; i++) {\n    if (!Cesium3DTileset.supportedExtensions[extensionsRequired[i]]) {\n      throw new _Core_RuntimeError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .Z(\n        "Unsupported 3D Tiles Extension: " + extensionsRequired[i]\n      );\n    }\n  }\n};\n\n/**\n * Optimization option. Used as a callback when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control how much to raise the screen space error for tiles outside the foveated cone,\n * interpolating between {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation} and {@link Cesium3DTileset#maximumScreenSpaceError}.\n *\n * @callback Cesium3DTileset.foveatedInterpolationCallback\n * @default Math.lerp\n *\n * @param {Number} p The start value to interpolate.\n * @param {Number} q The end value to interpolate.\n * @param {Number} time The time of interpolation generally in the range <code>[0.0, 1.0]</code>.\n * @returns {Number} The interpolated value.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTileset);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBYSxTQUFTLGdEQUFnRDtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQsOENBQThDLHNCQUFzQjtBQUNwRTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxzRUFBTztBQUNiLElBQUksaUZBQW9CO0FBQ3hCOztBQUVBO0FBQ0EsTUFBTSxzRUFBTztBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsMkVBQWE7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtCQUErQjtBQUNqRDtBQUNBLGdCQUFnQix1RUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlELGdEQUFnRDtBQUNqRywwQkFBMEIsaUVBQWlFLEtBQUssOENBQThDO0FBQzlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EseURBQWUsZUFBZSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0Nlc2l1bTNEVGlsZXNldC5qcz9iOTY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzIGZyb20gXCIuLi9Db3JlL0FwcHJveGltYXRlVGVycmFpbkhlaWdodHMuanNcIjtcbmltcG9ydCBDYXJ0ZXNpYW4yIGZyb20gXCIuLi9Db3JlL0NhcnRlc2lhbjIuanNcIjtcbmltcG9ydCBDYXJ0ZXNpYW4zIGZyb20gXCIuLi9Db3JlL0NhcnRlc2lhbjMuanNcIjtcbmltcG9ydCBDYXJ0b2dyYXBoaWMgZnJvbSBcIi4uL0NvcmUvQ2FydG9ncmFwaGljLmpzXCI7XG5pbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBjb21iaW5lIGZyb20gXCIuLi9Db3JlL2NvbWJpbmUuanNcIjtcbmltcG9ydCBDcmVkaXQgZnJvbSBcIi4uL0NvcmUvQ3JlZGl0LmpzXCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi9Db3JlL2RlZmF1bHRWYWx1ZS5qc1wiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL0NvcmUvZGVmaW5lZC5qc1wiO1xuaW1wb3J0IGRlcHJlY2F0aW9uV2FybmluZyBmcm9tIFwiLi4vQ29yZS9kZXByZWNhdGlvbldhcm5pbmcuanNcIjtcbmltcG9ydCBkZXN0cm95T2JqZWN0IGZyb20gXCIuLi9Db3JlL2Rlc3Ryb3lPYmplY3QuanNcIjtcbmltcG9ydCBEZXZlbG9wZXJFcnJvciBmcm9tIFwiLi4vQ29yZS9EZXZlbG9wZXJFcnJvci5qc1wiO1xuaW1wb3J0IEVsbGlwc29pZCBmcm9tIFwiLi4vQ29yZS9FbGxpcHNvaWQuanNcIjtcbmltcG9ydCBFdmVudCBmcm9tIFwiLi4vQ29yZS9FdmVudC5qc1wiO1xuaW1wb3J0IEp1bGlhbkRhdGUgZnJvbSBcIi4uL0NvcmUvSnVsaWFuRGF0ZS5qc1wiO1xuaW1wb3J0IE1hbmFnZWRBcnJheSBmcm9tIFwiLi4vQ29yZS9NYW5hZ2VkQXJyYXkuanNcIjtcbmltcG9ydCBDZXNpdW1NYXRoIGZyb20gXCIuLi9Db3JlL01hdGguanNcIjtcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9Db3JlL01hdHJpeDQuanNcIjtcbmltcG9ydCBSZXNvdXJjZSBmcm9tIFwiLi4vQ29yZS9SZXNvdXJjZS5qc1wiO1xuaW1wb3J0IFJ1bnRpbWVFcnJvciBmcm9tIFwiLi4vQ29yZS9SdW50aW1lRXJyb3IuanNcIjtcbmltcG9ydCBUcmFuc2Zvcm1zIGZyb20gXCIuLi9Db3JlL1RyYW5zZm9ybXMuanNcIjtcbmltcG9ydCBDbGVhckNvbW1hbmQgZnJvbSBcIi4uL1JlbmRlcmVyL0NsZWFyQ29tbWFuZC5qc1wiO1xuaW1wb3J0IFBhc3MgZnJvbSBcIi4uL1JlbmRlcmVyL1Bhc3MuanNcIjtcbmltcG9ydCBSZW5kZXJTdGF0ZSBmcm9tIFwiLi4vUmVuZGVyZXIvUmVuZGVyU3RhdGUuanNcIjtcbmltcG9ydCB3aGVuIGZyb20gXCIuLi9UaGlyZFBhcnR5L3doZW4uanNcIjtcbmltcG9ydCBBeGlzIGZyb20gXCIuL0F4aXMuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlLmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlQ29sb3JCbGVuZE1vZGUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlQ29sb3JCbGVuZE1vZGUuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVDb250ZW50U3RhdGUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGEgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGEuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVPcHRpbWl6YXRpb25zIGZyb20gXCIuL0Nlc2l1bTNEVGlsZU9wdGltaXphdGlvbnMuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVQYXNzIGZyb20gXCIuL0Nlc2l1bTNEVGlsZVBhc3MuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVSZWZpbmUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlUmVmaW5lLmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlc2V0Q2FjaGUgZnJvbSBcIi4vQ2VzaXVtM0RUaWxlc2V0Q2FjaGUuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVzZXRIZWF0bWFwIGZyb20gXCIuL0Nlc2l1bTNEVGlsZXNldEhlYXRtYXAuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVzZXRTdGF0aXN0aWNzIGZyb20gXCIuL0Nlc2l1bTNEVGlsZXNldFN0YXRpc3RpY3MuanNcIjtcbmltcG9ydCBDZXNpdW0zRFRpbGVTdHlsZUVuZ2luZSBmcm9tIFwiLi9DZXNpdW0zRFRpbGVTdHlsZUVuZ2luZS5qc1wiO1xuaW1wb3J0IENsaXBwaW5nUGxhbmVDb2xsZWN0aW9uIGZyb20gXCIuL0NsaXBwaW5nUGxhbmVDb2xsZWN0aW9uLmpzXCI7XG5pbXBvcnQgaGFzRXh0ZW5zaW9uIGZyb20gXCIuL2hhc0V4dGVuc2lvbi5qc1wiO1xuaW1wb3J0IEltcGxpY2l0VGlsZXNldCBmcm9tIFwiLi9JbXBsaWNpdFRpbGVzZXQuanNcIjtcbmltcG9ydCBJbXBsaWNpdFRpbGVDb29yZGluYXRlcyBmcm9tIFwiLi9JbXBsaWNpdFRpbGVDb29yZGluYXRlcy5qc1wiO1xuaW1wb3J0IExhYmVsQ29sbGVjdGlvbiBmcm9tIFwiLi9MYWJlbENvbGxlY3Rpb24uanNcIjtcbmltcG9ydCBQb2ludENsb3VkRXllRG9tZUxpZ2h0aW5nIGZyb20gXCIuL1BvaW50Q2xvdWRFeWVEb21lTGlnaHRpbmcuanNcIjtcbmltcG9ydCBQb2ludENsb3VkU2hhZGluZyBmcm9tIFwiLi9Qb2ludENsb3VkU2hhZGluZy5qc1wiO1xuaW1wb3J0IFJlc291cmNlQ2FjaGUgZnJvbSBcIi4vUmVzb3VyY2VDYWNoZS5qc1wiO1xuaW1wb3J0IFNjZW5lTW9kZSBmcm9tIFwiLi9TY2VuZU1vZGUuanNcIjtcbmltcG9ydCBTaGFkb3dNb2RlIGZyb20gXCIuL1NoYWRvd01vZGUuanNcIjtcbmltcG9ydCBTdGVuY2lsQ29uc3RhbnRzIGZyb20gXCIuL1N0ZW5jaWxDb25zdGFudHMuanNcIjtcbmltcG9ydCBUaWxlQm91bmRpbmdSZWdpb24gZnJvbSBcIi4vVGlsZUJvdW5kaW5nUmVnaW9uLmpzXCI7XG5pbXBvcnQgVGlsZUJvdW5kaW5nU3BoZXJlIGZyb20gXCIuL1RpbGVCb3VuZGluZ1NwaGVyZS5qc1wiO1xuaW1wb3J0IFRpbGVPcmllbnRlZEJvdW5kaW5nQm94IGZyb20gXCIuL1RpbGVPcmllbnRlZEJvdW5kaW5nQm94LmpzXCI7XG5cbi8qKlxuICogQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0Nlc2l1bUdTLzNkLXRpbGVzL3RyZWUvbWFpbi9zcGVjaWZpY2F0aW9ufDNEIFRpbGVzIHRpbGVzZXR9LFxuICogdXNlZCBmb3Igc3RyZWFtaW5nIG1hc3NpdmUgaGV0ZXJvZ2VuZW91cyAzRCBnZW9zcGF0aWFsIGRhdGFzZXRzLlxuICpcbiAqIEBhbGlhcyBDZXNpdW0zRFRpbGVzZXRcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIEBwYXJhbSB7UmVzb3VyY2V8U3RyaW5nfFByb21pc2U8UmVzb3VyY2U+fFByb21pc2U8U3RyaW5nPn0gb3B0aW9ucy51cmwgVGhlIHVybCB0byBhIHRpbGVzZXQgSlNPTiBmaWxlLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zaG93PXRydWVdIERldGVybWluZXMgaWYgdGhlIHRpbGVzZXQgd2lsbCBiZSBzaG93bi5cbiAqIEBwYXJhbSB7TWF0cml4NH0gW29wdGlvbnMubW9kZWxNYXRyaXg9TWF0cml4NC5JREVOVElUWV0gQSA0eDQgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXQgdHJhbnNmb3JtcyB0aGUgdGlsZXNldCdzIHJvb3QgdGlsZS5cbiAqIEBwYXJhbSB7U2hhZG93TW9kZX0gW29wdGlvbnMuc2hhZG93cz1TaGFkb3dNb2RlLkVOQUJMRURdIERldGVybWluZXMgd2hldGhlciB0aGUgdGlsZXNldCBjYXN0cyBvciByZWNlaXZlcyBzaGFkb3dzIGZyb20gbGlnaHQgc291cmNlcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhpbXVtU2NyZWVuU3BhY2VFcnJvcj0xNl0gVGhlIG1heGltdW0gc2NyZWVuIHNwYWNlIGVycm9yIHVzZWQgdG8gZHJpdmUgbGV2ZWwgb2YgZGV0YWlsIHJlZmluZW1lbnQuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4aW11bU1lbW9yeVVzYWdlPTUxMl0gVGhlIG1heGltdW0gYW1vdW50IG9mIG1lbW9yeSBpbiBNQiB0aGF0IGNhbiBiZSB1c2VkIGJ5IHRoZSB0aWxlc2V0LlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jdWxsV2l0aENoaWxkcmVuQm91bmRzPXRydWVdIE9wdGltaXphdGlvbiBvcHRpb24uIFdoZXRoZXIgdG8gY3VsbCB0aWxlcyB1c2luZyB0aGUgdW5pb24gb2YgdGhlaXIgY2hpbGRyZW4gYm91bmRpbmcgdm9sdW1lcy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuY3VsbFJlcXVlc3RzV2hpbGVNb3Zpbmc9dHJ1ZV0gT3B0aW1pemF0aW9uIG9wdGlvbi4gRG9uJ3QgcmVxdWVzdCB0aWxlcyB0aGF0IHdpbGwgbGlrZWx5IGJlIHVudXNlZCB3aGVuIHRoZXkgY29tZSBiYWNrIGJlY2F1c2Ugb2YgdGhlIGNhbWVyYSdzIG1vdmVtZW50LiBUaGlzIG9wdGltaXphdGlvbiBvbmx5IGFwcGxpZXMgdG8gc3RhdGlvbmFyeSB0aWxlc2V0cy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jdWxsUmVxdWVzdHNXaGlsZU1vdmluZ011bHRpcGxpZXI9NjAuMF0gT3B0aW1pemF0aW9uIG9wdGlvbi4gTXVsdGlwbGllciB1c2VkIGluIGN1bGxpbmcgcmVxdWVzdHMgd2hpbGUgbW92aW5nLiBMYXJnZXIgaXMgbW9yZSBhZ2dyZXNzaXZlIGN1bGxpbmcsIHNtYWxsZXIgbGVzcyBhZ2dyZXNzaXZlIGN1bGxpbmcuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnByZWxvYWRXaGVuSGlkZGVuPWZhbHNlXSBQcmVsb2FkIHRpbGVzIHdoZW4gPGNvZGU+dGlsZXNldC5zaG93PC9jb2RlPiBpcyA8Y29kZT5mYWxzZTwvY29kZT4uIExvYWRzIHRpbGVzIGFzIGlmIHRoZSB0aWxlc2V0IGlzIHZpc2libGUgYnV0IGRvZXMgbm90IHJlbmRlciB0aGVtLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5wcmVsb2FkRmxpZ2h0RGVzdGluYXRpb25zPXRydWVdIE9wdGltaXphdGlvbiBvcHRpb24uIFByZWxvYWQgdGlsZXMgYXQgdGhlIGNhbWVyYSdzIGZsaWdodCBkZXN0aW5hdGlvbiB3aGlsZSB0aGUgY2FtZXJhIGlzIGluIGZsaWdodC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMucHJlZmVyTGVhdmVzPWZhbHNlXSBPcHRpbWl6YXRpb24gb3B0aW9uLiBQcmVmZXIgbG9hZGluZyBvZiBsZWF2ZXMgZmlyc3QuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmR5bmFtaWNTY3JlZW5TcGFjZUVycm9yPWZhbHNlXSBPcHRpbWl6YXRpb24gb3B0aW9uLiBSZWR1Y2UgdGhlIHNjcmVlbiBzcGFjZSBlcnJvciBmb3IgdGlsZXMgdGhhdCBhcmUgZnVydGhlciBhd2F5IGZyb20gdGhlIGNhbWVyYS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5keW5hbWljU2NyZWVuU3BhY2VFcnJvckRlbnNpdHk9MC4wMDI3OF0gRGVuc2l0eSB1c2VkIHRvIGFkanVzdCB0aGUgZHluYW1pYyBzY3JlZW4gc3BhY2UgZXJyb3IsIHNpbWlsYXIgdG8gZm9nIGRlbnNpdHkuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZHluYW1pY1NjcmVlblNwYWNlRXJyb3JGYWN0b3I9NC4wXSBBIGZhY3RvciB1c2VkIHRvIGluY3JlYXNlIHRoZSBjb21wdXRlZCBkeW5hbWljIHNjcmVlbiBzcGFjZSBlcnJvci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5keW5hbWljU2NyZWVuU3BhY2VFcnJvckhlaWdodEZhbGxvZmY9MC4yNV0gQSByYXRpbyBvZiB0aGUgdGlsZXNldCdzIGhlaWdodCBhdCB3aGljaCB0aGUgZGVuc2l0eSBzdGFydHMgdG8gZmFsbG9mZi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5wcm9ncmVzc2l2ZVJlc29sdXRpb25IZWlnaHRGcmFjdGlvbj0wLjNdIE9wdGltaXphdGlvbiBvcHRpb24uIElmIGJldHdlZW4gKDAuMCwgMC41XSwgdGlsZXMgYXQgb3IgYWJvdmUgdGhlIHNjcmVlbiBzcGFjZSBlcnJvciBmb3IgdGhlIHJlZHVjZWQgc2NyZWVuIHJlc29sdXRpb24gb2YgPGNvZGU+cHJvZ3Jlc3NpdmVSZXNvbHV0aW9uSGVpZ2h0RnJhY3Rpb24qc2NyZWVuSGVpZ2h0PC9jb2RlPiB3aWxsIGJlIHByaW9yaXRpemVkIGZpcnN0LiBUaGlzIGNhbiBoZWxwIGdldCBhIHF1aWNrIGxheWVyIG9mIHRpbGVzIGRvd24gd2hpbGUgZnVsbCByZXNvbHV0aW9uIHRpbGVzIGNvbnRpbnVlIHRvIGxvYWQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmZvdmVhdGVkU2NyZWVuU3BhY2VFcnJvcj10cnVlXSBPcHRpbWl6YXRpb24gb3B0aW9uLiBQcmlvcml0aXplIGxvYWRpbmcgdGlsZXMgaW4gdGhlIGNlbnRlciBvZiB0aGUgc2NyZWVuIGJ5IHRlbXBvcmFyaWx5IHJhaXNpbmcgdGhlIHNjcmVlbiBzcGFjZSBlcnJvciBmb3IgdGlsZXMgYXJvdW5kIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW4uIFNjcmVlbiBzcGFjZSBlcnJvciByZXR1cm5zIHRvIG5vcm1hbCBvbmNlIGFsbCB0aGUgdGlsZXMgaW4gdGhlIGNlbnRlciBvZiB0aGUgc2NyZWVuIGFzIGRldGVybWluZWQgYnkgdGhlIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjZm92ZWF0ZWRDb25lU2l6ZX0gYXJlIGxvYWRlZC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5mb3ZlYXRlZENvbmVTaXplPTAuMV0gT3B0aW1pemF0aW9uIG9wdGlvbi4gVXNlZCB3aGVuIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjZm92ZWF0ZWRTY3JlZW5TcGFjZUVycm9yfSBpcyB0cnVlIHRvIGNvbnRyb2wgdGhlIGNvbmUgc2l6ZSB0aGF0IGRldGVybWluZXMgd2hpY2ggdGlsZXMgYXJlIGRlZmVycmVkLiBUaWxlcyB0aGF0IGFyZSBpbnNpZGUgdGhpcyBjb25lIGFyZSBsb2FkZWQgaW1tZWRpYXRlbHkuIFRpbGVzIG91dHNpZGUgdGhlIGNvbmUgYXJlIHBvdGVudGlhbGx5IGRlZmVycmVkIGJhc2VkIG9uIGhvdyBmYXIgb3V0c2lkZSB0aGUgY29uZSB0aGV5IGFyZSBhbmQgdGhlaXIgc2NyZWVuIHNwYWNlIGVycm9yLiBUaGlzIGlzIGNvbnRyb2xsZWQgYnkge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZEludGVycG9sYXRpb25DYWxsYmFja30gYW5kIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjZm92ZWF0ZWRNaW5pbXVtU2NyZWVuU3BhY2VFcnJvclJlbGF4YXRpb259LiBTZXR0aW5nIHRoaXMgdG8gMC4wIG1lYW5zIHRoZSBjb25lIHdpbGwgYmUgdGhlIGxpbmUgZm9ybWVkIGJ5IHRoZSBjYW1lcmEgcG9zaXRpb24gYW5kIGl0cyB2aWV3IGRpcmVjdGlvbi4gU2V0dGluZyB0aGlzIHRvIDEuMCBtZWFucyB0aGUgY29uZSBlbmNvbXBhc3NlcyB0aGUgZW50aXJlIGZpZWxkIG9mIHZpZXcgb2YgdGhlIGNhbWVyYSwgZGlzYWJsaW5nIHRoZSBlZmZlY3QuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZm92ZWF0ZWRNaW5pbXVtU2NyZWVuU3BhY2VFcnJvclJlbGF4YXRpb249MC4wXSBPcHRpbWl6YXRpb24gb3B0aW9uLiBVc2VkIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3J9IGlzIHRydWUgdG8gY29udHJvbCB0aGUgc3RhcnRpbmcgc2NyZWVuIHNwYWNlIGVycm9yIHJlbGF4YXRpb24gZm9yIHRpbGVzIG91dHNpZGUgdGhlIGZvdmVhdGVkIGNvbmUuIFRoZSBzY3JlZW4gc3BhY2UgZXJyb3Igd2lsbCBiZSByYWlzZWQgc3RhcnRpbmcgd2l0aCB0aWxlc2V0IHZhbHVlIHVwIHRvIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjbWF4aW11bVNjcmVlblNwYWNlRXJyb3J9IGJhc2VkIG9uIHRoZSBwcm92aWRlZCB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2ZvdmVhdGVkSW50ZXJwb2xhdGlvbkNhbGxiYWNrfS5cbiAqIEBwYXJhbSB7Q2VzaXVtM0RUaWxlc2V0LmZvdmVhdGVkSW50ZXJwb2xhdGlvbkNhbGxiYWNrfSBbb3B0aW9ucy5mb3ZlYXRlZEludGVycG9sYXRpb25DYWxsYmFjaz1NYXRoLmxlcnBdIE9wdGltaXphdGlvbiBvcHRpb24uIFVzZWQgd2hlbiB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2ZvdmVhdGVkU2NyZWVuU3BhY2VFcnJvcn0gaXMgdHJ1ZSB0byBjb250cm9sIGhvdyBtdWNoIHRvIHJhaXNlIHRoZSBzY3JlZW4gc3BhY2UgZXJyb3IgZm9yIHRpbGVzIG91dHNpZGUgdGhlIGZvdmVhdGVkIGNvbmUsIGludGVycG9sYXRpbmcgYmV0d2VlbiB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2ZvdmVhdGVkTWluaW11bVNjcmVlblNwYWNlRXJyb3JSZWxheGF0aW9ufSBhbmQge0BsaW5rIENlc2l1bTNEVGlsZXNldCNtYXhpbXVtU2NyZWVuU3BhY2VFcnJvcn1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5mb3ZlYXRlZFRpbWVEZWxheT0wLjJdIE9wdGltaXphdGlvbiBvcHRpb24uIFVzZWQgd2hlbiB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2ZvdmVhdGVkU2NyZWVuU3BhY2VFcnJvcn0gaXMgdHJ1ZSB0byBjb250cm9sIGhvdyBsb25nIGluIHNlY29uZHMgdG8gd2FpdCBhZnRlciB0aGUgY2FtZXJhIHN0b3BzIG1vdmluZyBiZWZvcmUgZGVmZXJyZWQgdGlsZXMgc3RhcnQgbG9hZGluZyBpbi4gVGhpcyB0aW1lIGRlbGF5IHByZXZlbnRzIHJlcXVlc3RpbmcgdGlsZXMgYXJvdW5kIHRoZSBlZGdlcyBvZiB0aGUgc2NyZWVuIHdoZW4gdGhlIGNhbWVyYSBpcyBtb3ZpbmcuIFNldHRpbmcgdGhpcyB0byAwLjAgd2lsbCBpbW1lZGlhdGVseSByZXF1ZXN0IGFsbCB0aWxlcyBpbiBhbnkgZ2l2ZW4gdmlldy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2tpcExldmVsT2ZEZXRhaWw9ZmFsc2VdIE9wdGltaXphdGlvbiBvcHRpb24uIERldGVybWluZXMgaWYgbGV2ZWwgb2YgZGV0YWlsIHNraXBwaW5nIHNob3VsZCBiZSBhcHBsaWVkIGR1cmluZyB0aGUgdHJhdmVyc2FsLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmJhc2VTY3JlZW5TcGFjZUVycm9yPTEwMjRdIFdoZW4gPGNvZGU+c2tpcExldmVsT2ZEZXRhaWw8L2NvZGU+IGlzIDxjb2RlPnRydWU8L2NvZGU+LCB0aGUgc2NyZWVuIHNwYWNlIGVycm9yIHRoYXQgbXVzdCBiZSByZWFjaGVkIGJlZm9yZSBza2lwcGluZyBsZXZlbHMgb2YgZGV0YWlsLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnNraXBTY3JlZW5TcGFjZUVycm9yRmFjdG9yPTE2XSBXaGVuIDxjb2RlPnNraXBMZXZlbE9mRGV0YWlsPC9jb2RlPiBpcyA8Y29kZT50cnVlPC9jb2RlPiwgYSBtdWx0aXBsaWVyIGRlZmluaW5nIHRoZSBtaW5pbXVtIHNjcmVlbiBzcGFjZSBlcnJvciB0byBza2lwLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggPGNvZGU+c2tpcExldmVsczwvY29kZT4gdG8gZGV0ZXJtaW5lIHdoaWNoIHRpbGVzIHRvIGxvYWQuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuc2tpcExldmVscz0xXSBXaGVuIDxjb2RlPnNraXBMZXZlbE9mRGV0YWlsPC9jb2RlPiBpcyA8Y29kZT50cnVlPC9jb2RlPiwgYSBjb25zdGFudCBkZWZpbmluZyB0aGUgbWluaW11bSBudW1iZXIgb2YgbGV2ZWxzIHRvIHNraXAgd2hlbiBsb2FkaW5nIHRpbGVzLiBXaGVuIGl0IGlzIDAsIG5vIGxldmVscyBhcmUgc2tpcHBlZC4gVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIDxjb2RlPnNraXBTY3JlZW5TcGFjZUVycm9yRmFjdG9yPC9jb2RlPiB0byBkZXRlcm1pbmUgd2hpY2ggdGlsZXMgdG8gbG9hZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW1tZWRpYXRlbHlMb2FkRGVzaXJlZExldmVsT2ZEZXRhaWw9ZmFsc2VdIFdoZW4gPGNvZGU+c2tpcExldmVsT2ZEZXRhaWw8L2NvZGU+IGlzIDxjb2RlPnRydWU8L2NvZGU+LCBvbmx5IHRpbGVzIHRoYXQgbWVldCB0aGUgbWF4aW11bSBzY3JlZW4gc3BhY2UgZXJyb3Igd2lsbCBldmVyIGJlIGRvd25sb2FkZWQuIFNraXBwaW5nIGZhY3RvcnMgYXJlIGlnbm9yZWQgYW5kIGp1c3QgdGhlIGRlc2lyZWQgdGlsZXMgYXJlIGxvYWRlZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubG9hZFNpYmxpbmdzPWZhbHNlXSBXaGVuIDxjb2RlPnNraXBMZXZlbE9mRGV0YWlsPC9jb2RlPiBpcyA8Y29kZT50cnVlPC9jb2RlPiwgZGV0ZXJtaW5lcyB3aGV0aGVyIHNpYmxpbmdzIG9mIHZpc2libGUgdGlsZXMgYXJlIGFsd2F5cyBkb3dubG9hZGVkIGR1cmluZyB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0ge0NsaXBwaW5nUGxhbmVDb2xsZWN0aW9ufSBbb3B0aW9ucy5jbGlwcGluZ1BsYW5lc10gVGhlIHtAbGluayBDbGlwcGluZ1BsYW5lQ29sbGVjdGlvbn0gdXNlZCB0byBzZWxlY3RpdmVseSBkaXNhYmxlIHJlbmRlcmluZyB0aGUgdGlsZXNldC5cbiAqIEBwYXJhbSB7Q2xhc3NpZmljYXRpb25UeXBlfSBbb3B0aW9ucy5jbGFzc2lmaWNhdGlvblR5cGVdIERldGVybWluZXMgd2hldGhlciB0ZXJyYWluLCAzRCBUaWxlcyBvciBib3RoIHdpbGwgYmUgY2xhc3NpZmllZCBieSB0aGlzIHRpbGVzZXQuIFNlZSB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2NsYXNzaWZpY2F0aW9uVHlwZX0gZm9yIGRldGFpbHMgYWJvdXQgcmVzdHJpY3Rpb25zIGFuZCBsaW1pdGF0aW9ucy5cbiAqIEBwYXJhbSB7RWxsaXBzb2lkfSBbb3B0aW9ucy5lbGxpcHNvaWQ9RWxsaXBzb2lkLldHUzg0XSBUaGUgZWxsaXBzb2lkIGRldGVybWluaW5nIHRoZSBzaXplIGFuZCBzaGFwZSBvZiB0aGUgZ2xvYmUuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucG9pbnRDbG91ZFNoYWRpbmddIE9wdGlvbnMgZm9yIGNvbnN0cnVjdGluZyBhIHtAbGluayBQb2ludENsb3VkU2hhZGluZ30gb2JqZWN0IHRvIGNvbnRyb2wgcG9pbnQgYXR0ZW51YXRpb24gYmFzZWQgb24gZ2VvbWV0cmljIGVycm9yIGFuZCBsaWdodGluZy5cbiAqIEBwYXJhbSB7Q2FydGVzaWFuMn0gW29wdGlvbnMuaW1hZ2VCYXNlZExpZ2h0aW5nRmFjdG9yPW5ldyBDYXJ0ZXNpYW4yKDEuMCwgMS4wKV0gU2NhbGVzIHRoZSBkaWZmdXNlIGFuZCBzcGVjdWxhciBpbWFnZS1iYXNlZCBsaWdodGluZyBmcm9tIHRoZSBlYXJ0aCwgc2t5LCBhdG1vc3BoZXJlIGFuZCBzdGFyIHNreWJveC5cbiAqIEBwYXJhbSB7Q2FydGVzaWFuM30gW29wdGlvbnMubGlnaHRDb2xvcl0gVGhlIGxpZ2h0IGNvbG9yIHdoZW4gc2hhZGluZyBtb2RlbHMuIFdoZW4gPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiB0aGUgc2NlbmUncyBsaWdodCBjb2xvciBpcyB1c2VkIGluc3RlYWQuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubHVtaW5hbmNlQXRaZW5pdGg9MC4yXSBUaGUgc3VuJ3MgbHVtaW5hbmNlIGF0IHRoZSB6ZW5pdGggaW4ga2lsbyBjYW5kZWxhIHBlciBtZXRlciBzcXVhcmVkIHRvIHVzZSBmb3IgdGhpcyBtb2RlbCdzIHByb2NlZHVyYWwgZW52aXJvbm1lbnQgbWFwLlxuICogQHBhcmFtIHtDYXJ0ZXNpYW4zW119IFtvcHRpb25zLnNwaGVyaWNhbEhhcm1vbmljQ29lZmZpY2llbnRzXSBUaGUgdGhpcmQgb3JkZXIgc3BoZXJpY2FsIGhhcm1vbmljIGNvZWZmaWNpZW50cyB1c2VkIGZvciB0aGUgZGlmZnVzZSBjb2xvciBvZiBpbWFnZS1iYXNlZCBsaWdodGluZy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5zcGVjdWxhckVudmlyb25tZW50TWFwc10gQSBVUkwgdG8gYSBLVFgyIGZpbGUgdGhhdCBjb250YWlucyBhIGN1YmUgbWFwIG9mIHRoZSBzcGVjdWxhciBsaWdodGluZyBhbmQgdGhlIGNvbnZvbHV0ZWQgc3BlY3VsYXIgbWlwbWFwcy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYmFja0ZhY2VDdWxsaW5nPXRydWVdIFdoZXRoZXIgdG8gY3VsbCBiYWNrLWZhY2luZyBnZW9tZXRyeS4gV2hlbiB0cnVlLCBiYWNrIGZhY2UgY3VsbGluZyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBnbFRGIG1hdGVyaWFsJ3MgZG91YmxlU2lkZWQgcHJvcGVydHk7IHdoZW4gZmFsc2UsIGJhY2sgZmFjZSBjdWxsaW5nIGlzIGRpc2FibGVkLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zaG93T3V0bGluZT10cnVlXSBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlIG91dGxpbmUgZm9yIG1vZGVscyB1c2luZyB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9WZW5kb3IvQ0VTSVVNX3ByaW1pdGl2ZV9vdXRsaW5lfENFU0lVTV9wcmltaXRpdmVfb3V0bGluZX0gZXh0ZW5zaW9uLiBXaGVuIHRydWUsIG91dGxpbmVzIGFyZSBkaXNwbGF5ZWQuIFdoZW4gZmFsc2UsIG91dGxpbmVzIGFyZSBub3QgZGlzcGxheWVkLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy52ZWN0b3JDbGFzc2lmaWNhdGlvbk9ubHk9ZmFsc2VdIEluZGljYXRlcyB0aGF0IG9ubHkgdGhlIHRpbGVzZXQncyB2ZWN0b3IgdGlsZXMgc2hvdWxkIGJlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy52ZWN0b3JLZWVwRGVjb2RlZFBvc2l0aW9ucz1mYWxzZV0gV2hldGhlciB2ZWN0b3IgdGlsZXMgc2hvdWxkIGtlZXAgZGVjb2RlZCBwb3NpdGlvbnMgaW4gbWVtb3J5LiBUaGlzIGlzIHVzZWQgd2l0aCB7QGxpbmsgQ2VzaXVtM0RUaWxlRmVhdHVyZS5nZXRQb2x5bGluZVBvc2l0aW9uc30uXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZGVidWdIZWF0bWFwVGlsZVByb3BlcnR5TmFtZV0gVGhlIHRpbGUgdmFyaWFibGUgdG8gY29sb3JpemUgYXMgYSBoZWF0bWFwLiBBbGwgcmVuZGVyZWQgdGlsZXMgd2lsbCBiZSBjb2xvcml6ZWQgcmVsYXRpdmUgdG8gZWFjaCBvdGhlcidzIHNwZWNpZmllZCB2YXJpYWJsZSB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZGVidWdGcmVlemVGcmFtZT1mYWxzZV0gRm9yIGRlYnVnZ2luZyBvbmx5LiBEZXRlcm1pbmVzIGlmIG9ubHkgdGhlIHRpbGVzIGZyb20gbGFzdCBmcmFtZSBzaG91bGQgYmUgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kZWJ1Z0NvbG9yaXplVGlsZXM9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCBhc3NpZ25zIGEgcmFuZG9tIGNvbG9yIHRvIGVhY2ggdGlsZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZGVidWdXaXJlZnJhbWU9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCByZW5kZXIncyBlYWNoIHRpbGUncyBjb250ZW50IGFzIGEgd2lyZWZyYW1lLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kZWJ1Z1Nob3dCb3VuZGluZ1ZvbHVtZT1mYWxzZV0gRm9yIGRlYnVnZ2luZyBvbmx5LiBXaGVuIHRydWUsIHJlbmRlcnMgdGhlIGJvdW5kaW5nIHZvbHVtZSBmb3IgZWFjaCB0aWxlLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kZWJ1Z1Nob3dDb250ZW50Qm91bmRpbmdWb2x1bWU9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCByZW5kZXJzIHRoZSBib3VuZGluZyB2b2x1bWUgZm9yIGVhY2ggdGlsZSdzIGNvbnRlbnQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRlYnVnU2hvd1ZpZXdlclJlcXVlc3RWb2x1bWU9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCByZW5kZXJzIHRoZSB2aWV3ZXIgcmVxdWVzdCB2b2x1bWUgZm9yIGVhY2ggdGlsZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZGVidWdTaG93R2VvbWV0cmljRXJyb3I9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCBkcmF3cyBsYWJlbHMgdG8gaW5kaWNhdGUgdGhlIGdlb21ldHJpYyBlcnJvciBvZiBlYWNoIHRpbGUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRlYnVnU2hvd1JlbmRlcmluZ1N0YXRpc3RpY3M9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCBkcmF3cyBsYWJlbHMgdG8gaW5kaWNhdGUgdGhlIG51bWJlciBvZiBjb21tYW5kcywgcG9pbnRzLCB0cmlhbmdsZXMgYW5kIGZlYXR1cmVzIGZvciBlYWNoIHRpbGUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRlYnVnU2hvd01lbW9yeVVzYWdlPWZhbHNlXSBGb3IgZGVidWdnaW5nIG9ubHkuIFdoZW4gdHJ1ZSwgZHJhd3MgbGFiZWxzIHRvIGluZGljYXRlIHRoZSB0ZXh0dXJlIGFuZCBnZW9tZXRyeSBtZW1vcnkgaW4gbWVnYWJ5dGVzIHVzZWQgYnkgZWFjaCB0aWxlLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kZWJ1Z1Nob3dVcmw9ZmFsc2VdIEZvciBkZWJ1Z2dpbmcgb25seS4gV2hlbiB0cnVlLCBkcmF3cyBsYWJlbHMgdG8gaW5kaWNhdGUgdGhlIHVybCBvZiBlYWNoIHRpbGUuXG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoZSB0aWxlc2V0IG11c3QgYmUgM0QgVGlsZXMgdmVyc2lvbiAwLjAgb3IgMS4wLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgdGlsZXNldCA9IHNjZW5lLnByaW1pdGl2ZXMuYWRkKG5ldyBDZXNpdW0uQ2VzaXVtM0RUaWxlc2V0KHtcbiAqICAgICAgdXJsIDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMi90aWxlc2V0cy9TZWF0dGxlL3RpbGVzZXQuanNvbidcbiAqIH0pKTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tbW9uIHNldHRpbmcgZm9yIHRoZSBza2lwTGV2ZWxPZkRldGFpbCBvcHRpbWl6YXRpb25cbiAqIHZhciB0aWxlc2V0ID0gc2NlbmUucHJpbWl0aXZlcy5hZGQobmV3IENlc2l1bS5DZXNpdW0zRFRpbGVzZXQoe1xuICogICAgICB1cmwgOiAnaHR0cDovL2xvY2FsaG9zdDo4MDAyL3RpbGVzZXRzL1NlYXR0bGUvdGlsZXNldC5qc29uJyxcbiAqICAgICAgc2tpcExldmVsT2ZEZXRhaWwgOiB0cnVlLFxuICogICAgICBiYXNlU2NyZWVuU3BhY2VFcnJvciA6IDEwMjQsXG4gKiAgICAgIHNraXBTY3JlZW5TcGFjZUVycm9yRmFjdG9yIDogMTYsXG4gKiAgICAgIHNraXBMZXZlbHMgOiAxLFxuICogICAgICBpbW1lZGlhdGVseUxvYWREZXNpcmVkTGV2ZWxPZkRldGFpbCA6IGZhbHNlLFxuICogICAgICBsb2FkU2libGluZ3MgOiBmYWxzZSxcbiAqICAgICAgY3VsbFdpdGhDaGlsZHJlbkJvdW5kcyA6IHRydWVcbiAqIH0pKTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tbW9uIHNldHRpbmdzIGZvciB0aGUgZHluYW1pY1NjcmVlblNwYWNlRXJyb3Igb3B0aW1pemF0aW9uXG4gKiB2YXIgdGlsZXNldCA9IHNjZW5lLnByaW1pdGl2ZXMuYWRkKG5ldyBDZXNpdW0uQ2VzaXVtM0RUaWxlc2V0KHtcbiAqICAgICAgdXJsIDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMi90aWxlc2V0cy9TZWF0dGxlL3RpbGVzZXQuanNvbicsXG4gKiAgICAgIGR5bmFtaWNTY3JlZW5TcGFjZUVycm9yIDogdHJ1ZSxcbiAqICAgICAgZHluYW1pY1NjcmVlblNwYWNlRXJyb3JEZW5zaXR5IDogMC4wMDI3OCxcbiAqICAgICAgZHluYW1pY1NjcmVlblNwYWNlRXJyb3JGYWN0b3IgOiA0LjAsXG4gKiAgICAgIGR5bmFtaWNTY3JlZW5TcGFjZUVycm9ySGVpZ2h0RmFsbG9mZiA6IDAuMjVcbiAqIH0pKTtcbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvM2QtdGlsZXMvdHJlZS9tYWluL3NwZWNpZmljYXRpb258M0QgVGlsZXMgc3BlY2lmaWNhdGlvbn1cbiAqL1xuZnVuY3Rpb24gQ2VzaXVtM0RUaWxlc2V0KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLCBkZWZhdWx0VmFsdWUuRU1QVFlfT0JKRUNUKTtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay5kZWZpbmVkKFwib3B0aW9ucy51cmxcIiwgb3B0aW9ucy51cmwpO1xuICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICB0aGlzLl91cmwgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX2Jhc2VQYXRoID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9yZXNvdXJjZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fYXNzZXQgPSB1bmRlZmluZWQ7IC8vIE1ldGFkYXRhIGZvciB0aGUgZW50aXJlIHRpbGVzZXRcbiAgdGhpcy5fcHJvcGVydGllcyA9IHVuZGVmaW5lZDsgLy8gTWV0YWRhdGEgZm9yIHBlci1tb2RlbC9wb2ludC9ldGMgcHJvcGVydGllc1xuICB0aGlzLl9nZW9tZXRyaWNFcnJvciA9IHVuZGVmaW5lZDsgLy8gR2VvbWV0cmljIGVycm9yIHdoZW4gdGhlIHRyZWUgaXMgbm90IHJlbmRlcmVkIGF0IGFsbFxuICB0aGlzLl9leHRlbnNpb25zVXNlZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZXh0ZW5zaW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZ2x0ZlVwQXhpcyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQ2VzaXVtM0RUaWxlc2V0Q2FjaGUoKTtcbiAgdGhpcy5fcHJvY2Vzc2luZ1F1ZXVlID0gW107XG4gIHRoaXMuX3NlbGVjdGVkVGlsZXMgPSBbXTtcbiAgdGhpcy5fZW1wdHlUaWxlcyA9IFtdO1xuICB0aGlzLl9yZXF1ZXN0ZWRUaWxlcyA9IFtdO1xuICB0aGlzLl9zZWxlY3RlZFRpbGVzVG9TdHlsZSA9IFtdO1xuICB0aGlzLl9sb2FkVGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICB0aGlzLl90aW1lU2luY2VMb2FkID0gMC4wO1xuICB0aGlzLl91cGRhdGVkVmlzaWJpbGl0eUZyYW1lID0gMDtcbiAgdGhpcy5fdXBkYXRlZE1vZGVsTWF0cml4RnJhbWUgPSAwO1xuICB0aGlzLl9tb2RlbE1hdHJpeENoYW5nZWQgPSBmYWxzZTtcbiAgdGhpcy5fcHJldmlvdXNNb2RlbE1hdHJpeCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZXh0cmFzID0gdW5kZWZpbmVkO1xuICB0aGlzLl9jcmVkaXRzID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuX2N1bGxXaXRoQ2hpbGRyZW5Cb3VuZHMgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5jdWxsV2l0aENoaWxkcmVuQm91bmRzLFxuICAgIHRydWVcbiAgKTtcbiAgdGhpcy5fYWxsVGlsZXNBZGRpdGl2ZSA9IHRydWU7XG5cbiAgdGhpcy5faGFzTWl4ZWRDb250ZW50ID0gZmFsc2U7XG5cbiAgdGhpcy5fc3RlbmNpbENsZWFyQ29tbWFuZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fYmFja2ZhY2VDb21tYW5kcyA9IG5ldyBNYW5hZ2VkQXJyYXkoKTtcblxuICB0aGlzLl9tYXhpbXVtU2NyZWVuU3BhY2VFcnJvciA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLm1heGltdW1TY3JlZW5TcGFjZUVycm9yLFxuICAgIDE2XG4gICk7XG4gIHRoaXMuX21heGltdW1NZW1vcnlVc2FnZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm1heGltdW1NZW1vcnlVc2FnZSwgNTEyKTtcblxuICB0aGlzLl9zdHlsZUVuZ2luZSA9IG5ldyBDZXNpdW0zRFRpbGVTdHlsZUVuZ2luZSgpO1xuXG4gIHRoaXMuX21vZGVsTWF0cml4ID0gZGVmaW5lZChvcHRpb25zLm1vZGVsTWF0cml4KVxuICAgID8gTWF0cml4NC5jbG9uZShvcHRpb25zLm1vZGVsTWF0cml4KVxuICAgIDogTWF0cml4NC5jbG9uZShNYXRyaXg0LklERU5USVRZKTtcblxuICB0aGlzLl9zdGF0aXN0aWNzID0gbmV3IENlc2l1bTNEVGlsZXNldFN0YXRpc3RpY3MoKTtcbiAgdGhpcy5fc3RhdGlzdGljc0xhc3QgPSBuZXcgQ2VzaXVtM0RUaWxlc2V0U3RhdGlzdGljcygpO1xuICB0aGlzLl9zdGF0aXN0aWNzUGVyUGFzcyA9IG5ldyBBcnJheShDZXNpdW0zRFRpbGVQYXNzLk5VTUJFUl9PRl9QQVNTRVMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQ2VzaXVtM0RUaWxlUGFzcy5OVU1CRVJfT0ZfUEFTU0VTOyArK2kpIHtcbiAgICB0aGlzLl9zdGF0aXN0aWNzUGVyUGFzc1tpXSA9IG5ldyBDZXNpdW0zRFRpbGVzZXRTdGF0aXN0aWNzKCk7XG4gIH1cblxuICB0aGlzLl9yZXF1ZXN0ZWRUaWxlc0luRmxpZ2h0ID0gW107XG5cbiAgdGhpcy5fbWF4aW11bVByaW9yaXR5ID0ge1xuICAgIGZvdmVhdGVkRmFjdG9yOiAtTnVtYmVyLk1BWF9WQUxVRSxcbiAgICBkZXB0aDogLU51bWJlci5NQVhfVkFMVUUsXG4gICAgZGlzdGFuY2U6IC1OdW1iZXIuTUFYX1ZBTFVFLFxuICAgIHJldmVyc2VTY3JlZW5TcGFjZUVycm9yOiAtTnVtYmVyLk1BWF9WQUxVRSxcbiAgfTtcbiAgdGhpcy5fbWluaW11bVByaW9yaXR5ID0ge1xuICAgIGZvdmVhdGVkRmFjdG9yOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgIGRlcHRoOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgIGRpc3RhbmNlOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgIHJldmVyc2VTY3JlZW5TcGFjZUVycm9yOiBOdW1iZXIuTUFYX1ZBTFVFLFxuICB9O1xuICB0aGlzLl9oZWF0bWFwID0gbmV3IENlc2l1bTNEVGlsZXNldEhlYXRtYXAoXG4gICAgb3B0aW9ucy5kZWJ1Z0hlYXRtYXBUaWxlUHJvcGVydHlOYW1lXG4gICk7XG5cbiAgLyoqXG4gICAqIE9wdGltaXphdGlvbiBvcHRpb24uIERvbid0IHJlcXVlc3QgdGlsZXMgdGhhdCB3aWxsIGxpa2VseSBiZSB1bnVzZWQgd2hlbiB0aGV5IGNvbWUgYmFjayBiZWNhdXNlIG9mIHRoZSBjYW1lcmEncyBtb3ZlbWVudC4gVGhpcyBvcHRpbWl6YXRpb24gb25seSBhcHBsaWVzIHRvIHN0YXRpb25hcnkgdGlsZXNldHMuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB0aGlzLmN1bGxSZXF1ZXN0c1doaWxlTW92aW5nID0gZGVmYXVsdFZhbHVlKFxuICAgIG9wdGlvbnMuY3VsbFJlcXVlc3RzV2hpbGVNb3ZpbmcsXG4gICAgdHJ1ZVxuICApO1xuICB0aGlzLl9jdWxsUmVxdWVzdHNXaGlsZU1vdmluZyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBPcHRpbWl6YXRpb24gb3B0aW9uLiBNdWx0aXBsaWVyIHVzZWQgaW4gY3VsbGluZyByZXF1ZXN0cyB3aGlsZSBtb3ZpbmcuIExhcmdlciBpcyBtb3JlIGFnZ3Jlc3NpdmUgY3VsbGluZywgc21hbGxlciBsZXNzIGFnZ3Jlc3NpdmUgY3VsbGluZy5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgNjAuMFxuICAgKi9cbiAgdGhpcy5jdWxsUmVxdWVzdHNXaGlsZU1vdmluZ011bHRpcGxpZXIgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5jdWxsUmVxdWVzdHNXaGlsZU1vdmluZ011bHRpcGxpZXIsXG4gICAgNjAuMFxuICApO1xuXG4gIC8qKlxuICAgKiBPcHRpbWl6YXRpb24gb3B0aW9uLiBJZiBiZXR3ZWVuICgwLjAsIDAuNV0sIHRpbGVzIGF0IG9yIGFib3ZlIHRoZSBzY3JlZW4gc3BhY2UgZXJyb3IgZm9yIHRoZSByZWR1Y2VkIHNjcmVlbiByZXNvbHV0aW9uIG9mIDxjb2RlPnByb2dyZXNzaXZlUmVzb2x1dGlvbkhlaWdodEZyYWN0aW9uKnNjcmVlbkhlaWdodDwvY29kZT4gd2lsbCBiZSBwcmlvcml0aXplZCBmaXJzdC4gVGhpcyBjYW4gaGVscCBnZXQgYSBxdWljayBsYXllciBvZiB0aWxlcyBkb3duIHdoaWxlIGZ1bGwgcmVzb2x1dGlvbiB0aWxlcyBjb250aW51ZSB0byBsb2FkLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjNcbiAgICovXG4gIHRoaXMucHJvZ3Jlc3NpdmVSZXNvbHV0aW9uSGVpZ2h0RnJhY3Rpb24gPSBDZXNpdW1NYXRoLmNsYW1wKFxuICAgIGRlZmF1bHRWYWx1ZShvcHRpb25zLnByb2dyZXNzaXZlUmVzb2x1dGlvbkhlaWdodEZyYWN0aW9uLCAwLjMpLFxuICAgIDAuMCxcbiAgICAwLjVcbiAgKTtcblxuICAvKipcbiAgICogT3B0aW1pemF0aW9uIG9wdGlvbi4gUHJlZmVyIGxvYWRpbmcgb2YgbGVhdmVzIGZpcnN0LlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMucHJlZmVyTGVhdmVzID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMucHJlZmVyTGVhdmVzLCBmYWxzZSk7XG5cbiAgdGhpcy5fdGlsZXNMb2FkZWQgPSBmYWxzZTtcbiAgdGhpcy5faW5pdGlhbFRpbGVzTG9hZGVkID0gZmFsc2U7XG5cbiAgdGhpcy5fdGlsZURlYnVnTGFiZWxzID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuX3JlYWR5UHJvbWlzZSA9IHdoZW4uZGVmZXIoKTtcblxuICB0aGlzLl9jbGFzc2lmaWNhdGlvblR5cGUgPSBvcHRpb25zLmNsYXNzaWZpY2F0aW9uVHlwZTtcblxuICB0aGlzLl9lbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZC5XR1M4NCk7XG5cbiAgdGhpcy5faW5pdGlhbENsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4ID0gTWF0cml4NC5JREVOVElUWTsgLy8gQ29tcHV0ZWQgZnJvbSB0aGUgdGlsZXNldCBKU09OLlxuICB0aGlzLl9jbGlwcGluZ1BsYW5lc09yaWdpbk1hdHJpeCA9IHVuZGVmaW5lZDsgLy8gQ29tYmluZXMgdGhlIGFib3ZlIHdpdGggYW55IHJ1bi10aW1lIHRyYW5zZm9ybXMuXG4gIHRoaXMuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4RGlydHkgPSB0cnVlO1xuXG4gIHRoaXMuX3ZlY3RvckNsYXNzaWZpY2F0aW9uT25seSA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLnZlY3RvckNsYXNzaWZpY2F0aW9uT25seSxcbiAgICBmYWxzZVxuICApO1xuXG4gIHRoaXMuX3ZlY3RvcktlZXBEZWNvZGVkUG9zaXRpb25zID0gZGVmYXVsdFZhbHVlKFxuICAgIG9wdGlvbnMudmVjdG9yS2VlcERlY29kZWRQb3NpdGlvbnMsXG4gICAgZmFsc2VcbiAgKTtcblxuICAvKipcbiAgICogUHJlbG9hZCB0aWxlcyB3aGVuIDxjb2RlPnRpbGVzZXQuc2hvdzwvY29kZT4gaXMgPGNvZGU+ZmFsc2U8L2NvZGU+LiBMb2FkcyB0aWxlcyBhcyBpZiB0aGUgdGlsZXNldCBpcyB2aXNpYmxlIGJ1dCBkb2VzIG5vdCByZW5kZXIgdGhlbS5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0aGlzLnByZWxvYWRXaGVuSGlkZGVuID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMucHJlbG9hZFdoZW5IaWRkZW4sIGZhbHNlKTtcblxuICAvKipcbiAgICogT3B0aW1pemF0aW9uIG9wdGlvbi4gRmV0Y2ggdGlsZXMgYXQgdGhlIGNhbWVyYSdzIGZsaWdodCBkZXN0aW5hdGlvbiB3aGlsZSB0aGUgY2FtZXJhIGlzIGluIGZsaWdodC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHRoaXMucHJlbG9hZEZsaWdodERlc3RpbmF0aW9ucyA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLnByZWxvYWRGbGlnaHREZXN0aW5hdGlvbnMsXG4gICAgdHJ1ZVxuICApO1xuICB0aGlzLl9wYXNzID0gdW5kZWZpbmVkOyAvLyBDZXNpdW0zRFRpbGVQYXNzXG5cbiAgLyoqXG4gICAqIE9wdGltaXphdGlvbiBvcHRpb24uIFdoZXRoZXIgdGhlIHRpbGVzZXQgc2hvdWxkIHJlZmluZSBiYXNlZCBvbiBhIGR5bmFtaWMgc2NyZWVuIHNwYWNlIGVycm9yLiBUaWxlcyB0aGF0IGFyZSBmdXJ0aGVyXG4gICAqIGF3YXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGxvd2VyIGRldGFpbCB0aGFuIGNsb3NlciB0aWxlcy4gVGhpcyBpbXByb3ZlcyBwZXJmb3JtYW5jZSBieSByZW5kZXJpbmcgZmV3ZXJcbiAgICogdGlsZXMgYW5kIG1ha2luZyBsZXNzIHJlcXVlc3RzLCBidXQgbWF5IHJlc3VsdCBpbiBhIHNsaWdodCBkcm9wIGluIHZpc3VhbCBxdWFsaXR5IGZvciB0aWxlcyBpbiB0aGUgZGlzdGFuY2UuXG4gICAqIFRoZSBhbGdvcml0aG0gaXMgYmlhc2VkIHRvd2FyZHMgXCJzdHJlZXQgdmlld3NcIiB3aGVyZSB0aGUgY2FtZXJhIGlzIGNsb3NlIHRvIHRoZSBncm91bmQgcGxhbmUgb2YgdGhlIHRpbGVzZXQgYW5kIGxvb2tpbmdcbiAgICogYXQgdGhlIGhvcml6b24uIEluIGFkZGl0aW9uIHJlc3VsdHMgYXJlIG1vcmUgYWNjdXJhdGUgZm9yIHRpZ2h0bHkgZml0dGluZyBib3VuZGluZyB2b2x1bWVzIGxpa2UgYm94IGFuZCByZWdpb24uXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5keW5hbWljU2NyZWVuU3BhY2VFcnJvciA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLmR5bmFtaWNTY3JlZW5TcGFjZUVycm9yLFxuICAgIGZhbHNlXG4gICk7XG5cbiAgLyoqXG4gICAqIE9wdGltaXphdGlvbiBvcHRpb24uIFByaW9yaXRpemUgbG9hZGluZyB0aWxlcyBpbiB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4gYnkgdGVtcG9yYXJpbHkgcmFpc2luZyB0aGVcbiAgICogc2NyZWVuIHNwYWNlIGVycm9yIGZvciB0aWxlcyBhcm91bmQgdGhlIGVkZ2Ugb2YgdGhlIHNjcmVlbi4gU2NyZWVuIHNwYWNlIGVycm9yIHJldHVybnMgdG8gbm9ybWFsIG9uY2UgYWxsXG4gICAqIHRoZSB0aWxlcyBpbiB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4gYXMgZGV0ZXJtaW5lZCBieSB0aGUge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZENvbmVTaXplfSBhcmUgbG9hZGVkLlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgdGhpcy5mb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3IgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5mb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3IsXG4gICAgdHJ1ZVxuICApO1xuICB0aGlzLl9mb3ZlYXRlZENvbmVTaXplID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuZm92ZWF0ZWRDb25lU2l6ZSwgMC4xKTtcbiAgdGhpcy5fZm92ZWF0ZWRNaW5pbXVtU2NyZWVuU3BhY2VFcnJvclJlbGF4YXRpb24gPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5mb3ZlYXRlZE1pbmltdW1TY3JlZW5TcGFjZUVycm9yUmVsYXhhdGlvbixcbiAgICAwLjBcbiAgKTtcblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGEgY2FsbGJhY2sgdG8gY29udHJvbCBob3cgbXVjaCB0byByYWlzZSB0aGUgc2NyZWVuIHNwYWNlIGVycm9yIGZvciB0aWxlcyBvdXRzaWRlIHRoZSBmb3ZlYXRlZCBjb25lLFxuICAgKiBpbnRlcnBvbGF0aW5nIGJldHdlZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZE1pbmltdW1TY3JlZW5TcGFjZUVycm9yUmVsYXhhdGlvbn0gYW5kIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjbWF4aW11bVNjcmVlblNwYWNlRXJyb3J9LlxuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlc2V0LmZvdmVhdGVkSW50ZXJwb2xhdGlvbkNhbGxiYWNrfVxuICAgKi9cbiAgdGhpcy5mb3ZlYXRlZEludGVycG9sYXRpb25DYWxsYmFjayA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLmZvdmVhdGVkSW50ZXJwb2xhdGlvbkNhbGxiYWNrLFxuICAgIENlc2l1bU1hdGgubGVycFxuICApO1xuXG4gIC8qKlxuICAgKiBPcHRpbWl6YXRpb24gb3B0aW9uLiBVc2VkIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3J9IGlzIHRydWUgdG8gY29udHJvbFxuICAgKiBob3cgbG9uZyBpbiBzZWNvbmRzIHRvIHdhaXQgYWZ0ZXIgdGhlIGNhbWVyYSBzdG9wcyBtb3ZpbmcgYmVmb3JlIGRlZmVycmVkIHRpbGVzIHN0YXJ0IGxvYWRpbmcgaW4uXG4gICAqIFRoaXMgdGltZSBkZWxheSBwcmV2ZW50cyByZXF1ZXN0aW5nIHRpbGVzIGFyb3VuZCB0aGUgZWRnZXMgb2YgdGhlIHNjcmVlbiB3aGVuIHRoZSBjYW1lcmEgaXMgbW92aW5nLlxuICAgKiBTZXR0aW5nIHRoaXMgdG8gMC4wIHdpbGwgaW1tZWRpYXRlbHkgcmVxdWVzdCBhbGwgdGlsZXMgaW4gYW55IGdpdmVuIHZpZXcuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDAuMlxuICAgKi9cbiAgdGhpcy5mb3ZlYXRlZFRpbWVEZWxheSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmZvdmVhdGVkVGltZURlbGF5LCAwLjIpO1xuXG4gIC8qKlxuICAgKiBBIHNjYWxhciB0aGF0IGRldGVybWluZXMgdGhlIGRlbnNpdHkgdXNlZCB0byBhZGp1c3QgdGhlIGR5bmFtaWMgc2NyZWVuIHNwYWNlIGVycm9yLCBzaW1pbGFyIHRvIHtAbGluayBGb2d9LiBJbmNyZWFzaW5nIHRoaXNcbiAgICogdmFsdWUgaGFzIHRoZSBlZmZlY3Qgb2YgaW5jcmVhc2luZyB0aGUgbWF4aW11bSBzY3JlZW4gc3BhY2UgZXJyb3IgZm9yIGFsbCB0aWxlcywgYnV0IGluIGEgbm9uLWxpbmVhciBmYXNoaW9uLlxuICAgKiBUaGUgZXJyb3Igc3RhcnRzIGF0IDAuMCBhbmQgaW5jcmVhc2VzIGV4cG9uZW50aWFsbHkgdW50aWwgYSBtaWRwb2ludCBpcyByZWFjaGVkLCBhbmQgdGhlbiBhcHByb2FjaGVzIDEuMCBhc3ltcHRvdGljYWxseS5cbiAgICogVGhpcyBoYXMgdGhlIGVmZmVjdCBvZiBrZWVwaW5nIGhpZ2ggZGV0YWlsIGluIHRoZSBjbG9zZXIgdGlsZXMgYW5kIGxvd2VyIGRldGFpbCBpbiB0aGUgZnVydGhlciB0aWxlcywgd2l0aCBhbGwgdGlsZXNcbiAgICogYmV5b25kIGEgY2VydGFpbiBkaXN0YW5jZSBhbGwgcm91Z2hseSBoYXZpbmcgYW4gZXJyb3Igb2YgMS4wLlxuICAgKiA8cD5cbiAgICogVGhlIGR5bmFtaWMgZXJyb3IgaXMgaW4gdGhlIHJhbmdlIFswLjAsIDEuMCkgYW5kIGlzIG11bHRpcGxpZWQgYnkgPGNvZGU+ZHluYW1pY1NjcmVlblNwYWNlRXJyb3JGYWN0b3I8L2NvZGU+IHRvIHByb2R1Y2UgdGhlXG4gICAqIGZpbmFsIGR5bmFtaWMgZXJyb3IuIFRoaXMgZHluYW1pYyBlcnJvciBpcyB0aGVuIHN1YnRyYWN0ZWQgZnJvbSB0aGUgdGlsZSdzIGFjdHVhbCBzY3JlZW4gc3BhY2UgZXJyb3IuXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIEluY3JlYXNpbmcgPGNvZGU+ZHluYW1pY1NjcmVlblNwYWNlRXJyb3JEZW5zaXR5PC9jb2RlPiBoYXMgdGhlIGVmZmVjdCBvZiBtb3ZpbmcgdGhlIGVycm9yIG1pZHBvaW50IGNsb3NlciB0byB0aGUgY2FtZXJhLlxuICAgKiBJdCBpcyBhbmFsb2dvdXMgdG8gbW92aW5nIGZvZyBjbG9zZXIgdG8gdGhlIGNhbWVyYS5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjAwMjc4XG4gICAqL1xuICB0aGlzLmR5bmFtaWNTY3JlZW5TcGFjZUVycm9yRGVuc2l0eSA9IDAuMDAyNzg7XG5cbiAgLyoqXG4gICAqIEEgZmFjdG9yIHVzZWQgdG8gaW5jcmVhc2UgdGhlIHNjcmVlbiBzcGFjZSBlcnJvciBvZiB0aWxlcyBmb3IgZHluYW1pYyBzY3JlZW4gc3BhY2UgZXJyb3IuIEFzIHRoaXMgdmFsdWUgaW5jcmVhc2VzIGxlc3MgdGlsZXNcbiAgICogYXJlIHJlcXVlc3RlZCBmb3IgcmVuZGVyaW5nIGFuZCB0aWxlcyBpbiB0aGUgZGlzdGFuY2Ugd2lsbCBoYXZlIGxvd2VyIGRldGFpbC4gSWYgc2V0IHRvIHplcm8sIHRoZSBmZWF0dXJlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDQuMFxuICAgKi9cbiAgdGhpcy5keW5hbWljU2NyZWVuU3BhY2VFcnJvckZhY3RvciA9IDQuMDtcblxuICAvKipcbiAgICogQSByYXRpbyBvZiB0aGUgdGlsZXNldCdzIGhlaWdodCBhdCB3aGljaCB0aGUgZGVuc2l0eSBzdGFydHMgdG8gZmFsbG9mZi4gSWYgdGhlIGNhbWVyYSBpcyBiZWxvdyB0aGlzIGhlaWdodCB0aGVcbiAgICogZnVsbCBjb21wdXRlZCBkZW5zaXR5IGlzIGFwcGxpZWQsIG90aGVyd2lzZSB0aGUgZGVuc2l0eSBmYWxscyBvZmYuIFRoaXMgaGFzIHRoZSBlZmZlY3Qgb2YgaGlnaGVyIGRlbnNpdHkgYXRcbiAgICogc3RyZWV0IGxldmVsIHZpZXdzLlxuICAgKiA8cD5cbiAgICogVmFsaWQgdmFsdWVzIGFyZSBiZXR3ZWVuIDAuMCBhbmQgMS4wLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDAuMjVcbiAgICovXG4gIHRoaXMuZHluYW1pY1NjcmVlblNwYWNlRXJyb3JIZWlnaHRGYWxsb2ZmID0gMC4yNTtcblxuICB0aGlzLl9keW5hbWljU2NyZWVuU3BhY2VFcnJvckNvbXB1dGVkRGVuc2l0eSA9IDAuMDsgLy8gVXBkYXRlZCBiYXNlZCBvbiB0aGUgY2FtZXJhIHBvc2l0aW9uIGFuZCBkaXJlY3Rpb25cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB0aWxlc2V0IGNhc3RzIG9yIHJlY2VpdmVzIHNoYWRvd3MgZnJvbSBsaWdodCBzb3VyY2VzLlxuICAgKiA8cD5cbiAgICogRW5hYmxpbmcgc2hhZG93cyBoYXMgYSBwZXJmb3JtYW5jZSBpbXBhY3QuIEEgdGlsZXNldCB0aGF0IGNhc3RzIHNoYWRvd3MgbXVzdCBiZSByZW5kZXJlZCB0d2ljZSwgb25jZSBmcm9tIHRoZSBjYW1lcmEgYW5kIGFnYWluIGZyb20gdGhlIGxpZ2h0J3MgcG9pbnQgb2Ygdmlldy5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogU2hhZG93cyBhcmUgcmVuZGVyZWQgb25seSB3aGVuIHtAbGluayBWaWV3ZXIjc2hhZG93c30gaXMgPGNvZGU+dHJ1ZTwvY29kZT4uXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge1NoYWRvd01vZGV9XG4gICAqIEBkZWZhdWx0IFNoYWRvd01vZGUuRU5BQkxFRFxuICAgKi9cbiAgdGhpcy5zaGFkb3dzID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuc2hhZG93cywgU2hhZG93TW9kZS5FTkFCTEVEKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgdGlsZXNldCB3aWxsIGJlIHNob3duLlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgdGhpcy5zaG93ID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuc2hvdywgdHJ1ZSk7XG5cbiAgLyoqXG4gICAqIERlZmluZXMgaG93IHBlci1mZWF0dXJlIGNvbG9ycyBzZXQgZnJvbSB0aGUgQ2VzaXVtIEFQSSBvciBkZWNsYXJhdGl2ZSBzdHlsaW5nIGJsZW5kIHdpdGggdGhlIHNvdXJjZSBjb2xvcnMgZnJvbVxuICAgKiB0aGUgb3JpZ2luYWwgZmVhdHVyZSwgZS5nLiBnbFRGIG1hdGVyaWFsIG9yIHBlci1wb2ludCBjb2xvciBpbiB0aGUgdGlsZS5cbiAgICpcbiAgICogQHR5cGUge0Nlc2l1bTNEVGlsZUNvbG9yQmxlbmRNb2RlfVxuICAgKiBAZGVmYXVsdCBDZXNpdW0zRFRpbGVDb2xvckJsZW5kTW9kZS5ISUdITElHSFRcbiAgICovXG4gIHRoaXMuY29sb3JCbGVuZE1vZGUgPSBDZXNpdW0zRFRpbGVDb2xvckJsZW5kTW9kZS5ISUdITElHSFQ7XG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHZhbHVlIHVzZWQgdG8gbGluZWFybHkgaW50ZXJwb2xhdGUgYmV0d2VlbiB0aGUgc291cmNlIGNvbG9yIGFuZCBmZWF0dXJlIGNvbG9yIHdoZW4gdGhlIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjY29sb3JCbGVuZE1vZGV9IGlzIDxjb2RlPk1JWDwvY29kZT4uXG4gICAqIEEgdmFsdWUgb2YgMC4wIHJlc3VsdHMgaW4gdGhlIHNvdXJjZSBjb2xvciB3aGlsZSBhIHZhbHVlIG9mIDEuMCByZXN1bHRzIGluIHRoZSBmZWF0dXJlIGNvbG9yLCB3aXRoIGFueSB2YWx1ZSBpbi1iZXR3ZWVuXG4gICAqIHJlc3VsdGluZyBpbiBhIG1peCBvZiB0aGUgc291cmNlIGNvbG9yIGFuZCBmZWF0dXJlIGNvbG9yLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjVcbiAgICovXG4gIHRoaXMuY29sb3JCbGVuZEFtb3VudCA9IDAuNTtcblxuICAvKipcbiAgICogT3B0aW9ucyBmb3IgY29udHJvbGxpbmcgcG9pbnQgc2l6ZSBiYXNlZCBvbiBnZW9tZXRyaWMgZXJyb3IgYW5kIGV5ZSBkb21lIGxpZ2h0aW5nLlxuICAgKiBAdHlwZSB7UG9pbnRDbG91ZFNoYWRpbmd9XG4gICAqL1xuICB0aGlzLnBvaW50Q2xvdWRTaGFkaW5nID0gbmV3IFBvaW50Q2xvdWRTaGFkaW5nKG9wdGlvbnMucG9pbnRDbG91ZFNoYWRpbmcpO1xuXG4gIHRoaXMuX3BvaW50Q2xvdWRFeWVEb21lTGlnaHRpbmcgPSBuZXcgUG9pbnRDbG91ZEV5ZURvbWVMaWdodGluZygpO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgZmlyZWQgdG8gaW5kaWNhdGUgcHJvZ3Jlc3Mgb2YgbG9hZGluZyBuZXcgdGlsZXMuICBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gYSBuZXcgdGlsZVxuICAgKiBpcyByZXF1ZXN0ZWQsIHdoZW4gYSByZXF1ZXN0ZWQgdGlsZSBpcyBmaW5pc2hlZCBkb3dubG9hZGluZywgYW5kIHdoZW4gYSBkb3dubG9hZGVkIHRpbGUgaGFzIGJlZW5cbiAgICogcHJvY2Vzc2VkIGFuZCBpcyByZWFkeSB0byByZW5kZXIuXG4gICAqIDxwPlxuICAgKiBUaGUgbnVtYmVyIG9mIHBlbmRpbmcgdGlsZSByZXF1ZXN0cywgPGNvZGU+bnVtYmVyT2ZQZW5kaW5nUmVxdWVzdHM8L2NvZGU+LCBhbmQgbnVtYmVyIG9mIHRpbGVzXG4gICAqIHByb2Nlc3NpbmcsIDxjb2RlPm51bWJlck9mVGlsZXNQcm9jZXNzaW5nPC9jb2RlPiBhcmUgcGFzc2VkIHRvIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCBhdCB0aGUgZW5kIG9mIHRoZSBmcmFtZSBhZnRlciB0aGUgc2NlbmUgaXMgcmVuZGVyZWQuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0V2ZW50fVxuICAgKiBAZGVmYXVsdCBuZXcgRXZlbnQoKVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aWxlc2V0LmxvYWRQcm9ncmVzcy5hZGRFdmVudExpc3RlbmVyKGZ1bmN0aW9uKG51bWJlck9mUGVuZGluZ1JlcXVlc3RzLCBudW1iZXJPZlRpbGVzUHJvY2Vzc2luZykge1xuICAgKiAgICAgaWYgKChudW1iZXJPZlBlbmRpbmdSZXF1ZXN0cyA9PT0gMCkgJiYgKG51bWJlck9mVGlsZXNQcm9jZXNzaW5nID09PSAwKSkge1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCdTdG9wcGVkIGxvYWRpbmcnKTtcbiAgICogICAgICAgICByZXR1cm47XG4gICAqICAgICB9XG4gICAqXG4gICAqICAgICBjb25zb2xlLmxvZygnTG9hZGluZzogcmVxdWVzdHM6ICcgKyBudW1iZXJPZlBlbmRpbmdSZXF1ZXN0cyArICcsIHByb2Nlc3Npbmc6ICcgKyBudW1iZXJPZlRpbGVzUHJvY2Vzc2luZyk7XG4gICAqIH0pO1xuICAgKi9cbiAgdGhpcy5sb2FkUHJvZ3Jlc3MgPSBuZXcgRXZlbnQoKTtcblxuICAvKipcbiAgICogVGhlIGV2ZW50IGZpcmVkIHRvIGluZGljYXRlIHRoYXQgYWxsIHRpbGVzIHRoYXQgbWVldCB0aGUgc2NyZWVuIHNwYWNlIGVycm9yIHRoaXMgZnJhbWUgYXJlIGxvYWRlZC4gVGhlIHRpbGVzZXRcbiAgICogaXMgY29tcGxldGVseSBsb2FkZWQgZm9yIHRoaXMgdmlldy5cbiAgICogPHA+XG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgYXQgdGhlIGVuZCBvZiB0aGUgZnJhbWUgYWZ0ZXIgdGhlIHNjZW5lIGlzIHJlbmRlcmVkLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtFdmVudH1cbiAgICogQGRlZmF1bHQgbmV3IEV2ZW50KClcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGlsZXNldC5hbGxUaWxlc0xvYWRlZC5hZGRFdmVudExpc3RlbmVyKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0FsbCB0aWxlcyBhcmUgbG9hZGVkJyk7XG4gICAqIH0pO1xuICAgKlxuICAgKiBAc2VlIENlc2l1bTNEVGlsZXNldCN0aWxlc0xvYWRlZFxuICAgKi9cbiAgdGhpcy5hbGxUaWxlc0xvYWRlZCA9IG5ldyBFdmVudCgpO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgZmlyZWQgdG8gaW5kaWNhdGUgdGhhdCBhbGwgdGlsZXMgdGhhdCBtZWV0IHRoZSBzY3JlZW4gc3BhY2UgZXJyb3IgdGhpcyBmcmFtZSBhcmUgbG9hZGVkLiBUaGlzIGV2ZW50XG4gICAqIGlzIGZpcmVkIG9uY2Ugd2hlbiBhbGwgdGlsZXMgaW4gdGhlIGluaXRpYWwgdmlldyBhcmUgbG9hZGVkLlxuICAgKiA8cD5cbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCBhdCB0aGUgZW5kIG9mIHRoZSBmcmFtZSBhZnRlciB0aGUgc2NlbmUgaXMgcmVuZGVyZWQuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0V2ZW50fVxuICAgKiBAZGVmYXVsdCBuZXcgRXZlbnQoKVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aWxlc2V0LmluaXRpYWxUaWxlc0xvYWRlZC5hZGRFdmVudExpc3RlbmVyKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0luaXRpYWwgdGlsZXMgYXJlIGxvYWRlZCcpO1xuICAgKiB9KTtcbiAgICpcbiAgICogQHNlZSBDZXNpdW0zRFRpbGVzZXQjYWxsVGlsZXNMb2FkZWRcbiAgICovXG4gIHRoaXMuaW5pdGlhbFRpbGVzTG9hZGVkID0gbmV3IEV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCBmaXJlZCB0byBpbmRpY2F0ZSB0aGF0IGEgdGlsZSdzIGNvbnRlbnQgd2FzIGxvYWRlZC5cbiAgICogPHA+XG4gICAqIFRoZSBsb2FkZWQge0BsaW5rIENlc2l1bTNEVGlsZX0gaXMgcGFzc2VkIHRvIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCBkdXJpbmcgdGhlIHRpbGVzZXQgdHJhdmVyc2FsIHdoaWxlIHRoZSBmcmFtZSBpcyBiZWluZyByZW5kZXJlZFxuICAgKiBzbyB0aGF0IHVwZGF0ZXMgdG8gdGhlIHRpbGUgdGFrZSBlZmZlY3QgaW4gdGhlIHNhbWUgZnJhbWUuICBEbyBub3QgY3JlYXRlIG9yIG1vZGlmeVxuICAgKiBDZXNpdW0gZW50aXRpZXMgb3IgcHJpbWl0aXZlcyBkdXJpbmcgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtFdmVudH1cbiAgICogQGRlZmF1bHQgbmV3IEV2ZW50KClcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGlsZXNldC50aWxlTG9hZC5hZGRFdmVudExpc3RlbmVyKGZ1bmN0aW9uKHRpbGUpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdBIHRpbGUgd2FzIGxvYWRlZC4nKTtcbiAgICogfSk7XG4gICAqL1xuICB0aGlzLnRpbGVMb2FkID0gbmV3IEV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCBmaXJlZCB0byBpbmRpY2F0ZSB0aGF0IGEgdGlsZSdzIGNvbnRlbnQgd2FzIHVubG9hZGVkLlxuICAgKiA8cD5cbiAgICogVGhlIHVubG9hZGVkIHtAbGluayBDZXNpdW0zRFRpbGV9IGlzIHBhc3NlZCB0byB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSB0aWxlJ3MgY29udGVudCBpcyB1bmxvYWRlZCB3aGlsZSB0aGUgZnJhbWUgaXMgYmVpbmdcbiAgICogcmVuZGVyZWQgc28gdGhhdCB0aGUgZXZlbnQgbGlzdGVuZXIgaGFzIGFjY2VzcyB0byB0aGUgdGlsZSdzIGNvbnRlbnQuICBEbyBub3QgY3JlYXRlXG4gICAqIG9yIG1vZGlmeSBDZXNpdW0gZW50aXRpZXMgb3IgcHJpbWl0aXZlcyBkdXJpbmcgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtFdmVudH1cbiAgICogQGRlZmF1bHQgbmV3IEV2ZW50KClcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGlsZXNldC50aWxlVW5sb2FkLmFkZEV2ZW50TGlzdGVuZXIoZnVuY3Rpb24odGlsZSkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0EgdGlsZSB3YXMgdW5sb2FkZWQgZnJvbSB0aGUgY2FjaGUuJyk7XG4gICAqIH0pO1xuICAgKlxuICAgKiBAc2VlIENlc2l1bTNEVGlsZXNldCNtYXhpbXVtTWVtb3J5VXNhZ2VcbiAgICogQHNlZSBDZXNpdW0zRFRpbGVzZXQjdHJpbUxvYWRlZFRpbGVzXG4gICAqL1xuICB0aGlzLnRpbGVVbmxvYWQgPSBuZXcgRXZlbnQoKTtcblxuICAvKipcbiAgICogVGhlIGV2ZW50IGZpcmVkIHRvIGluZGljYXRlIHRoYXQgYSB0aWxlJ3MgY29udGVudCBmYWlsZWQgdG8gbG9hZC5cbiAgICogPHA+XG4gICAqIElmIHRoZXJlIGFyZSBubyBldmVudCBsaXN0ZW5lcnMsIGVycm9yIG1lc3NhZ2VzIHdpbGwgYmUgbG9nZ2VkIHRvIHRoZSBjb25zb2xlLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBUaGUgZXJyb3Igb2JqZWN0IHBhc3NlZCB0byB0aGUgbGlzdGVuZXIgY29udGFpbnMgdHdvIHByb3BlcnRpZXM6XG4gICAqIDx1bD5cbiAgICogPGxpPjxjb2RlPnVybDwvY29kZT46IHRoZSB1cmwgb2YgdGhlIGZhaWxlZCB0aWxlLjwvbGk+XG4gICAqIDxsaT48Y29kZT5tZXNzYWdlPC9jb2RlPjogdGhlIGVycm9yIG1lc3NhZ2UuPC9saT5cbiAgICogPC91bD5cbiAgICogPHA+XG4gICAqIElmIHRoZSA8Y29kZT4zRFRJTEVTX211bHRpcGxlX2NvbnRlbnRzPC9jb2RlPiBleHRlbnNpb24gaXMgdXNlZCwgdGhpcyBldmVudCBpcyByYWlzZWQgb25jZSBwZXIgaW5uZXIgY29udGVudCB3aXRoIGVycm9ycy5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7RXZlbnR9XG4gICAqIEBkZWZhdWx0IG5ldyBFdmVudCgpXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRpbGVzZXQudGlsZUZhaWxlZC5hZGRFdmVudExpc3RlbmVyKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJyZWQgbG9hZGluZyB0aWxlOiAnICsgZXJyb3IudXJsKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdFcnJvcjogJyArIGVycm9yLm1lc3NhZ2UpO1xuICAgKiB9KTtcbiAgICovXG4gIHRoaXMudGlsZUZhaWxlZCA9IG5ldyBFdmVudCgpO1xuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGZpcmVzIG9uY2UgZm9yIGVhY2ggdmlzaWJsZSB0aWxlIGluIGEgZnJhbWUuICBUaGlzIGNhbiBiZSB1c2VkIHRvIG1hbnVhbGx5XG4gICAqIHN0eWxlIGEgdGlsZXNldC5cbiAgICogPHA+XG4gICAqIFRoZSB2aXNpYmxlIHtAbGluayBDZXNpdW0zRFRpbGV9IGlzIHBhc3NlZCB0byB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqIDwvcD5cbiAgICogPHA+XG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgZHVyaW5nIHRoZSB0aWxlc2V0IHRyYXZlcnNhbCB3aGlsZSB0aGUgZnJhbWUgaXMgYmVpbmcgcmVuZGVyZWRcbiAgICogc28gdGhhdCB1cGRhdGVzIHRvIHRoZSB0aWxlIHRha2UgZWZmZWN0IGluIHRoZSBzYW1lIGZyYW1lLiAgRG8gbm90IGNyZWF0ZSBvciBtb2RpZnlcbiAgICogQ2VzaXVtIGVudGl0aWVzIG9yIHByaW1pdGl2ZXMgZHVyaW5nIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7RXZlbnR9XG4gICAqIEBkZWZhdWx0IG5ldyBFdmVudCgpXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRpbGVzZXQudGlsZVZpc2libGUuYWRkRXZlbnRMaXN0ZW5lcihmdW5jdGlvbih0aWxlKSB7XG4gICAqICAgICBpZiAodGlsZS5jb250ZW50IGluc3RhbmNlb2YgQ2VzaXVtLkJhdGNoZWQzRE1vZGVsM0RUaWxlQ29udGVudCkge1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCdBIEJhdGNoZWQgM0QgTW9kZWwgdGlsZSBpcyB2aXNpYmxlLicpO1xuICAgKiAgICAgfVxuICAgKiB9KTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gQXBwbHkgYSByZWQgc3R5bGUgYW5kIHRoZW4gbWFudWFsbHkgc2V0IHJhbmRvbSBjb2xvcnMgZm9yIGV2ZXJ5IG90aGVyIGZlYXR1cmUgd2hlbiB0aGUgdGlsZSBiZWNvbWVzIHZpc2libGUuXG4gICAqIHRpbGVzZXQuc3R5bGUgPSBuZXcgQ2VzaXVtLkNlc2l1bTNEVGlsZVN0eWxlKHtcbiAgICogICAgIGNvbG9yIDogJ2NvbG9yKFwicmVkXCIpJ1xuICAgKiB9KTtcbiAgICogdGlsZXNldC50aWxlVmlzaWJsZS5hZGRFdmVudExpc3RlbmVyKGZ1bmN0aW9uKHRpbGUpIHtcbiAgICogICAgIHZhciBjb250ZW50ID0gdGlsZS5jb250ZW50O1xuICAgKiAgICAgdmFyIGZlYXR1cmVzTGVuZ3RoID0gY29udGVudC5mZWF0dXJlc0xlbmd0aDtcbiAgICogICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXNMZW5ndGg7IGkrPTIpIHtcbiAgICogICAgICAgICBjb250ZW50LmdldEZlYXR1cmUoaSkuY29sb3IgPSBDZXNpdW0uQ29sb3IuZnJvbVJhbmRvbSgpO1xuICAgKiAgICAgfVxuICAgKiB9KTtcbiAgICovXG4gIHRoaXMudGlsZVZpc2libGUgPSBuZXcgRXZlbnQoKTtcblxuICAvKipcbiAgICogT3B0aW1pemF0aW9uIG9wdGlvbi4gRGV0ZXJtaW5lcyBpZiBsZXZlbCBvZiBkZXRhaWwgc2tpcHBpbmcgc2hvdWxkIGJlIGFwcGxpZWQgZHVyaW5nIHRoZSB0cmF2ZXJzYWwuXG4gICAqIDxwPlxuICAgKiBUaGUgY29tbW9uIHN0cmF0ZWd5IGZvciByZXBsYWNlbWVudC1yZWZpbmVtZW50IHRyYXZlcnNhbCBpcyB0byBzdG9yZSBhbGwgbGV2ZWxzIG9mIHRoZSB0cmVlIGluIG1lbW9yeSBhbmQgcmVxdWlyZVxuICAgKiBhbGwgY2hpbGRyZW4gdG8gYmUgbG9hZGVkIGJlZm9yZSB0aGUgcGFyZW50IGNhbiByZWZpbmUuIFdpdGggdGhpcyBvcHRpbWl6YXRpb24gbGV2ZWxzIG9mIHRoZSB0cmVlIGNhbiBiZSBza2lwcGVkXG4gICAqIGVudGlyZWx5IGFuZCBjaGlsZHJlbiBjYW4gYmUgcmVuZGVyZWQgYWxvbmdzaWRlIHRoZWlyIHBhcmVudHMuIFRoZSB0aWxlc2V0IHJlcXVpcmVzIHNpZ25pZmljYW50bHkgbGVzcyBtZW1vcnkgd2hlblxuICAgKiB1c2luZyB0aGlzIG9wdGltaXphdGlvbi5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuc2tpcExldmVsT2ZEZXRhaWwgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5za2lwTGV2ZWxPZkRldGFpbCwgZmFsc2UpO1xuICB0aGlzLl9za2lwTGV2ZWxPZkRldGFpbCA9IHRoaXMuc2tpcExldmVsT2ZEZXRhaWw7XG4gIHRoaXMuX2Rpc2FibGVTa2lwTGV2ZWxPZkRldGFpbCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgc2NyZWVuIHNwYWNlIGVycm9yIHRoYXQgbXVzdCBiZSByZWFjaGVkIGJlZm9yZSBza2lwcGluZyBsZXZlbHMgb2YgZGV0YWlsLlxuICAgKiA8cD5cbiAgICogT25seSB1c2VkIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNza2lwTGV2ZWxPZkRldGFpbH0gaXMgPGNvZGU+dHJ1ZTwvY29kZT4uXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMTAyNFxuICAgKi9cbiAgdGhpcy5iYXNlU2NyZWVuU3BhY2VFcnJvciA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmJhc2VTY3JlZW5TcGFjZUVycm9yLCAxMDI0KTtcblxuICAvKipcbiAgICogTXVsdGlwbGllciBkZWZpbmluZyB0aGUgbWluaW11bSBzY3JlZW4gc3BhY2UgZXJyb3IgdG8gc2tpcC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIGEgdGlsZSBoYXMgc2NyZWVuIHNwYWNlIGVycm9yIG9mIDEwMCwgbm8gdGlsZXMgd2lsbCBiZSBsb2FkZWQgdW5sZXNzIHRoZXlcbiAgICogYXJlIGxlYXZlcyBvciBoYXZlIGEgc2NyZWVuIHNwYWNlIGVycm9yIDxjb2RlPjw9IDEwMCAvIHNraXBTY3JlZW5TcGFjZUVycm9yRmFjdG9yPC9jb2RlPi5cbiAgICogPHA+XG4gICAqIE9ubHkgdXNlZCB3aGVuIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjc2tpcExldmVsT2ZEZXRhaWx9IGlzIDxjb2RlPnRydWU8L2NvZGU+LlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDE2XG4gICAqL1xuICB0aGlzLnNraXBTY3JlZW5TcGFjZUVycm9yRmFjdG9yID0gZGVmYXVsdFZhbHVlKFxuICAgIG9wdGlvbnMuc2tpcFNjcmVlblNwYWNlRXJyb3JGYWN0b3IsXG4gICAgMTZcbiAgKTtcblxuICAvKipcbiAgICogQ29uc3RhbnQgZGVmaW5pbmcgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGxldmVscyB0byBza2lwIHdoZW4gbG9hZGluZyB0aWxlcy4gV2hlbiBpdCBpcyAwLCBubyBsZXZlbHMgYXJlIHNraXBwZWQuXG4gICAqIEZvciBleGFtcGxlLCBpZiBhIHRpbGUgaXMgbGV2ZWwgMSwgbm8gdGlsZXMgd2lsbCBiZSBsb2FkZWQgdW5sZXNzIHRoZXkgYXJlIGF0IGxldmVsIGdyZWF0ZXIgdGhhbiAyLlxuICAgKiA8cD5cbiAgICogT25seSB1c2VkIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNza2lwTGV2ZWxPZkRldGFpbH0gaXMgPGNvZGU+dHJ1ZTwvY29kZT4uXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgdGhpcy5za2lwTGV2ZWxzID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuc2tpcExldmVscywgMSk7XG5cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgb25seSB0aWxlcyB0aGF0IG1lZXQgdGhlIG1heGltdW0gc2NyZWVuIHNwYWNlIGVycm9yIHdpbGwgZXZlciBiZSBkb3dubG9hZGVkLlxuICAgKiBTa2lwcGluZyBmYWN0b3JzIGFyZSBpZ25vcmVkIGFuZCBqdXN0IHRoZSBkZXNpcmVkIHRpbGVzIGFyZSBsb2FkZWQuXG4gICAqIDxwPlxuICAgKiBPbmx5IHVzZWQgd2hlbiB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I3NraXBMZXZlbE9mRGV0YWlsfSBpcyA8Y29kZT50cnVlPC9jb2RlPi5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuaW1tZWRpYXRlbHlMb2FkRGVzaXJlZExldmVsT2ZEZXRhaWwgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5pbW1lZGlhdGVseUxvYWREZXNpcmVkTGV2ZWxPZkRldGFpbCxcbiAgICBmYWxzZVxuICApO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgc2libGluZ3Mgb2YgdmlzaWJsZSB0aWxlcyBhcmUgYWx3YXlzIGRvd25sb2FkZWQgZHVyaW5nIHRyYXZlcnNhbC5cbiAgICogVGhpcyBtYXkgYmUgdXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IHRpbGVzIGFyZSBhbHJlYWR5IGF2YWlsYWJsZSB3aGVuIHRoZSB2aWV3ZXIgdHVybnMgbGVmdC9yaWdodC5cbiAgICogPHA+XG4gICAqIE9ubHkgdXNlZCB3aGVuIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjc2tpcExldmVsT2ZEZXRhaWx9IGlzIDxjb2RlPnRydWU8L2NvZGU+LlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5sb2FkU2libGluZ3MgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5sb2FkU2libGluZ3MsIGZhbHNlKTtcblxuICB0aGlzLl9jbGlwcGluZ1BsYW5lcyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jbGlwcGluZ1BsYW5lcyA9IG9wdGlvbnMuY2xpcHBpbmdQbGFuZXM7XG5cbiAgdGhpcy5faW1hZ2VCYXNlZExpZ2h0aW5nRmFjdG9yID0gbmV3IENhcnRlc2lhbjIoMS4wLCAxLjApO1xuICBDYXJ0ZXNpYW4yLmNsb25lKFxuICAgIG9wdGlvbnMuaW1hZ2VCYXNlZExpZ2h0aW5nRmFjdG9yLFxuICAgIHRoaXMuX2ltYWdlQmFzZWRMaWdodGluZ0ZhY3RvclxuICApO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlnaHQgY29sb3Igd2hlbiBzaGFkaW5nIG1vZGVscy4gV2hlbiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+IHRoZSBzY2VuZSdzIGxpZ2h0IGNvbG9yIGlzIHVzZWQgaW5zdGVhZC5cbiAgICogPHA+XG4gICAqIEZvciBleGFtcGxlLCBkaXNhYmxpbmcgYWRkaXRpb25hbCBsaWdodCBzb3VyY2VzIGJ5IHNldHRpbmcgPGNvZGU+bW9kZWwuaW1hZ2VCYXNlZExpZ2h0aW5nRmFjdG9yID0gbmV3IENhcnRlc2lhbjIoMC4wLCAwLjApPC9jb2RlPiB3aWxsIG1ha2UgdGhlXG4gICAqIG1vZGVsIG11Y2ggZGFya2VyLiBIZXJlLCBpbmNyZWFzaW5nIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGxpZ2h0IHNvdXJjZSB3aWxsIG1ha2UgdGhlIG1vZGVsIGJyaWdodGVyLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMubGlnaHRDb2xvciA9IG9wdGlvbnMubGlnaHRDb2xvcjtcblxuICAvKipcbiAgICogVGhlIHN1bidzIGx1bWluYW5jZSBhdCB0aGUgemVuaXRoIGluIGtpbG8gY2FuZGVsYSBwZXIgbWV0ZXIgc3F1YXJlZCB0byB1c2UgZm9yIHRoaXMgbW9kZWwncyBwcm9jZWR1cmFsIGVudmlyb25tZW50IG1hcC5cbiAgICogVGhpcyBpcyB1c2VkIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNzcGVjdWxhckVudmlyb25tZW50TWFwc30gYW5kIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjc3BoZXJpY2FsSGFybW9uaWNDb2VmZmljaWVudHN9IGFyZSBub3QgZGVmaW5lZC5cbiAgICpcbiAgICogQHR5cGUgTnVtYmVyXG4gICAqXG4gICAqIEBkZWZhdWx0IDAuMlxuICAgKlxuICAgKi9cbiAgdGhpcy5sdW1pbmFuY2VBdFplbml0aCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmx1bWluYW5jZUF0WmVuaXRoLCAwLjIpO1xuXG4gIC8qKlxuICAgKiBUaGUgdGhpcmQgb3JkZXIgc3BoZXJpY2FsIGhhcm1vbmljIGNvZWZmaWNpZW50cyB1c2VkIGZvciB0aGUgZGlmZnVzZSBjb2xvciBvZiBpbWFnZS1iYXNlZCBsaWdodGluZy4gV2hlbiA8Y29kZT51bmRlZmluZWQ8L2NvZGU+LCBhIGRpZmZ1c2UgaXJyYWRpYW5jZVxuICAgKiBjb21wdXRlZCBmcm9tIHRoZSBhdG1vc3BoZXJlIGNvbG9yIGlzIHVzZWQuXG4gICAqIDxwPlxuICAgKiBUaGVyZSBhcmUgbmluZSA8Y29kZT5DYXJ0ZXNpYW4zPC9jb2RlPiBjb2VmZmljaWVudHMuXG4gICAqIFRoZSBvcmRlciBvZiB0aGUgY29lZmZpY2llbnRzIGlzOiBMPHN1Yj4wMDwvc3ViPiwgTDxzdWI+MS0xPC9zdWI+LCBMPHN1Yj4xMDwvc3ViPiwgTDxzdWI+MTE8L3N1Yj4sIEw8c3ViPjItMjwvc3ViPiwgTDxzdWI+Mi0xPC9zdWI+LCBMPHN1Yj4yMDwvc3ViPiwgTDxzdWI+MjE8L3N1Yj4sIEw8c3ViPjIyPC9zdWI+XG4gICAqIDwvcD5cbiAgICpcbiAgICogVGhlc2UgdmFsdWVzIGNhbiBiZSBvYnRhaW5lZCBieSBwcmVwcm9jZXNzaW5nIHRoZSBlbnZpcm9ubWVudCBtYXAgdXNpbmcgdGhlIDxjb2RlPmNtZ2VuPC9jb2RlPiB0b29sIG9mXG4gICAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2ZpbGFtZW50L3JlbGVhc2VzfEdvb2dsZSdzIEZpbGFtZW50IHByb2plY3R9LiBUaGlzIHdpbGwgYWxzbyBnZW5lcmF0ZSBhIEtUWCBmaWxlIHRoYXQgY2FuIGJlXG4gICAqIHN1cHBsaWVkIHRvIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjc3BlY3VsYXJFbnZpcm9ubWVudE1hcHN9LlxuICAgKlxuICAgKiBAdHlwZSB7Q2FydGVzaWFuM1tdfVxuICAgKiBAZGVtbyB7QGxpbmsgaHR0cHM6Ly9zYW5kY2FzdGxlLmNlc2l1bS5jb20vaW5kZXguaHRtbD9zcmM9SW1hZ2UtQmFzZWQgTGlnaHRpbmcuaHRtbHxTYW5kY2FzdGxlIEltYWdlIEJhc2VkIExpZ2h0aW5nIERlbW99XG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ3JhcGhpY3Muc3RhbmZvcmQuZWR1L3BhcGVycy9lbnZtYXAvZW52bWFwLnBkZnxBbiBFZmZpY2llbnQgUmVwcmVzZW50YXRpb24gZm9yIElycmFkaWFuY2UgRW52aXJvbm1lbnQgTWFwc31cbiAgICovXG4gIHRoaXMuc3BoZXJpY2FsSGFybW9uaWNDb2VmZmljaWVudHMgPSBvcHRpb25zLnNwaGVyaWNhbEhhcm1vbmljQ29lZmZpY2llbnRzO1xuXG4gIC8qKlxuICAgKiBBIFVSTCB0byBhIEtUWCBmaWxlIHRoYXQgY29udGFpbnMgYSBjdWJlIG1hcCBvZiB0aGUgc3BlY3VsYXIgbGlnaHRpbmcgYW5kIHRoZSBjb252b2x1dGVkIHNwZWN1bGFyIG1pcG1hcHMuXG4gICAqXG4gICAqIEBkZW1vIHtAbGluayBodHRwczovL3NhbmRjYXN0bGUuY2VzaXVtLmNvbS9pbmRleC5odG1sP3NyYz1JbWFnZS1CYXNlZCBMaWdodGluZy5odG1sfFNhbmRjYXN0bGUgSW1hZ2UgQmFzZWQgTGlnaHRpbmcgRGVtb31cbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQHNlZSBDZXNpdW0zRFRpbGVzZXQjc3BoZXJpY2FsSGFybW9uaWNDb2VmZmljaWVudHNcbiAgICovXG4gIHRoaXMuc3BlY3VsYXJFbnZpcm9ubWVudE1hcHMgPSBvcHRpb25zLnNwZWN1bGFyRW52aXJvbm1lbnRNYXBzO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGN1bGwgYmFjay1mYWNpbmcgZ2VvbWV0cnkuIFdoZW4gdHJ1ZSwgYmFjayBmYWNlIGN1bGxpbmcgaXMgZGV0ZXJtaW5lZFxuICAgKiBieSB0aGUgZ2xURiBtYXRlcmlhbCdzIGRvdWJsZVNpZGVkIHByb3BlcnR5OyB3aGVuIGZhbHNlLCBiYWNrIGZhY2UgY3VsbGluZyBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHRoaXMuYmFja0ZhY2VDdWxsaW5nID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuYmFja0ZhY2VDdWxsaW5nLCB0cnVlKTtcblxuICAvKipcbiAgICogV2hldGhlciB0byBkaXNwbGF5IHRoZSBvdXRsaW5lIGZvciBtb2RlbHMgdXNpbmcgdGhlXG4gICAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvVmVuZG9yL0NFU0lVTV9wcmltaXRpdmVfb3V0bGluZXxDRVNJVU1fcHJpbWl0aXZlX291dGxpbmV9IGV4dGVuc2lvbi5cbiAgICogV2hlbiB0cnVlLCBvdXRsaW5lcyBhcmUgZGlzcGxheWVkLiBXaGVuIGZhbHNlLCBvdXRsaW5lcyBhcmUgbm90IGRpc3BsYXllZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB0aGlzLnNob3dPdXRsaW5lID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuc2hvd091dGxpbmUsIHRydWUpO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGZvciBkZWJ1Z2dpbmcgb25seTsgaXQgaXMgbm90IG9wdGltaXplZCBmb3IgcHJvZHVjdGlvbiB1c2UuXG4gICAqIDxwPlxuICAgKiBEZXRlcm1pbmVzIGlmIG9ubHkgdGhlIHRpbGVzIGZyb20gbGFzdCBmcmFtZSBzaG91bGQgYmUgdXNlZCBmb3IgcmVuZGVyaW5nLiAgVGhpc1xuICAgKiBlZmZlY3RpdmVseSBcImZyZWV6ZXNcIiB0aGUgdGlsZXNldCB0byB0aGUgcHJldmlvdXMgZnJhbWUgc28gaXQgaXMgcG9zc2libGUgdG8gem9vbVxuICAgKiBvdXQgYW5kIHNlZSB3aGF0IHdhcyByZW5kZXJlZC5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuZGVidWdGcmVlemVGcmFtZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmRlYnVnRnJlZXplRnJhbWUsIGZhbHNlKTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBmb3IgZGVidWdnaW5nIG9ubHk7IGl0IGlzIG5vdCBvcHRpbWl6ZWQgZm9yIHByb2R1Y3Rpb24gdXNlLlxuICAgKiA8cD5cbiAgICogV2hlbiB0cnVlLCBhc3NpZ25zIGEgcmFuZG9tIGNvbG9yIHRvIGVhY2ggdGlsZS4gIFRoaXMgaXMgdXNlZnVsIGZvciB2aXN1YWxpemluZ1xuICAgKiB3aGF0IGZlYXR1cmVzIGJlbG9uZyB0byB3aGF0IHRpbGVzLCBlc3BlY2lhbGx5IHdpdGggYWRkaXRpdmUgcmVmaW5lbWVudCB3aGVyZSBmZWF0dXJlc1xuICAgKiBmcm9tIHBhcmVudCB0aWxlcyBtYXkgYmUgaW50ZXJsZWF2ZWQgd2l0aCBmZWF0dXJlcyBmcm9tIGNoaWxkIHRpbGVzLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5kZWJ1Z0NvbG9yaXplVGlsZXMgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5kZWJ1Z0NvbG9yaXplVGlsZXMsIGZhbHNlKTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBmb3IgZGVidWdnaW5nIG9ubHk7IGl0IGlzIG5vdCBvcHRpbWl6ZWQgZm9yIHByb2R1Y3Rpb24gdXNlLlxuICAgKiA8cD5cbiAgICogV2hlbiB0cnVlLCByZW5kZXJzIGVhY2ggdGlsZSdzIGNvbnRlbnQgYXMgYSB3aXJlZnJhbWUuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0aGlzLmRlYnVnV2lyZWZyYW1lID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuZGVidWdXaXJlZnJhbWUsIGZhbHNlKTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBmb3IgZGVidWdnaW5nIG9ubHk7IGl0IGlzIG5vdCBvcHRpbWl6ZWQgZm9yIHByb2R1Y3Rpb24gdXNlLlxuICAgKiA8cD5cbiAgICogV2hlbiB0cnVlLCByZW5kZXJzIHRoZSBib3VuZGluZyB2b2x1bWUgZm9yIGVhY2ggdmlzaWJsZSB0aWxlLiAgVGhlIGJvdW5kaW5nIHZvbHVtZSBpc1xuICAgKiB3aGl0ZSBpZiB0aGUgdGlsZSBoYXMgYSBjb250ZW50IGJvdW5kaW5nIHZvbHVtZSBvciBpcyBlbXB0eTsgb3RoZXJ3aXNlLCBpdCBpcyByZWQuICBUaWxlcyB0aGF0IGRvbid0IG1lZXQgdGhlXG4gICAqIHNjcmVlbiBzcGFjZSBlcnJvciBhbmQgYXJlIHN0aWxsIHJlZmluaW5nIHRvIHRoZWlyIGRlc2NlbmRhbnRzIGFyZSB5ZWxsb3cuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0aGlzLmRlYnVnU2hvd0JvdW5kaW5nVm9sdW1lID0gZGVmYXVsdFZhbHVlKFxuICAgIG9wdGlvbnMuZGVidWdTaG93Qm91bmRpbmdWb2x1bWUsXG4gICAgZmFsc2VcbiAgKTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBmb3IgZGVidWdnaW5nIG9ubHk7IGl0IGlzIG5vdCBvcHRpbWl6ZWQgZm9yIHByb2R1Y3Rpb24gdXNlLlxuICAgKiA8cD5cbiAgICogV2hlbiB0cnVlLCByZW5kZXJzIHRoZSBib3VuZGluZyB2b2x1bWUgZm9yIGVhY2ggdmlzaWJsZSB0aWxlJ3MgY29udGVudC4gVGhlIGJvdW5kaW5nIHZvbHVtZSBpc1xuICAgKiBibHVlIGlmIHRoZSB0aWxlIGhhcyBhIGNvbnRlbnQgYm91bmRpbmcgdm9sdW1lOyBvdGhlcndpc2UgaXQgaXMgcmVkLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5kZWJ1Z1Nob3dDb250ZW50Qm91bmRpbmdWb2x1bWUgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5kZWJ1Z1Nob3dDb250ZW50Qm91bmRpbmdWb2x1bWUsXG4gICAgZmFsc2VcbiAgKTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBmb3IgZGVidWdnaW5nIG9ubHk7IGl0IGlzIG5vdCBvcHRpbWl6ZWQgZm9yIHByb2R1Y3Rpb24gdXNlLlxuICAgKiA8cD5cbiAgICogV2hlbiB0cnVlLCByZW5kZXJzIHRoZSB2aWV3ZXIgcmVxdWVzdCB2b2x1bWUgZm9yIGVhY2ggdGlsZS5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuZGVidWdTaG93Vmlld2VyUmVxdWVzdFZvbHVtZSA9IGRlZmF1bHRWYWx1ZShcbiAgICBvcHRpb25zLmRlYnVnU2hvd1ZpZXdlclJlcXVlc3RWb2x1bWUsXG4gICAgZmFsc2VcbiAgKTtcblxuICB0aGlzLl90aWxlRGVidWdMYWJlbHMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZGVidWdQaWNrZWRUaWxlTGFiZWxPbmx5ID0gZmFsc2U7XG4gIHRoaXMuZGVidWdQaWNrZWRUaWxlID0gdW5kZWZpbmVkO1xuICB0aGlzLmRlYnVnUGlja1Bvc2l0aW9uID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGZvciBkZWJ1Z2dpbmcgb25seTsgaXQgaXMgbm90IG9wdGltaXplZCBmb3IgcHJvZHVjdGlvbiB1c2UuXG4gICAqIDxwPlxuICAgKiBXaGVuIHRydWUsIGRyYXdzIGxhYmVscyB0byBpbmRpY2F0ZSB0aGUgZ2VvbWV0cmljIGVycm9yIG9mIGVhY2ggdGlsZS5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuZGVidWdTaG93R2VvbWV0cmljRXJyb3IgPSBkZWZhdWx0VmFsdWUoXG4gICAgb3B0aW9ucy5kZWJ1Z1Nob3dHZW9tZXRyaWNFcnJvcixcbiAgICBmYWxzZVxuICApO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGZvciBkZWJ1Z2dpbmcgb25seTsgaXQgaXMgbm90IG9wdGltaXplZCBmb3IgcHJvZHVjdGlvbiB1c2UuXG4gICAqIDxwPlxuICAgKiBXaGVuIHRydWUsIGRyYXdzIGxhYmVscyB0byBpbmRpY2F0ZSB0aGUgbnVtYmVyIG9mIGNvbW1hbmRzLCBwb2ludHMsIHRyaWFuZ2xlcyBhbmQgZmVhdHVyZXMgb2YgZWFjaCB0aWxlLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdGhpcy5kZWJ1Z1Nob3dSZW5kZXJpbmdTdGF0aXN0aWNzID0gZGVmYXVsdFZhbHVlKFxuICAgIG9wdGlvbnMuZGVidWdTaG93UmVuZGVyaW5nU3RhdGlzdGljcyxcbiAgICBmYWxzZVxuICApO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGZvciBkZWJ1Z2dpbmcgb25seTsgaXQgaXMgbm90IG9wdGltaXplZCBmb3IgcHJvZHVjdGlvbiB1c2UuXG4gICAqIDxwPlxuICAgKiBXaGVuIHRydWUsIGRyYXdzIGxhYmVscyB0byBpbmRpY2F0ZSB0aGUgZ2VvbWV0cnkgYW5kIHRleHR1cmUgbWVtb3J5IHVzYWdlIG9mIGVhY2ggdGlsZS5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuZGVidWdTaG93TWVtb3J5VXNhZ2UgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5kZWJ1Z1Nob3dNZW1vcnlVc2FnZSwgZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGZvciBkZWJ1Z2dpbmcgb25seTsgaXQgaXMgbm90IG9wdGltaXplZCBmb3IgcHJvZHVjdGlvbiB1c2UuXG4gICAqIDxwPlxuICAgKiBXaGVuIHRydWUsIGRyYXdzIGxhYmVscyB0byBpbmRpY2F0ZSB0aGUgdXJsIG9mIGVhY2ggdGlsZS5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRoaXMuZGVidWdTaG93VXJsID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuZGVidWdTaG93VXJsLCBmYWxzZSk7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGZvciBleGFtaW5pbmcgdmVjdG9yIGxpbmVzIGFzIHRoZXkgYXJlIGJlaW5nIHN0cmVhbWVkLlxuICAgKlxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICpcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgdGhpcy5leGFtaW5lVmVjdG9yTGluZXNGdW5jdGlvbiA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogSWYgdGhlIDNEVElMRVNfbWV0YWRhdGEgZXh0ZW5zaW9uIGlzIHVzZWQsIHRoaXMgc3RvcmVzXG4gICAqIGEge0BsaW5rIENlc2l1bTNEVGlsZXNldE1ldGFkYXRhfSBvYmplY3QgdG8gYWNjZXNzIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlc2V0TWV0YWRhdGF8dW5kZWZpbmVkfVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICovXG4gIHRoaXMubWV0YWRhdGEgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEEgY3VzdG9tIHNoYWRlciB0byBhcHBseSB0byB0aGUgdGlsZXNldC4gT25seSB1c2VkIGZvciBjb250ZW50cyB0aGF0IHVzZVxuICAgKiB7QGxpbmsgTW9kZWxFeHBlcmltZW50YWx9XG4gICAqXG4gICAqIEB0eXBlIHtDdXN0b21TaGFkZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEBleHBlcmltZW50YWwgVGhpcyBmZWF0dXJlIGlzIHVzaW5nIHBhcnQgb2YgdGhlIDNEIFRpbGVzIHNwZWMgdGhhdCBpcyBub3QgZmluYWwgYW5kIGlzIHN1YmplY3QgdG8gY2hhbmdlIHdpdGhvdXQgQ2VzaXVtJ3Mgc3RhbmRhcmQgZGVwcmVjYXRpb24gcG9saWN5LlxuICAgKi9cbiAgdGhpcy5jdXN0b21TaGFkZXIgPSBvcHRpb25zLmN1c3RvbVNoYWRlcjtcblxuICB0aGlzLl9zY2hlbWFMb2FkZXIgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgcmVzb3VyY2U7XG4gIHdoZW4ob3B0aW9ucy51cmwpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHVybCkge1xuICAgICAgdmFyIGJhc2VQYXRoO1xuICAgICAgcmVzb3VyY2UgPSBSZXNvdXJjZS5jcmVhdGVJZk5lZWRlZCh1cmwpO1xuICAgICAgdGhhdC5fcmVzb3VyY2UgPSByZXNvdXJjZTtcblxuICAgICAgLy8gaW9uIHJlc291cmNlcyBoYXZlIGEgY3JlZGl0cyBwcm9wZXJ0eSB3ZSBjYW4gdXNlIGZvciBhZGRpdGlvbmFsIGF0dHJpYnV0aW9uLlxuICAgICAgdGhhdC5fY3JlZGl0cyA9IHJlc291cmNlLmNyZWRpdHM7XG5cbiAgICAgIGlmIChyZXNvdXJjZS5leHRlbnNpb24gPT09IFwianNvblwiKSB7XG4gICAgICAgIGJhc2VQYXRoID0gcmVzb3VyY2UuZ2V0QmFzZVVyaSh0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2UuaXNEYXRhVXJpKSB7XG4gICAgICAgIGJhc2VQYXRoID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgdGhhdC5fdXJsID0gcmVzb3VyY2UudXJsO1xuICAgICAgdGhhdC5fYmFzZVBhdGggPSBiYXNlUGF0aDtcblxuICAgICAgcmV0dXJuIENlc2l1bTNEVGlsZXNldC5sb2FkSnNvbihyZXNvdXJjZSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAodGlsZXNldEpzb24pIHtcbiAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgY2FsbGVkIGJlZm9yZSBsb2FkVGlsZXNldCgpIHNvIHRpbGUgbWV0YWRhdGFcbiAgICAgIC8vIGNhbiBiZSBpbml0aWFsaXplZCBzeW5jaHJvbm91c2x5IGluIHRoZSBDZXNpdW0zRFRpbGUgY29uc3RydWN0b3JcbiAgICAgIHJldHVybiBwcm9jZXNzTWV0YWRhdGFFeHRlbnNpb24odGhhdCwgdGlsZXNldEpzb24pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHRpbGVzZXRKc29uKSB7XG4gICAgICB0aGF0Ll9yb290ID0gdGhhdC5sb2FkVGlsZXNldChyZXNvdXJjZSwgdGlsZXNldEpzb24pO1xuICAgICAgdmFyIGdsdGZVcEF4aXMgPSBkZWZpbmVkKHRpbGVzZXRKc29uLmFzc2V0LmdsdGZVcEF4aXMpXG4gICAgICAgID8gQXhpcy5mcm9tTmFtZSh0aWxlc2V0SnNvbi5hc3NldC5nbHRmVXBBeGlzKVxuICAgICAgICA6IEF4aXMuWTtcbiAgICAgIHZhciBhc3NldCA9IHRpbGVzZXRKc29uLmFzc2V0O1xuICAgICAgdGhhdC5fYXNzZXQgPSBhc3NldDtcbiAgICAgIHRoYXQuX3Byb3BlcnRpZXMgPSB0aWxlc2V0SnNvbi5wcm9wZXJ0aWVzO1xuICAgICAgdGhhdC5fZ2VvbWV0cmljRXJyb3IgPSB0aWxlc2V0SnNvbi5nZW9tZXRyaWNFcnJvcjtcbiAgICAgIHRoYXQuX2V4dGVuc2lvbnNVc2VkID0gdGlsZXNldEpzb24uZXh0ZW5zaW9uc1VzZWQ7XG4gICAgICB0aGF0Ll9leHRlbnNpb25zID0gdGlsZXNldEpzb24uZXh0ZW5zaW9ucztcbiAgICAgIHRoYXQuX2dsdGZVcEF4aXMgPSBnbHRmVXBBeGlzO1xuICAgICAgdGhhdC5fZXh0cmFzID0gdGlsZXNldEpzb24uZXh0cmFzO1xuXG4gICAgICB2YXIgZXh0cmFzID0gYXNzZXQuZXh0cmFzO1xuICAgICAgaWYgKFxuICAgICAgICBkZWZpbmVkKGV4dHJhcykgJiZcbiAgICAgICAgZGVmaW5lZChleHRyYXMuY2VzaXVtKSAmJlxuICAgICAgICBkZWZpbmVkKGV4dHJhcy5jZXNpdW0uY3JlZGl0cylcbiAgICAgICkge1xuICAgICAgICB2YXIgZXh0cmFDcmVkaXRzID0gZXh0cmFzLmNlc2l1bS5jcmVkaXRzO1xuICAgICAgICB2YXIgY3JlZGl0cyA9IHRoYXQuX2NyZWRpdHM7XG4gICAgICAgIGlmICghZGVmaW5lZChjcmVkaXRzKSkge1xuICAgICAgICAgIGNyZWRpdHMgPSBbXTtcbiAgICAgICAgICB0aGF0Ll9jcmVkaXRzID0gY3JlZGl0cztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHJhQ3JlZGl0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHZhciBjcmVkaXQgPSBleHRyYUNyZWRpdHNbaV07XG4gICAgICAgICAgY3JlZGl0cy5wdXNoKG5ldyBDcmVkaXQoY3JlZGl0Lmh0bWwsIGNyZWRpdC5zaG93T25TY3JlZW4pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTYXZlIHRoZSBvcmlnaW5hbCwgdW50cmFuc2Zvcm1lZCBib3VuZGluZyB2b2x1bWUgcG9zaXRpb24gc28gd2UgY2FuIGFwcGx5XG4gICAgICAvLyB0aGUgdGlsZSB0cmFuc2Zvcm0gYW5kIG1vZGVsIG1hdHJpeCBhdCBydW4gdGltZVxuICAgICAgdmFyIGJvdW5kaW5nVm9sdW1lID0gdGhhdC5fcm9vdC5jcmVhdGVCb3VuZGluZ1ZvbHVtZShcbiAgICAgICAgdGlsZXNldEpzb24ucm9vdC5ib3VuZGluZ1ZvbHVtZSxcbiAgICAgICAgTWF0cml4NC5JREVOVElUWVxuICAgICAgKTtcbiAgICAgIHZhciBjbGlwcGluZ1BsYW5lc09yaWdpbiA9IGJvdW5kaW5nVm9sdW1lLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcbiAgICAgIC8vIElmIHRoaXMgb3JpZ2luIGlzIGFib3ZlIHRoZSBzdXJmYWNlIG9mIHRoZSBlYXJ0aFxuICAgICAgLy8gd2Ugd2FudCB0byBhcHBseSBhbiBFTlUgb3JpZW50YXRpb24gYXMgb3VyIGJlc3QgZ3Vlc3Mgb2Ygb3JpZW50YXRpb24uXG4gICAgICAvLyBPdGhlcndpc2UsIHdlIGFzc3VtZSBpdCBnZXRzIGl0cyBwb3NpdGlvbi9vcmllbnRhdGlvbiBjb21wbGV0ZWx5IGZyb20gdGhlXG4gICAgICAvLyByb290IHRpbGUgdHJhbnNmb3JtIGFuZCB0aGUgdGlsZXNldCdzIG1vZGVsIG1hdHJpeFxuICAgICAgdmFyIG9yaWdpbkNhcnRvZ3JhcGhpYyA9IHRoYXQuX2VsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhcbiAgICAgICAgY2xpcHBpbmdQbGFuZXNPcmlnaW5cbiAgICAgICk7XG4gICAgICBpZiAoXG4gICAgICAgIGRlZmluZWQob3JpZ2luQ2FydG9ncmFwaGljKSAmJlxuICAgICAgICBvcmlnaW5DYXJ0b2dyYXBoaWMuaGVpZ2h0ID5cbiAgICAgICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl9kZWZhdWx0TWluVGVycmFpbkhlaWdodFxuICAgICAgKSB7XG4gICAgICAgIHRoYXQuX2luaXRpYWxDbGlwcGluZ1BsYW5lc09yaWdpbk1hdHJpeCA9IFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUoXG4gICAgICAgICAgY2xpcHBpbmdQbGFuZXNPcmlnaW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoYXQuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4ID0gTWF0cml4NC5jbG9uZShcbiAgICAgICAgdGhhdC5faW5pdGlhbENsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4XG4gICAgICApO1xuXG4gICAgICB0aGF0Ll9yZWFkeVByb21pc2UucmVzb2x2ZSh0aGF0KTtcbiAgICB9KVxuICAgIC5vdGhlcndpc2UoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB0aGF0Ll9yZWFkeVByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZSwge1xuICAvKipcbiAgICogTk9URTogVGhpcyBnZXR0ZXIgZXhpc3RzIHNvIHRoYXQgYFBpY2tpbmcuanNgIGNhbiBkaWZmZXJlbnRpYXRlIGJldHdlZW5cbiAgICogICAgICAgUHJpbWl0aXZlQ29sbGVjdGlvbiBhbmQgQ2VzaXVtM0RUaWxlc2V0IG9iamVjdHMgd2l0aG91dCBpbmZsYXRpbmdcbiAgICogICAgICAgdGhlIHNpemUgb2YgdGhlIG1vZHVsZSB2aWEgYGluc3RhbmNlb2YgQ2VzaXVtM0RUaWxlc2V0YFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNDZXNpdW0zRFRpbGVzZXQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRpbGVzZXQncyBhc3NldCBvYmplY3QgcHJvcGVydHksIHdoaWNoIGNvbnRhaW5zIG1ldGFkYXRhIGFib3V0IHRoZSB0aWxlc2V0LlxuICAgKiA8cD5cbiAgICogU2VlIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0Nlc2l1bUdTLzNkLXRpbGVzL3RyZWUvbWFpbi9zcGVjaWZpY2F0aW9uI3JlZmVyZW5jZS1hc3NldHxhc3NldCBzY2hlbWEgcmVmZXJlbmNlfVxuICAgKiBpbiB0aGUgM0QgVGlsZXMgc3BlYyBmb3IgdGhlIGZ1bGwgc2V0IG9mIHByb3BlcnRpZXMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBUaGUgdGlsZXNldCBpcyBub3QgbG9hZGVkLiAgVXNlIENlc2l1bTNEVGlsZXNldC5yZWFkeVByb21pc2Ugb3Igd2FpdCBmb3IgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5IHRvIGJlIHRydWUuXG4gICAqL1xuICBhc3NldDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmICghdGhpcy5yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJUaGUgdGlsZXNldCBpcyBub3QgbG9hZGVkLiAgVXNlIENlc2l1bTNEVGlsZXNldC5yZWFkeVByb21pc2Ugb3Igd2FpdCBmb3IgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5IHRvIGJlIHRydWUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fYXNzZXQ7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgdGlsZXNldCdzIGV4dGVuc2lvbnMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoZSB0aWxlc2V0IGlzIG5vdCBsb2FkZWQuICBVc2UgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5UHJvbWlzZSBvciB3YWl0IGZvciBDZXNpdW0zRFRpbGVzZXQucmVhZHkgdG8gYmUgdHJ1ZS5cbiAgICovXG4gIGV4dGVuc2lvbnM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoIXRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgIFwiVGhlIHRpbGVzZXQgaXMgbm90IGxvYWRlZC4gIFVzZSBDZXNpdW0zRFRpbGVzZXQucmVhZHlQcm9taXNlIG9yIHdhaXQgZm9yIENlc2l1bTNEVGlsZXNldC5yZWFkeSB0byBiZSB0cnVlLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX2V4dGVuc2lvbnM7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHtAbGluayBDbGlwcGluZ1BsYW5lQ29sbGVjdGlvbn0gdXNlZCB0byBzZWxlY3RpdmVseSBkaXNhYmxlIHJlbmRlcmluZyB0aGUgdGlsZXNldC5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0NsaXBwaW5nUGxhbmVDb2xsZWN0aW9ufVxuICAgKi9cbiAgY2xpcHBpbmdQbGFuZXM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ1BsYW5lcztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBDbGlwcGluZ1BsYW5lQ29sbGVjdGlvbi5zZXRPd25lcih2YWx1ZSwgdGhpcywgXCJfY2xpcHBpbmdQbGFuZXNcIik7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgdGlsZXNldCdzIHByb3BlcnRpZXMgZGljdGlvbmFyeSBvYmplY3QsIHdoaWNoIGNvbnRhaW5zIG1ldGFkYXRhIGFib3V0IHBlci1mZWF0dXJlIHByb3BlcnRpZXMuXG4gICAqIDxwPlxuICAgKiBTZWUgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvM2QtdGlsZXMvdHJlZS9tYWluL3NwZWNpZmljYXRpb24jcmVmZXJlbmNlLXByb3BlcnRpZXN8cHJvcGVydGllcyBzY2hlbWEgcmVmZXJlbmNlfVxuICAgKiBpbiB0aGUgM0QgVGlsZXMgc3BlYyBmb3IgdGhlIGZ1bGwgc2V0IG9mIHByb3BlcnRpZXMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBUaGUgdGlsZXNldCBpcyBub3QgbG9hZGVkLiAgVXNlIENlc2l1bTNEVGlsZXNldC5yZWFkeVByb21pc2Ugb3Igd2FpdCBmb3IgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5IHRvIGJlIHRydWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnNvbGUubG9nKCdNYXhpbXVtIGJ1aWxkaW5nIGhlaWdodDogJyArIHRpbGVzZXQucHJvcGVydGllcy5oZWlnaHQubWF4aW11bSk7XG4gICAqIGNvbnNvbGUubG9nKCdNaW5pbXVtIGJ1aWxkaW5nIGhlaWdodDogJyArIHRpbGVzZXQucHJvcGVydGllcy5oZWlnaHQubWluaW11bSk7XG4gICAqXG4gICAqIEBzZWUgQ2VzaXVtM0RUaWxlRmVhdHVyZSNnZXRQcm9wZXJ0eVxuICAgKiBAc2VlIENlc2l1bTNEVGlsZUZlYXR1cmUjc2V0UHJvcGVydHlcbiAgICovXG4gIHByb3BlcnRpZXM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoIXRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgIFwiVGhlIHRpbGVzZXQgaXMgbm90IGxvYWRlZC4gIFVzZSBDZXNpdW0zRFRpbGVzZXQucmVhZHlQcm9taXNlIG9yIHdhaXQgZm9yIENlc2l1bTNEVGlsZXNldC5yZWFkeSB0byBiZSB0cnVlLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiA8Y29kZT50cnVlPC9jb2RlPiwgdGhlIHRpbGVzZXQncyByb290IHRpbGUgaXMgbG9hZGVkIGFuZCB0aGUgdGlsZXNldCBpcyByZWFkeSB0byByZW5kZXIuXG4gICAqIFRoaXMgaXMgc2V0IHRvIDxjb2RlPnRydWU8L2NvZGU+IHJpZ2h0IGJlZm9yZSB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I3JlYWR5UHJvbWlzZX0gaXMgcmVzb2x2ZWQuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXQucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWR5OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGVmaW5lZCh0aGlzLl9yb290KTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aWxlc2V0J3Mgcm9vdCB0aWxlIGlzIGxvYWRlZCBhbmQgdGhlIHRpbGVzZXQgaXMgcmVhZHkgdG8gcmVuZGVyLlxuICAgKiA8cD5cbiAgICogVGhpcyBwcm9taXNlIGlzIHJlc29sdmVkIGF0IHRoZSBlbmQgb2YgdGhlIGZyYW1lIGJlZm9yZSB0aGUgZmlyc3QgZnJhbWUgdGhlIHRpbGVzZXQgaXMgcmVuZGVyZWQgaW4uXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge1Byb21pc2UuPENlc2l1bTNEVGlsZXNldD59XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aWxlc2V0LnJlYWR5UHJvbWlzZS50aGVuKGZ1bmN0aW9uKHRpbGVzZXQpIHtcbiAgICogICAgIC8vIHRpbGUucHJvcGVydGllcyBpcyBub3QgZGVmaW5lZCB1bnRpbCByZWFkeVByb21pc2UgcmVzb2x2ZXMuXG4gICAqICAgICB2YXIgcHJvcGVydGllcyA9IHRpbGVzZXQucHJvcGVydGllcztcbiAgICogICAgIGlmIChDZXNpdW0uZGVmaW5lZChwcm9wZXJ0aWVzKSkge1xuICAgKiAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJvcGVydGllcykge1xuICAgKiAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9wZXJ0aWVzW25hbWVdKTtcbiAgICogICAgICAgICB9XG4gICAqICAgICB9XG4gICAqIH0pO1xuICAgKi9cbiAgcmVhZHlQcm9taXNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZHlQcm9taXNlLnByb21pc2U7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiA8Y29kZT50cnVlPC9jb2RlPiwgYWxsIHRpbGVzIHRoYXQgbWVldCB0aGUgc2NyZWVuIHNwYWNlIGVycm9yIHRoaXMgZnJhbWUgYXJlIGxvYWRlZC4gVGhlIHRpbGVzZXQgaXNcbiAgICogY29tcGxldGVseSBsb2FkZWQgZm9yIHRoaXMgdmlldy5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKlxuICAgKiBAc2VlIENlc2l1bTNEVGlsZXNldCNhbGxUaWxlc0xvYWRlZFxuICAgKi9cbiAgdGlsZXNMb2FkZWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90aWxlc0xvYWRlZDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgcmVzb3VyY2UgdXNlZCB0byBmZXRjaCB0aGUgdGlsZXNldCBKU09OIGZpbGVcbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge1Jlc291cmNlfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHJlc291cmNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzb3VyY2U7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGJhc2UgcGF0aCB0aGF0IG5vbi1hYnNvbHV0ZSBwYXRocyBpbiB0aWxlc2V0IEpTT04gZmlsZSBhcmUgcmVsYXRpdmUgdG8uXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXQucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEByZWFkb25seVxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgYmFzZVBhdGg6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgICAgXCJDZXNpdW0zRFRpbGVzZXQuYmFzZVBhdGhcIixcbiAgICAgICAgXCJDZXNpdW0zRFRpbGVzZXQuYmFzZVBhdGggaGFzIGJlZW4gZGVwcmVjYXRlZC4gQWxsIHRpbGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgdXJsIG9mIHRoZSB0aWxlc2V0IEpTT04gZmlsZSB0aGF0IGNvbnRhaW5zIHRoZW0uIFVzZSB0aGUgdXJsIHByb3BlcnR5IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gdGhpcy5fYmFzZVBhdGg7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHN0eWxlLCBkZWZpbmVkIHVzaW5nIHRoZVxuICAgKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0Nlc2l1bUdTLzNkLXRpbGVzL3RyZWUvbWFpbi9zcGVjaWZpY2F0aW9uL1N0eWxpbmd8M0QgVGlsZXMgU3R5bGluZyBsYW5ndWFnZX0sXG4gICAqIGFwcGxpZWQgdG8gZWFjaCBmZWF0dXJlIGluIHRoZSB0aWxlc2V0LlxuICAgKiA8cD5cbiAgICogQXNzaWduIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gdG8gcmVtb3ZlIHRoZSBzdHlsZSwgd2hpY2ggd2lsbCByZXN0b3JlIHRoZSB2aXN1YWxcbiAgICogYXBwZWFyYW5jZSBvZiB0aGUgdGlsZXNldCB0byBpdHMgZGVmYXVsdCB3aGVuIG5vIHN0eWxlIHdhcyBhcHBsaWVkLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBUaGUgc3R5bGUgaXMgYXBwbGllZCB0byBhIHRpbGUgYmVmb3JlIHRoZSB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I3RpbGVWaXNpYmxlfVxuICAgKiBldmVudCBpcyByYWlzZWQsIHNvIGNvZGUgaW4gPGNvZGU+dGlsZVZpc2libGU8L2NvZGU+IGNhbiBtYW51YWxseSBzZXQgYSBmZWF0dXJlJ3NcbiAgICogcHJvcGVydGllcyAoZS5nLiBjb2xvciBhbmQgc2hvdykgYWZ0ZXIgdGhlIHN0eWxlIGlzIGFwcGxpZWQuIFdoZW5cbiAgICogYSBuZXcgc3R5bGUgaXMgYXNzaWduZWQgYW55IG1hbnVhbGx5IHNldCBwcm9wZXJ0aWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogVXNlIGFuIGFsd2F5cyBcInRydWVcIiBjb25kaXRpb24gdG8gc3BlY2lmeSB0aGUgQ29sb3IgZm9yIGFsbCBvYmplY3RzIHRoYXQgYXJlIG5vdFxuICAgKiBvdmVycmlkZGVuIGJ5IHByZS1leGlzdGluZyBjb25kaXRpb25zLiBPdGhlcndpc2UsIHRoZSBkZWZhdWx0IGNvbG9yIENlc2l1bS5Db2xvci5XaGl0ZVxuICAgKiB3aWxsIGJlIHVzZWQuIFNpbWlsYXJseSwgdXNlIGFuIGFsd2F5cyBcInRydWVcIiBjb25kaXRpb24gdG8gc3BlY2lmeSB0aGUgc2hvdyBwcm9wZXJ0eVxuICAgKiBmb3IgYWxsIG9iamVjdHMgdGhhdCBhcmUgbm90IG92ZXJyaWRkZW4gYnkgcHJlLWV4aXN0aW5nIGNvbmRpdGlvbnMuIE90aGVyd2lzZSwgdGhlXG4gICAqIGRlZmF1bHQgc2hvdyB2YWx1ZSB0cnVlIHdpbGwgYmUgdXNlZC5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlU3R5bGV8dW5kZWZpbmVkfVxuICAgKlxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGlsZXNldC5zdHlsZSA9IG5ldyBDZXNpdW0uQ2VzaXVtM0RUaWxlU3R5bGUoe1xuICAgKiAgICBjb2xvciA6IHtcbiAgICogICAgICAgIGNvbmRpdGlvbnMgOiBbXG4gICAqICAgICAgICAgICAgWycke0hlaWdodH0gPj0gMTAwJywgJ2NvbG9yKFwicHVycGxlXCIsIDAuNSknXSxcbiAgICogICAgICAgICAgICBbJyR7SGVpZ2h0fSA+PSA1MCcsICdjb2xvcihcInJlZFwiKSddLFxuICAgKiAgICAgICAgICAgIFsndHJ1ZScsICdjb2xvcihcImJsdWVcIiknXVxuICAgKiAgICAgICAgXVxuICAgKiAgICB9LFxuICAgKiAgICBzaG93IDogJyR7SGVpZ2h0fSA+IDAnLFxuICAgKiAgICBtZXRhIDoge1xuICAgKiAgICAgICAgZGVzY3JpcHRpb24gOiAnXCJCdWlsZGluZyBpZCAke2lkfSBoYXMgaGVpZ2h0ICR7SGVpZ2h0fS5cIidcbiAgICogICAgfVxuICAgKiB9KTtcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0Nlc2l1bUdTLzNkLXRpbGVzL3RyZWUvbWFpbi9zcGVjaWZpY2F0aW9uL1N0eWxpbmd8M0QgVGlsZXMgU3R5bGluZyBsYW5ndWFnZX1cbiAgICovXG4gIHN0eWxlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3R5bGVFbmdpbmUuc3R5bGU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdGhpcy5fc3R5bGVFbmdpbmUuc3R5bGUgPSB2YWx1ZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBzY3JlZW4gc3BhY2UgZXJyb3IgdXNlZCB0byBkcml2ZSBsZXZlbCBvZiBkZXRhaWwgcmVmaW5lbWVudC4gIFRoaXMgdmFsdWUgaGVscHMgZGV0ZXJtaW5lIHdoZW4gYSB0aWxlXG4gICAqIHJlZmluZXMgdG8gaXRzIGRlc2NlbmRhbnRzLCBhbmQgdGhlcmVmb3JlIHBsYXlzIGEgbWFqb3Igcm9sZSBpbiBiYWxhbmNpbmcgcGVyZm9ybWFuY2Ugd2l0aCB2aXN1YWwgcXVhbGl0eS5cbiAgICogPHA+XG4gICAqIEEgdGlsZSdzIHNjcmVlbiBzcGFjZSBlcnJvciBpcyByb3VnaGx5IGVxdWl2YWxlbnQgdG8gdGhlIG51bWJlciBvZiBwaXhlbHMgd2lkZSB0aGF0IHdvdWxkIGJlIGRyYXduIGlmIGEgc3BoZXJlIHdpdGggYVxuICAgKiByYWRpdXMgZXF1YWwgdG8gdGhlIHRpbGUncyA8Yj5nZW9tZXRyaWMgZXJyb3I8L2I+IHdlcmUgcmVuZGVyZWQgYXQgdGhlIHRpbGUncyBwb3NpdGlvbi4gSWYgdGhpcyB2YWx1ZSBleGNlZWRzXG4gICAqIDxjb2RlPm1heGltdW1TY3JlZW5TcGFjZUVycm9yPC9jb2RlPiB0aGUgdGlsZSByZWZpbmVzIHRvIGl0cyBkZXNjZW5kYW50cy5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogRGVwZW5kaW5nIG9uIHRoZSB0aWxlc2V0LCA8Y29kZT5tYXhpbXVtU2NyZWVuU3BhY2VFcnJvcjwvY29kZT4gbWF5IG5lZWQgdG8gYmUgdHdlYWtlZCB0byBhY2hpZXZlIHRoZSByaWdodCBiYWxhbmNlLlxuICAgKiBIaWdoZXIgdmFsdWVzIHByb3ZpZGUgYmV0dGVyIHBlcmZvcm1hbmNlIGJ1dCBsb3dlciB2aXN1YWwgcXVhbGl0eS5cbiAgICogPC9wPlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxNlxuICAgKlxuICAgKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gPGNvZGU+bWF4aW11bVNjcmVlblNwYWNlRXJyb3I8L2NvZGU+IG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8uXG4gICAqL1xuICBtYXhpbXVtU2NyZWVuU3BhY2VFcnJvcjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21heGltdW1TY3JlZW5TcGFjZUVycm9yO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBDaGVjay50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoXG4gICAgICAgIFwibWF4aW11bVNjcmVlblNwYWNlRXJyb3JcIixcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgdGhpcy5fbWF4aW11bVNjcmVlblNwYWNlRXJyb3IgPSB2YWx1ZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbW91bnQgb2YgR1BVIG1lbW9yeSAoaW4gTUIpIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2FjaGUgdGlsZXMuIFRoaXMgdmFsdWUgaXMgZXN0aW1hdGVkIGZyb21cbiAgICogZ2VvbWV0cnksIHRleHR1cmVzLCBhbmQgYmF0Y2ggdGFibGUgdGV4dHVyZXMgb2YgbG9hZGVkIHRpbGVzLiBGb3IgcG9pbnQgY2xvdWRzLCB0aGlzIHZhbHVlIGFsc29cbiAgICogaW5jbHVkZXMgcGVyLXBvaW50IG1ldGFkYXRhLlxuICAgKiA8cD5cbiAgICogVGlsZXMgbm90IGluIHZpZXcgYXJlIHVubG9hZGVkIHRvIGVuZm9yY2UgdGhpcy5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogSWYgZGVjcmVhc2luZyB0aGlzIHZhbHVlIHJlc3VsdHMgaW4gdW5sb2FkaW5nIHRpbGVzLCB0aGUgdGlsZXMgYXJlIHVubG9hZGVkIHRoZSBuZXh0IGZyYW1lLlxuICAgKiA8L3A+XG4gICAqIDxwPlxuICAgKiBJZiB0aWxlcyBzaXplZCBtb3JlIHRoYW4gPGNvZGU+bWF4aW11bU1lbW9yeVVzYWdlPC9jb2RlPiBhcmUgbmVlZGVkXG4gICAqIHRvIG1lZXQgdGhlIGRlc2lyZWQgc2NyZWVuIHNwYWNlIGVycm9yLCBkZXRlcm1pbmVkIGJ5IHtAbGluayBDZXNpdW0zRFRpbGVzZXQjbWF4aW11bVNjcmVlblNwYWNlRXJyb3J9LFxuICAgKiBmb3IgdGhlIGN1cnJlbnQgdmlldywgdGhlbiB0aGUgbWVtb3J5IHVzYWdlIG9mIHRoZSB0aWxlcyBsb2FkZWQgd2lsbCBleGNlZWRcbiAgICogPGNvZGU+bWF4aW11bU1lbW9yeVVzYWdlPC9jb2RlPi4gIEZvciBleGFtcGxlLCBpZiB0aGUgbWF4aW11bSBpcyAyNTYgTUIsIGJ1dFxuICAgKiAzMDAgTUIgb2YgdGlsZXMgYXJlIG5lZWRlZCB0byBtZWV0IHRoZSBzY3JlZW4gc3BhY2UgZXJyb3IsIHRoZW4gMzAwIE1CIG9mIHRpbGVzIG1heSBiZSBsb2FkZWQuICBXaGVuXG4gICAqIHRoZXNlIHRpbGVzIGdvIG91dCBvZiB2aWV3LCB0aGV5IHdpbGwgYmUgdW5sb2FkZWQuXG4gICAqIDwvcD5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgNTEyXG4gICAqXG4gICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSA8Y29kZT5tYXhpbXVtTWVtb3J5VXNhZ2U8L2NvZGU+IG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8uXG4gICAqIEBzZWUgQ2VzaXVtM0RUaWxlc2V0I3RvdGFsTWVtb3J5VXNhZ2VJbkJ5dGVzXG4gICAqL1xuICBtYXhpbXVtTWVtb3J5VXNhZ2U6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXhpbXVtTWVtb3J5VXNhZ2U7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscyhcInZhbHVlXCIsIHZhbHVlLCAwKTtcbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICB0aGlzLl9tYXhpbXVtTWVtb3J5VXNhZ2UgPSB2YWx1ZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgcm9vdCB0aWxlLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Q2VzaXVtM0RUaWxlfVxuICAgKiBAcmVhZG9ubHlcbiAgICpcbiAgICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoZSB0aWxlc2V0IGlzIG5vdCBsb2FkZWQuICBVc2UgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5UHJvbWlzZSBvciB3YWl0IGZvciBDZXNpdW0zRFRpbGVzZXQucmVhZHkgdG8gYmUgdHJ1ZS5cbiAgICovXG4gIHJvb3Q6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gICAgICBpZiAoIXRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yKFxuICAgICAgICAgIFwiVGhlIHRpbGVzZXQgaXMgbm90IGxvYWRlZC4gIFVzZSBDZXNpdW0zRFRpbGVzZXQucmVhZHlQcm9taXNlIG9yIHdhaXQgZm9yIENlc2l1bTNEVGlsZXNldC5yZWFkeSB0byBiZSB0cnVlLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHRpbGVzZXQncyBib3VuZGluZyBzcGhlcmUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXQucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtCb3VuZGluZ1NwaGVyZX1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBUaGUgdGlsZXNldCBpcyBub3QgbG9hZGVkLiAgVXNlIENlc2l1bTNEVGlsZXNldC5yZWFkeVByb21pc2Ugb3Igd2FpdCBmb3IgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5IHRvIGJlIHRydWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciB0aWxlc2V0ID0gdmlld2VyLnNjZW5lLnByaW1pdGl2ZXMuYWRkKG5ldyBDZXNpdW0uQ2VzaXVtM0RUaWxlc2V0KHtcbiAgICogICAgIHVybCA6ICdodHRwOi8vbG9jYWxob3N0OjgwMDIvdGlsZXNldHMvU2VhdHRsZS90aWxlc2V0Lmpzb24nXG4gICAqIH0pKTtcbiAgICpcbiAgICogdGlsZXNldC5yZWFkeVByb21pc2UudGhlbihmdW5jdGlvbih0aWxlc2V0KSB7XG4gICAqICAgICAvLyBTZXQgdGhlIGNhbWVyYSB0byB2aWV3IHRoZSBuZXdseSBhZGRlZCB0aWxlc2V0XG4gICAqICAgICB2aWV3ZXIuY2FtZXJhLnZpZXdCb3VuZGluZ1NwaGVyZSh0aWxlc2V0LmJvdW5kaW5nU3BoZXJlLCBuZXcgQ2VzaXVtLkhlYWRpbmdQaXRjaFJhbmdlKDAsIC0wLjUsIDApKTtcbiAgICogfSk7XG4gICAqL1xuICBib3VuZGluZ1NwaGVyZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmICghdGhpcy5yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJUaGUgdGlsZXNldCBpcyBub3QgbG9hZGVkLiAgVXNlIENlc2l1bTNEVGlsZXNldC5yZWFkeVByb21pc2Ugb3Igd2FpdCBmb3IgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5IHRvIGJlIHRydWUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICB0aGlzLl9yb290LnVwZGF0ZVRyYW5zZm9ybSh0aGlzLl9tb2RlbE1hdHJpeCk7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdC5ib3VuZGluZ1NwaGVyZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBBIDR4NCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdCB0cmFuc2Zvcm1zIHRoZSBlbnRpcmUgdGlsZXNldC5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge01hdHJpeDR9XG4gICAqIEBkZWZhdWx0IE1hdHJpeDQuSURFTlRJVFlcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gQWRqdXN0IGEgdGlsZXNldCdzIGhlaWdodCBmcm9tIHRoZSBnbG9iZSdzIHN1cmZhY2UuXG4gICAqIHZhciBoZWlnaHRPZmZzZXQgPSAyMC4wO1xuICAgKiB2YXIgYm91bmRpbmdTcGhlcmUgPSB0aWxlc2V0LmJvdW5kaW5nU3BoZXJlO1xuICAgKiB2YXIgY2FydG9ncmFwaGljID0gQ2VzaXVtLkNhcnRvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuKGJvdW5kaW5nU3BoZXJlLmNlbnRlcik7XG4gICAqIHZhciBzdXJmYWNlID0gQ2VzaXVtLkNhcnRlc2lhbjMuZnJvbVJhZGlhbnMoY2FydG9ncmFwaGljLmxvbmdpdHVkZSwgY2FydG9ncmFwaGljLmxhdGl0dWRlLCAwLjApO1xuICAgKiB2YXIgb2Zmc2V0ID0gQ2VzaXVtLkNhcnRlc2lhbjMuZnJvbVJhZGlhbnMoY2FydG9ncmFwaGljLmxvbmdpdHVkZSwgY2FydG9ncmFwaGljLmxhdGl0dWRlLCBoZWlnaHRPZmZzZXQpO1xuICAgKiB2YXIgdHJhbnNsYXRpb24gPSBDZXNpdW0uQ2FydGVzaWFuMy5zdWJ0cmFjdChvZmZzZXQsIHN1cmZhY2UsIG5ldyBDZXNpdW0uQ2FydGVzaWFuMygpKTtcbiAgICogdGlsZXNldC5tb2RlbE1hdHJpeCA9IENlc2l1bS5NYXRyaXg0LmZyb21UcmFuc2xhdGlvbih0cmFuc2xhdGlvbik7XG4gICAqL1xuICBtb2RlbE1hdHJpeDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsTWF0cml4O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX21vZGVsTWF0cml4ID0gTWF0cml4NC5jbG9uZSh2YWx1ZSwgdGhpcy5fbW9kZWxNYXRyaXgpO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRpbWUsIGluIG1pbGxpc2Vjb25kcywgc2luY2UgdGhlIHRpbGVzZXQgd2FzIGxvYWRlZCBhbmQgZmlyc3QgdXBkYXRlZC5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB0aW1lU2luY2VMb2FkOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdGltZVNpbmNlTG9hZDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgYW1vdW50IG9mIEdQVSBtZW1vcnkgaW4gYnl0ZXMgdXNlZCBieSB0aGUgdGlsZXNldC4gVGhpcyB2YWx1ZSBpcyBlc3RpbWF0ZWQgZnJvbVxuICAgKiBnZW9tZXRyeSwgdGV4dHVyZSwgYW5kIGJhdGNoIHRhYmxlIHRleHR1cmVzIG9mIGxvYWRlZCB0aWxlcy4gRm9yIHBvaW50IGNsb3VkcywgdGhpcyB2YWx1ZSBhbHNvXG4gICAqIGluY2x1ZGVzIHBlci1wb2ludCBtZXRhZGF0YS5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqXG4gICAqIEBzZWUgQ2VzaXVtM0RUaWxlc2V0I21heGltdW1NZW1vcnlVc2FnZVxuICAgKi9cbiAgdG90YWxNZW1vcnlVc2FnZUluQnl0ZXM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0aXN0aWNzID0gdGhpcy5fc3RhdGlzdGljcztcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHN0YXRpc3RpY3MudGV4dHVyZXNCeXRlTGVuZ3RoICtcbiAgICAgICAgc3RhdGlzdGljcy5nZW9tZXRyeUJ5dGVMZW5ndGggK1xuICAgICAgICBzdGF0aXN0aWNzLmJhdGNoVGFibGVCeXRlTGVuZ3RoXG4gICAgICApO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbGlwcGluZ1BsYW5lc09yaWdpbk1hdHJpeDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFkZWZpbmVkKHRoaXMuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4KSkge1xuICAgICAgICByZXR1cm4gTWF0cml4NC5JREVOVElUWTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4RGlydHkpIHtcbiAgICAgICAgTWF0cml4NC5tdWx0aXBseShcbiAgICAgICAgICB0aGlzLnJvb3QuY29tcHV0ZWRUcmFuc2Zvcm0sXG4gICAgICAgICAgdGhpcy5faW5pdGlhbENsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4LFxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4RGlydHkgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nUGxhbmVzT3JpZ2luTWF0cml4O1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdHlsZUVuZ2luZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlRW5naW5lO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aXN0aWNzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdGlzdGljcztcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGVycmFpbiwgM0QgVGlsZXMgb3IgYm90aCB3aWxsIGJlIGNsYXNzaWZpZWQgYnkgdGhpcyB0aWxlc2V0LlxuICAgKiA8cD5cbiAgICogVGhpcyBvcHRpb24gaXMgb25seSBhcHBsaWVkIHRvIHRpbGVzZXRzIGNvbnRhaW5pbmcgYmF0Y2hlZCAzRCBtb2RlbHMsIGdlb21ldHJ5IGRhdGEsIG9yIHZlY3RvciBkYXRhLiBFdmVuIHdoZW4gdW5kZWZpbmVkLCB2ZWN0b3IgZGF0YSBhbmQgZ2VvbWV0cnkgZGF0YVxuICAgKiBtdXN0IHJlbmRlciBhcyBjbGFzc2lmaWNhdGlvbnMgYW5kIHdpbGwgZGVmYXVsdCB0byByZW5kZXJpbmcgb24gYm90aCB0ZXJyYWluIGFuZCBvdGhlciAzRCBUaWxlcyB0aWxlc2V0cy5cbiAgICogPC9wPlxuICAgKiA8cD5cbiAgICogV2hlbiBlbmFibGVkIGZvciBiYXRjaGVkIDNEIG1vZGVsIHRpbGVzZXRzLCB0aGVyZSBhcmUgYSBmZXcgcmVxdWlyZW1lbnRzL2xpbWl0YXRpb25zIG9uIHRoZSBnbFRGOlxuICAgKiA8dWw+XG4gICAqICAgICA8bGk+UE9TSVRJT04gYW5kIF9CQVRDSElEIHNlbWFudGljcyBhcmUgcmVxdWlyZWQuPC9saT5cbiAgICogICAgIDxsaT5BbGwgaW5kaWNlcyB3aXRoIHRoZSBzYW1lIGJhdGNoIGlkIG11c3Qgb2NjdXB5IGNvbnRpZ3VvdXMgc2VjdGlvbnMgb2YgdGhlIGluZGV4IGJ1ZmZlci48L2xpPlxuICAgKiAgICAgPGxpPkFsbCBzaGFkZXJzIGFuZCB0ZWNobmlxdWVzIGFyZSBpZ25vcmVkLiBUaGUgZ2VuZXJhdGVkIHNoYWRlciBzaW1wbHkgbXVsdGlwbGllcyB0aGUgcG9zaXRpb24gYnkgdGhlIG1vZGVsLXZpZXctcHJvamVjdGlvbiBtYXRyaXguPC9saT5cbiAgICogICAgIDxsaT5UaGUgb25seSBzdXBwb3J0ZWQgZXh0ZW5zaW9ucyBhcmUgQ0VTSVVNX1JUQyBhbmQgV0VCM0RfcXVhbnRpemVkX2F0dHJpYnV0ZXMuPC9saT5cbiAgICogICAgIDxsaT5Pbmx5IG9uZSBub2RlIGlzIHN1cHBvcnRlZC48L2xpPlxuICAgKiAgICAgPGxpPk9ubHkgb25lIG1lc2ggcGVyIG5vZGUgaXMgc3VwcG9ydGVkLjwvbGk+XG4gICAqICAgICA8bGk+T25seSBvbmUgcHJpbWl0aXZlIHBlciBtZXNoIGlzIHN1cHBvcnRlZC48L2xpPlxuICAgKiA8L3VsPlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXQucHJvdG90eXBlXG4gICAqXG4gICAqIEB0eXBlIHtDbGFzc2lmaWNhdGlvblR5cGV9XG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKlxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBjbGFzc2lmaWNhdGlvblR5cGU6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGFzc2lmaWNhdGlvblR5cGU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBhbiBlbGxpcHNvaWQgZGVzY3JpYmluZyB0aGUgc2hhcGUgb2YgdGhlIGdsb2JlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7RWxsaXBzb2lkfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGVsbGlwc29pZDoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBPcHRpbWl6YXRpb24gb3B0aW9uLiBVc2VkIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3J9IGlzIHRydWUgdG8gY29udHJvbCB0aGUgY29uZSBzaXplIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCB0aWxlcyBhcmUgZGVmZXJyZWQuXG4gICAqIFRpbGVzIHRoYXQgYXJlIGluc2lkZSB0aGlzIGNvbmUgYXJlIGxvYWRlZCBpbW1lZGlhdGVseS4gVGlsZXMgb3V0c2lkZSB0aGUgY29uZSBhcmUgcG90ZW50aWFsbHkgZGVmZXJyZWQgYmFzZWQgb24gaG93IGZhciBvdXRzaWRlIHRoZSBjb25lIHRoZXkgYXJlIGFuZCB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2ZvdmVhdGVkSW50ZXJwb2xhdGlvbkNhbGxiYWNrfSBhbmQge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZE1pbmltdW1TY3JlZW5TcGFjZUVycm9yUmVsYXhhdGlvbn0uXG4gICAqIFNldHRpbmcgdGhpcyB0byAwLjAgbWVhbnMgdGhlIGNvbmUgd2lsbCBiZSB0aGUgbGluZSBmb3JtZWQgYnkgdGhlIGNhbWVyYSBwb3NpdGlvbiBhbmQgaXRzIHZpZXcgZGlyZWN0aW9uLiBTZXR0aW5nIHRoaXMgdG8gMS4wIG1lYW5zIHRoZSBjb25lIGVuY29tcGFzc2VzIHRoZSBlbnRpcmUgZmllbGQgb2YgdmlldyBvZiB0aGUgY2FtZXJhLCBlc3NlbnRpYWxseSBkaXNhYmxpbmcgdGhlIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMC4zXG4gICAqL1xuICBmb3ZlYXRlZENvbmVTaXplOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm92ZWF0ZWRDb25lU2l6ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKFwiZm92ZWF0ZWRDb25lU2l6ZVwiLCB2YWx1ZSwgMC4wKTtcbiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscyhcImZvdmVhdGVkQ29uZVNpemVcIiwgdmFsdWUsIDEuMCk7XG4gICAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcblxuICAgICAgdGhpcy5fZm92ZWF0ZWRDb25lU2l6ZSA9IHZhbHVlO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIE9wdGltaXphdGlvbiBvcHRpb24uIFVzZWQgd2hlbiB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I2ZvdmVhdGVkU2NyZWVuU3BhY2VFcnJvcn0gaXMgdHJ1ZSB0byBjb250cm9sIHRoZSBzdGFydGluZyBzY3JlZW4gc3BhY2UgZXJyb3IgcmVsYXhhdGlvbiBmb3IgdGlsZXMgb3V0c2lkZSB0aGUgZm92ZWF0ZWQgY29uZS5cbiAgICogVGhlIHNjcmVlbiBzcGFjZSBlcnJvciB3aWxsIGJlIHJhaXNlZCBzdGFydGluZyB3aXRoIHRoaXMgdmFsdWUgdXAgdG8ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNtYXhpbXVtU2NyZWVuU3BhY2VFcnJvcn0gYmFzZWQgb24gdGhlIHByb3ZpZGVkIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjZm92ZWF0ZWRJbnRlcnBvbGF0aW9uQ2FsbGJhY2t9LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjBcbiAgICovXG4gIGZvdmVhdGVkTWluaW11bVNjcmVlblNwYWNlRXJyb3JSZWxheGF0aW9uOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm92ZWF0ZWRNaW5pbXVtU2NyZWVuU3BhY2VFcnJvclJlbGF4YXRpb247XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscyhcbiAgICAgICAgXCJmb3ZlYXRlZE1pbmltdW1TY3JlZW5TcGFjZUVycm9yUmVsYXhhdGlvblwiLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgMC4wXG4gICAgICApO1xuICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKFxuICAgICAgICBcImZvdmVhdGVkTWluaW11bVNjcmVlblNwYWNlRXJyb3JSZWxheGF0aW9uXCIsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0aGlzLm1heGltdW1TY3JlZW5TcGFjZUVycm9yXG4gICAgICApO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICAgIHRoaXMuX2ZvdmVhdGVkTWluaW11bVNjcmVlblNwYWNlRXJyb3JSZWxheGF0aW9uID0gdmFsdWU7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgPGNvZGU+ZXh0cmFzPC9jb2RlPiBwcm9wZXJ0eSBhdCB0aGUgdG9wLWxldmVsIG9mIHRoZSB0aWxlc2V0IEpTT04sIHdoaWNoIGNvbnRhaW5zIGFwcGxpY2F0aW9uIHNwZWNpZmljIG1ldGFkYXRhLlxuICAgKiBSZXR1cm5zIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gaWYgPGNvZGU+ZXh0cmFzPC9jb2RlPiBkb2VzIG5vdCBleGlzdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldC5wcm90b3R5cGVcbiAgICpcbiAgICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoZSB0aWxlc2V0IGlzIG5vdCBsb2FkZWQuICBVc2UgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5UHJvbWlzZSBvciB3YWl0IGZvciBDZXNpdW0zRFRpbGVzZXQucmVhZHkgdG8gYmUgdHJ1ZS5cbiAgICpcbiAgICogQHR5cGUgeyp9XG4gICAqIEByZWFkb25seVxuICAgKlxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvM2QtdGlsZXMvdHJlZS9tYWluL3NwZWNpZmljYXRpb24jc3BlY2lmeWluZy1leHRlbnNpb25zLWFuZC1hcHBsaWNhdGlvbi1zcGVjaWZpYy1leHRyYXN8RXh0cmFzIGluIHRoZSAzRCBUaWxlcyBzcGVjaWZpY2F0aW9uLn1cbiAgICovXG4gIGV4dHJhczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcbiAgICAgIGlmICghdGhpcy5yZWFkeSkge1xuICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoXG4gICAgICAgICAgXCJUaGUgdGlsZXNldCBpcyBub3QgbG9hZGVkLiAgVXNlIENlc2l1bTNEVGlsZXNldC5yZWFkeVByb21pc2Ugb3Igd2FpdCBmb3IgQ2VzaXVtM0RUaWxlc2V0LnJlYWR5IHRvIGJlIHRydWUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fZXh0cmFzO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIENlc2l1bSBhZGRzIGxpZ2h0aW5nIGZyb20gdGhlIGVhcnRoLCBza3ksIGF0bW9zcGhlcmUsIGFuZCBzdGFyIHNreWJveC4gVGhpcyBjYXJ0ZXNpYW4gaXMgdXNlZCB0byBzY2FsZSB0aGUgZmluYWxcbiAgICogZGlmZnVzZSBhbmQgc3BlY3VsYXIgbGlnaHRpbmcgY29udHJpYnV0aW9uIGZyb20gdGhvc2Ugc291cmNlcyB0byB0aGUgZmluYWwgY29sb3IuIEEgdmFsdWUgb2YgMC4wIHdpbGwgZGlzYWJsZSB0aG9zZSBsaWdodCBzb3VyY2VzLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7Q2FydGVzaWFuMn1cbiAgICogQGRlZmF1bHQgQ2FydGVzaWFuMigxLjAsIDEuMClcbiAgICovXG4gIGltYWdlQmFzZWRMaWdodGluZ0ZhY3Rvcjoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlQmFzZWRMaWdodGluZ0ZhY3RvcjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdChcImltYWdlQmFzZWRMaWdodGluZ0ZhY3RvclwiLCB2YWx1ZSk7XG4gICAgICBDaGVjay50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoXG4gICAgICAgIFwiaW1hZ2VCYXNlZExpZ2h0aW5nRmFjdG9yLnhcIixcbiAgICAgICAgdmFsdWUueCxcbiAgICAgICAgMC4wXG4gICAgICApO1xuICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKFxuICAgICAgICBcImltYWdlQmFzZWRMaWdodGluZ0ZhY3Rvci54XCIsXG4gICAgICAgIHZhbHVlLngsXG4gICAgICAgIDEuMFxuICAgICAgKTtcbiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscyhcbiAgICAgICAgXCJpbWFnZUJhc2VkTGlnaHRpbmdGYWN0b3IueVwiLFxuICAgICAgICB2YWx1ZS55LFxuICAgICAgICAwLjBcbiAgICAgICk7XG4gICAgICBDaGVjay50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoXG4gICAgICAgIFwiaW1hZ2VCYXNlZExpZ2h0aW5nRmFjdG9yLnlcIixcbiAgICAgICAgdmFsdWUueSxcbiAgICAgICAgMS4wXG4gICAgICApO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgICBDYXJ0ZXNpYW4yLmNsb25lKHZhbHVlLCB0aGlzLl9pbWFnZUJhc2VkTGlnaHRpbmdGYWN0b3IpO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IG9ubHkgdGhlIHRpbGVzZXQncyB2ZWN0b3IgdGlsZXMgc2hvdWxkIGJlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZVxuICAgKlxuICAgKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB2ZWN0b3JDbGFzc2lmaWNhdGlvbk9ubHk6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92ZWN0b3JDbGFzc2lmaWNhdGlvbk9ubHk7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogV2hldGhlciB2ZWN0b3IgdGlsZXMgc2hvdWxkIGtlZXAgZGVjb2RlZCBwb3NpdGlvbnMgaW4gbWVtb3J5LlxuICAgKiBUaGlzIGlzIHVzZWQgd2l0aCB7QGxpbmsgQ2VzaXVtM0RUaWxlRmVhdHVyZS5nZXRQb2x5bGluZVBvc2l0aW9uc30uXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXQucHJvdG90eXBlXG4gICAqXG4gICAqIEBleHBlcmltZW50YWwgVGhpcyBmZWF0dXJlIGlzIHVzaW5nIHBhcnQgb2YgdGhlIDNEIFRpbGVzIHNwZWMgdGhhdCBpcyBub3QgZmluYWwgYW5kIGlzIHN1YmplY3QgdG8gY2hhbmdlIHdpdGhvdXQgQ2VzaXVtJ3Mgc3RhbmRhcmQgZGVwcmVjYXRpb24gcG9saWN5LlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHZlY3RvcktlZXBEZWNvZGVkUG9zaXRpb25zOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmVjdG9yS2VlcERlY29kZWRQb3NpdGlvbnM7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgaG9vayB0byBvdmVycmlkZSB0aGUgbWV0aG9kIHVzZWQgdG8gcmVxdWVzdCB0aGUgdGlsZXNldCBqc29uXG4gKiB1c2VmdWwgd2hlbiBmZXRjaGluZyB0aWxlc2V0cyBmcm9tIHJlbW90ZSBzZXJ2ZXJzXG4gKiBAcGFyYW0ge1Jlc291cmNlfFN0cmluZ30gdGlsZXNldFVybCBUaGUgdXJsIG9mIHRoZSBqc29uIGZpbGUgdG8gYmUgZmV0Y2hlZFxuICogQHJldHVybnMge1Byb21pc2UuPE9iamVjdD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGZldGNoZWQganNvbiBkYXRhXG4gKi9cbkNlc2l1bTNEVGlsZXNldC5sb2FkSnNvbiA9IGZ1bmN0aW9uICh0aWxlc2V0VXJsKSB7XG4gIHZhciByZXNvdXJjZSA9IFJlc291cmNlLmNyZWF0ZUlmTmVlZGVkKHRpbGVzZXRVcmwpO1xuICByZXR1cm4gcmVzb3VyY2UuZmV0Y2hKc29uKCk7XG59O1xuXG4vKipcbiAqIE1hcmtzIHRoZSB0aWxlc2V0J3Mge0BsaW5rIENlc2l1bTNEVGlsZXNldCNzdHlsZX0gYXMgZGlydHksIHdoaWNoIGZvcmNlcyBhbGxcbiAqIGZlYXR1cmVzIHRvIHJlLWV2YWx1YXRlIHRoZSBzdHlsZSBpbiB0aGUgbmV4dCBmcmFtZSBlYWNoIGlzIHZpc2libGUuXG4gKi9cbkNlc2l1bTNEVGlsZXNldC5wcm90b3R5cGUubWFrZVN0eWxlRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3N0eWxlRW5naW5lLm1ha2VEaXJ0eSgpO1xufTtcblxuLyoqXG4gKiBMb2FkcyB0aGUgbWFpbiB0aWxlc2V0IEpTT04gZmlsZSBvciBhIHRpbGVzZXQgSlNPTiBmaWxlIHJlZmVyZW5jZWQgZnJvbSBhIHRpbGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZS5sb2FkVGlsZXNldCA9IGZ1bmN0aW9uIChcbiAgcmVzb3VyY2UsXG4gIHRpbGVzZXRKc29uLFxuICBwYXJlbnRUaWxlXG4pIHtcbiAgdmFyIGFzc2V0ID0gdGlsZXNldEpzb24uYXNzZXQ7XG4gIGlmICghZGVmaW5lZChhc3NldCkpIHtcbiAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFwiVGlsZXNldCBtdXN0IGhhdmUgYW4gYXNzZXQgcHJvcGVydHkuXCIpO1xuICB9XG4gIGlmIChhc3NldC52ZXJzaW9uICE9PSBcIjAuMFwiICYmIGFzc2V0LnZlcnNpb24gIT09IFwiMS4wXCIpIHtcbiAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFwiVGhlIHRpbGVzZXQgbXVzdCBiZSAzRCBUaWxlcyB2ZXJzaW9uIDAuMCBvciAxLjAuXCIpO1xuICB9XG5cbiAgaWYgKGRlZmluZWQodGlsZXNldEpzb24uZXh0ZW5zaW9uc1JlcXVpcmVkKSkge1xuICAgIENlc2l1bTNEVGlsZXNldC5jaGVja1N1cHBvcnRlZEV4dGVuc2lvbnModGlsZXNldEpzb24uZXh0ZW5zaW9uc1JlcXVpcmVkKTtcbiAgfVxuXG4gIHZhciBzdGF0aXN0aWNzID0gdGhpcy5fc3RhdGlzdGljcztcblxuICB2YXIgdGlsZXNldFZlcnNpb24gPSBhc3NldC50aWxlc2V0VmVyc2lvbjtcbiAgaWYgKGRlZmluZWQodGlsZXNldFZlcnNpb24pKSB7XG4gICAgLy8gQXBwZW5kIHRoZSB0aWxlc2V0IHZlcnNpb24gdG8gdGhlIHJlc291cmNlXG4gICAgdGhpcy5fYmFzZVBhdGggKz0gXCI/dj1cIiArIHRpbGVzZXRWZXJzaW9uO1xuICAgIHJlc291cmNlID0gcmVzb3VyY2UuY2xvbmUoKTtcbiAgICByZXNvdXJjZS5zZXRRdWVyeVBhcmFtZXRlcnMoeyB2OiB0aWxlc2V0VmVyc2lvbiB9KTtcbiAgfVxuXG4gIC8vIEEgdGlsZXNldCBKU09OIGZpbGUgcmVmZXJlbmNlZCBmcm9tIGEgdGlsZSBtYXkgZXhpc3QgaW4gYSBkaWZmZXJlbnQgZGlyZWN0b3J5IHRoYW4gdGhlIHJvb3QgdGlsZXNldC5cbiAgLy8gR2V0IHRoZSBiYXNlUGF0aCByZWxhdGl2ZSB0byB0aGUgZXh0ZXJuYWwgdGlsZXNldC5cbiAgdmFyIHJvb3RUaWxlID0gbWFrZVRpbGUodGhpcywgcmVzb3VyY2UsIHRpbGVzZXRKc29uLnJvb3QsIHBhcmVudFRpbGUpO1xuXG4gIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50VGlsZSwgYWRkIHRoZSByb290IG9mIHRoZSBjdXJyZW50bHkgbG9hZGluZyB0aWxlc2V0XG4gIC8vIHRvIHBhcmVudFRpbGUncyBjaGlsZHJlbiwgYW5kIHVwZGF0ZSBpdHMgX2RlcHRoLlxuICBpZiAoZGVmaW5lZChwYXJlbnRUaWxlKSkge1xuICAgIHBhcmVudFRpbGUuY2hpbGRyZW4ucHVzaChyb290VGlsZSk7XG4gICAgcm9vdFRpbGUuX2RlcHRoID0gcGFyZW50VGlsZS5fZGVwdGggKyAxO1xuICB9XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHN0YWNrLnB1c2gocm9vdFRpbGUpO1xuXG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHRpbGUgPSBzdGFjay5wb3AoKTtcbiAgICArK3N0YXRpc3RpY3MubnVtYmVyT2ZUaWxlc1RvdGFsO1xuICAgIHRoaXMuX2FsbFRpbGVzQWRkaXRpdmUgPVxuICAgICAgdGhpcy5fYWxsVGlsZXNBZGRpdGl2ZSAmJiB0aWxlLnJlZmluZSA9PT0gQ2VzaXVtM0RUaWxlUmVmaW5lLkFERDtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aWxlLl9oZWFkZXIuY2hpbGRyZW47XG4gICAgaWYgKGRlZmluZWQoY2hpbGRyZW4pKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY2hpbGRIZWFkZXIgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgdmFyIGNoaWxkVGlsZSA9IG1ha2VUaWxlKHRoaXMsIHJlc291cmNlLCBjaGlsZEhlYWRlciwgdGlsZSk7XG4gICAgICAgIHRpbGUuY2hpbGRyZW4ucHVzaChjaGlsZFRpbGUpO1xuICAgICAgICBjaGlsZFRpbGUuX2RlcHRoID0gdGlsZS5fZGVwdGggKyAxO1xuICAgICAgICBzdGFjay5wdXNoKGNoaWxkVGlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2N1bGxXaXRoQ2hpbGRyZW5Cb3VuZHMpIHtcbiAgICAgIENlc2l1bTNEVGlsZU9wdGltaXphdGlvbnMuY2hlY2tDaGlsZHJlbldpdGhpblBhcmVudCh0aWxlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdFRpbGU7XG59O1xuXG4vKipcbiAqIE1ha2UgYSB7QGxpbmsgQ2VzaXVtM0RUaWxlfSBmb3IgYSBzcGVjaWZpYyB0aWxlLiBJZiB0aGUgdGlsZSBoYXMgdGhlXG4gKiAzRFRJTEVTX2ltcGxpY2l0X3RpbGluZyBleHRlbnNpb24sIGl0IGNyZWF0ZXMgYSBwbGFjZWhvbGRlciB0aWxlIGluc3RlYWRcbiAqIGZvciBsYXp5IGV2YWx1YXRpb24gb2YgdGhlIGltcGxpY2l0IHRpbGVzZXQuXG4gKlxuICogQHBhcmFtIHtDZXNpdW0zRFRpbGVzZXR9IHRpbGVzZXQgVGhlIHRpbGVzZXRcbiAqIEBwYXJhbSB7UmVzb3VyY2V9IGJhc2VSZXNvdXJjZSBUaGUgYmFzZSByZXNvdXJjZSBmb3IgdGhlIHRpbGVzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aWxlSGVhZGVyIFRoZSBKU09OIGhlYWRlciBmb3IgdGhlIHRpbGVcbiAqIEBwYXJhbSB7Q2VzaXVtM0RUaWxlfSBbcGFyZW50VGlsZV0gVGhlIHBhcmVudCB0aWxlIG9mIHRoZSBuZXcgdGlsZVxuICogQHJldHVybnMge0Nlc2l1bTNEVGlsZX0gVGhlIG5ld2x5IGNyZWF0ZWQgdGlsZVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1ha2VUaWxlKHRpbGVzZXQsIGJhc2VSZXNvdXJjZSwgdGlsZUhlYWRlciwgcGFyZW50VGlsZSkge1xuICBpZiAoaGFzRXh0ZW5zaW9uKHRpbGVIZWFkZXIsIFwiM0RUSUxFU19pbXBsaWNpdF90aWxpbmdcIikpIHtcbiAgICB2YXIgbWV0YWRhdGFTY2hlbWEgPSBkZWZpbmVkKHRpbGVzZXQubWV0YWRhdGEpXG4gICAgICA/IHRpbGVzZXQubWV0YWRhdGEuc2NoZW1hXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBpbXBsaWNpdFRpbGVzZXQgPSBuZXcgSW1wbGljaXRUaWxlc2V0KFxuICAgICAgYmFzZVJlc291cmNlLFxuICAgICAgdGlsZUhlYWRlcixcbiAgICAgIG1ldGFkYXRhU2NoZW1hXG4gICAgKTtcbiAgICB2YXIgcm9vdENvb3JkaW5hdGVzID0gbmV3IEltcGxpY2l0VGlsZUNvb3JkaW5hdGVzKHtcbiAgICAgIHN1YmRpdmlzaW9uU2NoZW1lOiBpbXBsaWNpdFRpbGVzZXQuc3ViZGl2aXNpb25TY2hlbWUsXG4gICAgICBzdWJ0cmVlTGV2ZWxzOiBpbXBsaWNpdFRpbGVzZXQuc3VidHJlZUxldmVscyxcbiAgICAgIGxldmVsOiAwLFxuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICAvLyBUaGUgY29uc3RydWN0b3Igd2lsbCBvbmx5IHVzZSB0aGlzIGZvciBvY3RyZWVzLlxuICAgICAgejogMCxcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBhIHBsYWNlaG9sZGVyIENlc2l1bTNEVGlsZSB0aGF0IGhhcyBhbiBJbXBsaWNpdFRpbGVzZXRcbiAgICAvLyBvYmplY3QgYW5kIHdob3NlIGNvbnRlbnQgd2lsbCByZXNvbHZlIHRvIGFuIEltcGxpY2l0M0RUaWxlQ29udGVudFxuICAgIHZhciBjb250ZW50VXJpID0gaW1wbGljaXRUaWxlc2V0LnN1YnRyZWVVcmlUZW1wbGF0ZS5nZXREZXJpdmVkUmVzb3VyY2Uoe1xuICAgICAgdGVtcGxhdGVWYWx1ZXM6IHJvb3RDb29yZGluYXRlcy5nZXRUZW1wbGF0ZVZhbHVlcygpLFxuICAgIH0pLnVybDtcbiAgICB2YXIgY29udGVudEpzb24gPSB7XG4gICAgICBjb250ZW50OiB7XG4gICAgICAgIHVyaTogY29udGVudFVyaSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBkZWVwQ29weSA9IHRydWU7XG4gICAgdmFyIHRpbGVKc29uID0gY29tYmluZShjb250ZW50SnNvbiwgdGlsZUhlYWRlciwgZGVlcENvcHkpO1xuXG4gICAgLy8gVGhlIHBsYWNlaG9sZGVyIHRpbGUgZG9lcyBub3QgaGF2ZSBhbnkgZXh0ZW5zaW9ucy4gSWYgdGhlcmUgYXJlIGFueVxuICAgIC8vIGV4dGVuc2lvbnMgYmV5b25kIDNEVElMRVNfaW1wbGljaXRfdGlsaW5nLCBJbXBsaWNpdDNEVGlsZUNvbnRlbnQgd2lsbFxuICAgIC8vIGNvcHkgdGhlbSB0byB0aGUgdHJhbnNjb2RlZCB0aWxlcy5cbiAgICBkZWxldGUgdGlsZUpzb24uZXh0ZW5zaW9ucztcblxuICAgIHZhciB0aWxlID0gbmV3IENlc2l1bTNEVGlsZSh0aWxlc2V0LCBiYXNlUmVzb3VyY2UsIHRpbGVKc29uLCBwYXJlbnRUaWxlKTtcbiAgICB0aWxlLmltcGxpY2l0VGlsZXNldCA9IGltcGxpY2l0VGlsZXNldDtcbiAgICB0aWxlLmltcGxpY2l0Q29vcmRpbmF0ZXMgPSByb290Q29vcmRpbmF0ZXM7XG4gICAgcmV0dXJuIHRpbGU7XG4gIH1cblxuICByZXR1cm4gbmV3IENlc2l1bTNEVGlsZSh0aWxlc2V0LCBiYXNlUmVzb3VyY2UsIHRpbGVIZWFkZXIsIHBhcmVudFRpbGUpO1xufVxuXG4vKipcbiAqIElmIHRoZSA8Y29kZT4zRFRJTEVTX21ldGFkYXRhPC9jb2RlPiBleHRlbnNpb24gaXMgcHJlc2VudCwgaW5pdGlhbGl6ZSB0aGVcbiAqIHtAbGluayBDZXNpdW0zRFRpbGVzZXRNZXRhZGF0YX0gaW5zdGFuY2UuIFRoaXMgaXMgYXN5bmNocm9ub3VzIHNpbmNlXG4gKiBtZXRhZGF0YSBzY2hlbWFzIG1heSBiZSBleHRlcm5hbC5cbiAqXG4gKiBAcGFyYW0ge0Nlc2l1bTNEVGlsZXNldH0gdGlsZXNldCBUaGUgdGlsZXNldFxuICogQHBhcmFtIHtPYmplY3R9IHRpbGVzZXRKc29uIFRoZSB0aWxlc2V0IEpTT05cbiAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGlsZXNldEpzb24gZm9yIGNoYWluaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc01ldGFkYXRhRXh0ZW5zaW9uKHRpbGVzZXQsIHRpbGVzZXRKc29uKSB7XG4gIGlmICghaGFzRXh0ZW5zaW9uKHRpbGVzZXRKc29uLCBcIjNEVElMRVNfbWV0YWRhdGFcIikpIHtcbiAgICByZXR1cm4gd2hlbi5yZXNvbHZlKHRpbGVzZXRKc29uKTtcbiAgfVxuXG4gIHZhciBleHRlbnNpb24gPSB0aWxlc2V0SnNvbi5leHRlbnNpb25zW1wiM0RUSUxFU19tZXRhZGF0YVwiXTtcblxuICB2YXIgc2NoZW1hTG9hZGVyO1xuICBpZiAoZGVmaW5lZChleHRlbnNpb24uc2NoZW1hVXJpKSkge1xuICAgIHZhciByZXNvdXJjZSA9IHRpbGVzZXQuX3Jlc291cmNlLmdldERlcml2ZWRSZXNvdXJjZSh7XG4gICAgICB1cmw6IGV4dGVuc2lvbi5zY2hlbWFVcmksXG4gICAgfSk7XG4gICAgc2NoZW1hTG9hZGVyID0gUmVzb3VyY2VDYWNoZS5sb2FkU2NoZW1hKHtcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlbWFMb2FkZXIgPSBSZXNvdXJjZUNhY2hlLmxvYWRTY2hlbWEoe1xuICAgICAgc2NoZW1hOiBleHRlbnNpb24uc2NoZW1hLFxuICAgIH0pO1xuICB9XG4gIHRpbGVzZXQuX3NjaGVtYUxvYWRlciA9IHNjaGVtYUxvYWRlcjtcblxuICByZXR1cm4gc2NoZW1hTG9hZGVyLnByb21pc2UudGhlbihmdW5jdGlvbiAoc2NoZW1hTG9hZGVyKSB7XG4gICAgdGlsZXNldC5tZXRhZGF0YSA9IG5ldyBDZXNpdW0zRFRpbGVzZXRNZXRhZGF0YSh7XG4gICAgICBzY2hlbWE6IHNjaGVtYUxvYWRlci5zY2hlbWEsXG4gICAgICBleHRlbnNpb246IGV4dGVuc2lvbixcbiAgICB9KTtcblxuICAgIHJldHVybiB0aWxlc2V0SnNvbjtcbiAgfSk7XG59XG5cbnZhciBzY3JhdGNoUG9zaXRpb25Ob3JtYWwgPSBuZXcgQ2FydGVzaWFuMygpO1xudmFyIHNjcmF0Y2hDYXJ0b2dyYXBoaWMgPSBuZXcgQ2FydG9ncmFwaGljKCk7XG52YXIgc2NyYXRjaE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG52YXIgc2NyYXRjaENlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG52YXIgc2NyYXRjaFBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjMoKTtcbnZhciBzY3JhdGNoRGlyZWN0aW9uID0gbmV3IENhcnRlc2lhbjMoKTtcblxuZnVuY3Rpb24gdXBkYXRlRHluYW1pY1NjcmVlblNwYWNlRXJyb3IodGlsZXNldCwgZnJhbWVTdGF0ZSkge1xuICB2YXIgdXA7XG4gIHZhciBkaXJlY3Rpb247XG4gIHZhciBoZWlnaHQ7XG4gIHZhciBtaW5pbXVtSGVpZ2h0O1xuICB2YXIgbWF4aW11bUhlaWdodDtcblxuICB2YXIgY2FtZXJhID0gZnJhbWVTdGF0ZS5jYW1lcmE7XG4gIHZhciByb290ID0gdGlsZXNldC5fcm9vdDtcbiAgdmFyIHRpbGVCb3VuZGluZ1ZvbHVtZSA9IHJvb3QuY29udGVudEJvdW5kaW5nVm9sdW1lO1xuXG4gIGlmICh0aWxlQm91bmRpbmdWb2x1bWUgaW5zdGFuY2VvZiBUaWxlQm91bmRpbmdSZWdpb24pIHtcbiAgICB1cCA9IENhcnRlc2lhbjMubm9ybWFsaXplKGNhbWVyYS5wb3NpdGlvbldDLCBzY3JhdGNoUG9zaXRpb25Ob3JtYWwpO1xuICAgIGRpcmVjdGlvbiA9IGNhbWVyYS5kaXJlY3Rpb25XQztcbiAgICBoZWlnaHQgPSBjYW1lcmEucG9zaXRpb25DYXJ0b2dyYXBoaWMuaGVpZ2h0O1xuICAgIG1pbmltdW1IZWlnaHQgPSB0aWxlQm91bmRpbmdWb2x1bWUubWluaW11bUhlaWdodDtcbiAgICBtYXhpbXVtSGVpZ2h0ID0gdGlsZUJvdW5kaW5nVm9sdW1lLm1heGltdW1IZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gVHJhbnNmb3JtIGNhbWVyYSBwb3NpdGlvbiBhbmQgZGlyZWN0aW9uIGludG8gdGhlIGxvY2FsIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoZSB0aWxlc2V0XG4gICAgdmFyIHRyYW5zZm9ybUxvY2FsID0gTWF0cml4NC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oXG4gICAgICByb290LmNvbXB1dGVkVHJhbnNmb3JtLFxuICAgICAgc2NyYXRjaE1hdHJpeFxuICAgICk7XG4gICAgdmFyIGVsbGlwc29pZCA9IGZyYW1lU3RhdGUubWFwUHJvamVjdGlvbi5lbGxpcHNvaWQ7XG4gICAgdmFyIGJvdW5kaW5nVm9sdW1lID0gdGlsZUJvdW5kaW5nVm9sdW1lLmJvdW5kaW5nVm9sdW1lO1xuICAgIHZhciBjZW50ZXJMb2NhbCA9IE1hdHJpeDQubXVsdGlwbHlCeVBvaW50KFxuICAgICAgdHJhbnNmb3JtTG9jYWwsXG4gICAgICBib3VuZGluZ1ZvbHVtZS5jZW50ZXIsXG4gICAgICBzY3JhdGNoQ2VudGVyXG4gICAgKTtcbiAgICBpZiAoQ2FydGVzaWFuMy5tYWduaXR1ZGUoY2VudGVyTG9jYWwpID4gZWxsaXBzb2lkLm1pbmltdW1SYWRpdXMpIHtcbiAgICAgIC8vIFRoZSB0aWxlc2V0IGlzIGRlZmluZWQgaW4gV0dTODQuIEFwcHJveGltYXRlIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGhlaWdodC5cbiAgICAgIHZhciBjZW50ZXJDYXJ0b2dyYXBoaWMgPSBDYXJ0b2dyYXBoaWMuZnJvbUNhcnRlc2lhbihcbiAgICAgICAgY2VudGVyTG9jYWwsXG4gICAgICAgIGVsbGlwc29pZCxcbiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY1xuICAgICAgKTtcbiAgICAgIHVwID0gQ2FydGVzaWFuMy5ub3JtYWxpemUoY2FtZXJhLnBvc2l0aW9uV0MsIHNjcmF0Y2hQb3NpdGlvbk5vcm1hbCk7XG4gICAgICBkaXJlY3Rpb24gPSBjYW1lcmEuZGlyZWN0aW9uV0M7XG4gICAgICBoZWlnaHQgPSBjYW1lcmEucG9zaXRpb25DYXJ0b2dyYXBoaWMuaGVpZ2h0O1xuICAgICAgbWluaW11bUhlaWdodCA9IDAuMDtcbiAgICAgIG1heGltdW1IZWlnaHQgPSBjZW50ZXJDYXJ0b2dyYXBoaWMuaGVpZ2h0ICogMi4wO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgdGlsZXNldCBpcyBkZWZpbmVkIGluIGxvY2FsIGNvb3JkaW5hdGVzICh6LXVwKVxuICAgICAgdmFyIHBvc2l0aW9uTG9jYWwgPSBNYXRyaXg0Lm11bHRpcGx5QnlQb2ludChcbiAgICAgICAgdHJhbnNmb3JtTG9jYWwsXG4gICAgICAgIGNhbWVyYS5wb3NpdGlvbldDLFxuICAgICAgICBzY3JhdGNoUG9zaXRpb25cbiAgICAgICk7XG4gICAgICB1cCA9IENhcnRlc2lhbjMuVU5JVF9aO1xuICAgICAgZGlyZWN0aW9uID0gTWF0cml4NC5tdWx0aXBseUJ5UG9pbnRBc1ZlY3RvcihcbiAgICAgICAgdHJhbnNmb3JtTG9jYWwsXG4gICAgICAgIGNhbWVyYS5kaXJlY3Rpb25XQyxcbiAgICAgICAgc2NyYXRjaERpcmVjdGlvblxuICAgICAgKTtcbiAgICAgIGRpcmVjdGlvbiA9IENhcnRlc2lhbjMubm9ybWFsaXplKGRpcmVjdGlvbiwgZGlyZWN0aW9uKTtcbiAgICAgIGhlaWdodCA9IHBvc2l0aW9uTG9jYWwuejtcbiAgICAgIGlmICh0aWxlQm91bmRpbmdWb2x1bWUgaW5zdGFuY2VvZiBUaWxlT3JpZW50ZWRCb3VuZGluZ0JveCkge1xuICAgICAgICAvLyBBc3N1bWluZyB6LXVwLCB0aGUgbGFzdCBjb21wb25lbnQgc3RvcmVzIHRoZSBoYWxmLWhlaWdodCBvZiB0aGUgYm94XG4gICAgICAgIHZhciBib3hIZWlnaHQgPSByb290Ll9oZWFkZXIuYm91bmRpbmdWb2x1bWUuYm94WzExXTtcbiAgICAgICAgbWluaW11bUhlaWdodCA9IGNlbnRlckxvY2FsLnogLSBib3hIZWlnaHQ7XG4gICAgICAgIG1heGltdW1IZWlnaHQgPSBjZW50ZXJMb2NhbC56ICsgYm94SGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmICh0aWxlQm91bmRpbmdWb2x1bWUgaW5zdGFuY2VvZiBUaWxlQm91bmRpbmdTcGhlcmUpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGJvdW5kaW5nVm9sdW1lLnJhZGl1cztcbiAgICAgICAgbWluaW11bUhlaWdodCA9IGNlbnRlckxvY2FsLnogLSByYWRpdXM7XG4gICAgICAgIG1heGltdW1IZWlnaHQgPSBjZW50ZXJMb2NhbC56ICsgcmFkaXVzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSByYW5nZSB3aGVyZSB0aGUgZGVuc2l0eSBzdGFydHMgdG8gbGVzc2VuLiBTdGFydCBhdCB0aGUgcXVhcnRlciBoZWlnaHQgb2YgdGhlIHRpbGVzZXQuXG4gIHZhciBoZWlnaHRGYWxsb2ZmID0gdGlsZXNldC5keW5hbWljU2NyZWVuU3BhY2VFcnJvckhlaWdodEZhbGxvZmY7XG4gIHZhciBoZWlnaHRDbG9zZSA9XG4gICAgbWluaW11bUhlaWdodCArIChtYXhpbXVtSGVpZ2h0IC0gbWluaW11bUhlaWdodCkgKiBoZWlnaHRGYWxsb2ZmO1xuICB2YXIgaGVpZ2h0RmFyID0gbWF4aW11bUhlaWdodDtcblxuICB2YXIgdCA9IENlc2l1bU1hdGguY2xhbXAoXG4gICAgKGhlaWdodCAtIGhlaWdodENsb3NlKSAvIChoZWlnaHRGYXIgLSBoZWlnaHRDbG9zZSksXG4gICAgMC4wLFxuICAgIDEuMFxuICApO1xuXG4gIC8vIEluY3JlYXNlIGRlbnNpdHkgYXMgdGhlIGNhbWVyYSB0aWx0cyB0b3dhcmRzIHRoZSBob3Jpem9uXG4gIHZhciBkb3QgPSBNYXRoLmFicyhDYXJ0ZXNpYW4zLmRvdChkaXJlY3Rpb24sIHVwKSk7XG4gIHZhciBob3Jpem9uRmFjdG9yID0gMS4wIC0gZG90O1xuXG4gIC8vIFdlYWtlbiB0aGUgaG9yaXpvbiBmYWN0b3IgYXMgdGhlIGNhbWVyYSBoZWlnaHQgaW5jcmVhc2VzLCBpbXBseWluZyB0aGUgY2FtZXJhIGlzIGZ1cnRoZXIgYXdheSBmcm9tIHRoZSB0aWxlc2V0LlxuICAvLyBUaGUgZ29hbCBpcyB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciB0aGUgXCJzdHJlZXQgdmlld1wiLCBub3Qgd2hlbiB2aWV3aW5nIHRoZSB0aWxlc2V0IGZyb20gYSBkaXN0YW5jZS5cbiAgaG9yaXpvbkZhY3RvciA9IGhvcml6b25GYWN0b3IgKiAoMS4wIC0gdCk7XG5cbiAgdmFyIGRlbnNpdHkgPSB0aWxlc2V0LmR5bmFtaWNTY3JlZW5TcGFjZUVycm9yRGVuc2l0eTtcbiAgZGVuc2l0eSAqPSBob3Jpem9uRmFjdG9yO1xuXG4gIHRpbGVzZXQuX2R5bmFtaWNTY3JlZW5TcGFjZUVycm9yQ29tcHV0ZWREZW5zaXR5ID0gZGVuc2l0eTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIHJlcXVlc3RDb250ZW50KHRpbGVzZXQsIHRpbGUpIHtcbiAgaWYgKHRpbGUuaGFzRW1wdHlDb250ZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0YXRpc3RpY3MgPSB0aWxlc2V0Ll9zdGF0aXN0aWNzO1xuICB2YXIgZXhwaXJlZCA9IHRpbGUuY29udGVudEV4cGlyZWQ7XG4gIHZhciBhdHRlbXB0ZWRSZXF1ZXN0cyA9IHRpbGUucmVxdWVzdENvbnRlbnQoKTtcblxuICBpZiAoYXR0ZW1wdGVkUmVxdWVzdHMgPiAwKSB7XG4gICAgc3RhdGlzdGljcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzICs9IGF0dGVtcHRlZFJlcXVlc3RzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChleHBpcmVkKSB7XG4gICAgaWYgKHRpbGUuaGFzVGlsZXNldENvbnRlbnQgfHwgdGlsZS5oYXNJbXBsaWNpdENvbnRlbnQpIHtcbiAgICAgIGRlc3Ryb3lTdWJ0cmVlKHRpbGVzZXQsIHRpbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aXN0aWNzLmRlY3JlbWVudExvYWRDb3VudHModGlsZS5jb250ZW50KTtcbiAgICAgIC0tc3RhdGlzdGljcy5udW1iZXJPZlRpbGVzV2l0aENvbnRlbnRSZWFkeTtcbiAgICB9XG4gIH1cblxuICB0aWxlc2V0Ll9yZXF1ZXN0ZWRUaWxlc0luRmxpZ2h0LnB1c2godGlsZSk7XG5cbiAgdGlsZS5jb250ZW50UmVhZHlUb1Byb2Nlc3NQcm9taXNlLnRoZW4oYWRkVG9Qcm9jZXNzaW5nUXVldWUodGlsZXNldCwgdGlsZSkpO1xuICB0aWxlLmNvbnRlbnRSZWFkeVByb21pc2VcbiAgICAudGhlbihoYW5kbGVUaWxlU3VjY2Vzcyh0aWxlc2V0LCB0aWxlKSlcbiAgICAub3RoZXJ3aXNlKGhhbmRsZVRpbGVGYWlsdXJlKHRpbGVzZXQsIHRpbGUpKTtcbn1cblxuZnVuY3Rpb24gc29ydFJlcXVlc3RCeVByaW9yaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEuX3ByaW9yaXR5IC0gYi5fcHJpb3JpdHk7XG59XG5cbi8qKlxuICogUGVyZm9ybSBhbnkgcGFzcyBpbnZhcmlhbnQgdGFza3MgaGVyZS4gQ2FsbGVkIGFmdGVyIHRoZSByZW5kZXIgcGFzcy5cbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZXNldC5wcm90b3R5cGUucG9zdFBhc3Nlc1VwZGF0ZSA9IGZ1bmN0aW9uIChmcmFtZVN0YXRlKSB7XG4gIGlmICghdGhpcy5yZWFkeSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNhbmNlbE91dE9mVmlld1JlcXVlc3RzKHRoaXMsIGZyYW1lU3RhdGUpO1xuICByYWlzZUxvYWRQcm9ncmVzc0V2ZW50KHRoaXMsIGZyYW1lU3RhdGUpO1xuICB0aGlzLl9jYWNoZS51bmxvYWRUaWxlcyh0aGlzLCB1bmxvYWRUaWxlKTtcbiAgdGhpcy5fc3R5bGVFbmdpbmUucmVzZXREaXJ0eSgpO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtIGFueSBwYXNzIGludmFyaWFudCB0YXNrcyBoZXJlLiBDYWxsZWQgYmVmb3JlIGFueSBwYXNzZXMgYXJlIGV4ZWN1dGVkLlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZS5wcmVQYXNzZXNVcGRhdGUgPSBmdW5jdGlvbiAoZnJhbWVTdGF0ZSkge1xuICBpZiAoIXRoaXMucmVhZHkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzVGlsZXModGhpcywgZnJhbWVTdGF0ZSk7XG5cbiAgLy8gVXBkYXRlIGNsaXBwaW5nIHBsYW5lc1xuICB2YXIgY2xpcHBpbmdQbGFuZXMgPSB0aGlzLl9jbGlwcGluZ1BsYW5lcztcbiAgdGhpcy5fY2xpcHBpbmdQbGFuZXNPcmlnaW5NYXRyaXhEaXJ0eSA9IHRydWU7XG4gIGlmIChkZWZpbmVkKGNsaXBwaW5nUGxhbmVzKSAmJiBjbGlwcGluZ1BsYW5lcy5lbmFibGVkKSB7XG4gICAgY2xpcHBpbmdQbGFuZXMudXBkYXRlKGZyYW1lU3RhdGUpO1xuICB9XG5cbiAgaWYgKCFkZWZpbmVkKHRoaXMuX2xvYWRUaW1lc3RhbXApKSB7XG4gICAgdGhpcy5fbG9hZFRpbWVzdGFtcCA9IEp1bGlhbkRhdGUuY2xvbmUoZnJhbWVTdGF0ZS50aW1lKTtcbiAgfVxuICB0aGlzLl90aW1lU2luY2VMb2FkID0gTWF0aC5tYXgoXG4gICAgSnVsaWFuRGF0ZS5zZWNvbmRzRGlmZmVyZW5jZShmcmFtZVN0YXRlLnRpbWUsIHRoaXMuX2xvYWRUaW1lc3RhbXApICogMTAwMCxcbiAgICAwLjBcbiAgKTtcblxuICB0aGlzLl9za2lwTGV2ZWxPZkRldGFpbCA9XG4gICAgdGhpcy5za2lwTGV2ZWxPZkRldGFpbCAmJlxuICAgICFkZWZpbmVkKHRoaXMuX2NsYXNzaWZpY2F0aW9uVHlwZSkgJiZcbiAgICAhdGhpcy5fZGlzYWJsZVNraXBMZXZlbE9mRGV0YWlsICYmXG4gICAgIXRoaXMuX2FsbFRpbGVzQWRkaXRpdmU7XG5cbiAgaWYgKHRoaXMuZHluYW1pY1NjcmVlblNwYWNlRXJyb3IpIHtcbiAgICB1cGRhdGVEeW5hbWljU2NyZWVuU3BhY2VFcnJvcih0aGlzLCBmcmFtZVN0YXRlKTtcbiAgfVxuXG4gIGlmIChmcmFtZVN0YXRlLm5ld0ZyYW1lKSB7XG4gICAgdGhpcy5fY2FjaGUucmVzZXQoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2FuY2VsT3V0T2ZWaWV3UmVxdWVzdHModGlsZXNldCwgZnJhbWVTdGF0ZSkge1xuICB2YXIgcmVxdWVzdGVkVGlsZXNJbkZsaWdodCA9IHRpbGVzZXQuX3JlcXVlc3RlZFRpbGVzSW5GbGlnaHQ7XG4gIHZhciByZW1vdmVDb3VudCA9IDA7XG4gIHZhciBsZW5ndGggPSByZXF1ZXN0ZWRUaWxlc0luRmxpZ2h0Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciB0aWxlID0gcmVxdWVzdGVkVGlsZXNJbkZsaWdodFtpXTtcblxuICAgIC8vIE5PVEU6IFRoaXMgaXMgZnJhbWVyYXRlIGRlcGVuZGFudCBzbyBtYWtlIHN1cmUgdGhlIHRocmVzaG9sZCBjaGVjayBpcyBzbWFsbFxuICAgIHZhciBvdXRPZlZpZXcgPSBmcmFtZVN0YXRlLmZyYW1lTnVtYmVyIC0gdGlsZS5fdG91Y2hlZEZyYW1lID49IDE7XG4gICAgaWYgKHRpbGUuX2NvbnRlbnRTdGF0ZSAhPT0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLkxPQURJTkcpIHtcbiAgICAgIC8vIE5vIGxvbmdlciBmZXRjaGluZyBmcm9tIGhvc3QsIGRvbid0IG5lZWQgdG8gdHJhY2sgaXQgYW55bW9yZS4gR2V0cyBtYXJrZWQgYXMgTE9BRElORyBpbiBDZXNpdW0zRFRpbGU6OnJlcXVlc3RDb250ZW50KCkuXG4gICAgICArK3JlbW92ZUNvdW50O1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChvdXRPZlZpZXcpIHtcbiAgICAgIC8vIFJlcXVlc3RTY2hlZHVsZXIgd2lsbCB0YWtlIGNhcmUgb2YgY2FuY2VsbGluZyBpdFxuICAgICAgdGlsZS5jYW5jZWxSZXF1ZXN0cygpO1xuICAgICAgKytyZW1vdmVDb3VudDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChyZW1vdmVDb3VudCA+IDApIHtcbiAgICAgIHJlcXVlc3RlZFRpbGVzSW5GbGlnaHRbaSAtIHJlbW92ZUNvdW50XSA9IHRpbGU7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdGVkVGlsZXNJbkZsaWdodC5sZW5ndGggLT0gcmVtb3ZlQ291bnQ7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RUaWxlcyh0aWxlc2V0LCBpc0FzeW5jKSB7XG4gIC8vIFNvcnQgcmVxdWVzdHMgYnkgcHJpb3JpdHkgYmVmb3JlIG1ha2luZyBhbnkgcmVxdWVzdHMuXG4gIC8vIFRoaXMgbWFrZXMgaXQgbGVzcyBsaWtlbHkgdGhhdCByZXF1ZXN0cyB3aWxsIGJlIGNhbmNlbGxlZCBhZnRlciBiZWluZyBpc3N1ZWQuXG4gIHZhciByZXF1ZXN0ZWRUaWxlcyA9IHRpbGVzZXQuX3JlcXVlc3RlZFRpbGVzO1xuICB2YXIgbGVuZ3RoID0gcmVxdWVzdGVkVGlsZXMubGVuZ3RoO1xuICByZXF1ZXN0ZWRUaWxlcy5zb3J0KHNvcnRSZXF1ZXN0QnlQcmlvcml0eSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICByZXF1ZXN0Q29udGVudCh0aWxlc2V0LCByZXF1ZXN0ZWRUaWxlc1tpXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkVG9Qcm9jZXNzaW5nUXVldWUodGlsZXNldCwgdGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRpbGVzZXQuX3Byb2Nlc3NpbmdRdWV1ZS5wdXNoKHRpbGUpO1xuXG4gICAgKyt0aWxlc2V0Ll9zdGF0aXN0aWNzLm51bWJlck9mVGlsZXNQcm9jZXNzaW5nO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVUaWxlRmFpbHVyZSh0aWxlc2V0LCB0aWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB2YXIgdXJsID0gdGlsZS5fY29udGVudFJlc291cmNlLnVybDtcbiAgICB2YXIgbWVzc2FnZSA9IGRlZmluZWQoZXJyb3IubWVzc2FnZSkgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcbiAgICBpZiAodGlsZXNldC50aWxlRmFpbGVkLm51bWJlck9mTGlzdGVuZXJzID4gMCkge1xuICAgICAgdGlsZXNldC50aWxlRmFpbGVkLnJhaXNlRXZlbnQoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkEgM0QgdGlsZSBmYWlsZWQgdG8gbG9hZDogXCIgKyB1cmwpO1xuICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIgKyBtZXNzYWdlKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRpbGVTdWNjZXNzKHRpbGVzZXQsIHRpbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAtLXRpbGVzZXQuX3N0YXRpc3RpY3MubnVtYmVyT2ZUaWxlc1Byb2Nlc3Npbmc7XG5cbiAgICBpZiAoIXRpbGUuaGFzVGlsZXNldENvbnRlbnQgJiYgIXRpbGUuaGFzSW1wbGljaXRDb250ZW50KSB7XG4gICAgICAvLyBSRVNFQVJDSF9JREVBOiBhYmlsaXR5IHRvIHVubG9hZCB0aWxlcyAod2l0aG91dCBjb250ZW50KSBmb3IgYW5cbiAgICAgIC8vIGV4dGVybmFsIHRpbGVzZXQgd2hlbiBhbGwgdGhlIHRpbGVzIGFyZSB1bmxvYWRlZC5cbiAgICAgIHRpbGVzZXQuX3N0YXRpc3RpY3MuaW5jcmVtZW50TG9hZENvdW50cyh0aWxlLmNvbnRlbnQpO1xuICAgICAgKyt0aWxlc2V0Ll9zdGF0aXN0aWNzLm51bWJlck9mVGlsZXNXaXRoQ29udGVudFJlYWR5O1xuICAgICAgKyt0aWxlc2V0Ll9zdGF0aXN0aWNzLm51bWJlck9mTG9hZGVkVGlsZXNUb3RhbDtcblxuICAgICAgLy8gQWRkIHRvIHRoZSB0aWxlIGNhY2hlLiBQcmV2aW91c2x5IGV4cGlyZWQgdGlsZXMgYXJlIGFscmVhZHkgaW4gdGhlIGNhY2hlIGFuZCB3b24ndCBnZXQgcmUtYWRkZWQuXG4gICAgICB0aWxlc2V0Ll9jYWNoZS5hZGQodGlsZSk7XG4gICAgfVxuXG4gICAgdGlsZXNldC50aWxlTG9hZC5yYWlzZUV2ZW50KHRpbGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJQcm9jZXNzaW5nUXVldWUodGlsZXNldCkge1xuICB2YXIgdGlsZXMgPSB0aWxlc2V0Ll9wcm9jZXNzaW5nUXVldWU7XG4gIHZhciBsZW5ndGggPSB0aWxlcy5sZW5ndGg7XG5cbiAgdmFyIHJlbW92ZUNvdW50ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciB0aWxlID0gdGlsZXNbaV07XG4gICAgaWYgKHRpbGUuX2NvbnRlbnRTdGF0ZSAhPT0gQ2VzaXVtM0RUaWxlQ29udGVudFN0YXRlLlBST0NFU1NJTkcpIHtcbiAgICAgICsrcmVtb3ZlQ291bnQ7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHJlbW92ZUNvdW50ID4gMCkge1xuICAgICAgdGlsZXNbaSAtIHJlbW92ZUNvdW50XSA9IHRpbGU7XG4gICAgfVxuICB9XG4gIHRpbGVzLmxlbmd0aCAtPSByZW1vdmVDb3VudDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1RpbGVzKHRpbGVzZXQsIGZyYW1lU3RhdGUpIHtcbiAgZmlsdGVyUHJvY2Vzc2luZ1F1ZXVlKHRpbGVzZXQpO1xuICB2YXIgdGlsZXMgPSB0aWxlc2V0Ll9wcm9jZXNzaW5nUXVldWU7XG4gIHZhciBsZW5ndGggPSB0aWxlcy5sZW5ndGg7XG4gIC8vIFByb2Nlc3MgdGlsZXMgaW4gdGhlIFBST0NFU1NJTkcgc3RhdGUgc28gdGhleSB3aWxsIGV2ZW50dWFsbHkgbW92ZSB0byB0aGUgUkVBRFkgc3RhdGUuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB0aWxlc1tpXS5wcm9jZXNzKHRpbGVzZXQsIGZyYW1lU3RhdGUpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG52YXIgc2NyYXRjaENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zKCk7XG5cbnZhciBzdHJpbmdPcHRpb25zID0ge1xuICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDMsXG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNZW1vcnlTdHJpbmcobWVtb3J5U2l6ZUluQnl0ZXMpIHtcbiAgdmFyIG1lbW9yeUluTWVnYWJ5dGVzID0gbWVtb3J5U2l6ZUluQnl0ZXMgLyAxMDQ4NTc2O1xuICBpZiAobWVtb3J5SW5NZWdhYnl0ZXMgPCAxLjApIHtcbiAgICByZXR1cm4gbWVtb3J5SW5NZWdhYnl0ZXMudG9Mb2NhbGVTdHJpbmcodW5kZWZpbmVkLCBzdHJpbmdPcHRpb25zKTtcbiAgfVxuICByZXR1cm4gTWF0aC5yb3VuZChtZW1vcnlJbk1lZ2FieXRlcykudG9Mb2NhbGVTdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVRpbGVMYWJlbFBvc2l0aW9uKHRpbGUpIHtcbiAgdmFyIGJvdW5kaW5nVm9sdW1lID0gdGlsZS5ib3VuZGluZ1ZvbHVtZS5ib3VuZGluZ1ZvbHVtZTtcbiAgdmFyIGhhbGZBeGVzID0gYm91bmRpbmdWb2x1bWUuaGFsZkF4ZXM7XG4gIHZhciByYWRpdXMgPSBib3VuZGluZ1ZvbHVtZS5yYWRpdXM7XG5cbiAgdmFyIHBvc2l0aW9uID0gQ2FydGVzaWFuMy5jbG9uZShib3VuZGluZ1ZvbHVtZS5jZW50ZXIsIHNjcmF0Y2hDYXJ0ZXNpYW4pO1xuICBpZiAoZGVmaW5lZChoYWxmQXhlcykpIHtcbiAgICBwb3NpdGlvbi54ICs9IDAuNzUgKiAoaGFsZkF4ZXNbMF0gKyBoYWxmQXhlc1szXSArIGhhbGZBeGVzWzZdKTtcbiAgICBwb3NpdGlvbi55ICs9IDAuNzUgKiAoaGFsZkF4ZXNbMV0gKyBoYWxmQXhlc1s0XSArIGhhbGZBeGVzWzddKTtcbiAgICBwb3NpdGlvbi56ICs9IDAuNzUgKiAoaGFsZkF4ZXNbMl0gKyBoYWxmQXhlc1s1XSArIGhhbGZBeGVzWzhdKTtcbiAgfSBlbHNlIGlmIChkZWZpbmVkKHJhZGl1cykpIHtcbiAgICB2YXIgbm9ybWFsID0gQ2FydGVzaWFuMy5ub3JtYWxpemUoYm91bmRpbmdWb2x1bWUuY2VudGVyLCBzY3JhdGNoQ2FydGVzaWFuKTtcbiAgICBub3JtYWwgPSBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoXG4gICAgICBub3JtYWwsXG4gICAgICAwLjc1ICogcmFkaXVzLFxuICAgICAgc2NyYXRjaENhcnRlc2lhblxuICAgICk7XG4gICAgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zLmFkZChub3JtYWwsIGJvdW5kaW5nVm9sdW1lLmNlbnRlciwgc2NyYXRjaENhcnRlc2lhbik7XG4gIH1cbiAgcmV0dXJuIHBvc2l0aW9uO1xufVxuXG5mdW5jdGlvbiBhZGRUaWxlRGVidWdMYWJlbCh0aWxlLCB0aWxlc2V0LCBwb3NpdGlvbikge1xuICB2YXIgbGFiZWxTdHJpbmcgPSBcIlwiO1xuICB2YXIgYXR0cmlidXRlcyA9IDA7XG5cbiAgaWYgKHRpbGVzZXQuZGVidWdTaG93R2VvbWV0cmljRXJyb3IpIHtcbiAgICBsYWJlbFN0cmluZyArPSBcIlxcbkdlb21ldHJpYyBlcnJvcjogXCIgKyB0aWxlLmdlb21ldHJpY0Vycm9yO1xuICAgIGF0dHJpYnV0ZXMrKztcbiAgfVxuXG4gIGlmICh0aWxlc2V0LmRlYnVnU2hvd1JlbmRlcmluZ1N0YXRpc3RpY3MpIHtcbiAgICBsYWJlbFN0cmluZyArPSBcIlxcbkNvbW1hbmRzOiBcIiArIHRpbGUuY29tbWFuZHNMZW5ndGg7XG4gICAgYXR0cmlidXRlcysrO1xuXG4gICAgLy8gRG9uJ3QgZGlzcGxheSBudW1iZXIgb2YgcG9pbnRzIG9yIHRyaWFuZ2xlcyBpZiAwLlxuICAgIHZhciBudW1iZXJPZlBvaW50cyA9IHRpbGUuY29udGVudC5wb2ludHNMZW5ndGg7XG4gICAgaWYgKG51bWJlck9mUG9pbnRzID4gMCkge1xuICAgICAgbGFiZWxTdHJpbmcgKz0gXCJcXG5Qb2ludHM6IFwiICsgdGlsZS5jb250ZW50LnBvaW50c0xlbmd0aDtcbiAgICAgIGF0dHJpYnV0ZXMrKztcbiAgICB9XG5cbiAgICB2YXIgbnVtYmVyT2ZUcmlhbmdsZXMgPSB0aWxlLmNvbnRlbnQudHJpYW5nbGVzTGVuZ3RoO1xuICAgIGlmIChudW1iZXJPZlRyaWFuZ2xlcyA+IDApIHtcbiAgICAgIGxhYmVsU3RyaW5nICs9IFwiXFxuVHJpYW5nbGVzOiBcIiArIHRpbGUuY29udGVudC50cmlhbmdsZXNMZW5ndGg7XG4gICAgICBhdHRyaWJ1dGVzKys7XG4gICAgfVxuXG4gICAgbGFiZWxTdHJpbmcgKz0gXCJcXG5GZWF0dXJlczogXCIgKyB0aWxlLmNvbnRlbnQuZmVhdHVyZXNMZW5ndGg7XG4gICAgYXR0cmlidXRlcysrO1xuICB9XG5cbiAgaWYgKHRpbGVzZXQuZGVidWdTaG93TWVtb3J5VXNhZ2UpIHtcbiAgICBsYWJlbFN0cmluZyArPVxuICAgICAgXCJcXG5UZXh0dXJlIE1lbW9yeTogXCIgK1xuICAgICAgZm9ybWF0TWVtb3J5U3RyaW5nKHRpbGUuY29udGVudC50ZXh0dXJlc0J5dGVMZW5ndGgpO1xuICAgIGxhYmVsU3RyaW5nICs9XG4gICAgICBcIlxcbkdlb21ldHJ5IE1lbW9yeTogXCIgK1xuICAgICAgZm9ybWF0TWVtb3J5U3RyaW5nKHRpbGUuY29udGVudC5nZW9tZXRyeUJ5dGVMZW5ndGgpO1xuICAgIGF0dHJpYnV0ZXMgKz0gMjtcbiAgfVxuXG4gIGlmICh0aWxlc2V0LmRlYnVnU2hvd1VybCkge1xuICAgIGlmICh0aWxlLmhhc011bHRpcGxlQ29udGVudHMpIHtcbiAgICAgIGxhYmVsU3RyaW5nICs9IFwiXFxuVXJsczpcIjtcbiAgICAgIHZhciB1cmxzID0gdGlsZS5jb250ZW50LmlubmVyQ29udGVudFVybHM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGFiZWxTdHJpbmcgKz0gXCJcXG4tIFwiICsgdXJsc1tpXTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgKz0gdXJscy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhYmVsU3RyaW5nICs9IFwiXFxuVXJsOiBcIiArIHRpbGUuX2hlYWRlci5jb250ZW50LnVyaTtcbiAgICAgIGF0dHJpYnV0ZXMrKztcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3TGFiZWwgPSB7XG4gICAgdGV4dDogbGFiZWxTdHJpbmcuc3Vic3RyaW5nKDEpLFxuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICBmb250OiAxOSAtIGF0dHJpYnV0ZXMgKyBcInB4IHNhbnMtc2VyaWZcIixcbiAgICBzaG93QmFja2dyb3VuZDogdHJ1ZSxcbiAgICBkaXNhYmxlRGVwdGhUZXN0RGlzdGFuY2U6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgfTtcblxuICByZXR1cm4gdGlsZXNldC5fdGlsZURlYnVnTGFiZWxzLmFkZChuZXdMYWJlbCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVRpbGVEZWJ1Z0xhYmVscyh0aWxlc2V0LCBmcmFtZVN0YXRlKSB7XG4gIHZhciBpO1xuICB2YXIgdGlsZTtcbiAgdmFyIHNlbGVjdGVkVGlsZXMgPSB0aWxlc2V0Ll9zZWxlY3RlZFRpbGVzO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFRpbGVzLmxlbmd0aDtcbiAgdmFyIGVtcHR5VGlsZXMgPSB0aWxlc2V0Ll9lbXB0eVRpbGVzO1xuICB2YXIgZW1wdHlMZW5ndGggPSBlbXB0eVRpbGVzLmxlbmd0aDtcbiAgdGlsZXNldC5fdGlsZURlYnVnTGFiZWxzLnJlbW92ZUFsbCgpO1xuXG4gIGlmICh0aWxlc2V0LmRlYnVnUGlja2VkVGlsZUxhYmVsT25seSkge1xuICAgIGlmIChkZWZpbmVkKHRpbGVzZXQuZGVidWdQaWNrZWRUaWxlKSkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gZGVmaW5lZCh0aWxlc2V0LmRlYnVnUGlja1Bvc2l0aW9uKVxuICAgICAgICA/IHRpbGVzZXQuZGVidWdQaWNrUG9zaXRpb25cbiAgICAgICAgOiBjb21wdXRlVGlsZUxhYmVsUG9zaXRpb24odGlsZXNldC5kZWJ1Z1BpY2tlZFRpbGUpO1xuICAgICAgdmFyIGxhYmVsID0gYWRkVGlsZURlYnVnTGFiZWwodGlsZXNldC5kZWJ1Z1BpY2tlZFRpbGUsIHRpbGVzZXQsIHBvc2l0aW9uKTtcbiAgICAgIGxhYmVsLnBpeGVsT2Zmc2V0ID0gbmV3IENhcnRlc2lhbjIoMTUsIC0xNSk7IC8vIE9mZnNldCB0byBhdm9pZCBwaWNraW5nIHRoZSBsYWJlbC5cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHNlbGVjdGVkTGVuZ3RoOyArK2kpIHtcbiAgICAgIHRpbGUgPSBzZWxlY3RlZFRpbGVzW2ldO1xuICAgICAgYWRkVGlsZURlYnVnTGFiZWwodGlsZSwgdGlsZXNldCwgY29tcHV0ZVRpbGVMYWJlbFBvc2l0aW9uKHRpbGUpKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVtcHR5TGVuZ3RoOyArK2kpIHtcbiAgICAgIHRpbGUgPSBlbXB0eVRpbGVzW2ldO1xuICAgICAgaWYgKHRpbGUuaGFzVGlsZXNldENvbnRlbnQgfHwgdGlsZS5oYXNJbXBsaWNpdENvbnRlbnQpIHtcbiAgICAgICAgYWRkVGlsZURlYnVnTGFiZWwodGlsZSwgdGlsZXNldCwgY29tcHV0ZVRpbGVMYWJlbFBvc2l0aW9uKHRpbGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGlsZXNldC5fdGlsZURlYnVnTGFiZWxzLnVwZGF0ZShmcmFtZVN0YXRlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVGlsZXModGlsZXNldCwgZnJhbWVTdGF0ZSwgcGFzc09wdGlvbnMpIHtcbiAgdGlsZXNldC5fc3R5bGVFbmdpbmUuYXBwbHlTdHlsZSh0aWxlc2V0KTtcblxuICB2YXIgaXNSZW5kZXIgPSBwYXNzT3B0aW9ucy5pc1JlbmRlcjtcbiAgdmFyIHN0YXRpc3RpY3MgPSB0aWxlc2V0Ll9zdGF0aXN0aWNzO1xuICB2YXIgY29tbWFuZExpc3QgPSBmcmFtZVN0YXRlLmNvbW1hbmRMaXN0O1xuICB2YXIgbnVtYmVyT2ZJbml0aWFsQ29tbWFuZHMgPSBjb21tYW5kTGlzdC5sZW5ndGg7XG4gIHZhciBzZWxlY3RlZFRpbGVzID0gdGlsZXNldC5fc2VsZWN0ZWRUaWxlcztcbiAgdmFyIHNlbGVjdGVkTGVuZ3RoID0gc2VsZWN0ZWRUaWxlcy5sZW5ndGg7XG4gIHZhciBlbXB0eVRpbGVzID0gdGlsZXNldC5fZW1wdHlUaWxlcztcbiAgdmFyIGVtcHR5TGVuZ3RoID0gZW1wdHlUaWxlcy5sZW5ndGg7XG4gIHZhciB0aWxlVmlzaWJsZSA9IHRpbGVzZXQudGlsZVZpc2libGU7XG4gIHZhciBpO1xuICB2YXIgdGlsZTtcblxuICB2YXIgYml2YXJpYXRlVmlzaWJpbGl0eVRlc3QgPVxuICAgIHRpbGVzZXQuX3NraXBMZXZlbE9mRGV0YWlsICYmXG4gICAgdGlsZXNldC5faGFzTWl4ZWRDb250ZW50ICYmXG4gICAgZnJhbWVTdGF0ZS5jb250ZXh0LnN0ZW5jaWxCdWZmZXIgJiZcbiAgICBzZWxlY3RlZExlbmd0aCA+IDA7XG5cbiAgdGlsZXNldC5fYmFja2ZhY2VDb21tYW5kcy5sZW5ndGggPSAwO1xuXG4gIGlmIChiaXZhcmlhdGVWaXNpYmlsaXR5VGVzdCkge1xuICAgIGlmICghZGVmaW5lZCh0aWxlc2V0Ll9zdGVuY2lsQ2xlYXJDb21tYW5kKSkge1xuICAgICAgdGlsZXNldC5fc3RlbmNpbENsZWFyQ29tbWFuZCA9IG5ldyBDbGVhckNvbW1hbmQoe1xuICAgICAgICBzdGVuY2lsOiAwLFxuICAgICAgICBwYXNzOiBQYXNzLkNFU0lVTV8zRF9USUxFLFxuICAgICAgICByZW5kZXJTdGF0ZTogUmVuZGVyU3RhdGUuZnJvbUNhY2hlKHtcbiAgICAgICAgICBzdGVuY2lsTWFzazogU3RlbmNpbENvbnN0YW50cy5TS0lQX0xPRF9NQVNLLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb21tYW5kTGlzdC5wdXNoKHRpbGVzZXQuX3N0ZW5jaWxDbGVhckNvbW1hbmQpO1xuICB9XG5cbiAgdmFyIGxlbmd0aEJlZm9yZVVwZGF0ZSA9IGNvbW1hbmRMaXN0Lmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IHNlbGVjdGVkTGVuZ3RoOyArK2kpIHtcbiAgICB0aWxlID0gc2VsZWN0ZWRUaWxlc1tpXTtcbiAgICAvLyBSYWlzZSB0aGUgdGlsZVZpc2libGUgZXZlbnQgYmVmb3JlIHVwZGF0ZSBpbiBjYXNlIHRoZSB0aWxlVmlzaWJsZSBldmVudFxuICAgIC8vIGhhbmRsZXIgbWFrZXMgY2hhbmdlcyB0aGF0IHVwZGF0ZSBuZWVkcyB0byBhcHBseSB0byBXZWJHTCByZXNvdXJjZXNcbiAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgIHRpbGVWaXNpYmxlLnJhaXNlRXZlbnQodGlsZSk7XG4gICAgfVxuICAgIHRpbGUudXBkYXRlKHRpbGVzZXQsIGZyYW1lU3RhdGUsIHBhc3NPcHRpb25zKTtcbiAgICBzdGF0aXN0aWNzLmluY3JlbWVudFNlbGVjdGlvbkNvdW50cyh0aWxlLmNvbnRlbnQpO1xuICAgICsrc3RhdGlzdGljcy5zZWxlY3RlZDtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgZW1wdHlMZW5ndGg7ICsraSkge1xuICAgIHRpbGUgPSBlbXB0eVRpbGVzW2ldO1xuICAgIHRpbGUudXBkYXRlKHRpbGVzZXQsIGZyYW1lU3RhdGUsIHBhc3NPcHRpb25zKTtcbiAgfVxuXG4gIHZhciBhZGRlZENvbW1hbmRzTGVuZ3RoID0gY29tbWFuZExpc3QubGVuZ3RoIC0gbGVuZ3RoQmVmb3JlVXBkYXRlO1xuXG4gIHRpbGVzZXQuX2JhY2tmYWNlQ29tbWFuZHMudHJpbSgpO1xuXG4gIGlmIChiaXZhcmlhdGVWaXNpYmlsaXR5VGVzdCkge1xuICAgIC8qXG4gICAgICogQ29uc2lkZXIgJ2VmZmVjdGl2ZSBsZWFmJyB0aWxlcyBhcyBzZWxlY3RlZCB0aWxlcyB0aGF0IGhhdmUgbm8gc2VsZWN0ZWQgZGVzY2VuZGFudHMuIFRoZXkgbWF5IGhhdmUgY2hpbGRyZW4sXG4gICAgICogYnV0IHRoZXkgYXJlIGN1cnJlbnRseSBvdXIgZWZmZWN0aXZlIGxlYXZlcyBiZWNhdXNlIHRoZXkgZG8gbm90IGhhdmUgc2VsZWN0ZWQgZGVzY2VuZGFudHMuIFRoZXNlIHRpbGVzXG4gICAgICogYXJlIHRob3NlIHdoZXJlIHdpdGggdGlsZS5fZmluYWxSZXNvbHV0aW9uID09PSB0cnVlLlxuICAgICAqIExldCAndW5yZXNvbHZlZCcgdGlsZXMgYmUgdGhvc2Ugd2l0aCB0aWxlLl9maW5hbFJlc29sdXRpb24gPT09IGZhbHNlLlxuICAgICAqXG4gICAgICogMS4gUmVuZGVyIGp1c3QgdGhlIGJhY2tmYWNlcyBvZiB1bnJlc29sdmVkIHRpbGVzIGluIG9yZGVyIHRvIGxheSBkb3duIHpcbiAgICAgKiAyLiBSZW5kZXIgYWxsIGZyb250ZmFjZXMgd2hlcmV2ZXIgdGlsZS5fc2VsZWN0aW9uRGVwdGggPiBzdGVuY2lsQnVmZmVyLlxuICAgICAqICAgIFJlcGxhY2Ugc3RlbmNpbEJ1ZmZlciB3aXRoIHRpbGUuX3NlbGVjdGlvbkRlcHRoLCB3aGVuIHBhc3NpbmcgdGhlIHogdGVzdC5cbiAgICAgKiAgICBCZWNhdXNlIGNoaWxkcmVuIGFyZSBhbHdheXMgZHJhd24gYmVmb3JlIGFuY2VzdG9ycyB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0VHJhdmVyc2FsI3RyYXZlcnNlQW5kU2VsZWN0fSxcbiAgICAgKiAgICB0aGlzIGVmZmVjdGl2ZWx5IGRyYXdzIGNoaWxkcmVuIGZpcnN0IGFuZCBkb2VzIG5vdCBkcmF3IGFuY2VzdG9ycyBpZiBhIGRlc2NlbmRhbnQgaGFzIGFscmVhZHlcbiAgICAgKiAgICBiZWVuIGRyYXduIGF0IHRoYXQgcGl4ZWwuXG4gICAgICogICAgU3RlcCAxIHByZXZlbnRzIGNoaWxkIHRpbGVzIGZyb20gYXBwZWFyaW5nIG9uIHRvcCB3aGVuIHRoZXkgYXJlIHRydWx5IGJlaGluZCBhbmNlc3RvciBjb250ZW50LlxuICAgICAqICAgIElmIHRoZXkgYXJlIGJlaGluZCB0aGUgYmFja2ZhY2VzIG9mIHRoZSBhbmNlc3RvciwgdGhlbiB0aGV5IHdpbGwgbm90IGJlIGRyYXduLlxuICAgICAqXG4gICAgICogTk9URTogU3RlcCAyIHNvbWV0aW1lcyBjYXVzZXMgdmlzdWFsIGFydGlmYWN0cyB3aGVuIGJhY2tmYWNpbmcgY2hpbGQgY29udGVudCBoYXMgc29tZSBmYWNlcyB0aGF0XG4gICAgICogcGFydGlhbGx5IGZhY2UgdGhlIGNhbWVyYSBhbmQgYXJlIGluc2lkZSBvZiB0aGUgYW5jZXN0b3IgY29udGVudC4gQmVjYXVzZSB0aGV5IGFyZSBpbnNpZGUsIHRoZXkgd2lsbFxuICAgICAqIG5vdCBiZSBjdWxsZWQgYnkgdGhlIGRlcHRoIHdyaXRlcyBpbiBTdGVwIDEsIGFuZCBiZWNhdXNlIHRoZXkgcGFydGlhbGx5IGZhY2UgdGhlIGNhbWVyYSwgdGhlIHN0ZW5jaWwgdGVzdHNcbiAgICAgKiB3aWxsIGRyYXcgdGhlbSBvbiB0b3Agb2YgdGhlIGFuY2VzdG9yIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBCZWNhdXNlIHdlIGFsd2F5cyByZW5kZXIgYmFja2ZhY2VzIG9mIHVucmVzb2x2ZWQgdGlsZXMsIGlmIHRoZSBjYW1lcmEgaXMgbG9va2luZyBhdCB0aGUgYmFja2ZhY2VzXG4gICAgICogb2YgYW4gb2JqZWN0LCB0aGV5IHdpbGwgYWx3YXlzIGJlIGRyYXduIHdoaWxlIGxvYWRpbmcsIGV2ZW4gaWYgYmFja2ZhY2UgY3VsbGluZyBpcyBlbmFibGVkLlxuICAgICAqL1xuXG4gICAgdmFyIGJhY2tmYWNlQ29tbWFuZHMgPSB0aWxlc2V0Ll9iYWNrZmFjZUNvbW1hbmRzLnZhbHVlcztcbiAgICB2YXIgYmFja2ZhY2VDb21tYW5kc0xlbmd0aCA9IGJhY2tmYWNlQ29tbWFuZHMubGVuZ3RoO1xuXG4gICAgY29tbWFuZExpc3QubGVuZ3RoICs9IGJhY2tmYWNlQ29tbWFuZHNMZW5ndGg7XG5cbiAgICAvLyBjb3B5IGNvbW1hbmRzIHRvIHRoZSBiYWNrIG9mIHRoZSBjb21tYW5kTGlzdFxuICAgIGZvciAoaSA9IGFkZGVkQ29tbWFuZHNMZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29tbWFuZExpc3RbbGVuZ3RoQmVmb3JlVXBkYXRlICsgYmFja2ZhY2VDb21tYW5kc0xlbmd0aCArIGldID1cbiAgICAgICAgY29tbWFuZExpc3RbbGVuZ3RoQmVmb3JlVXBkYXRlICsgaV07XG4gICAgfVxuXG4gICAgLy8gbW92ZSBiYWNrZmFjZSBjb21tYW5kcyB0byB0aGUgZnJvbnQgb2YgdGhlIGNvbW1hbmRMaXN0XG4gICAgZm9yIChpID0gMDsgaSA8IGJhY2tmYWNlQ29tbWFuZHNMZW5ndGg7ICsraSkge1xuICAgICAgY29tbWFuZExpc3RbbGVuZ3RoQmVmb3JlVXBkYXRlICsgaV0gPSBiYWNrZmFjZUNvbW1hbmRzW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8vIE51bWJlciBvZiBjb21tYW5kcyBhZGRlZCBieSBlYWNoIHVwZGF0ZSBhYm92ZVxuICBhZGRlZENvbW1hbmRzTGVuZ3RoID0gY29tbWFuZExpc3QubGVuZ3RoIC0gbnVtYmVyT2ZJbml0aWFsQ29tbWFuZHM7XG4gIHN0YXRpc3RpY3MubnVtYmVyT2ZDb21tYW5kcyA9IGFkZGVkQ29tbWFuZHNMZW5ndGg7XG5cbiAgLy8gT25seSBydW4gRURMIGlmIHNpbXBsZSBhdHRlbnVhdGlvbiBpcyBvblxuICBpZiAoXG4gICAgaXNSZW5kZXIgJiZcbiAgICB0aWxlc2V0LnBvaW50Q2xvdWRTaGFkaW5nLmF0dGVudWF0aW9uICYmXG4gICAgdGlsZXNldC5wb2ludENsb3VkU2hhZGluZy5leWVEb21lTGlnaHRpbmcgJiZcbiAgICBhZGRlZENvbW1hbmRzTGVuZ3RoID4gMFxuICApIHtcbiAgICB0aWxlc2V0Ll9wb2ludENsb3VkRXllRG9tZUxpZ2h0aW5nLnVwZGF0ZShcbiAgICAgIGZyYW1lU3RhdGUsXG4gICAgICBudW1iZXJPZkluaXRpYWxDb21tYW5kcyxcbiAgICAgIHRpbGVzZXQucG9pbnRDbG91ZFNoYWRpbmcsXG4gICAgICB0aWxlc2V0LmJvdW5kaW5nU3BoZXJlXG4gICAgKTtcbiAgfVxuXG4gIGlmIChpc1JlbmRlcikge1xuICAgIGlmIChcbiAgICAgIHRpbGVzZXQuZGVidWdTaG93R2VvbWV0cmljRXJyb3IgfHxcbiAgICAgIHRpbGVzZXQuZGVidWdTaG93UmVuZGVyaW5nU3RhdGlzdGljcyB8fFxuICAgICAgdGlsZXNldC5kZWJ1Z1Nob3dNZW1vcnlVc2FnZSB8fFxuICAgICAgdGlsZXNldC5kZWJ1Z1Nob3dVcmxcbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5lZCh0aWxlc2V0Ll90aWxlRGVidWdMYWJlbHMpKSB7XG4gICAgICAgIHRpbGVzZXQuX3RpbGVEZWJ1Z0xhYmVscyA9IG5ldyBMYWJlbENvbGxlY3Rpb24oKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZVRpbGVEZWJ1Z0xhYmVscyh0aWxlc2V0LCBmcmFtZVN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGlsZXNldC5fdGlsZURlYnVnTGFiZWxzID1cbiAgICAgICAgdGlsZXNldC5fdGlsZURlYnVnTGFiZWxzICYmIHRpbGVzZXQuX3RpbGVEZWJ1Z0xhYmVscy5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzY3JhdGNoU3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gZGVzdHJveVN1YnRyZWUodGlsZXNldCwgdGlsZSkge1xuICB2YXIgcm9vdCA9IHRpbGU7XG4gIHZhciBzdGFjayA9IHNjcmF0Y2hTdGFjaztcbiAgc3RhY2sucHVzaCh0aWxlKTtcbiAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICB0aWxlID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGNoaWxkcmVuID0gdGlsZS5jaGlsZHJlbjtcbiAgICB2YXIgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIHN0YWNrLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBpZiAodGlsZSAhPT0gcm9vdCkge1xuICAgICAgZGVzdHJveVRpbGUodGlsZXNldCwgdGlsZSk7XG4gICAgICAtLXRpbGVzZXQuX3N0YXRpc3RpY3MubnVtYmVyT2ZUaWxlc1RvdGFsO1xuICAgIH1cbiAgfVxuICByb290LmNoaWxkcmVuID0gW107XG59XG5cbmZ1bmN0aW9uIHVubG9hZFRpbGUodGlsZXNldCwgdGlsZSkge1xuICB0aWxlc2V0LnRpbGVVbmxvYWQucmFpc2VFdmVudCh0aWxlKTtcbiAgdGlsZXNldC5fc3RhdGlzdGljcy5kZWNyZW1lbnRMb2FkQ291bnRzKHRpbGUuY29udGVudCk7XG4gIC0tdGlsZXNldC5fc3RhdGlzdGljcy5udW1iZXJPZlRpbGVzV2l0aENvbnRlbnRSZWFkeTtcbiAgdGlsZS51bmxvYWRDb250ZW50KCk7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3lUaWxlKHRpbGVzZXQsIHRpbGUpIHtcbiAgdGlsZXNldC5fY2FjaGUudW5sb2FkVGlsZSh0aWxlc2V0LCB0aWxlLCB1bmxvYWRUaWxlKTtcbiAgdGlsZS5kZXN0cm95KCk7XG59XG5cbi8qKlxuICogVW5sb2FkcyBhbGwgdGlsZXMgdGhhdCB3ZXJlbid0IHNlbGVjdGVkIHRoZSBwcmV2aW91cyBmcmFtZS4gIFRoaXMgY2FuIGJlIHVzZWQgdG9cbiAqIGV4cGxpY2l0bHkgbWFuYWdlIHRoZSB0aWxlIGNhY2hlIGFuZCByZWR1Y2UgdGhlIHRvdGFsIG51bWJlciBvZiB0aWxlcyBsb2FkZWQgYmVsb3dcbiAqIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjbWF4aW11bU1lbW9yeVVzYWdlfS5cbiAqIDxwPlxuICogVGlsZSB1bmxvYWRzIG9jY3VyIGF0IHRoZSBuZXh0IGZyYW1lIHRvIGtlZXAgYWxsIHRoZSBXZWJHTCBkZWxldGUgY2FsbHNcbiAqIHdpdGhpbiB0aGUgcmVuZGVyIGxvb3AuXG4gKiA8L3A+XG4gKi9cbkNlc2l1bTNEVGlsZXNldC5wcm90b3R5cGUudHJpbUxvYWRlZFRpbGVzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jYWNoZS50cmltKCk7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gcmFpc2VMb2FkUHJvZ3Jlc3NFdmVudCh0aWxlc2V0LCBmcmFtZVN0YXRlKSB7XG4gIHZhciBzdGF0aXN0aWNzID0gdGlsZXNldC5fc3RhdGlzdGljcztcbiAgdmFyIHN0YXRpc3RpY3NMYXN0ID0gdGlsZXNldC5fc3RhdGlzdGljc0xhc3Q7XG5cbiAgdmFyIG51bWJlck9mUGVuZGluZ1JlcXVlc3RzID0gc3RhdGlzdGljcy5udW1iZXJPZlBlbmRpbmdSZXF1ZXN0cztcbiAgdmFyIG51bWJlck9mVGlsZXNQcm9jZXNzaW5nID0gc3RhdGlzdGljcy5udW1iZXJPZlRpbGVzUHJvY2Vzc2luZztcbiAgdmFyIGxhc3ROdW1iZXJPZlBlbmRpbmdSZXF1ZXN0ID0gc3RhdGlzdGljc0xhc3QubnVtYmVyT2ZQZW5kaW5nUmVxdWVzdHM7XG4gIHZhciBsYXN0TnVtYmVyT2ZUaWxlc1Byb2Nlc3NpbmcgPSBzdGF0aXN0aWNzTGFzdC5udW1iZXJPZlRpbGVzUHJvY2Vzc2luZztcblxuICBDZXNpdW0zRFRpbGVzZXRTdGF0aXN0aWNzLmNsb25lKHN0YXRpc3RpY3MsIHN0YXRpc3RpY3NMYXN0KTtcblxuICB2YXIgcHJvZ3Jlc3NDaGFuZ2VkID1cbiAgICBudW1iZXJPZlBlbmRpbmdSZXF1ZXN0cyAhPT0gbGFzdE51bWJlck9mUGVuZGluZ1JlcXVlc3QgfHxcbiAgICBudW1iZXJPZlRpbGVzUHJvY2Vzc2luZyAhPT0gbGFzdE51bWJlck9mVGlsZXNQcm9jZXNzaW5nO1xuXG4gIGlmIChwcm9ncmVzc0NoYW5nZWQpIHtcbiAgICBmcmFtZVN0YXRlLmFmdGVyUmVuZGVyLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgdGlsZXNldC5sb2FkUHJvZ3Jlc3MucmFpc2VFdmVudChcbiAgICAgICAgbnVtYmVyT2ZQZW5kaW5nUmVxdWVzdHMsXG4gICAgICAgIG51bWJlck9mVGlsZXNQcm9jZXNzaW5nXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgdGlsZXNldC5fdGlsZXNMb2FkZWQgPVxuICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZQZW5kaW5nUmVxdWVzdHMgPT09IDAgJiZcbiAgICBzdGF0aXN0aWNzLm51bWJlck9mVGlsZXNQcm9jZXNzaW5nID09PSAwICYmXG4gICAgc3RhdGlzdGljcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzID09PSAwO1xuXG4gIC8vIEV2ZW50cyBhcmUgcmFpc2VkIChhZGRlZCB0byB0aGUgYWZ0ZXJSZW5kZXIgcXVldWUpIGhlcmUgc2luY2UgcHJvbWlzZXNcbiAgLy8gbWF5IHJlc29sdmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlIGxvb3AgdGhhdCB0aGVuIHJhaXNlIGV2ZW50cywgZS5nLixcbiAgLy8gbW9kZWwncyByZWFkeVByb21pc2UuXG4gIGlmIChwcm9ncmVzc0NoYW5nZWQgJiYgdGlsZXNldC5fdGlsZXNMb2FkZWQpIHtcbiAgICBmcmFtZVN0YXRlLmFmdGVyUmVuZGVyLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgdGlsZXNldC5hbGxUaWxlc0xvYWRlZC5yYWlzZUV2ZW50KCk7XG4gICAgfSk7XG4gICAgaWYgKCF0aWxlc2V0Ll9pbml0aWFsVGlsZXNMb2FkZWQpIHtcbiAgICAgIHRpbGVzZXQuX2luaXRpYWxUaWxlc0xvYWRlZCA9IHRydWU7XG4gICAgICBmcmFtZVN0YXRlLmFmdGVyUmVuZGVyLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICB0aWxlc2V0LmluaXRpYWxUaWxlc0xvYWRlZC5yYWlzZUV2ZW50KCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRNaW5pbXVtTWF4aW11bSh0aWxlc2V0KSB7XG4gIHRpbGVzZXQuX2hlYXRtYXAucmVzZXRNaW5pbXVtTWF4aW11bSgpO1xuICB0aWxlc2V0Ll9taW5pbXVtUHJpb3JpdHkuZGVwdGggPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICB0aWxlc2V0Ll9tYXhpbXVtUHJpb3JpdHkuZGVwdGggPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgdGlsZXNldC5fbWluaW11bVByaW9yaXR5LmZvdmVhdGVkRmFjdG9yID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgdGlsZXNldC5fbWF4aW11bVByaW9yaXR5LmZvdmVhdGVkRmFjdG9yID0gLU51bWJlci5NQVhfVkFMVUU7XG4gIHRpbGVzZXQuX21pbmltdW1Qcmlvcml0eS5kaXN0YW5jZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gIHRpbGVzZXQuX21heGltdW1Qcmlvcml0eS5kaXN0YW5jZSA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuICB0aWxlc2V0Ll9taW5pbXVtUHJpb3JpdHkucmV2ZXJzZVNjcmVlblNwYWNlRXJyb3IgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICB0aWxlc2V0Ll9tYXhpbXVtUHJpb3JpdHkucmV2ZXJzZVNjcmVlblNwYWNlRXJyb3IgPSAtTnVtYmVyLk1BWF9WQUxVRTtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0TW9kZWxNYXRyaXhDaGFuZ2VkKHRpbGVzZXQsIGZyYW1lU3RhdGUpIHtcbiAgaWYgKFxuICAgIGZyYW1lU3RhdGUuZnJhbWVOdW1iZXIgIT09IHRpbGVzZXQuX3VwZGF0ZWRNb2RlbE1hdHJpeEZyYW1lIHx8XG4gICAgIWRlZmluZWQodGlsZXNldC5fcHJldmlvdXNNb2RlbE1hdHJpeClcbiAgKSB7XG4gICAgdGlsZXNldC5fdXBkYXRlZE1vZGVsTWF0cml4RnJhbWUgPSBmcmFtZVN0YXRlLmZyYW1lTnVtYmVyO1xuICAgIHRpbGVzZXQuX21vZGVsTWF0cml4Q2hhbmdlZCA9ICFNYXRyaXg0LmVxdWFscyhcbiAgICAgIHRpbGVzZXQubW9kZWxNYXRyaXgsXG4gICAgICB0aWxlc2V0Ll9wcmV2aW91c01vZGVsTWF0cml4XG4gICAgKTtcbiAgICBpZiAodGlsZXNldC5fbW9kZWxNYXRyaXhDaGFuZ2VkKSB7XG4gICAgICB0aWxlc2V0Ll9wcmV2aW91c01vZGVsTWF0cml4ID0gTWF0cml4NC5jbG9uZShcbiAgICAgICAgdGlsZXNldC5tb2RlbE1hdHJpeCxcbiAgICAgICAgdGlsZXNldC5fcHJldmlvdXNNb2RlbE1hdHJpeFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIHVwZGF0ZSh0aWxlc2V0LCBmcmFtZVN0YXRlLCBwYXNzU3RhdGlzdGljcywgcGFzc09wdGlvbnMpIHtcbiAgaWYgKGZyYW1lU3RhdGUubW9kZSA9PT0gU2NlbmVNb2RlLk1PUlBISU5HKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCF0aWxlc2V0LnJlYWR5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN0YXRpc3RpY3MgPSB0aWxlc2V0Ll9zdGF0aXN0aWNzO1xuICBzdGF0aXN0aWNzLmNsZWFyKCk7XG5cbiAgdmFyIGlzUmVuZGVyID0gcGFzc09wdGlvbnMuaXNSZW5kZXI7XG5cbiAgLy8gUmVzZXRzIHRoZSB2aXNpYmlsaXR5IGNoZWNrIGZvciBlYWNoIHBhc3NcbiAgKyt0aWxlc2V0Ll91cGRhdGVkVmlzaWJpbGl0eUZyYW1lO1xuXG4gIC8vIFVwZGF0ZSBhbnkgdHJhY2tlZCBtaW4gbWF4IHZhbHVlc1xuICByZXNldE1pbmltdW1NYXhpbXVtKHRpbGVzZXQpO1xuXG4gIGRldGVjdE1vZGVsTWF0cml4Q2hhbmdlZCh0aWxlc2V0LCBmcmFtZVN0YXRlKTtcbiAgdGlsZXNldC5fY3VsbFJlcXVlc3RzV2hpbGVNb3ZpbmcgPVxuICAgIHRpbGVzZXQuY3VsbFJlcXVlc3RzV2hpbGVNb3ZpbmcgJiYgIXRpbGVzZXQuX21vZGVsTWF0cml4Q2hhbmdlZDtcblxuICB2YXIgcmVhZHkgPSBwYXNzT3B0aW9ucy50cmF2ZXJzYWwuc2VsZWN0VGlsZXModGlsZXNldCwgZnJhbWVTdGF0ZSk7XG5cbiAgaWYgKHBhc3NPcHRpb25zLnJlcXVlc3RUaWxlcykge1xuICAgIHJlcXVlc3RUaWxlcyh0aWxlc2V0KTtcbiAgfVxuXG4gIHVwZGF0ZVRpbGVzKHRpbGVzZXQsIGZyYW1lU3RhdGUsIHBhc3NPcHRpb25zKTtcblxuICAvLyBVcGRhdGUgcGFzcyBzdGF0aXN0aWNzXG4gIENlc2l1bTNEVGlsZXNldFN0YXRpc3RpY3MuY2xvbmUoc3RhdGlzdGljcywgcGFzc1N0YXRpc3RpY3MpO1xuXG4gIGlmIChpc1JlbmRlcikge1xuICAgIHZhciBjcmVkaXRzID0gdGlsZXNldC5fY3JlZGl0cztcbiAgICBpZiAoZGVmaW5lZChjcmVkaXRzKSAmJiBzdGF0aXN0aWNzLnNlbGVjdGVkICE9PSAwKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gY3JlZGl0cy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGZyYW1lU3RhdGUuY3JlZGl0RGlzcGxheS5hZGRDcmVkaXQoY3JlZGl0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlYWR5O1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZXNldC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGZyYW1lU3RhdGUpIHtcbiAgdGhpcy51cGRhdGVGb3JQYXNzKGZyYW1lU3RhdGUsIGZyYW1lU3RhdGUudGlsZXNldFBhc3NTdGF0ZSk7XG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbkNlc2l1bTNEVGlsZXNldC5wcm90b3R5cGUudXBkYXRlRm9yUGFzcyA9IGZ1bmN0aW9uIChcbiAgZnJhbWVTdGF0ZSxcbiAgdGlsZXNldFBhc3NTdGF0ZVxuKSB7XG4gIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG4gIENoZWNrLnR5cGVPZi5vYmplY3QoXCJmcmFtZVN0YXRlXCIsIGZyYW1lU3RhdGUpO1xuICBDaGVjay50eXBlT2Yub2JqZWN0KFwidGlsZXNldFBhc3NTdGF0ZVwiLCB0aWxlc2V0UGFzc1N0YXRlKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIHBhc3MgPSB0aWxlc2V0UGFzc1N0YXRlLnBhc3M7XG4gIGlmIChcbiAgICAocGFzcyA9PT0gQ2VzaXVtM0RUaWxlUGFzcy5QUkVMT0FEICYmXG4gICAgICAoIXRoaXMucHJlbG9hZFdoZW5IaWRkZW4gfHwgdGhpcy5zaG93KSkgfHxcbiAgICAocGFzcyA9PT0gQ2VzaXVtM0RUaWxlUGFzcy5QUkVMT0FEX0ZMSUdIVCAmJlxuICAgICAgKCF0aGlzLnByZWxvYWRGbGlnaHREZXN0aW5hdGlvbnMgfHxcbiAgICAgICAgKCF0aGlzLnNob3cgJiYgIXRoaXMucHJlbG9hZFdoZW5IaWRkZW4pKSkgfHxcbiAgICAocGFzcyA9PT0gQ2VzaXVtM0RUaWxlUGFzcy5SRVFVRVNUX1JFTkRFUl9NT0RFX0RFRkVSX0NIRUNLICYmXG4gICAgICAoKCF0aGlzLl9jdWxsUmVxdWVzdHNXaGlsZU1vdmluZyAmJiB0aGlzLmZvdmVhdGVkVGltZURlbGF5IDw9IDApIHx8XG4gICAgICAgICF0aGlzLnNob3cpKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgb3JpZ2luYWxDb21tYW5kTGlzdCA9IGZyYW1lU3RhdGUuY29tbWFuZExpc3Q7XG4gIHZhciBvcmlnaW5hbENhbWVyYSA9IGZyYW1lU3RhdGUuY2FtZXJhO1xuICB2YXIgb3JpZ2luYWxDdWxsaW5nVm9sdW1lID0gZnJhbWVTdGF0ZS5jdWxsaW5nVm9sdW1lO1xuXG4gIHRpbGVzZXRQYXNzU3RhdGUucmVhZHkgPSBmYWxzZTtcblxuICB2YXIgcGFzc09wdGlvbnMgPSBDZXNpdW0zRFRpbGVQYXNzLmdldFBhc3NPcHRpb25zKHBhc3MpO1xuICB2YXIgaWdub3JlQ29tbWFuZHMgPSBwYXNzT3B0aW9ucy5pZ25vcmVDb21tYW5kcztcblxuICB2YXIgY29tbWFuZExpc3QgPSBkZWZhdWx0VmFsdWUoXG4gICAgdGlsZXNldFBhc3NTdGF0ZS5jb21tYW5kTGlzdCxcbiAgICBvcmlnaW5hbENvbW1hbmRMaXN0XG4gICk7XG4gIHZhciBjb21tYW5kU3RhcnQgPSBjb21tYW5kTGlzdC5sZW5ndGg7XG5cbiAgZnJhbWVTdGF0ZS5jb21tYW5kTGlzdCA9IGNvbW1hbmRMaXN0O1xuICBmcmFtZVN0YXRlLmNhbWVyYSA9IGRlZmF1bHRWYWx1ZSh0aWxlc2V0UGFzc1N0YXRlLmNhbWVyYSwgb3JpZ2luYWxDYW1lcmEpO1xuICBmcmFtZVN0YXRlLmN1bGxpbmdWb2x1bWUgPSBkZWZhdWx0VmFsdWUoXG4gICAgdGlsZXNldFBhc3NTdGF0ZS5jdWxsaW5nVm9sdW1lLFxuICAgIG9yaWdpbmFsQ3VsbGluZ1ZvbHVtZVxuICApO1xuXG4gIHZhciBwYXNzU3RhdGlzdGljcyA9IHRoaXMuX3N0YXRpc3RpY3NQZXJQYXNzW3Bhc3NdO1xuXG4gIGlmICh0aGlzLnNob3cgfHwgaWdub3JlQ29tbWFuZHMpIHtcbiAgICB0aGlzLl9wYXNzID0gcGFzcztcbiAgICB0aWxlc2V0UGFzc1N0YXRlLnJlYWR5ID0gdXBkYXRlKFxuICAgICAgdGhpcyxcbiAgICAgIGZyYW1lU3RhdGUsXG4gICAgICBwYXNzU3RhdGlzdGljcyxcbiAgICAgIHBhc3NPcHRpb25zXG4gICAgKTtcbiAgfVxuXG4gIGlmIChpZ25vcmVDb21tYW5kcykge1xuICAgIGNvbW1hbmRMaXN0Lmxlbmd0aCA9IGNvbW1hbmRTdGFydDtcbiAgfVxuXG4gIGZyYW1lU3RhdGUuY29tbWFuZExpc3QgPSBvcmlnaW5hbENvbW1hbmRMaXN0O1xuICBmcmFtZVN0YXRlLmNhbWVyYSA9IG9yaWdpbmFsQ2FtZXJhO1xuICBmcmFtZVN0YXRlLmN1bGxpbmdWb2x1bWUgPSBvcmlnaW5hbEN1bGxpbmdWb2x1bWU7XG59O1xuXG4vKipcbiAqIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSB0aWxlc2V0IEpTT04gZmlsZSBsaXN0cyB0aGUgZXh0ZW5zaW9uIGluIGV4dGVuc2lvbnNVc2VkOyBvdGhlcndpc2UsIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBleHRlbnNpb25OYW1lIFRoZSBuYW1lIG9mIHRoZSBleHRlbnNpb24gdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59IDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSB0aWxlc2V0IEpTT04gZmlsZSBsaXN0cyB0aGUgZXh0ZW5zaW9uIGluIGV4dGVuc2lvbnNVc2VkOyBvdGhlcndpc2UsIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiAqL1xuQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZS5oYXNFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uTmFtZSkge1xuICBpZiAoIWRlZmluZWQodGhpcy5fZXh0ZW5zaW9uc1VzZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2V4dGVuc2lvbnNVc2VkLmluZGV4T2YoZXh0ZW5zaW9uTmFtZSkgPiAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQ7IG90aGVyd2lzZSwgZmFsc2UuXG4gKiA8YnIgLz48YnIgLz5cbiAqIElmIHRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQsIGl0IHNob3VsZCBub3QgYmUgdXNlZDsgY2FsbGluZyBhbnkgZnVuY3Rpb24gb3RoZXIgdGhhblxuICogPGNvZGU+aXNEZXN0cm95ZWQ8L2NvZGU+IHdpbGwgcmVzdWx0IGluIGEge0BsaW5rIERldmVsb3BlckVycm9yfSBleGNlcHRpb24uXG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59IDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQ7IG90aGVyd2lzZSwgPGNvZGU+ZmFsc2U8L2NvZGU+LlxuICpcbiAqIEBzZWUgQ2VzaXVtM0RUaWxlc2V0I2Rlc3Ryb3lcbiAqL1xuQ2VzaXVtM0RUaWxlc2V0LnByb3RvdHlwZS5pc0Rlc3Ryb3llZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgV2ViR0wgcmVzb3VyY2VzIGhlbGQgYnkgdGhpcyBvYmplY3QuICBEZXN0cm95aW5nIGFuIG9iamVjdCBhbGxvd3MgZm9yIGRldGVybWluaXN0aWNcbiAqIHJlbGVhc2Ugb2YgV2ViR0wgcmVzb3VyY2VzLCBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvIGRlc3Ryb3kgdGhpcyBvYmplY3QuXG4gKiA8YnIgLz48YnIgLz5cbiAqIE9uY2UgYW4gb2JqZWN0IGlzIGRlc3Ryb3llZCwgaXQgc2hvdWxkIG5vdCBiZSB1c2VkOyBjYWxsaW5nIGFueSBmdW5jdGlvbiBvdGhlciB0aGFuXG4gKiA8Y29kZT5pc0Rlc3Ryb3llZDwvY29kZT4gd2lsbCByZXN1bHQgaW4gYSB7QGxpbmsgRGV2ZWxvcGVyRXJyb3J9IGV4Y2VwdGlvbi4gIFRoZXJlZm9yZSxcbiAqIGFzc2lnbiB0aGUgcmV0dXJuIHZhbHVlICg8Y29kZT51bmRlZmluZWQ8L2NvZGU+KSB0byB0aGUgb2JqZWN0IGFzIGRvbmUgaW4gdGhlIGV4YW1wbGUuXG4gKlxuICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IFRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQsIGkuZS4sIGRlc3Ryb3koKSB3YXMgY2FsbGVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiB0aWxlc2V0ID0gdGlsZXNldCAmJiB0aWxlc2V0LmRlc3Ryb3koKTtcbiAqXG4gKiBAc2VlIENlc2l1bTNEVGlsZXNldCNpc0Rlc3Ryb3llZFxuICovXG5DZXNpdW0zRFRpbGVzZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3RpbGVEZWJ1Z0xhYmVscyA9XG4gICAgdGhpcy5fdGlsZURlYnVnTGFiZWxzICYmIHRoaXMuX3RpbGVEZWJ1Z0xhYmVscy5kZXN0cm95KCk7XG4gIHRoaXMuX2NsaXBwaW5nUGxhbmVzID0gdGhpcy5fY2xpcHBpbmdQbGFuZXMgJiYgdGhpcy5fY2xpcHBpbmdQbGFuZXMuZGVzdHJveSgpO1xuXG4gIGlmIChkZWZpbmVkKHRoaXMuX3NjaGVtYUxvYWRlcikpIHtcbiAgICBSZXNvdXJjZUNhY2hlLnVubG9hZCh0aGlzLl9zY2hlbWFMb2FkZXIpO1xuICB9XG5cbiAgLy8gVHJhdmVyc2UgdGhlIHRyZWUgYW5kIGRlc3Ryb3kgYWxsIHRpbGVzXG4gIGlmIChkZWZpbmVkKHRoaXMuX3Jvb3QpKSB7XG4gICAgdmFyIHN0YWNrID0gc2NyYXRjaFN0YWNrO1xuICAgIHN0YWNrLnB1c2godGhpcy5fcm9vdCk7XG5cbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHRpbGUgPSBzdGFjay5wb3AoKTtcbiAgICAgIHRpbGUuZGVzdHJveSgpO1xuXG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aWxlLmNoaWxkcmVuO1xuICAgICAgdmFyIGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc3RhY2sucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcbiAgcmV0dXJuIGRlc3Ryb3lPYmplY3QodGhpcyk7XG59O1xuXG5DZXNpdW0zRFRpbGVzZXQuc3VwcG9ydGVkRXh0ZW5zaW9ucyA9IHtcbiAgXCIzRFRJTEVTX21ldGFkYXRhXCI6IHRydWUsXG4gIFwiM0RUSUxFU19pbXBsaWNpdF90aWxpbmdcIjogdHJ1ZSxcbiAgXCIzRFRJTEVTX2NvbnRlbnRfZ2x0ZlwiOiB0cnVlLFxuICBcIjNEVElMRVNfbXVsdGlwbGVfY29udGVudHNcIjogdHJ1ZSxcbiAgXCIzRFRJTEVTX2JvdW5kaW5nX3ZvbHVtZV9TMlwiOiB0cnVlLFxuICBcIjNEVElMRVNfYmF0Y2hfdGFibGVfaGllcmFyY2h5XCI6IHRydWUsXG4gIFwiM0RUSUxFU19kcmFjb19wb2ludF9jb21wcmVzc2lvblwiOiB0cnVlLFxufTtcblxuLyoqXG4gKiBDaGVja3MgdG8gc2VlIGlmIGEgZ2l2ZW4gZXh0ZW5zaW9uIGlzIHN1cHBvcnRlZCBieSBDZXNpdW0zRFRpbGVzZXQuIElmXG4gKiB0aGUgZXh0ZW5zaW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgQ2VzaXVtM0RUaWxlc2V0LCBpdCB0aHJvd3MgYSBSdW50aW1lRXJyb3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnNSZXF1aXJlZCBUaGUgZXh0ZW5zaW9ucyB3ZSB3aXNoIHRvIGNoZWNrXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2VzaXVtM0RUaWxlc2V0LmNoZWNrU3VwcG9ydGVkRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIChleHRlbnNpb25zUmVxdWlyZWQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRlbnNpb25zUmVxdWlyZWQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIUNlc2l1bTNEVGlsZXNldC5zdXBwb3J0ZWRFeHRlbnNpb25zW2V4dGVuc2lvbnNSZXF1aXJlZFtpXV0pIHtcbiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgICAgIFwiVW5zdXBwb3J0ZWQgM0QgVGlsZXMgRXh0ZW5zaW9uOiBcIiArIGV4dGVuc2lvbnNSZXF1aXJlZFtpXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogT3B0aW1pemF0aW9uIG9wdGlvbi4gVXNlZCBhcyBhIGNhbGxiYWNrIHdoZW4ge0BsaW5rIENlc2l1bTNEVGlsZXNldCNmb3ZlYXRlZFNjcmVlblNwYWNlRXJyb3J9IGlzIHRydWUgdG8gY29udHJvbCBob3cgbXVjaCB0byByYWlzZSB0aGUgc2NyZWVuIHNwYWNlIGVycm9yIGZvciB0aWxlcyBvdXRzaWRlIHRoZSBmb3ZlYXRlZCBjb25lLFxuICogaW50ZXJwb2xhdGluZyBiZXR3ZWVuIHtAbGluayBDZXNpdW0zRFRpbGVzZXQjZm92ZWF0ZWRNaW5pbXVtU2NyZWVuU3BhY2VFcnJvclJlbGF4YXRpb259IGFuZCB7QGxpbmsgQ2VzaXVtM0RUaWxlc2V0I21heGltdW1TY3JlZW5TcGFjZUVycm9yfS5cbiAqXG4gKiBAY2FsbGJhY2sgQ2VzaXVtM0RUaWxlc2V0LmZvdmVhdGVkSW50ZXJwb2xhdGlvbkNhbGxiYWNrXG4gKiBAZGVmYXVsdCBNYXRoLmxlcnBcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gcCBUaGUgc3RhcnQgdmFsdWUgdG8gaW50ZXJwb2xhdGUuXG4gKiBAcGFyYW0ge051bWJlcn0gcSBUaGUgZW5kIHZhbHVlIHRvIGludGVycG9sYXRlLlxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgVGhlIHRpbWUgb2YgaW50ZXJwb2xhdGlvbiBnZW5lcmFsbHkgaW4gdGhlIHJhbmdlIDxjb2RlPlswLjAsIDEuMF08L2NvZGU+LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVycG9sYXRlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgQ2VzaXVtM0RUaWxlc2V0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49104\n')},49494:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n/* harmony import */ var _Core_DoublyLinkedList_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96844);\n\n\n\n/**\n * Stores tiles with content loaded.\n *\n * @private\n */\nfunction Cesium3DTilesetCache() {\n  // [head, sentinel) -> tiles that weren\'t selected this frame and may be removed from the cache\n  // (sentinel, tail] -> tiles that were selected this frame\n  this._list = new _Core_DoublyLinkedList_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._sentinel = this._list.add();\n  this._trimTiles = false;\n}\n\nCesium3DTilesetCache.prototype.reset = function () {\n  // Move sentinel node to the tail so, at the start of the frame, all tiles\n  // may be potentially replaced.  Tiles are moved to the right of the sentinel\n  // when they are selected so they will not be replaced.\n  this._list.splice(this._list.tail, this._sentinel);\n};\n\nCesium3DTilesetCache.prototype.touch = function (tile) {\n  var node = tile.cacheNode;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(node)) {\n    this._list.splice(this._sentinel, node);\n  }\n};\n\nCesium3DTilesetCache.prototype.add = function (tile) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(tile.cacheNode)) {\n    tile.cacheNode = this._list.add(tile);\n  }\n};\n\nCesium3DTilesetCache.prototype.unloadTile = function (\n  tileset,\n  tile,\n  unloadCallback\n) {\n  var node = tile.cacheNode;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(node)) {\n    return;\n  }\n\n  this._list.remove(node);\n  tile.cacheNode = undefined;\n  unloadCallback(tileset, tile);\n};\n\nCesium3DTilesetCache.prototype.unloadTiles = function (\n  tileset,\n  unloadCallback\n) {\n  var trimTiles = this._trimTiles;\n  this._trimTiles = false;\n\n  var list = this._list;\n\n  var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n\n  // Traverse the list only to the sentinel since tiles/nodes to the\n  // right of the sentinel were used this frame.\n  //\n  // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n  var sentinel = this._sentinel;\n  var node = list.head;\n  while (\n    node !== sentinel &&\n    (tileset.totalMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)\n  ) {\n    var tile = node.item;\n    node = node.next;\n    this.unloadTile(tileset, tile, unloadCallback);\n  }\n};\n\nCesium3DTilesetCache.prototype.trim = function () {\n  this._trimTiles = true;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilesetCache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk0OTQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBeUM7QUFDa0I7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMEVBQWdCO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0scUVBQU87QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPLHFFQUFPO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8scUVBQU87QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseURBQWUsb0JBQW9CLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQ2VzaXVtM0RUaWxlc2V0Q2FjaGUuanM/ZmZkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5pbXBvcnQgRG91Ymx5TGlua2VkTGlzdCBmcm9tIFwiLi4vQ29yZS9Eb3VibHlMaW5rZWRMaXN0LmpzXCI7XG5cbi8qKlxuICogU3RvcmVzIHRpbGVzIHdpdGggY29udGVudCBsb2FkZWQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQ2VzaXVtM0RUaWxlc2V0Q2FjaGUoKSB7XG4gIC8vIFtoZWFkLCBzZW50aW5lbCkgLT4gdGlsZXMgdGhhdCB3ZXJlbid0IHNlbGVjdGVkIHRoaXMgZnJhbWUgYW5kIG1heSBiZSByZW1vdmVkIGZyb20gdGhlIGNhY2hlXG4gIC8vIChzZW50aW5lbCwgdGFpbF0gLT4gdGlsZXMgdGhhdCB3ZXJlIHNlbGVjdGVkIHRoaXMgZnJhbWVcbiAgdGhpcy5fbGlzdCA9IG5ldyBEb3VibHlMaW5rZWRMaXN0KCk7XG4gIHRoaXMuX3NlbnRpbmVsID0gdGhpcy5fbGlzdC5hZGQoKTtcbiAgdGhpcy5fdHJpbVRpbGVzID0gZmFsc2U7XG59XG5cbkNlc2l1bTNEVGlsZXNldENhY2hlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gTW92ZSBzZW50aW5lbCBub2RlIHRvIHRoZSB0YWlsIHNvLCBhdCB0aGUgc3RhcnQgb2YgdGhlIGZyYW1lLCBhbGwgdGlsZXNcbiAgLy8gbWF5IGJlIHBvdGVudGlhbGx5IHJlcGxhY2VkLiAgVGlsZXMgYXJlIG1vdmVkIHRvIHRoZSByaWdodCBvZiB0aGUgc2VudGluZWxcbiAgLy8gd2hlbiB0aGV5IGFyZSBzZWxlY3RlZCBzbyB0aGV5IHdpbGwgbm90IGJlIHJlcGxhY2VkLlxuICB0aGlzLl9saXN0LnNwbGljZSh0aGlzLl9saXN0LnRhaWwsIHRoaXMuX3NlbnRpbmVsKTtcbn07XG5cbkNlc2l1bTNEVGlsZXNldENhY2hlLnByb3RvdHlwZS50b3VjaCA9IGZ1bmN0aW9uICh0aWxlKSB7XG4gIHZhciBub2RlID0gdGlsZS5jYWNoZU5vZGU7XG4gIGlmIChkZWZpbmVkKG5vZGUpKSB7XG4gICAgdGhpcy5fbGlzdC5zcGxpY2UodGhpcy5fc2VudGluZWwsIG5vZGUpO1xuICB9XG59O1xuXG5DZXNpdW0zRFRpbGVzZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRpbGUpIHtcbiAgaWYgKCFkZWZpbmVkKHRpbGUuY2FjaGVOb2RlKSkge1xuICAgIHRpbGUuY2FjaGVOb2RlID0gdGhpcy5fbGlzdC5hZGQodGlsZSk7XG4gIH1cbn07XG5cbkNlc2l1bTNEVGlsZXNldENhY2hlLnByb3RvdHlwZS51bmxvYWRUaWxlID0gZnVuY3Rpb24gKFxuICB0aWxlc2V0LFxuICB0aWxlLFxuICB1bmxvYWRDYWxsYmFja1xuKSB7XG4gIHZhciBub2RlID0gdGlsZS5jYWNoZU5vZGU7XG4gIGlmICghZGVmaW5lZChub2RlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2xpc3QucmVtb3ZlKG5vZGUpO1xuICB0aWxlLmNhY2hlTm9kZSA9IHVuZGVmaW5lZDtcbiAgdW5sb2FkQ2FsbGJhY2sodGlsZXNldCwgdGlsZSk7XG59O1xuXG5DZXNpdW0zRFRpbGVzZXRDYWNoZS5wcm90b3R5cGUudW5sb2FkVGlsZXMgPSBmdW5jdGlvbiAoXG4gIHRpbGVzZXQsXG4gIHVubG9hZENhbGxiYWNrXG4pIHtcbiAgdmFyIHRyaW1UaWxlcyA9IHRoaXMuX3RyaW1UaWxlcztcbiAgdGhpcy5fdHJpbVRpbGVzID0gZmFsc2U7XG5cbiAgdmFyIGxpc3QgPSB0aGlzLl9saXN0O1xuXG4gIHZhciBtYXhpbXVtTWVtb3J5VXNhZ2VJbkJ5dGVzID0gdGlsZXNldC5tYXhpbXVtTWVtb3J5VXNhZ2UgKiAxMDI0ICogMTAyNDtcblxuICAvLyBUcmF2ZXJzZSB0aGUgbGlzdCBvbmx5IHRvIHRoZSBzZW50aW5lbCBzaW5jZSB0aWxlcy9ub2RlcyB0byB0aGVcbiAgLy8gcmlnaHQgb2YgdGhlIHNlbnRpbmVsIHdlcmUgdXNlZCB0aGlzIGZyYW1lLlxuICAvL1xuICAvLyBUaGUgc3ViLWxpc3QgdG8gdGhlIGxlZnQgb2YgdGhlIHNlbnRpbmVsIGlzIG9yZGVyZWQgZnJvbSBMUlUgdG8gTVJVLlxuICB2YXIgc2VudGluZWwgPSB0aGlzLl9zZW50aW5lbDtcbiAgdmFyIG5vZGUgPSBsaXN0LmhlYWQ7XG4gIHdoaWxlIChcbiAgICBub2RlICE9PSBzZW50aW5lbCAmJlxuICAgICh0aWxlc2V0LnRvdGFsTWVtb3J5VXNhZ2VJbkJ5dGVzID4gbWF4aW11bU1lbW9yeVVzYWdlSW5CeXRlcyB8fCB0cmltVGlsZXMpXG4gICkge1xuICAgIHZhciB0aWxlID0gbm9kZS5pdGVtO1xuICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgdGhpcy51bmxvYWRUaWxlKHRpbGVzZXQsIHRpbGUsIHVubG9hZENhbGxiYWNrKTtcbiAgfVxufTtcblxuQ2VzaXVtM0RUaWxlc2V0Q2FjaGUucHJvdG90eXBlLnRyaW0gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3RyaW1UaWxlcyA9IHRydWU7XG59O1xuZXhwb3J0IGRlZmF1bHQgQ2VzaXVtM0RUaWxlc2V0Q2FjaGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49494\n')},68263:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59947);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(55293);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99417);\n\n\n\n\n\n/**\n * A heatmap colorizer in a {@link Cesium3DTileset}. A tileset can colorize its visible tiles in a heatmap style.\n *\n * @alias Cesium3DTilesetHeatmap\n * @constructor\n * @private\n */\nfunction Cesium3DTilesetHeatmap(tilePropertyName) {\n  /**\n   * The tile variable to track for heatmap colorization.\n   * Tile\'s will be colorized relative to the other visible tile\'s values for this variable.\n   *\n   * @type {String}\n   */\n  this.tilePropertyName = tilePropertyName;\n\n  // Members that are updated every time a tile is colorized\n  this._minimum = Number.MAX_VALUE;\n  this._maximum = -Number.MAX_VALUE;\n\n  // Members that are updated once every frame\n  this._previousMinimum = Number.MAX_VALUE;\n  this._previousMaximum = -Number.MAX_VALUE;\n\n  // If defined uses a reference minimum maximum to colorize by instead of using last frames minimum maximum of rendered tiles.\n  // For example, the _loadTimestamp can get a better colorization using setReferenceMinimumMaximum in order to take accurate colored timing diffs of various scenes.\n  this._referenceMinimum = {};\n  this._referenceMaximum = {};\n}\n\n/**\n * Convert to a usable heatmap value (i.e. a number). Ensures that tile values that aren\'t stored as numbers can be used for colorization.\n * @private\n */\nfunction getHeatmapValue(tileValue, tilePropertyName) {\n  var value;\n  if (tilePropertyName === "_loadTimestamp") {\n    value = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].toDate */ .Z.toDate(tileValue).getTime();\n  } else {\n    value = tileValue;\n  }\n  return value;\n}\n\n/**\n * Sets the reference minimum and maximum for the variable name. Converted to numbers before they are stored.\n *\n * @param {Object} minimum The minimum reference value.\n * @param {Object} maximum The maximum reference value.\n * @param {String} tilePropertyName The tile variable that will use these reference values when it is colorized.\n */\nCesium3DTilesetHeatmap.prototype.setReferenceMinimumMaximum = function (\n  minimum,\n  maximum,\n  tilePropertyName\n) {\n  this._referenceMinimum[tilePropertyName] = getHeatmapValue(\n    minimum,\n    tilePropertyName\n  );\n  this._referenceMaximum[tilePropertyName] = getHeatmapValue(\n    maximum,\n    tilePropertyName\n  );\n};\n\nfunction getHeatmapValueAndUpdateMinimumMaximum(heatmap, tile) {\n  var tilePropertyName = heatmap.tilePropertyName;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(tilePropertyName)) {\n    var heatmapValue = getHeatmapValue(\n      tile[tilePropertyName],\n      tilePropertyName\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(heatmapValue)) {\n      heatmap.tilePropertyName = undefined;\n      return heatmapValue;\n    }\n    heatmap._maximum = Math.max(heatmapValue, heatmap._maximum);\n    heatmap._minimum = Math.min(heatmapValue, heatmap._minimum);\n    return heatmapValue;\n  }\n}\n\nvar heatmapColors = [\n  new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.1, 0.1, 0.1, 1), // Dark Gray\n  new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.153, 0.278, 0.878, 1), // Blue\n  new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.827, 0.231, 0.49, 1), // Pink\n  new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(0.827, 0.188, 0.22, 1), // Red\n  new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 0.592, 0.259, 1), // Orange\n  new _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(1.0, 0.843, 0.0, 1),\n]; // Yellow\n/**\n * Colorize the tile in heat map style based on where it lies within the minimum maximum window.\n * Heatmap colors are black, blue, pink, red, orange, yellow. \'Cold\' or low numbers will be black and blue, \'Hot\' or high numbers will be orange and yellow,\n * @param {Cesium3DTile} tile The tile to colorize relative to last frame\'s minimum and maximum values of all visible tiles.\n * @param {FrameState} frameState The frame state.\n */\nCesium3DTilesetHeatmap.prototype.colorize = function (tile, frameState) {\n  var tilePropertyName = this.tilePropertyName;\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(tilePropertyName) ||\n    !tile.contentAvailable ||\n    tile._selectedFrame !== frameState.frameNumber\n  ) {\n    return;\n  }\n\n  var heatmapValue = getHeatmapValueAndUpdateMinimumMaximum(this, tile);\n  var minimum = this._previousMinimum;\n  var maximum = this._previousMaximum;\n\n  if (minimum === Number.MAX_VALUE || maximum === -Number.MAX_VALUE) {\n    return;\n  }\n\n  // Shift the minimum maximum window down to 0\n  var shiftedMax = maximum - minimum + _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EPSILON7 */ .Z.EPSILON7; // Prevent divide by 0\n  var shiftedValue = _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clamp */ .Z.clamp(heatmapValue - minimum, 0.0, shiftedMax);\n\n  // Get position between minimum and maximum and convert that to a position in the color array\n  var zeroToOne = shiftedValue / shiftedMax;\n  var lastIndex = heatmapColors.length - 1.0;\n  var colorPosition = zeroToOne * lastIndex;\n\n  // Take floor and ceil of the value to get the two colors to lerp between, lerp using the fractional portion\n  var colorPositionFloor = Math.floor(colorPosition);\n  var colorPositionCeil = Math.ceil(colorPosition);\n  var t = colorPosition - colorPositionFloor;\n  var colorZero = heatmapColors[colorPositionFloor];\n  var colorOne = heatmapColors[colorPositionCeil];\n\n  // Perform the lerp\n  var finalColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].WHITE */ .Z.WHITE);\n  finalColor.red = _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].lerp */ .Z.lerp(colorZero.red, colorOne.red, t);\n  finalColor.green = _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].lerp */ .Z.lerp(colorZero.green, colorOne.green, t);\n  finalColor.blue = _Core_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].lerp */ .Z.lerp(colorZero.blue, colorOne.blue, t);\n  tile._debugColor = finalColor;\n};\n\n/**\n * Resets the tracked minimum maximum values for heatmap colorization. Happens right before tileset traversal.\n */\nCesium3DTilesetHeatmap.prototype.resetMinimumMaximum = function () {\n  // For heat map colorization\n  var tilePropertyName = this.tilePropertyName;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(tilePropertyName)) {\n    var referenceMinimum = this._referenceMinimum[tilePropertyName];\n    var referenceMaximum = this._referenceMaximum[tilePropertyName];\n    var useReference = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(referenceMinimum) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(referenceMaximum);\n    this._previousMinimum = useReference ? referenceMinimum : this._minimum;\n    this._previousMaximum = useReference ? referenceMaximum : this._maximum;\n    this._minimum = Number.MAX_VALUE;\n    this._maximum = -Number.MAX_VALUE;\n  }\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilesetHeatmap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68263\n')},67796:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _GroupMetadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11654);\n/* harmony import */ var _TilesetMetadata_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38715);\n\n\n\n\n\n\n/**\n * An object containing metadata about a 3D Tileset.\n * <p>\n * See the {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles.\n * </p>\n * <p>\n * This object represents the <code>3DTILES_metadata</code> object which\n * contains the schema ({@link MetadataSchema}), tileset metadata ({@link TilesetMetadata}), group metadata (dictionary of {@link GroupMetadata}), and metadata statistics (dictionary)\n * </p>\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.extension The extension JSON object.\n * @param {MetadataSchema} options.schema The parsed schema.\n *\n * @alias Cesium3DTilesetMetadata\n * @constructor\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium\'s standard deprecation policy.\n */\nfunction Cesium3DTilesetMetadata(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var extension = options.extension;\n\n  // The calling code is responsible for loading the schema.\n  // This keeps metadata parsing synchronous.\n  var schema = options.schema;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.extension", extension);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options.schema", schema);\n  //>>includeEnd(\'debug\');\n\n  var groups = {};\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(extension.groups)) {\n    for (var groupId in extension.groups) {\n      if (extension.groups.hasOwnProperty(groupId)) {\n        var group = extension.groups[groupId];\n        groups[groupId] = new _GroupMetadata_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z({\n          id: groupId,\n          group: extension.groups[groupId],\n          class: schema.classes[group.class],\n        });\n      }\n    }\n  }\n\n  var tileset;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(extension.tileset)) {\n    tileset = new _TilesetMetadata_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n      tileset: extension.tileset,\n      class: schema.classes[extension.tileset.class],\n    });\n  }\n\n  this._schema = schema;\n  this._groups = groups;\n  this._tileset = tileset;\n  this._statistics = extension.statistics;\n  this._extras = extension.extras;\n  this._extensions = extension.extensions;\n}\n\nObject.defineProperties(Cesium3DTilesetMetadata.prototype, {\n  /**\n   * Schema containing classes and enums.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {MetadataSchema}\n   * @readonly\n   * @private\n   */\n  schema: {\n    get: function () {\n      return this._schema;\n    },\n  },\n\n  /**\n   * Metadata about groups of content.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {Object.<String, GroupMetadata>}\n   * @readonly\n   * @private\n   */\n  groups: {\n    get: function () {\n      return this._groups;\n    },\n  },\n\n  /**\n   * Metadata about the tileset as a whole.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {TilesetMetadata}\n   * @readonly\n   * @private\n   */\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  /**\n   * Statistics about the metadata.\n   * <p>\n   * See the {@link https://github.com/CesiumGS/3d-tiles/blob/3d-tiles-next/extensions/3DTILES_metadata/schema/statistics.schema.json|statistics schema reference}\n   * in the 3D Tiles spec for the full set of properties.\n   * </p>\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  statistics: {\n    get: function () {\n      return this._statistics;\n    },\n  },\n\n  /**\n   * Extras in the JSON object.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {*}\n   * @readonly\n   * @private\n   */\n  extras: {\n    get: function () {\n      return this._extras;\n    },\n  },\n\n  /**\n   * Extensions in the JSON object.\n   *\n   * @memberof Cesium3DTilesetMetadata.prototype\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  extensions: {\n    get: function () {\n      return this._extensions;\n    },\n  },\n});\n\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilesetMetadata);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc3OTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFDYztBQUNWO0FBQ007QUFDSTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzSEFBc0g7QUFDbEk7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHFCQUFxQixzQkFBc0Isc0JBQXNCLGtDQUFrQyxvQkFBb0I7QUFDaEo7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBFQUFZLFVBQVUsZ0dBQXlCO0FBQzNEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUUsMkZBQW1CO0FBQ3JCLEVBQUUsMkZBQW1CO0FBQ3JCOztBQUVBO0FBQ0EsTUFBTSxxRUFBTztBQUNiO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrRUFBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSxxRUFBTztBQUNiLGtCQUFrQixvRUFBZTtBQUNqQztBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCx5REFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9TY2VuZS9DZXNpdW0zRFRpbGVzZXRNZXRhZGF0YS5qcz81YTQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGVjayBmcm9tIFwiLi4vQ29yZS9DaGVjay5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vQ29yZS9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi9Db3JlL2RlZmluZWQuanNcIjtcbmltcG9ydCBHcm91cE1ldGFkYXRhIGZyb20gXCIuL0dyb3VwTWV0YWRhdGEuanNcIjtcbmltcG9ydCBUaWxlc2V0TWV0YWRhdGEgZnJvbSBcIi4vVGlsZXNldE1ldGFkYXRhLmpzXCI7XG5cbi8qKlxuICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgbWV0YWRhdGEgYWJvdXQgYSAzRCBUaWxlc2V0LlxuICogPHA+XG4gKiBTZWUgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvM2QtdGlsZXMvdHJlZS8zZC10aWxlcy1uZXh0L2V4dGVuc2lvbnMvM0RUSUxFU19tZXRhZGF0YXwzRFRJTEVTX21ldGFkYXRhIEV4dGVuc2lvbn0gZm9yIDNEIFRpbGVzLlxuICogPC9wPlxuICogPHA+XG4gKiBUaGlzIG9iamVjdCByZXByZXNlbnRzIHRoZSA8Y29kZT4zRFRJTEVTX21ldGFkYXRhPC9jb2RlPiBvYmplY3Qgd2hpY2hcbiAqIGNvbnRhaW5zIHRoZSBzY2hlbWEgKHtAbGluayBNZXRhZGF0YVNjaGVtYX0pLCB0aWxlc2V0IG1ldGFkYXRhICh7QGxpbmsgVGlsZXNldE1ldGFkYXRhfSksIGdyb3VwIG1ldGFkYXRhIChkaWN0aW9uYXJ5IG9mIHtAbGluayBHcm91cE1ldGFkYXRhfSksIGFuZCBtZXRhZGF0YSBzdGF0aXN0aWNzIChkaWN0aW9uYXJ5KVxuICogPC9wPlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmV4dGVuc2lvbiBUaGUgZXh0ZW5zaW9uIEpTT04gb2JqZWN0LlxuICogQHBhcmFtIHtNZXRhZGF0YVNjaGVtYX0gb3B0aW9ucy5zY2hlbWEgVGhlIHBhcnNlZCBzY2hlbWEuXG4gKlxuICogQGFsaWFzIENlc2l1bTNEVGlsZXNldE1ldGFkYXRhXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyB1c2luZyBwYXJ0IG9mIHRoZSAzRCBUaWxlcyBzcGVjIHRoYXQgaXMgbm90IGZpbmFsIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IENlc2l1bSdzIHN0YW5kYXJkIGRlcHJlY2F0aW9uIHBvbGljeS5cbiAqL1xuZnVuY3Rpb24gQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGEob3B0aW9ucykge1xuICBvcHRpb25zID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMsIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QpO1xuICB2YXIgZXh0ZW5zaW9uID0gb3B0aW9ucy5leHRlbnNpb247XG5cbiAgLy8gVGhlIGNhbGxpbmcgY29kZSBpcyByZXNwb25zaWJsZSBmb3IgbG9hZGluZyB0aGUgc2NoZW1hLlxuICAvLyBUaGlzIGtlZXBzIG1ldGFkYXRhIHBhcnNpbmcgc3luY2hyb25vdXMuXG4gIHZhciBzY2hlbWEgPSBvcHRpb25zLnNjaGVtYTtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2Yub2JqZWN0KFwib3B0aW9ucy5leHRlbnNpb25cIiwgZXh0ZW5zaW9uKTtcbiAgQ2hlY2sudHlwZU9mLm9iamVjdChcIm9wdGlvbnMuc2NoZW1hXCIsIHNjaGVtYSk7XG4gIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xuXG4gIHZhciBncm91cHMgPSB7fTtcbiAgaWYgKGRlZmluZWQoZXh0ZW5zaW9uLmdyb3VwcykpIHtcbiAgICBmb3IgKHZhciBncm91cElkIGluIGV4dGVuc2lvbi5ncm91cHMpIHtcbiAgICAgIGlmIChleHRlbnNpb24uZ3JvdXBzLmhhc093blByb3BlcnR5KGdyb3VwSWQpKSB7XG4gICAgICAgIHZhciBncm91cCA9IGV4dGVuc2lvbi5ncm91cHNbZ3JvdXBJZF07XG4gICAgICAgIGdyb3Vwc1tncm91cElkXSA9IG5ldyBHcm91cE1ldGFkYXRhKHtcbiAgICAgICAgICBpZDogZ3JvdXBJZCxcbiAgICAgICAgICBncm91cDogZXh0ZW5zaW9uLmdyb3Vwc1tncm91cElkXSxcbiAgICAgICAgICBjbGFzczogc2NoZW1hLmNsYXNzZXNbZ3JvdXAuY2xhc3NdLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdGlsZXNldDtcbiAgaWYgKGRlZmluZWQoZXh0ZW5zaW9uLnRpbGVzZXQpKSB7XG4gICAgdGlsZXNldCA9IG5ldyBUaWxlc2V0TWV0YWRhdGEoe1xuICAgICAgdGlsZXNldDogZXh0ZW5zaW9uLnRpbGVzZXQsXG4gICAgICBjbGFzczogc2NoZW1hLmNsYXNzZXNbZXh0ZW5zaW9uLnRpbGVzZXQuY2xhc3NdLFxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3RpbGVzZXQgPSB0aWxlc2V0O1xuICB0aGlzLl9zdGF0aXN0aWNzID0gZXh0ZW5zaW9uLnN0YXRpc3RpY3M7XG4gIHRoaXMuX2V4dHJhcyA9IGV4dGVuc2lvbi5leHRyYXM7XG4gIHRoaXMuX2V4dGVuc2lvbnMgPSBleHRlbnNpb24uZXh0ZW5zaW9ucztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGEucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBTY2hlbWEgY29udGFpbmluZyBjbGFzc2VzIGFuZCBlbnVtcy5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldE1ldGFkYXRhLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TWV0YWRhdGFTY2hlbWF9XG4gICAqIEByZWFkb25seVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2NoZW1hOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2NoZW1hO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1ldGFkYXRhIGFib3V0IGdyb3VwcyBvZiBjb250ZW50LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGEucHJvdG90eXBlXG4gICAqIEB0eXBlIHtPYmplY3QuPFN0cmluZywgR3JvdXBNZXRhZGF0YT59XG4gICAqIEByZWFkb25seVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ3JvdXBzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ3JvdXBzO1xuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1ldGFkYXRhIGFib3V0IHRoZSB0aWxlc2V0IGFzIGEgd2hvbGUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXRNZXRhZGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge1RpbGVzZXRNZXRhZGF0YX1cbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aWxlc2V0OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdGlsZXNldDtcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBTdGF0aXN0aWNzIGFib3V0IHRoZSBtZXRhZGF0YS5cbiAgICogPHA+XG4gICAqIFNlZSB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9DZXNpdW1HUy8zZC10aWxlcy9ibG9iLzNkLXRpbGVzLW5leHQvZXh0ZW5zaW9ucy8zRFRJTEVTX21ldGFkYXRhL3NjaGVtYS9zdGF0aXN0aWNzLnNjaGVtYS5qc29ufHN0YXRpc3RpY3Mgc2NoZW1hIHJlZmVyZW5jZX1cbiAgICogaW4gdGhlIDNEIFRpbGVzIHNwZWMgZm9yIHRoZSBmdWxsIHNldCBvZiBwcm9wZXJ0aWVzLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBtZW1iZXJvZiBDZXNpdW0zRFRpbGVzZXRNZXRhZGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aXN0aWNzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdGlzdGljcztcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBFeHRyYXMgaW4gdGhlIEpTT04gb2JqZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGEucHJvdG90eXBlXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGV4dHJhczoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhcztcbiAgICB9LFxuICB9LFxuXG4gIC8qKlxuICAgKiBFeHRlbnNpb25zIGluIHRoZSBKU09OIG9iamVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIENlc2l1bTNEVGlsZXNldE1ldGFkYXRhLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGV4dGVuc2lvbnM6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9leHRlbnNpb25zO1xuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2VzaXVtM0RUaWxlc2V0TWV0YWRhdGE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67796\n')},1793:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84935);\n/* harmony import */ var _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67519);\n/* harmony import */ var _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(36819);\n\n\n\n\n/**\n * Traversal that loads all leaves that intersect the camera frustum.\n * Used to determine ray-tileset intersections during a pickFromRayMostDetailed call.\n *\n * @private\n */\nfunction Cesium3DTilesetMostDetailedTraversal() {}\n\nvar traversal = {\n  stack: new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  stackMaximumLength: 0,\n};\n\nCesium3DTilesetMostDetailedTraversal.selectTiles = function (\n  tileset,\n  frameState\n) {\n  tileset._selectedTiles.length = 0;\n  tileset._requestedTiles.length = 0;\n  tileset._hasMixedContent = false;\n\n  var ready = true;\n\n  var root = tileset.root;\n  root.updateVisibility(frameState);\n\n  if (!isVisible(root)) {\n    return ready;\n  }\n\n  var stack = traversal.stack;\n  stack.push(tileset.root);\n\n  while (stack.length > 0) {\n    traversal.stackMaximumLength = Math.max(\n      traversal.stackMaximumLength,\n      stack.length\n    );\n\n    var tile = stack.pop();\n    var add = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].ADD */ .Z.ADD;\n    var replace = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].REPLACE */ .Z.REPLACE;\n    var traverse = canTraverse(tileset, tile);\n\n    if (traverse) {\n      updateAndPushChildren(tileset, tile, stack, frameState);\n    }\n\n    if (add || (replace && !traverse)) {\n      loadTile(tileset, tile);\n      touchTile(tileset, tile, frameState);\n      selectDesiredTile(tileset, tile, frameState);\n\n      if (!hasEmptyContent(tile) && !tile.contentAvailable) {\n        ready = false;\n      }\n    }\n\n    visitTile(tileset);\n  }\n\n  traversal.stack.trim(traversal.stackMaximumLength);\n\n  return ready;\n};\n\nfunction isVisible(tile) {\n  return tile._visible && tile._inRequestVolume;\n}\n\nfunction hasEmptyContent(tile) {\n  return (\n    tile.hasEmptyContent || tile.hasTilesetContent || tile.hasImplicitContent\n  );\n}\n\nfunction hasUnloadedContent(tile) {\n  return !hasEmptyContent(tile) && tile.contentUnloaded;\n}\n\nfunction canTraverse(tileset, tile) {\n  if (tile.children.length === 0) {\n    return false;\n  }\n\n  if (tile.hasTilesetContent || tile.hasImplicitContent) {\n    // Traverse external tileset to visit its root tile\n    // Don\'t traverse if the subtree is expired because it will be destroyed\n    return !tile.contentExpired;\n  }\n\n  if (tile.hasEmptyContent) {\n    return true;\n  }\n\n  return true; // Keep traversing until a leave is hit\n}\n\nfunction updateAndPushChildren(tileset, tile, stack, frameState) {\n  var children = tile.children;\n  var length = children.length;\n\n  for (var i = 0; i < length; ++i) {\n    var child = children[i];\n    child.updateVisibility(frameState);\n    if (isVisible(child)) {\n      stack.push(child);\n    }\n  }\n}\n\nfunction loadTile(tileset, tile) {\n  if (hasUnloadedContent(tile) || tile.contentExpired) {\n    tile._priority = 0.0; // Highest priority\n    tileset._requestedTiles.push(tile);\n  }\n}\n\nfunction touchTile(tileset, tile, frameState) {\n  if (tile._touchedFrame === frameState.frameNumber) {\n    // Prevents another pass from touching the frame again\n    return;\n  }\n  tileset._cache.touch(tile);\n  tile._touchedFrame = frameState.frameNumber;\n}\n\nfunction visitTile(tileset) {\n  ++tileset.statistics.visited;\n}\n\nfunction selectDesiredTile(tileset, tile, frameState) {\n  if (\n    tile.contentAvailable &&\n    tile.contentVisibility(frameState) !== _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].OUTSIDE */ .Z.OUTSIDE\n  ) {\n    tileset._selectedTiles.push(tile);\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilesetMostDetailedTraversal);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5My5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBNkM7QUFDTTtBQUNNOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsc0VBQVk7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsK0VBQXNCO0FBQ3BELGtDQUFrQyx1RkFBMEI7QUFDNUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsbUZBQWlCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsb0NBQW9DLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvU2NlbmUvQ2VzaXVtM0RUaWxlc2V0TW9zdERldGFpbGVkVHJhdmVyc2FsLmpzPzdmZjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEludGVyc2VjdCBmcm9tIFwiLi4vQ29yZS9JbnRlcnNlY3QuanNcIjtcbmltcG9ydCBNYW5hZ2VkQXJyYXkgZnJvbSBcIi4uL0NvcmUvTWFuYWdlZEFycmF5LmpzXCI7XG5pbXBvcnQgQ2VzaXVtM0RUaWxlUmVmaW5lIGZyb20gXCIuL0Nlc2l1bTNEVGlsZVJlZmluZS5qc1wiO1xuXG4vKipcbiAqIFRyYXZlcnNhbCB0aGF0IGxvYWRzIGFsbCBsZWF2ZXMgdGhhdCBpbnRlcnNlY3QgdGhlIGNhbWVyYSBmcnVzdHVtLlxuICogVXNlZCB0byBkZXRlcm1pbmUgcmF5LXRpbGVzZXQgaW50ZXJzZWN0aW9ucyBkdXJpbmcgYSBwaWNrRnJvbVJheU1vc3REZXRhaWxlZCBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIENlc2l1bTNEVGlsZXNldE1vc3REZXRhaWxlZFRyYXZlcnNhbCgpIHt9XG5cbnZhciB0cmF2ZXJzYWwgPSB7XG4gIHN0YWNrOiBuZXcgTWFuYWdlZEFycmF5KCksXG4gIHN0YWNrTWF4aW11bUxlbmd0aDogMCxcbn07XG5cbkNlc2l1bTNEVGlsZXNldE1vc3REZXRhaWxlZFRyYXZlcnNhbC5zZWxlY3RUaWxlcyA9IGZ1bmN0aW9uIChcbiAgdGlsZXNldCxcbiAgZnJhbWVTdGF0ZVxuKSB7XG4gIHRpbGVzZXQuX3NlbGVjdGVkVGlsZXMubGVuZ3RoID0gMDtcbiAgdGlsZXNldC5fcmVxdWVzdGVkVGlsZXMubGVuZ3RoID0gMDtcbiAgdGlsZXNldC5faGFzTWl4ZWRDb250ZW50ID0gZmFsc2U7XG5cbiAgdmFyIHJlYWR5ID0gdHJ1ZTtcblxuICB2YXIgcm9vdCA9IHRpbGVzZXQucm9vdDtcbiAgcm9vdC51cGRhdGVWaXNpYmlsaXR5KGZyYW1lU3RhdGUpO1xuXG4gIGlmICghaXNWaXNpYmxlKHJvb3QpKSB7XG4gICAgcmV0dXJuIHJlYWR5O1xuICB9XG5cbiAgdmFyIHN0YWNrID0gdHJhdmVyc2FsLnN0YWNrO1xuICBzdGFjay5wdXNoKHRpbGVzZXQucm9vdCk7XG5cbiAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICB0cmF2ZXJzYWwuc3RhY2tNYXhpbXVtTGVuZ3RoID0gTWF0aC5tYXgoXG4gICAgICB0cmF2ZXJzYWwuc3RhY2tNYXhpbXVtTGVuZ3RoLFxuICAgICAgc3RhY2subGVuZ3RoXG4gICAgKTtcblxuICAgIHZhciB0aWxlID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGFkZCA9IHRpbGUucmVmaW5lID09PSBDZXNpdW0zRFRpbGVSZWZpbmUuQUREO1xuICAgIHZhciByZXBsYWNlID0gdGlsZS5yZWZpbmUgPT09IENlc2l1bTNEVGlsZVJlZmluZS5SRVBMQUNFO1xuICAgIHZhciB0cmF2ZXJzZSA9IGNhblRyYXZlcnNlKHRpbGVzZXQsIHRpbGUpO1xuXG4gICAgaWYgKHRyYXZlcnNlKSB7XG4gICAgICB1cGRhdGVBbmRQdXNoQ2hpbGRyZW4odGlsZXNldCwgdGlsZSwgc3RhY2ssIGZyYW1lU3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhZGQgfHwgKHJlcGxhY2UgJiYgIXRyYXZlcnNlKSkge1xuICAgICAgbG9hZFRpbGUodGlsZXNldCwgdGlsZSk7XG4gICAgICB0b3VjaFRpbGUodGlsZXNldCwgdGlsZSwgZnJhbWVTdGF0ZSk7XG4gICAgICBzZWxlY3REZXNpcmVkVGlsZSh0aWxlc2V0LCB0aWxlLCBmcmFtZVN0YXRlKTtcblxuICAgICAgaWYgKCFoYXNFbXB0eUNvbnRlbnQodGlsZSkgJiYgIXRpbGUuY29udGVudEF2YWlsYWJsZSkge1xuICAgICAgICByZWFkeSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZpc2l0VGlsZSh0aWxlc2V0KTtcbiAgfVxuXG4gIHRyYXZlcnNhbC5zdGFjay50cmltKHRyYXZlcnNhbC5zdGFja01heGltdW1MZW5ndGgpO1xuXG4gIHJldHVybiByZWFkeTtcbn07XG5cbmZ1bmN0aW9uIGlzVmlzaWJsZSh0aWxlKSB7XG4gIHJldHVybiB0aWxlLl92aXNpYmxlICYmIHRpbGUuX2luUmVxdWVzdFZvbHVtZTtcbn1cblxuZnVuY3Rpb24gaGFzRW1wdHlDb250ZW50KHRpbGUpIHtcbiAgcmV0dXJuIChcbiAgICB0aWxlLmhhc0VtcHR5Q29udGVudCB8fCB0aWxlLmhhc1RpbGVzZXRDb250ZW50IHx8IHRpbGUuaGFzSW1wbGljaXRDb250ZW50XG4gICk7XG59XG5cbmZ1bmN0aW9uIGhhc1VubG9hZGVkQ29udGVudCh0aWxlKSB7XG4gIHJldHVybiAhaGFzRW1wdHlDb250ZW50KHRpbGUpICYmIHRpbGUuY29udGVudFVubG9hZGVkO1xufVxuXG5mdW5jdGlvbiBjYW5UcmF2ZXJzZSh0aWxlc2V0LCB0aWxlKSB7XG4gIGlmICh0aWxlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aWxlLmhhc1RpbGVzZXRDb250ZW50IHx8IHRpbGUuaGFzSW1wbGljaXRDb250ZW50KSB7XG4gICAgLy8gVHJhdmVyc2UgZXh0ZXJuYWwgdGlsZXNldCB0byB2aXNpdCBpdHMgcm9vdCB0aWxlXG4gICAgLy8gRG9uJ3QgdHJhdmVyc2UgaWYgdGhlIHN1YnRyZWUgaXMgZXhwaXJlZCBiZWNhdXNlIGl0IHdpbGwgYmUgZGVzdHJveWVkXG4gICAgcmV0dXJuICF0aWxlLmNvbnRlbnRFeHBpcmVkO1xuICB9XG5cbiAgaWYgKHRpbGUuaGFzRW1wdHlDb250ZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTsgLy8gS2VlcCB0cmF2ZXJzaW5nIHVudGlsIGEgbGVhdmUgaXMgaGl0XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFuZFB1c2hDaGlsZHJlbih0aWxlc2V0LCB0aWxlLCBzdGFjaywgZnJhbWVTdGF0ZSkge1xuICB2YXIgY2hpbGRyZW4gPSB0aWxlLmNoaWxkcmVuO1xuICB2YXIgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBjaGlsZC51cGRhdGVWaXNpYmlsaXR5KGZyYW1lU3RhdGUpO1xuICAgIGlmIChpc1Zpc2libGUoY2hpbGQpKSB7XG4gICAgICBzdGFjay5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbG9hZFRpbGUodGlsZXNldCwgdGlsZSkge1xuICBpZiAoaGFzVW5sb2FkZWRDb250ZW50KHRpbGUpIHx8IHRpbGUuY29udGVudEV4cGlyZWQpIHtcbiAgICB0aWxlLl9wcmlvcml0eSA9IDAuMDsgLy8gSGlnaGVzdCBwcmlvcml0eVxuICAgIHRpbGVzZXQuX3JlcXVlc3RlZFRpbGVzLnB1c2godGlsZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG91Y2hUaWxlKHRpbGVzZXQsIHRpbGUsIGZyYW1lU3RhdGUpIHtcbiAgaWYgKHRpbGUuX3RvdWNoZWRGcmFtZSA9PT0gZnJhbWVTdGF0ZS5mcmFtZU51bWJlcikge1xuICAgIC8vIFByZXZlbnRzIGFub3RoZXIgcGFzcyBmcm9tIHRvdWNoaW5nIHRoZSBmcmFtZSBhZ2FpblxuICAgIHJldHVybjtcbiAgfVxuICB0aWxlc2V0Ll9jYWNoZS50b3VjaCh0aWxlKTtcbiAgdGlsZS5fdG91Y2hlZEZyYW1lID0gZnJhbWVTdGF0ZS5mcmFtZU51bWJlcjtcbn1cblxuZnVuY3Rpb24gdmlzaXRUaWxlKHRpbGVzZXQpIHtcbiAgKyt0aWxlc2V0LnN0YXRpc3RpY3MudmlzaXRlZDtcbn1cblxuZnVuY3Rpb24gc2VsZWN0RGVzaXJlZFRpbGUodGlsZXNldCwgdGlsZSwgZnJhbWVTdGF0ZSkge1xuICBpZiAoXG4gICAgdGlsZS5jb250ZW50QXZhaWxhYmxlICYmXG4gICAgdGlsZS5jb250ZW50VmlzaWJpbGl0eShmcmFtZVN0YXRlKSAhPT0gSW50ZXJzZWN0Lk9VVFNJREVcbiAgKSB7XG4gICAgdGlsZXNldC5fc2VsZWN0ZWRUaWxlcy5wdXNoKHRpbGUpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBDZXNpdW0zRFRpbGVzZXRNb3N0RGV0YWlsZWRUcmF2ZXJzYWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1793\n')},95883:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82982);\n\n\n/**\n * @private\n */\nfunction Cesium3DTilesetStatistics() {\n  // Rendering statistics\n  this.selected = 0;\n  this.visited = 0;\n  // Loading statistics\n  this.numberOfCommands = 0;\n  this.numberOfAttemptedRequests = 0;\n  this.numberOfPendingRequests = 0;\n  this.numberOfTilesProcessing = 0;\n  this.numberOfTilesWithContentReady = 0; // Number of tiles with content loaded, does not include empty tiles\n  this.numberOfTilesTotal = 0; // Number of tiles in tileset JSON (and other tileset JSON files as they are loaded)\n  this.numberOfLoadedTilesTotal = 0; // Running total of loaded tiles for the lifetime of the session\n  // Features statistics\n  this.numberOfFeaturesSelected = 0; // Number of features rendered\n  this.numberOfFeaturesLoaded = 0; // Number of features in memory\n  this.numberOfPointsSelected = 0;\n  this.numberOfPointsLoaded = 0;\n  this.numberOfTrianglesSelected = 0;\n  // Styling statistics\n  this.numberOfTilesStyled = 0;\n  this.numberOfFeaturesStyled = 0;\n  // Optimization statistics\n  this.numberOfTilesCulledWithChildrenUnion = 0;\n  // Memory statistics\n  this.geometryByteLength = 0;\n  this.texturesByteLength = 0;\n  this.batchTableByteLength = 0;\n}\n\nCesium3DTilesetStatistics.prototype.clear = function () {\n  this.selected = 0;\n  this.visited = 0;\n  this.numberOfCommands = 0;\n  this.numberOfAttemptedRequests = 0;\n  this.numberOfFeaturesSelected = 0;\n  this.numberOfPointsSelected = 0;\n  this.numberOfTrianglesSelected = 0;\n  this.numberOfTilesStyled = 0;\n  this.numberOfFeaturesStyled = 0;\n  this.numberOfTilesCulledWithChildrenUnion = 0;\n};\n\nfunction updatePointAndFeatureCounts(statistics, content, decrement, load) {\n  var contents = content.innerContents;\n  var pointsLength = content.pointsLength;\n  var trianglesLength = content.trianglesLength;\n  var featuresLength = content.featuresLength;\n  var geometryByteLength = content.geometryByteLength;\n  var texturesByteLength = content.texturesByteLength;\n  var batchTableByteLength = content.batchTableByteLength;\n\n  if (load) {\n    statistics.numberOfFeaturesLoaded += decrement\n      ? -featuresLength\n      : featuresLength;\n    statistics.numberOfPointsLoaded += decrement ? -pointsLength : pointsLength;\n    statistics.geometryByteLength += decrement\n      ? -geometryByteLength\n      : geometryByteLength;\n    statistics.texturesByteLength += decrement\n      ? -texturesByteLength\n      : texturesByteLength;\n    statistics.batchTableByteLength += decrement\n      ? -batchTableByteLength\n      : batchTableByteLength;\n  } else {\n    statistics.numberOfFeaturesSelected += decrement\n      ? -featuresLength\n      : featuresLength;\n    statistics.numberOfPointsSelected += decrement\n      ? -pointsLength\n      : pointsLength;\n    statistics.numberOfTrianglesSelected += decrement\n      ? -trianglesLength\n      : trianglesLength;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(contents)) {\n    var length = contents.length;\n    for (var i = 0; i < length; ++i) {\n      updatePointAndFeatureCounts(statistics, contents[i], decrement, load);\n    }\n  }\n}\n\nCesium3DTilesetStatistics.prototype.incrementSelectionCounts = function (\n  content\n) {\n  updatePointAndFeatureCounts(this, content, false, false);\n};\n\nCesium3DTilesetStatistics.prototype.incrementLoadCounts = function (content) {\n  updatePointAndFeatureCounts(this, content, false, true);\n};\n\nCesium3DTilesetStatistics.prototype.decrementLoadCounts = function (content) {\n  updatePointAndFeatureCounts(this, content, true, true);\n};\n\nCesium3DTilesetStatistics.clone = function (statistics, result) {\n  result.selected = statistics.selected;\n  result.visited = statistics.visited;\n  result.numberOfCommands = statistics.numberOfCommands;\n  result.selected = statistics.selected;\n  result.numberOfAttemptedRequests = statistics.numberOfAttemptedRequests;\n  result.numberOfPendingRequests = statistics.numberOfPendingRequests;\n  result.numberOfTilesProcessing = statistics.numberOfTilesProcessing;\n  result.numberOfTilesWithContentReady =\n    statistics.numberOfTilesWithContentReady;\n  result.numberOfTilesTotal = statistics.numberOfTilesTotal;\n  result.numberOfFeaturesSelected = statistics.numberOfFeaturesSelected;\n  result.numberOfFeaturesLoaded = statistics.numberOfFeaturesLoaded;\n  result.numberOfPointsSelected = statistics.numberOfPointsSelected;\n  result.numberOfPointsLoaded = statistics.numberOfPointsLoaded;\n  result.numberOfTrianglesSelected = statistics.numberOfTrianglesSelected;\n  result.numberOfTilesStyled = statistics.numberOfTilesStyled;\n  result.numberOfFeaturesStyled = statistics.numberOfFeaturesStyled;\n  result.numberOfTilesCulledWithChildrenUnion =\n    statistics.numberOfTilesCulledWithChildrenUnion;\n  result.geometryByteLength = statistics.geometryByteLength;\n  result.texturesByteLength = statistics.texturesByteLength;\n  result.batchTableByteLength = statistics.batchTableByteLength;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilesetStatistics);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU4ODMuanMiLCJtYXBwaW5ncyI6IjtBQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLCtCQUErQjtBQUMvQixxQ0FBcUM7QUFDckM7QUFDQSxxQ0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTSxxRUFBTztBQUNiO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUFlLHlCQUF5QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0Nlc2l1bTNEVGlsZXNldFN0YXRpc3RpY3MuanM/NTE3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vQ29yZS9kZWZpbmVkLmpzXCI7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQ2VzaXVtM0RUaWxlc2V0U3RhdGlzdGljcygpIHtcbiAgLy8gUmVuZGVyaW5nIHN0YXRpc3RpY3NcbiAgdGhpcy5zZWxlY3RlZCA9IDA7XG4gIHRoaXMudmlzaXRlZCA9IDA7XG4gIC8vIExvYWRpbmcgc3RhdGlzdGljc1xuICB0aGlzLm51bWJlck9mQ29tbWFuZHMgPSAwO1xuICB0aGlzLm51bWJlck9mQXR0ZW1wdGVkUmVxdWVzdHMgPSAwO1xuICB0aGlzLm51bWJlck9mUGVuZGluZ1JlcXVlc3RzID0gMDtcbiAgdGhpcy5udW1iZXJPZlRpbGVzUHJvY2Vzc2luZyA9IDA7XG4gIHRoaXMubnVtYmVyT2ZUaWxlc1dpdGhDb250ZW50UmVhZHkgPSAwOyAvLyBOdW1iZXIgb2YgdGlsZXMgd2l0aCBjb250ZW50IGxvYWRlZCwgZG9lcyBub3QgaW5jbHVkZSBlbXB0eSB0aWxlc1xuICB0aGlzLm51bWJlck9mVGlsZXNUb3RhbCA9IDA7IC8vIE51bWJlciBvZiB0aWxlcyBpbiB0aWxlc2V0IEpTT04gKGFuZCBvdGhlciB0aWxlc2V0IEpTT04gZmlsZXMgYXMgdGhleSBhcmUgbG9hZGVkKVxuICB0aGlzLm51bWJlck9mTG9hZGVkVGlsZXNUb3RhbCA9IDA7IC8vIFJ1bm5pbmcgdG90YWwgb2YgbG9hZGVkIHRpbGVzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNlc3Npb25cbiAgLy8gRmVhdHVyZXMgc3RhdGlzdGljc1xuICB0aGlzLm51bWJlck9mRmVhdHVyZXNTZWxlY3RlZCA9IDA7IC8vIE51bWJlciBvZiBmZWF0dXJlcyByZW5kZXJlZFxuICB0aGlzLm51bWJlck9mRmVhdHVyZXNMb2FkZWQgPSAwOyAvLyBOdW1iZXIgb2YgZmVhdHVyZXMgaW4gbWVtb3J5XG4gIHRoaXMubnVtYmVyT2ZQb2ludHNTZWxlY3RlZCA9IDA7XG4gIHRoaXMubnVtYmVyT2ZQb2ludHNMb2FkZWQgPSAwO1xuICB0aGlzLm51bWJlck9mVHJpYW5nbGVzU2VsZWN0ZWQgPSAwO1xuICAvLyBTdHlsaW5nIHN0YXRpc3RpY3NcbiAgdGhpcy5udW1iZXJPZlRpbGVzU3R5bGVkID0gMDtcbiAgdGhpcy5udW1iZXJPZkZlYXR1cmVzU3R5bGVkID0gMDtcbiAgLy8gT3B0aW1pemF0aW9uIHN0YXRpc3RpY3NcbiAgdGhpcy5udW1iZXJPZlRpbGVzQ3VsbGVkV2l0aENoaWxkcmVuVW5pb24gPSAwO1xuICAvLyBNZW1vcnkgc3RhdGlzdGljc1xuICB0aGlzLmdlb21ldHJ5Qnl0ZUxlbmd0aCA9IDA7XG4gIHRoaXMudGV4dHVyZXNCeXRlTGVuZ3RoID0gMDtcbiAgdGhpcy5iYXRjaFRhYmxlQnl0ZUxlbmd0aCA9IDA7XG59XG5cbkNlc2l1bTNEVGlsZXNldFN0YXRpc3RpY3MucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlbGVjdGVkID0gMDtcbiAgdGhpcy52aXNpdGVkID0gMDtcbiAgdGhpcy5udW1iZXJPZkNvbW1hbmRzID0gMDtcbiAgdGhpcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzID0gMDtcbiAgdGhpcy5udW1iZXJPZkZlYXR1cmVzU2VsZWN0ZWQgPSAwO1xuICB0aGlzLm51bWJlck9mUG9pbnRzU2VsZWN0ZWQgPSAwO1xuICB0aGlzLm51bWJlck9mVHJpYW5nbGVzU2VsZWN0ZWQgPSAwO1xuICB0aGlzLm51bWJlck9mVGlsZXNTdHlsZWQgPSAwO1xuICB0aGlzLm51bWJlck9mRmVhdHVyZXNTdHlsZWQgPSAwO1xuICB0aGlzLm51bWJlck9mVGlsZXNDdWxsZWRXaXRoQ2hpbGRyZW5VbmlvbiA9IDA7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVQb2ludEFuZEZlYXR1cmVDb3VudHMoc3RhdGlzdGljcywgY29udGVudCwgZGVjcmVtZW50LCBsb2FkKSB7XG4gIHZhciBjb250ZW50cyA9IGNvbnRlbnQuaW5uZXJDb250ZW50cztcbiAgdmFyIHBvaW50c0xlbmd0aCA9IGNvbnRlbnQucG9pbnRzTGVuZ3RoO1xuICB2YXIgdHJpYW5nbGVzTGVuZ3RoID0gY29udGVudC50cmlhbmdsZXNMZW5ndGg7XG4gIHZhciBmZWF0dXJlc0xlbmd0aCA9IGNvbnRlbnQuZmVhdHVyZXNMZW5ndGg7XG4gIHZhciBnZW9tZXRyeUJ5dGVMZW5ndGggPSBjb250ZW50Lmdlb21ldHJ5Qnl0ZUxlbmd0aDtcbiAgdmFyIHRleHR1cmVzQnl0ZUxlbmd0aCA9IGNvbnRlbnQudGV4dHVyZXNCeXRlTGVuZ3RoO1xuICB2YXIgYmF0Y2hUYWJsZUJ5dGVMZW5ndGggPSBjb250ZW50LmJhdGNoVGFibGVCeXRlTGVuZ3RoO1xuXG4gIGlmIChsb2FkKSB7XG4gICAgc3RhdGlzdGljcy5udW1iZXJPZkZlYXR1cmVzTG9hZGVkICs9IGRlY3JlbWVudFxuICAgICAgPyAtZmVhdHVyZXNMZW5ndGhcbiAgICAgIDogZmVhdHVyZXNMZW5ndGg7XG4gICAgc3RhdGlzdGljcy5udW1iZXJPZlBvaW50c0xvYWRlZCArPSBkZWNyZW1lbnQgPyAtcG9pbnRzTGVuZ3RoIDogcG9pbnRzTGVuZ3RoO1xuICAgIHN0YXRpc3RpY3MuZ2VvbWV0cnlCeXRlTGVuZ3RoICs9IGRlY3JlbWVudFxuICAgICAgPyAtZ2VvbWV0cnlCeXRlTGVuZ3RoXG4gICAgICA6IGdlb21ldHJ5Qnl0ZUxlbmd0aDtcbiAgICBzdGF0aXN0aWNzLnRleHR1cmVzQnl0ZUxlbmd0aCArPSBkZWNyZW1lbnRcbiAgICAgID8gLXRleHR1cmVzQnl0ZUxlbmd0aFxuICAgICAgOiB0ZXh0dXJlc0J5dGVMZW5ndGg7XG4gICAgc3RhdGlzdGljcy5iYXRjaFRhYmxlQnl0ZUxlbmd0aCArPSBkZWNyZW1lbnRcbiAgICAgID8gLWJhdGNoVGFibGVCeXRlTGVuZ3RoXG4gICAgICA6IGJhdGNoVGFibGVCeXRlTGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZGZWF0dXJlc1NlbGVjdGVkICs9IGRlY3JlbWVudFxuICAgICAgPyAtZmVhdHVyZXNMZW5ndGhcbiAgICAgIDogZmVhdHVyZXNMZW5ndGg7XG4gICAgc3RhdGlzdGljcy5udW1iZXJPZlBvaW50c1NlbGVjdGVkICs9IGRlY3JlbWVudFxuICAgICAgPyAtcG9pbnRzTGVuZ3RoXG4gICAgICA6IHBvaW50c0xlbmd0aDtcbiAgICBzdGF0aXN0aWNzLm51bWJlck9mVHJpYW5nbGVzU2VsZWN0ZWQgKz0gZGVjcmVtZW50XG4gICAgICA/IC10cmlhbmdsZXNMZW5ndGhcbiAgICAgIDogdHJpYW5nbGVzTGVuZ3RoO1xuICB9XG5cbiAgaWYgKGRlZmluZWQoY29udGVudHMpKSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbnRlbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICB1cGRhdGVQb2ludEFuZEZlYXR1cmVDb3VudHMoc3RhdGlzdGljcywgY29udGVudHNbaV0sIGRlY3JlbWVudCwgbG9hZCk7XG4gICAgfVxuICB9XG59XG5cbkNlc2l1bTNEVGlsZXNldFN0YXRpc3RpY3MucHJvdG90eXBlLmluY3JlbWVudFNlbGVjdGlvbkNvdW50cyA9IGZ1bmN0aW9uIChcbiAgY29udGVudFxuKSB7XG4gIHVwZGF0ZVBvaW50QW5kRmVhdHVyZUNvdW50cyh0aGlzLCBjb250ZW50LCBmYWxzZSwgZmFsc2UpO1xufTtcblxuQ2VzaXVtM0RUaWxlc2V0U3RhdGlzdGljcy5wcm90b3R5cGUuaW5jcmVtZW50TG9hZENvdW50cyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHVwZGF0ZVBvaW50QW5kRmVhdHVyZUNvdW50cyh0aGlzLCBjb250ZW50LCBmYWxzZSwgdHJ1ZSk7XG59O1xuXG5DZXNpdW0zRFRpbGVzZXRTdGF0aXN0aWNzLnByb3RvdHlwZS5kZWNyZW1lbnRMb2FkQ291bnRzID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgdXBkYXRlUG9pbnRBbmRGZWF0dXJlQ291bnRzKHRoaXMsIGNvbnRlbnQsIHRydWUsIHRydWUpO1xufTtcblxuQ2VzaXVtM0RUaWxlc2V0U3RhdGlzdGljcy5jbG9uZSA9IGZ1bmN0aW9uIChzdGF0aXN0aWNzLCByZXN1bHQpIHtcbiAgcmVzdWx0LnNlbGVjdGVkID0gc3RhdGlzdGljcy5zZWxlY3RlZDtcbiAgcmVzdWx0LnZpc2l0ZWQgPSBzdGF0aXN0aWNzLnZpc2l0ZWQ7XG4gIHJlc3VsdC5udW1iZXJPZkNvbW1hbmRzID0gc3RhdGlzdGljcy5udW1iZXJPZkNvbW1hbmRzO1xuICByZXN1bHQuc2VsZWN0ZWQgPSBzdGF0aXN0aWNzLnNlbGVjdGVkO1xuICByZXN1bHQubnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0cyA9IHN0YXRpc3RpY3MubnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0cztcbiAgcmVzdWx0Lm51bWJlck9mUGVuZGluZ1JlcXVlc3RzID0gc3RhdGlzdGljcy5udW1iZXJPZlBlbmRpbmdSZXF1ZXN0cztcbiAgcmVzdWx0Lm51bWJlck9mVGlsZXNQcm9jZXNzaW5nID0gc3RhdGlzdGljcy5udW1iZXJPZlRpbGVzUHJvY2Vzc2luZztcbiAgcmVzdWx0Lm51bWJlck9mVGlsZXNXaXRoQ29udGVudFJlYWR5ID1cbiAgICBzdGF0aXN0aWNzLm51bWJlck9mVGlsZXNXaXRoQ29udGVudFJlYWR5O1xuICByZXN1bHQubnVtYmVyT2ZUaWxlc1RvdGFsID0gc3RhdGlzdGljcy5udW1iZXJPZlRpbGVzVG90YWw7XG4gIHJlc3VsdC5udW1iZXJPZkZlYXR1cmVzU2VsZWN0ZWQgPSBzdGF0aXN0aWNzLm51bWJlck9mRmVhdHVyZXNTZWxlY3RlZDtcbiAgcmVzdWx0Lm51bWJlck9mRmVhdHVyZXNMb2FkZWQgPSBzdGF0aXN0aWNzLm51bWJlck9mRmVhdHVyZXNMb2FkZWQ7XG4gIHJlc3VsdC5udW1iZXJPZlBvaW50c1NlbGVjdGVkID0gc3RhdGlzdGljcy5udW1iZXJPZlBvaW50c1NlbGVjdGVkO1xuICByZXN1bHQubnVtYmVyT2ZQb2ludHNMb2FkZWQgPSBzdGF0aXN0aWNzLm51bWJlck9mUG9pbnRzTG9hZGVkO1xuICByZXN1bHQubnVtYmVyT2ZUcmlhbmdsZXNTZWxlY3RlZCA9IHN0YXRpc3RpY3MubnVtYmVyT2ZUcmlhbmdsZXNTZWxlY3RlZDtcbiAgcmVzdWx0Lm51bWJlck9mVGlsZXNTdHlsZWQgPSBzdGF0aXN0aWNzLm51bWJlck9mVGlsZXNTdHlsZWQ7XG4gIHJlc3VsdC5udW1iZXJPZkZlYXR1cmVzU3R5bGVkID0gc3RhdGlzdGljcy5udW1iZXJPZkZlYXR1cmVzU3R5bGVkO1xuICByZXN1bHQubnVtYmVyT2ZUaWxlc0N1bGxlZFdpdGhDaGlsZHJlblVuaW9uID1cbiAgICBzdGF0aXN0aWNzLm51bWJlck9mVGlsZXNDdWxsZWRXaXRoQ2hpbGRyZW5VbmlvbjtcbiAgcmVzdWx0Lmdlb21ldHJ5Qnl0ZUxlbmd0aCA9IHN0YXRpc3RpY3MuZ2VvbWV0cnlCeXRlTGVuZ3RoO1xuICByZXN1bHQudGV4dHVyZXNCeXRlTGVuZ3RoID0gc3RhdGlzdGljcy50ZXh0dXJlc0J5dGVMZW5ndGg7XG4gIHJlc3VsdC5iYXRjaFRhYmxlQnl0ZUxlbmd0aCA9IHN0YXRpc3RpY3MuYmF0Y2hUYWJsZUJ5dGVMZW5ndGg7XG59O1xuZXhwb3J0IGRlZmF1bHQgQ2VzaXVtM0RUaWxlc2V0U3RhdGlzdGljcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///95883\n')},67346:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82982);\n/* harmony import */ var _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84935);\n/* harmony import */ var _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67519);\n/* harmony import */ var _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1157);\n/* harmony import */ var _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(36819);\n\n\n\n\n\n\n/**\n * @private\n */\nfunction Cesium3DTilesetTraversal() {}\n\nfunction isVisible(tile) {\n  return tile._visible && tile._inRequestVolume;\n}\n\nvar traversal = {\n  stack: new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  stackMaximumLength: 0,\n};\n\nvar emptyTraversal = {\n  stack: new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  stackMaximumLength: 0,\n};\n\nvar descendantTraversal = {\n  stack: new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  stackMaximumLength: 0,\n};\n\nvar selectionTraversal = {\n  stack: new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  stackMaximumLength: 0,\n  ancestorStack: new _Core_ManagedArray_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(),\n  ancestorStackMaximumLength: 0,\n};\n\nvar descendantSelectionDepth = 2;\n\nCesium3DTilesetTraversal.selectTiles = function (tileset, frameState) {\n  tileset._requestedTiles.length = 0;\n\n  if (tileset.debugFreezeFrame) {\n    return;\n  }\n\n  tileset._selectedTiles.length = 0;\n  tileset._selectedTilesToStyle.length = 0;\n  tileset._emptyTiles.length = 0;\n  tileset._hasMixedContent = false;\n\n  var root = tileset.root;\n  updateTile(tileset, root, frameState);\n\n  // The root tile is not visible\n  if (!isVisible(root)) {\n    return;\n  }\n\n  // The tileset doesn\'t meet the SSE requirement, therefore the tree does not need to be rendered\n  if (\n    root.getScreenSpaceError(frameState, true) <=\n    tileset._maximumScreenSpaceError\n  ) {\n    return;\n  }\n\n  if (!skipLevelOfDetail(tileset)) {\n    executeBaseTraversal(tileset, root, frameState);\n  } else if (tileset.immediatelyLoadDesiredLevelOfDetail) {\n    executeSkipTraversal(tileset, root, frameState);\n  } else {\n    executeBaseAndSkipTraversal(tileset, root, frameState);\n  }\n\n  traversal.stack.trim(traversal.stackMaximumLength);\n  emptyTraversal.stack.trim(emptyTraversal.stackMaximumLength);\n  descendantTraversal.stack.trim(descendantTraversal.stackMaximumLength);\n  selectionTraversal.stack.trim(selectionTraversal.stackMaximumLength);\n  selectionTraversal.ancestorStack.trim(\n    selectionTraversal.ancestorStackMaximumLength\n  );\n\n  // Update the priority for any requests found during traversal\n  // Update after traversal so that min and max values can be used to normalize priority values\n  var requestedTiles = tileset._requestedTiles;\n  var length = requestedTiles.length;\n  for (var i = 0; i < length; ++i) {\n    requestedTiles[i].updatePriority();\n  }\n};\n\nfunction executeBaseTraversal(tileset, root, frameState) {\n  var baseScreenSpaceError = tileset._maximumScreenSpaceError;\n  var maximumScreenSpaceError = tileset._maximumScreenSpaceError;\n  executeTraversal(\n    tileset,\n    root,\n    baseScreenSpaceError,\n    maximumScreenSpaceError,\n    frameState\n  );\n}\n\nfunction executeSkipTraversal(tileset, root, frameState) {\n  var baseScreenSpaceError = Number.MAX_VALUE;\n  var maximumScreenSpaceError = tileset._maximumScreenSpaceError;\n  executeTraversal(\n    tileset,\n    root,\n    baseScreenSpaceError,\n    maximumScreenSpaceError,\n    frameState\n  );\n  traverseAndSelect(tileset, root, frameState);\n}\n\nfunction executeBaseAndSkipTraversal(tileset, root, frameState) {\n  var baseScreenSpaceError = Math.max(\n    tileset.baseScreenSpaceError,\n    tileset.maximumScreenSpaceError\n  );\n  var maximumScreenSpaceError = tileset.maximumScreenSpaceError;\n  executeTraversal(\n    tileset,\n    root,\n    baseScreenSpaceError,\n    maximumScreenSpaceError,\n    frameState\n  );\n  traverseAndSelect(tileset, root, frameState);\n}\n\nfunction skipLevelOfDetail(tileset) {\n  return tileset._skipLevelOfDetail;\n}\n\nfunction addEmptyTile(tileset, tile) {\n  tileset._emptyTiles.push(tile);\n}\n\nfunction selectTile(tileset, tile, frameState) {\n  if (tile.contentVisibility(frameState) !== _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].OUTSIDE */ .Z.OUTSIDE) {\n    var tileContent = tile.content;\n    if (tileContent.featurePropertiesDirty) {\n      // A feature\'s property in this tile changed, the tile needs to be re-styled.\n      tileContent.featurePropertiesDirty = false;\n      tile.lastStyleTime = 0; // Force applying the style to this tile\n      tileset._selectedTilesToStyle.push(tile);\n    } else if (tile._selectedFrame < frameState.frameNumber - 1) {\n      // Tile is newly selected; it is selected this frame, but was not selected last frame.\n      tileset._selectedTilesToStyle.push(tile);\n    }\n    tile._selectedFrame = frameState.frameNumber;\n    tileset._selectedTiles.push(tile);\n  }\n}\n\nfunction selectDescendants(tileset, root, frameState) {\n  var stack = descendantTraversal.stack;\n  stack.push(root);\n  while (stack.length > 0) {\n    descendantTraversal.stackMaximumLength = Math.max(\n      descendantTraversal.stackMaximumLength,\n      stack.length\n    );\n    var tile = stack.pop();\n    var children = tile.children;\n    var childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      var child = children[i];\n      if (isVisible(child)) {\n        if (child.contentAvailable) {\n          updateTile(tileset, child, frameState);\n          touchTile(tileset, child, frameState);\n          selectTile(tileset, child, frameState);\n        } else if (child._depth - root._depth < descendantSelectionDepth) {\n          // Continue traversing, but not too far\n          stack.push(child);\n        }\n      }\n    }\n  }\n}\n\nfunction selectDesiredTile(tileset, tile, frameState) {\n  if (!skipLevelOfDetail(tileset)) {\n    if (tile.contentAvailable) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      selectTile(tileset, tile, frameState);\n    }\n    return;\n  }\n\n  // If this tile is not loaded attempt to select its ancestor instead\n  var loadedTile = tile.contentAvailable\n    ? tile\n    : tile._ancestorWithContentAvailable;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(loadedTile)) {\n    // Tiles will actually be selected in traverseAndSelect\n    loadedTile._shouldSelect = true;\n  } else {\n    // If no ancestors are ready traverse down and select tiles to minimize empty regions.\n    // This happens often for immediatelyLoadDesiredLevelOfDetail where parent tiles are not necessarily loaded before zooming out.\n    selectDescendants(tileset, tile, frameState);\n  }\n}\n\nfunction visitTile(tileset, tile, frameState) {\n  ++tileset._statistics.visited;\n  tile._visitedFrame = frameState.frameNumber;\n}\n\nfunction touchTile(tileset, tile, frameState) {\n  if (tile._touchedFrame === frameState.frameNumber) {\n    // Prevents another pass from touching the frame again\n    return;\n  }\n  tileset._cache.touch(tile);\n  tile._touchedFrame = frameState.frameNumber;\n}\n\nfunction updateMinimumMaximumPriority(tileset, tile) {\n  tileset._maximumPriority.distance = Math.max(\n    tile._priorityHolder._distanceToCamera,\n    tileset._maximumPriority.distance\n  );\n  tileset._minimumPriority.distance = Math.min(\n    tile._priorityHolder._distanceToCamera,\n    tileset._minimumPriority.distance\n  );\n  tileset._maximumPriority.depth = Math.max(\n    tile._depth,\n    tileset._maximumPriority.depth\n  );\n  tileset._minimumPriority.depth = Math.min(\n    tile._depth,\n    tileset._minimumPriority.depth\n  );\n  tileset._maximumPriority.foveatedFactor = Math.max(\n    tile._priorityHolder._foveatedFactor,\n    tileset._maximumPriority.foveatedFactor\n  );\n  tileset._minimumPriority.foveatedFactor = Math.min(\n    tile._priorityHolder._foveatedFactor,\n    tileset._minimumPriority.foveatedFactor\n  );\n  tileset._maximumPriority.reverseScreenSpaceError = Math.max(\n    tile._priorityReverseScreenSpaceError,\n    tileset._maximumPriority.reverseScreenSpaceError\n  );\n  tileset._minimumPriority.reverseScreenSpaceError = Math.min(\n    tile._priorityReverseScreenSpaceError,\n    tileset._minimumPriority.reverseScreenSpaceError\n  );\n}\n\nfunction isOnScreenLongEnough(tileset, tile, frameState) {\n  // Prevent unnecessary loads while camera is moving by getting the ratio of travel distance to tile size.\n  if (!tileset._cullRequestsWhileMoving) {\n    return true;\n  }\n\n  var sphere = tile.boundingSphere;\n  var diameter = Math.max(sphere.radius * 2.0, 1.0);\n\n  var camera = frameState.camera;\n  var deltaMagnitude =\n    camera.positionWCDeltaMagnitude !== 0.0\n      ? camera.positionWCDeltaMagnitude\n      : camera.positionWCDeltaMagnitudeLastFrame;\n  var movementRatio =\n    (tileset.cullRequestsWhileMovingMultiplier * deltaMagnitude) / diameter; // How do n frames of this movement compare to the tile\'s physical size.\n  return movementRatio < 1.0;\n}\n\nfunction loadTile(tileset, tile, frameState) {\n  if (\n    tile._requestedFrame === frameState.frameNumber ||\n    (!hasUnloadedContent(tile) && !tile.contentExpired)\n  ) {\n    return;\n  }\n\n  if (!isOnScreenLongEnough(tileset, tile, frameState)) {\n    return;\n  }\n\n  var cameraHasNotStoppedMovingLongEnough =\n    frameState.camera.timeSinceMoved < tileset.foveatedTimeDelay;\n  if (tile.priorityDeferred && cameraHasNotStoppedMovingLongEnough) {\n    return;\n  }\n\n  tile._requestedFrame = frameState.frameNumber;\n  tileset._requestedTiles.push(tile);\n}\n\nfunction updateVisibility(tileset, tile, frameState) {\n  if (tile._updatedVisibilityFrame === tileset._updatedVisibilityFrame) {\n    // Return early if visibility has already been checked during the traversal.\n    // The visibility may have already been checked if the cullWithChildrenBounds optimization is used.\n    return;\n  }\n\n  tile.updateVisibility(frameState);\n  tile._updatedVisibilityFrame = tileset._updatedVisibilityFrame;\n}\n\nfunction anyChildrenVisible(tileset, tile, frameState) {\n  var anyVisible = false;\n  var children = tile.children;\n  var length = children.length;\n  for (var i = 0; i < length; ++i) {\n    var child = children[i];\n    updateVisibility(tileset, child, frameState);\n    anyVisible = anyVisible || isVisible(child);\n  }\n  return anyVisible;\n}\n\nfunction meetsScreenSpaceErrorEarly(tileset, tile, frameState) {\n  var parent = tile.parent;\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(parent) ||\n    parent.hasTilesetContent ||\n    parent.hasImplicitContent ||\n    parent.refine !== _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ADD */ .Z.ADD\n  ) {\n    return false;\n  }\n\n  // Use parent\'s geometric error with child\'s box to see if the tile already meet the SSE\n  return (\n    tile.getScreenSpaceError(frameState, true) <=\n    tileset._maximumScreenSpaceError\n  );\n}\n\nfunction updateTileVisibility(tileset, tile, frameState) {\n  updateVisibility(tileset, tile, frameState);\n\n  if (!isVisible(tile)) {\n    return;\n  }\n\n  var hasChildren = tile.children.length > 0;\n  if ((tile.hasTilesetContent || tile.hasImplicitContent) && hasChildren) {\n    // Use the root tile\'s visibility instead of this tile\'s visibility.\n    // The root tile may be culled by the children bounds optimization in which\n    // case this tile should also be culled.\n    var child = tile.children[0];\n    updateTileVisibility(tileset, child, frameState);\n    tile._visible = child._visible;\n    return;\n  }\n\n  if (meetsScreenSpaceErrorEarly(tileset, tile, frameState)) {\n    tile._visible = false;\n    return;\n  }\n\n  // Optimization - if none of the tile\'s children are visible then this tile isn\'t visible\n  var replace = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].REPLACE */ .Z.REPLACE;\n  var useOptimization =\n    tile._optimChildrenWithinParent ===\n    _Cesium3DTileOptimizationHint_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].USE_OPTIMIZATION */ .Z.USE_OPTIMIZATION;\n  if (replace && useOptimization && hasChildren) {\n    if (!anyChildrenVisible(tileset, tile, frameState)) {\n      ++tileset._statistics.numberOfTilesCulledWithChildrenUnion;\n      tile._visible = false;\n      return;\n    }\n  }\n}\n\nfunction updateTile(tileset, tile, frameState) {\n  // Reset some of the tile\'s flags and re-evaluate visibility\n  updateTileVisibility(tileset, tile, frameState);\n  tile.updateExpiration();\n\n  // Request priority\n  tile._wasMinPriorityChild = false;\n  tile._priorityHolder = tile;\n  updateMinimumMaximumPriority(tileset, tile);\n\n  // SkipLOD\n  tile._shouldSelect = false;\n  tile._finalResolution = true;\n}\n\nfunction updateTileAncestorContentLinks(tile, frameState) {\n  tile._ancestorWithContent = undefined;\n  tile._ancestorWithContentAvailable = undefined;\n\n  var parent = tile.parent;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(parent)) {\n    // ancestorWithContent is an ancestor that has content or has the potential to have\n    // content. Used in conjunction with tileset.skipLevels to know when to skip a tile.\n    // ancestorWithContentAvailable is an ancestor that is rendered if a desired tile is not loaded.\n    var hasContent =\n      !hasUnloadedContent(parent) ||\n      parent._requestedFrame === frameState.frameNumber;\n    tile._ancestorWithContent = hasContent\n      ? parent\n      : parent._ancestorWithContent;\n    tile._ancestorWithContentAvailable = parent.contentAvailable\n      ? parent\n      : parent._ancestorWithContentAvailable; // Links a descendant up to its contentAvailable ancestor as the traversal progresses.\n  }\n}\n\nfunction hasEmptyContent(tile) {\n  return (\n    tile.hasEmptyContent || tile.hasTilesetContent || tile.hasImplicitContent\n  );\n}\n\nfunction hasUnloadedContent(tile) {\n  return !hasEmptyContent(tile) && tile.contentUnloaded;\n}\n\nfunction reachedSkippingThreshold(tileset, tile) {\n  var ancestor = tile._ancestorWithContent;\n  return (\n    !tileset.immediatelyLoadDesiredLevelOfDetail &&\n    (tile._priorityProgressiveResolutionScreenSpaceErrorLeaf ||\n      ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(ancestor) &&\n        tile._screenSpaceError <\n          ancestor._screenSpaceError / tileset.skipScreenSpaceErrorFactor &&\n        tile._depth > ancestor._depth + tileset.skipLevels))\n  );\n}\n\nfunction sortChildrenByDistanceToCamera(a, b) {\n  // Sort by farthest child first since this is going on a stack\n  if (b._distanceToCamera === 0 && a._distanceToCamera === 0) {\n    return b._centerZDepth - a._centerZDepth;\n  }\n\n  return b._distanceToCamera - a._distanceToCamera;\n}\n\nfunction updateAndPushChildren(tileset, tile, stack, frameState) {\n  var i;\n  var replace = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].REPLACE */ .Z.REPLACE;\n  var children = tile.children;\n  var length = children.length;\n\n  for (i = 0; i < length; ++i) {\n    updateTile(tileset, children[i], frameState);\n  }\n\n  // Sort by distance to take advantage of early Z and reduce artifacts for skipLevelOfDetail\n  children.sort(sortChildrenByDistanceToCamera);\n\n  // For traditional replacement refinement only refine if all children are loaded.\n  // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n  var checkRefines =\n    !skipLevelOfDetail(tileset) && replace && !hasEmptyContent(tile);\n  var refines = true;\n\n  var anyChildrenVisible = false;\n\n  // Determining min child\n  var minIndex = -1;\n  var minimumPriority = Number.MAX_VALUE;\n\n  var child;\n  for (i = 0; i < length; ++i) {\n    child = children[i];\n    if (isVisible(child)) {\n      stack.push(child);\n      if (child._foveatedFactor < minimumPriority) {\n        minIndex = i;\n        minimumPriority = child._foveatedFactor;\n      }\n      anyChildrenVisible = true;\n    } else if (checkRefines || tileset.loadSiblings) {\n      // Keep non-visible children loaded since they are still needed before the parent can refine.\n      // Or loadSiblings is true so always load tiles regardless of visibility.\n      if (child._foveatedFactor < minimumPriority) {\n        minIndex = i;\n        minimumPriority = child._foveatedFactor;\n      }\n      loadTile(tileset, child, frameState);\n      touchTile(tileset, child, frameState);\n    }\n    if (checkRefines) {\n      var childRefines;\n      if (!child._inRequestVolume) {\n        childRefines = false;\n      } else if (hasEmptyContent(child)) {\n        childRefines = executeEmptyTraversal(tileset, child, frameState);\n      } else {\n        childRefines = child.contentAvailable;\n      }\n      refines = refines && childRefines;\n    }\n  }\n\n  if (!anyChildrenVisible) {\n    refines = false;\n  }\n\n  if (minIndex !== -1 && !skipLevelOfDetail(tileset) && replace) {\n    // An ancestor will hold the _foveatedFactor and _distanceToCamera for descendants between itself and its highest priority descendant. Siblings of a min children along the way use this ancestor as their priority holder as well.\n    // Priority of all tiles that refer to the _foveatedFactor and _distanceToCamera stored in the common ancestor will be differentiated based on their _depth.\n    var minPriorityChild = children[minIndex];\n    minPriorityChild._wasMinPriorityChild = true;\n    var priorityHolder =\n      (tile._wasMinPriorityChild || tile === tileset.root) &&\n      minimumPriority <= tile._priorityHolder._foveatedFactor\n        ? tile._priorityHolder\n        : tile; // This is where priority dependency chains are wired up or started anew.\n    priorityHolder._foveatedFactor = Math.min(\n      minPriorityChild._foveatedFactor,\n      priorityHolder._foveatedFactor\n    );\n    priorityHolder._distanceToCamera = Math.min(\n      minPriorityChild._distanceToCamera,\n      priorityHolder._distanceToCamera\n    );\n\n    for (i = 0; i < length; ++i) {\n      child = children[i];\n      child._priorityHolder = priorityHolder;\n    }\n  }\n\n  return refines;\n}\n\nfunction inBaseTraversal(tileset, tile, baseScreenSpaceError) {\n  if (!skipLevelOfDetail(tileset)) {\n    return true;\n  }\n  if (tileset.immediatelyLoadDesiredLevelOfDetail) {\n    return false;\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(tile._ancestorWithContent)) {\n    // Include root or near-root tiles in the base traversal so there is something to select up to\n    return true;\n  }\n  if (tile._screenSpaceError === 0.0) {\n    // If a leaf, use parent\'s SSE\n    return tile.parent._screenSpaceError > baseScreenSpaceError;\n  }\n  return tile._screenSpaceError > baseScreenSpaceError;\n}\n\nfunction canTraverse(tileset, tile) {\n  if (tile.children.length === 0) {\n    return false;\n  }\n  if (tile.hasTilesetContent || tile.hasImplicitContent) {\n    // Traverse external tileset to visit its root tile\n    // Don\'t traverse if the subtree is expired because it will be destroyed\n    return !tile.contentExpired;\n  }\n  return tile._screenSpaceError > tileset._maximumScreenSpaceError;\n}\n\nfunction executeTraversal(\n  tileset,\n  root,\n  baseScreenSpaceError,\n  maximumScreenSpaceError,\n  frameState\n) {\n  // Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n  // If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n  // This is the traditional replacement refinement approach and is called the base traversal.\n  // Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n  // all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n  // and rendering children and parent tiles simultaneously.\n  var stack = traversal.stack;\n  stack.push(root);\n\n  while (stack.length > 0) {\n    traversal.stackMaximumLength = Math.max(\n      traversal.stackMaximumLength,\n      stack.length\n    );\n\n    var tile = stack.pop();\n\n    updateTileAncestorContentLinks(tile, frameState);\n    var baseTraversal = inBaseTraversal(tileset, tile, baseScreenSpaceError);\n    var add = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ADD */ .Z.ADD;\n    var replace = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].REPLACE */ .Z.REPLACE;\n    var parent = tile.parent;\n    var parentRefines = !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(parent) || parent._refines;\n    var refines = false;\n\n    if (canTraverse(tileset, tile)) {\n      refines =\n        updateAndPushChildren(tileset, tile, stack, frameState) &&\n        parentRefines;\n    }\n\n    var stoppedRefining = !refines && parentRefines;\n\n    if (hasEmptyContent(tile)) {\n      // Add empty tile just to show its debug bounding volume\n      // If the tile has tileset content load the external tileset\n      // If the tile cannot refine further select its nearest loaded ancestor\n      addEmptyTile(tileset, tile, frameState);\n      loadTile(tileset, tile, frameState);\n      if (stoppedRefining) {\n        selectDesiredTile(tileset, tile, frameState);\n      }\n    } else if (add) {\n      // Additive tiles are always loaded and selected\n      selectDesiredTile(tileset, tile, frameState);\n      loadTile(tileset, tile, frameState);\n    } else if (replace) {\n      if (baseTraversal) {\n        // Always load tiles in the base traversal\n        // Select tiles that can\'t refine further\n        loadTile(tileset, tile, frameState);\n        if (stoppedRefining) {\n          selectDesiredTile(tileset, tile, frameState);\n        }\n      } else if (stoppedRefining) {\n        // In skip traversal, load and select tiles that can\'t refine further\n        selectDesiredTile(tileset, tile, frameState);\n        loadTile(tileset, tile, frameState);\n      } else if (reachedSkippingThreshold(tileset, tile)) {\n        // In skip traversal, load tiles that aren\'t skipped. In practice roughly half the tiles stay unloaded.\n        loadTile(tileset, tile, frameState);\n      }\n    }\n\n    visitTile(tileset, tile, frameState);\n    touchTile(tileset, tile, frameState);\n    tile._refines = refines;\n  }\n}\n\nfunction executeEmptyTraversal(tileset, root, frameState) {\n  // Depth-first traversal that checks if all nearest descendants with content are loaded. Ignores visibility.\n  var allDescendantsLoaded = true;\n  var stack = emptyTraversal.stack;\n  stack.push(root);\n\n  while (stack.length > 0) {\n    emptyTraversal.stackMaximumLength = Math.max(\n      emptyTraversal.stackMaximumLength,\n      stack.length\n    );\n\n    var tile = stack.pop();\n    var children = tile.children;\n    var childrenLength = children.length;\n\n    // Only traverse if the tile is empty - traversal stop at descendants with content\n    var emptyContent = hasEmptyContent(tile);\n    var traverse = emptyContent && canTraverse(tileset, tile);\n    var emptyLeaf = emptyContent && tile.children.length === 0;\n\n    // Traversal stops but the tile does not have content yet\n    // There will be holes if the parent tries to refine to its children, so don\'t refine\n    // One exception: a parent may refine even if one of its descendants is an empty leaf\n    if (!traverse && !tile.contentAvailable && !emptyLeaf) {\n      allDescendantsLoaded = false;\n    }\n\n    updateTile(tileset, tile, frameState);\n    if (!isVisible(tile)) {\n      // Load tiles that aren\'t visible since they are still needed for the parent to refine\n      loadTile(tileset, tile, frameState);\n      touchTile(tileset, tile, frameState);\n    }\n\n    if (traverse) {\n      for (var i = 0; i < childrenLength; ++i) {\n        var child = children[i];\n        stack.push(child);\n      }\n    }\n  }\n\n  return allDescendantsLoaded;\n}\n\n/**\n * Traverse the tree and check if their selected frame is the current frame. If so, add it to a selection queue.\n * This is a preorder traversal so children tiles are selected before ancestor tiles.\n *\n * The reason for the preorder traversal is so that tiles can easily be marked with their\n * selection depth. A tile\'s _selectionDepth is its depth in the tree where all non-selected tiles are removed.\n * This property is important for use in the stencil test because we want to render deeper tiles on top of their\n * ancestors. If a tileset is very deep, the depth is unlikely to fit into the stencil buffer.\n *\n * We want to select children before their ancestors because there is no guarantee on the relationship between\n * the children\'s z-depth and the ancestor\'s z-depth. We cannot rely on Z because we want the child to appear on top\n * of ancestor regardless of true depth. The stencil tests used require children to be drawn first.\n *\n * NOTE: 3D Tiles uses 3 bits from the stencil buffer meaning this will not work when there is a chain of\n * selected tiles that is deeper than 7. This is not very likely.\n * @private\n */\nfunction traverseAndSelect(tileset, root, frameState) {\n  var stack = selectionTraversal.stack;\n  var ancestorStack = selectionTraversal.ancestorStack;\n  var lastAncestor;\n\n  stack.push(root);\n\n  while (stack.length > 0 || ancestorStack.length > 0) {\n    selectionTraversal.stackMaximumLength = Math.max(\n      selectionTraversal.stackMaximumLength,\n      stack.length\n    );\n    selectionTraversal.ancestorStackMaximumLength = Math.max(\n      selectionTraversal.ancestorStackMaximumLength,\n      ancestorStack.length\n    );\n\n    if (ancestorStack.length > 0) {\n      var waitingTile = ancestorStack.peek();\n      if (waitingTile._stackLength === stack.length) {\n        ancestorStack.pop();\n        if (waitingTile !== lastAncestor) {\n          waitingTile._finalResolution = false;\n        }\n        selectTile(tileset, waitingTile, frameState);\n        continue;\n      }\n    }\n\n    var tile = stack.pop();\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(tile)) {\n      // stack is empty but ancestorStack isn\'t\n      continue;\n    }\n\n    var add = tile.refine === _Cesium3DTileRefine_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].ADD */ .Z.ADD;\n    var shouldSelect = tile._shouldSelect;\n    var children = tile.children;\n    var childrenLength = children.length;\n    var traverse = canTraverse(tileset, tile);\n\n    if (shouldSelect) {\n      if (add) {\n        selectTile(tileset, tile, frameState);\n      } else {\n        tile._selectionDepth = ancestorStack.length;\n        if (tile._selectionDepth > 0) {\n          tileset._hasMixedContent = true;\n        }\n        lastAncestor = tile;\n        if (!traverse) {\n          selectTile(tileset, tile, frameState);\n          continue;\n        }\n        ancestorStack.push(tile);\n        tile._stackLength = stack.length;\n      }\n    }\n\n    if (traverse) {\n      for (var i = 0; i < childrenLength; ++i) {\n        var child = children[i];\n        if (isVisible(child)) {\n          stack.push(child);\n        }\n      }\n    }\n  }\n}\n/* harmony default export */ __webpack_exports__["Z"] = (Cesium3DTilesetTraversal);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///67346\n')},27377:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66553);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99417);\n\n\n\n\n\n/**\n * A ParticleEmitter that emits particles from a circle.\n * Particles will be positioned within a circle and have initial velocities going along the z vector.\n *\n * @alias CircleEmitter\n * @constructor\n *\n * @param {Number} [radius=1.0] The radius of the circle in meters.\n */\nfunction CircleEmitter(radius) {\n  radius = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(radius, 1.0);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("radius", radius, 0.0);\n  //>>includeEnd(\'debug\');\n\n  this._radius = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(radius, 1.0);\n}\n\nObject.defineProperties(CircleEmitter.prototype, {\n  /**\n   * The radius of the circle in meters.\n   * @memberof CircleEmitter.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  radius: {\n    get: function () {\n      return this._radius;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Core_Check_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].typeOf.number.greaterThan */ .Z.typeOf.number.greaterThan("value", value, 0.0);\n      //>>includeEnd(\'debug\');\n      this._radius = value;\n    },\n  },\n});\n\n/**\n * Initializes the given {@link Particle} by setting it\'s position and velocity.\n *\n * @private\n * @param {Particle} particle The particle to initialize.\n */\nCircleEmitter.prototype.emit = function (particle) {\n  var theta = _Core_Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].randomBetween */ .Z.randomBetween(0.0, _Core_Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].TWO_PI */ .Z.TWO_PI);\n  var rad = _Core_Math_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].randomBetween */ .Z.randomBetween(0.0, this._radius);\n\n  var x = rad * Math.cos(theta);\n  var y = rad * Math.sin(theta);\n  var z = 0.0;\n\n  particle.position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].fromElements */ .Z.fromElements(x, y, z, particle.position);\n  particle.velocity = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].UNIT_Z */ .Z.UNIT_Z, particle.velocity);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (CircleEmitter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjczNzcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUErQztBQUNWO0FBQ2M7QUFDVjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFdBQVcsMEVBQVk7O0FBRXZCO0FBQ0EsRUFBRSxtSEFBK0I7QUFDakM7O0FBRUEsaUJBQWlCLDBFQUFZO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU0sbUhBQStCO0FBQ3JDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQSwwQkFBMEIsZ0JBQWdCO0FBQzFDO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLGNBQWMsMEZBQXdCLE1BQU0sNEVBQWlCO0FBQzdELFlBQVksMEZBQXdCOztBQUVwQztBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLDhGQUF1QjtBQUM3QyxzQkFBc0IsZ0ZBQWdCLENBQUMsa0ZBQWlCO0FBQ3hEO0FBQ0EseURBQWUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL1NjZW5lL0NpcmNsZUVtaXR0ZXIuanM/NWU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2FydGVzaWFuMyBmcm9tIFwiLi4vQ29yZS9DYXJ0ZXNpYW4zLmpzXCI7XG5pbXBvcnQgQ2hlY2sgZnJvbSBcIi4uL0NvcmUvQ2hlY2suanNcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL0NvcmUvZGVmYXVsdFZhbHVlLmpzXCI7XG5pbXBvcnQgQ2VzaXVtTWF0aCBmcm9tIFwiLi4vQ29yZS9NYXRoLmpzXCI7XG5cbi8qKlxuICogQSBQYXJ0aWNsZUVtaXR0ZXIgdGhhdCBlbWl0cyBwYXJ0aWNsZXMgZnJvbSBhIGNpcmNsZS5cbiAqIFBhcnRpY2xlcyB3aWxsIGJlIHBvc2l0aW9uZWQgd2l0aGluIGEgY2lyY2xlIGFuZCBoYXZlIGluaXRpYWwgdmVsb2NpdGllcyBnb2luZyBhbG9uZyB0aGUgeiB2ZWN0b3IuXG4gKlxuICogQGFsaWFzIENpcmNsZUVtaXR0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcmFkaXVzPTEuMF0gVGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlIGluIG1ldGVycy5cbiAqL1xuZnVuY3Rpb24gQ2lyY2xlRW1pdHRlcihyYWRpdXMpIHtcbiAgcmFkaXVzID0gZGVmYXVsdFZhbHVlKHJhZGl1cywgMS4wKTtcblxuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKFwicmFkaXVzXCIsIHJhZGl1cywgMC4wKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdGhpcy5fcmFkaXVzID0gZGVmYXVsdFZhbHVlKHJhZGl1cywgMS4wKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2lyY2xlRW1pdHRlci5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZSBpbiBtZXRlcnMuXG4gICAqIEBtZW1iZXJvZiBDaXJjbGVFbWl0dGVyLnByb3RvdHlwZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxLjBcbiAgICovXG4gIHJhZGl1czoge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JhZGl1cztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbihcInZhbHVlXCIsIHZhbHVlLCAwLjApO1xuICAgICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG4gICAgICB0aGlzLl9yYWRpdXMgPSB2YWx1ZTtcbiAgICB9LFxuICB9LFxufSk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGdpdmVuIHtAbGluayBQYXJ0aWNsZX0gYnkgc2V0dGluZyBpdCdzIHBvc2l0aW9uIGFuZCB2ZWxvY2l0eS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtQYXJ0aWNsZX0gcGFydGljbGUgVGhlIHBhcnRpY2xlIHRvIGluaXRpYWxpemUuXG4gKi9cbkNpcmNsZUVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAocGFydGljbGUpIHtcbiAgdmFyIHRoZXRhID0gQ2VzaXVtTWF0aC5yYW5kb21CZXR3ZWVuKDAuMCwgQ2VzaXVtTWF0aC5UV09fUEkpO1xuICB2YXIgcmFkID0gQ2VzaXVtTWF0aC5yYW5kb21CZXR3ZWVuKDAuMCwgdGhpcy5fcmFkaXVzKTtcblxuICB2YXIgeCA9IHJhZCAqIE1hdGguY29zKHRoZXRhKTtcbiAgdmFyIHkgPSByYWQgKiBNYXRoLnNpbih0aGV0YSk7XG4gIHZhciB6ID0gMC4wO1xuXG4gIHBhcnRpY2xlLnBvc2l0aW9uID0gQ2FydGVzaWFuMy5mcm9tRWxlbWVudHMoeCwgeSwgeiwgcGFydGljbGUucG9zaXRpb24pO1xuICBwYXJ0aWNsZS52ZWxvY2l0eSA9IENhcnRlc2lhbjMuY2xvbmUoQ2FydGVzaWFuMy5VTklUX1osIHBhcnRpY2xlLnZlbG9jaXR5KTtcbn07XG5leHBvcnQgZGVmYXVsdCBDaXJjbGVFbWl0dGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27377\n')}}]);