"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[9233],{36033:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88108);\n/* harmony import */ var _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48243);\n/* harmony import */ var _Core_BoxGeometry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20305);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51688);\n/* harmony import */ var _Core_clone_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(83856);\n/* harmony import */ var _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59947);\n/* harmony import */ var _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(92062);\n/* harmony import */ var _Core_createGuid_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(39960);\n/* harmony import */ var _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(17711);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(12572);\n/* harmony import */ var _Core_EllipsoidGeometry_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(64727);\n/* harmony import */ var _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(14459);\n/* harmony import */ var _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(39756);\n/* harmony import */ var _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(26865);\n/* harmony import */ var _Core_GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(57552);\n/* harmony import */ var _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(84935);\n/* harmony import */ var _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(55293);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(72248);\n/* harmony import */ var _Core_mergeSort_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(4197);\n/* harmony import */ var _Core_Occluder_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(52293);\n/* harmony import */ var _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(91473);\n/* harmony import */ var _Core_OrthographicOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(35131);\n/* harmony import */ var _Core_PerspectiveFrustum_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(66854);\n/* harmony import */ var _Core_PerspectiveOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(36135);\n/* harmony import */ var _Core_RequestScheduler_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(63181);\n/* harmony import */ var _Core_TaskProcessor_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(2819);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(95555);\n/* harmony import */ var _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(39899);\n/* harmony import */ var _Renderer_ComputeEngine_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(18157);\n/* harmony import */ var _Renderer_Context_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(19385);\n/* harmony import */ var _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(20521);\n/* harmony import */ var _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(8379);\n/* harmony import */ var _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(10667);\n/* harmony import */ var _BrdfLutGenerator_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(24725);\n/* harmony import */ var _Camera_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(70561);\n/* harmony import */ var _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(94170);\n/* harmony import */ var _Cesium3DTilePassState_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(55715);\n/* harmony import */ var _CreditDisplay_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(67442);\n/* harmony import */ var _DebugCameraPrimitive_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(96548);\n/* harmony import */ var _DepthPlane_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(47056);\n/* harmony import */ var _DerivedCommand_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(999);\n/* harmony import */ var _DeviceOrientationCameraController_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(52440);\n/* harmony import */ var _Fog_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(8403);\n/* harmony import */ var _FrameState_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(85079);\n/* harmony import */ var _GlobeDepth_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(55977);\n/* harmony import */ var _GlobeTranslucencyState_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(85985);\n/* harmony import */ var _InvertClassification_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(94229);\n/* harmony import */ var _JobScheduler_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(38347);\n/* harmony import */ var _MapMode2D_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(95757);\n/* harmony import */ var _OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(22277);\n/* harmony import */ var _PerformanceDisplay_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(73829);\n/* harmony import */ var _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(64060);\n/* harmony import */ var _Picking_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(18441);\n/* harmony import */ var _PostProcessStageCollection_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(13638);\n/* harmony import */ var _Primitive_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(34380);\n/* harmony import */ var _PrimitiveCollection_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(73316);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(89917);\n/* harmony import */ var _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(48244);\n/* harmony import */ var _SceneTransitioner_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(72984);\n/* harmony import */ var _ScreenSpaceCameraController_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(60442);\n/* harmony import */ var _ShadowMap_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(79162);\n/* harmony import */ var _StencilConstants_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(87233);\n/* harmony import */ var _SunLight_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(44747);\n/* harmony import */ var _SunPostProcess_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(80480);\n/* harmony import */ var _TweenCollection_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(74476);\n/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(70419);\n/* harmony import */ var _DebugInspector_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(55757);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar requestRenderAfterFrame = function (scene) {\n  return function () {\n    scene.frameState.afterRender.push(function () {\n      scene.requestRender();\n    });\n  };\n};\n\n/**\n * The container for all 3D graphical objects and state in a Cesium virtual scene.  Generally,\n * a scene is not created directly; instead, it is implicitly created by {@link CesiumWidget}.\n * <p>\n * <em><code>contextOptions</code> parameter details:</em>\n * </p>\n * <p>\n * The default values are:\n * <code>\n * {\n *   webgl : {\n *     alpha : false,\n *     depth : true,\n *     stencil : false,\n *     antialias : true,\n *     powerPreference: \'high-performance\',\n *     premultipliedAlpha : true,\n *     preserveDrawingBuffer : false,\n *     failIfMajorPerformanceCaveat : false\n *   },\n *   allowTextureFilterAnisotropic : true\n * }\n * </code>\n * </p>\n * <p>\n * The <code>webgl</code> property corresponds to the {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n * object used to create the WebGL context.\n * </p>\n * <p>\n * <code>webgl.alpha</code> defaults to false, which can improve performance compared to the standard WebGL default\n * of true.  If an application needs to composite Cesium above other HTML elements using alpha-blending, set\n * <code>webgl.alpha</code> to true.\n * </p>\n * <p>\n * The other <code>webgl</code> properties match the WebGL defaults for {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}.\n * </p>\n * <p>\n * <code>allowTextureFilterAnisotropic</code> defaults to true, which enables anisotropic texture filtering when the\n * WebGL extension is supported.  Setting this to false will improve performance, but hurt visual quality, especially for horizon views.\n * </p>\n *\n * @alias Scene\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {HTMLCanvasElement} options.canvas The HTML canvas element to create the scene for.\n * @param {Object} [options.contextOptions] Context and WebGL creation properties.  See details above.\n * @param {Element} [options.creditContainer] The HTML element in which the credits will be displayed.\n * @param {Element} [options.creditViewport] The HTML element in which to display the credit popup.  If not specified, the viewport will be a added as a sibling of the canvas.\n * @param {MapProjection} [options.mapProjection=new GeographicProjection()] The map projection to use in 2D and Columbus View modes.\n * @param {Boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @param {Boolean} [options.scene3DOnly=false] If true, optimizes memory use and performance for 3D mode but disables the ability to use 2D or Columbus View.\n * @param {Boolean} [options.shadows=false] Determines if shadows are cast by light sources.\n * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @param {Boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {Number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n *\n * @see CesiumWidget\n * @see {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n *\n * @exception {DeveloperError} options and options.canvas are required.\n *\n * @example\n * // Create scene without anisotropic texture filtering\n * var scene = new Cesium.Scene({\n *   canvas : canvas,\n *   contextOptions : {\n *     allowTextureFilterAnisotropic : false\n *   }\n * });\n */\nfunction Scene(options) {\n  options = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options, _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var canvas = options.canvas;\n  var creditContainer = options.creditContainer;\n  var creditViewport = options.creditViewport;\n\n  var contextOptions = (0,_Core_clone_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(options.contextOptions);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(contextOptions)) {\n    contextOptions = {};\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(contextOptions.webgl)) {\n    contextOptions.webgl = {};\n  }\n  contextOptions.webgl.powerPreference = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(\n    contextOptions.webgl.powerPreference,\n    "high-performance"\n  );\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(canvas)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z("options and options.canvas are required.");\n  }\n  //>>includeEnd(\'debug\');\n  var hasCreditContainer = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(creditContainer);\n  var context = new _Renderer_Context_js__WEBPACK_IMPORTED_MODULE_32__/* ["default"] */ .Z(canvas, contextOptions);\n  if (!hasCreditContainer) {\n    creditContainer = document.createElement("div");\n    creditContainer.style.position = "absolute";\n    creditContainer.style.bottom = "0";\n    creditContainer.style["text-shadow"] = "0 0 2px #000000";\n    creditContainer.style.color = "#ffffff";\n    creditContainer.style["font-size"] = "10px";\n    creditContainer.style["padding-right"] = "5px";\n    canvas.parentNode.appendChild(creditContainer);\n  }\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(creditViewport)) {\n    creditViewport = canvas.parentNode;\n  }\n\n  this._id = (0,_Core_createGuid_js__WEBPACK_IMPORTED_MODULE_71__/* ["default"] */ .Z)();\n  this._jobScheduler = new _JobScheduler_js__WEBPACK_IMPORTED_MODULE_50__/* ["default"] */ .Z();\n  this._frameState = new _FrameState_js__WEBPACK_IMPORTED_MODULE_46__/* ["default"] */ .Z(\n    context,\n    new _CreditDisplay_js__WEBPACK_IMPORTED_MODULE_40__/* ["default"] */ .Z(creditContainer, " • ", creditViewport),\n    this._jobScheduler\n  );\n  this._frameState.scene3DOnly = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.scene3DOnly, false);\n  this._removeCreditContainer = !hasCreditContainer;\n  this._creditContainer = creditContainer;\n\n  this._canvas = canvas;\n  this._context = context;\n  this._computeEngine = new _Renderer_ComputeEngine_js__WEBPACK_IMPORTED_MODULE_31__/* ["default"] */ .Z(context);\n  this._globe = undefined;\n  this._globeTranslucencyState = new _GlobeTranslucencyState_js__WEBPACK_IMPORTED_MODULE_48__/* ["default"] */ .Z();\n  this._primitives = new _PrimitiveCollection_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"] */ .Z();\n  this._groundPrimitives = new _PrimitiveCollection_js__WEBPACK_IMPORTED_MODULE_58__/* ["default"] */ .Z();\n\n  this._globeHeight = undefined;\n  this._cameraUnderground = false;\n\n  this._logDepthBuffer = context.fragmentDepth;\n  this._logDepthBufferDirty = true;\n\n  this._tweens = new _TweenCollection_js__WEBPACK_IMPORTED_MODULE_67__/* ["default"] */ .Z();\n\n  this._shaderFrameCount = 0;\n\n  this._sunPostProcess = undefined;\n\n  this._computeCommandList = [];\n  this._overlayCommandList = [];\n\n  this._useOIT = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.orderIndependentTranslucency, true);\n  this._executeOITFunction = undefined;\n\n  this._depthPlane = new _DepthPlane_js__WEBPACK_IMPORTED_MODULE_42__/* ["default"] */ .Z();\n\n  this._clearColorCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z({\n    color: new _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(),\n    stencil: 0,\n    owner: this,\n  });\n  this._depthClearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z({\n    depth: 1.0,\n    owner: this,\n  });\n  this._stencilClearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z({\n    stencil: 0,\n  });\n  this._classificationStencilClearCommand = new _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z({\n    stencil: 0,\n    renderState: _Renderer_RenderState_js__WEBPACK_IMPORTED_MODULE_35__/* ["default"].fromCache */ .Z.fromCache({\n      stencilMask: _StencilConstants_js__WEBPACK_IMPORTED_MODULE_64__/* ["default"].CLASSIFICATION_MASK */ .Z.CLASSIFICATION_MASK,\n    }),\n  });\n\n  this._depthOnlyRenderStateCache = {};\n\n  this._transitioner = new _SceneTransitioner_js__WEBPACK_IMPORTED_MODULE_61__/* ["default"] */ .Z(this);\n\n  this._preUpdate = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n  this._postUpdate = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\n  this._renderError = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n  this._preRender = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n  this._postRender = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\n  this._minimumDisableDepthTestDistance = 0.0;\n  this._debugInspector = new _DebugInspector_js__WEBPACK_IMPORTED_MODULE_69__/* ["default"] */ .Z();\n\n  /**\n   * Exceptions occurring in <code>render</code> are always caught in order to raise the\n   * <code>renderError</code> event.  If this property is true, the error is rethrown\n   * after the event is raised.  If this property is false, the <code>render</code> function\n   * returns normally after raising the event.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.rethrowRenderErrors = false;\n\n  /**\n   * Determines whether or not to instantly complete the\n   * scene transition animation on user input.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.completeMorphOnUserInput = true;\n\n  /**\n   * The event fired at the beginning of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphStart = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\n  /**\n   * The event fired at the completion of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphComplete = new _Core_Event_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\n  /**\n   * The {@link SkyBox} used to draw the stars.\n   *\n   * @type {SkyBox}\n   * @default undefined\n   *\n   * @see Scene#backgroundColor\n   */\n  this.skyBox = undefined;\n\n  /**\n   * The sky atmosphere drawn around the globe.\n   *\n   * @type {SkyAtmosphere}\n   * @default undefined\n   */\n  this.skyAtmosphere = undefined;\n\n  /**\n   * The {@link Sun}.\n   *\n   * @type {Sun}\n   * @default undefined\n   */\n  this.sun = undefined;\n\n  /**\n   * Uses a bloom filter on the sun when enabled.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.sunBloom = true;\n  this._sunBloom = undefined;\n\n  /**\n   * The {@link Moon}\n   *\n   * @type Moon\n   * @default undefined\n   */\n  this.moon = undefined;\n\n  /**\n   * The background color, which is only visible if there is no sky box, i.e., {@link Scene#skyBox} is undefined.\n   *\n   * @type {Color}\n   * @default {@link Color.BLACK}\n   *\n   * @see Scene#skyBox\n   */\n  this.backgroundColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].BLACK */ .Z.BLACK);\n\n  this._mode = _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D;\n\n  this._mapProjection = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(options.mapProjection)\n    ? options.mapProjection\n    : new _Core_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z();\n\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.morphTime = 1.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a normal depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>false</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>true</code>, use {@link Scene#logarithmicDepthFarToNearRatio}.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1000.0\n   */\n  this.farToNearRatio = 1000.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a logarithmic depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>true</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>false</code>, use {@link Scene#farToNearRatio}.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1e9\n   */\n  this.logarithmicDepthFarToNearRatio = 1e9;\n\n  /**\n   * Determines the uniform depth size in meters of each frustum of the multifrustum in 2D. If a primitive or model close\n   * to the surface shows z-fighting, decreasing this will eliminate the artifact, but decrease performance. On the\n   * other hand, increasing this will increase performance but may cause z-fighting among primitives close to the surface.\n   *\n   * @type {Number}\n   * @default 1.75e6\n   */\n  this.nearToFarDistance2D = 1.75e6;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * A function that determines what commands are executed.  As shown in the examples below,\n   * the function receives the command\'s <code>owner</code> as an argument, and returns a boolean indicating if the\n   * command should be executed.\n   * </p>\n   * <p>\n   * The default is <code>undefined</code>, indicating that all commands are executed.\n   * </p>\n   *\n   * @type Function\n   *\n   * @default undefined\n   *\n   * @example\n   * // Do not execute any commands.\n   * scene.debugCommandFilter = function(command) {\n   *     return false;\n   * };\n   *\n   * // Execute only the billboard\'s commands.  That is, only draw the billboard.\n   * var billboards = new Cesium.BillboardCollection();\n   * scene.debugCommandFilter = function(command) {\n   *     return command.owner === billboards;\n   * };\n   */\n  this.debugCommandFilter = undefined;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are randomly shaded.  This is useful\n   * for performance analysis to see what parts of a scene or model are\n   * command-dense and could benefit from batching.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowCommands = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are shaded based on the frustums they\n   * overlap.  Commands in the closest frustum are tinted red, commands in\n   * the next closest are green, and commands in the farthest frustum are\n   * blue.  If a command overlaps more than one frustum, the color components\n   * are combined, e.g., a command overlapping the first two frustums is tinted\n   * yellow.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowFrustums = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays frames per second and time between frames.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowFramesPerSecond = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays depth information for the indicated frustum.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowGlobeDepth = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Indicates which frustum will have depth information displayed.\n   * </p>\n   *\n   * @type Number\n   *\n   * @default 1\n   */\n  this.debugShowDepthFrustum = 1;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, draws outlines to show the boundaries of the camera frustums\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowFrustumPlanes = false;\n  this._debugShowFrustumPlanes = false;\n  this._debugFrustumPlanes = undefined;\n\n  /**\n   * When <code>true</code>, enables picking using the depth buffer.\n   *\n   * @type Boolean\n   * @default true\n   */\n  this.useDepthPicking = true;\n\n  /**\n   * When <code>true</code>, enables picking translucent geometry using the depth buffer. Note that {@link Scene#useDepthPicking} must also be true for enabling this to work.\n   *\n   * <p>\n   * Render must be called between picks.\n   * <br>There is a decrease in performance when enabled. There are extra draw calls to write depth for\n   * translucent geometry.\n   * </p>\n   *\n   * @example\n   * // picking the position of a translucent primitive\n   * viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {\n   *      var pickedFeature = viewer.scene.pick(movement.position);\n   *      if (!Cesium.defined(pickedFeature)) {\n   *          // nothing picked\n   *          return;\n   *      }\n   *      viewer.scene.render();\n   *      var worldPosition = viewer.scene.pickPosition(movement.position);\n   * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.pickTranslucentDepth = false;\n\n  /**\n   * The time in milliseconds to wait before checking if the camera has not moved and fire the cameraMoveEnd event.\n   * @type {Number}\n   * @default 500.0\n   * @private\n   */\n  this.cameraEventWaitTime = 500.0;\n\n  /**\n   * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n   * performance improvements by rendering less geometry and dispatching less terrain requests.\n   * @type {Fog}\n   */\n  this.fog = new _Fog_js__WEBPACK_IMPORTED_MODULE_45__/* ["default"] */ .Z();\n\n  this._shadowMapCamera = new _Camera_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z(this);\n\n  /**\n   * The shadow map for the scene\'s light source. When enabled, models, primitives, and the globe may cast and receive shadows.\n   * @type {ShadowMap}\n   */\n  this.shadowMap = new _ShadowMap_js__WEBPACK_IMPORTED_MODULE_63__/* ["default"] */ .Z({\n    context: context,\n    lightCamera: this._shadowMapCamera,\n    enabled: (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.shadows, false),\n  });\n\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied by {@link Scene#invertClassificationColor}.\n   * @type {Boolean}\n   * @default false\n   */\n  this.invertClassification = false;\n\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link Scene#invertClassification} is <code>true</code>.\n   * <p>When the color\'s alpha is less than 1.0, the unclassified portions of the 3D Tiles will not blend correctly with the classified positions of the 3D Tiles.</p>\n   * <p>Also, when the color\'s alpha is less than 1.0, the WEBGL_depth_texture and EXT_frag_depth WebGL extensions must be supported.</p>\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.invertClassificationColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(_Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].WHITE */ .Z.WHITE);\n\n  this._actualInvertClassificationColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(\n    this._invertClassificationColor\n  );\n  this._invertClassification = new _InvertClassification_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"] */ .Z();\n\n  /**\n   * The focal length for use when with cardboard or WebVR.\n   * @type {Number}\n   */\n  this.focalLength = undefined;\n\n  /**\n   * The eye separation distance in meters for use with cardboard or WebVR.\n   * @type {Number}\n   */\n  this.eyeSeparation = undefined;\n\n  /**\n   * Post processing effects applied to the final render.\n   * @type {PostProcessStageCollection}\n   */\n  this.postProcessStages = new _PostProcessStageCollection_js__WEBPACK_IMPORTED_MODULE_56__/* ["default"] */ .Z();\n\n  this._brdfLutGenerator = new _BrdfLutGenerator_js__WEBPACK_IMPORTED_MODULE_36__/* ["default"] */ .Z();\n\n  this._performanceDisplay = undefined;\n  this._debugVolume = undefined;\n\n  this._screenSpaceCameraController = new _ScreenSpaceCameraController_js__WEBPACK_IMPORTED_MODULE_62__/* ["default"] */ .Z(this);\n  this._cameraUnderground = false;\n  this._mapMode2D = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.mapMode2D, _MapMode2D_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].INFINITE_SCROLL */ .Z.INFINITE_SCROLL);\n\n  // Keeps track of the state of a frame. FrameState is the state across\n  // the primitives of the scene. This state is for internally keeping track\n  // of celestial and environment effects that need to be updated/rendered in\n  // a certain order as well as updating/tracking framebuffer usage.\n  this._environmentState = {\n    skyBoxCommand: undefined,\n    skyAtmosphereCommand: undefined,\n    sunDrawCommand: undefined,\n    sunComputeCommand: undefined,\n    moonCommand: undefined,\n\n    isSunVisible: false,\n    isMoonVisible: false,\n    isReadyForAtmosphere: false,\n    isSkyAtmosphereVisible: false,\n\n    clearGlobeDepth: false,\n    useDepthPlane: false,\n    renderTranslucentDepthForPick: false,\n\n    originalFramebuffer: undefined,\n    useGlobeDepthFramebuffer: false,\n    separatePrimitiveFramebuffer: false,\n    useOIT: false,\n    useInvertClassification: false,\n    usePostProcess: false,\n    usePostProcessSelected: false,\n    useWebVR: false,\n  };\n\n  this._useWebVR = false;\n  this._cameraVR = undefined;\n  this._aspectRatioVR = undefined;\n\n  /**\n   * When <code>true</code>, rendering a frame will only occur when needed as determined by changes within the scene.\n   * Enabling improves performance of the application, but requires using {@link Scene#requestRender}\n   * to render a new frame explicitly in this mode. This will be necessary in many cases after making changes\n   * to the scene in other parts of the API.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#maximumRenderTimeChange\n   * @see Scene#requestRender\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.requestRenderMode = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(options.requestRenderMode, false);\n  this._renderRequested = true;\n\n  /**\n   * If {@link Scene#requestRenderMode} is <code>true</code>, this value defines the maximum change in\n   * simulation time allowed before a render is requested. Lower values increase the number of frames rendered\n   * and higher values decrease the number of frames rendered. If <code>undefined</code>, changes to\n   * the simulation time will never request a render.\n   * This value impacts the rate of rendering for changes in the scene like lighting, entity property updates,\n   * and animations.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#requestRenderMode\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  this.maximumRenderTimeChange = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(\n    options.maximumRenderTimeChange,\n    0.0\n  );\n  this._lastRenderTime = undefined;\n  this._frameRateMonitor = undefined;\n\n  this._removeRequestListenerCallback = _Core_RequestScheduler_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].requestCompletedEvent.addEventListener */ .Z.requestCompletedEvent.addEventListener(\n    requestRenderAfterFrame(this)\n  );\n  this._removeTaskProcessorListenerCallback = _Core_TaskProcessor_js__WEBPACK_IMPORTED_MODULE_28__/* ["default"].taskCompletedEvent.addEventListener */ .Z.taskCompletedEvent.addEventListener(\n    requestRenderAfterFrame(this)\n  );\n  this._removeGlobeCallbacks = [];\n\n  var viewport = new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(\n    0,\n    0,\n    context.drawingBufferWidth,\n    context.drawingBufferHeight\n  );\n  var camera = new _Camera_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z(this);\n\n  if (this._logDepthBuffer) {\n    camera.frustum.near = 0.1;\n    camera.frustum.far = 10000000000.0;\n  }\n\n  /**\n   * The camera view for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {Camera}\n   * @private\n   */\n  this.preloadFlightCamera = new _Camera_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z(this);\n\n  /**\n   * The culling volume for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {CullingVolume}\n   * @private\n   */\n  this.preloadFlightCullingVolume = undefined;\n\n  this._picking = new _Picking_js__WEBPACK_IMPORTED_MODULE_55__/* ["default"] */ .Z(this);\n  this._defaultView = new _View_js__WEBPACK_IMPORTED_MODULE_68__/* ["default"] */ .Z(this, camera, viewport);\n  this._view = this._defaultView;\n\n  this._hdr = undefined;\n  this._hdrDirty = undefined;\n  this.highDynamicRange = false;\n  this.gamma = 2.2;\n\n  /**\n   * The spherical harmonic coefficients for image-based lighting of PBR models.\n   * @type {Cartesian3[]}\n   */\n  this.sphericalHarmonicCoefficients = undefined;\n\n  /**\n   * The url to the KTX2 file containing the specular environment map and convoluted mipmaps for image-based lighting of PBR models.\n   * @type {String}\n   */\n  this.specularEnvironmentMaps = undefined;\n  this._specularEnvironmentMapAtlas = undefined;\n\n  /**\n   * The light source for shading. Defaults to a directional light from the Sun.\n   * @type {Light}\n   */\n  this.light = new _SunLight_js__WEBPACK_IMPORTED_MODULE_65__/* ["default"] */ .Z();\n\n  // Give frameState, camera, and screen space camera controller initial state before rendering\n  updateFrameNumber(this, 0.0, _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].now */ .Z.now());\n  this.updateFrameState();\n  this.initializeFrame();\n}\n\nfunction updateGlobeListeners(scene, globe) {\n  for (var i = 0; i < scene._removeGlobeCallbacks.length; ++i) {\n    scene._removeGlobeCallbacks[i]();\n  }\n  scene._removeGlobeCallbacks.length = 0;\n\n  var removeGlobeCallbacks = [];\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe)) {\n    removeGlobeCallbacks.push(\n      globe.imageryLayersUpdatedEvent.addEventListener(\n        requestRenderAfterFrame(scene)\n      )\n    );\n    removeGlobeCallbacks.push(\n      globe.terrainProviderChanged.addEventListener(\n        requestRenderAfterFrame(scene)\n      )\n    );\n  }\n  scene._removeGlobeCallbacks = removeGlobeCallbacks;\n}\n\nObject.defineProperties(Scene.prototype, {\n  /**\n   * Gets the canvas element to which this scene is bound.\n   * @memberof Scene.prototype\n   *\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._canvas;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._context.drawingBufferHeight;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._context.drawingBufferWidth;\n    },\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].maximumAliasedLineWidth */ .Z.maximumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The maximum length in pixels of one edge of a cube map, supported by this WebGL implementation.  It will be at least 16.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].maximumCubeMapSize */ .Z.maximumCubeMapSize;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#pickPosition} function is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#pickPosition\n   */\n  pickPositionSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#sampleHeight} and {@link Scene#sampleHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#sampleHeight\n   * @see Scene#sampleHeightMostDetailed\n   */\n  sampleHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#clampToHeight} and {@link Scene#clampToHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#clampToHeight\n   * @see Scene#clampToHeightMostDetailed\n   */\n  clampToHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#invertClassification} is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#invertClassification\n   */\n  invertClassificationSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if specular environment maps are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#specularEnvironmentMaps\n   */\n  specularEnvironmentMapsSupported: {\n    get: function () {\n      return _OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"].isSupported */ .Z.isSupported(this._context);\n    },\n  },\n\n  /**\n   * Gets or sets the depth-test ellipsoid.\n   * @memberof Scene.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n\n    set: function (globe) {\n      this._globe = this._globe && this._globe.destroy();\n      this._globe = globe;\n\n      updateGlobeListeners(this, globe);\n    },\n  },\n\n  /**\n   * Gets the collection of primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  primitives: {\n    get: function () {\n      return this._primitives;\n    },\n  },\n\n  /**\n   * Gets the collection of ground primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  groundPrimitives: {\n    get: function () {\n      return this._groundPrimitives;\n    },\n  },\n\n  /**\n   * Gets or sets the camera.\n   * @memberof Scene.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this._view.camera;\n    },\n    set: function (camera) {\n      // For internal use only. Documentation is still @readonly.\n      this._view.camera = camera;\n    },\n  },\n\n  /**\n   * Gets or sets the view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  view: {\n    get: function () {\n      return this._view;\n    },\n    set: function (view) {\n      // For internal use only. Documentation is still @readonly.\n      this._view = view;\n    },\n  },\n\n  /**\n   * Gets the default view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  defaultView: {\n    get: function () {\n      return this._defaultView;\n    },\n  },\n\n  /**\n   * Gets picking functions and state\n   * @memberof Scene.prototype\n   *\n   * @type {Picking}\n   * @readonly\n   *\n   * @private\n   */\n  picking: {\n    get: function () {\n      return this._picking;\n    },\n  },\n\n  /**\n   * Gets the controller for camera input handling.\n   * @memberof Scene.prototype\n   *\n   * @type {ScreenSpaceCameraController}\n   * @readonly\n   */\n  screenSpaceCameraController: {\n    get: function () {\n      return this._screenSpaceCameraController;\n    },\n  },\n\n  /**\n   * Get the map projection to use in 2D and Columbus View modes.\n   * @memberof Scene.prototype\n   *\n   * @type {MapProjection}\n   * @readonly\n   *\n   * @default new GeographicProjection()\n   */\n  mapProjection: {\n    get: function () {\n      return this._mapProjection;\n    },\n  },\n\n  /**\n   * Gets the job scheduler\n   * @memberof Scene.prototype\n   * @type {JobScheduler}\n   * @readonly\n   *\n   * @private\n   */\n  jobScheduler: {\n    get: function () {\n      return this._jobScheduler;\n    },\n  },\n\n  /**\n   * Gets state information about the current scene. If called outside of a primitive\'s <code>update</code>\n   * function, the previous frame\'s state is returned.\n   * @memberof Scene.prototype\n   *\n   * @type {FrameState}\n   * @readonly\n   *\n   * @private\n   */\n  frameState: {\n    get: function () {\n      return this._frameState;\n    },\n  },\n\n  /**\n   * Gets the environment state.\n   * @memberof Scene.prototype\n   *\n   * @type {EnvironmentState}\n   * @readonly\n   *\n   * @private\n   */\n  environmentState: {\n    get: function () {\n      return this._environmentState;\n    },\n  },\n\n  /**\n   * Gets the collection of tweens taking place in the scene.\n   * @memberof Scene.prototype\n   *\n   * @type {TweenCollection}\n   * @readonly\n   *\n   * @private\n   */\n  tweens: {\n    get: function () {\n      return this._tweens;\n    },\n  },\n\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.imageryLayers;\n    },\n  },\n\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.globe)) {\n        this.globe.terrainProvider = terrainProvider;\n      }\n    },\n  },\n\n  /**\n   * Gets an event that\'s raised when the terrain provider is changed\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  terrainProviderChanged: {\n    get: function () {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProviderChanged;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised before the scene is updated or rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#postUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preUpdate: {\n    get: function () {\n      return this._preUpdate;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is updated and before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postUpdate: {\n    get: function () {\n      return this._postUpdate;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised when an error is thrown inside the <code>render</code> function.\n   * The Scene instance and the thrown error are the only two parameters passed to the event handler.\n   * By default, errors are not rethrown after this event is raised, but that can be changed by setting\n   * the <code>rethrowRenderErrors</code> property.\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  renderError: {\n    get: function () {\n      return this._renderError;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised after the scene is updated and immediately before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preRender: {\n    get: function () {\n      return this._preRender;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postRender: {\n    get: function () {\n      return this._postRender;\n    },\n  },\n\n  /**\n   * Gets the simulation time when the scene was last rendered. Returns undefined if the scene has not yet been\n   * rendered.\n   * @memberof Scene.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   */\n  lastRenderTime: {\n    get: function () {\n      return this._lastRenderTime;\n    },\n  },\n\n  /**\n   * @memberof Scene.prototype\n   * @private\n   * @readonly\n   */\n  context: {\n    get: function () {\n      return this._context;\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When {@link Scene.debugShowFrustums} is <code>true</code>, this contains\n   * properties with statistics about the number of command execute per frustum.\n   * <code>totalCommands</code> is the total number of commands executed, ignoring\n   * overlap. <code>commandsInFrustums</code> is an array with the number of times\n   * commands are executed redundantly, e.g., how many commands overlap two or\n   * three frustums.\n   * </p>\n   *\n   * @memberof Scene.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  debugFrustumStatistics: {\n    get: function () {\n      return this._view.debugFrustumStatistics;\n    },\n  },\n\n  /**\n   * Gets whether or not the scene is optimized for 3D only viewing.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  scene3DOnly: {\n    get: function () {\n      return this._frameState.scene3DOnly;\n    },\n  },\n\n  /**\n   * Gets whether or not the scene has order independent translucency enabled.\n   * Note that this only reflects the original construction option, and there are\n   * other factors that could prevent OIT from functioning on a given system configuration.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  orderIndependentTranslucency: {\n    get: function () {\n      return this._useOIT;\n    },\n  },\n\n  /**\n   * Gets the unique identifier for this scene.\n   * @memberof Scene.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Gets or sets the current mode of the scene.\n   * @memberof Scene.prototype\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  mode: {\n    get: function () {\n      return this._mode;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (this.scene3DOnly && value !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(\n          "Only SceneMode.SCENE3D is valid when scene3DOnly is true."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      if (value === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n        this.morphTo2D(0);\n      } else if (value === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n        this.morphTo3D(0);\n      } else if (value === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n        this.morphToColumbusView(0);\n        //>>includeStart(\'debug\', pragmas.debug);\n      } else {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(\n          "value must be a valid SceneMode enumeration."\n        );\n        //>>includeEnd(\'debug\');\n      }\n      this._mode = value;\n    },\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {FrustumCommands[]}\n   *\n   * @private\n   */\n  frustumCommandsList: {\n    get: function () {\n      return this._view.frustumCommandsList;\n    },\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {Number}\n   *\n   * @private\n   */\n  numberOfFrustums: {\n    get: function () {\n      return this._view.frustumCommandsList.length;\n    },\n  },\n\n  /**\n   * When <code>true</code>, splits the scene into two viewports with steroscopic views for the left and right eyes.\n   * Used for cardboard and WebVR.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  useWebVR: {\n    get: function () {\n      return this._useWebVR;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (this.camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(\n          "VR is unsupported with an orthographic projection."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      this._useWebVR = value;\n      if (this._useWebVR) {\n        this._frameState.creditDisplay.container.style.visibility = "hidden";\n        this._cameraVR = new _Camera_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"] */ .Z(this);\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this._deviceOrientationCameraController)) {\n          this._deviceOrientationCameraController = new _DeviceOrientationCameraController_js__WEBPACK_IMPORTED_MODULE_44__/* ["default"] */ .Z(\n            this\n          );\n        }\n\n        this._aspectRatioVR = this.camera.frustum.aspectRatio;\n      } else {\n        this._frameState.creditDisplay.container.style.visibility = "visible";\n        this._cameraVR = undefined;\n        this._deviceOrientationCameraController =\n          this._deviceOrientationCameraController &&\n          !this._deviceOrientationCameraController.isDestroyed() &&\n          this._deviceOrientationCameraController.destroy();\n\n        this.camera.frustum.aspectRatio = this._aspectRatioVR;\n        this.camera.frustum.xOffset = 0.0;\n      }\n    },\n  },\n\n  /**\n   * Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n   * @memberof Scene.prototype\n   * @type {MapMode2D}\n   * @readonly\n   */\n  mapMode2D: {\n    get: function () {\n      return this._mapMode2D;\n    },\n  },\n\n  /**\n   * Gets or sets the position of the Imagery splitter within the viewport.  Valid values are between 0.0 and 1.0.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   */\n  imagerySplitPosition: {\n    get: function () {\n      return this._frameState.imagerySplitPosition;\n    },\n    set: function (value) {\n      this._frameState.imagerySplitPosition = value;\n    },\n  },\n\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied. Setting the disableDepthTestDistance\n   * property of a billboard, label or point will override this value.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  minimumDisableDepthTestDistance: {\n    get: function () {\n      return this._minimumDisableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(value) || value < 0.0) {\n        throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(\n          "minimumDisableDepthTestDistance must be greater than or equal to 0.0."\n        );\n      }\n      //>>includeEnd(\'debug\');\n      this._minimumDisableDepthTestDistance = value;\n    },\n  },\n\n  /**\n   * Whether or not to use a logarithmic depth buffer. Enabling this option will allow for less frustums in the multi-frustum,\n   * increasing performance. This property relies on fragmentDepth being supported.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   */\n  logarithmicDepthBuffer: {\n    get: function () {\n      return this._logDepthBuffer;\n    },\n    set: function (value) {\n      value = this._context.fragmentDepth && value;\n      if (this._logDepthBuffer !== value) {\n        this._logDepthBuffer = value;\n        this._logDepthBufferDirty = true;\n      }\n    },\n  },\n\n  /**\n   * The value used for gamma correction. This is only used when rendering with high dynamic range.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 2.2\n   */\n  gamma: {\n    get: function () {\n      return this._context.uniformState.gamma;\n    },\n    set: function (value) {\n      this._context.uniformState.gamma = value;\n    },\n  },\n\n  /**\n   * Whether or not to use high dynamic range rendering.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  highDynamicRange: {\n    get: function () {\n      return this._hdr;\n    },\n    set: function (value) {\n      var context = this._context;\n      var hdr =\n        value &&\n        context.depthTexture &&\n        (context.colorBufferFloat || context.colorBufferHalfFloat);\n      this._hdrDirty = hdr !== this._hdr;\n      this._hdr = hdr;\n    },\n  },\n\n  /**\n   * Whether or not high dynamic range rendering is supported.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  highDynamicRangeSupported: {\n    get: function () {\n      var context = this._context;\n      return (\n        context.depthTexture &&\n        (context.colorBufferFloat || context.colorBufferHalfFloat)\n      );\n    },\n  },\n\n  /**\n   * Whether or not the camera is underneath the globe.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default false\n   */\n  cameraUnderground: {\n    get: function () {\n      return this._cameraUnderground;\n    },\n  },\n\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 1.0\n   * @private\n   */\n  pixelRatio: {\n    get: function () {\n      return this._frameState.pixelRatio;\n    },\n    set: function (value) {\n      this._frameState.pixelRatio = value;\n    },\n  },\n\n  /**\n   * @private\n   */\n  opaqueFrustumNearOffset: {\n    get: function () {\n      return 0.9999;\n    },\n  },\n\n  /**\n   * @private\n   */\n  globeHeight: {\n    get: function () {\n      return this._globeHeight;\n    },\n  },\n});\n\n/**\n * Determines if a compressed texture format is supported.\n * @param {String} format The texture format. May be the name of the format or the WebGL extension name, e.g. s3tc or WEBGL_compressed_texture_s3tc.\n * @return {boolean} Whether or not the format is supported.\n */\nScene.prototype.getCompressedTextureFormatSupported = function (format) {\n  var context = this.context;\n  return (\n    ((format === "WEBGL_compressed_texture_s3tc" || format === "s3tc") &&\n      context.s3tc) ||\n    ((format === "WEBGL_compressed_texture_pvrtc" || format === "pvrtc") &&\n      context.pvrtc) ||\n    ((format === "WEBGL_compressed_texture_etc" || format === "etc") &&\n      context.etc) ||\n    ((format === "WEBGL_compressed_texture_etc1" || format === "etc1") &&\n      context.etc1) ||\n    ((format === "WEBGL_compressed_texture_astc" || format === "astc") &&\n      context.astc) ||\n    ((format === "EXT_texture_compression_bptc" || format === "bc7") &&\n      context.bc7)\n  );\n};\n\nfunction updateDerivedCommands(scene, command, shadowsDirty) {\n  var frameState = scene._frameState;\n  var context = scene._context;\n  var oit = scene._view.oit;\n  var lightShadowMaps = frameState.shadowState.lightShadowMaps;\n  var lightShadowsEnabled = frameState.shadowState.lightShadowsEnabled;\n\n  var derivedCommands = command.derivedCommands;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.pickId)) {\n    derivedCommands.picking = _DerivedCommand_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"].createPickDerivedCommand */ .Z.createPickDerivedCommand(\n      scene,\n      command,\n      context,\n      derivedCommands.picking\n    );\n  }\n\n  if (!command.pickOnly) {\n    derivedCommands.depth = _DerivedCommand_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"].createDepthOnlyDerivedCommand */ .Z.createDepthOnlyDerivedCommand(\n      scene,\n      command,\n      context,\n      derivedCommands.depth\n    );\n  }\n\n  derivedCommands.originalCommand = command;\n\n  if (scene._hdr) {\n    derivedCommands.hdr = _DerivedCommand_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"].createHdrCommand */ .Z.createHdrCommand(\n      command,\n      context,\n      derivedCommands.hdr\n    );\n    command = derivedCommands.hdr.command;\n    derivedCommands = command.derivedCommands;\n  }\n\n  if (lightShadowsEnabled && command.receiveShadows) {\n    derivedCommands.shadows = _ShadowMap_js__WEBPACK_IMPORTED_MODULE_63__/* ["default"].createReceiveDerivedCommand */ .Z.createReceiveDerivedCommand(\n      lightShadowMaps,\n      command,\n      shadowsDirty,\n      context,\n      derivedCommands.shadows\n    );\n  }\n\n  if (command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(oit) && oit.isSupported()) {\n    if (lightShadowsEnabled && command.receiveShadows) {\n      derivedCommands.oit = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.oit)\n        ? derivedCommands.oit\n        : {};\n      derivedCommands.oit.shadows = oit.createDerivedCommands(\n        derivedCommands.shadows.receiveCommand,\n        context,\n        derivedCommands.oit.shadows\n      );\n    } else {\n      derivedCommands.oit = oit.createDerivedCommands(\n        command,\n        context,\n        derivedCommands.oit\n      );\n    }\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.updateDerivedCommands = function (command) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands)) {\n    // Is not a DrawCommand\n    return;\n  }\n\n  var frameState = this._frameState;\n  var context = this._context;\n\n  // Update derived commands when any shadow maps become dirty\n  var shadowsDirty = false;\n  var lastDirtyTime = frameState.shadowState.lastDirtyTime;\n  if (command.lastDirtyTime !== lastDirtyTime) {\n    command.lastDirtyTime = lastDirtyTime;\n    command.dirty = true;\n    shadowsDirty = true;\n  }\n\n  var useLogDepth = frameState.useLogDepth;\n  var useHdr = this._hdr;\n  var derivedCommands = command.derivedCommands;\n  var hasLogDepthDerivedCommands = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.logDepth);\n  var hasHdrCommands = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.hdr);\n  var hasDerivedCommands = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.originalCommand);\n  var needsLogDepthDerivedCommands = useLogDepth && !hasLogDepthDerivedCommands;\n  var needsHdrCommands = useHdr && !hasHdrCommands;\n  var needsDerivedCommands = (!useLogDepth || !useHdr) && !hasDerivedCommands;\n  command.dirty =\n    command.dirty ||\n    needsLogDepthDerivedCommands ||\n    needsHdrCommands ||\n    needsDerivedCommands;\n\n  if (command.dirty) {\n    command.dirty = false;\n\n    var shadowMaps = frameState.shadowState.shadowMaps;\n    var shadowsEnabled = frameState.shadowState.shadowsEnabled;\n    if (shadowsEnabled && command.castShadows) {\n      derivedCommands.shadows = _ShadowMap_js__WEBPACK_IMPORTED_MODULE_63__/* ["default"].createCastDerivedCommand */ .Z.createCastDerivedCommand(\n        shadowMaps,\n        command,\n        shadowsDirty,\n        context,\n        derivedCommands.shadows\n      );\n    }\n\n    if (hasLogDepthDerivedCommands || needsLogDepthDerivedCommands) {\n      derivedCommands.logDepth = _DerivedCommand_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"].createLogDepthCommand */ .Z.createLogDepthCommand(\n        command,\n        context,\n        derivedCommands.logDepth\n      );\n      updateDerivedCommands(\n        this,\n        derivedCommands.logDepth.command,\n        shadowsDirty\n      );\n    }\n    if (hasDerivedCommands || needsDerivedCommands) {\n      updateDerivedCommands(this, command, shadowsDirty);\n    }\n  }\n};\n\nvar renderTilesetPassState = new _Cesium3DTilePassState_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z({\n  pass: _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].RENDER */ .Z.RENDER,\n});\n\nvar preloadTilesetPassState = new _Cesium3DTilePassState_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z({\n  pass: _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].PRELOAD */ .Z.PRELOAD,\n});\n\nvar preloadFlightTilesetPassState = new _Cesium3DTilePassState_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z({\n  pass: _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].PRELOAD_FLIGHT */ .Z.PRELOAD_FLIGHT,\n});\n\nvar requestRenderModeDeferCheckPassState = new _Cesium3DTilePassState_js__WEBPACK_IMPORTED_MODULE_39__/* ["default"] */ .Z({\n  pass: _Cesium3DTilePass_js__WEBPACK_IMPORTED_MODULE_38__/* ["default"].REQUEST_RENDER_MODE_DEFER_CHECK */ .Z.REQUEST_RENDER_MODE_DEFER_CHECK,\n});\n\nvar scratchOccluderBoundingSphere = new _Core_BoundingSphere_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchOccluder;\n\nfunction getOccluder(scene) {\n  // TODO: The occluder is the top-level globe. When we add\n  //       support for multiple central bodies, this should be the closest one.\n  var globe = scene.globe;\n  if (\n    scene._mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe) &&\n    globe.show &&\n    !scene._cameraUnderground &&\n    !scene._globeTranslucencyState.translucent\n  ) {\n    var ellipsoid = globe.ellipsoid;\n    var minimumTerrainHeight = scene.frameState.minimumTerrainHeight;\n    scratchOccluderBoundingSphere.radius =\n      ellipsoid.minimumRadius + minimumTerrainHeight;\n    scratchOccluder = _Core_Occluder_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].fromBoundingSphere */ .Z.fromBoundingSphere(\n      scratchOccluderBoundingSphere,\n      scene.camera.positionWC,\n      scratchOccluder\n    );\n    return scratchOccluder;\n  }\n\n  return undefined;\n}\n\n/**\n * @private\n */\nScene.prototype.clearPasses = function (passes) {\n  passes.render = false;\n  passes.pick = false;\n  passes.depth = false;\n  passes.postProcess = false;\n  passes.offscreen = false;\n};\n\nfunction updateFrameNumber(scene, frameNumber, time) {\n  var frameState = scene._frameState;\n  frameState.frameNumber = frameNumber;\n  frameState.time = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].clone */ .Z.clone(time, frameState.time);\n}\n\n/**\n * @private\n */\nScene.prototype.updateFrameState = function () {\n  var camera = this.camera;\n\n  var frameState = this._frameState;\n  frameState.commandList.length = 0;\n  frameState.shadowMaps.length = 0;\n  frameState.brdfLutGenerator = this._brdfLutGenerator;\n  frameState.environmentMap = this.skyBox && this.skyBox._cubeMap;\n  frameState.mode = this._mode;\n  frameState.morphTime = this.morphTime;\n  frameState.mapProjection = this.mapProjection;\n  frameState.camera = camera;\n  frameState.cullingVolume = camera.frustum.computeCullingVolume(\n    camera.positionWC,\n    camera.directionWC,\n    camera.upWC\n  );\n  frameState.occluder = getOccluder(this);\n  frameState.minimumTerrainHeight = 0.0;\n  frameState.minimumDisableDepthTestDistance = this._minimumDisableDepthTestDistance;\n  frameState.invertClassification = this.invertClassification;\n  frameState.useLogDepth =\n    this._logDepthBuffer &&\n    !(\n      this.camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z ||\n      this.camera.frustum instanceof _Core_OrthographicOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z\n    );\n  frameState.light = this.light;\n  frameState.cameraUnderground = this._cameraUnderground;\n  frameState.globeTranslucencyState = this._globeTranslucencyState;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.globe)) {\n    frameState.terrainExaggeration = this.globe.terrainExaggeration;\n    frameState.terrainExaggerationRelativeHeight = this.globe.terrainExaggerationRelativeHeight;\n  }\n\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this._specularEnvironmentMapAtlas) &&\n    this._specularEnvironmentMapAtlas.ready\n  ) {\n    frameState.specularEnvironmentMaps = this._specularEnvironmentMapAtlas.texture;\n    frameState.specularEnvironmentMapsMaximumLOD = this._specularEnvironmentMapAtlas.maximumMipmapLevel;\n  } else {\n    frameState.specularEnvironmentMaps = undefined;\n    frameState.specularEnvironmentMapsMaximumLOD = undefined;\n  }\n\n  frameState.sphericalHarmonicCoefficients = this.sphericalHarmonicCoefficients;\n\n  this._actualInvertClassificationColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(\n    this.invertClassificationColor,\n    this._actualInvertClassificationColor\n  );\n  if (!_InvertClassification_js__WEBPACK_IMPORTED_MODULE_49__/* ["default"].isTranslucencySupported */ .Z.isTranslucencySupported(this._context)) {\n    this._actualInvertClassificationColor.alpha = 1.0;\n  }\n\n  frameState.invertClassificationColor = this._actualInvertClassificationColor;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.globe)) {\n    frameState.maximumScreenSpaceError = this.globe.maximumScreenSpaceError;\n  } else {\n    frameState.maximumScreenSpaceError = 2;\n  }\n\n  this.clearPasses(frameState.passes);\n\n  frameState.tilesetPassState = undefined;\n};\n\n/**\n * @private\n */\nScene.prototype.isVisible = function (command, cullingVolume, occluder) {\n  return (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command) &&\n    (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.boundingVolume) ||\n      !command.cull ||\n      (cullingVolume.computeVisibility(command.boundingVolume) !==\n        _Core_Intersect_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].OUTSIDE */ .Z.OUTSIDE &&\n        (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(occluder) ||\n          !command.occlude ||\n          !command.boundingVolume.isOccluded(occluder))))\n  );\n};\n\nvar transformFrom2D = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0\n);\ntransformFrom2D = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].inverseTransformation */ .Z.inverseTransformation(\n  transformFrom2D,\n  transformFrom2D\n);\n\nfunction debugShowBoundingVolume(command, scene, passState, debugFramebuffer) {\n  // Debug code to draw bounding volume for command.  Not optimized!\n  // Assumes bounding volume is a bounding sphere or box\n  var frameState = scene._frameState;\n  var context = frameState.context;\n  var boundingVolume = command.boundingVolume;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._debugVolume)) {\n    scene._debugVolume.destroy();\n  }\n\n  var geometry;\n\n  var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(boundingVolume.center);\n  if (frameState.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    center = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].multiplyByPoint */ .Z.multiplyByPoint(transformFrom2D, center, center);\n    var projection = frameState.mapProjection;\n    var centerCartographic = projection.unproject(center);\n    center = projection.ellipsoid.cartographicToCartesian(centerCartographic);\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(boundingVolume.radius)) {\n    var radius = boundingVolume.radius;\n\n    geometry = _Core_GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].toWireframe */ .Z.toWireframe(\n      _Core_EllipsoidGeometry_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].createGeometry */ .Z.createGeometry(\n        new _Core_EllipsoidGeometry_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n          radii: new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(radius, radius, radius),\n          vertexFormat: _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_54__/* ["default"].FLAT_VERTEX_FORMAT */ .Z.FLAT_VERTEX_FORMAT,\n        })\n      )\n    );\n\n    scene._debugVolume = new _Primitive_js__WEBPACK_IMPORTED_MODULE_57__/* ["default"] */ .Z({\n      geometryInstances: new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n        geometry: geometry,\n        modelMatrix: _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromTranslation */ .Z.fromTranslation(center),\n        attributes: {\n          color: new _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(1.0, 0.0, 0.0, 1.0),\n        },\n      }),\n      appearance: new _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_54__/* ["default"] */ .Z({\n        flat: true,\n        translucent: false,\n      }),\n      asynchronous: false,\n    });\n  } else {\n    var halfAxes = boundingVolume.halfAxes;\n\n    geometry = _Core_GeometryPipeline_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].toWireframe */ .Z.toWireframe(\n      _Core_BoxGeometry_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].createGeometry */ .Z.createGeometry(\n        _Core_BoxGeometry_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].fromDimensions */ .Z.fromDimensions({\n          dimensions: new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(2.0, 2.0, 2.0),\n          vertexFormat: _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_54__/* ["default"].FLAT_VERTEX_FORMAT */ .Z.FLAT_VERTEX_FORMAT,\n        })\n      )\n    );\n\n    scene._debugVolume = new _Primitive_js__WEBPACK_IMPORTED_MODULE_57__/* ["default"] */ .Z({\n      geometryInstances: new _Core_GeometryInstance_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n        geometry: geometry,\n        modelMatrix: _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromRotationTranslation */ .Z.fromRotationTranslation(\n          halfAxes,\n          center,\n          new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z()\n        ),\n        attributes: {\n          color: new _Core_ColorGeometryInstanceAttribute_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z(1.0, 0.0, 0.0, 1.0),\n        },\n      }),\n      appearance: new _PerInstanceColorAppearance_js__WEBPACK_IMPORTED_MODULE_54__/* ["default"] */ .Z({\n        flat: true,\n        translucent: false,\n      }),\n      asynchronous: false,\n    });\n  }\n\n  var savedCommandList = frameState.commandList;\n  var commandList = (frameState.commandList = []);\n  scene._debugVolume.update(frameState);\n\n  command = commandList[0];\n\n  if (frameState.useLogDepth) {\n    var logDepth = _DerivedCommand_js__WEBPACK_IMPORTED_MODULE_43__/* ["default"].createLogDepthCommand */ .Z.createLogDepthCommand(command, context);\n    command = logDepth.command;\n  }\n\n  var framebuffer;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(debugFramebuffer)) {\n    framebuffer = passState.framebuffer;\n    passState.framebuffer = debugFramebuffer;\n  }\n\n  command.execute(context, passState);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(framebuffer)) {\n    passState.framebuffer = framebuffer;\n  }\n\n  frameState.commandList = savedCommandList;\n}\n\nfunction executeCommand(command, scene, context, passState, debugFramebuffer) {\n  var frameState = scene._frameState;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.debugCommandFilter) && !scene.debugCommandFilter(command)) {\n    return;\n  }\n\n  if (command instanceof _Renderer_ClearCommand_js__WEBPACK_IMPORTED_MODULE_30__/* ["default"] */ .Z) {\n    command.execute(context, passState);\n    return;\n  }\n\n  if (command.debugShowBoundingVolume && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.boundingVolume)) {\n    debugShowBoundingVolume(command, scene, passState, debugFramebuffer);\n  }\n\n  if (frameState.useLogDepth && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands.logDepth)) {\n    command = command.derivedCommands.logDepth.command;\n  }\n\n  var passes = frameState.passes;\n  if (\n    !passes.pick &&\n    !passes.depth &&\n    scene._hdr &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands.hdr)\n  ) {\n    command = command.derivedCommands.hdr.command;\n  }\n\n  if (passes.pick || passes.depth) {\n    if (\n      passes.pick &&\n      !passes.depth &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands.picking)\n    ) {\n      command = command.derivedCommands.picking.pickCommand;\n      command.execute(context, passState);\n      return;\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands.depth)) {\n      command = command.derivedCommands.depth.depthOnlyCommand;\n      command.execute(context, passState);\n      return;\n    }\n  }\n\n  if (scene.debugShowCommands || scene.debugShowFrustums) {\n    scene._debugInspector.executeDebugShowFrustumsCommand(\n      scene,\n      command,\n      passState\n    );\n    return;\n  }\n\n  if (\n    frameState.shadowState.lightShadowsEnabled &&\n    command.receiveShadows &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(command.derivedCommands.shadows)\n  ) {\n    // If the command receives shadows, execute the derived shadows command.\n    // Some commands, such as OIT derived commands, do not have derived shadow commands themselves\n    // and instead shadowing is built-in. In this case execute the command regularly below.\n    command.derivedCommands.shadows.receiveCommand.execute(context, passState);\n  } else {\n    command.execute(context, passState);\n  }\n}\n\nfunction executeIdCommand(command, scene, context, passState) {\n  var frameState = scene._frameState;\n  var derivedCommands = command.derivedCommands;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands)) {\n    return;\n  }\n\n  if (frameState.useLogDepth && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.logDepth)) {\n    command = derivedCommands.logDepth.command;\n  }\n\n  derivedCommands = command.derivedCommands;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.picking)) {\n    command = derivedCommands.picking.pickCommand;\n    command.execute(context, passState);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(derivedCommands.depth)) {\n    command = derivedCommands.depth.depthOnlyCommand;\n    command.execute(context, passState);\n  }\n}\n\nfunction backToFront(a, b, position) {\n  return (\n    b.boundingVolume.distanceSquaredTo(position) -\n    a.boundingVolume.distanceSquaredTo(position)\n  );\n}\n\nfunction frontToBack(a, b, position) {\n  // When distances are equal equal favor sorting b before a. This gives render priority to commands later in the list.\n  return (\n    a.boundingVolume.distanceSquaredTo(position) -\n    b.boundingVolume.distanceSquaredTo(position) +\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].EPSILON12 */ .Z.EPSILON12\n  );\n}\n\nfunction executeTranslucentCommandsBackToFront(\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  var context = scene.context;\n\n  (0,_Core_mergeSort_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z)(commands, backToFront, scene.camera.positionWC);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(invertClassification)) {\n    executeFunction(\n      invertClassification.unclassifiedCommand,\n      scene,\n      context,\n      passState\n    );\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    executeFunction(commands[i], scene, context, passState);\n  }\n}\n\nfunction executeTranslucentCommandsFrontToBack(\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  var context = scene.context;\n\n  (0,_Core_mergeSort_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z)(commands, frontToBack, scene.camera.positionWC);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(invertClassification)) {\n    executeFunction(\n      invertClassification.unclassifiedCommand,\n      scene,\n      context,\n      passState\n    );\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    executeFunction(commands[i], scene, context, passState);\n  }\n}\n\nfunction getDebugGlobeDepth(scene, index) {\n  var globeDepths = scene._view.debugGlobeDepths;\n  var globeDepth = globeDepths[index];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeDepth) && scene.context.depthTexture) {\n    globeDepth = new _GlobeDepth_js__WEBPACK_IMPORTED_MODULE_47__/* ["default"] */ .Z();\n    globeDepths[index] = globeDepth;\n  }\n  return globeDepth;\n}\n\nvar scratchPerspectiveFrustum = new _Core_PerspectiveFrustum_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z();\nvar scratchPerspectiveOffCenterFrustum = new _Core_PerspectiveOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z();\nvar scratchOrthographicFrustum = new _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z();\nvar scratchOrthographicOffCenterFrustum = new _Core_OrthographicOffCenterFrustum_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z();\n\nfunction executeCommands(scene, passState) {\n  var camera = scene.camera;\n  var context = scene.context;\n  var frameState = scene.frameState;\n  var us = context.uniformState;\n\n  us.updateCamera(camera);\n\n  // Create a working frustum from the original camera frustum.\n  var frustum;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(camera.frustum.fov)) {\n    frustum = camera.frustum.clone(scratchPerspectiveFrustum);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(camera.frustum.infiniteProjectionMatrix)) {\n    frustum = camera.frustum.clone(scratchPerspectiveOffCenterFrustum);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(camera.frustum.width)) {\n    frustum = camera.frustum.clone(scratchOrthographicFrustum);\n  } else {\n    frustum = camera.frustum.clone(scratchOrthographicOffCenterFrustum);\n  }\n\n  // Ideally, we would render the sky box and atmosphere last for\n  // early-z, but we would have to draw it in each frustum\n  frustum.near = camera.frustum.near;\n  frustum.far = camera.frustum.far;\n  us.updateFrustum(frustum);\n  us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].ENVIRONMENT */ .Z.ENVIRONMENT);\n\n  var passes = frameState.passes;\n  var picking = passes.pick;\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n  var useWebVR = environmentState.useWebVR;\n\n  // Do not render environment primitives during a pick pass since they do not generate picking commands.\n  if (!picking) {\n    var skyBoxCommand = environmentState.skyBoxCommand;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(skyBoxCommand)) {\n      executeCommand(skyBoxCommand, scene, context, passState);\n    }\n\n    if (environmentState.isSkyAtmosphereVisible) {\n      executeCommand(\n        environmentState.skyAtmosphereCommand,\n        scene,\n        context,\n        passState\n      );\n    }\n\n    if (environmentState.isSunVisible) {\n      environmentState.sunDrawCommand.execute(context, passState);\n      if (scene.sunBloom && !useWebVR) {\n        var framebuffer;\n        if (environmentState.useGlobeDepthFramebuffer) {\n          framebuffer = view.globeDepth.framebuffer;\n        } else if (environmentState.usePostProcess) {\n          framebuffer = view.sceneFramebuffer.getFramebuffer();\n        } else {\n          framebuffer = environmentState.originalFramebuffer;\n        }\n        scene._sunPostProcess.execute(context);\n        scene._sunPostProcess.copy(context, framebuffer);\n        passState.framebuffer = framebuffer;\n      }\n    }\n\n    // Moon can be seen through the atmosphere, since the sun is rendered after the atmosphere.\n    if (environmentState.isMoonVisible) {\n      environmentState.moonCommand.execute(context, passState);\n    }\n  }\n\n  // Determine how translucent surfaces will be handled.\n  var executeTranslucentCommands;\n  if (environmentState.useOIT) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._executeOITFunction)) {\n      scene._executeOITFunction = function (\n        scene,\n        executeFunction,\n        passState,\n        commands,\n        invertClassification\n      ) {\n        view.oit.executeCommands(\n          scene,\n          executeFunction,\n          passState,\n          commands,\n          invertClassification\n        );\n      };\n    }\n    executeTranslucentCommands = scene._executeOITFunction;\n  } else if (passes.render) {\n    executeTranslucentCommands = executeTranslucentCommandsBackToFront;\n  } else {\n    executeTranslucentCommands = executeTranslucentCommandsFrontToBack;\n  }\n\n  var frustumCommandsList = view.frustumCommandsList;\n  var numFrustums = frustumCommandsList.length;\n\n  var clearGlobeDepth = environmentState.clearGlobeDepth;\n  var useDepthPlane = environmentState.useDepthPlane;\n  var globeTranslucencyState = scene._globeTranslucencyState;\n  var globeTranslucent = globeTranslucencyState.translucent;\n  var globeTranslucencyFramebuffer = scene._view.globeTranslucencyFramebuffer;\n  var separatePrimitiveFramebuffer = (environmentState.separatePrimitiveFramebuffer = false);\n  var clearDepth = scene._depthClearCommand;\n  var clearStencil = scene._stencilClearCommand;\n  var clearClassificationStencil = scene._classificationStencilClearCommand;\n  var depthPlane = scene._depthPlane;\n  var usePostProcessSelected = environmentState.usePostProcessSelected;\n\n  var height2D = camera.position.z;\n\n  // Execute commands in each frustum in back to front order\n  var j;\n  for (var i = 0; i < numFrustums; ++i) {\n    var index = numFrustums - i - 1;\n    var frustumCommands = frustumCommandsList[index];\n\n    if (scene.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n      // To avoid z-fighting in 2D, move the camera to just before the frustum\n      // and scale the frustum depth to be in [1.0, nearToFarDistance2D].\n      camera.position.z = height2D - frustumCommands.near + 1.0;\n      frustum.far = Math.max(1.0, frustumCommands.far - frustumCommands.near);\n      frustum.near = 1.0;\n      us.update(frameState);\n      us.updateFrustum(frustum);\n    } else {\n      // Avoid tearing artifacts between adjacent frustums in the opaque passes\n      frustum.near =\n        index !== 0\n          ? frustumCommands.near * scene.opaqueFrustumNearOffset\n          : frustumCommands.near;\n      frustum.far = frustumCommands.far;\n      us.updateFrustum(frustum);\n    }\n\n    var globeDepth = scene.debugShowGlobeDepth\n      ? getDebugGlobeDepth(scene, index)\n      : view.globeDepth;\n\n    if (separatePrimitiveFramebuffer) {\n      // Render to globe framebuffer in GLOBE pass\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    var fb;\n    if (\n      scene.debugShowGlobeDepth &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeDepth) &&\n      environmentState.useGlobeDepthFramebuffer\n    ) {\n      globeDepth.update(\n        context,\n        passState,\n        view.viewport,\n        scene._hdr,\n        clearGlobeDepth\n      );\n      globeDepth.clear(context, passState, scene._clearColorCommand.color);\n      fb = passState.framebuffer;\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    clearDepth.execute(context, passState);\n\n    if (context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE);\n    var commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE];\n    var length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE];\n\n    if (globeTranslucent) {\n      globeTranslucencyState.executeGlobeCommands(\n        frustumCommands,\n        executeCommand,\n        globeTranslucencyFramebuffer,\n        scene,\n        passState\n      );\n    } else {\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n      globeDepth.executeCopyDepth(context, passState);\n    }\n\n    if (\n      scene.debugShowGlobeDepth &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeDepth) &&\n      environmentState.useGlobeDepthFramebuffer\n    ) {\n      passState.framebuffer = fb;\n    }\n\n    // Draw terrain classification\n    if (!environmentState.renderTranslucentDepthForPick) {\n      us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION);\n      commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION];\n      length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TERRAIN_CLASSIFICATION */ .Z.TERRAIN_CLASSIFICATION];\n\n      if (globeTranslucent) {\n        globeTranslucencyState.executeGlobeClassificationCommands(\n          frustumCommands,\n          executeCommand,\n          globeTranslucencyFramebuffer,\n          scene,\n          passState\n        );\n      } else {\n        for (j = 0; j < length; ++j) {\n          executeCommand(commands[j], scene, context, passState);\n        }\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.execute(context, passState);\n      if (useDepthPlane) {\n        depthPlane.execute(context, passState);\n      }\n    }\n\n    if (separatePrimitiveFramebuffer) {\n      // Render to primitive framebuffer in all other passes\n      passState.framebuffer = globeDepth.primitiveFramebuffer;\n    }\n\n    if (\n      !environmentState.useInvertClassification ||\n      picking ||\n      environmentState.renderTranslucentDepthForPick\n    ) {\n      // Common/fastest path. Draw 3D Tiles and classification normally.\n\n      // Draw 3D Tiles\n      us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE);\n      commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE];\n      length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      if (length > 0) {\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n          globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n        }\n\n        // Draw classifications. Modifies 3D Tiles color.\n        if (!environmentState.renderTranslucentDepthForPick) {\n          us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION);\n          commands =\n            frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION];\n          length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION];\n          for (j = 0; j < length; ++j) {\n            executeCommand(commands[j], scene, context, passState);\n          }\n        }\n      }\n    } else {\n      // When the invert classification color is opaque:\n      //    Main FBO (FBO1):                   Main_Color   + Main_DepthStencil\n      //    Invert classification FBO (FBO2) : Invert_Color + Main_DepthStencil\n      //\n      //    1. Clear FBO2 color to vec4(0.0) for each frustum\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Main_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Main_DepthStencil has stencil bit set to 0 (unclassified) and\n      //           * Invert_Color !== vec4(0.0)\n      //\n      // When the invert classification color is translucent:\n      //    Main FBO (FBO1):                  Main_Color         + Main_DepthStencil\n      //    Invert classification FBO (FBO2): Invert_Color       + Invert_DepthStencil\n      //    IsClassified FBO (FBO3):          IsClassified_Color + Invert_DepthStencil\n      //\n      //    1. Clear FBO2 and FBO3 color to vec4(0.0), stencil to 0, and depth to 1.0\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO3, draw any color when\n      //           * Invert_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color !== vec4(0.0)\n      //    6. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color === vec4(0.0)\n      //\n      // NOTE: Step six when translucent invert color occurs after the TRANSLUCENT pass\n      //\n      scene._invertClassification.clear(context, passState);\n\n      var opaqueClassificationFramebuffer = passState.framebuffer;\n      passState.framebuffer = scene._invertClassification._fbo;\n\n      // Draw normally\n      us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE);\n      commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE];\n      length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n        globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n      }\n\n      // Set stencil\n      us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW */ .Z.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW);\n      commands =\n        frustumCommands.commands[\n          _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW */ .Z.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW\n        ];\n      length =\n        frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW */ .Z.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      passState.framebuffer = opaqueClassificationFramebuffer;\n\n      // Fullscreen pass to copy classified fragments\n      scene._invertClassification.executeClassified(context, passState);\n      if (frameState.invertClassificationColor.alpha === 1.0) {\n        // Fullscreen pass to copy unclassified fragments when alpha == 1.0\n        scene._invertClassification.executeUnclassified(context, passState);\n      }\n\n      // Clear stencil set by the classification for the next classification pass\n      if (length > 0 && context.stencilBuffer) {\n        clearClassificationStencil.execute(context, passState);\n      }\n\n      // Draw style over classification.\n      us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION);\n      commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION];\n      length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (length > 0 && context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE);\n    commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE];\n    length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE];\n    for (j = 0; j < length; ++j) {\n      executeCommand(commands[j], scene, context, passState);\n    }\n\n    if (index !== 0 && scene.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n      // Do not overlap frustums in the translucent pass to avoid blending artifacts\n      frustum.near = frustumCommands.near;\n      us.updateFrustum(frustum);\n    }\n\n    var invertClassification;\n    if (\n      !picking &&\n      environmentState.useInvertClassification &&\n      frameState.invertClassificationColor.alpha < 1.0\n    ) {\n      // Fullscreen pass to copy unclassified fragments when alpha < 1.0.\n      // Not executed when undefined.\n      invertClassification = scene._invertClassification;\n    }\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT);\n    commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT];\n    commands.length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT];\n    executeTranslucentCommands(\n      scene,\n      executeCommand,\n      passState,\n      commands,\n      invertClassification\n    );\n\n    // Classification for translucent 3D Tiles\n    var has3DTilesClassificationCommands =\n      frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE_CLASSIFICATION */ .Z.CESIUM_3D_TILE_CLASSIFICATION] > 0;\n    if (\n      has3DTilesClassificationCommands &&\n      view.translucentTileClassification.isSupported()\n    ) {\n      view.translucentTileClassification.executeTranslucentCommands(\n        scene,\n        executeCommand,\n        passState,\n        commands,\n        globeDepth.framebuffer\n      );\n      view.translucentTileClassification.executeClassificationCommands(\n        scene,\n        executeCommand,\n        passState,\n        frustumCommands\n      );\n    }\n\n    if (\n      context.depthTexture &&\n      scene.useDepthPicking &&\n      (environmentState.useGlobeDepthFramebuffer ||\n        renderTranslucentDepthForPick)\n    ) {\n      // PERFORMANCE_IDEA: Use MRT to avoid the extra copy.\n      var depthStencilTexture = renderTranslucentDepthForPick\n        ? passState.framebuffer.depthStencilTexture\n        : globeDepth.framebuffer.depthStencilTexture;\n      var pickDepth = scene._picking.getPickDepth(scene, index);\n      pickDepth.update(context, depthStencilTexture);\n      pickDepth.executeCopyDepth(context, passState);\n    }\n\n    if (separatePrimitiveFramebuffer) {\n      // Reset framebuffer\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    if (picking || !usePostProcessSelected) {\n      continue;\n    }\n\n    var originalFramebuffer = passState.framebuffer;\n    passState.framebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n    // reset frustum\n    frustum.near =\n      index !== 0\n        ? frustumCommands.near * scene.opaqueFrustumNearOffset\n        : frustumCommands.near;\n    frustum.far = frustumCommands.far;\n    us.updateFrustum(frustum);\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE);\n    commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE];\n    length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE];\n\n    if (globeTranslucent) {\n      globeTranslucencyState.executeGlobeCommands(\n        frustumCommands,\n        executeIdCommand,\n        globeTranslucencyFramebuffer,\n        scene,\n        passState\n      );\n    } else {\n      for (j = 0; j < length; ++j) {\n        executeIdCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.framebuffer = passState.framebuffer;\n      clearDepth.execute(context, passState);\n      clearDepth.framebuffer = undefined;\n    }\n\n    if (clearGlobeDepth && useDepthPlane) {\n      depthPlane.execute(context, passState);\n    }\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE);\n    commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE];\n    length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE];\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE);\n    commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE];\n    length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE];\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT);\n    commands = frustumCommands.commands[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT];\n    length = frustumCommands.indices[_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT];\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    passState.framebuffer = originalFramebuffer;\n  }\n}\n\nfunction executeComputeCommands(scene) {\n  var us = scene.context.uniformState;\n  us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].COMPUTE */ .Z.COMPUTE);\n\n  var sunComputeCommand = scene._environmentState.sunComputeCommand;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(sunComputeCommand)) {\n    sunComputeCommand.execute(scene._computeEngine);\n  }\n\n  var commandList = scene._computeCommandList;\n  var length = commandList.length;\n  for (var i = 0; i < length; ++i) {\n    commandList[i].execute(scene._computeEngine);\n  }\n}\n\nfunction executeOverlayCommands(scene, passState) {\n  var us = scene.context.uniformState;\n  us.updatePass(_Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OVERLAY */ .Z.OVERLAY);\n\n  var context = scene.context;\n  var commandList = scene._overlayCommandList;\n  var length = commandList.length;\n  for (var i = 0; i < length; ++i) {\n    commandList[i].execute(context, passState);\n  }\n}\n\nfunction insertShadowCastCommands(scene, commandList, shadowMap) {\n  var shadowVolume = shadowMap.shadowMapCullingVolume;\n  var isPointLight = shadowMap.isPointLight;\n  var passes = shadowMap.passes;\n  var numberOfPasses = passes.length;\n\n  var length = commandList.length;\n  for (var i = 0; i < length; ++i) {\n    var command = commandList[i];\n    scene.updateDerivedCommands(command);\n\n    if (\n      command.castShadows &&\n      (command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].GLOBE */ .Z.GLOBE ||\n        command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].CESIUM_3D_TILE */ .Z.CESIUM_3D_TILE ||\n        command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].OPAQUE */ .Z.OPAQUE ||\n        command.pass === _Renderer_Pass_js__WEBPACK_IMPORTED_MODULE_34__/* ["default"].TRANSLUCENT */ .Z.TRANSLUCENT)\n    ) {\n      if (scene.isVisible(command, shadowVolume)) {\n        if (isPointLight) {\n          for (var k = 0; k < numberOfPasses; ++k) {\n            passes[k].commandList.push(command);\n          }\n        } else if (numberOfPasses === 1) {\n          passes[0].commandList.push(command);\n        } else {\n          var wasVisible = false;\n          // Loop over cascades from largest to smallest\n          for (var j = numberOfPasses - 1; j >= 0; --j) {\n            var cascadeVolume = passes[j].cullingVolume;\n            if (scene.isVisible(command, cascadeVolume)) {\n              passes[j].commandList.push(command);\n              wasVisible = true;\n            } else if (wasVisible) {\n              // If it was visible in the previous cascade but now isn\'t\n              // then there is no need to check any more cascades\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction executeShadowMapCastCommands(scene) {\n  var frameState = scene.frameState;\n  var shadowMaps = frameState.shadowState.shadowMaps;\n  var shadowMapLength = shadowMaps.length;\n\n  if (!frameState.shadowState.shadowsEnabled) {\n    return;\n  }\n\n  var context = scene.context;\n  var uniformState = context.uniformState;\n\n  for (var i = 0; i < shadowMapLength; ++i) {\n    var shadowMap = shadowMaps[i];\n    if (shadowMap.outOfView) {\n      continue;\n    }\n\n    // Reset the command lists\n    var j;\n    var passes = shadowMap.passes;\n    var numberOfPasses = passes.length;\n    for (j = 0; j < numberOfPasses; ++j) {\n      passes[j].commandList.length = 0;\n    }\n\n    // Insert the primitive/model commands into the command lists\n    var sceneCommands = scene.frameState.commandList;\n    insertShadowCastCommands(scene, sceneCommands, shadowMap);\n\n    for (j = 0; j < numberOfPasses; ++j) {\n      var pass = shadowMap.passes[j];\n      uniformState.updateCamera(pass.camera);\n      shadowMap.updatePass(context, j);\n      var numberOfCommands = pass.commandList.length;\n      for (var k = 0; k < numberOfCommands; ++k) {\n        var command = pass.commandList[k];\n        // Set the correct pass before rendering into the shadow map because some shaders\n        // conditionally render based on whether the pass is translucent or opaque.\n        uniformState.updatePass(command.pass);\n        executeCommand(\n          command.derivedCommands.shadows.castCommands[i],\n          scene,\n          context,\n          pass.passState\n        );\n      }\n    }\n  }\n}\n\nvar scratchEyeTranslation = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\n/**\n * @private\n */\nScene.prototype.updateAndExecuteCommands = function (\n  passState,\n  backgroundColor\n) {\n  var frameState = this._frameState;\n  var mode = frameState.mode;\n  var useWebVR = this._environmentState.useWebVR;\n\n  if (useWebVR) {\n    executeWebVRCommands(this, passState, backgroundColor);\n  } else if (\n    mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D ||\n    this._mapMode2D === _MapMode2D_js__WEBPACK_IMPORTED_MODULE_51__/* ["default"].ROTATE */ .Z.ROTATE\n  ) {\n    executeCommandsInViewport(true, this, passState, backgroundColor);\n  } else {\n    updateAndClearFramebuffers(this, passState, backgroundColor);\n    execute2DViewportCommands(this, passState);\n  }\n};\n\nfunction executeWebVRCommands(scene, passState, backgroundColor) {\n  var view = scene._view;\n  var camera = view.camera;\n  var environmentState = scene._environmentState;\n  var renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n\n  updateAndClearFramebuffers(scene, passState, backgroundColor);\n\n  if (!renderTranslucentDepthForPick) {\n    updateAndRenderPrimitives(scene);\n  }\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (!renderTranslucentDepthForPick) {\n    executeComputeCommands(scene);\n    executeShadowMapCastCommands(scene);\n  }\n\n  // Based on Calculating Stereo pairs by Paul Bourke\n  // http://paulbourke.net/stereographics/stereorender/\n  var viewport = passState.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = viewport.width * 0.5;\n\n  var savedCamera = _Camera_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"].clone */ .Z.clone(camera, scene._cameraVR);\n  savedCamera.frustum = camera.frustum;\n\n  var near = camera.frustum.near;\n  var fo = near * (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(scene.focalLength, 5.0);\n  var eyeSeparation = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(scene.eyeSeparation, fo / 30.0);\n  var eyeTranslation = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    savedCamera.right,\n    eyeSeparation * 0.5,\n    scratchEyeTranslation\n  );\n\n  camera.frustum.aspectRatio = viewport.width / viewport.height;\n\n  var offset = (0.5 * eyeSeparation * near) / fo;\n\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].add */ .Z.add(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = offset;\n\n  executeCommands(scene, passState);\n\n  viewport.x = viewport.width;\n\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].subtract */ .Z.subtract(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = -offset;\n\n  executeCommands(scene, passState);\n\n  _Camera_js__WEBPACK_IMPORTED_MODULE_37__/* ["default"].clone */ .Z.clone(savedCamera, camera);\n}\n\nvar scratch2DViewportCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(\n  Math.PI,\n  _Core_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO\n);\nvar scratch2DViewportMaxCoord = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratch2DViewportSavedPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratch2DViewportTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z();\nvar scratch2DViewportCameraTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z();\nvar scratch2DViewportEyePoint = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratch2DViewportWindowCoords = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratch2DViewport = new _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction execute2DViewportCommands(scene, passState) {\n  var context = scene.context;\n  var frameState = scene.frameState;\n  var camera = scene.camera;\n\n  var originalViewport = passState.viewport;\n  var viewport = _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(originalViewport, scratch2DViewport);\n  passState.viewport = viewport;\n\n  var maxCartographic = scratch2DViewportCartographic;\n  var maxCoord = scratch2DViewportMaxCoord;\n\n  var projection = scene.mapProjection;\n  projection.project(maxCartographic, maxCoord);\n\n  var position = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(\n    camera.position,\n    scratch2DViewportSavedPosition\n  );\n  var transform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].clone */ .Z.clone(\n    camera.transform,\n    scratch2DViewportCameraTransform\n  );\n  var frustum = camera.frustum.clone();\n\n  camera._setTransform(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].IDENTITY */ .Z.IDENTITY);\n\n  var viewportTransformation = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].computeViewportTransformation */ .Z.computeViewportTransformation(\n    viewport,\n    0.0,\n    1.0,\n    scratch2DViewportTransform\n  );\n  var projectionMatrix = camera.frustum.projectionMatrix;\n\n  var x = camera.positionWC.y;\n  var eyePoint = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromElements */ .Z.fromElements(\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].sign */ .Z.sign(x) * maxCoord.x - x,\n    0.0,\n    -camera.positionWC.x,\n    scratch2DViewportEyePoint\n  );\n  var windowCoordinates = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_29__/* ["default"].pointToGLWindowCoordinates */ .Z.pointToGLWindowCoordinates(\n    projectionMatrix,\n    viewportTransformation,\n    eyePoint,\n    scratch2DViewportWindowCoords\n  );\n\n  windowCoordinates.x = Math.floor(windowCoordinates.x);\n\n  var viewportX = viewport.x;\n  var viewportWidth = viewport.width;\n\n  if (\n    x === 0.0 ||\n    windowCoordinates.x <= viewportX ||\n    windowCoordinates.x >= viewportX + viewportWidth\n  ) {\n    executeCommandsInViewport(true, scene, passState);\n  } else if (\n    Math.abs(viewportX + viewportWidth * 0.5 - windowCoordinates.x) < 1.0\n  ) {\n    viewport.width = windowCoordinates.x - viewport.x;\n\n    camera.position.x *= _Core_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].sign */ .Z.sign(camera.position.x);\n\n    camera.frustum.right = 0.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = windowCoordinates.x;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = 0.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  } else if (windowCoordinates.x > viewportX + viewportWidth * 0.5) {\n    viewport.width = windowCoordinates.x - viewportX;\n\n    var right = camera.frustum.right;\n    camera.frustum.right = maxCoord.x - x;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.left = -camera.frustum.right;\n    camera.frustum.right = right - camera.frustum.right * 2.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  } else {\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n    var left = camera.frustum.left;\n    camera.frustum.left = -maxCoord.x - x;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = viewportX;\n    viewport.width = windowCoordinates.x - viewportX;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = left - camera.frustum.left * 2.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  }\n\n  camera._setTransform(transform);\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(position, camera.position);\n  camera.frustum = frustum.clone();\n  passState.viewport = originalViewport;\n}\n\nfunction executeCommandsInViewport(\n  firstViewport,\n  scene,\n  passState,\n  backgroundColor\n) {\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n\n  if (!firstViewport && !renderTranslucentDepthForPick) {\n    scene.frameState.commandList.length = 0;\n  }\n\n  if (!renderTranslucentDepthForPick) {\n    updateAndRenderPrimitives(scene);\n  }\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (firstViewport) {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(backgroundColor)) {\n      updateAndClearFramebuffers(scene, passState, backgroundColor);\n    }\n    if (!renderTranslucentDepthForPick) {\n      executeComputeCommands(scene);\n      executeShadowMapCastCommands(scene);\n    }\n  }\n\n  executeCommands(scene, passState);\n}\n\nvar scratchCullingVolume = new _Core_CullingVolume_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z();\n\n/**\n * @private\n */\nScene.prototype.updateEnvironment = function () {\n  var frameState = this._frameState;\n  var view = this._view;\n\n  // Update celestial and terrestrial environment effects.\n  var environmentState = this._environmentState;\n  var renderPass = frameState.passes.render;\n  var offscreenPass = frameState.passes.offscreen;\n  var skyAtmosphere = this.skyAtmosphere;\n  var globe = this.globe;\n  var globeTranslucencyState = this._globeTranslucencyState;\n\n  if (\n    !renderPass ||\n    (this._mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D &&\n      view.camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z) ||\n    !globeTranslucencyState.environmentVisible\n  ) {\n    environmentState.skyAtmosphereCommand = undefined;\n    environmentState.skyBoxCommand = undefined;\n    environmentState.sunDrawCommand = undefined;\n    environmentState.sunComputeCommand = undefined;\n    environmentState.moonCommand = undefined;\n  } else {\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(skyAtmosphere)) {\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe)) {\n        skyAtmosphere.setDynamicAtmosphereColor(\n          globe.enableLighting && globe.dynamicAtmosphereLighting,\n          globe.dynamicAtmosphereLightingFromSun\n        );\n        environmentState.isReadyForAtmosphere =\n          environmentState.isReadyForAtmosphere ||\n          globe._surface._tilesToRender.length > 0;\n      }\n      environmentState.skyAtmosphereCommand = skyAtmosphere.update(\n        frameState,\n        globe\n      );\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(environmentState.skyAtmosphereCommand)) {\n        this.updateDerivedCommands(environmentState.skyAtmosphereCommand);\n      }\n    } else {\n      environmentState.skyAtmosphereCommand = undefined;\n    }\n\n    environmentState.skyBoxCommand = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.skyBox)\n      ? this.skyBox.update(frameState, this._hdr)\n      : undefined;\n    var sunCommands = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.sun)\n      ? this.sun.update(frameState, view.passState, this._hdr)\n      : undefined;\n    environmentState.sunDrawCommand = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(sunCommands)\n      ? sunCommands.drawCommand\n      : undefined;\n    environmentState.sunComputeCommand = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(sunCommands)\n      ? sunCommands.computeCommand\n      : undefined;\n    environmentState.moonCommand = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.moon)\n      ? this.moon.update(frameState)\n      : undefined;\n  }\n\n  var clearGlobeDepth = (environmentState.clearGlobeDepth =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe) &&\n    globe.show &&\n    (!globe.depthTestAgainstTerrain || this.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D));\n  var useDepthPlane = (environmentState.useDepthPlane =\n    clearGlobeDepth &&\n    this.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    globeTranslucencyState.useDepthPlane);\n  if (useDepthPlane) {\n    // Update the depth plane that is rendered in 3D when the primitives are\n    // not depth tested against terrain so primitives on the backface\n    // of the globe are not picked.\n    this._depthPlane.update(frameState);\n  }\n\n  environmentState.renderTranslucentDepthForPick = false;\n  environmentState.useWebVR =\n    this._useWebVR && this.mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D && !offscreenPass;\n\n  var occluder =\n    frameState.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D &&\n    !globeTranslucencyState.sunVisibleThroughGlobe\n      ? frameState.occluder\n      : undefined;\n  var cullingVolume = frameState.cullingVolume;\n\n  // get user culling volume minus the far plane.\n  var planes = scratchCullingVolume.planes;\n  for (var k = 0; k < 5; ++k) {\n    planes[k] = cullingVolume.planes[k];\n  }\n  cullingVolume = scratchCullingVolume;\n\n  // Determine visibility of celestial and terrestrial environment effects.\n  environmentState.isSkyAtmosphereVisible =\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(environmentState.skyAtmosphereCommand) &&\n    environmentState.isReadyForAtmosphere;\n  environmentState.isSunVisible = this.isVisible(\n    environmentState.sunDrawCommand,\n    cullingVolume,\n    occluder\n  );\n  environmentState.isMoonVisible = this.isVisible(\n    environmentState.moonCommand,\n    cullingVolume,\n    occluder\n  );\n\n  var envMaps = this.specularEnvironmentMaps;\n  var envMapAtlas = this._specularEnvironmentMapAtlas;\n  if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(envMaps) &&\n    (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(envMapAtlas) || envMapAtlas.url !== envMaps)\n  ) {\n    envMapAtlas = envMapAtlas && envMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = new _OctahedralProjectedCubeMap_js__WEBPACK_IMPORTED_MODULE_52__/* ["default"] */ .Z(envMaps);\n  } else if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(envMaps) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(envMapAtlas)) {\n    envMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = undefined;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this._specularEnvironmentMapAtlas)) {\n    this._specularEnvironmentMapAtlas.update(frameState);\n  }\n};\n\nfunction updateDebugFrustumPlanes(scene) {\n  var frameState = scene._frameState;\n  if (scene.debugShowFrustumPlanes !== scene._debugShowFrustumPlanes) {\n    if (scene.debugShowFrustumPlanes) {\n      scene._debugFrustumPlanes = new _DebugCameraPrimitive_js__WEBPACK_IMPORTED_MODULE_41__/* ["default"] */ .Z({\n        camera: scene.camera,\n        updateOnChange: false,\n        frustumSplits: frameState.frustumSplits,\n      });\n    } else {\n      scene._debugFrustumPlanes =\n        scene._debugFrustumPlanes && scene._debugFrustumPlanes.destroy();\n    }\n    scene._debugShowFrustumPlanes = scene.debugShowFrustumPlanes;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._debugFrustumPlanes)) {\n    scene._debugFrustumPlanes.update(frameState);\n  }\n}\n\nfunction updateShadowMaps(scene) {\n  var frameState = scene._frameState;\n  var shadowMaps = frameState.shadowMaps;\n  var length = shadowMaps.length;\n\n  var shadowsEnabled =\n    length > 0 && !frameState.passes.pick && scene.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE3D */ .Z.SCENE3D;\n  if (shadowsEnabled !== frameState.shadowState.shadowsEnabled) {\n    // Update derived commands when shadowsEnabled changes\n    ++frameState.shadowState.lastDirtyTime;\n    frameState.shadowState.shadowsEnabled = shadowsEnabled;\n  }\n\n  frameState.shadowState.lightShadowsEnabled = false;\n\n  if (!shadowsEnabled) {\n    return;\n  }\n\n  // Check if the shadow maps are different than the shadow maps last frame.\n  // If so, the derived commands need to be updated.\n  for (var j = 0; j < length; ++j) {\n    if (shadowMaps[j] !== frameState.shadowState.shadowMaps[j]) {\n      ++frameState.shadowState.lastDirtyTime;\n      break;\n    }\n  }\n\n  frameState.shadowState.shadowMaps.length = 0;\n  frameState.shadowState.lightShadowMaps.length = 0;\n\n  for (var i = 0; i < length; ++i) {\n    var shadowMap = shadowMaps[i];\n    shadowMap.update(frameState);\n\n    frameState.shadowState.shadowMaps.push(shadowMap);\n\n    if (shadowMap.fromLightSource) {\n      frameState.shadowState.lightShadowMaps.push(shadowMap);\n      frameState.shadowState.lightShadowsEnabled = true;\n    }\n\n    if (shadowMap.dirty) {\n      ++frameState.shadowState.lastDirtyTime;\n      shadowMap.dirty = false;\n    }\n  }\n}\n\nfunction updateAndRenderPrimitives(scene) {\n  var frameState = scene._frameState;\n\n  scene._groundPrimitives.update(frameState);\n  scene._primitives.update(frameState);\n\n  updateDebugFrustumPlanes(scene);\n  updateShadowMaps(scene);\n\n  if (scene._globe) {\n    scene._globe.render(frameState);\n  }\n}\n\nfunction updateAndClearFramebuffers(scene, passState, clearColor) {\n  var context = scene._context;\n  var frameState = scene._frameState;\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n\n  var passes = scene._frameState.passes;\n  var picking = passes.pick;\n  var useWebVR = environmentState.useWebVR;\n\n  // Preserve the reference to the original framebuffer.\n  environmentState.originalFramebuffer = passState.framebuffer;\n\n  // Manage sun bloom post-processing effect.\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.sun) && scene.sunBloom !== scene._sunBloom) {\n    if (scene.sunBloom && !useWebVR) {\n      scene._sunPostProcess = new _SunPostProcess_js__WEBPACK_IMPORTED_MODULE_66__/* ["default"] */ .Z();\n    } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._sunPostProcess)) {\n      scene._sunPostProcess = scene._sunPostProcess.destroy();\n    }\n\n    scene._sunBloom = scene.sunBloom;\n  } else if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.sun) && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._sunPostProcess)) {\n    scene._sunPostProcess = scene._sunPostProcess.destroy();\n    scene._sunBloom = false;\n  }\n\n  // Clear the pass state framebuffer.\n  var clear = scene._clearColorCommand;\n  _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(clearColor, clear.color);\n  clear.execute(context, passState);\n\n  // Update globe depth rendering based on the current context and clear the globe depth framebuffer.\n  // Globe depth is copied for the pick pass to support picking batched geometries in GroundPrimitives.\n  var useGlobeDepthFramebuffer = (environmentState.useGlobeDepthFramebuffer = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(\n    view.globeDepth\n  ));\n  if (useGlobeDepthFramebuffer) {\n    view.globeDepth.update(\n      context,\n      passState,\n      view.viewport,\n      scene._hdr,\n      environmentState.clearGlobeDepth\n    );\n    view.globeDepth.clear(context, passState, clearColor);\n  }\n\n  // If supported, configure OIT to use the globe depth framebuffer and clear the OIT framebuffer.\n  var oit = view.oit;\n  var useOIT = (environmentState.useOIT =\n    !picking && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(oit) && oit.isSupported());\n  if (useOIT) {\n    oit.update(context, passState, view.globeDepth.framebuffer, scene._hdr);\n    oit.clear(context, passState, clearColor);\n    environmentState.useOIT = oit.isSupported();\n  }\n\n  var postProcess = scene.postProcessStages;\n  var usePostProcess = (environmentState.usePostProcess =\n    !picking &&\n    (scene._hdr ||\n      postProcess.length > 0 ||\n      postProcess.ambientOcclusion.enabled ||\n      postProcess.fxaa.enabled ||\n      postProcess.bloom.enabled));\n  environmentState.usePostProcessSelected = false;\n  if (usePostProcess) {\n    view.sceneFramebuffer.update(context, view.viewport, scene._hdr);\n    view.sceneFramebuffer.clear(context, passState, clearColor);\n\n    postProcess.update(context, frameState.useLogDepth, scene._hdr);\n    postProcess.clear(context);\n\n    usePostProcess = environmentState.usePostProcess = postProcess.ready;\n    environmentState.usePostProcessSelected =\n      usePostProcess && postProcess.hasSelected;\n  }\n\n  if (environmentState.isSunVisible && scene.sunBloom && !useWebVR) {\n    passState.framebuffer = scene._sunPostProcess.update(passState);\n    scene._sunPostProcess.clear(context, passState, clearColor);\n  } else if (useGlobeDepthFramebuffer) {\n    passState.framebuffer = view.globeDepth.framebuffer;\n  } else if (usePostProcess) {\n    passState.framebuffer = view.sceneFramebuffer.getFramebuffer();\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(passState.framebuffer)) {\n    clear.execute(context, passState);\n  }\n\n  var useInvertClassification = (environmentState.useInvertClassification =\n    !picking && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(passState.framebuffer) && scene.invertClassification);\n  if (useInvertClassification) {\n    var depthFramebuffer;\n    if (scene.frameState.invertClassificationColor.alpha === 1.0) {\n      if (environmentState.useGlobeDepthFramebuffer) {\n        depthFramebuffer = view.globeDepth.framebuffer;\n      }\n    }\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(depthFramebuffer) || context.depthTexture) {\n      scene._invertClassification.previousFramebuffer = depthFramebuffer;\n      scene._invertClassification.update(context);\n      scene._invertClassification.clear(context, passState);\n\n      if (scene.frameState.invertClassificationColor.alpha < 1.0 && useOIT) {\n        var command = scene._invertClassification.unclassifiedCommand;\n        var derivedCommands = command.derivedCommands;\n        derivedCommands.oit = oit.createDerivedCommands(\n          command,\n          context,\n          derivedCommands.oit\n        );\n      }\n    } else {\n      environmentState.useInvertClassification = false;\n    }\n  }\n\n  if (scene._globeTranslucencyState.translucent) {\n    view.globeTranslucencyFramebuffer.updateAndClear(\n      scene._hdr,\n      view.viewport,\n      context,\n      passState\n    );\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.resolveFramebuffers = function (passState) {\n  var context = this._context;\n  var frameState = this._frameState;\n  var environmentState = this._environmentState;\n  var view = this._view;\n  var globeDepth = view.globeDepth;\n\n  var useOIT = environmentState.useOIT;\n  var useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer;\n  var usePostProcess = environmentState.usePostProcess;\n\n  var defaultFramebuffer = environmentState.originalFramebuffer;\n  var globeFramebuffer = useGlobeDepthFramebuffer\n    ? globeDepth.framebuffer\n    : undefined;\n  var sceneFramebuffer = view.sceneFramebuffer.getFramebuffer();\n  var idFramebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n  if (environmentState.separatePrimitiveFramebuffer) {\n    // Merge primitive framebuffer into globe framebuffer\n    globeDepth.executeMergeColor(context, passState);\n  }\n\n  if (useOIT) {\n    passState.framebuffer = usePostProcess\n      ? sceneFramebuffer\n      : defaultFramebuffer;\n    view.oit.execute(context, passState);\n  }\n\n  var translucentTileClassification = view.translucentTileClassification;\n  if (\n    translucentTileClassification.hasTranslucentDepth &&\n    translucentTileClassification.isSupported()\n  ) {\n    translucentTileClassification.execute(this, passState);\n  }\n\n  if (usePostProcess) {\n    var inputFramebuffer = sceneFramebuffer;\n    if (useGlobeDepthFramebuffer && !useOIT) {\n      inputFramebuffer = globeFramebuffer;\n    }\n\n    var postProcess = this.postProcessStages;\n    var colorTexture = inputFramebuffer.getColorTexture(0);\n    var idTexture = idFramebuffer.getColorTexture(0);\n    var depthTexture = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(globeFramebuffer, sceneFramebuffer)\n      .depthStencilTexture;\n    postProcess.execute(context, colorTexture, depthTexture, idTexture);\n    postProcess.copy(context, defaultFramebuffer);\n  }\n\n  if (!useOIT && !usePostProcess && useGlobeDepthFramebuffer) {\n    passState.framebuffer = defaultFramebuffer;\n    globeDepth.executeCopyColor(context, passState);\n  }\n\n  var useLogDepth = frameState.useLogDepth;\n\n  if (this.debugShowGlobeDepth && useGlobeDepthFramebuffer) {\n    var gd = getDebugGlobeDepth(this, this.debugShowDepthFrustum - 1);\n    gd.executeDebugGlobeDepth(context, passState, useLogDepth);\n  }\n\n  if (this.debugShowPickDepth && useGlobeDepthFramebuffer) {\n    var pd = this._picking.getPickDepth(this, this.debugShowDepthFrustum - 1);\n    pd.executeDebugPickDepth(context, passState, useLogDepth);\n  }\n};\n\nfunction callAfterRenderFunctions(scene) {\n  // Functions are queued up during primitive update and executed here in case\n  // the function modifies scene state that should remain constant over the frame.\n  var functions = scene._frameState.afterRender;\n  for (var i = 0, length = functions.length; i < length; ++i) {\n    functions[i]();\n    scene.requestRender();\n  }\n\n  functions.length = 0;\n}\n\nfunction getGlobeHeight(scene) {\n  var globe = scene._globe;\n  var camera = scene.camera;\n  var cartographic = camera.positionCartographic;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe) && globe.show && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(cartographic)) {\n    return globe.getHeight(cartographic);\n  }\n  return undefined;\n}\n\nfunction isCameraUnderground(scene) {\n  var camera = scene.camera;\n  var mode = scene._mode;\n  var globe = scene.globe;\n  var cameraController = scene._screenSpaceCameraController;\n  var cartographic = camera.positionCartographic;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(cartographic)) {\n    return false;\n  }\n\n  if (!cameraController.onMap() && cartographic.height < 0.0) {\n    // The camera can go off the map while in Columbus View.\n    // Make a best guess as to whether it\'s underground by checking if its height is less than zero.\n    return true;\n  }\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe) ||\n    !globe.show ||\n    mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].SCENE2D */ .Z.SCENE2D ||\n    mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].MORPHING */ .Z.MORPHING\n  ) {\n    return false;\n  }\n\n  var globeHeight = scene._globeHeight;\n  return (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globeHeight) && cartographic.height < globeHeight;\n}\n\n/**\n * @private\n */\nScene.prototype.initializeFrame = function () {\n  // Destroy released shaders and textures once every 120 frames to avoid thrashing the cache\n  if (this._shaderFrameCount++ === 120) {\n    this._shaderFrameCount = 0;\n    this._context.shaderCache.destroyReleasedShaderPrograms();\n    this._context.textureCache.destroyReleasedTextures();\n  }\n\n  this._tweens.update();\n\n  this._globeHeight = getGlobeHeight(this);\n  this._cameraUnderground = isCameraUnderground(this);\n  this._globeTranslucencyState.update(this);\n\n  this._screenSpaceCameraController.update();\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this._deviceOrientationCameraController)) {\n    this._deviceOrientationCameraController.update();\n  }\n\n  this.camera.update(this._mode);\n  this.camera._updateCameraChanged();\n};\n\nfunction updateDebugShowFramesPerSecond(scene, renderedThisFrame) {\n  if (scene.debugShowFramesPerSecond) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._performanceDisplay)) {\n      var performanceContainer = document.createElement("div");\n      performanceContainer.className =\n        "cesium-performanceDisplay-defaultContainer";\n      var container = scene._canvas.parentNode;\n      container.appendChild(performanceContainer);\n      var performanceDisplay = new _PerformanceDisplay_js__WEBPACK_IMPORTED_MODULE_53__/* ["default"] */ .Z({\n        container: performanceContainer,\n      });\n      scene._performanceDisplay = performanceDisplay;\n      scene._performanceContainer = performanceContainer;\n    }\n\n    scene._performanceDisplay.throttled = scene.requestRenderMode;\n    scene._performanceDisplay.update(renderedThisFrame);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene._performanceDisplay)) {\n    scene._performanceDisplay =\n      scene._performanceDisplay && scene._performanceDisplay.destroy();\n    scene._performanceContainer.parentNode.removeChild(\n      scene._performanceContainer\n    );\n  }\n}\n\nfunction prePassesUpdate(scene) {\n  scene._jobScheduler.resetBudgets();\n\n  var frameState = scene._frameState;\n  var primitives = scene.primitives;\n  primitives.prePassesUpdate(frameState);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.globe)) {\n    scene.globe.update(frameState);\n  }\n\n  scene._picking.update();\n  frameState.creditDisplay.update();\n}\n\nfunction postPassesUpdate(scene) {\n  var frameState = scene._frameState;\n  var primitives = scene.primitives;\n  primitives.postPassesUpdate(frameState);\n\n  _Core_RequestScheduler_js__WEBPACK_IMPORTED_MODULE_27__/* ["default"].update */ .Z.update();\n}\n\nvar scratchBackgroundColor = new _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z();\n\nfunction render(scene) {\n  var frameState = scene._frameState;\n\n  var context = scene.context;\n  var us = context.uniformState;\n\n  var view = scene._defaultView;\n  scene._view = view;\n\n  scene.updateFrameState();\n  frameState.passes.render = true;\n  frameState.passes.postProcess = scene.postProcessStages.hasSelected;\n  frameState.tilesetPassState = renderTilesetPassState;\n\n  var backgroundColor = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(scene.backgroundColor, _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].BLACK */ .Z.BLACK);\n  if (scene._hdr) {\n    backgroundColor = _Core_Color_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(backgroundColor, scratchBackgroundColor);\n    backgroundColor.red = Math.pow(backgroundColor.red, scene.gamma);\n    backgroundColor.green = Math.pow(backgroundColor.green, scene.gamma);\n    backgroundColor.blue = Math.pow(backgroundColor.blue, scene.gamma);\n  }\n  frameState.backgroundColor = backgroundColor;\n\n  scene.fog.update(frameState);\n\n  us.update(frameState);\n\n  var shadowMap = scene.shadowMap;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(shadowMap) && shadowMap.enabled) {\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.light) || scene.light instanceof _SunLight_js__WEBPACK_IMPORTED_MODULE_65__/* ["default"] */ .Z) {\n      // Negate the sun direction so that it is from the Sun, not to the Sun\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].negate */ .Z.negate(us.sunDirectionWC, scene._shadowMapCamera.direction);\n    } else {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].clone */ .Z.clone(scene.light.direction, scene._shadowMapCamera.direction);\n    }\n    frameState.shadowMaps.push(shadowMap);\n  }\n\n  scene._computeCommandList.length = 0;\n  scene._overlayCommandList.length = 0;\n\n  var viewport = view.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = context.drawingBufferWidth;\n  viewport.height = context.drawingBufferHeight;\n\n  var passState = view.passState;\n  passState.framebuffer = undefined;\n  passState.blendingEnabled = undefined;\n  passState.scissorTest = undefined;\n  passState.viewport = _Core_BoundingRectangle_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(viewport, passState.viewport);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.globe)) {\n    scene.globe.beginFrame(frameState);\n  }\n\n  scene.updateEnvironment();\n  scene.updateAndExecuteCommands(passState, backgroundColor);\n  scene.resolveFramebuffers(passState);\n\n  passState.framebuffer = undefined;\n  executeOverlayCommands(scene, passState);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(scene.globe)) {\n    scene.globe.endFrame(frameState);\n\n    if (!scene.globe.tilesLoaded) {\n      scene._renderRequested = true;\n    }\n  }\n\n  context.endFrame();\n}\n\nfunction tryAndCatchError(scene, functionToExecute) {\n  try {\n    functionToExecute(scene);\n  } catch (error) {\n    scene._renderError.raiseEvent(scene, error);\n\n    if (scene.rethrowRenderErrors) {\n      throw error;\n    }\n  }\n}\n\nfunction updateMostDetailedRayPicks(scene) {\n  return scene._picking.updateMostDetailedRayPicks(scene);\n}\n\n/**\n * Update and render the scene. It is usually not necessary to call this function\n * directly because {@link CesiumWidget} or {@link Viewer} do it automatically.\n * @param {JulianDate} [time] The simulation time at which to render.\n */\nScene.prototype.render = function (time) {\n  /**\n   *\n   * Pre passes update. Execute any pass invariant code that should run before the passes here.\n   *\n   */\n  this._preUpdate.raiseEvent(this, time);\n\n  var frameState = this._frameState;\n  frameState.newFrame = false;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(time)) {\n    time = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].now */ .Z.now();\n  }\n\n  // Determine if shouldRender\n  var cameraChanged = this._view.checkForCameraUpdates(this);\n  var shouldRender =\n    !this.requestRenderMode ||\n    this._renderRequested ||\n    cameraChanged ||\n    this._logDepthBufferDirty ||\n    this._hdrDirty ||\n    this.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_59__/* ["default"].MORPHING */ .Z.MORPHING;\n  if (\n    !shouldRender &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this.maximumRenderTimeChange) &&\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this._lastRenderTime)\n  ) {\n    var difference = Math.abs(\n      _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].secondsDifference */ .Z.secondsDifference(this._lastRenderTime, time)\n    );\n    shouldRender = shouldRender || difference > this.maximumRenderTimeChange;\n  }\n\n  if (shouldRender) {\n    this._lastRenderTime = _Core_JulianDate_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].clone */ .Z.clone(time, this._lastRenderTime);\n    this._renderRequested = false;\n    this._logDepthBufferDirty = false;\n    this._hdrDirty = false;\n\n    var frameNumber = _Core_Math_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].incrementWrap */ .Z.incrementWrap(\n      frameState.frameNumber,\n      15000000.0,\n      1.0\n    );\n    updateFrameNumber(this, frameNumber, time);\n    frameState.newFrame = true;\n  }\n\n  tryAndCatchError(this, prePassesUpdate);\n\n  /**\n   *\n   * Passes update. Add any passes here\n   *\n   */\n  if (this.primitives.show) {\n    tryAndCatchError(this, updateMostDetailedRayPicks);\n    tryAndCatchError(this, updatePreloadPass);\n    tryAndCatchError(this, updatePreloadFlightPass);\n    if (!shouldRender) {\n      tryAndCatchError(this, updateRequestRenderModeDeferCheckPass);\n    }\n  }\n\n  this._postUpdate.raiseEvent(this, time);\n\n  if (shouldRender) {\n    this._preRender.raiseEvent(this, time);\n    frameState.creditDisplay.beginFrame();\n    tryAndCatchError(this, render);\n  }\n\n  /**\n   *\n   * Post passes update. Execute any pass invariant code that should run after the passes here.\n   *\n   */\n  updateDebugShowFramesPerSecond(this, shouldRender);\n  tryAndCatchError(this, postPassesUpdate);\n\n  // Often used to trigger events (so don\'t want in trycatch) that the user might be subscribed to. Things like the tile load events, ready promises, etc.\n  // We don\'t want those events to resolve during the render loop because the events might add new primitives\n  callAfterRenderFunctions(this);\n\n  if (shouldRender) {\n    this._postRender.raiseEvent(this, time);\n    frameState.creditDisplay.endFrame();\n  }\n};\n\n/**\n * Update and render the scene. Always forces a new render frame regardless of whether a render was\n * previously requested.\n * @param {JulianDate} [time] The simulation time at which to render.\n *\n * @private\n */\nScene.prototype.forceRender = function (time) {\n  this._renderRequested = true;\n  this.render(time);\n};\n\n/**\n * Requests a new rendered frame when {@link Scene#requestRenderMode} is set to <code>true</code>.\n * The render rate will not exceed the {@link CesiumWidget#targetFrameRate}.\n *\n * @see Scene#requestRenderMode\n */\nScene.prototype.requestRender = function () {\n  this._renderRequested = true;\n};\n\n/**\n * @private\n */\nScene.prototype.clampLineWidth = function (width) {\n  return Math.max(\n    _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].minimumAliasedLineWidth */ .Z.minimumAliasedLineWidth,\n    Math.min(width, _Renderer_ContextLimits_js__WEBPACK_IMPORTED_MODULE_33__/* ["default"].maximumAliasedLineWidth */ .Z.maximumAliasedLineWidth)\n  );\n};\n\n/**\n * Returns an object with a `primitive` property that contains the first (top) primitive in the scene\n * at a particular window coordinate or undefined if nothing is at the location. Other properties may\n * potentially be set depending on the type of primitive and may be used to further identify the picked object.\n * <p>\n * When a feature of a 3D Tiles tileset is picked, <code>pick</code> returns a {@link Cesium3DTileFeature} object.\n * </p>\n *\n * @example\n * // On mouse over, color the feature yellow.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         feature.color = Cesium.Color.YELLOW;\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Number} [width=3] Width of the pick rectangle.\n * @param {Number} [height=3] Height of the pick rectangle.\n * @returns {Object} Object containing the picked primitive.\n */\nScene.prototype.pick = function (windowPosition, width, height) {\n  return this._picking.pick(this, windowPosition, width, height);\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * The returned position is in world coordinates. Used internally by camera functions to\n * prevent conversion to projected 2D coordinates and then back.\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @private\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position in world coordinates.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPositionWorldCoordinates = function (\n  windowPosition,\n  result\n) {\n  return this._picking.pickPositionWorldCoordinates(\n    this,\n    windowPosition,\n    result\n  );\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * <p>\n * The position reconstructed from the depth buffer in 2D may be slightly different from those\n * reconstructed in 3D and Columbus view. This is caused by the difference in the distribution\n * of depth values of perspective and orthographic projection.\n * </p>\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPosition = function (windowPosition, result) {\n  return this._picking.pickPosition(this, windowPosition, result);\n};\n\n/**\n * Returns a list of objects, each containing a `primitive` property, for all primitives at\n * a particular window coordinate position. Other properties may also be set depending on the\n * type of primitive and may be used to further identify the picked object. The primitives in\n * the list are ordered by their visual order in the scene (front to back).\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Number} [limit] If supplied, stop drilling after collecting this many picks.\n * @param {Number} [width=3] Width of the pick rectangle.\n * @param {Number} [height=3] Height of the pick rectangle.\n * @returns {Array.<*>} Array of objects, each containing 1 picked primitives.\n *\n * @exception {DeveloperError} windowPosition is undefined.\n *\n * @example\n * var pickedObjects = scene.drillPick(new Cesium.Cartesian2(100.0, 200.0));\n *\n * @see Scene#pick\n */\nScene.prototype.drillPick = function (windowPosition, limit, width, height) {\n  return this._picking.drillPick(this, windowPosition, limit, width, height);\n};\n\nfunction updatePreloadPass(scene) {\n  var frameState = scene._frameState;\n  preloadTilesetPassState.camera = frameState.camera;\n  preloadTilesetPassState.cullingVolume = frameState.cullingVolume;\n\n  var primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadTilesetPassState);\n}\n\nfunction updatePreloadFlightPass(scene) {\n  var frameState = scene._frameState;\n  var camera = frameState.camera;\n  if (!camera.canPreloadFlight()) {\n    return;\n  }\n\n  preloadFlightTilesetPassState.camera = scene.preloadFlightCamera;\n  preloadFlightTilesetPassState.cullingVolume =\n    scene.preloadFlightCullingVolume;\n\n  var primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadFlightTilesetPassState);\n}\n\nfunction updateRequestRenderModeDeferCheckPass(scene) {\n  // Check if any ignored requests are ready to go (to wake rendering up again)\n  scene.primitives.updateForPass(\n    scene._frameState,\n    requestRenderModeDeferCheckPassState\n  );\n}\n\n/**\n * Returns an object containing the first object intersected by the ray and the position of intersection,\n * or <code>undefined</code> if there were no intersections. The intersected object has a <code>primitive</code>\n * property that contains the intersected primitive. Other properties may be set depending on the type of primitive\n * and may be used to further identify the picked object. The ray must be given in world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object} An object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRay = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRay(this, ray, objectsToExclude, width);\n};\n\n/**\n * Returns a list of objects, each containing the object intersected by the ray and the position of intersection.\n * The intersected object has a <code>primitive</code> property that contains the intersected primitive. Other\n * properties may also be set depending on the type of primitive and may be used to further identify the picked object.\n * The primitives in the list are ordered by first intersection to last intersection. The ray must be given in\n * world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object[]} List of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRay = function (\n  ray,\n  limit,\n  objectsToExclude,\n  width\n) {\n  return this._picking.drillPickFromRay(\n    this,\n    ray,\n    limit,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#pickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Object>} A promise that resolves to an object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRayMostDetailed = function (\n  ray,\n  objectsToExclude,\n  width\n) {\n  return this._picking.pickFromRayMostDetailed(\n    this,\n    ray,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#drillPickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Object[]>} A promise that resolves to a list of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRayMostDetailed = function (\n  ray,\n  limit,\n  objectsToExclude,\n  width\n) {\n  return this._picking.drillPickFromRayMostDetailed(\n    this,\n    ray,\n    limit,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Returns the height of scene geometry at the given cartographic position or <code>undefined</code> if there was no\n * scene geometry to sample height from. The height of the input position is ignored. May be used to clamp objects to\n * the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only samples height from globe tiles and 3D Tiles that are rendered in the current view. Samples height\n * from all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartographic} position The cartographic position to sample height from.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Number} The height. This may be <code>undefined</code> if there was no scene geometry to sample height from.\n *\n * @example\n * var position = new Cesium.Cartographic(-1.31968, 0.698874);\n * var height = viewer.scene.sampleHeight(position);\n * console.log(height);\n *\n * @see Scene#clampToHeight\n * @see Scene#clampToHeightMostDetailed\n * @see Scene#sampleHeightMostDetailed\n *\n * @exception {DeveloperError} sampleHeight is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeight requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeight = function (position, objectsToExclude, width) {\n  return this._picking.sampleHeight(this, position, objectsToExclude, width);\n};\n\n/**\n * Clamps the given cartesian position to the scene geometry along the geodetic surface normal. Returns the\n * clamped position or <code>undefined</code> if there was no scene geometry to clamp to. May be used to clamp\n * objects to the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only clamps to globe tiles and 3D Tiles that are rendered in the current view. Clamps to\n * all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian position.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @param {Cartesian3} [result] An optional object to return the clamped position.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. This may be <code>undefined</code> if there was no scene geometry to clamp to.\n *\n * @example\n * // Clamp an entity to the underlying scene geometry\n * var position = entity.position.getValue(Cesium.JulianDate.now());\n * entity.position = viewer.scene.clampToHeight(position);\n *\n * @see Scene#sampleHeight\n * @see Scene#sampleHeightMostDetailed\n * @see Scene#clampToHeightMostDetailed\n *\n * @exception {DeveloperError} clampToHeight is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeight requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeight = function (\n  cartesian,\n  objectsToExclude,\n  width,\n  result\n) {\n  return this._picking.clampToHeight(\n    this,\n    cartesian,\n    objectsToExclude,\n    width,\n    result\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#sampleHeight} query for an array of {@link Cartographic} positions\n * using the maximum level of detail for 3D Tilesets in the scene. The height of the input positions is ignored.\n * Returns a promise that is resolved when the query completes. Each point height is modified in place.\n * If a height cannot be determined because no geometry can be sampled at that location, or another error occurs,\n * the height is set to undefined.\n *\n * @param {Cartographic[]} positions The cartographic positions to update with sampled heights.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * var positions = [\n *     new Cesium.Cartographic(-1.31968, 0.69887),\n *     new Cesium.Cartographic(-1.10489, 0.83923)\n * ];\n * var promise = viewer.scene.sampleHeightMostDetailed(positions);\n * promise.then(function(updatedPosition) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * }\n *\n * @see Scene#sampleHeight\n *\n * @exception {DeveloperError} sampleHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeightMostDetailed requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeightMostDetailed = function (\n  positions,\n  objectsToExclude,\n  width\n) {\n  return this._picking.sampleHeightMostDetailed(\n    this,\n    positions,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#clampToHeight} query for an array of {@link Cartesian3} positions\n * using the maximum level of detail for 3D Tilesets in the scene. Returns a promise that is resolved when\n * the query completes. Each position is modified in place. If a position cannot be clamped because no geometry\n * can be sampled at that location, or another error occurs, the element in the array is set to undefined.\n *\n * @param {Cartesian3[]} cartesians The cartesian positions to update with clamped positions.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Cartesian3[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * var cartesians = [\n *     entities[0].position.getValue(Cesium.JulianDate.now()),\n *     entities[1].position.getValue(Cesium.JulianDate.now())\n * ];\n * var promise = viewer.scene.clampToHeightMostDetailed(cartesians);\n * promise.then(function(updatedCartesians) {\n *     entities[0].position = updatedCartesians[0];\n *     entities[1].position = updatedCartesians[1];\n * }\n *\n * @see Scene#clampToHeight\n *\n * @exception {DeveloperError} clampToHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeightMostDetailed requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeightMostDetailed = function (\n  cartesians,\n  objectsToExclude,\n  width\n) {\n  return this._picking.clampToHeightMostDetailed(\n    this,\n    cartesians,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Transforms a position in cartesian coordinates to canvas coordinates.  This is commonly used to place an\n * HTML element at the same screen position as an object in the scene.\n *\n * @param {Cartesian3} position The position in cartesian coordinates.\n * @param {Cartesian2} [result] An optional object to return the input position transformed to canvas coordinates.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.  This may be <code>undefined</code> if the input position is near the center of the ellipsoid.\n *\n * @example\n * // Output the canvas position of longitude/latitude (0, 0) every time the mouse moves.\n * var scene = widget.scene;\n * var ellipsoid = scene.globe.ellipsoid;\n * var position = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n * handler.setInputAction(function(movement) {\n *     console.log(scene.cartesianToCanvasCoordinates(position));\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nScene.prototype.cartesianToCanvasCoordinates = function (position, result) {\n  return _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_60__/* ["default"].wgs84ToWindowCoordinates */ .Z.wgs84ToWindowCoordinates(this, position, result);\n};\n\n/**\n * Instantly completes an active transition.\n */\nScene.prototype.completeMorph = function () {\n  this._transitioner.completeMorph();\n};\n\n/**\n * Asynchronously transitions the scene to 2D.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo2D = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n  duration = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(duration, 2.0);\n  this._transitioner.morphTo2D(duration, ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to Columbus View.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphToColumbusView = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n  duration = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(duration, 2.0);\n  this._transitioner.morphToColumbusView(duration, ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to 3D.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo3D = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n  duration = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z)(duration, 2.0);\n  this._transitioner.morphTo3D(duration, ellipsoid);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Scene#destroy\n */\nScene.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * scene = scene && scene.destroy();\n *\n * @see Scene#isDestroyed\n */\nScene.prototype.destroy = function () {\n  this._tweens.removeAll();\n  this._computeEngine = this._computeEngine && this._computeEngine.destroy();\n  this._screenSpaceCameraController =\n    this._screenSpaceCameraController &&\n    this._screenSpaceCameraController.destroy();\n  this._deviceOrientationCameraController =\n    this._deviceOrientationCameraController &&\n    !this._deviceOrientationCameraController.isDestroyed() &&\n    this._deviceOrientationCameraController.destroy();\n  this._primitives = this._primitives && this._primitives.destroy();\n  this._groundPrimitives =\n    this._groundPrimitives && this._groundPrimitives.destroy();\n  this._globe = this._globe && this._globe.destroy();\n  this.skyBox = this.skyBox && this.skyBox.destroy();\n  this.skyAtmosphere = this.skyAtmosphere && this.skyAtmosphere.destroy();\n  this._debugSphere = this._debugSphere && this._debugSphere.destroy();\n  this.sun = this.sun && this.sun.destroy();\n  this._sunPostProcess = this._sunPostProcess && this._sunPostProcess.destroy();\n  this._depthPlane = this._depthPlane && this._depthPlane.destroy();\n  this._transitioner = this._transitioner && this._transitioner.destroy();\n  this._debugFrustumPlanes =\n    this._debugFrustumPlanes && this._debugFrustumPlanes.destroy();\n  this._brdfLutGenerator =\n    this._brdfLutGenerator && this._brdfLutGenerator.destroy();\n  this._picking = this._picking && this._picking.destroy();\n\n  this._defaultView = this._defaultView && this._defaultView.destroy();\n  this._view = undefined;\n\n  if (this._removeCreditContainer) {\n    this._canvas.parentNode.removeChild(this._creditContainer);\n  }\n\n  this.postProcessStages =\n    this.postProcessStages && this.postProcessStages.destroy();\n\n  this._context = this._context && this._context.destroy();\n  this._frameState.creditDisplay =\n    this._frameState.creditDisplay && this._frameState.creditDisplay.destroy();\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_70__/* ["default"] */ .Z)(this._performanceDisplay)) {\n    this._performanceDisplay =\n      this._performanceDisplay && this._performanceDisplay.destroy();\n    this._performanceContainer.parentNode.removeChild(\n      this._performanceContainer\n    );\n  }\n\n  this._removeRequestListenerCallback();\n  this._removeTaskProcessorListenerCallback();\n  for (var i = 0; i < this._removeGlobeCallbacks.length; ++i) {\n    this._removeGlobeCallbacks[i]();\n  }\n  this._removeGlobeCallbacks.length = 0;\n\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (Scene);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36033\n')},60442:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60838);\n/* harmony import */ var _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60216);\n/* harmony import */ var _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63367);\n/* harmony import */ var _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51688);\n/* harmony import */ var _Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _Core_defined_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(82982);\n/* harmony import */ var _Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86511);\n/* harmony import */ var _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12572);\n/* harmony import */ var _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50491);\n/* harmony import */ var _Core_HeadingPitchRoll_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(57674);\n/* harmony import */ var _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(67627);\n/* harmony import */ var _Core_KeyboardEventModifier_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(89232);\n/* harmony import */ var _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(99417);\n/* harmony import */ var _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(68201);\n/* harmony import */ var _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(72248);\n/* harmony import */ var _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(91473);\n/* harmony import */ var _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(7749);\n/* harmony import */ var _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(87811);\n/* harmony import */ var _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(68457);\n/* harmony import */ var _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(78257);\n/* harmony import */ var _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(95555);\n/* harmony import */ var _CameraEventAggregator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(90070);\n/* harmony import */ var _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(84321);\n/* harmony import */ var _MapMode2D_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(95757);\n/* harmony import */ var _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(89917);\n/* harmony import */ var _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(48244);\n/* harmony import */ var _TweenCollection_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(74476);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Modifies the camera position and orientation based on mouse input to a canvas.\n * @alias ScreenSpaceCameraController\n * @constructor\n *\n * @param {Scene} scene The scene.\n */\nfunction ScreenSpaceCameraController(scene) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(scene)) {\n    throw new _Core_DeveloperError_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z("scene is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  /**\n   * If true, inputs are allowed conditionally with the flags enableTranslate, enableZoom,\n   * enableRotate, enableTilt, and enableLook.  If false, all inputs are disabled.\n   *\n   * NOTE: This setting is for temporary use cases, such as camera flights and\n   * drag-selection of regions (see Picking demo).  It is typically set to false at the\n   * start of such events, and set true on completion.  To keep inputs disabled\n   * past the end of camera flights, you must use the other booleans (enableTranslate,\n   * enableZoom, enableRotate, enableTilt, and enableLook).\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableInputs = true;\n  /**\n   * If true, allows the user to pan around the map.  If false, the camera stays locked at the current position.\n   * This flag only applies in 2D and Columbus view modes.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableTranslate = true;\n  /**\n   * If true, allows the user to zoom in and out.  If false, the camera is locked to the current distance from the ellipsoid.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableZoom = true;\n  /**\n   * If true, allows the user to rotate the world which translates the user\'s position.\n   * This flag only applies in 2D and 3D.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableRotate = true;\n  /**\n   * If true, allows the user to tilt the camera.  If false, the camera is locked to the current heading.\n   * This flag only applies in 3D and Columbus view.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableTilt = true;\n  /**\n   * If true, allows the user to use free-look. If false, the camera view direction can only be changed through translating\n   * or rotating. This flag only applies in 3D and Columbus view modes.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableLook = true;\n  /**\n   * A parameter in the range <code>[0, 1)</code> used to determine how long\n   * the camera will continue to spin because of inertia.\n   * With value of zero, the camera will have no inertia.\n   * @type {Number}\n   * @default 0.9\n   */\n  this.inertiaSpin = 0.9;\n  /**\n   * A parameter in the range <code>[0, 1)</code> used to determine how long\n   * the camera will continue to translate because of inertia.\n   * With value of zero, the camera will have no inertia.\n   * @type {Number}\n   * @default 0.9\n   */\n  this.inertiaTranslate = 0.9;\n  /**\n   * A parameter in the range <code>[0, 1)</code> used to determine how long\n   * the camera will continue to zoom because of inertia.\n   * With value of zero, the camera will have no inertia.\n   * @type {Number}\n   * @default 0.8\n   */\n  this.inertiaZoom = 0.8;\n  /**\n   * A parameter in the range <code>[0, 1)</code> used to limit the range\n   * of various user inputs to a percentage of the window width/height per animation frame.\n   * This helps keep the camera under control in low-frame-rate situations.\n   * @type {Number}\n   * @default 0.1\n   */\n  this.maximumMovementRatio = 0.1;\n  /**\n   * Sets the duration, in seconds, of the bounce back animations in 2D and Columbus view.\n   * @type {Number}\n   * @default 3.0\n   */\n  this.bounceAnimationTime = 3.0;\n  /**\n   * The minimum magnitude, in meters, of the camera position when zooming. Defaults to 1.0.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.minimumZoomDistance = 1.0;\n  /**\n   * The maximum magnitude, in meters, of the camera position when zooming. Defaults to positive infinity.\n   * @type {Number}\n   * @default {@link Number.POSITIVE_INFINITY}\n   */\n  this.maximumZoomDistance = Number.POSITIVE_INFINITY;\n  /**\n   * The input that allows the user to pan around the map. This only applies in 2D and Columbus view modes.\n   * <p>\n   * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n   * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n   * or an array of any of the preceding.\n   * </p>\n   * @type {CameraEventType|Array|undefined}\n   * @default {@link CameraEventType.LEFT_DRAG}\n   */\n  this.translateEventTypes = _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].LEFT_DRAG */ .Z.LEFT_DRAG;\n  /**\n   * The input that allows the user to zoom in/out.\n   * <p>\n   * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n   * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n   * or an array of any of the preceding.\n   * </p>\n   * @type {CameraEventType|Array|undefined}\n   * @default [{@link CameraEventType.RIGHT_DRAG}, {@link CameraEventType.WHEEL}, {@link CameraEventType.PINCH}]\n   */\n  this.zoomEventTypes = [\n    _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].RIGHT_DRAG */ .Z.RIGHT_DRAG,\n    _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].WHEEL */ .Z.WHEEL,\n    _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].PINCH */ .Z.PINCH,\n  ];\n  /**\n   * The input that allows the user to rotate around the globe or another object. This only applies in 3D and Columbus view modes.\n   * <p>\n   * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n   * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n   * or an array of any of the preceding.\n   * </p>\n   * @type {CameraEventType|Array|undefined}\n   * @default {@link CameraEventType.LEFT_DRAG}\n   */\n  this.rotateEventTypes = _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].LEFT_DRAG */ .Z.LEFT_DRAG;\n  /**\n   * The input that allows the user to tilt in 3D and Columbus view or twist in 2D.\n   * <p>\n   * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n   * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n   * or an array of any of the preceding.\n   * </p>\n   * @type {CameraEventType|Array|undefined}\n   * @default [{@link CameraEventType.MIDDLE_DRAG}, {@link CameraEventType.PINCH}, {\n   *     eventType : {@link CameraEventType.LEFT_DRAG},\n   *     modifier : {@link KeyboardEventModifier.CTRL}\n   * }, {\n   *     eventType : {@link CameraEventType.RIGHT_DRAG},\n   *     modifier : {@link KeyboardEventModifier.CTRL}\n   * }]\n   */\n  this.tiltEventTypes = [\n    _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].MIDDLE_DRAG */ .Z.MIDDLE_DRAG,\n    _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].PINCH */ .Z.PINCH,\n    {\n      eventType: _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].LEFT_DRAG */ .Z.LEFT_DRAG,\n      modifier: _Core_KeyboardEventModifier_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].CTRL */ .Z.CTRL,\n    },\n    {\n      eventType: _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].RIGHT_DRAG */ .Z.RIGHT_DRAG,\n      modifier: _Core_KeyboardEventModifier_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].CTRL */ .Z.CTRL,\n    },\n  ];\n  /**\n   * The input that allows the user to change the direction the camera is viewing. This only applies in 3D and Columbus view modes.\n   * <p>\n   * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n   * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n   * or an array of any of the preceding.\n   * </p>\n   * @type {CameraEventType|Array|undefined}\n   * @default { eventType : {@link CameraEventType.LEFT_DRAG}, modifier : {@link KeyboardEventModifier.SHIFT} }\n   */\n  this.lookEventTypes = {\n    eventType: _CameraEventType_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].LEFT_DRAG */ .Z.LEFT_DRAG,\n    modifier: _Core_KeyboardEventModifier_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].SHIFT */ .Z.SHIFT,\n  };\n  /**\n   * The minimum height the camera must be before picking the terrain instead of the ellipsoid.\n   * @type {Number}\n   * @default 150000.0\n   */\n  this.minimumPickingTerrainHeight = 150000.0;\n  this._minimumPickingTerrainHeight = this.minimumPickingTerrainHeight;\n  /**\n   * The minimum height the camera must be before testing for collision with terrain.\n   * @type {Number}\n   * @default 15000.0\n   */\n  this.minimumCollisionTerrainHeight = 15000.0;\n  this._minimumCollisionTerrainHeight = this.minimumCollisionTerrainHeight;\n  /**\n   * The minimum height the camera must be before switching from rotating a track ball to\n   * free look when clicks originate on the sky or in space.\n   * @type {Number}\n   * @default 7500000.0\n   */\n  this.minimumTrackBallHeight = 7500000.0;\n  this._minimumTrackBallHeight = this.minimumTrackBallHeight;\n  /**\n   * Enables or disables camera collision detection with terrain.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enableCollisionDetection = true;\n\n  this._scene = scene;\n  this._globe = undefined;\n  this._ellipsoid = undefined;\n\n  this._aggregator = new _CameraEventAggregator_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"] */ .Z(scene.canvas);\n\n  this._lastInertiaSpinMovement = undefined;\n  this._lastInertiaZoomMovement = undefined;\n  this._lastInertiaTranslateMovement = undefined;\n  this._lastInertiaTiltMovement = undefined;\n\n  // Zoom disables tilt, spin, and translate inertia\n  // Tilt disables spin and translate inertia\n  this._inertiaDisablers = {\n    _lastInertiaZoomMovement: [\n      "_lastInertiaSpinMovement",\n      "_lastInertiaTranslateMovement",\n      "_lastInertiaTiltMovement",\n    ],\n    _lastInertiaTiltMovement: [\n      "_lastInertiaSpinMovement",\n      "_lastInertiaTranslateMovement",\n    ],\n  };\n\n  this._tweens = new _TweenCollection_js__WEBPACK_IMPORTED_MODULE_25__/* ["default"] */ .Z();\n  this._tween = undefined;\n\n  this._horizontalRotationAxis = undefined;\n\n  this._tiltCenterMousePosition = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(-1.0, -1.0);\n  this._tiltCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._rotateMousePosition = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(-1.0, -1.0);\n  this._rotateStartPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._strafeStartPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._strafeMousePosition = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._strafeEndMousePosition = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n  this._zoomMouseStart = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(-1.0, -1.0);\n  this._zoomWorldPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n  this._useZoomWorldPosition = false;\n  this._tiltCVOffMap = false;\n  this._looking = false;\n  this._rotating = false;\n  this._strafing = false;\n  this._zoomingOnVector = false;\n  this._zoomingUnderground = false;\n  this._rotatingZoom = false;\n  this._adjustedHeightForTerrain = false;\n  this._cameraUnderground = false;\n\n  var projection = scene.mapProjection;\n  this._maxCoord = projection.project(\n    new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(Math.PI, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO)\n  );\n\n  // Constants, Make any of these public?\n  this._zoomFactor = 5.0;\n  this._rotateFactor = undefined;\n  this._rotateRateRangeAdjustment = undefined;\n  this._maximumRotateRate = 1.77;\n  this._minimumRotateRate = 1.0 / 5000.0;\n  this._minimumZoomRate = 20.0;\n  this._maximumZoomRate = 5906376272000.0; // distance from the Sun to Pluto in meters.\n  this._minimumUndergroundPickDistance = 2000.0;\n  this._maximumUndergroundPickDistance = 10000.0;\n}\n\nfunction decay(time, coefficient) {\n  if (time < 0) {\n    return 0.0;\n  }\n\n  var tau = (1.0 - coefficient) * 25.0;\n  return Math.exp(-tau * time);\n}\n\nfunction sameMousePosition(movement) {\n  return _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n    movement.startPosition,\n    movement.endPosition,\n    _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON14 */ .Z.EPSILON14\n  );\n}\n\n// If the time between mouse down and mouse up is not between\n// these thresholds, the camera will not move with inertia.\n// This value is probably dependent on the browser and/or the\n// hardware. Should be investigated further.\nvar inertiaMaxClickTimeThreshold = 0.4;\n\nfunction maintainInertia(\n  aggregator,\n  type,\n  modifier,\n  decayCoef,\n  action,\n  object,\n  lastMovementName\n) {\n  var movementState = object[lastMovementName];\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movementState)) {\n    movementState = object[lastMovementName] = {\n      startPosition: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(),\n      endPosition: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(),\n      motion: new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(),\n      inertiaEnabled: true,\n    };\n  }\n\n  var ts = aggregator.getButtonPressTime(type, modifier);\n  var tr = aggregator.getButtonReleaseTime(type, modifier);\n\n  var threshold = ts && tr && (tr.getTime() - ts.getTime()) / 1000.0;\n  var now = new Date();\n  var fromNow = tr && (now.getTime() - tr.getTime()) / 1000.0;\n\n  if (ts && tr && threshold < inertiaMaxClickTimeThreshold) {\n    var d = decay(fromNow, decayCoef);\n\n    var lastMovement = aggregator.getLastMovement(type, modifier);\n    if (\n      !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(lastMovement) ||\n      sameMousePosition(lastMovement) ||\n      !movementState.inertiaEnabled\n    ) {\n      return;\n    }\n\n    movementState.motion.x =\n      (lastMovement.endPosition.x - lastMovement.startPosition.x) * 0.5;\n    movementState.motion.y =\n      (lastMovement.endPosition.y - lastMovement.startPosition.y) * 0.5;\n\n    movementState.startPosition = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n      lastMovement.startPosition,\n      movementState.startPosition\n    );\n\n    movementState.endPosition = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      movementState.motion,\n      d,\n      movementState.endPosition\n    );\n    movementState.endPosition = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(\n      movementState.startPosition,\n      movementState.endPosition,\n      movementState.endPosition\n    );\n\n    // If value from the decreasing exponential function is close to zero,\n    // the end coordinates may be NaN.\n    if (\n      isNaN(movementState.endPosition.x) ||\n      isNaN(movementState.endPosition.y) ||\n      _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].distance */ .Z.distance(\n        movementState.startPosition,\n        movementState.endPosition\n      ) < 0.5\n    ) {\n      return;\n    }\n\n    if (!aggregator.isButtonDown(type, modifier)) {\n      var startPosition = aggregator.getStartMousePosition(type, modifier);\n      action(object, startPosition, movementState);\n    }\n  }\n}\n\nfunction activateInertia(controller, inertiaStateName) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(inertiaStateName)) {\n    // Re-enable inertia if it was disabled\n    var movementState = controller[inertiaStateName];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movementState)) {\n      movementState.inertiaEnabled = true;\n    }\n    // Disable inertia on other movements\n    var inertiasToDisable = controller._inertiaDisablers[inertiaStateName];\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(inertiasToDisable)) {\n      var length = inertiasToDisable.length;\n      for (var i = 0; i < length; ++i) {\n        movementState = controller[inertiasToDisable[i]];\n        if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movementState)) {\n          movementState.inertiaEnabled = false;\n        }\n      }\n    }\n  }\n}\n\nvar scratchEventTypeArray = [];\n\nfunction reactToInput(\n  controller,\n  enabled,\n  eventTypes,\n  action,\n  inertiaConstant,\n  inertiaStateName\n) {\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(eventTypes)) {\n    return;\n  }\n\n  var aggregator = controller._aggregator;\n\n  if (!Array.isArray(eventTypes)) {\n    scratchEventTypeArray[0] = eventTypes;\n    eventTypes = scratchEventTypeArray;\n  }\n\n  var length = eventTypes.length;\n  for (var i = 0; i < length; ++i) {\n    var eventType = eventTypes[i];\n    var type = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(eventType.eventType) ? eventType.eventType : eventType;\n    var modifier = eventType.modifier;\n\n    var movement =\n      aggregator.isMoving(type, modifier) &&\n      aggregator.getMovement(type, modifier);\n    var startPosition = aggregator.getStartMousePosition(type, modifier);\n\n    if (controller.enableInputs && enabled) {\n      if (movement) {\n        action(controller, startPosition, movement);\n        activateInertia(controller, inertiaStateName);\n      } else if (inertiaConstant < 1.0) {\n        maintainInertia(\n          aggregator,\n          type,\n          modifier,\n          inertiaConstant,\n          action,\n          controller,\n          inertiaStateName\n        );\n      }\n    }\n  }\n}\n\nvar scratchZoomPickRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar scratchPickCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchZoomOffset = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchZoomDirection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCenterPixel = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar scratchCenterPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPositionNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPickNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchZoomAxis = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCameraPositionNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n// Scratch variables used in zooming algorithm\nvar scratchTargetNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCameraPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCameraUpNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCameraRightNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchForwardNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPositionToTarget = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPositionToTargetNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPan = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCenterMovement = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCartesian = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCartesianTwo = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCartesianThree = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchZoomViewOptions = {\n  orientation: new _Core_HeadingPitchRoll_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z(),\n};\n\nfunction handleZoom(\n  object,\n  startPosition,\n  movement,\n  zoomFactor,\n  distanceMeasure,\n  unitPositionDotDirection\n) {\n  var percentage = 1.0;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(unitPositionDotDirection)) {\n    percentage = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clamp */ .Z.clamp(\n      Math.abs(unitPositionDotDirection),\n      0.25,\n      1.0\n    );\n  }\n\n  // distanceMeasure should be the height above the ellipsoid.\n  // The zoomRate slows as it approaches the surface and stops minimumZoomDistance above it.\n  var minHeight = object.minimumZoomDistance * percentage;\n  var maxHeight = object.maximumZoomDistance;\n\n  var minDistance = distanceMeasure - minHeight;\n  var zoomRate = zoomFactor * minDistance;\n  zoomRate = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clamp */ .Z.clamp(\n    zoomRate,\n    object._minimumZoomRate,\n    object._maximumZoomRate\n  );\n\n  var diff = movement.endPosition.y - movement.startPosition.y;\n  var rangeWindowRatio = diff / object._scene.canvas.clientHeight;\n  rangeWindowRatio = Math.min(rangeWindowRatio, object.maximumMovementRatio);\n  var distance = zoomRate * rangeWindowRatio;\n\n  if (\n    object.enableCollisionDetection ||\n    object.minimumZoomDistance === 0.0 ||\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(object._globe) // look-at mode\n  ) {\n    if (distance > 0.0 && Math.abs(distanceMeasure - minHeight) < 1.0) {\n      return;\n    }\n\n    if (distance < 0.0 && Math.abs(distanceMeasure - maxHeight) < 1.0) {\n      return;\n    }\n\n    if (distanceMeasure - distance < minHeight) {\n      distance = distanceMeasure - minHeight - 1.0;\n    } else if (distanceMeasure - distance > maxHeight) {\n      distance = distanceMeasure - maxHeight;\n    }\n  }\n\n  var scene = object._scene;\n  var camera = scene.camera;\n  var mode = scene.mode;\n\n  var orientation = scratchZoomViewOptions.orientation;\n  orientation.heading = camera.heading;\n  orientation.pitch = camera.pitch;\n  orientation.roll = camera.roll;\n\n  if (camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z) {\n    if (Math.abs(distance) > 0.0) {\n      camera.zoomIn(distance);\n      camera._adjustOrthographicFrustum();\n    }\n    return;\n  }\n\n  var sameStartPosition = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(\n    startPosition,\n    object._zoomMouseStart\n  );\n  var zoomingOnVector = object._zoomingOnVector;\n  var rotatingZoom = object._rotatingZoom;\n  var pickedPosition;\n\n  if (!sameStartPosition) {\n    object._zoomMouseStart = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n      startPosition,\n      object._zoomMouseStart\n    );\n\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(object._globe)) {\n      if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n        pickedPosition = camera.getPickRay(startPosition, scratchZoomPickRay)\n          .origin;\n        pickedPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n          pickedPosition.y,\n          pickedPosition.z,\n          pickedPosition.x\n        );\n      } else {\n        pickedPosition = pickGlobe(object, startPosition, scratchPickCartesian);\n      }\n    }\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(pickedPosition)) {\n      object._useZoomWorldPosition = true;\n      object._zoomWorldPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n        pickedPosition,\n        object._zoomWorldPosition\n      );\n    } else {\n      object._useZoomWorldPosition = false;\n    }\n\n    zoomingOnVector = object._zoomingOnVector = false;\n    rotatingZoom = object._rotatingZoom = false;\n    object._zoomingUnderground = object._cameraUnderground;\n  }\n\n  if (!object._useZoomWorldPosition) {\n    camera.zoomIn(distance);\n    return;\n  }\n\n  var zoomOnVector = mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW;\n\n  if (camera.positionCartographic.height < 2000000) {\n    rotatingZoom = true;\n  }\n\n  if (!sameStartPosition || rotatingZoom) {\n    if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n      var worldPosition = object._zoomWorldPosition;\n      var endPosition = camera.position;\n\n      if (\n        !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(worldPosition, endPosition) &&\n        camera.positionCartographic.height < object._maxCoord.x * 2.0\n      ) {\n        var savedX = camera.position.x;\n\n        var direction = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(\n          worldPosition,\n          endPosition,\n          scratchZoomDirection\n        );\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(direction, direction);\n\n        var d =\n          (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(worldPosition, endPosition) * distance) /\n          (camera.getMagnitude() * 0.5);\n        camera.move(direction, d * 0.5);\n\n        if (\n          (camera.position.x < 0.0 && savedX > 0.0) ||\n          (camera.position.x > 0.0 && savedX < 0.0)\n        ) {\n          pickedPosition = camera.getPickRay(startPosition, scratchZoomPickRay)\n            .origin;\n          pickedPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n            pickedPosition.y,\n            pickedPosition.z,\n            pickedPosition.x\n          );\n          object._zoomWorldPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n            pickedPosition,\n            object._zoomWorldPosition\n          );\n        }\n      }\n    } else if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n      var cameraPositionNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n        camera.position,\n        scratchCameraPositionNormal\n      );\n      if (\n        object._cameraUnderground ||\n        object._zoomingUnderground ||\n        (camera.positionCartographic.height < 3000.0 &&\n          Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(camera.direction, cameraPositionNormal)) <\n            0.6)\n      ) {\n        zoomOnVector = true;\n      } else {\n        var canvas = scene.canvas;\n\n        var centerPixel = scratchCenterPixel;\n        centerPixel.x = canvas.clientWidth / 2;\n        centerPixel.y = canvas.clientHeight / 2;\n        var centerPosition = pickGlobe(\n          object,\n          centerPixel,\n          scratchCenterPosition\n        );\n        // If centerPosition is not defined, it means the globe does not cover the center position of screen\n\n        if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(centerPosition)) {\n          zoomOnVector = true;\n        } else if (camera.positionCartographic.height < 1000000) {\n          // The math in the else block assumes the camera\n          // points toward the earth surface, so we check it here.\n          // Theoretically, we should check for 90 degree, but it doesn\'t behave well when parallel\n          // to the earth surface\n          if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(camera.direction, cameraPositionNormal) >= -0.5) {\n            zoomOnVector = true;\n          } else {\n            var cameraPosition = scratchCameraPosition;\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(camera.position, cameraPosition);\n            var target = object._zoomWorldPosition;\n\n            var targetNormal = scratchTargetNormal;\n\n            targetNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(target, targetNormal);\n\n            if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(targetNormal, cameraPositionNormal) < 0.0) {\n              return;\n            }\n\n            var center = scratchCenter;\n            var forward = scratchForwardNormal;\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(camera.direction, forward);\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(\n              cameraPosition,\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(forward, 1000, scratchCartesian),\n              center\n            );\n\n            var positionToTarget = scratchPositionToTarget;\n            var positionToTargetNormal = scratchPositionToTargetNormal;\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(target, cameraPosition, positionToTarget);\n\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(positionToTarget, positionToTargetNormal);\n\n            var alphaDot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(\n              cameraPositionNormal,\n              positionToTargetNormal\n            );\n            if (alphaDot >= 0.0) {\n              // We zoomed past the target, and this zoom is not valid anymore.\n              // This line causes the next zoom movement to pick a new starting point.\n              object._zoomMouseStart.x = -1;\n              return;\n            }\n            var alpha = Math.acos(-alphaDot);\n            var cameraDistance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(cameraPosition);\n            var targetDistance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(target);\n            var remainingDistance = cameraDistance - distance;\n            var positionToTargetDistance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(\n              positionToTarget\n            );\n\n            var gamma = Math.asin(\n              _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clamp */ .Z.clamp(\n                (positionToTargetDistance / targetDistance) * Math.sin(alpha),\n                -1.0,\n                1.0\n              )\n            );\n            var delta = Math.asin(\n              _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clamp */ .Z.clamp(\n                (remainingDistance / targetDistance) * Math.sin(alpha),\n                -1.0,\n                1.0\n              )\n            );\n            var beta = gamma - delta + alpha;\n\n            var up = scratchCameraUpNormal;\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(cameraPosition, up);\n            var right = scratchCameraRightNormal;\n            right = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(positionToTargetNormal, up, right);\n            right = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(right, right);\n\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(up, right, scratchCartesian),\n              forward\n            );\n\n            // Calculate new position to move to\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(center, scratchCartesian),\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(center) - distance,\n              center\n            );\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(cameraPosition, cameraPosition);\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n              cameraPosition,\n              remainingDistance,\n              cameraPosition\n            );\n\n            // Pan\n            var pMid = scratchPan;\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(\n                _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n                  up,\n                  Math.cos(beta) - 1,\n                  scratchCartesianTwo\n                ),\n                _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n                  forward,\n                  Math.sin(beta),\n                  scratchCartesianThree\n                ),\n                scratchCartesian\n              ),\n              remainingDistance,\n              pMid\n            );\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(cameraPosition, pMid, cameraPosition);\n\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(center, up);\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(up, right, scratchCartesian),\n              forward\n            );\n\n            var cMid = scratchCenterMovement;\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(\n                _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n                  up,\n                  Math.cos(beta) - 1,\n                  scratchCartesianTwo\n                ),\n                _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n                  forward,\n                  Math.sin(beta),\n                  scratchCartesianThree\n                ),\n                scratchCartesian\n              ),\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(center),\n              cMid\n            );\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(center, cMid, center);\n\n            // Update camera\n\n            // Set new position\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(cameraPosition, camera.position);\n\n            // Set new direction\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n              _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(center, cameraPosition, scratchCartesian),\n              camera.direction\n            );\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(camera.direction, camera.direction);\n\n            // Set new right & up vectors\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.direction, camera.up, camera.right);\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.right, camera.direction, camera.up);\n\n            camera.setView(scratchZoomViewOptions);\n            return;\n          }\n        } else {\n          var positionNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n            centerPosition,\n            scratchPositionNormal\n          );\n          var pickedNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(\n            object._zoomWorldPosition,\n            scratchPickNormal\n          );\n          var dotProduct = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(pickedNormal, positionNormal);\n\n          if (dotProduct > 0.0 && dotProduct < 1.0) {\n            var angle = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].acosClamped */ .Z.acosClamped(dotProduct);\n            var axis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n              pickedNormal,\n              positionNormal,\n              scratchZoomAxis\n            );\n\n            var denom =\n              Math.abs(angle) > _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].toRadians */ .Z.toRadians(20.0)\n                ? camera.positionCartographic.height * 0.75\n                : camera.positionCartographic.height - distance;\n            var scalar = distance / denom;\n            camera.rotate(axis, angle * scalar);\n          }\n        }\n      }\n    }\n\n    object._rotatingZoom = !zoomOnVector;\n  }\n\n  if ((!sameStartPosition && zoomOnVector) || zoomingOnVector) {\n    var ray;\n    var zoomMouseStart = _SceneTransforms_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"].wgs84ToWindowCoordinates */ .Z.wgs84ToWindowCoordinates(\n      scene,\n      object._zoomWorldPosition,\n      scratchZoomOffset\n    );\n    if (\n      mode !== _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW &&\n      _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(startPosition, object._zoomMouseStart) &&\n      (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(zoomMouseStart)\n    ) {\n      ray = camera.getPickRay(zoomMouseStart, scratchZoomPickRay);\n    } else {\n      ray = camera.getPickRay(startPosition, scratchZoomPickRay);\n    }\n\n    var rayDirection = ray.direction;\n    if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW || mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n        rayDirection.y,\n        rayDirection.z,\n        rayDirection.x,\n        rayDirection\n      );\n    }\n\n    camera.move(rayDirection, distance);\n\n    object._zoomingOnVector = true;\n  } else {\n    camera.zoomIn(distance);\n  }\n\n  if (!object._cameraUnderground) {\n    camera.setView(scratchZoomViewOptions);\n  }\n}\n\nvar translate2DStart = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar translate2DEnd = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar scratchTranslateP0 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction translate2D(controller, startPosition, movement) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var start = camera.getPickRay(movement.startPosition, translate2DStart)\n    .origin;\n  var end = camera.getPickRay(movement.endPosition, translate2DEnd).origin;\n\n  start = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(start.y, start.z, start.x, start);\n  end = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(end.y, end.z, end.x, end);\n\n  var direction = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(start, end, scratchTranslateP0);\n  var distance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(direction);\n\n  if (distance > 0.0) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(direction, direction);\n    camera.move(direction, distance);\n  }\n}\n\nfunction zoom2D(controller, startPosition, movement) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movement.distance)) {\n    movement = movement.distance;\n  }\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  handleZoom(\n    controller,\n    startPosition,\n    movement,\n    controller._zoomFactor,\n    camera.getMagnitude()\n  );\n}\n\nvar twist2DStart = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar twist2DEnd = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction twist2D(controller, startPosition, movement) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movement.angleAndHeight)) {\n    singleAxisTwist2D(controller, startPosition, movement.angleAndHeight);\n    return;\n  }\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var canvas = scene.canvas;\n  var width = canvas.clientWidth;\n  var height = canvas.clientHeight;\n\n  var start = twist2DStart;\n  start.x = (2.0 / width) * movement.startPosition.x - 1.0;\n  start.y = (2.0 / height) * (height - movement.startPosition.y) - 1.0;\n  start = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(start, start);\n\n  var end = twist2DEnd;\n  end.x = (2.0 / width) * movement.endPosition.x - 1.0;\n  end.y = (2.0 / height) * (height - movement.endPosition.y) - 1.0;\n  end = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].normalize */ .Z.normalize(end, end);\n\n  var startTheta = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].acosClamped */ .Z.acosClamped(start.x);\n  if (start.y < 0) {\n    startTheta = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TWO_PI */ .Z.TWO_PI - startTheta;\n  }\n  var endTheta = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].acosClamped */ .Z.acosClamped(end.x);\n  if (end.y < 0) {\n    endTheta = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TWO_PI */ .Z.TWO_PI - endTheta;\n  }\n  var theta = endTheta - startTheta;\n\n  camera.twistRight(theta);\n}\n\nfunction singleAxisTwist2D(controller, startPosition, movement) {\n  var rotateRate =\n    controller._rotateFactor * controller._rotateRateRangeAdjustment;\n\n  if (rotateRate > controller._maximumRotateRate) {\n    rotateRate = controller._maximumRotateRate;\n  }\n\n  if (rotateRate < controller._minimumRotateRate) {\n    rotateRate = controller._minimumRotateRate;\n  }\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var canvas = scene.canvas;\n\n  var phiWindowRatio =\n    (movement.endPosition.x - movement.startPosition.x) / canvas.clientWidth;\n  phiWindowRatio = Math.min(phiWindowRatio, controller.maximumMovementRatio);\n\n  var deltaPhi = rotateRate * phiWindowRatio * Math.PI * 4.0;\n\n  camera.twistRight(deltaPhi);\n}\n\nfunction update2D(controller) {\n  var rotatable2D = controller._scene.mapMode2D === _MapMode2D_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].ROTATE */ .Z.ROTATE;\n  if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY, controller._scene.camera.transform)) {\n    reactToInput(\n      controller,\n      controller.enableZoom,\n      controller.zoomEventTypes,\n      zoom2D,\n      controller.inertiaZoom,\n      "_lastInertiaZoomMovement"\n    );\n    if (rotatable2D) {\n      reactToInput(\n        controller,\n        controller.enableRotate,\n        controller.translateEventTypes,\n        twist2D,\n        controller.inertiaSpin,\n        "_lastInertiaSpinMovement"\n      );\n    }\n  } else {\n    reactToInput(\n      controller,\n      controller.enableTranslate,\n      controller.translateEventTypes,\n      translate2D,\n      controller.inertiaTranslate,\n      "_lastInertiaTranslateMovement"\n    );\n    reactToInput(\n      controller,\n      controller.enableZoom,\n      controller.zoomEventTypes,\n      zoom2D,\n      controller.inertiaZoom,\n      "_lastInertiaZoomMovement"\n    );\n    if (rotatable2D) {\n      reactToInput(\n        controller,\n        controller.enableRotate,\n        controller.tiltEventTypes,\n        twist2D,\n        controller.inertiaSpin,\n        "_lastInertiaTiltMovement"\n      );\n    }\n  }\n}\n\nvar pickGlobeScratchRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar scratchDepthIntersection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchRayIntersection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction pickGlobe(controller, mousePosition, result) {\n  var scene = controller._scene;\n  var globe = controller._globe;\n  var camera = scene.camera;\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globe)) {\n    return undefined;\n  }\n\n  var cullBackFaces = !controller._cameraUnderground;\n\n  var depthIntersection;\n  if (scene.pickPositionSupported) {\n    depthIntersection = scene.pickPositionWorldCoordinates(\n      mousePosition,\n      scratchDepthIntersection\n    );\n  }\n\n  var ray = camera.getPickRay(mousePosition, pickGlobeScratchRay);\n  var rayIntersection = globe.pickWorldCoordinates(\n    ray,\n    scene,\n    cullBackFaces,\n    scratchRayIntersection\n  );\n\n  var pickDistance = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(depthIntersection)\n    ? _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(depthIntersection, camera.positionWC)\n    : Number.POSITIVE_INFINITY;\n  var rayDistance = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(rayIntersection)\n    ? _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(rayIntersection, camera.positionWC)\n    : Number.POSITIVE_INFINITY;\n\n  if (pickDistance < rayDistance) {\n    return _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(depthIntersection, result);\n  }\n\n  return _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(rayIntersection, result);\n}\n\nvar scratchDistanceCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nfunction getDistanceFromSurface(controller) {\n  var ellipsoid = controller._ellipsoid;\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var mode = scene.mode;\n\n  var height = 0.0;\n  if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    var cartographic = ellipsoid.cartesianToCartographic(\n      camera.position,\n      scratchDistanceCartographic\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(cartographic)) {\n      height = cartographic.height;\n    }\n  } else {\n    height = camera.position.z;\n  }\n  var globeHeight = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(controller._scene.globeHeight, 0.0);\n  var distanceFromSurface = Math.abs(globeHeight - height);\n  return distanceFromSurface;\n}\n\nvar scratchSurfaceNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction getZoomDistanceUnderground(controller, ray) {\n  var origin = ray.origin;\n  var direction = ray.direction;\n  var distanceFromSurface = getDistanceFromSurface(controller);\n\n  // Weight zoom distance based on how strongly the pick ray is pointing inward.\n  // Geocentric normal is accurate enough for these purposes\n  var surfaceNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(origin, scratchSurfaceNormal);\n  var strength = Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(surfaceNormal, direction));\n  strength = Math.max(strength, 0.5) * 2.0;\n  return distanceFromSurface * strength;\n}\n\nfunction getTiltCenterUnderground(controller, ray, pickedPosition, result) {\n  var distance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(ray.origin, pickedPosition);\n  var distanceFromSurface = getDistanceFromSurface(controller);\n\n  var maximumDistance = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].clamp */ .Z.clamp(\n    distanceFromSurface * 5.0,\n    controller._minimumUndergroundPickDistance,\n    controller._maximumUndergroundPickDistance\n  );\n\n  if (distance > maximumDistance) {\n    // Simulate look-at behavior by tilting around a small invisible sphere\n    distance = Math.min(distance, distanceFromSurface / 5.0);\n    distance = Math.max(distance, 100.0);\n  }\n\n  return _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].getPoint */ .Z.getPoint(ray, distance, result);\n}\n\nfunction getStrafeStartPositionUnderground(\n  controller,\n  ray,\n  pickedPosition,\n  result\n) {\n  var distance;\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(pickedPosition)) {\n    distance = getDistanceFromSurface(controller);\n  } else {\n    distance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(ray.origin, pickedPosition);\n    if (distance > controller._maximumUndergroundPickDistance) {\n      // If the picked position is too far away set the strafe speed based on the\n      // camera\'s height from the globe surface\n      distance = getDistanceFromSurface(controller);\n    }\n  }\n\n  return _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].getPoint */ .Z.getPoint(ray, distance, result);\n}\n\nvar scratchInertialDelta = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction continueStrafing(controller, movement) {\n  // Update the end position continually based on the inertial delta\n  var originalEndPosition = movement.endPosition;\n  var inertialDelta = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].subtract */ .Z.subtract(\n    movement.endPosition,\n    movement.startPosition,\n    scratchInertialDelta\n  );\n  var endPosition = controller._strafeEndMousePosition;\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].add */ .Z.add(endPosition, inertialDelta, endPosition);\n  movement.endPosition = endPosition;\n  strafe(controller, movement, controller._strafeStartPosition);\n  movement.endPosition = originalEndPosition;\n}\n\nvar translateCVStartRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar translateCVEndRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar translateCVStartPos = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar translateCVEndPos = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar translateCVDifference = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar translateCVOrigin = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar translateCVPlane = new _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X, 0.0);\nvar translateCVStartMouse = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar translateCVEndMouse = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction translateCV(controller, startPosition, movement) {\n  if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(startPosition, controller._translateMousePosition)) {\n    controller._looking = false;\n  }\n\n  if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(startPosition, controller._strafeMousePosition)) {\n    controller._strafing = false;\n  }\n\n  if (controller._looking) {\n    look3D(controller, startPosition, movement);\n    return;\n  }\n\n  if (controller._strafing) {\n    continueStrafing(controller, movement);\n    return;\n  }\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var cameraUnderground = controller._cameraUnderground;\n  var startMouse = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n    movement.startPosition,\n    translateCVStartMouse\n  );\n  var endMouse = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(movement.endPosition, translateCVEndMouse);\n  var startRay = camera.getPickRay(startMouse, translateCVStartRay);\n\n  var origin = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO, translateCVOrigin);\n  var normal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X;\n\n  var globePos;\n  if (camera.position.z < controller._minimumPickingTerrainHeight) {\n    globePos = pickGlobe(controller, startMouse, translateCVStartPos);\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globePos)) {\n      origin.x = globePos.x;\n    }\n  }\n\n  if (\n    cameraUnderground ||\n    (origin.x > camera.position.z && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globePos))\n  ) {\n    var pickPosition = globePos;\n    if (cameraUnderground) {\n      pickPosition = getStrafeStartPositionUnderground(\n        controller,\n        startRay,\n        globePos,\n        translateCVStartPos\n      );\n    }\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._strafeMousePosition);\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._strafeEndMousePosition);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(pickPosition, controller._strafeStartPosition);\n    controller._strafing = true;\n    strafe(controller, movement, controller._strafeStartPosition);\n    return;\n  }\n\n  var plane = _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].fromPointNormal */ .Z.fromPointNormal(origin, normal, translateCVPlane);\n\n  startRay = camera.getPickRay(startMouse, translateCVStartRay);\n  var startPlanePos = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayPlane */ .Z.rayPlane(\n    startRay,\n    plane,\n    translateCVStartPos\n  );\n\n  var endRay = camera.getPickRay(endMouse, translateCVEndRay);\n  var endPlanePos = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayPlane */ .Z.rayPlane(\n    endRay,\n    plane,\n    translateCVEndPos\n  );\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(startPlanePos) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(endPlanePos)) {\n    controller._looking = true;\n    look3D(controller, startPosition, movement);\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._translateMousePosition);\n    return;\n  }\n\n  var diff = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(\n    startPlanePos,\n    endPlanePos,\n    translateCVDifference\n  );\n  var temp = diff.x;\n  diff.x = diff.y;\n  diff.y = diff.z;\n  diff.z = temp;\n  var mag = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(diff);\n  if (mag > _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON6 */ .Z.EPSILON6) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(diff, diff);\n    camera.move(diff, mag);\n  }\n}\n\nvar rotateCVWindowPos = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar rotateCVWindowRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar rotateCVCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar rotateCVVerticalCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar rotateCVTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar rotateCVVerticalTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar rotateCVOrigin = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar rotateCVPlane = new _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X, 0.0);\nvar rotateCVCartesian3 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar rotateCVCart = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar rotateCVOldTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar rotateCVQuaternion = new _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\nvar rotateCVMatrix = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\nvar tilt3DCartesian3 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction rotateCV(controller, startPosition, movement) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movement.angleAndHeight)) {\n    movement = movement.angleAndHeight;\n  }\n\n  if (!_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(startPosition, controller._tiltCenterMousePosition)) {\n    controller._tiltCVOffMap = false;\n    controller._looking = false;\n  }\n\n  if (controller._looking) {\n    look3D(controller, startPosition, movement);\n    return;\n  }\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  if (\n    controller._tiltCVOffMap ||\n    !controller.onMap() ||\n    Math.abs(camera.position.z) > controller._minimumPickingTerrainHeight\n  ) {\n    controller._tiltCVOffMap = true;\n    rotateCVOnPlane(controller, startPosition, movement);\n  } else {\n    rotateCVOnTerrain(controller, startPosition, movement);\n  }\n}\n\nfunction rotateCVOnPlane(controller, startPosition, movement) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var canvas = scene.canvas;\n\n  var windowPosition = rotateCVWindowPos;\n  windowPosition.x = canvas.clientWidth / 2;\n  windowPosition.y = canvas.clientHeight / 2;\n  var ray = camera.getPickRay(windowPosition, rotateCVWindowRay);\n  var normal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X;\n\n  var position = ray.origin;\n  var direction = ray.direction;\n  var scalar;\n  var normalDotDirection = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(normal, direction);\n  if (Math.abs(normalDotDirection) > _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON6 */ .Z.EPSILON6) {\n    scalar = -_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(normal, position) / normalDotDirection;\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(scalar) || scalar <= 0.0) {\n    controller._looking = true;\n    look3D(controller, startPosition, movement);\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._tiltCenterMousePosition);\n    return;\n  }\n\n  var center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(direction, scalar, rotateCVCenter);\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(position, center, center);\n\n  var projection = scene.mapProjection;\n  var ellipsoid = projection.ellipsoid;\n\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(center.y, center.z, center.x, center);\n  var cart = projection.unproject(center, rotateCVCart);\n  ellipsoid.cartographicToCartesian(cart, center);\n\n  var transform = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n    center,\n    ellipsoid,\n    rotateCVTransform\n  );\n\n  var oldGlobe = controller._globe;\n  var oldEllipsoid = controller._ellipsoid;\n  controller._globe = undefined;\n  controller._ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].UNIT_SPHERE */ .Z.UNIT_SPHERE;\n  controller._rotateFactor = 1.0;\n  controller._rotateRateRangeAdjustment = 1.0;\n\n  var oldTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(camera.transform, rotateCVOldTransform);\n  camera._setTransform(transform);\n\n  rotate3D(controller, startPosition, movement, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_Z */ .Z.UNIT_Z);\n\n  camera._setTransform(oldTransform);\n  controller._globe = oldGlobe;\n  controller._ellipsoid = oldEllipsoid;\n\n  var radius = oldEllipsoid.maximumRadius;\n  controller._rotateFactor = 1.0 / radius;\n  controller._rotateRateRangeAdjustment = radius;\n}\n\nfunction rotateCVOnTerrain(controller, startPosition, movement) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var cameraUnderground = controller._cameraUnderground;\n\n  var center;\n  var ray;\n  var normal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X;\n\n  if (_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(startPosition, controller._tiltCenterMousePosition)) {\n    center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(controller._tiltCenter, rotateCVCenter);\n  } else {\n    if (camera.position.z < controller._minimumPickingTerrainHeight) {\n      center = pickGlobe(controller, startPosition, rotateCVCenter);\n    }\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(center)) {\n      ray = camera.getPickRay(startPosition, rotateCVWindowRay);\n      var position = ray.origin;\n      var direction = ray.direction;\n\n      var scalar;\n      var normalDotDirection = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(normal, direction);\n      if (Math.abs(normalDotDirection) > _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON6 */ .Z.EPSILON6) {\n        scalar = -_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(normal, position) / normalDotDirection;\n      }\n\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(scalar) || scalar <= 0.0) {\n        controller._looking = true;\n        look3D(controller, startPosition, movement);\n        _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._tiltCenterMousePosition);\n        return;\n      }\n\n      center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(direction, scalar, rotateCVCenter);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(position, center, center);\n    }\n\n    if (cameraUnderground) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(ray)) {\n        ray = camera.getPickRay(startPosition, rotateCVWindowRay);\n      }\n      getTiltCenterUnderground(controller, ray, center, center);\n    }\n\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._tiltCenterMousePosition);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(center, controller._tiltCenter);\n  }\n\n  var canvas = scene.canvas;\n\n  var windowPosition = rotateCVWindowPos;\n  windowPosition.x = canvas.clientWidth / 2;\n  windowPosition.y = controller._tiltCenterMousePosition.y;\n  ray = camera.getPickRay(windowPosition, rotateCVWindowRay);\n\n  var origin = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO, rotateCVOrigin);\n  origin.x = center.x;\n\n  var plane = _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].fromPointNormal */ .Z.fromPointNormal(origin, normal, rotateCVPlane);\n  var verticalCenter = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayPlane */ .Z.rayPlane(\n    ray,\n    plane,\n    rotateCVVerticalCenter\n  );\n\n  var projection = camera._projection;\n  var ellipsoid = projection.ellipsoid;\n\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(center.y, center.z, center.x, center);\n  var cart = projection.unproject(center, rotateCVCart);\n  ellipsoid.cartographicToCartesian(cart, center);\n\n  var transform = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n    center,\n    ellipsoid,\n    rotateCVTransform\n  );\n\n  var verticalTransform;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(verticalCenter)) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(\n      verticalCenter.y,\n      verticalCenter.z,\n      verticalCenter.x,\n      verticalCenter\n    );\n    cart = projection.unproject(verticalCenter, rotateCVCart);\n    ellipsoid.cartographicToCartesian(cart, verticalCenter);\n\n    verticalTransform = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n      verticalCenter,\n      ellipsoid,\n      rotateCVVerticalTransform\n    );\n  } else {\n    verticalTransform = transform;\n  }\n\n  var oldGlobe = controller._globe;\n  var oldEllipsoid = controller._ellipsoid;\n  controller._globe = undefined;\n  controller._ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].UNIT_SPHERE */ .Z.UNIT_SPHERE;\n  controller._rotateFactor = 1.0;\n  controller._rotateRateRangeAdjustment = 1.0;\n\n  var constrainedAxis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_Z */ .Z.UNIT_Z;\n\n  var oldTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(camera.transform, rotateCVOldTransform);\n  camera._setTransform(transform);\n\n  var tangent = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_Z */ .Z.UNIT_Z,\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.position, rotateCVCartesian3),\n    rotateCVCartesian3\n  );\n  var dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(camera.right, tangent);\n\n  rotate3D(controller, startPosition, movement, constrainedAxis, false, true);\n\n  camera._setTransform(verticalTransform);\n  if (dot < 0.0) {\n    var movementDelta = movement.startPosition.y - movement.endPosition.y;\n    if (\n      (cameraUnderground && movementDelta < 0.0) ||\n      (!cameraUnderground && movementDelta > 0.0)\n    ) {\n      // Prevent camera from flipping past the up axis\n      constrainedAxis = undefined;\n    }\n\n    var oldConstrainedAxis = camera.constrainedAxis;\n    camera.constrainedAxis = undefined;\n\n    rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n\n    camera.constrainedAxis = oldConstrainedAxis;\n  } else {\n    rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(camera.constrainedAxis)) {\n    var right = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n      camera.direction,\n      camera.constrainedAxis,\n      tilt3DCartesian3\n    );\n    if (\n      !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(right, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON6 */ .Z.EPSILON6)\n    ) {\n      if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(right, camera.right) < 0.0) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].negate */ .Z.negate(right, right);\n      }\n\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(right, camera.direction, camera.up);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.direction, camera.up, camera.right);\n\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.up, camera.up);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.right, camera.right);\n    }\n  }\n\n  camera._setTransform(oldTransform);\n  controller._globe = oldGlobe;\n  controller._ellipsoid = oldEllipsoid;\n\n  var radius = oldEllipsoid.maximumRadius;\n  controller._rotateFactor = 1.0 / radius;\n  controller._rotateRateRangeAdjustment = radius;\n\n  var originalPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    camera.positionWC,\n    rotateCVCartesian3\n  );\n\n  if (controller.enableCollisionDetection) {\n    adjustHeightForTerrain(controller);\n  }\n\n  if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(camera.positionWC, originalPosition)) {\n    camera._setTransform(verticalTransform);\n    camera.worldToCameraCoordinatesPoint(originalPosition, originalPosition);\n\n    var magSqrd = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(originalPosition);\n    if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(camera.position) > magSqrd) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.position, camera.position);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n        camera.position,\n        Math.sqrt(magSqrd),\n        camera.position\n      );\n    }\n\n    var angle = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].angleBetween */ .Z.angleBetween(originalPosition, camera.position);\n    var axis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n      originalPosition,\n      camera.position,\n      originalPosition\n    );\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(axis, axis);\n\n    var quaternion = _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(axis, angle, rotateCVQuaternion);\n    var rotation = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].fromQuaternion */ .Z.fromQuaternion(quaternion, rotateCVMatrix);\n    _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyByVector */ .Z.multiplyByVector(rotation, camera.direction, camera.direction);\n    _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyByVector */ .Z.multiplyByVector(rotation, camera.up, camera.up);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.direction, camera.up, camera.right);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.right, camera.direction, camera.up);\n\n    camera._setTransform(oldTransform);\n  }\n}\n\nvar zoomCVWindowPos = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar zoomCVWindowRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar zoomCVIntersection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction zoomCV(controller, startPosition, movement) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movement.distance)) {\n    movement = movement.distance;\n  }\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var canvas = scene.canvas;\n\n  var cameraUnderground = controller._cameraUnderground;\n\n  var windowPosition;\n\n  if (cameraUnderground) {\n    windowPosition = startPosition;\n  } else {\n    windowPosition = zoomCVWindowPos;\n    windowPosition.x = canvas.clientWidth / 2;\n    windowPosition.y = canvas.clientHeight / 2;\n  }\n\n  var ray = camera.getPickRay(windowPosition, zoomCVWindowRay);\n  var position = ray.origin;\n  var direction = ray.direction;\n  var height = camera.position.z;\n\n  var intersection;\n  if (height < controller._minimumPickingTerrainHeight) {\n    intersection = pickGlobe(controller, windowPosition, zoomCVIntersection);\n  }\n\n  var distance;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n    distance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(position, intersection);\n  }\n\n  if (cameraUnderground) {\n    var distanceUnderground = getZoomDistanceUnderground(\n      controller,\n      ray,\n      height\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(distance)) {\n      distance = Math.min(distance, distanceUnderground);\n    } else {\n      distance = distanceUnderground;\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(distance)) {\n    var normal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X;\n    distance =\n      -_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(normal, position) / _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(normal, direction);\n  }\n\n  handleZoom(\n    controller,\n    startPosition,\n    movement,\n    controller._zoomFactor,\n    distance\n  );\n}\n\nfunction updateCV(controller) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY, camera.transform)) {\n    reactToInput(\n      controller,\n      controller.enableRotate,\n      controller.rotateEventTypes,\n      rotate3D,\n      controller.inertiaSpin,\n      "_lastInertiaSpinMovement"\n    );\n    reactToInput(\n      controller,\n      controller.enableZoom,\n      controller.zoomEventTypes,\n      zoom3D,\n      controller.inertiaZoom,\n      "_lastInertiaZoomMovement"\n    );\n  } else {\n    var tweens = controller._tweens;\n\n    if (controller._aggregator.anyButtonDown) {\n      tweens.removeAll();\n    }\n\n    reactToInput(\n      controller,\n      controller.enableTilt,\n      controller.tiltEventTypes,\n      rotateCV,\n      controller.inertiaSpin,\n      "_lastInertiaTiltMovement"\n    );\n    reactToInput(\n      controller,\n      controller.enableTranslate,\n      controller.translateEventTypes,\n      translateCV,\n      controller.inertiaTranslate,\n      "_lastInertiaTranslateMovement"\n    );\n    reactToInput(\n      controller,\n      controller.enableZoom,\n      controller.zoomEventTypes,\n      zoomCV,\n      controller.inertiaZoom,\n      "_lastInertiaZoomMovement"\n    );\n    reactToInput(\n      controller,\n      controller.enableLook,\n      controller.lookEventTypes,\n      look3D\n    );\n\n    if (\n      !controller._aggregator.anyButtonDown &&\n      !tweens.contains(controller._tween)\n    ) {\n      var tween = camera.createCorrectPositionTween(\n        controller.bounceAnimationTime\n      );\n      if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(tween)) {\n        controller._tween = tweens.add(tween);\n      }\n    }\n\n    tweens.update();\n  }\n}\n\nvar scratchStrafeRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar scratchStrafePlane = new _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_X */ .Z.UNIT_X, 0.0);\nvar scratchStrafeIntersection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchStrafeDirection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchMousePos = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction strafe(controller, movement, strafeStartPosition) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  var ray = camera.getPickRay(movement.endPosition, scratchStrafeRay);\n\n  var direction = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(camera.direction, scratchStrafeDirection);\n  if (scene.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(direction.z, direction.x, direction.y, direction);\n  }\n\n  var plane = _Core_Plane_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].fromPointNormal */ .Z.fromPointNormal(\n    strafeStartPosition,\n    direction,\n    scratchStrafePlane\n  );\n  var intersection = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayPlane */ .Z.rayPlane(\n    ray,\n    plane,\n    scratchStrafeIntersection\n  );\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n    return;\n  }\n\n  direction = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(strafeStartPosition, intersection, direction);\n  if (scene.mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(direction.y, direction.z, direction.x, direction);\n  }\n\n  _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(camera.position, direction, camera.position);\n}\n\nvar spin3DPick = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar scratchRadii = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchEllipsoid = new _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z();\nvar scratchLookUp = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchNormal = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction spin3D(controller, startPosition, movement) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var cameraUnderground = controller._cameraUnderground;\n  var ellipsoid = controller._ellipsoid;\n\n  if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(camera.transform, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY)) {\n    rotate3D(controller, startPosition, movement);\n    return;\n  }\n\n  var magnitude;\n  var radii;\n\n  var up = ellipsoid.geodeticSurfaceNormal(camera.position, scratchLookUp);\n\n  if (_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(startPosition, controller._rotateMousePosition)) {\n    if (controller._looking) {\n      look3D(controller, startPosition, movement, up);\n    } else if (controller._rotating) {\n      rotate3D(controller, startPosition, movement);\n    } else if (controller._strafing) {\n      continueStrafing(controller, movement);\n    } else {\n      if (\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(camera.position) <\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(controller._rotateStartPosition)\n      ) {\n        // Pan action is no longer valid if camera moves below the pan ellipsoid\n        return;\n      }\n      magnitude = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(controller._rotateStartPosition);\n      radii = scratchRadii;\n      radii.x = radii.y = radii.z = magnitude;\n      ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(radii, scratchEllipsoid);\n      pan3D(controller, startPosition, movement, ellipsoid);\n    }\n    return;\n  }\n  controller._looking = false;\n  controller._rotating = false;\n  controller._strafing = false;\n\n  var height = ellipsoid.cartesianToCartographic(\n    camera.positionWC,\n    scratchCartographic\n  ).height;\n  var globe = controller._globe;\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globe) && height < controller._minimumPickingTerrainHeight) {\n    var mousePos = pickGlobe(\n      controller,\n      movement.startPosition,\n      scratchMousePos\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(mousePos)) {\n      var strafing = false;\n      var ray = camera.getPickRay(movement.startPosition, pickGlobeScratchRay);\n\n      if (cameraUnderground) {\n        strafing = true;\n        getStrafeStartPositionUnderground(controller, ray, mousePos, mousePos);\n      } else {\n        var normal = ellipsoid.geodeticSurfaceNormal(mousePos, scratchNormal);\n        var tangentPick =\n          Math.abs(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(ray.direction, normal)) < 0.05;\n\n        if (tangentPick) {\n          strafing = true;\n        } else {\n          strafing =\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(camera.position) <\n            _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(mousePos);\n        }\n      }\n\n      if (strafing) {\n        _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._strafeEndMousePosition);\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(mousePos, controller._strafeStartPosition);\n        controller._strafing = true;\n        strafe(controller, movement, controller._strafeStartPosition);\n      } else {\n        magnitude = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(mousePos);\n        radii = scratchRadii;\n        radii.x = radii.y = radii.z = magnitude;\n        ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(radii, scratchEllipsoid);\n        pan3D(controller, startPosition, movement, ellipsoid);\n\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(mousePos, controller._rotateStartPosition);\n      }\n    } else {\n      controller._looking = true;\n      look3D(controller, startPosition, movement, up);\n    }\n  } else if (\n    (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(\n      camera.pickEllipsoid(\n        movement.startPosition,\n        controller._ellipsoid,\n        spin3DPick\n      )\n    )\n  ) {\n    pan3D(controller, startPosition, movement, controller._ellipsoid);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(spin3DPick, controller._rotateStartPosition);\n  } else if (height > controller._minimumTrackBallHeight) {\n    controller._rotating = true;\n    rotate3D(controller, startPosition, movement);\n  } else {\n    controller._looking = true;\n    look3D(controller, startPosition, movement, up);\n  }\n\n  _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._rotateMousePosition);\n}\n\nfunction rotate3D(\n  controller,\n  startPosition,\n  movement,\n  constrainedAxis,\n  rotateOnlyVertical,\n  rotateOnlyHorizontal\n) {\n  rotateOnlyVertical = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(rotateOnlyVertical, false);\n  rotateOnlyHorizontal = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(rotateOnlyHorizontal, false);\n\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var canvas = scene.canvas;\n\n  var oldAxis = camera.constrainedAxis;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(constrainedAxis)) {\n    camera.constrainedAxis = constrainedAxis;\n  }\n\n  var rho = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(camera.position);\n  var rotateRate =\n    controller._rotateFactor * (rho - controller._rotateRateRangeAdjustment);\n\n  if (rotateRate > controller._maximumRotateRate) {\n    rotateRate = controller._maximumRotateRate;\n  }\n\n  if (rotateRate < controller._minimumRotateRate) {\n    rotateRate = controller._minimumRotateRate;\n  }\n\n  var phiWindowRatio =\n    (movement.startPosition.x - movement.endPosition.x) / canvas.clientWidth;\n  var thetaWindowRatio =\n    (movement.startPosition.y - movement.endPosition.y) / canvas.clientHeight;\n  phiWindowRatio = Math.min(phiWindowRatio, controller.maximumMovementRatio);\n  thetaWindowRatio = Math.min(\n    thetaWindowRatio,\n    controller.maximumMovementRatio\n  );\n\n  var deltaPhi = rotateRate * phiWindowRatio * Math.PI * 2.0;\n  var deltaTheta = rotateRate * thetaWindowRatio * Math.PI;\n\n  if (!rotateOnlyVertical) {\n    camera.rotateRight(deltaPhi);\n  }\n\n  if (!rotateOnlyHorizontal) {\n    camera.rotateUp(deltaTheta);\n  }\n\n  camera.constrainedAxis = oldAxis;\n}\n\nvar pan3DP0 = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(_Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNIT_W */ .Z.UNIT_W);\nvar pan3DP1 = _Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(_Core_Cartesian4_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].UNIT_W */ .Z.UNIT_W);\nvar pan3DTemp0 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar pan3DTemp1 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar pan3DTemp2 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar pan3DTemp3 = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar pan3DStartMousePosition = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar pan3DEndMousePosition = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\n\nfunction pan3D(controller, startPosition, movement, ellipsoid) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  var startMousePosition = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n    movement.startPosition,\n    pan3DStartMousePosition\n  );\n  var endMousePosition = _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(\n    movement.endPosition,\n    pan3DEndMousePosition\n  );\n\n  var p0 = camera.pickEllipsoid(startMousePosition, ellipsoid, pan3DP0);\n  var p1 = camera.pickEllipsoid(endMousePosition, ellipsoid, pan3DP1);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(p0) || !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(p1)) {\n    controller._rotating = true;\n    rotate3D(controller, startPosition, movement);\n    return;\n  }\n\n  p0 = camera.worldToCameraCoordinates(p0, p0);\n  p1 = camera.worldToCameraCoordinates(p1, p1);\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(camera.constrainedAxis)) {\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(p0, p0);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(p1, p1);\n    var dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(p0, p1);\n    var axis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(p0, p1, pan3DTemp0);\n\n    if (\n      dot < 1.0 &&\n      !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(axis, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON14 */ .Z.EPSILON14)\n    ) {\n      // dot is in [0, 1]\n      var angle = Math.acos(dot);\n      camera.rotate(axis, angle);\n    }\n  } else {\n    var basis0 = camera.constrainedAxis;\n    var basis1 = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].mostOrthogonalAxis */ .Z.mostOrthogonalAxis(basis0, pan3DTemp0);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(basis1, basis0, basis1);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(basis1, basis1);\n    var basis2 = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(basis0, basis1, pan3DTemp1);\n\n    var startRho = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(p0);\n    var startDot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(basis0, p0);\n    var startTheta = Math.acos(startDot / startRho);\n    var startRej = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(basis0, startDot, pan3DTemp2);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(p0, startRej, startRej);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(startRej, startRej);\n\n    var endRho = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(p1);\n    var endDot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(basis0, p1);\n    var endTheta = Math.acos(endDot / endRho);\n    var endRej = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(basis0, endDot, pan3DTemp3);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(p1, endRej, endRej);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(endRej, endRej);\n\n    var startPhi = Math.acos(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(startRej, basis1));\n    if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(startRej, basis2) < 0) {\n      startPhi = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TWO_PI */ .Z.TWO_PI - startPhi;\n    }\n\n    var endPhi = Math.acos(_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(endRej, basis1));\n    if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(endRej, basis2) < 0) {\n      endPhi = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].TWO_PI */ .Z.TWO_PI - endPhi;\n    }\n\n    var deltaPhi = startPhi - endPhi;\n\n    var east;\n    if (\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(basis0, camera.position, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON2 */ .Z.EPSILON2)\n    ) {\n      east = camera.right;\n    } else {\n      east = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(basis0, camera.position, pan3DTemp0);\n    }\n\n    var planeNormal = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(basis0, east, pan3DTemp0);\n    var side0 = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(\n      planeNormal,\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(p0, basis0, pan3DTemp1)\n    );\n    var side1 = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(\n      planeNormal,\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(p1, basis0, pan3DTemp1)\n    );\n\n    var deltaTheta;\n    if (side0 > 0 && side1 > 0) {\n      deltaTheta = endTheta - startTheta;\n    } else if (side0 > 0 && side1 <= 0) {\n      if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(camera.position, basis0) > 0) {\n        deltaTheta = -startTheta - endTheta;\n      } else {\n        deltaTheta = startTheta + endTheta;\n      }\n    } else {\n      deltaTheta = startTheta - endTheta;\n    }\n\n    camera.rotateRight(deltaPhi);\n    camera.rotateUp(deltaTheta);\n  }\n}\n\nvar zoom3DUnitPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar zoom3DCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nfunction zoom3D(controller, startPosition, movement) {\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movement.distance)) {\n    movement = movement.distance;\n  }\n\n  var ellipsoid = controller._ellipsoid;\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var canvas = scene.canvas;\n\n  var cameraUnderground = controller._cameraUnderground;\n\n  var windowPosition;\n\n  if (cameraUnderground) {\n    windowPosition = startPosition;\n  } else {\n    windowPosition = zoomCVWindowPos;\n    windowPosition.x = canvas.clientWidth / 2;\n    windowPosition.y = canvas.clientHeight / 2;\n  }\n\n  var ray = camera.getPickRay(windowPosition, zoomCVWindowRay);\n\n  var intersection;\n  var height = ellipsoid.cartesianToCartographic(\n    camera.position,\n    zoom3DCartographic\n  ).height;\n  if (height < controller._minimumPickingTerrainHeight) {\n    intersection = pickGlobe(controller, windowPosition, zoomCVIntersection);\n  }\n\n  var distance;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n    distance = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].distance */ .Z.distance(ray.origin, intersection);\n  }\n\n  if (cameraUnderground) {\n    var distanceUnderground = getZoomDistanceUnderground(\n      controller,\n      ray,\n      height\n    );\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(distance)) {\n      distance = Math.min(distance, distanceUnderground);\n    } else {\n      distance = distanceUnderground;\n    }\n  }\n\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(distance)) {\n    distance = height;\n  }\n\n  var unitPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.position, zoom3DUnitPosition);\n  handleZoom(\n    controller,\n    startPosition,\n    movement,\n    controller._zoomFactor,\n    distance,\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(unitPosition, camera.direction)\n  );\n}\n\nvar tilt3DWindowPos = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar tilt3DRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar tilt3DCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar tilt3DVerticalCenter = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar tilt3DTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar tilt3DVerticalTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar tilt3DOldTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar tilt3DQuaternion = new _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z();\nvar tilt3DMatrix = new _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z();\nvar tilt3DCart = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\nvar tilt3DLookUp = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction tilt3D(controller, startPosition, movement) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(camera.transform, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY)) {\n    return;\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(movement.angleAndHeight)) {\n    movement = movement.angleAndHeight;\n  }\n\n  if (!_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(startPosition, controller._tiltCenterMousePosition)) {\n    controller._tiltOnEllipsoid = false;\n    controller._looking = false;\n  }\n\n  if (controller._looking) {\n    var up = controller._ellipsoid.geodeticSurfaceNormal(\n      camera.position,\n      tilt3DLookUp\n    );\n    look3D(controller, startPosition, movement, up);\n    return;\n  }\n\n  var ellipsoid = controller._ellipsoid;\n  var cartographic = ellipsoid.cartesianToCartographic(\n    camera.position,\n    tilt3DCart\n  );\n\n  if (\n    controller._tiltOnEllipsoid ||\n    cartographic.height > controller._minimumCollisionTerrainHeight\n  ) {\n    controller._tiltOnEllipsoid = true;\n    tilt3DOnEllipsoid(controller, startPosition, movement);\n  } else {\n    tilt3DOnTerrain(controller, startPosition, movement);\n  }\n}\n\nvar tilt3DOnEllipsoidCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nfunction tilt3DOnEllipsoid(controller, startPosition, movement) {\n  var ellipsoid = controller._ellipsoid;\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var minHeight = controller.minimumZoomDistance * 0.25;\n  var height = ellipsoid.cartesianToCartographic(\n    camera.positionWC,\n    tilt3DOnEllipsoidCartographic\n  ).height;\n  if (\n    height - minHeight - 1.0 < _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON3 */ .Z.EPSILON3 &&\n    movement.endPosition.y - movement.startPosition.y < 0\n  ) {\n    return;\n  }\n\n  var canvas = scene.canvas;\n\n  var windowPosition = tilt3DWindowPos;\n  windowPosition.x = canvas.clientWidth / 2;\n  windowPosition.y = canvas.clientHeight / 2;\n  var ray = camera.getPickRay(windowPosition, tilt3DRay);\n\n  var center;\n  var intersection = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayEllipsoid */ .Z.rayEllipsoid(ray, ellipsoid);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n    center = _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].getPoint */ .Z.getPoint(ray, intersection.start, tilt3DCenter);\n  } else if (height > controller._minimumTrackBallHeight) {\n    var grazingAltitudeLocation = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].grazingAltitudeLocation */ .Z.grazingAltitudeLocation(\n      ray,\n      ellipsoid\n    );\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(grazingAltitudeLocation)) {\n      return;\n    }\n    var grazingAltitudeCart = ellipsoid.cartesianToCartographic(\n      grazingAltitudeLocation,\n      tilt3DCart\n    );\n    grazingAltitudeCart.height = 0.0;\n    center = ellipsoid.cartographicToCartesian(\n      grazingAltitudeCart,\n      tilt3DCenter\n    );\n  } else {\n    controller._looking = true;\n    var up = controller._ellipsoid.geodeticSurfaceNormal(\n      camera.position,\n      tilt3DLookUp\n    );\n    look3D(controller, startPosition, movement, up);\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._tiltCenterMousePosition);\n    return;\n  }\n\n  var transform = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n    center,\n    ellipsoid,\n    tilt3DTransform\n  );\n\n  var oldGlobe = controller._globe;\n  var oldEllipsoid = controller._ellipsoid;\n  controller._globe = undefined;\n  controller._ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].UNIT_SPHERE */ .Z.UNIT_SPHERE;\n  controller._rotateFactor = 1.0;\n  controller._rotateRateRangeAdjustment = 1.0;\n\n  var oldTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(camera.transform, tilt3DOldTransform);\n  camera._setTransform(transform);\n\n  rotate3D(controller, startPosition, movement, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_Z */ .Z.UNIT_Z);\n\n  camera._setTransform(oldTransform);\n  controller._globe = oldGlobe;\n  controller._ellipsoid = oldEllipsoid;\n\n  var radius = oldEllipsoid.maximumRadius;\n  controller._rotateFactor = 1.0 / radius;\n  controller._rotateRateRangeAdjustment = radius;\n}\n\nfunction tilt3DOnTerrain(controller, startPosition, movement) {\n  var ellipsoid = controller._ellipsoid;\n  var scene = controller._scene;\n  var camera = scene.camera;\n  var cameraUnderground = controller._cameraUnderground;\n\n  var center;\n  var ray;\n  var intersection;\n\n  if (_Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].equals */ .Z.equals(startPosition, controller._tiltCenterMousePosition)) {\n    center = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(controller._tiltCenter, tilt3DCenter);\n  } else {\n    center = pickGlobe(controller, startPosition, tilt3DCenter);\n\n    if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(center)) {\n      ray = camera.getPickRay(startPosition, tilt3DRay);\n      intersection = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayEllipsoid */ .Z.rayEllipsoid(ray, ellipsoid);\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n        var cartographic = ellipsoid.cartesianToCartographic(\n          camera.position,\n          tilt3DCart\n        );\n        if (cartographic.height <= controller._minimumTrackBallHeight) {\n          controller._looking = true;\n          var up = controller._ellipsoid.geodeticSurfaceNormal(\n            camera.position,\n            tilt3DLookUp\n          );\n          look3D(controller, startPosition, movement, up);\n          _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._tiltCenterMousePosition);\n        }\n        return;\n      }\n      center = _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].getPoint */ .Z.getPoint(ray, intersection.start, tilt3DCenter);\n    }\n\n    if (cameraUnderground) {\n      if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(ray)) {\n        ray = camera.getPickRay(startPosition, tilt3DRay);\n      }\n      getTiltCenterUnderground(controller, ray, center, center);\n    }\n\n    _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(startPosition, controller._tiltCenterMousePosition);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(center, controller._tiltCenter);\n  }\n\n  var canvas = scene.canvas;\n\n  var windowPosition = tilt3DWindowPos;\n  windowPosition.x = canvas.clientWidth / 2;\n  windowPosition.y = controller._tiltCenterMousePosition.y;\n  ray = camera.getPickRay(windowPosition, tilt3DRay);\n\n  var mag = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(center);\n  var radii = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].fromElements */ .Z.fromElements(mag, mag, mag, scratchRadii);\n  var newEllipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].fromCartesian3 */ .Z.fromCartesian3(radii, scratchEllipsoid);\n\n  intersection = _Core_IntersectionTests_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].rayEllipsoid */ .Z.rayEllipsoid(ray, newEllipsoid);\n  if (!(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(intersection)) {\n    return;\n  }\n\n  var t =\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(ray.origin) > mag\n      ? intersection.start\n      : intersection.stop;\n  var verticalCenter = _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].getPoint */ .Z.getPoint(ray, t, tilt3DVerticalCenter);\n\n  var transform = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n    center,\n    ellipsoid,\n    tilt3DTransform\n  );\n  var verticalTransform = _Core_Transforms_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].eastNorthUpToFixedFrame */ .Z.eastNorthUpToFixedFrame(\n    verticalCenter,\n    newEllipsoid,\n    tilt3DVerticalTransform\n  );\n\n  var oldGlobe = controller._globe;\n  var oldEllipsoid = controller._ellipsoid;\n  controller._globe = undefined;\n  controller._ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].UNIT_SPHERE */ .Z.UNIT_SPHERE;\n  controller._rotateFactor = 1.0;\n  controller._rotateRateRangeAdjustment = 1.0;\n\n  var constrainedAxis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_Z */ .Z.UNIT_Z;\n\n  var oldTransform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(camera.transform, tilt3DOldTransform);\n  camera._setTransform(verticalTransform);\n\n  var tangent = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n    verticalCenter,\n    camera.positionWC,\n    tilt3DCartesian3\n  );\n  var dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(camera.rightWC, tangent);\n\n  if (dot < 0.0) {\n    var movementDelta = movement.startPosition.y - movement.endPosition.y;\n    if (\n      (cameraUnderground && movementDelta < 0.0) ||\n      (!cameraUnderground && movementDelta > 0.0)\n    ) {\n      // Prevent camera from flipping past the up axis\n      constrainedAxis = undefined;\n    }\n\n    var oldConstrainedAxis = camera.constrainedAxis;\n    camera.constrainedAxis = undefined;\n\n    rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n\n    camera.constrainedAxis = oldConstrainedAxis;\n  } else {\n    rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n  }\n\n  camera._setTransform(transform);\n  rotate3D(controller, startPosition, movement, constrainedAxis, false, true);\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(camera.constrainedAxis)) {\n    var right = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n      camera.direction,\n      camera.constrainedAxis,\n      tilt3DCartesian3\n    );\n    if (\n      !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(right, _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].ZERO */ .Z.ZERO, _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON6 */ .Z.EPSILON6)\n    ) {\n      if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(right, camera.right) < 0.0) {\n        _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].negate */ .Z.negate(right, right);\n      }\n\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(right, camera.direction, camera.up);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.direction, camera.up, camera.right);\n\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.up, camera.up);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.right, camera.right);\n    }\n  }\n\n  camera._setTransform(oldTransform);\n  controller._globe = oldGlobe;\n  controller._ellipsoid = oldEllipsoid;\n\n  var radius = oldEllipsoid.maximumRadius;\n  controller._rotateFactor = 1.0 / radius;\n  controller._rotateRateRangeAdjustment = radius;\n\n  var originalPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(camera.positionWC, tilt3DCartesian3);\n\n  if (controller.enableCollisionDetection) {\n    adjustHeightForTerrain(controller);\n  }\n\n  if (!_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(camera.positionWC, originalPosition)) {\n    camera._setTransform(verticalTransform);\n    camera.worldToCameraCoordinatesPoint(originalPosition, originalPosition);\n\n    var magSqrd = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(originalPosition);\n    if (_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitudeSquared */ .Z.magnitudeSquared(camera.position) > magSqrd) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.position, camera.position);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n        camera.position,\n        Math.sqrt(magSqrd),\n        camera.position\n      );\n    }\n\n    var angle = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].angleBetween */ .Z.angleBetween(originalPosition, camera.position);\n    var axis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(\n      originalPosition,\n      camera.position,\n      originalPosition\n    );\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(axis, axis);\n\n    var quaternion = _Core_Quaternion_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(axis, angle, tilt3DQuaternion);\n    var rotation = _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].fromQuaternion */ .Z.fromQuaternion(quaternion, tilt3DMatrix);\n    _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyByVector */ .Z.multiplyByVector(rotation, camera.direction, camera.direction);\n    _Core_Matrix3_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"].multiplyByVector */ .Z.multiplyByVector(rotation, camera.up, camera.up);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.direction, camera.up, camera.right);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.right, camera.direction, camera.up);\n\n    camera._setTransform(oldTransform);\n  }\n}\n\nvar look3DStartPos = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar look3DEndPos = new _Core_Cartesian2_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z();\nvar look3DStartRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar look3DEndRay = new _Core_Ray_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z();\nvar look3DNegativeRot = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar look3DTan = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\nfunction look3D(controller, startPosition, movement, rotationAxis) {\n  var scene = controller._scene;\n  var camera = scene.camera;\n\n  var startPos = look3DStartPos;\n  startPos.x = movement.startPosition.x;\n  startPos.y = 0.0;\n  var endPos = look3DEndPos;\n  endPos.x = movement.endPosition.x;\n  endPos.y = 0.0;\n\n  var startRay = camera.getPickRay(startPos, look3DStartRay);\n  var endRay = camera.getPickRay(endPos, look3DEndRay);\n  var angle = 0.0;\n  var start;\n  var end;\n\n  if (camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z) {\n    start = startRay.origin;\n    end = endRay.origin;\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(camera.direction, start, start);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(camera.direction, end, end);\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(start, camera.position, start);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(end, camera.position, end);\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(start, start);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(end, end);\n  } else {\n    start = startRay.direction;\n    end = endRay.direction;\n  }\n\n  var dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(start, end);\n  if (dot < 1.0) {\n    // dot is in [0, 1]\n    angle = Math.acos(dot);\n  }\n\n  angle = movement.startPosition.x > movement.endPosition.x ? -angle : angle;\n\n  var horizontalRotationAxis = controller._horizontalRotationAxis;\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(rotationAxis)) {\n    camera.look(rotationAxis, -angle);\n  } else if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(horizontalRotationAxis)) {\n    camera.look(horizontalRotationAxis, -angle);\n  } else {\n    camera.lookLeft(angle);\n  }\n\n  startPos.x = 0.0;\n  startPos.y = movement.startPosition.y;\n  endPos.x = 0.0;\n  endPos.y = movement.endPosition.y;\n\n  startRay = camera.getPickRay(startPos, look3DStartRay);\n  endRay = camera.getPickRay(endPos, look3DEndRay);\n  angle = 0.0;\n\n  if (camera.frustum instanceof _Core_OrthographicFrustum_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z) {\n    start = startRay.origin;\n    end = endRay.origin;\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(camera.direction, start, start);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].add */ .Z.add(camera.direction, end, end);\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(start, camera.position, start);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].subtract */ .Z.subtract(end, camera.position, end);\n\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(start, start);\n    _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(end, end);\n  } else {\n    start = startRay.direction;\n    end = endRay.direction;\n  }\n\n  dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(start, end);\n  if (dot < 1.0) {\n    // dot is in [0, 1]\n    angle = Math.acos(dot);\n  }\n  angle = movement.startPosition.y > movement.endPosition.y ? -angle : angle;\n\n  rotationAxis = (0,_Core_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(rotationAxis, horizontalRotationAxis);\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(rotationAxis)) {\n    var direction = camera.direction;\n    var negativeRotationAxis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].negate */ .Z.negate(\n      rotationAxis,\n      look3DNegativeRot\n    );\n    var northParallel = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      direction,\n      rotationAxis,\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON2 */ .Z.EPSILON2\n    );\n    var southParallel = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      direction,\n      negativeRotationAxis,\n      _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON2 */ .Z.EPSILON2\n    );\n    if (!northParallel && !southParallel) {\n      dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(direction, rotationAxis);\n      var angleToAxis = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].acosClamped */ .Z.acosClamped(dot);\n      if (angle > 0 && angle > angleToAxis) {\n        angle = angleToAxis - _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON4 */ .Z.EPSILON4;\n      }\n\n      dot = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dot */ .Z.dot(direction, negativeRotationAxis);\n      angleToAxis = _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].acosClamped */ .Z.acosClamped(dot);\n      if (angle < 0 && -angle > angleToAxis) {\n        angle = -angleToAxis + _Core_Math_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].EPSILON4 */ .Z.EPSILON4;\n      }\n\n      var tangent = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(rotationAxis, direction, look3DTan);\n      camera.look(tangent, angle);\n    } else if ((northParallel && angle < 0) || (southParallel && angle > 0)) {\n      camera.look(camera.right, -angle);\n    }\n  } else {\n    camera.lookUp(angle);\n  }\n}\n\nfunction update3D(controller) {\n  reactToInput(\n    controller,\n    controller.enableRotate,\n    controller.rotateEventTypes,\n    spin3D,\n    controller.inertiaSpin,\n    "_lastInertiaSpinMovement"\n  );\n  reactToInput(\n    controller,\n    controller.enableZoom,\n    controller.zoomEventTypes,\n    zoom3D,\n    controller.inertiaZoom,\n    "_lastInertiaZoomMovement"\n  );\n  reactToInput(\n    controller,\n    controller.enableTilt,\n    controller.tiltEventTypes,\n    tilt3D,\n    controller.inertiaSpin,\n    "_lastInertiaTiltMovement"\n  );\n  reactToInput(\n    controller,\n    controller.enableLook,\n    controller.lookEventTypes,\n    look3D\n  );\n}\n\nvar scratchAdjustHeightTransform = new _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar scratchAdjustHeightCartographic = new _Core_Cartographic_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n\nfunction adjustHeightForTerrain(controller) {\n  controller._adjustedHeightForTerrain = true;\n\n  var scene = controller._scene;\n  var mode = scene.mode;\n  var globe = scene.globe;\n\n  if (\n    !(0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globe) ||\n    mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE2D */ .Z.SCENE2D ||\n    mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].MORPHING */ .Z.MORPHING\n  ) {\n    return;\n  }\n\n  var camera = scene.camera;\n  var ellipsoid = globe.ellipsoid;\n  var projection = scene.mapProjection;\n\n  var transform;\n  var mag;\n  if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(camera.transform, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY)) {\n    transform = _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].clone */ .Z.clone(camera.transform, scratchAdjustHeightTransform);\n    mag = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].magnitude */ .Z.magnitude(camera.position);\n    camera._setTransform(_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY);\n  }\n\n  var cartographic = scratchAdjustHeightCartographic;\n  if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    ellipsoid.cartesianToCartographic(camera.position, cartographic);\n  } else {\n    projection.unproject(camera.position, cartographic);\n  }\n\n  var heightUpdated = false;\n  if (cartographic.height < controller._minimumCollisionTerrainHeight) {\n    var globeHeight = controller._scene.globeHeight;\n    if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(globeHeight)) {\n      var height = globeHeight + controller.minimumZoomDistance;\n      if (cartographic.height < height) {\n        cartographic.height = height;\n        if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n          ellipsoid.cartographicToCartesian(cartographic, camera.position);\n        } else {\n          projection.project(cartographic, camera.position);\n        }\n        heightUpdated = true;\n      }\n    }\n  }\n\n  if ((0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(transform)) {\n    camera._setTransform(transform);\n    if (heightUpdated) {\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.position, camera.position);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].negate */ .Z.negate(camera.position, camera.direction);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n        camera.position,\n        Math.max(mag, controller.minimumZoomDistance),\n        camera.position\n      );\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].normalize */ .Z.normalize(camera.direction, camera.direction);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.direction, camera.up, camera.right);\n      _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].cross */ .Z.cross(camera.right, camera.direction, camera.up);\n    }\n  }\n}\n\n/**\n * @private\n */\nScreenSpaceCameraController.prototype.onMap = function () {\n  var scene = this._scene;\n  var mode = scene.mode;\n  var camera = scene.camera;\n\n  if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    return (\n      Math.abs(camera.position.x) - this._maxCoord.x < 0 &&\n      Math.abs(camera.position.y) - this._maxCoord.y < 0\n    );\n  }\n\n  return true;\n};\n\nvar scratchPreviousPosition = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar scratchPreviousDirection = new _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\n\n/**\n * @private\n */\nScreenSpaceCameraController.prototype.update = function () {\n  var scene = this._scene;\n  var camera = scene.camera;\n  var globe = scene.globe;\n  var mode = scene.mode;\n\n  if (!_Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].equals */ .Z.equals(camera.transform, _Core_Matrix4_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].IDENTITY */ .Z.IDENTITY)) {\n    this._globe = undefined;\n    this._ellipsoid = _Core_Ellipsoid_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].UNIT_SPHERE */ .Z.UNIT_SPHERE;\n  } else {\n    this._globe = globe;\n    this._ellipsoid = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._globe)\n      ? this._globe.ellipsoid\n      : scene.mapProjection.ellipsoid;\n  }\n\n  var exaggeration = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._globe)\n    ? this._globe.terrainExaggeration\n    : 1.0;\n  var exaggerationRelativeHeight = (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._globe)\n    ? this._globe.terrainExaggerationRelativeHeight\n    : 0.0;\n  this._minimumCollisionTerrainHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].getHeight */ .Z.getHeight(\n    this.minimumCollisionTerrainHeight,\n    exaggeration,\n    exaggerationRelativeHeight\n  );\n  this._minimumPickingTerrainHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].getHeight */ .Z.getHeight(\n    this.minimumPickingTerrainHeight,\n    exaggeration,\n    exaggerationRelativeHeight\n  );\n  this._minimumTrackBallHeight = _Core_TerrainExaggeration_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].getHeight */ .Z.getHeight(\n    this.minimumTrackBallHeight,\n    exaggeration,\n    exaggerationRelativeHeight\n  );\n\n  this._cameraUnderground = scene.cameraUnderground && (0,_Core_defined_js__WEBPACK_IMPORTED_MODULE_26__/* ["default"] */ .Z)(this._globe);\n\n  var radius = this._ellipsoid.maximumRadius;\n  this._rotateFactor = 1.0 / radius;\n  this._rotateRateRangeAdjustment = radius;\n\n  this._adjustedHeightForTerrain = false;\n  var previousPosition = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    camera.positionWC,\n    scratchPreviousPosition\n  );\n  var previousDirection = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].clone */ .Z.clone(\n    camera.directionWC,\n    scratchPreviousDirection\n  );\n\n  if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE2D */ .Z.SCENE2D) {\n    update2D(this);\n  } else if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].COLUMBUS_VIEW */ .Z.COLUMBUS_VIEW) {\n    this._horizontalRotationAxis = _Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].UNIT_Z */ .Z.UNIT_Z;\n    updateCV(this);\n  } else if (mode === _SceneMode_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"].SCENE3D */ .Z.SCENE3D) {\n    this._horizontalRotationAxis = undefined;\n    update3D(this);\n  }\n\n  if (this.enableCollisionDetection && !this._adjustedHeightForTerrain) {\n    // Adjust the camera height if the camera moved at all (user input or inertia) and an action didn\'t already adjust the camera height\n    var cameraChanged =\n      !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(previousPosition, camera.positionWC) ||\n      !_Core_Cartesian3_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].equals */ .Z.equals(previousDirection, camera.directionWC);\n    if (cameraChanged) {\n      adjustHeightForTerrain(this);\n    }\n  }\n\n  this._aggregator.reset();\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see ScreenSpaceCameraController#destroy\n */\nScreenSpaceCameraController.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes mouse listeners held by this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * controller = controller && controller.destroy();\n *\n * @see ScreenSpaceCameraController#isDestroyed\n */\nScreenSpaceCameraController.prototype.destroy = function () {\n  this._tweens.removeAll();\n  this._aggregator = this._aggregator && this._aggregator.destroy();\n  return (0,_Core_destroyObject_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(this);\n};\n/* harmony default export */ __webpack_exports__["Z"] = (ScreenSpaceCameraController);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60442\n')}}]);