"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[3071],{19043:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_protobufjs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65581);\n/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13222);\n/* harmony import */ var _buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72000);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66553);\n/* harmony import */ var _Credit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52975);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82982);\n/* harmony import */ var _GoogleEarthEnterpriseTileInformation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(95852);\n/* harmony import */ var _isBitSet_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(29797);\n/* harmony import */ var _loadAndExecuteScript_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(95636);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99417);\n/* harmony import */ var _Request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(22426);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(68985);\n/* harmony import */ var _RuntimeError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9407);\n/* harmony import */ var _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(2819);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction stringToBuffer(str) {\n  var len = str.length;\n  var buffer = new ArrayBuffer(len);\n  var ui8 = new Uint8Array(buffer);\n  for (var i = 0; i < len; ++i) {\n    ui8[i] = str.charCodeAt(i);\n  }\n\n  return buffer;\n}\n\n// Decodes packet with a key that has been around since the beginning of Google Earth Enterprise\nvar defaultKey = stringToBuffer(\n  "\\x45\\xf4\\xbd\\x0b\\x79\\xe2\\x6a\\x45\\x22\\x05\\x92\\x2c\\x17\\xcd\\x06\\x71\\xf8\\x49\\x10\\x46\\x67\\x51\\x00\\x42\\x25\\xc6\\xe8\\x61\\x2c\\x66\\x29\\x08\\xc6\\x34\\xdc\\x6a\\x62\\x25\\x79\\x0a\\x77\\x1d\\x6d\\x69\\xd6\\xf0\\x9c\\x6b\\x93\\xa1\\xbd\\x4e\\x75\\xe0\\x41\\x04\\x5b\\xdf\\x40\\x56\\x0c\\xd9\\xbb\\x72\\x9b\\x81\\x7c\\x10\\x33\\x53\\xee\\x4f\\x6c\\xd4\\x71\\x05\\xb0\\x7b\\xc0\\x7f\\x45\\x03\\x56\\x5a\\xad\\x77\\x55\\x65\\x0b\\x33\\x92\\x2a\\xac\\x19\\x6c\\x35\\x14\\xc5\\x1d\\x30\\x73\\xf8\\x33\\x3e\\x6d\\x46\\x38\\x4a\\xb4\\xdd\\xf0\\x2e\\xdd\\x17\\x75\\x16\\xda\\x8c\\x44\\x74\\x22\\x06\\xfa\\x61\\x22\\x0c\\x33\\x22\\x53\\x6f\\xaf\\x39\\x44\\x0b\\x8c\\x0e\\x39\\xd9\\x39\\x13\\x4c\\xb9\\xbf\\x7f\\xab\\x5c\\x8c\\x50\\x5f\\x9f\\x22\\x75\\x78\\x1f\\xe9\\x07\\x71\\x91\\x68\\x3b\\xc1\\xc4\\x9b\\x7f\\xf0\\x3c\\x56\\x71\\x48\\x82\\x05\\x27\\x55\\x66\\x59\\x4e\\x65\\x1d\\x98\\x75\\xa3\\x61\\x46\\x7d\\x61\\x3f\\x15\\x41\\x00\\x9f\\x14\\x06\\xd7\\xb4\\x34\\x4d\\xce\\x13\\x87\\x46\\xb0\\x1a\\xd5\\x05\\x1c\\xb8\\x8a\\x27\\x7b\\x8b\\xdc\\x2b\\xbb\\x4d\\x67\\x30\\xc8\\xd1\\xf6\\x5c\\x8f\\x50\\xfa\\x5b\\x2f\\x46\\x9b\\x6e\\x35\\x18\\x2f\\x27\\x43\\x2e\\xeb\\x0a\\x0c\\x5e\\x10\\x05\\x10\\xa5\\x73\\x1b\\x65\\x34\\xe5\\x6c\\x2e\\x6a\\x43\\x27\\x63\\x14\\x23\\x55\\xa9\\x3f\\x71\\x7b\\x67\\x43\\x7d\\x3a\\xaf\\xcd\\xe2\\x54\\x55\\x9c\\xfd\\x4b\\xc6\\xe2\\x9f\\x2f\\x28\\xed\\xcb\\x5c\\xc6\\x2d\\x66\\x07\\x88\\xa7\\x3b\\x2f\\x18\\x2a\\x22\\x4e\\x0e\\xb0\\x6b\\x2e\\xdd\\x0d\\x95\\x7d\\x7d\\x47\\xba\\x43\\xb2\\x11\\xb2\\x2b\\x3e\\x4d\\xaa\\x3e\\x7d\\xe6\\xce\\x49\\x89\\xc6\\xe6\\x78\\x0c\\x61\\x31\\x05\\x2d\\x01\\xa4\\x4f\\xa5\\x7e\\x71\\x20\\x88\\xec\\x0d\\x31\\xe8\\x4e\\x0b\\x00\\x6e\\x50\\x68\\x7d\\x17\\x3d\\x08\\x0d\\x17\\x95\\xa6\\x6e\\xa3\\x68\\x97\\x24\\x5b\\x6b\\xf3\\x17\\x23\\xf3\\xb6\\x73\\xb3\\x0d\\x0b\\x40\\xc0\\x9f\\xd8\\x04\\x51\\x5d\\xfa\\x1a\\x17\\x22\\x2e\\x15\\x6a\\xdf\\x49\\x00\\xb9\\xa0\\x77\\x55\\xc6\\xef\\x10\\x6a\\xbf\\x7b\\x47\\x4c\\x7f\\x83\\x17\\x05\\xee\\xdc\\xdc\\x46\\x85\\xa9\\xad\\x53\\x07\\x2b\\x53\\x34\\x06\\x07\\xff\\x14\\x94\\x59\\x19\\x02\\xe4\\x38\\xe8\\x31\\x83\\x4e\\xb9\\x58\\x46\\x6b\\xcb\\x2d\\x23\\x86\\x92\\x70\\x00\\x35\\x88\\x22\\xcf\\x31\\xb2\\x26\\x2f\\xe7\\xc3\\x75\\x2d\\x36\\x2c\\x72\\x74\\xb0\\x23\\x47\\xb7\\xd3\\xd1\\x26\\x16\\x85\\x37\\x72\\xe2\\x00\\x8c\\x44\\xcf\\x10\\xda\\x33\\x2d\\x1a\\xde\\x60\\x86\\x69\\x23\\x69\\x2a\\x7c\\xcd\\x4b\\x51\\x0d\\x95\\x54\\x39\\x77\\x2e\\x29\\xea\\x1b\\xa6\\x50\\xa2\\x6a\\x8f\\x6f\\x50\\x99\\x5c\\x3e\\x54\\xfb\\xef\\x50\\x5b\\x0b\\x07\\x45\\x17\\x89\\x6d\\x28\\x13\\x77\\x37\\x1d\\xdb\\x8e\\x1e\\x4a\\x05\\x66\\x4a\\x6f\\x99\\x20\\xe5\\x70\\xe2\\xb9\\x71\\x7e\\x0c\\x6d\\x49\\x04\\x2d\\x7a\\xfe\\x72\\xc7\\xf2\\x59\\x30\\x8f\\xbb\\x02\\x5d\\x73\\xe5\\xc9\\x20\\xea\\x78\\xec\\x20\\x90\\xf0\\x8a\\x7f\\x42\\x17\\x7c\\x47\\x19\\x60\\xb0\\x16\\xbd\\x26\\xb7\\x71\\xb6\\xc7\\x9f\\x0e\\xd1\\x33\\x82\\x3d\\xd3\\xab\\xee\\x63\\x99\\xc8\\x2b\\x53\\xa0\\x44\\x5c\\x71\\x01\\xc6\\xcc\\x44\\x1f\\x32\\x4f\\x3c\\xca\\xc0\\x29\\x3d\\x52\\xd3\\x61\\x19\\x58\\xa9\\x7d\\x65\\xb4\\xdc\\xcf\\x0d\\xf4\\x3d\\xf1\\x08\\xa9\\x42\\xda\\x23\\x09\\xd8\\xbf\\x5e\\x50\\x49\\xf8\\x4d\\xc0\\xcb\\x47\\x4c\\x1c\\x4f\\xf7\\x7b\\x2b\\xd8\\x16\\x18\\xc5\\x31\\x92\\x3b\\xb5\\x6f\\xdc\\x6c\\x0d\\x92\\x88\\x16\\xd1\\x9e\\xdb\\x3f\\xe2\\xe9\\xda\\x5f\\xd4\\x84\\xe2\\x46\\x61\\x5a\\xde\\x1c\\x55\\xcf\\xa4\\x00\\xbe\\xfd\\xce\\x67\\xf1\\x4a\\x69\\x1c\\x97\\xe6\\x20\\x48\\xd8\\x5d\\x7f\\x7e\\xae\\x71\\x20\\x0e\\x4e\\xae\\xc0\\x56\\xa9\\x91\\x01\\x3c\\x82\\x1d\\x0f\\x72\\xe7\\x76\\xec\\x29\\x49\\xd6\\x5d\\x2d\\x83\\xe3\\xdb\\x36\\x06\\xa9\\x3b\\x66\\x13\\x97\\x87\\x6a\\xd5\\xb6\\x3d\\x50\\x5e\\x52\\xb9\\x4b\\xc7\\x73\\x57\\x78\\xc9\\xf4\\x2e\\x59\\x07\\x95\\x93\\x6f\\xd0\\x4b\\x17\\x57\\x19\\x3e\\x27\\x27\\xc7\\x60\\xdb\\x3b\\xed\\x9a\\x0e\\x53\\x44\\x16\\x3e\\x3f\\x8d\\x92\\x6d\\x77\\xa2\\x0a\\xeb\\x3f\\x52\\xa8\\xc6\\x55\\x5e\\x31\\x49\\x37\\x85\\xf4\\xc5\\x1f\\x26\\x2d\\xa9\\x1c\\xbf\\x8b\\x27\\x54\\xda\\xc3\\x6a\\x20\\xe5\\x2a\\x78\\x04\\xb0\\xd6\\x90\\x70\\x72\\xaa\\x8b\\x68\\xbd\\x88\\xf7\\x02\\x5f\\x48\\xb1\\x7e\\xc0\\x58\\x4c\\x3f\\x66\\x1a\\xf9\\x3e\\xe1\\x65\\xc0\\x70\\xa7\\xcf\\x38\\x69\\xaf\\xf0\\x56\\x6c\\x64\\x49\\x9c\\x27\\xad\\x78\\x74\\x4f\\xc2\\x87\\xde\\x56\\x39\\x00\\xda\\x77\\x0b\\xcb\\x2d\\x1b\\x89\\xfb\\x35\\x4f\\x02\\xf5\\x08\\x51\\x13\\x60\\xc1\\x0a\\x5a\\x47\\x4d\\x26\\x1c\\x33\\x30\\x78\\xda\\xc0\\x9c\\x46\\x47\\xe2\\x5b\\x79\\x60\\x49\\x6e\\x37\\x67\\x53\\x0a\\x3e\\xe9\\xec\\x46\\x39\\xb2\\xf1\\x34\\x0d\\xc6\\x84\\x53\\x75\\x6e\\xe1\\x0c\\x59\\xd9\\x1e\\xde\\x29\\x85\\x10\\x7b\\x49\\x49\\xa5\\x77\\x79\\xbe\\x49\\x56\\x2e\\x36\\xe7\\x0b\\x3a\\xbb\\x4f\\x03\\x62\\x7b\\xd2\\x4d\\x31\\x95\\x2f\\xbd\\x38\\x7b\\xa8\\x4f\\x21\\xe1\\xec\\x46\\x70\\x76\\x95\\x7d\\x29\\x22\\x78\\x88\\x0a\\x90\\xdd\\x9d\\x5c\\xda\\xde\\x19\\x51\\xcf\\xf0\\xfc\\x59\\x52\\x65\\x7c\\x33\\x13\\xdf\\xf3\\x48\\xda\\xbb\\x2a\\x75\\xdb\\x60\\xb2\\x02\\x15\\xd4\\xfc\\x19\\xed\\x1b\\xec\\x7f\\x35\\xa8\\xff\\x28\\x31\\x07\\x2d\\x12\\xc8\\xdc\\x88\\x46\\x7c\\x8a\\x5b\\x22"\n);\n\n/**\n * Provides metadata using the Google Earth Enterprise REST API. This is used by the GoogleEarthEnterpriseImageryProvider\n *  and GoogleEarthEnterpriseTerrainProvider to share metadata requests.\n *\n * @alias GoogleEarthEnterpriseMetadata\n * @constructor\n *\n * @param {Resource|String} resourceOrUrl The url of the Google Earth Enterprise server hosting the imagery\n *\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n *\n */\nfunction GoogleEarthEnterpriseMetadata(resourceOrUrl) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].defined */ .Z.defined("resourceOrUrl", resourceOrUrl);\n  //>>includeEnd(\'debug\');\n\n  var url = resourceOrUrl;\n\n  if (typeof url !== "string" && !(url instanceof _Resource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z)) {\n    //>>includeStart(\'debug\', pragmas.debug);\n    _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.string */ .Z.typeOf.string("resourceOrUrl.url", resourceOrUrl.url);\n    //>>includeEnd(\'debug\');\n\n    url = resourceOrUrl.url;\n  }\n\n  var resource = _Resource_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].createIfNeeded */ .Z.createIfNeeded(url);\n  resource.appendForwardSlash();\n  this._resource = resource;\n\n  /**\n   * True if imagery is available.\n   * @type {Boolean}\n   * @default true\n   */\n  this.imageryPresent = true;\n\n  /**\n   * True if imagery is sent as a protocol buffer, false if sent as plain images. If undefined we will try both.\n   * @type {Boolean}\n   * @default undefined\n   */\n  this.protoImagery = undefined;\n\n  /**\n   * True if terrain is available.\n   * @type {Boolean}\n   * @default true\n   */\n  this.terrainPresent = true;\n\n  /**\n   * Exponent used to compute constant to calculate negative height values.\n   * @type {Number}\n   * @default 32\n   */\n  this.negativeAltitudeExponentBias = 32;\n\n  /**\n   * Threshold where any numbers smaller are actually negative values. They are multiplied by -2^negativeAltitudeExponentBias.\n   * @type {Number}\n   * @default EPSILON12\n   */\n  this.negativeAltitudeThreshold = _Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].EPSILON12 */ .Z.EPSILON12;\n\n  /**\n   * Dictionary of provider id to copyright strings.\n   * @type {Object}\n   * @default {}\n   */\n  this.providers = {};\n\n  /**\n   * Key used to decode packets\n   * @type {ArrayBuffer}\n   */\n  this.key = undefined;\n\n  this._quadPacketVersion = 1;\n\n  this._tileInfo = {};\n  this._subtreePromises = {};\n\n  var that = this;\n  this._readyPromise = requestDbRoot(this)\n    .then(function () {\n      return that.getQuadTreePacket("", that._quadPacketVersion);\n    })\n    .then(function () {\n      return true;\n    })\n    .otherwise(function (e) {\n      var message =\n        "An error occurred while accessing " +\n        getMetadataResource(that, "", 1).url +\n        ".";\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(message));\n    });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMetadata.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the resource used for metadata requests.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Resource}\n   * @readonly\n   */\n  resource: {\n    get: function () {\n      return this._resource;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the metadata is ready for use.\n   * @memberof GoogleEarthEnterpriseMetadata.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n});\n\n/**\n * Converts a tiles (x, y, level) position into a quadkey used to request an image\n * from a Google Earth Enterprise server.\n *\n * @param {Number} x The tile\'s x coordinate.\n * @param {Number} y The tile\'s y coordinate.\n * @param {Number} level The tile\'s zoom level.\n *\n * @see GoogleEarthEnterpriseMetadata#quadKeyToTileXY\n */\nGoogleEarthEnterpriseMetadata.tileXYToQuadKey = function (x, y, level) {\n  var quadkey = "";\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = 0;\n\n    // Tile Layout\n    // ___ ___\n    //|   |   |\n    //| 3 | 2 |\n    //|-------|\n    //| 0 | 1 |\n    //|___|___|\n    //\n\n    if (!(0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(y, bitmask)) {\n      // Top Row\n      digit |= 2;\n      if (!(0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(x, bitmask)) {\n        // Right to left\n        digit |= 1;\n      }\n    } else if ((0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(x, bitmask)) {\n      // Left to right\n      digit |= 1;\n    }\n\n    quadkey += digit;\n  }\n  return quadkey;\n};\n\n/**\n * Converts a tile\'s quadkey used to request an image from a Google Earth Enterprise server into the\n * (x, y, level) position.\n *\n * @param {String} quadkey The tile\'s quad key\n *\n * @see GoogleEarthEnterpriseMetadata#tileXYToQuadKey\n */\nGoogleEarthEnterpriseMetadata.quadKeyToTileXY = function (quadkey) {\n  var x = 0;\n  var y = 0;\n  var level = quadkey.length - 1;\n  for (var i = level; i >= 0; --i) {\n    var bitmask = 1 << i;\n    var digit = +quadkey[level - i];\n\n    if ((0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(digit, 2)) {\n      // Top Row\n      if (!(0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(digit, 1)) {\n        // // Right to left\n        x |= bitmask;\n      }\n    } else {\n      y |= bitmask;\n      if ((0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z)(digit, 1)) {\n        // Left to right\n        x |= bitmask;\n      }\n    }\n  }\n  return {\n    x: x,\n    y: y,\n    level: level,\n  };\n};\n\nGoogleEarthEnterpriseMetadata.prototype.isValid = function (quadKey) {\n  var info = this.getTileInformationFromQuadKey(quadKey);\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(info)) {\n    return info !== null;\n  }\n\n  var valid = true;\n  var q = quadKey;\n  var last;\n  while (q.length > 1) {\n    last = q.substring(q.length - 1);\n    q = q.substring(0, q.length - 1);\n    info = this.getTileInformationFromQuadKey(q);\n    if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(info)) {\n      if (!info.hasSubtree() && !info.hasChild(parseInt(last))) {\n        // We have no subtree or child available at some point in this node\'s ancestry\n        valid = false;\n      }\n\n      break;\n    } else if (info === null) {\n      // Some node in the ancestry was loaded and said there wasn\'t a subtree\n      valid = false;\n      break;\n    }\n  }\n\n  return valid;\n};\n\nvar taskProcessor = new _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z("decodeGoogleEarthEnterprisePacket");\n\n/**\n * Retrieves a Google Earth Enterprise quadtree packet.\n *\n * @param {String} [quadKey=\'\'] The quadkey to retrieve the packet for.\n * @param {Number} [version=1] The cnode version to be used in the request.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getQuadTreePacket = function (\n  quadKey,\n  version,\n  request\n) {\n  version = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(version, 1);\n  quadKey = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(quadKey, "");\n  var resource = getMetadataResource(this, quadKey, version, request);\n\n  var promise = resource.fetchArrayBuffer();\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(promise)) {\n    return undefined; // Throttled\n  }\n\n  var tileInfo = this._tileInfo;\n  var key = this.key;\n  return promise.then(function (metadata) {\n    var decodePromise = taskProcessor.scheduleTask(\n      {\n        buffer: metadata,\n        quadKey: quadKey,\n        type: "Metadata",\n        key: key,\n      },\n      [metadata]\n    );\n\n    return decodePromise.then(function (result) {\n      var root;\n      var topLevelKeyLength = -1;\n      if (quadKey !== "") {\n        // Root tile has no data except children bits, so put them into the tile info\n        topLevelKeyLength = quadKey.length + 1;\n        var top = result[quadKey];\n        root = tileInfo[quadKey];\n        root._bits |= top._bits;\n\n        delete result[quadKey];\n      }\n\n      // Copy the resulting objects into tileInfo\n      // Make sure we start with shorter quadkeys first, so we know the parents have\n      //  already been processed. Otherwise we can lose ancestorHasTerrain along the way.\n      var keys = Object.keys(result);\n      keys.sort(function (a, b) {\n        return a.length - b.length;\n      });\n      var keysLength = keys.length;\n      for (var i = 0; i < keysLength; ++i) {\n        var key = keys[i];\n        var r = result[key];\n        if (r !== null) {\n          var info = _GoogleEarthEnterpriseTileInformation_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].clone */ .Z.clone(result[key]);\n          var keyLength = key.length;\n          if (keyLength === topLevelKeyLength) {\n            info.setParent(root);\n          } else if (keyLength > 1) {\n            var parent = tileInfo[key.substring(0, key.length - 1)];\n            info.setParent(parent);\n          }\n          tileInfo[key] = info;\n        } else {\n          tileInfo[key] = null;\n        }\n      }\n    });\n  });\n};\n\n/**\n * Populates the metadata subtree down to the specified tile.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise<GoogleEarthEnterpriseTileInformation>} A promise that resolves to the tile info for the requested quad key\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.populateSubtree = function (\n  x,\n  y,\n  level,\n  request\n) {\n  var quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return populateSubtree(this, quadkey, request);\n};\n\nfunction populateSubtree(that, quadKey, request) {\n  var tileInfo = that._tileInfo;\n  var q = quadKey;\n  var t = tileInfo[q];\n  // If we have tileInfo make sure sure it is not a node with a subtree that\'s not loaded\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(t) && (!t.hasSubtree() || t.hasChildren())) {\n    return t;\n  }\n\n  while (t === undefined && q.length > 1) {\n    q = q.substring(0, q.length - 1);\n    t = tileInfo[q];\n  }\n\n  var subtreeRequest;\n  var subtreePromises = that._subtreePromises;\n  var promise = subtreePromises[q];\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(promise)) {\n    return promise.then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new _Request_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    });\n  }\n\n  // t is either\n  //   null so one of its parents was a leaf node, so this tile doesn\'t exist\n  //   exists but doesn\'t have a subtree to request\n  //   undefined so no parent exists - this shouldn\'t ever happen once the provider is ready\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(t) || !t.hasSubtree()) {\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].reject */ .Z.reject(\n      new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z("Couldn\'t load metadata for tile " + quadKey)\n    );\n  }\n\n  // We need to split up the promise here because when will execute syncronously if getQuadTreePacket\n  //  is already resolved (like in the tests), so subtreePromises will never get cleared out.\n  //  Only the initial request will also remove the promise from subtreePromises.\n  promise = that.getQuadTreePacket(q, t.cnodeVersion, request);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(promise)) {\n    return undefined;\n  }\n  subtreePromises[q] = promise;\n\n  return promise\n    .then(function () {\n      // Recursively call this in case we need multiple subtree requests\n      subtreeRequest = new _Request_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      return populateSubtree(that, quadKey, subtreeRequest);\n    })\n    .always(function () {\n      delete subtreePromises[q];\n    });\n}\n\n/**\n * Gets information about a tile\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn\'t loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformation = function (\n  x,\n  y,\n  level\n) {\n  var quadkey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  return this._tileInfo[quadkey];\n};\n\n/**\n * Gets information about a tile from a quadKey\n *\n * @param {String} quadkey The quadkey for the tile\n * @returns {GoogleEarthEnterpriseTileInformation|undefined} Information about the tile or undefined if it isn\'t loaded.\n *\n * @private\n */\nGoogleEarthEnterpriseMetadata.prototype.getTileInformationFromQuadKey = function (\n  quadkey\n) {\n  return this._tileInfo[quadkey];\n};\n\nfunction getMetadataResource(that, quadKey, version, request) {\n  return that._resource.getDerivedResource({\n    url: "flatfile?q2-0" + quadKey + "-q." + version.toString(),\n    request: request,\n  });\n}\n\nvar dbrootParser;\nvar dbrootParserPromise;\nfunction requestDbRoot(that) {\n  var resource = that._resource.getDerivedResource({\n    url: "dbRoot.v5",\n    queryParameters: {\n      output: "proto",\n    },\n  });\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(dbrootParserPromise)) {\n    var url = (0,_buildModuleUrl_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)("ThirdParty/google-earth-dbroot-parser.js");\n    var oldValue = window.cesiumGoogleEarthDbRootParser;\n    dbrootParserPromise = (0,_loadAndExecuteScript_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(url).then(function () {\n      dbrootParser = window.cesiumGoogleEarthDbRootParser(_ThirdParty_protobufjs_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z);\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(oldValue)) {\n        window.cesiumGoogleEarthDbRootParser = oldValue;\n      } else {\n        delete window.cesiumGoogleEarthDbRootParser;\n      }\n    });\n  }\n\n  return dbrootParserPromise\n    .then(function () {\n      return resource.fetchArrayBuffer();\n    })\n    .then(function (buf) {\n      var encryptedDbRootProto = dbrootParser.EncryptedDbRootProto.decode(\n        new Uint8Array(buf)\n      );\n\n      var byteArray = encryptedDbRootProto.encryptionData;\n      var offset = byteArray.byteOffset;\n      var end = offset + byteArray.byteLength;\n      var key = (that.key = byteArray.buffer.slice(offset, end));\n\n      byteArray = encryptedDbRootProto.dbrootData;\n      offset = byteArray.byteOffset;\n      end = offset + byteArray.byteLength;\n      var dbRootCompressed = byteArray.buffer.slice(offset, end);\n      return taskProcessor.scheduleTask(\n        {\n          buffer: dbRootCompressed,\n          type: "DbRoot",\n          key: key,\n        },\n        [dbRootCompressed]\n      );\n    })\n    .then(function (result) {\n      var dbRoot = dbrootParser.DbRootProto.decode(\n        new Uint8Array(result.buffer)\n      );\n      that.imageryPresent = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n        dbRoot.imageryPresent,\n        that.imageryPresent\n      );\n      that.protoImagery = dbRoot.protoImagery;\n      that.terrainPresent = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n        dbRoot.terrainPresent,\n        that.terrainPresent\n      );\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(dbRoot.endSnippet) && (0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(dbRoot.endSnippet.model)) {\n        var model = dbRoot.endSnippet.model;\n        that.negativeAltitudeExponentBias = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n          model.negativeAltitudeExponentBias,\n          that.negativeAltitudeExponentBias\n        );\n        that.negativeAltitudeThreshold = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n          model.compressedNegativeAltitudeThreshold,\n          that.negativeAltitudeThreshold\n        );\n      }\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(dbRoot.databaseVersion)) {\n        that._quadPacketVersion = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(\n          dbRoot.databaseVersion.quadtreeVersion,\n          that._quadPacketVersion\n        );\n      }\n      var providers = that.providers;\n      var providerInfo = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(dbRoot.providerInfo, []);\n      var count = providerInfo.length;\n      for (var i = 0; i < count; ++i) {\n        var provider = providerInfo[i];\n        var copyrightString = provider.copyrightString;\n        if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(copyrightString)) {\n          providers[provider.providerId] = new _Credit_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z(copyrightString.value);\n        }\n      }\n    })\n    .otherwise(function () {\n      // Just eat the error and use the default values.\n      console.log("Failed to retrieve " + resource.url + ". Using defaults.");\n      that.key = defaultKey;\n    });\n}\n/* harmony default export */ __webpack_exports__["Z"] = (GoogleEarthEnterpriseMetadata);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwNDMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQW1EO0FBQ1Y7QUFDUTtBQUNsQjtBQUNFO0FBQ1k7QUFDVjtBQUMwRDtBQUN4RDtBQUN3QjtBQUMxQjtBQUNBO0FBQ0U7QUFDUTtBQUNFOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSwwRUFBYTtBQUNmOztBQUVBOztBQUVBLGtEQUFrRCw4REFBUTtBQUMxRDtBQUNBLElBQUksc0ZBQW1CO0FBQ3ZCOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLDRGQUF1QjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1DQUFtQyw2RUFBb0I7O0FBRXZEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0ZBQVcsS0FBSyxrRUFBWTtBQUN6QyxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxrRUFBUTtBQUNqQjtBQUNBO0FBQ0EsV0FBVyxrRUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLFNBQVMsa0VBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTs7QUFFQSxRQUFRLGtFQUFRO0FBQ2hCO0FBQ0EsV0FBVyxrRUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxVQUFVLGtFQUFRO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0saUVBQU87QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBTztBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0IsbUVBQWE7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFFQUFZO0FBQ3hCLFlBQVkscUVBQVk7QUFDeEI7O0FBRUE7O0FBRUEsT0FBTyxpRUFBTztBQUNkLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxR0FBMEM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsYUFBYSwrQ0FBK0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGlFQUFPO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGlFQUFPO0FBQ2I7QUFDQTtBQUNBLDJCQUEyQiw0REFBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8saUVBQU87QUFDZCxXQUFXLGtGQUFXO0FBQ3RCLFVBQVUsa0VBQVk7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8saUVBQU87QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDREQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxnREFBZ0Q7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxnREFBZ0Q7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVILE9BQU8saUVBQU87QUFDZCxjQUFjLHVFQUFjO0FBQzVCO0FBQ0EsMEJBQTBCLDZFQUFvQjtBQUM5QywwREFBMEQsMEVBQVE7QUFDbEUsVUFBVSxpRUFBTztBQUNqQjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxRUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxRUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxVQUFVLGlFQUFPLHVCQUF1QixpRUFBTztBQUMvQztBQUNBLDRDQUE0QyxxRUFBWTtBQUN4RDtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMscUVBQVk7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlFQUFPO0FBQ2pCLGtDQUFrQyxxRUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHFFQUFZO0FBQ3JDO0FBQ0Esc0JBQXNCLFdBQVc7QUFDakM7QUFDQTtBQUNBLFlBQVksaUVBQU87QUFDbkIsK0NBQStDLDJEQUFNO0FBQ3JEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5REFBZSw2QkFBNkIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9Db3JlL0dvb2dsZUVhcnRoRW50ZXJwcmlzZU1ldGFkYXRhLmpzP2U5MWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByb3RvYnVmIGZyb20gXCIuLi9UaGlyZFBhcnR5L3Byb3RvYnVmanMuanNcIjtcbmltcG9ydCB3aGVuIGZyb20gXCIuLi9UaGlyZFBhcnR5L3doZW4uanNcIjtcbmltcG9ydCBidWlsZE1vZHVsZVVybCBmcm9tIFwiLi9idWlsZE1vZHVsZVVybC5qc1wiO1xuaW1wb3J0IENoZWNrIGZyb20gXCIuL0NoZWNrLmpzXCI7XG5pbXBvcnQgQ3JlZGl0IGZyb20gXCIuL0NyZWRpdC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi9kZWZhdWx0VmFsdWUuanNcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuL2RlZmluZWQuanNcIjtcbmltcG9ydCBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24gZnJvbSBcIi4vR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLmpzXCI7XG5pbXBvcnQgaXNCaXRTZXQgZnJvbSBcIi4vaXNCaXRTZXQuanNcIjtcbmltcG9ydCBsb2FkQW5kRXhlY3V0ZVNjcmlwdCBmcm9tIFwiLi9sb2FkQW5kRXhlY3V0ZVNjcmlwdC5qc1wiO1xuaW1wb3J0IENlc2l1bU1hdGggZnJvbSBcIi4vTWF0aC5qc1wiO1xuaW1wb3J0IFJlcXVlc3QgZnJvbSBcIi4vUmVxdWVzdC5qc1wiO1xuaW1wb3J0IFJlc291cmNlIGZyb20gXCIuL1Jlc291cmNlLmpzXCI7XG5pbXBvcnQgUnVudGltZUVycm9yIGZyb20gXCIuL1J1bnRpbWVFcnJvci5qc1wiO1xuaW1wb3J0IFRhc2tQcm9jZXNzb3IgZnJvbSBcIi4vVGFza1Byb2Nlc3Nvci5qc1wiO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J1ZmZlcihzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGVuKTtcbiAgdmFyIHVpOCA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB1aThbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBidWZmZXI7XG59XG5cbi8vIERlY29kZXMgcGFja2V0IHdpdGggYSBrZXkgdGhhdCBoYXMgYmVlbiBhcm91bmQgc2luY2UgdGhlIGJlZ2lubmluZyBvZiBHb29nbGUgRWFydGggRW50ZXJwcmlzZVxudmFyIGRlZmF1bHRLZXkgPSBzdHJpbmdUb0J1ZmZlcihcbiAgXCJcXHg0NVxceGY0XFx4YmRcXHgwYlxceDc5XFx4ZTJcXHg2YVxceDQ1XFx4MjJcXHgwNVxceDkyXFx4MmNcXHgxN1xceGNkXFx4MDZcXHg3MVxceGY4XFx4NDlcXHgxMFxceDQ2XFx4NjdcXHg1MVxceDAwXFx4NDJcXHgyNVxceGM2XFx4ZThcXHg2MVxceDJjXFx4NjZcXHgyOVxceDA4XFx4YzZcXHgzNFxceGRjXFx4NmFcXHg2MlxceDI1XFx4NzlcXHgwYVxceDc3XFx4MWRcXHg2ZFxceDY5XFx4ZDZcXHhmMFxceDljXFx4NmJcXHg5M1xceGExXFx4YmRcXHg0ZVxceDc1XFx4ZTBcXHg0MVxceDA0XFx4NWJcXHhkZlxceDQwXFx4NTZcXHgwY1xceGQ5XFx4YmJcXHg3MlxceDliXFx4ODFcXHg3Y1xceDEwXFx4MzNcXHg1M1xceGVlXFx4NGZcXHg2Y1xceGQ0XFx4NzFcXHgwNVxceGIwXFx4N2JcXHhjMFxceDdmXFx4NDVcXHgwM1xceDU2XFx4NWFcXHhhZFxceDc3XFx4NTVcXHg2NVxceDBiXFx4MzNcXHg5MlxceDJhXFx4YWNcXHgxOVxceDZjXFx4MzVcXHgxNFxceGM1XFx4MWRcXHgzMFxceDczXFx4ZjhcXHgzM1xceDNlXFx4NmRcXHg0NlxceDM4XFx4NGFcXHhiNFxceGRkXFx4ZjBcXHgyZVxceGRkXFx4MTdcXHg3NVxceDE2XFx4ZGFcXHg4Y1xceDQ0XFx4NzRcXHgyMlxceDA2XFx4ZmFcXHg2MVxceDIyXFx4MGNcXHgzM1xceDIyXFx4NTNcXHg2ZlxceGFmXFx4MzlcXHg0NFxceDBiXFx4OGNcXHgwZVxceDM5XFx4ZDlcXHgzOVxceDEzXFx4NGNcXHhiOVxceGJmXFx4N2ZcXHhhYlxceDVjXFx4OGNcXHg1MFxceDVmXFx4OWZcXHgyMlxceDc1XFx4NzhcXHgxZlxceGU5XFx4MDdcXHg3MVxceDkxXFx4NjhcXHgzYlxceGMxXFx4YzRcXHg5YlxceDdmXFx4ZjBcXHgzY1xceDU2XFx4NzFcXHg0OFxceDgyXFx4MDVcXHgyN1xceDU1XFx4NjZcXHg1OVxceDRlXFx4NjVcXHgxZFxceDk4XFx4NzVcXHhhM1xceDYxXFx4NDZcXHg3ZFxceDYxXFx4M2ZcXHgxNVxceDQxXFx4MDBcXHg5ZlxceDE0XFx4MDZcXHhkN1xceGI0XFx4MzRcXHg0ZFxceGNlXFx4MTNcXHg4N1xceDQ2XFx4YjBcXHgxYVxceGQ1XFx4MDVcXHgxY1xceGI4XFx4OGFcXHgyN1xceDdiXFx4OGJcXHhkY1xceDJiXFx4YmJcXHg0ZFxceDY3XFx4MzBcXHhjOFxceGQxXFx4ZjZcXHg1Y1xceDhmXFx4NTBcXHhmYVxceDViXFx4MmZcXHg0NlxceDliXFx4NmVcXHgzNVxceDE4XFx4MmZcXHgyN1xceDQzXFx4MmVcXHhlYlxceDBhXFx4MGNcXHg1ZVxceDEwXFx4MDVcXHgxMFxceGE1XFx4NzNcXHgxYlxceDY1XFx4MzRcXHhlNVxceDZjXFx4MmVcXHg2YVxceDQzXFx4MjdcXHg2M1xceDE0XFx4MjNcXHg1NVxceGE5XFx4M2ZcXHg3MVxceDdiXFx4NjdcXHg0M1xceDdkXFx4M2FcXHhhZlxceGNkXFx4ZTJcXHg1NFxceDU1XFx4OWNcXHhmZFxceDRiXFx4YzZcXHhlMlxceDlmXFx4MmZcXHgyOFxceGVkXFx4Y2JcXHg1Y1xceGM2XFx4MmRcXHg2NlxceDA3XFx4ODhcXHhhN1xceDNiXFx4MmZcXHgxOFxceDJhXFx4MjJcXHg0ZVxceDBlXFx4YjBcXHg2YlxceDJlXFx4ZGRcXHgwZFxceDk1XFx4N2RcXHg3ZFxceDQ3XFx4YmFcXHg0M1xceGIyXFx4MTFcXHhiMlxceDJiXFx4M2VcXHg0ZFxceGFhXFx4M2VcXHg3ZFxceGU2XFx4Y2VcXHg0OVxceDg5XFx4YzZcXHhlNlxceDc4XFx4MGNcXHg2MVxceDMxXFx4MDVcXHgyZFxceDAxXFx4YTRcXHg0ZlxceGE1XFx4N2VcXHg3MVxceDIwXFx4ODhcXHhlY1xceDBkXFx4MzFcXHhlOFxceDRlXFx4MGJcXHgwMFxceDZlXFx4NTBcXHg2OFxceDdkXFx4MTdcXHgzZFxceDA4XFx4MGRcXHgxN1xceDk1XFx4YTZcXHg2ZVxceGEzXFx4NjhcXHg5N1xceDI0XFx4NWJcXHg2YlxceGYzXFx4MTdcXHgyM1xceGYzXFx4YjZcXHg3M1xceGIzXFx4MGRcXHgwYlxceDQwXFx4YzBcXHg5ZlxceGQ4XFx4MDRcXHg1MVxceDVkXFx4ZmFcXHgxYVxceDE3XFx4MjJcXHgyZVxceDE1XFx4NmFcXHhkZlxceDQ5XFx4MDBcXHhiOVxceGEwXFx4NzdcXHg1NVxceGM2XFx4ZWZcXHgxMFxceDZhXFx4YmZcXHg3YlxceDQ3XFx4NGNcXHg3ZlxceDgzXFx4MTdcXHgwNVxceGVlXFx4ZGNcXHhkY1xceDQ2XFx4ODVcXHhhOVxceGFkXFx4NTNcXHgwN1xceDJiXFx4NTNcXHgzNFxceDA2XFx4MDdcXHhmZlxceDE0XFx4OTRcXHg1OVxceDE5XFx4MDJcXHhlNFxceDM4XFx4ZThcXHgzMVxceDgzXFx4NGVcXHhiOVxceDU4XFx4NDZcXHg2YlxceGNiXFx4MmRcXHgyM1xceDg2XFx4OTJcXHg3MFxceDAwXFx4MzVcXHg4OFxceDIyXFx4Y2ZcXHgzMVxceGIyXFx4MjZcXHgyZlxceGU3XFx4YzNcXHg3NVxceDJkXFx4MzZcXHgyY1xceDcyXFx4NzRcXHhiMFxceDIzXFx4NDdcXHhiN1xceGQzXFx4ZDFcXHgyNlxceDE2XFx4ODVcXHgzN1xceDcyXFx4ZTJcXHgwMFxceDhjXFx4NDRcXHhjZlxceDEwXFx4ZGFcXHgzM1xceDJkXFx4MWFcXHhkZVxceDYwXFx4ODZcXHg2OVxceDIzXFx4NjlcXHgyYVxceDdjXFx4Y2RcXHg0YlxceDUxXFx4MGRcXHg5NVxceDU0XFx4MzlcXHg3N1xceDJlXFx4MjlcXHhlYVxceDFiXFx4YTZcXHg1MFxceGEyXFx4NmFcXHg4ZlxceDZmXFx4NTBcXHg5OVxceDVjXFx4M2VcXHg1NFxceGZiXFx4ZWZcXHg1MFxceDViXFx4MGJcXHgwN1xceDQ1XFx4MTdcXHg4OVxceDZkXFx4MjhcXHgxM1xceDc3XFx4MzdcXHgxZFxceGRiXFx4OGVcXHgxZVxceDRhXFx4MDVcXHg2NlxceDRhXFx4NmZcXHg5OVxceDIwXFx4ZTVcXHg3MFxceGUyXFx4YjlcXHg3MVxceDdlXFx4MGNcXHg2ZFxceDQ5XFx4MDRcXHgyZFxceDdhXFx4ZmVcXHg3MlxceGM3XFx4ZjJcXHg1OVxceDMwXFx4OGZcXHhiYlxceDAyXFx4NWRcXHg3M1xceGU1XFx4YzlcXHgyMFxceGVhXFx4NzhcXHhlY1xceDIwXFx4OTBcXHhmMFxceDhhXFx4N2ZcXHg0MlxceDE3XFx4N2NcXHg0N1xceDE5XFx4NjBcXHhiMFxceDE2XFx4YmRcXHgyNlxceGI3XFx4NzFcXHhiNlxceGM3XFx4OWZcXHgwZVxceGQxXFx4MzNcXHg4MlxceDNkXFx4ZDNcXHhhYlxceGVlXFx4NjNcXHg5OVxceGM4XFx4MmJcXHg1M1xceGEwXFx4NDRcXHg1Y1xceDcxXFx4MDFcXHhjNlxceGNjXFx4NDRcXHgxZlxceDMyXFx4NGZcXHgzY1xceGNhXFx4YzBcXHgyOVxceDNkXFx4NTJcXHhkM1xceDYxXFx4MTlcXHg1OFxceGE5XFx4N2RcXHg2NVxceGI0XFx4ZGNcXHhjZlxceDBkXFx4ZjRcXHgzZFxceGYxXFx4MDhcXHhhOVxceDQyXFx4ZGFcXHgyM1xceDA5XFx4ZDhcXHhiZlxceDVlXFx4NTBcXHg0OVxceGY4XFx4NGRcXHhjMFxceGNiXFx4NDdcXHg0Y1xceDFjXFx4NGZcXHhmN1xceDdiXFx4MmJcXHhkOFxceDE2XFx4MThcXHhjNVxceDMxXFx4OTJcXHgzYlxceGI1XFx4NmZcXHhkY1xceDZjXFx4MGRcXHg5MlxceDg4XFx4MTZcXHhkMVxceDllXFx4ZGJcXHgzZlxceGUyXFx4ZTlcXHhkYVxceDVmXFx4ZDRcXHg4NFxceGUyXFx4NDZcXHg2MVxceDVhXFx4ZGVcXHgxY1xceDU1XFx4Y2ZcXHhhNFxceDAwXFx4YmVcXHhmZFxceGNlXFx4NjdcXHhmMVxceDRhXFx4NjlcXHgxY1xceDk3XFx4ZTZcXHgyMFxceDQ4XFx4ZDhcXHg1ZFxceDdmXFx4N2VcXHhhZVxceDcxXFx4MjBcXHgwZVxceDRlXFx4YWVcXHhjMFxceDU2XFx4YTlcXHg5MVxceDAxXFx4M2NcXHg4MlxceDFkXFx4MGZcXHg3MlxceGU3XFx4NzZcXHhlY1xceDI5XFx4NDlcXHhkNlxceDVkXFx4MmRcXHg4M1xceGUzXFx4ZGJcXHgzNlxceDA2XFx4YTlcXHgzYlxceDY2XFx4MTNcXHg5N1xceDg3XFx4NmFcXHhkNVxceGI2XFx4M2RcXHg1MFxceDVlXFx4NTJcXHhiOVxceDRiXFx4YzdcXHg3M1xceDU3XFx4NzhcXHhjOVxceGY0XFx4MmVcXHg1OVxceDA3XFx4OTVcXHg5M1xceDZmXFx4ZDBcXHg0YlxceDE3XFx4NTdcXHgxOVxceDNlXFx4MjdcXHgyN1xceGM3XFx4NjBcXHhkYlxceDNiXFx4ZWRcXHg5YVxceDBlXFx4NTNcXHg0NFxceDE2XFx4M2VcXHgzZlxceDhkXFx4OTJcXHg2ZFxceDc3XFx4YTJcXHgwYVxceGViXFx4M2ZcXHg1MlxceGE4XFx4YzZcXHg1NVxceDVlXFx4MzFcXHg0OVxceDM3XFx4ODVcXHhmNFxceGM1XFx4MWZcXHgyNlxceDJkXFx4YTlcXHgxY1xceGJmXFx4OGJcXHgyN1xceDU0XFx4ZGFcXHhjM1xceDZhXFx4MjBcXHhlNVxceDJhXFx4NzhcXHgwNFxceGIwXFx4ZDZcXHg5MFxceDcwXFx4NzJcXHhhYVxceDhiXFx4NjhcXHhiZFxceDg4XFx4ZjdcXHgwMlxceDVmXFx4NDhcXHhiMVxceDdlXFx4YzBcXHg1OFxceDRjXFx4M2ZcXHg2NlxceDFhXFx4ZjlcXHgzZVxceGUxXFx4NjVcXHhjMFxceDcwXFx4YTdcXHhjZlxceDM4XFx4NjlcXHhhZlxceGYwXFx4NTZcXHg2Y1xceDY0XFx4NDlcXHg5Y1xceDI3XFx4YWRcXHg3OFxceDc0XFx4NGZcXHhjMlxceDg3XFx4ZGVcXHg1NlxceDM5XFx4MDBcXHhkYVxceDc3XFx4MGJcXHhjYlxceDJkXFx4MWJcXHg4OVxceGZiXFx4MzVcXHg0ZlxceDAyXFx4ZjVcXHgwOFxceDUxXFx4MTNcXHg2MFxceGMxXFx4MGFcXHg1YVxceDQ3XFx4NGRcXHgyNlxceDFjXFx4MzNcXHgzMFxceDc4XFx4ZGFcXHhjMFxceDljXFx4NDZcXHg0N1xceGUyXFx4NWJcXHg3OVxceDYwXFx4NDlcXHg2ZVxceDM3XFx4NjdcXHg1M1xceDBhXFx4M2VcXHhlOVxceGVjXFx4NDZcXHgzOVxceGIyXFx4ZjFcXHgzNFxceDBkXFx4YzZcXHg4NFxceDUzXFx4NzVcXHg2ZVxceGUxXFx4MGNcXHg1OVxceGQ5XFx4MWVcXHhkZVxceDI5XFx4ODVcXHgxMFxceDdiXFx4NDlcXHg0OVxceGE1XFx4NzdcXHg3OVxceGJlXFx4NDlcXHg1NlxceDJlXFx4MzZcXHhlN1xceDBiXFx4M2FcXHhiYlxceDRmXFx4MDNcXHg2MlxceDdiXFx4ZDJcXHg0ZFxceDMxXFx4OTVcXHgyZlxceGJkXFx4MzhcXHg3YlxceGE4XFx4NGZcXHgyMVxceGUxXFx4ZWNcXHg0NlxceDcwXFx4NzZcXHg5NVxceDdkXFx4MjlcXHgyMlxceDc4XFx4ODhcXHgwYVxceDkwXFx4ZGRcXHg5ZFxceDVjXFx4ZGFcXHhkZVxceDE5XFx4NTFcXHhjZlxceGYwXFx4ZmNcXHg1OVxceDUyXFx4NjVcXHg3Y1xceDMzXFx4MTNcXHhkZlxceGYzXFx4NDhcXHhkYVxceGJiXFx4MmFcXHg3NVxceGRiXFx4NjBcXHhiMlxceDAyXFx4MTVcXHhkNFxceGZjXFx4MTlcXHhlZFxceDFiXFx4ZWNcXHg3ZlxceDM1XFx4YThcXHhmZlxceDI4XFx4MzFcXHgwN1xceDJkXFx4MTJcXHhjOFxceGRjXFx4ODhcXHg0NlxceDdjXFx4OGFcXHg1YlxceDIyXCJcbik7XG5cbi8qKlxuICogUHJvdmlkZXMgbWV0YWRhdGEgdXNpbmcgdGhlIEdvb2dsZSBFYXJ0aCBFbnRlcnByaXNlIFJFU1QgQVBJLiBUaGlzIGlzIHVzZWQgYnkgdGhlIEdvb2dsZUVhcnRoRW50ZXJwcmlzZUltYWdlcnlQcm92aWRlclxuICogIGFuZCBHb29nbGVFYXJ0aEVudGVycHJpc2VUZXJyYWluUHJvdmlkZXIgdG8gc2hhcmUgbWV0YWRhdGEgcmVxdWVzdHMuXG4gKlxuICogQGFsaWFzIEdvb2dsZUVhcnRoRW50ZXJwcmlzZU1ldGFkYXRhXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge1Jlc291cmNlfFN0cmluZ30gcmVzb3VyY2VPclVybCBUaGUgdXJsIG9mIHRoZSBHb29nbGUgRWFydGggRW50ZXJwcmlzZSBzZXJ2ZXIgaG9zdGluZyB0aGUgaW1hZ2VyeVxuICpcbiAqIEBzZWUgR29vZ2xlRWFydGhFbnRlcnByaXNlSW1hZ2VyeVByb3ZpZGVyXG4gKiBAc2VlIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRlcnJhaW5Qcm92aWRlclxuICpcbiAqL1xuZnVuY3Rpb24gR29vZ2xlRWFydGhFbnRlcnByaXNlTWV0YWRhdGEocmVzb3VyY2VPclVybCkge1xuICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICBDaGVjay5kZWZpbmVkKFwicmVzb3VyY2VPclVybFwiLCByZXNvdXJjZU9yVXJsKTtcbiAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgdmFyIHVybCA9IHJlc291cmNlT3JVcmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgISh1cmwgaW5zdGFuY2VvZiBSZXNvdXJjZSkpIHtcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xuICAgIENoZWNrLnR5cGVPZi5zdHJpbmcoXCJyZXNvdXJjZU9yVXJsLnVybFwiLCByZXNvdXJjZU9yVXJsLnVybCk7XG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cbiAgICB1cmwgPSByZXNvdXJjZU9yVXJsLnVybDtcbiAgfVxuXG4gIHZhciByZXNvdXJjZSA9IFJlc291cmNlLmNyZWF0ZUlmTmVlZGVkKHVybCk7XG4gIHJlc291cmNlLmFwcGVuZEZvcndhcmRTbGFzaCgpO1xuICB0aGlzLl9yZXNvdXJjZSA9IHJlc291cmNlO1xuXG4gIC8qKlxuICAgKiBUcnVlIGlmIGltYWdlcnkgaXMgYXZhaWxhYmxlLlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgdGhpcy5pbWFnZXJ5UHJlc2VudCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFRydWUgaWYgaW1hZ2VyeSBpcyBzZW50IGFzIGEgcHJvdG9jb2wgYnVmZmVyLCBmYWxzZSBpZiBzZW50IGFzIHBsYWluIGltYWdlcy4gSWYgdW5kZWZpbmVkIHdlIHdpbGwgdHJ5IGJvdGguXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHRoaXMucHJvdG9JbWFnZXJ5ID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUcnVlIGlmIHRlcnJhaW4gaXMgYXZhaWxhYmxlLlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgdGhpcy50ZXJyYWluUHJlc2VudCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEV4cG9uZW50IHVzZWQgdG8gY29tcHV0ZSBjb25zdGFudCB0byBjYWxjdWxhdGUgbmVnYXRpdmUgaGVpZ2h0IHZhbHVlcy5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGRlZmF1bHQgMzJcbiAgICovXG4gIHRoaXMubmVnYXRpdmVBbHRpdHVkZUV4cG9uZW50QmlhcyA9IDMyO1xuXG4gIC8qKlxuICAgKiBUaHJlc2hvbGQgd2hlcmUgYW55IG51bWJlcnMgc21hbGxlciBhcmUgYWN0dWFsbHkgbmVnYXRpdmUgdmFsdWVzLiBUaGV5IGFyZSBtdWx0aXBsaWVkIGJ5IC0yXm5lZ2F0aXZlQWx0aXR1ZGVFeHBvbmVudEJpYXMuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IEVQU0lMT04xMlxuICAgKi9cbiAgdGhpcy5uZWdhdGl2ZUFsdGl0dWRlVGhyZXNob2xkID0gQ2VzaXVtTWF0aC5FUFNJTE9OMTI7XG5cbiAgLyoqXG4gICAqIERpY3Rpb25hcnkgb2YgcHJvdmlkZXIgaWQgdG8gY29weXJpZ2h0IHN0cmluZ3MuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICB0aGlzLnByb3ZpZGVycyA9IHt9O1xuXG4gIC8qKlxuICAgKiBLZXkgdXNlZCB0byBkZWNvZGUgcGFja2V0c1xuICAgKiBAdHlwZSB7QXJyYXlCdWZmZXJ9XG4gICAqL1xuICB0aGlzLmtleSA9IHVuZGVmaW5lZDtcblxuICB0aGlzLl9xdWFkUGFja2V0VmVyc2lvbiA9IDE7XG5cbiAgdGhpcy5fdGlsZUluZm8gPSB7fTtcbiAgdGhpcy5fc3VidHJlZVByb21pc2VzID0ge307XG5cbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB0aGlzLl9yZWFkeVByb21pc2UgPSByZXF1ZXN0RGJSb290KHRoaXMpXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoYXQuZ2V0UXVhZFRyZWVQYWNrZXQoXCJcIiwgdGhhdC5fcXVhZFBhY2tldFZlcnNpb24pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSlcbiAgICAub3RoZXJ3aXNlKGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9XG4gICAgICAgIFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYWNjZXNzaW5nIFwiICtcbiAgICAgICAgZ2V0TWV0YWRhdGFSZXNvdXJjZSh0aGF0LCBcIlwiLCAxKS51cmwgK1xuICAgICAgICBcIi5cIjtcbiAgICAgIHJldHVybiB3aGVuLnJlamVjdChuZXcgUnVudGltZUVycm9yKG1lc3NhZ2UpKTtcbiAgICB9KTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoR29vZ2xlRWFydGhFbnRlcnByaXNlTWV0YWRhdGEucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSBHb29nbGUgRWFydGggRW50ZXJwcmlzZSBzZXJ2ZXIuXG4gICAqIEBtZW1iZXJvZiBHb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB1cmw6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZS51cmw7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgcHJveHkgdXNlZCBmb3IgbWV0YWRhdGEgcmVxdWVzdHMuXG4gICAqIEBtZW1iZXJvZiBHb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge1Byb3h5fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHByb3h5OiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzb3VyY2UucHJveHk7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgcmVzb3VyY2UgdXNlZCBmb3IgbWV0YWRhdGEgcmVxdWVzdHMuXG4gICAqIEBtZW1iZXJvZiBHb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge1Jlc291cmNlfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHJlc291cmNlOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzb3VyY2U7XG4gICAgfSxcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0cnVlIHdoZW4gdGhlIG1ldGFkYXRhIGlzIHJlYWR5IGZvciB1c2UuXG4gICAqIEBtZW1iZXJvZiBHb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS5wcm90b3R5cGVcbiAgICogQHR5cGUge1Byb21pc2UuPEJvb2xlYW4+fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHJlYWR5UHJvbWlzZToge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWR5UHJvbWlzZTtcbiAgICB9LFxuICB9LFxufSk7XG5cbi8qKlxuICogQ29udmVydHMgYSB0aWxlcyAoeCwgeSwgbGV2ZWwpIHBvc2l0aW9uIGludG8gYSBxdWFka2V5IHVzZWQgdG8gcmVxdWVzdCBhbiBpbWFnZVxuICogZnJvbSBhIEdvb2dsZSBFYXJ0aCBFbnRlcnByaXNlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgdGlsZSdzIHggY29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSB0aWxlJ3MgeSBjb29yZGluYXRlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIFRoZSB0aWxlJ3Mgem9vbSBsZXZlbC5cbiAqXG4gKiBAc2VlIEdvb2dsZUVhcnRoRW50ZXJwcmlzZU1ldGFkYXRhI3F1YWRLZXlUb1RpbGVYWVxuICovXG5Hb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS50aWxlWFlUb1F1YWRLZXkgPSBmdW5jdGlvbiAoeCwgeSwgbGV2ZWwpIHtcbiAgdmFyIHF1YWRrZXkgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gbGV2ZWw7IGkgPj0gMDsgLS1pKSB7XG4gICAgdmFyIGJpdG1hc2sgPSAxIDw8IGk7XG4gICAgdmFyIGRpZ2l0ID0gMDtcblxuICAgIC8vIFRpbGUgTGF5b3V0XG4gICAgLy8gX19fIF9fX1xuICAgIC8vfCAgIHwgICB8XG4gICAgLy98IDMgfCAyIHxcbiAgICAvL3wtLS0tLS0tfFxuICAgIC8vfCAwIHwgMSB8XG4gICAgLy98X19ffF9fX3xcbiAgICAvL1xuXG4gICAgaWYgKCFpc0JpdFNldCh5LCBiaXRtYXNrKSkge1xuICAgICAgLy8gVG9wIFJvd1xuICAgICAgZGlnaXQgfD0gMjtcbiAgICAgIGlmICghaXNCaXRTZXQoeCwgYml0bWFzaykpIHtcbiAgICAgICAgLy8gUmlnaHQgdG8gbGVmdFxuICAgICAgICBkaWdpdCB8PSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNCaXRTZXQoeCwgYml0bWFzaykpIHtcbiAgICAgIC8vIExlZnQgdG8gcmlnaHRcbiAgICAgIGRpZ2l0IHw9IDE7XG4gICAgfVxuXG4gICAgcXVhZGtleSArPSBkaWdpdDtcbiAgfVxuICByZXR1cm4gcXVhZGtleTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSB0aWxlJ3MgcXVhZGtleSB1c2VkIHRvIHJlcXVlc3QgYW4gaW1hZ2UgZnJvbSBhIEdvb2dsZSBFYXJ0aCBFbnRlcnByaXNlIHNlcnZlciBpbnRvIHRoZVxuICogKHgsIHksIGxldmVsKSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXVhZGtleSBUaGUgdGlsZSdzIHF1YWQga2V5XG4gKlxuICogQHNlZSBHb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YSN0aWxlWFlUb1F1YWRLZXlcbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlTWV0YWRhdGEucXVhZEtleVRvVGlsZVhZID0gZnVuY3Rpb24gKHF1YWRrZXkpIHtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7XG4gIHZhciBsZXZlbCA9IHF1YWRrZXkubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgaSA9IGxldmVsOyBpID49IDA7IC0taSkge1xuICAgIHZhciBiaXRtYXNrID0gMSA8PCBpO1xuICAgIHZhciBkaWdpdCA9ICtxdWFka2V5W2xldmVsIC0gaV07XG5cbiAgICBpZiAoaXNCaXRTZXQoZGlnaXQsIDIpKSB7XG4gICAgICAvLyBUb3AgUm93XG4gICAgICBpZiAoIWlzQml0U2V0KGRpZ2l0LCAxKSkge1xuICAgICAgICAvLyAvLyBSaWdodCB0byBsZWZ0XG4gICAgICAgIHggfD0gYml0bWFzaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeSB8PSBiaXRtYXNrO1xuICAgICAgaWYgKGlzQml0U2V0KGRpZ2l0LCAxKSkge1xuICAgICAgICAvLyBMZWZ0IHRvIHJpZ2h0XG4gICAgICAgIHggfD0gYml0bWFzaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiB4LFxuICAgIHk6IHksXG4gICAgbGV2ZWw6IGxldmVsLFxuICB9O1xufTtcblxuR29vZ2xlRWFydGhFbnRlcnByaXNlTWV0YWRhdGEucHJvdG90eXBlLmlzVmFsaWQgPSBmdW5jdGlvbiAocXVhZEtleSkge1xuICB2YXIgaW5mbyA9IHRoaXMuZ2V0VGlsZUluZm9ybWF0aW9uRnJvbVF1YWRLZXkocXVhZEtleSk7XG4gIGlmIChkZWZpbmVkKGluZm8pKSB7XG4gICAgcmV0dXJuIGluZm8gIT09IG51bGw7XG4gIH1cblxuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgcSA9IHF1YWRLZXk7XG4gIHZhciBsYXN0O1xuICB3aGlsZSAocS5sZW5ndGggPiAxKSB7XG4gICAgbGFzdCA9IHEuc3Vic3RyaW5nKHEubGVuZ3RoIC0gMSk7XG4gICAgcSA9IHEuc3Vic3RyaW5nKDAsIHEubGVuZ3RoIC0gMSk7XG4gICAgaW5mbyA9IHRoaXMuZ2V0VGlsZUluZm9ybWF0aW9uRnJvbVF1YWRLZXkocSk7XG4gICAgaWYgKGRlZmluZWQoaW5mbykpIHtcbiAgICAgIGlmICghaW5mby5oYXNTdWJ0cmVlKCkgJiYgIWluZm8uaGFzQ2hpbGQocGFyc2VJbnQobGFzdCkpKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgbm8gc3VidHJlZSBvciBjaGlsZCBhdmFpbGFibGUgYXQgc29tZSBwb2ludCBpbiB0aGlzIG5vZGUncyBhbmNlc3RyeVxuICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGluZm8gPT09IG51bGwpIHtcbiAgICAgIC8vIFNvbWUgbm9kZSBpbiB0aGUgYW5jZXN0cnkgd2FzIGxvYWRlZCBhbmQgc2FpZCB0aGVyZSB3YXNuJ3QgYSBzdWJ0cmVlXG4gICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbGlkO1xufTtcblxudmFyIHRhc2tQcm9jZXNzb3IgPSBuZXcgVGFza1Byb2Nlc3NvcihcImRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldFwiKTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBHb29nbGUgRWFydGggRW50ZXJwcmlzZSBxdWFkdHJlZSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtxdWFkS2V5PScnXSBUaGUgcXVhZGtleSB0byByZXRyaWV2ZSB0aGUgcGFja2V0IGZvci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbdmVyc2lvbj0xXSBUaGUgY25vZGUgdmVyc2lvbiB0byBiZSB1c2VkIGluIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtSZXF1ZXN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3Qgb2JqZWN0LiBJbnRlbmRlZCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlTWV0YWRhdGEucHJvdG90eXBlLmdldFF1YWRUcmVlUGFja2V0ID0gZnVuY3Rpb24gKFxuICBxdWFkS2V5LFxuICB2ZXJzaW9uLFxuICByZXF1ZXN0XG4pIHtcbiAgdmVyc2lvbiA9IGRlZmF1bHRWYWx1ZSh2ZXJzaW9uLCAxKTtcbiAgcXVhZEtleSA9IGRlZmF1bHRWYWx1ZShxdWFkS2V5LCBcIlwiKTtcbiAgdmFyIHJlc291cmNlID0gZ2V0TWV0YWRhdGFSZXNvdXJjZSh0aGlzLCBxdWFkS2V5LCB2ZXJzaW9uLCByZXF1ZXN0KTtcblxuICB2YXIgcHJvbWlzZSA9IHJlc291cmNlLmZldGNoQXJyYXlCdWZmZXIoKTtcblxuICBpZiAoIWRlZmluZWQocHJvbWlzZSkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBUaHJvdHRsZWRcbiAgfVxuXG4gIHZhciB0aWxlSW5mbyA9IHRoaXMuX3RpbGVJbmZvO1xuICB2YXIga2V5ID0gdGhpcy5rZXk7XG4gIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKG1ldGFkYXRhKSB7XG4gICAgdmFyIGRlY29kZVByb21pc2UgPSB0YXNrUHJvY2Vzc29yLnNjaGVkdWxlVGFzayhcbiAgICAgIHtcbiAgICAgICAgYnVmZmVyOiBtZXRhZGF0YSxcbiAgICAgICAgcXVhZEtleTogcXVhZEtleSxcbiAgICAgICAgdHlwZTogXCJNZXRhZGF0YVwiLFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgIH0sXG4gICAgICBbbWV0YWRhdGFdXG4gICAgKTtcblxuICAgIHJldHVybiBkZWNvZGVQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgdmFyIHJvb3Q7XG4gICAgICB2YXIgdG9wTGV2ZWxLZXlMZW5ndGggPSAtMTtcbiAgICAgIGlmIChxdWFkS2V5ICE9PSBcIlwiKSB7XG4gICAgICAgIC8vIFJvb3QgdGlsZSBoYXMgbm8gZGF0YSBleGNlcHQgY2hpbGRyZW4gYml0cywgc28gcHV0IHRoZW0gaW50byB0aGUgdGlsZSBpbmZvXG4gICAgICAgIHRvcExldmVsS2V5TGVuZ3RoID0gcXVhZEtleS5sZW5ndGggKyAxO1xuICAgICAgICB2YXIgdG9wID0gcmVzdWx0W3F1YWRLZXldO1xuICAgICAgICByb290ID0gdGlsZUluZm9bcXVhZEtleV07XG4gICAgICAgIHJvb3QuX2JpdHMgfD0gdG9wLl9iaXRzO1xuXG4gICAgICAgIGRlbGV0ZSByZXN1bHRbcXVhZEtleV07XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgdGhlIHJlc3VsdGluZyBvYmplY3RzIGludG8gdGlsZUluZm9cbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBzdGFydCB3aXRoIHNob3J0ZXIgcXVhZGtleXMgZmlyc3QsIHNvIHdlIGtub3cgdGhlIHBhcmVudHMgaGF2ZVxuICAgICAgLy8gIGFscmVhZHkgYmVlbiBwcm9jZXNzZWQuIE90aGVyd2lzZSB3ZSBjYW4gbG9zZSBhbmNlc3Rvckhhc1RlcnJhaW4gYWxvbmcgdGhlIHdheS5cbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVzdWx0KTtcbiAgICAgIGtleXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICAgIH0pO1xuICAgICAgdmFyIGtleXNMZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0xlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgciA9IHJlc3VsdFtrZXldO1xuICAgICAgICBpZiAociAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBpbmZvID0gR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLmNsb25lKHJlc3VsdFtrZXldKTtcbiAgICAgICAgICB2YXIga2V5TGVuZ3RoID0ga2V5Lmxlbmd0aDtcbiAgICAgICAgICBpZiAoa2V5TGVuZ3RoID09PSB0b3BMZXZlbEtleUxlbmd0aCkge1xuICAgICAgICAgICAgaW5mby5zZXRQYXJlbnQocm9vdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChrZXlMZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGlsZUluZm9ba2V5LnN1YnN0cmluZygwLCBrZXkubGVuZ3RoIC0gMSldO1xuICAgICAgICAgICAgaW5mby5zZXRQYXJlbnQocGFyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGlsZUluZm9ba2V5XSA9IGluZm87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGlsZUluZm9ba2V5XSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFBvcHVsYXRlcyB0aGUgbWV0YWRhdGEgc3VidHJlZSBkb3duIHRvIHRoZSBzcGVjaWZpZWQgdGlsZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgdGlsZSBYIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge051bWJlcn0geSBUaGUgdGlsZSBZIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgVGhlIHRpbGUgbGV2ZWwuXG4gKiBAcGFyYW0ge1JlcXVlc3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdCBvYmplY3QuIEludGVuZGVkIGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdGlsZSBpbmZvIGZvciB0aGUgcmVxdWVzdGVkIHF1YWQga2V5XG4gKlxuICogQHByaXZhdGVcbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlTWV0YWRhdGEucHJvdG90eXBlLnBvcHVsYXRlU3VidHJlZSA9IGZ1bmN0aW9uIChcbiAgeCxcbiAgeSxcbiAgbGV2ZWwsXG4gIHJlcXVlc3Rcbikge1xuICB2YXIgcXVhZGtleSA9IEdvb2dsZUVhcnRoRW50ZXJwcmlzZU1ldGFkYXRhLnRpbGVYWVRvUXVhZEtleSh4LCB5LCBsZXZlbCk7XG4gIHJldHVybiBwb3B1bGF0ZVN1YnRyZWUodGhpcywgcXVhZGtleSwgcmVxdWVzdCk7XG59O1xuXG5mdW5jdGlvbiBwb3B1bGF0ZVN1YnRyZWUodGhhdCwgcXVhZEtleSwgcmVxdWVzdCkge1xuICB2YXIgdGlsZUluZm8gPSB0aGF0Ll90aWxlSW5mbztcbiAgdmFyIHEgPSBxdWFkS2V5O1xuICB2YXIgdCA9IHRpbGVJbmZvW3FdO1xuICAvLyBJZiB3ZSBoYXZlIHRpbGVJbmZvIG1ha2Ugc3VyZSBzdXJlIGl0IGlzIG5vdCBhIG5vZGUgd2l0aCBhIHN1YnRyZWUgdGhhdCdzIG5vdCBsb2FkZWRcbiAgaWYgKGRlZmluZWQodCkgJiYgKCF0Lmhhc1N1YnRyZWUoKSB8fCB0Lmhhc0NoaWxkcmVuKCkpKSB7XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICB3aGlsZSAodCA9PT0gdW5kZWZpbmVkICYmIHEubGVuZ3RoID4gMSkge1xuICAgIHEgPSBxLnN1YnN0cmluZygwLCBxLmxlbmd0aCAtIDEpO1xuICAgIHQgPSB0aWxlSW5mb1txXTtcbiAgfVxuXG4gIHZhciBzdWJ0cmVlUmVxdWVzdDtcbiAgdmFyIHN1YnRyZWVQcm9taXNlcyA9IHRoYXQuX3N1YnRyZWVQcm9taXNlcztcbiAgdmFyIHByb21pc2UgPSBzdWJ0cmVlUHJvbWlzZXNbcV07XG4gIGlmIChkZWZpbmVkKHByb21pc2UpKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBSZWN1cnNpdmVseSBjYWxsIHRoaXMgaW4gY2FzZSB3ZSBuZWVkIG11bHRpcGxlIHN1YnRyZWUgcmVxdWVzdHNcbiAgICAgIHN1YnRyZWVSZXF1ZXN0ID0gbmV3IFJlcXVlc3Qoe1xuICAgICAgICB0aHJvdHRsZTogcmVxdWVzdC50aHJvdHRsZSxcbiAgICAgICAgdGhyb3R0bGVCeVNlcnZlcjogcmVxdWVzdC50aHJvdHRsZUJ5U2VydmVyLFxuICAgICAgICB0eXBlOiByZXF1ZXN0LnR5cGUsXG4gICAgICAgIHByaW9yaXR5RnVuY3Rpb246IHJlcXVlc3QucHJpb3JpdHlGdW5jdGlvbixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBvcHVsYXRlU3VidHJlZSh0aGF0LCBxdWFkS2V5LCBzdWJ0cmVlUmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyB0IGlzIGVpdGhlclxuICAvLyAgIG51bGwgc28gb25lIG9mIGl0cyBwYXJlbnRzIHdhcyBhIGxlYWYgbm9kZSwgc28gdGhpcyB0aWxlIGRvZXNuJ3QgZXhpc3RcbiAgLy8gICBleGlzdHMgYnV0IGRvZXNuJ3QgaGF2ZSBhIHN1YnRyZWUgdG8gcmVxdWVzdFxuICAvLyAgIHVuZGVmaW5lZCBzbyBubyBwYXJlbnQgZXhpc3RzIC0gdGhpcyBzaG91bGRuJ3QgZXZlciBoYXBwZW4gb25jZSB0aGUgcHJvdmlkZXIgaXMgcmVhZHlcbiAgaWYgKCFkZWZpbmVkKHQpIHx8ICF0Lmhhc1N1YnRyZWUoKSkge1xuICAgIHJldHVybiB3aGVuLnJlamVjdChcbiAgICAgIG5ldyBSdW50aW1lRXJyb3IoXCJDb3VsZG4ndCBsb2FkIG1ldGFkYXRhIGZvciB0aWxlIFwiICsgcXVhZEtleSlcbiAgICApO1xuICB9XG5cbiAgLy8gV2UgbmVlZCB0byBzcGxpdCB1cCB0aGUgcHJvbWlzZSBoZXJlIGJlY2F1c2Ugd2hlbiB3aWxsIGV4ZWN1dGUgc3luY3Jvbm91c2x5IGlmIGdldFF1YWRUcmVlUGFja2V0XG4gIC8vICBpcyBhbHJlYWR5IHJlc29sdmVkIChsaWtlIGluIHRoZSB0ZXN0cyksIHNvIHN1YnRyZWVQcm9taXNlcyB3aWxsIG5ldmVyIGdldCBjbGVhcmVkIG91dC5cbiAgLy8gIE9ubHkgdGhlIGluaXRpYWwgcmVxdWVzdCB3aWxsIGFsc28gcmVtb3ZlIHRoZSBwcm9taXNlIGZyb20gc3VidHJlZVByb21pc2VzLlxuICBwcm9taXNlID0gdGhhdC5nZXRRdWFkVHJlZVBhY2tldChxLCB0LmNub2RlVmVyc2lvbiwgcmVxdWVzdCk7XG4gIGlmICghZGVmaW5lZChwcm9taXNlKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgc3VidHJlZVByb21pc2VzW3FdID0gcHJvbWlzZTtcblxuICByZXR1cm4gcHJvbWlzZVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNhbGwgdGhpcyBpbiBjYXNlIHdlIG5lZWQgbXVsdGlwbGUgc3VidHJlZSByZXF1ZXN0c1xuICAgICAgc3VidHJlZVJlcXVlc3QgPSBuZXcgUmVxdWVzdCh7XG4gICAgICAgIHRocm90dGxlOiByZXF1ZXN0LnRocm90dGxlLFxuICAgICAgICB0aHJvdHRsZUJ5U2VydmVyOiByZXF1ZXN0LnRocm90dGxlQnlTZXJ2ZXIsXG4gICAgICAgIHR5cGU6IHJlcXVlc3QudHlwZSxcbiAgICAgICAgcHJpb3JpdHlGdW5jdGlvbjogcmVxdWVzdC5wcmlvcml0eUZ1bmN0aW9uLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcG9wdWxhdGVTdWJ0cmVlKHRoYXQsIHF1YWRLZXksIHN1YnRyZWVSZXF1ZXN0KTtcbiAgICB9KVxuICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgZGVsZXRlIHN1YnRyZWVQcm9taXNlc1txXTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IGEgdGlsZVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSB0aWxlIFggY29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSB0aWxlIFkgY29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCBUaGUgdGlsZSBsZXZlbC5cbiAqIEByZXR1cm5zIHtHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb258dW5kZWZpbmVkfSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdGlsZSBvciB1bmRlZmluZWQgaWYgaXQgaXNuJ3QgbG9hZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkdvb2dsZUVhcnRoRW50ZXJwcmlzZU1ldGFkYXRhLnByb3RvdHlwZS5nZXRUaWxlSW5mb3JtYXRpb24gPSBmdW5jdGlvbiAoXG4gIHgsXG4gIHksXG4gIGxldmVsXG4pIHtcbiAgdmFyIHF1YWRrZXkgPSBHb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS50aWxlWFlUb1F1YWRLZXkoeCwgeSwgbGV2ZWwpO1xuICByZXR1cm4gdGhpcy5fdGlsZUluZm9bcXVhZGtleV07XG59O1xuXG4vKipcbiAqIEdldHMgaW5mb3JtYXRpb24gYWJvdXQgYSB0aWxlIGZyb20gYSBxdWFkS2V5XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHF1YWRrZXkgVGhlIHF1YWRrZXkgZm9yIHRoZSB0aWxlXG4gKiBAcmV0dXJucyB7R29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9ufHVuZGVmaW5lZH0gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHRpbGUgb3IgdW5kZWZpbmVkIGlmIGl0IGlzbid0IGxvYWRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5Hb29nbGVFYXJ0aEVudGVycHJpc2VNZXRhZGF0YS5wcm90b3R5cGUuZ2V0VGlsZUluZm9ybWF0aW9uRnJvbVF1YWRLZXkgPSBmdW5jdGlvbiAoXG4gIHF1YWRrZXlcbikge1xuICByZXR1cm4gdGhpcy5fdGlsZUluZm9bcXVhZGtleV07XG59O1xuXG5mdW5jdGlvbiBnZXRNZXRhZGF0YVJlc291cmNlKHRoYXQsIHF1YWRLZXksIHZlcnNpb24sIHJlcXVlc3QpIHtcbiAgcmV0dXJuIHRoYXQuX3Jlc291cmNlLmdldERlcml2ZWRSZXNvdXJjZSh7XG4gICAgdXJsOiBcImZsYXRmaWxlP3EyLTBcIiArIHF1YWRLZXkgKyBcIi1xLlwiICsgdmVyc2lvbi50b1N0cmluZygpLFxuICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gIH0pO1xufVxuXG52YXIgZGJyb290UGFyc2VyO1xudmFyIGRicm9vdFBhcnNlclByb21pc2U7XG5mdW5jdGlvbiByZXF1ZXN0RGJSb290KHRoYXQpIHtcbiAgdmFyIHJlc291cmNlID0gdGhhdC5fcmVzb3VyY2UuZ2V0RGVyaXZlZFJlc291cmNlKHtcbiAgICB1cmw6IFwiZGJSb290LnY1XCIsXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiB7XG4gICAgICBvdXRwdXQ6IFwicHJvdG9cIixcbiAgICB9LFxuICB9KTtcblxuICBpZiAoIWRlZmluZWQoZGJyb290UGFyc2VyUHJvbWlzZSkpIHtcbiAgICB2YXIgdXJsID0gYnVpbGRNb2R1bGVVcmwoXCJUaGlyZFBhcnR5L2dvb2dsZS1lYXJ0aC1kYnJvb3QtcGFyc2VyLmpzXCIpO1xuICAgIHZhciBvbGRWYWx1ZSA9IHdpbmRvdy5jZXNpdW1Hb29nbGVFYXJ0aERiUm9vdFBhcnNlcjtcbiAgICBkYnJvb3RQYXJzZXJQcm9taXNlID0gbG9hZEFuZEV4ZWN1dGVTY3JpcHQodXJsKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRicm9vdFBhcnNlciA9IHdpbmRvdy5jZXNpdW1Hb29nbGVFYXJ0aERiUm9vdFBhcnNlcihwcm90b2J1Zik7XG4gICAgICBpZiAoZGVmaW5lZChvbGRWYWx1ZSkpIHtcbiAgICAgICAgd2luZG93LmNlc2l1bUdvb2dsZUVhcnRoRGJSb290UGFyc2VyID0gb2xkVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgd2luZG93LmNlc2l1bUdvb2dsZUVhcnRoRGJSb290UGFyc2VyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRicm9vdFBhcnNlclByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2hBcnJheUJ1ZmZlcigpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKGJ1Zikge1xuICAgICAgdmFyIGVuY3J5cHRlZERiUm9vdFByb3RvID0gZGJyb290UGFyc2VyLkVuY3J5cHRlZERiUm9vdFByb3RvLmRlY29kZShcbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgICAgKTtcblxuICAgICAgdmFyIGJ5dGVBcnJheSA9IGVuY3J5cHRlZERiUm9vdFByb3RvLmVuY3J5cHRpb25EYXRhO1xuICAgICAgdmFyIG9mZnNldCA9IGJ5dGVBcnJheS5ieXRlT2Zmc2V0O1xuICAgICAgdmFyIGVuZCA9IG9mZnNldCArIGJ5dGVBcnJheS5ieXRlTGVuZ3RoO1xuICAgICAgdmFyIGtleSA9ICh0aGF0LmtleSA9IGJ5dGVBcnJheS5idWZmZXIuc2xpY2Uob2Zmc2V0LCBlbmQpKTtcblxuICAgICAgYnl0ZUFycmF5ID0gZW5jcnlwdGVkRGJSb290UHJvdG8uZGJyb290RGF0YTtcbiAgICAgIG9mZnNldCA9IGJ5dGVBcnJheS5ieXRlT2Zmc2V0O1xuICAgICAgZW5kID0gb2Zmc2V0ICsgYnl0ZUFycmF5LmJ5dGVMZW5ndGg7XG4gICAgICB2YXIgZGJSb290Q29tcHJlc3NlZCA9IGJ5dGVBcnJheS5idWZmZXIuc2xpY2Uob2Zmc2V0LCBlbmQpO1xuICAgICAgcmV0dXJuIHRhc2tQcm9jZXNzb3Iuc2NoZWR1bGVUYXNrKFxuICAgICAgICB7XG4gICAgICAgICAgYnVmZmVyOiBkYlJvb3RDb21wcmVzc2VkLFxuICAgICAgICAgIHR5cGU6IFwiRGJSb290XCIsXG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgIH0sXG4gICAgICAgIFtkYlJvb3RDb21wcmVzc2VkXVxuICAgICAgKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHZhciBkYlJvb3QgPSBkYnJvb3RQYXJzZXIuRGJSb290UHJvdG8uZGVjb2RlKFxuICAgICAgICBuZXcgVWludDhBcnJheShyZXN1bHQuYnVmZmVyKVxuICAgICAgKTtcbiAgICAgIHRoYXQuaW1hZ2VyeVByZXNlbnQgPSBkZWZhdWx0VmFsdWUoXG4gICAgICAgIGRiUm9vdC5pbWFnZXJ5UHJlc2VudCxcbiAgICAgICAgdGhhdC5pbWFnZXJ5UHJlc2VudFxuICAgICAgKTtcbiAgICAgIHRoYXQucHJvdG9JbWFnZXJ5ID0gZGJSb290LnByb3RvSW1hZ2VyeTtcbiAgICAgIHRoYXQudGVycmFpblByZXNlbnQgPSBkZWZhdWx0VmFsdWUoXG4gICAgICAgIGRiUm9vdC50ZXJyYWluUHJlc2VudCxcbiAgICAgICAgdGhhdC50ZXJyYWluUHJlc2VudFxuICAgICAgKTtcbiAgICAgIGlmIChkZWZpbmVkKGRiUm9vdC5lbmRTbmlwcGV0KSAmJiBkZWZpbmVkKGRiUm9vdC5lbmRTbmlwcGV0Lm1vZGVsKSkge1xuICAgICAgICB2YXIgbW9kZWwgPSBkYlJvb3QuZW5kU25pcHBldC5tb2RlbDtcbiAgICAgICAgdGhhdC5uZWdhdGl2ZUFsdGl0dWRlRXhwb25lbnRCaWFzID0gZGVmYXVsdFZhbHVlKFxuICAgICAgICAgIG1vZGVsLm5lZ2F0aXZlQWx0aXR1ZGVFeHBvbmVudEJpYXMsXG4gICAgICAgICAgdGhhdC5uZWdhdGl2ZUFsdGl0dWRlRXhwb25lbnRCaWFzXG4gICAgICAgICk7XG4gICAgICAgIHRoYXQubmVnYXRpdmVBbHRpdHVkZVRocmVzaG9sZCA9IGRlZmF1bHRWYWx1ZShcbiAgICAgICAgICBtb2RlbC5jb21wcmVzc2VkTmVnYXRpdmVBbHRpdHVkZVRocmVzaG9sZCxcbiAgICAgICAgICB0aGF0Lm5lZ2F0aXZlQWx0aXR1ZGVUaHJlc2hvbGRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkKGRiUm9vdC5kYXRhYmFzZVZlcnNpb24pKSB7XG4gICAgICAgIHRoYXQuX3F1YWRQYWNrZXRWZXJzaW9uID0gZGVmYXVsdFZhbHVlKFxuICAgICAgICAgIGRiUm9vdC5kYXRhYmFzZVZlcnNpb24ucXVhZHRyZWVWZXJzaW9uLFxuICAgICAgICAgIHRoYXQuX3F1YWRQYWNrZXRWZXJzaW9uXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdmlkZXJzID0gdGhhdC5wcm92aWRlcnM7XG4gICAgICB2YXIgcHJvdmlkZXJJbmZvID0gZGVmYXVsdFZhbHVlKGRiUm9vdC5wcm92aWRlckluZm8sIFtdKTtcbiAgICAgIHZhciBjb3VudCA9IHByb3ZpZGVySW5mby5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gcHJvdmlkZXJJbmZvW2ldO1xuICAgICAgICB2YXIgY29weXJpZ2h0U3RyaW5nID0gcHJvdmlkZXIuY29weXJpZ2h0U3RyaW5nO1xuICAgICAgICBpZiAoZGVmaW5lZChjb3B5cmlnaHRTdHJpbmcpKSB7XG4gICAgICAgICAgcHJvdmlkZXJzW3Byb3ZpZGVyLnByb3ZpZGVySWRdID0gbmV3IENyZWRpdChjb3B5cmlnaHRTdHJpbmcudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAub3RoZXJ3aXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEp1c3QgZWF0IHRoZSBlcnJvciBhbmQgdXNlIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAgICAgIGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIHJldHJpZXZlIFwiICsgcmVzb3VyY2UudXJsICsgXCIuIFVzaW5nIGRlZmF1bHRzLlwiKTtcbiAgICAgIHRoYXQua2V5ID0gZGVmYXVsdEtleTtcbiAgICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IEdvb2dsZUVhcnRoRW50ZXJwcmlzZU1ldGFkYXRhO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19043\n')},69273:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60838);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60216);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12572);\n/* harmony import */ var _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(22832);\n/* harmony import */ var _Intersections2D_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(17980);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99417);\n/* harmony import */ var _OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(25405);\n/* harmony import */ var _QuantizedMeshTerrainData_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(38036);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(96190);\n/* harmony import */ var _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(2819);\n/* harmony import */ var _TerrainData_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(99978);\n/* harmony import */ var _TerrainEncoding_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(41782);\n/* harmony import */ var _TerrainMesh_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(13758);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Terrain data for a single tile from a Google Earth Enterprise server.\n *\n * @alias GoogleEarthEnterpriseTerrainData\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {ArrayBuffer} options.buffer The buffer containing terrain data.\n * @param {Number} options.negativeAltitudeExponentBias Multiplier for negative terrain heights that are encoded as very small positive values.\n * @param {Number} options.negativeElevationThreshold Threshold for negative values\n * @param {Number} [options.childTileMask=15] A bit mask indicating which of this tile\'s four children exist.\n *                 If a child\'s bit is set, geometry will be requested for that tile as well when it\n *                 is needed.  If the bit is cleared, the child tile is not requested and geometry is\n *                 instead upsampled from the parent.  The bit values are as follows:\n *                 <table>\n *                  <tr><th>Bit Position</th><th>Bit Value</th><th>Child Tile</th></tr>\n *                  <tr><td>0</td><td>1</td><td>Southwest</td></tr>\n *                  <tr><td>1</td><td>2</td><td>Southeast</td></tr>\n *                  <tr><td>2</td><td>4</td><td>Northeast</td></tr>\n *                  <tr><td>3</td><td>8</td><td>Northwest</td></tr>\n *                 </table>\n * @param {Boolean} [options.createdByUpsampling=false] True if this instance was created by upsampling another instance;\n *                  otherwise, false.\n * @param {Credit[]} [options.credits] Array of credits for this tile.\n *\n *\n * @example\n * var buffer = ...\n * var childTileMask = ...\n * var terrainData = new Cesium.GoogleEarthEnterpriseTerrainData({\n *   buffer : heightBuffer,\n *   childTileMask : childTileMask\n * });\n *\n * @see TerrainData\n * @see HeightmapTerrainData\n * @see QuantizedMeshTerrainData\n */\nfunction GoogleEarthEnterpriseTerrainData(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("options.buffer", options.buffer);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number(\n    "options.negativeAltitudeExponentBias",\n    options.negativeAltitudeExponentBias\n  );\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number(\n    "options.negativeElevationThreshold",\n    options.negativeElevationThreshold\n  );\n  //>>includeEnd(\'debug\');\n\n  this._buffer = options.buffer;\n  this._credits = options.credits;\n  this._negativeAltitudeExponentBias = options.negativeAltitudeExponentBias;\n  this._negativeElevationThreshold = options.negativeElevationThreshold;\n\n  // Convert from google layout to layout of other providers\n  // 3 2 -> 2 3\n  // 0 1 -> 0 1\n  var googleChildTileMask = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.childTileMask, 15);\n  var childTileMask = googleChildTileMask & 3; // Bottom row is identical\n  childTileMask |= googleChildTileMask & 4 ? 8 : 0; // NE\n  childTileMask |= googleChildTileMask & 8 ? 4 : 0; // NW\n\n  this._childTileMask = childTileMask;\n\n  this._createdByUpsampling = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.createdByUpsampling, false);\n\n  this._skirtHeight = undefined;\n  this._bufferType = this._buffer.constructor;\n  this._mesh = undefined;\n  this._minimumHeight = undefined;\n  this._maximumHeight = undefined;\n}\n\nObject.defineProperties(GoogleEarthEnterpriseTerrainData.prototype, {\n  /**\n   * An array of credits for this tile\n   * @memberof GoogleEarthEnterpriseTerrainData.prototype\n   * @type {Credit[]}\n   */\n  credits: {\n    get: function () {\n      return this._credits;\n    },\n  },\n  /**\n   * The water mask included in this terrain data, if any.  A water mask is a rectangular\n   * Uint8Array or image where a value of 255 indicates water and a value of 0 indicates land.\n   * Values in between 0 and 255 are allowed as well to smoothly blend between land and water.\n   * @memberof GoogleEarthEnterpriseTerrainData.prototype\n   * @type {Uint8Array|HTMLImageElement|HTMLCanvasElement}\n   */\n  waterMask: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\nvar createMeshTaskName = "createVerticesFromGoogleEarthEnterpriseBuffer";\nvar createMeshTaskProcessorNoThrottle = new _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(createMeshTaskName);\nvar createMeshTaskProcessorThrottle = new _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n  createMeshTaskName,\n  _TerrainData_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].maximumAsynchronousTasks */ .Z.maximumAsynchronousTasks\n);\n\nvar nativeRectangleScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z();\nvar rectangleScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z();\n\n/**\n * Creates a {@link TerrainMesh} from this terrain data.\n *\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {TilingScheme} options.tilingScheme The tiling scheme to which this tile belongs.\n * @param {Number} options.x The X coordinate of the tile for which to create the terrain data.\n * @param {Number} options.y The Y coordinate of the tile for which to create the terrain data.\n * @param {Number} options.level The level of the tile for which to create the terrain data.\n * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\n * @param {Number} [options.exaggerationRelativeHeight=0.0] The height from which terrain is exaggerated.\n * @param {Boolean} [options.throttle=true] If true, indicates that this operation will need to be retried if too many asynchronous mesh creations are already in progress.\n * @returns {Promise.<TerrainMesh>|undefined} A promise for the terrain mesh, or undefined if too many\n *          asynchronous mesh creations are already in progress and the operation should\n *          be retried later.\n */\nGoogleEarthEnterpriseTerrainData.prototype.createMesh = function (options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("options.tilingScheme", options.tilingScheme);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("options.x", options.x);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("options.y", options.y);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("options.level", options.level);\n  //>>includeEnd(\'debug\');\n\n  var tilingScheme = options.tilingScheme;\n  var x = options.x;\n  var y = options.y;\n  var level = options.level;\n  var exaggeration = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.exaggeration, 1.0);\n  var exaggerationRelativeHeight = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(\n    options.exaggerationRelativeHeight,\n    0.0\n  );\n  var throttle = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(options.throttle, true);\n\n  var ellipsoid = tilingScheme.ellipsoid;\n  tilingScheme.tileXYToNativeRectangle(x, y, level, nativeRectangleScratch);\n  tilingScheme.tileXYToRectangle(x, y, level, rectangleScratch);\n\n  // Compute the center of the tile for RTC rendering.\n  var center = ellipsoid.cartographicToCartesian(\n    _Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"].center */ .Z.center(rectangleScratch)\n  );\n\n  var levelZeroMaxError = 40075.16; // From Google\'s Doc\n  var thisLevelMaxError = levelZeroMaxError / (1 << level);\n  this._skirtHeight = Math.min(thisLevelMaxError * 8.0, 1000.0);\n\n  var createMeshTaskProcessor = throttle\n    ? createMeshTaskProcessorThrottle\n    : createMeshTaskProcessorNoThrottle;\n\n  var verticesPromise = createMeshTaskProcessor.scheduleTask({\n    buffer: this._buffer,\n    nativeRectangle: nativeRectangleScratch,\n    rectangle: rectangleScratch,\n    relativeToCenter: center,\n    ellipsoid: ellipsoid,\n    skirtHeight: this._skirtHeight,\n    exaggeration: exaggeration,\n    exaggerationRelativeHeight: exaggerationRelativeHeight,\n    includeWebMercatorT: true,\n    negativeAltitudeExponentBias: this._negativeAltitudeExponentBias,\n    negativeElevationThreshold: this._negativeElevationThreshold,\n  });\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(verticesPromise)) {\n    // Postponed\n    return undefined;\n  }\n\n  var that = this;\n  return verticesPromise.then(function (result) {\n    // Clone complex result objects because the transfer from the web worker\n    // has stripped them down to JSON-style objects.\n    that._mesh = new _TerrainMesh_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z(\n      center,\n      new Float32Array(result.vertices),\n      new Uint16Array(result.indices),\n      result.indexCountWithoutSkirts,\n      result.vertexCountWithoutSkirts,\n      result.minimumHeight,\n      result.maximumHeight,\n      _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(result.boundingSphere3D),\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(result.occludeePointInScaledSpace),\n      result.numberOfAttributes,\n      _OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].clone */ .Z.clone(result.orientedBoundingBox),\n      _TerrainEncoding_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].clone */ .Z.clone(result.encoding),\n      result.westIndicesSouthToNorth,\n      result.southIndicesEastToWest,\n      result.eastIndicesNorthToSouth,\n      result.northIndicesWestToEast\n    );\n\n    that._minimumHeight = result.minimumHeight;\n    that._maximumHeight = result.maximumHeight;\n\n    // Free memory received from server after mesh is created.\n    that._buffer = undefined;\n    return that._mesh;\n  });\n};\n\n/**\n * Computes the terrain height at a specified longitude and latitude.\n *\n * @param {Rectangle} rectangle The rectangle covered by this terrain data.\n * @param {Number} longitude The longitude in radians.\n * @param {Number} latitude The latitude in radians.\n * @returns {Number} The terrain height at the specified position.  If the position\n *          is outside the rectangle, this method will extrapolate the height, which is likely to be wildly\n *          incorrect for positions far outside the rectangle.\n */\nGoogleEarthEnterpriseTerrainData.prototype.interpolateHeight = function (\n  rectangle,\n  longitude,\n  latitude\n) {\n  var u = _Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].clamp */ .Z.clamp(\n    (longitude - rectangle.west) / rectangle.width,\n    0.0,\n    1.0\n  );\n  var v = _Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].clamp */ .Z.clamp(\n    (latitude - rectangle.south) / rectangle.height,\n    0.0,\n    1.0\n  );\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(this._mesh)) {\n    return interpolateHeight(this, u, v, rectangle);\n  }\n\n  return interpolateMeshHeight(this, u, v);\n};\n\nvar upsampleTaskProcessor = new _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(\n  "upsampleQuantizedTerrainMesh",\n  _TerrainData_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].maximumAsynchronousTasks */ .Z.maximumAsynchronousTasks\n);\n\n/**\n * Upsamples this terrain data for use by a descendant tile.  The resulting instance will contain a subset of the\n * height samples in this instance, interpolated if necessary.\n *\n * @param {TilingScheme} tilingScheme The tiling scheme of this terrain data.\n * @param {Number} thisX The X coordinate of this tile in the tiling scheme.\n * @param {Number} thisY The Y coordinate of this tile in the tiling scheme.\n * @param {Number} thisLevel The level of this tile in the tiling scheme.\n * @param {Number} descendantX The X coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantY The Y coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantLevel The level within the tiling scheme of the descendant tile for which we are upsampling.\n * @returns {Promise.<HeightmapTerrainData>|undefined} A promise for upsampled heightmap terrain data for the descendant tile,\n *          or undefined if too many asynchronous upsample operations are in progress and the request has been\n *          deferred.\n */\nGoogleEarthEnterpriseTerrainData.prototype.upsample = function (\n  tilingScheme,\n  thisX,\n  thisY,\n  thisLevel,\n  descendantX,\n  descendantY,\n  descendantLevel\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.object */ .Z.typeOf.object("tilingScheme", tilingScheme);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("thisX", thisX);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("thisY", thisY);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("thisLevel", thisLevel);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("descendantX", descendantX);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("descendantY", descendantY);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("descendantLevel", descendantLevel);\n  var levelDifference = descendantLevel - thisLevel;\n  if (levelDifference > 1) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z(\n      "Upsampling through more than one level at a time is not currently supported."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var mesh = this._mesh;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(this._mesh)) {\n    return undefined;\n  }\n\n  var isEastChild = thisX * 2 !== descendantX;\n  var isNorthChild = thisY * 2 === descendantY;\n\n  var ellipsoid = tilingScheme.ellipsoid;\n  var childRectangle = tilingScheme.tileXYToRectangle(\n    descendantX,\n    descendantY,\n    descendantLevel\n  );\n\n  var upsamplePromise = upsampleTaskProcessor.scheduleTask({\n    vertices: mesh.vertices,\n    indices: mesh.indices,\n    indexCountWithoutSkirts: mesh.indexCountWithoutSkirts,\n    vertexCountWithoutSkirts: mesh.vertexCountWithoutSkirts,\n    encoding: mesh.encoding,\n    minimumHeight: this._minimumHeight,\n    maximumHeight: this._maximumHeight,\n    isEastChild: isEastChild,\n    isNorthChild: isNorthChild,\n    childRectangle: childRectangle,\n    ellipsoid: ellipsoid,\n  });\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z)(upsamplePromise)) {\n    // Postponed\n    return undefined;\n  }\n\n  var that = this;\n  return upsamplePromise.then(function (result) {\n    var quantizedVertices = new Uint16Array(result.vertices);\n    var indicesTypedArray = _IndexDatatype_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].createTypedArray */ .Z.createTypedArray(\n      quantizedVertices.length / 3,\n      result.indices\n    );\n\n    var skirtHeight = that._skirtHeight;\n\n    // Use QuantizedMeshTerrainData since we have what we need already parsed\n    return new _QuantizedMeshTerrainData_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z({\n      quantizedVertices: quantizedVertices,\n      indices: indicesTypedArray,\n      minimumHeight: result.minimumHeight,\n      maximumHeight: result.maximumHeight,\n      boundingSphere: _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].clone */ .Z.clone(result.boundingSphere),\n      orientedBoundingBox: _OrientedBoundingBox_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].clone */ .Z.clone(\n        result.orientedBoundingBox\n      ),\n      horizonOcclusionPoint: _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].clone */ .Z.clone(result.horizonOcclusionPoint),\n      westIndices: result.westIndices,\n      southIndices: result.southIndices,\n      eastIndices: result.eastIndices,\n      northIndices: result.northIndices,\n      westSkirtHeight: skirtHeight,\n      southSkirtHeight: skirtHeight,\n      eastSkirtHeight: skirtHeight,\n      northSkirtHeight: skirtHeight,\n      childTileMask: 0,\n      createdByUpsampling: true,\n      credits: that._credits,\n    });\n  });\n};\n\n/**\n * Determines if a given child tile is available, based on the\n * {@link HeightmapTerrainData.childTileMask}.  The given child tile coordinates are assumed\n * to be one of the four children of this tile.  If non-child tile coordinates are\n * given, the availability of the southeast child tile is returned.\n *\n * @param {Number} thisX The tile X coordinate of this (the parent) tile.\n * @param {Number} thisY The tile Y coordinate of this (the parent) tile.\n * @param {Number} childX The tile X coordinate of the child tile to check for availability.\n * @param {Number} childY The tile Y coordinate of the child tile to check for availability.\n * @returns {Boolean} True if the child tile is available; otherwise, false.\n */\nGoogleEarthEnterpriseTerrainData.prototype.isChildAvailable = function (\n  thisX,\n  thisY,\n  childX,\n  childY\n) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("thisX", thisX);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("thisY", thisY);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("childX", childX);\n  _Check_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].typeOf.number */ .Z.typeOf.number("childY", childY);\n  //>>includeEnd(\'debug\');\n\n  var bitNumber = 2; // northwest child\n  if (childX !== thisX * 2) {\n    ++bitNumber; // east child\n  }\n  if (childY !== thisY * 2) {\n    bitNumber -= 2; // south child\n  }\n\n  return (this._childTileMask & (1 << bitNumber)) !== 0;\n};\n\n/**\n * Gets a value indicating whether or not this terrain data was created by upsampling lower resolution\n * terrain data.  If this value is false, the data was obtained from some other source, such\n * as by downloading it from a remote server.  This method should return true for instances\n * returned from a call to {@link HeightmapTerrainData#upsample}.\n *\n * @returns {Boolean} True if this instance was created by upsampling; otherwise, false.\n */\nGoogleEarthEnterpriseTerrainData.prototype.wasCreatedByUpsampling = function () {\n  return this._createdByUpsampling;\n};\n\nvar texCoordScratch0 = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar texCoordScratch1 = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar texCoordScratch2 = new _Cartesian2_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z();\nvar barycentricCoordinateScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z();\n\nfunction interpolateMeshHeight(terrainData, u, v) {\n  var mesh = terrainData._mesh;\n  var vertices = mesh.vertices;\n  var encoding = mesh.encoding;\n  var indices = mesh.indices;\n\n  for (var i = 0, len = indices.length; i < len; i += 3) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n    var i2 = indices[i + 2];\n\n    var uv0 = encoding.decodeTextureCoordinates(vertices, i0, texCoordScratch0);\n    var uv1 = encoding.decodeTextureCoordinates(vertices, i1, texCoordScratch1);\n    var uv2 = encoding.decodeTextureCoordinates(vertices, i2, texCoordScratch2);\n\n    var barycentric = _Intersections2D_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].computeBarycentricCoordinates */ .Z.computeBarycentricCoordinates(\n      u,\n      v,\n      uv0.x,\n      uv0.y,\n      uv1.x,\n      uv1.y,\n      uv2.x,\n      uv2.y,\n      barycentricCoordinateScratch\n    );\n    if (\n      barycentric.x >= -1e-15 &&\n      barycentric.y >= -1e-15 &&\n      barycentric.z >= -1e-15\n    ) {\n      var h0 = encoding.decodeHeight(vertices, i0);\n      var h1 = encoding.decodeHeight(vertices, i1);\n      var h2 = encoding.decodeHeight(vertices, i2);\n      return barycentric.x * h0 + barycentric.y * h1 + barycentric.z * h2;\n    }\n  }\n\n  // Position does not lie in any triangle in this mesh.\n  return undefined;\n}\n\nvar sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\nvar sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;\nvar sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;\nvar sizeOfDouble = Float64Array.BYTES_PER_ELEMENT;\n\nfunction interpolateHeight(terrainData, u, v, rectangle) {\n  var buffer = terrainData._buffer;\n  var quad = 0; // SW\n  var uStart = 0.0;\n  var vStart = 0.0;\n  if (v > 0.5) {\n    // Upper row\n    if (u > 0.5) {\n      // NE\n      quad = 2;\n      uStart = 0.5;\n    } else {\n      // NW\n      quad = 3;\n    }\n    vStart = 0.5;\n  } else if (u > 0.5) {\n    // SE\n    quad = 1;\n    uStart = 0.5;\n  }\n\n  var dv = new DataView(buffer);\n  var offset = 0;\n  for (var q = 0; q < quad; ++q) {\n    offset += dv.getUint32(offset, true);\n    offset += sizeOfUint32;\n  }\n  offset += sizeOfUint32; // Skip length of quad\n  offset += 2 * sizeOfDouble; // Skip origin\n\n  // Read sizes\n  var xSize = _Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].toRadians */ .Z.toRadians(dv.getFloat64(offset, true) * 180.0);\n  offset += sizeOfDouble;\n  var ySize = _Math_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].toRadians */ .Z.toRadians(dv.getFloat64(offset, true) * 180.0);\n  offset += sizeOfDouble;\n\n  // Samples per quad\n  var xScale = rectangle.width / xSize / 2;\n  var yScale = rectangle.height / ySize / 2;\n\n  // Number of points\n  var numPoints = dv.getInt32(offset, true);\n  offset += sizeOfInt32;\n\n  // Number of faces\n  var numIndices = dv.getInt32(offset, true) * 3;\n  offset += sizeOfInt32;\n\n  offset += sizeOfInt32; // Skip Level\n\n  var uBuffer = new Array(numPoints);\n  var vBuffer = new Array(numPoints);\n  var heights = new Array(numPoints);\n  var i;\n  for (i = 0; i < numPoints; ++i) {\n    uBuffer[i] = uStart + dv.getUint8(offset++) * xScale;\n    vBuffer[i] = vStart + dv.getUint8(offset++) * yScale;\n\n    // Height is stored in units of (1/EarthRadius) or (1/6371010.0)\n    heights[i] = dv.getFloat32(offset, true) * 6371010.0;\n    offset += sizeOfFloat;\n  }\n\n  var indices = new Array(numIndices);\n  for (i = 0; i < numIndices; ++i) {\n    indices[i] = dv.getUint16(offset, true);\n    offset += sizeOfUint16;\n  }\n\n  for (i = 0; i < numIndices; i += 3) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n    var i2 = indices[i + 2];\n\n    var u0 = uBuffer[i0];\n    var u1 = uBuffer[i1];\n    var u2 = uBuffer[i2];\n\n    var v0 = vBuffer[i0];\n    var v1 = vBuffer[i1];\n    var v2 = vBuffer[i2];\n\n    var barycentric = _Intersections2D_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].computeBarycentricCoordinates */ .Z.computeBarycentricCoordinates(\n      u,\n      v,\n      u0,\n      v0,\n      u1,\n      v1,\n      u2,\n      v2,\n      barycentricCoordinateScratch\n    );\n    if (\n      barycentric.x >= -1e-15 &&\n      barycentric.y >= -1e-15 &&\n      barycentric.z >= -1e-15\n    ) {\n      return (\n        barycentric.x * heights[i0] +\n        barycentric.y * heights[i1] +\n        barycentric.z * heights[i2]\n      );\n    }\n  }\n\n  // Position does not lie in any triangle in this mesh.\n  return undefined;\n}\n/* harmony default export */ __webpack_exports__["Z"] = (GoogleEarthEnterpriseTerrainData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///69273\n')},78858:function(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13222);\n/* harmony import */ var _Credit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52975);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12572);\n/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14459);\n/* harmony import */ var _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(71351);\n/* harmony import */ var _GoogleEarthEnterpriseMetadata_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19043);\n/* harmony import */ var _GoogleEarthEnterpriseTerrainData_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(69273);\n/* harmony import */ var _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(57134);\n/* harmony import */ var _JulianDate_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(55293);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(99417);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(96190);\n/* harmony import */ var _Request_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(22426);\n/* harmony import */ var _RequestState_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(6224);\n/* harmony import */ var _RequestType_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(82968);\n/* harmony import */ var _Resource_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(68985);\n/* harmony import */ var _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(9407);\n/* harmony import */ var _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(2819);\n/* harmony import */ var _TileProviderError_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(9121);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TerrainState = {\n  UNKNOWN: 0,\n  NONE: 1,\n  SELF: 2,\n  PARENT: 3,\n};\n\nvar julianDateScratch = new _JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z();\n\nfunction TerrainCache() {\n  this._terrainCache = {};\n  this._lastTidy = _JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].now */ .Z.now();\n}\n\nTerrainCache.prototype.add = function (quadKey, buffer) {\n  this._terrainCache[quadKey] = {\n    buffer: buffer,\n    timestamp: _JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].now */ .Z.now(),\n  };\n};\n\nTerrainCache.prototype.get = function (quadKey) {\n  var terrainCache = this._terrainCache;\n  var result = terrainCache[quadKey];\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(result)) {\n    delete this._terrainCache[quadKey];\n    return result.buffer;\n  }\n};\n\nTerrainCache.prototype.tidy = function () {\n  _JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].now */ .Z.now(julianDateScratch);\n  if (_JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].secondsDifference */ .Z.secondsDifference(julianDateScratch, this._lastTidy) > 10) {\n    var terrainCache = this._terrainCache;\n    var keys = Object.keys(terrainCache);\n    var count = keys.length;\n    for (var i = 0; i < count; ++i) {\n      var k = keys[i];\n      var e = terrainCache[k];\n      if (_JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].secondsDifference */ .Z.secondsDifference(julianDateScratch, e.timestamp) > 10) {\n        delete terrainCache[k];\n      }\n    }\n\n    _JulianDate_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"].clone */ .Z.clone(julianDateScratch, this._lastTidy);\n  }\n};\n\n/**\n * Provides tiled terrain using the Google Earth Enterprise REST API.\n *\n * @alias GoogleEarthEnterpriseTerrainProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String} options.url The url of the Google Earth Enterprise server hosting the imagery.\n * @param {GoogleEarthEnterpriseMetadata} options.metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseImageryProvider.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n * @see GoogleEarthEnterpriseImageryProvider\n * @see CesiumTerrainProvider\n *\n * @example\n * var geeMetadata = new GoogleEarthEnterpriseMetadata(\'http://www.earthenterprise.org/3d\');\n * var gee = new Cesium.GoogleEarthEnterpriseTerrainProvider({\n *     metadata : geeMetadata\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseTerrainProvider(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(options.url) || (0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(options.metadata))) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z("options.url or options.metadata is required.");\n  }\n  //>>includeEnd(\'debug\');\n\n  var metadata;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(options.metadata)) {\n    metadata = options.metadata;\n  } else {\n    var resource = _Resource_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"].createIfNeeded */ .Z.createIfNeeded(options.url);\n    metadata = new _GoogleEarthEnterpriseMetadata_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(resource);\n  }\n\n  this._metadata = metadata;\n  this._tilingScheme = new _GeographicTilingScheme_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new _Rectangle_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(\n      -_Math_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].PI */ .Z.PI,\n      -_Math_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].PI */ .Z.PI,\n      _Math_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].PI */ .Z.PI,\n      _Math_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].PI */ .Z.PI\n    ),\n    ellipsoid: options.ellipsoid,\n  });\n\n  var credit = options.credit;\n  if (typeof credit === "string") {\n    credit = new _Credit_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z(credit);\n  }\n  this._credit = credit;\n\n  // Pulled from Google\'s documentation\n  this._levelZeroMaximumGeometricError = 40075.16;\n\n  this._terrainCache = new TerrainCache();\n  this._terrainPromises = {};\n  this._terrainRequests = {};\n\n  this._errorEvent = new _Event_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\n  this._ready = false;\n  var that = this;\n  var metadataError;\n  this._readyPromise = metadata.readyPromise\n    .then(function (result) {\n      if (!metadata.terrainPresent) {\n        var e = new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z(\n          "The server " + metadata.url + " doesn\'t have terrain"\n        );\n        metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].handleError */ .Z.handleError(\n          metadataError,\n          that,\n          that._errorEvent,\n          e.message,\n          undefined,\n          undefined,\n          undefined,\n          e\n        );\n        return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(e);\n      }\n\n      _TileProviderError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].handleSuccess */ .Z.handleSuccess(metadataError);\n      that._ready = result;\n      return result;\n    })\n    .otherwise(function (e) {\n      metadataError = _TileProviderError_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].handleError */ .Z.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        e.message,\n        undefined,\n        undefined,\n        undefined,\n        e\n      );\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(e);\n    });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseTerrainProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseTerrainProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart(\'debug\', pragmas.debug);\n      if (!this._ready) {\n        throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n          "tilingScheme must not be called before the imagery provider is ready."\n        );\n      }\n      //>>includeEnd(\'debug\');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link GoogleEarthEnterpriseTerrainProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link GoogleEarthEnterpriseTerrainProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link GoogleEarthEnterpriseTerrainProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link GoogleEarthEnterpriseTerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof GoogleEarthEnterpriseTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      return undefined;\n    },\n  },\n});\n\nvar taskProcessor = new _TaskProcessor_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .Z("decodeGoogleEarthEnterprisePacket");\n\n// If the tile has its own terrain, then you can just use its child bitmask. If it was requested using it\'s parent\n//  then you need to check all of its children to see if they have terrain.\nfunction computeChildMask(quadKey, info, metadata) {\n  var childMask = info.getChildBitmask();\n  if (info.terrainState === TerrainState.PARENT) {\n    childMask = 0;\n    for (var i = 0; i < 4; ++i) {\n      var child = metadata.getTileInformationFromQuadKey(\n        quadKey + i.toString()\n      );\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(child) && child.hasTerrain()) {\n        childMask |= 1 << i;\n      }\n    }\n  }\n\n  return childMask;\n}\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link GoogleEarthEnterpriseTerrainProvider#ready} returns true.  The result must include terrain data and\n * may optionally include a water mask and an indication of which child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n *\n * @exception {DeveloperError} This function must not be called before {@link GoogleEarthEnterpriseTerrainProvider#ready}\n *            returns true.\n */\nGoogleEarthEnterpriseTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart(\'debug\', pragmas.debug)\n  if (!this._ready) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(\n      "requestTileGeometry must not be called before the terrain provider is ready."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  var quadKey = _GoogleEarthEnterpriseMetadata_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].tileXYToQuadKey */ .Z.tileXYToQuadKey(x, y, level);\n  var terrainCache = this._terrainCache;\n  var metadata = this._metadata;\n  var info = metadata.getTileInformationFromQuadKey(quadKey);\n\n  // Check if this tile is even possibly available\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(info)) {\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z("Terrain tile doesn\'t exist"));\n  }\n\n  var terrainState = info.terrainState;\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(terrainState)) {\n    // First time we have tried to load this tile, so set terrain state to UNKNOWN\n    terrainState = info.terrainState = TerrainState.UNKNOWN;\n  }\n\n  // If its in the cache, return it\n  var buffer = terrainCache.get(quadKey);\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(buffer)) {\n    var credit = metadata.providers[info.terrainProvider];\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve(\n      new _GoogleEarthEnterpriseTerrainData_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n        buffer: buffer,\n        childTileMask: computeChildMask(quadKey, info, metadata),\n        credits: (0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(credit) ? [credit] : undefined,\n        negativeAltitudeExponentBias: metadata.negativeAltitudeExponentBias,\n        negativeElevationThreshold: metadata.negativeAltitudeThreshold,\n      })\n    );\n  }\n\n  // Clean up the cache\n  terrainCache.tidy();\n\n  // We have a tile, check to see if no ancestors have terrain or that we know for sure it doesn\'t\n  if (!info.ancestorHasTerrain) {\n    // We haven\'t reached a level with terrain, so return the ellipsoid\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].resolve */ .Z.resolve(\n      new _HeightmapTerrainData_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({\n        buffer: new Uint8Array(16 * 16),\n        width: 16,\n        height: 16,\n      })\n    );\n  } else if (terrainState === TerrainState.NONE) {\n    // Already have info and there isn\'t any terrain here\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z("Terrain tile doesn\'t exist"));\n  }\n\n  // Figure out where we are getting the terrain and what version\n  var parentInfo;\n  var q = quadKey;\n  var terrainVersion = -1;\n  switch (terrainState) {\n    case TerrainState.SELF: // We have terrain and have retrieved it before\n      terrainVersion = info.terrainVersion;\n      break;\n    case TerrainState.PARENT: // We have terrain in our parent\n      q = q.substring(0, q.length - 1);\n      parentInfo = metadata.getTileInformationFromQuadKey(q);\n      terrainVersion = parentInfo.terrainVersion;\n      break;\n    case TerrainState.UNKNOWN: // We haven\'t tried to retrieve terrain yet\n      if (info.hasTerrain()) {\n        terrainVersion = info.terrainVersion; // We should have terrain\n      } else {\n        q = q.substring(0, q.length - 1);\n        parentInfo = metadata.getTileInformationFromQuadKey(q);\n        if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(parentInfo) && parentInfo.hasTerrain()) {\n          terrainVersion = parentInfo.terrainVersion; // Try checking in the parent\n        }\n      }\n      break;\n  }\n\n  // We can\'t figure out where to get the terrain\n  if (terrainVersion < 0) {\n    return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z("Terrain tile doesn\'t exist"));\n  }\n\n  // Load that terrain\n  var terrainPromises = this._terrainPromises;\n  var terrainRequests = this._terrainRequests;\n  var sharedPromise;\n  var sharedRequest;\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(terrainPromises[q])) {\n    // Already being loaded possibly from another child, so return existing promise\n    sharedPromise = terrainPromises[q];\n    sharedRequest = terrainRequests[q];\n  } else {\n    // Create new request for terrain\n    sharedRequest = request;\n    var requestPromise = buildTerrainResource(\n      this,\n      q,\n      terrainVersion,\n      sharedRequest\n    ).fetchArrayBuffer();\n\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(requestPromise)) {\n      return undefined; // Throttled\n    }\n\n    sharedPromise = requestPromise.then(function (terrain) {\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(terrain)) {\n        return taskProcessor\n          .scheduleTask(\n            {\n              buffer: terrain,\n              type: "Terrain",\n              key: metadata.key,\n            },\n            [terrain]\n          )\n          .then(function (terrainTiles) {\n            // Add requested tile and mark it as SELF\n            var requestedInfo = metadata.getTileInformationFromQuadKey(q);\n            requestedInfo.terrainState = TerrainState.SELF;\n            terrainCache.add(q, terrainTiles[0]);\n            var provider = requestedInfo.terrainProvider;\n\n            // Add children to cache\n            var count = terrainTiles.length - 1;\n            for (var j = 0; j < count; ++j) {\n              var childKey = q + j.toString();\n              var child = metadata.getTileInformationFromQuadKey(childKey);\n              if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(child)) {\n                terrainCache.add(childKey, terrainTiles[j + 1]);\n                child.terrainState = TerrainState.PARENT;\n                if (child.terrainProvider === 0) {\n                  child.terrainProvider = provider;\n                }\n              }\n            }\n          });\n      }\n\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z("Failed to load terrain."));\n    });\n\n    terrainPromises[q] = sharedPromise; // Store promise without delete from terrainPromises\n    terrainRequests[q] = sharedRequest;\n\n    // Set promise so we remove from terrainPromises just one time\n    sharedPromise = sharedPromise.always(function () {\n      delete terrainPromises[q];\n      delete terrainRequests[q];\n    });\n  }\n\n  return sharedPromise\n    .then(function () {\n      var buffer = terrainCache.get(quadKey);\n      if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(buffer)) {\n        var credit = metadata.providers[info.terrainProvider];\n        return new _GoogleEarthEnterpriseTerrainData_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z({\n          buffer: buffer,\n          childTileMask: computeChildMask(quadKey, info, metadata),\n          credits: (0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(credit) ? [credit] : undefined,\n          negativeAltitudeExponentBias: metadata.negativeAltitudeExponentBias,\n          negativeElevationThreshold: metadata.negativeAltitudeThreshold,\n        });\n      }\n\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(new _RuntimeError_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z("Failed to load terrain."));\n    })\n    .otherwise(function (error) {\n      if (sharedRequest.state === _RequestState_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].CANCELLED */ .Z.CANCELLED) {\n        request.state = sharedRequest.state;\n        return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(error);\n      }\n      info.terrainState = TerrainState.NONE;\n      return _ThirdParty_when_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].reject */ .Z.reject(error);\n    });\n};\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nGoogleEarthEnterpriseTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nGoogleEarthEnterpriseTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level\n) {\n  var metadata = this._metadata;\n  var quadKey = _GoogleEarthEnterpriseMetadata_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].tileXYToQuadKey */ .Z.tileXYToQuadKey(x, y, level);\n\n  var info = metadata.getTileInformation(x, y, level);\n  if (info === null) {\n    return false;\n  }\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(info)) {\n    if (!info.ancestorHasTerrain) {\n      return true; // We\'ll just return the ellipsoid\n    }\n\n    var terrainState = info.terrainState;\n    if (terrainState === TerrainState.NONE) {\n      return false; // Terrain is not available\n    }\n\n    if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(terrainState) || terrainState === TerrainState.UNKNOWN) {\n      info.terrainState = TerrainState.UNKNOWN;\n      if (!info.hasTerrain()) {\n        quadKey = quadKey.substring(0, quadKey.length - 1);\n        var parentInfo = metadata.getTileInformationFromQuadKey(quadKey);\n        if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(parentInfo) || !parentInfo.hasTerrain()) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  if (metadata.isValid(quadKey)) {\n    // We will need this tile, so request metadata and return false for now\n    var request = new _Request_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z({\n      throttle: false,\n      throttleByServer: true,\n      type: _RequestType_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"].TERRAIN */ .Z.TERRAIN,\n    });\n    metadata.populateSubtree(x, y, level, request);\n  }\n  return false;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nGoogleEarthEnterpriseTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n//\n// Functions to handle imagery packets\n//\nfunction buildTerrainResource(terrainProvider, quadKey, version, request) {\n  version = (0,_defined_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z)(version) && version > 0 ? version : 1;\n  return terrainProvider._metadata.resource.getDerivedResource({\n    url: "flatfile?f1c-0" + quadKey + "-t." + version.toString(),\n    request: request,\n  });\n}\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (GoogleEarthEnterpriseTerrainProvider)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78858\n')},95852:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82982);\n/* harmony import */ var _isBitSet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29797);\n\n\n\n// Bitmask for checking tile properties\nvar childrenBitmasks = [0x01, 0x02, 0x04, 0x08];\nvar anyChildBitmask = 0x0f;\nvar cacheFlagBitmask = 0x10; // True if there is a child subtree\nvar imageBitmask = 0x40;\nvar terrainBitmask = 0x80;\n\n/**\n * Contains information about each tile from a Google Earth Enterprise server\n *\n * @param {Number} bits Bitmask that contains the type of data and available children for each tile.\n * @param {Number} cnodeVersion Version of the request for subtree metadata.\n * @param {Number} imageryVersion Version of the request for imagery tile.\n * @param {Number} terrainVersion Version of the request for terrain tile.\n * @param {Number} imageryProvider Id of imagery provider.\n * @param {Number} terrainProvider Id of terrain provider.\n *\n * @private\n */\nfunction GoogleEarthEnterpriseTileInformation(\n  bits,\n  cnodeVersion,\n  imageryVersion,\n  terrainVersion,\n  imageryProvider,\n  terrainProvider\n) {\n  this._bits = bits;\n  this.cnodeVersion = cnodeVersion;\n  this.imageryVersion = imageryVersion;\n  this.terrainVersion = terrainVersion;\n  this.imageryProvider = imageryProvider;\n  this.terrainProvider = terrainProvider;\n  this.ancestorHasTerrain = false; // Set it later once we find its parent\n  this.terrainState = undefined;\n}\n\n/**\n * Creates GoogleEarthEnterpriseTileInformation from an object\n *\n * @param {Object} info Object to be cloned\n * @param {GoogleEarthEnterpriseTileInformation} [result] The object onto which to store the result.\n * @returns {GoogleEarthEnterpriseTileInformation} The modified result parameter or a new GoogleEarthEnterpriseTileInformation instance if none was provided.\n */\nGoogleEarthEnterpriseTileInformation.clone = function (info, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(result)) {\n    result = new GoogleEarthEnterpriseTileInformation(\n      info._bits,\n      info.cnodeVersion,\n      info.imageryVersion,\n      info.terrainVersion,\n      info.imageryProvider,\n      info.terrainProvider\n    );\n  } else {\n    result._bits = info._bits;\n    result.cnodeVersion = info.cnodeVersion;\n    result.imageryVersion = info.imageryVersion;\n    result.terrainVersion = info.terrainVersion;\n    result.imageryProvider = info.imageryProvider;\n    result.terrainProvider = info.terrainProvider;\n  }\n  result.ancestorHasTerrain = info.ancestorHasTerrain;\n  result.terrainState = info.terrainState;\n\n  return result;\n};\n\n/**\n * Sets the parent for the tile\n *\n * @param {GoogleEarthEnterpriseTileInformation} parent Parent tile\n */\nGoogleEarthEnterpriseTileInformation.prototype.setParent = function (parent) {\n  this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();\n};\n\n/**\n * Gets whether a subtree is available\n *\n * @returns {Boolean} true if subtree is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function () {\n  return (0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this._bits, cacheFlagBitmask);\n};\n\n/**\n * Gets whether imagery is available\n *\n * @returns {Boolean} true if imagery is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasImagery = function () {\n  return (0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this._bits, imageBitmask);\n};\n\n/**\n * Gets whether terrain is available\n *\n * @returns {Boolean} true if terrain is available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function () {\n  return (0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this._bits, terrainBitmask);\n};\n\n/**\n * Gets whether any children are present\n *\n * @returns {Boolean} true if any children are available, false otherwise.\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChildren = function () {\n  return (0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this._bits, anyChildBitmask);\n};\n\n/**\n * Gets whether a specified child is available\n *\n * @param {Number} index Index of child tile\n *\n * @returns {Boolean} true if child is available, false otherwise\n */\nGoogleEarthEnterpriseTileInformation.prototype.hasChild = function (index) {\n  return (0,_isBitSet_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this._bits, childrenBitmasks[index]);\n};\n\n/**\n * Gets bitmask containing children\n *\n * @returns {Number} Children bitmask\n */\nGoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function () {\n  return this._bits & anyChildBitmask;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (GoogleEarthEnterpriseTileInformation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU4NTIuanMiLCJtYXBwaW5ncyI6Ijs7QUFBbUM7QUFDRTs7QUFFckM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHNDQUFzQztBQUNqRCxhQUFhLHNDQUFzQztBQUNuRDtBQUNBO0FBQ0EsT0FBTyxnRUFBTztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQ0FBc0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxTQUFTLGlFQUFRO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsU0FBUyxpRUFBUTtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLFNBQVMsaUVBQVE7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxTQUFTLGlFQUFRO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsU0FBUyxpRUFBUTtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBZSxvQ0FBb0MsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvY2VzaXVtL1NvdXJjZS9Db3JlL0dvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5qcz8xNjViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZpbmVkIGZyb20gXCIuL2RlZmluZWQuanNcIjtcbmltcG9ydCBpc0JpdFNldCBmcm9tIFwiLi9pc0JpdFNldC5qc1wiO1xuXG4vLyBCaXRtYXNrIGZvciBjaGVja2luZyB0aWxlIHByb3BlcnRpZXNcbnZhciBjaGlsZHJlbkJpdG1hc2tzID0gWzB4MDEsIDB4MDIsIDB4MDQsIDB4MDhdO1xudmFyIGFueUNoaWxkQml0bWFzayA9IDB4MGY7XG52YXIgY2FjaGVGbGFnQml0bWFzayA9IDB4MTA7IC8vIFRydWUgaWYgdGhlcmUgaXMgYSBjaGlsZCBzdWJ0cmVlXG52YXIgaW1hZ2VCaXRtYXNrID0gMHg0MDtcbnZhciB0ZXJyYWluQml0bWFzayA9IDB4ODA7XG5cbi8qKlxuICogQ29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCB0aWxlIGZyb20gYSBHb29nbGUgRWFydGggRW50ZXJwcmlzZSBzZXJ2ZXJcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYml0cyBCaXRtYXNrIHRoYXQgY29udGFpbnMgdGhlIHR5cGUgb2YgZGF0YSBhbmQgYXZhaWxhYmxlIGNoaWxkcmVuIGZvciBlYWNoIHRpbGUuXG4gKiBAcGFyYW0ge051bWJlcn0gY25vZGVWZXJzaW9uIFZlcnNpb24gb2YgdGhlIHJlcXVlc3QgZm9yIHN1YnRyZWUgbWV0YWRhdGEuXG4gKiBAcGFyYW0ge051bWJlcn0gaW1hZ2VyeVZlcnNpb24gVmVyc2lvbiBvZiB0aGUgcmVxdWVzdCBmb3IgaW1hZ2VyeSB0aWxlLlxuICogQHBhcmFtIHtOdW1iZXJ9IHRlcnJhaW5WZXJzaW9uIFZlcnNpb24gb2YgdGhlIHJlcXVlc3QgZm9yIHRlcnJhaW4gdGlsZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBpbWFnZXJ5UHJvdmlkZXIgSWQgb2YgaW1hZ2VyeSBwcm92aWRlci5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0ZXJyYWluUHJvdmlkZXIgSWQgb2YgdGVycmFpbiBwcm92aWRlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24oXG4gIGJpdHMsXG4gIGNub2RlVmVyc2lvbixcbiAgaW1hZ2VyeVZlcnNpb24sXG4gIHRlcnJhaW5WZXJzaW9uLFxuICBpbWFnZXJ5UHJvdmlkZXIsXG4gIHRlcnJhaW5Qcm92aWRlclxuKSB7XG4gIHRoaXMuX2JpdHMgPSBiaXRzO1xuICB0aGlzLmNub2RlVmVyc2lvbiA9IGNub2RlVmVyc2lvbjtcbiAgdGhpcy5pbWFnZXJ5VmVyc2lvbiA9IGltYWdlcnlWZXJzaW9uO1xuICB0aGlzLnRlcnJhaW5WZXJzaW9uID0gdGVycmFpblZlcnNpb247XG4gIHRoaXMuaW1hZ2VyeVByb3ZpZGVyID0gaW1hZ2VyeVByb3ZpZGVyO1xuICB0aGlzLnRlcnJhaW5Qcm92aWRlciA9IHRlcnJhaW5Qcm92aWRlcjtcbiAgdGhpcy5hbmNlc3Rvckhhc1RlcnJhaW4gPSBmYWxzZTsgLy8gU2V0IGl0IGxhdGVyIG9uY2Ugd2UgZmluZCBpdHMgcGFyZW50XG4gIHRoaXMudGVycmFpblN0YXRlID0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uIGZyb20gYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluZm8gT2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHBhcmFtIHtHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb259IFtyZXN1bHRdIFRoZSBvYmplY3Qgb250byB3aGljaCB0byBzdG9yZSB0aGUgcmVzdWx0LlxuICogQHJldHVybnMge0dvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbn0gVGhlIG1vZGlmaWVkIHJlc3VsdCBwYXJhbWV0ZXIgb3IgYSBuZXcgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uIGluc3RhbmNlIGlmIG5vbmUgd2FzIHByb3ZpZGVkLlxuICovXG5Hb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24uY2xvbmUgPSBmdW5jdGlvbiAoaW5mbywgcmVzdWx0KSB7XG4gIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgcmVzdWx0ID0gbmV3IEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbihcbiAgICAgIGluZm8uX2JpdHMsXG4gICAgICBpbmZvLmNub2RlVmVyc2lvbixcbiAgICAgIGluZm8uaW1hZ2VyeVZlcnNpb24sXG4gICAgICBpbmZvLnRlcnJhaW5WZXJzaW9uLFxuICAgICAgaW5mby5pbWFnZXJ5UHJvdmlkZXIsXG4gICAgICBpbmZvLnRlcnJhaW5Qcm92aWRlclxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0Ll9iaXRzID0gaW5mby5fYml0cztcbiAgICByZXN1bHQuY25vZGVWZXJzaW9uID0gaW5mby5jbm9kZVZlcnNpb247XG4gICAgcmVzdWx0LmltYWdlcnlWZXJzaW9uID0gaW5mby5pbWFnZXJ5VmVyc2lvbjtcbiAgICByZXN1bHQudGVycmFpblZlcnNpb24gPSBpbmZvLnRlcnJhaW5WZXJzaW9uO1xuICAgIHJlc3VsdC5pbWFnZXJ5UHJvdmlkZXIgPSBpbmZvLmltYWdlcnlQcm92aWRlcjtcbiAgICByZXN1bHQudGVycmFpblByb3ZpZGVyID0gaW5mby50ZXJyYWluUHJvdmlkZXI7XG4gIH1cbiAgcmVzdWx0LmFuY2VzdG9ySGFzVGVycmFpbiA9IGluZm8uYW5jZXN0b3JIYXNUZXJyYWluO1xuICByZXN1bHQudGVycmFpblN0YXRlID0gaW5mby50ZXJyYWluU3RhdGU7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcGFyZW50IGZvciB0aGUgdGlsZVxuICpcbiAqIEBwYXJhbSB7R29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9ufSBwYXJlbnQgUGFyZW50IHRpbGVcbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gIHRoaXMuYW5jZXN0b3JIYXNUZXJyYWluID0gcGFyZW50LmFuY2VzdG9ySGFzVGVycmFpbiB8fCB0aGlzLmhhc1RlcnJhaW4oKTtcbn07XG5cbi8qKlxuICogR2V0cyB3aGV0aGVyIGEgc3VidHJlZSBpcyBhdmFpbGFibGVcbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBzdWJ0cmVlIGlzIGF2YWlsYWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5Hb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24ucHJvdG90eXBlLmhhc1N1YnRyZWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0JpdFNldCh0aGlzLl9iaXRzLCBjYWNoZUZsYWdCaXRtYXNrKTtcbn07XG5cbi8qKlxuICogR2V0cyB3aGV0aGVyIGltYWdlcnkgaXMgYXZhaWxhYmxlXG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgaW1hZ2VyeSBpcyBhdmFpbGFibGUsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNJbWFnZXJ5ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNCaXRTZXQodGhpcy5fYml0cywgaW1hZ2VCaXRtYXNrKTtcbn07XG5cbi8qKlxuICogR2V0cyB3aGV0aGVyIHRlcnJhaW4gaXMgYXZhaWxhYmxlXG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGVycmFpbiBpcyBhdmFpbGFibGUsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNUZXJyYWluID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNCaXRTZXQodGhpcy5fYml0cywgdGVycmFpbkJpdG1hc2spO1xufTtcblxuLyoqXG4gKiBHZXRzIHdoZXRoZXIgYW55IGNoaWxkcmVuIGFyZSBwcmVzZW50XG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgYW55IGNoaWxkcmVuIGFyZSBhdmFpbGFibGUsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzQml0U2V0KHRoaXMuX2JpdHMsIGFueUNoaWxkQml0bWFzayk7XG59O1xuXG4vKipcbiAqIEdldHMgd2hldGhlciBhIHNwZWNpZmllZCBjaGlsZCBpcyBhdmFpbGFibGVcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXggSW5kZXggb2YgY2hpbGQgdGlsZVxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIGNoaWxkIGlzIGF2YWlsYWJsZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbkdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgcmV0dXJuIGlzQml0U2V0KHRoaXMuX2JpdHMsIGNoaWxkcmVuQml0bWFza3NbaW5kZXhdKTtcbn07XG5cbi8qKlxuICogR2V0cyBiaXRtYXNrIGNvbnRhaW5pbmcgY2hpbGRyZW5cbiAqXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBDaGlsZHJlbiBiaXRtYXNrXG4gKi9cbkdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5wcm90b3R5cGUuZ2V0Q2hpbGRCaXRtYXNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fYml0cyAmIGFueUNoaWxkQml0bWFzaztcbn07XG5leHBvcnQgZGVmYXVsdCBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95852\n')},98648:function(__unused_webpack___webpack_module__,__webpack_exports__){eval('/**\n * Represents a Gregorian date in a more precise format than the JavaScript Date object.\n * In addition to submillisecond precision, this object can also represent leap seconds.\n * @alias GregorianDate\n * @constructor\n *\n * @param {Number} [year] The year as a whole number.\n * @param {Number} [month] The month as a whole number with range [1, 12].\n * @param {Number} [day] The day of the month as a whole number starting at 1.\n * @param {Number} [hour] The hour as a whole number with range [0, 23].\n * @param {Number} [minute] The minute of the hour as a whole number with range [0, 59].\n * @param {Number} [second] The second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n * @param {Number} [millisecond] The millisecond of the second as a floating point number with range [0.0, 1000.0).\n * @param {Boolean} [isLeapSecond] Whether this time is during a leap second.\n *\n * @see JulianDate#toGregorianDate\n */\nfunction GregorianDate(\n  year,\n  month,\n  day,\n  hour,\n  minute,\n  second,\n  millisecond,\n  isLeapSecond\n) {\n  /**\n   * Gets or sets the year as a whole number.\n   * @type {Number}\n   */\n  this.year = year;\n  /**\n   * Gets or sets the month as a whole number with range [1, 12].\n   * @type {Number}\n   */\n  this.month = month;\n  /**\n   * Gets or sets the day of the month as a whole number starting at 1.\n   * @type {Number}\n   */\n  this.day = day;\n  /**\n   * Gets or sets the hour as a whole number with range [0, 23].\n   * @type {Number}\n   */\n  this.hour = hour;\n  /**\n   * Gets or sets the minute of the hour as a whole number with range [0, 59].\n   * @type {Number}\n   */\n  this.minute = minute;\n  /**\n   * Gets or sets the second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\n   * @type {Number}\n   */\n  this.second = second;\n  /**\n   * Gets or sets the millisecond of the second as a floating point number with range [0.0, 1000.0).\n   * @type {Number}\n   */\n  this.millisecond = millisecond;\n  /**\n   * Gets or sets whether this time is during a leap second.\n   * @type {Boolean}\n   */\n  this.isLeapSecond = isLeapSecond;\n}\n/* harmony default export */ __webpack_exports__["Z"] = (GregorianDate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg2NDguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EseURBQWUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdnVlMy13ZWJwYWNrNS8uL25vZGVfbW9kdWxlcy9jZXNpdW0vU291cmNlL0NvcmUvR3JlZ29yaWFuRGF0ZS5qcz82YjFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIEdyZWdvcmlhbiBkYXRlIGluIGEgbW9yZSBwcmVjaXNlIGZvcm1hdCB0aGFuIHRoZSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0LlxuICogSW4gYWRkaXRpb24gdG8gc3VibWlsbGlzZWNvbmQgcHJlY2lzaW9uLCB0aGlzIG9iamVjdCBjYW4gYWxzbyByZXByZXNlbnQgbGVhcCBzZWNvbmRzLlxuICogQGFsaWFzIEdyZWdvcmlhbkRhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBbeWVhcl0gVGhlIHllYXIgYXMgYSB3aG9sZSBudW1iZXIuXG4gKiBAcGFyYW0ge051bWJlcn0gW21vbnRoXSBUaGUgbW9udGggYXMgYSB3aG9sZSBudW1iZXIgd2l0aCByYW5nZSBbMSwgMTJdLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtkYXldIFRoZSBkYXkgb2YgdGhlIG1vbnRoIGFzIGEgd2hvbGUgbnVtYmVyIHN0YXJ0aW5nIGF0IDEuXG4gKiBAcGFyYW0ge051bWJlcn0gW2hvdXJdIFRoZSBob3VyIGFzIGEgd2hvbGUgbnVtYmVyIHdpdGggcmFuZ2UgWzAsIDIzXS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWludXRlXSBUaGUgbWludXRlIG9mIHRoZSBob3VyIGFzIGEgd2hvbGUgbnVtYmVyIHdpdGggcmFuZ2UgWzAsIDU5XS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2Vjb25kXSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUgYXMgYSB3aG9sZSBudW1iZXIgd2l0aCByYW5nZSBbMCwgNjBdLCB3aXRoIDYwIHJlcHJlc2VudGluZyBhIGxlYXAgc2Vjb25kLlxuICogQHBhcmFtIHtOdW1iZXJ9IFttaWxsaXNlY29uZF0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQgYXMgYSBmbG9hdGluZyBwb2ludCBudW1iZXIgd2l0aCByYW5nZSBbMC4wLCAxMDAwLjApLlxuICogQHBhcmFtIHtCb29sZWFufSBbaXNMZWFwU2Vjb25kXSBXaGV0aGVyIHRoaXMgdGltZSBpcyBkdXJpbmcgYSBsZWFwIHNlY29uZC5cbiAqXG4gKiBAc2VlIEp1bGlhbkRhdGUjdG9HcmVnb3JpYW5EYXRlXG4gKi9cbmZ1bmN0aW9uIEdyZWdvcmlhbkRhdGUoXG4gIHllYXIsXG4gIG1vbnRoLFxuICBkYXksXG4gIGhvdXIsXG4gIG1pbnV0ZSxcbiAgc2Vjb25kLFxuICBtaWxsaXNlY29uZCxcbiAgaXNMZWFwU2Vjb25kXG4pIHtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgeWVhciBhcyBhIHdob2xlIG51bWJlci5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHRoaXMueWVhciA9IHllYXI7XG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIG1vbnRoIGFzIGEgd2hvbGUgbnVtYmVyIHdpdGggcmFuZ2UgWzEsIDEyXS5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHRoaXMubW9udGggPSBtb250aDtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgZGF5IG9mIHRoZSBtb250aCBhcyBhIHdob2xlIG51bWJlciBzdGFydGluZyBhdCAxLlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgdGhpcy5kYXkgPSBkYXk7XG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGhvdXIgYXMgYSB3aG9sZSBudW1iZXIgd2l0aCByYW5nZSBbMCwgMjNdLlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgdGhpcy5ob3VyID0gaG91cjtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgbWludXRlIG9mIHRoZSBob3VyIGFzIGEgd2hvbGUgbnVtYmVyIHdpdGggcmFuZ2UgWzAsIDU5XS5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHRoaXMubWludXRlID0gbWludXRlO1xuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSBhcyBhIHdob2xlIG51bWJlciB3aXRoIHJhbmdlIFswLCA2MF0sIHdpdGggNjAgcmVwcmVzZW50aW5nIGEgbGVhcCBzZWNvbmQuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLnNlY29uZCA9IHNlY29uZDtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCBhcyBhIGZsb2F0aW5nIHBvaW50IG51bWJlciB3aXRoIHJhbmdlIFswLjAsIDEwMDAuMCkuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLm1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0aGlzIHRpbWUgaXMgZHVyaW5nIGEgbGVhcCBzZWNvbmQuXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgdGhpcy5pc0xlYXBTZWNvbmQgPSBpc0xlYXBTZWNvbmQ7XG59XG5leHBvcnQgZGVmYXVsdCBHcmVnb3JpYW5EYXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///98648\n')},46031:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53773);\n/* harmony import */ var _ArcType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11491);\n/* harmony import */ var _arrayRemoveDuplicates_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32378);\n/* harmony import */ var _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48243);\n/* harmony import */ var _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(60216);\n/* harmony import */ var _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(51688);\n/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(66553);\n/* harmony import */ var _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(84828);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12572);\n/* harmony import */ var _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(50491);\n/* harmony import */ var _EllipsoidGeodesic_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(39043);\n/* harmony import */ var _EllipsoidRhumbLine_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(8398);\n/* harmony import */ var _EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(74938);\n/* harmony import */ var _GeographicProjection_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(39756);\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(82408);\n/* harmony import */ var _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(13616);\n/* harmony import */ var _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(67627);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(99417);\n/* harmony import */ var _Matrix3_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(68201);\n/* harmony import */ var _Plane_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(7749);\n/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(87811);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(96190);\n/* harmony import */ var _WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(79962);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar PROJECTIONS = [_GeographicProjection_js__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z, _WebMercatorProjection_js__WEBPACK_IMPORTED_MODULE_23__/* ["default"] */ .Z];\nvar PROJECTION_COUNT = PROJECTIONS.length;\n\nvar MITER_BREAK_SMALL = Math.cos(_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].toRadians */ .Z.toRadians(30.0));\nvar MITER_BREAK_LARGE = Math.cos(_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].toRadians */ .Z.toRadians(150.0));\n\n// Initial heights for constructing the wall.\n// Keeping WALL_INITIAL_MIN_HEIGHT near the ellipsoid surface helps\n// prevent precision problems with planes in the shader.\n// Putting the start point of a plane at ApproximateTerrainHeights._defaultMinTerrainHeight,\n// which is a highly conservative bound, usually puts the plane origin several thousands\n// of meters away from the actual terrain, causing floating point problems when checking\n// fragments on terrain against the plane.\n// Ellipsoid height is generally much closer.\n// The initial max height is arbitrary.\n// Both heights are corrected using ApproximateTerrainHeights for computing the actual volume geometry.\nvar WALL_INITIAL_MIN_HEIGHT = 0.0;\nvar WALL_INITIAL_MAX_HEIGHT = 1000.0;\n\n/**\n * A description of a polyline on terrain or 3D Tiles. Only to be used with {@link GroundPolylinePrimitive}.\n *\n * @alias GroundPolylineGeometry\n * @constructor\n *\n * @param {Object} options Options with the following properties:\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the polyline\'s points. Heights above the ellipsoid will be ignored.\n * @param {Number} [options.width=1.0] The screen space width in pixels.\n * @param {Number} [options.granularity=9999.0] The distance interval in meters used for interpolating options.points. Defaults to 9999.0 meters. Zero indicates no interpolation.\n * @param {Boolean} [options.loop=false] Whether during geometry creation a line segment will be added between the last and first line positions to make this Polyline a loop.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n *\n * @exception {DeveloperError} At least two positions are required.\n *\n * @see GroundPolylinePrimitive\n *\n * @example\n * var positions = Cesium.Cartesian3.fromDegreesArray([\n *   -112.1340164450331, 36.05494287836128,\n *   -112.08821010582645, 36.097804071380715,\n *   -112.13296079730024, 36.168769146801104\n * ]);\n *\n * var geometry = new Cesium.GroundPolylineGeometry({\n *   positions : positions\n * });\n */\nfunction GroundPolylineGeometry(options) {\n  options = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options, _defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"].EMPTY_OBJECT */ .Z.EMPTY_OBJECT);\n  var positions = options.positions;\n\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(positions) || positions.length < 2) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z("At least two positions are required.");\n  }\n  if (\n    (0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(options.arcType) &&\n    options.arcType !== _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].GEODESIC */ .Z.GEODESIC &&\n    options.arcType !== _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].RHUMB */ .Z.RHUMB\n  ) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(\n      "Valid options for arcType are ArcType.GEODESIC and ArcType.RHUMB."\n    );\n  }\n  //>>includeEnd(\'debug\');\n\n  /**\n   * The screen space width in pixels.\n   * @type {Number}\n   */\n  this.width = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.width, 1.0); // Doesn\'t get packed, not necessary for computing geometry.\n\n  this._positions = positions;\n\n  /**\n   * The distance interval used for interpolating options.points. Zero indicates no interpolation.\n   * Default of 9999.0 allows centimeter accuracy with 32 bit floating point.\n   * @type {Boolean}\n   * @default 9999.0\n   */\n  this.granularity = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.granularity, 9999.0);\n\n  /**\n   * Whether during geometry creation a line segment will be added between the last and first line positions to make this Polyline a loop.\n   * If the geometry has two positions this parameter will be ignored.\n   * @type {Boolean}\n   * @default false\n   */\n  this.loop = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.loop, false);\n\n  /**\n   * The type of path the polyline must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n   * @type {ArcType}\n   * @default ArcType.GEODESIC\n   */\n  this.arcType = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(options.arcType, _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].GEODESIC */ .Z.GEODESIC);\n\n  this._ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].WGS84 */ .Z.WGS84;\n\n  // MapProjections can\'t be packed, so store the index to a known MapProjection.\n  this._projectionIndex = 0;\n  this._workerName = "createGroundPolylineGeometry";\n\n  // Used by GroundPolylinePrimitive to signal worker that scenemode is 3D only.\n  this._scene3DOnly = false;\n}\n\nObject.defineProperties(GroundPolylineGeometry.prototype, {\n  /**\n   * The number of elements used to pack the object into an array.\n   * @memberof GroundPolylineGeometry.prototype\n   * @type {Number}\n   * @readonly\n   * @private\n   */\n  packedLength: {\n    get: function () {\n      return (\n        1.0 +\n        this._positions.length * 3 +\n        1.0 +\n        1.0 +\n        1.0 +\n        _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].packedLength */ .Z.packedLength +\n        1.0 +\n        1.0\n      );\n    },\n  },\n});\n\n/**\n * Set the GroundPolylineGeometry\'s projection and ellipsoid.\n * Used by GroundPolylinePrimitive to signal scene information to the geometry for generating 2D attributes.\n *\n * @param {GroundPolylineGeometry} groundPolylineGeometry GroundPolylinGeometry describing a polyline on terrain or 3D Tiles.\n * @param {Projection} mapProjection A MapProjection used for projecting cartographic coordinates to 2D.\n * @private\n */\nGroundPolylineGeometry.setProjectionAndEllipsoid = function (\n  groundPolylineGeometry,\n  mapProjection\n) {\n  var projectionIndex = 0;\n  for (var i = 0; i < PROJECTION_COUNT; i++) {\n    if (mapProjection instanceof PROJECTIONS[i]) {\n      projectionIndex = i;\n      break;\n    }\n  }\n\n  groundPolylineGeometry._projectionIndex = projectionIndex;\n  groundPolylineGeometry._ellipsoid = mapProjection.ellipsoid;\n};\n\nvar cart3Scratch1 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar cart3Scratch2 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar cart3Scratch3 = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nfunction computeRightNormal(start, end, maxHeight, ellipsoid, result) {\n  var startBottom = getPosition(ellipsoid, start, 0.0, cart3Scratch1);\n  var startTop = getPosition(ellipsoid, start, maxHeight, cart3Scratch2);\n  var endBottom = getPosition(ellipsoid, end, 0.0, cart3Scratch3);\n\n  var up = direction(startTop, startBottom, cart3Scratch2);\n  var forward = direction(endBottom, startBottom, cart3Scratch3);\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(forward, up, result);\n  return _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(result, result);\n}\n\nvar interpolatedCartographicScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\nvar interpolatedBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar interpolatedTopScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar interpolatedNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nfunction interpolateSegment(\n  start,\n  end,\n  minHeight,\n  maxHeight,\n  granularity,\n  arcType,\n  ellipsoid,\n  normalsArray,\n  bottomPositionsArray,\n  topPositionsArray,\n  cartographicsArray\n) {\n  if (granularity === 0.0) {\n    return;\n  }\n\n  var ellipsoidLine;\n  if (arcType === _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].GEODESIC */ .Z.GEODESIC) {\n    ellipsoidLine = new _EllipsoidGeodesic_js__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z(start, end, ellipsoid);\n  } else if (arcType === _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].RHUMB */ .Z.RHUMB) {\n    ellipsoidLine = new _EllipsoidRhumbLine_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(start, end, ellipsoid);\n  }\n\n  var surfaceDistance = ellipsoidLine.surfaceDistance;\n  if (surfaceDistance < granularity) {\n    return;\n  }\n\n  // Compute rightwards normal applicable at all interpolated points\n  var interpolatedNormal = computeRightNormal(\n    start,\n    end,\n    maxHeight,\n    ellipsoid,\n    interpolatedNormalScratch\n  );\n\n  var segments = Math.ceil(surfaceDistance / granularity);\n  var interpointDistance = surfaceDistance / segments;\n  var distanceFromStart = interpointDistance;\n  var pointsToAdd = segments - 1;\n  var packIndex = normalsArray.length;\n  for (var i = 0; i < pointsToAdd; i++) {\n    var interpolatedCartographic = ellipsoidLine.interpolateUsingSurfaceDistance(\n      distanceFromStart,\n      interpolatedCartographicScratch\n    );\n    var interpolatedBottom = getPosition(\n      ellipsoid,\n      interpolatedCartographic,\n      minHeight,\n      interpolatedBottomScratch\n    );\n    var interpolatedTop = getPosition(\n      ellipsoid,\n      interpolatedCartographic,\n      maxHeight,\n      interpolatedTopScratch\n    );\n\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(interpolatedNormal, normalsArray, packIndex);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(interpolatedBottom, bottomPositionsArray, packIndex);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(interpolatedTop, topPositionsArray, packIndex);\n    cartographicsArray.push(interpolatedCartographic.latitude);\n    cartographicsArray.push(interpolatedCartographic.longitude);\n\n    packIndex += 3;\n    distanceFromStart += interpointDistance;\n  }\n}\n\nvar heightlessCartographicScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\nfunction getPosition(ellipsoid, cartographic, height, result) {\n  _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].clone */ .Z.clone(cartographic, heightlessCartographicScratch);\n  heightlessCartographicScratch.height = height;\n  return _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].toCartesian */ .Z.toCartesian(\n    heightlessCartographicScratch,\n    ellipsoid,\n    result\n  );\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nGroundPolylineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].typeOf.object */ .Z.typeOf.object("value", value);\n  _Check_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  var index = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(startingIndex, 0);\n\n  var positions = value._positions;\n  var positionsLength = positions.length;\n\n  array[index++] = positionsLength;\n\n  for (var i = 0; i < positionsLength; ++i) {\n    var cartesian = positions[i];\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(cartesian, array, index);\n    index += 3;\n  }\n\n  array[index++] = value.granularity;\n  array[index++] = value.loop ? 1.0 : 0.0;\n  array[index++] = value.arcType;\n\n  _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].pack */ .Z.pack(value._ellipsoid, array, index);\n  index += _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].packedLength */ .Z.packedLength;\n\n  array[index++] = value._projectionIndex;\n  array[index++] = value._scene3DOnly ? 1.0 : 0.0;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolygonGeometry} [result] The object into which to store the result.\n */\nGroundPolylineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"].defined */ .Z.defined("array", array);\n  //>>includeEnd(\'debug\');\n\n  var index = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z)(startingIndex, 0);\n  var positionsLength = array[index++];\n  var positions = new Array(positionsLength);\n\n  for (var i = 0; i < positionsLength; i++) {\n    positions[i] = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(array, index);\n    index += 3;\n  }\n\n  var granularity = array[index++];\n  var loop = array[index++] === 1.0;\n  var arcType = array[index++];\n\n  var ellipsoid = _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].unpack */ .Z.unpack(array, index);\n  index += _Ellipsoid_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"].packedLength */ .Z.packedLength;\n\n  var projectionIndex = array[index++];\n  var scene3DOnly = array[index++] === 1.0;\n\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(result)) {\n    result = new GroundPolylineGeometry({\n      positions: positions,\n    });\n  }\n\n  result._positions = positions;\n  result.granularity = granularity;\n  result.loop = loop;\n  result.arcType = arcType;\n  result._ellipsoid = ellipsoid;\n  result._projectionIndex = projectionIndex;\n  result._scene3DOnly = scene3DOnly;\n\n  return result;\n};\n\nfunction direction(target, origin, result) {\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(target, origin, result);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(result, result);\n  return result;\n}\n\nfunction tangentDirection(target, origin, up, result) {\n  result = direction(target, origin, result);\n\n  // orthogonalize\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(result, up, result);\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(result, result);\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(up, result, result);\n  return result;\n}\n\nvar toPreviousScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar toNextScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar forwardScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar vertexUpScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar cosine90 = 0.0;\nvar cosine180 = -1.0;\nfunction computeVertexMiterNormal(\n  previousBottom,\n  vertexBottom,\n  vertexTop,\n  nextBottom,\n  result\n) {\n  var up = direction(vertexTop, vertexBottom, vertexUpScratch);\n\n  // Compute vectors pointing towards neighboring points but tangent to this point on the ellipsoid\n  var toPrevious = tangentDirection(\n    previousBottom,\n    vertexBottom,\n    up,\n    toPreviousScratch\n  );\n  var toNext = tangentDirection(nextBottom, vertexBottom, up, toNextScratch);\n\n  // Check if tangents are almost opposite - if so, no need to miter.\n  if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].dot */ .Z.dot(toPrevious, toNext),\n      cosine180,\n      _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON5 */ .Z.EPSILON5\n    )\n  ) {\n    result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(up, toPrevious, result);\n    result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(result, result);\n    return result;\n  }\n\n  // Average directions to previous and to next in the plane of Up\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(toNext, toPrevious, result);\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(result, result);\n\n  // Flip the normal if it isn\'t pointing roughly bound right (aka if forward is pointing more "backwards")\n  var forward = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(up, result, forwardScratch);\n  if (_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].dot */ .Z.dot(toNext, forward) < cosine90) {\n    result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].negate */ .Z.negate(result, result);\n  }\n\n  return result;\n}\n\nvar XZ_PLANE = _Plane_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].fromPointNormal */ .Z.fromPointNormal(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].ZERO */ .Z.ZERO, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNIT_Y */ .Z.UNIT_Y);\n\nvar previousBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar vertexBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar vertexTopScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar nextBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar vertexNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar intersectionScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar cartographicScratch0 = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\nvar cartographicScratch1 = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\nvar cartographicIntersectionScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n/**\n * Computes shadow volumes for the ground polyline, consisting of its vertices, indices, and a bounding sphere.\n * Vertices are "fat," packing all the data needed in each volume to describe a line on terrain or 3D Tiles.\n * Should not be called independent of {@link GroundPolylinePrimitive}.\n *\n * @param {GroundPolylineGeometry} groundPolylineGeometry\n * @private\n */\nGroundPolylineGeometry.createGeometry = function (groundPolylineGeometry) {\n  var compute2dAttributes = !groundPolylineGeometry._scene3DOnly;\n  var loop = groundPolylineGeometry.loop;\n  var ellipsoid = groundPolylineGeometry._ellipsoid;\n  var granularity = groundPolylineGeometry.granularity;\n  var arcType = groundPolylineGeometry.arcType;\n  var projection = new PROJECTIONS[groundPolylineGeometry._projectionIndex](\n    ellipsoid\n  );\n\n  var minHeight = WALL_INITIAL_MIN_HEIGHT;\n  var maxHeight = WALL_INITIAL_MAX_HEIGHT;\n\n  var index;\n  var i;\n\n  var positions = groundPolylineGeometry._positions;\n  var positionsLength = positions.length;\n\n  if (positionsLength === 2) {\n    loop = false;\n  }\n\n  // Split positions across the IDL and the Prime Meridian as well.\n  // Split across prime meridian because very large geometries crossing the Prime Meridian but not the IDL\n  // may get split by the plane of IDL + Prime Meridian.\n  var p0;\n  var p1;\n  var c0;\n  var c1;\n  var rhumbLine = new _EllipsoidRhumbLine_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .Z(undefined, undefined, ellipsoid);\n  var intersection;\n  var intersectionCartographic;\n  var intersectionLongitude;\n  var splitPositions = [positions[0]];\n  for (i = 0; i < positionsLength - 1; i++) {\n    p0 = positions[i];\n    p1 = positions[i + 1];\n    intersection = _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].lineSegmentPlane */ .Z.lineSegmentPlane(\n      p0,\n      p1,\n      XZ_PLANE,\n      intersectionScratch\n    );\n    if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(intersection) &&\n      !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p0, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7) &&\n      !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p1, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7)\n    ) {\n      if (groundPolylineGeometry.arcType === _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].GEODESIC */ .Z.GEODESIC) {\n        splitPositions.push(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(intersection));\n      } else if (groundPolylineGeometry.arcType === _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].RHUMB */ .Z.RHUMB) {\n        intersectionLongitude = ellipsoid.cartesianToCartographic(\n          intersection,\n          cartographicScratch0\n        ).longitude;\n        c0 = ellipsoid.cartesianToCartographic(p0, cartographicScratch0);\n        c1 = ellipsoid.cartesianToCartographic(p1, cartographicScratch1);\n        rhumbLine.setEndPoints(c0, c1);\n        intersectionCartographic = rhumbLine.findIntersectionWithLongitude(\n          intersectionLongitude,\n          cartographicIntersectionScratch\n        );\n        intersection = ellipsoid.cartographicToCartesian(\n          intersectionCartographic,\n          intersectionScratch\n        );\n        if (\n          (0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(intersection) &&\n          !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p0, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7) &&\n          !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p1, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7)\n        ) {\n          splitPositions.push(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(intersection));\n        }\n      }\n    }\n    splitPositions.push(p1);\n  }\n\n  if (loop) {\n    p0 = positions[positionsLength - 1];\n    p1 = positions[0];\n    intersection = _IntersectionTests_js__WEBPACK_IMPORTED_MODULE_17__/* ["default"].lineSegmentPlane */ .Z.lineSegmentPlane(\n      p0,\n      p1,\n      XZ_PLANE,\n      intersectionScratch\n    );\n    if (\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(intersection) &&\n      !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p0, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7) &&\n      !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p1, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7)\n    ) {\n      if (groundPolylineGeometry.arcType === _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].GEODESIC */ .Z.GEODESIC) {\n        splitPositions.push(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(intersection));\n      } else if (groundPolylineGeometry.arcType === _ArcType_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"].RHUMB */ .Z.RHUMB) {\n        intersectionLongitude = ellipsoid.cartesianToCartographic(\n          intersection,\n          cartographicScratch0\n        ).longitude;\n        c0 = ellipsoid.cartesianToCartographic(p0, cartographicScratch0);\n        c1 = ellipsoid.cartesianToCartographic(p1, cartographicScratch1);\n        rhumbLine.setEndPoints(c0, c1);\n        intersectionCartographic = rhumbLine.findIntersectionWithLongitude(\n          intersectionLongitude,\n          cartographicIntersectionScratch\n        );\n        intersection = ellipsoid.cartographicToCartesian(\n          intersectionCartographic,\n          intersectionScratch\n        );\n        if (\n          (0,_defined_js__WEBPACK_IMPORTED_MODULE_24__/* ["default"] */ .Z)(intersection) &&\n          !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p0, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7) &&\n          !_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(intersection, p1, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON7 */ .Z.EPSILON7)\n        ) {\n          splitPositions.push(_Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(intersection));\n        }\n      }\n    }\n  }\n  var cartographicsLength = splitPositions.length;\n\n  var cartographics = new Array(cartographicsLength);\n  for (i = 0; i < cartographicsLength; i++) {\n    var cartographic = _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].fromCartesian */ .Z.fromCartesian(splitPositions[i], ellipsoid);\n    cartographic.height = 0.0;\n    cartographics[i] = cartographic;\n  }\n\n  cartographics = (0,_arrayRemoveDuplicates_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(\n    cartographics,\n    _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon\n  );\n  cartographicsLength = cartographics.length;\n\n  if (cartographicsLength < 2) {\n    return undefined;\n  }\n\n  /**** Build heap-side arrays for positions, interpolated cartographics, and normals from which to compute vertices ****/\n  // We build a "wall" and then decompose it into separately connected component "volumes" because we need a lot\n  // of information about the wall. Also, this simplifies interpolation.\n  // Convention: "next" and "end" are locally forward to each segment of the wall,\n  // and we are computing normals pointing towards the local right side of the vertices in each segment.\n  var cartographicsArray = [];\n  var normalsArray = [];\n  var bottomPositionsArray = [];\n  var topPositionsArray = [];\n\n  var previousBottom = previousBottomScratch;\n  var vertexBottom = vertexBottomScratch;\n  var vertexTop = vertexTopScratch;\n  var nextBottom = nextBottomScratch;\n  var vertexNormal = vertexNormalScratch;\n\n  // First point - either loop or attach a "perpendicular" normal\n  var startCartographic = cartographics[0];\n  var nextCartographic = cartographics[1];\n\n  var prestartCartographic = cartographics[cartographicsLength - 1];\n  previousBottom = getPosition(\n    ellipsoid,\n    prestartCartographic,\n    minHeight,\n    previousBottom\n  );\n  nextBottom = getPosition(ellipsoid, nextCartographic, minHeight, nextBottom);\n  vertexBottom = getPosition(\n    ellipsoid,\n    startCartographic,\n    minHeight,\n    vertexBottom\n  );\n  vertexTop = getPosition(ellipsoid, startCartographic, maxHeight, vertexTop);\n\n  if (loop) {\n    vertexNormal = computeVertexMiterNormal(\n      previousBottom,\n      vertexBottom,\n      vertexTop,\n      nextBottom,\n      vertexNormal\n    );\n  } else {\n    vertexNormal = computeRightNormal(\n      startCartographic,\n      nextCartographic,\n      maxHeight,\n      ellipsoid,\n      vertexNormal\n    );\n  }\n\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexNormal, normalsArray, 0);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexBottom, bottomPositionsArray, 0);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexTop, topPositionsArray, 0);\n  cartographicsArray.push(startCartographic.latitude);\n  cartographicsArray.push(startCartographic.longitude);\n\n  interpolateSegment(\n    startCartographic,\n    nextCartographic,\n    minHeight,\n    maxHeight,\n    granularity,\n    arcType,\n    ellipsoid,\n    normalsArray,\n    bottomPositionsArray,\n    topPositionsArray,\n    cartographicsArray\n  );\n\n  // All inbetween points\n  for (i = 1; i < cartographicsLength - 1; ++i) {\n    previousBottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(vertexBottom, previousBottom);\n    vertexBottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(nextBottom, vertexBottom);\n    var vertexCartographic = cartographics[i];\n    getPosition(ellipsoid, vertexCartographic, maxHeight, vertexTop);\n    getPosition(ellipsoid, cartographics[i + 1], minHeight, nextBottom);\n\n    computeVertexMiterNormal(\n      previousBottom,\n      vertexBottom,\n      vertexTop,\n      nextBottom,\n      vertexNormal\n    );\n\n    index = normalsArray.length;\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexNormal, normalsArray, index);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexBottom, bottomPositionsArray, index);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexTop, topPositionsArray, index);\n    cartographicsArray.push(vertexCartographic.latitude);\n    cartographicsArray.push(vertexCartographic.longitude);\n\n    interpolateSegment(\n      cartographics[i],\n      cartographics[i + 1],\n      minHeight,\n      maxHeight,\n      granularity,\n      arcType,\n      ellipsoid,\n      normalsArray,\n      bottomPositionsArray,\n      topPositionsArray,\n      cartographicsArray\n    );\n  }\n\n  // Last point - either loop or attach a normal "perpendicular" to the wall.\n  var endCartographic = cartographics[cartographicsLength - 1];\n  var preEndCartographic = cartographics[cartographicsLength - 2];\n\n  vertexBottom = getPosition(\n    ellipsoid,\n    endCartographic,\n    minHeight,\n    vertexBottom\n  );\n  vertexTop = getPosition(ellipsoid, endCartographic, maxHeight, vertexTop);\n\n  if (loop) {\n    var postEndCartographic = cartographics[0];\n    previousBottom = getPosition(\n      ellipsoid,\n      preEndCartographic,\n      minHeight,\n      previousBottom\n    );\n    nextBottom = getPosition(\n      ellipsoid,\n      postEndCartographic,\n      minHeight,\n      nextBottom\n    );\n\n    vertexNormal = computeVertexMiterNormal(\n      previousBottom,\n      vertexBottom,\n      vertexTop,\n      nextBottom,\n      vertexNormal\n    );\n  } else {\n    vertexNormal = computeRightNormal(\n      preEndCartographic,\n      endCartographic,\n      maxHeight,\n      ellipsoid,\n      vertexNormal\n    );\n  }\n\n  index = normalsArray.length;\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexNormal, normalsArray, index);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexBottom, bottomPositionsArray, index);\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(vertexTop, topPositionsArray, index);\n  cartographicsArray.push(endCartographic.latitude);\n  cartographicsArray.push(endCartographic.longitude);\n\n  if (loop) {\n    interpolateSegment(\n      endCartographic,\n      startCartographic,\n      minHeight,\n      maxHeight,\n      granularity,\n      arcType,\n      ellipsoid,\n      normalsArray,\n      bottomPositionsArray,\n      topPositionsArray,\n      cartographicsArray\n    );\n    index = normalsArray.length;\n    for (i = 0; i < 3; ++i) {\n      normalsArray[index + i] = normalsArray[i];\n      bottomPositionsArray[index + i] = bottomPositionsArray[i];\n      topPositionsArray[index + i] = topPositionsArray[i];\n    }\n    cartographicsArray.push(startCartographic.latitude);\n    cartographicsArray.push(startCartographic.longitude);\n  }\n\n  return generateGeometryAttributes(\n    loop,\n    projection,\n    bottomPositionsArray,\n    topPositionsArray,\n    normalsArray,\n    cartographicsArray,\n    compute2dAttributes\n  );\n};\n\n// If the end normal angle is too steep compared to the direction of the line segment,\n// "break" the miter by rotating the normal 90 degrees around the "up" direction at the point\n// For ultra precision we would want to project into a plane, but in practice this is sufficient.\nvar lineDirectionScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar matrix3Scratch = new _Matrix3_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .Z();\nvar quaternionScratch = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"] */ .Z();\nfunction breakMiter(endGeometryNormal, startBottom, endBottom, endTop) {\n  var lineDirection = direction(endBottom, startBottom, lineDirectionScratch);\n\n  var dot = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].dot */ .Z.dot(lineDirection, endGeometryNormal);\n  if (dot > MITER_BREAK_SMALL || dot < MITER_BREAK_LARGE) {\n    var vertexUp = direction(endTop, endBottom, vertexUpScratch);\n    var angle =\n      dot < MITER_BREAK_LARGE\n        ? _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO\n        : -_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO;\n    var quaternion = _Quaternion_js__WEBPACK_IMPORTED_MODULE_21__/* ["default"].fromAxisAngle */ .Z.fromAxisAngle(\n      vertexUp,\n      angle,\n      quaternionScratch\n    );\n    var rotationMatrix = _Matrix3_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].fromQuaternion */ .Z.fromQuaternion(quaternion, matrix3Scratch);\n    _Matrix3_js__WEBPACK_IMPORTED_MODULE_19__/* ["default"].multiplyByVector */ .Z.multiplyByVector(\n      rotationMatrix,\n      endGeometryNormal,\n      endGeometryNormal\n    );\n    return true;\n  }\n  return false;\n}\n\nvar endPosCartographicScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\nvar normalStartpointScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar normalEndpointScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nfunction projectNormal(\n  projection,\n  cartographic,\n  normal,\n  projectedPosition,\n  result\n) {\n  var position = _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"].toCartesian */ .Z.toCartesian(\n    cartographic,\n    projection._ellipsoid,\n    normalStartpointScratch\n  );\n  var normalEndpoint = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(position, normal, normalEndpointScratch);\n  var flipNormal = false;\n\n  var ellipsoid = projection._ellipsoid;\n  var normalEndpointCartographic = ellipsoid.cartesianToCartographic(\n    normalEndpoint,\n    endPosCartographicScratch\n  );\n  // If normal crosses the IDL, go the other way and flip the result.\n  // In practice this almost never happens because the cartographic start\n  // and end points of each segment are "nudged" to be on the same side\n  // of the IDL and slightly away from the IDL.\n  if (\n    Math.abs(cartographic.longitude - normalEndpointCartographic.longitude) >\n    _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI_OVER_TWO */ .Z.PI_OVER_TWO\n  ) {\n    flipNormal = true;\n    normalEndpoint = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(\n      position,\n      normal,\n      normalEndpointScratch\n    );\n    normalEndpointCartographic = ellipsoid.cartesianToCartographic(\n      normalEndpoint,\n      endPosCartographicScratch\n    );\n  }\n\n  normalEndpointCartographic.height = 0.0;\n  var normalEndpointProjected = projection.project(\n    normalEndpointCartographic,\n    result\n  );\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(\n    normalEndpointProjected,\n    projectedPosition,\n    result\n  );\n  result.z = 0.0;\n  result = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(result, result);\n  if (flipNormal) {\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].negate */ .Z.negate(result, result);\n  }\n  return result;\n}\n\nvar adjustHeightNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar adjustHeightOffsetScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nfunction adjustHeights(\n  bottom,\n  top,\n  minHeight,\n  maxHeight,\n  adjustHeightBottom,\n  adjustHeightTop\n) {\n  // bottom and top should be at WALL_INITIAL_MIN_HEIGHT and WALL_INITIAL_MAX_HEIGHT, respectively\n  var adjustHeightNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(\n    top,\n    bottom,\n    adjustHeightNormalScratch\n  );\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(adjustHeightNormal, adjustHeightNormal);\n\n  var distanceForBottom = minHeight - WALL_INITIAL_MIN_HEIGHT;\n  var adjustHeightOffset = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    adjustHeightNormal,\n    distanceForBottom,\n    adjustHeightOffsetScratch\n  );\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(bottom, adjustHeightOffset, adjustHeightBottom);\n\n  var distanceForTop = maxHeight - WALL_INITIAL_MAX_HEIGHT;\n  adjustHeightOffset = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n    adjustHeightNormal,\n    distanceForTop,\n    adjustHeightOffsetScratch\n  );\n  _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(top, adjustHeightOffset, adjustHeightTop);\n}\n\nvar nudgeDirectionScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nfunction nudgeXZ(start, end) {\n  var startToXZdistance = _Plane_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].getPointDistance */ .Z.getPointDistance(XZ_PLANE, start);\n  var endToXZdistance = _Plane_js__WEBPACK_IMPORTED_MODULE_20__/* ["default"].getPointDistance */ .Z.getPointDistance(XZ_PLANE, end);\n  var offset = nudgeDirectionScratch;\n  // Larger epsilon than what\'s used in GeometryPipeline, a centimeter in world space\n  if (_Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(startToXZdistance, 0.0, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON2 */ .Z.EPSILON2)) {\n    offset = direction(end, start, offset);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(offset, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON2 */ .Z.EPSILON2, offset);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(start, offset, start);\n  } else if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(endToXZdistance, 0.0, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON2 */ .Z.EPSILON2)\n  ) {\n    offset = direction(start, end, offset);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(offset, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON2 */ .Z.EPSILON2, offset);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(end, offset, end);\n  }\n}\n\n// "Nudge" cartographic coordinates so start and end are on the same side of the IDL.\n// Nudge amounts are tiny, basically just an IDL flip.\n// Only used for 2D/CV.\nfunction nudgeCartographic(start, end) {\n  var absStartLon = Math.abs(start.longitude);\n  var absEndLon = Math.abs(end.longitude);\n  if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(absStartLon, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI */ .Z.PI, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON11 */ .Z.EPSILON11)\n  ) {\n    var endSign = _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].sign */ .Z.sign(end.longitude);\n    start.longitude = endSign * (absStartLon - _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON11 */ .Z.EPSILON11);\n    return 1;\n  } else if (\n    _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(absEndLon, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].PI */ .Z.PI, _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON11 */ .Z.EPSILON11)\n  ) {\n    var startSign = _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].sign */ .Z.sign(start.longitude);\n    end.longitude = startSign * (absEndLon - _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON11 */ .Z.EPSILON11);\n    return 2;\n  }\n  return 0;\n}\n\nvar startCartographicScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\nvar endCartographicScratch = new _Cartographic_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z();\n\nvar segmentStartTopScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentEndTopScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentStartBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentEndBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentStartNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentEndNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nvar getHeightCartographics = [startCartographicScratch, endCartographicScratch];\nvar getHeightRectangleScratch = new _Rectangle_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"] */ .Z();\n\nvar adjustHeightStartTopScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar adjustHeightEndTopScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar adjustHeightStartBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar adjustHeightEndBottomScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nvar segmentStart2DScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentEnd2DScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentStartNormal2DScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar segmentEndNormal2DScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nvar offsetScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar startUpScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar endUpScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar rightScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar startPlaneNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar endPlaneNormalScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar encodeScratch = new _EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\n\nvar encodeScratch2D = new _EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .Z();\nvar forwardOffset2DScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\nvar right2DScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nvar normalNudgeScratch = new _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();\n\nvar scratchBoundingSpheres = [new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(), new _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z()];\n\n// Winding order is reversed so each segment\'s volume is inside-out\nvar REFERENCE_INDICES = [\n  0,\n  2,\n  1,\n  0,\n  3,\n  2, // right\n  0,\n  7,\n  3,\n  0,\n  4,\n  7, // start\n  0,\n  5,\n  4,\n  0,\n  1,\n  5, // bottom\n  5,\n  7,\n  4,\n  5,\n  6,\n  7, // left\n  5,\n  2,\n  6,\n  5,\n  1,\n  2, // end\n  3,\n  6,\n  2,\n  3,\n  7,\n  6, // top\n];\nvar REFERENCE_INDICES_LENGTH = REFERENCE_INDICES.length;\n\n// Decompose the "wall" into a series of shadow volumes.\n// Each shadow volume\'s vertices encode a description of the line it contains,\n// including mitering planes at the end points, a plane along the line itself,\n// and attributes for computing length-wise texture coordinates.\nfunction generateGeometryAttributes(\n  loop,\n  projection,\n  bottomPositionsArray,\n  topPositionsArray,\n  normalsArray,\n  cartographicsArray,\n  compute2dAttributes\n) {\n  var i;\n  var index;\n  var ellipsoid = projection._ellipsoid;\n\n  // Each segment will have 8 vertices\n  var segmentCount = bottomPositionsArray.length / 3 - 1;\n  var vertexCount = segmentCount * 8;\n  var arraySizeVec4 = vertexCount * 4;\n  var indexCount = segmentCount * 36;\n\n  var indices =\n    vertexCount > 65535\n      ? new Uint32Array(indexCount)\n      : new Uint16Array(indexCount);\n  var positionsArray = new Float64Array(vertexCount * 3);\n\n  var startHiAndForwardOffsetX = new Float32Array(arraySizeVec4);\n  var startLoAndForwardOffsetY = new Float32Array(arraySizeVec4);\n  var startNormalAndForwardOffsetZ = new Float32Array(arraySizeVec4);\n  var endNormalAndTextureCoordinateNormalizationX = new Float32Array(\n    arraySizeVec4\n  );\n  var rightNormalAndTextureCoordinateNormalizationY = new Float32Array(\n    arraySizeVec4\n  );\n\n  var startHiLo2D;\n  var offsetAndRight2D;\n  var startEndNormals2D;\n  var texcoordNormalization2D;\n\n  if (compute2dAttributes) {\n    startHiLo2D = new Float32Array(arraySizeVec4);\n    offsetAndRight2D = new Float32Array(arraySizeVec4);\n    startEndNormals2D = new Float32Array(arraySizeVec4);\n    texcoordNormalization2D = new Float32Array(vertexCount * 2);\n  }\n\n  /*** Compute total lengths for texture coordinate normalization ***/\n  // 2D\n  var cartographicsLength = cartographicsArray.length / 2;\n  var length2D = 0.0;\n\n  var startCartographic = startCartographicScratch;\n  startCartographic.height = 0.0;\n  var endCartographic = endCartographicScratch;\n  endCartographic.height = 0.0;\n\n  var segmentStartCartesian = segmentStartTopScratch;\n  var segmentEndCartesian = segmentEndTopScratch;\n\n  if (compute2dAttributes) {\n    index = 0;\n    for (i = 1; i < cartographicsLength; i++) {\n      // Don\'t clone anything from previous segment b/c possible IDL touch\n      startCartographic.latitude = cartographicsArray[index];\n      startCartographic.longitude = cartographicsArray[index + 1];\n      endCartographic.latitude = cartographicsArray[index + 2];\n      endCartographic.longitude = cartographicsArray[index + 3];\n\n      segmentStartCartesian = projection.project(\n        startCartographic,\n        segmentStartCartesian\n      );\n      segmentEndCartesian = projection.project(\n        endCartographic,\n        segmentEndCartesian\n      );\n      length2D += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].distance */ .Z.distance(\n        segmentStartCartesian,\n        segmentEndCartesian\n      );\n      index += 2;\n    }\n  }\n\n  // 3D\n  var positionsLength = topPositionsArray.length / 3;\n  segmentEndCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n    topPositionsArray,\n    0,\n    segmentEndCartesian\n  );\n  var length3D = 0.0;\n\n  index = 3;\n  for (i = 1; i < positionsLength; i++) {\n    segmentStartCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(\n      segmentEndCartesian,\n      segmentStartCartesian\n    );\n    segmentEndCartesian = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n      topPositionsArray,\n      index,\n      segmentEndCartesian\n    );\n    length3D += _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].distance */ .Z.distance(segmentStartCartesian, segmentEndCartesian);\n    index += 3;\n  }\n\n  /*** Generate segments ***/\n  var j;\n  index = 3;\n  var cartographicsIndex = 0;\n  var vec2sWriteIndex = 0;\n  var vec3sWriteIndex = 0;\n  var vec4sWriteIndex = 0;\n  var miterBroken = false;\n\n  var endBottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n    bottomPositionsArray,\n    0,\n    segmentEndBottomScratch\n  );\n  var endTop = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(topPositionsArray, 0, segmentEndTopScratch);\n  var endGeometryNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n    normalsArray,\n    0,\n    segmentEndNormalScratch\n  );\n\n  if (loop) {\n    var preEndBottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n      bottomPositionsArray,\n      bottomPositionsArray.length - 6,\n      segmentStartBottomScratch\n    );\n    if (breakMiter(endGeometryNormal, preEndBottom, endBottom, endTop)) {\n      // Miter broken as if for the last point in the loop, needs to be inverted for first point (clone of endBottom)\n      endGeometryNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].negate */ .Z.negate(\n        endGeometryNormal,\n        endGeometryNormal\n      );\n    }\n  }\n\n  var lengthSoFar3D = 0.0;\n  var lengthSoFar2D = 0.0;\n\n  // For translating bounding volume\n  var sumHeights = 0.0;\n\n  for (i = 0; i < segmentCount; i++) {\n    var startBottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(endBottom, segmentStartBottomScratch);\n    var startTop = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(endTop, segmentStartTopScratch);\n    var startGeometryNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].clone */ .Z.clone(\n      endGeometryNormal,\n      segmentStartNormalScratch\n    );\n\n    if (miterBroken) {\n      startGeometryNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].negate */ .Z.negate(\n        startGeometryNormal,\n        startGeometryNormal\n      );\n    }\n\n    endBottom = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n      bottomPositionsArray,\n      index,\n      segmentEndBottomScratch\n    );\n    endTop = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(topPositionsArray, index, segmentEndTopScratch);\n    endGeometryNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].unpack */ .Z.unpack(\n      normalsArray,\n      index,\n      segmentEndNormalScratch\n    );\n\n    miterBroken = breakMiter(endGeometryNormal, startBottom, endBottom, endTop);\n\n    // 2D - don\'t clone anything from previous segment b/c possible IDL touch\n    startCartographic.latitude = cartographicsArray[cartographicsIndex];\n    startCartographic.longitude = cartographicsArray[cartographicsIndex + 1];\n    endCartographic.latitude = cartographicsArray[cartographicsIndex + 2];\n    endCartographic.longitude = cartographicsArray[cartographicsIndex + 3];\n    var start2D;\n    var end2D;\n    var startGeometryNormal2D;\n    var endGeometryNormal2D;\n\n    if (compute2dAttributes) {\n      var nudgeResult = nudgeCartographic(startCartographic, endCartographic);\n      start2D = projection.project(startCartographic, segmentStart2DScratch);\n      end2D = projection.project(endCartographic, segmentEnd2DScratch);\n      var direction2D = direction(end2D, start2D, forwardOffset2DScratch);\n      direction2D.y = Math.abs(direction2D.y);\n\n      startGeometryNormal2D = segmentStartNormal2DScratch;\n      endGeometryNormal2D = segmentEndNormal2DScratch;\n      if (\n        nudgeResult === 0 ||\n        _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].dot */ .Z.dot(direction2D, _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].UNIT_Y */ .Z.UNIT_Y) > MITER_BREAK_SMALL\n      ) {\n        // No nudge - project the original normal\n        // Or, if the line\'s angle relative to the IDL is very acute,\n        // in which case snapping will produce oddly shaped volumes.\n        startGeometryNormal2D = projectNormal(\n          projection,\n          startCartographic,\n          startGeometryNormal,\n          start2D,\n          segmentStartNormal2DScratch\n        );\n        endGeometryNormal2D = projectNormal(\n          projection,\n          endCartographic,\n          endGeometryNormal,\n          end2D,\n          segmentEndNormal2DScratch\n        );\n      } else if (nudgeResult === 1) {\n        // Start is close to IDL - snap start normal to align with IDL\n        endGeometryNormal2D = projectNormal(\n          projection,\n          endCartographic,\n          endGeometryNormal,\n          end2D,\n          segmentEndNormal2DScratch\n        );\n        startGeometryNormal2D.x = 0.0;\n        // If start longitude is negative and end longitude is less negative, relative right is unit -Y\n        // If start longitude is positive and end longitude is less positive, relative right is unit +Y\n        startGeometryNormal2D.y = _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].sign */ .Z.sign(\n          startCartographic.longitude - Math.abs(endCartographic.longitude)\n        );\n        startGeometryNormal2D.z = 0.0;\n      } else {\n        // End is close to IDL - snap end normal to align with IDL\n        startGeometryNormal2D = projectNormal(\n          projection,\n          startCartographic,\n          startGeometryNormal,\n          start2D,\n          segmentStartNormal2DScratch\n        );\n        endGeometryNormal2D.x = 0.0;\n        // If end longitude is negative and start longitude is less negative, relative right is unit Y\n        // If end longitude is positive and start longitude is less positive, relative right is unit -Y\n        endGeometryNormal2D.y = _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].sign */ .Z.sign(\n          startCartographic.longitude - endCartographic.longitude\n        );\n        endGeometryNormal2D.z = 0.0;\n      }\n    }\n\n    /****************************************\n     * Geometry descriptors of a "line on terrain,"\n     * as opposed to the "shadow volume used to draw\n     * the line on terrain":\n     * - position of start + offset to end\n     * - start, end, and right-facing planes\n     * - encoded texture coordinate offsets\n     ****************************************/\n\n    /* 3D */\n    var segmentLength3D = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].distance */ .Z.distance(startTop, endTop);\n\n    var encodedStart = _EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].fromCartesian */ .Z.fromCartesian(\n      startBottom,\n      encodeScratch\n    );\n    var forwardOffset = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(\n      endBottom,\n      startBottom,\n      offsetScratch\n    );\n    var forward = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(forwardOffset, rightScratch);\n\n    var startUp = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(startTop, startBottom, startUpScratch);\n    startUp = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(startUp, startUp);\n    var rightNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(forward, startUp, rightScratch);\n    rightNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(rightNormal, rightNormal);\n\n    var startPlaneNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(\n      startUp,\n      startGeometryNormal,\n      startPlaneNormalScratch\n    );\n    startPlaneNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(startPlaneNormal, startPlaneNormal);\n\n    var endUp = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(endTop, endBottom, endUpScratch);\n    endUp = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(endUp, endUp);\n    var endPlaneNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].cross */ .Z.cross(\n      endGeometryNormal,\n      endUp,\n      endPlaneNormalScratch\n    );\n    endPlaneNormal = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(endPlaneNormal, endPlaneNormal);\n\n    var texcoordNormalization3DX = segmentLength3D / length3D;\n    var texcoordNormalization3DY = lengthSoFar3D / length3D;\n\n    /* 2D */\n    var segmentLength2D = 0.0;\n    var encodedStart2D;\n    var forwardOffset2D;\n    var right2D;\n    var texcoordNormalization2DX = 0.0;\n    var texcoordNormalization2DY = 0.0;\n    if (compute2dAttributes) {\n      segmentLength2D = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].distance */ .Z.distance(start2D, end2D);\n\n      encodedStart2D = _EncodedCartesian3_js__WEBPACK_IMPORTED_MODULE_13__/* ["default"].fromCartesian */ .Z.fromCartesian(\n        start2D,\n        encodeScratch2D\n      );\n      forwardOffset2D = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].subtract */ .Z.subtract(\n        end2D,\n        start2D,\n        forwardOffset2DScratch\n      );\n\n      // Right direction is just forward direction rotated by -90 degrees around Z\n      // Similarly with plane normals\n      right2D = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].normalize */ .Z.normalize(forwardOffset2D, right2DScratch);\n      var swap = right2D.x;\n      right2D.x = right2D.y;\n      right2D.y = -swap;\n\n      texcoordNormalization2DX = segmentLength2D / length2D;\n      texcoordNormalization2DY = lengthSoFar2D / length2D;\n    }\n    /** Pack **/\n    for (j = 0; j < 8; j++) {\n      var vec4Index = vec4sWriteIndex + j * 4;\n      var vec2Index = vec2sWriteIndex + j * 2;\n      var wIndex = vec4Index + 3;\n\n      // Encode sidedness of vertex relative to right plane in texture coordinate normalization X,\n      // whether vertex is top or bottom of volume in sign/magnitude of normalization Y.\n      var rightPlaneSide = j < 4 ? 1.0 : -1.0;\n      var topBottomSide = j === 2 || j === 3 || j === 6 || j === 7 ? 1.0 : -1.0;\n\n      // 3D\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(encodedStart.high, startHiAndForwardOffsetX, vec4Index);\n      startHiAndForwardOffsetX[wIndex] = forwardOffset.x;\n\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(encodedStart.low, startLoAndForwardOffsetY, vec4Index);\n      startLoAndForwardOffsetY[wIndex] = forwardOffset.y;\n\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(\n        startPlaneNormal,\n        startNormalAndForwardOffsetZ,\n        vec4Index\n      );\n      startNormalAndForwardOffsetZ[wIndex] = forwardOffset.z;\n\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(\n        endPlaneNormal,\n        endNormalAndTextureCoordinateNormalizationX,\n        vec4Index\n      );\n      endNormalAndTextureCoordinateNormalizationX[wIndex] =\n        texcoordNormalization3DX * rightPlaneSide;\n\n      _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(\n        rightNormal,\n        rightNormalAndTextureCoordinateNormalizationY,\n        vec4Index\n      );\n\n      var texcoordNormalization = texcoordNormalization3DY * topBottomSide;\n      if (texcoordNormalization === 0.0 && topBottomSide < 0.0) {\n        texcoordNormalization = 9.0; // some value greater than 1.0\n      }\n      rightNormalAndTextureCoordinateNormalizationY[\n        wIndex\n      ] = texcoordNormalization;\n\n      // 2D\n      if (compute2dAttributes) {\n        startHiLo2D[vec4Index] = encodedStart2D.high.x;\n        startHiLo2D[vec4Index + 1] = encodedStart2D.high.y;\n        startHiLo2D[vec4Index + 2] = encodedStart2D.low.x;\n        startHiLo2D[vec4Index + 3] = encodedStart2D.low.y;\n\n        startEndNormals2D[vec4Index] = -startGeometryNormal2D.y;\n        startEndNormals2D[vec4Index + 1] = startGeometryNormal2D.x;\n        startEndNormals2D[vec4Index + 2] = endGeometryNormal2D.y;\n        startEndNormals2D[vec4Index + 3] = -endGeometryNormal2D.x;\n\n        offsetAndRight2D[vec4Index] = forwardOffset2D.x;\n        offsetAndRight2D[vec4Index + 1] = forwardOffset2D.y;\n        offsetAndRight2D[vec4Index + 2] = right2D.x;\n        offsetAndRight2D[vec4Index + 3] = right2D.y;\n\n        texcoordNormalization2D[vec2Index] =\n          texcoordNormalization2DX * rightPlaneSide;\n\n        texcoordNormalization = texcoordNormalization2DY * topBottomSide;\n        if (texcoordNormalization === 0.0 && topBottomSide < 0.0) {\n          texcoordNormalization = 9.0; // some value greater than 1.0\n        }\n        texcoordNormalization2D[vec2Index + 1] = texcoordNormalization;\n      }\n    }\n\n    // Adjust height of volume in 3D\n    var adjustHeightStartBottom = adjustHeightStartBottomScratch;\n    var adjustHeightEndBottom = adjustHeightEndBottomScratch;\n    var adjustHeightStartTop = adjustHeightStartTopScratch;\n    var adjustHeightEndTop = adjustHeightEndTopScratch;\n\n    var getHeightsRectangle = _Rectangle_js__WEBPACK_IMPORTED_MODULE_22__/* ["default"].fromCartographicArray */ .Z.fromCartographicArray(\n      getHeightCartographics,\n      getHeightRectangleScratch\n    );\n    var minMaxHeights = _ApproximateTerrainHeights_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getMinimumMaximumHeights */ .Z.getMinimumMaximumHeights(\n      getHeightsRectangle,\n      ellipsoid\n    );\n    var minHeight = minMaxHeights.minimumTerrainHeight;\n    var maxHeight = minMaxHeights.maximumTerrainHeight;\n\n    sumHeights += minHeight;\n    sumHeights += maxHeight;\n\n    adjustHeights(\n      startBottom,\n      startTop,\n      minHeight,\n      maxHeight,\n      adjustHeightStartBottom,\n      adjustHeightStartTop\n    );\n    adjustHeights(\n      endBottom,\n      endTop,\n      minHeight,\n      maxHeight,\n      adjustHeightEndBottom,\n      adjustHeightEndTop\n    );\n\n    // Nudge the positions away from the "polyline" a little bit to prevent errors in GeometryPipeline\n    var normalNudge = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      rightNormal,\n      _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON5 */ .Z.EPSILON5,\n      normalNudgeScratch\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(\n      adjustHeightStartBottom,\n      normalNudge,\n      adjustHeightStartBottom\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(adjustHeightEndBottom, normalNudge, adjustHeightEndBottom);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(adjustHeightStartTop, normalNudge, adjustHeightStartTop);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(adjustHeightEndTop, normalNudge, adjustHeightEndTop);\n\n    // If the segment is very close to the XZ plane, nudge the vertices slightly to avoid touching it.\n    nudgeXZ(adjustHeightStartBottom, adjustHeightEndBottom);\n    nudgeXZ(adjustHeightStartTop, adjustHeightEndTop);\n\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(adjustHeightStartBottom, positionsArray, vec3sWriteIndex);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(adjustHeightEndBottom, positionsArray, vec3sWriteIndex + 3);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(adjustHeightEndTop, positionsArray, vec3sWriteIndex + 6);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(adjustHeightStartTop, positionsArray, vec3sWriteIndex + 9);\n\n    normalNudge = _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].multiplyByScalar */ .Z.multiplyByScalar(\n      rightNormal,\n      -2.0 * _Math_js__WEBPACK_IMPORTED_MODULE_18__/* ["default"].EPSILON5 */ .Z.EPSILON5,\n      normalNudgeScratch\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(\n      adjustHeightStartBottom,\n      normalNudge,\n      adjustHeightStartBottom\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(adjustHeightEndBottom, normalNudge, adjustHeightEndBottom);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(adjustHeightStartTop, normalNudge, adjustHeightStartTop);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].add */ .Z.add(adjustHeightEndTop, normalNudge, adjustHeightEndTop);\n\n    nudgeXZ(adjustHeightStartBottom, adjustHeightEndBottom);\n    nudgeXZ(adjustHeightStartTop, adjustHeightEndTop);\n\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(\n      adjustHeightStartBottom,\n      positionsArray,\n      vec3sWriteIndex + 12\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(\n      adjustHeightEndBottom,\n      positionsArray,\n      vec3sWriteIndex + 15\n    );\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(adjustHeightEndTop, positionsArray, vec3sWriteIndex + 18);\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].pack */ .Z.pack(adjustHeightStartTop, positionsArray, vec3sWriteIndex + 21);\n\n    cartographicsIndex += 2;\n    index += 3;\n\n    vec2sWriteIndex += 16;\n    vec3sWriteIndex += 24;\n    vec4sWriteIndex += 32;\n\n    lengthSoFar3D += segmentLength3D;\n    lengthSoFar2D += segmentLength2D;\n  }\n\n  index = 0;\n  var indexOffset = 0;\n  for (i = 0; i < segmentCount; i++) {\n    for (j = 0; j < REFERENCE_INDICES_LENGTH; j++) {\n      indices[index + j] = REFERENCE_INDICES[j] + indexOffset;\n    }\n    indexOffset += 8;\n    index += REFERENCE_INDICES_LENGTH;\n  }\n\n  var boundingSpheres = scratchBoundingSpheres;\n  _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromVertices */ .Z.fromVertices(\n    bottomPositionsArray,\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].ZERO */ .Z.ZERO,\n    3,\n    boundingSpheres[0]\n  );\n  _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromVertices */ .Z.fromVertices(\n    topPositionsArray,\n    _Cartesian3_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].ZERO */ .Z.ZERO,\n    3,\n    boundingSpheres[1]\n  );\n  var boundingSphere = _BoundingSphere_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"].fromBoundingSpheres */ .Z.fromBoundingSpheres(boundingSpheres);\n\n  // Adjust bounding sphere height and radius to cover more of the volume\n  boundingSphere.radius += sumHeights / (segmentCount * 2.0);\n\n  var attributes = {\n    position: new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].DOUBLE */ .Z.DOUBLE,\n      componentsPerAttribute: 3,\n      normalize: false,\n      values: positionsArray,\n    }),\n    startHiAndForwardOffsetX: getVec4GeometryAttribute(\n      startHiAndForwardOffsetX\n    ),\n    startLoAndForwardOffsetY: getVec4GeometryAttribute(\n      startLoAndForwardOffsetY\n    ),\n    startNormalAndForwardOffsetZ: getVec4GeometryAttribute(\n      startNormalAndForwardOffsetZ\n    ),\n    endNormalAndTextureCoordinateNormalizationX: getVec4GeometryAttribute(\n      endNormalAndTextureCoordinateNormalizationX\n    ),\n    rightNormalAndTextureCoordinateNormalizationY: getVec4GeometryAttribute(\n      rightNormalAndTextureCoordinateNormalizationY\n    ),\n  };\n\n  if (compute2dAttributes) {\n    attributes.startHiLo2D = getVec4GeometryAttribute(startHiLo2D);\n    attributes.offsetAndRight2D = getVec4GeometryAttribute(offsetAndRight2D);\n    attributes.startEndNormals2D = getVec4GeometryAttribute(startEndNormals2D);\n    attributes.texcoordNormalization2D = new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z({\n      componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n      componentsPerAttribute: 2,\n      normalize: false,\n      values: texcoordNormalization2D,\n    });\n  }\n\n  return new _Geometry_js__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .Z({\n    attributes: attributes,\n    indices: indices,\n    boundingSphere: boundingSphere,\n  });\n}\n\nfunction getVec4GeometryAttribute(typedArray) {\n  return new _GeometryAttribute_js__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .Z({\n    componentDatatype: _ComponentDatatype_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"].FLOAT */ .Z.FLOAT,\n    componentsPerAttribute: 4,\n    normalize: false,\n    values: typedArray,\n  });\n}\n\n/**\n * Approximates an ellipsoid-tangent vector in 2D by projecting the end point into 2D.\n * Exposed for testing.\n *\n * @param {MapProjection} projection Map Projection for projecting coordinates to 2D.\n * @param {Cartographic} cartographic The cartographic origin point of the normal.\n *   Used to check if the normal crosses the IDL during projection.\n * @param {Cartesian3} normal The normal in 3D.\n * @param {Cartesian3} projectedPosition The projected origin point of the normal in 2D.\n * @param {Cartesian3} result Result parameter on which to store the projected normal.\n * @private\n */\nGroundPolylineGeometry._projectNormal = projectNormal;\n/* harmony default export */ __webpack_exports__["Z"] = (GroundPolylineGeometry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46031\n')},99819:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82982);\n\n\n\n/**\n * Defines a heading angle, pitch angle, and range in a local frame.\n * Heading is the rotation from the local north direction where a positive angle is increasing eastward.\n * Pitch is the rotation from the local xy-plane. Positive pitch angles are above the plane. Negative pitch\n * angles are below the plane. Range is the distance from the center of the frame.\n * @alias HeadingPitchRange\n * @constructor\n *\n * @param {Number} [heading=0.0] The heading angle in radians.\n * @param {Number} [pitch=0.0] The pitch angle in radians.\n * @param {Number} [range=0.0] The distance from the center in meters.\n */\nfunction HeadingPitchRange(heading, pitch, range) {\n  /**\n   * Heading is the rotation from the local north direction where a positive angle is increasing eastward.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.heading = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(heading, 0.0);\n\n  /**\n   * Pitch is the rotation from the local xy-plane. Positive pitch angles\n   * are above the plane. Negative pitch angles are below the plane.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.pitch = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(pitch, 0.0);\n\n  /**\n   * Range is the distance from the center of the local frame.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.range = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(range, 0.0);\n}\n\n/**\n * Duplicates a HeadingPitchRange instance.\n *\n * @param {HeadingPitchRange} hpr The HeadingPitchRange to duplicate.\n * @param {HeadingPitchRange} [result] The object onto which to store the result.\n * @returns {HeadingPitchRange} The modified result parameter or a new HeadingPitchRange instance if one was not provided. (Returns undefined if hpr is undefined)\n */\nHeadingPitchRange.clone = function (hpr, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(hpr)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(result)) {\n    result = new HeadingPitchRange();\n  }\n\n  result.heading = hpr.heading;\n  result.pitch = hpr.pitch;\n  result.range = hpr.range;\n  return result;\n};\n/* harmony default export */ __webpack_exports__["Z"] = (HeadingPitchRange);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk4MTkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBNkM7QUFDVjs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxpQkFBaUIscUVBQVk7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsZUFBZSxxRUFBWTs7QUFFM0I7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsZUFBZSxxRUFBWTtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLG1CQUFtQjtBQUM5QixhQUFhLG1CQUFtQjtBQUNoQztBQUNBO0FBQ0EsT0FBTyxnRUFBTztBQUNkO0FBQ0E7QUFDQSxPQUFPLGdFQUFPO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQWUsaUJBQWlCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL2Nlc2l1bS9Tb3VyY2UvQ29yZS9IZWFkaW5nUGl0Y2hSYW5nZS5qcz9iNjgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4vZGVmYXVsdFZhbHVlLmpzXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi9kZWZpbmVkLmpzXCI7XG5cbi8qKlxuICogRGVmaW5lcyBhIGhlYWRpbmcgYW5nbGUsIHBpdGNoIGFuZ2xlLCBhbmQgcmFuZ2UgaW4gYSBsb2NhbCBmcmFtZS5cbiAqIEhlYWRpbmcgaXMgdGhlIHJvdGF0aW9uIGZyb20gdGhlIGxvY2FsIG5vcnRoIGRpcmVjdGlvbiB3aGVyZSBhIHBvc2l0aXZlIGFuZ2xlIGlzIGluY3JlYXNpbmcgZWFzdHdhcmQuXG4gKiBQaXRjaCBpcyB0aGUgcm90YXRpb24gZnJvbSB0aGUgbG9jYWwgeHktcGxhbmUuIFBvc2l0aXZlIHBpdGNoIGFuZ2xlcyBhcmUgYWJvdmUgdGhlIHBsYW5lLiBOZWdhdGl2ZSBwaXRjaFxuICogYW5nbGVzIGFyZSBiZWxvdyB0aGUgcGxhbmUuIFJhbmdlIGlzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGZyYW1lLlxuICogQGFsaWFzIEhlYWRpbmdQaXRjaFJhbmdlXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gW2hlYWRpbmc9MC4wXSBUaGUgaGVhZGluZyBhbmdsZSBpbiByYWRpYW5zLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtwaXRjaD0wLjBdIFRoZSBwaXRjaCBhbmdsZSBpbiByYWRpYW5zLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtyYW5nZT0wLjBdIFRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgaW4gbWV0ZXJzLlxuICovXG5mdW5jdGlvbiBIZWFkaW5nUGl0Y2hSYW5nZShoZWFkaW5nLCBwaXRjaCwgcmFuZ2UpIHtcbiAgLyoqXG4gICAqIEhlYWRpbmcgaXMgdGhlIHJvdGF0aW9uIGZyb20gdGhlIGxvY2FsIG5vcnRoIGRpcmVjdGlvbiB3aGVyZSBhIHBvc2l0aXZlIGFuZ2xlIGlzIGluY3JlYXNpbmcgZWFzdHdhcmQuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0IDAuMFxuICAgKi9cbiAgdGhpcy5oZWFkaW5nID0gZGVmYXVsdFZhbHVlKGhlYWRpbmcsIDAuMCk7XG5cbiAgLyoqXG4gICAqIFBpdGNoIGlzIHRoZSByb3RhdGlvbiBmcm9tIHRoZSBsb2NhbCB4eS1wbGFuZS4gUG9zaXRpdmUgcGl0Y2ggYW5nbGVzXG4gICAqIGFyZSBhYm92ZSB0aGUgcGxhbmUuIE5lZ2F0aXZlIHBpdGNoIGFuZ2xlcyBhcmUgYmVsb3cgdGhlIHBsYW5lLlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjBcbiAgICovXG4gIHRoaXMucGl0Y2ggPSBkZWZhdWx0VmFsdWUocGl0Y2gsIDAuMCk7XG5cbiAgLyoqXG4gICAqIFJhbmdlIGlzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGxvY2FsIGZyYW1lLlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjBcbiAgICovXG4gIHRoaXMucmFuZ2UgPSBkZWZhdWx0VmFsdWUocmFuZ2UsIDAuMCk7XG59XG5cbi8qKlxuICogRHVwbGljYXRlcyBhIEhlYWRpbmdQaXRjaFJhbmdlIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7SGVhZGluZ1BpdGNoUmFuZ2V9IGhwciBUaGUgSGVhZGluZ1BpdGNoUmFuZ2UgdG8gZHVwbGljYXRlLlxuICogQHBhcmFtIHtIZWFkaW5nUGl0Y2hSYW5nZX0gW3Jlc3VsdF0gVGhlIG9iamVjdCBvbnRvIHdoaWNoIHRvIHN0b3JlIHRoZSByZXN1bHQuXG4gKiBAcmV0dXJucyB7SGVhZGluZ1BpdGNoUmFuZ2V9IFRoZSBtb2RpZmllZCByZXN1bHQgcGFyYW1ldGVyIG9yIGEgbmV3IEhlYWRpbmdQaXRjaFJhbmdlIGluc3RhbmNlIGlmIG9uZSB3YXMgbm90IHByb3ZpZGVkLiAoUmV0dXJucyB1bmRlZmluZWQgaWYgaHByIGlzIHVuZGVmaW5lZClcbiAqL1xuSGVhZGluZ1BpdGNoUmFuZ2UuY2xvbmUgPSBmdW5jdGlvbiAoaHByLCByZXN1bHQpIHtcbiAgaWYgKCFkZWZpbmVkKGhwcikpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgcmVzdWx0ID0gbmV3IEhlYWRpbmdQaXRjaFJhbmdlKCk7XG4gIH1cblxuICByZXN1bHQuaGVhZGluZyA9IGhwci5oZWFkaW5nO1xuICByZXN1bHQucGl0Y2ggPSBocHIucGl0Y2g7XG4gIHJlc3VsdC5yYW5nZSA9IGhwci5yYW5nZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBIZWFkaW5nUGl0Y2hSYW5nZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///99819\n')},57674:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(82982);\n/* harmony import */ var _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12572);\n/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99417);\n\n\n\n\n\n/**\n * A rotation expressed as a heading, pitch, and roll. Heading is the rotation about the\n * negative z axis. Pitch is the rotation about the negative y axis. Roll is the rotation about\n * the positive x axis.\n * @alias HeadingPitchRoll\n * @constructor\n *\n * @param {Number} [heading=0.0] The heading component in radians.\n * @param {Number} [pitch=0.0] The pitch component in radians.\n * @param {Number} [roll=0.0] The roll component in radians.\n */\nfunction HeadingPitchRoll(heading, pitch, roll) {\n  /**\n   * Gets or sets the heading.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.heading = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(heading, 0.0);\n  /**\n   * Gets or sets the pitch.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.pitch = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(pitch, 0.0);\n  /**\n   * Gets or sets the roll.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.roll = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(roll, 0.0);\n}\n\n/**\n * Computes the heading, pitch and roll from a quaternion (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\n *\n * @param {Quaternion} quaternion The quaternion from which to retrieve heading, pitch, and roll, all expressed in radians.\n * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\n */\nHeadingPitchRoll.fromQuaternion = function (quaternion, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(quaternion)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("quaternion is required");\n  }\n  //>>includeEnd(\'debug\');\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(result)) {\n    result = new HeadingPitchRoll();\n  }\n  var test = 2 * (quaternion.w * quaternion.y - quaternion.z * quaternion.x);\n  var denominatorRoll =\n    1 - 2 * (quaternion.x * quaternion.x + quaternion.y * quaternion.y);\n  var numeratorRoll =\n    2 * (quaternion.w * quaternion.x + quaternion.y * quaternion.z);\n  var denominatorHeading =\n    1 - 2 * (quaternion.y * quaternion.y + quaternion.z * quaternion.z);\n  var numeratorHeading =\n    2 * (quaternion.w * quaternion.z + quaternion.x * quaternion.y);\n  result.heading = -Math.atan2(numeratorHeading, denominatorHeading);\n  result.roll = Math.atan2(numeratorRoll, denominatorRoll);\n  result.pitch = -_Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].asinClamped */ .Z.asinClamped(test);\n  return result;\n};\n\n/**\n * Returns a new HeadingPitchRoll instance from angles given in degrees.\n *\n * @param {Number} heading the heading in degrees\n * @param {Number} pitch the pitch in degrees\n * @param {Number} roll the heading in degrees\n * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\n * @returns {HeadingPitchRoll} A new HeadingPitchRoll instance\n */\nHeadingPitchRoll.fromDegrees = function (heading, pitch, roll, result) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(heading)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("heading is required");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(pitch)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("pitch is required");\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(roll)) {\n    throw new _DeveloperError_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z("roll is required");\n  }\n  //>>includeEnd(\'debug\');\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(result)) {\n    result = new HeadingPitchRoll();\n  }\n  result.heading = heading * _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE;\n  result.pitch = pitch * _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE;\n  result.roll = roll * _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].RADIANS_PER_DEGREE */ .Z.RADIANS_PER_DEGREE;\n  return result;\n};\n\n/**\n * Duplicates a HeadingPitchRoll instance.\n *\n * @param {HeadingPitchRoll} headingPitchRoll The HeadingPitchRoll to duplicate.\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided. (Returns undefined if headingPitchRoll is undefined)\n */\nHeadingPitchRoll.clone = function (headingPitchRoll, result) {\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(headingPitchRoll)) {\n    return undefined;\n  }\n  if (!(0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(result)) {\n    return new HeadingPitchRoll(\n      headingPitchRoll.heading,\n      headingPitchRoll.pitch,\n      headingPitchRoll.roll\n    );\n  }\n  result.heading = headingPitchRoll.heading;\n  result.pitch = headingPitchRoll.pitch;\n  result.roll = headingPitchRoll.roll;\n  return result;\n};\n\n/**\n * Compares the provided HeadingPitchRolls componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\n * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nHeadingPitchRoll.equals = function (left, right) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(right) &&\n      left.heading === right.heading &&\n      left.pitch === right.pitch &&\n      left.roll === right.roll)\n  );\n};\n\n/**\n * Compares the provided HeadingPitchRolls componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\n * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nHeadingPitchRoll.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    ((0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(left) &&\n      (0,_defined_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(right) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.heading,\n        right.heading,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.pitch,\n        right.pitch,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      _Math_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].equalsEpsilon */ .Z.equalsEpsilon(\n        left.roll,\n        right.roll,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * Duplicates this HeadingPitchRoll instance.\n *\n * @param {HeadingPitchRoll} [result] The object onto which to store the result.\n * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\n */\nHeadingPitchRoll.prototype.clone = function (result) {\n  return HeadingPitchRoll.clone(this, result);\n};\n\n/**\n * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nHeadingPitchRoll.prototype.equals = function (right) {\n  return HeadingPitchRoll.equals(this, right);\n};\n\n/**\n * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nHeadingPitchRoll.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return HeadingPitchRoll.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this HeadingPitchRoll in the format \'(heading, pitch, roll)\' in radians.\n *\n * @returns {String} A string representing the provided HeadingPitchRoll in the format \'(heading, pitch, roll)\'.\n */\nHeadingPitchRoll.prototype.toString = function () {\n  return "(" + this.heading + ", " + this.pitch + ", " + this.roll + ")";\n};\n/* harmony default export */ __webpack_exports__["Z"] = (HeadingPitchRoll);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57674\n')},81598:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66553);\n/* harmony import */ var _defaultValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62200);\n/* harmony import */ var _defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82982);\n\n\n\n\n/**\n * Array implementation of a heap.\n *\n * @alias Heap\n * @constructor\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {Heap.ComparatorCallback} options.comparator The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nfunction Heap(options) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.object */ .Z.typeOf.object("options", options);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("options.comparator", options.comparator);\n  //>>includeEnd(\'debug\');\n\n  this._comparator = options.comparator;\n  this._array = [];\n  this._length = 0;\n  this._maximumLength = undefined;\n}\n\nObject.defineProperties(Heap.prototype, {\n  /**\n   * Gets the length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  internalArray: {\n    get: function () {\n      return this._array;\n    },\n  },\n\n  /**\n   * Gets and sets the maximum length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Number}\n   */\n  maximumLength: {\n    get: function () {\n      return this._maximumLength;\n    },\n    set: function (value) {\n      //>>includeStart(\'debug\', pragmas.debug);\n      _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.greaterThanOrEquals */ .Z.typeOf.number.greaterThanOrEquals("maximumLength", value, 0);\n      //>>includeEnd(\'debug\');\n      var originalLength = this._length;\n      if (value < originalLength) {\n        var array = this._array;\n        // Remove trailing references\n        for (var i = value; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n        this._length = value;\n        array.length = value;\n      }\n      this._maximumLength = value;\n    },\n  },\n\n  /**\n   * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Heap.ComparatorCallback}\n   */\n  comparator: {\n    get: function () {\n      return this._comparator;\n    },\n  },\n});\n\nfunction swap(array, a, b) {\n  var temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}\n\n/**\n * Resizes the internal array of the heap.\n *\n * @param {Number} [length] The length to resize internal array to. Defaults to the current length of the heap.\n */\nHeap.prototype.reserve = function (length) {\n  length = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(length, this._length);\n  this._array.length = length;\n};\n\n/**\n * Update the heap so that index and all descendants satisfy the heap property.\n *\n * @param {Number} [index=0] The starting index to heapify from.\n */\nHeap.prototype.heapify = function (index) {\n  index = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(index, 0);\n  var length = this._length;\n  var comparator = this._comparator;\n  var array = this._array;\n  var candidate = -1;\n  var inserting = true;\n\n  while (inserting) {\n    var right = 2 * (index + 1);\n    var left = right - 1;\n\n    if (left < length && comparator(array[left], array[index]) < 0) {\n      candidate = left;\n    } else {\n      candidate = index;\n    }\n\n    if (right < length && comparator(array[right], array[candidate]) < 0) {\n      candidate = right;\n    }\n    if (candidate !== index) {\n      swap(array, candidate, index);\n      index = candidate;\n    } else {\n      inserting = false;\n    }\n  }\n};\n\n/**\n * Resort the heap.\n */\nHeap.prototype.resort = function () {\n  var length = this._length;\n  for (var i = Math.ceil(length / 2); i >= 0; --i) {\n    this.heapify(i);\n  }\n};\n\n/**\n * Insert an element into the heap. If the length would grow greater than maximumLength\n * of the heap, extra elements are removed.\n *\n * @param {*} element The element to insert\n *\n * @return {*} The element that was removed from the heap if the heap is at full capacity.\n */\nHeap.prototype.insert = function (element) {\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].defined */ .Z.defined("element", element);\n  //>>includeEnd(\'debug\');\n\n  var array = this._array;\n  var comparator = this._comparator;\n  var maximumLength = this._maximumLength;\n\n  var index = this._length++;\n  if (index < array.length) {\n    array[index] = element;\n  } else {\n    array.push(element);\n  }\n\n  while (index !== 0) {\n    var parent = Math.floor((index - 1) / 2);\n    if (comparator(array[index], array[parent]) < 0) {\n      swap(array, index, parent);\n      index = parent;\n    } else {\n      break;\n    }\n  }\n\n  var removedElement;\n\n  if ((0,_defined_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(maximumLength) && this._length > maximumLength) {\n    removedElement = array[maximumLength];\n    this._length = maximumLength;\n  }\n\n  return removedElement;\n};\n\n/**\n * Remove the element specified by index from the heap and return it.\n *\n * @param {Number} [index=0] The index to remove.\n * @returns {*} The specified element of the heap.\n */\nHeap.prototype.pop = function (index) {\n  index = (0,_defaultValue_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(index, 0);\n  if (this._length === 0) {\n    return undefined;\n  }\n  //>>includeStart(\'debug\', pragmas.debug);\n  _Check_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].typeOf.number.lessThan */ .Z.typeOf.number.lessThan("index", index, this._length);\n  //>>includeEnd(\'debug\');\n\n  var array = this._array;\n  var root = array[index];\n  swap(array, index, --this._length);\n  this.heapify(index);\n  array[this._length] = undefined; // Remove trailing reference\n  return root;\n};\n\n/**\n * The comparator to use for the heap.\n * @callback Heap.ComparatorCallback\n * @param {*} a An element in the heap.\n * @param {*} b An element in the heap.\n * @returns {Number} If the result of the comparison is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\n/* harmony default export */ __webpack_exports__["Z"] = (Heap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///81598\n')}}]);