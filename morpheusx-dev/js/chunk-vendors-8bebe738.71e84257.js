"use strict";(self["webpackChunkvue3_webpack5"]=self["webpackChunkvue3_webpack5"]||[]).push([[2546],{24328:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ Composite; }\n});\n\n// EXTERNAL MODULE: ./node_modules/ol/Disposable.js\nvar Disposable = __webpack_require__(55431);\n// EXTERNAL MODULE: ./node_modules/ol/functions.js\nvar functions = __webpack_require__(36885);\n// EXTERNAL MODULE: ./node_modules/ol/util.js\nvar util = __webpack_require__(74187);\n// EXTERNAL MODULE: ./node_modules/ol/transform.js\nvar transform = __webpack_require__(6101);\n// EXTERNAL MODULE: ./node_modules/ol/extent.js\nvar extent = __webpack_require__(28641);\n// EXTERNAL MODULE: ./node_modules/ol/style/IconImageCache.js\nvar IconImageCache = __webpack_require__(92710);\n// EXTERNAL MODULE: ./node_modules/ol/layer/Layer.js\nvar Layer = __webpack_require__(1295);\n// EXTERNAL MODULE: ./node_modules/ol/coordinate.js\nvar ol_coordinate = __webpack_require__(91900);\n;// CONCATENATED MODULE: ./node_modules/ol/renderer/Map.js\n/**\n * @module ol/renderer/Map\n */\n\n\n\n\n\n\n\n\n\n/**\n * @typedef HitMatch\n * @property {import("../Feature.js").FeatureLike} feature Feature.\n * @property {import("../layer/Layer.js").default} layer Layer.\n * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.\n * @property {number} distanceSq Squared distance.\n * @property {import("./vector.js").FeatureCallback<T>} callback Callback.\n * @template T\n */\n\n/**\n * @abstract\n */\nclass MapRenderer extends Disposable/* default */.Z {\n  /**\n   * @param {import("../Map.js").default} map Map.\n   */\n  constructor(map) {\n    super();\n\n    /**\n     * @private\n     * @type {import("../Map.js").default}\n     */\n    this.map_ = map;\n  }\n\n  /**\n   * @abstract\n   * @param {import("../render/EventType.js").default} type Event type.\n   * @param {import("../Map.js").FrameState} frameState Frame state.\n   */\n  dispatchRenderEvent(type, frameState) {\n    (0,util/* abstract */.O3)();\n  }\n\n  /**\n   * @param {import("../Map.js").FrameState} frameState FrameState.\n   * @protected\n   */\n  calculateMatrices2D(frameState) {\n    const viewState = frameState.viewState;\n    const coordinateToPixelTransform = frameState.coordinateToPixelTransform;\n    const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\n\n    (0,transform/* compose */.qC)(\n      coordinateToPixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / viewState.resolution,\n      -1 / viewState.resolution,\n      -viewState.rotation,\n      -viewState.center[0],\n      -viewState.center[1]\n    );\n\n    (0,transform/* makeInverse */.nb)(pixelToCoordinateTransform, coordinateToPixelTransform);\n  }\n\n  /**\n   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.\n   * @param {import("../Map.js").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    checkWrapped,\n    callback,\n    thisArg,\n    layerFilter,\n    thisArg2\n  ) {\n    let result;\n    const viewState = frameState.viewState;\n\n    /**\n     * @param {boolean} managed Managed layer.\n     * @param {import("../Feature.js").FeatureLike} feature Feature.\n     * @param {import("../layer/Layer.js").default} layer Layer.\n     * @param {import("../geom/Geometry.js").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\n      return callback.call(thisArg, feature, managed ? layer : null, geometry);\n    }\n\n    const projection = viewState.projection;\n\n    const translatedCoordinate = (0,ol_coordinate/* wrapX */.Cf)(coordinate.slice(), projection);\n    const offsets = [[0, 0]];\n    if (projection.canWrapX() && checkWrapped) {\n      const projectionExtent = projection.getExtent();\n      const worldWidth = (0,extent/* getWidth */.dz)(projectionExtent);\n      offsets.push([-worldWidth, 0], [worldWidth, 0]);\n    }\n\n    const layerStates = frameState.layerStatesArray;\n    const numLayers = layerStates.length;\n\n    const matches = /** @type {Array<HitMatch<T>>} */ ([]);\n    const tmpCoord = [];\n    for (let i = 0; i < offsets.length; i++) {\n      for (let j = numLayers - 1; j >= 0; --j) {\n        const layerState = layerStates[j];\n        const layer = layerState.layer;\n        if (\n          layer.hasRenderer() &&\n          (0,Layer/* inView */.j)(layerState, viewState) &&\n          layerFilter.call(thisArg2, layer)\n        ) {\n          const layerRenderer = layer.getRenderer();\n          const source = layer.getSource();\n          if (layerRenderer && source) {\n            const coordinates = source.getWrapX()\n              ? translatedCoordinate\n              : coordinate;\n            const callback = forEachFeatureAtCoordinate.bind(\n              null,\n              layerState.managed\n            );\n            tmpCoord[0] = coordinates[0] + offsets[i][0];\n            tmpCoord[1] = coordinates[1] + offsets[i][1];\n            result = layerRenderer.forEachFeatureAtCoordinate(\n              tmpCoord,\n              frameState,\n              hitTolerance,\n              callback,\n              matches\n            );\n          }\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    if (matches.length === 0) {\n      return undefined;\n    }\n    const order = 1 / matches.length;\n    matches.forEach((m, i) => (m.distanceSq += i * order));\n    matches.sort((a, b) => a.distanceSq - b.distanceSq);\n    matches.some((m) => {\n      return (result = m.callback(m.feature, m.layer, m.geometry));\n    });\n    return result;\n  }\n\n  /**\n   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.\n   * @param {import("../Map.js").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\n   * @return {boolean} Is there a feature at the given coordinate?\n   * @template U\n   */\n  hasFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    checkWrapped,\n    layerFilter,\n    thisArg\n  ) {\n    const hasFeature = this.forEachFeatureAtCoordinate(\n      coordinate,\n      frameState,\n      hitTolerance,\n      checkWrapped,\n      functions/* TRUE */.uX,\n      this,\n      layerFilter,\n      thisArg\n    );\n\n    return hasFeature !== undefined;\n  }\n\n  /**\n   * @return {import("../Map.js").default} Map.\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Render.\n   * @abstract\n   * @param {?import("../Map.js").FrameState} frameState Frame state.\n   */\n  renderFrame(frameState) {\n    (0,util/* abstract */.O3)();\n  }\n\n  /**\n   * @param {import("../Map.js").FrameState} frameState Frame state.\n   * @protected\n   */\n  scheduleExpireIconCache(frameState) {\n    if (IconImageCache/* shared.canExpireCache */.c.canExpireCache()) {\n      frameState.postRenderFunctions.push(expireIconCache);\n    }\n  }\n}\n\n/**\n * @param {import("../Map.js").default} map Map.\n * @param {import("../Map.js").FrameState} frameState Frame state.\n */\nfunction expireIconCache(map, frameState) {\n  IconImageCache/* shared.expire */.c.expire();\n}\n\n/* harmony default export */ var Map = (MapRenderer);\n\n// EXTERNAL MODULE: ./node_modules/ol/ObjectEventType.js\nvar ObjectEventType = __webpack_require__(35990);\n// EXTERNAL MODULE: ./node_modules/ol/render/Event.js\nvar Event = __webpack_require__(57380);\n// EXTERNAL MODULE: ./node_modules/ol/render/EventType.js\nvar EventType = __webpack_require__(98771);\n// EXTERNAL MODULE: ./node_modules/ol/css.js\nvar css = __webpack_require__(10245);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas.js\nvar canvas = __webpack_require__(50147);\n// EXTERNAL MODULE: ./node_modules/ol/events.js\nvar events = __webpack_require__(65818);\n// EXTERNAL MODULE: ./node_modules/ol/dom.js\nvar dom = __webpack_require__(68326);\n;// CONCATENATED MODULE: ./node_modules/ol/renderer/Composite.js\n/**\n * @module ol/renderer/Composite\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Canvas map renderer.\n * @api\n */\nclass CompositeMapRenderer extends Map {\n  /**\n   * @param {import("../Map.js").default} map Map.\n   */\n  constructor(map) {\n    super(map);\n\n    /**\n     * @type {import("../events.js").EventsKey}\n     */\n    this.fontChangeListenerKey_ = (0,events/* listen */.oL)(\n      canvas/* checkedFonts */.sG,\n      ObjectEventType/* default.PROPERTYCHANGE */.Z.PROPERTYCHANGE,\n      map.redrawText.bind(map)\n    );\n\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this.element_ = document.createElement(\'div\');\n    const style = this.element_.style;\n    style.position = \'absolute\';\n    style.width = \'100%\';\n    style.height = \'100%\';\n    style.zIndex = \'0\';\n\n    this.element_.className = css/* CLASS_UNSELECTABLE */.XV + \' ol-layers\';\n\n    const container = map.getViewport();\n    container.insertBefore(this.element_, container.firstChild || null);\n\n    /**\n     * @private\n     * @type {Array<HTMLElement>}\n     */\n    this.children_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * @param {import("../render/EventType.js").default} type Event type.\n   * @param {import("../Map.js").FrameState} frameState Frame state.\n   */\n  dispatchRenderEvent(type, frameState) {\n    const map = this.getMap();\n    if (map.hasListener(type)) {\n      const event = new Event/* default */.Z(type, undefined, frameState);\n      map.dispatchEvent(event);\n    }\n  }\n\n  disposeInternal() {\n    (0,events/* unlistenByKey */.bN)(this.fontChangeListenerKey_);\n    this.element_.parentNode.removeChild(this.element_);\n    super.disposeInternal();\n  }\n\n  /**\n   * Render.\n   * @param {?import("../Map.js").FrameState} frameState Frame state.\n   */\n  renderFrame(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element_.style.display = \'none\';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    this.calculateMatrices2D(frameState);\n    this.dispatchRenderEvent(EventType/* default.PRECOMPOSE */.Z.PRECOMPOSE, frameState);\n\n    const layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {\n      return a.zIndex - b.zIndex;\n    });\n    const viewState = frameState.viewState;\n\n    this.children_.length = 0;\n    /**\n     * @type {Array<import("../layer/BaseVector.js").default>}\n     */\n    const declutterLayers = [];\n    let previousElement = null;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      frameState.layerIndex = i;\n\n      const layer = layerState.layer;\n      const sourceState = layer.getSourceState();\n      if (\n        !(0,Layer/* inView */.j)(layerState, viewState) ||\n        (sourceState != \'ready\' && sourceState != \'undefined\')\n      ) {\n        layer.unrender();\n        continue;\n      }\n\n      const element = layer.render(frameState, previousElement);\n      if (!element) {\n        continue;\n      }\n      if (element !== previousElement) {\n        this.children_.push(element);\n        previousElement = element;\n      }\n      if (\'getDeclutter\' in layer) {\n        declutterLayers.push(\n          /** @type {import("../layer/BaseVector.js").default} */ (layer)\n        );\n      }\n    }\n    for (let i = declutterLayers.length - 1; i >= 0; --i) {\n      declutterLayers[i].renderDeclutter(frameState);\n    }\n\n    (0,dom/* replaceChildren */.hF)(this.element_, this.children_);\n\n    this.dispatchRenderEvent(EventType/* default.POSTCOMPOSE */.Z.POSTCOMPOSE, frameState);\n\n    if (!this.renderedVisible_) {\n      this.element_.style.display = \'\';\n      this.renderedVisible_ = true;\n    }\n\n    this.scheduleExpireIconCache(frameState);\n  }\n}\n\n/* harmony default export */ var Composite = (CompositeMapRenderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24328\n')},78490:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "r": function() { return /* binding */ canvasPool; },\n  "Z": function() { return /* binding */ canvas_Layer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/ol/events/EventType.js\nvar EventType = __webpack_require__(85487);\n// EXTERNAL MODULE: ./node_modules/ol/ImageState.js\nvar ImageState = __webpack_require__(70553);\n// EXTERNAL MODULE: ./node_modules/ol/Observable.js\nvar Observable = __webpack_require__(62706);\n// EXTERNAL MODULE: ./node_modules/ol/util.js\nvar util = __webpack_require__(74187);\n;// CONCATENATED MODULE: ./node_modules/ol/renderer/Layer.js\n/**\n * @module ol/renderer/Layer\n */\n\n\n\n\n\n/**\n * @template {import("../layer/Layer.js").default} LayerType\n */\nclass LayerRenderer extends Observable["default"] {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super();\n\n    /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */\n    this.ready = true;\n\n    /** @private */\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n\n    /**\n     * @protected\n     * @type {LayerType}\n     */\n    this.layer_ = layer;\n\n    /**\n     * @type {import("../render/canvas/ExecutorGroup").default}\n     */\n    this.declutterExecutorGroup = null;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import("../pixel.js").Pixel} pixel Pixel.\n   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return (0,util/* abstract */.O3)();\n  }\n\n  /**\n   * @param {import("../pixel.js").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    return null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import("../Map.js").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return (0,util/* abstract */.O3)();\n  }\n\n  /**\n   * Render the layer.\n   * @abstract\n   * @param {import("../Map.js").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    return (0,util/* abstract */.O3)();\n  }\n\n  /**\n   * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import("../Tile.js").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (!tiles[zoom]) {\n      tiles[zoom] = {};\n    }\n    tiles[zoom][tile.tileCoord.toString()] = tile;\n    return undefined;\n  }\n\n  /**\n   * Create a function that adds loaded tiles to the tile lookup.\n   * @param {import("../source/Tile.js").default} source Tile source.\n   * @param {import("../proj/Projection.js").default} projection Projection of the tiles.\n   * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @return {function(number, import("../TileRange.js").default):boolean} A function that can be\n   *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n   * @protected\n   */\n  createLoadedTileFinder(source, projection, tiles) {\n    return (\n      /**\n       * @param {number} zoom Zoom level.\n       * @param {import("../TileRange.js").default} tileRange Tile range.\n       * @return {boolean} The tile range is fully loaded.\n       */\n      (zoom, tileRange) => {\n        const callback = this.loadedTileCallback.bind(this, tiles, zoom);\n        return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n      }\n    );\n  }\n  /**\n   * @abstract\n   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.\n   * @param {import("../Map.js").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    return undefined;\n  }\n\n  /**\n   * @return {LayerType} Layer.\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */\n  handleFontsChanged() {}\n\n  /**\n   * Handle changes in image state.\n   * @param {import("../events/Event.js").default} event Image change event.\n   * @private\n   */\n  handleImageChange_(event) {\n    const image = /** @type {import("../Image.js").default} */ (event.target);\n    if (image.getState() === ImageState/* default.LOADED */.Z.LOADED) {\n      this.renderIfReadyAndVisible();\n    }\n  }\n\n  /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import("../ImageBase.js").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */\n  loadImage(image) {\n    let imageState = image.getState();\n    if (imageState != ImageState/* default.LOADED */.Z.LOADED && imageState != ImageState/* default.ERROR */.Z.ERROR) {\n      image.addEventListener(EventType/* default.CHANGE */.Z.CHANGE, this.boundHandleImageChange_);\n    }\n    if (imageState == ImageState/* default.IDLE */.Z.IDLE) {\n      image.load();\n      imageState = image.getState();\n    }\n    return imageState == ImageState/* default.LOADED */.Z.LOADED;\n  }\n\n  /**\n   * @protected\n   */\n  renderIfReadyAndVisible() {\n    const layer = this.getLayer();\n    if (layer && layer.getVisible() && layer.getSourceState() === \'ready\') {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.layer_;\n    super.disposeInternal();\n  }\n}\n\n/* harmony default export */ var Layer = (LayerRenderer);\n\n// EXTERNAL MODULE: ./node_modules/ol/render/Event.js\nvar Event = __webpack_require__(57380);\n// EXTERNAL MODULE: ./node_modules/ol/render/EventType.js\nvar render_EventType = __webpack_require__(98771);\n// EXTERNAL MODULE: ./node_modules/ol/transform.js\nvar transform = __webpack_require__(6101);\n// EXTERNAL MODULE: ./node_modules/ol/color.js\nvar color = __webpack_require__(79706);\n// EXTERNAL MODULE: ./node_modules/ol/dom.js\nvar dom = __webpack_require__(68326);\n// EXTERNAL MODULE: ./node_modules/ol/array.js\nvar array = __webpack_require__(65537);\n// EXTERNAL MODULE: ./node_modules/ol/extent.js\nvar ol_extent = __webpack_require__(28641);\n;// CONCATENATED MODULE: ./node_modules/ol/renderer/canvas/Layer.js\n/**\n * @module ol/renderer/canvas/Layer\n */\n\n\n\n\n\n\n\n\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nconst canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = (0,dom/* createCanvasContext2D */.E4)(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import("../../layer/Layer.js").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends Layer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import("../../transform.js").Transform}\n     */\n    this.tempTransform = (0,transform/* create */.Ue)();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import("../../transform.js").Transform}\n     */\n    this.pixelTransform = (0,transform/* create */.Ue)();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import("../../transform.js").Transform}\n     */\n    this.inversePixelTransform = (0,transform/* create */.Ue)();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import("../../Map.js").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\'../../Map.js\').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === \'function\') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          (0,array/* equals */.fS)(\n            (0,color/* asArray */._2)(target.style.backgroundColor),\n            (0,color/* asArray */._2)(backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext(\'2d\');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement(\'div\');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = \'absolute\';\n      style.width = \'100%\';\n      style.height = \'100%\';\n      context = (0,dom/* createCanvasContext2D */.E4)();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = \'absolute\';\n      style.left = \'0\';\n      style.transformOrigin = \'top left\';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {import("../../extent.js").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = (0,ol_extent/* getTopLeft */.rL)(extent);\n    const topRight = (0,ol_extent/* getTopRight */.Xv)(extent);\n    const bottomRight = (0,ol_extent/* getBottomRight */.w$)(extent);\n    const bottomLeft = (0,ol_extent/* getBottomLeft */.hC)(extent);\n\n    (0,transform/* apply */.nn)(frameState.coordinateToPixelTransform, topLeft);\n    (0,transform/* apply */.nn)(frameState.coordinateToPixelTransform, topRight);\n    (0,transform/* apply */.nn)(frameState.coordinateToPixelTransform, bottomRight);\n    (0,transform/* apply */.nn)(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    (0,transform/* apply */.nn)(inverted, topLeft);\n    (0,transform/* apply */.nn)(inverted, topRight);\n    (0,transform/* apply */.nn)(inverted, bottomRight);\n    (0,transform/* apply */.nn)(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import("../../render/EventType.js").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new Event/* default */.Z(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(render_EventType/* default.PRERENDER */.Z.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(render_EventType/* default.POSTRENDER */.Z.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import("../../coordinate.js").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import("../../transform.js").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return (0,transform/* compose */.qC)(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\n/* harmony default export */ var canvas_Layer = (CanvasLayerRenderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78490\n')},8845:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78490);\n/* harmony import */ var _ImageTile_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20825);\n/* harmony import */ var _reproj_Tile_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(81499);\n/* harmony import */ var _TileRange_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2519);\n/* harmony import */ var _TileState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37195);\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6101);\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(65537);\n/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28641);\n/* harmony import */ var _proj_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24121);\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(74187);\n/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4307);\n/**\n * @module ol/renderer/canvas/TileLayer\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default} [LayerType=import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import("../../extent.js").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import("../../proj/Projection.js").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import("../../Tile.js").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import("../../extent.js").Extent}\n     */\n    this.tmpExtent = (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .createEmpty */ .lJ)();\n\n    /**\n     * @private\n     * @type {import("../../TileRange.js").default}\n     */\n    this.tmpTileRange_ = new _TileRange_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import("../../Tile.js").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].LOADED */ .Z.LOADED ||\n      tileState == _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY */ .Z.EMPTY ||\n      (tileState == _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].ERROR */ .Z.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @return {!import("../../Tile.js").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].ERROR */ .Z.ERROR) {\n      if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import("../../pixel.js").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = (0,_transform_js__WEBPACK_IMPORTED_MODULE_5__/* .apply */ .nn)(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!(0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .containsCoordinate */ .b8)(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = source.getTile(\n        z,\n        tileCoord[1],\n        tileCoord[2],\n        pixelRatio,\n        projection\n      );\n      if (\n        !(tile instanceof _ImageTile_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z || tile instanceof _reproj_Tile_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z) ||\n        (tile instanceof _reproj_Tile_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z && tile.getState() === _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].EMPTY */ .Z.EMPTY)\n      ) {\n        return null;\n      }\n\n      if (tile.getState() !== _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].LOADED */ .Z.LOADED) {\n        continue;\n      }\n\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = (0,_size_js__WEBPACK_IMPORTED_MODULE_8__/* .toSize */ .Pq)(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col = Math.floor(\n        tilePixelRatio *\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\n            tileCoord[1] * tileSize[0])\n      );\n\n      const row = Math.floor(\n        tilePixelRatio *\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\n            tileCoord[2] * tileSize[1])\n      );\n\n      const gutter = Math.round(\n        tilePixelRatio * source.getGutterForProjection(viewState.projection)\n      );\n\n      return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import("../../Tile.js").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    let extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n    // desired dimensions of the canvas in pixels\n    const width = Math.round(((0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .getWidth */ .dz)(extent) / resolution) * pixelRatio);\n    const height = Math.round(((0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .getHeight */ .Cr)(extent) / resolution) * pixelRatio);\n\n    const layerExtent =\n      layerState.extent && (0,_proj_js__WEBPACK_IMPORTED_MODULE_0__/* .fromUserExtent */ .dY)(layerState.extent, projection);\n    if (layerExtent) {\n      extent = (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .getIntersection */ .Ed)(\n        extent,\n        (0,_proj_js__WEBPACK_IMPORTED_MODULE_0__/* .fromUserExtent */ .dY)(layerState.extent, projection)\n      );\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import("../../Tile.js").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource,\n      projection,\n      tilesToDrawByZ\n    );\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    const viewport = rotation\n      ? (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .getRotatedViewport */ .dY)(\n          viewState.center,\n          resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        if (\n          rotation &&\n          !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n        ) {\n          continue;\n        }\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__/* .getUid */ .sq)(this);\n          if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].LOADED */ .Z.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            let inTransition = tile.inTransition(uid);\n            if (inTransition && layerState.opacity !== 1) {\n              // Skipping transition when layer is not fully opaque avoids visual artifacts.\n              tile.endTransition(uid);\n              inTransition = false;\n            }\n            if (\n              !this.newTiles_ &&\n              (inTransition || !this.renderedTiles.includes(tile))\n            ) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don\'t look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord,\n          tmpTileRange,\n          tmpExtent\n        );\n\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord,\n            findLoadedTiles,\n            tmpTileRange,\n            tmpExtent\n          );\n        }\n      }\n    }\n\n    const canvasScale =\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\n\n    // set forward and inverse pixel transforms\n    (0,_transform_js__WEBPACK_IMPORTED_MODULE_5__/* .compose */ .qC)(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n\n    const canvasTransform = (0,_transform_js__WEBPACK_IMPORTED_MODULE_5__/* .toString */ .BB)(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    (0,_transform_js__WEBPACK_IMPORTED_MODULE_5__/* .makeInverse */ .nb)(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    (0,_transform_js__WEBPACK_IMPORTED_MODULE_5__/* .compose */ .qC)(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2\n    );\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    if (!tileSource.getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(_array_js__WEBPACK_IMPORTED_MODULE_10__/* .ascending */ .j2);\n\n    let clips, clipZs, currentClip;\n    if (\n      layerState.opacity === 1 &&\n      (!this.containerReused ||\n        tileSource.getOpaque(frameState.viewState.projection))\n    ) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .getTopLeft */ .rL)(canvasExtent),\n        currentZ\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = (0,_transform_js__WEBPACK_IMPORTED_MODULE_5__/* .apply */ .nn)(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import("../../ImageTile.js").default} */ (\n          tilesToDraw[tileCoordKey]\n        );\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n\n        const inTransition =\n          transition && tile.getAlpha((0,_util_js__WEBPACK_IMPORTED_MODULE_9__/* .getUid */ .sq)(this), frameState.time) !== 1;\n        let contextSaved = false;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                if (\n                  (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .intersects */ .kK)(\n                    [x, y, x + w, y + h],\n                    [clip[0], clip[3], clip[4], clip[7]]\n                  )\n                ) {\n                  if (!contextSaved) {\n                    context.save();\n                    contextSaved = true;\n                  }\n                  context.beginPath();\n                  // counter-clockwise (outer ring) for current tile\n                  context.moveTo(currentClip[0], currentClip[1]);\n                  context.lineTo(currentClip[2], currentClip[3]);\n                  context.lineTo(currentClip[4], currentClip[5]);\n                  context.lineTo(currentClip[6], currentClip[7]);\n                  // clockwise (inner ring) for higher z tile\n                  context.moveTo(clip[6], clip[7]);\n                  context.lineTo(clip[4], clip[5]);\n                  context.lineTo(clip[2], clip[3]);\n                  context.lineTo(clip[0], clip[1]);\n                  context.clip();\n                }\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(\n          tile,\n          frameState,\n          x,\n          y,\n          w,\n          h,\n          tileGutter,\n          transition\n        );\n        if (clips && !inTransition) {\n          if (contextSaved) {\n            context.restore();\n          }\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !(0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .equals */ .fS)(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n\n    this.manageTilePyramid(\n      frameState,\n      tileSource,\n      tileGrid,\n      pixelRatio,\n      projection,\n      extent,\n      z,\n      tileLayer.getPreload()\n    );\n    this.scheduleExpireCache(frameState, tileSource);\n\n    this.postRender(context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * @param {import("../../ImageTile.js").default} tile Tile.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__/* .getUid */ .sq)(this);\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const alpha =\n      layerState.opacity *\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h\n    );\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== layerState.opacity) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import("../../ImageTile.js").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {import("../../source/Tile.js").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import("../../source/Tile.js").default} tileSource Tile source.\n       * @param {import("../../Map.js").default} map Map.\n       * @param {import("../../Map.js").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__/* .getUid */ .sq)(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(\n            frameState.viewState.projection,\n            frameState.usedTiles[tileSourceKey]\n          );\n        }\n      }.bind(null, tileSource);\n\n      frameState.postRenderFunctions.push(\n        /** @type {import("../../Map.js").PostRenderFunction} */ (\n          postRenderFunction\n        )\n      );\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import("../../source/Tile.js").default} tileSource Tile source.\n   * @param {import(\'../../Tile.js\').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__/* .getUid */ .sq)(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {import("../../source/Tile.js").default} tileSource Tile source.\n   * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import("../../proj/Projection.js").default} projection Projection.\n   * @param {import("../../extent.js").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import("../../Tile.js").default):void} [tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(\n    frameState,\n    tileSource,\n    tileGrid,\n    pixelRatio,\n    projection,\n    extent,\n    currentZ,\n    preload,\n    tileCallback\n  ) {\n    const tileSourceKey = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__/* .getUid */ .sq)(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    const rotation = frameState.viewState.rotation;\n    const viewport = rotation\n      ? (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__/* .getRotatedViewport */ .dY)(\n          frameState.viewState.center,\n          frameState.viewState.resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (\n            rotation &&\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n          ) {\n            continue;\n          }\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == _TileState_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].IDLE */ .Z.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([\n                  tile,\n                  tileSourceKey,\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\n                  tileResolution,\n                ]);\n              }\n            }\n            if (tileCallback !== undefined) {\n              tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\n\n/* harmony default export */ __webpack_exports__["Z"] = (CanvasTileLayerRenderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8845\n')},60883:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ VectorLayer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/BuilderGroup.js + 3 modules\nvar BuilderGroup = __webpack_require__(35570);\n// EXTERNAL MODULE: ./node_modules/ol/renderer/canvas/Layer.js + 1 modules\nvar Layer = __webpack_require__(78490);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/ExecutorGroup.js + 1 modules\nvar ExecutorGroup = __webpack_require__(15240);\n// EXTERNAL MODULE: ./node_modules/ol/ViewHint.js\nvar ViewHint = __webpack_require__(37755);\n// EXTERNAL MODULE: ./node_modules/ol/render/canvas/hitdetect.js + 1 modules\nvar hitdetect = __webpack_require__(12382);\n// EXTERNAL MODULE: ./node_modules/ol/transform.js\nvar transform = __webpack_require__(6101);\n// EXTERNAL MODULE: ./node_modules/ol/extent.js\nvar ol_extent = __webpack_require__(28641);\n// EXTERNAL MODULE: ./node_modules/ol/dom.js\nvar dom = __webpack_require__(68326);\n// EXTERNAL MODULE: ./node_modules/ol/ImageState.js\nvar ImageState = __webpack_require__(70553);\n// EXTERNAL MODULE: ./node_modules/ol/util.js\nvar util = __webpack_require__(74187);\n;// CONCATENATED MODULE: ./node_modules/ol/renderer/vector.js\n/**\n * @module ol/renderer/vector\n */\n\n\n\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>, import("../geom/SimpleGeometry.js").default): T} FeatureCallback\n */\n\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nconst SIMPLIFY_TOLERANCE = 0.5;\n\n/**\n * @const\n * @type {Object<import("../geom/Geometry.js").Type,\n *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,\n *                         import("../style/Style.js").default, Object): void>}\n */\nconst GEOMETRY_RENDERERS = {\n  \'Point\': renderPointGeometry,\n  \'LineString\': renderLineStringGeometry,\n  \'Polygon\': renderPolygonGeometry,\n  \'MultiPoint\': renderMultiPointGeometry,\n  \'MultiLineString\': renderMultiLineStringGeometry,\n  \'MultiPolygon\': renderMultiPolygonGeometry,\n  \'GeometryCollection\': renderGeometryCollectionGeometry,\n  \'Circle\': renderCircleGeometry,\n};\n\n/**\n * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.\n * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nfunction defaultOrder(feature1, feature2) {\n  return parseInt((0,util/* getUid */.sq)(feature1), 10) - parseInt((0,util/* getUid */.sq)(feature2), 10);\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nfunction getSquaredTolerance(resolution, pixelRatio) {\n  const tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nfunction getTolerance(resolution, pixelRatio) {\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.\n * @param {import("../geom/Circle.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").default} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const circleReplay = builderGroup.getBuilder(style.getZIndex(), \'Circle\');\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      \'Text\'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../style/Style.js").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import("../events/Event.js").default): void} listener Listener function.\n * @param {import("../proj.js").TransformFunction} [transform] Transform from user to view projection.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nfunction renderFeature(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  listener,\n  transform,\n  declutterBuilderGroup\n) {\n  let loading = false;\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    const imageState = imageStyle.getImageState();\n    if (imageState == ImageState/* default.LOADED */.Z.LOADED || imageState == ImageState/* default.ERROR */.Z.ERROR) {\n      imageStyle.unlistenImageChange(listener);\n    } else {\n      if (imageState == ImageState/* default.IDLE */.Z.IDLE) {\n        imageStyle.load();\n      }\n      imageStyle.listenImageChange(listener);\n      loading = true;\n    }\n  }\n  renderFeatureInternal(\n    replayGroup,\n    feature,\n    style,\n    squaredTolerance,\n    transform,\n    declutterBuilderGroup\n  );\n\n  return loading;\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../style/Style.js").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  transform,\n  declutterBuilderGroup\n) {\n  const geometry = style.getGeometryFunction()(feature);\n  if (!geometry) {\n    return;\n  }\n  const simplifiedGeometry = geometry.simplifyTransformed(\n    squaredTolerance,\n    transform\n  );\n  const renderer = style.getRenderer();\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n  } else {\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(\n      replayGroup,\n      simplifiedGeometry,\n      style,\n      feature,\n      declutterBuilderGroup\n    );\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.\n * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n  if (geometry.getType() == \'GeometryCollection\') {\n    const geometries =\n      /** @type {import("../geom/GeometryCollection.js").default} */ (\n        geometry\n      ).getGeometries();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature);\n    }\n    return;\n  }\n  const replay = replayGroup.getBuilder(style.getZIndex(), \'Default\');\n  replay.drawCustom(\n    /** @type {import("../geom/SimpleGeometry.js").default} */ (geometry),\n    feature,\n    style.getRenderer(),\n    style.getHitDetectionRenderer()\n  );\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.\n * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").default} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(\n  replayGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const geometries = geometry.getGeometriesArray();\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(\n      replayGroup,\n      geometries[i],\n      style,\n      feature,\n      declutterBuilderGroup\n    );\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.\n * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      \'LineString\'\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      \'Text\'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.\n * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      \'LineString\'\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      \'Text\'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.\n * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").default} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (strokeStyle || fillStyle) {\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), \'Polygon\');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      \'Text\'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.\n * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  /** @type {import("../render/canvas.js").DeclutterImageWithText} */\n  let declutterImageWithText;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState/* default.LOADED */.Z.LOADED) {\n      return;\n    }\n    let imageBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      const declutterMode = imageStyle.getDeclutterMode();\n      if (declutterMode !== \'none\') {\n        imageBuilderGroup = declutterBuilderGroup;\n        if (declutterMode === \'obstacle\') {\n          // draw in non-declutter group:\n          const imageReplay = builderGroup.getBuilder(\n            style.getZIndex(),\n            \'Image\'\n          );\n          imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n          imageReplay.drawPoint(geometry, feature);\n        } else if (textStyle && textStyle.getText()) {\n          declutterImageWithText = {};\n        }\n      }\n    }\n    const imageReplay = imageBuilderGroup.getBuilder(\n      style.getZIndex(),\n      \'Image\'\n    );\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    let textBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      textBuilderGroup = declutterBuilderGroup;\n    }\n    const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), \'Text\');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.\n * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  /** @type {import("../render/canvas.js").DeclutterImageWithText} */\n  let declutterImageWithText;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState/* default.LOADED */.Z.LOADED) {\n      return;\n    }\n    let imageBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      const declutterMode = imageStyle.getDeclutterMode();\n      if (declutterMode !== \'none\') {\n        imageBuilderGroup = declutterBuilderGroup;\n        if (declutterMode === \'obstacle\') {\n          // draw in non-declutter group:\n          const imageReplay = builderGroup.getBuilder(\n            style.getZIndex(),\n            \'Image\'\n          );\n          imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n          imageReplay.drawMultiPoint(geometry, feature);\n        } else if (textStyle && textStyle.getText()) {\n          declutterImageWithText = {};\n        }\n      }\n    }\n    const imageReplay = imageBuilderGroup.getBuilder(\n      style.getZIndex(),\n      \'Image\'\n    );\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawMultiPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    let textBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      textBuilderGroup = declutterBuilderGroup;\n    }\n    const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), \'Text\');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.\n * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.\n * @param {import("../style/Style.js").default} style Style.\n * @param {import("../Feature.js").FeatureLike} feature Feature.\n * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), \'Polygon\');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      \'Text\'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n// EXTERNAL MODULE: ./node_modules/ol/array.js\nvar array = __webpack_require__(65537);\n// EXTERNAL MODULE: ./node_modules/ol/proj.js + 4 modules\nvar proj = __webpack_require__(24121);\n// EXTERNAL MODULE: ./node_modules/ol/coordinate.js\nvar coordinate = __webpack_require__(91900);\n;// CONCATENATED MODULE: ./node_modules/ol/renderer/canvas/VectorLayer.js\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends Layer/* default */.Z {\n  /**\n   * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import("../../Feature.js").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import("../../extent.js").Extent}\n     */\n    this.renderedExtent_ = (0,ol_extent/* createEmpty */.lJ)();\n\n    /**\n     * @private\n     * @type {import("../../extent.js").Extent}\n     */\n    this.wrappedRenderedExtent_ = (0,ol_extent/* createEmpty */.lJ)();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import("../../coordinate").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import("../../proj/Projection").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import("../../render/canvas/ExecutorGroup").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import("../../render/canvas/ExecutorGroup").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {import("rbush").default} [declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint/* default.ANIMATING */.Z.ANIMATING] || viewHints[ViewHint/* default.INTERACTING */.Z.INTERACTING]\n    );\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? (0,ol_extent/* getWidth */.dz)(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = (0,dom/* createCanvasContext2D */.E4)(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        Layer/* canvasPool */.r\n      );\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      (0,dom/* releaseCanvas */.jy)(this.compositionContext_);\n      Layer/* canvasPool.push */.r.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    (0,transform/* makeScale */.n3)(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    (0,transform/* makeInverse */.nb)(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = (0,transform/* toString */.BB)(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if (\n      (!replayGroup || replayGroup.isEmpty()) &&\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\n    ) {\n      return null;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = (0,proj/* fromUserExtent */.dY)(layerState.extent, projection);\n      render = (0,ol_extent/* intersects */.kK)(layerExtent, frameState.extent);\n      clipped = render && !(0,ol_extent/* containsExtent */.r4)(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import("../../pixel.js").Pixel} pixel Pixel.\n   * @return {Promise<Array<import("../../Feature").default>>} Promise\n   * that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = [this.context.canvas.width, this.context.canvas.height];\n        (0,transform/* apply */.nn)(this.pixelTransform, size);\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * hitdetect/* HIT_DETECT_RESOLUTION */.UN;\n        const height = size[1] * hitdetect/* HIT_DETECT_RESOLUTION */.UN;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            hitdetect/* HIT_DETECT_RESOLUTION */.UN,\n            width,\n            height,\n            0\n          ).slice()\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !(0,ol_extent/* containsExtent */.r4)(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = (0,ol_extent/* getWidth */.dz)(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                hitdetect/* HIT_DETECT_RESOLUTION */.UN,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                hitdetect/* HIT_DETECT_RESOLUTION */.UN,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = (0,hitdetect/* createHitDetectionImageData */.TU)(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation\n        );\n      }\n      resolve(\n        (0,hitdetect/* hitDetect */.ix)(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n      );\n    });\n  }\n\n  /**\n   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import("../../Feature.js").FeatureLike} feature Feature.\n     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = (0,util/* getUid */.sq)(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup &&\n          frameState.declutterTree\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import("../../events/Event.js").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import("../../Map.js").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint/* default.ANIMATING */.Z.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint/* default.INTERACTING */.Z.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = (0,ol_extent/* buffer */.f3)(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !(0,ol_extent/* containsExtent */.r4)(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = (0,ol_extent/* getWidth */.dz)(projectionExtent);\n      const gutter = Math.max((0,ol_extent/* getWidth */.dz)(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      (0,coordinate/* wrapX */.Cf)(center, projection);\n      const loadExtent = (0,ol_extent/* wrapX */.Cf)(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      (0,ol_extent/* containsExtent */.r4)(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!(0,array/* equals */.fS)(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new BuilderGroup/* default */.Z(\n      getTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new BuilderGroup/* default */.Z(\n        getTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = (0,proj/* getUserProjection */.Cs)();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = (0,proj/* toUserExtent */.Fj)(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          (0,proj/* toUserResolution */.on)(resolution, projection),\n          userProjection\n        );\n      }\n      userTransform = (0,proj/* getTransformFromProjections */.WO)(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import("../../Feature.js").default} feature Feature.\n       */\n      (feature) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = (0,proj/* toUserExtent */.Fj)(extent, projection);\n    /** @type {Array<import("../../Feature.js").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup/* default */.Z(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup/* default */.Z(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import("../../Feature.js").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.\n   * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.\n   * @param {import("../../proj.js").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import("../../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\n/* harmony default export */ var VectorLayer = (CanvasVectorLayerRenderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LHNGQUFzRjtBQUNuRyxhQUFhLHVEQUF1RDtBQUNwRSxhQUFhLDJDQUEyQztBQUN4RCxhQUFhLHVEQUF1RDtBQUNwRSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0EsVUFBVSxhQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWUseUJBQXlCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUzLXdlYnBhY2s1Ly4vbm9kZV9tb2R1bGVzL29sL3JlbmRlcmVyL3ZlY3Rvci5qcz9jNDEzIiwid2VicGFjazovL3Z1ZTMtd2VicGFjazUvLi9ub2RlX21vZHVsZXMvb2wvcmVuZGVyZXIvY2FudmFzL1ZlY3RvckxheWVyLmpzP2YzZDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL3JlbmRlcmVyL3ZlY3RvclxuICovXG5pbXBvcnQgSW1hZ2VTdGF0ZSBmcm9tICcuLi9JbWFnZVN0YXRlLmpzJztcbmltcG9ydCB7Z2V0VWlkfSBmcm9tICcuLi91dGlsLmpzJztcblxuLyoqXG4gKiBGZWF0dXJlIGNhbGxiYWNrLiBUaGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aHJlZSBhcmd1bWVudHMuIFRoZSBmaXJzdFxuICogYXJndW1lbnQgaXMgb25lIHtAbGluayBtb2R1bGU6b2wvRmVhdHVyZX5GZWF0dXJlIGZlYXR1cmV9IG9yIHtAbGluayBtb2R1bGU6b2wvcmVuZGVyL0ZlYXR1cmV+UmVuZGVyRmVhdHVyZSByZW5kZXIgZmVhdHVyZX1cbiAqIGF0IHRoZSBwaXhlbCwgdGhlIHNlY29uZCBpcyB0aGUge0BsaW5rIG1vZHVsZTpvbC9sYXllci9MYXllcn5MYXllciBsYXllcn0gb2YgdGhlIGZlYXR1cmUgYW5kIHdpbGwgYmUgbnVsbCBmb3JcbiAqIHVubWFuYWdlZCBsYXllcnMuIFRoZSB0aGlyZCBpcyB0aGUge0BsaW5rIG1vZHVsZTpvbC9nZW9tL1NpbXBsZUdlb21ldHJ5flNpbXBsZUdlb21ldHJ5fSBvZiB0aGUgZmVhdHVyZS4gRm9yIGZlYXR1cmVzXG4gKiB3aXRoIGEgR2VvbWV0cnlDb2xsZWN0aW9uIGdlb21ldHJ5LCBpdCB3aWxsIGJlIHRoZSBmaXJzdCBkZXRlY3RlZCBnZW9tZXRyeSBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICogQHRlbXBsYXRlIFRcbiAqIEB0eXBlZGVmIHtmdW5jdGlvbihpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlLCBpbXBvcnQoXCIuLi9sYXllci9MYXllci5qc1wiKS5kZWZhdWx0PGltcG9ydChcIi4uL3NvdXJjZS9Tb3VyY2VcIikuZGVmYXVsdD4sIGltcG9ydChcIi4uL2dlb20vU2ltcGxlR2VvbWV0cnkuanNcIikuZGVmYXVsdCk6IFR9IEZlYXR1cmVDYWxsYmFja1xuICovXG5cbi8qKlxuICogVG9sZXJhbmNlIGZvciBnZW9tZXRyeSBzaW1wbGlmaWNhdGlvbiBpbiBkZXZpY2UgcGl4ZWxzLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuY29uc3QgU0lNUExJRllfVE9MRVJBTkNFID0gMC41O1xuXG4vKipcbiAqIEBjb25zdFxuICogQHR5cGUge09iamVjdDxpbXBvcnQoXCIuLi9nZW9tL0dlb21ldHJ5LmpzXCIpLlR5cGUsXG4gKiAgICAgICAgICAgICAgICBmdW5jdGlvbihpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0LCBpbXBvcnQoXCIuLi9nZW9tL0dlb21ldHJ5LmpzXCIpLmRlZmF1bHQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnQoXCIuLi9zdHlsZS9TdHlsZS5qc1wiKS5kZWZhdWx0LCBPYmplY3QpOiB2b2lkPn1cbiAqL1xuY29uc3QgR0VPTUVUUllfUkVOREVSRVJTID0ge1xuICAnUG9pbnQnOiByZW5kZXJQb2ludEdlb21ldHJ5LFxuICAnTGluZVN0cmluZyc6IHJlbmRlckxpbmVTdHJpbmdHZW9tZXRyeSxcbiAgJ1BvbHlnb24nOiByZW5kZXJQb2x5Z29uR2VvbWV0cnksXG4gICdNdWx0aVBvaW50JzogcmVuZGVyTXVsdGlQb2ludEdlb21ldHJ5LFxuICAnTXVsdGlMaW5lU3RyaW5nJzogcmVuZGVyTXVsdGlMaW5lU3RyaW5nR2VvbWV0cnksXG4gICdNdWx0aVBvbHlnb24nOiByZW5kZXJNdWx0aVBvbHlnb25HZW9tZXRyeSxcbiAgJ0dlb21ldHJ5Q29sbGVjdGlvbic6IHJlbmRlckdlb21ldHJ5Q29sbGVjdGlvbkdlb21ldHJ5LFxuICAnQ2lyY2xlJzogcmVuZGVyQ2lyY2xlR2VvbWV0cnksXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5GZWF0dXJlTGlrZX0gZmVhdHVyZTEgRmVhdHVyZSAxLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlfSBmZWF0dXJlMiBGZWF0dXJlIDIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE9yZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE9yZGVyKGZlYXR1cmUxLCBmZWF0dXJlMikge1xuICByZXR1cm4gcGFyc2VJbnQoZ2V0VWlkKGZlYXR1cmUxKSwgMTApIC0gcGFyc2VJbnQoZ2V0VWlkKGZlYXR1cmUyKSwgMTApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uIFJlc29sdXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxSYXRpbyBQaXhlbCByYXRpby5cbiAqIEByZXR1cm4ge251bWJlcn0gU3F1YXJlZCBwaXhlbCB0b2xlcmFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcXVhcmVkVG9sZXJhbmNlKHJlc29sdXRpb24sIHBpeGVsUmF0aW8pIHtcbiAgY29uc3QgdG9sZXJhbmNlID0gZ2V0VG9sZXJhbmNlKHJlc29sdXRpb24sIHBpeGVsUmF0aW8pO1xuICByZXR1cm4gdG9sZXJhbmNlICogdG9sZXJhbmNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uIFJlc29sdXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxSYXRpbyBQaXhlbCByYXRpby5cbiAqIEByZXR1cm4ge251bWJlcn0gUGl4ZWwgdG9sZXJhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9sZXJhbmNlKHJlc29sdXRpb24sIHBpeGVsUmF0aW8pIHtcbiAgcmV0dXJuIChTSU1QTElGWV9UT0xFUkFOQ0UgKiByZXNvbHV0aW9uKSAvIHBpeGVsUmF0aW87XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSBidWlsZGVyR3JvdXAgQnVpbGRlciBncm91cC5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZ2VvbS9DaXJjbGUuanNcIikuZGVmYXVsdH0gZ2VvbWV0cnkgR2VvbWV0cnkuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3N0eWxlL1N0eWxlLmpzXCIpLmRlZmF1bHR9IHN0eWxlIFN0eWxlLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHR9IGZlYXR1cmUgRmVhdHVyZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gW2RlY2x1dHRlckJ1aWxkZXJHcm91cF0gQnVpbGRlciBmb3IgZGVjbHV0dGVyaW5nLlxuICovXG5mdW5jdGlvbiByZW5kZXJDaXJjbGVHZW9tZXRyeShcbiAgYnVpbGRlckdyb3VwLFxuICBnZW9tZXRyeSxcbiAgc3R5bGUsXG4gIGZlYXR1cmUsXG4gIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuKSB7XG4gIGNvbnN0IGZpbGxTdHlsZSA9IHN0eWxlLmdldEZpbGwoKTtcbiAgY29uc3Qgc3Ryb2tlU3R5bGUgPSBzdHlsZS5nZXRTdHJva2UoKTtcbiAgaWYgKGZpbGxTdHlsZSB8fCBzdHJva2VTdHlsZSkge1xuICAgIGNvbnN0IGNpcmNsZVJlcGxheSA9IGJ1aWxkZXJHcm91cC5nZXRCdWlsZGVyKHN0eWxlLmdldFpJbmRleCgpLCAnQ2lyY2xlJyk7XG4gICAgY2lyY2xlUmVwbGF5LnNldEZpbGxTdHJva2VTdHlsZShmaWxsU3R5bGUsIHN0cm9rZVN0eWxlKTtcbiAgICBjaXJjbGVSZXBsYXkuZHJhd0NpcmNsZShnZW9tZXRyeSwgZmVhdHVyZSk7XG4gIH1cbiAgY29uc3QgdGV4dFN0eWxlID0gc3R5bGUuZ2V0VGV4dCgpO1xuICBpZiAodGV4dFN0eWxlICYmIHRleHRTdHlsZS5nZXRUZXh0KCkpIHtcbiAgICBjb25zdCB0ZXh0UmVwbGF5ID0gKGRlY2x1dHRlckJ1aWxkZXJHcm91cCB8fCBidWlsZGVyR3JvdXApLmdldEJ1aWxkZXIoXG4gICAgICBzdHlsZS5nZXRaSW5kZXgoKSxcbiAgICAgICdUZXh0J1xuICAgICk7XG4gICAgdGV4dFJlcGxheS5zZXRUZXh0U3R5bGUodGV4dFN0eWxlKTtcbiAgICB0ZXh0UmVwbGF5LmRyYXdUZXh0KGdlb21ldHJ5LCBmZWF0dXJlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gcmVwbGF5R3JvdXAgUmVwbGF5IGdyb3VwLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlfSBmZWF0dXJlIEZlYXR1cmUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3N0eWxlL1N0eWxlLmpzXCIpLmRlZmF1bHR9IHN0eWxlIFN0eWxlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNxdWFyZWRUb2xlcmFuY2UgU3F1YXJlZCB0b2xlcmFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGltcG9ydChcIi4uL2V2ZW50cy9FdmVudC5qc1wiKS5kZWZhdWx0KTogdm9pZH0gbGlzdGVuZXIgTGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3Byb2ouanNcIikuVHJhbnNmb3JtRnVuY3Rpb259IFt0cmFuc2Zvcm1dIFRyYW5zZm9ybSBmcm9tIHVzZXIgdG8gdmlldyBwcm9qZWN0aW9uLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSBbZGVjbHV0dGVyQnVpbGRlckdyb3VwXSBCdWlsZGVyIGZvciBkZWNsdXR0ZXJpbmcuXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgc3R5bGUgaXMgbG9hZGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckZlYXR1cmUoXG4gIHJlcGxheUdyb3VwLFxuICBmZWF0dXJlLFxuICBzdHlsZSxcbiAgc3F1YXJlZFRvbGVyYW5jZSxcbiAgbGlzdGVuZXIsXG4gIHRyYW5zZm9ybSxcbiAgZGVjbHV0dGVyQnVpbGRlckdyb3VwXG4pIHtcbiAgbGV0IGxvYWRpbmcgPSBmYWxzZTtcbiAgY29uc3QgaW1hZ2VTdHlsZSA9IHN0eWxlLmdldEltYWdlKCk7XG4gIGlmIChpbWFnZVN0eWxlKSB7XG4gICAgY29uc3QgaW1hZ2VTdGF0ZSA9IGltYWdlU3R5bGUuZ2V0SW1hZ2VTdGF0ZSgpO1xuICAgIGlmIChpbWFnZVN0YXRlID09IEltYWdlU3RhdGUuTE9BREVEIHx8IGltYWdlU3RhdGUgPT0gSW1hZ2VTdGF0ZS5FUlJPUikge1xuICAgICAgaW1hZ2VTdHlsZS51bmxpc3RlbkltYWdlQ2hhbmdlKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGltYWdlU3RhdGUgPT0gSW1hZ2VTdGF0ZS5JRExFKSB7XG4gICAgICAgIGltYWdlU3R5bGUubG9hZCgpO1xuICAgICAgfVxuICAgICAgaW1hZ2VTdHlsZS5saXN0ZW5JbWFnZUNoYW5nZShsaXN0ZW5lcik7XG4gICAgICBsb2FkaW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyRmVhdHVyZUludGVybmFsKFxuICAgIHJlcGxheUdyb3VwLFxuICAgIGZlYXR1cmUsXG4gICAgc3R5bGUsXG4gICAgc3F1YXJlZFRvbGVyYW5jZSxcbiAgICB0cmFuc2Zvcm0sXG4gICAgZGVjbHV0dGVyQnVpbGRlckdyb3VwXG4gICk7XG5cbiAgcmV0dXJuIGxvYWRpbmc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSByZXBsYXlHcm91cCBSZXBsYXkgZ3JvdXAuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vc3R5bGUvU3R5bGUuanNcIikuZGVmYXVsdH0gc3R5bGUgU3R5bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gc3F1YXJlZFRvbGVyYW5jZSBTcXVhcmVkIHRvbGVyYW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcHJvai5qc1wiKS5UcmFuc2Zvcm1GdW5jdGlvbn0gW3RyYW5zZm9ybV0gT3B0aW9uYWwgdHJhbnNmb3JtIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSBbZGVjbHV0dGVyQnVpbGRlckdyb3VwXSBCdWlsZGVyIGZvciBkZWNsdXR0ZXJpbmcuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckZlYXR1cmVJbnRlcm5hbChcbiAgcmVwbGF5R3JvdXAsXG4gIGZlYXR1cmUsXG4gIHN0eWxlLFxuICBzcXVhcmVkVG9sZXJhbmNlLFxuICB0cmFuc2Zvcm0sXG4gIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuKSB7XG4gIGNvbnN0IGdlb21ldHJ5ID0gc3R5bGUuZ2V0R2VvbWV0cnlGdW5jdGlvbigpKGZlYXR1cmUpO1xuICBpZiAoIWdlb21ldHJ5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHNpbXBsaWZpZWRHZW9tZXRyeSA9IGdlb21ldHJ5LnNpbXBsaWZ5VHJhbnNmb3JtZWQoXG4gICAgc3F1YXJlZFRvbGVyYW5jZSxcbiAgICB0cmFuc2Zvcm1cbiAgKTtcbiAgY29uc3QgcmVuZGVyZXIgPSBzdHlsZS5nZXRSZW5kZXJlcigpO1xuICBpZiAocmVuZGVyZXIpIHtcbiAgICByZW5kZXJHZW9tZXRyeShyZXBsYXlHcm91cCwgc2ltcGxpZmllZEdlb21ldHJ5LCBzdHlsZSwgZmVhdHVyZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZ2VvbWV0cnlSZW5kZXJlciA9IEdFT01FVFJZX1JFTkRFUkVSU1tzaW1wbGlmaWVkR2VvbWV0cnkuZ2V0VHlwZSgpXTtcbiAgICBnZW9tZXRyeVJlbmRlcmVyKFxuICAgICAgcmVwbGF5R3JvdXAsXG4gICAgICBzaW1wbGlmaWVkR2VvbWV0cnksXG4gICAgICBzdHlsZSxcbiAgICAgIGZlYXR1cmUsXG4gICAgICBkZWNsdXR0ZXJCdWlsZGVyR3JvdXBcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSByZXBsYXlHcm91cCBSZXBsYXkgZ3JvdXAuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dlb20vR2VvbWV0cnkuanNcIikuZGVmYXVsdHxpbXBvcnQoXCIuLi9yZW5kZXIvRmVhdHVyZS5qc1wiKS5kZWZhdWx0fSBnZW9tZXRyeSBHZW9tZXRyeS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vc3R5bGUvU3R5bGUuanNcIikuZGVmYXVsdH0gc3R5bGUgU3R5bGUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyR2VvbWV0cnkocmVwbGF5R3JvdXAsIGdlb21ldHJ5LCBzdHlsZSwgZmVhdHVyZSkge1xuICBpZiAoZ2VvbWV0cnkuZ2V0VHlwZSgpID09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XG4gICAgY29uc3QgZ2VvbWV0cmllcyA9XG4gICAgICAvKiogQHR5cGUge2ltcG9ydChcIi4uL2dlb20vR2VvbWV0cnlDb2xsZWN0aW9uLmpzXCIpLmRlZmF1bHR9ICovIChcbiAgICAgICAgZ2VvbWV0cnlcbiAgICAgICkuZ2V0R2VvbWV0cmllcygpO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGdlb21ldHJpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgcmVuZGVyR2VvbWV0cnkocmVwbGF5R3JvdXAsIGdlb21ldHJpZXNbaV0sIHN0eWxlLCBmZWF0dXJlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlcGxheSA9IHJlcGxheUdyb3VwLmdldEJ1aWxkZXIoc3R5bGUuZ2V0WkluZGV4KCksICdEZWZhdWx0Jyk7XG4gIHJlcGxheS5kcmF3Q3VzdG9tKFxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vZ2VvbS9TaW1wbGVHZW9tZXRyeS5qc1wiKS5kZWZhdWx0fSAqLyAoZ2VvbWV0cnkpLFxuICAgIGZlYXR1cmUsXG4gICAgc3R5bGUuZ2V0UmVuZGVyZXIoKSxcbiAgICBzdHlsZS5nZXRIaXREZXRlY3Rpb25SZW5kZXJlcigpXG4gICk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSByZXBsYXlHcm91cCBSZXBsYXkgZ3JvdXAuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dlb20vR2VvbWV0cnlDb2xsZWN0aW9uLmpzXCIpLmRlZmF1bHR9IGdlb21ldHJ5IEdlb21ldHJ5LlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9zdHlsZS9TdHlsZS5qc1wiKS5kZWZhdWx0fSBzdHlsZSBTdHlsZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0fSBmZWF0dXJlIEZlYXR1cmUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3JlbmRlci9jYW52YXMvQnVpbGRlckdyb3VwLmpzXCIpLmRlZmF1bHR9IFtkZWNsdXR0ZXJCdWlsZGVyR3JvdXBdIEJ1aWxkZXIgZm9yIGRlY2x1dHRlcmluZy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyR2VvbWV0cnlDb2xsZWN0aW9uR2VvbWV0cnkoXG4gIHJlcGxheUdyb3VwLFxuICBnZW9tZXRyeSxcbiAgc3R5bGUsXG4gIGZlYXR1cmUsXG4gIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuKSB7XG4gIGNvbnN0IGdlb21ldHJpZXMgPSBnZW9tZXRyeS5nZXRHZW9tZXRyaWVzQXJyYXkoKTtcbiAgbGV0IGksIGlpO1xuICBmb3IgKGkgPSAwLCBpaSA9IGdlb21ldHJpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgIGNvbnN0IGdlb21ldHJ5UmVuZGVyZXIgPSBHRU9NRVRSWV9SRU5ERVJFUlNbZ2VvbWV0cmllc1tpXS5nZXRUeXBlKCldO1xuICAgIGdlb21ldHJ5UmVuZGVyZXIoXG4gICAgICByZXBsYXlHcm91cCxcbiAgICAgIGdlb21ldHJpZXNbaV0sXG4gICAgICBzdHlsZSxcbiAgICAgIGZlYXR1cmUsXG4gICAgICBkZWNsdXR0ZXJCdWlsZGVyR3JvdXBcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSBidWlsZGVyR3JvdXAgUmVwbGF5IGdyb3VwLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9nZW9tL0xpbmVTdHJpbmcuanNcIikuZGVmYXVsdHxpbXBvcnQoXCIuLi9yZW5kZXIvRmVhdHVyZS5qc1wiKS5kZWZhdWx0fSBnZW9tZXRyeSBHZW9tZXRyeS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vc3R5bGUvU3R5bGUuanNcIikuZGVmYXVsdH0gc3R5bGUgU3R5bGUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gW2RlY2x1dHRlckJ1aWxkZXJHcm91cF0gQnVpbGRlciBmb3IgZGVjbHV0dGVyaW5nLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaW5lU3RyaW5nR2VvbWV0cnkoXG4gIGJ1aWxkZXJHcm91cCxcbiAgZ2VvbWV0cnksXG4gIHN0eWxlLFxuICBmZWF0dXJlLFxuICBkZWNsdXR0ZXJCdWlsZGVyR3JvdXBcbikge1xuICBjb25zdCBzdHJva2VTdHlsZSA9IHN0eWxlLmdldFN0cm9rZSgpO1xuICBpZiAoc3Ryb2tlU3R5bGUpIHtcbiAgICBjb25zdCBsaW5lU3RyaW5nUmVwbGF5ID0gYnVpbGRlckdyb3VwLmdldEJ1aWxkZXIoXG4gICAgICBzdHlsZS5nZXRaSW5kZXgoKSxcbiAgICAgICdMaW5lU3RyaW5nJ1xuICAgICk7XG4gICAgbGluZVN0cmluZ1JlcGxheS5zZXRGaWxsU3Ryb2tlU3R5bGUobnVsbCwgc3Ryb2tlU3R5bGUpO1xuICAgIGxpbmVTdHJpbmdSZXBsYXkuZHJhd0xpbmVTdHJpbmcoZ2VvbWV0cnksIGZlYXR1cmUpO1xuICB9XG4gIGNvbnN0IHRleHRTdHlsZSA9IHN0eWxlLmdldFRleHQoKTtcbiAgaWYgKHRleHRTdHlsZSAmJiB0ZXh0U3R5bGUuZ2V0VGV4dCgpKSB7XG4gICAgY29uc3QgdGV4dFJlcGxheSA9IChkZWNsdXR0ZXJCdWlsZGVyR3JvdXAgfHwgYnVpbGRlckdyb3VwKS5nZXRCdWlsZGVyKFxuICAgICAgc3R5bGUuZ2V0WkluZGV4KCksXG4gICAgICAnVGV4dCdcbiAgICApO1xuICAgIHRleHRSZXBsYXkuc2V0VGV4dFN0eWxlKHRleHRTdHlsZSk7XG4gICAgdGV4dFJlcGxheS5kcmF3VGV4dChnZW9tZXRyeSwgZmVhdHVyZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3JlbmRlci9jYW52YXMvQnVpbGRlckdyb3VwLmpzXCIpLmRlZmF1bHR9IGJ1aWxkZXJHcm91cCBSZXBsYXkgZ3JvdXAuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dlb20vTXVsdGlMaW5lU3RyaW5nLmpzXCIpLmRlZmF1bHR8aW1wb3J0KFwiLi4vcmVuZGVyL0ZlYXR1cmUuanNcIikuZGVmYXVsdH0gZ2VvbWV0cnkgR2VvbWV0cnkuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3N0eWxlL1N0eWxlLmpzXCIpLmRlZmF1bHR9IHN0eWxlIFN0eWxlLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlfSBmZWF0dXJlIEZlYXR1cmUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3JlbmRlci9jYW52YXMvQnVpbGRlckdyb3VwLmpzXCIpLmRlZmF1bHR9IFtkZWNsdXR0ZXJCdWlsZGVyR3JvdXBdIEJ1aWxkZXIgZm9yIGRlY2x1dHRlcmluZy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTXVsdGlMaW5lU3RyaW5nR2VvbWV0cnkoXG4gIGJ1aWxkZXJHcm91cCxcbiAgZ2VvbWV0cnksXG4gIHN0eWxlLFxuICBmZWF0dXJlLFxuICBkZWNsdXR0ZXJCdWlsZGVyR3JvdXBcbikge1xuICBjb25zdCBzdHJva2VTdHlsZSA9IHN0eWxlLmdldFN0cm9rZSgpO1xuICBpZiAoc3Ryb2tlU3R5bGUpIHtcbiAgICBjb25zdCBsaW5lU3RyaW5nUmVwbGF5ID0gYnVpbGRlckdyb3VwLmdldEJ1aWxkZXIoXG4gICAgICBzdHlsZS5nZXRaSW5kZXgoKSxcbiAgICAgICdMaW5lU3RyaW5nJ1xuICAgICk7XG4gICAgbGluZVN0cmluZ1JlcGxheS5zZXRGaWxsU3Ryb2tlU3R5bGUobnVsbCwgc3Ryb2tlU3R5bGUpO1xuICAgIGxpbmVTdHJpbmdSZXBsYXkuZHJhd011bHRpTGluZVN0cmluZyhnZW9tZXRyeSwgZmVhdHVyZSk7XG4gIH1cbiAgY29uc3QgdGV4dFN0eWxlID0gc3R5bGUuZ2V0VGV4dCgpO1xuICBpZiAodGV4dFN0eWxlICYmIHRleHRTdHlsZS5nZXRUZXh0KCkpIHtcbiAgICBjb25zdCB0ZXh0UmVwbGF5ID0gKGRlY2x1dHRlckJ1aWxkZXJHcm91cCB8fCBidWlsZGVyR3JvdXApLmdldEJ1aWxkZXIoXG4gICAgICBzdHlsZS5nZXRaSW5kZXgoKSxcbiAgICAgICdUZXh0J1xuICAgICk7XG4gICAgdGV4dFJlcGxheS5zZXRUZXh0U3R5bGUodGV4dFN0eWxlKTtcbiAgICB0ZXh0UmVwbGF5LmRyYXdUZXh0KGdlb21ldHJ5LCBmZWF0dXJlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gYnVpbGRlckdyb3VwIFJlcGxheSBncm91cC5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZ2VvbS9NdWx0aVBvbHlnb24uanNcIikuZGVmYXVsdH0gZ2VvbWV0cnkgR2VvbWV0cnkuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3N0eWxlL1N0eWxlLmpzXCIpLmRlZmF1bHR9IHN0eWxlIFN0eWxlLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHR9IGZlYXR1cmUgRmVhdHVyZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gW2RlY2x1dHRlckJ1aWxkZXJHcm91cF0gQnVpbGRlciBmb3IgZGVjbHV0dGVyaW5nLlxuICovXG5mdW5jdGlvbiByZW5kZXJNdWx0aVBvbHlnb25HZW9tZXRyeShcbiAgYnVpbGRlckdyb3VwLFxuICBnZW9tZXRyeSxcbiAgc3R5bGUsXG4gIGZlYXR1cmUsXG4gIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuKSB7XG4gIGNvbnN0IGZpbGxTdHlsZSA9IHN0eWxlLmdldEZpbGwoKTtcbiAgY29uc3Qgc3Ryb2tlU3R5bGUgPSBzdHlsZS5nZXRTdHJva2UoKTtcbiAgaWYgKHN0cm9rZVN0eWxlIHx8IGZpbGxTdHlsZSkge1xuICAgIGNvbnN0IHBvbHlnb25SZXBsYXkgPSBidWlsZGVyR3JvdXAuZ2V0QnVpbGRlcihzdHlsZS5nZXRaSW5kZXgoKSwgJ1BvbHlnb24nKTtcbiAgICBwb2x5Z29uUmVwbGF5LnNldEZpbGxTdHJva2VTdHlsZShmaWxsU3R5bGUsIHN0cm9rZVN0eWxlKTtcbiAgICBwb2x5Z29uUmVwbGF5LmRyYXdNdWx0aVBvbHlnb24oZ2VvbWV0cnksIGZlYXR1cmUpO1xuICB9XG4gIGNvbnN0IHRleHRTdHlsZSA9IHN0eWxlLmdldFRleHQoKTtcbiAgaWYgKHRleHRTdHlsZSAmJiB0ZXh0U3R5bGUuZ2V0VGV4dCgpKSB7XG4gICAgY29uc3QgdGV4dFJlcGxheSA9IChkZWNsdXR0ZXJCdWlsZGVyR3JvdXAgfHwgYnVpbGRlckdyb3VwKS5nZXRCdWlsZGVyKFxuICAgICAgc3R5bGUuZ2V0WkluZGV4KCksXG4gICAgICAnVGV4dCdcbiAgICApO1xuICAgIHRleHRSZXBsYXkuc2V0VGV4dFN0eWxlKHRleHRTdHlsZSk7XG4gICAgdGV4dFJlcGxheS5kcmF3VGV4dChnZW9tZXRyeSwgZmVhdHVyZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3JlbmRlci9jYW52YXMvQnVpbGRlckdyb3VwLmpzXCIpLmRlZmF1bHR9IGJ1aWxkZXJHcm91cCBSZXBsYXkgZ3JvdXAuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dlb20vUG9pbnQuanNcIikuZGVmYXVsdHxpbXBvcnQoXCIuLi9yZW5kZXIvRmVhdHVyZS5qc1wiKS5kZWZhdWx0fSBnZW9tZXRyeSBHZW9tZXRyeS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vc3R5bGUvU3R5bGUuanNcIikuZGVmYXVsdH0gc3R5bGUgU3R5bGUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gW2RlY2x1dHRlckJ1aWxkZXJHcm91cF0gQnVpbGRlciBmb3IgZGVjbHV0dGVyaW5nLlxuICovXG5mdW5jdGlvbiByZW5kZXJQb2ludEdlb21ldHJ5KFxuICBidWlsZGVyR3JvdXAsXG4gIGdlb21ldHJ5LFxuICBzdHlsZSxcbiAgZmVhdHVyZSxcbiAgZGVjbHV0dGVyQnVpbGRlckdyb3VwXG4pIHtcbiAgY29uc3QgaW1hZ2VTdHlsZSA9IHN0eWxlLmdldEltYWdlKCk7XG4gIGNvbnN0IHRleHRTdHlsZSA9IHN0eWxlLmdldFRleHQoKTtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzLmpzXCIpLkRlY2x1dHRlckltYWdlV2l0aFRleHR9ICovXG4gIGxldCBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0O1xuICBpZiAoaW1hZ2VTdHlsZSkge1xuICAgIGlmIChpbWFnZVN0eWxlLmdldEltYWdlU3RhdGUoKSAhPSBJbWFnZVN0YXRlLkxPQURFRCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgaW1hZ2VCdWlsZGVyR3JvdXAgPSBidWlsZGVyR3JvdXA7XG4gICAgaWYgKGRlY2x1dHRlckJ1aWxkZXJHcm91cCkge1xuICAgICAgY29uc3QgZGVjbHV0dGVyTW9kZSA9IGltYWdlU3R5bGUuZ2V0RGVjbHV0dGVyTW9kZSgpO1xuICAgICAgaWYgKGRlY2x1dHRlck1vZGUgIT09ICdub25lJykge1xuICAgICAgICBpbWFnZUJ1aWxkZXJHcm91cCA9IGRlY2x1dHRlckJ1aWxkZXJHcm91cDtcbiAgICAgICAgaWYgKGRlY2x1dHRlck1vZGUgPT09ICdvYnN0YWNsZScpIHtcbiAgICAgICAgICAvLyBkcmF3IGluIG5vbi1kZWNsdXR0ZXIgZ3JvdXA6XG4gICAgICAgICAgY29uc3QgaW1hZ2VSZXBsYXkgPSBidWlsZGVyR3JvdXAuZ2V0QnVpbGRlcihcbiAgICAgICAgICAgIHN0eWxlLmdldFpJbmRleCgpLFxuICAgICAgICAgICAgJ0ltYWdlJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgaW1hZ2VSZXBsYXkuc2V0SW1hZ2VTdHlsZShpbWFnZVN0eWxlLCBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0KTtcbiAgICAgICAgICBpbWFnZVJlcGxheS5kcmF3UG9pbnQoZ2VvbWV0cnksIGZlYXR1cmUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRleHRTdHlsZSAmJiB0ZXh0U3R5bGUuZ2V0VGV4dCgpKSB7XG4gICAgICAgICAgZGVjbHV0dGVySW1hZ2VXaXRoVGV4dCA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGltYWdlUmVwbGF5ID0gaW1hZ2VCdWlsZGVyR3JvdXAuZ2V0QnVpbGRlcihcbiAgICAgIHN0eWxlLmdldFpJbmRleCgpLFxuICAgICAgJ0ltYWdlJ1xuICAgICk7XG4gICAgaW1hZ2VSZXBsYXkuc2V0SW1hZ2VTdHlsZShpbWFnZVN0eWxlLCBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0KTtcbiAgICBpbWFnZVJlcGxheS5kcmF3UG9pbnQoZ2VvbWV0cnksIGZlYXR1cmUpO1xuICB9XG4gIGlmICh0ZXh0U3R5bGUgJiYgdGV4dFN0eWxlLmdldFRleHQoKSkge1xuICAgIGxldCB0ZXh0QnVpbGRlckdyb3VwID0gYnVpbGRlckdyb3VwO1xuICAgIGlmIChkZWNsdXR0ZXJCdWlsZGVyR3JvdXApIHtcbiAgICAgIHRleHRCdWlsZGVyR3JvdXAgPSBkZWNsdXR0ZXJCdWlsZGVyR3JvdXA7XG4gICAgfVxuICAgIGNvbnN0IHRleHRSZXBsYXkgPSB0ZXh0QnVpbGRlckdyb3VwLmdldEJ1aWxkZXIoc3R5bGUuZ2V0WkluZGV4KCksICdUZXh0Jyk7XG4gICAgdGV4dFJlcGxheS5zZXRUZXh0U3R5bGUodGV4dFN0eWxlLCBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0KTtcbiAgICB0ZXh0UmVwbGF5LmRyYXdUZXh0KGdlb21ldHJ5LCBmZWF0dXJlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gYnVpbGRlckdyb3VwIFJlcGxheSBncm91cC5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZ2VvbS9NdWx0aVBvaW50LmpzXCIpLmRlZmF1bHR8aW1wb3J0KFwiLi4vcmVuZGVyL0ZlYXR1cmUuanNcIikuZGVmYXVsdH0gZ2VvbWV0cnkgR2VvbWV0cnkuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3N0eWxlL1N0eWxlLmpzXCIpLmRlZmF1bHR9IHN0eWxlIFN0eWxlLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLkZlYXR1cmVMaWtlfSBmZWF0dXJlIEZlYXR1cmUuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3JlbmRlci9jYW52YXMvQnVpbGRlckdyb3VwLmpzXCIpLmRlZmF1bHR9IFtkZWNsdXR0ZXJCdWlsZGVyR3JvdXBdIEJ1aWxkZXIgZm9yIGRlY2x1dHRlcmluZy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTXVsdGlQb2ludEdlb21ldHJ5KFxuICBidWlsZGVyR3JvdXAsXG4gIGdlb21ldHJ5LFxuICBzdHlsZSxcbiAgZmVhdHVyZSxcbiAgZGVjbHV0dGVyQnVpbGRlckdyb3VwXG4pIHtcbiAgY29uc3QgaW1hZ2VTdHlsZSA9IHN0eWxlLmdldEltYWdlKCk7XG4gIGNvbnN0IHRleHRTdHlsZSA9IHN0eWxlLmdldFRleHQoKTtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzLmpzXCIpLkRlY2x1dHRlckltYWdlV2l0aFRleHR9ICovXG4gIGxldCBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0O1xuICBpZiAoaW1hZ2VTdHlsZSkge1xuICAgIGlmIChpbWFnZVN0eWxlLmdldEltYWdlU3RhdGUoKSAhPSBJbWFnZVN0YXRlLkxPQURFRCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgaW1hZ2VCdWlsZGVyR3JvdXAgPSBidWlsZGVyR3JvdXA7XG4gICAgaWYgKGRlY2x1dHRlckJ1aWxkZXJHcm91cCkge1xuICAgICAgY29uc3QgZGVjbHV0dGVyTW9kZSA9IGltYWdlU3R5bGUuZ2V0RGVjbHV0dGVyTW9kZSgpO1xuICAgICAgaWYgKGRlY2x1dHRlck1vZGUgIT09ICdub25lJykge1xuICAgICAgICBpbWFnZUJ1aWxkZXJHcm91cCA9IGRlY2x1dHRlckJ1aWxkZXJHcm91cDtcbiAgICAgICAgaWYgKGRlY2x1dHRlck1vZGUgPT09ICdvYnN0YWNsZScpIHtcbiAgICAgICAgICAvLyBkcmF3IGluIG5vbi1kZWNsdXR0ZXIgZ3JvdXA6XG4gICAgICAgICAgY29uc3QgaW1hZ2VSZXBsYXkgPSBidWlsZGVyR3JvdXAuZ2V0QnVpbGRlcihcbiAgICAgICAgICAgIHN0eWxlLmdldFpJbmRleCgpLFxuICAgICAgICAgICAgJ0ltYWdlJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgaW1hZ2VSZXBsYXkuc2V0SW1hZ2VTdHlsZShpbWFnZVN0eWxlLCBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0KTtcbiAgICAgICAgICBpbWFnZVJlcGxheS5kcmF3TXVsdGlQb2ludChnZW9tZXRyeSwgZmVhdHVyZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dFN0eWxlICYmIHRleHRTdHlsZS5nZXRUZXh0KCkpIHtcbiAgICAgICAgICBkZWNsdXR0ZXJJbWFnZVdpdGhUZXh0ID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW1hZ2VSZXBsYXkgPSBpbWFnZUJ1aWxkZXJHcm91cC5nZXRCdWlsZGVyKFxuICAgICAgc3R5bGUuZ2V0WkluZGV4KCksXG4gICAgICAnSW1hZ2UnXG4gICAgKTtcbiAgICBpbWFnZVJlcGxheS5zZXRJbWFnZVN0eWxlKGltYWdlU3R5bGUsIGRlY2x1dHRlckltYWdlV2l0aFRleHQpO1xuICAgIGltYWdlUmVwbGF5LmRyYXdNdWx0aVBvaW50KGdlb21ldHJ5LCBmZWF0dXJlKTtcbiAgfVxuICBpZiAodGV4dFN0eWxlICYmIHRleHRTdHlsZS5nZXRUZXh0KCkpIHtcbiAgICBsZXQgdGV4dEJ1aWxkZXJHcm91cCA9IGJ1aWxkZXJHcm91cDtcbiAgICBpZiAoZGVjbHV0dGVyQnVpbGRlckdyb3VwKSB7XG4gICAgICB0ZXh0QnVpbGRlckdyb3VwID0gZGVjbHV0dGVyQnVpbGRlckdyb3VwO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0UmVwbGF5ID0gdGV4dEJ1aWxkZXJHcm91cC5nZXRCdWlsZGVyKHN0eWxlLmdldFpJbmRleCgpLCAnVGV4dCcpO1xuICAgIHRleHRSZXBsYXkuc2V0VGV4dFN0eWxlKHRleHRTdHlsZSwgZGVjbHV0dGVySW1hZ2VXaXRoVGV4dCk7XG4gICAgdGV4dFJlcGxheS5kcmF3VGV4dChnZW9tZXRyeSwgZmVhdHVyZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL3JlbmRlci9jYW52YXMvQnVpbGRlckdyb3VwLmpzXCIpLmRlZmF1bHR9IGJ1aWxkZXJHcm91cCBSZXBsYXkgZ3JvdXAuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dlb20vUG9seWdvbi5qc1wiKS5kZWZhdWx0fGltcG9ydChcIi4uL3JlbmRlci9GZWF0dXJlLmpzXCIpLmRlZmF1bHR9IGdlb21ldHJ5IEdlb21ldHJ5LlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9zdHlsZS9TdHlsZS5qc1wiKS5kZWZhdWx0fSBzdHlsZSBTdHlsZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5GZWF0dXJlTGlrZX0gZmVhdHVyZSBGZWF0dXJlLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuLi9yZW5kZXIvY2FudmFzL0J1aWxkZXJHcm91cC5qc1wiKS5kZWZhdWx0fSBbZGVjbHV0dGVyQnVpbGRlckdyb3VwXSBCdWlsZGVyIGZvciBkZWNsdXR0ZXJpbmcuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclBvbHlnb25HZW9tZXRyeShcbiAgYnVpbGRlckdyb3VwLFxuICBnZW9tZXRyeSxcbiAgc3R5bGUsXG4gIGZlYXR1cmUsXG4gIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuKSB7XG4gIGNvbnN0IGZpbGxTdHlsZSA9IHN0eWxlLmdldEZpbGwoKTtcbiAgY29uc3Qgc3Ryb2tlU3R5bGUgPSBzdHlsZS5nZXRTdHJva2UoKTtcbiAgaWYgKGZpbGxTdHlsZSB8fCBzdHJva2VTdHlsZSkge1xuICAgIGNvbnN0IHBvbHlnb25SZXBsYXkgPSBidWlsZGVyR3JvdXAuZ2V0QnVpbGRlcihzdHlsZS5nZXRaSW5kZXgoKSwgJ1BvbHlnb24nKTtcbiAgICBwb2x5Z29uUmVwbGF5LnNldEZpbGxTdHJva2VTdHlsZShmaWxsU3R5bGUsIHN0cm9rZVN0eWxlKTtcbiAgICBwb2x5Z29uUmVwbGF5LmRyYXdQb2x5Z29uKGdlb21ldHJ5LCBmZWF0dXJlKTtcbiAgfVxuICBjb25zdCB0ZXh0U3R5bGUgPSBzdHlsZS5nZXRUZXh0KCk7XG4gIGlmICh0ZXh0U3R5bGUgJiYgdGV4dFN0eWxlLmdldFRleHQoKSkge1xuICAgIGNvbnN0IHRleHRSZXBsYXkgPSAoZGVjbHV0dGVyQnVpbGRlckdyb3VwIHx8IGJ1aWxkZXJHcm91cCkuZ2V0QnVpbGRlcihcbiAgICAgIHN0eWxlLmdldFpJbmRleCgpLFxuICAgICAgJ1RleHQnXG4gICAgKTtcbiAgICB0ZXh0UmVwbGF5LnNldFRleHRTdHlsZSh0ZXh0U3R5bGUpO1xuICAgIHRleHRSZXBsYXkuZHJhd1RleHQoZ2VvbWV0cnksIGZlYXR1cmUpO1xuICB9XG59XG4iLCIvKipcbiAqIEBtb2R1bGUgb2wvcmVuZGVyZXIvY2FudmFzL1ZlY3RvckxheWVyXG4gKi9cbmltcG9ydCBDYW52YXNCdWlsZGVyR3JvdXAgZnJvbSAnLi4vLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanMnO1xuaW1wb3J0IENhbnZhc0xheWVyUmVuZGVyZXIsIHtjYW52YXNQb29sfSBmcm9tICcuL0xheWVyLmpzJztcbmltcG9ydCBFeGVjdXRvckdyb3VwIGZyb20gJy4uLy4uL3JlbmRlci9jYW52YXMvRXhlY3V0b3JHcm91cC5qcyc7XG5pbXBvcnQgVmlld0hpbnQgZnJvbSAnLi4vLi4vVmlld0hpbnQuanMnO1xuaW1wb3J0IHtcbiAgSElUX0RFVEVDVF9SRVNPTFVUSU9OLFxuICBjcmVhdGVIaXREZXRlY3Rpb25JbWFnZURhdGEsXG4gIGhpdERldGVjdCxcbn0gZnJvbSAnLi4vLi4vcmVuZGVyL2NhbnZhcy9oaXRkZXRlY3QuanMnO1xuaW1wb3J0IHtcbiAgYXBwbHksXG4gIG1ha2VJbnZlcnNlLFxuICBtYWtlU2NhbGUsXG4gIHRvU3RyaW5nIGFzIHRyYW5zZm9ybVRvU3RyaW5nLFxufSBmcm9tICcuLi8uLi90cmFuc2Zvcm0uanMnO1xuaW1wb3J0IHtcbiAgYnVmZmVyLFxuICBjb250YWluc0V4dGVudCxcbiAgY3JlYXRlRW1wdHksXG4gIGdldFdpZHRoLFxuICBpbnRlcnNlY3RzIGFzIGludGVyc2VjdHNFeHRlbnQsXG4gIHdyYXBYIGFzIHdyYXBFeHRlbnRYLFxufSBmcm9tICcuLi8uLi9leHRlbnQuanMnO1xuaW1wb3J0IHtjcmVhdGVDYW52YXNDb250ZXh0MkQsIHJlbGVhc2VDYW52YXN9IGZyb20gJy4uLy4uL2RvbS5qcyc7XG5pbXBvcnQge1xuICBkZWZhdWx0T3JkZXIgYXMgZGVmYXVsdFJlbmRlck9yZGVyLFxuICBnZXRUb2xlcmFuY2UgYXMgZ2V0UmVuZGVyVG9sZXJhbmNlLFxuICBnZXRTcXVhcmVkVG9sZXJhbmNlIGFzIGdldFNxdWFyZWRSZW5kZXJUb2xlcmFuY2UsXG4gIHJlbmRlckZlYXR1cmUsXG59IGZyb20gJy4uL3ZlY3Rvci5qcyc7XG5pbXBvcnQge2VxdWFsc30gZnJvbSAnLi4vLi4vYXJyYXkuanMnO1xuaW1wb3J0IHtcbiAgZnJvbVVzZXJFeHRlbnQsXG4gIGdldFRyYW5zZm9ybUZyb21Qcm9qZWN0aW9ucyxcbiAgZ2V0VXNlclByb2plY3Rpb24sXG4gIHRvVXNlckV4dGVudCxcbiAgdG9Vc2VyUmVzb2x1dGlvbixcbn0gZnJvbSAnLi4vLi4vcHJvai5qcyc7XG5pbXBvcnQge2dldFVpZH0gZnJvbSAnLi4vLi4vdXRpbC5qcyc7XG5pbXBvcnQge3dyYXBYIGFzIHdyYXBDb29yZGluYXRlWH0gZnJvbSAnLi4vLi4vY29vcmRpbmF0ZS5qcyc7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogQ2FudmFzIHJlbmRlcmVyIGZvciB2ZWN0b3IgbGF5ZXJzLlxuICogQGFwaVxuICovXG5jbGFzcyBDYW52YXNWZWN0b3JMYXllclJlbmRlcmVyIGV4dGVuZHMgQ2FudmFzTGF5ZXJSZW5kZXJlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL2xheWVyL0Jhc2VWZWN0b3IuanNcIikuZGVmYXVsdH0gdmVjdG9yTGF5ZXIgVmVjdG9yIGxheWVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IodmVjdG9yTGF5ZXIpIHtcbiAgICBzdXBlcih2ZWN0b3JMYXllcik7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLmJvdW5kSGFuZGxlU3R5bGVJbWFnZUNoYW5nZV8gPSB0aGlzLmhhbmRsZVN0eWxlSW1hZ2VDaGFuZ2VfLmJpbmQodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmFuaW1hdGluZ09ySW50ZXJhY3RpbmdfO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0ltYWdlRGF0YXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuaGl0RGV0ZWN0aW9uSW1hZ2VEYXRhXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8aW1wb3J0KFwiLi4vLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0Pn1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVkRmVhdHVyZXNfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVkUmV2aXNpb25fID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZW5kZXJlZFJlc29sdXRpb25fID0gTmFOO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vZXh0ZW50LmpzXCIpLkV4dGVudH1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVkRXh0ZW50XyA9IGNyZWF0ZUVtcHR5KCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9leHRlbnQuanNcIikuRXh0ZW50fVxuICAgICAqL1xuICAgIHRoaXMud3JhcHBlZFJlbmRlcmVkRXh0ZW50XyA9IGNyZWF0ZUVtcHR5KCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZW5kZXJlZFJvdGF0aW9uXztcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2ltcG9ydChcIi4uLy4uL2Nvb3JkaW5hdGVcIikuQ29vcmRpbmF0ZX1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVkQ2VudGVyXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9wcm9qL1Byb2plY3Rpb25cIikuZGVmYXVsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVkUHJvamVjdGlvbl8gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oaW1wb3J0KFwiLi4vLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0LCBpbXBvcnQoXCIuLi8uLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHQpOiBudW1iZXJ8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVkUmVuZGVyT3JkZXJfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2ltcG9ydChcIi4uLy4uL3JlbmRlci9jYW52YXMvRXhlY3V0b3JHcm91cFwiKS5kZWZhdWx0fVxuICAgICAqL1xuICAgIHRoaXMucmVwbGF5R3JvdXBfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbmV3IHJlcGxheSBncm91cCBoYWQgdG8gYmUgY3JlYXRlZCBieSBgcHJlcGFyZUZyYW1lKClgXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXBsYXlHcm91cENoYW5nZWQgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2ltcG9ydChcIi4uLy4uL3JlbmRlci9jYW52YXMvRXhlY3V0b3JHcm91cFwiKS5kZWZhdWx0fVxuICAgICAqL1xuICAgIHRoaXMuZGVjbHV0dGVyRXhlY3V0b3JHcm91cCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDbGlwcGluZyB0byBiZSBwZXJmb3JtZWQgYnkgYHJlbmRlckZyYW1lKClgXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5jbGlwcGluZyA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG4gICAgdGhpcy5jb21wb3NpdGlvbkNvbnRleHRfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLm9wYWNpdHlfID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0V4ZWN1dG9yR3JvdXB9IGV4ZWN1dG9yR3JvdXAgRXhlY3V0b3IgZ3JvdXAuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vTWFwLmpzXCIpLkZyYW1lU3RhdGV9IGZyYW1lU3RhdGUgRnJhbWUgc3RhdGUuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwicmJ1c2hcIikuZGVmYXVsdH0gW2RlY2x1dHRlclRyZWVdIERlY2x1dHRlciB0cmVlLlxuICAgKi9cbiAgcmVuZGVyV29ybGRzKGV4ZWN1dG9yR3JvdXAsIGZyYW1lU3RhdGUsIGRlY2x1dHRlclRyZWUpIHtcbiAgICBjb25zdCBleHRlbnQgPSBmcmFtZVN0YXRlLmV4dGVudDtcbiAgICBjb25zdCB2aWV3U3RhdGUgPSBmcmFtZVN0YXRlLnZpZXdTdGF0ZTtcbiAgICBjb25zdCBjZW50ZXIgPSB2aWV3U3RhdGUuY2VudGVyO1xuICAgIGNvbnN0IHJlc29sdXRpb24gPSB2aWV3U3RhdGUucmVzb2x1dGlvbjtcbiAgICBjb25zdCBwcm9qZWN0aW9uID0gdmlld1N0YXRlLnByb2plY3Rpb247XG4gICAgY29uc3Qgcm90YXRpb24gPSB2aWV3U3RhdGUucm90YXRpb247XG4gICAgY29uc3QgcHJvamVjdGlvbkV4dGVudCA9IHByb2plY3Rpb24uZ2V0RXh0ZW50KCk7XG4gICAgY29uc3QgdmVjdG9yU291cmNlID0gdGhpcy5nZXRMYXllcigpLmdldFNvdXJjZSgpO1xuICAgIGNvbnN0IHBpeGVsUmF0aW8gPSBmcmFtZVN0YXRlLnBpeGVsUmF0aW87XG4gICAgY29uc3Qgdmlld0hpbnRzID0gZnJhbWVTdGF0ZS52aWV3SGludHM7XG4gICAgY29uc3Qgc25hcFRvUGl4ZWwgPSAhKFxuICAgICAgdmlld0hpbnRzW1ZpZXdIaW50LkFOSU1BVElOR10gfHwgdmlld0hpbnRzW1ZpZXdIaW50LklOVEVSQUNUSU5HXVxuICAgICk7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29tcG9zaXRpb25Db250ZXh0XztcbiAgICBjb25zdCB3aWR0aCA9IE1hdGgucm91bmQoZnJhbWVTdGF0ZS5zaXplWzBdICogcGl4ZWxSYXRpbyk7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5yb3VuZChmcmFtZVN0YXRlLnNpemVbMV0gKiBwaXhlbFJhdGlvKTtcblxuICAgIGNvbnN0IG11bHRpV29ybGQgPSB2ZWN0b3JTb3VyY2UuZ2V0V3JhcFgoKSAmJiBwcm9qZWN0aW9uLmNhbldyYXBYKCk7XG4gICAgY29uc3Qgd29ybGRXaWR0aCA9IG11bHRpV29ybGQgPyBnZXRXaWR0aChwcm9qZWN0aW9uRXh0ZW50KSA6IG51bGw7XG4gICAgY29uc3QgZW5kV29ybGQgPSBtdWx0aVdvcmxkXG4gICAgICA/IE1hdGguY2VpbCgoZXh0ZW50WzJdIC0gcHJvamVjdGlvbkV4dGVudFsyXSkgLyB3b3JsZFdpZHRoKSArIDFcbiAgICAgIDogMTtcbiAgICBsZXQgd29ybGQgPSBtdWx0aVdvcmxkXG4gICAgICA/IE1hdGguZmxvb3IoKGV4dGVudFswXSAtIHByb2plY3Rpb25FeHRlbnRbMF0pIC8gd29ybGRXaWR0aClcbiAgICAgIDogMDtcbiAgICBkbyB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0aGlzLmdldFJlbmRlclRyYW5zZm9ybShcbiAgICAgICAgY2VudGVyLFxuICAgICAgICByZXNvbHV0aW9uLFxuICAgICAgICByb3RhdGlvbixcbiAgICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgd29ybGQgKiB3b3JsZFdpZHRoXG4gICAgICApO1xuICAgICAgZXhlY3V0b3JHcm91cC5leGVjdXRlKFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICAxLFxuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIHJvdGF0aW9uLFxuICAgICAgICBzbmFwVG9QaXhlbCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBkZWNsdXR0ZXJUcmVlXG4gICAgICApO1xuICAgIH0gd2hpbGUgKCsrd29ybGQgPCBlbmRXb3JsZCk7XG4gIH1cblxuICBzZXR1cENvbXBvc2l0aW9uQ29udGV4dF8oKSB7XG4gICAgaWYgKHRoaXMub3BhY2l0eV8gIT09IDEpIHtcbiAgICAgIGNvbnN0IGNvbXBvc2l0aW9uQ29udGV4dCA9IGNyZWF0ZUNhbnZhc0NvbnRleHQyRChcbiAgICAgICAgdGhpcy5jb250ZXh0LmNhbnZhcy53aWR0aCxcbiAgICAgICAgdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHQsXG4gICAgICAgIGNhbnZhc1Bvb2xcbiAgICAgICk7XG4gICAgICB0aGlzLmNvbXBvc2l0aW9uQ29udGV4dF8gPSBjb21wb3NpdGlvbkNvbnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29tcG9zaXRpb25Db250ZXh0XyA9IHRoaXMuY29udGV4dDtcbiAgICB9XG4gIH1cblxuICByZWxlYXNlQ29tcG9zaXRpb25Db250ZXh0XygpIHtcbiAgICBpZiAodGhpcy5vcGFjaXR5XyAhPT0gMSkge1xuICAgICAgY29uc3QgYWxwaGEgPSB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSB0aGlzLm9wYWNpdHlfO1xuICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNvbXBvc2l0aW9uQ29udGV4dF8uY2FudmFzLCAwLCAwKTtcbiAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IGFscGhhO1xuICAgICAgcmVsZWFzZUNhbnZhcyh0aGlzLmNvbXBvc2l0aW9uQ29udGV4dF8pO1xuICAgICAgY2FudmFzUG9vbC5wdXNoKHRoaXMuY29tcG9zaXRpb25Db250ZXh0Xy5jYW52YXMpO1xuICAgICAgdGhpcy5jb21wb3NpdGlvbkNvbnRleHRfID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGRlY2x1dHRlciBpdGVtcyBmb3IgdGhpcyBsYXllclxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL01hcC5qc1wiKS5GcmFtZVN0YXRlfSBmcmFtZVN0YXRlIEZyYW1lIHN0YXRlLlxuICAgKi9cbiAgcmVuZGVyRGVjbHV0dGVyKGZyYW1lU3RhdGUpIHtcbiAgICBpZiAodGhpcy5kZWNsdXR0ZXJFeGVjdXRvckdyb3VwKSB7XG4gICAgICB0aGlzLnNldHVwQ29tcG9zaXRpb25Db250ZXh0XygpO1xuICAgICAgdGhpcy5yZW5kZXJXb3JsZHMoXG4gICAgICAgIHRoaXMuZGVjbHV0dGVyRXhlY3V0b3JHcm91cCxcbiAgICAgICAgZnJhbWVTdGF0ZSxcbiAgICAgICAgZnJhbWVTdGF0ZS5kZWNsdXR0ZXJUcmVlXG4gICAgICApO1xuICAgICAgdGhpcy5yZWxlYXNlQ29tcG9zaXRpb25Db250ZXh0XygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGxheWVyLlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL01hcC5qc1wiKS5GcmFtZVN0YXRlfSBmcmFtZVN0YXRlIEZyYW1lIHN0YXRlLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgVGFyZ2V0IHRoYXQgbWF5IGJlIHVzZWQgdG8gcmVuZGVyIGNvbnRlbnQgdG8uXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBUaGUgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIHJlbmRlckZyYW1lKGZyYW1lU3RhdGUsIHRhcmdldCkge1xuICAgIGNvbnN0IHBpeGVsUmF0aW8gPSBmcmFtZVN0YXRlLnBpeGVsUmF0aW87XG4gICAgY29uc3QgbGF5ZXJTdGF0ZSA9IGZyYW1lU3RhdGUubGF5ZXJTdGF0ZXNBcnJheVtmcmFtZVN0YXRlLmxheWVySW5kZXhdO1xuXG4gICAgLy8gc2V0IGZvcndhcmQgYW5kIGludmVyc2UgcGl4ZWwgdHJhbnNmb3Jtc1xuICAgIG1ha2VTY2FsZSh0aGlzLnBpeGVsVHJhbnNmb3JtLCAxIC8gcGl4ZWxSYXRpbywgMSAvIHBpeGVsUmF0aW8pO1xuICAgIG1ha2VJbnZlcnNlKHRoaXMuaW52ZXJzZVBpeGVsVHJhbnNmb3JtLCB0aGlzLnBpeGVsVHJhbnNmb3JtKTtcblxuICAgIGNvbnN0IGNhbnZhc1RyYW5zZm9ybSA9IHRyYW5zZm9ybVRvU3RyaW5nKHRoaXMucGl4ZWxUcmFuc2Zvcm0pO1xuXG4gICAgdGhpcy51c2VDb250YWluZXIodGFyZ2V0LCBjYW52YXNUcmFuc2Zvcm0sIHRoaXMuZ2V0QmFja2dyb3VuZChmcmFtZVN0YXRlKSk7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcblxuICAgIGNvbnN0IHJlcGxheUdyb3VwID0gdGhpcy5yZXBsYXlHcm91cF87XG4gICAgY29uc3QgZGVjbHV0dGVyRXhlY3V0b3JHcm91cCA9IHRoaXMuZGVjbHV0dGVyRXhlY3V0b3JHcm91cDtcbiAgICBpZiAoXG4gICAgICAoIXJlcGxheUdyb3VwIHx8IHJlcGxheUdyb3VwLmlzRW1wdHkoKSkgJiZcbiAgICAgICghZGVjbHV0dGVyRXhlY3V0b3JHcm91cCB8fCBkZWNsdXR0ZXJFeGVjdXRvckdyb3VwLmlzRW1wdHkoKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIHJlc2l6ZSBhbmQgY2xlYXJcbiAgICBjb25zdCB3aWR0aCA9IE1hdGgucm91bmQoZnJhbWVTdGF0ZS5zaXplWzBdICogcGl4ZWxSYXRpbyk7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5yb3VuZChmcmFtZVN0YXRlLnNpemVbMV0gKiBwaXhlbFJhdGlvKTtcbiAgICBpZiAoY2FudmFzLndpZHRoICE9IHdpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT0gaGVpZ2h0KSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBpZiAoY2FudmFzLnN0eWxlLnRyYW5zZm9ybSAhPT0gY2FudmFzVHJhbnNmb3JtKSB7XG4gICAgICAgIGNhbnZhcy5zdHlsZS50cmFuc2Zvcm0gPSBjYW52YXNUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5jb250YWluZXJSZXVzZWQpIHtcbiAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMucHJlUmVuZGVyKGNvbnRleHQsIGZyYW1lU3RhdGUpO1xuXG4gICAgY29uc3Qgdmlld1N0YXRlID0gZnJhbWVTdGF0ZS52aWV3U3RhdGU7XG4gICAgY29uc3QgcHJvamVjdGlvbiA9IHZpZXdTdGF0ZS5wcm9qZWN0aW9uO1xuXG4gICAgdGhpcy5vcGFjaXR5XyA9IGxheWVyU3RhdGUub3BhY2l0eTtcbiAgICB0aGlzLnNldHVwQ29tcG9zaXRpb25Db250ZXh0XygpO1xuXG4gICAgLy8gY2xpcHBlZCByZW5kZXJpbmcgaWYgbGF5ZXIgZXh0ZW50IGlzIHNldFxuICAgIGxldCBjbGlwcGVkID0gZmFsc2U7XG4gICAgbGV0IHJlbmRlciA9IHRydWU7XG4gICAgaWYgKGxheWVyU3RhdGUuZXh0ZW50ICYmIHRoaXMuY2xpcHBpbmcpIHtcbiAgICAgIGNvbnN0IGxheWVyRXh0ZW50ID0gZnJvbVVzZXJFeHRlbnQobGF5ZXJTdGF0ZS5leHRlbnQsIHByb2plY3Rpb24pO1xuICAgICAgcmVuZGVyID0gaW50ZXJzZWN0c0V4dGVudChsYXllckV4dGVudCwgZnJhbWVTdGF0ZS5leHRlbnQpO1xuICAgICAgY2xpcHBlZCA9IHJlbmRlciAmJiAhY29udGFpbnNFeHRlbnQobGF5ZXJFeHRlbnQsIGZyYW1lU3RhdGUuZXh0ZW50KTtcbiAgICAgIGlmIChjbGlwcGVkKSB7XG4gICAgICAgIHRoaXMuY2xpcFVucm90YXRlZCh0aGlzLmNvbXBvc2l0aW9uQ29udGV4dF8sIGZyYW1lU3RhdGUsIGxheWVyRXh0ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICB0aGlzLnJlbmRlcldvcmxkcyhyZXBsYXlHcm91cCwgZnJhbWVTdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNsaXBwZWQpIHtcbiAgICAgIHRoaXMuY29tcG9zaXRpb25Db250ZXh0Xy5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZWxlYXNlQ29tcG9zaXRpb25Db250ZXh0XygpO1xuXG4gICAgdGhpcy5wb3N0UmVuZGVyKGNvbnRleHQsIGZyYW1lU3RhdGUpO1xuXG4gICAgaWYgKHRoaXMucmVuZGVyZWRSb3RhdGlvbl8gIT09IHZpZXdTdGF0ZS5yb3RhdGlvbikge1xuICAgICAgdGhpcy5yZW5kZXJlZFJvdGF0aW9uXyA9IHZpZXdTdGF0ZS5yb3RhdGlvbjtcbiAgICAgIHRoaXMuaGl0RGV0ZWN0aW9uSW1hZ2VEYXRhXyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXMgbGF5ZXIgbGV2ZWwgaGl0IGRldGVjdGlvbi5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9waXhlbC5qc1wiKS5QaXhlbH0gcGl4ZWwgUGl4ZWwuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8aW1wb3J0KFwiLi4vLi4vRmVhdHVyZVwiKS5kZWZhdWx0Pj59IFByb21pc2VcbiAgICogdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIGZlYXR1cmVzLlxuICAgKi9cbiAgZ2V0RmVhdHVyZXMocGl4ZWwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGlmICghdGhpcy5oaXREZXRlY3Rpb25JbWFnZURhdGFfICYmICF0aGlzLmFuaW1hdGluZ09ySW50ZXJhY3RpbmdfKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBbdGhpcy5jb250ZXh0LmNhbnZhcy53aWR0aCwgdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHRdO1xuICAgICAgICBhcHBseSh0aGlzLnBpeGVsVHJhbnNmb3JtLCBzaXplKTtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5yZW5kZXJlZENlbnRlcl87XG4gICAgICAgIGNvbnN0IHJlc29sdXRpb24gPSB0aGlzLnJlbmRlcmVkUmVzb2x1dGlvbl87XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gdGhpcy5yZW5kZXJlZFJvdGF0aW9uXztcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbiA9IHRoaXMucmVuZGVyZWRQcm9qZWN0aW9uXztcbiAgICAgICAgY29uc3QgZXh0ZW50ID0gdGhpcy53cmFwcGVkUmVuZGVyZWRFeHRlbnRfO1xuICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtcyA9IFtdO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHNpemVbMF0gKiBISVRfREVURUNUX1JFU09MVVRJT047XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHNpemVbMV0gKiBISVRfREVURUNUX1JFU09MVVRJT047XG4gICAgICAgIHRyYW5zZm9ybXMucHVzaChcbiAgICAgICAgICB0aGlzLmdldFJlbmRlclRyYW5zZm9ybShcbiAgICAgICAgICAgIGNlbnRlcixcbiAgICAgICAgICAgIHJlc29sdXRpb24sXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIEhJVF9ERVRFQ1RfUkVTT0xVVElPTixcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgMFxuICAgICAgICAgICkuc2xpY2UoKVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBsYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbkV4dGVudCA9IHByb2plY3Rpb24uZ2V0RXh0ZW50KCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzb3VyY2UuZ2V0V3JhcFgoKSAmJlxuICAgICAgICAgIHByb2plY3Rpb24uY2FuV3JhcFgoKSAmJlxuICAgICAgICAgICFjb250YWluc0V4dGVudChwcm9qZWN0aW9uRXh0ZW50LCBleHRlbnQpXG4gICAgICAgICkge1xuICAgICAgICAgIGxldCBzdGFydFggPSBleHRlbnRbMF07XG4gICAgICAgICAgY29uc3Qgd29ybGRXaWR0aCA9IGdldFdpZHRoKHByb2plY3Rpb25FeHRlbnQpO1xuICAgICAgICAgIGxldCB3b3JsZCA9IDA7XG4gICAgICAgICAgbGV0IG9mZnNldFg7XG4gICAgICAgICAgd2hpbGUgKHN0YXJ0WCA8IHByb2plY3Rpb25FeHRlbnRbMF0pIHtcbiAgICAgICAgICAgIC0td29ybGQ7XG4gICAgICAgICAgICBvZmZzZXRYID0gd29ybGRXaWR0aCAqIHdvcmxkO1xuICAgICAgICAgICAgdHJhbnNmb3Jtcy5wdXNoKFxuICAgICAgICAgICAgICB0aGlzLmdldFJlbmRlclRyYW5zZm9ybShcbiAgICAgICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgICBISVRfREVURUNUX1JFU09MVVRJT04sXG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIG9mZnNldFhcbiAgICAgICAgICAgICAgKS5zbGljZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc3RhcnRYICs9IHdvcmxkV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdvcmxkID0gMDtcbiAgICAgICAgICBzdGFydFggPSBleHRlbnRbMl07XG4gICAgICAgICAgd2hpbGUgKHN0YXJ0WCA+IHByb2plY3Rpb25FeHRlbnRbMl0pIHtcbiAgICAgICAgICAgICsrd29ybGQ7XG4gICAgICAgICAgICBvZmZzZXRYID0gd29ybGRXaWR0aCAqIHdvcmxkO1xuICAgICAgICAgICAgdHJhbnNmb3Jtcy5wdXNoKFxuICAgICAgICAgICAgICB0aGlzLmdldFJlbmRlclRyYW5zZm9ybShcbiAgICAgICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgICBISVRfREVURUNUX1JFU09MVVRJT04sXG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIG9mZnNldFhcbiAgICAgICAgICAgICAgKS5zbGljZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc3RhcnRYIC09IHdvcmxkV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5oaXREZXRlY3Rpb25JbWFnZURhdGFfID0gY3JlYXRlSGl0RGV0ZWN0aW9uSW1hZ2VEYXRhKFxuICAgICAgICAgIHNpemUsXG4gICAgICAgICAgdHJhbnNmb3JtcyxcbiAgICAgICAgICB0aGlzLnJlbmRlcmVkRmVhdHVyZXNfLFxuICAgICAgICAgIGxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSxcbiAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgICByb3RhdGlvblxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShcbiAgICAgICAgaGl0RGV0ZWN0KHBpeGVsLCB0aGlzLnJlbmRlcmVkRmVhdHVyZXNfLCB0aGlzLmhpdERldGVjdGlvbkltYWdlRGF0YV8pXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfSBjb29yZGluYXRlIENvb3JkaW5hdGUuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vTWFwLmpzXCIpLkZyYW1lU3RhdGV9IGZyYW1lU3RhdGUgRnJhbWUgc3RhdGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoaXRUb2xlcmFuY2UgSGl0IHRvbGVyYW5jZSBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdmVjdG9yLmpzXCIpLkZlYXR1cmVDYWxsYmFjazxUPn0gY2FsbGJhY2sgRmVhdHVyZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtBcnJheTxpbXBvcnQoXCIuLi9NYXAuanNcIikuSGl0TWF0Y2g8VD4+fSBtYXRjaGVzIFRoZSBoaXQgZGV0ZWN0ZWQgbWF0Y2hlcyB3aXRoIHRvbGVyYW5jZS5cbiAgICogQHJldHVybiB7VHx1bmRlZmluZWR9IENhbGxiYWNrIHJlc3VsdC5cbiAgICogQHRlbXBsYXRlIFRcbiAgICovXG4gIGZvckVhY2hGZWF0dXJlQXRDb29yZGluYXRlKFxuICAgIGNvb3JkaW5hdGUsXG4gICAgZnJhbWVTdGF0ZSxcbiAgICBoaXRUb2xlcmFuY2UsXG4gICAgY2FsbGJhY2ssXG4gICAgbWF0Y2hlc1xuICApIHtcbiAgICBpZiAoIXRoaXMucmVwbGF5R3JvdXBfKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCByZXNvbHV0aW9uID0gZnJhbWVTdGF0ZS52aWV3U3RhdGUucmVzb2x1dGlvbjtcbiAgICBjb25zdCByb3RhdGlvbiA9IGZyYW1lU3RhdGUudmlld1N0YXRlLnJvdGF0aW9uO1xuICAgIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcigpO1xuXG4gICAgLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgaW1wb3J0KFwiLi4vTWFwLmpzXCIpLkhpdE1hdGNoPFQ+fHRydWU+fSAqL1xuICAgIGNvbnN0IGZlYXR1cmVzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2V9IGZlYXR1cmUgRmVhdHVyZS5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL2dlb20vU2ltcGxlR2VvbWV0cnkuanNcIikuZGVmYXVsdH0gZ2VvbWV0cnkgR2VvbWV0cnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlU3EgVGhlIHNxdWFyZWQgZGlzdGFuY2UgdG8gdGhlIGNsaWNrIHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7VHx1bmRlZmluZWR9IENhbGxiYWNrIHJlc3VsdC5cbiAgICAgKi9cbiAgICBjb25zdCBmZWF0dXJlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZ2VvbWV0cnksIGRpc3RhbmNlU3EpIHtcbiAgICAgIGNvbnN0IGtleSA9IGdldFVpZChmZWF0dXJlKTtcbiAgICAgIGNvbnN0IG1hdGNoID0gZmVhdHVyZXNba2V5XTtcbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgaWYgKGRpc3RhbmNlU3EgPT09IDApIHtcbiAgICAgICAgICBmZWF0dXJlc1trZXldID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmVhdHVyZSwgbGF5ZXIsIGdlb21ldHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaGVzLnB1c2goXG4gICAgICAgICAgKGZlYXR1cmVzW2tleV0gPSB7XG4gICAgICAgICAgICBmZWF0dXJlOiBmZWF0dXJlLFxuICAgICAgICAgICAgbGF5ZXI6IGxheWVyLFxuICAgICAgICAgICAgZ2VvbWV0cnk6IGdlb21ldHJ5LFxuICAgICAgICAgICAgZGlzdGFuY2VTcTogZGlzdGFuY2VTcSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaCAhPT0gdHJ1ZSAmJiBkaXN0YW5jZVNxIDwgbWF0Y2guZGlzdGFuY2VTcSkge1xuICAgICAgICBpZiAoZGlzdGFuY2VTcSA9PT0gMCkge1xuICAgICAgICAgIGZlYXR1cmVzW2tleV0gPSB0cnVlO1xuICAgICAgICAgIG1hdGNoZXMuc3BsaWNlKG1hdGNoZXMubGFzdEluZGV4T2YobWF0Y2gpLCAxKTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmVhdHVyZSwgbGF5ZXIsIGdlb21ldHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaC5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICBtYXRjaC5kaXN0YW5jZVNxID0gZGlzdGFuY2VTcTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIGxldCByZXN1bHQ7XG4gICAgY29uc3QgZXhlY3V0b3JHcm91cHMgPSBbdGhpcy5yZXBsYXlHcm91cF9dO1xuICAgIGlmICh0aGlzLmRlY2x1dHRlckV4ZWN1dG9yR3JvdXApIHtcbiAgICAgIGV4ZWN1dG9yR3JvdXBzLnB1c2godGhpcy5kZWNsdXR0ZXJFeGVjdXRvckdyb3VwKTtcbiAgICB9XG4gICAgZXhlY3V0b3JHcm91cHMuc29tZSgoZXhlY3V0b3JHcm91cCkgPT4ge1xuICAgICAgcmV0dXJuIChyZXN1bHQgPSBleGVjdXRvckdyb3VwLmZvckVhY2hGZWF0dXJlQXRDb29yZGluYXRlKFxuICAgICAgICBjb29yZGluYXRlLFxuICAgICAgICByZXNvbHV0aW9uLFxuICAgICAgICByb3RhdGlvbixcbiAgICAgICAgaGl0VG9sZXJhbmNlLFxuICAgICAgICBmZWF0dXJlQ2FsbGJhY2ssXG4gICAgICAgIGV4ZWN1dG9yR3JvdXAgPT09IHRoaXMuZGVjbHV0dGVyRXhlY3V0b3JHcm91cCAmJlxuICAgICAgICAgIGZyYW1lU3RhdGUuZGVjbHV0dGVyVHJlZVxuICAgICAgICAgID8gZnJhbWVTdGF0ZS5kZWNsdXR0ZXJUcmVlLmFsbCgpLm1hcCgoaXRlbSkgPT4gaXRlbS52YWx1ZSlcbiAgICAgICAgICA6IG51bGxcbiAgICAgICkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFjdGlvbiBuZWNlc3NhcnkgdG8gZ2V0IHRoZSBsYXllciByZW5kZXJlZCBhZnRlciBuZXcgZm9udHMgaGF2ZSBsb2FkZWRcbiAgICovXG4gIGhhbmRsZUZvbnRzQ2hhbmdlZCgpIHtcbiAgICBjb25zdCBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcbiAgICBpZiAobGF5ZXIuZ2V0VmlzaWJsZSgpICYmIHRoaXMucmVwbGF5R3JvdXBfKSB7XG4gICAgICBsYXllci5jaGFuZ2VkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjaGFuZ2VzIGluIGltYWdlIHN0eWxlIHN0YXRlLlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL2V2ZW50cy9FdmVudC5qc1wiKS5kZWZhdWx0fSBldmVudCBJbWFnZSBzdHlsZSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVTdHlsZUltYWdlQ2hhbmdlXyhldmVudCkge1xuICAgIHRoaXMucmVuZGVySWZSZWFkeUFuZFZpc2libGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciByZW5kZXIgc2hvdWxkIGJlIGNhbGxlZC5cbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi8uLi9NYXAuanNcIikuRnJhbWVTdGF0ZX0gZnJhbWVTdGF0ZSBGcmFtZSBzdGF0ZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gTGF5ZXIgaXMgcmVhZHkgdG8gYmUgcmVuZGVyZWQuXG4gICAqL1xuICBwcmVwYXJlRnJhbWUoZnJhbWVTdGF0ZSkge1xuICAgIGNvbnN0IHZlY3RvckxheWVyID0gdGhpcy5nZXRMYXllcigpO1xuICAgIGNvbnN0IHZlY3RvclNvdXJjZSA9IHZlY3RvckxheWVyLmdldFNvdXJjZSgpO1xuICAgIGlmICghdmVjdG9yU291cmNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgYW5pbWF0aW5nID0gZnJhbWVTdGF0ZS52aWV3SGludHNbVmlld0hpbnQuQU5JTUFUSU5HXTtcbiAgICBjb25zdCBpbnRlcmFjdGluZyA9IGZyYW1lU3RhdGUudmlld0hpbnRzW1ZpZXdIaW50LklOVEVSQUNUSU5HXTtcbiAgICBjb25zdCB1cGRhdGVXaGlsZUFuaW1hdGluZyA9IHZlY3RvckxheWVyLmdldFVwZGF0ZVdoaWxlQW5pbWF0aW5nKCk7XG4gICAgY29uc3QgdXBkYXRlV2hpbGVJbnRlcmFjdGluZyA9IHZlY3RvckxheWVyLmdldFVwZGF0ZVdoaWxlSW50ZXJhY3RpbmcoKTtcblxuICAgIGlmIChcbiAgICAgICh0aGlzLnJlYWR5ICYmICF1cGRhdGVXaGlsZUFuaW1hdGluZyAmJiBhbmltYXRpbmcpIHx8XG4gICAgICAoIXVwZGF0ZVdoaWxlSW50ZXJhY3RpbmcgJiYgaW50ZXJhY3RpbmcpXG4gICAgKSB7XG4gICAgICB0aGlzLmFuaW1hdGluZ09ySW50ZXJhY3RpbmdfID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmFuaW1hdGluZ09ySW50ZXJhY3RpbmdfID0gZmFsc2U7XG5cbiAgICBjb25zdCBmcmFtZVN0YXRlRXh0ZW50ID0gZnJhbWVTdGF0ZS5leHRlbnQ7XG4gICAgY29uc3Qgdmlld1N0YXRlID0gZnJhbWVTdGF0ZS52aWV3U3RhdGU7XG4gICAgY29uc3QgcHJvamVjdGlvbiA9IHZpZXdTdGF0ZS5wcm9qZWN0aW9uO1xuICAgIGNvbnN0IHJlc29sdXRpb24gPSB2aWV3U3RhdGUucmVzb2x1dGlvbjtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gZnJhbWVTdGF0ZS5waXhlbFJhdGlvO1xuICAgIGNvbnN0IHZlY3RvckxheWVyUmV2aXNpb24gPSB2ZWN0b3JMYXllci5nZXRSZXZpc2lvbigpO1xuICAgIGNvbnN0IHZlY3RvckxheWVyUmVuZGVyQnVmZmVyID0gdmVjdG9yTGF5ZXIuZ2V0UmVuZGVyQnVmZmVyKCk7XG4gICAgbGV0IHZlY3RvckxheWVyUmVuZGVyT3JkZXIgPSB2ZWN0b3JMYXllci5nZXRSZW5kZXJPcmRlcigpO1xuXG4gICAgaWYgKHZlY3RvckxheWVyUmVuZGVyT3JkZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmVjdG9yTGF5ZXJSZW5kZXJPcmRlciA9IGRlZmF1bHRSZW5kZXJPcmRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBjZW50ZXIgPSB2aWV3U3RhdGUuY2VudGVyLnNsaWNlKCk7XG4gICAgY29uc3QgZXh0ZW50ID0gYnVmZmVyKFxuICAgICAgZnJhbWVTdGF0ZUV4dGVudCxcbiAgICAgIHZlY3RvckxheWVyUmVuZGVyQnVmZmVyICogcmVzb2x1dGlvblxuICAgICk7XG4gICAgY29uc3QgcmVuZGVyZWRFeHRlbnQgPSBleHRlbnQuc2xpY2UoKTtcbiAgICBjb25zdCBsb2FkRXh0ZW50cyA9IFtleHRlbnQuc2xpY2UoKV07XG4gICAgY29uc3QgcHJvamVjdGlvbkV4dGVudCA9IHByb2plY3Rpb24uZ2V0RXh0ZW50KCk7XG5cbiAgICBpZiAoXG4gICAgICB2ZWN0b3JTb3VyY2UuZ2V0V3JhcFgoKSAmJlxuICAgICAgcHJvamVjdGlvbi5jYW5XcmFwWCgpICYmXG4gICAgICAhY29udGFpbnNFeHRlbnQocHJvamVjdGlvbkV4dGVudCwgZnJhbWVTdGF0ZS5leHRlbnQpXG4gICAgKSB7XG4gICAgICAvLyBGb3IgdGhlIHJlcGxheSBncm91cCwgd2UgbmVlZCBhbiBleHRlbnQgdGhhdCBpbnRlcnNlY3RzIHRoZSByZWFsIHdvcmxkXG4gICAgICAvLyAoLTE4MMKwIHRvICsxODDCsCkuIFRvIHN1cHBvcnQgZ2VvbWV0cmllcyBpbiBhIGNvb3JkaW5hdGUgcmFuZ2UgZnJvbSAtNTQwwrBcbiAgICAgIC8vIHRvICs1NDDCsCwgd2UgYWRkIGF0IGxlYXN0IDEgd29ybGQgd2lkdGggb24gZWFjaCBzaWRlIG9mIHRoZSBwcm9qZWN0aW9uXG4gICAgICAvLyBleHRlbnQuIElmIHRoZSB2aWV3cG9ydCBpcyB3aWRlciB0aGFuIHRoZSB3b3JsZCwgd2UgbmVlZCB0byBhZGQgaGFsZiBvZlxuICAgICAgLy8gdGhlIHZpZXdwb3J0IHdpZHRoIHRvIG1ha2Ugc3VyZSB3ZSBjb3ZlciB0aGUgd2hvbGUgdmlld3BvcnQuXG4gICAgICBjb25zdCB3b3JsZFdpZHRoID0gZ2V0V2lkdGgocHJvamVjdGlvbkV4dGVudCk7XG4gICAgICBjb25zdCBndXR0ZXIgPSBNYXRoLm1heChnZXRXaWR0aChleHRlbnQpIC8gMiwgd29ybGRXaWR0aCk7XG4gICAgICBleHRlbnRbMF0gPSBwcm9qZWN0aW9uRXh0ZW50WzBdIC0gZ3V0dGVyO1xuICAgICAgZXh0ZW50WzJdID0gcHJvamVjdGlvbkV4dGVudFsyXSArIGd1dHRlcjtcbiAgICAgIHdyYXBDb29yZGluYXRlWChjZW50ZXIsIHByb2plY3Rpb24pO1xuICAgICAgY29uc3QgbG9hZEV4dGVudCA9IHdyYXBFeHRlbnRYKGxvYWRFeHRlbnRzWzBdLCBwcm9qZWN0aW9uKTtcbiAgICAgIC8vIElmIHRoZSBleHRlbnQgY3Jvc3NlcyB0aGUgZGF0ZSBsaW5lLCB3ZSBsb2FkIGRhdGEgZm9yIGJvdGggZWRnZXMgb2YgdGhlIHdvcmxkc1xuICAgICAgaWYgKFxuICAgICAgICBsb2FkRXh0ZW50WzBdIDwgcHJvamVjdGlvbkV4dGVudFswXSAmJlxuICAgICAgICBsb2FkRXh0ZW50WzJdIDwgcHJvamVjdGlvbkV4dGVudFsyXVxuICAgICAgKSB7XG4gICAgICAgIGxvYWRFeHRlbnRzLnB1c2goW1xuICAgICAgICAgIGxvYWRFeHRlbnRbMF0gKyB3b3JsZFdpZHRoLFxuICAgICAgICAgIGxvYWRFeHRlbnRbMV0sXG4gICAgICAgICAgbG9hZEV4dGVudFsyXSArIHdvcmxkV2lkdGgsXG4gICAgICAgICAgbG9hZEV4dGVudFszXSxcbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBsb2FkRXh0ZW50WzBdID4gcHJvamVjdGlvbkV4dGVudFswXSAmJlxuICAgICAgICBsb2FkRXh0ZW50WzJdID4gcHJvamVjdGlvbkV4dGVudFsyXVxuICAgICAgKSB7XG4gICAgICAgIGxvYWRFeHRlbnRzLnB1c2goW1xuICAgICAgICAgIGxvYWRFeHRlbnRbMF0gLSB3b3JsZFdpZHRoLFxuICAgICAgICAgIGxvYWRFeHRlbnRbMV0sXG4gICAgICAgICAgbG9hZEV4dGVudFsyXSAtIHdvcmxkV2lkdGgsXG4gICAgICAgICAgbG9hZEV4dGVudFszXSxcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5yZWFkeSAmJlxuICAgICAgdGhpcy5yZW5kZXJlZFJlc29sdXRpb25fID09IHJlc29sdXRpb24gJiZcbiAgICAgIHRoaXMucmVuZGVyZWRSZXZpc2lvbl8gPT0gdmVjdG9yTGF5ZXJSZXZpc2lvbiAmJlxuICAgICAgdGhpcy5yZW5kZXJlZFJlbmRlck9yZGVyXyA9PSB2ZWN0b3JMYXllclJlbmRlck9yZGVyICYmXG4gICAgICBjb250YWluc0V4dGVudCh0aGlzLndyYXBwZWRSZW5kZXJlZEV4dGVudF8sIGV4dGVudClcbiAgICApIHtcbiAgICAgIGlmICghZXF1YWxzKHRoaXMucmVuZGVyZWRFeHRlbnRfLCByZW5kZXJlZEV4dGVudCkpIHtcbiAgICAgICAgdGhpcy5oaXREZXRlY3Rpb25JbWFnZURhdGFfID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZW5kZXJlZEV4dGVudF8gPSByZW5kZXJlZEV4dGVudDtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyZWRDZW50ZXJfID0gY2VudGVyO1xuICAgICAgdGhpcy5yZXBsYXlHcm91cENoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucmVwbGF5R3JvdXBfID0gbnVsbDtcblxuICAgIGNvbnN0IHJlcGxheUdyb3VwID0gbmV3IENhbnZhc0J1aWxkZXJHcm91cChcbiAgICAgIGdldFJlbmRlclRvbGVyYW5jZShyZXNvbHV0aW9uLCBwaXhlbFJhdGlvKSxcbiAgICAgIGV4dGVudCxcbiAgICAgIHJlc29sdXRpb24sXG4gICAgICBwaXhlbFJhdGlvXG4gICAgKTtcblxuICAgIGxldCBkZWNsdXR0ZXJCdWlsZGVyR3JvdXA7XG4gICAgaWYgKHRoaXMuZ2V0TGF5ZXIoKS5nZXREZWNsdXR0ZXIoKSkge1xuICAgICAgZGVjbHV0dGVyQnVpbGRlckdyb3VwID0gbmV3IENhbnZhc0J1aWxkZXJHcm91cChcbiAgICAgICAgZ2V0UmVuZGVyVG9sZXJhbmNlKHJlc29sdXRpb24sIHBpeGVsUmF0aW8pLFxuICAgICAgICBleHRlbnQsXG4gICAgICAgIHJlc29sdXRpb24sXG4gICAgICAgIHBpeGVsUmF0aW9cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlclByb2plY3Rpb24gPSBnZXRVc2VyUHJvamVjdGlvbigpO1xuICAgIGxldCB1c2VyVHJhbnNmb3JtO1xuICAgIGlmICh1c2VyUHJvamVjdGlvbikge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbG9hZEV4dGVudHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBjb25zdCBleHRlbnQgPSBsb2FkRXh0ZW50c1tpXTtcbiAgICAgICAgY29uc3QgdXNlckV4dGVudCA9IHRvVXNlckV4dGVudChleHRlbnQsIHByb2plY3Rpb24pO1xuICAgICAgICB2ZWN0b3JTb3VyY2UubG9hZEZlYXR1cmVzKFxuICAgICAgICAgIHVzZXJFeHRlbnQsXG4gICAgICAgICAgdG9Vc2VyUmVzb2x1dGlvbihyZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSxcbiAgICAgICAgICB1c2VyUHJvamVjdGlvblxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdXNlclRyYW5zZm9ybSA9IGdldFRyYW5zZm9ybUZyb21Qcm9qZWN0aW9ucyh1c2VyUHJvamVjdGlvbiwgcHJvamVjdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGxvYWRFeHRlbnRzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgdmVjdG9yU291cmNlLmxvYWRGZWF0dXJlcyhsb2FkRXh0ZW50c1tpXSwgcmVzb2x1dGlvbiwgcHJvamVjdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3F1YXJlZFRvbGVyYW5jZSA9IGdldFNxdWFyZWRSZW5kZXJUb2xlcmFuY2UocmVzb2x1dGlvbiwgcGl4ZWxSYXRpbyk7XG4gICAgbGV0IHJlYWR5ID0gdHJ1ZTtcbiAgICBjb25zdCByZW5kZXIgPVxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL0ZlYXR1cmUuanNcIikuZGVmYXVsdH0gZmVhdHVyZSBGZWF0dXJlLlxuICAgICAgICovXG4gICAgICAoZmVhdHVyZSkgPT4ge1xuICAgICAgICBsZXQgc3R5bGVzO1xuICAgICAgICBjb25zdCBzdHlsZUZ1bmN0aW9uID1cbiAgICAgICAgICBmZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKSB8fCB2ZWN0b3JMYXllci5nZXRTdHlsZUZ1bmN0aW9uKCk7XG4gICAgICAgIGlmIChzdHlsZUZ1bmN0aW9uKSB7XG4gICAgICAgICAgc3R5bGVzID0gc3R5bGVGdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgICAgY29uc3QgZGlydHkgPSB0aGlzLnJlbmRlckZlYXR1cmUoXG4gICAgICAgICAgICBmZWF0dXJlLFxuICAgICAgICAgICAgc3F1YXJlZFRvbGVyYW5jZSxcbiAgICAgICAgICAgIHN0eWxlcyxcbiAgICAgICAgICAgIHJlcGxheUdyb3VwLFxuICAgICAgICAgICAgdXNlclRyYW5zZm9ybSxcbiAgICAgICAgICAgIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVhZHkgPSByZWFkeSAmJiAhZGlydHk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICBjb25zdCB1c2VyRXh0ZW50ID0gdG9Vc2VyRXh0ZW50KGV4dGVudCwgcHJvamVjdGlvbik7XG4gICAgLyoqIEB0eXBlIHtBcnJheTxpbXBvcnQoXCIuLi8uLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHQ+fSAqL1xuICAgIGNvbnN0IGZlYXR1cmVzID0gdmVjdG9yU291cmNlLmdldEZlYXR1cmVzSW5FeHRlbnQodXNlckV4dGVudCk7XG4gICAgaWYgKHZlY3RvckxheWVyUmVuZGVyT3JkZXIpIHtcbiAgICAgIGZlYXR1cmVzLnNvcnQodmVjdG9yTGF5ZXJSZW5kZXJPcmRlcik7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGZlYXR1cmVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIHJlbmRlcihmZWF0dXJlc1tpXSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyZWRGZWF0dXJlc18gPSBmZWF0dXJlcztcbiAgICB0aGlzLnJlYWR5ID0gcmVhZHk7XG5cbiAgICBjb25zdCByZXBsYXlHcm91cEluc3RydWN0aW9ucyA9IHJlcGxheUdyb3VwLmZpbmlzaCgpO1xuICAgIGNvbnN0IGV4ZWN1dG9yR3JvdXAgPSBuZXcgRXhlY3V0b3JHcm91cChcbiAgICAgIGV4dGVudCxcbiAgICAgIHJlc29sdXRpb24sXG4gICAgICBwaXhlbFJhdGlvLFxuICAgICAgdmVjdG9yU291cmNlLmdldE92ZXJsYXBzKCksXG4gICAgICByZXBsYXlHcm91cEluc3RydWN0aW9ucyxcbiAgICAgIHZlY3RvckxheWVyLmdldFJlbmRlckJ1ZmZlcigpXG4gICAgKTtcblxuICAgIGlmIChkZWNsdXR0ZXJCdWlsZGVyR3JvdXApIHtcbiAgICAgIHRoaXMuZGVjbHV0dGVyRXhlY3V0b3JHcm91cCA9IG5ldyBFeGVjdXRvckdyb3VwKFxuICAgICAgICBleHRlbnQsXG4gICAgICAgIHJlc29sdXRpb24sXG4gICAgICAgIHBpeGVsUmF0aW8sXG4gICAgICAgIHZlY3RvclNvdXJjZS5nZXRPdmVybGFwcygpLFxuICAgICAgICBkZWNsdXR0ZXJCdWlsZGVyR3JvdXAuZmluaXNoKCksXG4gICAgICAgIHZlY3RvckxheWVyLmdldFJlbmRlckJ1ZmZlcigpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWRSZXNvbHV0aW9uXyA9IHJlc29sdXRpb247XG4gICAgdGhpcy5yZW5kZXJlZFJldmlzaW9uXyA9IHZlY3RvckxheWVyUmV2aXNpb247XG4gICAgdGhpcy5yZW5kZXJlZFJlbmRlck9yZGVyXyA9IHZlY3RvckxheWVyUmVuZGVyT3JkZXI7XG4gICAgdGhpcy5yZW5kZXJlZEV4dGVudF8gPSByZW5kZXJlZEV4dGVudDtcbiAgICB0aGlzLndyYXBwZWRSZW5kZXJlZEV4dGVudF8gPSBleHRlbnQ7XG4gICAgdGhpcy5yZW5kZXJlZENlbnRlcl8gPSBjZW50ZXI7XG4gICAgdGhpcy5yZW5kZXJlZFByb2plY3Rpb25fID0gcHJvamVjdGlvbjtcbiAgICB0aGlzLnJlcGxheUdyb3VwXyA9IGV4ZWN1dG9yR3JvdXA7XG4gICAgdGhpcy5oaXREZXRlY3Rpb25JbWFnZURhdGFfID0gbnVsbDtcblxuICAgIHRoaXMucmVwbGF5R3JvdXBDaGFuZ2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uLy4uL0ZlYXR1cmUuanNcIikuZGVmYXVsdH0gZmVhdHVyZSBGZWF0dXJlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3F1YXJlZFRvbGVyYW5jZSBTcXVhcmVkIHJlbmRlciB0b2xlcmFuY2UuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vc3R5bGUvU3R5bGUuanNcIikuZGVmYXVsdHxBcnJheTxpbXBvcnQoXCIuLi8uLi9zdHlsZS9TdHlsZS5qc1wiKS5kZWZhdWx0Pn0gc3R5bGVzIFRoZSBzdHlsZSBvciBhcnJheSBvZiBzdHlsZXMuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gYnVpbGRlckdyb3VwIEJ1aWxkZXIgZ3JvdXAuXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vcHJvai5qc1wiKS5UcmFuc2Zvcm1GdW5jdGlvbn0gW3RyYW5zZm9ybV0gVHJhbnNmb3JtIGZyb20gdXNlciB0byB2aWV3IHByb2plY3Rpb24uXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vLi4vcmVuZGVyL2NhbnZhcy9CdWlsZGVyR3JvdXAuanNcIikuZGVmYXVsdH0gW2RlY2x1dHRlckJ1aWxkZXJHcm91cF0gQnVpbGRlciBmb3IgZGVjbHV0dGVyaW5nLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYW4gaW1hZ2UgaXMgbG9hZGluZy5cbiAgICovXG4gIHJlbmRlckZlYXR1cmUoXG4gICAgZmVhdHVyZSxcbiAgICBzcXVhcmVkVG9sZXJhbmNlLFxuICAgIHN0eWxlcyxcbiAgICBidWlsZGVyR3JvdXAsXG4gICAgdHJhbnNmb3JtLFxuICAgIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuICApIHtcbiAgICBpZiAoIXN0eWxlcykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgbG9hZGluZyA9IGZhbHNlO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0eWxlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIGxvYWRpbmcgPVxuICAgICAgICAgIHJlbmRlckZlYXR1cmUoXG4gICAgICAgICAgICBidWlsZGVyR3JvdXAsXG4gICAgICAgICAgICBmZWF0dXJlLFxuICAgICAgICAgICAgc3R5bGVzW2ldLFxuICAgICAgICAgICAgc3F1YXJlZFRvbGVyYW5jZSxcbiAgICAgICAgICAgIHRoaXMuYm91bmRIYW5kbGVTdHlsZUltYWdlQ2hhbmdlXyxcbiAgICAgICAgICAgIHRyYW5zZm9ybSxcbiAgICAgICAgICAgIGRlY2x1dHRlckJ1aWxkZXJHcm91cFxuICAgICAgICAgICkgfHwgbG9hZGluZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9hZGluZyA9IHJlbmRlckZlYXR1cmUoXG4gICAgICAgIGJ1aWxkZXJHcm91cCxcbiAgICAgICAgZmVhdHVyZSxcbiAgICAgICAgc3R5bGVzLFxuICAgICAgICBzcXVhcmVkVG9sZXJhbmNlLFxuICAgICAgICB0aGlzLmJvdW5kSGFuZGxlU3R5bGVJbWFnZUNoYW5nZV8sXG4gICAgICAgIHRyYW5zZm9ybSxcbiAgICAgICAgZGVjbHV0dGVyQnVpbGRlckdyb3VwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbG9hZGluZztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW52YXNWZWN0b3JMYXllclJlbmRlcmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60883\n')}}]);